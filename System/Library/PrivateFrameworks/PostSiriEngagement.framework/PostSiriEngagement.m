void PSEMediaSELFEmitter.emitPSEMedia(mediaSignals:appLaunchSignals:task:)(uint64_t (*a1)(_QWORD, _QWORD), unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  unint64_t v29;
  uint64_t (*v30)(void);
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  int v53;
  double v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  double v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  __n128 v70;
  uint64_t v71;
  uint64_t (*v72)(void);
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  unint64_t v78;
  void *v79;
  id v80;
  char *v81;
  id v82;
  Class isa;
  id v84;
  uint64_t v85;
  void (*v86)(char *, _QWORD *);
  _QWORD *v87;
  id v88;
  _QWORD *v89;
  unsigned int (*v90)(char *, uint64_t, _QWORD *);
  uint64_t v91;
  void (*v92)(char *, char *, _QWORD *);
  char *v93;
  id v94;
  Class v95;
  id v96;
  char *v97;
  uint64_t (*v98)(_QWORD, _QWORD);
  uint64_t v99;
  _QWORD *v100;
  unsigned int (*v101)(uint64_t, uint64_t, _QWORD *);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  id v107;
  Class v108;
  id v109;
  char *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  id v118;
  Class v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  id v131;
  char *v132;
  Class v133;
  uint64_t v134;
  double v135;
  unint64_t v136;
  uint64_t (*v137)(void);
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  id v144;
  id v145;
  id v146;
  id v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  uint64_t v154;
  id v155;
  double v156;
  _QWORD *v157;
  __int128 v158;
  __int128 v159;

  v153 = (unint64_t)a1;
  v154 = a3;
  v5 = type metadata accessor for ReliabilityCategory();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v150 = (char *)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v149 = (char *)&v134 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v134 - v14;
  v16 = (_QWORD *)type metadata accessor for UUID();
  v151 = *(v16 - 1);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v134 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v148 = (char *)&v134 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v134 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v152 = (char *)&v134 - v25;
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E0]), sel_init);
  if (!v26)
    goto LABEL_22;
  v155 = v26;
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E8]), sel_init);
  if (!v27)
  {
    v42 = v155;
LABEL_21:

    goto LABEL_22;
  }
  v147 = v27;
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95938]), sel_init);
  if (!v28)
  {

    v42 = v147;
    goto LABEL_21;
  }
  v145 = v28;
  v146 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958F0]), sel_init);
  if (!v146)
  {

    v42 = v145;
    goto LABEL_21;
  }
  v144 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95928]), sel_init);
  if (!v144)
  {

    v42 = v146;
    goto LABEL_21;
  }
  v138 = v24;
  v29 = v153;
  v139 = v153 >> 62;
  if (v153 >> 62)
  {
    swift_bridgeObjectRetain();
    v29 = v153;
    v30 = (uint64_t (*)(void))_CocoaArrayWrapper.endIndex.getter();
    v31 = v155;
    if (v30)
    {
LABEL_8:
      v136 = v29 & 0xC000000000000001;
      v142 = v16;
      v143 = v3;
      v140 = v19;
      v137 = v30;
      if ((v29 & 0xC000000000000001) != 0)
      {
        v32 = MEMORY[0x219A2756C](0, v29);
      }
      else
      {
        if (!*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_51;
        }
        v32 = *(_QWORD *)(v29 + 32);
        swift_retain();
      }
      v33 = swift_bridgeObjectRelease();
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v32 + 120))(&v158, v33);
      v34 = v146;
      v35 = (*(uint64_t (**)(id))(*(_QWORD *)v32 + 144))(objc_msgSend(v146, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v158));
      v36 = (void *)MEMORY[0x219A27218](v35);
      swift_bridgeObjectRelease();
      objc_msgSend(v34, sel_setDomain_, v36);

      v37 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 168))();
      v16 = (_QWORD *)MEMORY[0x219A27218](v37);
      swift_bridgeObjectRelease();
      objc_msgSend(v34, sel_setAction_, v16);

      v30 = *(uint64_t (**)(void))(*(_QWORD *)v32 + 216);
      v141 = v32;
      v38 = v30();
      if (*(_QWORD *)(v38 + 16)
        && (v39 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
            (v40 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v38 + 56) + 32 * v39, (uint64_t)&v158);
        swift_bridgeObjectRelease();
        v29 = (unint64_t)v143;
        if (*((_QWORD *)&v159 + 1))
        {
          if (swift_dynamicCast())
            v41 = LOBYTE(v156);
          else
            v41 = 2;
LABEL_27:
          v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 104))(v41);
          objc_msgSend(v146, sel_setIsDonatedBySiri_, v46);
          if (!(a2 >> 62))
          {
            v47 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v47)
            {
LABEL_29:
              if ((a2 & 0xC000000000000001) != 0)
              {
                v48 = MEMORY[0x219A2756C](0, a2);
              }
              else
              {
                if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
                  goto LABEL_105;
                }
                v48 = *(_QWORD *)(a2 + 32);
                swift_retain();
              }
              v49 = swift_bridgeObjectRelease();
              (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v48 + 120))(&v158, v49);
              v50 = (*(uint64_t (**)(id))(*(_QWORD *)v48 + 216))(objc_msgSend(v146, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v158));
              if (*(_QWORD *)(v50 + 16)
                && (v51 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FBEF40),
                    (v52 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v50 + 56) + 32 * v51, (uint64_t)&v158);
              }
              else
              {
                v158 = 0u;
                v159 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v159 + 1))
              {
                v53 = swift_dynamicCast();
                v54 = v156;
                if (!v53)
                  v54 = 0.0;
                v135 = v54;
                if (v53)
                  v16 = v157;
                else
                  v16 = 0;
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v158, &demangling cache variable for type metadata for Any?);
                v135 = 0.0;
                v16 = 0;
              }
              v55 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v154 + 224))();
              if (v55[2])
              {
                v56 = v55[5];
                v134 = v55[4];
                swift_bridgeObjectRetain();
              }
              else
              {
                v134 = 0;
                v56 = 0;
              }
              swift_bridgeObjectRelease();
              v57 = (*(uint64_t (**)(double, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v29 + 120))(COERCE_DOUBLE(*(_QWORD *)&v135), v16, v134, v56);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v58 = v146;
              v59 = (*(uint64_t (**)(id))(*(_QWORD *)v48 + 168))(objc_msgSend(v146, sel_setAppFollowup_, v57));
              v60 = (*(uint64_t (**)(uint64_t))(*v143 + 136))(v59);
              swift_bridgeObjectRelease();
              v61 = v58;
              v29 = (unint64_t)v143;
              objc_msgSend(v61, sel_setAppLaunchReason_, v60);
              v62 = (id)swift_release();
LABEL_53:
              v63 = ((uint64_t (*)(id))v30)(v62);
              if (*(_QWORD *)(v63 + 16)
                && (v64 = specialized __RawDictionaryStorage.find<A>(_:)(0x6172754479616C70, 0xEC0000006E6F6974),
                    (v65 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v63 + 56) + 32 * v64, (uint64_t)&v158);
              }
              else
              {
                v158 = 0u;
                v159 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v159 + 1))
              {
                if ((swift_dynamicCast() & 1) != 0)
                {
                  v66 = fmin(v156, 30.0);
LABEL_62:
                  v67 = ((uint64_t (*)(id))v30)(objc_msgSend(v144, sel_setPlayDurationInSeconds_, v66, v134));
                  if (*(_QWORD *)(v67 + 16)
                    && (v68 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FBEF60),
                        (v69 & 1) != 0))
                  {
                    outlined init with copy of Any(*(_QWORD *)(v67 + 56) + 32 * v68, (uint64_t)&v158);
                  }
                  else
                  {
                    v158 = 0u;
                    v159 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v159 + 1))
                  {
                    if (swift_dynamicCast())
                    {
                      v70.n128_f64[0] = v156;
                      goto LABEL_71;
                    }
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v158, &demangling cache variable for type metadata for Any?);
                  }
                  v70.n128_u64[0] = 0;
LABEL_71:
                  objc_msgSend(v144, sel_setMediaContentDurationBucket_, (*(uint64_t (**)(__n128))(*(_QWORD *)v29 + 184))(v70));
                  if (v139)
                  {
                    swift_bridgeObjectRetain();
                    v71 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    v71 = *(_QWORD *)((v153 & 0xFFFFFFFFFFFFF8) + 0x10);
                  }
                  v72 = v137;
                  if (v71 < 2)
                    goto LABEL_83;
                  v73 = (unint64_t)v137 - 1;
                  if (!__OFSUB__(v137, 1))
                  {
                    if (v136)
                    {
                      v74 = v153;
                      swift_bridgeObjectRetain();
                      v75 = MEMORY[0x219A2756C]((char *)v72 - 1, v74);
                      v76 = swift_bridgeObjectRelease();
LABEL_81:
                      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v75 + 120))(&v158, v76);
                      if (*((double *)&v158 + 1) <= 30.0)
                      {
                        v78 = v29;
                        v77 = v146;
                        objc_msgSend(v146, sel_setHasUserInitiatedFollowup_, 1, *((double *)&v158 + 1));
                        v79 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 160))(v141, v75);
                        objc_msgSend(v144, sel_setLastMediaUserFollowupAction_, v79);
                        swift_release();

LABEL_85:
                        v80 = v145;
                        objc_msgSend(v145, sel_setCommonSignal_, v77);
                        objc_msgSend(v80, sel_setMediaSignal_, v144);
                        v81 = v152;
                        UUID.init()();
                        v82 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                        isa = UUID._bridgeToObjectiveC()().super.isa;
                        v84 = objc_msgSend(v82, sel_initWithNSUUID_, isa);

                        v85 = v151;
                        v86 = *(void (**)(char *, _QWORD *))(v151 + 8);
                        v87 = v142;
                        v86(v81, v142);
                        v88 = v147;
                        objc_msgSend(v147, sel_setPseId_, v84);

                        (*(void (**)(void))(*(_QWORD *)v154 + 152))();
                        UUID.init(uuidString:)();
                        swift_bridgeObjectRelease();
                        v89 = v87;
                        v90 = *(unsigned int (**)(char *, uint64_t, _QWORD *))(v85 + 48);
                        if (v90(v15, 1, v89) == 1)
                        {
                          v91 = outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
                        }
                        else
                        {
                          v92 = *(void (**)(char *, char *, _QWORD *))(v85 + 32);
                          v93 = v138;
                          v92(v138, v15, v89);
                          v94 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                          v95 = UUID._bridgeToObjectiveC()().super.isa;
                          v96 = objc_msgSend(v94, sel_initWithNSUUID_, v95);

                          objc_msgSend(v88, sel_setUiSessionId_, v96);
                          v91 = ((uint64_t (*)(char *, _QWORD *))v86)(v93, v89);
                        }
                        v97 = v140;
                        v98 = (uint64_t (*)(_QWORD, _QWORD))v86;
                        if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 200))(v91) + 16))
                        {
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRelease();
                          v99 = (uint64_t)v149;
                          UUID.init(uuidString:)();
                          swift_bridgeObjectRelease();
                          v100 = v142;
                          if (v90((char *)v99, 1, v142) != 1)
                          {
                            v101 = (unsigned int (*)(uint64_t, uint64_t, _QWORD *))v90;
                            v106 = v148;
                            (*(void (**)(char *, uint64_t, _QWORD *))(v151 + 32))(v148, v99, v100);
                            v107 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                            v108 = UUID._bridgeToObjectiveC()().super.isa;
                            v109 = objc_msgSend(v107, sel_initWithNSUUID_, v108);

                            objc_msgSend(v147, sel_setOriginalLastRequestId_, v109);
                            v110 = v106;
                            v98 = (uint64_t (*)(_QWORD, _QWORD))v86;
                            v105 = ((uint64_t (*)(char *, _QWORD *))v86)(v110, v100);
                            v97 = v140;
                            goto LABEL_96;
                          }
                          outlined destroy of Any?(v99, &demangling cache variable for type metadata for UUID?);
                          v97 = v140;
                        }
                        else
                        {
                          swift_bridgeObjectRelease();
                        }
                        if (one-time initialization token for engagement != -1)
                          swift_once();
                        v101 = (unsigned int (*)(uint64_t, uint64_t, _QWORD *))v90;
                        v102 = type metadata accessor for Logger();
                        __swift_project_value_buffer(v102, (uint64_t)static Logger.engagement);
                        v103 = *MEMORY[0x24BEA7F28];
                        v104 = type metadata accessor for EngagementSignalCollectionError();
                        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 104))(v8, v103, v104);
                        (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA8030], v5);
                        Logger.debug(_:_:)(0xD000000000000027, 0x8000000218FBEF80, (uint64_t)v8);
                        v105 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_96:
                        v153 = (unint64_t)v98;
                        (*(void (**)(uint64_t))(*(_QWORD *)v154 + 176))(v105);
                        v111 = (uint64_t)v150;
                        UUID.init(uuidString:)();
                        swift_bridgeObjectRelease();
                        v112 = v142;
                        if (v101(v111, 1, v142) != 1)
                        {
                          v16 = &unk_253F31000;
                          (*(void (**)(char *, uint64_t, _QWORD *))(v151 + 32))(v97, v111, v112);
                          v118 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                          v119 = UUID._bridgeToObjectiveC()().super.isa;
                          v120 = objc_msgSend(v118, sel_initWithNSUUID_, v119);

                          v117 = v147;
                          objc_msgSend(v147, sel_setTaskId_, v120);

                          v116 = ((uint64_t (*)(char *, _QWORD *))v153)(v97, v112);
                          goto LABEL_100;
                        }
                        outlined destroy of Any?(v111, &demangling cache variable for type metadata for UUID?);
                        v16 = &unk_253F31000;
                        if (one-time initialization token for engagement == -1)
                        {
LABEL_98:
                          v113 = type metadata accessor for Logger();
                          __swift_project_value_buffer(v113, (uint64_t)static Logger.engagement);
                          v114 = *MEMORY[0x24BEA7F10];
                          v115 = type metadata accessor for EngagementSignalCollectionError();
                          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 104))(v8, v114, v115);
                          (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA8030], v5);
                          Logger.debug(_:_:)(0xD000000000000024, 0x8000000218FBEFB0, (uint64_t)v8);
                          v116 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                          v112 = v142;
                          v117 = v147;
LABEL_100:
                          v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 296))(v116);
                          v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 104))(v121);
                          swift_release();
                          v123 = v143;
                          v124 = objc_msgSend(v117, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*v143 + 96))(v122));
                          objc_msgSend(v117, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*v123 + 112))(v124));
                          v125 = v155;
                          objc_msgSend(v155, sel_setEventMetadata_, v117);
                          v126 = v145;
                          objc_msgSend(v125, sel_setMediaSignalGenerated_, v145);
                          if (v16[458] != -1)
                            swift_once();
                          v127 = type metadata accessor for Logger();
                          __swift_project_value_buffer(v127, (uint64_t)static Logger.engagement);
                          v128 = *MEMORY[0x24BEA7F98];
                          v129 = type metadata accessor for SELFPSELogged();
                          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 104))(v8, v128, v129);
                          (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA7FE0], v5);
                          Logger.debug(_:_:)(0xD000000000000035, 0x8000000218FBEFE0, (uint64_t)v8);
                          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                          v130 = objc_msgSend((id)objc_opt_self(), sel_sharedAnalytics);
                          v131 = objc_msgSend(v130, sel_defaultMessageStream);

                          v132 = v152;
                          UUID.init()();
                          v133 = UUID._bridgeToObjectiveC()().super.isa;
                          ((void (*)(char *, _QWORD *))v153)(v132, v112);
                          objc_msgSend(v131, sel_emitMessage_isolatedStreamUUID_, v125, v133);

                          swift_release();
                          return;
                        }
LABEL_106:
                        swift_once();
                        goto LABEL_98;
                      }
                      swift_release();
LABEL_83:
                      v77 = v146;
                      objc_msgSend(v146, sel_setHasUserInitiatedFollowup_, 0);
                      goto LABEL_85;
                    }
                    if ((v73 & 0x8000000000000000) != 0)
                    {
                      __break(1u);
                    }
                    else if (v73 < *(_QWORD *)((v153 & 0xFFFFFFFFFFFFF8) + 0x10))
                    {
                      v75 = *(_QWORD *)(v153 + 8 * v73 + 32);
                      v76 = swift_retain();
                      goto LABEL_81;
                    }
                    __break(1u);
                    return;
                  }
LABEL_105:
                  __break(1u);
                  goto LABEL_106;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v158, &demangling cache variable for type metadata for Any?);
              }
              v66 = -1.0;
              goto LABEL_62;
            }
LABEL_52:
            swift_bridgeObjectRelease();
            v62 = objc_msgSend(v146, sel_setAppFollowup_, 3);
            goto LABEL_53;
          }
LABEL_51:
          swift_bridgeObjectRetain();
          if (_CocoaArrayWrapper.endIndex.getter())
            goto LABEL_29;
          goto LABEL_52;
        }
      }
      else
      {
        v158 = 0u;
        v159 = 0u;
        swift_bridgeObjectRelease();
        v29 = (unint64_t)v143;
      }
      outlined destroy of Any?((uint64_t)&v158, &demangling cache variable for type metadata for Any?);
      v41 = 2;
      goto LABEL_27;
    }
  }
  else
  {
    v30 = *(uint64_t (**)(void))((v153 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v31 = v155;
    if (v30)
      goto LABEL_8;
  }

  swift_bridgeObjectRelease();
LABEL_22:
  if (one-time initialization token for engagement != -1)
    swift_once();
  v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static Logger.engagement);
  v44 = *MEMORY[0x24BEA7EF8];
  v45 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v8, v44, v45);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA8030], v5);
  Logger.debug(_:_:)(0xD000000000000034, 0x8000000218FBEF00, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id PSEMediaSELFEmitter.getLastMediaUserFollowupAction(firstMediaSignal:mediaUserFollowupSignal:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  unint64_t v12;
  char v13;
  __n128 v14;
  id v15;
  uint64_t (*v16)(id);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;

  v3 = v2;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95940]), sel_init);
  if (v6)
  {
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 168))();
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 192))(v7);
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v6, sel_setState_, v8);
    v10 = *(uint64_t (**)(void))(*(_QWORD *)a2 + 216);
    v11 = ((uint64_t (*)(id))v10)(v9);
    if (*(_QWORD *)(v11 + 16)
      && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FBEF60),
          (v13 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v44);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v45 + 1))
      {
        if (swift_dynamicCast())
        {
          v14.n128_u64[0] = v42;
LABEL_10:
          v15 = objc_msgSend(v6, sel_setMediaContentDurationBucket_, (*(uint64_t (**)(__n128))(*(_QWORD *)v3 + 184))(v14));
          v16 = *(uint64_t (**)(id))(*(_QWORD *)a1 + 216);
          v17 = v16(v15);
          v18 = v10();
          v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 168))(v17, v18);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v20 = ((uint64_t (*)(id))v10)(objc_msgSend(v6, sel_setIsSameAppUsed_, v19 & 1));
          if (*(_QWORD *)(v20 + 16)
            && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000218FBF020),
                (v22 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v21, (uint64_t)&v44);
          }
          else
          {
            v44 = 0u;
            v45 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((_QWORD *)&v45 + 1))
          {
            if (swift_dynamicCast())
            {
              v23 = v42;
LABEL_19:
              v24 = ((uint64_t (*)(id))v10)(objc_msgSend(v6, sel_setIsFirstPartyAppUsedForFollowup_, v23));
              if (*(_QWORD *)(v24 + 16)
                && (v25 = specialized __RawDictionaryStorage.find<A>(_:)(0x616C507269417369, 0xE900000000000079),
                    (v26 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v24 + 56) + 32 * v25, (uint64_t)&v44);
              }
              else
              {
                v44 = 0u;
                v45 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v45 + 1))
              {
                if (swift_dynamicCast())
                {
                  v27 = v42;
LABEL_28:
                  v28 = ((uint64_t (*)(id))v10)(objc_msgSend(v6, sel_setIsAirPlay_, v27));
                  if (*(_QWORD *)(v28 + 16)
                    && (v29 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000218FBF040),
                        (v30 & 1) != 0))
                  {
                    outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v29, (uint64_t)&v44);
                  }
                  else
                  {
                    v44 = 0u;
                    v45 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v45 + 1))
                  {
                    if (swift_dynamicCast())
                    {
                      v31 = v42;
LABEL_37:
                      v32 = v16(objc_msgSend(v6, sel_setIsSubscriber_, v31));
                      v33 = v10();
                      v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 176))(v32, v33);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      objc_msgSend(v6, sel_setMediaEntitySimilarity_, v34);

                      v35 = v10();
                      if (*(_QWORD *)(v35 + 16)
                        && (v36 = specialized __RawDictionaryStorage.find<A>(_:)(0x707954616964656DLL, 0xE900000000000065), (v37 & 1) != 0))
                      {
                        outlined init with copy of Any(*(_QWORD *)(v35 + 56) + 32 * v36, (uint64_t)&v44);
                      }
                      else
                      {
                        v44 = 0u;
                        v45 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      if (*((_QWORD *)&v45 + 1))
                      {
                        if (swift_dynamicCast())
                        {
                          v38 = v42;
                          v39 = v43;
LABEL_46:
                          v40 = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v3 + 200))(v38, v39);
                          swift_bridgeObjectRelease();
                          objc_msgSend(v6, sel_setMediaType_, v40);
                          return v6;
                        }
                      }
                      else
                      {
                        outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
                      }
                      v38 = 0;
                      v39 = 0xE000000000000000;
                      goto LABEL_46;
                    }
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
                  }
                  v31 = 0;
                  goto LABEL_37;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
              }
              v27 = 0;
              goto LABEL_28;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
          }
          v23 = 0;
          goto LABEL_19;
        }
LABEL_9:
        v14.n128_u64[0] = 0;
        goto LABEL_10;
      }
    }
    else
    {
      v44 = 0u;
      v45 = 0u;
      swift_bridgeObjectRelease();
    }
    outlined destroy of Any?((uint64_t)&v44, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  return v6;
}

Swift::Bool __swiftcall PSEMediaSELFEmitter.isSameAppUsed(firstMediaData:userFollowupData:)(Swift::OpaquePointer firstMediaData, Swift::OpaquePointer userFollowupData)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[32];

  if (*((_QWORD *)firstMediaData._rawValue + 2))
  {
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*((_QWORD *)firstMediaData._rawValue + 7) + 32 * v4, (uint64_t)v12);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*((_QWORD *)userFollowupData._rawValue + 2))
        {
          v6 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000);
          if ((v7 & 1) != 0)
          {
            outlined init with copy of Any(*((_QWORD *)userFollowupData._rawValue + 7) + 32 * v6, (uint64_t)v12);
            if ((swift_dynamicCast() & 1) != 0)
            {
              if ((v10 || v11 != 0xE000000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
                && (v10 || v11 != 0xE000000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                swift_bridgeObjectRelease_n();
                v8 = 1;
                return v8 & 1;
              }
              swift_bridgeObjectRelease();
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  v8 = 0;
  return v8 & 1;
}

id PSEMediaSELFEmitter.getMediaEntitySimilarity(firstMediaData:userFollowupData:)(uint64_t a1, uint64_t a2)
{
  id v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[6];
  unint64_t v35;
  _BYTE v36[32];

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95930]), sel_init);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v5 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C746974, 0xE500000000000000);
      if ((v6 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v36);
        if ((swift_dynamicCast() & 1) != 0)
        {
          if (*(_QWORD *)(a2 + 16))
          {
            v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C746974, 0xE500000000000000);
            if ((v8 & 1) != 0)
            {
              outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v7, (uint64_t)v36);
              if ((swift_dynamicCast() & 1) != 0)
              {
                v9 = HIBYTE(v35) & 0xF;
                if ((v35 & 0x2000000000000000) == 0)
                  v9 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFLL;
                if (v9)
                {
                  v10 = HIBYTE(v35) & 0xF;
                  if ((v35 & 0x2000000000000000) == 0)
                    v10 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFLL;
                  if (v10)
                  {
                    swift_bridgeObjectRelease_n();
                    v11 = 1;
LABEL_17:
                    objc_msgSend(v4, sel_setIsSameMediaTitle_, v11);
                    if (*(_QWORD *)(a1 + 16))
                    {
                      v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x747369747261, 0xE600000000000000);
                      if ((v13 & 1) != 0)
                      {
                        outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v36);
                        if ((swift_dynamicCast() & 1) != 0)
                        {
                          if (*(_QWORD *)(a2 + 16))
                          {
                            v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x747369747261, 0xE600000000000000);
                            if ((v15 & 1) != 0)
                            {
                              outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v14, (uint64_t)v36);
                              if ((swift_dynamicCast() & 1) != 0)
                              {
                                v16 = HIBYTE(v35) & 0xF;
                                if ((v35 & 0x2000000000000000) == 0)
                                  v16 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFLL;
                                if (v16)
                                {
                                  v17 = HIBYTE(v35) & 0xF;
                                  if ((v35 & 0x2000000000000000) == 0)
                                    v17 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFLL;
                                  if (v17)
                                  {
                                    swift_bridgeObjectRelease_n();
                                    v18 = 1;
LABEL_32:
                                    objc_msgSend(v4, sel_setIsSameMediaArtist_, v18);
                                    if (*(_QWORD *)(a1 + 16))
                                    {
                                      v19 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D75626C61, 0xE500000000000000);
                                      if ((v20 & 1) != 0)
                                      {
                                        outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v19, (uint64_t)v36);
                                        if ((swift_dynamicCast() & 1) != 0)
                                        {
                                          if (*(_QWORD *)(a2 + 16))
                                          {
                                            v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D75626C61, 0xE500000000000000);
                                            if ((v22 & 1) != 0)
                                            {
                                              outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v21, (uint64_t)v36);
                                              if ((swift_dynamicCast() & 1) != 0)
                                              {
                                                v23 = HIBYTE(v35) & 0xF;
                                                if ((v35 & 0x2000000000000000) == 0)
                                                  v23 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFLL;
                                                if (v23)
                                                {
                                                  v24 = HIBYTE(v35) & 0xF;
                                                  if ((v35 & 0x2000000000000000) == 0)
                                                    v24 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFLL;
                                                  if (v24)
                                                  {
                                                    swift_bridgeObjectRelease_n();
                                                    v25 = 1;
LABEL_47:
                                                    objc_msgSend(v4, sel_setIsSameMediaAlbum_, v25);
                                                    if (*(_QWORD *)(a1 + 16))
                                                    {
                                                      v26 = specialized __RawDictionaryStorage.find<A>(_:)(0x745373656E755469, 0xED0000644965726FLL);
                                                      if ((v27 & 1) != 0)
                                                      {
                                                        outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)v36);
                                                        if ((swift_dynamicCast() & 1) != 0)
                                                        {
                                                          if (*(_QWORD *)(a2 + 16))
                                                          {
                                                            v28 = specialized __RawDictionaryStorage.find<A>(_:)(0x745373656E755469, 0xED0000644965726FLL);
                                                            if ((v29 & 1) != 0)
                                                            {
                                                              outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v28, (uint64_t)v36);
                                                              if ((swift_dynamicCast() & 1) != 0)
                                                              {
                                                                v30 = HIBYTE(v35) & 0xF;
                                                                if ((v35 & 0x2000000000000000) == 0)
                                                                  v30 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFLL;
                                                                if (v30)
                                                                {
                                                                  v31 = HIBYTE(v35) & 0xF;
                                                                  if ((v35 & 0x2000000000000000) == 0)
                                                                    v31 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFLL;
                                                                  if (v31)
                                                                  {
                                                                    swift_bridgeObjectRelease_n();
                                                                    v32 = 1;
LABEL_62:
                                                                    objc_msgSend(v4, sel_setIsSameMediaItem_, v32);
                                                                    return v4;
                                                                  }
                                                                }
                                                                swift_bridgeObjectRelease();
                                                              }
                                                            }
                                                          }
                                                          swift_bridgeObjectRelease();
                                                        }
                                                      }
                                                    }
                                                    v32 = 0;
                                                    goto LABEL_62;
                                                  }
                                                }
                                                swift_bridgeObjectRelease();
                                              }
                                            }
                                          }
                                          swift_bridgeObjectRelease();
                                        }
                                      }
                                    }
                                    v25 = 0;
                                    goto LABEL_47;
                                  }
                                }
                                swift_bridgeObjectRelease();
                              }
                            }
                          }
                          swift_bridgeObjectRelease();
                        }
                      }
                    }
                    v18 = 0;
                    goto LABEL_32;
                  }
                }
                swift_bridgeObjectRelease();
              }
            }
          }
          swift_bridgeObjectRelease();
        }
      }
    }
    v11 = 0;
    goto LABEL_17;
  }
  return v4;
}

uint64_t PSEMediaSELFEmitter.getMediaContentDurationBucket(mediaContentDuration:)(double a1)
{
  if (a1 >= 1.0 && a1 < 5.0)
    return 1;
  if (a1 >= 5.0 && a1 < 10.0)
    return 2;
  if (a1 >= 10.0 && a1 < 15.0)
    return 3;
  if (a1 >= 15.0 && a1 < 20.0)
    return 4;
  if (a1 >= 20.0 && a1 < 25.0)
    return 5;
  if (a1 >= 25.0 && a1 < 30.0)
    return 6;
  if (a1 >= 30.0 && a1 < 40.0)
    return 7;
  if (a1 >= 40.0 && a1 < 50.0)
    return 8;
  if (a1 >= 50.0 && a1 < 60.0)
    return 9;
  if (a1 >= 60.0 && a1 < 120.0)
    return 10;
  if (a1 >= 120.0 && a1 < 180.0)
    return 11;
  if (a1 >= 180.0 && a1 < 240.0)
    return 12;
  if (a1 >= 240.0 && a1 < 300.0)
    return 13;
  if (a1 >= 300.0 && a1 < 600.0)
    return 14;
  if (a1 >= 600.0 && a1 < 1800.0)
    return 15;
  if (a1 >= 1800.0 && a1 <= 7200.0)
    return 16;
  if (a1 <= 7200.0)
    return 0;
  return 17;
}

uint64_t PSEMediaSELFEmitter.getMediaPlayBackState(mediaPlayBackState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 == 0x676E6979616C50 && a2 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 1;
  }
  if (a1 == 0x646573756150 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 2;
  if (a1 == 0x646570706F7453 && a2 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 3;
  }
  if (a1 == 0x7075727265746E49 && a2 == 0xEB00000000646574
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 4;
  }
  v4 = 5;
  if (a1 != 0x676E696B656553 || a2 != 0xE700000000000000)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 5;
    else
      return 0;
  }
  return v4;
}

uint64_t PSEMediaSELFEmitter.getMediaType(mediaType:)()
{
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 1;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 2;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 3;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 4;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 5;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 6;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 7;
  return 0;
}

uint64_t PSEMediaSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSEMediaSELFEmitter.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEMediaSELFEmitter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEMediaSELFEmitter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

double default argument 2 of static Utils.deltaTBetween(eventStart:siriUISession:duration:)()
{
  return 0.0;
}

unint64_t default argument 1 of UserDefaultsDomainProvider.init(collectorIdentifier:domain:)()
{
  return 0xD000000000000021;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MRPlaybackState()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MRPlaybackState()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MRPlaybackState()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance MRPlaybackState@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MRPlaybackState(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BMAlarmEventType(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MRPlaybackState(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance BMInteractionDirection@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance BMAlarmEventType(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt32 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x219A2756C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x219A2756C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x219A2756C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x219A27BE4]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t type metadata accessor for PSEMediaSELFEmitter()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSEMediaSELFEmitter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.emitPSEMedia(mediaSignals:appLaunchSignals:task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.getLastMediaUserFollowupAction(firstMediaSignal:mediaUserFollowupSignal:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.isSameAppUsed(firstMediaData:userFollowupData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.getMediaEntitySimilarity(firstMediaData:userFollowupData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.getMediaContentDurationBucket(mediaContentDuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.getMediaPlayBackState(mediaPlayBackState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PSEMediaSELFEmitter.getMediaType(mediaType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

void type metadata accessor for BMInteractionDirection(uint64_t a1)
{
  type metadata accessor for BMInteractionDirection(a1, &lazy cache variable for type metadata for BMInteractionDirection);
}

void type metadata accessor for MRPlaybackState(uint64_t a1)
{
  type metadata accessor for BMInteractionDirection(a1, &lazy cache variable for type metadata for MRPlaybackState);
}

void type metadata accessor for BMInteractionDirection(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t lazy protocol witness table accessor for type MRPlaybackState and conformance MRPlaybackState()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MRPlaybackState and conformance MRPlaybackState;
  if (!lazy protocol witness table cache variable for type MRPlaybackState and conformance MRPlaybackState)
  {
    type metadata accessor for MRPlaybackState(255);
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for MRPlaybackState, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MRPlaybackState and conformance MRPlaybackState);
  }
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x219A2756C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

void IntelligenceEngineSignalFactory.convertBiomeEventToIETranscript(bmEvent:)()
{
  swift_deletedMethodError();
  __break(1u);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Date?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  Swift::UInt32 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MRPlaybackState, String>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_DWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v6;
    v10[1] = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((_DWORD *)v9 - 4);
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t NowPlayingSignalFactory.nowPlayingActionMRPlaybackState.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NowPlayingSignalFactory.postEndDate : NowPlayingSignalFactory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Date?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 104))(v5);
}

uint64_t NowPlayingSignalFactory.postEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC18PostSiriEngagement23NowPlayingSignalFactory_postEndDate;
  swift_beginAccess();
  return outlined init with copy of Date?(v3, a1, &demangling cache variable for type metadata for Date?);
}

uint64_t NowPlayingSignalFactory.postEndDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC18PostSiriEngagement23NowPlayingSignalFactory_postEndDate;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*NowPlayingSignalFactory.postEndDate.modify())()
{
  swift_beginAccess();
  return NowPlayingSignalFactory.postEndDate.modify;
}

unint64_t NowPlayingSignalFactory.createMediaDataFromNowPlayingEvent(bundleId:deltaT:bmEvent:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  const char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  double v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v7 = type metadata accessor for ReliabilityCategory();
  v76 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = objc_msgSend(a4, sel_duration);
  if (!v75)
  {
    v10 = a4;
    v11 = objc_msgSend(a4, sel_title);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    if (v12 == 0x754D20656C707041 && v14 == 0xED00003120636973)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
      {
        a4 = v10;
        if (objc_msgSend(v10, sel_playbackState) == (id)3 || objc_msgSend(v10, sel_playbackState) == (id)1)
        {
          if (one-time initialization token for engagement != -1)
            swift_once();
          v17 = type metadata accessor for Logger();
          __swift_project_value_buffer(v17, (uint64_t)static Logger.engagement);
          v18 = Logger.logObject.getter();
          v19 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v18, v19))
          {
            v20 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v20 = 0;
            _os_log_impl(&dword_218F54000, v18, v19, "Biome Event - media content duration is too short. Ignore other noises.", v20, 2u);
            MEMORY[0x219A27C8C](v20, -1, -1);
          }

          return 0;
        }
        if (one-time initialization token for engagement != -1)
          swift_once();
        v71 = type metadata accessor for Logger();
        __swift_project_value_buffer(v71, (uint64_t)static Logger.engagement);
        v23 = Logger.logObject.getter();
        v24 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v23, v24))
          goto LABEL_21;
        v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v25 = 0;
        v26 = "Media content duration is 0 for Apple Music 1 (Radio Station) donations pause/interupted.";
        goto LABEL_19;
      }
    }
    if (one-time initialization token for engagement != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.engagement);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v23, v24))
      goto LABEL_20;
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    v26 = "Media content duration is 0 for Apple Music 1 (Radio Station) donations playing.";
LABEL_19:
    _os_log_impl(&dword_218F54000, v23, v24, v26, v25, 2u);
    MEMORY[0x219A27C8C](v25, -1, -1);
LABEL_20:
    a4 = v10;
LABEL_21:

  }
  v74 = a4;
  v27 = objc_msgSend(a4, sel_iTunesStoreIdentifier);
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  if ((a1 == 0x6C7070612E6D6F63 && a2 == 0xEF636973754D2E65
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && (!v28 ? (v31 = v30 == 0xE000000000000000) : (v31 = 0),
        v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1)
      swift_once();
    v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)static Logger.engagement);
    v67 = *MEMORY[0x24BEA8190];
    v68 = type metadata accessor for NowPlayingEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 104))(v9, v67, v68);
    v69 = v76;
    (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v9, *MEMORY[0x24BEA8010], v7);
    Logger.debug(_:_:)(0xD000000000000032, 0x8000000218FBF100, (uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v9, v7);
    return 0;
  }
  else
  {
    v32 = (double)v75;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    v34 = a1;
    v73 = a1;
    v35 = inited;
    *(_OWORD *)(inited + 16) = xmmword_218FBBF10;
    *(_QWORD *)(inited + 32) = 0x656372756F73;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    v36 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 48) = v34;
    *(_QWORD *)(inited + 56) = a2;
    *(_QWORD *)(inited + 72) = v36;
    strcpy((char *)(inited + 80), "iTunesStoreId");
    *(_WORD *)(inited + 94) = -4864;
    *(_QWORD *)(inited + 96) = v28;
    *(_QWORD *)(inited + 104) = v30;
    *(_QWORD *)(inited + 120) = v36;
    *(_QWORD *)(inited + 128) = 0xD000000000000014;
    *(_QWORD *)(inited + 136) = 0x8000000218FBEF60;
    v37 = MEMORY[0x24BEE13C8];
    *(double *)(inited + 144) = v32;
    *(_QWORD *)(inited + 168) = v37;
    *(_QWORD *)(inited + 176) = 0x656C746974;
    *(_QWORD *)(inited + 184) = 0xE500000000000000;
    swift_bridgeObjectRetain();
    v38 = v74;
    v39 = objc_msgSend(v74, sel_title);
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v41;

    *(_QWORD *)(v35 + 192) = v40;
    *(_QWORD *)(v35 + 200) = v42;
    *(_QWORD *)(v35 + 216) = v36;
    *(_QWORD *)(v35 + 224) = 0x747369747261;
    *(_QWORD *)(v35 + 232) = 0xE600000000000000;
    v43 = objc_msgSend(v38, sel_artist);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v46 = v45;

    *(_QWORD *)(v35 + 240) = v44;
    *(_QWORD *)(v35 + 248) = v46;
    *(_QWORD *)(v35 + 264) = v36;
    *(_QWORD *)(v35 + 272) = 0x6D75626C61;
    *(_QWORD *)(v35 + 280) = 0xE500000000000000;
    v47 = objc_msgSend(v38, sel_album);
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v49;

    *(_QWORD *)(v35 + 288) = v48;
    *(_QWORD *)(v35 + 296) = v50;
    *(_QWORD *)(v35 + 312) = v36;
    *(_QWORD *)(v35 + 320) = 0x65726E6567;
    *(_QWORD *)(v35 + 328) = 0xE500000000000000;
    v51 = objc_msgSend(v38, sel_genre);
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v54 = v53;

    *(_QWORD *)(v35 + 336) = v52;
    *(_QWORD *)(v35 + 344) = v54;
    *(_QWORD *)(v35 + 360) = v36;
    *(_QWORD *)(v35 + 368) = 0x64657370616C65;
    *(_QWORD *)(v35 + 376) = 0xE700000000000000;
    *(double *)(v35 + 384) = (double)objc_msgSend(v38, sel_elapsed);
    *(_QWORD *)(v35 + 408) = MEMORY[0x24BEE13C8];
    *(_QWORD *)(v35 + 416) = 0x707954616964656DLL;
    *(_QWORD *)(v35 + 424) = 0xE900000000000065;
    v55 = objc_msgSend(v38, sel_mediaType);
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v58 = v57;

    *(_QWORD *)(v35 + 432) = v56;
    *(_QWORD *)(v35 + 440) = v58;
    *(_QWORD *)(v35 + 456) = v36;
    *(_QWORD *)(v35 + 464) = 0xD000000000000016;
    *(_QWORD *)(v35 + 472) = 0x8000000218FBF020;
    v79 = v73;
    v80 = a2;
    v77 = 0x6C7070612E6D6F63;
    v78 = 0xEA00000000002E65;
    lazy protocol witness table accessor for type String and conformance String();
    v59 = StringProtocol.contains<A>(_:)();
    v60 = MEMORY[0x24BEE1328];
    *(_BYTE *)(v35 + 480) = v59 & 1;
    *(_QWORD *)(v35 + 504) = v60;
    *(_QWORD *)(v35 + 512) = 0xD000000000000012;
    *(_QWORD *)(v35 + 520) = 0x8000000218FBF040;
    v61 = objc_msgSend(v38, sel_iTunesSubscriptionIdentifier);
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v64 = v63;

    if (v62 || v64 != 0xE000000000000000)
    {
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v65 = 1;
    }
    *(_QWORD *)(v35 + 552) = v60;
    *(_BYTE *)(v35 + 528) = v65 & 1;
    *(_QWORD *)(v35 + 560) = 0x616C507269417369;
    *(_QWORD *)(v35 + 568) = 0xE900000000000079;
    v70 = objc_msgSend(v38, sel_isAirPlayVideo);
    *(_QWORD *)(v35 + 600) = v60;
    *(_BYTE *)(v35 + 576) = v70;
    return specialized Dictionary.init(dictionaryLiteral:)(v35);
  }
}

uint64_t NowPlayingSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v4 = v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (unint64_t)objc_msgSend(a1, sel_playbackState);
  if (HIDWORD(v10))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD *)(v2 + 16);
    if (*(_QWORD *)(v11 + 16) && (v12 = v10, v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10), (v14 & 1) != 0))
    {
      v15 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 16 * v13);
      v16 = v15[1];
      v44 = (uint8_t *)*v15;
      v45 = v3;
      type metadata accessor for Utils();
      swift_bridgeObjectRetain();
      objc_msgSend(a1, sel_absoluteTimestamp);
      Date.init(timeIntervalSinceReferenceDate:)();
      v17 = type metadata accessor for Date();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
      static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v9, a2, (uint64_t)&v46, (double)objc_msgSend(a1, sel_duration));
      outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
      v18 = v46;
      v19 = v47;
      v20 = v48;
      v21 = v49;
      v22 = v50;
      v23 = v51;
      v24 = objc_msgSend(a1, sel_bundleID);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v26;

      v28 = (uint64_t)v44;
      v46 = v18;
      v47 = v19;
      v48 = v20;
      v49 = v21;
      v50 = v22;
      v51 = v23;
      v29 = specialized NowPlayingSignalFactory.adaptInvalidBiomeEvent(action:bundleId:playbackState:deltaT:)((uint64_t)v44, v16, v25, v27, v12, &v46);
      if (v29)
      {
        v30 = v29;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v46 = v18;
        v47 = v19;
        v48 = v20;
        v49 = v21;
        v50 = v22;
        v51 = v23;
        v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void *))(*(_QWORD *)v4 + 128))(v25, v27, &v46, a1);
        swift_bridgeObjectRelease();
        if (v43)
        {
          type metadata accessor for Signal();
          v30 = swift_allocObject();
          *(_QWORD *)(v30 + 16) = v18;
          *(_QWORD *)(v30 + 24) = v19;
          *(_QWORD *)(v30 + 32) = v20;
          *(_QWORD *)(v30 + 40) = v21;
          *(_QWORD *)(v30 + 48) = v22;
          *(_BYTE *)(v30 + 56) = v23;
          *(_QWORD *)(v30 + 64) = 0x636973754DLL;
          *(_QWORD *)(v30 + 72) = 0xE500000000000000;
          *(_QWORD *)(v30 + 80) = v28;
          *(_QWORD *)(v30 + 88) = v16;
          *(_BYTE *)(v30 + 96) = 1;
          *(_QWORD *)(v30 + 104) = v43;
        }
        else
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
    else
    {
      if (one-time initialization token for engagement != -1)
        swift_once();
      v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.engagement);
      v32 = a1;
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v45 = v3;
        v35 = (uint8_t *)swift_slowAlloc();
        v36 = swift_slowAlloc();
        v46 = v36;
        *(_DWORD *)v35 = 136315138;
        v44 = v35 + 4;
        v37 = v32;
        v38 = objc_msgSend(v37, sel_description);
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v41 = v40;

        v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_218F54000, v33, v34, "This biome event %s is not supported for PSE Now Playing.", v35, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x219A27C8C](v36, -1, -1);
        MEMORY[0x219A27C8C](v35, -1, -1);

      }
      else
      {

      }
      return 0;
    }
    return v30;
  }
  return result;
}

uint64_t NowPlayingSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t (*v11)(id, uint64_t);
  unint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v27 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v6);
  v26 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BEE4AF8];
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    v16 = a2 + *(int *)(type metadata accessor for SiriUISession(0) + 24);
    v17 = type metadata accessor for Date();
    v18 = *(_QWORD *)(v17 - 8);
    v19 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v26, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v19, 0, 1, v17);
    (*(void (**)(char *))(*(_QWORD *)v3 + 104))(v19);
    v20 = v30;
    v21 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 168);
    v22 = swift_bridgeObjectRetain();
    v23 = v21(v22);
    swift_bridgeObjectRelease();
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v20);
    result = swift_bridgeObjectRelease();
    v25 = v27;
    *v27 = v23;
    v25[1] = v24;
    return result;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v8 = result;
  if (!result)
    goto LABEL_15;
LABEL_3:
  if (v8 >= 1)
  {
    v10 = 0;
    v11 = *(uint64_t (**)(id, uint64_t))(*(_QWORD *)v3 + 136);
    v12 = a1 & 0xC000000000000001;
    v28 = v8;
    v29 = a1;
    do
    {
      if (v12)
        v13 = (id)MEMORY[0x219A2756C](v10, a1);
      else
        v13 = *(id *)(a1 + 8 * v10 + 32);
      v14 = v13;
      if (v11(v13, a2))
      {
        v15 = swift_retain();
        MEMORY[0x219A2732C](v15);
        if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_release();
        v8 = v28;
        a1 = v29;
      }
      else
      {

      }
      ++v10;
    }
    while (v8 != v10);
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

unint64_t NowPlayingSignalFactory.transformSignalsToFeatures(signals:)(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(_QWORD);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t (*v21)(__int128 *, _QWORD);
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  unint64_t v25;
  char v26;
  void (*v27)(__int128 *, _QWORD);
  void (*v28)(uint64_t *, _QWORD);
  uint64_t (*v29)(__int128 *, _QWORD);
  void (*v30)(uint64_t *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t (*v35)(__int128 *, _QWORD);
  void (*v36)(uint64_t *, _QWORD);
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t (*v42)(__int128 *, _QWORD);
  void (*v43)(uint64_t *, _QWORD);
  void (*v44)(_BYTE *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t (*v49)(__int128 *, _QWORD);
  void (*v50)(uint64_t *, _QWORD);
  void (*v51)(_BYTE *, _QWORD);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t (*v56)(__int128 *, _QWORD);
  void (*v57)(uint64_t *, _QWORD);
  void (*v58)(_BYTE *, _QWORD);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t (*v63)(__int128 *, _QWORD);
  void (*v64)(uint64_t *, _QWORD);
  uint64_t v65;
  uint64_t (*v66)(__int128 *, _QWORD);
  void (*v67)(uint64_t *, _QWORD);
  uint64_t v68;
  uint64_t v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void (*v77)(__int128 *, _QWORD);
  void (*v78)(uint64_t *, _QWORD);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  unint64_t v88;
  void (*v89)(_QWORD);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void (*v103)(__int128 *__return_ptr, uint64_t);
  char *v104;
  _BYTE v105[32];
  uint64_t v106;
  unint64_t v107;
  __int128 v108;
  __int128 v109;

  v4 = type metadata accessor for ProtoPlayMediaTaskFeatureSet();
  MEMORY[0x24BDAC7A8](v4);
  v98 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for ProtoTaskEngagementType();
  v100 = *(_QWORD *)(v101 - 8);
  MEMORY[0x24BDAC7A8](v101);
  v99 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v104 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v87 - v11;
  v13 = (void (*)(_QWORD))type metadata accessor for ReliabilityCategory();
  v14 = *((_QWORD *)v13 - 1);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (uint64_t)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_75:
    if (one-time initialization token for engagement == -1)
    {
LABEL_76:
      v80 = type metadata accessor for Logger();
      __swift_project_value_buffer(v80, (uint64_t)static Logger.engagement);
      v81 = *MEMORY[0x24BEA8188];
      v82 = type metadata accessor for NowPlayingEventDataIssues();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 104))(v16, v81, v82);
      (*(void (**)(uint64_t, _QWORD, void (*)(_QWORD)))(v14 + 104))(v16, *MEMORY[0x24BEA8010], v13);
      Logger.debug(_:_:)(0xD000000000000015, 0x8000000218FBF1C0, v16);
      (*(void (**)(uint64_t, void (*)(_QWORD)))(v14 + 8))(v16, v13);
      return MEMORY[0x24BEE4AF8];
    }
LABEL_86:
    swift_once();
    goto LABEL_76;
  }
LABEL_74:
  swift_bridgeObjectRetain();
  v79 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v79)
    goto LABEL_75;
LABEL_3:
  v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 160))(a1);
  if (v17 >> 62)
  {
    v18 = _CocoaArrayWrapper.endIndex.getter();
    if (v18)
      goto LABEL_5;
  }
  else
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v18)
    {
LABEL_5:
      if (v18 < 1)
      {
        __break(1u);
        goto LABEL_84;
      }
      v87 = v16;
      v88 = v14;
      v89 = v13;
      v16 = 0;
      v97 = v17 & 0xC000000000000001;
      v96 = *MEMORY[0x24BEA7E58];
      v2 = MEMORY[0x24BEE4AF8];
      v91 = MEMORY[0x24BEE4AD8] + 8;
      v90 = 0x8000000218FBEF60;
      v19 = 0.0;
      v95 = v8;
      v94 = v7;
      v92 = v18;
      v93 = v17;
      do
      {
        if (v97)
        {
          a1 = MEMORY[0x219A2756C](v16, v17);
        }
        else
        {
          a1 = *(_QWORD *)(v17 + 8 * v16 + 32);
          swift_retain();
        }
        ProtoTaskEngagementFeatureSet.init()();
        (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v99, v96, v101);
        v20 = ProtoTaskEngagementFeatureSet.engagementType.setter();
        v1 = a1;
        v103 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 120);
        v103(&v108, v20);
        if ((~(_QWORD)v108 & 0x7FF0000000000000) == 0)
        {
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        if (*(double *)&v108 <= -1.0)
          goto LABEL_72;
        if (*(double *)&v108 >= 1.84467441e19)
          goto LABEL_73;
        ProtoTaskEngagementFeatureSet.startTimestampMs.setter();
        ProtoPlayMediaTaskFeatureSet.init()();
        v21 = (uint64_t (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        ProtoTaskFeatureSet.playMediaFeatureSet.setter();
        v22 = v21(&v108, 0);
        v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216);
        v24 = v23(v22);
        if (*(_QWORD *)(v24 + 16)
          && (v25 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000),
              (v26 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v24 + 56) + 32 * v25, (uint64_t)&v108);
        }
        else
        {
          v108 = 0u;
          v109 = 0u;
        }
        swift_bridgeObjectRelease();
        v102 = v2;
        if (*((_QWORD *)&v109 + 1))
          swift_dynamicCast();
        else
          outlined destroy of Any?((uint64_t)&v108, &demangling cache variable for type metadata for Any?);
        v27 = (void (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v28 = (void (*)(uint64_t *, _QWORD))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        ProtoPlayMediaTaskFeatureSet.appBundleID.setter();
        v28(&v106, 0);
        v27(&v108, 0);
        v29 = (uint64_t (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v30 = (void (*)(uint64_t *, _QWORD))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        ProtoPlayMediaTaskFeatureSet.playDurationInSec.setter();
        v30(&v106, 0);
        v31 = v29(&v108, 0);
        v32 = v23(v31);
        if (*(_QWORD *)(v32 + 16)
          && (v33 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C746974, 0xE500000000000000), (v34 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v32 + 56) + 32 * v33, (uint64_t)&v108);
        }
        else
        {
          v108 = 0u;
          v109 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v109 + 1))
          swift_dynamicCast();
        else
          outlined destroy of Any?((uint64_t)&v108, &demangling cache variable for type metadata for Any?);
        v35 = (uint64_t (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v36 = (void (*)(uint64_t *, _QWORD))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        v37 = (void (*)(_BYTE *, _QWORD))ProtoPlayMediaTaskFeatureSet.mediaEntity.modify();
        ProtoMediaEntitySignal.title.setter();
        v37(v105, 0);
        v36(&v106, 0);
        v38 = v35(&v108, 0);
        v39 = v23(v38);
        if (*(_QWORD *)(v39 + 16)
          && (v40 = specialized __RawDictionaryStorage.find<A>(_:)(0x747369747261, 0xE600000000000000),
              (v41 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v39 + 56) + 32 * v40, (uint64_t)&v108);
        }
        else
        {
          v108 = 0u;
          v109 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v109 + 1))
          swift_dynamicCast();
        else
          outlined destroy of Any?((uint64_t)&v108, &demangling cache variable for type metadata for Any?);
        v42 = (uint64_t (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v43 = (void (*)(uint64_t *, _QWORD))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        v44 = (void (*)(_BYTE *, _QWORD))ProtoPlayMediaTaskFeatureSet.mediaEntity.modify();
        ProtoMediaEntitySignal.artist.setter();
        v44(v105, 0);
        v43(&v106, 0);
        v45 = v42(&v108, 0);
        v46 = v23(v45);
        if (*(_QWORD *)(v46 + 16)
          && (v47 = specialized __RawDictionaryStorage.find<A>(_:)(0x745373656E755469, 0xED0000644965726FLL),
              (v48 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v46 + 56) + 32 * v47, (uint64_t)&v108);
        }
        else
        {
          v108 = 0u;
          v109 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v109 + 1))
          swift_dynamicCast();
        else
          outlined destroy of Any?((uint64_t)&v108, &demangling cache variable for type metadata for Any?);
        v49 = (uint64_t (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v50 = (void (*)(uint64_t *, _QWORD))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        v51 = (void (*)(_BYTE *, _QWORD))ProtoPlayMediaTaskFeatureSet.mediaEntity.modify();
        ProtoMediaEntitySignal.adamIdentifier.setter();
        v51(v105, 0);
        v50(&v106, 0);
        v52 = v49(&v108, 0);
        v53 = v23(v52);
        if (*(_QWORD *)(v53 + 16)
          && (v54 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D75626C61, 0xE500000000000000), (v55 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v53 + 56) + 32 * v54, (uint64_t)&v108);
        }
        else
        {
          v108 = 0u;
          v109 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v109 + 1))
          swift_dynamicCast();
        else
          outlined destroy of Any?((uint64_t)&v108, &demangling cache variable for type metadata for Any?);
        v56 = (uint64_t (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v57 = (void (*)(uint64_t *, _QWORD))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        v58 = (void (*)(_BYTE *, _QWORD))ProtoPlayMediaTaskFeatureSet.mediaEntity.modify();
        ProtoMediaEntitySignal.album.setter();
        v58(v105, 0);
        v57(&v106, 0);
        v59 = v56(&v108, 0);
        v60 = v23(v59);
        if (*(_QWORD *)(v60 + 16))
        {
          v61 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, v90);
          v7 = v94;
          if ((v62 & 1) != 0)
          {
            outlined init with copy of Any(*(_QWORD *)(v60 + 56) + 32 * v61, (uint64_t)&v108);
          }
          else
          {
            v108 = 0u;
            v109 = 0u;
          }
        }
        else
        {
          v108 = 0u;
          v109 = 0u;
          v7 = v94;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v109 + 1))
          swift_dynamicCast();
        else
          outlined destroy of Any?((uint64_t)&v108, &demangling cache variable for type metadata for Any?);
        v63 = (uint64_t (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v64 = (void (*)(uint64_t *, _QWORD))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        ProtoPlayMediaTaskFeatureSet.mediaContentLengthInSec.setter();
        v64(&v106, 0);
        v65 = v63(&v108, 0);
        v13 = *(void (**)(_QWORD))(*(_QWORD *)a1 + 168);
        v13(v65);
        v66 = (uint64_t (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v67 = (void (*)(uint64_t *, _QWORD))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
        ProtoPlayMediaTaskFeatureSet.actionState.setter();
        v67(&v106, 0);
        v68 = v66(&v108, 0);
        *(_QWORD *)&v108 = ((uint64_t (*)(uint64_t))v13)(v68);
        *((_QWORD *)&v108 + 1) = v69;
        v106 = 2036427856;
        v107 = 0xE400000000000000;
        v14 = lazy protocol witness table accessor for type String and conformance String();
        v70 = StringProtocol.contains<A>(_:)();
        v71 = (_QWORD *)swift_bridgeObjectRelease();
        if ((v70 & 1) != 0)
        {
          v8 = v95;
          v2 = v102;
          if (v19 == 0.0)
          {
            v71 = ((_QWORD *(*)(__int128 *__return_ptr, _QWORD *))v103)(&v108, v71);
            v19 = *(double *)&v108;
          }
        }
        else
        {
          v8 = v95;
          v2 = v102;
        }
        *(_QWORD *)&v108 = ((uint64_t (*)(_QWORD *))v13)(v71);
        *((_QWORD *)&v108 + 1) = v72;
        v106 = 2036427856;
        v107 = 0xE400000000000000;
        v73 = StringProtocol.contains<A>(_:)();
        v74 = swift_bridgeObjectRelease();
        if ((v73 & 1) == 0)
          v103(&v108, v74);
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v104, v12, v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, (uint64_t (*)(_QWORD))MEMORY[0x24BEA7DE8]);
        v76 = *(_QWORD *)(v2 + 16);
        v75 = *(_QWORD *)(v2 + 24);
        if (v76 >= v75 >> 1)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1, v76 + 1, 1, v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, (uint64_t (*)(_QWORD))MEMORY[0x24BEA7DE8]);
        ++v16;
        *(_QWORD *)(v2 + 16) = v76 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v76, v104, v7);
        swift_release();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
        v17 = v93;
      }
      while (v92 != v16);
      swift_bridgeObjectRelease();
      v13 = v89;
      v14 = v88;
      v16 = v87;
      if (!*(_QWORD *)(v2 + 16))
        goto LABEL_79;
LABEL_68:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if (*(_QWORD *)(v2 + 16))
        {
LABEL_70:
          v77 = (void (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
          v78 = (void (*)(uint64_t *, _QWORD))ProtoTaskFeatureSet.playMediaFeatureSet.modify();
          ProtoPlayMediaTaskFeatureSet.playDurationInSec.setter();
          v78(&v106, 0);
          v77(&v108, 0);
          return v2;
        }
        goto LABEL_85;
      }
LABEL_84:
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      if (*(_QWORD *)(v2 + 16))
        goto LABEL_70;
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
  }
  swift_bridgeObjectRelease();
  v2 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_68;
LABEL_79:
  if (one-time initialization token for engagement != -1)
    swift_once();
  v83 = type metadata accessor for Logger();
  __swift_project_value_buffer(v83, (uint64_t)static Logger.engagement);
  v84 = *MEMORY[0x24BEA8188];
  v85 = type metadata accessor for NowPlayingEventDataIssues();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 104))(v16, v84, v85);
  (*(void (**)(uint64_t, _QWORD, void (*)(_QWORD)))(v14 + 104))(v16, *MEMORY[0x24BEA8010], v13);
  Logger.debug(_:_:)(0xD000000000000020, 0x8000000218FBF190, v16);
  (*(void (**)(uint64_t, void (*)(_QWORD)))(v14 + 8))(v16, v13);
  return v2;
}

uint64_t NowPlayingSignalFactory.normalizeSignalsForFeature(signals:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23[3];

  if (a1 < 0 || (a1 & 0x4000000000000000) != 0)
  {
    v21 = swift_bridgeObjectRetain();
    v1 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v21, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v23[0] = v1;
  specialized MutableCollection<>.sort(by:)(v23);
  v2 = v23[0];
  LODWORD(v3) = v23[0] < 0 || (v23[0] & 0x4000000000000000) != 0;
  if ((_DWORD)v3 == 1)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v4)
      goto LABEL_9;
  }
  else
  {
    v4 = *(_QWORD *)(v23[0] + 16);
    if (v4)
    {
LABEL_9:
      v22 = v3;
      v5 = 0;
      v6 = v2 & 0xC000000000000001;
      v7 = MEMORY[0x24BEE0D00];
      while (1)
      {
        if (v6)
        {
          v8 = MEMORY[0x219A2756C](v5, v2);
        }
        else
        {
          v8 = *(_QWORD *)(v2 + 8 * v5 + 32);
          swift_retain();
        }
        v23[0] = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 168))();
        v23[1] = v9;
        lazy protocol witness table accessor for type String and conformance String();
        v3 = StringProtocol.contains<A>(_:)();
        swift_release();
        swift_bridgeObjectRelease();
        if ((v3 & 1) != 0)
          break;
        v10 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        ++v5;
        if (v10 == v4)
          return v2;
      }
      if (v4 < v5)
      {
        __break(1u);
      }
      else
      {
        v7 = v22;
        if (v22)
        {
          swift_bridgeObjectRetain();
          v3 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
        }
        else
        {
          v3 = *(_QWORD *)(v2 + 16);
        }
        if ((uint64_t)v3 >= v4)
        {
          if (!v6 || v4 == v5)
          {
LABEL_27:
            if (v22)
            {
              swift_bridgeObjectRetain();
              v14 = _CocoaArrayWrapper.subscript.getter();
              v7 = v15;
              v5 = v16;
              v3 = v17;
              swift_release_n();
              v2 = v14;
              if ((v3 & 1) == 0)
              {
LABEL_31:
                v11 = specialized _copyCollectionToContiguousArray<A>(_:)(v2, v7, v5, v3);
LABEL_38:
                swift_unknownObjectRelease();
                return v11;
              }
            }
            else
            {
              v3 = (2 * v4) | 1;
              v7 = v2 + 32;
            }
            type metadata accessor for __ContiguousArrayStorageBase();
            swift_unknownObjectRetain_n();
            v18 = swift_dynamicCastClass();
            if (!v18)
            {
              swift_unknownObjectRelease();
              v18 = MEMORY[0x24BEE4AF8];
            }
            v19 = *(_QWORD *)(v18 + 16);
            swift_release();
            if (!__OFSUB__(v3 >> 1, v5))
            {
              if (v19 == (v3 >> 1) - v5)
              {
                v11 = swift_dynamicCastClass();
                swift_unknownObjectRelease();
                if (v11)
                  return v11;
                v11 = MEMORY[0x24BEE4AF8];
                goto LABEL_38;
              }
              goto LABEL_48;
            }
LABEL_47:
            __break(1u);
LABEL_48:
            swift_unknownObjectRelease();
            goto LABEL_31;
          }
          if (v5 < v4)
          {
            type metadata accessor for Signal();
            v12 = v5;
            do
            {
              v13 = v12 + 1;
              _ArrayBuffer._typeCheckSlowPath(_:)(v12);
              v12 = v13;
            }
            while (v4 != v13);
            goto LABEL_27;
          }
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
      __break(1u);
      goto LABEL_46;
    }
  }
  return v2;
}

uint64_t NowPlayingSignalFactory.transformSignalsToBiomePSE(signals:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  Swift::Int v81;
  Swift::Int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  unint64_t i;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t (*v98)(void);
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(__int128 *__return_ptr, uint64_t);
  uint64_t v107;
  uint64_t v108;
  char v109;
  _QWORD *v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  void (*v114)(__int128 *__return_ptr, uint64_t);
  uint64_t v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  double v122;
  double v123;
  double v124;
  uint64_t (*v125)(uint64_t *);
  void (*v126)(uint64_t *, _QWORD);
  uint64_t *v127;
  uint64_t *v128;
  unint64_t v129;
  char v130;
  _QWORD *v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  _BOOL8 v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  char v147;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v149;
  _OWORD *v150;
  uint64_t result;
  unint64_t v152;
  int64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t *, _QWORD);
  _QWORD *v167;
  _OWORD v168[2];
  uint64_t v169;
  unint64_t v170;
  __int128 v171;
  __int128 v172;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v2);
  v155 = (char *)&v152 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v158 - 8);
  MEMORY[0x24BDAC7A8](v158);
  v6 = (unint64_t)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_47;
  v7 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
LABEL_4:
  *(_QWORD *)&v171 = v7;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v171);
  v8 = v171;
  v165 = 0;
  v152 = v6;
  v157 = v4;
  if ((v171 & 0x8000000000000000) != 0 || (v171 & 0x4000000000000000) != 0)
  {
    swift_retain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9)
      goto LABEL_7;
  }
  else
  {
    v9 = *(_QWORD *)(v171 + 16);
    swift_retain();
    if (v9)
    {
LABEL_7:
      if (v9 < 1)
      {
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
        goto LABEL_231;
      }
      v10 = v8 & 0xC000000000000001;
      if ((v8 & 0xC000000000000001) != 0)
      {
        v11 = MEMORY[0x219A2756C](0, v8);
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 32);
        swift_retain();
      }
      v12 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 168))();
      v6 = v13;
      *(_QWORD *)&v171 = v12;
      *((_QWORD *)&v171 + 1) = v13;
      v169 = 0x6E776F6E6B6E55;
      v170 = 0xE700000000000000;
      v4 = lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      if (v9 != 1)
      {
        v6 = 0;
        do
        {
          if (v10)
          {
            v22 = MEMORY[0x219A2756C](v6 + 1, v8);
          }
          else
          {
            v22 = *(_QWORD *)(v8 + 8 * v6 + 40);
            swift_retain();
          }
          *(_QWORD *)&v171 = (*(uint64_t (**)(void))(*(_QWORD *)v22 + 168))();
          *((_QWORD *)&v171 + 1) = v23;
          v169 = 0x6E776F6E6B6E55;
          v170 = 0xE700000000000000;
          v24 = StringProtocol.contains<A>(_:)();
          swift_bridgeObjectRelease();
          if ((v24 & 1) != 0)
          {
            if (v10)
            {
              v20 = MEMORY[0x219A2756C](v6, v8);
            }
            else
            {
              if (v6 >= *(_QWORD *)(v8 + 16))
                goto LABEL_46;
              v20 = *(_QWORD *)(v8 + 8 * v6 + 32);
              swift_retain();
            }
            v21 = (*(uint64_t (**)(void))(*(_QWORD *)v20 + 216))();
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 224))(v21);
            swift_release();
          }
          swift_release();
          ++v6;
        }
        while (v9 - 1 != v6);
      }
      swift_release();
      v4 = 0;
      *(_QWORD *)&v168[0] = MEMORY[0x24BEE4AF8];
      while (1)
      {
        if (v10)
        {
          v14 = MEMORY[0x219A2756C](v4, v8);
          v6 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
LABEL_32:
            __break(1u);
LABEL_33:
            v19 = *(_QWORD *)&v168[0];
            goto LABEL_50;
          }
        }
        else
        {
          if (v4 >= *(_QWORD *)(v8 + 16))
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            v25 = swift_bridgeObjectRetain();
            v7 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v25, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
            swift_bridgeObjectRelease();
            goto LABEL_4;
          }
          v14 = *(_QWORD *)(v8 + 8 * v4 + 32);
          swift_retain();
          v6 = v4 + 1;
          if (__OFADD__(v4, 1))
            goto LABEL_32;
        }
        v15 = (*(uint64_t (**)(void))(*(_QWORD *)v14 + 216))();
        if (*(_QWORD *)(v15 + 16)
          && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(0x745373656E755469, 0xED0000644965726FLL),
              (v17 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v15 + 56) + 32 * v16, (uint64_t)&v171);
        }
        else
        {
          v171 = 0u;
          v172 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v172 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
          {
            if (!v169 && v170 == 0xE000000000000000)
            {
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_15;
            }
            v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v18 & 1) != 0)
            {
              swift_release();
              goto LABEL_15;
            }
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for Any?);
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_15:
        ++v4;
        if (v6 == v9)
          goto LABEL_33;
      }
    }
  }
  swift_release();
  v19 = MEMORY[0x24BEE4AF8];
LABEL_50:
  swift_release();
  *(_QWORD *)&v168[0] = MEMORY[0x24BEE4B00];
  if ((v19 & 0x8000000000000000) != 0 || (v19 & 0x4000000000000000) != 0)
    goto LABEL_82;
  v26 = *(_QWORD *)(v19 + 16);
  swift_retain();
  if (v26)
  {
LABEL_53:
    v164 = v19 & 0xC000000000000001;
    v27 = MEMORY[0x24BEE4B00];
    v28 = 4;
    v162 = xmmword_218FBBF20;
    v163 = MEMORY[0x24BEE4AD8] + 8;
    v166 = (void (*)(uint64_t *, _QWORD))v19;
    while (1)
    {
      v31 = v28 - 4;
      if (v164)
      {
        v32 = MEMORY[0x219A2756C](v28 - 4, v19);
        v33 = v28 - 3;
        if (__OFADD__(v31, 1))
          goto LABEL_79;
      }
      else
      {
        v32 = *(_QWORD *)(v19 + 8 * v28);
        swift_retain();
        v33 = v28 - 3;
        if (__OFADD__(v31, 1))
        {
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          swift_retain();
          swift_bridgeObjectRetain();
          v26 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
          if (!v26)
            break;
          goto LABEL_53;
        }
      }
      v34 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 216))();
      if (*(_QWORD *)(v34 + 16)
        && (v35 = specialized __RawDictionaryStorage.find<A>(_:)(0x745373656E755469, 0xED0000644965726FLL),
            (v36 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v34 + 56) + 32 * v35, (uint64_t)&v171);
      }
      else
      {
        v171 = 0u;
        v172 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v172 + 1))
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v37 = v169;
          v38 = v170;
          goto LABEL_72;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for Any?);
      }
      v37 = 0;
      v38 = 0xE000000000000000;
LABEL_72:
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
      v40 = *(_QWORD *)(v27 + 16);
      v41 = (v39 & 1) == 0;
      v42 = v40 + v41;
      if (__OFADD__(v40, v41))
        goto LABEL_80;
      v43 = v39;
      if (*(_QWORD *)(v27 + 24) < v42)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, 1, &demangling cache variable for type metadata for _DictionaryStorage<String, [Signal]>);
        v27 = *(_QWORD *)&v168[0];
        v44 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
        if ((v43 & 1) != (v45 & 1))
          goto LABEL_234;
        v19 = v44;
      }
      if ((v43 & 1) != 0)
      {
        v29 = swift_bridgeObjectRelease();
        v30 = (_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v19);
        MEMORY[0x219A2732C](v29);
        if (*(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v46 = swift_allocObject();
        *(_OWORD *)(v46 + 16) = v162;
        *(_QWORD *)(v46 + 32) = v32;
        *(_QWORD *)&v171 = v46;
        specialized Array._endMutation()();
        v47 = v171;
        *(_QWORD *)(v27 + 8 * (v19 >> 6) + 64) |= 1 << v19;
        v48 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * v19);
        *v48 = v37;
        v48[1] = v38;
        *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v19) = v47;
        v49 = *(_QWORD *)(v27 + 16);
        v50 = __OFADD__(v49, 1);
        v51 = v49 + 1;
        if (v50)
          goto LABEL_81;
        *(_QWORD *)(v27 + 16) = v51;
      }
      v19 = (unint64_t)v166;
      ++v28;
      if (v33 == v26)
        goto LABEL_84;
    }
  }
  v27 = MEMORY[0x24BEE4B00];
LABEL_84:
  swift_release();
  v52 = v27 + 64;
  v53 = 1 << *(_BYTE *)(v27 + 32);
  v54 = -1;
  if (v53 < 64)
    v54 = ~(-1 << v53);
  v55 = v54 & *(_QWORD *)(v27 + 64);
  v56 = (unint64_t)(v53 + 63) >> 6;
  swift_retain();
  v57 = 0;
  while (2)
  {
    while (2)
    {
      while (2)
      {
        if (v55)
        {
          v58 = __clz(__rbit64(v55));
          v55 &= v55 - 1;
          v59 = v58 | (v57 << 6);
        }
        else
        {
          v50 = __OFADD__(v57++, 1);
          if (v50)
          {
            __break(1u);
LABEL_222:
            __break(1u);
LABEL_223:
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
            goto LABEL_226;
          }
          if (v57 >= v56)
            goto LABEL_220;
          v60 = *(_QWORD *)(v52 + 8 * v57);
          if (!v60)
          {
            v61 = v57 + 1;
            if (v57 + 1 >= v56)
              goto LABEL_220;
            v60 = *(_QWORD *)(v52 + 8 * v61);
            if (!v60)
            {
              v61 = v57 + 2;
              if (v57 + 2 >= v56)
                goto LABEL_220;
              v60 = *(_QWORD *)(v52 + 8 * v61);
              if (!v60)
              {
                v61 = v57 + 3;
                if (v57 + 3 >= v56)
                  goto LABEL_220;
                v60 = *(_QWORD *)(v52 + 8 * v61);
                if (!v60)
                {
                  v61 = v57 + 4;
                  if (v57 + 4 >= v56)
                    goto LABEL_220;
                  v60 = *(_QWORD *)(v52 + 8 * v61);
                  if (!v60)
                  {
                    v61 = v57 + 5;
                    if (v57 + 5 >= v56)
                    {
LABEL_220:
                      swift_release_n();
                      return v19;
                    }
                    v60 = *(_QWORD *)(v52 + 8 * v61);
                    if (!v60)
                    {
                      while (1)
                      {
                        v57 = v61 + 1;
                        if (__OFADD__(v61, 1))
                          goto LABEL_225;
                        if (v57 >= v56)
                          goto LABEL_220;
                        v60 = *(_QWORD *)(v52 + 8 * v57);
                        ++v61;
                        if (v60)
                          goto LABEL_103;
                      }
                    }
                  }
                }
              }
            }
            v57 = v61;
          }
LABEL_103:
          v55 = (v60 - 1) & v60;
          v59 = __clz(__rbit64(v60)) + (v57 << 6);
        }
        v62 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * v59);
        v64 = *v62;
        v63 = v62[1];
        v65 = HIBYTE(v63) & 0xF;
        if ((v63 & 0x2000000000000000) == 0)
          v65 = v64 & 0xFFFFFFFFFFFFLL;
        if (!v65 || !*(_QWORD *)(v27 + 16))
          continue;
        break;
      }
      swift_bridgeObjectRetain();
      v66 = specialized __RawDictionaryStorage.find<A>(_:)(v64, v63);
      if ((v67 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        continue;
      }
      break;
    }
    v153 = v56;
    v154 = v52;
    v68 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v66);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v68 >> 62)
    {
      swift_bridgeObjectRetain();
      v69 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v69)
        goto LABEL_145;
    }
    else
    {
      v69 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v69)
      {
LABEL_145:
        v77 = v165;
        goto LABEL_148;
      }
    }
    v164 = v68 >> 62;
    v166 = (void (*)(uint64_t *, _QWORD))v19;
    v70 = 0;
    v71 = v68 & 0xC000000000000001;
    v72 = v68;
    while (1)
    {
      if (v71)
      {
        v73 = MEMORY[0x219A2756C](v70, v68);
      }
      else
      {
        v73 = *(_QWORD *)(v68 + 8 * v70 + 32);
        swift_retain();
      }
      *(_QWORD *)&v171 = (*(uint64_t (**)(void))(*(_QWORD *)v73 + 168))();
      *((_QWORD *)&v171 + 1) = v74;
      v169 = 2036427856;
      v170 = 0xE400000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      v75 = StringProtocol.contains<A>(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      if ((v75 & 1) != 0)
        break;
      v76 = v70 + 1;
      if (__OFADD__(v70, 1))
        goto LABEL_223;
      ++v70;
      v68 = v72;
      if (v76 == v69)
      {
        v77 = v165;
        v19 = (unint64_t)v166;
        goto LABEL_148;
      }
    }
    if (v69 < v70)
      goto LABEL_229;
    v78 = v72;
    v79 = v164;
    if (v164)
    {
      swift_bridgeObjectRetain();
      v80 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v80 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v80 < v69)
      goto LABEL_230;
    if (!v71 || v69 == v70)
    {
      v19 = (unint64_t)v166;
      if (!v79)
        goto LABEL_135;
LABEL_138:
      swift_bridgeObjectRetain();
      v83 = _CocoaArrayWrapper.subscript.getter();
      v84 = v86;
      v70 = v87;
      v85 = v88;
      swift_bridgeObjectRelease_n();
      if ((v85 & 1) != 0)
        goto LABEL_140;
LABEL_139:
      v68 = specialized _copyCollectionToContiguousArray<A>(_:)(v83, v84, v70, v85);
      goto LABEL_147;
    }
    v19 = (unint64_t)v166;
    if (v70 >= v69)
      goto LABEL_232;
    type metadata accessor for Signal();
    v81 = v70;
    do
    {
      v82 = v81 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v81);
      v81 = v82;
    }
    while (v69 != v82);
    if (v79)
      goto LABEL_138;
LABEL_135:
    v83 = v78 & 0xFFFFFFFFFFFFFF8;
    v84 = (v78 & 0xFFFFFFFFFFFFFF8) + 32;
    v85 = (2 * v69) | 1;
    if ((v85 & 1) == 0)
      goto LABEL_139;
LABEL_140:
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v89 = swift_dynamicCastClass();
    if (!v89)
    {
      swift_unknownObjectRelease();
      v89 = MEMORY[0x24BEE4AF8];
    }
    v90 = *(_QWORD *)(v89 + 16);
    swift_release();
    if (__OFSUB__(v85 >> 1, v70))
      goto LABEL_233;
    if (v90 != (v85 >> 1) - v70)
    {
      swift_unknownObjectRelease();
      goto LABEL_139;
    }
    v68 = swift_dynamicCastClass();
    swift_unknownObjectRelease();
    if (v68)
      goto LABEL_145;
    v68 = MEMORY[0x24BEE4AF8];
LABEL_147:
    v77 = v165;
    swift_unknownObjectRelease();
LABEL_148:
    *(_QWORD *)&v162 = v68 & 0xC000000000000001;
    if ((v68 & 0xC000000000000001) != 0)
    {
      v159 = MEMORY[0x219A2756C](0, v68);
      if (!(v68 >> 62))
        goto LABEL_151;
LABEL_196:
      swift_bridgeObjectRetain();
      v91 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v91)
      {
LABEL_197:
        v165 = v77;
        swift_bridgeObjectRelease();
        v163 = 0;
LABEL_198:
        v117 = -1.0;
        goto LABEL_199;
      }
      goto LABEL_152;
    }
    if (!*(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_227;
    v159 = *(_QWORD *)(v68 + 32);
    swift_retain();
    if (v68 >> 62)
      goto LABEL_196;
LABEL_151:
    v91 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v91)
      goto LABEL_197;
LABEL_152:
    v163 = 0;
    v164 = v68;
    v160 = v68 & 0xFFFFFFFFFFFFFF8;
    v92 = 0.0;
    v93 = 0.0;
    v161 = v91;
    for (i = 0; ; i = v97)
    {
      while (1)
      {
        if ((_QWORD)v162)
        {
          v96 = MEMORY[0x219A2756C](i, v164);
          v97 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_222;
        }
        else
        {
          if (i >= *(_QWORD *)(v160 + 16))
            goto LABEL_224;
          v96 = *(_QWORD *)(v164 + 8 * i + 32);
          swift_retain();
          v97 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_222;
        }
        v166 = (void (*)(uint64_t *, _QWORD))v19;
        v165 = v77;
        v98 = *(uint64_t (**)(void))(*(_QWORD *)v96 + 168);
        *(_QWORD *)&v171 = v98();
        *((_QWORD *)&v171 + 1) = v99;
        v169 = 2036427856;
        v170 = 0xE400000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v100 = StringProtocol.contains<A>(_:)();
        v101 = swift_bridgeObjectRelease();
        if ((v100 & 1) != 0 && v93 == 0.0)
        {
          swift_release();
          v106 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v96 + 120);
          v107 = swift_retain();
          v106(&v171, v107);
          swift_release();
          v93 = *(double *)&v171;
          v159 = v96;
LABEL_174:
          v77 = v165;
          v19 = (unint64_t)v166;
          goto LABEL_175;
        }
        *(_QWORD *)&v171 = ((uint64_t (*)(uint64_t))v98)(v101);
        *((_QWORD *)&v171 + 1) = v102;
        v169 = 2036427856;
        v170 = 0xE400000000000000;
        v103 = StringProtocol.contains<A>(_:)();
        v104 = swift_bridgeObjectRelease();
        if ((v103 & 1) == 0 || v93 == 0.0)
          break;
        v105 = v163;
        if (v163)
        {
          swift_retain();
          v77 = v165;
          v95 = specialized _ArrayProtocol.filter(_:)((unint64_t)v166, v105);
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          v77 = v165;
          v95 = (unint64_t)v166;
        }
        v19 = specialized _ArrayProtocol.filter(_:)(v95, v96);
        swift_bridgeObjectRelease();
        swift_release();
        ++i;
        v92 = 0.0;
        if (v97 == v161)
        {
          v165 = v77;
          v116 = swift_bridgeObjectRelease();
          goto LABEL_183;
        }
      }
      *(_QWORD *)&v171 = ((uint64_t (*)(uint64_t))v98)(v104);
      *((_QWORD *)&v171 + 1) = v108;
      v169 = 1886352467;
      v170 = 0xE400000000000000;
      v109 = StringProtocol.contains<A>(_:)();
      v110 = (_QWORD *)swift_bridgeObjectRelease();
      if ((v109 & 1) != 0 && v93 != 0.0)
      {
        v110 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *))(*(_QWORD *)v96 + 120))(&v171, v110);
        if (vabdd_f64(*(double *)&v171, v93) < 2.0)
        {
          v77 = v165;
          v19 = specialized _ArrayProtocol.filter(_:)((unint64_t)v166, v96);
          swift_bridgeObjectRelease();
          swift_release();
LABEL_175:
          v113 = v161;
          goto LABEL_176;
        }
      }
      *(_QWORD *)&v171 = ((uint64_t (*)(_QWORD *))v98)(v110);
      *((_QWORD *)&v171 + 1) = v111;
      v169 = 2036427856;
      v170 = 0xE400000000000000;
      v112 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if ((v112 & 1) != 0)
      {
        swift_release();
        goto LABEL_174;
      }
      swift_release();
      v114 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v96 + 120);
      v115 = swift_retain();
      v114(&v171, v115);
      swift_release();
      v92 = *(double *)&v171;
      v163 = v96;
      v77 = v165;
      v19 = (unint64_t)v166;
      v113 = v161;
      if (v93 == 0.0)
        break;
LABEL_176:
      if (v97 == v113)
        break;
    }
    v116 = swift_bridgeObjectRelease();
    v117 = -1.0;
    v165 = v77;
    if (v93 == 0.0)
      goto LABEL_199;
    if (v92 != 0.0)
      goto LABEL_188;
LABEL_183:
    v118 = (uint64_t)v155;
    (*(void (**)(uint64_t))(*(_QWORD *)v156 + 96))(v116);
    v119 = v157;
    v120 = v158;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v118, 1, v158) == 1)
    {
      outlined destroy of Any?(v118, &demangling cache variable for type metadata for Date?);
LABEL_192:
      v117 = 30.0;
      goto LABEL_199;
    }
    v121 = v152;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v119 + 32))(v152, v118, v120);
    Date.timeIntervalSinceReferenceDate.getter();
    if (v93 >= v122)
    {
      (*(void (**)(unint64_t, uint64_t))(v119 + 8))(v121, v120);
      goto LABEL_192;
    }
    Date.timeIntervalSinceReferenceDate.getter();
    if (v123 - v93 >= 30.0)
    {
      (*(void (**)(unint64_t, uint64_t))(v157 + 8))(v121, v158);
      goto LABEL_192;
    }
    Date.timeIntervalSinceReferenceDate.getter();
    v92 = v124;
    (*(void (**)(unint64_t, uint64_t))(v157 + 8))(v121, v158);
LABEL_188:
    v117 = v92 - v93;
    if (v92 - v93 < 0.0)
      goto LABEL_198;
LABEL_199:
    *((_QWORD *)&v172 + 1) = MEMORY[0x24BEE13C8];
    *(double *)&v171 = v117;
    v125 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v159 + 232);
    swift_retain();
    v126 = (void (*)(uint64_t *, _QWORD))v125(&v169);
    v128 = v127;
    if (!*((_QWORD *)&v172 + 1))
    {
      outlined destroy of Any?((uint64_t)&v171, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRetain();
      v145 = specialized __RawDictionaryStorage.find<A>(_:)(0x6172754479616C70, 0xEC0000006E6F6974);
      v147 = v146;
      swift_bridgeObjectRelease();
      if ((v147 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v167 = (_QWORD *)*v128;
        *v128 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
        v149 = (uint64_t)v167;
        swift_bridgeObjectRelease();
        outlined init with take of Any((_OWORD *)(*(_QWORD *)(v149 + 56) + 32 * v145), v168);
        specialized _NativeDictionary._delete(at:)(v145, v149);
        *v128 = v149;
        swift_bridgeObjectRelease();
      }
      else
      {
        memset(v168, 0, sizeof(v168));
      }
      v52 = v154;
      v56 = v153;
      outlined destroy of Any?((uint64_t)v168, &demangling cache variable for type metadata for Any?);
      v126(&v169, 0);
      goto LABEL_216;
    }
    v129 = v19;
    outlined init with take of Any(&v171, v168);
    v130 = swift_isUniquelyReferenced_nonNull_native();
    v167 = (_QWORD *)*v128;
    v131 = v167;
    *v128 = 0x8000000000000000;
    v133 = specialized __RawDictionaryStorage.find<A>(_:)(0x6172754479616C70, 0xEC0000006E6F6974);
    v134 = v131[2];
    v135 = (v132 & 1) == 0;
    v136 = v134 + v135;
    if (__OFADD__(v134, v135))
      goto LABEL_228;
    v137 = v132;
    v138 = v131[3];
    v166 = v126;
    if (v138 < v136)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v136, v130);
      v139 = specialized __RawDictionaryStorage.find<A>(_:)(0x6172754479616C70, 0xEC0000006E6F6974);
      if ((v137 & 1) != (v140 & 1))
        goto LABEL_234;
      v133 = v139;
      v141 = v167;
      if ((v137 & 1) == 0)
        goto LABEL_204;
LABEL_212:
      v150 = (_OWORD *)(v141[7] + 32 * v133);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v150);
      outlined init with take of Any(v168, v150);
LABEL_213:
      v19 = v129;
      v52 = v154;
      v56 = v153;
      *v128 = (uint64_t)v141;
      swift_bridgeObjectRelease();
      v166(&v169, 0);
LABEL_216:
      swift_release_n();
      swift_release();
      continue;
    }
    break;
  }
  if ((v130 & 1) != 0)
  {
    v141 = v167;
    if ((v132 & 1) != 0)
      goto LABEL_212;
  }
  else
  {
    specialized _NativeDictionary.copy()();
    v141 = v167;
    if ((v137 & 1) != 0)
      goto LABEL_212;
  }
LABEL_204:
  v141[(v133 >> 6) + 8] |= 1 << v133;
  v142 = v141[6] + 16 * v133;
  strcpy((char *)v142, "playDuration");
  *(_BYTE *)(v142 + 13) = 0;
  *(_WORD *)(v142 + 14) = -5120;
  outlined init with take of Any(v168, (_OWORD *)(v141[7] + 32 * v133));
  v143 = v141[2];
  v50 = __OFADD__(v143, 1);
  v144 = v143 + 1;
  if (!v50)
  {
    v141[2] = v144;
    goto LABEL_213;
  }
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  __break(1u);
LABEL_234:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t NowPlayingSignalFactory.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC18PostSiriEngagement23NowPlayingSignalFactory_postEndDate, &demangling cache variable for type metadata for Date?);
  return v0;
}

uint64_t NowPlayingSignalFactory.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC18PostSiriEngagement23NowPlayingSignalFactory_postEndDate, &demangling cache variable for type metadata for Date?);
  return swift_deallocClassInstance();
}

uint64_t NowPlayingSignalFactory.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  NowPlayingSignalFactory.init()();
  return v0;
}

uint64_t NowPlayingSignalFactory.init()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of NowPlayingSignalFactory.init());
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MRPlaybackState, String));
  swift_arrayDestroy();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = v0 + OBJC_IVAR____TtC18PostSiriEngagement23NowPlayingSignalFactory_postEndDate;
  v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return v0;
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance NowPlayingSignalFactory(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 136))(*a1);
}

uint64_t protocol witness for SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:) in conformance NowPlayingSignalFactory()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, (uint64_t (*)(_QWORD))MEMORY[0x24BEA7DE8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SiriUISession>, type metadata accessor for SiriUISession);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PSETask>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EntitySimilarity>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedHomeKitClientAccessoryEvent>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMAlarmEvent>);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        type metadata accessor for Signal();
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SiriUISession>, type metadata accessor for SiriUISession);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, (uint64_t (*)(_QWORD))MEMORY[0x24BEA7DE8]);
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t result;

  v6 = a4 >> 1;
  v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v7)
    return MEMORY[0x24BEE4AF8];
  if (v7 <= 0)
  {
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v6 != a3)
    {
LABEL_10:
      if (v7 < 0)
        goto LABEL_24;
      v17 = *(_QWORD *)(a6(0) - 8);
      v18 = (char *)v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v19 = *(_QWORD *)(v17 + 72);
      v20 = a2 + v19 * a3;
      v21 = v19 * v7;
      v22 = &v18[v21];
      v23 = v20 + v21;
      if (v20 < (unint64_t)v22 && (unint64_t)v18 < v23)
        goto LABEL_24;
      swift_arrayInitWithCopy();
      return (uint64_t)v14;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v11 = *(_QWORD *)(a6(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = (_QWORD *)swift_allocObject();
  v15 = _swift_stdlib_malloc_size(v14);
  if (v12)
  {
    if (v15 - v13 == 0x8000000000000000 && v12 == -1)
      goto LABEL_23;
    v14[2] = v7;
    v14[3] = 2 * ((uint64_t)(v15 - v13) / v12);
    if (v6 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(_QWORD *, uint64_t, unint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, unint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v4 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, unint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, (uint64_t (*)(_QWORD))MEMORY[0x24BEA7DE8]);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  _QWORD *(*v16)(_QWORD *__return_ptr, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *(*v23)(_QWORD *__return_ptr, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  double v26;
  uint64_t *v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t *v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *(*v37)(_QWORD *__return_ptr, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  Swift::Int v106;
  Swift::Int v107;
  Swift::Int v108;
  char *v109;
  Swift::Int v110;
  char *v111;
  uint64_t v112;
  double v113[6];
  _QWORD v114[6];
  uint64_t v115;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_132;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_140;
  v6 = result;
  v112 = v1;
  v103 = v2;
  if (v3 < 2)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v115 = MEMORY[0x24BEE4AF8];
    v109 = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_99:
      v95 = v10;
      if (v13 >= 2)
      {
        v96 = *v103;
        do
        {
          v97 = v13 - 2;
          if (v13 < 2)
            goto LABEL_127;
          if (!v96)
            goto LABEL_139;
          v98 = v95;
          v99 = *(_QWORD *)&v95[16 * v97 + 32];
          v100 = *(_QWORD *)&v95[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v96 + 8 * v99), (char *)(v96 + 8 * *(_QWORD *)&v95[16 * v13 + 16]), v96 + 8 * v100, v109);
          if (v112)
            break;
          if (v100 < v99)
            goto LABEL_128;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          if (v97 >= *((_QWORD *)v98 + 2))
            goto LABEL_129;
          v101 = &v98[16 * v97 + 32];
          *(_QWORD *)v101 = v99;
          *((_QWORD *)v101 + 1) = v100;
          v102 = *((_QWORD *)v98 + 2);
          if (v13 > v102)
            goto LABEL_130;
          memmove(&v98[16 * v13 + 16], &v98[16 * v13 + 32], 16 * (v102 - v13));
          v95 = v98;
          *((_QWORD *)v98 + 2) = v102 - 1;
          v13 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_96:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v115 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v7 = v2;
    v8 = v5 >> 1;
    type metadata accessor for Signal();
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v2 = v7;
    v109 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v115 = v9;
  }
  v106 = v6;
  v11 = 0;
  v12 = *v2;
  v104 = *v2 - 8;
  v105 = *v2 + 16;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v108 = v3;
  while (1)
  {
    v14 = v11++;
    if (v11 >= v3)
      goto LABEL_31;
    v15 = *(_QWORD *)(v12 + 8 * v14);
    v16 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(v12 + 8 * v11) + 120);
    swift_retain();
    v17 = swift_retain();
    v18 = v16(v114, v17);
    v19 = *(double *)v114;
    (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v15 + 120))(v113, v18);
    swift_release();
    swift_release();
    v20 = v113[0];
    v11 = v14 + 2;
    if (v14 + 2 >= v3)
    {
LABEL_21:
      if (v19 >= v20)
        goto LABEL_31;
LABEL_24:
      if (v11 < v14)
        goto LABEL_133;
      if (v14 < v11)
      {
        v27 = (uint64_t *)(v104 + 8 * v11);
        v28 = v11;
        v29 = v14;
        v30 = (uint64_t *)(v12 + 8 * v14);
        while (1)
        {
          if (v29 != --v28)
          {
            if (!v12)
              goto LABEL_138;
            v31 = *v30;
            *v30 = *v27;
            *v27 = v31;
          }
          ++v29;
          --v27;
          ++v30;
          if (v29 >= v28)
            goto LABEL_31;
        }
      }
      goto LABEL_31;
    }
    v21 = v105 + 8 * v14;
    while (1)
    {
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)v21 + 120);
      swift_retain();
      v24 = swift_retain();
      v25 = v23(v114, v24);
      v26 = *(double *)v114;
      (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v22 + 120))(v113, v25);
      swift_release();
      swift_release();
      if (v19 < v20 == v26 >= v113[0])
        break;
      ++v11;
      v21 += 8;
      if (v108 == v11)
      {
        v11 = v108;
        v3 = v108;
        goto LABEL_21;
      }
    }
    v3 = v108;
    if (v19 < v20)
      goto LABEL_24;
LABEL_31:
    if (v11 >= v3)
      goto LABEL_48;
    if (__OFSUB__(v11, v14))
      goto LABEL_131;
    if (v11 - v14 >= v106)
      goto LABEL_48;
    if (__OFADD__(v14, v106))
      goto LABEL_134;
    v32 = v14 + v106 >= v3 ? v3 : v14 + v106;
    if (v32 < v14)
      break;
    if (v11 != v32)
    {
      v33 = (uint64_t *)(v104 + 8 * v11);
      v107 = v14;
      v110 = v32;
      do
      {
        v34 = *(_QWORD *)(v12 + 8 * v11);
        v35 = v33;
        do
        {
          v36 = *v35;
          v37 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v34 + 120);
          swift_retain();
          v38 = swift_retain();
          v39 = v37(v114, v38);
          v40 = *(double *)v114;
          (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v36 + 120))(v113, v39);
          swift_release();
          swift_release();
          if (v40 >= v113[0])
            break;
          if (!v12)
            goto LABEL_136;
          v41 = *v35;
          v34 = v35[1];
          *v35 = v34;
          v35[1] = v41;
          --v35;
          ++v14;
        }
        while (v11 != v14);
        ++v11;
        ++v33;
        v14 = v107;
      }
      while (v11 != v110);
      v11 = v110;
    }
LABEL_48:
    if (v11 < v14)
      goto LABEL_126;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v43 = *((_QWORD *)v10 + 2);
    v42 = *((_QWORD *)v10 + 3);
    v13 = v43 + 1;
    if (v43 >= v42 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v13;
    v111 = v10 + 32;
    v44 = &v10[16 * v43 + 32];
    *(_QWORD *)v44 = v14;
    *((_QWORD *)v44 + 1) = v11;
    if (v43)
    {
      v45 = v10 + 32;
      while (1)
      {
        v46 = v13 - 1;
        if (v13 >= 4)
        {
          v51 = &v45[16 * v13];
          v52 = *((_QWORD *)v51 - 8);
          v53 = *((_QWORD *)v51 - 7);
          v57 = __OFSUB__(v53, v52);
          v54 = v53 - v52;
          if (v57)
            goto LABEL_115;
          v56 = *((_QWORD *)v51 - 6);
          v55 = *((_QWORD *)v51 - 5);
          v57 = __OFSUB__(v55, v56);
          v49 = v55 - v56;
          v50 = v57;
          if (v57)
            goto LABEL_116;
          v58 = v13 - 2;
          v59 = &v45[16 * v13 - 32];
          v61 = *(_QWORD *)v59;
          v60 = *((_QWORD *)v59 + 1);
          v57 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          if (v57)
            goto LABEL_118;
          v57 = __OFADD__(v49, v62);
          v63 = v49 + v62;
          if (v57)
            goto LABEL_121;
          if (v63 >= v54)
          {
            v81 = &v45[16 * v46];
            v83 = *(_QWORD *)v81;
            v82 = *((_QWORD *)v81 + 1);
            v57 = __OFSUB__(v82, v83);
            v84 = v82 - v83;
            if (v57)
              goto LABEL_125;
            v74 = v49 < v84;
            goto LABEL_86;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v75 = *((_QWORD *)v10 + 4);
            v76 = *((_QWORD *)v10 + 5);
            v57 = __OFSUB__(v76, v75);
            v68 = v76 - v75;
            v69 = v57;
            goto LABEL_80;
          }
          v48 = *((_QWORD *)v10 + 4);
          v47 = *((_QWORD *)v10 + 5);
          v57 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          v50 = v57;
        }
        if ((v50 & 1) != 0)
          goto LABEL_117;
        v58 = v13 - 2;
        v64 = &v45[16 * v13 - 32];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v67 = __OFSUB__(v65, v66);
        v68 = v65 - v66;
        v69 = v67;
        if (v67)
          goto LABEL_120;
        v70 = &v45[16 * v46];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v57 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v57)
          goto LABEL_123;
        if (__OFADD__(v68, v73))
          goto LABEL_124;
        if (v68 + v73 >= v49)
        {
          v74 = v49 < v73;
LABEL_86:
          if (v74)
            v46 = v58;
          goto LABEL_88;
        }
LABEL_80:
        if ((v69 & 1) != 0)
          goto LABEL_119;
        v77 = &v45[16 * v46];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v57 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v57)
          goto LABEL_122;
        if (v80 < v68)
          goto LABEL_14;
LABEL_88:
        v85 = v46 - 1;
        if (v46 - 1 >= v13)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        v86 = v12;
        if (!v12)
          goto LABEL_137;
        v87 = v10;
        v88 = &v45[16 * v85];
        v89 = v45;
        v90 = *(_QWORD *)v88;
        v91 = &v89[16 * v46];
        v92 = *((_QWORD *)v91 + 1);
        v93 = v86;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v86 + 8 * *(_QWORD *)v88), (char *)(v86 + 8 * *(_QWORD *)v91), v86 + 8 * v92, v109);
        if (v112)
          goto LABEL_96;
        if (v92 < v90)
          goto LABEL_112;
        if (v46 > *((_QWORD *)v87 + 2))
          goto LABEL_113;
        *(_QWORD *)v88 = v90;
        v45 = v111;
        *(_QWORD *)&v111[16 * v85 + 8] = v92;
        v94 = *((_QWORD *)v87 + 2);
        if (v46 >= v94)
          goto LABEL_114;
        v10 = v87;
        v13 = v94 - 1;
        memmove(v91, v91 + 16, 16 * (v94 - 1 - v46));
        *((_QWORD *)v87 + 2) = v94 - 1;
        v12 = v93;
        if (v94 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v3 = v108;
    if (v11 >= v108)
      goto LABEL_99;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  char *v20;
  double v21;
  double v22;
  uint64_t (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  double v28;
  double v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  char *v35;
  double v36;
  double v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  double v43;
  double v44;
  uint64_t *v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t *v48;
  uint64_t v49;
  Swift::Int v50;
  char *v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  char *v57;
  double v58;
  double v59;
  uint64_t (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  double v65;
  double v66;
  uint64_t v67;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  Swift::Int v136;
  Swift::Int v137;
  Swift::Int v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v146 = type metadata accessor for Date();
  v143 = *(_QWORD *)(v146 - 8);
  v2 = MEMORY[0x24BDAC7A8](v146);
  v145 = (char *)&v131 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v144 = (char *)&v131 - v4;
  v5 = a1[1];
  result = _minimumMergeRunLength(_:)(v5);
  if (result >= v5)
  {
    if (v5 < 0)
      goto LABEL_134;
    if (v5)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1);
    return result;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_142;
  v136 = result;
  v132 = a1;
  if (v5 < 2)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v148 = MEMORY[0x24BEE4AF8];
    v141 = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 != 1)
    {
      v14 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_101:
      v122 = v142;
      if (v14 >= 2)
      {
        v123 = *v132;
        do
        {
          v124 = v14 - 2;
          if (v14 < 2)
            goto LABEL_129;
          if (!v123)
            goto LABEL_141;
          v125 = v10;
          v126 = v10 + 32;
          v127 = *(_QWORD *)&v10[16 * v124 + 32];
          v128 = *(_QWORD *)&v10[16 * v14 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v123 + 8 * v127), (char *)(v123 + 8 * *(_QWORD *)&v126[16 * v14 - 16]), (char *)(v123 + 8 * v128), v141);
          if (v122)
            break;
          if (v128 < v127)
            goto LABEL_130;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v125 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v125);
          if (v124 >= *((_QWORD *)v125 + 2))
            goto LABEL_131;
          v129 = &v125[16 * v124 + 32];
          *(_QWORD *)v129 = v127;
          *((_QWORD *)v129 + 1) = v128;
          v130 = *((_QWORD *)v125 + 2);
          if (v14 > v130)
            goto LABEL_132;
          v10 = v125;
          memmove(&v125[16 * v14 + 16], &v125[16 * v14 + 32], 16 * (v130 - v14));
          *((_QWORD *)v125 + 2) = v130 - 1;
          v14 = v130 - 1;
        }
        while (v130 > 2);
      }
LABEL_112:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v148 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = v7 >> 1;
    type metadata accessor for SiriExecutionStep(0);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v141 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v148 = v9;
  }
  v11 = 0;
  v12 = *a1;
  v13 = *a1 + 16;
  v133 = *a1 - 8;
  v134 = v13;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v139 = v5;
  v147 = v12;
  while (1)
  {
    v15 = v11;
    v16 = v11 + 1;
    if (v11 + 1 < v5)
    {
      v17 = *(_QWORD *)(v12 + 8 * v11);
      v18 = *(void (**)(uint64_t))(**(_QWORD **)(v12 + 8 * v16) + 312);
      swift_retain();
      v19 = swift_retain();
      v20 = v144;
      v18(v19);
      Date.timeIntervalSinceReferenceDate.getter();
      v22 = v21;
      v23 = *(uint64_t (**)(char *, uint64_t))(v143 + 8);
      v24 = v20;
      v25 = v146;
      v26 = v23(v24, v146);
      v27 = v145;
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 312))(v26);
      Date.timeIntervalSinceReferenceDate.getter();
      v29 = v28;
      v140 = (char *)v23;
      v23(v27, v25);
      swift_release();
      swift_release();
      v16 = v15 + 2;
      if (v15 + 2 >= v5)
      {
        v5 = v139;
      }
      else
      {
        v135 = v10;
        v138 = v15;
        v30 = v134 + 8 * v15;
        while (1)
        {
          v31 = v16;
          v32 = *(_QWORD *)(v30 - 8);
          v33 = *(void (**)(uint64_t))(**(_QWORD **)v30 + 312);
          swift_retain();
          v34 = swift_retain();
          v35 = v144;
          v33(v34);
          Date.timeIntervalSinceReferenceDate.getter();
          v37 = v36;
          v38 = v35;
          v39 = v146;
          v40 = (void (*)(char *, uint64_t))v140;
          v41 = ((uint64_t (*)(char *, uint64_t))v140)(v38, v146);
          v42 = v145;
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 312))(v41);
          Date.timeIntervalSinceReferenceDate.getter();
          v44 = v43;
          v40(v42, v39);
          swift_release();
          swift_release();
          if (v22 < v29 == v37 >= v44)
            break;
          v16 = v31 + 1;
          v30 += 8;
          if (v139 == v31 + 1)
          {
            v5 = v139;
            v16 = v139;
            v10 = v135;
            goto LABEL_23;
          }
        }
        v10 = v135;
        v5 = v139;
        v16 = v31;
LABEL_23:
        v15 = v138;
      }
      v12 = v147;
      if (v22 < v29)
      {
        if (v16 < v15)
          goto LABEL_135;
        if (v15 < v16)
        {
          v45 = (uint64_t *)(v133 + 8 * v16);
          v46 = v16;
          v47 = v15;
          v48 = (uint64_t *)(v147 + 8 * v15);
          do
          {
            if (v47 != --v46)
            {
              if (!v12)
                goto LABEL_140;
              v49 = *v48;
              *v48 = *v45;
              *v45 = v49;
            }
            ++v47;
            --v45;
            ++v48;
          }
          while (v47 < v46);
        }
      }
    }
    if (v16 < v5)
    {
      if (__OFSUB__(v16, v15))
        goto LABEL_133;
      if (v16 - v15 < v136)
        break;
    }
LABEL_51:
    if (v16 < v15)
      goto LABEL_128;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v140 = (char *)v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v70 = *((_QWORD *)v10 + 2);
    v69 = *((_QWORD *)v10 + 3);
    v14 = v70 + 1;
    v12 = v147;
    if (v70 >= v69 >> 1)
    {
      v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v10);
      v12 = v147;
      v10 = v121;
    }
    *((_QWORD *)v10 + 2) = v14;
    v71 = v10 + 32;
    v72 = &v10[16 * v70 + 32];
    v73 = v140;
    *(_QWORD *)v72 = v15;
    *((_QWORD *)v72 + 1) = v73;
    if (v70)
    {
      while (1)
      {
        v74 = v14 - 1;
        if (v14 >= 4)
        {
          v79 = &v71[16 * v14];
          v80 = *((_QWORD *)v79 - 8);
          v81 = *((_QWORD *)v79 - 7);
          v85 = __OFSUB__(v81, v80);
          v82 = v81 - v80;
          if (v85)
            goto LABEL_117;
          v84 = *((_QWORD *)v79 - 6);
          v83 = *((_QWORD *)v79 - 5);
          v85 = __OFSUB__(v83, v84);
          v77 = v83 - v84;
          v78 = v85;
          if (v85)
            goto LABEL_118;
          v86 = v14 - 2;
          v87 = &v71[16 * v14 - 32];
          v89 = *(_QWORD *)v87;
          v88 = *((_QWORD *)v87 + 1);
          v85 = __OFSUB__(v88, v89);
          v90 = v88 - v89;
          if (v85)
            goto LABEL_120;
          v85 = __OFADD__(v77, v90);
          v91 = v77 + v90;
          if (v85)
            goto LABEL_123;
          if (v91 >= v82)
          {
            v109 = &v71[16 * v74];
            v111 = *(_QWORD *)v109;
            v110 = *((_QWORD *)v109 + 1);
            v85 = __OFSUB__(v110, v111);
            v112 = v110 - v111;
            if (v85)
              goto LABEL_127;
            v102 = v77 < v112;
            goto LABEL_88;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v103 = *((_QWORD *)v10 + 4);
            v104 = *((_QWORD *)v10 + 5);
            v85 = __OFSUB__(v104, v103);
            v96 = v104 - v103;
            v97 = v85;
            goto LABEL_82;
          }
          v76 = *((_QWORD *)v10 + 4);
          v75 = *((_QWORD *)v10 + 5);
          v85 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          v78 = v85;
        }
        if ((v78 & 1) != 0)
          goto LABEL_119;
        v86 = v14 - 2;
        v92 = &v71[16 * v14 - 32];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v95 = __OFSUB__(v93, v94);
        v96 = v93 - v94;
        v97 = v95;
        if (v95)
          goto LABEL_122;
        v98 = &v71[16 * v74];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v85 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v85)
          goto LABEL_125;
        if (__OFADD__(v96, v101))
          goto LABEL_126;
        if (v96 + v101 >= v77)
        {
          v102 = v77 < v101;
LABEL_88:
          if (v102)
            v74 = v86;
          goto LABEL_90;
        }
LABEL_82:
        if ((v97 & 1) != 0)
          goto LABEL_121;
        v105 = &v71[16 * v74];
        v107 = *(_QWORD *)v105;
        v106 = *((_QWORD *)v105 + 1);
        v85 = __OFSUB__(v106, v107);
        v108 = v106 - v107;
        if (v85)
          goto LABEL_124;
        if (v108 < v96)
          goto LABEL_14;
LABEL_90:
        v113 = v74 - 1;
        if (v74 - 1 >= v14)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v12)
          goto LABEL_139;
        v114 = v10;
        v115 = &v71[16 * v113];
        v116 = *(_QWORD *)v115;
        v117 = &v71[16 * v74];
        v118 = *((_QWORD *)v117 + 1);
        v119 = v142;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v12 + 8 * *(_QWORD *)v115), (char *)(v12 + 8 * *(_QWORD *)v117), (char *)(v12 + 8 * v118), v141);
        v142 = v119;
        if (v119)
          goto LABEL_112;
        if (v118 < v116)
          goto LABEL_114;
        if (v74 > *((_QWORD *)v114 + 2))
          goto LABEL_115;
        *(_QWORD *)v115 = v116;
        *(_QWORD *)&v71[16 * v113 + 8] = v118;
        v120 = *((_QWORD *)v114 + 2);
        if (v74 >= v120)
          goto LABEL_116;
        v10 = v114;
        v14 = v120 - 1;
        memmove(&v71[16 * v74], v117 + 16, 16 * (v120 - 1 - v74));
        *((_QWORD *)v114 + 2) = v120 - 1;
        v12 = v147;
        if (v120 <= 2)
          goto LABEL_14;
      }
    }
    v14 = 1;
LABEL_14:
    v5 = v139;
    v11 = (Swift::Int)v140;
    if ((uint64_t)v140 >= v139)
      goto LABEL_101;
  }
  if (__OFADD__(v15, v136))
    goto LABEL_136;
  if (v15 + v136 >= v5)
    v50 = v5;
  else
    v50 = v15 + v136;
  if (v50 >= v15)
  {
    if (v16 != v50)
    {
      v135 = v10;
      v51 = (char *)(v133 + 8 * v16);
      v137 = v50;
      v138 = v15;
      do
      {
        v52 = *(_QWORD *)(v12 + 8 * v16);
        v53 = v15;
        v140 = v51;
        while (1)
        {
          v54 = *(_QWORD *)v51;
          v55 = *(void (**)(uint64_t))(*(_QWORD *)v52 + 312);
          swift_retain();
          v56 = swift_retain();
          v57 = v144;
          v55(v56);
          Date.timeIntervalSinceReferenceDate.getter();
          v59 = v58;
          v60 = *(uint64_t (**)(char *, uint64_t))(v143 + 8);
          v61 = v57;
          v62 = v146;
          v63 = v60(v61, v146);
          v64 = v145;
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 312))(v63);
          Date.timeIntervalSinceReferenceDate.getter();
          v66 = v65;
          v60(v64, v62);
          swift_release();
          swift_release();
          if (v59 >= v66)
            break;
          v12 = v147;
          if (!v147)
            goto LABEL_138;
          v67 = *(_QWORD *)v51;
          v52 = *((_QWORD *)v51 + 1);
          *(_QWORD *)v51 = v52;
          *((_QWORD *)v51 + 1) = v67;
          v51 -= 8;
          if (v16 == ++v53)
            goto LABEL_44;
        }
        v12 = v147;
LABEL_44:
        ++v16;
        v51 = v140 + 8;
        v15 = v138;
      }
      while (v16 != v137);
      v16 = v137;
      v10 = v135;
    }
    goto LABEL_51;
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  Swift::Int result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t *v40;
  uint64_t v41;
  Swift::Int v42;
  _QWORD *v43;
  Swift::Int v44;
  uint64_t v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  Swift::Int v123;
  Swift::Int v124;
  Swift::Int v125;
  Swift::Int v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v132 = type metadata accessor for Date();
  v130 = *(_QWORD *)(v132 - 8);
  v3 = MEMORY[0x24BDAC7A8](v132);
  v131 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v118 - v5;
  v7 = a1[1];
  result = _minimumMergeRunLength(_:)(v7);
  if (result >= v7)
  {
    if (v7 < 0)
      goto LABEL_134;
    if (v7)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v7, 1, a1);
    return result;
  }
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  if (v7 < -1)
    goto LABEL_142;
  v123 = result;
  v129 = v1;
  v120 = a1;
  if (v7 < 2)
  {
    v12 = (char *)MEMORY[0x24BEE4AF8];
    v134 = MEMORY[0x24BEE4AF8];
    v128 = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v7 != 1)
    {
      v16 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_100:
      v109 = v129;
      if (v16 >= 2)
      {
        v110 = *v120;
        do
        {
          v111 = v16 - 2;
          if (v16 < 2)
            goto LABEL_129;
          if (!v110)
            goto LABEL_141;
          v112 = v12;
          v113 = v12 + 32;
          v114 = *(_QWORD *)&v12[16 * v111 + 32];
          v115 = *(_QWORD *)&v12[16 * v16 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v110 + 8 * v114), (char *)(v110 + 8 * *(_QWORD *)&v113[16 * v16 - 16]), (char *)(v110 + 8 * v115), v128);
          if (v109)
            break;
          if (v115 < v114)
            goto LABEL_130;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v112 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v112);
          if (v111 >= *((_QWORD *)v112 + 2))
            goto LABEL_131;
          v116 = &v112[16 * v111 + 32];
          *(_QWORD *)v116 = v114;
          *((_QWORD *)v116 + 1) = v115;
          v117 = *((_QWORD *)v112 + 2);
          if (v16 > v117)
            goto LABEL_132;
          v12 = v112;
          memmove(&v112[16 * v16 + 16], &v112[16 * v16 + 32], 16 * (v117 - v16));
          *((_QWORD *)v112 + 2) = v117 - 1;
          v16 = v117 - 1;
        }
        while (v117 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v10 = v9 >> 1;
    type metadata accessor for SiriExecutionTask(0);
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
    v128 = (char *)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    v134 = v11;
  }
  v13 = 0;
  v14 = *a1;
  v15 = *a1 + 16;
  v121 = *a1 - 8;
  v122 = v15;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v126 = v7;
  v133 = v14;
  while (1)
  {
    v17 = v13;
    v18 = v13 + 1;
    if (v13 + 1 < v7)
    {
      v19 = *(_QWORD *)(v14 + 8 * v13);
      v20 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v14 + 8 * v18) + 320);
      swift_retain();
      v21 = swift_retain();
      v22 = v20(v21);
      v23 = v131;
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 320))(v22);
      LODWORD(v127) = static Date.< infix(_:_:)();
      v24 = *(void (**)(char *, uint64_t))(v130 + 8);
      v25 = v23;
      v26 = v132;
      v24(v25, v132);
      v24(v6, v26);
      swift_release();
      v7 = v126;
      swift_release();
      v18 = v17 + 2;
      if (v17 + 2 < v7)
      {
        v125 = v17;
        v27 = v122 + 8 * v17;
        while (1)
        {
          v28 = v18;
          v29 = *(_QWORD *)(v27 - 8);
          v30 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v27 + 320);
          swift_retain();
          v31 = swift_retain();
          v32 = v30(v31);
          v33 = v131;
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 320))(v32);
          v34 = static Date.< infix(_:_:)();
          v35 = v33;
          v36 = v132;
          v24(v35, v132);
          v24(v6, v36);
          swift_release();
          swift_release();
          if (((v127 ^ v34) & 1) != 0)
            break;
          v18 = v28 + 1;
          v27 += 8;
          v7 = v126;
          if (v126 == v28 + 1)
          {
            v18 = v126;
            goto LABEL_22;
          }
        }
        v7 = v126;
        v18 = v28;
LABEL_22:
        v17 = v125;
      }
      v14 = v133;
      if ((v127 & 1) != 0)
      {
        if (v18 < v17)
          goto LABEL_135;
        if (v17 < v18)
        {
          v37 = (uint64_t *)(v121 + 8 * v18);
          v38 = v18;
          v39 = v17;
          v40 = (uint64_t *)(v133 + 8 * v17);
          do
          {
            if (v39 != --v38)
            {
              if (!v14)
                goto LABEL_140;
              v41 = *v40;
              *v40 = *v37;
              *v37 = v41;
            }
            ++v39;
            --v37;
            ++v40;
          }
          while (v39 < v38);
        }
      }
    }
    if (v18 < v7)
    {
      if (__OFSUB__(v18, v17))
        goto LABEL_133;
      if (v18 - v17 < v123)
        break;
    }
LABEL_50:
    if (v18 < v17)
      goto LABEL_128;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v58 = *((_QWORD *)v12 + 2);
    v57 = *((_QWORD *)v12 + 3);
    v16 = v58 + 1;
    v14 = v133;
    if (v58 >= v57 >> 1)
    {
      v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v12);
      v14 = v133;
      v12 = v108;
    }
    *((_QWORD *)v12 + 2) = v16;
    v59 = &v12[16 * v58 + 32];
    *(_QWORD *)v59 = v17;
    *((_QWORD *)v59 + 1) = v18;
    v127 = (_QWORD *)v18;
    if (v58)
    {
      v60 = v12 + 32;
      while (1)
      {
        v61 = v16 - 1;
        if (v16 >= 4)
        {
          v66 = &v60[16 * v16];
          v67 = *((_QWORD *)v66 - 8);
          v68 = *((_QWORD *)v66 - 7);
          v72 = __OFSUB__(v68, v67);
          v69 = v68 - v67;
          if (v72)
            goto LABEL_117;
          v71 = *((_QWORD *)v66 - 6);
          v70 = *((_QWORD *)v66 - 5);
          v72 = __OFSUB__(v70, v71);
          v64 = v70 - v71;
          v65 = v72;
          if (v72)
            goto LABEL_118;
          v73 = v16 - 2;
          v74 = &v60[16 * v16 - 32];
          v76 = *(_QWORD *)v74;
          v75 = *((_QWORD *)v74 + 1);
          v72 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v72)
            goto LABEL_120;
          v72 = __OFADD__(v64, v77);
          v78 = v64 + v77;
          if (v72)
            goto LABEL_123;
          if (v78 >= v69)
          {
            v96 = &v60[16 * v61];
            v98 = *(_QWORD *)v96;
            v97 = *((_QWORD *)v96 + 1);
            v72 = __OFSUB__(v97, v98);
            v99 = v97 - v98;
            if (v72)
              goto LABEL_127;
            v89 = v64 < v99;
            goto LABEL_88;
          }
        }
        else
        {
          if (v16 != 3)
          {
            v90 = *((_QWORD *)v12 + 4);
            v91 = *((_QWORD *)v12 + 5);
            v72 = __OFSUB__(v91, v90);
            v83 = v91 - v90;
            v84 = v72;
            goto LABEL_82;
          }
          v63 = *((_QWORD *)v12 + 4);
          v62 = *((_QWORD *)v12 + 5);
          v72 = __OFSUB__(v62, v63);
          v64 = v62 - v63;
          v65 = v72;
        }
        if ((v65 & 1) != 0)
          goto LABEL_119;
        v73 = v16 - 2;
        v79 = &v60[16 * v16 - 32];
        v81 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        v82 = __OFSUB__(v80, v81);
        v83 = v80 - v81;
        v84 = v82;
        if (v82)
          goto LABEL_122;
        v85 = &v60[16 * v61];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v72 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v72)
          goto LABEL_125;
        if (__OFADD__(v83, v88))
          goto LABEL_126;
        if (v83 + v88 >= v64)
        {
          v89 = v64 < v88;
LABEL_88:
          if (v89)
            v61 = v73;
          goto LABEL_90;
        }
LABEL_82:
        if ((v84 & 1) != 0)
          goto LABEL_121;
        v92 = &v60[16 * v61];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v72 = __OFSUB__(v93, v94);
        v95 = v93 - v94;
        if (v72)
          goto LABEL_124;
        if (v95 < v83)
          goto LABEL_14;
LABEL_90:
        v100 = v61 - 1;
        if (v61 - 1 >= v16)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v14)
          goto LABEL_139;
        v101 = v12;
        v102 = &v60[16 * v100];
        v103 = *(_QWORD *)v102;
        v104 = &v60[16 * v61];
        v105 = *((_QWORD *)v104 + 1);
        v106 = v129;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v14 + 8 * *(_QWORD *)v102), (char *)(v14 + 8 * *(_QWORD *)v104), (char *)(v14 + 8 * v105), v128);
        v129 = v106;
        if (v106)
          goto LABEL_111;
        if (v105 < v103)
          goto LABEL_114;
        if (v61 > *((_QWORD *)v101 + 2))
          goto LABEL_115;
        *(_QWORD *)v102 = v103;
        *(_QWORD *)&v60[16 * v100 + 8] = v105;
        v107 = *((_QWORD *)v101 + 2);
        if (v61 >= v107)
          goto LABEL_116;
        v12 = v101;
        v16 = v107 - 1;
        memmove(&v60[16 * v61], v104 + 16, 16 * (v107 - 1 - v61));
        *((_QWORD *)v101 + 2) = v107 - 1;
        v14 = v133;
        if (v107 <= 2)
          goto LABEL_14;
      }
    }
    v16 = 1;
LABEL_14:
    v7 = v126;
    v13 = (Swift::Int)v127;
    if ((uint64_t)v127 >= v126)
      goto LABEL_100;
  }
  if (__OFADD__(v17, v123))
    goto LABEL_136;
  if (v17 + v123 >= v7)
    v42 = v7;
  else
    v42 = v17 + v123;
  if (v42 >= v17)
  {
    if (v18 != v42)
    {
      v124 = v42;
      v125 = v17;
      v119 = v12;
      v43 = (_QWORD *)(v121 + 8 * v18);
      do
      {
        v44 = v18;
        v45 = *(_QWORD *)(v14 + 8 * v18);
        v46 = v125;
        v127 = v43;
        while (1)
        {
          v47 = *v43;
          v48 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 320);
          swift_retain();
          v49 = swift_retain();
          v50 = v48(v49);
          v51 = v131;
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 320))(v50);
          v52 = static Date.< infix(_:_:)();
          v53 = *(void (**)(char *, uint64_t))(v130 + 8);
          v54 = v51;
          v55 = v132;
          v53(v54, v132);
          v53(v6, v55);
          swift_release();
          swift_release();
          if ((v52 & 1) == 0)
            break;
          v14 = v133;
          if (!v133)
            goto LABEL_138;
          v56 = *v43;
          v45 = v43[1];
          *v43 = v45;
          v43[1] = v56;
          --v43;
          if (v44 == ++v46)
            goto LABEL_43;
        }
        v14 = v133;
LABEL_43:
        v18 = v44 + 1;
        v43 = v127 + 1;
      }
      while (v44 + 1 != v124);
      v18 = v124;
      v12 = v119;
      v17 = v125;
    }
    goto LABEL_50;
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  Swift::Int result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t *v40;
  uint64_t v41;
  Swift::Int v42;
  _QWORD *v43;
  Swift::Int v44;
  uint64_t v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  Swift::Int v123;
  Swift::Int v124;
  Swift::Int v125;
  Swift::Int v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v132 = type metadata accessor for Date();
  v130 = *(_QWORD *)(v132 - 8);
  v3 = MEMORY[0x24BDAC7A8](v132);
  v131 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v118 - v5;
  v7 = a1[1];
  result = _minimumMergeRunLength(_:)(v7);
  if (result >= v7)
  {
    if (v7 < 0)
      goto LABEL_134;
    if (v7)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v7, 1, a1);
    return result;
  }
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  if (v7 < -1)
    goto LABEL_142;
  v123 = result;
  v129 = v1;
  v120 = a1;
  if (v7 < 2)
  {
    v12 = (char *)MEMORY[0x24BEE4AF8];
    v134 = MEMORY[0x24BEE4AF8];
    v128 = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v7 != 1)
    {
      v16 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_100:
      v109 = v129;
      if (v16 >= 2)
      {
        v110 = *v120;
        do
        {
          v111 = v16 - 2;
          if (v16 < 2)
            goto LABEL_129;
          if (!v110)
            goto LABEL_141;
          v112 = v12;
          v113 = v12 + 32;
          v114 = *(_QWORD *)&v12[16 * v111 + 32];
          v115 = *(_QWORD *)&v12[16 * v16 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v110 + 8 * v114), (char *)(v110 + 8 * *(_QWORD *)&v113[16 * v16 - 16]), (char *)(v110 + 8 * v115), v128);
          if (v109)
            break;
          if (v115 < v114)
            goto LABEL_130;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v112 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v112);
          if (v111 >= *((_QWORD *)v112 + 2))
            goto LABEL_131;
          v116 = &v112[16 * v111 + 32];
          *(_QWORD *)v116 = v114;
          *((_QWORD *)v116 + 1) = v115;
          v117 = *((_QWORD *)v112 + 2);
          if (v16 > v117)
            goto LABEL_132;
          v12 = v112;
          memmove(&v112[16 * v16 + 16], &v112[16 * v16 + 32], 16 * (v117 - v16));
          *((_QWORD *)v112 + 2) = v117 - 1;
          v16 = v117 - 1;
        }
        while (v117 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v10 = v9 >> 1;
    type metadata accessor for IntelligenceEngineSession(0);
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
    v128 = (char *)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    v134 = v11;
  }
  v13 = 0;
  v14 = *a1;
  v15 = *a1 + 16;
  v121 = *a1 - 8;
  v122 = v15;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v126 = v7;
  v133 = v14;
  while (1)
  {
    v17 = v13;
    v18 = v13 + 1;
    if (v13 + 1 < v7)
    {
      v19 = *(_QWORD *)(v14 + 8 * v13);
      v20 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v14 + 8 * v18) + 160);
      swift_retain();
      v21 = swift_retain();
      v22 = v20(v21);
      v23 = v131;
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 160))(v22);
      LODWORD(v127) = static Date.< infix(_:_:)();
      v24 = *(void (**)(char *, uint64_t))(v130 + 8);
      v25 = v23;
      v26 = v132;
      v24(v25, v132);
      v24(v6, v26);
      swift_release();
      v7 = v126;
      swift_release();
      v18 = v17 + 2;
      if (v17 + 2 < v7)
      {
        v125 = v17;
        v27 = v122 + 8 * v17;
        while (1)
        {
          v28 = v18;
          v29 = *(_QWORD *)(v27 - 8);
          v30 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v27 + 160);
          swift_retain();
          v31 = swift_retain();
          v32 = v30(v31);
          v33 = v131;
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 160))(v32);
          v34 = static Date.< infix(_:_:)();
          v35 = v33;
          v36 = v132;
          v24(v35, v132);
          v24(v6, v36);
          swift_release();
          swift_release();
          if (((v127 ^ v34) & 1) != 0)
            break;
          v18 = v28 + 1;
          v27 += 8;
          v7 = v126;
          if (v126 == v28 + 1)
          {
            v18 = v126;
            goto LABEL_22;
          }
        }
        v7 = v126;
        v18 = v28;
LABEL_22:
        v17 = v125;
      }
      v14 = v133;
      if ((v127 & 1) != 0)
      {
        if (v18 < v17)
          goto LABEL_135;
        if (v17 < v18)
        {
          v37 = (uint64_t *)(v121 + 8 * v18);
          v38 = v18;
          v39 = v17;
          v40 = (uint64_t *)(v133 + 8 * v17);
          do
          {
            if (v39 != --v38)
            {
              if (!v14)
                goto LABEL_140;
              v41 = *v40;
              *v40 = *v37;
              *v37 = v41;
            }
            ++v39;
            --v37;
            ++v40;
          }
          while (v39 < v38);
        }
      }
    }
    if (v18 < v7)
    {
      if (__OFSUB__(v18, v17))
        goto LABEL_133;
      if (v18 - v17 < v123)
        break;
    }
LABEL_50:
    if (v18 < v17)
      goto LABEL_128;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v58 = *((_QWORD *)v12 + 2);
    v57 = *((_QWORD *)v12 + 3);
    v16 = v58 + 1;
    v14 = v133;
    if (v58 >= v57 >> 1)
    {
      v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v12);
      v14 = v133;
      v12 = v108;
    }
    *((_QWORD *)v12 + 2) = v16;
    v59 = &v12[16 * v58 + 32];
    *(_QWORD *)v59 = v17;
    *((_QWORD *)v59 + 1) = v18;
    v127 = (_QWORD *)v18;
    if (v58)
    {
      v60 = v12 + 32;
      while (1)
      {
        v61 = v16 - 1;
        if (v16 >= 4)
        {
          v66 = &v60[16 * v16];
          v67 = *((_QWORD *)v66 - 8);
          v68 = *((_QWORD *)v66 - 7);
          v72 = __OFSUB__(v68, v67);
          v69 = v68 - v67;
          if (v72)
            goto LABEL_117;
          v71 = *((_QWORD *)v66 - 6);
          v70 = *((_QWORD *)v66 - 5);
          v72 = __OFSUB__(v70, v71);
          v64 = v70 - v71;
          v65 = v72;
          if (v72)
            goto LABEL_118;
          v73 = v16 - 2;
          v74 = &v60[16 * v16 - 32];
          v76 = *(_QWORD *)v74;
          v75 = *((_QWORD *)v74 + 1);
          v72 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v72)
            goto LABEL_120;
          v72 = __OFADD__(v64, v77);
          v78 = v64 + v77;
          if (v72)
            goto LABEL_123;
          if (v78 >= v69)
          {
            v96 = &v60[16 * v61];
            v98 = *(_QWORD *)v96;
            v97 = *((_QWORD *)v96 + 1);
            v72 = __OFSUB__(v97, v98);
            v99 = v97 - v98;
            if (v72)
              goto LABEL_127;
            v89 = v64 < v99;
            goto LABEL_88;
          }
        }
        else
        {
          if (v16 != 3)
          {
            v90 = *((_QWORD *)v12 + 4);
            v91 = *((_QWORD *)v12 + 5);
            v72 = __OFSUB__(v91, v90);
            v83 = v91 - v90;
            v84 = v72;
            goto LABEL_82;
          }
          v63 = *((_QWORD *)v12 + 4);
          v62 = *((_QWORD *)v12 + 5);
          v72 = __OFSUB__(v62, v63);
          v64 = v62 - v63;
          v65 = v72;
        }
        if ((v65 & 1) != 0)
          goto LABEL_119;
        v73 = v16 - 2;
        v79 = &v60[16 * v16 - 32];
        v81 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        v82 = __OFSUB__(v80, v81);
        v83 = v80 - v81;
        v84 = v82;
        if (v82)
          goto LABEL_122;
        v85 = &v60[16 * v61];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v72 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v72)
          goto LABEL_125;
        if (__OFADD__(v83, v88))
          goto LABEL_126;
        if (v83 + v88 >= v64)
        {
          v89 = v64 < v88;
LABEL_88:
          if (v89)
            v61 = v73;
          goto LABEL_90;
        }
LABEL_82:
        if ((v84 & 1) != 0)
          goto LABEL_121;
        v92 = &v60[16 * v61];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v72 = __OFSUB__(v93, v94);
        v95 = v93 - v94;
        if (v72)
          goto LABEL_124;
        if (v95 < v83)
          goto LABEL_14;
LABEL_90:
        v100 = v61 - 1;
        if (v61 - 1 >= v16)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v14)
          goto LABEL_139;
        v101 = v12;
        v102 = &v60[16 * v100];
        v103 = *(_QWORD *)v102;
        v104 = &v60[16 * v61];
        v105 = *((_QWORD *)v104 + 1);
        v106 = v129;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v14 + 8 * *(_QWORD *)v102), (char *)(v14 + 8 * *(_QWORD *)v104), (char *)(v14 + 8 * v105), v128);
        v129 = v106;
        if (v106)
          goto LABEL_111;
        if (v105 < v103)
          goto LABEL_114;
        if (v61 > *((_QWORD *)v101 + 2))
          goto LABEL_115;
        *(_QWORD *)v102 = v103;
        *(_QWORD *)&v60[16 * v100 + 8] = v105;
        v107 = *((_QWORD *)v101 + 2);
        if (v61 >= v107)
          goto LABEL_116;
        v12 = v101;
        v16 = v107 - 1;
        memmove(&v60[16 * v61], v104 + 16, 16 * (v107 - 1 - v61));
        *((_QWORD *)v101 + 2) = v107 - 1;
        v14 = v133;
        if (v107 <= 2)
          goto LABEL_14;
      }
    }
    v16 = 1;
LABEL_14:
    v7 = v126;
    v13 = (Swift::Int)v127;
    if ((uint64_t)v127 >= v126)
      goto LABEL_100;
  }
  if (__OFADD__(v17, v123))
    goto LABEL_136;
  if (v17 + v123 >= v7)
    v42 = v7;
  else
    v42 = v17 + v123;
  if (v42 >= v17)
  {
    if (v18 != v42)
    {
      v124 = v42;
      v125 = v17;
      v119 = v12;
      v43 = (_QWORD *)(v121 + 8 * v18);
      do
      {
        v44 = v18;
        v45 = *(_QWORD *)(v14 + 8 * v18);
        v46 = v125;
        v127 = v43;
        while (1)
        {
          v47 = *v43;
          v48 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 160);
          swift_retain();
          v49 = swift_retain();
          v50 = v48(v49);
          v51 = v131;
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 160))(v50);
          v52 = static Date.< infix(_:_:)();
          v53 = *(void (**)(char *, uint64_t))(v130 + 8);
          v54 = v51;
          v55 = v132;
          v53(v54, v132);
          v53(v6, v55);
          swift_release();
          swift_release();
          if ((v52 & 1) == 0)
            break;
          v14 = v133;
          if (!v133)
            goto LABEL_138;
          v56 = *v43;
          v45 = v43[1];
          *v43 = v45;
          v43[1] = v56;
          --v43;
          if (v44 == ++v46)
            goto LABEL_43;
        }
        v14 = v133;
LABEL_43:
        v18 = v44 + 1;
        v43 = v127 + 1;
      }
      while (v44 + 1 != v124);
      v18 = v124;
      v12 = v119;
      v17 = v125;
    }
    goto LABEL_50;
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  double *v28;
  double v29;
  Swift::Int v30;
  double *v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 8;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = *(double *)(v84 + 16 * i + 8);
        v89 = v86;
        v90 = v85;
        do
        {
          if (v88 >= *(double *)v90)
            break;
          if (!v84)
            goto LABEL_141;
          v91 = *(_QWORD *)(v90 + 8);
          *(_OWORD *)(v90 + 8) = *(_OWORD *)(v90 - 8);
          *(_QWORD *)(v90 - 8) = v91;
          *(double *)v90 = v88;
          v90 -= 16;
        }
        while (!__CFADD__(v89++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v93 = v12;
      v103 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v94)
            goto LABEL_145;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v94 + 16 * v97), (char *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_134;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_135;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v103 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v103 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v104 = v6;
  v105 = v3;
  v106 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10 + 8);
      v16 = *(double *)(v11 + 16 * v14 + 8);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v102 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 < v16 == *v17 >= v19)
            break;
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = 16 * v10;
          v21 = 16 * v14;
          v22 = v10;
          v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_144;
              v24 = v11 + v20;
              v25 = *(_QWORD *)(v11 + v21);
              v26 = *(_QWORD *)(v11 + v21 + 8);
              *(_OWORD *)(v11 + v21) = *(_OWORD *)(v11 + v20 - 16);
              *(_QWORD *)(v24 - 16) = v25;
              *(_QWORD *)(v24 - 8) = v26;
            }
            ++v23;
            v20 -= 16;
            v21 += 16;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (double *)(v11 + 16 * v10);
      do
      {
        v29 = *(double *)(v11 + 16 * v10 + 8);
        v30 = v14;
        v31 = v28;
        do
        {
          if (v29 >= *(v31 - 1))
            break;
          if (!v11)
            goto LABEL_142;
          v32 = *v31;
          *(_OWORD *)v31 = *((_OWORD *)v31 - 1);
          *(v31 - 1) = v29;
          *(v31 - 2) = v32;
          v31 -= 2;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 2;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v106;
    if (v34 >= v33 >> 1)
    {
      v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v106;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_120;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_121;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_123;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_126;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_130;
            v65 = v40 < v75;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_77;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_122;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_125;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_128;
        if (__OFADD__(v59, v64))
          goto LABEL_129;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_83:
          if (v65)
            v37 = v49;
          goto LABEL_85;
        }
LABEL_77:
        if ((v60 & 1) != 0)
          goto LABEL_124;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_127;
        if (v71 < v59)
          goto LABEL_15;
LABEL_85:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 16 * *(_QWORD *)v78), (char *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_93;
        if (v81 < v79)
          goto LABEL_117;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_118;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_119;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v106;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v10 >= v105)
    {
      v9 = v103;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  _QWORD *(*v16)(_QWORD *__return_ptr, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *(*v23)(_QWORD *__return_ptr, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  double v26;
  uint64_t *v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t *v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *(*v37)(_QWORD *__return_ptr, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  Swift::Int v106;
  Swift::Int v107;
  Swift::Int v108;
  char *v109;
  Swift::Int v110;
  char *v111;
  uint64_t v112;
  double v113[6];
  _QWORD v114[6];
  uint64_t v115;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_132;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_140;
  v6 = result;
  v112 = v1;
  v103 = v2;
  if (v3 < 2)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v115 = MEMORY[0x24BEE4AF8];
    v109 = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_99:
      v95 = v10;
      if (v13 >= 2)
      {
        v96 = *v103;
        do
        {
          v97 = v13 - 2;
          if (v13 < 2)
            goto LABEL_127;
          if (!v96)
            goto LABEL_139;
          v98 = v95;
          v99 = *(_QWORD *)&v95[16 * v97 + 32];
          v100 = *(_QWORD *)&v95[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v96 + 8 * v99), (char *)(v96 + 8 * *(_QWORD *)&v95[16 * v13 + 16]), v96 + 8 * v100, v109);
          if (v112)
            break;
          if (v100 < v99)
            goto LABEL_128;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          if (v97 >= *((_QWORD *)v98 + 2))
            goto LABEL_129;
          v101 = &v98[16 * v97 + 32];
          *(_QWORD *)v101 = v99;
          *((_QWORD *)v101 + 1) = v100;
          v102 = *((_QWORD *)v98 + 2);
          if (v13 > v102)
            goto LABEL_130;
          memmove(&v98[16 * v13 + 16], &v98[16 * v13 + 32], 16 * (v102 - v13));
          v95 = v98;
          *((_QWORD *)v98 + 2) = v102 - 1;
          v13 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_96:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v115 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v7 = v2;
    v8 = v5 >> 1;
    type metadata accessor for Signal();
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v2 = v7;
    v109 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v115 = v9;
  }
  v106 = v6;
  v11 = 0;
  v12 = *v2;
  v104 = *v2 - 8;
  v105 = *v2 + 16;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v108 = v3;
  while (1)
  {
    v14 = v11++;
    if (v11 >= v3)
      goto LABEL_31;
    v15 = *(_QWORD *)(v12 + 8 * v14);
    v16 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(v12 + 8 * v11) + 120);
    swift_retain();
    v17 = swift_retain();
    v18 = v16(v114, v17);
    v19 = *(double *)v114;
    (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v15 + 120))(v113, v18);
    swift_release();
    swift_release();
    v20 = v113[0];
    v11 = v14 + 2;
    if (v14 + 2 >= v3)
    {
LABEL_21:
      if (v19 >= v20)
        goto LABEL_31;
LABEL_24:
      if (v11 < v14)
        goto LABEL_133;
      if (v14 < v11)
      {
        v27 = (uint64_t *)(v104 + 8 * v11);
        v28 = v11;
        v29 = v14;
        v30 = (uint64_t *)(v12 + 8 * v14);
        while (1)
        {
          if (v29 != --v28)
          {
            if (!v12)
              goto LABEL_138;
            v31 = *v30;
            *v30 = *v27;
            *v27 = v31;
          }
          ++v29;
          --v27;
          ++v30;
          if (v29 >= v28)
            goto LABEL_31;
        }
      }
      goto LABEL_31;
    }
    v21 = v105 + 8 * v14;
    while (1)
    {
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)v21 + 120);
      swift_retain();
      v24 = swift_retain();
      v25 = v23(v114, v24);
      v26 = *(double *)v114;
      (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v22 + 120))(v113, v25);
      swift_release();
      swift_release();
      if (v19 < v20 == v26 >= v113[0])
        break;
      ++v11;
      v21 += 8;
      if (v108 == v11)
      {
        v11 = v108;
        v3 = v108;
        goto LABEL_21;
      }
    }
    v3 = v108;
    if (v19 < v20)
      goto LABEL_24;
LABEL_31:
    if (v11 >= v3)
      goto LABEL_48;
    if (__OFSUB__(v11, v14))
      goto LABEL_131;
    if (v11 - v14 >= v106)
      goto LABEL_48;
    if (__OFADD__(v14, v106))
      goto LABEL_134;
    v32 = v14 + v106 >= v3 ? v3 : v14 + v106;
    if (v32 < v14)
      break;
    if (v11 != v32)
    {
      v33 = (uint64_t *)(v104 + 8 * v11);
      v107 = v14;
      v110 = v32;
      do
      {
        v34 = *(_QWORD *)(v12 + 8 * v11);
        v35 = v33;
        do
        {
          v36 = *v35;
          v37 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v34 + 120);
          swift_retain();
          v38 = swift_retain();
          v39 = v37(v114, v38);
          v40 = *(double *)v114;
          (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v36 + 120))(v113, v39);
          swift_release();
          swift_release();
          if (v40 >= v113[0])
            break;
          if (!v12)
            goto LABEL_136;
          v41 = *v35;
          v34 = v35[1];
          *v35 = v34;
          v35[1] = v41;
          --v35;
          ++v14;
        }
        while (v11 != v14);
        ++v11;
        ++v33;
        v14 = v107;
      }
      while (v11 != v110);
      v11 = v110;
    }
LABEL_48:
    if (v11 < v14)
      goto LABEL_126;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v43 = *((_QWORD *)v10 + 2);
    v42 = *((_QWORD *)v10 + 3);
    v13 = v43 + 1;
    if (v43 >= v42 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v13;
    v111 = v10 + 32;
    v44 = &v10[16 * v43 + 32];
    *(_QWORD *)v44 = v14;
    *((_QWORD *)v44 + 1) = v11;
    if (v43)
    {
      v45 = v10 + 32;
      while (1)
      {
        v46 = v13 - 1;
        if (v13 >= 4)
        {
          v51 = &v45[16 * v13];
          v52 = *((_QWORD *)v51 - 8);
          v53 = *((_QWORD *)v51 - 7);
          v57 = __OFSUB__(v53, v52);
          v54 = v53 - v52;
          if (v57)
            goto LABEL_115;
          v56 = *((_QWORD *)v51 - 6);
          v55 = *((_QWORD *)v51 - 5);
          v57 = __OFSUB__(v55, v56);
          v49 = v55 - v56;
          v50 = v57;
          if (v57)
            goto LABEL_116;
          v58 = v13 - 2;
          v59 = &v45[16 * v13 - 32];
          v61 = *(_QWORD *)v59;
          v60 = *((_QWORD *)v59 + 1);
          v57 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          if (v57)
            goto LABEL_118;
          v57 = __OFADD__(v49, v62);
          v63 = v49 + v62;
          if (v57)
            goto LABEL_121;
          if (v63 >= v54)
          {
            v81 = &v45[16 * v46];
            v83 = *(_QWORD *)v81;
            v82 = *((_QWORD *)v81 + 1);
            v57 = __OFSUB__(v82, v83);
            v84 = v82 - v83;
            if (v57)
              goto LABEL_125;
            v74 = v49 < v84;
            goto LABEL_86;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v75 = *((_QWORD *)v10 + 4);
            v76 = *((_QWORD *)v10 + 5);
            v57 = __OFSUB__(v76, v75);
            v68 = v76 - v75;
            v69 = v57;
            goto LABEL_80;
          }
          v48 = *((_QWORD *)v10 + 4);
          v47 = *((_QWORD *)v10 + 5);
          v57 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          v50 = v57;
        }
        if ((v50 & 1) != 0)
          goto LABEL_117;
        v58 = v13 - 2;
        v64 = &v45[16 * v13 - 32];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v67 = __OFSUB__(v65, v66);
        v68 = v65 - v66;
        v69 = v67;
        if (v67)
          goto LABEL_120;
        v70 = &v45[16 * v46];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v57 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v57)
          goto LABEL_123;
        if (__OFADD__(v68, v73))
          goto LABEL_124;
        if (v68 + v73 >= v49)
        {
          v74 = v49 < v73;
LABEL_86:
          if (v74)
            v46 = v58;
          goto LABEL_88;
        }
LABEL_80:
        if ((v69 & 1) != 0)
          goto LABEL_119;
        v77 = &v45[16 * v46];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v57 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v57)
          goto LABEL_122;
        if (v80 < v68)
          goto LABEL_14;
LABEL_88:
        v85 = v46 - 1;
        if (v46 - 1 >= v13)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        v86 = v12;
        if (!v12)
          goto LABEL_137;
        v87 = v10;
        v88 = &v45[16 * v85];
        v89 = v45;
        v90 = *(_QWORD *)v88;
        v91 = &v89[16 * v46];
        v92 = *((_QWORD *)v91 + 1);
        v93 = v86;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v86 + 8 * *(_QWORD *)v88), (char *)(v86 + 8 * *(_QWORD *)v91), v86 + 8 * v92, v109);
        if (v112)
          goto LABEL_96;
        if (v92 < v90)
          goto LABEL_112;
        if (v46 > *((_QWORD *)v87 + 2))
          goto LABEL_113;
        *(_QWORD *)v88 = v90;
        v45 = v111;
        *(_QWORD *)&v111[16 * v85 + 8] = v92;
        v94 = *((_QWORD *)v87 + 2);
        if (v46 >= v94)
          goto LABEL_114;
        v10 = v87;
        v13 = v94 - 1;
        memmove(v91, v91 + 16, 16 * (v94 - 1 - v46));
        *((_QWORD *)v87 + 2) = v94 - 1;
        v12 = v93;
        if (v94 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v3 = v108;
    if (v11 >= v108)
      goto LABEL_99;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  double *v28;
  double v29;
  Swift::Int v30;
  double *v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v83 = *a1;
      v84 = *a1 + 8;
      v85 = -1;
      for (i = 1; i != v3; ++i)
      {
        v87 = *(double *)(v83 + 16 * i + 8);
        v88 = v85;
        v89 = v84;
        do
        {
          if (v87 >= *(double *)v89)
            break;
          if (!v83)
            goto LABEL_141;
          v90 = *(_QWORD *)(v89 + 8);
          *(_OWORD *)(v89 + 8) = *(_OWORD *)(v89 - 8);
          *(_QWORD *)(v89 - 8) = v90;
          *(double *)v89 = v87;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v84 += 16;
        --v85;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v100 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v92 = v12;
      v102 = v9;
      if (v13 >= 2)
      {
        v93 = *v100;
        do
        {
          v94 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v93)
            goto LABEL_145;
          v95 = v92;
          v96 = *(_QWORD *)&v92[16 * v94 + 32];
          v97 = *(_QWORD *)&v92[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v93 + 16 * v96), (double *)(v93 + 16 * *(_QWORD *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1)
            break;
          if (v97 < v96)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v95 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
          if (v94 >= *((_QWORD *)v95 + 2))
            goto LABEL_134;
          v98 = &v95[16 * v94 + 32];
          *(_QWORD *)v98 = v96;
          *((_QWORD *)v98 + 1) = v97;
          v99 = *((_QWORD *)v95 + 2);
          if (v13 > v99)
            goto LABEL_135;
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          v92 = v95;
          *((_QWORD *)v95 + 2) = v99 - 1;
          v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v102 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v101 = *a1 + 40;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v103 = v6;
  v104 = v3;
  v105 = *a1;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10 + 8);
      v16 = *(double *)(v11 + 16 * v14 + 8);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v101 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 < v16 == *v17 >= v19)
            break;
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = 16 * v10;
          v21 = 16 * v14;
          v22 = v10;
          v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_144;
              v24 = v11 + v20;
              v25 = *(_QWORD *)(v11 + v21);
              v26 = *(_QWORD *)(v11 + v21 + 8);
              *(_OWORD *)(v11 + v21) = *(_OWORD *)(v11 + v20 - 16);
              *(_QWORD *)(v24 - 16) = v25;
              *(_QWORD *)(v24 - 8) = v26;
            }
            ++v23;
            v20 -= 16;
            v21 += 16;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (double *)(v11 + 16 * v10);
      do
      {
        v29 = *(double *)(v11 + 16 * v10 + 8);
        v30 = v14;
        v31 = v28;
        do
        {
          if (v29 >= *(v31 - 1))
            break;
          if (!v11)
            goto LABEL_142;
          v32 = *v31;
          *(_OWORD *)v31 = *((_OWORD *)v31 - 1);
          *(v31 - 1) = v29;
          *(v31 - 2) = v32;
          v31 -= 2;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 2;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v105;
    if (v34 >= v33 >> 1)
    {
      v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v105;
      v12 = v82;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_120;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_121;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_123;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_126;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_130;
            v65 = v40 < v75;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_77;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_122;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_125;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_128;
        if (__OFADD__(v59, v64))
          goto LABEL_129;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_83:
          if (v65)
            v37 = v49;
          goto LABEL_85;
        }
LABEL_77:
        if ((v60 & 1) != 0)
          goto LABEL_124;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_127;
        if (v71 < v59)
          goto LABEL_15;
LABEL_85:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v77 = &v35[16 * v76];
        v78 = *(_QWORD *)v77;
        v79 = &v35[16 * v37];
        v80 = *((_QWORD *)v79 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(_QWORD *)v77), (double *)(v11 + 16 * *(_QWORD *)v79), v11 + 16 * v80, __dst);
        if (v1)
          goto LABEL_93;
        if (v80 < v78)
          goto LABEL_117;
        if (v37 > *((_QWORD *)v12 + 2))
          goto LABEL_118;
        *(_QWORD *)v77 = v78;
        *(_QWORD *)&v35[16 * v76 + 8] = v80;
        v81 = *((_QWORD *)v12 + 2);
        if (v37 >= v81)
          goto LABEL_119;
        v13 = v81 - 1;
        memmove(&v35[16 * v37], v79 + 16, 16 * (v81 - 1 - v37));
        *((_QWORD *)v12 + 2) = v81 - 1;
        v11 = v105;
        if (v81 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v103;
    v3 = v104;
    if (v10 >= v104)
    {
      v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  char *v19;
  unint64_t v20;
  Swift::Int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  Swift::Int v31;
  uint64_t v32;
  Swift::Int v33;
  Swift::Int v34;
  int v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  unint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  Swift::Int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  char *v64;
  unint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char *v68;
  void (*v69)(char *, unint64_t, uint64_t);
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  Swift::Int v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  Swift::Int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  void (*v139)(char *, uint64_t);
  uint64_t *v140;
  uint64_t v141;
  char *v142;
  void (*v143)(char *, uint64_t, uint64_t);
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v2 = v1;
  v141 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v147 = *(_QWORD *)(v141 - 8);
  v4 = MEMORY[0x24BDAC7A8](v141);
  v132 = (char *)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v142 = (char *)&v126 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v137 = (char *)&v126 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v138 = (char *)&v126 - v10;
  v11 = a1[1];
  result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0)
      goto LABEL_139;
    if (v11)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v11, 1, a1);
    return result;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_147;
  v128 = result;
  if (v11 < 2)
  {
    v17 = MEMORY[0x24BEE4AF8];
    v134 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80));
    if (v11 != 1)
    {
      v20 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v19 = (char *)MEMORY[0x24BEE4AF8];
LABEL_104:
      v127 = v17;
      if (v20 >= 2)
      {
        v120 = *a1;
        do
        {
          v121 = v20 - 2;
          if (v20 < 2)
            goto LABEL_134;
          if (!v120)
            goto LABEL_146;
          v122 = *(_QWORD *)&v19[16 * v121 + 32];
          v123 = *(_QWORD *)&v19[16 * v20 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v120 + *(_QWORD *)(v147 + 72) * v122, v120 + *(_QWORD *)(v147 + 72) * *(_QWORD *)&v19[16 * v20 + 16], v120 + *(_QWORD *)(v147 + 72) * v123, v134);
          if (v2)
            break;
          if (v123 < v122)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
          if (v121 >= *((_QWORD *)v19 + 2))
            goto LABEL_136;
          v124 = &v19[16 * v121 + 32];
          *(_QWORD *)v124 = v122;
          *((_QWORD *)v124 + 1) = v123;
          v125 = *((_QWORD *)v19 + 2);
          if (v20 > v125)
            goto LABEL_137;
          memmove(&v19[16 * v20 + 16], &v19[16 * v20 + 32], 16 * (v125 - v20));
          *((_QWORD *)v19 + 2) = v125 - 1;
          v20 = v125 - 1;
        }
        while (v125 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v127 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v127 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v14 = v13 >> 1;
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(unsigned __int8 *)(v147 + 80);
    v127 = v15;
    v134 = v15 + ((v16 + 32) & ~v16);
  }
  v18 = 0;
  v19 = (char *)MEMORY[0x24BEE4AF8];
  v140 = a1;
  while (1)
  {
    v21 = (Swift::Int)v18;
    v22 = (char *)v18 + 1;
    if ((uint64_t)v18 + 1 >= v11)
    {
      v31 = (Swift::Int)v18 + 1;
    }
    else
    {
      v130 = v19;
      v23 = *a1;
      v24 = *(_QWORD *)(v147 + 72);
      v25 = *a1 + v24 * (_QWORD)v22;
      v146 = v24;
      v26 = *(void (**)(char *, uint64_t, uint64_t))(v147 + 16);
      v133 = (Swift::Int)v18;
      v27 = v141;
      v26(v138, v25, v141);
      v28 = v137;
      v143 = v26;
      v26(v137, v23 + v24 * v133, v27);
      v29 = v138;
      v145 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
      v144 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
      v30 = *(void (**)(char *, uint64_t))(v147 + 8);
      v30(v28, v27);
      v21 = v133;
      v139 = v30;
      v30(v29, v27);
      v31 = v21 + 2;
      v131 = v23;
      if (v21 + 2 < v11)
      {
        v129 = v2;
        v32 = v23;
        v135 = v146 * v31;
        v136 = v146 * (_QWORD)v22;
        while (1)
        {
          v33 = v11;
          v34 = v31;
          v35 = v145 < v144;
          v36 = v138;
          v37 = v141;
          v38 = v143;
          v143(v138, v32 + v135, v141);
          v39 = v137;
          v38(v137, v32 + v136, v37);
          v40 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          LODWORD(v40) = v40 >= ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          v41 = v139;
          v139(v39, v37);
          v41(v36, v37);
          if (v35 == (_DWORD)v40)
            break;
          v31 = v34 + 1;
          v32 += v146;
          v11 = v33;
          if (v33 == v31)
          {
            v31 = v33;
            v2 = v129;
            a1 = v140;
            v21 = v133;
            goto LABEL_24;
          }
        }
        v2 = v129;
        a1 = v140;
        v31 = v34;
        v21 = v133;
        v11 = v33;
      }
LABEL_24:
      v19 = v130;
      if (v145 < v144)
      {
        if (v31 < v21)
          goto LABEL_140;
        if (v21 < v31)
        {
          v145 = v11;
          v129 = v2;
          v42 = 0;
          v43 = v146;
          v44 = v146 * (v31 - 1);
          v45 = v31 * v146;
          v46 = v21;
          v47 = v21 * v146;
          v139 = (void (*)(char *, uint64_t))v31;
          do
          {
            if (v46 != v31 + v42 - 1)
            {
              if (!v131)
                goto LABEL_145;
              v49 = v131 + v47;
              v50 = v131 + v44;
              v51 = v131;
              v52 = *(void (**)(char *, uint64_t, uint64_t))(v147 + 32);
              v52(v132, v131 + v47, v141);
              if (v47 < v44 || v49 >= v51 + v45)
              {
                v48 = v141;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v48 = v141;
                if (v47 != v44)
                  swift_arrayInitWithTakeBackToFront();
              }
              v52((char *)v50, (uint64_t)v132, v48);
              v31 = (Swift::Int)v139;
              v43 = v146;
            }
            ++v46;
            --v42;
            v44 -= v43;
            v45 -= v43;
            v47 += v43;
          }
          while (v46 < v31 + v42);
          v2 = v129;
          v19 = v130;
          a1 = v140;
          v21 = v133;
          v11 = v145;
        }
      }
    }
    if (v31 >= v11)
      goto LABEL_56;
    if (__OFSUB__(v31, v21))
      goto LABEL_138;
    if (v31 - v21 >= v128)
      goto LABEL_56;
    if (__OFADD__(v21, v128))
      goto LABEL_141;
    v53 = v21 + v128 >= v11 ? v11 : v21 + v128;
    if (v53 < v21)
      break;
    if (v31 != v53)
    {
      v133 = v21;
      v129 = v2;
      v130 = v19;
      v54 = *(_QWORD *)(v147 + 72);
      v135 = *(_QWORD *)(v147 + 16);
      v136 = v54;
      v145 = v31 * v54;
      v146 = v54 * (v31 - 1);
      v131 = v53;
      do
      {
        v56 = 0;
        v57 = (void (*)(char *, uint64_t, uint64_t))v133;
        v58 = v141;
        v139 = (void (*)(char *, uint64_t))v31;
        while (1)
        {
          v143 = v57;
          v59 = v140;
          v60 = *v140;
          v61 = v138;
          v62 = (void (*)(char *, uint64_t, uint64_t))v135;
          ((void (*)(char *, unint64_t, uint64_t))v135)(v138, v145 + v56 + *v140, v58);
          v63 = v146 + v56 + v60;
          v64 = v137;
          v62(v137, v63, v58);
          v144 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          v65 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          v66 = *(void (**)(char *, uint64_t))(v147 + 8);
          v66(v64, v58);
          v66(v61, v58);
          if (v144 >= v65)
            break;
          v67 = *v59;
          if (!*v59)
            goto LABEL_143;
          v68 = (char *)(v67 + v146 + v56);
          v69 = *(void (**)(char *, unint64_t, uint64_t))(v147 + 32);
          v58 = v141;
          v69(v142, v67 + v145 + v56, v141);
          v55 = (char *)v139;
          swift_arrayInitWithTakeFrontToBack();
          v69(v68, (unint64_t)v142, v58);
          v56 -= v136;
          v57 = (void (*)(char *, uint64_t, uint64_t))((char *)v143 + 1);
          if (v55 == (char *)v143 + 1)
            goto LABEL_49;
        }
        v55 = (char *)v139;
LABEL_49:
        v31 = (Swift::Int)(v55 + 1);
        v146 += v136;
        v145 += v136;
      }
      while (v31 != v131);
      v31 = v131;
      v2 = v129;
      v19 = v130;
      a1 = v140;
      v21 = v133;
    }
LABEL_56:
    if (v31 < v21)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v71 = *((_QWORD *)v19 + 2);
    v70 = *((_QWORD *)v19 + 3);
    v20 = v71 + 1;
    if (v71 >= v70 >> 1)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v71 + 1, 1, v19);
    *((_QWORD *)v19 + 2) = v20;
    v72 = v19 + 32;
    v73 = &v19[16 * v71 + 32];
    *(_QWORD *)v73 = v21;
    *((_QWORD *)v73 + 1) = v31;
    v139 = (void (*)(char *, uint64_t))v31;
    if (v71)
    {
      while (1)
      {
        v74 = v20 - 1;
        if (v20 >= 4)
        {
          v79 = &v72[16 * v20];
          v80 = *((_QWORD *)v79 - 8);
          v81 = *((_QWORD *)v79 - 7);
          v85 = __OFSUB__(v81, v80);
          v82 = v81 - v80;
          if (v85)
            goto LABEL_122;
          v84 = *((_QWORD *)v79 - 6);
          v83 = *((_QWORD *)v79 - 5);
          v85 = __OFSUB__(v83, v84);
          v77 = v83 - v84;
          v78 = v85;
          if (v85)
            goto LABEL_123;
          v86 = v20 - 2;
          v87 = &v72[16 * v20 - 32];
          v89 = *(_QWORD *)v87;
          v88 = *((_QWORD *)v87 + 1);
          v85 = __OFSUB__(v88, v89);
          v90 = v88 - v89;
          if (v85)
            goto LABEL_125;
          v85 = __OFADD__(v77, v90);
          v91 = v77 + v90;
          if (v85)
            goto LABEL_128;
          if (v91 >= v82)
          {
            v109 = &v72[16 * v74];
            v111 = *(_QWORD *)v109;
            v110 = *((_QWORD *)v109 + 1);
            v85 = __OFSUB__(v110, v111);
            v112 = v110 - v111;
            if (v85)
              goto LABEL_132;
            v102 = v77 < v112;
            goto LABEL_93;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v103 = *((_QWORD *)v19 + 4);
            v104 = *((_QWORD *)v19 + 5);
            v85 = __OFSUB__(v104, v103);
            v96 = v104 - v103;
            v97 = v85;
            goto LABEL_87;
          }
          v76 = *((_QWORD *)v19 + 4);
          v75 = *((_QWORD *)v19 + 5);
          v85 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          v78 = v85;
        }
        if ((v78 & 1) != 0)
          goto LABEL_124;
        v86 = v20 - 2;
        v92 = &v72[16 * v20 - 32];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v95 = __OFSUB__(v93, v94);
        v96 = v93 - v94;
        v97 = v95;
        if (v95)
          goto LABEL_127;
        v98 = &v72[16 * v74];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v85 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v85)
          goto LABEL_130;
        if (__OFADD__(v96, v101))
          goto LABEL_131;
        if (v96 + v101 >= v77)
        {
          v102 = v77 < v101;
LABEL_93:
          if (v102)
            v74 = v86;
          goto LABEL_95;
        }
LABEL_87:
        if ((v97 & 1) != 0)
          goto LABEL_126;
        v105 = &v72[16 * v74];
        v107 = *(_QWORD *)v105;
        v106 = *((_QWORD *)v105 + 1);
        v85 = __OFSUB__(v106, v107);
        v108 = v106 - v107;
        if (v85)
          goto LABEL_129;
        if (v108 < v96)
          goto LABEL_15;
LABEL_95:
        v113 = v74 - 1;
        if (v74 - 1 >= v20)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        v114 = *a1;
        if (!*a1)
          goto LABEL_144;
        v115 = &v72[16 * v113];
        v116 = *(_QWORD *)v115;
        v117 = &v72[16 * v74];
        v118 = *((_QWORD *)v117 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v114 + *(_QWORD *)(v147 + 72) * *(_QWORD *)v115, v114 + *(_QWORD *)(v147 + 72) * *(_QWORD *)v117, v114 + *(_QWORD *)(v147 + 72) * v118, v134);
        if (v2)
          goto LABEL_115;
        if (v118 < v116)
          goto LABEL_119;
        if (v74 > *((_QWORD *)v19 + 2))
          goto LABEL_120;
        *(_QWORD *)v115 = v116;
        *(_QWORD *)&v72[16 * v113 + 8] = v118;
        v119 = *((_QWORD *)v19 + 2);
        if (v74 >= v119)
          goto LABEL_121;
        v20 = v119 - 1;
        memmove(&v72[16 * v74], v117 + 16, 16 * (v119 - 1 - v74));
        *((_QWORD *)v19 + 2) = v119 - 1;
        a1 = v140;
        if (v119 <= 2)
          goto LABEL_15;
      }
    }
    v20 = 1;
LABEL_15:
    v11 = a1[1];
    v18 = v139;
    if ((uint64_t)v139 >= v11)
    {
      v17 = v127;
      goto LABEL_104;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *(*v12)(double *__return_ptr, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18[6];
  double v19[6];

  v17 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v6 = *a4;
    v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    v8 = *(_QWORD *)(v6 + 8 * v4);
    v9 = v17;
    v10 = (uint64_t *)v7;
    while (1)
    {
      v11 = *v10;
      v12 = *(_QWORD *(**)(double *__return_ptr, uint64_t))(*(_QWORD *)v8 + 120);
      swift_retain();
      v13 = swift_retain();
      v14 = v12(v19, v13);
      v15 = v19[0];
      (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v11 + 120))(v18, v14);
      swift_release();
      result = swift_release();
      if (v15 >= v18[0])
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v6)
        break;
      v16 = *v10;
      v8 = v10[1];
      *v10 = v8;
      v10[1] = v16;
      --v10;
      if (v4 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *__src, unint64_t a3, char *a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *(*v16)(_QWORD *__return_ptr, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  double v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *(*v26)(_QWORD *__return_ptr, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  double v29;
  uint64_t result;
  double v33[6];
  _QWORD v34[6];
  char *v35;
  char *v36;
  char *v37;

  v5 = __src;
  v6 = __src - a1;
  v7 = __src - a1 + 7;
  if (__src - a1 >= 0)
    v7 = __src - a1;
  v8 = v7 >> 3;
  v9 = a3 - (_QWORD)__src;
  v10 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v10 = a3 - (_QWORD)__src;
  v11 = v10 >> 3;
  v36 = a4;
  v37 = a1;
  if (v8 >= v10 >> 3)
  {
    if (v9 >= -7)
    {
      if (a4 != __src || &__src[8 * v11] <= a4)
        memmove(a4, __src, 8 * v11);
      v21 = &a4[8 * v11];
      v35 = v21;
      v37 = v5;
      if (a1 < v5 && v9 >= 8)
      {
        v22 = (char *)(a3 - 8);
        v23 = v5;
        do
        {
          v24 = v22 + 8;
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          v26 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(**((_QWORD **)v21 - 1) + 120);
          swift_retain();
          v27 = swift_retain();
          v28 = v26(v34, v27);
          v29 = *(double *)v34;
          (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v25 + 120))(v33, v28);
          swift_release();
          swift_release();
          if (v29 >= v33[0])
          {
            v35 = v21 - 8;
            if (v24 < v21 || v22 >= v21 || v24 != v21)
              *(_QWORD *)v22 = *((_QWORD *)v21 - 1);
            v23 = v5;
            v21 -= 8;
          }
          else
          {
            if (v24 != v5 || v22 >= v5)
              *(_QWORD *)v22 = *(_QWORD *)v23;
            v37 = v23;
          }
          if (v23 <= a1)
            break;
          v22 -= 8;
          v5 = v23;
        }
        while (v21 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -7)
  {
    if (a4 != a1 || &a1[8 * v8] <= a4)
      memmove(a4, a1, 8 * v8);
    v12 = &a4[8 * v8];
    v35 = v12;
    if ((unint64_t)v5 < a3 && v6 >= 8)
    {
      v13 = a4;
      v14 = a1;
      do
      {
        v15 = *(_QWORD *)v13;
        v16 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)v5 + 120);
        swift_retain();
        v17 = swift_retain();
        v18 = v16(v34, v17);
        v19 = *(double *)v34;
        (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v15 + 120))(v33, v18);
        swift_release();
        swift_release();
        if (v19 >= v33[0])
        {
          if (v14 != v13)
            *(_QWORD *)v14 = *(_QWORD *)v13;
          v13 += 8;
          v36 = v13;
          v20 = v5;
        }
        else
        {
          v20 = v5 + 8;
          if (v14 < v5 || v14 >= v20 || v14 != v5)
            *(_QWORD *)v14 = *(_QWORD *)v5;
        }
        v14 += 8;
        if (v13 >= v12)
          break;
        v5 = v20;
      }
      while ((unint64_t)v20 < a3);
      v37 = v14;
    }
LABEL_43:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v37, &v36, &v35);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *(*v16)(_QWORD *__return_ptr, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  double v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *(*v26)(_QWORD *__return_ptr, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  double v29;
  uint64_t result;
  double v33[6];
  _QWORD v34[6];
  char *v35;
  char *v36;
  char *v37;

  v5 = __src;
  v6 = __src - a1;
  v7 = __src - a1 + 7;
  if (__src - a1 >= 0)
    v7 = __src - a1;
  v8 = v7 >> 3;
  v9 = a3 - (_QWORD)__src;
  v10 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v10 = a3 - (_QWORD)__src;
  v11 = v10 >> 3;
  v36 = a4;
  v37 = a1;
  if (v8 >= v10 >> 3)
  {
    if (v9 >= -7)
    {
      if (a4 != __src || &__src[8 * v11] <= a4)
        memmove(a4, __src, 8 * v11);
      v21 = &a4[8 * v11];
      v35 = v21;
      v37 = v5;
      if (a1 < v5 && v9 >= 8)
      {
        v22 = (char *)(a3 - 8);
        v23 = v5;
        do
        {
          v24 = v22 + 8;
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          v26 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(**((_QWORD **)v21 - 1) + 120);
          swift_retain();
          v27 = swift_retain();
          v28 = v26(v34, v27);
          v29 = *(double *)v34;
          (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v25 + 120))(v33, v28);
          swift_release();
          swift_release();
          if (v29 >= v33[0])
          {
            v35 = v21 - 8;
            if (v24 < v21 || v22 >= v21 || v24 != v21)
              *(_QWORD *)v22 = *((_QWORD *)v21 - 1);
            v23 = v5;
            v21 -= 8;
          }
          else
          {
            if (v24 != v5 || v22 >= v5)
              *(_QWORD *)v22 = *(_QWORD *)v23;
            v37 = v23;
          }
          if (v23 <= a1)
            break;
          v22 -= 8;
          v5 = v23;
        }
        while (v21 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -7)
  {
    if (a4 != a1 || &a1[8 * v8] <= a4)
      memmove(a4, a1, 8 * v8);
    v12 = &a4[8 * v8];
    v35 = v12;
    if ((unint64_t)v5 < a3 && v6 >= 8)
    {
      v13 = a4;
      v14 = a1;
      do
      {
        v15 = *(_QWORD *)v13;
        v16 = *(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)v5 + 120);
        swift_retain();
        v17 = swift_retain();
        v18 = v16(v34, v17);
        v19 = *(double *)v34;
        (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v15 + 120))(v33, v18);
        swift_release();
        swift_release();
        if (v19 >= v33[0])
        {
          if (v14 != v13)
            *(_QWORD *)v14 = *(_QWORD *)v13;
          v13 += 8;
          v36 = v13;
          v20 = v5;
        }
        else
        {
          v20 = v5 + 8;
          if (v14 < v5 || v14 >= v20 || v14 != v5)
            *(_QWORD *)v14 = *(_QWORD *)v5;
        }
        v14 += 8;
        if (v13 >= v12)
          break;
        v5 = v20;
      }
      while ((unint64_t)v20 < a3);
      v37 = v14;
    }
LABEL_43:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v37, (const void **)&v36, &v35);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [SiriExecutionStep]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [ExtendedHomeKitClientAccessoryEvent]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [IntelligenceEngineTranscript]>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  char *v44;
  uint64_t v45;

  v3 = v2;
  v45 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  v43 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v40 = v2;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 64);
    v42 = (_QWORD *)(v7 + 64);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & v11;
    v41 = (unint64_t)(v10 + 63) >> 6;
    v14 = v8 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41)
          goto LABEL_34;
        v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v41)
            goto LABEL_34;
          v22 = v42[v16];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              v3 = v40;
              if ((v43 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v7 + 32);
                if (v38 >= 64)
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v38;
                *(_QWORD *)(v7 + 16) = 0;
              }
              break;
            }
            v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v41)
                  goto LABEL_34;
                v22 = v42[v16];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v16 = v23;
          }
        }
LABEL_21:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = *(_QWORD *)(v7 + 56);
      v25 = v7;
      v26 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(v5 + 72);
      v30 = v24 + v29 * v20;
      if ((v43 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v44, v30, v45);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v44, v30, v45);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v31 = -1 << *(_BYTE *)(v9 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v14 + 8 * v33);
        }
        while (v37 == -1);
        v17 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v17);
      *v18 = v28;
      v18[1] = v27;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v9 + 56) + v29 * v17, v44, v45);
      ++*(_QWORD *)(v9 + 16);
      v7 = v25;
    }
  }
  result = swift_release();
  *v3 = v9;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for Date();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a3, v12 + *(_QWORD *)(v14 + 72) * v8, v13);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Date() - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for Date();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for Date();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)();
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized NowPlayingSignalFactory.adaptInvalidBiomeEvent(action:bundleId:playbackState:deltaT:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v9 = *a6;
  v10 = a6[1];
  v11 = a6[2];
  v12 = a6[3];
  v13 = a6[4];
  v14 = *((_BYTE *)a6 + 40);
  if (!a3 && a4 == 0xE000000000000000)
  {
    if (a5)
      return 0;
LABEL_7:
    type metadata accessor for Signal();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v9;
    *(_QWORD *)(v15 + 24) = v10;
    *(_QWORD *)(v15 + 32) = v11;
    *(_QWORD *)(v15 + 40) = v12;
    *(_QWORD *)(v15 + 48) = v13;
    *(_BYTE *)(v15 + 56) = v14;
    *(_QWORD *)(v15 + 64) = 0x636973754DLL;
    *(_QWORD *)(v15 + 72) = 0xE500000000000000;
    *(_QWORD *)(v15 + 80) = a1;
    *(_QWORD *)(v15 + 88) = a2;
    *(_BYTE *)(v15 + 96) = 1;
    *(_QWORD *)(v15 + 104) = MEMORY[0x24BEE4B00];
    swift_bridgeObjectRetain();
    return v15;
  }
  v15 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && !a5)
    goto LABEL_7;
  return v15;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  double v9;
  uint64_t v11;
  double v12[6];
  double v13[6];
  uint64_t v14;

  v14 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_16:
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      v11 = a2;
      for (i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x219A2756C](i, a1);
          v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return v14;
          }
        }
        else
        {
          if (i >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          v6 = *(_QWORD *)(a1 + 8 * i + 32);
          swift_retain();
          v7 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_13;
        }
        v8 = (*(_QWORD *(**)(double *__return_ptr))(*(_QWORD *)v6 + 120))(v13);
        v9 = v13[0];
        (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)a2 + 120))(v12, v8);
        if (v9 == v12[0])
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          a2 = v11;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v7 == v4)
          return v14;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

{
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v15;

  v15 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_22:
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x219A2756C](i, a1);
          v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_19:
            __break(1u);
            return v15;
          }
        }
        else
        {
          if (i >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_22;
          }
          v6 = *(_QWORD *)(a1 + 8 * i + 32);
          swift_retain();
          v7 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_19;
        }
        v8 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 144))();
        v10 = v9;
        if (v8 == (*(uint64_t (**)(void))(*(_QWORD *)a2 + 144))() && v10 == v11)
          break;
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v13 & 1) != 0)
          goto LABEL_16;
        swift_release();
LABEL_5:
        if (v7 == v4)
          return v15;
      }
      swift_bridgeObjectRelease_n();
LABEL_16:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_5;
    }
  }
  return MEMORY[0x24BEE4AF8];
}

{
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v17;

  v17 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v6 = (id)MEMORY[0x219A2756C](v5, a1);
LABEL_9:
        v7 = v6;
        v8 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_20;
        v9 = v4;
        v10 = objc_msgSend(v6, sel_bundleID);
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v13 = v12;

        if (v11 == *(_QWORD *)(a2 + 64) && v13 == *(_QWORD *)(a2 + 72))
        {

          swift_bridgeObjectRelease();
        }
        else
        {
          v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v15 & 1) != 0)
          {

          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        v4 = v9;
        ++v5;
        if (v8 == v9)
          return v17;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4)
        return MEMORY[0x24BEE4AF8];
    }
    v6 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_218F5FF40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
}

uint64_t ObjC metadata update function for NowPlayingSignalFactory()
{
  return type metadata accessor for NowPlayingSignalFactory();
}

uint64_t type metadata accessor for NowPlayingSignalFactory()
{
  uint64_t result;

  result = type metadata singleton initialization cache for NowPlayingSignalFactory;
  if (!type metadata singleton initialization cache for NowPlayingSignalFactory)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for NowPlayingSignalFactory()
{
  unint64_t v0;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for NowPlayingSignalFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.postEndDate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.postEndDate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.postEndDate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.createMediaDataFromNowPlayingEvent(bundleId:deltaT:bmEvent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.transformSignalsToFeatures(signals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.normalizeSignalsForFeature(signals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.transformSignalsToBiomePSE(signals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NowPlayingSignalFactory.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

void type metadata accessor for Date?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
  }
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntitySimilarity);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t AbstractActivityCollector.__allocating_init(parameters:)()
{
  swift_bridgeObjectRelease();
  return swift_allocObject();
}

uint64_t AbstractActivityCollector.init(parameters:)()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AbstractActivityCollector.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AbstractActivityCollector.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ActivityCollector.collect(callback:) in conformance AbstractActivityCollector()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t dispatch thunk of ActivityCollector.collect(callback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for AbstractActivityCollector()
{
  return objc_opt_self();
}

uint64_t method lookup function for AbstractActivityCollector()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AbstractActivityCollector.__allocating_init(parameters:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of AbstractActivityCollector.collect(callback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

BOOL static TaskSuccess.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void TaskSuccess.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TaskSuccess.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218F60884 + 4 * byte_218FBC000[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_218F60884()
{
  return 0x696C707041746F6ELL;
}

uint64_t sub_218F608A8()
{
  return 0x75636C6143746F6ELL;
}

uint64_t sub_218F608CC()
{
  return 0x6673736563637573;
}

uint64_t sub_218F608E8()
{
  return 0x7365636375736E75;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TaskSuccess.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TaskSuccess.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance TaskSuccess.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance TaskSuccess.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.CodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.CodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TaskSuccess.NotApplicableCodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance TaskSuccess.NotApplicableCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.NotApplicableCodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.NotApplicableCodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.NotCalculatedCodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.NotCalculatedCodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.SuccessfulCodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.SuccessfulCodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TaskSuccess.UnknownCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.UnknownCodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.UnknownCodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskSuccess.UnsuccessfulCodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskSuccess.UnsuccessfulCodingKeys()
{
  lazy protocol witness table accessor for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys();
  return CodingKey.debugDescription.getter();
}

void TaskSuccess.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[11];
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.UnsuccessfulCodingKeys>);
  v12[9] = *(_QWORD *)(v3 - 8);
  v12[10] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v12[8] = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.SuccessfulCodingKeys>);
  v12[6] = *(_QWORD *)(v5 - 8);
  v12[7] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v12[5] = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.NotCalculatedCodingKeys>);
  v12[3] = *(_QWORD *)(v7 - 8);
  v12[4] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v12[2] = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.NotApplicableCodingKeys>);
  v12[0] = *(_QWORD *)(v9 - 8);
  v12[1] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.UnknownCodingKeys>);
  MEMORY[0x24BDAC7A8](v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskSuccess.CodingKeys>);
  v14 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X10 }
}

uint64_t sub_218F60D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 69) = 0;
  lazy protocol witness table accessor for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 88) + 8))(v2, v1);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.CodingKeys, &unk_24DA47F88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.CodingKeys, &unk_24DA47F88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.CodingKeys, &unk_24DA47F88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.CodingKeys, &unk_24DA47F88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.UnsuccessfulCodingKeys, &unk_24DA48028);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.UnsuccessfulCodingKeys, &unk_24DA48028);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.UnsuccessfulCodingKeys, &unk_24DA48028);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.SuccessfulCodingKeys, &unk_24DA48008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys)
  {
    result = MEMORY[0x219A27BFC]("鹨4To", &unk_24DA48008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.SuccessfulCodingKeys, &unk_24DA48008);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.NotCalculatedCodingKeys, &unk_24DA47FE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.NotCalculatedCodingKeys, &unk_24DA47FE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.NotCalculatedCodingKeys, &unk_24DA47FE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.NotApplicableCodingKeys, &unk_24DA47FC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.NotApplicableCodingKeys, &unk_24DA47FC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.NotApplicableCodingKeys, &unk_24DA47FC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.UnknownCodingKeys, &unk_24DA47FA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.UnknownCodingKeys, &unk_24DA47FA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess.UnknownCodingKeys, &unk_24DA47FA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess.UnknownCodingKeys and conformance TaskSuccess.UnknownCodingKeys);
  }
  return result;
}

char *TaskSuccess.init(from:)(_QWORD *a1)
{
  return specialized TaskSuccess.init(from:)(a1);
}

char *protocol witness for Decodable.init(from:) in conformance TaskSuccess@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char *result;

  result = specialized TaskSuccess.init(from:)(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance TaskSuccess(_QWORD *a1)
{
  unsigned __int8 *v1;

  TaskSuccess.encode(to:)(a1, *v1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.AbandonedCodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.AbandonedCodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.CancelledCodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.CancelledCodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TaskCompletionType.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218F611B4 + 4 * byte_218FBC00A[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_218F611B4()
{
  return 0x656E6F646E616261;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TaskCompletionType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TaskCompletionType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.CodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.CodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.CompletedCodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.CompletedCodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.FailedCodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.FailedCodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskCompletionType.UnknownCodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskCompletionType.UnknownCodingKeys()
{
  lazy protocol witness table accessor for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys();
  return CodingKey.debugDescription.getter();
}

void TaskCompletionType.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[11];
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.CompletedCodingKeys>);
  v12[9] = *(_QWORD *)(v3 - 8);
  v12[10] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v12[8] = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.FailedCodingKeys>);
  v12[6] = *(_QWORD *)(v5 - 8);
  v12[7] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v12[5] = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.CancelledCodingKeys>);
  v12[3] = *(_QWORD *)(v7 - 8);
  v12[4] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v12[2] = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.AbandonedCodingKeys>);
  v12[0] = *(_QWORD *)(v9 - 8);
  v12[1] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.UnknownCodingKeys>);
  MEMORY[0x24BDAC7A8](v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskCompletionType.CodingKeys>);
  v14 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X10 }
}

uint64_t sub_218F61568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 69) = 0;
  lazy protocol witness table accessor for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 88) + 8))(v2, v1);
}

Swift::Int TaskSuccess.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

char *TaskCompletionType.init(from:)(_QWORD *a1)
{
  return specialized TaskCompletionType.init(from:)(a1);
}

char *protocol witness for Decodable.init(from:) in conformance TaskCompletionType@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char *result;

  result = specialized TaskCompletionType.init(from:)(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance TaskCompletionType(_QWORD *a1)
{
  unsigned __int8 *v1;

  TaskCompletionType.encode(to:)(a1, *v1);
}

uint64_t TaskInteractionType.includesPrompt.getter(char a1)
{
  return a1 & 1;
}

uint64_t TaskInteractionType.includesPrompt.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*TaskInteractionType.includesPrompt.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t TaskInteractionType.includesConfirm.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t TaskInteractionType.includesConfirm.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*TaskInteractionType.includesConfirm.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t TaskInteractionType.includesDisambiguate.getter(unsigned int a1)
{
  return HIWORD(a1) & 1;
}

uint64_t TaskInteractionType.includesDisambiguate.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*TaskInteractionType.includesDisambiguate.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t TaskInteractionType.includesUnsupportedPrompt.getter(unsigned int a1)
{
  return HIBYTE(a1) & 1;
}

uint64_t TaskInteractionType.includesUnsupportedPrompt.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*TaskInteractionType.includesUnsupportedPrompt.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TaskInteractionType.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218F61830 + 4 * byte_218FBC014[*v0]))(0x736564756C636E69, 0xEE0074706D6F7250);
}

unint64_t sub_218F61844()
{
  return 0xD000000000000014;
}

unint64_t sub_218F61860()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TaskInteractionType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TaskInteractionType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TaskInteractionType.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskInteractionType.CodingKeys()
{
  lazy protocol witness table accessor for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskInteractionType.CodingKeys()
{
  lazy protocol witness table accessor for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TaskInteractionType.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskInteractionType.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

PostSiriEngagement::TaskInteractionType __swiftcall TaskInteractionType.init()()
{
  return (PostSiriEngagement::TaskInteractionType)0;
}

uint64_t TaskInteractionType.init(from:)(_QWORD *a1)
{
  return specialized TaskInteractionType.init(from:)(a1) & 0x1010101;
}

uint64_t default argument 0 of TaskInteractionType.init(includesPrompt:includesConfirm:includesDisambiguate:includesUnsupportedPrompt:)()
{
  return 0;
}

uint64_t default argument 1 of TaskInteractionType.init(includesPrompt:includesConfirm:includesDisambiguate:includesUnsupportedPrompt:)()
{
  return 0;
}

uint64_t default argument 2 of TaskInteractionType.init(includesPrompt:includesConfirm:includesDisambiguate:includesUnsupportedPrompt:)()
{
  return 0;
}

uint64_t default argument 3 of TaskInteractionType.init(includesPrompt:includesConfirm:includesDisambiguate:includesUnsupportedPrompt:)()
{
  return 0;
}

PostSiriEngagement::TaskInteractionType __swiftcall TaskInteractionType.init(includesPrompt:includesConfirm:includesDisambiguate:includesUnsupportedPrompt:)(Swift::Bool includesPrompt, Swift::Bool includesConfirm, Swift::Bool includesDisambiguate, Swift::Bool includesUnsupportedPrompt)
{
  int v4;
  int v5;
  int v6;

  if (includesUnsupportedPrompt)
    v4 = 0x1000000;
  else
    v4 = 0;
  if (includesDisambiguate)
    v5 = 0x10000;
  else
    v5 = 0;
  if (includesConfirm)
    v6 = 256;
  else
    v6 = 0;
  return (PostSiriEngagement::TaskInteractionType)(v6 & 0xFFFFFFFE | includesPrompt | v5 | v4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TaskInteractionType@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized TaskInteractionType.init(from:)(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result) & 1;
    a2[3] = BYTE3(result) & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TaskInteractionType(_QWORD *a1)
{
  return TaskInteractionType.encode(to:)(a1);
}

uint64_t EngagementUnderstandingFeatures.taskSuccess.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t EngagementUnderstandingFeatures.taskSuccess.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t (*EngagementUnderstandingFeatures.taskSuccess.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t EngagementUnderstandingFeatures.taskInteractionType.getter()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  int v3;

  swift_beginAccess();
  if (v0[20])
    v1 = 0x1000000;
  else
    v1 = 0;
  if (v0[19])
    v2 = 0x10000;
  else
    v2 = 0;
  if (v0[18])
    v3 = 256;
  else
    v3 = 0;
  return v3 | v0[17] | v2 | v1;
}

uint64_t EngagementUnderstandingFeatures.taskInteractionType.setter(int a1)
{
  _BYTE *v1;
  uint64_t result;

  result = swift_beginAccess();
  v1[17] = a1 & 1;
  v1[18] = BYTE1(a1) & 1;
  v1[19] = BYTE2(a1) & 1;
  v1[20] = HIBYTE(a1) & 1;
  return result;
}

uint64_t (*EngagementUnderstandingFeatures.taskInteractionType.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t EngagementUnderstandingFeatures.taskCompletionType.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 21);
}

uint64_t EngagementUnderstandingFeatures.taskCompletionType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 21) = a1;
  return result;
}

uint64_t (*EngagementUnderstandingFeatures.taskCompletionType.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

_BYTE *EngagementUnderstandingFeatures.__allocating_init(taskSuccess:taskCompletionType:taskInteractionType:)(char a1, char a2, int a3)
{
  _BYTE *result;

  result = (_BYTE *)swift_allocObject();
  result[16] = a1;
  result[17] = a3 & 1;
  result[18] = BYTE1(a3) & 1;
  result[19] = BYTE2(a3) & 1;
  result[20] = HIBYTE(a3) & 1;
  result[21] = a2;
  return result;
}

_BYTE *EngagementUnderstandingFeatures.init(taskSuccess:taskCompletionType:taskInteractionType:)(char a1, char a2, int a3)
{
  _BYTE *v3;

  v3[16] = a1;
  v3[17] = a3 & 1;
  v3[18] = BYTE1(a3) & 1;
  v3[19] = BYTE2(a3) & 1;
  v3[20] = HIBYTE(a3) & 1;
  v3[21] = a2;
  return v3;
}

BOOL EngagementUnderstandingFeatures.isUserAbandoned.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 (**)(void))(*(_QWORD *)v0 + 152))() == 1;
}

BOOL EngagementUnderstandingFeatures.isUserCanceled.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 (**)(void))(*(_QWORD *)v0 + 152))() == 2;
}

BOOL EngagementUnderstandingFeatures.isSiriCompleted.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 (**)(void))(*(_QWORD *)v0 + 152))() == 4;
}

uint64_t EngagementUnderstandingFeatures.isPromptInteraction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))() & 1;
}

uint64_t EngagementUnderstandingFeatures.isConfirmInteraction.getter()
{
  uint64_t v0;

  return ((*(unsigned int (**)(void))(*(_QWORD *)v0 + 128))() >> 8) & 1;
}

uint64_t EngagementUnderstandingFeatures.isDisambiguateInteraction.getter()
{
  uint64_t v0;

  return ((*(unsigned int (**)(void))(*(_QWORD *)v0 + 128))() >> 16) & 1;
}

uint64_t EngagementUnderstandingFeatures.isUnsupportedPromptInteraction.getter()
{
  uint64_t v0;

  return ((*(unsigned int (**)(void))(*(_QWORD *)v0 + 128))() >> 24) & 1;
}

BOOL EngagementUnderstandingFeatures.isFailed.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 (**)(void))(*(_QWORD *)v0 + 152))() == 3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance EngagementUnderstandingFeatures.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000013;
  if (*v0 != 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 0x636375536B736174;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EngagementUnderstandingFeatures.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized EngagementUnderstandingFeatures.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance EngagementUnderstandingFeatures.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EngagementUnderstandingFeatures.CodingKeys()
{
  lazy protocol witness table accessor for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EngagementUnderstandingFeatures.CodingKeys()
{
  lazy protocol witness table accessor for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t EngagementUnderstandingFeatures.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t EngagementUnderstandingFeatures.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t EngagementUnderstandingFeatures.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v14[10];
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<EngagementUnderstandingFeatures.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys();
  v9 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v9);
  v18 = 0;
  lazy protocol witness table accessor for type TaskSuccess and conformance TaskSuccess();
  v10 = KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128))(v10);
    v15 = v11 & 0x101;
    v16 = BYTE2(v11) & 1;
    v17 = HIBYTE(v11) & 1;
    v14[9] = 1;
    lazy protocol witness table accessor for type TaskInteractionType and conformance TaskInteractionType();
    v12 = KeyedEncodingContainer.encode<A>(_:forKey:)();
    v14[8] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v12);
    v14[7] = 2;
    lazy protocol witness table accessor for type TaskCompletionType and conformance TaskCompletionType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EngagementUnderstandingFeatures()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 248))();
}

uint64_t SiriExecutionTask.uiSessionId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionTask.uiSessionId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.uiSessionId.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.taskId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionTask.taskId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.taskId.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.requestIds.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SiriExecutionTask.requestIds.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.requestIds.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.appPattern.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SiriExecutionTask.appPattern.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.appPattern.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.taskType.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionTask.taskType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.taskType.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.conversationPath.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SiriExecutionTask.conversationPath.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionTask.conversationPath.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionTask.engagementFeatures.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t SiriExecutionTask.engagementFeatures.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = a1;
  return swift_release();
}

uint64_t (*SiriExecutionTask.engagementFeatures.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for SiriExecutionTask.startTime : SiriExecutionTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 328))(v6);
}

uint64_t SiriExecutionTask.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime, a1);
}

uint64_t SiriExecutionTask.startTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime);
}

uint64_t (*SiriExecutionTask.startTime.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for SiriExecutionTask.endTime : SiriExecutionTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 352))(v6);
}

uint64_t SiriExecutionTask.endTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime, a1);
}

uint64_t SiriExecutionTask.endTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime);
}

uint64_t (*SiriExecutionTask.endTime.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

char *SiriExecutionTask.__allocating_init(uiSessionId:taskId:requestIds:appPattern:taskType:conversationPath:engagementFeatures:startTime:endTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);

  v19 = (char *)swift_allocObject();
  *((_QWORD *)v19 + 2) = a1;
  *((_QWORD *)v19 + 3) = a2;
  *((_QWORD *)v19 + 4) = a3;
  *((_QWORD *)v19 + 5) = a4;
  *((_QWORD *)v19 + 6) = a5;
  *((_QWORD *)v19 + 7) = a6;
  *((_QWORD *)v19 + 8) = a7;
  *((_QWORD *)v19 + 9) = a8;
  *((_QWORD *)v19 + 10) = a9;
  *((_QWORD *)v19 + 11) = a10;
  v20 = &v19[OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime];
  v21 = type metadata accessor for Date();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
  v22(v20, a11, v21);
  v22(&v19[OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime], a12, v21);
  return v19;
}

char *SiriExecutionTask.init(uiSessionId:taskId:requestIds:appPattern:taskType:conversationPath:engagementFeatures:startTime:endTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);

  *((_QWORD *)v12 + 2) = a1;
  *((_QWORD *)v12 + 3) = a2;
  *((_QWORD *)v12 + 4) = a3;
  *((_QWORD *)v12 + 5) = a4;
  *((_QWORD *)v12 + 6) = a5;
  *((_QWORD *)v12 + 7) = a6;
  *((_QWORD *)v12 + 8) = a7;
  *((_QWORD *)v12 + 9) = a8;
  v13 = &v12[OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime];
  *((_QWORD *)v12 + 10) = a9;
  *((_QWORD *)v12 + 11) = a10;
  v14 = type metadata accessor for Date();
  v15 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v13, a11, v14);
  v15(&v12[OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime], a12, v14);
  return v12;
}

uint64_t SiriExecutionTask.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218F62B3C + 4 * byte_218FBC018[a1]))(0x6F69737365536975, 0xEB0000000064496ELL);
}

uint64_t sub_218F62B3C()
{
  return 0x64496B736174;
}

uint64_t sub_218F62B50()
{
  return 0x4974736575716572;
}

uint64_t sub_218F62B70()
{
  return 0x6574746150707061;
}

uint64_t sub_218F62B8C()
{
  return 0x657079546B736174;
}

unint64_t sub_218F62BA4()
{
  return 0xD000000000000010;
}

unint64_t sub_218F62BC0()
{
  return 0xD000000000000012;
}

uint64_t sub_218F62BE0()
{
  return 0x6D69547472617473;
}

uint64_t sub_218F62BFC()
{
  return 0x656D6954646E65;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriExecutionTask.CodingKeys()
{
  unsigned __int8 *v0;

  return SiriExecutionTask.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriExecutionTask.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SiriExecutionTask.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SiriExecutionTask.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriExecutionTask.CodingKeys()
{
  lazy protocol witness table accessor for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriExecutionTask.CodingKeys()
{
  lazy protocol witness table accessor for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SiriExecutionTask.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime;
  v2 = type metadata accessor for Date();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime, v2);
  return v0;
}

uint64_t SiriExecutionTask.__deallocating_deinit()
{
  return SiriExecutionTask.__deallocating_deinit((void (*)(void))SiriExecutionTask.deinit);
}

uint64_t SiriExecutionTask.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  v37 = v5;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v33 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriExecutionTask.CodingKeys>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys();
  v15 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 152))(v15);
  LOBYTE(v41) = 0;
  v39 = v11;
  v16 = v38;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v39);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v38 = v10;
    v35 = v8;
    v17 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 176))(v17);
    LOBYTE(v41) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v19 = swift_bridgeObjectRelease();
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 200))(v19);
    v40 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v20 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v34 = v12;
    v21 = swift_bridgeObjectRelease();
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 224))(v21);
    v40 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v33 = v20;
    v22 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 248))(v22);
    LOBYTE(v41) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v23 = swift_bridgeObjectRelease();
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 272))(v23);
    v40 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v24 = swift_bridgeObjectRelease();
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 296))(v24);
    v40 = 6;
    type metadata accessor for EngagementUnderstandingFeatures();
    lazy protocol witness table accessor for type EngagementUnderstandingFeatures and conformance EngagementUnderstandingFeatures(&lazy protocol witness table cache variable for type EngagementUnderstandingFeatures and conformance EngagementUnderstandingFeatures, v25, (uint64_t (*)(uint64_t))type metadata accessor for EngagementUnderstandingFeatures, (uint64_t)&protocol conformance descriptor for EngagementUnderstandingFeatures);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v26 = swift_release();
    v27 = v38;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 320))(v26);
    LOBYTE(v41) = 7;
    v28 = lazy protocol witness table accessor for type EngagementUnderstandingFeatures and conformance EngagementUnderstandingFeatures((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    v29 = v36;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v34 = v28;
    v30 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
    v31 = v30(v27, v29);
    v32 = v35;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 344))(v31);
    LOBYTE(v41) = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v30(v32, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v39);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriExecutionTask()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 376))();
}

uint64_t SiriExecutionStep.appBundleId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.appBundleId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.appBundleId.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.intentName.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.intentName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.intentName.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.interactionId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.interactionId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.interactionId.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.slotValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.slotValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.slotValue.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.statusReason.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.statusReason.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.statusReason.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.taskId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.taskId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.taskId.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.taskStep.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriExecutionStep.taskStep.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriExecutionStep.taskStep.modify())()
{
  swift_beginAccess();
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t key path setter for SiriExecutionStep.eventTime : SiriExecutionStep(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 320))(v6);
}

uint64_t SiriExecutionStep.eventTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionStep_eventTime, a1);
}

uint64_t SiriExecutionTask.startTime.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  swift_beginAccess();
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t SiriExecutionStep.eventTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionStep_eventTime);
}

uint64_t SiriExecutionTask.startTime.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a2;
  swift_beginAccess();
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
  return swift_endAccess();
}

uint64_t (*SiriExecutionStep.eventTime.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t SiriExecutionStep.__allocating_init(appBundleId:intentName:interactionId:slotValue:statusReason:taskId:taskStep:eventTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v23;

  v23 = swift_allocObject();
  SiriExecutionStep.init(appBundleId:intentName:interactionId:slotValue:statusReason:taskId:taskStep:eventTime:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return v23;
}

uint64_t SiriExecutionStep.init(appBundleId:intentName:interactionId:slotValue:statusReason:taskId:taskStep:eventTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_QWORD *)(v15 + 120) = 0;
  *(_QWORD *)(v15 + 112) = 0;
  swift_beginAccess();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v15 + 32) = a3;
  *(_QWORD *)(v15 + 40) = a4;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v15 + 48) = a5;
  *(_QWORD *)(v15 + 56) = a6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v15 + 64) = a7;
  *(_QWORD *)(v15 + 72) = a8;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v15 + 80) = a9;
  *(_QWORD *)(v15 + 88) = a10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v15 + 96) = a11;
  *(_QWORD *)(v15 + 104) = a12;
  swift_beginAccess();
  *(_QWORD *)(v15 + 112) = a13;
  *(_QWORD *)(v15 + 120) = a14;
  swift_bridgeObjectRelease();
  v19 = v15 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionStep_eventTime;
  v20 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a15, v20);
  return v15;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SiriExecutionStep.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TaskSuccess.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SiriExecutionStep.CodingKeys()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TaskSuccess.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriExecutionStep.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218F63D80 + 4 * byte_218FBC021[*v0]))(0x6C646E7542707061, 0xEB00000000644965);
}

uint64_t sub_218F63D80()
{
  return 0x614E746E65746E69;
}

uint64_t sub_218F63D9C()
{
  return 0x7463617265746E69;
}

uint64_t sub_218F63DC0()
{
  return 0x756C6156746F6C73;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriExecutionStep.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SiriExecutionStep.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SiriExecutionStep.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriExecutionStep.CodingKeys()
{
  lazy protocol witness table accessor for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriExecutionStep.CodingKeys()
{
  lazy protocol witness table accessor for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SiriExecutionStep.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionStep_eventTime;
  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SiriExecutionStep.__deallocating_deinit()
{
  return SiriExecutionTask.__deallocating_deinit((void (*)(void))SiriExecutionStep.deinit);
}

uint64_t SiriExecutionTask.__deallocating_deinit(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t SiriExecutionStep.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v2 = v1;
  v23 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriExecutionStep.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys();
  v11 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 144);
  v24 = v2;
  v12(v11);
  v34 = 0;
  v26 = v7;
  v13 = v25;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v26);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v14 = v23;
    v15 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 168))(v15);
    v33 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v17 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 192))(v17);
    v32 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v18 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 216))(v18);
    v31 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v19 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 240))(v19);
    v30 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v20 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 264))(v20);
    v29 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v21 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 288))(v21);
    v28 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v22 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 312))(v22);
    v27 = 7;
    lazy protocol witness table accessor for type EngagementUnderstandingFeatures and conformance EngagementUnderstandingFeatures((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v26);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriExecutionStep()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 344))();
}

uint64_t SiriExecutionTaskFactory.convertBiomeEventToSiriExecutionStep(bmEvent:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  void (*v19)(char *, char *, uint64_t);
  char **p_name;
  id v21;
  void *v22;
  Swift::String v23;
  uint64_t v24;
  char v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v51 - v10;
  v12 = objc_msgSend(a1, sel_taskId);
  if (!v12)
    return 0;
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v17 = objc_msgSend(a1, sel_absoluteTimestamp);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_9;
  }
  v18 = v17;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v19(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    outlined destroy of Date?((uint64_t)v4);
    return 0;
  }
  v19(v11, v4, v5);
  p_name = &PSEAlarmSELFEmitter.name;
  v21 = objc_msgSend(a1, sel_intentName);
  v60 = v14;
  if (v21)
  {
    v22 = v21;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v23 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v23._countAndFlagsBits == 0x7361742065676173 && v23._object == (void *)0xE90000000000006BLL)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      swift_bridgeObjectRelease();
      return 0;
    }
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    p_name = (char **)(&PSEAlarmSELFEmitter + 24);
    if ((v26 & 1) != 0)
      goto LABEL_13;
  }
  v27 = objc_msgSend(a1, sel_appBundleID);
  if (v27)
  {
    v28 = v27;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v58 = v30;
    v59 = v29;

  }
  else
  {
    v58 = 0;
    v59 = 0;
  }
  v31 = objc_msgSend(a1, p_name[79]);
  if (v31)
  {
    v32 = v31;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v56 = v34;
    v57 = v33;

  }
  else
  {
    v56 = 0;
    v57 = 0;
  }
  v35 = objc_msgSend(a1, sel_interactionID);
  if (v35)
  {
    v36 = v35;
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v54 = v38;
    v55 = v37;

  }
  else
  {
    v54 = 0;
    v55 = 0;
  }
  v39 = objc_msgSend(a1, sel_slotValue);
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v52 = v42;
    v53 = v41;

  }
  else
  {
    v52 = 0;
    v53 = 0;
  }
  v43 = objc_msgSend(a1, sel_statusReason);
  if (v43)
  {
    v44 = v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v47 = v46;

  }
  else
  {
    v45 = 0;
    v47 = 0;
  }
  v48 = specialized static SiriExecutionTaskFactory.getTaskStepDescription(taskStepType:)((int)objc_msgSend(a1, sel_taskStep));
  v50 = v49;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  type metadata accessor for SiriExecutionStep(0);
  v24 = swift_allocObject();
  SiriExecutionStep.init(appBundleId:intentName:interactionId:slotValue:statusReason:taskId:taskStep:eventTime:)(v59, v58, v57, v56, v55, v54, v53, v52, v45, v47, v60, v16, v48, v50, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return v24;
}

uint64_t SiriExecutionTaskFactory.processBiomeEventsToTask(siriExecutionEvents:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;

  v14 = MEMORY[0x24BEE4AF8];
  if (!(a1 >> 62))
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_21;
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3)
    goto LABEL_17;
LABEL_3:
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 80);
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x219A2756C](v4, a1);
      else
        v6 = *(id *)(a1 + 8 * v4 + 32);
      v7 = v6;
      if (v5())
      {
        v8 = swift_retain();
        MEMORY[0x219A2732C](v8);
        if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_release();
      }
      else
      {

      }
      ++v4;
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
    v9 = v14;
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_21;
LABEL_18:
    if ((v9 & 0x4000000000000000) == 0)
    {
      v10 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
LABEL_20:
      v13 = v10;
      specialized MutableCollection<>.sort(by:)(&v13, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (void (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
      swift_bridgeObjectRelease();
      v11 = v13;
      swift_bridgeObjectRelease();
      return v11;
    }
LABEL_21:
    swift_bridgeObjectRetain_n();
    v10 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v9);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t SiriExecutionTaskFactory.loadTaskEntities(steps:siriUISessionId:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t object;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  BOOL v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  Swift::String v90;
  char v92;
  Swift::String v93;
  char v94;
  Swift::String v95;
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  void *v99;
  Swift::String v100;
  uint64_t v101;
  char v103;
  Swift::String v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int (*v119)(char *, uint64_t, uint64_t);
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, char *, uint64_t);
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t result;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int64_t v152;
  char *v153;
  int64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  __int128 v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;

  v150 = a3;
  v149 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (int64_t)&v145 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v156 = (char *)&v145 - v8;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v160 = v9;
  v161 = v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v148 = (char *)&v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v147 = (char *)&v145 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  object = (uint64_t)&v145 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v153 = (char *)&v145 - v18;
  v175 = MEMORY[0x24BEE4AF8];
  v172 = MEMORY[0x24BEE4B00];
  if (a1 >> 62)
    goto LABEL_213;
  v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  v152 = v7;
  v151 = object;
  if (v19)
  {
    v170 = a1 & 0xC000000000000001;
    v20 = MEMORY[0x24BEE4B00];
    v7 = 4;
    v169 = xmmword_218FBBF20;
    while (1)
    {
      v23 = v7 - 4;
      if (v170)
      {
        v24 = MEMORY[0x219A2756C](v7 - 4, a1);
        object = v7 - 3;
        if (__OFADD__(v23, 1))
          goto LABEL_204;
      }
      else
      {
        v24 = *(_QWORD *)(a1 + 8 * v7);
        swift_retain();
        object = v7 - 3;
        if (__OFADD__(v23, 1))
        {
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
          goto LABEL_212;
        }
      }
      v25 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 264))();
      v27 = v26;
      v29 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
      v30 = v20;
      v31 = *(_QWORD *)(v20 + 16);
      v32 = (v28 & 1) == 0;
      v33 = v31 + v32;
      if (__OFADD__(v31, v32))
        goto LABEL_205;
      v34 = v28;
      v171 = object;
      object = v30;
      if (*(_QWORD *)(v30 + 24) < v33)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, 1);
        object = v172;
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v27);
        if ((v34 & 1) != (v36 & 1))
          goto LABEL_219;
        v29 = v35;
      }
      if ((v34 & 1) != 0)
      {
        v21 = swift_bridgeObjectRelease();
        v20 = object;
        v22 = (_QWORD *)(*(_QWORD *)(object + 56) + 8 * v29);
        MEMORY[0x219A2732C](v21);
        if (*(_QWORD *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = v169;
        *(_QWORD *)(v37 + 32) = v24;
        v174 = v37;
        specialized Array._endMutation()();
        v38 = v174;
        *(_QWORD *)(object + 8 * (v29 >> 6) + 64) |= 1 << v29;
        v39 = (uint64_t *)(*(_QWORD *)(object + 48) + 16 * v29);
        *v39 = v25;
        v39[1] = v27;
        *(_QWORD *)(*(_QWORD *)(object + 56) + 8 * v29) = v38;
        v40 = *(_QWORD *)(object + 16);
        v41 = __OFADD__(v40, 1);
        v42 = v40 + 1;
        if (v41)
          goto LABEL_207;
        v20 = object;
        *(_QWORD *)(object + 16) = v42;
      }
      ++v7;
      if (v171 == v19)
        goto LABEL_22;
    }
  }
  v20 = MEMORY[0x24BEE4B00];
LABEL_22:
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(v20 + 64);
  v162 = v20 + 64;
  v44 = 1 << *(_BYTE *)(v20 + 32);
  v45 = -1;
  if (v44 < 64)
    v45 = ~(-1 << v44);
  a1 = v45 & v43;
  v7 = (unint64_t)(v44 + 63) >> 6;
  swift_retain();
  object = 0;
  v155 = v20;
  v154 = v7;
  while (1)
  {
    while (a1)
    {
      v46 = __clz(__rbit64(a1));
      a1 &= a1 - 1;
      v47 = v46 | (object << 6);
      if (*(_QWORD *)(v20 + 16))
      {
LABEL_49:
        v51 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * v47);
        v53 = *v51;
        v52 = v51[1];
        swift_bridgeObjectRetain_n();
        v54 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v52);
        if ((v55 & 1) != 0)
        {
          v158 = v53;
          v164 = a1;
          v165 = object;
          v56 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v54);
          swift_bridgeObjectRetain();
          v163 = v52;
          swift_bridgeObjectRelease();
          if (v56 >> 62)
          {
            swift_bridgeObjectRetain();
            v57 = _CocoaArrayWrapper.endIndex.getter();
          }
          else
          {
            v57 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          v171 = v57;
          *(_QWORD *)&v169 = v56;
          if (v57)
          {
            v159 = 0;
            v58 = 0;
            v170 = v56 & 0xC000000000000001;
            v167 = v56 + 32;
            v168 = v56 & 0xFFFFFFFFFFFFFF8;
            v166 = 0xE000000000000000;
            v7 = MEMORY[0x24BEE4AF8];
            v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
            v60 = (_QWORD *)MEMORY[0x24BEE4AF8];
            while (1)
            {
              if (v170)
              {
                v61 = MEMORY[0x219A2756C](v58, v169);
                v41 = __OFADD__(v58++, 1);
                if (v41)
                  goto LABEL_202;
              }
              else
              {
                if (v58 >= *(_QWORD *)(v168 + 16))
                  goto LABEL_203;
                v61 = *(_QWORD *)(v167 + 8 * v58);
                swift_retain();
                v41 = __OFADD__(v58++, 1);
                if (v41)
                {
LABEL_202:
                  __break(1u);
LABEL_203:
                  __break(1u);
                  goto LABEL_204;
                }
              }
              isUniquelyReferenced_nonNull_native = (*(uint64_t (**)(void))(*(_QWORD *)v61 + 192))();
              if (v63)
              {
                v64 = isUniquelyReferenced_nonNull_native;
                v65 = v63;
                v66 = HIBYTE(v63) & 0xF;
                if ((v63 & 0x2000000000000000) == 0)
                  v66 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFLL;
                if (!v66)
                {
LABEL_73:
                  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
                  goto LABEL_80;
                }
                object = *(_QWORD *)(v7 + 16);
                if (object)
                {
                  v67 = *(_QWORD *)(v7 + 32) == isUniquelyReferenced_nonNull_native && v63 == *(_QWORD *)(v7 + 40);
                  if (v67 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    goto LABEL_73;
                  if (object != 1)
                  {
                    if (*(_QWORD *)(v7 + 48) == v64 && v65 == *(_QWORD *)(v7 + 56)
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      goto LABEL_73;
                    }
                    if (object != 2)
                    {
                      if (*(_QWORD *)(v7 + 64) == v64 && v65 == *(_QWORD *)(v7 + 72)
                        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        goto LABEL_73;
                      }
                      if (object != 3)
                      {
                        a1 = v7 + 88;
                        v101 = 3;
                        while (!__OFADD__(v101, 1))
                        {
                          if (*(_QWORD *)(a1 - 8) == v64 && v65 == *(_QWORD *)a1)
                            goto LABEL_73;
                          v146 = v101 + 1;
                          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            goto LABEL_73;
                          a1 += 16;
                          ++v101;
                          if (v146 == object)
                            goto LABEL_75;
                        }
LABEL_212:
                        __break(1u);
LABEL_213:
                        swift_bridgeObjectRetain();
                        v19 = _CocoaArrayWrapper.endIndex.getter();
                        goto LABEL_3;
                      }
                    }
                  }
                }
LABEL_75:
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, object + 1, 1, (_QWORD *)v7);
                  v7 = isUniquelyReferenced_nonNull_native;
                }
                a1 = *(_QWORD *)(v7 + 16);
                v68 = *(_QWORD *)(v7 + 24);
                object = a1 + 1;
                if (a1 >= v68 >> 1)
                {
                  isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), a1 + 1, 1, (_QWORD *)v7);
                  v7 = isUniquelyReferenced_nonNull_native;
                }
                *(_QWORD *)(v7 + 16) = object;
                v69 = v7 + 16 * a1;
                *(_QWORD *)(v69 + 32) = v64;
                *(_QWORD *)(v69 + 40) = v65;
              }
LABEL_80:
              v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 144))(isUniquelyReferenced_nonNull_native);
              if (!v71)
                goto LABEL_94;
              v72 = v70;
              v73 = v71;
              v74 = HIBYTE(v71) & 0xF;
              if ((v71 & 0x2000000000000000) == 0)
                v74 = v70 & 0xFFFFFFFFFFFFLL;
              if (!v74
                || (v70 == 1701736302 ? (v75 = v71 == 0xE400000000000000) : (v75 = 0),
                    v75 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
              {
LABEL_93:
                v70 = swift_bridgeObjectRelease();
                goto LABEL_94;
              }
              object = v60[2];
              if (object)
              {
                if (v60[4] == v72 && v73 == v60[5] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_93;
                if (object != 1)
                {
                  if (v60[6] == v72 && v73 == v60[7] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    goto LABEL_93;
                  if (object != 2)
                  {
                    if (v60[8] == v72 && v73 == v60[9] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      goto LABEL_93;
                    if (object != 3)
                    {
                      a1 = (unint64_t)(v60 + 11);
                      v108 = 3;
                      while (!__OFADD__(v108, 1))
                      {
                        if (*(_QWORD *)(a1 - 8) == v72 && v73 == *(_QWORD *)a1)
                          goto LABEL_93;
                        v146 = v108 + 1;
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          goto LABEL_93;
                        a1 += 16;
                        ++v108;
                        if (v146 == object)
                          goto LABEL_147;
                      }
                      __break(1u);
                      goto LABEL_218;
                    }
                  }
                }
              }
LABEL_147:
              v70 = swift_isUniquelyReferenced_nonNull_native();
              if ((v70 & 1) != 0)
              {
                v105 = v60;
              }
              else
              {
                v70 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, object + 1, 1, v60);
                v105 = (_QWORD *)v70;
              }
              a1 = v105[2];
              v106 = v105[3];
              object = a1 + 1;
              if (a1 >= v106 >> 1)
              {
                v70 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v106 > 1), a1 + 1, 1, v105);
                v105 = (_QWORD *)v70;
              }
              v105[2] = object;
              v60 = v105;
              v107 = &v105[2 * a1];
              v107[4] = v72;
              v107[5] = v73;
LABEL_94:
              v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 288))(v70);
              if (v77)
              {
                a1 = v76;
                v78 = v77;
                v79 = (*(uint64_t (**)(void))(*(_QWORD *)v61 + 216))();
                if (v80)
                {
                  v81 = v79;
                  v82 = (void *)v80;
                  v83 = HIBYTE(v80) & 0xF;
                  if ((v80 & 0x2000000000000000) == 0)
                    v83 = v79 & 0xFFFFFFFFFFFFLL;
                  if (!v83
                    || (v79 == 1701736302 ? (v84 = v80 == 0xE400000000000000) : (v84 = 0),
                        v84 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
                  {
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    v172 = 10272;
                    v173 = 0xE200000000000000;
                    v96._countAndFlagsBits = v81;
                    v96._object = v82;
                    String.append(_:)(v96);
                    swift_bridgeObjectRelease();
                    v97._countAndFlagsBits = 41;
                    v97._object = (void *)0xE100000000000000;
                    String.append(_:)(v97);
                    v98 = v172;
                    v99 = (void *)v173;
                    v172 = a1;
                    v173 = v78;
                    swift_bridgeObjectRetain();
                    v100._countAndFlagsBits = v98;
                    v100._object = v99;
                    String.append(_:)(v100);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    a1 = v172;
                    v78 = v173;
                  }
                }
                v76 = swift_isUniquelyReferenced_nonNull_native();
                if ((v76 & 1) == 0)
                {
                  v76 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
                  v59 = (_QWORD *)v76;
                }
                object = v59[2];
                v85 = v59[3];
                if (object >= v85 >> 1)
                {
                  v76 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v85 > 1), object + 1, 1, v59);
                  v59 = (_QWORD *)v76;
                }
                v59[2] = object + 1;
                v86 = &v59[2 * object];
                v86[4] = a1;
                v86[5] = v78;
              }
              v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 168))(v76);
              v57 = v171;
              if (v88)
              {
                a1 = v87;
                v89 = v88;
                v90 = String.lowercased()();
                if (v90._countAndFlagsBits == 0x74746E6572727563 && v90._object == (void *)0xEB000000006B7361)
                {
LABEL_123:
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();
                  goto LABEL_56;
                }
                object = (uint64_t)v90._object;
                v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v92 & 1) == 0)
                {
                  v93 = String.lowercased()();
                  object = (uint64_t)v93._object;
                  if (v93._countAndFlagsBits == 0x6465737261706E75 && v93._object == (void *)0xEE00746E65746E69)
                    goto LABEL_123;
                  v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v94 & 1) == 0)
                  {
                    v95 = String.lowercased()();
                    object = (uint64_t)v95._object;
                    if (v95._countAndFlagsBits == 0x206E776F6E6B6E75 && v95._object == (void *)0xED00006573726170)
                      goto LABEL_123;
                    v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v103 & 1) == 0)
                    {
                      v104 = String.lowercased()();
                      object = (uint64_t)v104._object;
                      if (v104._countAndFlagsBits != 0x7361742065676173
                        || v104._object != (void *)0xE90000000000006BLL)
                      {
                        v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_bridgeObjectRelease();
                        if ((v110 & 1) == 0)
                        {
                          v159 = a1;
                          v166 = v89;
                        }
                        goto LABEL_56;
                      }
                      swift_bridgeObjectRelease();
                    }
                  }
                }
                swift_bridgeObjectRelease();
              }
              swift_release();
LABEL_56:
              if (v58 == v57)
                goto LABEL_173;
            }
          }
          v159 = 0;
          v166 = 0xE000000000000000;
          v7 = MEMORY[0x24BEE4AF8];
          v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
          v60 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_173:
          v170 = (unint64_t)v60;
          v111 = v169;
          swift_bridgeObjectRelease();
          object = *(_QWORD *)(*(_QWORD *)v157 + 104);
          v112 = swift_bridgeObjectRetain();
          v113 = ((uint64_t (*)(uint64_t))object)(v112);
          swift_bridgeObjectRelease();
          if (!v57)
          {
            v116 = v156;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v161 + 56))(v156, 1, 1, v160);
LABEL_182:
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v122 = (uint64_t)v116;
LABEL_183:
            outlined destroy of Date?(v122);
            goto LABEL_184;
          }
          if ((v111 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            v114 = MEMORY[0x219A2756C](0, v111);
            v115 = swift_bridgeObjectRelease();
          }
          else
          {
            if (!*(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_208;
            v114 = *(_QWORD *)(v111 + 32);
            v115 = swift_retain();
          }
          v116 = v156;
          (*(void (**)(uint64_t))(*(_QWORD *)v114 + 312))(v115);
          swift_release();
          v117 = v160;
          v118 = v161;
          a1 = *(_QWORD *)(v161 + 56);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))a1)(v116, 0, 1, v160);
          v119 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48);
          if (v119(v116, 1, v117) == 1)
            goto LABEL_182;
          object = *(_QWORD *)(v161 + 32);
          ((void (*)(char *, char *, uint64_t))object)(v153, v116, v117);
          v120 = v171 - 1;
          if (__OFSUB__(v171, 1))
            goto LABEL_209;
          if ((v111 & 0xC000000000000001) != 0)
          {
            v121 = MEMORY[0x219A2756C](v120, v111);
          }
          else
          {
            if ((v120 & 0x8000000000000000) != 0)
              goto LABEL_210;
            if (v120 >= *(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_211;
            v121 = *(_QWORD *)(v111 + 8 * v120 + 32);
            swift_retain();
          }
          v123 = swift_bridgeObjectRelease();
          v124 = v152;
          (*(void (**)(uint64_t))(*(_QWORD *)v121 + 312))(v123);
          swift_release();
          v125 = v160;
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))a1)(v124, 0, 1, v160);
          if (v119((char *)v124, 1, v125) == 1)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v161 + 8))(v153, v125);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v122 = v124;
            goto LABEL_183;
          }
          v126 = v151;
          ((void (*)(uint64_t, uint64_t, uint64_t))object)(v151, v124, v125);
          v127 = v125;
          v128 = v161;
          v129 = *(void (**)(char *, char *, uint64_t))(v161 + 16);
          v130 = v147;
          v129(v147, v153, v127);
          v131 = v148;
          v129(v148, (char *)v126, v127);
          type metadata accessor for SiriExecutionTask(0);
          v132 = (_QWORD *)swift_allocObject();
          v133 = v150;
          v132[2] = v149;
          v132[3] = v133;
          v134 = v163;
          v132[4] = v158;
          v132[5] = v134;
          v135 = v170;
          v132[6] = v7;
          v132[7] = v135;
          v136 = v166;
          v132[8] = v159;
          v132[9] = v136;
          v137 = (char *)v132 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_startTime;
          v132[10] = v59;
          v132[11] = v113;
          ((void (*)(char *, char *, uint64_t))object)(v137, v130, v127);
          ((void (*)(char *, char *, uint64_t))object)((char *)v132 + OBJC_IVAR____TtC18PostSiriEngagement17SiriExecutionTask_endTime, v131, v127);
          swift_bridgeObjectRetain();
          swift_retain();
          v138 = swift_retain();
          MEMORY[0x219A2732C](v138);
          if (*(_QWORD *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
          swift_release();
          v139 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
          v139(v151, v127);
          v139((uint64_t)v153, v127);
LABEL_184:
          v20 = v155;
          v7 = v154;
          a1 = v164;
          object = v165;
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
    }
    v48 = object + 1;
    if (__OFADD__(object, 1))
      goto LABEL_206;
    if (v48 >= v7)
    {
LABEL_195:
      swift_release_n();
      v140 = v175;
      if (v175 >> 62)
      {
        swift_bridgeObjectRetain();
        v144 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v144 >= 2)
        {
LABEL_197:
          if ((v140 & 0x8000000000000000) != 0 || (v140 & 0x4000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n();
            v141 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v140);
            swift_bridgeObjectRelease();
          }
          else
          {
            v141 = v140 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain_n();
          }
          v172 = v141;
          specialized MutableCollection<>.sort(by:)(&v172, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (void (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
          swift_bridgeObjectRelease();
          v142 = v172;
          swift_bridgeObjectRelease();
          return v142;
        }
      }
      else if (*(uint64_t *)((v175 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2)
      {
        goto LABEL_197;
      }
      return v140;
    }
    v49 = *(_QWORD *)(v162 + 8 * v48);
    ++object;
    if (v49)
      goto LABEL_48;
    object = v48 + 1;
    if (v48 + 1 >= v7)
      goto LABEL_195;
    v49 = *(_QWORD *)(v162 + 8 * object);
    if (v49)
      goto LABEL_48;
    object = v48 + 2;
    if (v48 + 2 >= v7)
      goto LABEL_195;
    v49 = *(_QWORD *)(v162 + 8 * object);
    if (v49)
      goto LABEL_48;
    object = v48 + 3;
    if (v48 + 3 >= v7)
      goto LABEL_195;
    v49 = *(_QWORD *)(v162 + 8 * object);
    if (v49)
      goto LABEL_48;
    object = v48 + 4;
    if (v48 + 4 >= v7)
      goto LABEL_195;
    v49 = *(_QWORD *)(v162 + 8 * object);
    if (v49)
      goto LABEL_48;
    object = v48 + 5;
    if (v48 + 5 >= v7)
      goto LABEL_195;
    v49 = *(_QWORD *)(v162 + 8 * object);
    if (v49)
      goto LABEL_48;
    v50 = v48 + 6;
    if (v50 >= v7)
      goto LABEL_195;
    v49 = *(_QWORD *)(v162 + 8 * v50);
    if (!v49)
      break;
    object = v50;
LABEL_48:
    a1 = (v49 - 1) & v49;
    v47 = __clz(__rbit64(v49)) + (object << 6);
    if (*(_QWORD *)(v20 + 16))
      goto LABEL_49;
  }
  while (1)
  {
    object = v50 + 1;
    if (__OFADD__(v50, 1))
      break;
    if (object >= v7)
      goto LABEL_195;
    v49 = *(_QWORD *)(v162 + 8 * object);
    ++v50;
    if (v49)
      goto LABEL_48;
  }
LABEL_218:
  __break(1u);
LABEL_219:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

_BYTE *SiriExecutionTaskFactory.calculateEngagementUnderstandingFeatures(conversationPath:)(uint64_t a1)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  _BYTE *result;

  if ((specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((specialized static EngagementSignalEnrichmentUtils.isFailedTask(executionSequence:)(a1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((specialized static EngagementSignalEnrichmentUtils.isSiriCompletedTask(executionSequence:)(a1) & 1) != 0)
  {
    v2 = 4;
  }
  else
  {
    v2 = 1;
  }
  v3 = specialized static EngagementSignalEnrichmentUtils.isPromptInteractionTask(executionSequence:)(a1);
  v4 = specialized static EngagementSignalEnrichmentUtils.isConfirmInteractionTask(executionSequence:)(a1);
  v5 = specialized static EngagementSignalEnrichmentUtils.isDisambiguateInteractionTask(executionSequence:)(a1);
  v6 = specialized static EngagementSignalEnrichmentUtils.isUnsupportedPromptInteractionTask(executionSequence:)(a1);
  type metadata accessor for EngagementUnderstandingFeatures();
  result = (_BYTE *)swift_allocObject();
  result[16] = 0;
  result[17] = v3 & 1;
  result[18] = v4 & 1;
  result[19] = v5 & 1;
  result[20] = v6 & 1;
  result[21] = v2;
  return result;
}

uint64_t static SiriExecutionTaskFactory.isTerminalTaskStep(taskStep:)(unint64_t a1)
{
  return (a1 < 0xF) & (0x4070u >> a1);
}

uint64_t SiriExecutionTaskFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SiriExecutionTaskFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SiriExecutionTaskFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SiriExecutionTaskFactory.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), void (*a3)(_QWORD *))
{
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD v10[2];

  v6 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = a2(v6);
    *a1 = v6;
  }
  v8 = *(_QWORD *)(v6 + 16);
  v10[0] = v6 + 32;
  v10[1] = v8;
  a3(v10);
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  char *v19;
  double v20;
  double v21;
  uint64_t (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v31 = a1;
  v7 = type metadata accessor for Date();
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v34 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v33 = (char *)&v29 - v11;
  v30 = a2;
  if (a3 != a2)
  {
    v37 = *a4;
    v12 = (_QWORD *)(v37 + 8 * a3 - 8);
    v13 = v34;
LABEL_5:
    v14 = *(_QWORD *)(v37 + 8 * a3);
    v15 = v31;
    v32 = v12;
    while (1)
    {
      v16 = *v12;
      v17 = *(void (**)(uint64_t))(*(_QWORD *)v14 + 312);
      swift_retain();
      v18 = swift_retain();
      v19 = v33;
      v17(v18);
      Date.timeIntervalSinceReferenceDate.getter();
      v21 = v20;
      v22 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
      v23 = v19;
      v24 = v36;
      v25 = v22(v23, v36);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 312))(v25);
      Date.timeIntervalSinceReferenceDate.getter();
      v27 = v26;
      v22(v13, v24);
      swift_release();
      result = swift_release();
      if (v21 >= v27)
      {
LABEL_4:
        ++a3;
        v12 = v32 + 1;
        if (a3 == v30)
          return result;
        goto LABEL_5;
      }
      if (!v37)
        break;
      v28 = *v12;
      v14 = v12[1];
      *v12 = v14;
      v12[1] = v28;
      --v12;
      if (a3 == ++v15)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a1;
  v7 = type metadata accessor for Date();
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v30 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v26 - v11;
  v27 = a2;
  if (a3 != a2)
  {
    v33 = *a4;
    v13 = (_QWORD *)(v33 + 8 * a3 - 8);
LABEL_5:
    v14 = *(_QWORD *)(v33 + 8 * a3);
    v15 = v28;
    v29 = v13;
    while (1)
    {
      v16 = *v13;
      v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 320);
      swift_retain();
      v18 = swift_retain();
      v19 = v17(v18);
      v20 = v30;
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 320))(v19);
      v21 = static Date.< infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23 = v20;
      v24 = v32;
      v22(v23, v32);
      v22(v12, v24);
      swift_release();
      result = swift_release();
      if ((v21 & 1) == 0)
      {
LABEL_4:
        ++a3;
        v13 = v29 + 1;
        if (a3 == v27)
          return result;
        goto LABEL_5;
      }
      if (!v33)
        break;
      v25 = *v13;
      v14 = v13[1];
      *v13 = v14;
      v13[1] = v25;
      --v13;
      if (a3 == ++v15)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a1;
  v7 = type metadata accessor for Date();
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v30 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v26 - v11;
  v27 = a2;
  if (a3 != a2)
  {
    v33 = *a4;
    v13 = (_QWORD *)(v33 + 8 * a3 - 8);
LABEL_5:
    v14 = *(_QWORD *)(v33 + 8 * a3);
    v15 = v28;
    v29 = v13;
    while (1)
    {
      v16 = *v13;
      v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 160);
      swift_retain();
      v18 = swift_retain();
      v19 = v17(v18);
      v20 = v30;
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 160))(v19);
      v21 = static Date.< infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v31 + 8);
      v23 = v20;
      v24 = v32;
      v22(v23, v32);
      v22(v12, v24);
      swift_release();
      result = swift_release();
      if ((v21 & 1) == 0)
      {
LABEL_4:
        ++a3;
        v13 = v29 + 1;
        if (a3 == v27)
          return result;
        goto LABEL_5;
      }
      if (!v33)
        break;
      v25 = *v13;
      v14 = v13[1];
      *v13 = v14;
      v13[1] = v25;
      --v13;
      if (a3 == ++v15)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  unint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  v33 = a1;
  v7 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v41 = *(_QWORD **)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v36 = (char *)&v31 - v11;
  result = MEMORY[0x24BDAC7A8](v10);
  v35 = (char *)&v31 - v13;
  v39 = a3;
  v32 = a2;
  if (a3 != a2)
  {
    v14 = v41[9];
    v34 = (void (*)(char *, uint64_t, uint64_t))v41[2];
    v44 = v14 * (v39 - 1);
    v37 = v14;
    v15 = v14 * v39;
    v43 = a4;
LABEL_5:
    v16 = 0;
    v17 = v33;
    v38 = v15;
    while (1)
    {
      v18 = *v43;
      v19 = v15 + v16 + *v43;
      v21 = v34;
      v20 = v35;
      v34(v35, v19, v7);
      v22 = v7;
      v23 = v36;
      v21(v36, v44 + v16 + v18, v22);
      v42 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
      v24 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
      v25 = (void (*)(char *, uint64_t))v41[1];
      v26 = v23;
      v7 = v22;
      v25(v26, v22);
      v27 = v20;
      v15 = v38;
      result = ((uint64_t (*)(char *, uint64_t))v25)(v27, v22);
      if (v42 >= v24)
      {
LABEL_4:
        v44 += v37;
        v15 += v37;
        if (++v39 == v32)
          return result;
        goto LABEL_5;
      }
      v28 = *v43;
      if (!*v43)
        break;
      v29 = v28 + v44 + v16;
      v30 = (void (*)(char *, uint64_t, uint64_t))v41[4];
      v30(v40, v28 + v15 + v16, v22);
      swift_arrayInitWithTakeFrontToBack();
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(v29, v40, v22);
      v16 -= v37;
      if (v39 == ++v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  double v27;
  double v28;
  uint64_t (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  double v51;
  double v52;
  char *v53;
  unint64_t v54;
  uint64_t result;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;

  v8 = type metadata accessor for Date();
  v64 = *(_QWORD *)(v8 - 8);
  v65 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v63 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v56 - v11;
  v13 = a2 - a1;
  v14 = a2 - a1 + 7;
  if (a2 - a1 >= 0)
    v14 = a2 - a1;
  v15 = v14 >> 3;
  v61 = a3;
  v16 = a3 - a2;
  v17 = v16 / 8;
  v68 = a1;
  v58 = a4;
  v67 = a4;
  if (v14 >> 3 >= v16 / 8)
  {
    if (v16 < -7)
      goto LABEL_45;
    v36 = v58;
    if (v58 != a2 || &a2[8 * v17] <= v58)
      memmove(v58, a2, 8 * v17);
    v37 = &v36[8 * v17];
    v66 = v37;
    v68 = a2;
    if (v16 < 8 || a1 >= a2)
    {
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v68, &v67, &v66);
      return 1;
    }
    v38 = v61 - 8;
    v39 = a2;
    v57 = a1;
    v62 = v12;
    while (1)
    {
      v61 = a2;
      v59 = v37;
      v60 = v38 + 8;
      v41 = *((_QWORD *)v37 - 1);
      v37 -= 8;
      v40 = v41;
      v42 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      v43 = *(void (**)(uint64_t))(*(_QWORD *)v40 + 312);
      swift_retain();
      v44 = swift_retain();
      v43(v44);
      Date.timeIntervalSinceReferenceDate.getter();
      v46 = v45;
      v47 = v65;
      v48 = *(uint64_t (**)(char *, uint64_t))(v64 + 8);
      v49 = v48(v12, v65);
      v50 = v63;
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 312))(v49);
      Date.timeIntervalSinceReferenceDate.getter();
      v52 = v51;
      v48(v50, v47);
      swift_release();
      swift_release();
      if (v46 >= v52)
      {
        v66 = v37;
        v39 = v61;
        if (v60 >= v59 && v38 < v59)
        {
          v54 = (unint64_t)v57;
          v53 = v58;
          v12 = v62;
          if (v60 != v59)
            *(_QWORD *)v38 = *(_QWORD *)v37;
          goto LABEL_42;
        }
        *(_QWORD *)v38 = *(_QWORD *)v37;
      }
      else
      {
        v37 = v59;
        if (v60 != v61 || v38 >= v61)
          *(_QWORD *)v38 = *(_QWORD *)v39;
        v68 = v39;
      }
      v54 = (unint64_t)v57;
      v53 = v58;
      v12 = v62;
LABEL_42:
      if (v37 > v53)
      {
        v38 -= 8;
        a2 = v39;
        if ((unint64_t)v39 > v54)
          continue;
      }
      goto LABEL_44;
    }
  }
  if (v13 >= -7)
  {
    v18 = v58;
    if (v58 != a1 || &a1[8 * v15] <= v58)
      memmove(v58, a1, 8 * v15);
    v60 = &v18[8 * v15];
    v66 = v60;
    if (v13 >= 8 && a2 < v61)
    {
      v62 = v12;
      v19 = v63;
      while (1)
      {
        v20 = *(_QWORD *)a2;
        v21 = a2;
        v22 = *(_QWORD *)v18;
        v23 = *(void (**)(uint64_t))(*(_QWORD *)v20 + 312);
        swift_retain();
        v24 = swift_retain();
        v25 = v12;
        v26 = v18;
        v23(v24);
        Date.timeIntervalSinceReferenceDate.getter();
        v28 = v27;
        v29 = *(uint64_t (**)(char *, uint64_t))(v64 + 8);
        v30 = v25;
        v31 = v65;
        v32 = v29(v30, v65);
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 312))(v32);
        Date.timeIntervalSinceReferenceDate.getter();
        v34 = v33;
        v29(v19, v31);
        swift_release();
        swift_release();
        if (v28 >= v34)
        {
          if (a1 != v18)
            *(_QWORD *)a1 = *(_QWORD *)v18;
          v18 += 8;
          v67 = v26 + 8;
          v35 = v21;
        }
        else
        {
          v35 = v21 + 8;
          if (a1 >= v21 && a1 < v35)
          {
            v12 = v62;
            if (a1 != v21)
              *(_QWORD *)a1 = *(_QWORD *)v21;
            goto LABEL_21;
          }
          *(_QWORD *)a1 = *(_QWORD *)v21;
        }
        v12 = v62;
LABEL_21:
        a1 += 8;
        v68 = a1;
        if (v18 < v60)
        {
          a2 = v35;
          if (v35 < v61)
            continue;
        }
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
LABEL_45:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t result;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;

  v8 = type metadata accessor for Date();
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v55 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v53 = a3;
  v54 = (char *)&v48 - v11;
  v12 = a2 - a1;
  v13 = a2 - a1 + 7;
  if (a2 - a1 >= 0)
    v13 = a2 - a1;
  v14 = v13 >> 3;
  v15 = a3 - a2;
  v16 = v15 / 8;
  v60 = a1;
  v50 = a4;
  v59 = a4;
  if (v13 >> 3 >= v15 / 8)
  {
    if (v15 < -7)
      goto LABEL_43;
    v29 = v50;
    if (v50 != a2 || &a2[8 * v16] <= v50)
      memmove(v50, a2, 8 * v16);
    v30 = &v29[8 * v16];
    v58 = v30;
    v60 = a2;
    if (v15 < 8 || a1 >= a2)
      goto LABEL_42;
    v31 = v53 - 8;
    v32 = a2;
    v49 = a1;
    while (1)
    {
      v53 = a2;
      v51 = v30;
      v52 = v31 + 8;
      v34 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      v33 = v34;
      v35 = *((_QWORD *)v32 - 1);
      v32 -= 8;
      v36 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 320);
      swift_retain();
      v37 = swift_retain();
      v38 = v54;
      v39 = v36(v37);
      v40 = v55;
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 320))(v39);
      v41 = static Date.< infix(_:_:)();
      v42 = *(void (**)(char *, uint64_t))(v56 + 8);
      v43 = v40;
      v44 = v57;
      v42(v43, v57);
      v42(v38, v44);
      swift_release();
      swift_release();
      if ((v41 & 1) != 0)
      {
        v30 = v51;
        if (v52 != v53 || v31 >= v53)
          *(_QWORD *)v31 = *(_QWORD *)v32;
        v60 = v32;
      }
      else
      {
        v58 = v30;
        v32 = v53;
        if (v52 >= v51 && v31 < v51)
        {
          v46 = (unint64_t)v49;
          v45 = v50;
          if (v52 != v51)
            *(_QWORD *)v31 = *(_QWORD *)v30;
          goto LABEL_40;
        }
        *(_QWORD *)v31 = *(_QWORD *)v30;
      }
      v46 = (unint64_t)v49;
      v45 = v50;
LABEL_40:
      if (v30 > v45)
      {
        v31 -= 8;
        a2 = v32;
        if ((unint64_t)v32 > v46)
          continue;
      }
      goto LABEL_42;
    }
  }
  if (v12 >= -7)
  {
    v17 = v50;
    if (v50 != a1 || &a1[8 * v14] <= v50)
      memmove(v50, a1, 8 * v14);
    v52 = &v17[8 * v14];
    v58 = v52;
    if (v12 >= 8 && a2 < v53)
    {
      v18 = v54;
      do
      {
        v19 = *(_QWORD *)v17;
        v20 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 320);
        swift_retain();
        v21 = swift_retain();
        v22 = v20(v21);
        v23 = v55;
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 320))(v22);
        v24 = static Date.< infix(_:_:)();
        v25 = *(void (**)(char *, uint64_t))(v56 + 8);
        v26 = v23;
        v27 = v57;
        v25(v26, v57);
        v25(v18, v27);
        swift_release();
        swift_release();
        if ((v24 & 1) != 0)
        {
          v28 = a2 + 8;
          if (a1 < a2 || a1 >= v28 || a1 != a2)
            *(_QWORD *)a1 = *(_QWORD *)a2;
        }
        else
        {
          if (a1 != v17)
            *(_QWORD *)a1 = *(_QWORD *)v17;
          v17 += 8;
          v59 = v17;
          v28 = a2;
        }
        a1 += 8;
        v60 = a1;
        if (v17 >= v52)
          break;
        a2 = v28;
      }
      while (v28 < v53);
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v60, &v59, &v58);
    return 1;
  }
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t result;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;

  v8 = type metadata accessor for Date();
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v55 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v53 = a3;
  v54 = (char *)&v48 - v11;
  v12 = a2 - a1;
  v13 = a2 - a1 + 7;
  if (a2 - a1 >= 0)
    v13 = a2 - a1;
  v14 = v13 >> 3;
  v15 = a3 - a2;
  v16 = v15 / 8;
  v60 = a1;
  v50 = a4;
  v59 = a4;
  if (v13 >> 3 >= v15 / 8)
  {
    if (v15 < -7)
      goto LABEL_43;
    v29 = v50;
    if (v50 != a2 || &a2[8 * v16] <= v50)
      memmove(v50, a2, 8 * v16);
    v30 = &v29[8 * v16];
    v58 = v30;
    v60 = a2;
    if (v15 < 8 || a1 >= a2)
      goto LABEL_42;
    v31 = v53 - 8;
    v32 = a2;
    v49 = a1;
    while (1)
    {
      v53 = a2;
      v51 = v30;
      v52 = v31 + 8;
      v34 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      v33 = v34;
      v35 = *((_QWORD *)v32 - 1);
      v32 -= 8;
      v36 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 160);
      swift_retain();
      v37 = swift_retain();
      v38 = v54;
      v39 = v36(v37);
      v40 = v55;
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 160))(v39);
      v41 = static Date.< infix(_:_:)();
      v42 = *(void (**)(char *, uint64_t))(v56 + 8);
      v43 = v40;
      v44 = v57;
      v42(v43, v57);
      v42(v38, v44);
      swift_release();
      swift_release();
      if ((v41 & 1) != 0)
      {
        v30 = v51;
        if (v52 != v53 || v31 >= v53)
          *(_QWORD *)v31 = *(_QWORD *)v32;
        v60 = v32;
      }
      else
      {
        v58 = v30;
        v32 = v53;
        if (v52 >= v51 && v31 < v51)
        {
          v46 = (unint64_t)v49;
          v45 = v50;
          if (v52 != v51)
            *(_QWORD *)v31 = *(_QWORD *)v30;
          goto LABEL_40;
        }
        *(_QWORD *)v31 = *(_QWORD *)v30;
      }
      v46 = (unint64_t)v49;
      v45 = v50;
LABEL_40:
      if (v30 > v45)
      {
        v31 -= 8;
        a2 = v32;
        if ((unint64_t)v32 > v46)
          continue;
      }
      goto LABEL_42;
    }
  }
  if (v12 >= -7)
  {
    v17 = v50;
    if (v50 != a1 || &a1[8 * v14] <= v50)
      memmove(v50, a1, 8 * v14);
    v52 = &v17[8 * v14];
    v58 = v52;
    if (v12 >= 8 && a2 < v53)
    {
      v18 = v54;
      do
      {
        v19 = *(_QWORD *)v17;
        v20 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 160);
        swift_retain();
        v21 = swift_retain();
        v22 = v20(v21);
        v23 = v55;
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 160))(v22);
        v24 = static Date.< infix(_:_:)();
        v25 = *(void (**)(char *, uint64_t))(v56 + 8);
        v26 = v23;
        v27 = v57;
        v25(v26, v57);
        v25(v18, v27);
        swift_release();
        swift_release();
        if ((v24 & 1) != 0)
        {
          v28 = a2 + 8;
          if (a1 < a2 || a1 >= v28 || a1 != a2)
            *(_QWORD *)a1 = *(_QWORD *)a2;
        }
        else
        {
          if (a1 != v17)
            *(_QWORD *)a1 = *(_QWORD *)v17;
          v17 += 8;
          v59 = v17;
          v28 = a2;
        }
        a1 += 8;
        v60 = a1;
        if (v17 >= v52)
          break;
        a2 = v28;
      }
      while (v28 < v53);
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v60, &v59, &v58);
    return 1;
  }
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static SiriExecutionTaskFactory.getTaskStepDescription(taskStepType:)(int a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = 0x7472617453;
  switch(a1)
  {
    case 0:
      return 0x6E776F6E6B6E55;
    case 1:
      return result;
    case 2:
      return 0x69746E6568747541;
    case 3:
      return 1953063255;
    case 4:
      return 0x656D75736552;
    case 5:
      return 0x64656C65636E6143;
    case 6:
      return 0x64656C696146;
    case 7:
      return 0x6574656C706D6F43;
    case 8:
      return 1701736270;
    case 9:
      return 0xD000000000000012;
    case 10:
      return 0xD00000000000001ELL;
    case 11:
    case 14:
    case 29:
    case 31:
    case 55:
    case 60:
    case 67:
      return 0xD000000000000011;
    case 12:
      return 0xD000000000000013;
    case 13:
      return 0xD000000000000014;
    case 15:
      return 0xD000000000000012;
    case 16:
      return 0x6769626D61736944;
    case 17:
      return 0x6F4674706D6F7250;
    case 18:
      return 0x616D7269666E6F43;
    case 19:
      return 0xD000000000000013;
    case 20:
      return 0x7461446863746546;
    case 21:
      return 0x4165766C6F736552;
    case 22:
      return 0x4174736567677553;
    case 23:
      return 0x6769626D61736944;
    case 24:
      return 0x416D7269666E6F43;
    case 25:
      v3 = 0x686372616553;
      return v3 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
    case 26:
      return 0x636972656E6547;
    case 27:
      return 0x6E5574706D6F7250;
    case 28:
      return 0xD000000000000010;
    case 30:
      return 0x6553656369766544;
    case 32:
      return 0xD000000000000016;
    case 33:
      return 0x496D7269666E6F43;
    case 34:
      return 0x6C53796669646F4DLL;
    case 35:
      return 0x53676E6964616552;
    case 36:
      return 0xD000000000000019;
    case 37:
      return 0xD000000000000021;
    case 38:
      return 0xD000000000000012;
    case 39:
      return 0xD000000000000014;
    case 40:
      return 0xD000000000000014;
    case 41:
      return 0xD000000000000017;
    case 42:
      return 0xD00000000000001ELL;
    case 43:
      return 0xD00000000000001CLL;
    case 44:
      return 0xD000000000000015;
    case 45:
      return 0xD000000000000016;
    case 46:
      return 0xD000000000000012;
    case 47:
      return 0xD000000000000016;
    case 48:
      return 0xD000000000000014;
    case 49:
      return 0xD000000000000010;
    case 50:
      return 0xD000000000000012;
    case 51:
      return 0x7845746365726944;
    case 52:
      return 0xD000000000000019;
    case 53:
      return 0xD00000000000001BLL;
    case 54:
      return 0xD000000000000013;
    case 56:
      v3 = 0x676F6C616944;
      return v3 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
    case 57:
      v4 = 0x676F6C616944;
      goto LABEL_79;
    case 58:
      return 0xD000000000000012;
    case 59:
      return 0xD000000000000021;
    case 61:
      return 0xD000000000000015;
    case 62:
      return 0x65636F7270657250;
    case 63:
      return 0x7265646E6552;
    case 64:
      return 0x6C706552776F6C46;
    case 65:
      return 0x53616956646E6553;
    case 66:
      return 0xD000000000000018;
    case 68:
      return 0xD000000000000014;
    case 69:
      return 0xD000000000000015;
    case 70:
      return 1885956947;
    case 71:
      return 1886352467;
    case 72:
      return 0x796C706552;
    case 73:
      return 0x7065526F69647541;
    case 74:
      return 0x6961674164616552;
    case 75:
      return 0x654D796669646F4DLL;
    case 76:
      return 0x746957796C706552;
    case 77:
      return 0x7065636341434354;
    case 78:
      return 0x696C636544434354;
    case 79:
      return 0xD000000000000016;
    case 80:
      v4 = 0x686372616553;
LABEL_79:
      result = v4 & 0xFFFFFFFFFFFFLL | 0x6146000000000000;
      break;
    case 81:
      result = 0x6B6361626C6C6146;
      break;
    case 82:
      result = 0x466C616974726150;
      break;
    case 83:
      result = 0x6974636572726F43;
      break;
    case 84:
    case 85:
      result = 0x646E65536F747541;
      break;
    case 86:
      result = 0xD000000000000012;
      break;
    case 87:
      result = 0xD00000000000001BLL;
      break;
    case 88:
      result = 0x4F65747563657845;
      break;
    case 89:
      result = 0xD000000000000014;
      break;
    case 90:
      result = 0xD00000000000001ALL;
      break;
    case 91:
      result = 0xD000000000000022;
      break;
    case 92:
      result = 0x4974736575716552;
      break;
    case 93:
      result = 0x496D7269666E6F43;
      break;
    case 94:
      result = 0xD00000000000001BLL;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t specialized TaskSuccess.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696C707041746F6ELL && a2 == 0xED0000656C626163
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x75636C6143746F6ELL && a2 == 0xED0000646574616CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6673736563637573 && a2 == 0xEA00000000006C75
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7365636375736E75 && a2 == 0xEC0000006C756673)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

char *specialized TaskSuccess.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v26[11];
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.UnsuccessfulCodingKeys>);
  v26[9] = *(_QWORD *)(v2 - 8);
  v26[10] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v31 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.SuccessfulCodingKeys>);
  v26[6] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.NotCalculatedCodingKeys>);
  v26[7] = *(_QWORD *)(v5 - 8);
  v26[8] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v29 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.NotApplicableCodingKeys>);
  v26[4] = *(_QWORD *)(v7 - 8);
  v26[5] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.UnknownCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskSuccess.CodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v32 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  lazy protocol witness table accessor for type TaskSuccess.CodingKeys and conformance TaskSuccess.CodingKeys();
  v18 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v18)
  {
    v26[2] = v9;
    v26[3] = v12;
    v26[1] = v10;
    v33 = 0;
    v19 = v14;
    v20 = KeyedDecodingContainer.allKeys.getter();
    v21 = v13;
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X9 }
    v22 = type metadata accessor for DecodingError();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v24 = &type metadata for TaskSuccess;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v21);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
  return v16;
}

void sub_218F68B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 68) = 1;
  lazy protocol witness table accessor for type TaskSuccess.NotApplicableCodingKeys and conformance TaskSuccess.NotApplicableCodingKeys();
  v4 = *(_QWORD *)(v3 - 88);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v4)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
    JUMPOUT(0x218F68B1CLL);
  }
  JUMPOUT(0x218F68C88);
}

void sub_218F68B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 67) = 2;
  lazy protocol witness table accessor for type TaskSuccess.NotCalculatedCodingKeys and conformance TaskSuccess.NotCalculatedCodingKeys();
  v4 = *(_QWORD *)(v3 - 88);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
    JUMPOUT(0x218F68BC8);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  JUMPOUT(0x218F68B1CLL);
}

void sub_218F68BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 66) = 3;
  lazy protocol witness table accessor for type TaskSuccess.SuccessfulCodingKeys and conformance TaskSuccess.SuccessfulCodingKeys();
  v5 = *(_QWORD *)(v4 - 88);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 176) + 8))(v2, *(_QWORD *)(v4 - 136));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v3);
    __swift_destroy_boxed_opaque_existential_0(*(_QWORD *)(v4 - 96));
    JUMPOUT(0x218F68B20);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v3);
  JUMPOUT(0x218F68B1CLL);
}

void sub_218F68C20()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 - 65) = 4;
  lazy protocol witness table accessor for type TaskSuccess.UnsuccessfulCodingKeys and conformance TaskSuccess.UnsuccessfulCodingKeys();
  v1 = *(_QWORD *)(v0 - 88);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v1)
    JUMPOUT(0x218F68C58);
  JUMPOUT(0x218F68C88);
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.CodingKeys, &unk_24DA47E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.CodingKeys, &unk_24DA47E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.CodingKeys, &unk_24DA47E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.CodingKeys, &unk_24DA47E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.CompletedCodingKeys, &unk_24DA47EF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.CompletedCodingKeys, &unk_24DA47EF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.CompletedCodingKeys, &unk_24DA47EF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.FailedCodingKeys, &unk_24DA47ED8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.FailedCodingKeys, &unk_24DA47ED8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.FailedCodingKeys, &unk_24DA47ED8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.CancelledCodingKeys, &unk_24DA47EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.CancelledCodingKeys, &unk_24DA47EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.CancelledCodingKeys, &unk_24DA47EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.AbandonedCodingKeys, &unk_24DA47E98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.AbandonedCodingKeys, &unk_24DA47E98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys)
  {
    result = MEMORY[0x219A27BFC]("鶨4$k", &unk_24DA47E98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.UnknownCodingKeys, &unk_24DA47E78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.UnknownCodingKeys, &unk_24DA47E78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType.UnknownCodingKeys, &unk_24DA47E78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType.UnknownCodingKeys and conformance TaskCompletionType.UnknownCodingKeys);
  }
  return result;
}

uint64_t specialized TaskCompletionType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6F646E616261 && a2 == 0xE900000000000064
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C6C65636E6163 && a2 == 0xE900000000000064
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6574656C706D6F63 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

char *specialized TaskCompletionType.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v26[11];
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.CompletedCodingKeys>);
  v26[9] = *(_QWORD *)(v2 - 8);
  v26[10] = v2;
  MEMORY[0x24BDAC7A8](v2);
  v31 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.FailedCodingKeys>);
  v26[6] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.CancelledCodingKeys>);
  v26[7] = *(_QWORD *)(v5 - 8);
  v26[8] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v29 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.AbandonedCodingKeys>);
  v26[4] = *(_QWORD *)(v7 - 8);
  v26[5] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.UnknownCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskCompletionType.CodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v32 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  lazy protocol witness table accessor for type TaskCompletionType.CodingKeys and conformance TaskCompletionType.CodingKeys();
  v18 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v18)
  {
    v26[2] = v9;
    v26[3] = v12;
    v26[1] = v10;
    v33 = 0;
    v19 = v14;
    v20 = KeyedDecodingContainer.allKeys.getter();
    v21 = v13;
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X9 }
    v22 = type metadata accessor for DecodingError();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v24 = &type metadata for TaskCompletionType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v21);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
  return v16;
}

void sub_218F693F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 68) = 1;
  lazy protocol witness table accessor for type TaskCompletionType.AbandonedCodingKeys and conformance TaskCompletionType.AbandonedCodingKeys();
  v4 = *(_QWORD *)(v3 - 88);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v4)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
    JUMPOUT(0x218F693C4);
  }
  JUMPOUT(0x218F69530);
}

void sub_218F69434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 67) = 2;
  lazy protocol witness table accessor for type TaskCompletionType.CancelledCodingKeys and conformance TaskCompletionType.CancelledCodingKeys();
  v4 = *(_QWORD *)(v3 - 88);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
    JUMPOUT(0x218F69470);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  JUMPOUT(0x218F693C4);
}

void sub_218F6947C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 66) = 3;
  lazy protocol witness table accessor for type TaskCompletionType.FailedCodingKeys and conformance TaskCompletionType.FailedCodingKeys();
  v5 = *(_QWORD *)(v4 - 88);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 176) + 8))(v2, *(_QWORD *)(v4 - 136));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v3);
    __swift_destroy_boxed_opaque_existential_0(*(_QWORD *)(v4 - 96));
    JUMPOUT(0x218F693C8);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v3);
  JUMPOUT(0x218F693C4);
}

void sub_218F694C8()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 - 65) = 4;
  lazy protocol witness table accessor for type TaskCompletionType.CompletedCodingKeys and conformance TaskCompletionType.CompletedCodingKeys();
  v1 = *(_QWORD *)(v0 - 88);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v1)
    JUMPOUT(0x218F69500);
  JUMPOUT(0x218F69530);
}

unint64_t lazy protocol witness table accessor for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskInteractionType.CodingKeys, &unk_24DA47DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskInteractionType.CodingKeys, &unk_24DA47DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskInteractionType.CodingKeys, &unk_24DA47DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskInteractionType.CodingKeys, &unk_24DA47DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys);
  }
  return result;
}

uint64_t specialized TaskInteractionType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736564756C636E69 && a2 == 0xEE0074706D6F7250;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736564756C636E69 && a2 == 0xEF6D7269666E6F43
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000218FBF620
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000218FBF640)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized TaskInteractionType.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  char v10;
  char v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TaskInteractionType.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TaskInteractionType.CodingKeys and conformance TaskInteractionType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v19 = 0;
  v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v18 = 1;
  v8 = KeyedDecodingContainer.decode(_:forKey:)();
  v17 = 2;
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v16 = 3;
  v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  if ((v11 & 1) != 0)
    v12 = 0x1000000;
  else
    v12 = 0;
  if ((v10 & 1) != 0)
    v13 = 0x10000;
  else
    v13 = 0;
  if ((v8 & 1) != 0)
    v14 = 256;
  else
    v14 = 0;
  return v14 & 0xFFFFFFFE | v7 & 1 | v13 | v12;
}

unint64_t lazy protocol witness table accessor for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for EngagementUnderstandingFeatures.CodingKeys, &unk_24DA47D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for EngagementUnderstandingFeatures.CodingKeys, &unk_24DA47D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for EngagementUnderstandingFeatures.CodingKeys, &unk_24DA47D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for EngagementUnderstandingFeatures.CodingKeys, &unk_24DA47D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngagementUnderstandingFeatures.CodingKeys and conformance EngagementUnderstandingFeatures.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskSuccess and conformance TaskSuccess()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess;
  if (!lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess, &type metadata for TaskSuccess);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess;
  if (!lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskSuccess, &type metadata for TaskSuccess);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskSuccess and conformance TaskSuccess);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskInteractionType and conformance TaskInteractionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskInteractionType and conformance TaskInteractionType;
  if (!lazy protocol witness table cache variable for type TaskInteractionType and conformance TaskInteractionType)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskInteractionType, &type metadata for TaskInteractionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskInteractionType and conformance TaskInteractionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TaskCompletionType and conformance TaskCompletionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType;
  if (!lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType, &type metadata for TaskCompletionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType;
  if (!lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for TaskCompletionType, &type metadata for TaskCompletionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskCompletionType and conformance TaskCompletionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for SiriExecutionTask.CodingKeys, &unk_24DA47CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for SiriExecutionTask.CodingKeys, &unk_24DA47CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for SiriExecutionTask.CodingKeys, &unk_24DA47CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for SiriExecutionTask.CodingKeys, &unk_24DA47CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionTask.CodingKeys and conformance SiriExecutionTask.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v2 = MEMORY[0x24BEE0D08];
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x219A27BF0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for EngagementUnderstandingFeatures()
{
  return objc_opt_self();
}

uint64_t lazy protocol witness table accessor for type EngagementUnderstandingFeatures and conformance EngagementUnderstandingFeatures(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x219A27BFC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys)
  {
    result = MEMORY[0x219A27BFC]("鲨4<f", &unk_24DA47C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for SiriExecutionStep.CodingKeys, &unk_24DA47C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for SiriExecutionStep.CodingKeys, &unk_24DA47C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for SiriExecutionStep.CodingKeys, &unk_24DA47C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriExecutionStep.CodingKeys and conformance SiriExecutionStep.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SiriExecutionStep(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for SiriExecutionStep);
}

uint64_t type metadata accessor for SiriExecutionTask(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for SiriExecutionTask);
}

uint64_t type metadata accessor for SiriExecutionStep(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_218F69D10@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_218F69D40(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 112))(*a1);
}

uint64_t sub_218F69D6C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result & 1;
  a2[1] = BYTE1(result) & 1;
  a2[2] = BYTE2(result) & 1;
  a2[3] = BYTE3(result) & 1;
  return result;
}

uint64_t sub_218F69DB8(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;

  if (a1[3])
    v2 = 0x1000000;
  else
    v2 = 0;
  if (a1[2])
    v3 = 0x10000;
  else
    v3 = 0;
  if (a1[1])
    v4 = 256;
  else
    v4 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 136))(v4 | *a1 | v3 | v2);
}

uint64_t sub_218F69E20@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_218F69E50(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 160))(*a1);
}

uint64_t sub_218F69E7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F69EAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 160);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F69EF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F69F20(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 184);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F69F64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_218F69F94(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 208);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_218F69FC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_218F69FF4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 232);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_218F6A024@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F6A054(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 256);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F6A098@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 272))();
  *a2 = result;
  return result;
}

uint64_t sub_218F6A0C8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 280);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_218F6A0F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 296))();
  *a2 = result;
  return result;
}

uint64_t sub_218F6A128(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 304);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_218F6A158(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
}

uint64_t sub_218F6A184(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
}

uint64_t sub_218F6A1B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F6A1E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F6A224@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F6A254(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 176);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F6A298@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F6A2C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 200);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F6A30C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F6A33C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 224);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F6A380@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 240))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F6A3B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 248);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F6A3F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 264))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F6A424(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 272);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F6A468@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 288))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F6A498(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 296);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F6A4DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 312))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for TaskSuccess()
{
  return &type metadata for TaskSuccess;
}

ValueMetadata *type metadata accessor for TaskCompletionType()
{
  return &type metadata for TaskCompletionType;
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TaskInteractionType(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[4])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskInteractionType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TaskInteractionType()
{
  return &type metadata for TaskInteractionType;
}

uint64_t method lookup function for EngagementUnderstandingFeatures()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskSuccess.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskSuccess.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskSuccess.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskInteractionType.getter()
{
  uint64_t v0;
  int v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
  return v1 & 1 | ((BYTE1(v1) & 1) << 8) | ((BYTE2(v1) & 1) << 16) | ((HIBYTE(v1) & 1) << 24);
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskInteractionType.setter(int a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 136))(a1 & 0x1010101);
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskInteractionType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskCompletionType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.taskCompletionType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.__allocating_init(taskSuccess:taskCompletionType:taskInteractionType:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 176))(a1, a2, a3 & 0x1010101);
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isUserAbandoned.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isUserCanceled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isSiriCompleted.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isPromptInteraction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isConfirmInteraction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isDisambiguateInteraction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isUnsupportedPromptInteraction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.isFailed.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of EngagementUnderstandingFeatures.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t ObjC metadata update function for SiriExecutionTask()
{
  return type metadata accessor for SiriExecutionTask(0);
}

uint64_t type metadata completion function for SiriExecutionTask()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SiriExecutionTask()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriExecutionTask.uiSessionId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SiriExecutionTask.uiSessionId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SiriExecutionTask.uiSessionId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SiriExecutionTask.requestIds.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SiriExecutionTask.requestIds.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SiriExecutionTask.requestIds.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SiriExecutionTask.appPattern.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SiriExecutionTask.appPattern.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SiriExecutionTask.appPattern.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SiriExecutionTask.taskType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of SiriExecutionTask.conversationPath.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of SiriExecutionTask.conversationPath.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of SiriExecutionTask.conversationPath.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of SiriExecutionTask.engagementFeatures.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of SiriExecutionTask.engagementFeatures.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of SiriExecutionTask.engagementFeatures.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of SiriExecutionTask.startTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of SiriExecutionTask.startTime.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of SiriExecutionTask.startTime.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of SiriExecutionTask.endTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of SiriExecutionTask.endTime.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of SiriExecutionTask.endTime.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of SiriExecutionTask.__allocating_init(uiSessionId:taskId:requestIds:appPattern:taskType:conversationPath:engagementFeatures:startTime:endTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t dispatch thunk of SiriExecutionTask.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t ObjC metadata update function for SiriExecutionStep()
{
  return type metadata accessor for SiriExecutionStep(0);
}

uint64_t type metadata completion function for SiriExecutionStep()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SiriExecutionStep()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriExecutionStep.appBundleId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SiriExecutionStep.appBundleId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SiriExecutionStep.appBundleId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SiriExecutionStep.intentName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SiriExecutionStep.intentName.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SiriExecutionStep.intentName.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SiriExecutionStep.interactionId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SiriExecutionStep.interactionId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SiriExecutionStep.interactionId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SiriExecutionStep.slotValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SiriExecutionStep.slotValue.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SiriExecutionStep.slotValue.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SiriExecutionStep.statusReason.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SiriExecutionStep.statusReason.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SiriExecutionStep.statusReason.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskStep.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskStep.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of SiriExecutionStep.taskStep.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of SiriExecutionStep.eventTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of SiriExecutionStep.eventTime.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of SiriExecutionStep.eventTime.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of SiriExecutionStep.__allocating_init(appBundleId:intentName:interactionId:slotValue:statusReason:taskId:taskStep:eventTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of SiriExecutionStep.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t type metadata accessor for SiriExecutionTaskFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for SiriExecutionTaskFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriExecutionTaskFactory.convertBiomeEventToSiriExecutionStep(bmEvent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of SiriExecutionTaskFactory.processBiomeEventsToTask(siriExecutionEvents:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of SiriExecutionTaskFactory.loadTaskEntities(steps:siriUISessionId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SiriExecutionTaskFactory.calculateEngagementUnderstandingFeatures(conversationPath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of static SiriExecutionTaskFactory.getTaskStepDescription(taskStepType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static SiriExecutionTaskFactory.isTerminalTaskStep(taskStep:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SiriExecutionTaskFactory.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t getEnumTagSinglePayload for SiriExecutionStep.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriExecutionStep.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_218F6ACC4 + 4 * byte_218FBC0F7[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_218F6ACF8 + 4 * byte_218FBC0F2[v4]))();
}

uint64_t sub_218F6ACF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F6AD00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218F6AD08);
  return result;
}

uint64_t sub_218F6AD14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218F6AD1CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_218F6AD20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F6AD28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for SiriExecutionStep.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for SiriExecutionStep.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for SiriExecutionStep.CodingKeys()
{
  return &unk_24DA47C18;
}

uint64_t getEnumTagSinglePayload for SiriExecutionTask.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriExecutionTask.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_218F6AE30 + 4 * byte_218FBC101[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_218F6AE64 + 4 * byte_218FBC0FC[v4]))();
}

uint64_t sub_218F6AE64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F6AE6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218F6AE74);
  return result;
}

uint64_t sub_218F6AE80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218F6AE88);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_218F6AE8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F6AE94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SiriExecutionTask.CodingKeys()
{
  return &unk_24DA47CA8;
}

uint64_t getEnumTagSinglePayload for EngagementUnderstandingFeatures.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EngagementUnderstandingFeatures.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_218F6AF8C + 4 * byte_218FBC10B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_218F6AFC0 + 4 * byte_218FBC106[v4]))();
}

uint64_t sub_218F6AFC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F6AFC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218F6AFD0);
  return result;
}

uint64_t sub_218F6AFDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218F6AFE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_218F6AFE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F6AFF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for EngagementUnderstandingFeatures.CodingKeys()
{
  return &unk_24DA47D38;
}

uint64_t getEnumTagSinglePayload for TaskInteractionType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskInteractionType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_218F6B0E8 + 4 * byte_218FBC115[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_218F6B11C + 4 * byte_218FBC110[v4]))();
}

uint64_t sub_218F6B11C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F6B124(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218F6B12CLL);
  return result;
}

uint64_t sub_218F6B138(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218F6B140);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_218F6B144(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F6B14C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TaskInteractionType.CodingKeys()
{
  return &unk_24DA47DC8;
}

void *type metadata accessor for TaskCompletionType.CodingKeys()
{
  return &unk_24DA47E58;
}

void *type metadata accessor for TaskCompletionType.UnknownCodingKeys()
{
  return &unk_24DA47E78;
}

void *type metadata accessor for TaskCompletionType.AbandonedCodingKeys()
{
  return &unk_24DA47E98;
}

void *type metadata accessor for TaskCompletionType.CancelledCodingKeys()
{
  return &unk_24DA47EB8;
}

void *type metadata accessor for TaskCompletionType.FailedCodingKeys()
{
  return &unk_24DA47ED8;
}

void *type metadata accessor for TaskCompletionType.CompletedCodingKeys()
{
  return &unk_24DA47EF8;
}

uint64_t getEnumTagSinglePayload for TaskSuccess(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskSuccess(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_218F6B2A4 + 4 * byte_218FBC11F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_218F6B2D8 + 4 * byte_218FBC11A[v4]))();
}

uint64_t sub_218F6B2D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F6B2E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218F6B2E8);
  return result;
}

uint64_t sub_218F6B2F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218F6B2FCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_218F6B300(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F6B308(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TaskSuccess.CodingKeys()
{
  return &unk_24DA47F88;
}

void *type metadata accessor for TaskSuccess.UnknownCodingKeys()
{
  return &unk_24DA47FA8;
}

void *type metadata accessor for TaskSuccess.NotApplicableCodingKeys()
{
  return &unk_24DA47FC8;
}

void *type metadata accessor for TaskSuccess.NotCalculatedCodingKeys()
{
  return &unk_24DA47FE8;
}

void *type metadata accessor for TaskSuccess.SuccessfulCodingKeys()
{
  return &unk_24DA48008;
}

void *type metadata accessor for TaskSuccess.UnsuccessfulCodingKeys()
{
  return &unk_24DA48028;
}

uint64_t specialized EngagementUnderstandingFeatures.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x636375536B736174 && a2 == 0xEB00000000737365;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000218FBF470
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000218FBF490)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized SiriExecutionTask.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F69737365536975 && a2 == 0xEB0000000064496ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64496B736174 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4974736575716572 && a2 == 0xEA00000000007364
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574746150707061 && a2 == 0xEA00000000006E72
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x657079546B736174 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000218FBF510
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000218FBF530
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6D69547472617473 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656D6954646E65 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t specialized SiriExecutionStep.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C646E7542707061 && a2 == 0xEB00000000644965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614E746E65746E69 && a2 == 0xEA0000000000656DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7463617265746E69 && a2 == 0xED000064496E6F69
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756C6156746F6C73 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6552737574617473 && a2 == 0xEC0000006E6F7361
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x64496B736174 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x706574536B736174 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6D6954746E657665 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t PSEGenericSELFEmitter.emitPSEGeneric(appLaunchSignals:task:)(uint64_t a1, uint64_t a2)
{
  uint64_t countAndFlagsBits;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t p_name;
  id v25;
  uint64_t v26;
  id v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(Swift::String *__return_ptr, uint64_t);
  uint64_t v46;
  double v47;
  id v48;
  uint64_t (*v49)(void);
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  id v80;
  Class isa;
  id v82;
  void (*v83)(char *, unint64_t);
  id v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, unint64_t);
  uint64_t v88;
  char *v89;
  id v90;
  Class v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  id v103;
  Class v104;
  id v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t (*v116)(char *, unint64_t);
  char *v117;
  id v118;
  Class v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  id v131;
  char *v132;
  Class v133;
  _QWORD v134[2];
  id v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  char *v139;
  id v140;
  char *v141;
  unint64_t v142;
  char *v143;
  id v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  Swift::String v155;
  __int128 v156;

  v152 = a2;
  v4 = type metadata accessor for ReliabilityCategory();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v150 = (char *)v134 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v148 = (char *)v134 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v149 = (char *)v134 - v13;
  v14 = type metadata accessor for UUID();
  v151 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v134 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v146 = (char *)v134 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v147 = (char *)v134 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v134 - v22;
  p_name = (unint64_t)&PSEAlarmSELFEmitter.name;
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E0]), sel_init);
  if (!v25)
    goto LABEL_27;
  v26 = (uint64_t)v25;
  v143 = v17;
  v145 = countAndFlagsBits;
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E8]), sel_init);
  if (!v27)
  {
LABEL_26:

LABEL_27:
    if (one-time initialization token for engagement != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.engagement);
    v34 = *MEMORY[0x24BEA7EF8];
    v35 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v7, v34, v35);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEA8030], v4);
    Logger.debug(_:_:)(0xD000000000000030, 0x8000000218FBFC90, (uint64_t)v7);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v28 = v27;
  v144 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958F8]), sel_init);
  if (!v144)
  {
LABEL_25:

    v26 = (uint64_t)v28;
    goto LABEL_26;
  }
  v141 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958F0]), sel_init);
  if (!v141)
  {

    v26 = (uint64_t)v28;
    v28 = v144;
    goto LABEL_25;
  }
  v140 = v28;
  v139 = v23;
  v135 = (id)v26;
  v142 = v14;
  v137 = v7;
  v29 = MEMORY[0x24BEE4AF8];
  v155._countAndFlagsBits = MEMORY[0x24BEE4AF8];
  v138 = v5;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      countAndFlagsBits = a1;
    else
      countAndFlagsBits = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v30 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v30)
  {
    swift_bridgeObjectRelease();
    countAndFlagsBits = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_41;
    goto LABEL_31;
  }
  v136 = v4;
  if (v30 < 1)
  {
    __break(1u);
    goto LABEL_124;
  }
  v26 = 0;
  p_name = a1 & 0xC000000000000001;
  do
  {
    if (p_name)
    {
      v7 = (char *)MEMORY[0x219A2756C](v26, a1);
    }
    else
    {
      v7 = *(char **)(a1 + 8 * v26 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(_QWORD *)v7 + 168))() == 1769105747 && v31 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_11:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v14 = *(_QWORD *)(v155._countAndFlagsBits + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_12;
    }
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      goto LABEL_11;
    swift_release();
LABEL_12:
    ++v26;
  }
  while (v30 != v26);
  swift_bridgeObjectRelease();
  countAndFlagsBits = v155._countAndFlagsBits;
  v4 = v136;
  if ((v155._countAndFlagsBits & 0x8000000000000000) == 0)
  {
LABEL_31:
    if ((countAndFlagsBits & 0x4000000000000000) != 0)
      goto LABEL_41;
    if (*(_QWORD *)(countAndFlagsBits + 16))
      goto LABEL_33;
LABEL_42:
    swift_release();
    v26 = 0;
    goto LABEL_43;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v26)
    goto LABEL_42;
LABEL_33:
  if ((countAndFlagsBits & 0xC000000000000001) != 0)
  {
LABEL_124:
    v26 = MEMORY[0x219A2756C](0, countAndFlagsBits);
LABEL_36:
    swift_release();
LABEL_43:
    v155._countAndFlagsBits = v29;
    v136 = v26;
    if (v30)
    {
      if (v30 < 1)
        goto LABEL_126;
      v14 = a1 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      v37 = 0;
      p_name = 0xE400000000000000;
      do
      {
        if (v14)
        {
          v38 = MEMORY[0x219A2756C](v37, a1);
        }
        else
        {
          v38 = *(_QWORD *)(a1 + 8 * v37 + 32);
          swift_retain();
        }
        if ((*(uint64_t (**)(void))(*(_QWORD *)v38 + 168))() == 1769105747 && v39 == 0xE400000000000000)
        {
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v41 & 1) != 0)
          {
            swift_release();
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        ++v37;
      }
      while (v30 != v37);
      swift_bridgeObjectRelease();
      v29 = v155._countAndFlagsBits;
      v26 = v136;
    }
    v7 = v141;
    v30 = v152;
    if ((v29 & 0x8000000000000000) != 0 || (v29 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v43)
      {
LABEL_62:
        if ((v29 & 0xC000000000000001) != 0)
          goto LABEL_127;
        if (*(_QWORD *)(v29 + 16))
        {
          v42 = *(_QWORD *)(v29 + 32);
          swift_retain();
          goto LABEL_65;
        }
        __break(1u);
LABEL_129:
        swift_once();
LABEL_118:
        v109 = (_QWORD *)v14;
        v110 = type metadata accessor for Logger();
        __swift_project_value_buffer(v110, (uint64_t)static Logger.engagement);
        v111 = *MEMORY[0x24BEA7F10];
        v112 = type metadata accessor for EngagementSignalCollectionError();
        v113 = (uint64_t)v137;
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 104))(v137, v111, v112);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(p_name + 104))(v113, *(unsigned int *)v29, v4);
        Logger.debug(_:_:)(0xD000000000000024, 0x8000000218FBEFB0, v113);
        v114 = (*(uint64_t (**)(uint64_t, uint64_t))(p_name + 8))(v113, v4);
        v107 = v142;
        v115 = v140;
        goto LABEL_120;
      }
    }
    else if (*(_QWORD *)(v29 + 16))
    {
      goto LABEL_62;
    }
    swift_release();
    v42 = 0;
    goto LABEL_68;
  }
  if (*(_QWORD *)(countAndFlagsBits + 16))
  {
    v26 = *(_QWORD *)(countAndFlagsBits + 32);
    swift_retain();
    goto LABEL_36;
  }
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  v42 = MEMORY[0x219A2756C](0, v29);
LABEL_65:
  swift_release();
LABEL_68:
  v44 = v142;
  objc_msgSend(v7, sel_setIsDonatedBySiri_, 1);
  if (v26)
  {
    v45 = *(void (**)(Swift::String *__return_ptr, uint64_t))(*(_QWORD *)v26 + 120);
    v46 = swift_retain();
    v45(&v155, v46);
    swift_release();
    v47 = *(double *)&v155._countAndFlagsBits;
  }
  else
  {
    v47 = -1.0;
  }
  v48 = objc_msgSend(v7, sel_setEventDonationTimeInSecondsSince2001_, v47);
  v49 = *(uint64_t (**)(void))(*(_QWORD *)v30 + 248);
  v50 = ((uint64_t (*)(id))v49)(v48);
  v51 = (void *)MEMORY[0x219A27218](v50);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setDomain_, v51);

  v52 = v49();
  v53 = (void *)MEMORY[0x219A27218](v52);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setAction_, v53);

  v134[1] = v42;
  if (v42)
  {
    swift_retain();
    (*(void (**)(Swift::String *__return_ptr, id))(*(_QWORD *)v42 + 120))(&v155, objc_msgSend(v7, sel_setHasUserInitiatedFollowup_, 1));
    v54 = (*(uint64_t (**)(id))(*(_QWORD *)v42 + 168))(objc_msgSend(v7, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v155._countAndFlagsBits));
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 136))(v54);
    swift_bridgeObjectRelease();
    ((void (*)(id))v49)(objc_msgSend(v7, sel_setAppLaunchReason_, v55));
    v56 = String.lowercased()();
    swift_bridgeObjectRelease();
    v155 = v56;
    v153 = 1936744813;
    v154 = 0xE400000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    LOBYTE(v55) = StringProtocol.contains<A>(_:)();
    v57 = swift_bridgeObjectRelease();
    if ((v55 & 1) != 0)
    {
      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 216))(v57);
      v59 = v144;
      if (*(_QWORD *)(v58 + 16))
      {
        v60 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FBEF40);
        v61 = v151;
        v30 = v152;
        if ((v62 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v58 + 56) + 32 * v60, (uint64_t)&v155);
        }
        else
        {
          v155 = (Swift::String)0;
          v156 = 0u;
        }
      }
      else
      {
        v155 = (Swift::String)0;
        v156 = 0u;
        v61 = v151;
        v30 = v152;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v156 + 1))
      {
        v66 = swift_dynamicCast();
        v67 = v66 == 0;
        if (v66)
          v68 = v153;
        else
          v68 = 0;
        if (v67)
          v69 = 0;
        else
          v69 = v154;
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v155, &demangling cache variable for type metadata for Any?);
        v68 = 0;
        v69 = 0;
      }
      v70 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v145 + 128))(v68, v69);
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_setAppFollowup_, v70);
      swift_release();
    }
    else
    {
      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 216))(v57);
      v59 = v144;
      if (*(_QWORD *)(v63 + 16))
      {
        v64 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FBEF40);
        v61 = v151;
        if ((v65 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v63 + 56) + 32 * v64, (uint64_t)&v155);
        }
        else
        {
          v155 = (Swift::String)0;
          v156 = 0u;
        }
      }
      else
      {
        v155 = (Swift::String)0;
        v156 = 0u;
        v61 = v151;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v156 + 1))
      {
        v71 = swift_dynamicCast();
        if (v71)
          v72 = v153;
        else
          v72 = 0;
        if (v71)
          v73 = v154;
        else
          v73 = 0;
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v155, &demangling cache variable for type metadata for Any?);
        v72 = 0;
        v73 = 0;
      }
      v74 = v7;
      v75 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v152 + 224))();
      if (v75[2])
      {
        v77 = v75[4];
        v76 = v75[5];
        swift_bridgeObjectRetain();
      }
      else
      {
        v77 = 0;
        v76 = 0;
      }
      swift_bridgeObjectRelease();
      v78 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v145 + 120))(v72, v73, v77, v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v74;
      objc_msgSend(v74, sel_setAppFollowup_, v78);
      swift_release();
      v44 = v142;
      v30 = v152;
    }
  }
  else
  {
    objc_msgSend(v7, sel_setHasUserInitiatedFollowup_, 0);
    objc_msgSend(v7, sel_setAppFollowup_, 3);
    v59 = v144;
    v61 = v151;
  }
  objc_msgSend(v59, sel_setCommonSignal_, v7);
  v79 = v139;
  UUID.init()();
  v80 = objc_allocWithZone(MEMORY[0x24BE95C78]);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v82 = objc_msgSend(v80, sel_initWithNSUUID_, isa);

  v83 = *(void (**)(char *, unint64_t))(v61 + 8);
  v83(v79, v44);
  v84 = v140;
  objc_msgSend(v140, sel_setPseId_, v82);

  (*(void (**)(void))(*(_QWORD *)v30 + 152))();
  v85 = (uint64_t)v149;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  v86 = v61;
  v87 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v61 + 48);
  if (v87(v85, 1, v44) == 1)
  {
    v88 = outlined destroy of Any?(v85, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    v89 = v147;
    (*(void (**)(char *, uint64_t, unint64_t))(v86 + 32))(v147, v85, v44);
    v90 = objc_allocWithZone(MEMORY[0x24BE95C78]);
    v91 = UUID._bridgeToObjectiveC()().super.isa;
    v92 = objc_msgSend(v90, (SEL)&selRef_state + 5, v91);

    objc_msgSend(v84, sel_setUiSessionId_, v92);
    v88 = ((uint64_t (*)(char *, unint64_t))v83)(v89, v44);
  }
  v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 200))(v88);
  v14 = (unint64_t)&unk_253F31000;
  v29 = MEMORY[0x24BEA8030];
  if (*(_QWORD *)(v93 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v94 = (uint64_t)v148;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    v95 = v142;
    if (v87(v94, 1, v142) == 1)
    {
      outlined destroy of Any?(v94, &demangling cache variable for type metadata for UUID?);
      goto LABEL_112;
    }
    v102 = v146;
    (*(void (**)(char *, uint64_t, unint64_t))(v151 + 32))(v146, v94, v95);
    v103 = objc_allocWithZone(MEMORY[0x24BE95C78]);
    v104 = UUID._bridgeToObjectiveC()().super.isa;
    v105 = objc_msgSend(v103, sel_initWithNSUUID_, v104);

    objc_msgSend(v140, sel_setOriginalLastRequestId_, v105);
    v101 = ((uint64_t (*)(char *, unint64_t))v83)(v102, v95);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_112:
    if (one-time initialization token for engagement != -1)
      swift_once();
    v96 = type metadata accessor for Logger();
    __swift_project_value_buffer(v96, (uint64_t)static Logger.engagement);
    v97 = *MEMORY[0x24BEA7F28];
    v98 = type metadata accessor for EngagementSignalCollectionError();
    v99 = (uint64_t)v137;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 104))(v137, v97, v98);
    v100 = v138;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v138 + 104))(v99, *(unsigned int *)v29, v4);
    Logger.debug(_:_:)(0xD000000000000027, 0x8000000218FBEF80, v99);
    v101 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v99, v4);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v152 + 176))(v101);
  v106 = (uint64_t)v150;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  v107 = v142;
  v108 = v87(v106, 1, v142);
  v134[0] = v83;
  if (v108 == 1)
  {
    outlined destroy of Any?(v106, &demangling cache variable for type metadata for UUID?);
    p_name = v138;
    if (one-time initialization token for engagement == -1)
      goto LABEL_118;
    goto LABEL_129;
  }
  v116 = (uint64_t (*)(char *, unint64_t))v83;
  v109 = &unk_253F31000;
  v117 = v143;
  (*(void (**)(char *, uint64_t, unint64_t))(v151 + 32))(v143, v106, v107);
  v118 = objc_allocWithZone(MEMORY[0x24BE95C78]);
  v119 = UUID._bridgeToObjectiveC()().super.isa;
  v120 = objc_msgSend(v118, sel_initWithNSUUID_, v119);

  v115 = v140;
  objc_msgSend(v140, sel_setTaskId_, v120);

  v114 = v116(v117, v107);
  p_name = v138;
  v113 = (uint64_t)v137;
LABEL_120:
  v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 296))(v114);
  v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 104))(v121);
  swift_release();
  v123 = v145;
  v124 = objc_msgSend(v115, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 96))(v122));
  objc_msgSend(v115, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(_QWORD *)v123 + 112))(v124));
  v125 = v135;
  objc_msgSend(v135, sel_setEventMetadata_, v115);
  v126 = v144;
  objc_msgSend(v125, sel_setGenericSignalGenerated_, v144);
  if (v109[458] != -1)
    swift_once();
  v127 = type metadata accessor for Logger();
  __swift_project_value_buffer(v127, (uint64_t)static Logger.engagement);
  v128 = *MEMORY[0x24BEA7FA0];
  v129 = type metadata accessor for SELFPSELogged();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 104))(v113, v128, v129);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(p_name + 104))(v113, *MEMORY[0x24BEA7FE0], v4);
  Logger.debug(_:_:)(0xD000000000000037, 0x8000000218FBFCD0, v113);
  (*(void (**)(uint64_t, uint64_t))(p_name + 8))(v113, v4);
  v130 = objc_msgSend((id)objc_opt_self(), sel_sharedAnalytics);
  v131 = objc_msgSend(v130, sel_defaultMessageStream);

  v132 = v139;
  UUID.init()();
  v133 = UUID._bridgeToObjectiveC()().super.isa;
  ((void (*)(char *, unint64_t))v134[0])(v132, v107);
  objc_msgSend(v131, sel_emitMessage_isolatedStreamUUID_, v125, v133);

  swift_release();
  return swift_release();
}

uint64_t PSEGenericSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSEGenericSELFEmitter.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEGenericSELFEmitter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEGenericSELFEmitter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PSEGenericSELFEmitter()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSEGenericSELFEmitter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSEGenericSELFEmitter.emitPSEGeneric(appLaunchSignals:task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

void PSEHomeSELFEmitter.emitPSEHome(homeSignals:appLaunchSignals:task:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t p_name;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t *v31;
  uint64_t *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  char **v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(char *, _QWORD, uint64_t);
  uint64_t v84;
  uint64_t v85;
  void (*v86)(__int128 *__return_ptr, uint64_t);
  char *v87;
  unint64_t v88;
  void (*v89)(char *, _QWORD *);
  void (*v90)(char *, uint64_t);
  void (*v91)(char *, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  double v100;
  char *v101;
  double v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  id v108;
  char *v109;
  id v110;
  Class isa;
  id v112;
  void (*v113)(char *, _QWORD *);
  uint64_t *v114;
  uint64_t v115;
  unsigned int (*v116)(uint64_t, uint64_t, _QWORD *);
  uint64_t v117;
  char *v118;
  id v119;
  Class v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  id v131;
  Class v132;
  id v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  char *v142;
  id v143;
  Class v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  id v150;
  id v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  id v157;
  Class v158;
  uint64_t v159;
  char **v160;
  _QWORD *v161;
  uint64_t *v162;
  id v163;
  char *v164;
  char *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  id v170;
  id v171;
  uint64_t v172;
  id v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  _QWORD *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;

  v6 = (_QWORD *)type metadata accessor for ReliabilityCategory();
  v7 = *(v6 - 1);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v159 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v185 = (char *)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v183 = (char *)&v159 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v184 = (char *)&v159 - v15;
  v16 = (_QWORD *)type metadata accessor for UUID();
  v188 = *(v16 - 1);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v177 = (char *)&v159 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v175 = (char *)&v159 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v176 = (char *)&v159 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v159 - v23;
  v190 = (_QWORD *)type metadata accessor for Date();
  v180 = *(v190 - 1);
  MEMORY[0x24BDAC7A8](v190);
  v189 = (char *)&v159 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for Calendar.Component();
  v179 = *(_QWORD *)(v187 - 8);
  MEMORY[0x24BDAC7A8](v187);
  v182 = (char *)&v159 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = type metadata accessor for Calendar();
  v178 = *(_QWORD *)(v186 - 8);
  MEMORY[0x24BDAC7A8](v186);
  v181 = (char *)&v159 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  p_name = (unint64_t)&PSEAlarmSELFEmitter.name;
  v29 = (unsigned int *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E0]), sel_init);
  if (!v29)
  {
LABEL_22:
    if (one-time initialization token for engagement != -1)
      goto LABEL_115;
    goto LABEL_23;
  }
  v30 = v29;
  v174 = a3;
  v31 = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E8]), sel_init);
  if (!v31)
  {

    goto LABEL_22;
  }
  v32 = v31;
  v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95908]), sel_init);
  if (!v33)
  {

    goto LABEL_22;
  }
  v171 = v33;
  v173 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958F0]), sel_init);
  if (!v173)
  {

    v42 = &v197;
LABEL_21:

    goto LABEL_22;
  }
  v170 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95900]), sel_init);
  if (!v170)
  {

    v42 = &v198;
    goto LABEL_21;
  }
  v166 = v7;
  v167 = v6;
  if (a1 >> 62)
    goto LABEL_118;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7)
  {
LABEL_119:

    swift_bridgeObjectRelease();
    v6 = v167;
    v7 = v166;
    goto LABEL_22;
  }
LABEL_8:
  v163 = v30;
  v165 = v24;
  v169 = v16;
  v30 = (unsigned int *)(a1 & 0xC000000000000001);
  v162 = v32;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = (_QWORD *)MEMORY[0x219A2756C](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_123;
    }
    v6 = *(_QWORD **)(a1 + 32);
    swift_retain();
  }
  p_name = (unint64_t)v173;
  v34 = swift_bridgeObjectRelease();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*v6 + 120))(&v195, v34);
  v35 = (*(uint64_t (**)(id))(*v6 + 144))(objc_msgSend((id)p_name, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v195));
  v36 = (void *)MEMORY[0x219A27218](v35);
  swift_bridgeObjectRelease();
  objc_msgSend((id)p_name, sel_setDomain_, v36);

  v37 = (*(uint64_t (**)(void))(*v6 + 168))();
  v16 = (_QWORD *)MEMORY[0x219A27218](v37);
  swift_bridgeObjectRelease();
  objc_msgSend((id)p_name, sel_setAction_, v16);

  v38 = (*(uint64_t (**)(void))(*v6 + 216))();
  if (!*(_QWORD *)(v38 + 16)
    || (v39 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v40 & 1) == 0))
  {
    v195 = 0u;
    v196 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  outlined init with copy of Any(*(_QWORD *)(v38 + 56) + 32 * v39, (uint64_t)&v195);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v196 + 1))
  {
LABEL_25:
    outlined destroy of Any?((uint64_t)&v195, &demangling cache variable for type metadata for Any?);
    v41 = 2;
    goto LABEL_26;
  }
  if (swift_dynamicCast())
    v41 = v192;
  else
    v41 = 2;
LABEL_26:
  objc_msgSend((id)p_name, sel_setIsDonatedBySiri_, (*(uint64_t (**)(uint64_t))(*(_QWORD *)v191 + 104))(v41));
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v32 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v32 = *(uint64_t **)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v164 = v9;
  v161 = v6;
  if (v32)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v46 = MEMORY[0x219A2756C](0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_147:
        v168 = MEMORY[0x219A2756C](0, p_name);
        goto LABEL_74;
      }
      v46 = *(_QWORD *)(a2 + 32);
      swift_retain();
    }
    v47 = swift_bridgeObjectRelease();
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v46 + 120))(&v195, v47);
    v48 = (*(uint64_t (**)(id))(*(_QWORD *)v46 + 216))(objc_msgSend((id)p_name, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v195));
    if (*(_QWORD *)(v48 + 16)
      && (v49 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FBEF40),
          (v50 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v48 + 56) + 32 * v49, (uint64_t)&v195);
    }
    else
    {
      v195 = 0u;
      v196 = 0u;
    }
    v172 = v46;
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v196 + 1))
    {
      v51 = swift_dynamicCast();
      if (v51)
        v52 = v192;
      else
        v52 = 0;
      if (v51)
        v53 = v193;
      else
        v53 = 0;
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v195, &demangling cache variable for type metadata for Any?);
      v52 = 0;
      v53 = 0;
    }
    v54 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v174 + 224))();
    if (v54[2])
    {
      v56 = v54[4];
      v55 = v54[5];
      swift_bridgeObjectRetain();
    }
    else
    {
      v56 = 0;
      v55 = 0;
    }
    swift_bridgeObjectRelease();
    v57 = v191;
    v58 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v191 + 120))(v52, v53, v56, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v173;
    v59 = objc_msgSend(v173, sel_setAppFollowup_, v58);
    v60 = (*(uint64_t (**)(id))(*(_QWORD *)v172 + 168))(v59);
    v16 = v61;
    v32 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 136))(v60);
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setAppLaunchReason_, v32);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    objc_msgSend((id)p_name, sel_setAppFollowup_, 3);
  }
  v192 = MEMORY[0x24BEE4AF8];
  v62 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  a2 = 0;
  v24 = (char *)(MEMORY[0x24BEE4AD8] + 8);
  v9 = (char *)MEMORY[0x24BEE1328];
  v172 = a1 & 0xFFFFFFFFFFFFFF8;
  do
  {
    if (v30)
    {
      v16 = (_QWORD *)MEMORY[0x219A2756C](a2, a1);
      v6 = (_QWORD *)(a2 + 1);
      if (__OFADD__(a2, 1))
        goto LABEL_113;
    }
    else
    {
      if (a2 >= *(_QWORD *)(v62 + 16))
      {
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        p_name = (unint64_t)v32;
        swift_bridgeObjectRetain();
        v7 = _CocoaArrayWrapper.endIndex.getter();
        if (!v7)
          goto LABEL_119;
        goto LABEL_8;
      }
      v16 = *(_QWORD **)(a1 + 8 * a2 + 32);
      swift_retain();
      v6 = (_QWORD *)(a2 + 1);
      if (__OFADD__(a2, 1))
      {
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        swift_once();
LABEL_23:
        v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Logger.engagement);
        v44 = *MEMORY[0x24BEA7EF8];
        v45 = type metadata accessor for EngagementSignalCollectionError();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v9, v44, v45);
        (*(void (**)(char *, _QWORD, _QWORD *))(v7 + 104))(v9, *MEMORY[0x24BEA8030], v6);
        Logger.debug(_:_:)(0xD00000000000002DLL, 0x8000000218FBFD40, (uint64_t)v9);
        (*(void (**)(char *, _QWORD *))(v7 + 8))(v9, v6);
        return;
      }
    }
    v32 = (uint64_t *)(*(uint64_t (**)(void))(*v16 + 216))();
    if (v32[2]
      && (v63 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
          (v64 & 1) != 0))
    {
      outlined init with copy of Any(v32[7] + 32 * v63, (uint64_t)&v195);
    }
    else
    {
      v195 = 0u;
      v196 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v196 + 1))
    {
      outlined destroy of Any?((uint64_t)&v195, &demangling cache variable for type metadata for Any?);
LABEL_51:
      swift_release();
      goto LABEL_52;
    }
    if ((swift_dynamicCast() & 1) == 0 || (v194 & 1) != 0)
      goto LABEL_51;
    v32 = (uint64_t *)&v192;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    v62 = v172;
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_52:
    ++a2;
  }
  while (v6 != (_QWORD *)v7);
  swift_bridgeObjectRelease();
  p_name = v192;
  if ((v192 & 0x8000000000000000) == 0 && (v192 & 0x4000000000000000) == 0)
  {
    v32 = (uint64_t *)v173;
    v65 = (uint64_t *)v170;
    if (*(_QWORD *)(v192 + 16))
    {
      swift_retain();
      goto LABEL_71;
    }
LABEL_126:
    swift_release();
    objc_msgSend(v32, sel_setHasUserInitiatedFollowup_, 0);
    objc_msgSend(v65, sel_setFollowUpSource_, 1);
    v98 = v169;
    v97 = v188;
LABEL_127:
    v108 = v171;
    objc_msgSend(v171, sel_setCommonSignal_, v32);
    objc_msgSend(v108, sel_setHomeFollowUpSignal_, v65);
    v109 = v165;
    UUID.init()();
    v110 = objc_allocWithZone(MEMORY[0x24BE95C78]);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v112 = objc_msgSend(v110, sel_initWithNSUUID_, isa);

    v113 = *(void (**)(_QWORD, _QWORD))(v97 + 8);
    v113(v109, v98);
    v114 = v162;
    objc_msgSend(v162, sel_setPseId_, v112);

    (*(void (**)(void))(*(_QWORD *)v174 + 152))();
    v115 = (uint64_t)v184;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    v116 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v97 + 48);
    if (v116(v115, 1, v98) == 1)
    {
      v65 = v114;
      v117 = outlined destroy of Any?(v115, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      v118 = v176;
      (*(void (**)(char *, uint64_t, _QWORD *))(v97 + 32))(v176, v115, v98);
      v119 = objc_allocWithZone(MEMORY[0x24BE95C78]);
      v120 = UUID._bridgeToObjectiveC()().super.isa;
      v121 = objc_msgSend(v119, sel_initWithNSUUID_, v120);

      v65 = v114;
      objc_msgSend(v114, sel_setUiSessionId_, v121);

      v117 = ((uint64_t (*)(char *, _QWORD *))v113)(v118, v98);
    }
    v122 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 200))(v117) + 16);
    v30 = (unsigned int *)MEMORY[0x24BEA8030];
    v190 = v113;
    if (v122)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v123 = (uint64_t)v183;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      v124 = v169;
      if (v116(v123, 1, v169) == 1)
      {
        outlined destroy of Any?(v123, &demangling cache variable for type metadata for UUID?);
        goto LABEL_134;
      }
      v130 = v175;
      (*(void (**)(char *, uint64_t, _QWORD *))(v97 + 32))(v175, v123, v124);
      v131 = objc_allocWithZone(MEMORY[0x24BE95C78]);
      v132 = UUID._bridgeToObjectiveC()().super.isa;
      v133 = objc_msgSend(v131, sel_initWithNSUUID_, v132);

      objc_msgSend(v65, sel_setOriginalLastRequestId_, v133);
      v129 = ((uint64_t (*)(char *, _QWORD *))v113)(v130, v124);
      v6 = v167;
      v7 = v166;
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_134:
      v6 = v167;
      v7 = v166;
      if (one-time initialization token for engagement != -1)
        swift_once();
      v125 = type metadata accessor for Logger();
      __swift_project_value_buffer(v125, (uint64_t)static Logger.engagement);
      v126 = *MEMORY[0x24BEA7F28];
      v127 = type metadata accessor for EngagementSignalCollectionError();
      v128 = (uint64_t)v164;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 104))(v164, v126, v127);
      (*(void (**)(uint64_t, _QWORD, _QWORD *))(v7 + 104))(v128, *v30, v6);
      Logger.debug(_:_:)(0xD000000000000027, 0x8000000218FBEF80, v128);
      v129 = (*(uint64_t (**)(uint64_t, _QWORD *))(v7 + 8))(v128, v6);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 176))(v129);
    v134 = (uint64_t)v185;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    v135 = v169;
    if (v116(v134, 1, v169) == 1)
    {
      outlined destroy of Any?(v134, &demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for engagement == -1)
        goto LABEL_140;
      goto LABEL_149;
    }
    v142 = v177;
    (*(void (**)(char *, uint64_t, _QWORD *))(v188 + 32))(v177, v134, v135);
    v143 = objc_allocWithZone(MEMORY[0x24BE95C78]);
    v144 = UUID._bridgeToObjectiveC()().super.isa;
    v145 = objc_msgSend(v143, sel_initWithNSUUID_, v144);

    v141 = v65;
    objc_msgSend(v65, sel_setTaskId_, v145);

    v140 = ((uint64_t (*)(char *, _QWORD *))v190)(v142, v135);
    v139 = (uint64_t)v164;
LABEL_142:
    v146 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 296))(v140);
    v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 104))(v146);
    swift_release();
    v148 = v191;
    v149 = objc_msgSend(v141, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(_QWORD *)v191 + 96))(v147));
    objc_msgSend(v141, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(_QWORD *)v148 + 112))(v149));
    v150 = v163;
    objc_msgSend(v163, sel_setEventMetadata_, v141);
    v151 = v171;
    objc_msgSend(v150, sel_setHomeFollowupSignalGenerated_, v171);
    v152 = v165;
    if (one-time initialization token for engagement != -1)
      swift_once();
    v153 = type metadata accessor for Logger();
    __swift_project_value_buffer(v153, (uint64_t)static Logger.engagement);
    v154 = *MEMORY[0x24BEA7F80];
    v155 = type metadata accessor for SELFPSELogged();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v155 - 8) + 104))(v139, v154, v155);
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(v7 + 104))(v139, *MEMORY[0x24BEA7FE0], v6);
    Logger.debug(_:_:)(0xD000000000000034, 0x8000000218FBFD70, v139);
    (*(void (**)(uint64_t, _QWORD *))(v7 + 8))(v139, v6);
    v156 = objc_msgSend((id)objc_opt_self(), sel_sharedAnalytics);
    v157 = objc_msgSend(v156, sel_defaultMessageStream);

    UUID.init()();
    v158 = UUID._bridgeToObjectiveC()().super.isa;
    ((void (*)(char *, _QWORD *))v190)(v152, v135);
    objc_msgSend(v157, sel_emitMessage_isolatedStreamUUID_, v150, v158);

    swift_release();
    return;
  }
LABEL_123:
  swift_bridgeObjectRetain();
  v106 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  v107 = v106 <= 0;
  v32 = (uint64_t *)v173;
  v65 = (uint64_t *)v170;
  if (v107)
    goto LABEL_126;
  swift_retain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
    swift_release();
    goto LABEL_126;
  }
LABEL_71:
  v160 = (char **)p_name;
  if ((p_name & 0xC000000000000001) != 0)
    goto LABEL_147;
  if (!*(_QWORD *)(p_name + 16))
  {
    __break(1u);
LABEL_149:
    swift_once();
LABEL_140:
    v136 = type metadata accessor for Logger();
    __swift_project_value_buffer(v136, (uint64_t)static Logger.engagement);
    v137 = *MEMORY[0x24BEA7F10];
    v138 = type metadata accessor for EngagementSignalCollectionError();
    v139 = (uint64_t)v164;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 104))(v164, v137, v138);
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(v7 + 104))(v139, *v30, v6);
    Logger.debug(_:_:)(0xD000000000000024, 0x8000000218FBEFB0, v139);
    v140 = (*(uint64_t (**)(uint64_t, _QWORD *))(v7 + 8))(v139, v6);
    v135 = v169;
    v141 = v65;
    goto LABEL_142;
  }
  v168 = *(_QWORD *)(p_name + 32);
  swift_retain();
LABEL_74:
  swift_release();
  objc_msgSend(v32, sel_setHasUserInitiatedFollowup_, 1);
  v192 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  a2 = 0;
  v24 = (char *)(MEMORY[0x24BEE4AD8] + 8);
  v9 = (char *)MEMORY[0x24BEE1328];
  v66 = v172;
  while (2)
  {
    if (v30)
    {
      v16 = (_QWORD *)MEMORY[0x219A2756C](a2, a1);
      v6 = (_QWORD *)(a2 + 1);
      if (__OFADD__(a2, 1))
        goto LABEL_114;
    }
    else
    {
      if (a2 >= *(_QWORD *)(v66 + 16))
        goto LABEL_117;
      v16 = *(_QWORD **)(a1 + 8 * a2 + 32);
      swift_retain();
      v6 = (_QWORD *)(a2 + 1);
      if (__OFADD__(a2, 1))
        goto LABEL_114;
    }
    v32 = (uint64_t *)(*(uint64_t (**)(void))(*v16 + 216))();
    if (v32[2]
      && (v67 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
          (v68 & 1) != 0))
    {
      outlined init with copy of Any(v32[7] + 32 * v67, (uint64_t)&v195);
    }
    else
    {
      v195 = 0u;
      v196 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v196 + 1))
    {
      outlined destroy of Any?((uint64_t)&v195, &demangling cache variable for type metadata for Any?);
LABEL_76:
      swift_release();
      goto LABEL_77;
    }
    if ((swift_dynamicCast() & 1) == 0 || (v194 & 1) == 0)
      goto LABEL_76;
    v32 = (uint64_t *)&v192;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    v66 = v172;
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_77:
    ++a2;
    if (v6 != (_QWORD *)v7)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v69 = v191;
  v70 = v192;
  v71 = v160;
  v72 = (*(uint64_t (**)(char **, unint64_t))(*(_QWORD *)v191 + 168))(v160, v192);
  v65 = (uint64_t *)v170;
  objc_msgSend(v170, sel_setFollowUpType_, v72);
  v73 = objc_msgSend(v65, sel_setFollowUpSource_, (*(uint64_t (**)(char **))(*(_QWORD *)v69 + 176))(v71));
  v74 = (*(uint64_t (**)(id))(*(_QWORD *)v168 + 216))(v73);
  if (*(_QWORD *)(v74 + 16))
  {
    v75 = specialized __RawDictionaryStorage.find<A>(_:)(0x5465636976726573, 0xEB00000000657079);
    v76 = v182;
    v77 = v181;
    if ((v78 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v74 + 56) + 32 * v75, (uint64_t)&v195);
    }
    else
    {
      v195 = 0u;
      v196 = 0u;
    }
  }
  else
  {
    v195 = 0u;
    v196 = 0u;
    v76 = v182;
    v77 = v181;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v196 + 1))
  {
    outlined destroy of Any?((uint64_t)&v195, &demangling cache variable for type metadata for Any?);
    goto LABEL_101;
  }
  if (!swift_dynamicCast())
  {
LABEL_101:
    v79 = 0;
    v80 = 0xE000000000000000;
    goto LABEL_102;
  }
  v79 = v192;
  v80 = v193;
LABEL_102:
  v81 = MEMORY[0x219A27218](v79, v80);
  swift_bridgeObjectRelease();
  objc_msgSend(v65, sel_setFollowUpAccessoryType_, v81);

  LOBYTE(v81) = (*(uint64_t (**)(char **, unint64_t))(*(_QWORD *)v191 + 184))(v71, v70);
  swift_release();
  swift_release();
  objc_msgSend(v65, sel_setIsFollowUpInSameContainerAsSiriRequest_, v81 & 1);
  static Calendar.current.getter();
  v82 = v179;
  v83 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v179 + 104);
  v84 = v187;
  v85 = v83(v76, *MEMORY[0x24BDCF230], v187);
  v86 = *(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)v168 + 120);
  v86(&v195, v85);
  v87 = v189;
  Date.init(timeIntervalSinceReferenceDate:)();
  v88 = Calendar.component(_:from:)();
  v89 = *(void (**)(_QWORD, _QWORD))(v180 + 8);
  v89(v87, v190);
  v90 = *(void (**)(_QWORD, _QWORD))(v82 + 8);
  v90(v76, v84);
  v91 = *(void (**)(_QWORD, _QWORD))(v178 + 8);
  v91(v77, v186);
  if ((v88 & 0x8000000000000000) != 0)
    goto LABEL_153;
  if (HIDWORD(v88))
    goto LABEL_153;
  objc_msgSend(v65, sel_setFollowUpHourOfDay_, v88);
  static Calendar.current.getter();
  v92 = v77;
  v93 = v187;
  v94 = v83(v76, *MEMORY[0x24BDCF278], v187);
  v86(&v195, v94);
  v95 = v189;
  Date.init(timeIntervalSinceReferenceDate:)();
  v96 = Calendar.component(_:from:)();
  v89(v95, v190);
  v90(v76, v93);
  v91(v92, v186);
  if ((v96 & 0x8000000000000000) != 0)
    goto LABEL_153;
  v97 = v188;
  v98 = v169;
  if (HIDWORD(v96))
    goto LABEL_153;
  v99 = ((_QWORD *(*)(__int128 *__return_ptr, id))v86)(&v195, objc_msgSend(v65, sel_setFollowUpDayOfWeek_, v96));
  v100 = *(double *)&v195;
  v101 = v189;
  (*(void (**)(_QWORD *))(*(_QWORD *)v174 + 320))(v99);
  Date.timeIntervalSinceReferenceDate.getter();
  v103 = v102;
  v89(v101, v190);
  v104 = v100 - v103;
  if (v100 - v103 <= 0.0)
  {
    v105 = 0;
    v32 = (uint64_t *)v173;
LABEL_112:
    objc_msgSend(v65, sel_setFollowUpDurationSinceSiriRequestInSeconds_, v105);
    swift_release();
    goto LABEL_127;
  }
  v32 = (uint64_t *)v173;
  if ((~*(_QWORD *)&v104 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_151;
  }
  if (v104 <= -1.0)
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  if (v104 < 4294967300.0)
  {
    v105 = v104;
    goto LABEL_112;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Bool __swiftcall PSEHomeSELFEmitter.isUndoAction(actionFromSiri:actionFromUser:)(NSNumber_optional actionFromSiri, NSNumber_optional actionFromUser)
{
  void *v2;
  Class isa;
  NSNumber v4;
  Class v5;
  objc_class *v6;
  char v7;
  NSNumber v8;
  Class v9;
  id v10;
  char v11;
  NSNumber v12;
  Class v13;
  objc_class *v14;
  char v15;
  id v16;

  v2 = *(void **)&actionFromSiri.is_nil;
  isa = actionFromSiri.value.super.super.isa;
  type metadata accessor for NSNumber();
  v4.super.super.isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v5 = v4.super.super.isa;
  if (!isa)
  {

    v12.super.super.isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    LOBYTE(v2) = 0;
LABEL_11:

    return v2 & 1;
  }
  v6 = isa;
  v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) == 0)
    goto LABEL_8;
  v8.super.super.isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  v9 = v8.super.super.isa;
  if (!v2)
  {

    goto LABEL_8;
  }
  v10 = v2;
  v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
LABEL_8:
    v13 = NSNumber.init(integerLiteral:)(0).super.super.isa;
    v14 = v6;
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) == 0)
    {
      LOBYTE(v2) = 0;
      return v2 & 1;
    }
    v12.super.super.isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    if (v2)
    {
      v16 = v2;
      LOBYTE(v2) = static NSObject.== infix(_:_:)();

    }
    goto LABEL_11;
  }
  LOBYTE(v2) = 1;
  return v2 & 1;
}

void PSEHomeSELFEmitter.getHomeFollowUpType(userSignals:siriSignals:)(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  int64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(void);
  uint64_t v64;
  unint64_t v65;
  char v66;
  void *v67;
  uint64_t (*v68)(void);
  uint64_t v69;
  unint64_t v70;
  char v71;
  void *v72;
  id v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  void *v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  char v120;
  void *v121;
  id v122;
  uint64_t v123;
  int v124;
  char v125;
  void *v126;
  id v127;
  char v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  uint64_t v137;
  int64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;

  if (a2 >> 62)
    goto LABEL_267;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v4 = MEMORY[0x24BEE4AF8];
  v145 = a1;
  if (v3)
  {
    v149 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v5 = 0;
      while (1)
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x219A2756C](v5, a2);
        }
        else
        {
          v6 = *(_QWORD *)(a2 + 8 * v5 + 32);
          swift_retain();
        }
        v7 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 216))();
        if (*(_QWORD *)(v7 + 16)
          && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000019, 0x8000000218FBFDE0),
              (v9 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v146);
        }
        else
        {
          v146 = 0u;
          v147 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v147 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v146, &demangling cache variable for type metadata for Any?);
        }
        v148 = 0uLL;
LABEL_18:
        swift_release();
        v140 = v148;
        v4 = v149;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
          v4 = v149;
        }
        v11 = *(_QWORD *)(v4 + 16);
        v10 = *(_QWORD *)(v4 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          v4 = v149;
        }
        ++v5;
        *(_QWORD *)(v4 + 16) = v11 + 1;
        *(_OWORD *)(v4 + 16 * v11 + 32) = v140;
        if (v3 == v5)
        {
          a1 = v145;
          goto LABEL_24;
        }
      }
    }
    goto LABEL_270;
  }
LABEL_24:
  v139 = specialized Set.init<A>(_:)(v4);
  swift_bridgeObjectRelease();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v13 = MEMORY[0x24BEE4AF8];
  if (!v12)
  {
LABEL_46:
    v22 = specialized Set.init<A>(_:)(v13);
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BEE4AF8];
    v137 = v22;
    if (!v3)
      goto LABEL_67;
    v149 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0)
      goto LABEL_272;
    v24 = 0;
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v25 = MEMORY[0x219A2756C](v24, a2);
      }
      else
      {
        v25 = *(_QWORD *)(a2 + 8 * v24 + 32);
        swift_retain();
      }
      v26 = (*(uint64_t (**)(void))(*(_QWORD *)v25 + 216))();
      if (*(_QWORD *)(v26 + 16)
        && (v27 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000218FBFE00),
            (v28 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v26 + 56) + 32 * v27, (uint64_t)&v146);
      }
      else
      {
        v146 = 0u;
        v147 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v147 + 1))
      {
        if ((swift_dynamicCast() & 1) != 0)
          goto LABEL_61;
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v146, &demangling cache variable for type metadata for Any?);
      }
      v148 = 0uLL;
LABEL_61:
      swift_release();
      v142 = v148;
      v23 = v149;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v149;
      }
      v30 = *(_QWORD *)(v23 + 16);
      v29 = *(_QWORD *)(v23 + 24);
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v23 = v149;
      }
      ++v24;
      *(_QWORD *)(v23 + 16) = v30 + 1;
      *(_OWORD *)(v23 + 16 * v30 + 32) = v142;
      if (v3 == v24)
      {
        a1 = v145;
LABEL_67:
        v31 = specialized Set.init<A>(_:)(v23);
        swift_bridgeObjectRelease();
        v32 = MEMORY[0x24BEE4AF8];
        if (!v12)
        {
          v39 = MEMORY[0x24BEE4AF8];
          goto LABEL_89;
        }
        v149 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
        if (v12 < 0)
          goto LABEL_273;
        v33 = 0;
        v34 = a1 & 0xC000000000000001;
        while (2)
        {
          if (v34)
          {
            v35 = MEMORY[0x219A2756C](v33, a1);
          }
          else
          {
            v35 = *(_QWORD *)(a1 + 8 * v33 + 32);
            swift_retain();
          }
          v36 = (*(uint64_t (**)(void))(*(_QWORD *)v35 + 216))();
          if (*(_QWORD *)(v36 + 16)
            && (v37 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000218FBFE00),
                (v38 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v36 + 56) + 32 * v37, (uint64_t)&v146);
          }
          else
          {
            v146 = 0u;
            v147 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((_QWORD *)&v147 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
LABEL_82:
              swift_release();
              v143 = v148;
              v39 = v149;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v39 + 16) + 1, 1);
                v39 = v149;
              }
              v41 = *(_QWORD *)(v39 + 16);
              v40 = *(_QWORD *)(v39 + 24);
              if (v41 >= v40 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
                v39 = v149;
              }
              ++v33;
              *(_QWORD *)(v39 + 16) = v41 + 1;
              *(_OWORD *)(v39 + 16 * v41 + 32) = v143;
              a1 = v145;
              if (v12 != v33)
                continue;
              v32 = MEMORY[0x24BEE4AF8];
LABEL_89:
              v42 = specialized Set.init<A>(_:)(v39);
              swift_bridgeObjectRelease();
              v43 = specialized _NativeSet.intersection(_:)(v137, v139, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
              swift_bridgeObjectRelease();
              if (!*(_QWORD *)(v42 + 16) || *(_QWORD *)(v43 + 16))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v43 + 16))
                {
                  v44 = 0;
                  v135 = v43 + 56;
                  v45 = 1 << *(_BYTE *)(v43 + 32);
                  v46 = -1;
                  if (v45 < 64)
                    v46 = ~(-1 << v45);
                  v47 = v46 & *(_QWORD *)(v43 + 56);
                  v138 = (unint64_t)(v45 + 63) >> 6;
                  v132 = v43;
                  while (1)
                  {
                    if (v47)
                    {
                      v48 = __clz(__rbit64(v47));
                      v47 &= v47 - 1;
                      v49 = v48 | (v44 << 6);
                    }
                    else
                    {
                      v50 = __OFADD__(v44++, 1);
                      if (v50)
                        goto LABEL_263;
                      if (v44 >= v138)
                        goto LABEL_169;
                      v51 = *(_QWORD *)(v135 + 8 * v44);
                      if (!v51)
                      {
                        v52 = v44 + 1;
                        if (v44 + 1 >= v138)
                          goto LABEL_169;
                        v51 = *(_QWORD *)(v135 + 8 * v52);
                        if (!v51)
                        {
                          v52 = v44 + 2;
                          if (v44 + 2 >= v138)
                            goto LABEL_169;
                          v51 = *(_QWORD *)(v135 + 8 * v52);
                          if (!v51)
                          {
                            v52 = v44 + 3;
                            if (v44 + 3 >= v138)
                              goto LABEL_169;
                            v51 = *(_QWORD *)(v135 + 8 * v52);
                            if (!v51)
                            {
                              while (1)
                              {
                                v44 = v52 + 1;
                                if (__OFADD__(v52, 1))
                                  goto LABEL_266;
                                if (v44 >= v138)
                                  goto LABEL_169;
                                v51 = *(_QWORD *)(v135 + 8 * v44);
                                ++v52;
                                if (v51)
                                  goto LABEL_109;
                              }
                            }
                          }
                        }
                        v44 = v52;
                      }
LABEL_109:
                      v47 = (v51 - 1) & v51;
                      v49 = __clz(__rbit64(v51)) + (v44 << 6);
                    }
                    v53 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 16 * v49);
                    v55 = *v53;
                    v54 = v53[1];
                    swift_bridgeObjectRetain();
                    v56 = swift_bridgeObjectRetain();
                    v57 = specialized _ArrayProtocol.filter(_:)(v56, v55, v54, 0xD000000000000019, 0x8000000218FBFDE0);
                    swift_bridgeObjectRelease();
                    if (v57 >> 62)
                    {
                      if (!_CocoaArrayWrapper.endIndex.getter())
                      {
LABEL_95:
                        swift_bridgeObjectRelease();
LABEL_96:
                        swift_bridgeObjectRelease();
                        continue;
                      }
                    }
                    else if (!*(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10))
                    {
                      goto LABEL_95;
                    }
                    if ((v57 & 0xC000000000000001) != 0)
                    {
                      v58 = MEMORY[0x219A2756C](0, v57);
                    }
                    else
                    {
                      if (!*(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10))
                      {
                        __break(1u);
LABEL_262:
                        __break(1u);
LABEL_263:
                        __break(1u);
LABEL_264:
                        __break(1u);
LABEL_265:
                        __break(1u);
LABEL_266:
                        __break(1u);
LABEL_267:
                        swift_bridgeObjectRetain();
                        v3 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                        goto LABEL_3;
                      }
                      v58 = *(_QWORD *)(v57 + 32);
                      swift_retain();
                    }
                    swift_bridgeObjectRelease();
                    v59 = swift_bridgeObjectRetain();
                    v60 = specialized _ArrayProtocol.filter(_:)(v59, v55, v54, 0xD000000000000019, 0x8000000218FBFDE0);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v60 >> 62)
                    {
                      if (!_CocoaArrayWrapper.endIndex.getter())
                      {
LABEL_174:
                        swift_release();
                        goto LABEL_96;
                      }
                    }
                    else if (!*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
                    {
                      goto LABEL_174;
                    }
                    if ((v60 & 0xC000000000000001) != 0)
                    {
                      v61 = MEMORY[0x219A2756C](0, v60);
                    }
                    else
                    {
                      if (!*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
                        goto LABEL_262;
                      v61 = *(_QWORD *)(v60 + 32);
                      swift_retain();
                    }
                    v62 = swift_bridgeObjectRelease();
                    v63 = *(uint64_t (**)(void))(*(_QWORD *)v58 + 216);
                    v64 = ((uint64_t (*)(uint64_t))v63)(v62);
                    if (*(_QWORD *)(v64 + 16)
                      && (v65 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FBFE20), (v66 & 1) != 0))
                    {
                      outlined init with copy of Any(*(_QWORD *)(v64 + 56) + 32 * v65, (uint64_t)&v146);
                    }
                    else
                    {
                      v146 = 0u;
                      v147 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((_QWORD *)&v147 + 1))
                    {
                      type metadata accessor for NSNumber();
                      v67 = swift_dynamicCast() ? (void *)v148 : 0;
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v146, &demangling cache variable for type metadata for Any?);
                      v67 = 0;
                    }
                    v68 = *(uint64_t (**)(void))(*(_QWORD *)v61 + 216);
                    v69 = v68();
                    if (*(_QWORD *)(v69 + 16)
                      && (v70 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FBFE20), (v71 & 1) != 0))
                    {
                      outlined init with copy of Any(*(_QWORD *)(v69 + 56) + 32 * v70, (uint64_t)&v146);
                    }
                    else
                    {
                      v146 = 0u;
                      v147 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (!*((_QWORD *)&v147 + 1))
                      break;
                    type metadata accessor for NSNumber();
                    if (swift_dynamicCast())
                      v72 = (void *)v148;
                    else
                      v72 = 0;
                    if (!v67)
                    {
                      v67 = v72;
                      if (!v72)
                      {
LABEL_257:
                        swift_release();
                        swift_release();
                        goto LABEL_169;
                      }
                      goto LABEL_148;
                    }
                    if (!v72)
                      goto LABEL_148;
                    v73 = v67;
                    v74 = static NSObject.== infix(_:_:)();

                    if ((v74 & 1) != 0)
                      goto LABEL_257;
LABEL_149:
                    v75 = v63();
                    if (*(_QWORD *)(v75 + 16)
                      && (v76 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FBFE20), (v77 & 1) != 0))
                    {
                      outlined init with copy of Any(*(_QWORD *)(v75 + 56) + 32 * v76, (uint64_t)&v146);
                    }
                    else
                    {
                      v146 = 0u;
                      v147 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((_QWORD *)&v147 + 1))
                    {
                      type metadata accessor for NSNumber();
                      if (swift_dynamicCast())
                        v78 = (void *)v148;
                      else
                        v78 = 0;
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v146, &demangling cache variable for type metadata for Any?);
                      v78 = 0;
                    }
                    v79 = v68();
                    if (*(_QWORD *)(v79 + 16))
                    {
                      v80 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FBFE20);
                      v43 = v132;
                      if ((v81 & 1) != 0)
                      {
                        outlined init with copy of Any(*(_QWORD *)(v79 + 56) + 32 * v80, (uint64_t)&v146);
                      }
                      else
                      {
                        v146 = 0u;
                        v147 = 0u;
                      }
                    }
                    else
                    {
                      v146 = 0u;
                      v147 = 0u;
                      v43 = v132;
                    }
                    swift_bridgeObjectRelease();
                    if (*((_QWORD *)&v147 + 1))
                    {
                      type metadata accessor for NSNumber();
                      if (swift_dynamicCast())
                        v82 = (void *)v148;
                      else
                        v82 = 0;
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v146, &demangling cache variable for type metadata for Any?);
                      v82 = 0;
                    }
                    v83 = (*(uint64_t (**)(void *, void *))(*(_QWORD *)v133 + 160))(v78, v82);
                    swift_release();
                    swift_release();

                    a1 = v145;
                    if ((v83 & 1) == 0)
                      goto LABEL_169;
                  }
                  outlined destroy of Any?((uint64_t)&v146, &demangling cache variable for type metadata for Any?);
                  if (!v67)
                    goto LABEL_257;
LABEL_148:

                  goto LABEL_149;
                }
                goto LABEL_169;
              }
              swift_release();
              swift_bridgeObjectRetain();
              v84 = specialized _NativeSet.intersection(_:)(v42, v31, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
              swift_bridgeObjectRelease();
              v85 = *(_QWORD *)(v84 + 16);
              if (!v85)
              {
                swift_bridgeObjectRelease();
                goto LABEL_169;
              }
              v86 = *(_QWORD *)(v31 + 16);
              swift_bridgeObjectRelease();
              if (v85 < v86)
              {
LABEL_169:
                swift_release();
                return;
              }
              v87 = 0;
              v129 = v84 + 56;
              v88 = 1 << *(_BYTE *)(v84 + 32);
              v89 = -1;
              if (v88 < 64)
                v89 = ~(-1 << v88);
              v90 = v89 & *(_QWORD *)(v84 + 56);
              v130 = (unint64_t)(v88 + 63) >> 6;
              v131 = v84;
              while (1)
              {
                if (v90)
                {
                  v134 = (v90 - 1) & v90;
                  v136 = v87;
                  v91 = __clz(__rbit64(v90)) | (v87 << 6);
                }
                else
                {
                  v50 = __OFADD__(v87, 1);
                  v92 = v87 + 1;
                  if (v50)
                  {
                    __break(1u);
LABEL_270:
                    __break(1u);
                    goto LABEL_271;
                  }
                  if (v92 >= v130)
                    goto LABEL_169;
                  v93 = *(_QWORD *)(v129 + 8 * v92);
                  if (!v93)
                  {
                    v94 = v92 + 1;
                    if (v92 + 1 >= v130)
                      goto LABEL_169;
                    v93 = *(_QWORD *)(v129 + 8 * v94);
                    if (!v93)
                    {
                      v94 = v92 + 2;
                      if (v92 + 2 >= v130)
                        goto LABEL_169;
                      v93 = *(_QWORD *)(v129 + 8 * v94);
                      if (!v93)
                      {
                        v94 = v92 + 3;
                        if (v92 + 3 >= v130)
                          goto LABEL_169;
                        v93 = *(_QWORD *)(v129 + 8 * v94);
                        if (!v93)
                        {
                          while (1)
                          {
                            v92 = v94 + 1;
                            if (__OFADD__(v94, 1))
                              goto LABEL_276;
                            if (v92 >= v130)
                              goto LABEL_169;
                            v93 = *(_QWORD *)(v129 + 8 * v92);
                            ++v94;
                            if (v93)
                              goto LABEL_196;
                          }
                        }
                      }
                    }
                    v92 = v94;
                  }
LABEL_196:
                  v134 = (v93 - 1) & v93;
                  v136 = v92;
                  v91 = __clz(__rbit64(v93)) + (v92 << 6);
                }
                v95 = (uint64_t *)(*(_QWORD *)(v84 + 48) + 16 * v91);
                v97 = *v95;
                v96 = v95[1];
                swift_bridgeObjectRetain();
                v98 = swift_bridgeObjectRetain();
                v99 = specialized _ArrayProtocol.filter(_:)(v98, v97, v96, 0xD000000000000012, 0x8000000218FBFE00);
                swift_bridgeObjectRelease();
                if (v99 >> 62)
                  break;
                v100 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFF8) + 0x10);
                if (v100)
                  goto LABEL_199;
LABEL_220:
                swift_bridgeObjectRelease();
                v106 = v32;
LABEL_221:
                v107 = specialized Set.init<A>(_:)(v106);
                swift_bridgeObjectRelease();
                v108 = swift_bridgeObjectRetain();
                v109 = specialized _ArrayProtocol.filter(_:)(v108, v97, v96, 0xD000000000000012, 0x8000000218FBFE00);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v109 >> 62)
                {
                  v110 = _CocoaArrayWrapper.endIndex.getter();
                  if (!v110)
                    goto LABEL_240;
LABEL_223:
                  *(_QWORD *)&v148 = v32;
                  specialized ContiguousArray.reserveCapacity(_:)();
                  if (v110 < 0)
                    goto LABEL_265;
                  v111 = 0;
                  while (2)
                  {
                    if ((v109 & 0xC000000000000001) != 0)
                    {
                      v112 = MEMORY[0x219A2756C](v111, v109);
                    }
                    else
                    {
                      v112 = *(_QWORD *)(v109 + 8 * v111 + 32);
                      swift_retain();
                    }
                    v113 = (*(uint64_t (**)(void))(*(_QWORD *)v112 + 216))();
                    if (*(_QWORD *)(v113 + 16)
                      && (v114 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FBFE20), (v115 & 1) != 0))
                    {
                      outlined init with copy of Any(*(_QWORD *)(v113 + 56) + 32 * v114, (uint64_t)&v146);
                    }
                    else
                    {
                      v146 = 0u;
                      v147 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((_QWORD *)&v147 + 1))
                    {
                      type metadata accessor for NSNumber();
                      if ((swift_dynamicCast() & 1) != 0)
                      {
LABEL_227:
                        swift_release();
                        ++v111;
                        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                        specialized ContiguousArray._endMutation()();
                        if (v110 == v111)
                        {
                          v116 = v148;
                          swift_bridgeObjectRelease();
                          v32 = MEMORY[0x24BEE4AF8];
                          goto LABEL_241;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v146, &demangling cache variable for type metadata for Any?);
                    }
                    break;
                  }
                  v149 = 0;
                  goto LABEL_227;
                }
                v110 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
                if (v110)
                  goto LABEL_223;
LABEL_240:
                swift_bridgeObjectRelease();
                v116 = v32;
LABEL_241:
                v117 = specialized Set.init<A>(_:)(v116);
                swift_bridgeObjectRelease();
                v84 = v131;
                if (*(_QWORD *)(v107 + 16) != 1)
                {
                  swift_bridgeObjectRelease();
                  a1 = v145;
LABEL_183:
                  swift_bridgeObjectRelease();
                  v90 = v134;
                  v87 = v136;
                  continue;
                }
                a1 = v145;
                if (*(_QWORD *)(v117 + 16) != 1)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_183;
                }
                v118 = specialized Set.startIndex.getter(v107);
                if ((v120 & 1) != 0)
                  goto LABEL_277;
                if (*(_DWORD *)(v107 + 36) != v119)
                  goto LABEL_274;
                if (v118 == 1 << *(_BYTE *)(v107 + 32))
                {
                  v121 = 0;
                }
                else
                {
                  v121 = (void *)specialized Set.subscript.getter(v118, v119, 0, v107);
                  v122 = v121;
                }
                swift_bridgeObjectRelease();
                v123 = specialized Set.startIndex.getter(v117);
                if ((v125 & 1) != 0)
                  goto LABEL_278;
                if (*(_DWORD *)(v117 + 36) != v124)
                  goto LABEL_275;
                if (v123 == 1 << *(_BYTE *)(v117 + 32))
                {
                  v126 = 0;
                }
                else
                {
                  v126 = (void *)specialized Set.subscript.getter(v123, v124, 0, v117);
                  v127 = v126;
                }
                swift_bridgeObjectRelease();
                v128 = (*(uint64_t (**)(void *, void *))(*(_QWORD *)v133 + 160))(v121, v126);

                a1 = v145;
                v90 = v134;
                v87 = v136;
                if ((v128 & 1) != 0)
                  goto LABEL_169;
              }
              v100 = _CocoaArrayWrapper.endIndex.getter();
              if (!v100)
                goto LABEL_220;
LABEL_199:
              *(_QWORD *)&v148 = v32;
              specialized ContiguousArray.reserveCapacity(_:)();
              if (v100 < 0)
                goto LABEL_264;
              v101 = 0;
              while (2)
              {
                if ((v99 & 0xC000000000000001) != 0)
                {
                  v102 = MEMORY[0x219A2756C](v101, v99);
                }
                else
                {
                  v102 = *(_QWORD *)(v99 + 8 * v101 + 32);
                  swift_retain();
                }
                v103 = (*(uint64_t (**)(void))(*(_QWORD *)v102 + 216))();
                if (*(_QWORD *)(v103 + 16)
                  && (v104 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FBFE20),
                      (v105 & 1) != 0))
                {
                  outlined init with copy of Any(*(_QWORD *)(v103 + 56) + 32 * v104, (uint64_t)&v146);
                }
                else
                {
                  v146 = 0u;
                  v147 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((_QWORD *)&v147 + 1))
                {
                  type metadata accessor for NSNumber();
                  if ((swift_dynamicCast() & 1) != 0)
                  {
LABEL_203:
                    swift_release();
                    ++v101;
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
                    if (v100 == v101)
                    {
                      v106 = v148;
                      swift_bridgeObjectRelease();
                      a1 = v145;
                      v32 = MEMORY[0x24BEE4AF8];
                      goto LABEL_221;
                    }
                    continue;
                  }
                }
                else
                {
                  outlined destroy of Any?((uint64_t)&v146, &demangling cache variable for type metadata for Any?);
                }
                break;
              }
              v149 = 0;
              goto LABEL_203;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v146, &demangling cache variable for type metadata for Any?);
          }
          break;
        }
        v148 = 0uLL;
        goto LABEL_82;
      }
    }
  }
  v149 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v14 = 0;
    v15 = a1 & 0xC000000000000001;
    while (1)
    {
      if (v15)
      {
        v16 = MEMORY[0x219A2756C](v14, a1);
      }
      else
      {
        v16 = *(_QWORD *)(a1 + 8 * v14 + 32);
        swift_retain();
      }
      v17 = (*(uint64_t (**)(void))(*(_QWORD *)v16 + 216))();
      if (*(_QWORD *)(v17 + 16)
        && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000019, 0x8000000218FBFDE0),
            (v19 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&v146);
      }
      else
      {
        v146 = 0u;
        v147 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v147 + 1))
      {
        if ((swift_dynamicCast() & 1) != 0)
          goto LABEL_41;
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v146, &demangling cache variable for type metadata for Any?);
      }
      v148 = 0uLL;
LABEL_41:
      swift_release();
      v141 = v148;
      v13 = v149;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v13 = v149;
      }
      v21 = *(_QWORD *)(v13 + 16);
      v20 = *(_QWORD *)(v13 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v13 = v149;
      }
      ++v14;
      *(_QWORD *)(v13 + 16) = v21 + 1;
      *(_OWORD *)(v13 + 16 * v21 + 32) = v141;
      a1 = v145;
      if (v12 == v14)
        goto LABEL_46;
    }
  }
LABEL_271:
  __break(1u);
LABEL_272:
  __break(1u);
LABEL_273:
  __break(1u);
LABEL_274:
  __break(1u);
LABEL_275:
  __break(1u);
LABEL_276:
  __break(1u);
LABEL_277:
  __break(1u);
LABEL_278:
  __break(1u);
}

uint64_t PSEHomeSELFEmitter.getHomeFollowUpSource(userSignals:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  BOOL v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  if (a1 >> 62)
  {
LABEL_50:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v2 = result;
    if (result)
      goto LABEL_3;
LABEL_51:
    swift_bridgeObjectRelease();
    return 0;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_51;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  v4 = 0;
  v5 = 0;
  for (i = 0; i != v2; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v8 = MEMORY[0x219A2756C](i, a1);
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8 * i + 32);
      swift_retain();
    }
    v9 = *(uint64_t (**)(void))(*(_QWORD *)v8 + 216);
    v10 = v9();
    if (*(_QWORD *)(v10 + 16)
      && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x614E746E65696C63, 0xEA0000000000656DLL),
          (v12 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v21);
    }
    else
    {
      v21 = 0u;
      v22 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v22 + 1))
    {
      v13 = swift_dynamicCast();
      if ((v13 & 1) != 0)
      {
        if (v19 == 0x6C7070612E6D6F63 && v20 == 0xEE00656D6F482E65)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_7;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v13 = swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      v13 = outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
    }
    v14 = ((uint64_t (*)(uint64_t))v9)(v13);
    if (*(_QWORD *)(v14 + 16)
      && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(0x614E746E65696C63, 0xEA0000000000656DLL),
          (v16 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v21);
    }
    else
    {
      v21 = 0u;
      v22 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v22 + 1))
    {
      outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
LABEL_35:
      swift_release();
      v7 = __OFADD__(v4++, 1);
      if (v7)
      {
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      continue;
    }
    if (!swift_dynamicCast())
      goto LABEL_35;
    if (v19 == 0xD000000000000012 && v20 == 0x8000000218FBFE40)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      swift_release();
LABEL_7:
      v7 = __OFADD__(v5++, 1);
      if (v7)
        goto LABEL_49;
      continue;
    }
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_release();
    if ((v17 & 1) != 0)
      goto LABEL_7;
    v7 = __OFADD__(v4++, 1);
    if (v7)
      goto LABEL_48;
  }
  swift_bridgeObjectRelease();
  if (v5 < 1)
  {
    if (!v5 && v4 > 0)
      return 3;
  }
  else
  {
    if (v4 > 0)
      return 4;
    if (!v4)
      return 2;
  }
  return 0;
}

Swift::Bool __swiftcall PSEHomeSELFEmitter.isFollowUpInSameContainer(userSignals:siriSignals:)(Swift::OpaquePointer userSignals, Swift::OpaquePointer siriSignals)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t rawValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Bool result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;

  rawValue = (uint64_t)userSignals._rawValue;
  if ((unint64_t)userSignals._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v7 = *(_QWORD *)(((unint64_t)userSignals._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v40 = 0u;
    v41 = 0u;
    goto LABEL_18;
  }
  if ((rawValue & 0xC000000000000001) != 0)
  {
    v8 = MEMORY[0x219A2756C](0, rawValue);
  }
  else
  {
    if (!*(_QWORD *)((rawValue & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_78;
    }
    v8 = *(_QWORD *)(rawValue + 32);
    swift_retain();
  }
  v9 = swift_bridgeObjectRelease();
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 216))(v9);
  swift_release();
  if (!*(_QWORD *)(v10 + 16)
    || (v11 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FBFE60), (v12 & 1) == 0))
  {
    v40 = 0u;
    v41 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  outlined init with copy of Any(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v40);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
  {
LABEL_18:
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    v4 = 0;
    v3 = 0;
    goto LABEL_19;
  }
  v13 = swift_dynamicCast();
  if (v13)
    v4 = v38;
  else
    v4 = 0;
  if (v13)
    v3 = v39;
  else
    v3 = 0;
LABEL_19:
  if (!((unint64_t)siriSignals._rawValue >> 62))
  {
    v2 = *(_QWORD *)(((unint64_t)siriSignals._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_21;
LABEL_69:
    swift_bridgeObjectRelease();
    v40 = 0u;
    v41 = 0u;
    goto LABEL_70;
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2)
    goto LABEL_69;
LABEL_21:
  if (((unint64_t)siriSignals._rawValue & 0xC000000000000001) != 0)
  {
LABEL_78:
    v14 = MEMORY[0x219A2756C](0, siriSignals._rawValue);
    goto LABEL_24;
  }
  if (!*(_QWORD *)(((unint64_t)siriSignals._rawValue & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_80;
  }
  v14 = *((_QWORD *)siriSignals._rawValue + 4);
  swift_retain();
LABEL_24:
  v15 = swift_bridgeObjectRelease();
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 216))(v15);
  swift_release();
  if (*(_QWORD *)(v16 + 16)
    && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FBFE60), (v18 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v17, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
  {
LABEL_70:
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    if (!v3)
      return 1;
    goto LABEL_71;
  }
  v19 = swift_dynamicCast();
  if (v19)
    v20 = v38;
  else
    v20 = 0;
  if (v19)
    v21 = v39;
  else
    v21 = 0;
  if (v3)
  {
    if (v21)
    {
      if (v4 == v20 && v3 == v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
      {
        if (v7)
          goto LABEL_44;
LABEL_72:
        v40 = 0u;
        v41 = 0u;
        goto LABEL_73;
      }
      return 1;
    }
  }
  else if (!v21)
  {
    return 1;
  }
LABEL_71:
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_72;
LABEL_44:
  if ((rawValue & 0xC000000000000001) != 0)
  {
LABEL_80:
    swift_bridgeObjectRetain();
    v24 = MEMORY[0x219A2756C](0, rawValue);
    v25 = swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  if (!*(_QWORD *)((rawValue & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_82:
    swift_bridgeObjectRetain();
    v29 = MEMORY[0x219A2756C](0, siriSignals._rawValue);
    v30 = swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  v24 = *(_QWORD *)(rawValue + 32);
  v25 = swift_retain();
LABEL_47:
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 216))(v25);
  swift_release();
  if (*(_QWORD *)(v26 + 16)
    && (v27 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000015, 0x8000000218FBFE80), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v26 + 56) + 32 * v27, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
    goto LABEL_73;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  result = swift_dynamicCast();
  if (!result)
    return 0;
  rawValue = v38;
  if (!v2)
  {
    v40 = 0u;
    v41 = 0u;
LABEL_65:
    swift_bridgeObjectRelease();
LABEL_73:
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  if (((unint64_t)siriSignals._rawValue & 0xC000000000000001) != 0)
    goto LABEL_82;
  if (*(_QWORD *)(((unint64_t)siriSignals._rawValue & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v29 = *((_QWORD *)siriSignals._rawValue + 4);
    v30 = swift_retain();
LABEL_57:
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 216))(v30);
    swift_release();
    if (*(_QWORD *)(v31 + 16)
      && (v32 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000015, 0x8000000218FBFE80),
          (v33 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v32, (uint64_t)&v40);
    }
    else
    {
      v40 = 0u;
      v41 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v41 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v34 = specialized Set.init<A>(_:)(rawValue);
        swift_bridgeObjectRelease();
        v35 = specialized Set.init<A>(_:)(v38);
        swift_bridgeObjectRelease();
        v36 = specialized _NativeSet.intersection(_:)(v35, v34, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
        swift_bridgeObjectRelease();
        v37 = *(_QWORD *)(v36 + 16);
        swift_release();
        return v37 != 0;
      }
      swift_bridgeObjectRelease();
      return 0;
    }
    goto LABEL_65;
  }
  __break(1u);
  return result;
}

uint64_t PSEHomeSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSEHomeSELFEmitter.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEHomeSELFEmitter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEHomeSELFEmitter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a2 + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = a3((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a2, v5);
    swift_release();
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    v9 = a3((char *)v10, v7, a2, v5);
    swift_release();
    MEMORY[0x219A27C8C](v10, -1, -1);
  }
  return v9;
}

Swift::Int specialized closure #1 in _NativeSet.intersection(_:)(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t *v53;
  uint64_t v54;
  int64_t v55;
  int64_t v56;

  v4 = a4;
  v5 = a3;
  v53 = (unint64_t *)result;
  if (*(_QWORD *)(a4 + 16) >= *(_QWORD *)(a3 + 16))
    goto LABEL_41;
  v6 = 0;
  v51 = a4 + 56;
  v7 = 1 << *(_BYTE *)(a4 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  v54 = 0;
  v55 = (unint64_t)(v7 + 63) >> 6;
  v10 = a3 + 56;
  while (2)
  {
    while (2)
    {
      if (v9)
      {
        v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v12 = v11 | (v6 << 6);
      }
      else
      {
        v13 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        if (v13 >= v55)
          goto LABEL_80;
        v14 = *(_QWORD *)(v51 + 8 * v13);
        ++v6;
        if (!v14)
        {
          v6 = v13 + 1;
          if (v13 + 1 >= v55)
            goto LABEL_80;
          v14 = *(_QWORD *)(v51 + 8 * v6);
          if (!v14)
          {
            v6 = v13 + 2;
            if (v13 + 2 >= v55)
              goto LABEL_80;
            v14 = *(_QWORD *)(v51 + 8 * v6);
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v55)
              {
LABEL_80:
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v53, a2, v54, v5);
              }
              v14 = *(_QWORD *)(v51 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v6 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v6 >= v55)
                    goto LABEL_80;
                  v14 = *(_QWORD *)(v51 + 8 * v6);
                  ++v15;
                  if (v14)
                    goto LABEL_22;
                }
LABEL_83:
                __break(1u);
                goto LABEL_84;
              }
              v6 = v15;
            }
          }
        }
LABEL_22:
        v9 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v6 << 6);
      }
      v16 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)();
      if (v17)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v5 + 32);
      v20 = result & ~v19;
      if (((*(_QWORD *)(v10 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      {
LABEL_6:
        result = swift_bridgeObjectRelease();
        v4 = a4;
        continue;
      }
      break;
    }
    v21 = ~v19;
    v22 = *(_QWORD *)(v5 + 48);
    while (1)
    {
      v23 = (_QWORD *)(v22 + 16 * v20);
      v24 = v23[1];
      if (!v24)
      {
        if (!v17)
          goto LABEL_38;
        goto LABEL_29;
      }
      if (v17)
      {
        if (*v23 == v18 && v24 == v17)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          break;
      }
LABEL_29:
      v20 = (v20 + 1) & v21;
      if (((*(_QWORD *)(v10 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        goto LABEL_6;
    }
    result = swift_bridgeObjectRelease();
LABEL_38:
    *(unint64_t *)((char *)v53 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v26 = __OFADD__(v54++, 1);
    v4 = a4;
    if (!v26)
      continue;
    break;
  }
  __break(1u);
LABEL_41:
  v54 = 0;
  v27 = 0;
  v50 = v5 + 56;
  v28 = 1 << *(_BYTE *)(v5 + 32);
  if (v28 < 64)
    v29 = ~(-1 << v28);
  else
    v29 = -1;
  v30 = v29 & *(_QWORD *)(v5 + 56);
  v52 = (unint64_t)(v28 + 63) >> 6;
  v31 = v4 + 56;
LABEL_46:
  while (2)
  {
    if (v30)
    {
      v32 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      v56 = v27;
      v33 = v32 | (v27 << 6);
LABEL_62:
      v38 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v33);
      v40 = *v38;
      v39 = v38[1];
      Hasher.init(_seed:)();
      if (v39)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v41 = v5;
      result = Hasher._finalize()();
      v42 = -1 << *(_BYTE *)(v4 + 32);
      v43 = result & ~v42;
      if (((*(_QWORD *)(v31 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
      {
LABEL_45:
        result = swift_bridgeObjectRelease();
        v5 = v41;
        v4 = a4;
        v27 = v56;
        continue;
      }
      v44 = ~v42;
      v45 = *(_QWORD *)(v4 + 48);
      while (1)
      {
        v46 = (_QWORD *)(v45 + 16 * v43);
        v47 = v46[1];
        if (v47)
        {
          if (v39)
          {
            v48 = *v46 == v40 && v47 == v39;
            if (v48 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              result = swift_bridgeObjectRelease();
LABEL_77:
              *(unint64_t *)((char *)v53 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
              v27 = v56;
              v26 = __OFADD__(v54++, 1);
              v5 = v41;
              v4 = a4;
              if (v26)
              {
                __break(1u);
                goto LABEL_80;
              }
              goto LABEL_46;
            }
          }
        }
        else if (!v39)
        {
          goto LABEL_77;
        }
        v43 = (v43 + 1) & v44;
        if (((*(_QWORD *)(v31 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
          goto LABEL_45;
      }
    }
    break;
  }
  v34 = v27 + 1;
  if (__OFADD__(v27, 1))
    goto LABEL_82;
  if (v34 >= v52)
    goto LABEL_80;
  v35 = *(_QWORD *)(v50 + 8 * v34);
  v36 = v27 + 1;
  if (v35)
    goto LABEL_61;
  v36 = v27 + 2;
  if (v27 + 2 >= v52)
    goto LABEL_80;
  v35 = *(_QWORD *)(v50 + 8 * v36);
  if (v35)
    goto LABEL_61;
  v36 = v27 + 3;
  if (v27 + 3 >= v52)
    goto LABEL_80;
  v35 = *(_QWORD *)(v50 + 8 * v36);
  if (v35)
  {
LABEL_61:
    v30 = (v35 - 1) & v35;
    v56 = v36;
    v33 = __clz(__rbit64(v35)) + (v36 << 6);
    goto LABEL_62;
  }
  v37 = v27 + 4;
  if (v27 + 4 >= v52)
    goto LABEL_80;
  v35 = *(_QWORD *)(v50 + 8 * v37);
  if (v35)
  {
    v36 = v27 + 4;
    goto LABEL_61;
  }
  while (1)
  {
    v36 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v36 >= v52)
      goto LABEL_80;
    v35 = *(_QWORD *)(v50 + 8 * v36);
    ++v37;
    if (v35)
      goto LABEL_61;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  BOOL v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;

  v4 = a4;
  v5 = a3;
  v57 = (unint64_t *)result;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v58 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v59 = (unint64_t)(v7 + 63) >> 6;
    v61 = 0;
    v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v62 = v6;
          v12 = v11 | (v6 << 6);
        }
        else
        {
          v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59)
            goto LABEL_79;
          v14 = *(_QWORD *)(v58 + 8 * v13);
          v15 = v6 + 1;
          if (!v14)
          {
            v15 = v6 + 2;
            if (v6 + 2 >= v59)
              goto LABEL_79;
            v14 = *(_QWORD *)(v58 + 8 * v15);
            if (!v14)
            {
              v15 = v6 + 3;
              if (v6 + 3 >= v59)
                goto LABEL_79;
              v14 = *(_QWORD *)(v58 + 8 * v15);
              if (!v14)
              {
                v16 = v6 + 4;
                if (v6 + 4 >= v59)
                  goto LABEL_79;
                v14 = *(_QWORD *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    v15 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      goto LABEL_83;
                    if (v15 >= v59)
                      goto LABEL_79;
                    v14 = *(_QWORD *)(v58 + 8 * v15);
                    ++v16;
                    if (v14)
                      goto LABEL_22;
                  }
                }
                v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          v9 = (v14 - 1) & v14;
          v62 = v15;
          v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
        v19 = *v17;
        v18 = v17[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v20 = Hasher._finalize()();
        v21 = -1 << *(_BYTE *)(v5 + 32);
        v22 = v20 & ~v21;
        v23 = v22 >> 6;
        v24 = 1 << v22;
        if (((1 << v22) & *(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
          break;
LABEL_6:
        result = swift_bridgeObjectRelease();
        v6 = v62;
        v5 = a3;
        v4 = a4;
      }
      v25 = *(_QWORD *)(a3 + 48);
      v26 = (_QWORD *)(v25 + 16 * v22);
      v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v28 = ~v21;
        for (i = v22 + 1; ; i = v30 + 1)
        {
          v30 = i & v28;
          if (((*(_QWORD *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0)
            break;
          v31 = (_QWORD *)(v25 + 16 * v30);
          v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v23 = v30 >> 6;
            v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      result = swift_bridgeObjectRelease();
LABEL_38:
      v6 = v62;
      v5 = a3;
      v57[v23] |= v24;
      v33 = __OFADD__(v61++, 1);
      v4 = a4;
      if (v33)
        goto LABEL_82;
    }
  }
  v34 = 0;
  v60 = a3 + 56;
  v61 = 0;
  v35 = 1 << *(_BYTE *)(a3 + 32);
  if (v35 < 64)
    v36 = ~(-1 << v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(a3 + 56);
  v63 = (unint64_t)(v35 + 63) >> 6;
  v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      v34 = v41 + 1;
      if (v41 + 1 >= v63)
        goto LABEL_79;
      v42 = *(_QWORD *)(v60 + 8 * v34);
      if (!v42)
      {
        v34 = v41 + 2;
        if (v41 + 2 >= v63)
          goto LABEL_79;
        v42 = *(_QWORD *)(v60 + 8 * v34);
        if (!v42)
          break;
      }
    }
LABEL_62:
    v37 = (v42 - 1) & v42;
    v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v40);
    v46 = *v44;
    v45 = v44[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v47 = Hasher._finalize()();
    v48 = -1 << *(_BYTE *)(v4 + 32);
    v49 = v47 & ~v48;
    if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
      goto LABEL_46;
    v50 = *(_QWORD *)(a4 + 48);
    v51 = (_QWORD *)(v50 + 16 * v49);
    v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_76:
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      v33 = __OFADD__(v61++, 1);
      v5 = a3;
      v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v57, a2, v61, v5);
      }
    }
    else
    {
      v53 = ~v48;
      while (1)
      {
        v49 = (v49 + 1) & v53;
        if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
          break;
        v54 = (_QWORD *)(v50 + 16 * v49);
        v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_76;
      }
LABEL_46:
      result = swift_bridgeObjectRelease();
      v5 = a3;
      v4 = a4;
    }
  }
  v43 = v41 + 3;
  if (v43 >= v63)
    goto LABEL_79;
  v42 = *(_QWORD *)(v60 + 8 * v43);
  if (v42)
  {
    v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    v34 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v34 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v34);
    ++v43;
    if (v42)
      goto LABEL_62;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_39:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_42;
    if (v14 >= v30)
      goto LABEL_39;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_39;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_39;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    Hasher.init(_seed:)();
    if (v18)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v19;
    v28[1] = v18;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (!v5)
      goto LABEL_39;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_39;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_39;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?();
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNumber?);
  lazy protocol witness table accessor for type NSNumber? and conformance <A> A?();
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4++;
      v6 = v5;
      specialized Set._Variant.insert(_:)(&v7, v5);

      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_30:
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
    {
LABEL_3:
      for (i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x219A2756C](i, a1);
          v10 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_27:
            __break(1u);
            return v23;
          }
        }
        else
        {
          if (i >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_30;
          }
          v9 = *(_QWORD *)(a1 + 8 * i + 32);
          swift_retain();
          v10 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_27;
        }
        v11 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 216))();
        if (*(_QWORD *)(v11 + 16) && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5), (v13 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v21);
        }
        else
        {
          v21 = 0u;
          v22 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v22 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
          {
            if (!a3)
            {
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_6;
            }
            if (v19 == a2 && v20 == a3)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v14 & 1) == 0)
                goto LABEL_23;
            }
            goto LABEL_5;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
        }
        if (a3)
        {
LABEL_23:
          swift_release();
          goto LABEL_6;
        }
LABEL_5:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_6:
        if (v10 == v7)
          return v23;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t type metadata accessor for PSEHomeSELFEmitter()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSEHomeSELFEmitter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSEHomeSELFEmitter.emitPSEHome(homeSignals:appLaunchSignals:task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PSEHomeSELFEmitter.isUndoAction(actionFromSiri:actionFromUser:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PSEHomeSELFEmitter.getHomeFollowUpType(userSignals:siriSignals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PSEHomeSELFEmitter.getHomeFollowUpSource(userSignals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PSEHomeSELFEmitter.isFollowUpInSameContainer(userSignals:siriSignals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

unint64_t lazy protocol witness table accessor for type NSNumber? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type NSNumber? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type NSNumber? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NSNumber?);
    v2 = lazy protocol witness table accessor for type NSNumber and conformance NSObject();
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE4AB0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSNumber? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSNumber and conformance NSObject()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type NSNumber and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSNumber and conformance NSObject)
  {
    v1 = type metadata accessor for NSNumber();
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSNumber and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    v2 = MEMORY[0x24BEE0D10];
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE4AB0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
  }
  return result;
}

uint64_t Logger.engagement.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for engagement != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.engagement);
}

uint64_t Logger.debug(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return Logger.debug(_:_:)(a1, a2, a3, MEMORY[0x24BEE7908]);
}

uint64_t Logger.error(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return Logger.debug(_:_:)(a1, a2, a3, MEMORY[0x24BEE7910]);
}

uint64_t Logger.debug(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = a4();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v15 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_218F54000, v8, v9, "%s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x219A27C8C](v11, -1, -1);
    MEMORY[0x219A27C8C](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  type metadata accessor for SiriTaskEngagementUtils();
  v12 = dispatch thunk of static SiriTaskEngagementUtils.formulateSimplifiedReliabilityReasonDescription(reliabilityDescription:)();
  MEMORY[0x219A26EAC](a3, v12, v13);
  return swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for engagement()
{
  uint64_t v0;
  id v1;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.engagement);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.engagement);
  if (one-time initialization token for pseLog != -1)
    swift_once();
  v1 = (id)static Log.pseLog;
  return Logger.init(_:)();
}

uint64_t *Log.pseLog.unsafeMutableAddressor()
{
  if (one-time initialization token for pseLog != -1)
    swift_once();
  return &static Log.pseLog;
}

uint64_t static Logger.engagement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for engagement != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.engagement);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t one-time initialization function for pseLog()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static Log.pseLog = result;
  return result;
}

id static Log.pseLog.getter()
{
  if (one-time initialization token for pseLog != -1)
    swift_once();
  return (id)static Log.pseLog;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

__n128 Signal.__allocating_init(deltaT:domain:action:postSiriEngagement:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  __n128 result;
  __int128 v18;

  v14 = swift_allocObject();
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_BYTE *)(a1 + 40);
  result = *(__n128 *)a1;
  v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 32) = v18;
  *(_QWORD *)(v14 + 48) = v15;
  *(_BYTE *)(v14 + 56) = v16;
  *(_QWORD *)(v14 + 64) = a2;
  *(_QWORD *)(v14 + 72) = a3;
  *(_QWORD *)(v14 + 80) = a4;
  *(_QWORD *)(v14 + 88) = a5;
  *(_BYTE *)(v14 + 96) = a6;
  *(_QWORD *)(v14 + 104) = a7;
  return result;
}

uint64_t PSESignals.init(biomeSignals:siriTaskEngagementFeatures:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

double Delta.donatedAtTimestamp.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Delta.donatedAtTimestamp.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Delta.donatedAtTimestamp.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

double Delta.sinceUIEnd.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void Delta.sinceUIEnd.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*Delta.sinceUIEnd.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

double Delta.sinceUIStart.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void Delta.sinceUIStart.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*Delta.sinceUIStart.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

double Delta.duration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void Delta.duration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*Delta.duration.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t Delta.errorCode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t Delta.errorCode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*Delta.errorCode.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Delta.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_218F73758
                                                                     + 4 * asc_218FBD360[*v0]))(0xD000000000000012, 0x8000000218FC0150);
}

uint64_t sub_218F73758()
{
  return 0x45495565636E6973;
}

uint64_t sub_218F73774()
{
  return 0x53495565636E6973;
}

uint64_t sub_218F73794()
{
  return 0x6E6F697461727564;
}

uint64_t sub_218F737AC()
{
  return 0x646F43726F727265;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Delta.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Delta.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Delta.CodingKeys()
{
  lazy protocol witness table accessor for type Delta.CodingKeys and conformance Delta.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Delta.CodingKeys()
{
  lazy protocol witness table accessor for type Delta.CodingKeys and conformance Delta.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Delta.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Delta.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = *(_QWORD *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Delta.CodingKeys and conformance Delta.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void __swiftcall Delta.init(donatedAtTimestamp:sinceUIEnd:sinceUIStart:duration:errorCode:)(PostSiriEngagement::Delta *__return_ptr retstr, Swift::Double donatedAtTimestamp, Swift::Double sinceUIEnd, Swift::Double sinceUIStart, Swift::Double duration, Swift::Double_optional errorCode)
{
  char v6;

  retstr->donatedAtTimestamp = donatedAtTimestamp;
  retstr->sinceUIEnd = sinceUIEnd;
  retstr->sinceUIStart = sinceUIStart;
  retstr->duration = duration;
  retstr->errorCode.value = *(Swift::Double *)&errorCode.is_nil;
  retstr->errorCode.is_nil = v6 & 1;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Delta(_QWORD *a1)
{
  return Delta.encode(to:)(a1);
}

__n128 Signal.deltaT.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __n128 result;
  __int128 v6;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_BYTE *)(v1 + 56);
  result = *(__n128 *)(v1 + 16);
  v6 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  return result;
}

__n128 Signal.deltaT.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  __n128 result;
  __n128 v7;

  v7 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  v4 = a1[2].n128_u64[0];
  v5 = a1[2].n128_u8[8];
  swift_beginAccess();
  result = v7;
  v1[1] = v7;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  v1[3].n128_u64[0] = v4;
  v1[3].n128_u8[8] = v5;
  return result;
}

uint64_t (*Signal.deltaT.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t Signal.domain.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Signal.domain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*Signal.domain.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t Signal.action.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Signal.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*Signal.action.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t Signal.postSiriEngagement.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t Signal.postSiriEngagement.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 96) = a1;
  return result;
}

uint64_t (*Signal.postSiriEngagement.modify())()
{
  swift_beginAccess();
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t Signal.data.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t Signal.data.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 104) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*Signal.data.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t Signal.init(deltaT:domain:action:postSiriEngagement:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 40);
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 48) = v8;
  *(_BYTE *)(v7 + 56) = v9;
  *(_QWORD *)(v7 + 64) = a2;
  *(_QWORD *)(v7 + 72) = a3;
  *(_QWORD *)(v7 + 80) = a4;
  *(_QWORD *)(v7 + 88) = a5;
  *(_BYTE *)(v7 + 96) = a6;
  *(_QWORD *)(v7 + 104) = a7;
  return v7;
}

unint64_t lazy protocol witness table accessor for type Delta.CodingKeys and conformance Delta.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys;
  if (!lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for Delta.CodingKeys, &unk_24DA48440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys;
  if (!lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for Delta.CodingKeys, &unk_24DA48440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys;
  if (!lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for Delta.CodingKeys, &unk_24DA48440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys;
  if (!lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for Delta.CodingKeys, &unk_24DA48440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delta.CodingKeys and conformance Delta.CodingKeys);
  }
  return result;
}

PostSiriEngagement::Signal::CodingKeys_optional __swiftcall Signal.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Signal.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return (PostSiriEngagement::Signal::CodingKeys_optional)5;
  else
    return (PostSiriEngagement::Signal::CodingKeys_optional)v3;
}

PostSiriEngagement::Signal::CodingKeys_optional __swiftcall Signal.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (PostSiriEngagement::Signal::CodingKeys_optional)5;
}

uint64_t Signal.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t Signal.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218F73F28 + 4 * byte_218FBD365[a1]))(0x5461746C6564, 0xE600000000000000);
}

uint64_t sub_218F73F28()
{
  return 0x6E69616D6F64;
}

uint64_t sub_218F73F38()
{
  return 0x6E6F69746361;
}

unint64_t sub_218F73F48()
{
  return 0xD000000000000012;
}

uint64_t sub_218F73F64()
{
  return 1635017060;
}

uint64_t Signal.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218F73FA4 + 4 * byte_218FBD36A[a1]))(0x5461746C6564, 0xE600000000000000);
}

uint64_t sub_218F73FA4()
{
  return 0x6E69616D6F64;
}

uint64_t sub_218F73FB4()
{
  return 0x6E6F69746361;
}

unint64_t sub_218F73FC4()
{
  return 0xD000000000000012;
}

uint64_t sub_218F73FE0()
{
  return 1635017060;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Signal.CodingKeys(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_218F7403C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_218F740A0 + 4 * byte_218FBD374[a1]))(0x6E69616D6F64);
}

uint64_t sub_218F740A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x6E69616D6F64 && v1 == v2)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance Signal.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_218F74198()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Signal.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_218F74244()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Signal.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_218F742E8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Signal.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Signal.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Signal.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_218F743B4 + 4 * byte_218FBD388[*v0]))();
}

void sub_218F743B4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E69616D6F64;
  a1[1] = v1;
}

void sub_218F743C8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E6F69746361;
  a1[1] = v1;
}

void sub_218F743DC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x8000000218FBEEC0;
}

void sub_218F743FC(_QWORD *a1@<X8>)
{
  *a1 = 1635017060;
  a1[1] = 0xE400000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Signal.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218F7443C + 4 * byte_218FBD38D[*v0]))(0x5461746C6564, 0xE600000000000000);
}

uint64_t sub_218F7443C()
{
  return 0x6E69616D6F64;
}

uint64_t sub_218F7444C()
{
  return 0x6E6F69746361;
}

unint64_t sub_218F7445C()
{
  return 0xD000000000000012;
}

uint64_t sub_218F74478()
{
  return 1635017060;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Signal.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Signal.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Signal.CodingKeys()
{
  lazy protocol witness table accessor for type Signal.CodingKeys and conformance Signal.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Signal.CodingKeys()
{
  lazy protocol witness table accessor for type Signal.CodingKeys and conformance Signal.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Signal.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  Class isa;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  _OWORD v47[2];
  uint64_t v48;
  char v49;
  uint64_t v50;

  v2 = v1;
  v50 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for ReliabilityCategory();
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Signal.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Signal.CodingKeys and conformance Signal.CodingKeys();
  v14 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v2 + 120))(v47, v14);
  v43 = v47[0];
  v44 = v47[1];
  v45 = v48;
  v46 = v49;
  v42 = 0;
  lazy protocol witness table accessor for type Delta and conformance Delta();
  v15 = v41;
  v16 = KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v15)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v41 = v9;
  v38 = v6;
  v18 = v40;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 144))(v16);
  LOBYTE(v47[0]) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  v19 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 168))(v19);
  LOBYTE(v47[0]) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  v20 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 192))(v20);
  LOBYTE(v47[0]) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  v21 = (void *)objc_opt_self();
  (*(void (**)(void))(*(_QWORD *)v2 + 216))();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v47[0] = 0;
  v23 = objc_msgSend(v21, sel_dataWithJSONObject_options_error_, isa, 1, v47);

  v24 = *(id *)&v47[0];
  if (v23)
  {
    v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    outlined consume of Data._Representation(v25, v27);
  }
  else
  {
    v28 = v24;
    v29 = v13;
    v30 = v10;
    v31 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for engagement != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.engagement);
    v33 = *MEMORY[0x24BEA7F68];
    v34 = type metadata accessor for EncodingError();
    v35 = (uint64_t)v38;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v38, v33, v34);
    v36 = v39;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 104))(v35, *MEMORY[0x24BEA7FD8], v18);
    Logger.error(_:_:)(0xD00000000000004DLL, 0x8000000218FC00E0, v35);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v18);
    v10 = v30;
    v13 = v29;
  }
  LOBYTE(v47[0]) = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_bridgeObjectRelease();
}

uint64_t Signal.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Signal.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t PSETask.siriTask.getter()
{
  return swift_retain();
}

uint64_t PSETask.siriTask.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*PSETask.siriTask.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSETask.biomeSignals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSETask.biomeSignals.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PSETask.biomeSignals.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSETask.siriTaskEngagementFeatures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSETask.siriTaskEngagementFeatures.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PSETask.siriTaskEngagementFeatures.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSETask.init(siriTask:biomeSignals:siriTaskEngagementFeatures:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t PSESignals.biomeSignals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSESignals.biomeSignals.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PSESignals.biomeSignals.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSESignals.siriTaskEngagementFeatures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSESignals.siriTaskEngagementFeatures.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PSESignals.siriTaskEngagementFeatures.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t specialized Delta.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000218FC0150
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x45495565636E6973 && a2 == 0xEA0000000000646ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x53495565636E6973 && a2 == 0xEC00000074726174
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t specialized Signal.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Signal.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type Signal.CodingKeys and conformance Signal.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys;
  if (!lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for Signal.CodingKeys, &type metadata for Signal.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys;
  if (!lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for Signal.CodingKeys, &type metadata for Signal.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys;
  if (!lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for Signal.CodingKeys, &type metadata for Signal.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys;
  if (!lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for Signal.CodingKeys, &type metadata for Signal.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Signal.CodingKeys and conformance Signal.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Delta and conformance Delta()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Delta and conformance Delta;
  if (!lazy protocol witness table cache variable for type Delta and conformance Delta)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for Delta, &type metadata for Delta);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delta and conformance Delta);
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

double sub_218F74FBC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  double result;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;
  char v9;

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)a1 + 120))(v7);
  v3 = v8;
  v4 = v9;
  result = *(double *)v7;
  v6 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v3;
  *(_BYTE *)(a2 + 40) = v4;
  return result;
}

uint64_t sub_218F7500C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = *a2;
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v8 = v2;
  v9 = v3;
  return (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v4 + 128))(v7);
}

uint64_t sub_218F75058@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F75088(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F750CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F750FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 176);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F75140@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_218F75174(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 200))(*a1);
}

uint64_t sub_218F751A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t sub_218F751D0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 224);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t initializeBufferWithCopyOfBuffer for Delta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Delta(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Delta(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Delta()
{
  return &type metadata for Delta;
}

uint64_t type metadata accessor for Signal()
{
  return objc_opt_self();
}

uint64_t method lookup function for Signal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Signal.deltaT.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of Signal.deltaT.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of Signal.deltaT.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of Signal.domain.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of Signal.domain.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of Signal.domain.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of Signal.action.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of Signal.action.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of Signal.action.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of Signal.postSiriEngagement.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of Signal.postSiriEngagement.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of Signal.postSiriEngagement.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of Signal.data.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of Signal.data.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of Signal.data.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of Signal.__allocating_init(deltaT:domain:action:postSiriEngagement:data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of Signal.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

ValueMetadata *type metadata accessor for Signal.CodingKeys()
{
  return &type metadata for Signal.CodingKeys;
}

uint64_t destroy for PSETask()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for PSETask(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PSETask(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PSETask(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PSETask(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PSETask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PSETask()
{
  return &type metadata for PSETask;
}

uint64_t destroy for PSESignals()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for PSESignals(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PSESignals(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for PSESignals(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PSESignals(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PSESignals(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PSESignals()
{
  return &type metadata for PSESignals;
}

uint64_t storeEnumTagSinglePayload for Signal.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_218F75794 + 4 * byte_218FBD397[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_218F757C8 + 4 * byte_218FBD392[v4]))();
}

uint64_t sub_218F757C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F757D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218F757D8);
  return result;
}

uint64_t sub_218F757E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218F757ECLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_218F757F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F757F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Delta.CodingKeys()
{
  return &unk_24DA48440;
}

void AlarmSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  Swift::String v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  void *v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  char v85;
  unsigned __int8 v86;
  char v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  id v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint8_t *v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  id v122;
  Swift::String v123;

  v112 = a2;
  v113 = type metadata accessor for ReliabilityCategory();
  v3 = *(_QWORD *)(v113 - 8);
  MEMORY[0x24BDAC7A8](v113);
  v5 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger();
  v7 = *(uint8_t **)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)MEMORY[0x219A27818](v11);
  v15 = a1;
  v16 = v122;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v117);
  if (v16)
  {
    objc_autoreleasePoolPop(v14);
    return;
  }
  v106 = v9;
  v110 = v7;
  v107 = v5;
  v108 = v3;
  v105 = v13;
  v109 = 0;
  objc_autoreleasePoolPop(v14);
  v111 = (id)v117;
  v122 = objc_msgSend((id)v117, sel_intent);
  v17 = objc_msgSend(v122, sel_typeName);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  v123._countAndFlagsBits = v18;
  v123._object = v20;
  if (specialized SynapseTypesAlarmRelatedConstants.init(rawValue:)(v123) == 4)
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v21 = v6;
    v22 = __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
    v23 = v106;
    (*((void (**)(char *, uint64_t, uint64_t))v110 + 2))(v106, v22, v6);
    *(_QWORD *)&v117 = 0;
    *((_QWORD *)&v117 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v24._countAndFlagsBits = 0xD000000000000012;
    v24._object = (void *)0x8000000218FC0170;
    String.append(_:)(v24);
    v25 = v122;
    v26 = objc_msgSend(v122, sel_domain);
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    v30._countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0xD000000000000024;
    v31._object = (void *)0x8000000218FC0190;
    String.append(_:)(v31);
    v32 = v117;
    v33 = *MEMORY[0x24BEA8140];
    v34 = type metadata accessor for AppIntentEventDataIssues();
    v35 = (uint64_t)v107;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v107, v33, v34);
    v36 = v108;
    v37 = v113;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v108 + 104))(v35, *MEMORY[0x24BEA8000], v113);
    Logger.error(_:_:)(v32, *((unint64_t *)&v32 + 1), v35);

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    (*((void (**)(char *, uint64_t))v110 + 1))(v23, v21);
    return;
  }
  v38 = v15;
  v39 = objc_msgSend(v15, sel_intentClass);
  v40 = v122;
  if (!v39)
    goto LABEL_39;
  v41 = v39;
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v44 = v43;

  if ((v42 != 0xD000000000000011 || v44 != 0x8000000218FC01C0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v42 == 0xD000000000000013 && v44 == 0x8000000218FC01E0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v53 = (void *)MEMORY[0x219A27218](0xD000000000000010, 0x8000000218FC0240);
      v54 = objc_msgSend(v40, sel_valueForKeyPath_, v53);

      v55 = v112;
      v56 = (uint64_t)v105;
      if (v54)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v115 = 0u;
        v116 = 0u;
      }
      goto LABEL_52;
    }
    if (v42 == 0xD000000000000013 && v44 == 0x8000000218FC0200)
    {
      swift_bridgeObjectRelease();
LABEL_37:
      v66 = (void *)MEMORY[0x219A27218](0xD000000000000012, 0x8000000218FC0220);
      v67 = objc_msgSend(v40, sel_valueForKeyPath_, v66);

      if (v67)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v115 = 0u;
        v116 = 0u;
      }
      v55 = v112;
      v56 = (uint64_t)v105;
LABEL_52:
      outlined init with take of Any?((uint64_t)&v115, (uint64_t)&v117);
      if (v119)
      {
        v101 = MEMORY[0x24BEE0D00];
        if ((swift_dynamicCast() & 1) != 0)
        {
          v119 = v101;
          v117 = v114;
          outlined init with take of Any(&v117, &v115);
          v102 = MEMORY[0x24BEE4B00];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v114 = v102;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v115, 0x6564496D72616C61, 0xEF7265696669746ELL, isUniquelyReferenced_nonNull_native);
          v46 = v114;
          swift_bridgeObjectRelease();
          goto LABEL_46;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for Any?);
      }
      v46 = MEMORY[0x24BEE4B00];
      goto LABEL_46;
    }
    v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v65 & 1) != 0)
      goto LABEL_37;
LABEL_39:
    if (one-time initialization token for engagement != -1)
      swift_once();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
    v68 = v40;
    v69 = Logger.logObject.getter();
    v70 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc();
      *(_QWORD *)&v117 = swift_slowAlloc();
      v113 = (uint64_t)v38;
      v72 = v117;
      *(_DWORD *)v71 = 136315138;
      v110 = v71 + 4;
      v73 = objc_msgSend(v68, sel__className);
      v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v76 = v75;

      v77 = v74;
      v40 = v122;
      *(_QWORD *)&v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v76, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_218F54000, v69, v70, "Skip the alarmID for other intents %s", v71, 0xCu);
      swift_arrayDestroy();
      v78 = v72;
      v38 = (void *)v113;
      MEMORY[0x219A27C8C](v78, -1, -1);
      MEMORY[0x219A27C8C](v71, -1, -1);

    }
    else
    {

    }
    v46 = MEMORY[0x24BEE4B00];
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  v45 = objc_msgSend(v111, sel_intentResponse);
  v46 = MEMORY[0x24BEE4B00];
  if (v45)
  {
    v47 = v45;
    v48 = objc_msgSend(v45, sel__className);
    if (v48)
    {
      v49 = v48;
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v52 = v51;

      if (v50 == 0xD000000000000019 && v52 == 0x8000000218FC0260)
      {
        swift_bridgeObjectRelease();
        v40 = v122;
      }
      else
      {
        v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v40 = v122;
        if ((v57 & 1) == 0)
          goto LABEL_30;
      }
      v58 = (void *)MEMORY[0x219A27218](0xD000000000000017, 0x8000000218FC0280);
      v59 = objc_msgSend(v47, sel_valueForKeyPath_, v58);

      if (v59)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v115 = 0u;
        v116 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v115, (uint64_t)&v117);
      if (!v119)
      {

        outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for Any?);
        goto LABEL_45;
      }
      v60 = MEMORY[0x24BEE0D00];
      if ((swift_dynamicCast() & 1) != 0)
      {
        v61 = specialized static Utils.normalizedAlarmIdentifier(from:)(v114, *((uint64_t *)&v114 + 1));
        v63 = v62;
        swift_bridgeObjectRelease();
        v119 = v60;
        *(_QWORD *)&v117 = v61;
        *((_QWORD *)&v117 + 1) = v63;
        outlined init with take of Any(&v117, &v115);
        v64 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v114 = v46;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v115, 0x6564496D72616C61, 0xEF7265696669746ELL, v64);
        v46 = v114;

        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
LABEL_30:

      goto LABEL_45;
    }

    v40 = v122;
  }
  else
  {
    v40 = v122;
  }
LABEL_45:
  v55 = v112;
  v56 = (uint64_t)v105;
LABEL_46:
  type metadata accessor for Utils();
  objc_msgSend(v38, sel_absoluteTimestamp);
  Date.init(timeIntervalSinceReferenceDate:)();
  v79 = type metadata accessor for Date();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v56, 0, 1, v79);
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)(v56, v55, (uint64_t)&v117, 0.0);
  outlined destroy of Any?(v56, &demangling cache variable for type metadata for Date?);
  v80 = v117;
  v81 = v118;
  v82 = v119;
  v83 = v120;
  v84 = v38;
  v85 = v121;
  v86 = objc_msgSend(v84, sel_donatedBySiri);
  v119 = MEMORY[0x24BEE1328];
  LOBYTE(v117) = v86;
  outlined init with take of Any(&v117, &v115);
  v87 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v114 = v46;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v115, 0x42646574616E6F64, 0xED00006972695379, v87);
  v88 = v114;
  swift_bridgeObjectRelease();
  v89 = objc_msgSend(v40, sel_typeName);
  v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v92 = v91;

  v119 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v117 = v90;
  *((_QWORD *)&v117 + 1) = v92;
  outlined init with take of Any(&v117, &v115);
  v93 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v114 = v88;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v115, 0x7954746E65746E69, 0xEE00656D614E6570, v93);
  v94 = v114;
  swift_bridgeObjectRelease();
  v95 = objc_msgSend(v84, sel_intentClass);
  if (v95)
  {
    v96 = v95;
    v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v99 = v98;

  }
  else
  {

    v97 = 0;
    v99 = 0xE000000000000000;
  }

  type metadata accessor for Signal();
  v100 = swift_allocObject();
  *(_OWORD *)(v100 + 16) = v80;
  *(_QWORD *)(v100 + 32) = v81;
  *(_QWORD *)(v100 + 40) = v82;
  *(_QWORD *)(v100 + 48) = v83;
  *(_BYTE *)(v100 + 56) = v85;
  *(_QWORD *)(v100 + 64) = 0x6D72616C41;
  *(_QWORD *)(v100 + 72) = 0xE500000000000000;
  *(_QWORD *)(v100 + 80) = v97;
  *(_QWORD *)(v100 + 88) = v99;
  *(_BYTE *)(v100 + 96) = 1;
  *(_QWORD *)(v100 + 104) = v94;
}

uint64_t AlarmSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  id v19;
  void *v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  Swift::String v35;
  char v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  Swift::String v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t result;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t (*v91)(id, uint64_t);
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  Swift::String v102;
  __int128 v103;
  unint64_t v104;

  v4 = v3;
  v93 = a2;
  v7 = (_QWORD *)type metadata accessor for ReliabilityCategory();
  v97 = *(v7 - 1);
  MEMORY[0x24BDAC7A8](v7);
  v96 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for Logger();
  v95 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v94 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v78 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v74 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v73 = (char *)&v72 - v16;
  v104 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_63;
  v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v17)
  {
    v77 = v13;
    v76 = v12;
    v72 = a3;
    v13 = 0;
    v12 = 0;
    v92 = a1 & 0xC000000000000001;
    v82 = a1 & 0xFFFFFFFFFFFFFF8;
    v81 = a1 + 32;
    v75 = MEMORY[0x24BEE4AF8];
    v91 = *(uint64_t (**)(id, uint64_t))(*(_QWORD *)v4 + 88);
    v88 = *MEMORY[0x24BEA7F08];
    v87 = *MEMORY[0x24BEA8030];
    v86 = 0x8000000218FC02A0;
    *(_QWORD *)&v18 = 136315138;
    v80 = v18;
    v79 = MEMORY[0x24BEE4AD8] + 8;
    v90 = a1;
    v84 = v4;
    v85 = v7;
    v89 = v17;
    while (1)
    {
      if (v92)
      {
        v19 = (id)MEMORY[0x219A2756C](v13, a1);
      }
      else
      {
        if (v13 >= *(_QWORD *)(v82 + 16))
          goto LABEL_62;
        v19 = *(id *)(v81 + 8 * v13);
      }
      v20 = v19;
      if (__OFADD__(v13++, 1))
        break;
      a3 = v4;
      v22 = v91(v19, v93);
      if (v22)
      {
        v83 = v20;
        v23 = v104;
        v99 = v22;
        if (v104 >> 62)
        {
          swift_bridgeObjectRetain_n();
          v4 = _CocoaArrayWrapper.endIndex.getter();
          if (v4)
          {
LABEL_14:
            v7 = *(_QWORD **)(*(_QWORD *)v99 + 120);
            v24 = 4;
            while (1)
            {
              a3 = v24 - 4;
              if ((v23 & 0xC000000000000001) != 0)
              {
                a1 = MEMORY[0x219A2756C](v24 - 4, v23);
                v25 = v24 - 3;
                if (__OFADD__(a3, 1))
                  goto LABEL_60;
              }
              else
              {
                a1 = *(_QWORD *)(v23 + 8 * v24);
                swift_retain();
                v25 = v24 - 3;
                if (__OFADD__(a3, 1))
                {
LABEL_60:
                  __break(1u);
                  goto LABEL_61;
                }
              }
              v26 = ((_QWORD *(*)(Swift::String *__return_ptr))v7)(&v102);
              v27 = *(double *)&v102._countAndFlagsBits;
              (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*(_QWORD *)a1 + 120))(&v100, v26);
              if (vabdd_f64(v27, *(double *)&v100) < 2.0)
                break;
              swift_release();
              ++v24;
              if (v25 == v4)
                goto LABEL_22;
            }
            swift_bridgeObjectRelease_n();
            if (one-time initialization token for engagement != -1)
              swift_once();
            __swift_project_value_buffer(v98, (uint64_t)static Logger.engagement);
            v31 = Logger.logObject.getter();
            v32 = static os_log_type_t.info.getter();
            v33 = os_log_type_enabled(v31, v32);
            v7 = v85;
            v17 = v89;
            if (v33)
            {
              v34 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v34 = 0;
              _os_log_impl(&dword_218F54000, v31, v32, "duped won't be added to PSE signals, we update the original one.", v34, 2u);
              MEMORY[0x219A27C8C](v34, -1, -1);
            }

            (*(void (**)(void))(*(_QWORD *)a1 + 168))();
            v35 = String.lowercased()();
            swift_bridgeObjectRelease();
            v102 = v35;
            v100 = 0x656C67676F74;
            v101 = 0xE600000000000000;
            lazy protocol witness table accessor for type String and conformance String();
            v36 = StringProtocol.contains<A>(_:)();
            v37 = swift_bridgeObjectRelease();
            if ((v36 & 1) == 0)
              goto LABEL_35;
            v38 = *(void (**)(uint64_t))(*(_QWORD *)v99 + 168);
            v38(v37);
            v39 = String.lowercased()();
            swift_bridgeObjectRelease();
            v102 = v39;
            v100 = 0x657461657263;
            v101 = 0xE600000000000000;
            v40 = StringProtocol.contains<A>(_:)();
            v7 = v85;
            v37 = swift_bridgeObjectRelease();
            if ((v40 & 1) != 0)
            {
              v41 = v99;
              v42 = ((uint64_t (*)(uint64_t))v38)(v37);
              v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(v42);
              v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 216))(v43);
              a3 = a1;
              (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(v44);

              swift_release();
              swift_release();
              v4 = v84;
            }
            else
            {
LABEL_35:
              a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(v37);
              if (*(_QWORD *)(a3 + 16))
              {
                v46 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL);
                v47 = v99;
                if ((v48 & 1) != 0)
                {
                  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v46, (uint64_t)&v102);
                }
                else
                {
                  v102 = (Swift::String)0;
                  v103 = 0u;
                }
                v4 = v84;
                v57 = v83;
              }
              else
              {
                v102 = (Swift::String)0;
                v103 = 0u;
                v4 = v84;
                v57 = v83;
                v47 = v99;
              }
              swift_bridgeObjectRelease();
              v58 = *((_QWORD *)&v103 + 1);
              v59 = outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for Any?);
              if (v58)
              {

              }
              else
              {
                v60 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 216);
                a3 = v60(v59);
                if (*(_QWORD *)(a3 + 16)
                  && (v61 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL),
                      (v62 & 1) != 0))
                {
                  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v61, (uint64_t)&v102);
                }
                else
                {
                  v102 = (Swift::String)0;
                  v103 = 0u;
                }
                swift_bridgeObjectRelease();
                v63 = *((_QWORD *)&v103 + 1);
                v64 = outlined destroy of Any?((uint64_t)&v102, &demangling cache variable for type metadata for Any?);
                if (v63)
                {
                  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 168))(v64);
                  v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(v65);
                  v67 = v60(v66);
                  a3 = a1;
                  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(v67);
                }

              }
              swift_release();
              swift_release();
            }
            a1 = v90;
            goto LABEL_5;
          }
        }
        else
        {
          v4 = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v4)
            goto LABEL_14;
        }
LABEL_22:
        swift_bridgeObjectRelease_n();
        v28 = swift_retain();
        MEMORY[0x219A2732C](v28);
        if (*(_QWORD *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v4 = v84;
        v29 = (uint64_t)v76;
        v30 = v83;
        (*(void (**)(id))(*(_QWORD *)v84 + 80))(v83);
        a1 = v90;
        v7 = v85;
        v17 = v89;
        v45 = v78;
        a3 = v77;
        if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v78 + 48))(v29, 1, v77) == 1)
        {

          swift_release();
          outlined destroy of Any?(v29, &demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
        }
        else
        {
          v49 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
          v50 = v73;
          v49(v73, v29, a3);
          (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v74, v50, a3);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v51 = v75;
          else
            v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v75 + 16) + 1, 1, v75);
          v53 = *(_QWORD *)(v51 + 16);
          v52 = *(_QWORD *)(v51 + 24);
          v54 = v78;
          a1 = v90;
          if (v53 >= v52 >> 1)
          {
            v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v51);
            v54 = v78;
            v51 = v68;
          }
          *(_QWORD *)(v51 + 16) = v53 + 1;
          a3 = v54;
          v55 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
          v75 = v51;
          v56 = v77;
          v49((char *)(v51 + v55 + *(_QWORD *)(v54 + 72) * v53), (uint64_t)v74, v77);

          swift_release();
          (*(void (**)(char *, unint64_t))(a3 + 8))(v73, v56);
        }
      }
      else
      {

      }
LABEL_5:
      if (v13 == v17)
      {
        result = swift_bridgeObjectRelease();
        v70 = v104;
        a3 = v72;
        v71 = v75;
        goto LABEL_65;
      }
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
  }
  result = swift_bridgeObjectRelease();
  v70 = MEMORY[0x24BEE4AF8];
  v71 = MEMORY[0x24BEE4AF8];
LABEL_65:
  *(_QWORD *)a3 = v70;
  *(_QWORD *)(a3 + 8) = v71;
  return result;
}

uint64_t AlarmSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AlarmSignalFactory.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t AlarmSignalFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AlarmSignalFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AlarmSignalFactory()
{
  return objc_opt_self();
}

uint64_t PostSiriEngagementCollectionResult.status.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PostSiriEngagementCollectionResult.status.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*PostSiriEngagementCollectionResult.status.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PostSiriEngagementCollectionResult.numCollectedSiriSessions.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PostSiriEngagementCollectionResult.numCollectedSiriSessions.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*PostSiriEngagementCollectionResult.numCollectedSiriSessions.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PostSiriEngagementCollectionResult.lastSessionEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PostSiriEngagementCollectionResult(0) + 24);
  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PostSiriEngagementCollectionResult(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for PostSiriEngagementCollectionResult);
}

uint64_t PostSiriEngagementCollectionResult.lastSessionEndDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PostSiriEngagementCollectionResult(0) + 24);
  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PostSiriEngagementCollectionResult.lastSessionEndDate.modify())()
{
  type metadata accessor for PostSiriEngagementCollectionResult(0);
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PostSiriEngagementCollectionResult.init()@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  type metadata accessor for PostSiriEngagementCollectionResult(0);
  return Date.init()();
}

uint64_t default argument 0 of PostSiriEngagementCollectionResult.init(status:numCollectedSiriSessions:lastSessionEndDate:)()
{
  return 0;
}

uint64_t default argument 1 of PostSiriEngagementCollectionResult.init(status:numCollectedSiriSessions:lastSessionEndDate:)()
{
  return 0;
}

uint64_t PostSiriEngagementCollectionResult.init(status:numCollectedSiriSessions:lastSessionEndDate:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  v5 = a4 + *(int *)(type metadata accessor for PostSiriEngagementCollectionResult(0) + 24);
  v6 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t PostSiriEngagementCollection.__allocating_init(identifier:startDate:timeWindowInSeconds:numSiriUISessions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = swift_allocObject();
  v13 = v12 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_startDate;
  v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v12 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_timeWindowInSeconds;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v12 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_numSiriUISessions;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  swift_beginAccess();
  outlined assign with take of Date?(a3, v13);
  swift_endAccess();
  *(_QWORD *)v15 = a4;
  *(_BYTE *)(v15 + 8) = a5 & 1;
  *(_QWORD *)v16 = a6;
  *(_BYTE *)(v16 + 8) = a7 & 1;
  return v12;
}

uint64_t PostSiriEngagementCollection.init(identifier:startDate:timeWindowInSeconds:numSiriUISessions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v13 = v7 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_startDate;
  v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v7 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_timeWindowInSeconds;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v7 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_numSiriUISessions;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  swift_beginAccess();
  outlined assign with take of Date?(a3, v13);
  swift_endAccess();
  *(_QWORD *)v15 = a4;
  *(_BYTE *)(v15 + 8) = a5 & 1;
  *(_QWORD *)v16 = a6;
  *(_BYTE *)(v16 + 8) = a7 & 1;
  return v7;
}

uint64_t PostSiriEngagementCollection.__allocating_init(startDate:timeWindowInSeconds:numSiriUISessions:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v9 = a3 & 1;
  v10 = a5 & 1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  v16 = (*(uint64_t (**)(_QWORD, unint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 208))(0, 0xE000000000000000, v13, a2, v9, a4, v10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  return v16;
}

uint64_t PostSiriEngagementCollection.perform(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v24;

  v3 = v2;
  v24 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + 16);
  v13 = *(_QWORD *)(v3 + 24);
  type metadata accessor for PostSiriEngagementMetricsCollector();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v14 = PostSiriEngagementMetricsCollector.init(identifier:)(v12, v13);
  v15 = v3 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_startDate;
  swift_beginAccess();
  outlined init with copy of Date?(v15, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    swift_retain();
    UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)v11);
    swift_release();
    outlined destroy of Date?((uint64_t)v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }
  v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_timeWindowInSeconds);
  v17 = *(unsigned __int8 *)(v3
                           + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_timeWindowInSeconds
                           + 8);
  v18 = v3 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_numSiriUISessions;
  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_numSiriUISessions);
  v20 = *(unsigned __int8 *)(v18 + 8);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v24;
  *(_QWORD *)(v21 + 24) = a2;
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t))(*(_QWORD *)v14
                                                                                                  + 248);
  swift_retain();
  v22(v11, v16, v17, v19, v20, partial apply for closure #1 in PostSiriEngagementCollection.perform(completion:), v21);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t PostSiriEngagementCollection.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of Date?(v0 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_startDate);
  return v0;
}

uint64_t PostSiriEngagementCollection.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of Date?(v0 + OBJC_IVAR____TtC18PostSiriEngagement28PostSiriEngagementCollection_startDate);
  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_218F77B10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PostSiriEngagementCollection.perform(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for PostSiriEngagementCollectionResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PostSiriEngagementCollectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PostSiriEngagementCollectionResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_218F77DB8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for Date();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PostSiriEngagementCollectionResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_218F77E40(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for Date();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PostSiriEngagementCollectionResult()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PostSiriEngagementCollection()
{
  return type metadata accessor for PostSiriEngagementCollection(0);
}

uint64_t type metadata accessor for PostSiriEngagementCollection(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for PostSiriEngagementCollection);
}

void type metadata completion function for PostSiriEngagementCollection()
{
  unint64_t v0;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for PostSiriEngagementCollection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PostSiriEngagementCollection.__allocating_init(identifier:startDate:timeWindowInSeconds:numSiriUISessions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(v7 + 208))(a1, a2, a3, a4, a5 & 1, a6, a7 & 1);
}

uint64_t dispatch thunk of PostSiriEngagementCollection.perform(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

void TaskSuccess.toProto()(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_218F78024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x24BEA7C08];
  v2 = type metadata accessor for ProtoSiriTaskSuccessType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

void TaskCompletionType.toProto()(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_218F780B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x24BEA7C28];
  v2 = type metadata accessor for ProtoSiriTaskCompletionType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t TaskInteractionType.toProto()()
{
  ProtoSiriTaskInteractionType.init()();
  ProtoSiriTaskInteractionType.includesPrompt.setter();
  ProtoSiriTaskInteractionType.includesConfirm.setter();
  ProtoSiriTaskInteractionType.includesDisambiguate.setter();
  return ProtoSiriTaskInteractionType.includesUnsupportedPrompt.setter();
}

uint64_t SiriExecutionTask.toProto()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v1 = type metadata accessor for Date();
  v30 = *(_QWORD *)(v1 - 8);
  v31 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v29 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ProtoSiriTaskInteractionType();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for ProtoSiriTaskSuccessType();
  v27 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ProtoSiriTaskCompletionType();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = ProtoSiriTaskEvaluationSummary.init()();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 200))(v11);
  v12 = ProtoSiriTaskEvaluationSummary.requestIds.setter();
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 296);
  v14 = v13(v12);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 152))(v14);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, **((unsigned int **)&unk_24DA48558 + v15), v7);
  v16 = ProtoSiriTaskEvaluationSummary.taskCompletion.setter();
  v17 = v13(v16);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 104))(v17);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v6, **((unsigned int **)&unk_24DA48580 + v18), v28);
  v19 = ProtoSiriTaskEvaluationSummary.taskSuccess.setter();
  v20 = v13(v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 128))(v20);
  swift_release();
  ProtoSiriTaskInteractionType.init()();
  ProtoSiriTaskInteractionType.includesPrompt.setter();
  ProtoSiriTaskInteractionType.includesConfirm.setter();
  ProtoSiriTaskInteractionType.includesDisambiguate.setter();
  ProtoSiriTaskInteractionType.includesUnsupportedPrompt.setter();
  ProtoSiriTaskEvaluationSummary.interactionType.setter();
  type metadata accessor for SiriTaskEngagementUtils();
  v21 = v29;
  (*(void (**)(void))(*(_QWORD *)v0 + 320))();
  dispatch thunk of static SiriTaskEngagementUtils.convertDateTimeToUInt64(date:)();
  v22 = v31;
  v23 = *(void (**)(char *, uint64_t))(v30 + 8);
  v23(v21, v31);
  v24 = ProtoSiriTaskEvaluationSummary.startTimestampMs.setter();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 344))(v24);
  dispatch thunk of static SiriTaskEngagementUtils.convertDateTimeToUInt64(date:)();
  v23(v21, v22);
  return ProtoSiriTaskEvaluationSummary.endTimestampMs.setter();
}

uint64_t static EngagementSignalEnrichmentUtils.getTaskCompletionType(executionSequence:)(uint64_t a1)
{
  if ((specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1) != 0)
    return 2;
  if ((specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1) != 0)
    return 3;
  if ((specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1) != 0)
    return 4;
  return 1;
}

uint64_t static EngagementSignalEnrichmentUtils.getTaskInteractionType(executionSequence:)(uint64_t a1)
{
  char v2;
  char v3;
  char v4;
  int v5;
  int v6;
  int v7;

  v2 = specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1);
  v3 = specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1);
  v4 = specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1);
  if ((specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1) != 0)
    v5 = 0x1000000;
  else
    v5 = 0;
  if ((v4 & 1) != 0)
    v6 = 0x10000;
  else
    v6 = 0;
  if ((v3 & 1) != 0)
    v7 = 256;
  else
    v7 = 0;
  return v7 & 0xFFFFFFFE | v2 & 1 | v6 | v5;
}

uint64_t static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isFailedTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isSiriCompletedTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isPromptInteractionTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isConfirmInteractionTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isDisambiguateInteractionTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t static EngagementSignalEnrichmentUtils.isUnsupportedPromptInteractionTask(executionSequence:)(uint64_t a1)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(a1) & 1;
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = result;
    v12 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = v12;
    v4 = v2 + 40;
    do
    {
      String.lowercased()();
      String.lowercased()();
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      v5 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(v12 + 16);
      v6 = *(_QWORD *)(v12 + 24);
      v8 = v7 + 1;
      if (v7 >= v6 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      v4 += 16;
      *(_QWORD *)(v12 + 16) = v8;
      *(_BYTE *)(v12 + v7 + 32) = v5 & 1;
      --v1;
    }
    while (v1);
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    v8 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v8)
      goto LABEL_11;
  }
  if (*(_BYTE *)(v3 + 32) == 1)
  {
    v9 = 1;
LABEL_16:
    swift_bridgeObjectRelease();
    return v9;
  }
  if (v8 == 1)
  {
LABEL_11:
    v9 = 0;
    goto LABEL_16;
  }
  v10 = 33;
  while (1)
  {
    v11 = v10 - 31;
    if (__OFADD__(v10 - 32, 1))
      break;
    v9 = *(unsigned __int8 *)(v3 + v10);
    if ((v9 & 1) == 0)
    {
      ++v10;
      if (v11 != v8)
        continue;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isFailedTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isPromptInteractionTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isSiriCompletedTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isConfirmInteractionTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isDisambiguateInteractionTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

uint64_t specialized static EngagementSignalEnrichmentUtils.isUnsupportedPromptInteractionTask(executionSequence:)(uint64_t result)
{
  return specialized static EngagementSignalEnrichmentUtils.isUserCanceledTask(executionSequence:)(result);
}

ValueMetadata *type metadata accessor for EngagementSignalEnrichmentUtils()
{
  return &type metadata for EngagementSignalEnrichmentUtils;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, v11) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Date?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, a1, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t PostSiriEngagementMetricsCollector.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  PostSiriEngagementMetricsCollector.init(identifier:)(a1, a2);
  return v4;
}

uint64_t PostSiriEngagementMetricsCollector.isSELFEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t PostSiriEngagementMetricsCollector.isBiomeDonationEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t PostSiriEngagementMetricsCollector.isFeatureStoreEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t PostSiriEngagementMetricsCollector.userDefaults.getter()
{
  return swift_retain();
}

uint64_t PostSiriEngagementMetricsCollector.__allocating_init(parameters:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  v1 = specialized PostSiriEngagementMetricsCollector.init(parameters:)(v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PostSiriEngagementMetricsCollector.init(parameters:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized PostSiriEngagementMetricsCollector.init(parameters:)(v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PostSiriEngagementMetricsCollector.init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  _BYTE *v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  Swift::String v15;
  char v16;
  char v17;
  char v18;
  _BYTE *v20;

  v3 = v2;
  type metadata accessor for PSEBiomeDonator();
  v6 = swift_allocObject();
  swift_retain();
  v7 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  v8 = objc_msgSend(v7, sel_PostSiriEngagement);
  swift_unknownObjectRelease();
  v9 = objc_msgSend(v8, sel_source);

  *(_QWORD *)(v6 + 16) = v9;
  *(_WORD *)(v3 + 40) = 257;
  v10 = (_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 42) = 1;
  v20 = (_BYTE *)(v3 + 41);
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for UserDefaultsDomainProvider();
  v11 = (_QWORD *)swift_allocObject();
  v12 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  swift_bridgeObjectRetain();
  v13 = (void *)MEMORY[0x219A27218](0xD000000000000021, 0x8000000218FBF0A0);
  v14 = objc_msgSend(v12, sel_initWithSuiteName_, v13);

  v11[2] = v14;
  v11[3] = a1;
  v11[4] = a2;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 0xD000000000000011;
  v15._object = (void *)0x8000000218FC0390;
  String.append(_:)(v15);
  v11[5] = a1;
  v11[6] = a2;
  *(_QWORD *)(v3 + 48) = v11;
  if (a1 == 0xD000000000000022 && a2 == 0x8000000218FBD800)
  {
    v16 = 1;
    swift_beginAccess();
    *v10 = 1;
    swift_beginAccess();
    *v20 = 1;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_beginAccess();
    *v10 = v17 & 1;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_beginAccess();
    *v20 = v18 & 1;
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_BYTE *)(v3 + 42) = v16 & 1;
  swift_release();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t PostSiriEngagementMetricsCollector.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(unint64_t, unint64_t))(v0 + 240))(0xD000000000000022, 0x8000000218FBD800);
}

uint64_t PostSiriEngagementMetricsCollector.collect(callback:)(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v19;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for engagement != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.engagement);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_218F54000, v14, v15, "Starting activity collector", v16, 2u);
    MEMORY[0x219A27C8C](v16, -1, -1);
  }

  swift_beginAccess();
  static PSEStruct.pseTriggerOrigin = 0x6E61747369737361;
  qword_253F31BF0 = 0xEA00000000006474;
  swift_bridgeObjectRelease();
  UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  v17 = (*(uint64_t (**)(char *, char *, _QWORD, uint64_t))(*(_QWORD *)v3 + 288))(v12, v8, 0, 1);
  outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for Date?);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  specialized PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(v17, v3, v17, v3, a1, a2);
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t closure #1 in PostSiriEngagementMetricsCollector.collect(callback:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD v13[2];

  v5 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for engagement != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.engagement);
  swift_bridgeObjectRetain();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v11 = 134217984;
    v13[1] = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_218F54000, v9, v10, "Successfully completed collection of %ld activities.", v11, 0xCu);
    MEMORY[0x219A27C8C](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  Date.init()();
  UserDefaultsDomainProvider.lastCollectionDate.setter((uint64_t)v7);
  return a3(0);
}

uint64_t PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, void (*a6)(uint64_t), void (*a7)(uint64_t))
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_BYTE *, _BYTE *, uint64_t);
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  os_log_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  char v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  void (*v64)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (**v76)(uint64_t);
  void (*v77)(uint64_t);
  _BYTE *v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v86[4];
  int v87;
  os_log_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  void (*v100)(uint64_t);
  void (*v101)(uint64_t);
  void (*v102)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  _BYTE *v109;
  uint64_t v110;
  void (*v111)(unint64_t, uint64_t);
  _BYTE *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115[4];

  v8 = v7;
  v100 = a6;
  v101 = (void (*)(uint64_t))a7;
  v108 = a5;
  v110 = a4;
  v106 = a3;
  v95 = a2;
  v92 = type metadata accessor for PostSiriEngagementCollectionResult(0);
  MEMORY[0x24BDAC7A8](v92);
  v93 = &v86[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v104 = type metadata accessor for SiriUISession(0);
  v11 = *(_QWORD *)(v104 - 8);
  v12 = MEMORY[0x24BDAC7A8](v104);
  v98 = &v86[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = &v86[-v15];
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = &v86[-v18];
  v20 = MEMORY[0x24BDAC7A8](v17);
  v96 = &v86[-v21];
  v97 = v22;
  MEMORY[0x24BDAC7A8](v20);
  v99 = &v86[-v23];
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v94 = &v86[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v25);
  v28 = &v86[-v27];
  v29 = type metadata accessor for Date();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v91 = &v86[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = MEMORY[0x24BDAC7A8](v31);
  v103 = &v86[-v34];
  v35 = MEMORY[0x24BDAC7A8](v33);
  v112 = &v86[-v36];
  MEMORY[0x24BDAC7A8](v35);
  v38 = (unint64_t)&v86[-v37];
  if (one-time initialization token for engagement != -1)
    goto LABEL_24;
  while (1)
  {
    v39 = type metadata accessor for Logger();
    v40 = __swift_project_value_buffer(v39, (uint64_t)static Logger.engagement);
    v41 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v30 + 16);
    v107 = a1;
    v102 = v41;
    v41((_BYTE *)v38, (_BYTE *)a1, v29);
    swift_retain_n();
    v90 = v40;
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.info.getter();
    v44 = v43;
    v45 = os_log_type_enabled(v42, v43);
    v113 = v8;
    v109 = v28;
    v105 = v30;
    if (v45)
    {
      v46 = swift_slowAlloc();
      v88 = v42;
      v47 = v46;
      v89 = swift_slowAlloc();
      v115[0] = v89;
      *(_DWORD *)v47 = 136315394;
      v48 = v29;
      lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
      v87 = v44;
      v49 = dispatch thunk of CustomStringConvertible.description.getter();
      v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v111 = *(void (**)(unint64_t, uint64_t))(v30 + 8);
      v111(v38, v29);
      *(_WORD *)(v47 + 12) = 2080;
      v51 = v113[3];
      v52 = v113[4];
      swift_bridgeObjectRetain();
      v53 = v51;
      v29 = v48;
      v8 = v113;
      v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v52, v115);
      v28 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v54 = v88;
      _os_log_impl(&dword_218F54000, v88, (os_log_type_t)v87, "Starting collection with startDate: %s with identifier: %s", (uint8_t *)v47, 0x16u);
      v55 = v89;
      swift_arrayDestroy();
      MEMORY[0x219A27C8C](v55, -1, -1);
      MEMORY[0x219A27C8C](v47, -1, -1);

    }
    else
    {
      v111 = *(void (**)(unint64_t, uint64_t))(v30 + 8);
      v111(v38, v29);

      swift_release_n();
    }
    v56 = v108 & 1;
    swift_beginAccess();
    static PSEStruct.pseTriggerOrigin = 0x636E657265666E69;
    qword_253F31BF0 = 0xEA00000000006465;
    swift_bridgeObjectRelease();
    v57 = v8[6];
    v58 = v103;
    v89 = v57;
    UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)v103);
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v59 = (_BYTE *)v107;
    v60 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v30 = v104;
    if ((v60 & 1) != 0)
    {
      v61 = v112;
      v62 = v58;
    }
    else
    {
      v61 = v112;
      v62 = v59;
    }
    v102(v61, v62, v29);
    v63 = v105;
    v111((unint64_t)v58, v29);
    v64 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v63 + 56);
    v64(v28, 1, 1, v29);
    v108 = v56;
    if ((v106 & 1) == 0)
    {
      v65 = v94;
      Date.addingTimeInterval(_:)();
      outlined destroy of Any?((uint64_t)v28, &demangling cache variable for type metadata for Date?);
      v64(v65, 0, 1, v29);
      v66 = (uint64_t)v65;
      v56 = v108;
      outlined init with take of Date?(v66, (uint64_t)v28, &demangling cache variable for type metadata for Date?);
    }
    v67 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))(*v113 + 288))(v112, v28, v110, v56);
    v28 = (_BYTE *)v67;
    v8 = *(_QWORD **)(v67 + 16);
    if (!v8)
      break;
    v107 = v29;
    v29 = *(unsigned __int8 *)(v11 + 80);
    a1 = v67 + ((v29 + 32) & ~v29);
    outlined init with copy of SiriUISession(a1, (uint64_t)v19);
    if (v8 == (_QWORD *)1)
    {
LABEL_12:
      v68 = v108 != 0;
      v69 = v96;
      outlined init with take of SiriUISession((uint64_t)v19, (uint64_t)v96);
      v70 = v99;
      outlined init with take of SiriUISession((uint64_t)v69, (uint64_t)v99);
      v71 = v98;
      outlined init with copy of SiriUISession((uint64_t)v70, (uint64_t)v98);
      v72 = (v29 + 48) & ~v29;
      v73 = (v97 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
      v74 = swift_allocObject();
      v75 = v110;
      *(_QWORD *)(v74 + 16) = v28;
      *(_QWORD *)(v74 + 24) = v75;
      *(_BYTE *)(v74 + 32) = v68;
      *(_QWORD *)(v74 + 40) = v113;
      outlined init with take of SiriUISession((uint64_t)v71, v74 + v72);
      v76 = (void (**)(uint64_t))(v74 + v73);
      v77 = v101;
      *v76 = v100;
      v76[1] = v77;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)((uint64_t)v28, partial apply for closure #2 in PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:), v74);
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of SiriUISession((uint64_t)v70, type metadata accessor for SiriUISession);
      outlined destroy of Any?((uint64_t)v109, &demangling cache variable for type metadata for Date?);
      v78 = v112;
      v79 = v107;
      return ((uint64_t (*)(_BYTE *, uint64_t))v111)(v78, v79);
    }
    v38 = 1;
    while (v38 < *((_QWORD *)v28 + 2))
    {
      outlined init with copy of SiriUISession(a1 + *(_QWORD *)(v11 + 72) * v38, (uint64_t)v16);
      if ((static Date.< infix(_:_:)() & 1) != 0)
      {
        outlined destroy of SiriUISession((uint64_t)v19, type metadata accessor for SiriUISession);
        outlined init with take of SiriUISession((uint64_t)v16, (uint64_t)v19);
      }
      else
      {
        outlined destroy of SiriUISession((uint64_t)v16, type metadata accessor for SiriUISession);
      }
      if (v8 == (_QWORD *)++v38)
        goto LABEL_12;
    }
    __break(1u);
LABEL_24:
    swift_once();
  }
  swift_bridgeObjectRelease();
  v80 = Logger.logObject.getter();
  v81 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v80, v81))
  {
    v82 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v82 = 0;
    _os_log_impl(&dword_218F54000, v80, v81, "There are no Siri UI events to submit.", v82, 2u);
    MEMORY[0x219A27C8C](v82, -1, -1);
  }

  v83 = (uint64_t)v91;
  Date.init()();
  UserDefaultsDomainProvider.lastCollectionDate.setter(v83);
  v84 = (uint64_t)v93;
  UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)&v93[*(int *)(v92 + 24)]);
  *(_BYTE *)v84 = 1;
  *(_QWORD *)(v84 + 8) = 0;
  v100(v84);
  outlined destroy of SiriUISession(v84, type metadata accessor for PostSiriEngagementCollectionResult);
  outlined destroy of Any?((uint64_t)v109, &demangling cache variable for type metadata for Date?);
  v78 = v112;
  v79 = v29;
  return ((uint64_t (*)(_QWORD, _QWORD))v111)(v78, v79);
}

uint64_t closure #2 in PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:)(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;

  v23 = a3;
  v22 = a2;
  v8 = type metadata accessor for PostSiriEngagementCollectionResult(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for engagement != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.engagement);
  swift_bridgeObjectRetain();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v21 = v8;
    v18 = v17;
    *(_DWORD *)v17 = 134217984;
    v24 = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_218F54000, v15, v16, "Successfully completed collection of %ld activities.", v18, 0xCu);
    v8 = v21;
    MEMORY[0x219A27C8C](v18, -1, -1);

    if ((v23 & 1) != 0)
      goto LABEL_9;
  }
  else
  {

    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0)
    {
LABEL_9:
      type metadata accessor for SiriUISession(0);
      Date.addingTimeInterval(_:)();
      goto LABEL_10;
    }
  }
  if (*(_QWORD *)(a1 + 16) >= v22)
    goto LABEL_9;
  Date.init()();
LABEL_10:
  UserDefaultsDomainProvider.lastCollectionDate.setter((uint64_t)v13);
  v19 = *(_QWORD *)(a1 + 16);
  UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)&v10[*(int *)(v8 + 24)]);
  *v10 = 1;
  *((_QWORD *)v10 + 1) = v19;
  a6(v10);
  return outlined destroy of SiriUISession((uint64_t)v10, type metadata accessor for PostSiriEngagementCollectionResult);
}

uint64_t PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  unint64_t v21;
  dispatch_group_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *);
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t (*)(uint64_t), uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  BOOL v46;
  uint8_t *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t (*v73)(void);
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  dispatch_group_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD aBlock[6];
  uint64_t v89;

  v4 = v3;
  v74 = a3;
  v73 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v72 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchQoS();
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v69 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.engagement);
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v51 = 0;
      _os_log_impl(&dword_218F54000, v49, v50, "There are no Siri UI events in Biome stream to submit.", v51, 2u);
      MEMORY[0x219A27C8C](v51, -1, -1);
    }

    return v73();
  }
  v64 = v13;
  v65 = v11;
  v66 = v10;
  v67 = v7;
  v68 = v6;
  v17 = swift_bridgeObjectRetain();
  v18 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18PostSiriEngagement0G9UISessionVGG_AH0I13SignalBuilderCs5NeverOTg506_sSi18fg13Engagement0B9i7VAA0D13jk32CIgyno_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgyno_Tf1cn_nTf4ng_n(v17, (void (*)(_QWORD, char *))partial apply for closure #1 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:), v4);
  swift_bridgeObjectRelease();
  v89 = 0;
  v19 = dispatch_group_create();
  if (v18 >> 62)
    goto LABEL_47;
  v76 = v18 & 0xFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v82 = v20;
  if (!v20)
    goto LABEL_49;
  v81 = v82;
  while (2)
  {
    v83 = v18 & 0xC000000000000001;
    swift_beginAccess();
    v21 = 0;
    v75 = v18 + 32;
    v80 = v19;
    v77 = v16;
    v78 = v18;
    v79 = v4;
    while (v83)
    {
      v23 = MEMORY[0x219A2756C](v21, v18);
      v24 = __OFADD__(v21, 1);
      v25 = v21 + 1;
      if (v24)
        goto LABEL_42;
LABEL_14:
      dispatch_group_enter(v19);
      v86 = v25;
      if (v25 >= v81)
      {
        v27 = type metadata accessor for SiriUISession(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v16, 1, 1, v27);
      }
      else
      {
        if (v83)
        {
          v26 = MEMORY[0x219A2756C](v25, v18);
        }
        else
        {
          if (v25 < 0)
            goto LABEL_45;
          if ((unint64_t)v25 >= *(_QWORD *)(v76 + 16))
            goto LABEL_46;
          v26 = *(_QWORD *)(v75 + 8 * v25);
          swift_retain();
        }
        (*(void (**)(void))(*(_QWORD *)v26 + 120))();
        swift_release();
      }
      v28 = swift_allocObject();
      *(_QWORD *)(v28 + 16) = MEMORY[0x24BEE4AF8];
      v18 = v28 + 16;
      v29 = *(uint64_t (**)(char *))(*(_QWORD *)v23 + 288);
      swift_retain();
      v30 = v19;
      v4 = v29(v16);
      v84 = v28 + 16;
      v85 = v30;
      if (v4 >> 62)
      {
        v31 = _CocoaArrayWrapper.endIndex.getter();
        if (!v31)
          goto LABEL_31;
      }
      else
      {
        v31 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v31)
          goto LABEL_31;
      }
      if (v31 < 1)
        goto LABEL_43;
      v32 = 0;
      v33 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t))(*(_QWORD *)v23 + 264);
      do
      {
        if ((v4 & 0xC000000000000001) != 0)
        {
          v34 = MEMORY[0x219A2756C](v32, v4);
        }
        else
        {
          v34 = *(_QWORD *)(v4 + 8 * v32 + 32);
          swift_retain();
        }
        v35 = swift_allocObject();
        *(_QWORD *)(v35 + 16) = v34;
        *(_QWORD *)(v35 + 24) = v28;
        swift_retain();
        swift_retain();
        v33(v32, partial apply for closure #1 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:), v35);
        swift_release();
        swift_release();
        ++v32;
      }
      while (v31 != v32);
LABEL_31:
      swift_bridgeObjectRelease();
      v36 = v84;
      swift_beginAccess();
      v37 = *(_QWORD *)v36;
      v38 = *(_QWORD *)(*(_QWORD *)v36 + 16);
      if (v38)
      {
        v39 = v89;
        v4 = v79;
        v40 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 264);
        swift_retain();
        v41 = swift_bridgeObjectRetain();
        v40(v41, v39);
        swift_release();
        v89 = *(_QWORD *)(v37 + 24 * v38 + 8);
        swift_retain();
        swift_release();
        v19 = v80;
        v16 = v77;
        v18 = v78;
      }
      else
      {
        v42 = one-time initialization token for engagement;
        swift_bridgeObjectRetain();
        v19 = v80;
        v4 = v79;
        if (v42 != -1)
          swift_once();
        v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Logger.engagement);
        v44 = Logger.logObject.getter();
        v45 = static os_log_type_t.info.getter();
        v46 = os_log_type_enabled(v44, v45);
        v18 = v78;
        if (v46)
        {
          v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v47 = 0;
          _os_log_impl(&dword_218F54000, v44, v45, "There are no SiriExecution events in SiriExecution Biome stream to submit.", v47, 2u);
          MEMORY[0x219A27C8C](v47, -1, -1);
        }

        v16 = v77;
      }
      v22 = v85;
      dispatch_group_leave(v85);
      swift_release();

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for SiriUISession?);
      v21 = v86;
      if (v86 == v82)
        goto LABEL_49;
    }
    if (v21 >= *(_QWORD *)(v76 + 16))
      goto LABEL_44;
    v23 = *(_QWORD *)(v75 + 8 * v21);
    swift_retain();
    v24 = __OFADD__(v21, 1);
    v25 = v21 + 1;
    if (!v24)
      goto LABEL_14;
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    v76 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
    v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v82 = v53;
    if (v53)
    {
      swift_bridgeObjectRetain();
      v81 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
LABEL_49:
  swift_bridgeObjectRelease_n();
  type metadata accessor for OS_dispatch_queue();
  v54 = v65;
  v55 = v64;
  v56 = v66;
  (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, *MEMORY[0x24BEE5490], v66);
  v57 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
  v58 = swift_allocObject();
  v59 = v74;
  *(_QWORD *)(v58 + 16) = v73;
  *(_QWORD *)(v58 + 24) = v59;
  aBlock[4] = partial apply for closure #1 in PostSiriEngagementCollection.perform(completion:);
  aBlock[5] = v58;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor;
  v60 = _Block_copy(aBlock);
  swift_retain();
  v61 = v69;
  static DispatchQoS.unspecified.getter();
  v87 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v62 = v72;
  v63 = v68;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v60);

  (*(void (**)(char *, uint64_t))(v67 + 8))(v62, v63);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v61, v71);
  swift_release();
  return swift_release();
}

uint64_t PostSiriEngagementMetricsCollector.calculateSuccessAndSubmit(allPseTasks:previousTask:)(uint64_t result, uint64_t a2)
{
  _QWORD **v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  void (*v18)(unint64_t, uint64_t);
  uint64_t (*v19)(uint64_t);
  uint64_t (*v20)(void);
  uint64_t (*v21)(uint64_t);
  uint64_t v22;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = v2;
    v6 = result;
    type metadata accessor for TaskSuccessCalculator();
    v20 = (uint64_t (*)(void))(*v4)[24];
    v21 = (uint64_t (*)(uint64_t))(*v4)[27];
    v19 = (uint64_t (*)(uint64_t))(*v4)[21];
    v22 = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    v7 = (_QWORD **)(v6 + 48);
    do
    {
      v8 = (uint64_t)*(v7 - 2);
      v9 = (unint64_t)*(v7 - 1);
      v10 = *v7;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v11 = static TaskSuccessCalculator.calculateTaskSuccess(signals:task:)(v9, v8);
      if ((v21(v11) & 1) != 0)
      {
        v12 = swift_retain();
        specialized static SiriTaskEngagementFeatureDonator.donate(siriTask:previousTask:taskFeatureSets:)(v12, v22, v10);
        swift_release();
        if (one-time initialization token for engagement != -1)
          swift_once();
        v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.engagement);
        v14 = Logger.logObject.getter();
        v15 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v16 = 0;
          _os_log_impl(&dword_218F54000, v14, v15, "Successfully wrote task engagement features to featurestore", v16, 2u);
          MEMORY[0x219A27C8C](v16, -1, -1);
        }

        swift_release();
        swift_retain();
        v22 = v8;
      }
      v17 = v20();
      if ((v17 & 1) != 0)
      {
        v18 = *(void (**)(unint64_t, uint64_t))(*v4[2] + 96);
        swift_retain();
        v18(v9, v8);
        v17 = swift_release();
      }
      if ((v19(v17) & 1) != 0)
        specialized PSESELFEmitter.emitPSESELFInstrumentation(signals:task:)(v9, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v7 += 3;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t (*)(_QWORD *), uint64_t);
  uint64_t v8;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = *(void (**)(uint64_t, uint64_t (*)(_QWORD *), uint64_t))(*(_QWORD *)a1 + 280);
  swift_retain();
  v8 = swift_retain();
  v7(v8, partial apply for closure #1 in closure #1 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:), v6);
  return swift_release();
}

uint64_t closure #1 in closure #1 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v4 = (_QWORD **)(a2 + 16);
  if (*a1)
  {
    v6 = a1[1];
    v5 = a1[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
    v6 = MEMORY[0x24BEE4AF8];
  }
  swift_beginAccess();
  v7 = *v4;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *v4 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v4 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[3 * v10];
  v11[4] = a3;
  v11[5] = v6;
  v11[6] = v5;
  return swift_endAccess();
}

uint64_t PostSiriEngagementMetricsCollector.signalFactoryForIntentEvents(group:taskName:)(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *countAndFlagsBits;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  char v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  char v30;
  uint64_t v31;
  id v32;
  void *v33;
  Swift::String v34;
  unint64_t v35;
  Swift::String v36;

  v6 = v3;
  type metadata accessor for AppIntentSignalFactory();
  v10 = swift_allocObject();
  if (!(a1 >> 62))
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_3;
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_29;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v12 = (id)MEMORY[0x219A2756C](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_37:
      if (a3 == 0x7261646E656C6143 && a1 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();

      }
      else
      {
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();

        if ((v30 & 1) == 0)
          return v10;
      }
      swift_release();
      type metadata accessor for CalendarEventSignalFactory();
      return swift_allocObject();
    }
    v12 = *(id *)(a1 + 32);
  }
  v4 = v12;
  v13 = swift_bridgeObjectRelease();
  v14 = (_QWORD *)MEMORY[0x219A27818](v13);
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(v4, &v34._countAndFlagsBits);
  if (v6)
  {
    objc_autoreleasePoolPop(v14);
    swift_release();

    return (uint64_t)v14;
  }
  v35 = a3;
  objc_autoreleasePoolPop(v14);
  countAndFlagsBits = (void *)v34._countAndFlagsBits;
  v15 = objc_msgSend((id)v34._countAndFlagsBits, sel_intent);
  v16 = objc_msgSend(v15, sel_typeName);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  v36._countAndFlagsBits = v17;
  v36._object = v19;
  if (specialized SynapseTypesAlarmRelatedConstants.init(rawValue:)(v36) != 4)
  {

    swift_release();
    type metadata accessor for AlarmSignalFactory();
    return swift_allocObject();
  }
  v32 = v15;
  v33 = countAndFlagsBits;
  v20 = String.lowercased()();
  v34 = v20;
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();

    swift_release();
    type metadata accessor for MessagesIntentSignalFactory();
    return swift_allocObject();
  }
  v34 = v20;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0
    || (v34 = v20, (StringProtocol.contains<A>(_:)() & 1) != 0)
    || (v34 = v20, (StringProtocol.contains<A>(_:)() & 1) != 0))
  {

    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for CallsIntentSignalFactory();
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = 0;
    return (uint64_t)v14;
  }
  v34 = v20;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0 || (v34 = v20, (StringProtocol.contains<A>(_:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for MapsIntentSignalFactory();
    v14 = (_QWORD *)swift_allocObject();
    swift_release();

    v14[2] = &outlined read-only object #0 of MapsIntentSignalFactory.init();
    return (uint64_t)v14;
  }
  v34 = v20;
  v21 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
    a2 = v15;
    v22 = objc_msgSend(v15, sel_domain);
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    a1 = v23;

    if (a3 == 0x636973754DLL && a1 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MusicSearchIntentSignalFactory();
      v14 = (_QWORD *)swift_allocObject();
      *((_BYTE *)v14 + 16) = 100;

      swift_release();
      v14[3] = &outlined read-only object #0 of PostSiriEngagementMetricsCollector.signalFactoryForIntentEvents(group:taskName:);
      return (uint64_t)v14;
    }
    goto LABEL_37;
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.engagement);
  v25 = v35;
  swift_bridgeObjectRetain_n();
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v34._countAndFlagsBits = v31;
    *(_DWORD *)v28 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)a2, v25, &v34._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_218F54000, v26, v27, "Intent object attached to the task with taskName (%s).", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x219A27C8C](v31, -1, -1);
    MEMORY[0x219A27C8C](v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  return v10;
}

uint64_t PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t i;
  id v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  void *v47[2];
  id v48;
  uint64_t v49;

  v42 = a3;
  v7 = type metadata accessor for ReliabilityCategory();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = specialized static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:)(a1, a2);
  v12 = v11;
  v49 = MEMORY[0x24BEE4AF8];
  v13 = v11 >> 62;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v46 = a4;
  v44 = v8;
  v45 = v7;
  v43 = v10;
  if (v14)
  {
    if (v14 < 1)
    {
      __break(1u);
      goto LABEL_46;
    }
    v15 = 0;
    v16 = v12 & 0xC000000000000001;
    do
    {
      if (v16)
        v17 = (id)MEMORY[0x219A2756C](v15, v12);
      else
        v17 = *(id *)(v12 + 8 * v15 + 32);
      v18 = v17;
      if (objc_msgSend(v17, sel_starting))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        a4 = *(_QWORD *)(v49 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
      ++v15;
    }
    while (v14 != v15);
    swift_bridgeObjectRelease();
    v8 = v49;
    v49 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    for (i = 0; i != v14; ++i)
    {
      if (v16)
        v20 = (id)MEMORY[0x219A2756C](i, v12);
      else
        v20 = *(id *)(v12 + 8 * i + 32);
      v7 = (unint64_t)v20;
      if ((objc_msgSend(v20, sel_starting) & 1) != 0)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        a4 = *(_QWORD *)(v49 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v10 = v49;
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    v8 = MEMORY[0x24BEE4AF8];
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  a1 = __swift_project_value_buffer(v21, (uint64_t)static Logger.engagement);
  swift_bridgeObjectRetain_n();
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v7 = swift_slowAlloc();
    *(_DWORD *)v7 = 134217984;
    if (v13)
    {
      swift_bridgeObjectRetain();
      a4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      a4 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v49 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_218F54000, v22, v23, "UISessions Count = %ld", (uint8_t *)v7, 0xCu);
    MEMORY[0x219A27C8C](v7, -1, -1);
    swift_bridgeObjectRelease();

    if (!v14)
      goto LABEL_43;
LABEL_29:
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      v24 = *(_QWORD *)(v8 + 16);
      if (v24)
      {
LABEL_32:
        v49 = MEMORY[0x24BEE4B00];
        if (v10 < 0 || (v10 & 0x4000000000000000) != 0)
        {
          swift_retain();
          v25 = _CocoaArrayWrapper.endIndex.getter();
          if (v25)
            goto LABEL_35;
        }
        else
        {
          v25 = *(_QWORD *)(v10 + 16);
          swift_retain();
          if (v25)
          {
LABEL_35:
            if (v25 < 1)
              goto LABEL_71;
            a1 = 0;
            a4 = 0;
            do
            {
              if ((v10 & 0xC000000000000001) != 0)
                v26 = (id)MEMORY[0x219A2756C](a1, v10);
              else
                v26 = *(id *)(v10 + 8 * a1 + 32);
              v7 = (unint64_t)v26;
              ++a1;
              v48 = v26;
              closure #3 in PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(&v48, (uint64_t)&v49);

            }
            while (v25 != a1);
LABEL_51:
            swift_release_n();
            v48 = (id)MEMORY[0x24BEE4AF8];
            if (v24 >= 1)
            {
              v7 = v8 & 0xC000000000000001;
              swift_retain();
              v32 = 0;
              do
              {
                if (v7)
                  v33 = (id)MEMORY[0x219A2756C](v32, v8);
                else
                  v33 = *(id *)(v8 + 8 * v32 + 32);
                v34 = v33;
                ++v32;
                v47[0] = v33;
                closure #4 in PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(v47, &v49, (unint64_t *)&v48);

              }
              while (v24 != v32);
              swift_release_n();
              v25 = (uint64_t)v48;
              v47[0] = v48;
              swift_bridgeObjectRetain_n();
              specialized MutableCollection<>.sort(by:)((_QWORD **)v47);
              swift_bridgeObjectRelease_n();
              a1 = (uint64_t)v47[0];
              if ((v46 & 1) != 0)
                goto LABEL_68;
              if ((v42 & 0x8000000000000000) == 0)
              {
                v25 = specialized Collection.prefix(_:)(v42, (uint64_t)v47[0]);
                a1 = v35;
                a4 = v36;
                v7 = v37;
                if ((v37 & 1) == 0)
                {
LABEL_60:
                  a1 = specialized _copyCollectionToContiguousArray<A>(_:)(v25, a1, a4, v7);
LABEL_67:
                  swift_unknownObjectRelease();
LABEL_68:
                  swift_bridgeObjectRelease();
                  return a1;
                }
                type metadata accessor for __ContiguousArrayStorageBase();
                swift_unknownObjectRetain_n();
                v38 = swift_dynamicCastClass();
                if (!v38)
                {
                  swift_unknownObjectRelease();
                  v38 = MEMORY[0x24BEE4AF8];
                }
                v39 = *(_QWORD *)(v38 + 16);
                swift_release();
                if (!__OFSUB__(v7 >> 1, a4))
                {
                  if (v39 == (v7 >> 1) - a4)
                  {
                    a1 = swift_dynamicCastClass();
                    if (!a1)
                    {
                      swift_unknownObjectRelease();
                      a1 = MEMORY[0x24BEE4AF8];
                    }
                    goto LABEL_67;
                  }
                  goto LABEL_74;
                }
LABEL_73:
                __break(1u);
LABEL_74:
                swift_unknownObjectRelease();
                goto LABEL_60;
              }
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }
            __break(1u);
LABEL_71:
            __break(1u);
            goto LABEL_72;
          }
        }
        a4 = 0;
        goto LABEL_51;
      }
LABEL_47:
      swift_release();
      swift_release();
      v27 = *MEMORY[0x24BEA7E88];
      v28 = type metadata accessor for SiriUIEventDataIssues();
      v29 = v43;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v43, v27, v28);
      v31 = v44;
      v30 = v45;
      (*(void (**)(uint64_t, _QWORD, unint64_t))(v44 + 104))(v29, *MEMORY[0x24BEA7FF8], v45);
      Logger.debug(_:_:)(0xD000000000000028, 0x8000000218FC0410, v29);
      (*(void (**)(uint64_t, unint64_t))(v31 + 8))(v29, v30);
      return MEMORY[0x24BEE4AF8];
    }
LABEL_46:
    swift_retain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v24)
      goto LABEL_32;
    goto LABEL_47;
  }

  swift_bridgeObjectRelease_n();
  if (v14)
    goto LABEL_29;
LABEL_43:
  swift_release();
  swift_release();
  return MEMORY[0x24BEE4AF8];
}

uint64_t closure #3 in PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(id *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, _QWORD, uint64_t, uint64_t);
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v54 = a2;
  v3 = type metadata accessor for ReliabilityCategory();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v51 - v11;
  v13 = type metadata accessor for Date();
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v55 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v51 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v56 = (char *)&v51 - v19;
  v20 = *a1;
  v21 = objc_msgSend(*a1, sel_uuid);
  if (v21)
  {
    v22 = v21;
    v52 = v10;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v24;

    v26 = HIBYTE(v25) & 0xF;
    v53 = v23;
    if ((v25 & 0x2000000000000000) == 0)
      v26 = v23 & 0xFFFFFFFFFFFFLL;
    if (v26)
    {
      v27 = objc_msgSend(v20, sel_absoluteTimestamp);
      if (v27)
      {
        v28 = v27;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v30 = v57;
        v29 = v58;
        v31 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
        v31(v12, v18, v58);
        v32 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56);
        v32(v12, 0, 1, v29);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v12, 1, v29) != 1)
        {
          v33 = v56;
          v31(v56, v12, v29);
          v34 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
          v35 = (uint64_t)v52;
          v34(v52, v33, v29);
          v32((char *)v35, 0, 1, v29);
          swift_bridgeObjectRetain();
          specialized Dictionary.subscript.setter(v35, v53, v25);
          if (one-time initialization token for engagement != -1)
            swift_once();
          v36 = type metadata accessor for Logger();
          __swift_project_value_buffer(v36, (uint64_t)static Logger.engagement);
          v37 = v55;
          v34(v55, v33, v29);
          swift_bridgeObjectRetain();
          v38 = Logger.logObject.getter();
          v39 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v38, v39))
          {
            v40 = swift_slowAlloc();
            v54 = swift_slowAlloc();
            v60 = v54;
            *(_DWORD *)v40 = 136315394;
            swift_bridgeObjectRetain();
            v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v25, &v60);
            v41 = v29;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v40 + 12) = 2080;
            lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
            v42 = dispatch thunk of CustomStringConvertible.description.getter();
            v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v60);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v44 = *(void (**)(char *, uint64_t))(v30 + 8);
            v44(v37, v29);
            _os_log_impl(&dword_218F54000, v38, v39, "UISessionEnd has %s, %s", (uint8_t *)v40, 0x16u);
            v45 = v54;
            swift_arrayDestroy();
            MEMORY[0x219A27C8C](v45, -1, -1);
            MEMORY[0x219A27C8C](v40, -1, -1);

            return ((uint64_t (*)(char *, uint64_t))v44)(v56, v41);
          }
          else
          {

            v50 = *(void (**)(char *, uint64_t))(v30 + 8);
            v50(v37, v29);
            swift_bridgeObjectRelease_n();
            return ((uint64_t (*)(char *, uint64_t))v50)(v33, v29);
          }
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v12, 1, 1, v58);
      }
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Date?);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static Logger.engagement);
  v48 = *MEMORY[0x24BEA7E98];
  v49 = type metadata accessor for SiriUIEventDataIssues();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v6, v48, v49);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEA7FF8], v3);
  Logger.error(_:_:)(0xD00000000000001ELL, 0x8000000218FC0520, (uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

id closure #4 in PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(void **a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  id result;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  _QWORD *v44;
  void (*v45)(char *, char *, uint64_t);
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  id v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  void (*v71)(uint64_t, char *, uint64_t);
  int *v72;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void (*v90)(char *, uint64_t);
  void (*v91)(char *, uint64_t, uint64_t, uint64_t);
  void (*v92)(char *, char *, uint64_t);
  void (*v93)(char *, char *, uint64_t);
  unsigned int (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v106 = a3;
  v99 = a2;
  v5 = type metadata accessor for SiriUISession(0);
  v107 = *(_QWORD *)(v5 - 8);
  v108 = (int *)v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v105 = (uint64_t)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v97 = (uint64_t)&v91 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v103 = (uint64_t)&v91 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v104 = (char *)&v91 - v12;
  v13 = type metadata accessor for ReliabilityCategory();
  v98 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v91 - v20;
  v22 = type metadata accessor for Date();
  v112 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v102 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v101 = (char *)&v91 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v100 = (char *)&v91 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v111 = (char *)&v91 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v91 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v110 = (char *)&v91 - v34;
  v35 = *a1;
  result = objc_msgSend(v35, sel_uuid);
  if (!result)
    return result;
  v37 = result;
  v95 = v13;
  v109 = v3;
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v40 = v39;

  v41 = HIBYTE(v40) & 0xF;
  v96 = v38;
  if ((v40 & 0x2000000000000000) == 0)
    v41 = v38 & 0xFFFFFFFFFFFFLL;
  if (!v41)
    return (id)swift_bridgeObjectRelease();
  v42 = objc_msgSend(v35, sel_absoluteTimestamp);
  if (!v42)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 56))(v21, 1, 1, v22);
    goto LABEL_12;
  }
  v43 = v42;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v44 = (_QWORD *)v112;
  v45 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
  v45(v21, v33, v22);
  v46 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v44[7];
  v46(v21, 0, 1, v22);
  v94 = (unsigned int (*)(char *, uint64_t, uint64_t))v44[6];
  if (v94(v21, 1, v22) == 1)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return (id)outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for Date?);
  }
  v91 = v46;
  v47 = v110;
  v93 = v45;
  v45(v110, v21, v22);
  v48 = (void (*)(char *, char *, uint64_t))v44[2];
  v48(v111, v47, v22);
  v49 = *v99;
  v50 = *(_QWORD *)(*v99 + 16);
  v92 = v48;
  if (!v50)
  {
    v91(v19, 1, 1, v22);
    v52 = v95;
LABEL_16:
    outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for Date?);
    v55 = (uint64_t)v104;
    if (one-time initialization token for engagement != -1)
      swift_once();
    v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Logger.engagement);
    v57 = *MEMORY[0x24BEA7E90];
    v58 = type metadata accessor for SiriUIEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 104))(v15, v57, v58);
    v59 = v98;
    (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v15, *MEMORY[0x24BEA7FF8], v52);
    Logger.error(_:_:)(0xD000000000000017, 0x8000000218FC0500, (uint64_t)v15);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v15, v52);
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v51 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v40);
  v52 = v95;
  if ((v53 & 1) != 0)
  {
    v48(v19, (char *)(*(_QWORD *)(v49 + 56) + *(_QWORD *)(v112 + 72) * v51), v22);
    v54 = 0;
  }
  else
  {
    v54 = 1;
  }
  v91(v19, v54, 1, v22);
  swift_bridgeObjectRelease();
  if (v94(v19, 1, v22) == 1)
    goto LABEL_16;
  v60 = v111;
  (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v22);
  v93(v60, v19, v22);
  v55 = (uint64_t)v104;
LABEL_20:
  v61 = v102;
  v62 = v100;
  v63 = v92;
  v92(v100, v110, v22);
  v64 = v101;
  v63(v101, v111, v22);
  Date.addingTimeInterval(_:)();
  v65 = objc_msgSend(v35, sel_sessionID);
  if (v65)
  {
    v66 = v65;
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v69 = v68;

  }
  else
  {
    v67 = 0;
    v69 = 0xE000000000000000;
  }
  v70 = v62;
  v71 = (void (*)(uint64_t, char *, uint64_t))v93;
  v93((char *)v55, v70, v22);
  v72 = v108;
  v71(v55 + v108[5], v64, v22);
  v71(v55 + v72[6], v61, v22);
  v73 = (uint64_t *)(v55 + v72[7]);
  *v73 = v67;
  v73[1] = v69;
  v74 = (_QWORD *)(v55 + v72[8]);
  *v74 = v96;
  v74[1] = v40;
  if (one-time initialization token for engagement != -1)
    swift_once();
  v75 = type metadata accessor for Logger();
  __swift_project_value_buffer(v75, (uint64_t)static Logger.engagement);
  v76 = v103;
  outlined init with copy of SiriUISession(v55, v103);
  v77 = Logger.logObject.getter();
  v78 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v77, v78))
  {
    v79 = (uint8_t *)swift_slowAlloc();
    v80 = swift_slowAlloc();
    v114 = v80;
    *(_DWORD *)v79 = 136315138;
    v104 = (char *)(v79 + 4);
    outlined init with copy of SiriUISession(v76, v97);
    v81 = String.init<A>(describing:)();
    v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriUISession(v76, type metadata accessor for SiriUISession);
    _os_log_impl(&dword_218F54000, v77, v78, "UISession: %s", v79, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x219A27C8C](v80, -1, -1);
    MEMORY[0x219A27C8C](v79, -1, -1);
  }
  else
  {
    outlined destroy of SiriUISession(v76, type metadata accessor for SiriUISession);
  }

  v84 = v105;
  v83 = v106;
  outlined init with copy of SiriUISession(v55, v105);
  v85 = *v83;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v83 = v85;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v85 + 16) + 1, 1, v85);
    *v83 = v85;
  }
  v87 = v112;
  v89 = *(_QWORD *)(v85 + 16);
  v88 = *(_QWORD *)(v85 + 24);
  if (v89 >= v88 >> 1)
  {
    v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1, v89 + 1, 1, v85);
    *v83 = v85;
  }
  *(_QWORD *)(v85 + 16) = v89 + 1;
  outlined init with take of SiriUISession(v84, v85+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v89);
  outlined destroy of SiriUISession(v55, type metadata accessor for SiriUISession);
  v90 = *(void (**)(char *, uint64_t))(v87 + 8);
  v90(v111, v22);
  return (id)((uint64_t (*)(char *, uint64_t))v90)(v110, v22);
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      type metadata accessor for SiriUISession(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t PostSiriEngagementMetricsCollector.generateBiomeFetcherConfiguration(uiSession:nextUiSession:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  void (*v33)(char *);
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(uint64_t, char *, uint64_t);
  uint64_t Configuration;
  NSObject *v60;
  uint64_t v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD v67[2];
  uint64_t v68;
  int v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint8_t *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[3];
  uint64_t v84[4];

  v79 = a3;
  v76 = type metadata accessor for Logger();
  v73 = *(uint8_t **)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v74 = (char *)v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SiriUISession(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v77 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v67 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v67 - v16;
  v18 = type metadata accessor for Date();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v75 = (char *)v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v67 - v21;
  v23 = a1 + *(int *)(v9 + 24);
  v81 = v24;
  v78 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v78((char *)v67 - v21, v23, v18);
  outlined init with copy of SiriUISession?(a2, (uint64_t)v8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v80 = v9;
  if (v25(v8, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for SiriUISession?);
    v26 = v81;
LABEL_9:
    v29 = a1;
    v30 = v76;
    goto LABEL_10;
  }
  outlined init with take of SiriUISession((uint64_t)v8, (uint64_t)v17);
  v27 = static Date.> infix(_:_:)();
  v26 = v81;
  v28 = (uint64_t)v17;
  if ((v27 & 1) == 0)
  {
    outlined destroy of SiriUISession((uint64_t)v17, type metadata accessor for SiriUISession);
    goto LABEL_9;
  }
  v29 = a1;
  if (one-time initialization token for engagement != -1)
    swift_once();
  v30 = v76;
  v31 = __swift_project_value_buffer(v76, (uint64_t)static Logger.engagement);
  v32 = v73;
  v33 = (void (*)(char *))*((_QWORD *)v73 + 2);
  v34 = v74;
  v72 = v31;
  v33(v74);
  outlined init with copy of SiriUISession(a1, (uint64_t)v15);
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.info.getter();
  v71 = v35;
  v69 = v36;
  v37 = os_log_type_enabled(v35, v36);
  v70 = v28;
  if (v37)
  {
    v38 = swift_slowAlloc();
    v68 = swift_slowAlloc();
    v84[0] = v68;
    *(_DWORD *)v38 = 136315394;
    v67[0] = v38 + 4;
    v67[1] = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
    v39 = dispatch thunk of CustomStringConvertible.description.getter();
    v83[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriUISession((uint64_t)v15, type metadata accessor for SiriUISession);
    *(_WORD *)(v38 + 12) = 2080;
    swift_beginAccess();
    v41 = dispatch thunk of CustomStringConvertible.description.getter();
    v83[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v43 = v71;
    _os_log_impl(&dword_218F54000, v71, (os_log_type_t)v69, "More than one session in time range [%s,%s]", (uint8_t *)v38, 0x16u);
    v44 = v68;
    swift_arrayDestroy();
    MEMORY[0x219A27C8C](v44, -1, -1);
    v45 = v38;
    v28 = v70;
    MEMORY[0x219A27C8C](v45, -1, -1);

    (*((void (**)(char *, uint64_t))v32 + 1))(v74, v30);
  }
  else
  {
    outlined destroy of SiriUISession((uint64_t)v15, type metadata accessor for SiriUISession);

    (*((void (**)(char *, uint64_t))v32 + 1))(v34, v30);
  }
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 24))(v22, v28, v18);
  v60 = Logger.logObject.getter();
  v61 = v28;
  v62 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v60, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    v74 = (char *)swift_slowAlloc();
    v84[0] = (uint64_t)v74;
    *(_DWORD *)v63 = 136315138;
    v73 = v63 + 4;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
    v64 = dispatch thunk of CustomStringConvertible.description.getter();
    v83[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_218F54000, v60, v62, "Setting postEndDate to %s", v63, 0xCu);
    v66 = v74;
    swift_arrayDestroy();
    MEMORY[0x219A27C8C](v66, -1, -1);
    MEMORY[0x219A27C8C](v63, -1, -1);

    outlined destroy of SiriUISession(v70, type metadata accessor for SiriUISession);
  }
  else
  {

    outlined destroy of SiriUISession(v61, type metadata accessor for SiriUISession);
  }
LABEL_10:
  v46 = (uint64_t)v77;
  swift_beginAccess();
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v47 = dispatch thunk of static Comparable.< infix(_:_:)();
  outlined init with copy of SiriUISession(v29, v46);
  if ((v47 & 1) != 0)
  {
    v48 = dispatch thunk of static Comparable.< infix(_:_:)();
    outlined destroy of SiriUISession(v46, type metadata accessor for SiriUISession);
    if ((v48 & 1) != 0)
      goto LABEL_19;
  }
  else
  {
    outlined destroy of SiriUISession(v46, type metadata accessor for SiriUISession);
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.engagement);
  v49 = Logger.logObject.getter();
  v50 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc();
    v52 = swift_slowAlloc();
    v83[0] = v52;
    *(_DWORD *)v51 = 136315138;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
    v53 = dispatch thunk of CustomStringConvertible.description.getter();
    v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v83);
    v26 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_218F54000, v49, v50, "PostSiri Fetch asking for <= 0s slice [%s]", v51, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x219A27C8C](v52, -1, -1);
    MEMORY[0x219A27C8C](v51, -1, -1);
  }

  v55 = v75;
  Date.addingTimeInterval(_:)();
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v22, v55, v18);
LABEL_19:
  v57 = (void (*)(uint64_t, char *, uint64_t))v78;
  v56 = v79;
  v78(v79, v29, v18);
  Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  v57((uint64_t)&v56[*(int *)(Configuration + 20)], v22, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v22, v18);
}

uint64_t PostSiriEngagementMetricsCollector.fetchDonatedEvents(biomeFetcherConfiguration:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t Configuration;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v18 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v18 - v11, a1, v6);
  Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  v13(v10, a1 + *(int *)(Configuration + 20), v6);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  swift_retain();
  specialized static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)((uint64_t)v12, (uint64_t)v10, (uint64_t)partial apply for closure #1 in PostSiriEngagementMetricsCollector.fetchDonatedEvents(biomeFetcherConfiguration:completion:), v15);
  swift_release();
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  return ((uint64_t (*)(char *, uint64_t))v16)(v12, v6);
}

uint64_t PostSiriEngagementMetricsCollector.fetchSiriExecutionEvents(biomeFetcherConfiguration:)(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + *(int *)(type metadata accessor for PSEBiomeFetchConfiguration() + 20);
  return specialized static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(a1, v2);
}

uint64_t PostSiriEngagementMetricsCollector.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t PostSiriEngagementMetricsCollector.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t PostSiriEngagementMetricsCollector.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for SiriUISession(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for ProtoTaskEngagementFeatureSet() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::Int v19;
  unint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  Swift::Int v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  Swift::Int v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Int v49;
  Swift::Int v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  Swift::Int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  char v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  Swift::Int v125;
  uint64_t v126;
  Swift::Int v127;
  uint64_t v128;
  Swift::Int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  Swift::Int v136;
  _QWORD *v137;
  uint64_t v138;
  Swift::Int v139;

  v2 = v1;
  v4 = type metadata accessor for SiriUISession(0);
  v131 = *(_QWORD *)(v4 - 8);
  v132 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v128 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v138 = (uint64_t)&v123 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v135 = (uint64_t)&v123 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v134 = (uint64_t)&v123 - v11;
  v12 = a1[1];
  result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_140;
    if (v12)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_148;
  v125 = result;
  if (v12 < 2)
  {
    v18 = (char *)MEMORY[0x24BEE4AF8];
    v130 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
    v124 = MEMORY[0x24BEE4AF8];
    if (v12 != 1)
    {
      v20 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_106:
      if (v20 >= 2)
      {
        v116 = *a1;
        do
        {
          v117 = v20 - 2;
          if (v20 < 2)
            goto LABEL_135;
          if (!v116)
            goto LABEL_147;
          v118 = v18;
          v119 = *(_QWORD *)&v18[16 * v117 + 32];
          v120 = *(_QWORD *)&v18[16 * v20 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v116 + *(_QWORD *)(v131 + 72) * v119, v116 + *(_QWORD *)(v131 + 72) * *(_QWORD *)&v18[16 * v20 + 16], v116 + *(_QWORD *)(v131 + 72) * v120, v130);
          if (v2)
            break;
          if (v120 < v119)
            goto LABEL_136;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v118 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
          if (v117 >= *((_QWORD *)v118 + 2))
            goto LABEL_137;
          v121 = &v118[16 * v117 + 32];
          *(_QWORD *)v121 = v119;
          *((_QWORD *)v121 + 1) = v120;
          v122 = *((_QWORD *)v118 + 2);
          if (v20 > v122)
            goto LABEL_138;
          memmove(&v118[16 * v20 + 16], &v118[16 * v20 + 32], 16 * (v122 - v20));
          *((_QWORD *)v118 + 2) = v122 - 1;
          v20 = v122 - 1;
          v18 = v118;
        }
        while (v122 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v124 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v15 = v14 >> 1;
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v131 + 80);
    v124 = v16;
    v130 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v18 = (char *)MEMORY[0x24BEE4AF8];
  v137 = a1;
  while (1)
  {
    v21 = v19;
    v22 = v19 + 1;
    if (v19 + 1 >= v12)
    {
      v38 = v19 + 1;
      goto LABEL_58;
    }
    v126 = v2;
    v23 = *a1;
    v24 = *(_QWORD *)(v131 + 72);
    v25 = v134;
    outlined init with copy of SiriUISession(*a1 + v24 * v22, v134);
    v26 = v23 + v24 * v21;
    v129 = v21;
    v27 = v135;
    outlined init with copy of SiriUISession(v26, v135);
    LODWORD(v136) = static Date.< infix(_:_:)();
    outlined destroy of SiriUISession(v27, type metadata accessor for SiriUISession);
    v21 = v129;
    outlined destroy of SiriUISession(v25, type metadata accessor for SiriUISession);
    v28 = v21 + 2;
    v139 = v24;
    v133 = v23;
    if (v21 + 2 >= v12)
    {
      v31 = v21 + 2;
      v37 = v24;
      if ((v136 & 1) == 0)
        goto LABEL_37;
    }
    else
    {
      v29 = v24 * v22;
      v30 = v23;
      v31 = v28;
      v32 = v24 * v28;
      do
      {
        v33 = v12;
        v34 = v134;
        outlined init with copy of SiriUISession(v30 + v32, v134);
        v35 = v135;
        outlined init with copy of SiriUISession(v30 + v29, v135);
        v36 = static Date.< infix(_:_:)();
        outlined destroy of SiriUISession(v35, type metadata accessor for SiriUISession);
        outlined destroy of SiriUISession(v34, type metadata accessor for SiriUISession);
        if (((v136 ^ v36) & 1) != 0)
        {
          a1 = v137;
          v21 = v129;
          v12 = v33;
          v37 = v139;
          if ((v136 & 1) == 0)
            goto LABEL_37;
          goto LABEL_24;
        }
        v37 = v139;
        v30 += v139;
        ++v31;
        v12 = v33;
      }
      while (v33 != v31);
      v31 = v33;
      a1 = v137;
      v21 = v129;
      if ((v136 & 1) == 0)
      {
LABEL_37:
        v38 = v31;
        break;
      }
    }
LABEL_24:
    if (v31 < v21)
      goto LABEL_141;
    v38 = v31;
    if (v21 >= v31)
      break;
    v136 = v12;
    v123 = v18;
    v39 = 0;
    v40 = v37 * (v31 - 1);
    v41 = v21;
    v42 = v31 * v37;
    v43 = v41;
    v44 = v41 * v37;
    v45 = v133;
    do
    {
      if (v43 != v38 + v39 - 1)
      {
        if (!v45)
          goto LABEL_146;
        outlined init with take of SiriUISession(v45 + v44, v128);
        if (v44 < v40 || v45 + v44 >= (unint64_t)(v45 + v42))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v44 != v40)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        outlined init with take of SiriUISession(v128, v45 + v40);
        a1 = v137;
        v38 = v31;
        v37 = v139;
      }
      ++v43;
      --v39;
      v40 -= v37;
      v42 -= v37;
      v44 += v37;
    }
    while (v43 < v38 + v39);
    v18 = v123;
    v2 = v126;
    v21 = v129;
    v12 = v136;
    if (v38 < v136)
      goto LABEL_41;
LABEL_58:
    if (v38 < v21)
      goto LABEL_134;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v136 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v65 = *((_QWORD *)v18 + 2);
    v64 = *((_QWORD *)v18 + 3);
    v20 = v65 + 1;
    if (v65 >= v64 >> 1)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v20;
    v66 = v18 + 32;
    v67 = &v18[16 * v65 + 32];
    v68 = v136;
    *(_QWORD *)v67 = v21;
    *((_QWORD *)v67 + 1) = v68;
    if (v65)
    {
      while (1)
      {
        v69 = v20 - 1;
        if (v20 >= 4)
        {
          v74 = &v66[16 * v20];
          v75 = *((_QWORD *)v74 - 8);
          v76 = *((_QWORD *)v74 - 7);
          v80 = __OFSUB__(v76, v75);
          v77 = v76 - v75;
          if (v80)
            goto LABEL_123;
          v79 = *((_QWORD *)v74 - 6);
          v78 = *((_QWORD *)v74 - 5);
          v80 = __OFSUB__(v78, v79);
          v72 = v78 - v79;
          v73 = v80;
          if (v80)
            goto LABEL_124;
          v81 = v20 - 2;
          v82 = &v66[16 * v20 - 32];
          v84 = *(_QWORD *)v82;
          v83 = *((_QWORD *)v82 + 1);
          v80 = __OFSUB__(v83, v84);
          v85 = v83 - v84;
          if (v80)
            goto LABEL_126;
          v80 = __OFADD__(v72, v85);
          v86 = v72 + v85;
          if (v80)
            goto LABEL_129;
          if (v86 >= v77)
          {
            v104 = &v66[16 * v69];
            v106 = *(_QWORD *)v104;
            v105 = *((_QWORD *)v104 + 1);
            v80 = __OFSUB__(v105, v106);
            v107 = v105 - v106;
            if (v80)
              goto LABEL_133;
            v97 = v72 < v107;
            goto LABEL_95;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v98 = *((_QWORD *)v18 + 4);
            v99 = *((_QWORD *)v18 + 5);
            v80 = __OFSUB__(v99, v98);
            v91 = v99 - v98;
            v92 = v80;
            goto LABEL_89;
          }
          v71 = *((_QWORD *)v18 + 4);
          v70 = *((_QWORD *)v18 + 5);
          v80 = __OFSUB__(v70, v71);
          v72 = v70 - v71;
          v73 = v80;
        }
        if ((v73 & 1) != 0)
          goto LABEL_125;
        v81 = v20 - 2;
        v87 = &v66[16 * v20 - 32];
        v89 = *(_QWORD *)v87;
        v88 = *((_QWORD *)v87 + 1);
        v90 = __OFSUB__(v88, v89);
        v91 = v88 - v89;
        v92 = v90;
        if (v90)
          goto LABEL_128;
        v93 = &v66[16 * v69];
        v95 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        v80 = __OFSUB__(v94, v95);
        v96 = v94 - v95;
        if (v80)
          goto LABEL_131;
        if (__OFADD__(v91, v96))
          goto LABEL_132;
        if (v91 + v96 >= v72)
        {
          v97 = v72 < v96;
LABEL_95:
          if (v97)
            v69 = v81;
          goto LABEL_97;
        }
LABEL_89:
        if ((v92 & 1) != 0)
          goto LABEL_127;
        v100 = &v66[16 * v69];
        v102 = *(_QWORD *)v100;
        v101 = *((_QWORD *)v100 + 1);
        v80 = __OFSUB__(v101, v102);
        v103 = v101 - v102;
        if (v80)
          goto LABEL_130;
        if (v103 < v91)
          goto LABEL_14;
LABEL_97:
        v108 = v69 - 1;
        if (v69 - 1 >= v20)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v109 = *a1;
        if (!*a1)
          goto LABEL_145;
        v110 = v18;
        v111 = &v66[16 * v108];
        v112 = *(_QWORD *)v111;
        v113 = &v66[16 * v69];
        v114 = *((_QWORD *)v113 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v109 + *(_QWORD *)(v131 + 72) * *(_QWORD *)v111, v109 + *(_QWORD *)(v131 + 72) * *(_QWORD *)v113, v109 + *(_QWORD *)(v131 + 72) * v114, v130);
        if (v2)
          goto LABEL_117;
        if (v114 < v112)
          goto LABEL_120;
        if (v69 > *((_QWORD *)v110 + 2))
          goto LABEL_121;
        *(_QWORD *)v111 = v112;
        *(_QWORD *)&v66[16 * v108 + 8] = v114;
        v115 = *((_QWORD *)v110 + 2);
        if (v69 >= v115)
          goto LABEL_122;
        v18 = v110;
        v20 = v115 - 1;
        memmove(&v66[16 * v69], v113 + 16, 16 * (v115 - 1 - v69));
        *((_QWORD *)v110 + 2) = v115 - 1;
        a1 = v137;
        if (v115 <= 2)
          goto LABEL_14;
      }
    }
    v20 = 1;
LABEL_14:
    v12 = a1[1];
    v19 = v136;
    if (v136 >= v12)
      goto LABEL_106;
  }
  v2 = v126;
  if (v38 >= v12)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v38, v21))
    goto LABEL_139;
  if (v38 - v21 >= v125)
    goto LABEL_58;
  if (__OFADD__(v21, v125))
    goto LABEL_142;
  if (v21 + v125 >= v12)
    v46 = v12;
  else
    v46 = v21 + v125;
  if (v46 >= v21)
  {
    if (v38 != v46)
    {
      v129 = v21;
      v123 = v18;
      v126 = v2;
      v127 = v46;
      v47 = *(_QWORD *)(v131 + 72);
      v48 = v47 * (v38 - 1);
      v133 = v47;
      v49 = v38 * v47;
      do
      {
        v51 = 0;
        v52 = v129;
        v136 = v38;
        while (1)
        {
          v139 = v52;
          v53 = *a1;
          v54 = v49;
          v55 = v49 + v51 + *a1;
          v56 = a1;
          v57 = v134;
          outlined init with copy of SiriUISession(v55, v134);
          v58 = v48;
          v59 = v48 + v51 + v53;
          v60 = v135;
          outlined init with copy of SiriUISession(v59, v135);
          LOBYTE(v53) = static Date.< infix(_:_:)();
          outlined destroy of SiriUISession(v60, type metadata accessor for SiriUISession);
          outlined destroy of SiriUISession(v57, type metadata accessor for SiriUISession);
          if ((v53 & 1) == 0)
            break;
          v61 = *v56;
          if (!*v56)
            goto LABEL_144;
          v49 = v54;
          v48 = v58;
          v62 = v61 + v58 + v51;
          outlined init with take of SiriUISession(v61 + v54 + v51, v138);
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of SiriUISession(v138, v62);
          v51 -= v133;
          v52 = v139 + 1;
          v50 = v136;
          a1 = v137;
          if (v136 == v139 + 1)
            goto LABEL_51;
        }
        v50 = v136;
        a1 = v56;
        v48 = v58;
        v49 = v54;
LABEL_51:
        v38 = v50 + 1;
        v48 += v133;
        v49 += v133;
      }
      while (v38 != v127);
      v38 = v127;
      v2 = v126;
      v18 = v123;
      v21 = v129;
    }
    goto LABEL_58;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v25 = a1;
  v26 = type metadata accessor for SiriUISession(0);
  v7 = MEMORY[0x24BDAC7A8](v26);
  v29 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  result = MEMORY[0x24BDAC7A8](v9);
  v15 = (char *)&v23 - v14;
  v28 = a3;
  v24 = a2;
  if (a3 != a2)
  {
    v16 = *(_QWORD *)(v13 + 72);
    v31 = v16 * (v28 - 1);
    v27 = v16;
    v30 = v16 * v28;
LABEL_5:
    v17 = 0;
    v18 = v25;
    while (1)
    {
      v19 = *a4;
      outlined init with copy of SiriUISession(v30 + v17 + *a4, (uint64_t)v15);
      outlined init with copy of SiriUISession(v31 + v17 + v19, (uint64_t)v11);
      LOBYTE(v19) = static Date.< infix(_:_:)();
      outlined destroy of SiriUISession((uint64_t)v11, type metadata accessor for SiriUISession);
      result = outlined destroy of SiriUISession((uint64_t)v15, type metadata accessor for SiriUISession);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v31 += v27;
        v30 += v27;
        if (++v28 == v24)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v31 + v17;
      outlined init with take of SiriUISession(v20 + v30 + v17, v29);
      swift_arrayInitWithTakeFrontToBack();
      result = outlined init with take of SiriUISession(v29, v22);
      v17 -= v27;
      ++v18;
      a4 = v21;
      if (v28 == v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v42 = type metadata accessor for SiriUISession(0);
  v8 = MEMORY[0x24BDAC7A8](v42);
  v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_61;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v15 = (uint64_t)(a2 - a1) / v13;
  v46 = a1;
  v45 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v26 = a4 + v18;
      v44 = a4 + v18;
      v46 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v28 = -v13;
        v41 = a1;
        do
        {
          v29 = a3 + v28;
          outlined init with copy of SiriUISession(v26 + v28, (uint64_t)v11);
          v30 = a2 + v28;
          v31 = a3;
          v32 = (uint64_t)v11;
          v33 = v43;
          outlined init with copy of SiriUISession(a2 + v28, v43);
          v34 = static Date.< infix(_:_:)();
          v35 = v33;
          v11 = (char *)v32;
          outlined destroy of SiriUISession(v35, type metadata accessor for SiriUISession);
          outlined destroy of SiriUISession(v32, type metadata accessor for SiriUISession);
          if ((v34 & 1) != 0)
          {
            if (v31 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v37 = v41;
            }
            else
            {
              v36 = v31 == a2;
              v37 = v41;
              if (!v36)
                swift_arrayInitWithTakeBackToFront();
            }
            v46 += v28;
          }
          else
          {
            v38 = v44;
            v44 += v28;
            if (v31 < v38 || v29 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              v30 = a2;
              v37 = v41;
            }
            else
            {
              v36 = v31 == v38;
              v37 = v41;
              if (!v36)
                swift_arrayInitWithTakeBackToFront();
              v30 = a2;
            }
          }
          v26 = v44;
          if (v44 <= a4)
            break;
          a2 = v30;
          a3 = v29;
        }
        while (v30 > v37);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v19 = a4 + v17;
    v44 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        outlined init with copy of SiriUISession(a2, (uint64_t)v11);
        v21 = v43;
        outlined init with copy of SiriUISession(a4, v43);
        v22 = static Date.< infix(_:_:)();
        outlined destroy of SiriUISession(v21, type metadata accessor for SiriUISession);
        outlined destroy of SiriUISession((uint64_t)v11, type metadata accessor for SiriUISession);
        v23 = v46;
        if ((v22 & 1) != 0)
        {
          v24 = a2 + v13;
          if (v46 < a2 || v46 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v46 == a2)
          {
            v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v25 = v45 + v13;
          if (v46 < v45 || v46 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v46 != v45)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v45 = v25;
          v24 = a2;
        }
        v46 = v23 + v13;
        a4 = v45;
        if (v45 >= v19)
          break;
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v46, &v45, (uint64_t *)&v44);
    return 1;
  }
LABEL_63:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  void (*v37)(char *);
  void (*v38)(char *);
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  unint64_t v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  unint64_t v50;
  unint64_t v51;
  uint64_t result;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(char *);
  unint64_t v56;
  void (*v57)(_QWORD, _QWORD, _QWORD);
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v8 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v59 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v53 - v11;
  v60 = v13;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_63;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_64;
  v16 = (uint64_t)(a2 - a1) / v14;
  v63 = a1;
  v62 = a4;
  v17 = v15 / v14;
  v56 = a4;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v20 = v17 * v14;
      v21 = v56;
      if (v56 < a2 || a2 + v20 <= v56)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v56 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v34 = v21 + v20;
      v61 = v21 + v20;
      v63 = a2;
      if (v20 >= 1 && a1 < a2)
      {
        v36 = -v14;
        v37 = *(void (**)(char *))(v60 + 16);
        v54 = a1;
        v55 = v37;
        do
        {
          v58 = a3 + v36;
          v38 = v55;
          ((void (*)(char *, unint64_t, uint64_t))v55)(v12, v34 + v36, v8);
          v39 = a3;
          v40 = v8;
          v41 = v12;
          v42 = v59;
          v57 = (void (*)(_QWORD, _QWORD, _QWORD))(a2 + v36);
          v38(v59);
          v43 = v36;
          v44 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          v45 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
          v46 = *(void (**)(char *, uint64_t))(v60 + 8);
          v47 = v42;
          v12 = v41;
          v8 = v40;
          v46(v47, v40);
          v46(v12, v40);
          if (v44 >= v45)
          {
            v51 = v61;
            v61 += v43;
            v36 = v43;
            a3 = v58;
            if (v39 < v51 || v58 >= v51)
            {
              swift_arrayInitWithTakeFrontToBack();
              v49 = (void (*)(_QWORD, _QWORD, _QWORD))a2;
              v48 = v56;
            }
            else
            {
              v48 = v56;
              if (v39 != v51)
                swift_arrayInitWithTakeBackToFront();
              v49 = (void (*)(_QWORD, _QWORD, _QWORD))a2;
            }
            v50 = v54;
          }
          else
          {
            v36 = v43;
            a3 = v58;
            if (v39 < a2 || v58 >= a2)
            {
              v49 = v57;
              swift_arrayInitWithTakeFrontToBack();
              v48 = v56;
              v50 = v54;
            }
            else
            {
              v48 = v56;
              v49 = v57;
              v50 = v54;
              if (v39 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v63 += v36;
          }
          v34 = v61;
          if (v61 <= v48)
            break;
          a2 = (unint64_t)v49;
        }
        while ((unint64_t)v49 > v50);
      }
      goto LABEL_61;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    v19 = v56;
    if (v56 < a1 || a1 + v18 <= v56)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v56 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v58 = v19 + v18;
    v61 = v19 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      v23 = v19;
      v24 = v59;
      v57 = *(void (**)(_QWORD, _QWORD, _QWORD))(v60 + 16);
      do
      {
        v25 = v14;
        v26 = a3;
        v27 = (void (*)(char *, unint64_t, uint64_t))v57;
        v57(v12, a2, v8);
        v27(v24, v23, v8);
        v28 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
        v29 = ProtoTaskEngagementFeatureSet.startTimestampMs.getter();
        v30 = *(void (**)(char *, uint64_t))(v60 + 8);
        v30(v24, v8);
        v30(v12, v8);
        v31 = v63;
        if (v28 >= v29)
        {
          v14 = v25;
          v33 = v62 + v25;
          if (v63 < v62 || v63 >= v33)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v26;
          }
          else
          {
            a3 = v26;
            if (v63 != v62)
              swift_arrayInitWithTakeBackToFront();
          }
          v62 = v33;
          v32 = a2;
        }
        else
        {
          v14 = v25;
          v32 = a2 + v25;
          if (v63 < a2 || v63 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v26;
          }
          else
          {
            a3 = v26;
            if (v63 == a2)
              v31 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        v63 = v31 + v14;
        v23 = v62;
        if (v62 >= v58)
          break;
        a2 = v32;
      }
      while (v32 < a3);
    }
LABEL_61:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v63, &v62, (uint64_t *)&v61);
    return 1;
  }
LABEL_65:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SiriUISession(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SiriUISession(a1, (uint64_t)v10);
  type metadata accessor for UISessionSignalBuilder(0);
  v11 = swift_allocObject();
  v12 = v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v13(v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession, 1, 1, v7);
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_intelligenceEngineSession) = v14;
  v15 = v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream;
  *(_QWORD *)(v15 + 32) = 0;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  outlined init with take of SiriUISession((uint64_t)v10, (uint64_t)v6);
  v13((uint64_t)v6, 0, 1, v7);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of SiriUISession?((uint64_t)v6, v12);
  swift_endAccess();
  *(_QWORD *)(v11 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = a2;
  return v11;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18PostSiriEngagement0G9UISessionVGG_AH0I13SignalBuilderCs5NeverOTg506_sSi18fg13Engagement0B9i7VAA0D13jk32CIgyno_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgyno_Tf1cn_n04_s18fg111Engagement0abC16MetricsCollectorC16runPSECollection33_68911A429BEB90148AF8DB12889D4511LL3for10completionySayAA0pi14VG_yyctFAA0O13jK12CSi_AItXEfU_AH0fgH16MetricsCollectorCTf1nc_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SiriUISession(0);
  v8 = *(_QWORD *)(v7 - 8);
  v42 = v7;
  v43 = v8;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (uint64_t *)((char *)&v38 - v16);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  v48 = MEMORY[0x24BEE4AF8];
  v44 = a2;
  swift_retain();
  specialized ContiguousArray.reserveCapacity(_:)();
  v20 = *(_QWORD *)(a1 + 16);
  v39 = a1;
  swift_bridgeObjectRetain();
  if (v20)
  {
    v21 = 0;
    v22 = v39 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
    v40 = *(_QWORD *)(v43 + 72);
    v41 = v20;
    v46 = v10;
    do
    {
      v47 = v22;
      v45 = v21 + 1;
      v23 = (uint64_t)&v14[*(int *)(v11 + 48)];
      outlined init with copy of SiriUISession(v22, v23);
      v24 = (uint64_t)v17 + *(int *)(v11 + 48);
      *v17 = v21;
      outlined init with take of SiriUISession(v23, v24);
      outlined init with take of Date?((uint64_t)v17, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
      outlined init with copy of SiriUISession((uint64_t)&v19[*(int *)(v11 + 48)], (uint64_t)v10);
      type metadata accessor for UISessionSignalBuilder(0);
      v25 = swift_allocObject();
      v26 = v25 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
      v28 = v17;
      v29 = v14;
      v30 = v11;
      v31 = v42;
      v27(v25 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession, 1, 1, v42);
      v32 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v25 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v25 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_intelligenceEngineSession) = v32;
      v33 = v25 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream;
      *(_QWORD *)(v33 + 32) = 0;
      *(_OWORD *)v33 = 0u;
      *(_OWORD *)(v33 + 16) = 0u;
      outlined init with take of SiriUISession((uint64_t)v46, (uint64_t)v6);
      v34 = v31;
      v11 = v30;
      v14 = v29;
      v17 = v28;
      v27((uint64_t)v6, 0, 1, v34);
      swift_beginAccess();
      v35 = v44;
      swift_retain();
      outlined assign with take of SiriUISession?((uint64_t)v6, v26);
      swift_endAccess();
      *(_QWORD *)(v25 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = v35;
      outlined destroy of Any?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      v10 = v46;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v22 = v47 + v40;
      v21 = v45;
    }
    while (v41 != v45);
  }
  swift_bridgeObjectRelease();
  v36 = v48;
  swift_release();
  return v36;
}

uint64_t specialized PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  dispatch_group_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t (*)(), uint64_t);
  uint64_t isa;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  BOOL v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  void *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  dispatch_group_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD aBlock[6];
  uint64_t v94;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v12);
  v87 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for DispatchWorkItemFlags();
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  v76 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for DispatchQoS();
  v74 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v73 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS.QoSClass();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a3;
  v20[3] = a4;
  v20[4] = a5;
  v20[5] = a6;
  v79 = v20;
  if (!*(_QWORD *)(a1 + 16))
  {
    v52 = one-time initialization token for engagement;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v52 != -1)
      swift_once();
    v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.engagement);
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      _os_log_impl(&dword_218F54000, v54, v55, "There are no Siri UI events in Biome stream to submit.", v56, 2u);
      MEMORY[0x219A27C8C](v56, -1, -1);
    }

    closure #1 in PostSiriEngagementMetricsCollector.collect(callback:)(a3, a4, a5);
    return swift_release();
  }
  v70 = v19;
  v71 = v17;
  v72 = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v21 = swift_bridgeObjectRetain();
  v22 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18PostSiriEngagement0G9UISessionVGG_AH0I13SignalBuilderCs5NeverOTg506_sSi18fg13Engagement0B9i7VAA0D13jk32CIgyno_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgyno_Tf1cn_n04_s18fg111Engagement0abC16MetricsCollectorC16runPSECollection33_68911A429BEB90148AF8DB12889D45113for10completionySayAA0pi14VG_yyctFAA0O13jK12CSi_AItXEfU_AH0fgH16MetricsCollectorCTf1nc_nTf4ng_n(v21, a2);
  swift_bridgeObjectRelease();
  swift_release();
  v94 = 0;
  v23 = dispatch_group_create();
  if (v22 >> 62)
    goto LABEL_47;
  v81 = v22 & 0xFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v25 = (uint64_t)v87;
  v86 = v24;
  if (!v24)
    goto LABEL_49;
  v85 = v86;
  while (2)
  {
    v88 = v22 & 0xC000000000000001;
    swift_beginAccess();
    v26 = 0;
    v80 = v22 + 32;
    v84 = v22;
    v83 = a2;
    v82 = v23;
    while (v88)
    {
      v28 = MEMORY[0x219A2756C](v26, v22);
      v29 = __OFADD__(v26, 1);
      v30 = v26 + 1;
      if (v29)
        goto LABEL_42;
LABEL_14:
      dispatch_group_enter(v23);
      v91 = v30;
      if (v30 >= v85)
      {
        v32 = type metadata accessor for SiriUISession(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v25, 1, 1, v32);
      }
      else
      {
        if (v88)
        {
          v31 = MEMORY[0x219A2756C](v30, v22);
        }
        else
        {
          if (v30 < 0)
            goto LABEL_45;
          if ((unint64_t)v30 >= *(_QWORD *)(v81 + 16))
            goto LABEL_46;
          v31 = *(_QWORD *)(v80 + 8 * v30);
          swift_retain();
        }
        (*(void (**)(void))(*(_QWORD *)v31 + 120))();
        swift_release();
      }
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = MEMORY[0x24BEE4AF8];
      v34 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 288);
      swift_retain();
      v22 = v23;
      v23 = v34(v25);
      v89 = v33 + 16;
      v90 = (dispatch_group_t)v22;
      if ((unint64_t)v23 >> 62)
      {
        v35 = _CocoaArrayWrapper.endIndex.getter();
        if (!v35)
          goto LABEL_31;
      }
      else
      {
        v35 = *(_QWORD *)(((unint64_t)v23 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v35)
          goto LABEL_31;
      }
      if (v35 < 1)
        goto LABEL_43;
      v36 = 0;
      v37 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t))(*(_QWORD *)v28 + 264);
      do
      {
        if (((unint64_t)v23 & 0xC000000000000001) != 0)
        {
          isa = MEMORY[0x219A2756C](v36, v23);
        }
        else
        {
          isa = (uint64_t)v23[v36 + 4].isa;
          swift_retain();
        }
        v39 = swift_allocObject();
        *(_QWORD *)(v39 + 16) = isa;
        *(_QWORD *)(v39 + 24) = v33;
        swift_retain();
        swift_retain();
        v37(v36, closure #1 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)partial apply, v39);
        swift_release();
        swift_release();
        ++v36;
      }
      while (v35 != v36);
LABEL_31:
      swift_bridgeObjectRelease();
      v40 = v89;
      swift_beginAccess();
      v41 = *(_QWORD *)v40;
      v42 = *(_QWORD *)(*(_QWORD *)v40 + 16);
      if (v42)
      {
        v43 = v94;
        a2 = v83;
        v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v83 + 264);
        swift_retain();
        v45 = swift_bridgeObjectRetain();
        v44(v45, v43);
        swift_release();
        v94 = *(_QWORD *)(v41 + 24 * v42 + 8);
        swift_retain();
        swift_release();
        v23 = v82;
        v25 = (uint64_t)v87;
        v26 = v91;
      }
      else
      {
        v46 = one-time initialization token for engagement;
        swift_bridgeObjectRetain();
        a2 = v83;
        v23 = v82;
        if (v46 != -1)
          swift_once();
        v47 = type metadata accessor for Logger();
        __swift_project_value_buffer(v47, (uint64_t)static Logger.engagement);
        v48 = Logger.logObject.getter();
        v49 = static os_log_type_t.info.getter();
        v50 = os_log_type_enabled(v48, v49);
        v25 = (uint64_t)v87;
        v26 = v91;
        if (v50)
        {
          v51 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v51 = 0;
          _os_log_impl(&dword_218F54000, v48, v49, "There are no SiriExecution events in SiriExecution Biome stream to submit.", v51, 2u);
          MEMORY[0x219A27C8C](v51, -1, -1);
        }

      }
      v27 = v90;
      dispatch_group_leave(v90);
      swift_release();

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of Any?(v25, &demangling cache variable for type metadata for SiriUISession?);
      v22 = v84;
      if (v26 == v86)
        goto LABEL_49;
    }
    if (v26 >= *(_QWORD *)(v81 + 16))
      goto LABEL_44;
    v28 = *(_QWORD *)(v80 + 8 * v26);
    swift_retain();
    v29 = __OFADD__(v26, 1);
    v30 = v26 + 1;
    if (!v29)
      goto LABEL_14;
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    v81 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
    v58 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v25 = (uint64_t)v87;
    v86 = v58;
    if (v58)
    {
      swift_bridgeObjectRetain();
      v85 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
LABEL_49:
  swift_bridgeObjectRelease_n();
  type metadata accessor for OS_dispatch_queue();
  v59 = v71;
  v60 = v70;
  v61 = v72;
  (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, *MEMORY[0x24BEE5490], v72);
  v62 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
  v63 = swift_allocObject();
  v64 = v79;
  *(_QWORD *)(v63 + 16) = partial apply for closure #1 in PostSiriEngagementMetricsCollector.collect(callback:);
  *(_QWORD *)(v63 + 24) = v64;
  aBlock[4] = closure #3 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)partial apply;
  aBlock[5] = v63;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_35;
  v65 = _Block_copy(aBlock);
  swift_retain();
  v66 = v73;
  static DispatchQoS.unspecified.getter();
  v92 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v67 = v76;
  v68 = v78;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v65);

  (*(void (**)(char *, uint64_t))(v77 + 8))(v67, v68);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v66, v75);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18PostSiriEngagement0G9UISessionVGG_AH0I13SignalBuilderCs5NeverOTg506_sSi18fg13Engagement0B9i7VAA0D13jk32CIgyno_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgyno_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(_QWORD, char *);
  uint64_t v26;

  v22 = a3;
  v25 = a2;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
  v4 = MEMORY[0x24BDAC7A8](v23);
  v24 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (uint64_t *)((char *)&v19 - v7);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v26 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray.reserveCapacity(_:)();
  v11 = *(_QWORD *)(a1 + 16);
  v20 = a1;
  swift_bridgeObjectRetain();
  if (v11)
  {
    v12 = 0;
    v13 = *(_QWORD *)(type metadata accessor for SiriUISession(0) - 8);
    v14 = v20 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v21 = *(_QWORD *)(v13 + 72);
    v15 = v23;
    do
    {
      v16 = (uint64_t)&v24[*(int *)(v15 + 48)];
      outlined init with copy of SiriUISession(v14, v16);
      v17 = (uint64_t)v8 + *(int *)(v15 + 48);
      *v8 = v12;
      outlined init with take of SiriUISession(v16, v17);
      outlined init with take of Date?((uint64_t)v8, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
      v25(*(_QWORD *)v10, &v10[*(int *)(v15 + 48)]);
      outlined destroy of Any?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: SiriUISession));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v14 += v21;
      ++v12;
    }
    while (v11 != v12);
  }
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t specialized PostSiriEngagementMetricsCollector.init(parameters:)(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v9;

  type metadata accessor for PSEBiomeDonator();
  v2 = swift_allocObject();
  swift_retain();
  v3 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  v4 = objc_msgSend(v3, sel_PostSiriEngagement);
  swift_unknownObjectRelease();
  v5 = objc_msgSend(v4, sel_source);

  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = 0xD000000000000022;
  *(_QWORD *)(a1 + 32) = 0x8000000218FBD800;
  *(_WORD *)(a1 + 40) = 257;
  *(_BYTE *)(a1 + 42) = 1;
  type metadata accessor for UserDefaultsDomainProvider();
  v6 = (_QWORD *)swift_allocObject();
  v7 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v8 = (void *)MEMORY[0x219A27218](0xD000000000000021, 0x8000000218FBF0A0);
  v9 = objc_msgSend(v7, sel_initWithSuiteName_, v8);

  v6[2] = v9;
  v6[3] = 0xD000000000000022;
  v6[4] = 0x8000000218FBD800;
  v6[5] = 0xD000000000000033;
  v6[6] = 0x8000000218FC0540;
  *(_QWORD *)(a1 + 48) = v6;
  return a1;
}

uint64_t outlined init with copy of SiriUISession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SiriUISession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of SiriUISession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SiriUISession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_218F7F814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = type metadata accessor for SiriUISession(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 48) & ~v2;
  swift_bridgeObjectRelease();
  swift_release();
  v4 = v0 + v3;
  v5 = type metadata accessor for Date();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v4 + *(int *)(v1 + 20), v5);
  v6(v4 + *(int *)(v1 + 24), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for SiriUISession(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #2 in PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), v0 + v2, *(void (**)(char *))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t outlined destroy of SiriUISession(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of SiriUISession?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PostSiriEngagementMetricsCollector.fetchDonatedEvents(biomeFetcherConfiguration:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _OWORD *);
  uint64_t v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v3 = *(uint64_t (**)(uint64_t, _OWORD *))(v2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v8 = v4;
  return v3(a1, v7);
}

uint64_t sub_218F7FA14@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_218F7FA48(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 40) = v2;
  return result;
}

uint64_t sub_218F7FA88@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_218F7FABC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 41) = v2;
  return result;
}

uint64_t sub_218F7FAFC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_218F7FB30(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 42) = v2;
  return result;
}

uint64_t type metadata accessor for PostSiriEngagementMetricsCollector()
{
  return objc_opt_self();
}

uint64_t method lookup function for PostSiriEngagementMetricsCollector()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.isSELFEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.isBiomeDonationEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.isFeatureStoreEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.__allocating_init(identifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.collect(startDate:timeWindowInSeconds:numSiriUISessions:completion:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v5 + 248))(a1, a2, a3 & 1, a4, a5 & 1);
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.calculateSuccessAndSubmit(allPseTasks:previousTask:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.signalFactoryForIntentEvents(group:taskName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.getUISessionsFromStartDate(startDate:endDate:numSiriUISessions:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 288))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.generateBiomeFetcherConfiguration(uiSession:nextUiSession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.fetchDonatedEvents(biomeFetcherConfiguration:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of PostSiriEngagementMetricsCollector.fetchSiriExecutionEvents(biomeFetcherConfiguration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t partial apply for closure #1 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in PostSiriEngagementMetricsCollector.runPSECollection(for:completion:)(a2, v2);
}

uint64_t sub_218F7FC44()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_218F7FCB0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type Date and conformance Date(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x219A27BFC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in PostSiriEngagementMetricsCollector.fetchSignalsAndTaskFeatureSets(for:nextUiSession:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of SiriUISession?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_218F7FE10()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PostSiriEngagementMetricsCollector.collect(callback:)()
{
  uint64_t v0;

  return closure #1 in PostSiriEngagementMetricsCollector.collect(callback:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32));
}

uint64_t objectdestroy_12Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t CallsIntentSignalFactory.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t CallsIntentSignalFactory.donatedBySiriCount.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t CallsIntentSignalFactory.donatedBySiriCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*CallsIntentSignalFactory.donatedBySiriCount.modify())()
{
  swift_beginAccess();
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t CallsIntentSignalFactory.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  return result;
}

void CallsIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(Swift::String *, _QWORD);
  _QWORD *v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  Swift::String v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  double v67;
  double v68;
  Swift::String v69;
  __int128 v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char isUniquelyReferenced_nonNull_native;
  id v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  id v94;
  id v95;
  uint64_t v96;
  void *v97;
  void *v98;
  char v99;
  id v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  id v107;
  void *v108;
  void *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  id v118;
  id v119;
  char v120;
  id v121;
  id v122;
  uint64_t v123;
  char v124;
  id v125;
  void *v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  id v137;
  void *v138;
  id v139;
  void *v140;
  id v141;
  unint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  id v148;
  uint64_t v149;
  Swift::String v150;
  unint64_t v151;
  unint64_t v152;
  id v153;
  void *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int (*v160)(uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  Swift::String v163;
  _QWORD *v164;
  _QWORD *v165;
  unint64_t v166;
  unint64_t v167;
  id v168;
  void *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  Swift::String v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  id v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  id countAndFlagsBits;
  char *v210;
  char *v211;
  char *v212;
  id v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  _QWORD *v221;
  uint64_t v222;
  id v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  Swift::String v227;
  __int128 v228;
  char *v229;
  unsigned __int8 v230;
  uint64_t v231;

  v221 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v220 = (char *)&v203 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v219 = (uint64_t)&v203 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v218 = (char *)&v203 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v217 = (uint64_t)&v203 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v211 = (char *)&v203 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v212 = (char *)&v203 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v210 = (char *)&v203 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v215 = (char *)&v203 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v19);
  v216 = (char *)&v203 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ReliabilityCategory();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v203 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (_QWORD *)type metadata accessor for Logger();
  v26 = *(v25 - 1);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v203 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = (void *)MEMORY[0x219A27818](v27);
  v31 = v223;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, &v227._countAndFlagsBits);
  if (v31)
  {
    objc_autoreleasePoolPop(v30);
    return;
  }
  v204 = v29;
  v208 = v26;
  v205 = v24;
  v206 = v22;
  v207 = v21;
  v223 = a1;
  v32 = v214;
  v222 = 0;
  objc_autoreleasePoolPop(v30);
  countAndFlagsBits = (id)v227._countAndFlagsBits;
  v213 = objc_msgSend((id)v227._countAndFlagsBits, sel_intent);
  v33 = objc_msgSend(v213, sel_domain);
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v36 = v35;

  if (v34 == 0x736C6C6143 && v36 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v37 = v221;
    v38 = (uint64_t)v216;
    v39 = (uint64_t)v215;
  }
  else
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v37 = v221;
    v38 = (uint64_t)v216;
    v39 = (uint64_t)v215;
    if ((v40 & 1) == 0)
    {
      if (one-time initialization token for engagement == -1)
      {
LABEL_13:
        v48 = v25;
        v49 = __swift_project_value_buffer((uint64_t)v25, (uint64_t)static Logger.engagement);
        v50 = v204;
        (*(void (**)(char *, uint64_t, _QWORD *))(v208 + 16))(v204, v49, v25);
        v227._countAndFlagsBits = 0;
        v227._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(55);
        v51._countAndFlagsBits = 0xD000000000000012;
        v51._object = (void *)0x8000000218FC0170;
        String.append(_:)(v51);
        v52 = v213;
        v53 = objc_msgSend(v213, sel_domain);
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v56 = v55;

        v57._countAndFlagsBits = v54;
        v57._object = v56;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._countAndFlagsBits = 0xD000000000000023;
        v58._object = (void *)0x8000000218FC0580;
        String.append(_:)(v58);
        v59 = v227;
        v60 = *MEMORY[0x24BEA8140];
        v61 = type metadata accessor for AppIntentEventDataIssues();
        v62 = (uint64_t)v205;
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 104))(v205, v60, v61);
        v63 = v206;
        v64 = v207;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v206 + 104))(v62, *MEMORY[0x24BEA8000], v207);
        Logger.error(_:_:)(v59._countAndFlagsBits, (unint64_t)v59._object, v62);

        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
        (*(void (**)(char *, _QWORD *))(v208 + 8))(v50, v48);
        return;
      }
LABEL_104:
      swift_once();
      goto LABEL_13;
    }
  }
  v25 = v223;
  if ((objc_msgSend(v223, sel_donatedBySiri) & 1) != 0)
  {
    v41 = (void (*)(Swift::String *, _QWORD))(*(uint64_t (**)(Swift::String *))(*(_QWORD *)v32 + 144))(&v227);
    if (!__OFADD__(*v42, 1))
    {
      ++*v42;
      v41(&v227, 0);

      return;
    }
    __break(1u);
    goto LABEL_104;
  }
  v231 = MEMORY[0x24BEE4B00];
  objc_msgSend(v25, sel_absoluteTimestamp);
  Date.init(timeIntervalSinceReferenceDate:)();
  v43 = type metadata accessor for Date();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v38, 0, 1, v43);
  v44 = objc_msgSend(countAndFlagsBits, sel_dateInterval);
  if (v44)
  {
    v45 = v44;
    v46 = (uint64_t)v210;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    v47 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 0, 1, v47);
  }
  else
  {
    v47 = type metadata accessor for DateInterval();
    v46 = (uint64_t)v210;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v210, 1, 1, v47);
  }
  outlined init with take of Date?(v46, v39, &demangling cache variable for type metadata for DateInterval?);
  type metadata accessor for DateInterval();
  v65 = *(_QWORD *)(v47 - 8);
  v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
  v67 = 0.0;
  if (!v66(v39, 1, v47))
  {
    DateInterval.duration.getter();
    v67 = v68;
  }
  outlined destroy of Any?(v39, &demangling cache variable for type metadata for DateInterval?);
  type metadata accessor for Utils();
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)(v38, (uint64_t)v37, (uint64_t)&v227, v67);
  outlined destroy of Any?(v38, &demangling cache variable for type metadata for Date?);
  v69 = v227;
  v70 = v228;
  v210 = v229;
  LODWORD(v208) = v230;
  v71 = objc_msgSend(countAndFlagsBits, sel_dateInterval);
  if (v71)
  {
    v72 = v71;
    v73 = (uint64_t)v211;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    v74 = 0;
    v75 = (uint64_t)v212;
  }
  else
  {
    v74 = 1;
    v75 = (uint64_t)v212;
    v73 = (uint64_t)v211;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v73, v74, 1, v47);
  outlined init with take of Date?(v73, v75, &demangling cache variable for type metadata for DateInterval?);
  if (v66(v75, 1, v47))
  {
    outlined destroy of Any?(v75, &demangling cache variable for type metadata for DateInterval?);
    *((_QWORD *)&v228 + 1) = MEMORY[0x24BEE1768];
    v227._countAndFlagsBits = -1;
    v76 = v32;
LABEL_23:
    outlined init with take of Any(&v227, &v225);
    v78 = v231;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v224 = v78;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0x617275446C6C6163, 0xEC0000006E6F6974, isUniquelyReferenced_nonNull_native);
    v231 = v224;
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  DateInterval.duration.getter();
  *((_QWORD *)&v226 + 1) = MEMORY[0x24BEE13C8];
  *(_QWORD *)&v225 = v77;
  outlined destroy of Any?(v75, &demangling cache variable for type metadata for DateInterval?);
  outlined init with take of Any(&v225, &v227);
  v76 = v32;
  if (*((_QWORD *)&v228 + 1))
    goto LABEL_23;
  outlined destroy of Any?((uint64_t)&v227, &demangling cache variable for type metadata for Any?);
  specialized Dictionary._Variant.removeValue(forKey:)(0x617275446C6C6163, 0xEC0000006E6F6974, &v225);
  outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for Any?);
LABEL_24:
  v80 = objc_msgSend(v213, sel_parametersByName);
  v81 = MEMORY[0x24BEE0D00];
  if (v80)
  {
    v82 = v80;
    v83 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(_QWORD *)(v83 + 16)
      && (v84 = specialized __RawDictionaryStorage.find<A>(_:)(0x756F526F69647561, 0xEA00000000006574),
          (v85 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v83 + 56) + 32 * v84, (uint64_t)&v225);
    }
    else
    {
      v225 = 0u;
      v226 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v226 + 1))
    {
      outlined init with take of Any(&v225, &v227);
      goto LABEL_33;
    }
  }
  else
  {
    v225 = 0u;
    v226 = 0u;
  }
  *((_QWORD *)&v228 + 1) = v81;
  v227._countAndFlagsBits = 0;
  v227._object = (void *)0xE000000000000000;
  outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for Any?);
LABEL_33:
  outlined init with take of Any(&v227, &v225);
  v86 = v231;
  v87 = swift_isUniquelyReferenced_nonNull_native();
  v224 = v86;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0x756F526F69647561, 0xEA00000000006574, v87);
  v88 = v224;
  v89 = swift_bridgeObjectRelease();
  v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 128))(v89);
  v91 = MEMORY[0x24BEE1328];
  *((_QWORD *)&v228 + 1) = MEMORY[0x24BEE1328];
  LOBYTE(v227._countAndFlagsBits) = v90 != 0;
  outlined init with take of Any(&v227, &v225);
  v92 = swift_isUniquelyReferenced_nonNull_native();
  v224 = v88;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0x42646574616E6F64, 0xED00006972695379, v92);
  v93 = v224;
  swift_bridgeObjectRelease();
  v94 = v213;
  v95 = objc_msgSend(v213, sel_typeName);
  v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v98 = v97;

  *((_QWORD *)&v228 + 1) = v81;
  v227._countAndFlagsBits = v96;
  v227._object = v98;
  outlined init with take of Any(&v227, &v225);
  v99 = swift_isUniquelyReferenced_nonNull_native();
  v224 = v93;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0x7954746E65746E69, 0xEE00656D614E6570, v99);
  v231 = v224;
  swift_bridgeObjectRelease();
  v100 = objc_msgSend(v223, sel_bundleID);
  v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v103 = v102;

  v227._countAndFlagsBits = v101;
  v227._object = v103;
  *(_QWORD *)&v225 = 0x6C7070612E6D6F63;
  *((_QWORD *)&v225 + 1) = 0xEA00000000002E65;
  lazy protocol witness table accessor for type String and conformance String();
  LOBYTE(v100) = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  *((_QWORD *)&v228 + 1) = v91;
  LOBYTE(v227._countAndFlagsBits) = v100 & 1;
  outlined init with take of Any(&v227, &v225);
  v104 = v231;
  v105 = swift_isUniquelyReferenced_nonNull_native();
  v224 = v104;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000016, 0x8000000218FBF020, v105);
  v106 = v224;
  v231 = v224;
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD))(*(_QWORD *)v76 + 136))(0);
  v107 = objc_msgSend(v94, sel_donationMetadata);
  if (!v107)
    goto LABEL_46;
  v108 = v107;
  objc_opt_self();
  v109 = (void *)swift_dynamicCastObjCClass();
  if (!v109)
    goto LABEL_43;
  v110 = v109;
  objc_msgSend(v109, sel_callDuration);
  v111 = MEMORY[0x24BEE13C8];
  *((_QWORD *)&v228 + 1) = MEMORY[0x24BEE13C8];
  v227._countAndFlagsBits = v112;
  outlined init with take of Any(&v227, &v225);
  v113 = swift_isUniquelyReferenced_nonNull_native();
  v224 = v106;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0x617275446C6C6163, 0xEC0000006E6F6974, v113);
  v114 = v224;
  swift_bridgeObjectRelease();
  objc_msgSend(v110, sel_timeToEstablish);
  *((_QWORD *)&v228 + 1) = v111;
  v227._countAndFlagsBits = v115;
  outlined init with take of Any(&v227, &v225);
  v116 = swift_isUniquelyReferenced_nonNull_native();
  v224 = v114;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000018, 0x8000000218FC0610, v116);
  v117 = v224;
  v231 = v224;
  swift_bridgeObjectRelease();
  v118 = objc_msgSend(v110, sel_recentCallStatus);
  if (v118)
  {
    v119 = v118;
    *((_QWORD *)&v226 + 1) = type metadata accessor for NSNumber();
    *(_QWORD *)&v225 = v119;
    outlined init with take of Any(&v225, &v227);
    if (!*((_QWORD *)&v228 + 1))
    {
      outlined destroy of Any?((uint64_t)&v227, &demangling cache variable for type metadata for Any?);
      specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000010, 0x8000000218FC0630, &v225);
      outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for Any?);
      goto LABEL_40;
    }
  }
  else
  {
    *((_QWORD *)&v228 + 1) = MEMORY[0x24BEE1768];
    v227._countAndFlagsBits = 0;
  }
  outlined init with take of Any(&v227, &v225);
  v120 = swift_isUniquelyReferenced_nonNull_native();
  v224 = v117;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000010, 0x8000000218FC0630, v120);
  v231 = v224;
  swift_bridgeObjectRelease();
LABEL_40:
  v121 = objc_msgSend(v110, sel_disconnectedReason);
  if (v121)
  {
    v122 = v121;
    *((_QWORD *)&v226 + 1) = type metadata accessor for NSNumber();
    *(_QWORD *)&v225 = v122;
    outlined init with take of Any(&v225, &v227);
    if (!*((_QWORD *)&v228 + 1))
    {
      outlined destroy of Any?((uint64_t)&v227, &demangling cache variable for type metadata for Any?);
      specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000012, 0x8000000218FC0650, &v225);
      outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for Any?);
LABEL_43:

      goto LABEL_46;
    }
  }
  else
  {
    *((_QWORD *)&v228 + 1) = MEMORY[0x24BEE1768];
    v227._countAndFlagsBits = 0;
  }
  outlined init with take of Any(&v227, &v225);
  v123 = v231;
  v124 = swift_isUniquelyReferenced_nonNull_native();
  v224 = v123;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000012, 0x8000000218FC0650, v124);
  v231 = v224;

  swift_bridgeObjectRelease();
LABEL_46:
  v125 = objc_msgSend(v213, sel_parametersByName);
  if (!v125)
  {
    v227 = (Swift::String)0;
    v228 = 0u;
LABEL_99:
    outlined destroy of Any?((uint64_t)&v227, &demangling cache variable for type metadata for Any?);
    goto LABEL_100;
  }
  v126 = v125;
  v127 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v127 + 16)
    && (v128 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xE800000000000000),
        (v129 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v127 + 56) + 32 * v128, (uint64_t)&v227);
  }
  else
  {
    v227 = (Swift::String)0;
    v228 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v228 + 1))
    goto LABEL_99;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_100;
  v130 = v225;
  if ((unint64_t)v225 >> 62)
  {
    swift_bridgeObjectRetain();
    v131 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v131)
      goto LABEL_55;
    goto LABEL_106;
  }
  v131 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v131)
  {
LABEL_106:
    swift_bridgeObjectRelease();
LABEL_100:
    v133 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v202 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v134 = (char *)MEMORY[0x24BEE4AF8];
    v135 = (char *)MEMORY[0x24BEE4AF8];
LABEL_101:
    v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *((_QWORD *)&v228 + 1) = v182;
    v227._countAndFlagsBits = (uint64_t)v135;
    outlined init with take of Any(&v227, &v225);
    v183 = v231;
    v184 = swift_isUniquelyReferenced_nonNull_native();
    v224 = v183;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0x73746361746E6F63, 0xED000065756C6156, v184);
    v185 = v224;
    swift_bridgeObjectRelease();
    *((_QWORD *)&v228 + 1) = v182;
    v227._countAndFlagsBits = (uint64_t)v134;
    outlined init with take of Any(&v227, &v225);
    v186 = swift_isUniquelyReferenced_nonNull_native();
    v224 = v185;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000013, 0x8000000218FC05B0, v186);
    v187 = v224;
    swift_bridgeObjectRelease();
    *((_QWORD *)&v228 + 1) = v182;
    v227._countAndFlagsBits = (uint64_t)v202;
    outlined init with take of Any(&v227, &v225);
    v188 = swift_isUniquelyReferenced_nonNull_native();
    v224 = v187;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000011, 0x8000000218FC05D0, v188);
    v189 = v224;
    swift_bridgeObjectRelease();
    *((_QWORD *)&v228 + 1) = v182;
    v227._countAndFlagsBits = (uint64_t)v133;
    outlined init with take of Any(&v227, &v225);
    v190 = swift_isUniquelyReferenced_nonNull_native();
    v224 = v189;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000010, 0x8000000218FC05F0, v190);
    v191 = v224;
    swift_bridgeObjectRelease();
    v192 = v213;
    v193 = objc_msgSend(v213, sel_domain);
    v194 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v196 = v195;

    v197 = objc_msgSend(v192, sel_verb);
    v198 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v200 = v199;

    type metadata accessor for Signal();
    v201 = swift_allocObject();
    *(Swift::String *)(v201 + 16) = v69;
    *(_OWORD *)(v201 + 32) = v70;
    *(_QWORD *)(v201 + 48) = v210;
    *(_BYTE *)(v201 + 56) = v208;
    *(_QWORD *)(v201 + 64) = v194;
    *(_QWORD *)(v201 + 72) = v196;
    *(_QWORD *)(v201 + 80) = v198;
    *(_QWORD *)(v201 + 88) = v200;
    *(_BYTE *)(v201 + 96) = 1;
    *(_QWORD *)(v201 + 104) = v191;
    return;
  }
LABEL_55:
  if (v131 >= 1)
  {
    v132 = 0;
    v211 = (char *)(v130 & 0xC000000000000001);
    v133 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v221 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v134 = (char *)MEMORY[0x24BEE4AF8];
    v135 = (char *)MEMORY[0x24BEE4AF8];
    v214 = v130;
    v212 = (char *)v131;
    while (1)
    {
      v136 = v222;
      if (v211)
        v137 = (id)MEMORY[0x219A2756C](v132, v130);
      else
        v137 = *(id *)(v130 + 8 * (_QWORD)v132 + 32);
      v138 = v137;
      v139 = objc_msgSend(v137, sel_personHandle);
      v140 = v139;
      if (v139)
      {
        v141 = objc_msgSend(v139, sel_value);

        if (v141)
        {
          v140 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          v143 = v142;

          goto LABEL_65;
        }
        v140 = 0;
      }
      v143 = 0xE000000000000000;
LABEL_65:
      v144 = swift_isUniquelyReferenced_nonNull_native();
      v223 = v138;
      if ((v144 & 1) == 0)
        v135 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v135 + 2) + 1, 1, v135);
      v146 = *((_QWORD *)v135 + 2);
      v145 = *((_QWORD *)v135 + 3);
      if (v146 >= v145 >> 1)
        v135 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v145 > 1), v146 + 1, 1, v135);
      *((_QWORD *)v135 + 2) = v146 + 1;
      v215 = v135;
      v147 = &v135[16 * v146];
      *((_QWORD *)v147 + 4) = v140;
      *((_QWORD *)v147 + 5) = v143;
      v148 = objc_msgSend(v223, sel_displayName);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v227 = String.lowercased()();
      specialized RangeReplaceableCollection.removeAll(where:)(&v227);
      v149 = v136;
      swift_bridgeObjectRelease();
      v150 = v227;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v134 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v134 + 2) + 1, 1, v134);
      v152 = *((_QWORD *)v134 + 2);
      v151 = *((_QWORD *)v134 + 3);
      if (v152 >= v151 >> 1)
        v134 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v151 > 1), v152 + 1, 1, v134);
      *((_QWORD *)v134 + 2) = v152 + 1;
      *(Swift::String *)&v134[16 * v152 + 32] = v150;
      v153 = objc_msgSend(v223, sel_nameComponents);
      v216 = v134;
      if (v153)
      {
        v154 = v153;
        v155 = v218;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        v156 = type metadata accessor for PersonNameComponents();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 56))(v155, 0, 1, v156);
      }
      else
      {
        v156 = type metadata accessor for PersonNameComponents();
        v155 = v218;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 56))(v218, 1, 1, v156);
      }
      v157 = (uint64_t)v155;
      v158 = v217;
      outlined init with take of Date?(v157, v217, &demangling cache variable for type metadata for PersonNameComponents?);
      type metadata accessor for PersonNameComponents();
      v159 = *(_QWORD *)(v156 - 8);
      v160 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48);
      if (v160(v158, 1, v156))
      {
        outlined destroy of Any?(v158, &demangling cache variable for type metadata for PersonNameComponents?);
LABEL_78:
        swift_bridgeObjectRelease();
        goto LABEL_80;
      }
      PersonNameComponents.givenName.getter();
      v162 = v161;
      outlined destroy of Any?(v158, &demangling cache variable for type metadata for PersonNameComponents?);
      if (!v162)
        goto LABEL_78;
LABEL_80:
      v227 = String.lowercased()();
      specialized RangeReplaceableCollection.removeAll(where:)(&v227);
      v222 = v149;
      swift_bridgeObjectRelease();
      v163 = v227;
      v164 = v133;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v165 = v221;
      else
        v165 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v221[2] + 1, 1, v221);
      v167 = v165[2];
      v166 = v165[3];
      if (v167 >= v166 >> 1)
        v165 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v166 > 1), v167 + 1, 1, v165);
      v165[2] = v167 + 1;
      v221 = v165;
      *(Swift::String *)&v165[2 * v167 + 4] = v163;
      v168 = objc_msgSend(v223, sel_nameComponents);
      if (v168)
      {
        v169 = v168;
        v170 = v220;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        v171 = 0;
      }
      else
      {
        v171 = 1;
        v170 = v220;
      }
      v133 = v164;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v159 + 56))(v170, v171, 1, v156);
      v172 = (uint64_t)v170;
      v173 = v219;
      outlined init with take of Date?(v172, v219, &demangling cache variable for type metadata for PersonNameComponents?);
      v174 = v160(v173, 1, v156);
      v175 = v212;
      v135 = v215;
      if (v174)
      {
        outlined destroy of Any?(v173, &demangling cache variable for type metadata for PersonNameComponents?);
        v134 = v216;
      }
      else
      {
        PersonNameComponents.familyName.getter();
        v177 = v176;
        outlined destroy of Any?(v173, &demangling cache variable for type metadata for PersonNameComponents?);
        v134 = v216;
        if (v177)
          goto LABEL_91;
      }
      swift_bridgeObjectRelease();
LABEL_91:
      v227 = String.lowercased()();
      v178 = v222;
      specialized RangeReplaceableCollection.removeAll(where:)(&v227);
      v222 = v178;
      swift_bridgeObjectRelease();
      v179 = v227;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v133[2] + 1, 1, v133);
      v181 = v133[2];
      v180 = v133[3];
      if (v181 >= v180 >> 1)
        v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v180 > 1), v181 + 1, 1, v133);
      ++v132;
      v133[2] = v181 + 1;
      *(Swift::String *)&v133[2 * v181 + 4] = v179;

      v130 = v214;
      if (v175 == v132)
      {
        swift_bridgeObjectRelease();
        v202 = v221;
        goto LABEL_101;
      }
    }
  }
  __break(1u);
}

uint64_t CallsIntentSignalFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t CallsIntentSignalFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(_QWORD *a1)
{
  Swift::String_optional v2;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v5;
  uint64_t result;

  swift_bridgeObjectRetain();
  v2 = String.Iterator.next()();
  if (v2.value._object)
  {
    countAndFlagsBits = v2.value._countAndFlagsBits;
    object = v2.value._object;
    do
    {
      if ((Character.isSymbol.getter() & 1) == 0)
        MEMORY[0x219A2729C](countAndFlagsBits, object);
      swift_bridgeObjectRelease();
      v5 = String.Iterator.next()();
      countAndFlagsBits = v5.value._countAndFlagsBits;
      object = v5.value._object;
    }
    while (v5.value._object);
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

uint64_t sub_218F81820@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_218F81850(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 136))(*a1);
}

uint64_t type metadata accessor for CallsIntentSignalFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for CallsIntentSignalFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CallsIntentSignalFactory.donatedBySiriCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of CallsIntentSignalFactory.donatedBySiriCount.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of CallsIntentSignalFactory.donatedBySiriCount.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t PSEBiomeDonator.__allocating_init()()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;

  v0 = swift_allocObject();
  v1 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  v2 = objc_msgSend(v1, sel_PostSiriEngagement);
  swift_unknownObjectRelease();
  v3 = objc_msgSend(v2, sel_source);

  *(_QWORD *)(v0 + 16) = v3;
  return v0;
}

uint64_t PSEBiomeDonator.init()()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  v2 = objc_msgSend(v1, sel_PostSiriEngagement);
  swift_unknownObjectRelease();
  v3 = objc_msgSend(v2, sel_source);

  *(_QWORD *)(v0 + 16) = v3;
  return v0;
}

void PSEBiomeDonator.donatePSESignals(signals:siriTask:)(unint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71[2];

  v3 = v2;
  if (a2)
  {
    v6 = (void *)v2[2];
    if (v6)
    {
      v7 = *(uint64_t (**)(void))(*(_QWORD *)a2 + 272);
      v61 = v6;
      v71[0] = v7();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v8 = BidirectionalCollection<>.joined(separator:)();
      v10 = v9;
      v11 = swift_bridgeObjectRelease();
      v71[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(v11);
      v12 = BidirectionalCollection<>.joined(separator:)();
      v14 = v13;
      v15 = swift_bridgeObjectRelease();
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(v15);
LABEL_8:
      v66 = (void *)(*(uint64_t (**)(uint64_t))(*v3 + 104))(v16);
      swift_release();
      v69 = (*(uint64_t (**)(unint64_t))(*v3 + 112))(a1);
      if (a2)
      {
        v68 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 152))();
        v59 = v18;
        v67 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 176))();
        v58 = v19;
        v65 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 248))();
        v57 = v20;
        if (v10)
          v21 = v8;
        else
          v21 = 0;
        if (v10)
          v22 = v10;
        else
          v22 = 0xE000000000000000;
        if (v14)
          v23 = v12;
        else
          v23 = 0;
        if (v14)
          v24 = v14;
        else
          v24 = 0xE000000000000000;
        v25 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 200))();
        v26 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 200))();
        v27 = *(_QWORD *)(v26 + 16);
        v62 = v22;
        v63 = v21;
        if (v27)
        {
          v28 = v26 + 16 * v27;
          v29 = *(_QWORD *)(v28 + 24);
          v64 = *(_QWORD *)(v28 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v64 = 0;
          v29 = 0;
        }
        v42 = v58;
        v39 = v59;
        v43 = v57;
        v41 = v25;
      }
      else
      {
        v67 = 0;
        v68 = 0;
        v64 = 0;
        v65 = 0;
        v29 = 0;
        if (v10)
          v38 = v8;
        else
          v38 = 0;
        v39 = 0xE000000000000000;
        if (v10)
          v40 = v10;
        else
          v40 = 0xE000000000000000;
        v62 = v40;
        v63 = v38;
        if (v14)
          v23 = v12;
        else
          v23 = 0;
        if (v14)
          v24 = v14;
        else
          v24 = 0xE000000000000000;
        v41 = MEMORY[0x24BEE4AF8];
        v42 = 0xE000000000000000;
        v43 = 0xE000000000000000;
      }
      objc_allocWithZone(MEMORY[0x24BE0C700]);
      v60 = v66;
      v44 = @nonobjc BMSiriPostSiriEngagement.init(uiSessionID:taskID:taskType:conversationPath:appPattern:requestIds:engagementUnderstanding:pseEvents:clientSessionId:lastRequestId:executionUUID:)(v68, v39, v67, v42, v65, v43, v63, v62, v23, v24, v41, v66, v69, 0, 0, v64, v29, 0, 0);
      if (one-time initialization token for engagement != -1)
        swift_once();
      v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.engagement);
      swift_retain_n();
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc();
        v49 = swift_slowAlloc();
        v71[0] = v49;
        *(_DWORD *)v48 = 136315138;
        if (a2)
        {
          v50 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 152))();
          v52 = v51;
        }
        else
        {
          v50 = 0;
          v52 = 0xE000000000000000;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_218F54000, v46, v47, "Biome donation of PSE signals with SiriExecutionTask within a UISession: %s", v48, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x219A27C8C](v49, -1, -1);
        MEMORY[0x219A27C8C](v48, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      objc_msgSend(v61, sel_sendEvent_, v44);

      return;
    }
LABEL_23:
    if (one-time initialization token for engagement != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.engagement);
    swift_retain_n();
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v71[0] = v34;
      *(_DWORD *)v33 = 136315138;
      if (a2)
      {
        v35 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 152))();
        v37 = v36;
      }
      else
      {
        v35 = 0;
        v37 = 0xE000000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_218F54000, v31, v32, "nil biomePSESource, unable to donate PSE signals with SiriExecutionTask within a UISession:  %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x219A27C8C](v34, -1, -1);
      MEMORY[0x219A27C8C](v33, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v53 >= 1)
    {
LABEL_6:
      v17 = (void *)v3[2];
      if (v17)
      {
        v61 = v17;
        v16 = 0;
        v12 = 0;
        v14 = 0;
        v8 = 0;
        v10 = 0;
        goto LABEL_8;
      }
      goto LABEL_23;
    }
  }
  else if (*(uint64_t *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
  {
    goto LABEL_6;
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v54 = type metadata accessor for Logger();
  __swift_project_value_buffer(v54, (uint64_t)static Logger.engagement);
  v70 = Logger.logObject.getter();
  v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v70, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v56 = 0;
    _os_log_impl(&dword_218F54000, v70, v55, "both SiriExecutionTask and PSE signals are nil, nothing to donate to Biome", v56, 2u);
    MEMORY[0x219A27C8C](v56, -1, -1);
  }

}

id PSEBiomeDonator.createEngagementUnderstandingFeatures(engagementFeatures:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSNumber v5;
  NSNumber v6;
  NSNumber v7;
  NSNumber v8;
  NSNumber v9;
  NSNumber v10;
  NSNumber v11;
  id v12;

  if (a1)
  {
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 104))();
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v3);
    (*(void (**)(void))(*(_QWORD *)a1 + 184))();
    v5.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(_QWORD *)a1 + 192))();
    v6.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(_QWORD *)a1 + 200))();
    v7.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(_QWORD *)a1 + 208))();
    v8.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(_QWORD *)a1 + 216))();
    v9.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(_QWORD *)a1 + 224))();
    v10.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
    (*(void (**)(void))(*(_QWORD *)a1 + 232))();
    v11.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  }
  else
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(5);
    v11.super.super.isa = 0;
    v10.super.super.isa = 0;
    v9.super.super.isa = 0;
    v8.super.super.isa = 0;
    v7.super.super.isa = 0;
    v6.super.super.isa = 0;
    v5.super.super.isa = 0;
  }
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0C708]), sel_initWithTaskSuccess_isUserAbandoned_isUserCancelled_isSiriCompleted_isPromptInteraction_isConfirmInteraction_isDisambiguateInteraction_isUnsupportedPromptInteraction_, v4, v5.super.super.isa, v6.super.super.isa, v7.super.super.isa, v8.super.super.isa, v9.super.super.isa, v10.super.super.isa, v11.super.super.isa);

  return v12;
}

uint64_t PSEBiomeDonator.createBiomePSESignal(signals:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *(*v7)(__int128 *__return_ptr);
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  Class v56;
  id v57;
  id v58;
  uint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t (*v67)(void);
  Class isa;
  id v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD v72[6];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  double v76;
  uint64_t v77;

  v1 = a1;
  v77 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_77;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = 0;
    v64 = v1;
    v62 = v1 + 32;
    v63 = v1 & 0xFFFFFFFFFFFFFF8;
    v66 = v1 & 0xC000000000000001;
    v65 = v2;
    while (1)
    {
      if (v66)
      {
        v4 = MEMORY[0x219A2756C](v3, v64);
        v5 = __OFADD__(v3, 1);
        v6 = v3 + 1;
        if (v5)
          break;
        goto LABEL_10;
      }
      if (v3 >= *(_QWORD *)(v63 + 16))
        goto LABEL_76;
      v4 = *(_QWORD *)(v62 + 8 * v3);
      swift_retain();
      v5 = __OFADD__(v3, 1);
      v6 = v3 + 1;
      if (v5)
        break;
LABEL_10:
      v70 = v6;
      v7 = *(_QWORD *(**)(__int128 *__return_ptr))(*(_QWORD *)v4 + 120);
      v8 = v7(&v75);
      v9 = (void *)MEMORY[0x219A273E0](v8, v76);
      v10 = v7(&v73);
      v11 = (void *)MEMORY[0x219A273E0](v10, *((double *)&v73 + 1));
      v12 = v7((__int128 *)v72);
      v13 = (void *)MEMORY[0x219A273E0](v12, *(double *)&v72[2]);
      v69 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0C720]), sel_initWithDuration_sinceUIEnd_sinceUIStart_, v9, v11, v13);

      v72[0] = MEMORY[0x24BEE4AF8];
      v71 = v4;
      v67 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 216);
      v14 = v67();
      v15 = v14;
      v16 = 0;
      v17 = v14 + 64;
      v18 = 1 << *(_BYTE *)(v14 + 32);
      if (v18 < 64)
        v19 = ~(-1 << v18);
      else
        v19 = -1;
      v1 = v19 & *(_QWORD *)(v14 + 64);
      v20 = (unint64_t)(v18 + 63) >> 6;
      while (1)
      {
        if (v1)
        {
          v21 = __clz(__rbit64(v1));
          v1 &= v1 - 1;
          v22 = v21 | (v16 << 6);
          goto LABEL_34;
        }
        v23 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
          goto LABEL_74;
        }
        if (v23 >= v20)
          break;
        v24 = *(_QWORD *)(v17 + 8 * v23);
        ++v16;
        if (!v24)
        {
          v16 = v23 + 1;
          if (v23 + 1 >= v20)
            break;
          v24 = *(_QWORD *)(v17 + 8 * v16);
          if (!v24)
          {
            v16 = v23 + 2;
            if (v23 + 2 >= v20)
              break;
            v24 = *(_QWORD *)(v17 + 8 * v16);
            if (!v24)
            {
              v16 = v23 + 3;
              if (v23 + 3 >= v20)
                break;
              v24 = *(_QWORD *)(v17 + 8 * v16);
              if (!v24)
              {
                v16 = v23 + 4;
                if (v23 + 4 >= v20)
                  break;
                v24 = *(_QWORD *)(v17 + 8 * v16);
                if (!v24)
                {
                  v25 = v23 + 5;
                  if (v25 >= v20)
                    break;
                  v24 = *(_QWORD *)(v17 + 8 * v25);
                  if (!v24)
                  {
                    while (1)
                    {
                      v16 = v25 + 1;
                      if (__OFADD__(v25, 1))
                        goto LABEL_75;
                      if (v16 >= v20)
                        goto LABEL_69;
                      v24 = *(_QWORD *)(v17 + 8 * v16);
                      ++v25;
                      if (v24)
                        goto LABEL_33;
                    }
                  }
                  v16 = v25;
                }
              }
            }
          }
        }
LABEL_33:
        v1 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v16 << 6);
LABEL_34:
        v26 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * v22);
        v27 = *v26;
        v28 = v26[1];
        v29 = *v26 == 0x73746361746E6F63 && v28 == 0xED000065756C6156;
        if (!v29
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v27 != 0xD000000000000013 || v28 != 0x8000000218FC05B0)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v27 != 0xD000000000000011 || v28 != 0x8000000218FC05D0)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v27 != 0xD000000000000010 || v28 != 0x8000000218FC05F0)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v27 != 0xD000000000000018 || v28 != 0x8000000218FC06D0))
        {
          v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v31 = v27 == 0xD000000000000018 && v28 == 0x8000000218FC06F0;
          v32 = v31;
          if ((v30 & 1) == 0 && !v32 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v33 = swift_bridgeObjectRetain_n();
            v34 = ((uint64_t (*)(uint64_t))v67)(v33);
            if (*(_QWORD *)(v34 + 16)
              && (v35 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v36 & 1) != 0))
            {
              outlined init with copy of Any(*(_QWORD *)(v34 + 56) + 32 * v35, (uint64_t)&v73);
            }
            else
            {
              v73 = 0u;
              v74 = 0u;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*((_QWORD *)&v74 + 1))
            {
              outlined init with take of Any(&v73, &v75);
            }
            else
            {
              v76 = MEMORY[0x24BEE0D00];
              *(_QWORD *)&v75 = 0;
              *((_QWORD *)&v75 + 1) = 0xE000000000000000;
              outlined destroy of Any?((uint64_t)&v73);
            }
            outlined init with copy of Any((uint64_t)&v75, (uint64_t)&v73);
            v60 = String.init<A>(describing:)();
            v38 = v37;
            v61 = objc_allocWithZone(MEMORY[0x24BE0C718]);
            v39 = (void *)MEMORY[0x219A27218](v27, v28);
            swift_bridgeObjectRelease();
            v40 = (void *)MEMORY[0x219A27218](v60, v38);
            swift_bridgeObjectRelease();
            v41 = objc_msgSend(v61, sel_initWithKey_value_, v39, v40);

            v42 = v41;
            MEMORY[0x219A2732C]();
            if (*(_QWORD *)((v72[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v72[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            __swift_destroy_boxed_opaque_existential_0((uint64_t)&v75);
          }
        }
      }
LABEL_69:
      v43 = swift_release();
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 144))(v43);
      v46 = v45;
      v47 = (*(uint64_t (**)(void))(*(_QWORD *)v71 + 168))();
      v49 = v48;
      (*(void (**)(void))(*(_QWORD *)v71 + 192))();
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      v50 = v69;
      v51 = v7(&v75);
      v52 = (void *)MEMORY[0x219A273E0](v51, *(double *)&v75);
      v53 = objc_allocWithZone(MEMORY[0x24BE0C710]);
      v54 = (void *)MEMORY[0x219A27218](v44, v46);
      swift_bridgeObjectRelease();
      v55 = (void *)MEMORY[0x219A27218](v47, v49);
      swift_bridgeObjectRelease();
      type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for BMSiriPostSiriEngagementSignalContent);
      v56 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v57 = objc_msgSend(v53, sel_initWithDomain_action_isPostSiriEngagement_pseDelta_pseContents_donatedTimestamp_, v54, v55, isa, v50, v56, v52);

      v1 = (unint64_t)v50;
      v58 = v57;
      MEMORY[0x219A2732C]();
      if (*(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();

      v3 = v70;
      if (v70 == v65)
      {
        swift_bridgeObjectRelease();
        return v77;
      }
    }
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t PSEBiomeDonator.getBiomeTaskSuccess(taskSuccess:)(char a1)
{
  return dword_218FBD91C[a1];
}

uint64_t PSEBiomeDonator.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEBiomeDonator.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

id @nonobjc BMSiriPostSiriEngagement.init(uiSessionID:taskID:taskType:conversationPath:appPattern:requestIds:engagementUnderstanding:pseEvents:clientSessionId:lastRequestId:executionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v25;
  NSArray v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v33;
  NSArray v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  if (a2)
  {
    v39 = (void *)MEMORY[0x219A27218]();
    swift_bridgeObjectRelease();
    if (a4)
      goto LABEL_3;
LABEL_6:
    v38 = 0;
    if (a6)
      goto LABEL_4;
    goto LABEL_7;
  }
  v39 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v38 = (void *)MEMORY[0x219A27218](a3, a4);
  swift_bridgeObjectRelease();
  if (a6)
  {
LABEL_4:
    v37 = (void *)MEMORY[0x219A27218](a5, a6);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  v37 = 0;
LABEL_8:
  if (a8)
  {
    v36 = (void *)MEMORY[0x219A27218](a7, a8);
    swift_bridgeObjectRelease();
    v25 = a15;
    if (a10)
    {
LABEL_10:
      v35 = (void *)MEMORY[0x219A27218](a9, a10);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  else
  {
    v36 = 0;
    v25 = a15;
    if (a10)
      goto LABEL_10;
  }
  v35 = 0;
LABEL_13:
  v34.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for BMSiriPostSiriEngagementSignal);
  v26.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (v25)
  {
    v27 = (void *)MEMORY[0x219A27218](a14, v25);
    swift_bridgeObjectRelease();
    v28 = a19;
    if (a17)
      goto LABEL_15;
LABEL_18:
    v29 = 0;
    v30 = a12;
    if (v28)
      goto LABEL_16;
LABEL_19:
    v31 = 0;
    goto LABEL_20;
  }
  v27 = 0;
  v28 = a19;
  if (!a17)
    goto LABEL_18;
LABEL_15:
  v29 = (void *)MEMORY[0x219A27218](a16, a17);
  swift_bridgeObjectRelease();
  v30 = a12;
  if (!v28)
    goto LABEL_19;
LABEL_16:
  v31 = (void *)MEMORY[0x219A27218](a18, v28);
  swift_bridgeObjectRelease();
LABEL_20:
  v33 = objc_msgSend(v40, sel_initWithUISessionID_taskID_taskType_conversationPath_appPattern_requestIds_engagementUnderstandingFeatures_pseEvents_clientSessionId_lastRequestId_executionUUID_, v39, v38, v37, v36, v35, v34.super.isa, v30, v26.super.isa, v27, v29, v31);

  return v33;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PSEBiomeDonator()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSEBiomeDonator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSEBiomeDonator.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PSEBiomeDonator.donatePSESignals(signals:siriTask:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PSEBiomeDonator.createEngagementUnderstandingFeatures(engagementFeatures:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PSEBiomeDonator.createBiomePSESignal(signals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PSEBiomeDonator.getBiomeTaskSuccess(taskSuccess:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t type metadata accessor for BMSiriPostSiriEngagementSignalContent(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t MessagesIntentSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

void MessagesIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  char v46;
  id v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  void *v61;
  char v62;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  Swift::String v86;
  id v87;
  id v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  char v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  char *v115;
  _QWORD *v116;
  id v117;
  void *v118;
  id v119;
  void *v120;
  _QWORD *v121;
  id v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  id v128;
  void *v129;
  id v130;
  Swift::String v131;
  _QWORD *v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  id v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  Swift::String v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  id v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  Swift::String v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  id v169;
  void *v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  char v174;
  uint64_t v175;
  id v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  double v182;
  __int128 v183;
  uint64_t v184;
  char v185;
  id v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  id v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  id countAndFlagsBits;
  char *v207;
  char *v208;
  char *v209;
  id v210;
  char *v211;
  char *v212;
  char *v213;
  _QWORD *v214;
  _QWORD *v215;
  id v216;
  char *v217;
  Swift::String v218;
  id v219;
  Swift::String v220;
  __int128 v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;

  v205 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v217 = (char *)&v200 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v209 = (char *)&v200 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v7);
  v208 = (char *)&v200 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v213 = (char *)&v200 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v212 = (char *)&v200 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v211 = (char *)&v200 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v200 - v16;
  v18 = type metadata accessor for ReliabilityCategory();
  v19 = *(_QWORD **)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v200 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Logger();
  v23 = *(void **)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v200 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (void *)MEMORY[0x219A27818](v24);
  v28 = v219;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, &v220._countAndFlagsBits);
  v219 = v28;
  if (v28)
  {
    objc_autoreleasePoolPop(v27);
    return;
  }
  v203 = (unint64_t)v26;
  v216 = v23;
  v204 = v21;
  v214 = v19;
  v215 = (_QWORD *)v18;
  v207 = v17;
  v201 = a1;
  objc_autoreleasePoolPop(v27);
  countAndFlagsBits = (id)v220._countAndFlagsBits;
  v210 = objc_msgSend((id)v220._countAndFlagsBits, sel_intent);
  v29 = objc_msgSend(v210, sel_domain);
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v32 = v31;

  if (v30 == 0x736567617373654DLL && v32 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v33 = v201;
    v34 = v218._countAndFlagsBits;
    goto LABEL_7;
  }
  v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v33 = v201;
  v34 = v218._countAndFlagsBits;
  if ((v35 & 1) != 0)
  {
LABEL_7:
    v36 = objc_msgSend(v33, sel_donatedBySiri);
    v37 = MEMORY[0x24BEE1328];
    *((_QWORD *)&v221 + 1) = MEMORY[0x24BEE1328];
    LOBYTE(v220._countAndFlagsBits) = v36;
    outlined init with take of Any(&v220, &v225);
    v38 = MEMORY[0x24BEE4B00];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v227 = v38;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0x42646574616E6F64, 0xED00006972695379, isUniquelyReferenced_nonNull_native);
    v40 = v227;
    swift_bridgeObjectRelease();
    v41 = objc_msgSend(v210, sel_typeName);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v43;

    v45 = MEMORY[0x24BEE0D00];
    *((_QWORD *)&v221 + 1) = MEMORY[0x24BEE0D00];
    v220._countAndFlagsBits = v42;
    v220._object = v44;
    outlined init with take of Any(&v220, &v225);
    v46 = swift_isUniquelyReferenced_nonNull_native();
    v224 = v40;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0x7954746E65746E69, 0xEE00656D614E6570, v46);
    v227 = v224;
    swift_bridgeObjectRelease();
    v47 = objc_msgSend(v33, sel_bundleID);
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v49;

    v220._countAndFlagsBits = v48;
    v220._object = v50;
    *(_QWORD *)&v225 = 0x6C7070612E6D6F63;
    *((_QWORD *)&v225 + 1) = 0xEA00000000002E65;
    lazy protocol witness table accessor for type String and conformance String();
    LOBYTE(v47) = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    *((_QWORD *)&v221 + 1) = v37;
    LOBYTE(v220._countAndFlagsBits) = v47 & 1;
    outlined init with take of Any(&v220, &v225);
    v51 = v227;
    v52 = swift_isUniquelyReferenced_nonNull_native();
    v224 = v51;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000016, 0x8000000218FBF020, v52);
    v53 = v224;
    swift_bridgeObjectRelease();
    v54 = objc_msgSend(v33, sel_interactionDirection);
    type metadata accessor for BMInteractionDirection(0);
    *((_QWORD *)&v221 + 1) = v55;
    v220._countAndFlagsBits = (uint64_t)v54;
    outlined init with take of Any(&v220, &v225);
    v56 = swift_isUniquelyReferenced_nonNull_native();
    v224 = v53;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000014, 0x8000000218FC0780, v56);
    v57 = v224;
    v227 = v224;
    swift_bridgeObjectRelease();
    v58 = objc_msgSend(countAndFlagsBits, sel_intentResponse);
    if (!v58)
      goto LABEL_31;
    v59 = v58;
    v60 = (*(uint64_t (**)(id))(*(_QWORD *)v34 + 104))(objc_msgSend(v58, sel__intentResponseCode));
    *((_QWORD *)&v221 + 1) = v45;
    v220._countAndFlagsBits = v60;
    v220._object = v61;
    outlined init with take of Any(&v220, &v225);
    v62 = swift_isUniquelyReferenced_nonNull_native();
    v224 = v57;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000012, 0x8000000218FC07C0, v62);
    v227 = v224;
    swift_bridgeObjectRelease();
    objc_opt_self();
    v63 = swift_dynamicCastObjCClass();
    if (!v63)
    {

      goto LABEL_31;
    }
    v64 = (void *)v63;
    v65 = v59;
    v66 = objc_msgSend(v64, sel_sentMessages);
    if (v66)
    {
      v67 = v66;
      type metadata accessor for INMessage();
      v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v68 >> 62)
      {
        swift_bridgeObjectRetain();
        v103 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v103)
        {
          swift_bridgeObjectRetain();
          v104 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          v218._countAndFlagsBits = v104;
          if (!v104)
          {
            v216 = v65;
            swift_bridgeObjectRelease();
            v71 = MEMORY[0x24BEE4AF8];
LABEL_25:
            *((_QWORD *)&v221 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
            v220._countAndFlagsBits = v71;
            outlined init with take of Any(&v220, &v225);
            v100 = v227;
            v101 = swift_isUniquelyReferenced_nonNull_native();
            v224 = v100;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000018, 0x8000000218FC06D0, v101);
            v227 = v224;
            v102 = v216;

            swift_bridgeObjectRelease();
            goto LABEL_31;
          }
LABEL_12:
          v216 = v65;
          *(_QWORD *)&v225 = MEMORY[0x24BEE4AF8];
          v69 = v218._countAndFlagsBits;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69 & ~(v69 >> 63), 0);
          if (v69 < 0)
          {
            __break(1u);
LABEL_108:
            __break(1u);
            return;
          }
          v70 = 0;
          v71 = v225;
          v72 = v68 & 0xC000000000000001;
          v73 = v68;
          do
          {
            if (v72)
              v74 = (id)MEMORY[0x219A2756C](v70, v68);
            else
              v74 = *(id *)(v68 + 8 * v70 + 32);
            v75 = v74;
            v76 = objc_msgSend(v74, sel_identifier);
            v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v79 = v78;

            *(_QWORD *)&v225 = v71;
            v81 = *(_QWORD *)(v71 + 16);
            v80 = *(_QWORD *)(v71 + 24);
            if (v81 >= v80 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
              v71 = v225;
            }
            ++v70;
            *(_QWORD *)(v71 + 16) = v81 + 1;
            v82 = v71 + 16 * v81;
            *(_QWORD *)(v82 + 32) = v77;
            *(_QWORD *)(v82 + 40) = v79;
            v68 = v73;
          }
          while (v218._countAndFlagsBits != v70);
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
      }
      else
      {
        v218._countAndFlagsBits = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v218._countAndFlagsBits)
          goto LABEL_12;
      }
      swift_bridgeObjectRelease();
    }

LABEL_31:
    v105 = objc_msgSend(v210, sel_parametersByName);
    if (v105)
    {
      v106 = v105;
      v107 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v108 = (uint64_t)v208;
      v109 = (uint64_t)v217;
      if (*(_QWORD *)(v107 + 16)
        && (v110 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E65697069636572, 0xEA00000000007374),
            (v111 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v107 + 56) + 32 * v110, (uint64_t)&v220);
      }
      else
      {
        v220 = (Swift::String)0;
        v221 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v221 + 1))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v112 = v225;
          if ((unint64_t)v225 >> 62)
          {
            swift_bridgeObjectRetain();
            v113 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            v114 = v219;
            if (v113)
            {
LABEL_40:
              if (v113 >= 1)
              {
                v115 = 0;
                v203 = v112 & 0xC000000000000001;
                v116 = (_QWORD *)MEMORY[0x24BEE4AF8];
                v218._countAndFlagsBits = MEMORY[0x24BEE4AF8];
                v216 = (id)MEMORY[0x24BEE4AF8];
                v215 = (_QWORD *)MEMORY[0x24BEE4AF8];
                v202 = v112;
                v204 = (char *)v113;
                while (1)
                {
                  if (v203)
                    v117 = (id)MEMORY[0x219A2756C](v115, v112);
                  else
                    v117 = *(id *)(v112 + 8 * (_QWORD)v115 + 32);
                  v118 = v117;
                  v119 = objc_msgSend(v117, sel_personHandle);
                  v120 = v119;
                  v121 = v215;
                  if (v119)
                  {
                    v122 = objc_msgSend(v119, sel_value);

                    if (v122)
                    {
                      v120 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v124 = v123;

                      goto LABEL_50;
                    }
                    v120 = 0;
                  }
                  v124 = 0xE000000000000000;
LABEL_50:
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v121[2] + 1, 1, v121);
                  v126 = v121[2];
                  v125 = v121[3];
                  if (v126 >= v125 >> 1)
                    v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v125 > 1), v126 + 1, 1, v121);
                  v121[2] = v126 + 1;
                  v215 = v121;
                  v127 = &v121[2 * v126];
                  v127[4] = v120;
                  v127[5] = v124;
                  v219 = v118;
                  v128 = objc_msgSend(v118, sel_displayName);
                  static String._unconditionallyBridgeFromObjectiveC(_:)();

                  v220 = String.lowercased()();
                  v129 = v114;
                  specialized RangeReplaceableCollection.removeAll(where:)(&v220);
                  v130 = v114;
                  swift_bridgeObjectRelease();
                  v131 = v220;
                  v132 = v216;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v132 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v132[2] + 1, 1, v132);
                  v133 = v211;
                  v135 = v132[2];
                  v134 = v132[3];
                  if (v135 >= v134 >> 1)
                    v132 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v134 > 1), v135 + 1, 1, v132);
                  v132[2] = v135 + 1;
                  *(Swift::String *)&v132[2 * v135 + 4] = v131;
                  v136 = objc_msgSend(v219, sel_nameComponents);
                  v214 = v116;
                  if (v136)
                  {
                    v137 = v136;
                    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

                    v138 = type metadata accessor for PersonNameComponents();
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v133, 0, 1, v138);
                  }
                  else
                  {
                    v138 = type metadata accessor for PersonNameComponents();
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v133, 1, 1, v138);
                  }
                  v216 = v132;
                  v139 = (uint64_t)v133;
                  v140 = (uint64_t)v207;
                  outlined init with take of Date?(v139, (uint64_t)v207, &demangling cache variable for type metadata for PersonNameComponents?);
                  type metadata accessor for PersonNameComponents();
                  v141 = *(_QWORD *)(v138 - 8);
                  v142 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48);
                  if (v142(v140, 1, v138))
                  {
                    outlined destroy of Any?(v140, &demangling cache variable for type metadata for PersonNameComponents?);
LABEL_63:
                    swift_bridgeObjectRelease();
                    goto LABEL_65;
                  }
                  PersonNameComponents.givenName.getter();
                  v144 = v143;
                  outlined destroy of Any?(v140, &demangling cache variable for type metadata for PersonNameComponents?);
                  if (!v144)
                    goto LABEL_63;
LABEL_65:
                  v220 = String.lowercased()();
                  specialized RangeReplaceableCollection.removeAll(where:)(&v220);
                  swift_bridgeObjectRelease();
                  v145 = v220;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                    v146 = (_QWORD *)v218._countAndFlagsBits;
                  else
                    v146 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v218._countAndFlagsBits + 16) + 1, 1, v218._countAndFlagsBits);
                  v148 = v146[2];
                  v147 = v146[3];
                  if (v148 >= v147 >> 1)
                    v146 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v147 > 1), v148 + 1, 1, v146);
                  v146[2] = v148 + 1;
                  v218._countAndFlagsBits = (uint64_t)v146;
                  *(Swift::String *)&v146[2 * v148 + 4] = v145;
                  v149 = objc_msgSend(v219, sel_nameComponents);
                  if (v149)
                  {
                    v150 = v149;
                    v151 = (uint64_t)v213;
                    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

                    v152 = 0;
                  }
                  else
                  {
                    v152 = 1;
                    v151 = (uint64_t)v213;
                  }
                  v153 = (uint64_t)v212;
                  v112 = v202;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v151, v152, 1, v138);
                  outlined init with take of Date?(v151, v153, &demangling cache variable for type metadata for PersonNameComponents?);
                  if (v142(v153, 1, v138))
                  {
                    outlined destroy of Any?(v153, &demangling cache variable for type metadata for PersonNameComponents?);
                    v116 = v214;
                  }
                  else
                  {
                    PersonNameComponents.familyName.getter();
                    v155 = v154;
                    outlined destroy of Any?(v153, &demangling cache variable for type metadata for PersonNameComponents?);
                    v116 = v214;
                    if (v155)
                      goto LABEL_76;
                  }
                  swift_bridgeObjectRelease();
LABEL_76:
                  v220 = String.lowercased()();
                  specialized RangeReplaceableCollection.removeAll(where:)(&v220);
                  v114 = v130;
                  swift_bridgeObjectRelease();
                  v156 = v220;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v116[2] + 1, 1, v116);
                  v158 = v116[2];
                  v157 = v116[3];
                  if (v158 >= v157 >> 1)
                    v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v157 > 1), v158 + 1, 1, v116);
                  ++v115;
                  v116[2] = v158 + 1;
                  *(Swift::String *)&v116[2 * v158 + 4] = v156;

                  v109 = (uint64_t)v217;
                  if (v204 == v115)
                  {
                    v219 = v129;
                    swift_bridgeObjectRelease();
                    v108 = (uint64_t)v208;
                    v197 = v218._countAndFlagsBits;
                    v198 = (uint64_t)v216;
                    v199 = (uint64_t)v215;
                    goto LABEL_86;
                  }
                }
              }
              goto LABEL_108;
            }
          }
          else
          {
            v113 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFF8) + 0x10);
            v114 = v219;
            if (v113)
              goto LABEL_40;
          }
          swift_bridgeObjectRelease();
        }
LABEL_85:
        v116 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v197 = MEMORY[0x24BEE4AF8];
        v198 = MEMORY[0x24BEE4AF8];
        v199 = MEMORY[0x24BEE4AF8];
LABEL_86:
        v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        *((_QWORD *)&v221 + 1) = v159;
        v220._countAndFlagsBits = v199;
        outlined init with take of Any(&v220, &v225);
        v160 = v227;
        v161 = swift_isUniquelyReferenced_nonNull_native();
        v224 = v160;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0x73746361746E6F63, 0xED000065756C6156, v161);
        v162 = v224;
        swift_bridgeObjectRelease();
        *((_QWORD *)&v221 + 1) = v159;
        v220._countAndFlagsBits = v198;
        outlined init with take of Any(&v220, &v225);
        v163 = swift_isUniquelyReferenced_nonNull_native();
        v224 = v162;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000013, 0x8000000218FC05B0, v163);
        v164 = v224;
        swift_bridgeObjectRelease();
        *((_QWORD *)&v221 + 1) = v159;
        v220._countAndFlagsBits = v197;
        outlined init with take of Any(&v220, &v225);
        v165 = swift_isUniquelyReferenced_nonNull_native();
        v224 = v164;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000011, 0x8000000218FC05D0, v165);
        v166 = v224;
        swift_bridgeObjectRelease();
        *((_QWORD *)&v221 + 1) = v159;
        v220._countAndFlagsBits = (uint64_t)v116;
        outlined init with take of Any(&v220, &v225);
        v167 = swift_isUniquelyReferenced_nonNull_native();
        v224 = v166;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000010, 0x8000000218FC05F0, v167);
        v168 = v224;
        v227 = v224;
        swift_bridgeObjectRelease();
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
          goto LABEL_99;
        v169 = objc_msgSend(v210, sel_parametersByName);
        if (v169)
        {
          v170 = v169;
          v171 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(_QWORD *)(v171 + 16))
          {
            v172 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000218FC07A0);
            v108 = (uint64_t)v208;
            if ((v173 & 1) != 0)
            {
              outlined init with copy of Any(*(_QWORD *)(v171 + 56) + 32 * v172, (uint64_t)&v225);
            }
            else
            {
              v225 = 0u;
              v226 = 0u;
            }
          }
          else
          {
            v225 = 0u;
            v226 = 0u;
            v108 = (uint64_t)v208;
          }
          swift_bridgeObjectRelease();
          if (*((_QWORD *)&v226 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              *((_QWORD *)&v221 + 1) = v159;
              v220._countAndFlagsBits = v224;
              outlined init with take of Any(&v220, &v225);
              v174 = swift_isUniquelyReferenced_nonNull_native();
              v224 = v168;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v225, 0xD000000000000018, 0x8000000218FC06F0, v174);
              v227 = v224;
              swift_bridgeObjectRelease();
LABEL_99:
              objc_msgSend(v201, sel_absoluteTimestamp);
              Date.init(timeIntervalSinceReferenceDate:)();
              v175 = type metadata accessor for Date();
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 56))(v108, 0, 1, v175);
              v176 = objc_msgSend(countAndFlagsBits, sel_dateInterval);
              v177 = (uint64_t)v209;
              if (v176)
              {
                v178 = v176;
                static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

                v179 = type metadata accessor for DateInterval();
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 56))(v109, 0, 1, v179);
              }
              else
              {
                v179 = type metadata accessor for DateInterval();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 56))(v109, 1, 1, v179);
              }
              v180 = v205;
              outlined init with take of Date?(v109, v177, &demangling cache variable for type metadata for DateInterval?);
              type metadata accessor for DateInterval();
              v181 = 0.0;
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 48))(v177, 1, v179))
              {
                DateInterval.duration.getter();
                v177 = (uint64_t)v209;
                v181 = v182;
              }
              outlined destroy of Any?(v177, &demangling cache variable for type metadata for DateInterval?);
              type metadata accessor for Utils();
              static Utils.deltaTBetween(eventStart:siriUISession:duration:)(v108, v180, (uint64_t)&v220, v181);
              outlined destroy of Any?(v108, &demangling cache variable for type metadata for Date?);
              v218 = v220;
              v183 = v221;
              v184 = v222;
              v185 = v223;
              v186 = v210;
              v187 = objc_msgSend(v210, sel_domain);
              v188 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v190 = v189;

              v191 = objc_msgSend(v186, sel_verb);
              v192 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v194 = v193;

              v195 = v227;
              type metadata accessor for Signal();
              v196 = swift_allocObject();
              *(Swift::String *)(v196 + 16) = v218;
              *(_OWORD *)(v196 + 32) = v183;
              *(_QWORD *)(v196 + 48) = v184;
              *(_BYTE *)(v196 + 56) = v185;
              *(_QWORD *)(v196 + 64) = v188;
              *(_QWORD *)(v196 + 72) = v190;
              *(_QWORD *)(v196 + 80) = v192;
              *(_QWORD *)(v196 + 88) = v194;
              *(_BYTE *)(v196 + 96) = 1;
              *(_QWORD *)(v196 + 104) = v195;
              return;
            }
LABEL_98:
            specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000018, 0x8000000218FC06F0, &v225);
            outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for Any?);
            goto LABEL_99;
          }
        }
        else
        {
          v225 = 0u;
          v226 = 0u;
          v108 = (uint64_t)v208;
        }
        outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for Any?);
        goto LABEL_98;
      }
    }
    else
    {
      v220 = (Swift::String)0;
      v221 = 0u;
      v108 = (uint64_t)v208;
      v109 = (uint64_t)v217;
    }
    outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for Any?);
    goto LABEL_85;
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v83 = v22;
  v84 = __swift_project_value_buffer(v22, (uint64_t)static Logger.engagement);
  v85 = v203;
  (*((void (**)(unint64_t, uint64_t, uint64_t))v216 + 2))(v203, v84, v22);
  v220._countAndFlagsBits = 0;
  v220._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v86._object = (void *)0x8000000218FC0170;
  v86._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v86);
  v87 = v210;
  v88 = objc_msgSend(v210, sel_domain);
  v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v91 = v90;

  v92._countAndFlagsBits = v89;
  v92._object = v91;
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  v93._countAndFlagsBits = 0xD000000000000027;
  v93._object = (void *)0x8000000218FC0750;
  String.append(_:)(v93);
  v94 = v220;
  v95 = *MEMORY[0x24BEA8140];
  v96 = type metadata accessor for AppIntentEventDataIssues();
  v97 = (uint64_t)v204;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 104))(v204, v95, v96);
  v98 = v214;
  v99 = v215;
  ((void (*)(uint64_t, _QWORD, _QWORD *))v214[13])(v97, *MEMORY[0x24BEA8000], v215);
  Logger.error(_:_:)(v94._countAndFlagsBits, (unint64_t)v94._object, v97);

  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, _QWORD *))v98[1])(v97, v99);
  (*((void (**)(unint64_t, uint64_t))v216 + 1))(v85, v83);
}

uint64_t MessagesIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  id v19;
  void *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  void (*v62)(char *, uint64_t, unint64_t);
  unint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t (*v77)(id, uint64_t);
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  char v87[8];
  __int128 v88;
  __int128 v89;
  unint64_t v90;

  v4 = v3;
  v79 = a2;
  v7 = type metadata accessor for ReliabilityCategory();
  v84 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v83 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for Logger();
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v80 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v66 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v61 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v60 = (char *)&v57 - v16;
  v90 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_61;
  v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v17)
  {
LABEL_3:
    v65 = (_QWORD *)v13;
    v64 = v12;
    v58 = (_QWORD *)a3;
    v13 = 0;
    v12 = 0;
    v78 = a1 & 0xC000000000000001;
    v69 = a1 & 0xFFFFFFFFFFFFFF8;
    v63 = MEMORY[0x24BEE4AF8];
    v68 = a1 + 32;
    v77 = *(uint64_t (**)(id, uint64_t))(*v4 + 88);
    v74 = *MEMORY[0x24BEA7F08];
    v73 = *MEMORY[0x24BEA8030];
    v59 = MEMORY[0x24BEE4AD8] + 8;
    v72 = 0x8000000218FC07E0;
    *(_QWORD *)&v18 = 136315138;
    v67 = v18;
    v71 = v4;
    v70 = v7;
    v75 = v17;
    v76 = a1;
    do
    {
      if (v78)
      {
        v19 = (id)MEMORY[0x219A2756C](v13, a1);
      }
      else
      {
        if (v13 >= *(_QWORD *)(v69 + 16))
          goto LABEL_60;
        v19 = *(id *)(v68 + 8 * v13);
      }
      v20 = v19;
      v21 = __OFADD__(v13++, 1);
      if (v21)
        goto LABEL_59;
      a3 = (unint64_t)v4;
      v22 = v77(v19, v79);
      if (v22)
      {
        a3 = v90;
        if (v90 >> 62)
        {
          swift_bridgeObjectRetain_n();
          v23 = _CocoaArrayWrapper.endIndex.getter();
          if (v23)
          {
LABEL_14:
            v7 = a3 & 0xC000000000000001;
            a1 = 4;
            do
            {
              v24 = a1 - 4;
              if (v7)
              {
                v25 = MEMORY[0x219A2756C](a1 - 4, a3);
                v21 = __OFADD__(v24, 1);
                v4 = (_QWORD *)(a1 - 3);
                if (v21)
                  goto LABEL_58;
              }
              else
              {
                v25 = *(_QWORD *)(a3 + 8 * a1);
                swift_retain();
                v21 = __OFADD__(v24, 1);
                v4 = (_QWORD *)(a1 - 3);
                if (v21)
                {
LABEL_58:
                  __break(1u);
LABEL_59:
                  __break(1u);
LABEL_60:
                  __break(1u);
LABEL_61:
                  swift_bridgeObjectRetain();
                  v17 = _CocoaArrayWrapper.endIndex.getter();
                  if (!v17)
                    goto LABEL_62;
                  goto LABEL_3;
                }
              }
              *(_QWORD *)&v88 = v25;
              if ((closure #1 in MessagesIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)((uint64_t *)&v88, v22) & 1) != 0)
              {
                v28 = swift_bridgeObjectRelease_n();
                v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 216))(v28);
                if (*(_QWORD *)(v29 + 16))
                {
                  v30 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379);
                  a1 = v76;
                  v4 = v71;
                  v7 = v70;
                  if ((v31 & 1) != 0)
                  {
                    outlined init with copy of Any(*(_QWORD *)(v29 + 56) + 32 * v30, (uint64_t)&v88);
                  }
                  else
                  {
                    v88 = 0u;
                    v89 = 0u;
                  }
                }
                else
                {
                  v88 = 0u;
                  v89 = 0u;
                  a1 = v76;
                  v4 = v71;
                  v7 = v70;
                }
                swift_bridgeObjectRelease();
                if (*((_QWORD *)&v89 + 1))
                {
                  v41 = swift_dynamicCast();
                  if ((_DWORD)v41 && (v87[0] & 1) == 0)
                  {
                    *((_QWORD *)&v89 + 1) = MEMORY[0x24BEE1328];
                    LOBYTE(v88) = 1;
                    v62 = (void (*)(char *, uint64_t, unint64_t))(*(uint64_t (**)(char *))(*(_QWORD *)v25 + 232))(v87);
                    v43 = v42;
                    if (*((_QWORD *)&v89 + 1))
                    {
                      outlined init with take of Any(&v88, &v86);
                      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      v85 = *v43;
                      *v43 = 0x8000000000000000;
                      a3 = (unint64_t)&v85;
                      v45 = 0x42646574616E6F64;
                      v46 = 0x6972695379;
                      goto LABEL_49;
                    }
                    outlined destroy of Any?((uint64_t)&v88, &demangling cache variable for type metadata for Any?);
                    v51 = 0x42646574616E6F64;
                    v52 = 0x6972695379;
LABEL_51:
                    a3 = (unint64_t)v43;
                    specialized Dictionary._Variant.removeValue(forKey:)(v51, v52 & 0xFFFFFFFFFFFFLL | 0xED00000000000000, &v86);
                    outlined destroy of Any?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
                    goto LABEL_52;
                  }
                }
                else
                {
                  v41 = outlined destroy of Any?((uint64_t)&v88, &demangling cache variable for type metadata for Any?);
                }
                v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 216))(v41);
                if (*(_QWORD *)(v47 + 16)
                  && (v48 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156),
                      (v49 & 1) != 0))
                {
                  outlined init with copy of Any(*(_QWORD *)(v47 + 56) + 32 * v48, (uint64_t)&v88);
                }
                else
                {
                  v88 = 0u;
                  v89 = 0u;
                }
                swift_bridgeObjectRelease();
                v62 = (void (*)(char *, uint64_t, unint64_t))(*(uint64_t (**)(char *))(*(_QWORD *)v25 + 232))(v87);
                v43 = v50;
                if (!*((_QWORD *)&v89 + 1))
                {
                  outlined destroy of Any?((uint64_t)&v88, &demangling cache variable for type metadata for Any?);
                  v51 = 0x73746361746E6F63;
                  v52 = 0x65756C6156;
                  goto LABEL_51;
                }
                outlined init with take of Any(&v88, &v86);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v85 = *v43;
                *v43 = 0x8000000000000000;
                a3 = (unint64_t)&v85;
                v45 = 0x73746361746E6F63;
                v46 = 0x65756C6156;
LABEL_49:
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v86, v45, v46 & 0xFFFFFFFFFFFFLL | 0xED00000000000000, isUniquelyReferenced_nonNull_native);
                *v43 = v85;
                swift_bridgeObjectRelease();
LABEL_52:
                ((void (*)(char *, _QWORD))v62)(v87, 0);

                swift_release();
                swift_release();
                v17 = v75;
                goto LABEL_5;
              }
              swift_release();
              ++a1;
            }
            while (v4 != (_QWORD *)v23);
          }
        }
        else
        {
          v23 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v23)
            goto LABEL_14;
        }
        swift_bridgeObjectRelease_n();
        v26 = swift_retain();
        MEMORY[0x219A2732C](v26);
        if (*(_QWORD *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v4 = v71;
        v27 = (uint64_t)v64;
        (*(void (**)(void *))(*v71 + 80))(v20);
        v7 = v70;
        v32 = v66;
        a3 = (unint64_t)v65;
        v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(v66 + 48))(v27, 1, v65);
        if (v33 == 1)
        {
          v17 = v75;
          a1 = v76;

          swift_release();
          outlined destroy of Any?(v27, &demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
        }
        else
        {
          v34 = v60;
          v62 = *(void (**)(char *, uint64_t, unint64_t))(v32 + 32);
          v62(v60, v27, a3);
          (*(void (**)(char *, char *, unint64_t))(v32 + 16))(v61, v34, a3);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v35 = v63;
          else
            v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v63 + 16) + 1, 1, v63);
          v37 = *(_QWORD *)(v35 + 16);
          v36 = *(_QWORD *)(v35 + 24);
          v38 = v66;
          v17 = v75;
          if (v37 >= v36 >> 1)
          {
            v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v35);
            v38 = v66;
            v35 = v53;
          }
          *(_QWORD *)(v35 + 16) = v37 + 1;
          v39 = v38;
          v40 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
          v63 = v35;
          a3 = (unint64_t)v65;
          v62((char *)(v35 + v40 + *(_QWORD *)(v38 + 72) * v37), (uint64_t)v61, (unint64_t)v65);

          swift_release();
          (*(void (**)(char *, unint64_t))(v39 + 8))(v60, a3);
          a1 = v76;
        }
      }
      else
      {

      }
LABEL_5:
      ;
    }
    while (v13 != v17);
    result = swift_bridgeObjectRelease();
    v55 = v90;
    a3 = (unint64_t)v58;
    v56 = v63;
  }
  else
  {
LABEL_62:
    result = swift_bridgeObjectRelease();
    v55 = MEMORY[0x24BEE4AF8];
    v56 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)a3 = v55;
  *(_QWORD *)(a3 + 8) = v56;
  return result;
}

uint64_t closure #1 in MessagesIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  double v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  int v20;
  _QWORD *v21;
  double v22;
  double v23;
  char v24;
  double v25[6];
  __int128 v26;
  __int128 v27;

  v3 = *a1;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 168))();
  v6 = v5;
  if (v4 == (*(uint64_t (**)(void))(*(_QWORD *)v3 + 168))() && v6 == v7)
  {
    result = swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v9 & 1) != 0)
  {
LABEL_8:
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 216))(result);
    if (*(_QWORD *)(v11 + 16)
      && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FC0780),
          (v13 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v26);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v27 + 1))
      {
        type metadata accessor for BMInteractionDirection(0);
        v14 = swift_dynamicCast();
        if (v14)
          v15 = v25[0];
        else
          v15 = 0.0;
        v16 = v14 ^ 1;
        goto LABEL_17;
      }
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
      swift_bridgeObjectRelease();
    }
    outlined destroy of Any?((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
    v15 = 0.0;
    v16 = 1;
LABEL_17:
    v17 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 216))();
    if (*(_QWORD *)(v17 + 16)
      && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x8000000218FC0780),
          (v19 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&v26);
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v27 + 1))
    {
      type metadata accessor for BMInteractionDirection(0);
      v20 = swift_dynamicCast();
      if ((v16 & 1) != 0)
      {
        if ((v20 & 1) != 0)
          return 0;
      }
      else
      {
        v23 = v25[0];
        if (!v20)
          v23 = 0.0;
        if (*(_QWORD *)&v15 == *(_QWORD *)&v23)
          v24 = v20;
        else
          v24 = 0;
        if ((v24 & 1) == 0)
          return 0;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
      if ((v16 & 1) == 0)
        return 0;
    }
    v21 = (*(_QWORD *(**)(__int128 *__return_ptr))(*(_QWORD *)a2 + 120))(&v26);
    v22 = *(double *)&v26;
    (*(void (**)(double *__return_ptr, _QWORD *))(*(_QWORD *)v3 + 120))(v25, v21);
    return vabdd_f64(v22, v25[0]) < 2.0;
  }
  return result;
}

uint64_t MessagesIntentSignalFactory.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t MessagesIntentSignalFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MessagesIntentSignalFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t type metadata accessor for INMessage()
{
  unint64_t result;

  result = lazy cache variable for type metadata for INMessage;
  if (!lazy cache variable for type metadata for INMessage)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INMessage);
  }
  return result;
}

uint64_t type metadata accessor for MessagesIntentSignalFactory()
{
  return objc_opt_self();
}

uint64_t static TaskSuccessCalculator.calculateTaskSuccess(signals:task:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t (**v31)(_QWORD);
  unint64_t v32;

  v4 = a1;
  v32 = MEMORY[0x24BEE4AF8];
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_3;
LABEL_23:
    swift_bridgeObjectRelease();
    v2 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_33;
    goto LABEL_24;
  }
  if (a1 < 0)
    v2 = a1;
  else
    v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5)
    goto LABEL_23;
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_38;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      v7 = MEMORY[0x219A2756C](i, v4);
    }
    else
    {
      v7 = *(_QWORD *)(v4 + 8 * i + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(_QWORD *)v7 + 144))() == 0x636E75614C707041 && v8 == 0xE900000000000068)
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
      {
        swift_release();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
  }
  swift_bridgeObjectRelease();
  v2 = v32;
  if ((v32 & 0x8000000000000000) != 0)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v4 > 0)
    {
      swift_retain();
      if (!_CocoaArrayWrapper.endIndex.getter())
      {
        swift_release();
        goto LABEL_36;
      }
LABEL_27:
      if ((v2 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)(v2 + 16))
        {
          __break(1u);
          goto LABEL_40;
        }
        v5 = *(_QWORD *)(v2 + 32);
        swift_retain();
LABEL_30:
        swift_release();
        swift_retain();
        v4 = specialized _ArrayProtocol.filter(_:)(v2, v5);
        swift_release();
        swift_release();
        if (!((unint64_t)v4 >> 62))
        {
          v11 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v11 == 1)
          {
LABEL_32:
            v12 = swift_bridgeObjectRelease();
            v13 = *(void (**)(uint64_t))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(v12)
                                                 + 112);
            v13(3);
            goto LABEL_66;
          }
LABEL_41:
          if (v11 < 2)
          {
            swift_bridgeObjectRelease();
            return swift_release();
          }
          v17 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 144))();
          v18 = v16;
          if (v17 == 0x736C6C6143 && v16 == 0xE500000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v19 = swift_bridgeObjectRelease();
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(v19);
            v21 = v31[11](v4);
          }
          else if (v17 == 0x736567617373654DLL && v18 == 0xE800000000000000
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v22 = swift_bridgeObjectRelease();
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(v22);
            v21 = v31[12](v4);
          }
          else if (v17 == 1936744781 && v18 == 0xE400000000000000
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v23 = swift_bridgeObjectRelease();
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(v23);
            v21 = v31[13](v4);
          }
          else if (v17 == 0x6D72616C41 && v18 == 0xE500000000000000
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v24 = swift_bridgeObjectRelease();
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(v24);
            v21 = v31[14](v4);
          }
          else
          {
            if (v17 == 0x636973754DLL && v18 == 0xE500000000000000)
            {
              v25 = swift_bridgeObjectRelease();
            }
            else
            {
              v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v25 = swift_bridgeObjectRelease();
              if ((v26 & 1) == 0)
              {
                v29 = swift_bridgeObjectRelease();
                v30 = *(void (**)(uint64_t))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(v29)
                                                     + 112);
                v30(2);
                goto LABEL_66;
              }
            }
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(v25);
            v21 = v31[15](v4);
          }
          v27 = v21;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 112))(v27);
LABEL_66:
          swift_release();
          return swift_release();
        }
LABEL_40:
        v11 = _CocoaArrayWrapper.endIndex.getter();
        if (v11 == 1)
          goto LABEL_32;
        goto LABEL_41;
      }
LABEL_38:
      v5 = MEMORY[0x219A2756C](0, v2);
      goto LABEL_30;
    }
    goto LABEL_36;
  }
LABEL_24:
  if ((v2 & 0x4000000000000000) != 0)
    goto LABEL_33;
  if (*(_QWORD *)(v2 + 16))
  {
    swift_retain();
    goto LABEL_27;
  }
LABEL_36:
  v14 = swift_release();
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 112))(1);
  return swift_release();
}

uint64_t static TaskSuccessCalculator.calculateCallsTaskSuccess(callSignals:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  double v17;
  __int128 v18;
  __int128 v19;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_38:
    swift_bridgeObjectRelease();
    return 1;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_38;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x219A2756C](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_43;
    }
    v4 = *(_QWORD *)(a1 + 32);
    swift_retain();
  }
  v5 = swift_bridgeObjectRelease();
  v6 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 216);
  v7 = ((uint64_t (*)(uint64_t))v6)(v5);
  if (!*(_QWORD *)(v7 + 16)
    || (v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v9 & 1) == 0))
  {
    v18 = 0u;
    v19 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v18);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v19 + 1))
  {
LABEL_14:
    swift_release();
    outlined destroy of Any?((uint64_t)&v18);
    return 1;
  }
  result = swift_dynamicCast();
  if ((result & 1) == 0 || LOBYTE(v17) != 1)
  {
    swift_release();
    return 1;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    v10 = MEMORY[0x219A2756C](1, a1);
    goto LABEL_18;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_43:
    __break(1u);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 40);
  swift_retain();
LABEL_18:
  v11 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 216))();
  swift_release();
  if (*(_QWORD *)(v11 + 16)
    && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v13 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v18);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v19 + 1))
  {
    swift_release();
    outlined destroy of Any?((uint64_t)&v18);
    return 3;
  }
  if ((swift_dynamicCast() & 1) == 0 || (LOBYTE(v17) & 1) != 0)
  {
    swift_release();
    return 3;
  }
  v14 = v6();
  if (*(_QWORD *)(v14 + 16)
    && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(0x617275446C6C6163, 0xEC0000006E6F6974), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v18);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_release();
  if (*((_QWORD *)&v19 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0 && v17 >= 5.0)
      return 3;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v18);
  }
  return 4;
}

uint64_t static TaskSuccessCalculator.calculateMessagesTaskSuccess(messageSignals:)(unint64_t a1)
{
  uint64_t (*v1)(void);
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;

  if (!(a1 >> 62))
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_68:
    swift_bridgeObjectRelease();
    return 1;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_68;
LABEL_3:
  v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = MEMORY[0x219A2756C](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_74;
    }
    v5 = *(_QWORD *)(a1 + 32);
    swift_retain();
  }
  v6 = swift_bridgeObjectRelease();
  v1 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 216);
  v7 = ((uint64_t (*)(uint64_t))v1)(v6);
  if (!*(_QWORD *)(v7 + 16)
    || (v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v9 & 1) == 0))
  {
    v33 = 0u;
    v34 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v33);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v34 + 1))
  {
LABEL_14:
    swift_release();
    outlined destroy of Any?((uint64_t)&v33);
    return 1;
  }
  result = swift_dynamicCast();
  if ((result & 1) == 0 || v32 != 1)
  {
    swift_release();
    return 1;
  }
  if (v4)
  {
    v11 = MEMORY[0x219A2756C](1, a1);
LABEL_18:
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 216))();
    swift_release();
    if (*(_QWORD *)(v12 + 16)
      && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
          (v14 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v12 + 56) + 32 * v13, (uint64_t)&v33);
    }
    else
    {
      v33 = 0u;
      v34 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v34 + 1))
    {
      swift_release();
      outlined destroy of Any?((uint64_t)&v33);
      return 3;
    }
    if ((swift_dynamicCast() & 1) == 0 || (v32 & 1) != 0)
      goto LABEL_77;
    v15 = v1();
    if (*(_QWORD *)(v15 + 16)
      && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000218FC06D0),
          (v17 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v15 + 56) + 32 * v16, (uint64_t)&v33);
    }
    else
    {
      v33 = 0u;
      v34 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v34 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      v18 = swift_dynamicCast();
      if ((v18 & 1) == 0)
        goto LABEL_46;
      if (v4)
      {
        v19 = MEMORY[0x219A2756C](1, a1);
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 40);
        swift_retain();
      }
      v20 = (*(uint64_t (**)(void))(*(_QWORD *)v19 + 216))();
      swift_release();
      if (*(_QWORD *)(v20 + 16)
        && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000218FC06F0),
            (v22 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v20 + 56) + 32 * v21, (uint64_t)&v33);
      }
      else
      {
        v33 = 0u;
        v34 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v34 + 1))
      {
        if ((swift_dynamicCast() & 1) == 0)
        {
          v18 = swift_bridgeObjectRelease();
          goto LABEL_46;
        }
        if (v32[2])
        {
          v23 = specialized static Array<A>.== infix(_:_:)(v32, v32);
          swift_bridgeObjectRelease();
          v18 = swift_bridgeObjectRelease();
          if ((v23 & 1) != 0)
          {
            swift_release();
            return 4;
          }
          goto LABEL_46;
        }
LABEL_74:
        swift_bridgeObjectRelease();
        v18 = swift_bridgeObjectRelease();
LABEL_46:
        v24 = ((uint64_t (*)(uint64_t))v1)(v18);
        if (*(_QWORD *)(v24 + 16)
          && (v25 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156),
              (v26 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v24 + 56) + 32 * v25, (uint64_t)&v33);
        }
        else
        {
          v33 = 0u;
          v34 = 0u;
        }
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v34 + 1))
          goto LABEL_65;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if ((swift_dynamicCast() & 1) != 0)
        {
          if (v4)
          {
            v27 = MEMORY[0x219A2756C](1, a1);
          }
          else
          {
            v27 = *(_QWORD *)(a1 + 40);
            swift_retain();
          }
          v28 = (*(uint64_t (**)(void))(*(_QWORD *)v27 + 216))();
          swift_release();
          if (*(_QWORD *)(v28 + 16)
            && (v29 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156),
                (v30 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v29, (uint64_t)&v33);
          }
          else
          {
            v33 = 0u;
            v34 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((_QWORD *)&v34 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              if (v32[2])
              {
                v31 = specialized static Array<A>.== infix(_:_:)(v32, v32);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                if ((v31 & 1) != 0)
                  return 4;
                return 3;
              }
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            goto LABEL_77;
          }
          swift_bridgeObjectRelease();
LABEL_65:
          swift_release();
          outlined destroy of Any?((uint64_t)&v33);
          return 3;
        }
LABEL_77:
        swift_release();
        return 3;
      }
      swift_bridgeObjectRelease();
    }
    v18 = outlined destroy of Any?((uint64_t)&v33);
    goto LABEL_46;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v11 = *(_QWORD *)(a1 + 40);
    swift_retain();
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t static TaskSuccessCalculator.calculateMapsTaskSuccess(geoSignals:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;

  v3 = a1;
  *(_QWORD *)&v49 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
LABEL_46:
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x24BEE4AF8];
    v2 = MEMORY[0x24BEE4AF8];
    v1 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_64;
    goto LABEL_47;
  }
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_46;
LABEL_3:
  if (v4 < 1)
    goto LABEL_94;
  v5 = 0;
  v6 = v3 & 0xC000000000000001;
  do
  {
    if (v6)
    {
      v7 = MEMORY[0x219A2756C](v5, v3);
    }
    else
    {
      v7 = *(_QWORD *)(v3 + 8 * v5 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(_QWORD *)v7 + 168))() == 2003789907 && v8 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_7;
    }
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      goto LABEL_6;
    swift_release();
LABEL_7:
    ++v5;
  }
  while (v4 != v5);
  swift_bridgeObjectRelease();
  v1 = v49;
  *(_QWORD *)&v49 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  for (i = 0; i != v4; ++i)
  {
    if (v6)
    {
      v12 = MEMORY[0x219A2756C](i, v3);
    }
    else
    {
      v12 = *(_QWORD *)(v3 + 8 * i + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(_QWORD *)v12 + 168))() == 0x7261436563616C50 && v13 == 0xEC00000070615464)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      continue;
    }
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_19;
    swift_release();
  }
  swift_bridgeObjectRelease();
  v44 = v49;
  *(_QWORD *)&v49 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  for (j = 0; j != v4; ++j)
  {
    if (v6)
    {
      v17 = MEMORY[0x219A2756C](j, v3);
    }
    else
    {
      v17 = *(_QWORD *)(v3 + 8 * j + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(_QWORD *)v17 + 168))() == 0x697461676976614ELL && v18 == 0xEA00000000006E6FLL)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      continue;
    }
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
      goto LABEL_32;
    swift_release();
  }
  swift_bridgeObjectRelease();
  v3 = v49;
  v2 = v44;
  if ((v1 & 0x8000000000000000) != 0)
  {
LABEL_64:
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v27)
      goto LABEL_65;
    goto LABEL_49;
  }
LABEL_47:
  if ((v1 & 0x4000000000000000) != 0)
    goto LABEL_64;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_65:
    swift_release();
    swift_release();
    v25 = v3 & 0x4000000000000000;
    goto LABEL_66;
  }
LABEL_49:
  if ((v1 & 0xC000000000000001) != 0)
    goto LABEL_95;
  if (*(_QWORD *)(v1 + 16))
  {
    v21 = *(_QWORD *)(v1 + 32);
    swift_retain();
    goto LABEL_52;
  }
  __break(1u);
  while (2)
  {
    swift_bridgeObjectRetain();
    v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v28)
      goto LABEL_98;
LABEL_69:
    v1 = 0;
    v29 = v3 & 0xC000000000000001;
    v2 = MEMORY[0x24BEE4AD8] + 8;
    v30 = MEMORY[0x24BEE0D00];
    v31 = 0x697461676976616ELL;
    v45 = v3;
    while (2)
    {
      if (v29)
      {
        v32 = MEMORY[0x219A2756C](v1, v3);
        v33 = v1 + 1;
        if (__OFADD__(v1, 1))
        {
LABEL_91:
          __break(1u);
LABEL_92:
          v43 = v48;
          goto LABEL_99;
        }
LABEL_76:
        v34 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 216))();
        if (*(_QWORD *)(v34 + 16)
          && (v35 = specialized __RawDictionaryStorage.find<A>(_:)(v31, 0xEE00657079546E6FLL), (v36 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v34 + 56) + 32 * v35, (uint64_t)&v49);
        }
        else
        {
          v49 = 0u;
          v50 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v50 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
          {
            v37 = v29;
            v38 = v28;
            v39 = v31;
            v40 = v2;
            v41 = v30;
            if (v46 == 0x65756E69746E6F43 && v47 == 0xE800000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v42 & 1) == 0)
              {
                swift_release();
                goto LABEL_88;
              }
            }
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
LABEL_88:
            v30 = v41;
            v2 = v40;
            v31 = v39;
            v28 = v38;
            v29 = v37;
            v3 = v45;
LABEL_72:
            ++v1;
            if (v33 == v28)
              goto LABEL_92;
            continue;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v49);
        }
        swift_release();
        goto LABEL_72;
      }
      break;
    }
    if (v1 < *(_QWORD *)(v3 + 16))
    {
      v32 = *(_QWORD *)(v3 + 8 * v1 + 32);
      swift_retain();
      v33 = v1 + 1;
      if (__OFADD__(v1, 1))
        goto LABEL_91;
      goto LABEL_76;
    }
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    v21 = MEMORY[0x219A2756C](0, v1);
LABEL_52:
    v22 = swift_release();
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v21 + 120))(&v49, v22);
    if (*((double *)&v49 + 1) > 0.0)
    {
      swift_release();
      swift_release();
      swift_release();
      return 4;
    }
    if (v2 < 0 || (v2 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
    }
    else
    {
      v24 = *(_QWORD *)(v2 + 16);
    }
    swift_release();
    if (v24 >= 1)
    {
      swift_release();
      goto LABEL_101;
    }
    v25 = v3 & 0x4000000000000000;
    if ((v3 & 0x8000000000000000) != 0 || v25)
    {
      swift_bridgeObjectRetain();
      v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
    }
    else
    {
      v26 = *(_QWORD *)(v3 + 16);
    }
    swift_release();
    if (v26 >= 1)
    {
LABEL_101:
      swift_release();
      return 3;
    }
LABEL_66:
    v48 = MEMORY[0x24BEE4AF8];
    if ((v3 & 0x8000000000000000) != 0 || v25)
      continue;
    break;
  }
  v28 = *(_QWORD *)(v3 + 16);
  if (v28)
    goto LABEL_69;
LABEL_98:
  v43 = MEMORY[0x24BEE4AF8];
LABEL_99:
  swift_release();
  if ((v43 & 0x8000000000000000) == 0 && (v43 & 0x4000000000000000) == 0)
    goto LABEL_101;
  swift_bridgeObjectRetain();
  _CocoaArrayWrapper.endIndex.getter();
  swift_release_n();
  return 3;
}

uint64_t static TaskSuccessCalculator.calculateAlarmsTaskSuccess(alarmSignals:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[6];
  unint64_t v25;
  __int128 v26;
  __int128 v27;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_49:
    swift_bridgeObjectRelease();
    return 3;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_49;
LABEL_3:
  v3 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x219A2756C](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_53;
    }
    v4 = *(_QWORD *)(a1 + 32);
    swift_retain();
  }
  v5 = swift_bridgeObjectRelease();
  v6 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 216);
  v7 = ((uint64_t (*)(uint64_t))v6)(v5);
  if (!*(_QWORD *)(v7 + 16)
    || (v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v9 & 1) == 0))
  {
    v26 = 0u;
    v27 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v26);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v27 + 1))
  {
LABEL_14:
    swift_release();
    outlined destroy of Any?((uint64_t)&v26);
    return 3;
  }
  result = swift_dynamicCast();
  if ((result & 1) == 0 || v24[0] != 1)
    goto LABEL_56;
  if (v3)
  {
    v11 = MEMORY[0x219A2756C](1, a1);
LABEL_17:
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 216))();
    swift_release();
    if (*(_QWORD *)(v12 + 16)
      && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
          (v14 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v12 + 56) + 32 * v13, (uint64_t)&v26);
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v27 + 1))
    {
      if ((swift_dynamicCast() & 1) == 0 || (v24[0] & 1) != 0)
        goto LABEL_56;
      if (v3)
      {
        v15 = MEMORY[0x219A2756C](1, a1);
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 40);
        swift_retain();
      }
      v16 = (*(uint64_t (**)(void))(*(_QWORD *)v15 + 216))();
      if (*(_QWORD *)(v16 + 16)
        && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL),
            (v18 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v17, (uint64_t)&v26);
      }
      else
      {
        v26 = 0u;
        v27 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v27 + 1))
      {
        if ((swift_dynamicCast() & 1) == 0)
        {
LABEL_55:
          swift_release();
LABEL_56:
          swift_release();
          return 3;
        }
        v19 = v6();
        if (*(_QWORD *)(v19 + 16)
          && (v20 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL),
              (v21 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v19 + 56) + 32 * v20, (uint64_t)&v26);
        }
        else
        {
          v26 = 0u;
          v27 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v27 + 1))
        {
          if ((swift_dynamicCast() & 1) == 0)
            goto LABEL_54;
          v22 = HIBYTE(v25) & 0xF;
          if ((v25 & 0x2000000000000000) == 0)
            v22 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFLL;
          if (v22)
          {
            v23 = HIBYTE(v25) & 0xF;
            if ((v25 & 0x2000000000000000) == 0)
              v23 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFLL;
            if (v23)
            {
              swift_bridgeObjectRelease_n();
              swift_release();
              swift_release();
              return 4;
            }
          }
LABEL_53:
          swift_bridgeObjectRelease();
LABEL_54:
          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    goto LABEL_14;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v11 = *(_QWORD *)(a1 + 40);
    swift_retain();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t static TaskSuccessCalculator.calculateMusicTaskSuccess(musicSignals:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    if (result)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease();
    return 3;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_19;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x219A2756C](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v4 = *(_QWORD *)(a1 + 32);
    swift_retain();
  }
  v5 = swift_bridgeObjectRelease();
  *(_QWORD *)&v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 168))(v5);
  *((_QWORD *)&v12 + 1) = v6;
  v14 = 2036427856;
  v15 = 0xE400000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v7 = StringProtocol.contains<A>(_:)();
  v8 = swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 216))(v8);
    if (*(_QWORD *)(v9 + 16)
      && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x6172754479616C70, 0xEC0000006E6F6974),
          (v11 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v12);
    }
    else
    {
      v12 = 0u;
      v13 = 0u;
    }
    swift_release();
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v13 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0 && *(double *)&v14 >= 10.0)
        return 3;
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v12);
    }
    return 4;
  }
  swift_release();
  return 3;
}

uint64_t TaskSuccessCalculator.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t TaskSuccessCalculator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t TaskSuccessCalculator.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t TaskSuccessCalculator.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata accessor for TaskSuccessCalculator()
{
  return objc_opt_self();
}

uint64_t method lookup function for TaskSuccessCalculator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateTaskSuccess(signals:task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateCallsTaskSuccess(callSignals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateMessagesTaskSuccess(messageSignals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateMapsTaskSuccess(geoSignals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateAlarmsTaskSuccess(alarmSignals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static TaskSuccessCalculator.calculateMusicTaskSuccess(musicSignals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of TaskSuccessCalculator.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t ExtendedAlarmSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, sel_eventType) == (id)5)
  {
    type metadata accessor for Utils();
    Date.init(timeIntervalSinceReferenceDate:)();
    v11 = type metadata accessor for Date();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
    static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v10, a2, (uint64_t)&v35, 0.0);
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Date?);
    v12 = v35;
    v13 = v36;
    v14 = v37;
    v15 = v38;
    v16 = v39;
    v37 = MEMORY[0x24BEE1328];
    LOBYTE(v35) = *((double *)&v35 + 1) < 0.0;
    outlined init with take of Any(&v35, v34);
    v17 = MEMORY[0x24BEE4B00];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v33 = v17;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, 0x42646574616E6F64, 0xED00006972695379, isUniquelyReferenced_nonNull_native);
    v19 = v33;
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(a1, sel_alarmID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v21 = UUID.uuidString.getter();
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v37 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v35 = v21;
    *((_QWORD *)&v35 + 1) = v23;
    outlined init with take of Any(&v35, v34);
    v24 = swift_isUniquelyReferenced_nonNull_native();
    v33 = v19;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, 0x6564496D72616C61, 0xEF7265696669746ELL, v24);
    v25 = v33;
    swift_bridgeObjectRelease();
    type metadata accessor for Signal();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = v12;
    *(_QWORD *)(result + 32) = v13;
    *(_QWORD *)(result + 40) = v14;
    *(_QWORD *)(result + 48) = v15;
    *(_BYTE *)(result + 56) = v16;
    *(_QWORD *)(result + 64) = 0x6D72616C41;
    *(_QWORD *)(result + 72) = 0xE500000000000000;
    *(_QWORD *)(result + 80) = 0xD000000000000011;
    *(_QWORD *)(result + 88) = 0x8000000218FC0880;
    *(_BYTE *)(result + 96) = 1;
    *(_QWORD *)(result + 104) = v25;
  }
  else
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.engagement);
    v28 = a1;
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v31 = 134217984;
      *(_QWORD *)&v35 = objc_msgSend(v28, sel_eventType);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_218F54000, v29, v30, "This eventType: %lu is not for deletion", v31, 0xCu);
      MEMORY[0x219A27C8C](v31, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  return result;
}

uint64_t ExtendedAlarmSignalFactory.convertBmEventToEngagementFeatureSet(bmEvent:)@<X0>(void *a1@<X0>, char *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double v26;
  id v27;
  id v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[2];
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id v63;
  unint64_t v64;
  unint64_t v65;

  v62 = a2;
  v54 = type metadata accessor for UUID();
  v52 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v50 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProtoAlarmTaskFeatureSet();
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v51 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v48 - v9;
  v55 = type metadata accessor for ProtoTaskFeatureSet();
  v53 = *(_QWORD *)(v55 - 8);
  v11 = MEMORY[0x24BDAC7A8](v55);
  v49 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v48 - v13;
  v15 = type metadata accessor for ProtoTaskEngagementType();
  MEMORY[0x24BDAC7A8](v15);
  v16 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v60 = *(_QWORD *)(v16 - 8);
  v61 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for ReliabilityCategory();
  v19 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v21 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Logger();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = a1;
  if (objc_msgSend(a1, sel_eventType) != (id)5)
  {
    v10 = v62;
    if (one-time initialization token for engagement == -1)
    {
LABEL_7:
      v39 = __swift_project_value_buffer(v22, (uint64_t)static Logger.engagement);
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v39, v22);
      v64 = 0;
      v65 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      v64 = 0xD000000000000010;
      v65 = 0x8000000218FC08E0;
      v63 = objc_msgSend(v59, sel_eventType);
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 0xD000000000000014;
      v41._object = (void *)0x8000000218FC0900;
      String.append(_:)(v41);
      v42 = v64;
      v43 = v65;
      v44 = *MEMORY[0x24BEA8048];
      v45 = type metadata accessor for AlarmEventDataIssues();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v21, v44, v45);
      v46 = v58;
      (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x24BEA7FF0], v58);
      Logger.error(_:_:)(v42, v43, (uint64_t)v21);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v46);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      v38 = 1;
      v35 = v10;
      v37 = v60;
      v36 = v61;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v35, v38, 1, v36);
    }
LABEL_12:
    swift_once();
    goto LABEL_7;
  }
  v22 = (uint64_t)v62;
  ProtoTaskEngagementFeatureSet.init()();
  v26 = round(a3 * 1000.0);
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v26 <= -1.0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v26 >= 1.84467441e19)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  ProtoTaskEngagementFeatureSet.startTimestampMs.setter();
  v27 = v59;
  v28 = objc_msgSend(v59, sel_eventType);
  (*(void (**)(id))(*(_QWORD *)v48[1] + 104))(v28);
  ProtoTaskEngagementFeatureSet.engagementType.setter();
  ProtoTaskFeatureSet.init()();
  ProtoAlarmTaskFeatureSet.init()();
  v29 = objc_msgSend(v27, sel_alarmID);
  v30 = v50;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v30, v54);
  ProtoAlarmTaskFeatureSet.alarmIdentifier.setter();
  v32 = v56;
  v31 = v57;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v51, v10, v57);
  ProtoTaskFeatureSet.alarmFeatureSet.setter();
  v33 = v53;
  v34 = v55;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v49, v14, v55);
  ProtoTaskEngagementFeatureSet.featureSet.setter();
  v35 = (char *)v22;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v31);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v34);
  v37 = v60;
  v36 = v61;
  (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v22, v18, v61);
  v38 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v35, v38, 1, v36);
}

uint64_t ExtendedAlarmSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  id v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t (*v35)(double);
  uint64_t v36;
  uint64_t v37;

  v4 = v3;
  v36 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v33 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v12);
  v32 = (char *)v29 - v15;
  v16 = MEMORY[0x24BEE4AF8];
  v37 = MEMORY[0x24BEE4AF8];
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v30 = a3;
    v35 = *(uint64_t (**)(double))(*(_QWORD *)v4 + 80);
    swift_bridgeObjectRetain();
    v29[1] = a1;
    v18 = (double *)(a1 + 40);
    v34 = MEMORY[0x24BEE4AF8];
    v31 = v4;
    do
    {
      v19 = *v18;
      v20 = *((id *)v18 - 1);
      if (v35(v19))
      {
        v21 = swift_retain();
        MEMORY[0x219A2732C](v21);
        if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        ExtendedAlarmSignalFactory.convertBmEventToEngagementFeatureSet(bmEvent:)(v20, v9, v19);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
        {

          swift_release();
          outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
        }
        else
        {
          v22 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
          v23 = v32;
          v22(v32, v9, v10);
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v33, v23, v10);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v24 = v34;
          else
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
          v26 = *(_QWORD *)(v24 + 16);
          v25 = *(_QWORD *)(v24 + 24);
          if (v26 >= v25 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v24);
          *(_QWORD *)(v24 + 16) = v26 + 1;
          v27 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
          v34 = v24;
          v22((char *)(v24 + v27 + *(_QWORD *)(v11 + 72) * v26), v33, v10);
          swift_release();

          (*(void (**)(char *, uint64_t))(v11 + 8))(v32, v10);
        }
      }
      else
      {

      }
      v18 += 2;
      --v17;
    }
    while (v17);
    result = swift_bridgeObjectRelease();
    v16 = v37;
    a3 = v30;
    v28 = v34;
  }
  else
  {
    v28 = MEMORY[0x24BEE4AF8];
  }
  *a3 = v16;
  a3[1] = v28;
  return result;
}

uint64_t ExtendedAlarmSignalFactory.getTaskEngagementType(eventType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  switch(a1)
  {
    case 0:
    case 2:
      v3 = (unsigned int *)MEMORY[0x24BEA7E18];
      break;
    case 1:
    case 4:
      v3 = (unsigned int *)MEMORY[0x24BEA7E20];
      break;
    case 3:
      v3 = (unsigned int *)MEMORY[0x24BEA7DF8];
      break;
    case 5:
      v3 = (unsigned int *)MEMORY[0x24BEA7E00];
      break;
    default:
      v3 = (unsigned int *)MEMORY[0x24BEA7E48];
      break;
  }
  v4 = *v3;
  v5 = type metadata accessor for ProtoTaskEngagementType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

uint64_t ExtendedAlarmSignalFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ExtendedAlarmSignalFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ExtendedAlarmSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t ExtendedAlarmSignalFactory.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance ExtendedAlarmSignalFactory(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)v1 + 80))(*(_QWORD *)a1, *(double *)(a1 + 8));
}

uint64_t protocol witness for SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:) in conformance ExtendedAlarmSignalFactory()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t type metadata accessor for ExtendedAlarmSignalFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for ExtendedAlarmSignalFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExtendedAlarmSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of ExtendedAlarmSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of ExtendedAlarmSignalFactory.getTaskEngagementType(eventType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ExtendedAlarmSignalFactory.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t PSEPhoneticEmbedder.phoneticEmbedder.getter()
{
  return swift_retain();
}

uint64_t PSEPhoneticEmbedder.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = type metadata accessor for PhoneticEmbedder.LoadingOption();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PhoneticEmbedder.InputFormat();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v8);
  v9 = swift_allocObject();
  Locale.init(identifier:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDE9D70], v4);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE9D80], v0);
  type metadata accessor for PhoneticEmbedder();
  swift_allocObject();
  *(_QWORD *)(v9 + 16) = PhoneticEmbedder.init(locale:clientID:inputFormat:loadingOption:)();
  return v9;
}

uint64_t PSEPhoneticEmbedder.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for PhoneticEmbedder.LoadingOption();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PhoneticEmbedder.InputFormat();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v10);
  Locale.init(identifier:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDE9D70], v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDE9D80], v2);
  type metadata accessor for PhoneticEmbedder();
  swift_allocObject();
  *(_QWORD *)(v1 + 16) = PhoneticEmbedder.init(locale:clientID:inputFormat:loadingOption:)();
  return v1;
}

Swift::Double_optional __swiftcall PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(Swift::String siriContact, Swift::String userContact)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  Swift::Bool v16;
  Swift::Double_optional result;

  object = userContact._object;
  countAndFlagsBits = userContact._countAndFlagsBits;
  v5 = siriContact._object;
  v6 = siriContact._countAndFlagsBits;
  v7 = type metadata accessor for ReliabilityCategory();
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for Logger();
  MEMORY[0x24BDAC7A8](v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_218FBD9F0;
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v5;
  *(_QWORD *)(v9 + 48) = countAndFlagsBits;
  *(_QWORD *)(v9 + 56) = object;
  v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)v10(v9);
  swift_bridgeObjectRelease();
  if (v11[2] < 2uLL)
  {
    swift_bridgeObjectRelease();
    v16 = 0;
  }
  else
  {
    v12 = v11[4];
    v13 = v11[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v14 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 112))(v12, v13));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = v14;
  }
  result.value = v15;
  result.is_nil = v16;
  return result;
}

uint64_t PSEPhoneticEmbedder.embedding(queries:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v1 = v0;
  v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
  v3 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_218FBDA00;
  *(_QWORD *)(v3 + 32) = MEMORY[0x24BEE4AF8];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v2;
  swift_retain();
  swift_retain();
  PhoneticEmbedder.embeddings(of:completion:)();
  if (v0)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_beginAccess();
    v6 = *(void **)(v4 + 16);
    if (v6)
    {
      v7 = v6;
      swift_willThrow();
    }
    else
    {
      swift_beginAccess();
      v1 = *(_QWORD *)(v2 + 16);
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_release();
  }
  return v1;
}

uint64_t sub_218F88AF4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_218F88B18()
{
  uint64_t v0;

  return swift_deallocObject();
}

void closure #1 in PSEPhoneticEmbedder.embedding(queries:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  id v9;

  swift_beginAccess();
  v8 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a2;
  v9 = a2;

  if (a1)
  {
    swift_beginAccess();
    *(_QWORD *)(a4 + 16) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_218F88BD8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in PSEPhoneticEmbedder.embedding(queries:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in PSEPhoneticEmbedder.embedding(queries:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

Swift::Double __swiftcall PSEPhoneticEmbedder.distanceBetween(sourceVector:targetVector:)(Swift::OpaquePointer sourceVector, Swift::OpaquePointer targetVector)
{
  unint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  unint64_t v17;
  uint64_t v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  double v23;

  v2 = *((_QWORD *)sourceVector._rawValue + 2);
  if (v2 == *((_QWORD *)targetVector._rawValue + 2))
  {
    if (v2)
    {
      if (v2 >= 4)
      {
        v3 = v2 & 0x7FFFFFFFFFFFFFFCLL;
        v10 = (float64x2_t *)((char *)sourceVector._rawValue + 48);
        v11 = (float64x2_t *)((char *)targetVector._rawValue + 48);
        v4 = 0.0;
        v12 = v2 & 0x7FFFFFFFFFFFFFFCLL;
        do
        {
          v13 = vsubq_f64(v10[-1], v11[-1]);
          v14 = vsubq_f64(*v10, *v11);
          v15 = vmulq_f64(v13, v13);
          v16 = vmulq_f64(v14, v14);
          v4 = v4 + v15.f64[0] + v15.f64[1] + v16.f64[0] + v16.f64[1];
          v10 += 2;
          v11 += 2;
          v12 -= 4;
        }
        while (v12);
        if (v2 == v3)
          return sqrt(v4);
      }
      else
      {
        v3 = 0;
        v4 = 0.0;
      }
      v17 = v2 - v3;
      v18 = 8 * v3 + 32;
      v19 = (double *)((char *)targetVector._rawValue + v18);
      v20 = (double *)((char *)sourceVector._rawValue + v18);
      do
      {
        v21 = *v20++;
        v22 = v21;
        v23 = *v19++;
        v4 = v4 + (v22 - v23) * (v22 - v23);
        --v17;
      }
      while (v17);
    }
    else
    {
      v4 = 0.0;
    }
    return sqrt(v4);
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.engagement);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_218F54000, v6, v7, "Vector sizes are different", v8, 2u);
    MEMORY[0x219A27C8C](v8, -1, -1);
  }

  return 0.0;
}

uint64_t static PSEPhoneticEmbedder.normalizedString(from:)()
{
  Swift::String v1;

  v1 = String.lowercased()();
  specialized RangeReplaceableCollection.removeAll(where:)(&v1);
  return v1._countAndFlagsBits;
}

uint64_t PSEPhoneticEmbedder.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PSEPhoneticEmbedder.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PSEPhoneticEmbedder()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSEPhoneticEmbedder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSEPhoneticEmbedder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PSEPhoneticEmbedder.embedding(queries:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PSEPhoneticEmbedder.distanceBetween(sourceVector:targetVector:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of static PSEPhoneticEmbedder.normalizedString(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t IntelligenceEngineTranscript.clientSessionId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IntelligenceEngineTranscript.clientSessionId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*IntelligenceEngineTranscript.clientSessionId.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t IntelligenceEngineTranscript.clientRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IntelligenceEngineTranscript.clientRequestId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*IntelligenceEngineTranscript.clientRequestId.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t IntelligenceEngineTranscript.clientApplicationId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IntelligenceEngineTranscript.clientApplicationId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*IntelligenceEngineTranscript.clientApplicationId.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t IntelligenceEngineTranscript.clientGroupIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IntelligenceEngineTranscript.clientGroupIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*IntelligenceEngineTranscript.clientGroupIdentifier.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for IntelligenceEngineTranscript.eventTime : IntelligenceEngineTranscript(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 224))(v6);
}

uint64_t IntelligenceEngineTranscript.eventTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement28IntelligenceEngineTranscript_eventTime, a1);
}

uint64_t IntelligenceEngineTranscript.eventTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement28IntelligenceEngineTranscript_eventTime);
}

uint64_t (*IntelligenceEngineTranscript.eventTime.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

_QWORD *IntelligenceEngineTranscript.__allocating_init(clientSessionId:clientRequestId:clientApplicationId:eventTime:clientGroupIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v16 = (_QWORD *)swift_allocObject();
  v16[9] = 0;
  v16[8] = 0;
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  v16[6] = a5;
  v16[7] = a6;
  v17 = (char *)v16 + OBJC_IVAR____TtC18PostSiriEngagement28IntelligenceEngineTranscript_eventTime;
  v18 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a7, v18);
  swift_beginAccess();
  v16[8] = a8;
  v16[9] = a9;
  swift_bridgeObjectRelease();
  return v16;
}

_QWORD *IntelligenceEngineTranscript.init(clientSessionId:clientRequestId:clientApplicationId:eventTime:clientGroupIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  char *v12;
  uint64_t v13;

  v9[9] = 0;
  v9[8] = 0;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v9[6] = a5;
  v9[7] = a6;
  v12 = (char *)v9 + OBJC_IVAR____TtC18PostSiriEngagement28IntelligenceEngineTranscript_eventTime;
  v13 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a7, v13);
  swift_beginAccess();
  v9[8] = a8;
  v9[9] = a9;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t IntelligenceEngineTranscript.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218F894A8 + 4 * byte_218FBDA50[a1]))(0x6553746E65696C63, 0xEF64496E6F697373);
}

uint64_t sub_218F894A8()
{
  return 0x6552746E65696C63;
}

unint64_t sub_218F894CC()
{
  return 0xD000000000000013;
}

unint64_t sub_218F894E8()
{
  return 0xD000000000000015;
}

uint64_t sub_218F89508()
{
  return 0x6D6954746E657665;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntelligenceEngineTranscript.CodingKeys()
{
  unsigned __int8 *v0;

  return IntelligenceEngineTranscript.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntelligenceEngineTranscript.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized IntelligenceEngineTranscript.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntelligenceEngineTranscript.CodingKeys()
{
  lazy protocol witness table accessor for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntelligenceEngineTranscript.CodingKeys()
{
  lazy protocol witness table accessor for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t IntelligenceEngineTranscript.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement28IntelligenceEngineTranscript_eventTime;
  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t IntelligenceEngineTranscript.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement28IntelligenceEngineTranscript_eventTime;
  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t IntelligenceEngineTranscript.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v2 = v1;
  v22 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IntelligenceEngineTranscript.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys();
  v11 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 120);
  v23 = v2;
  v12(v11);
  v29 = 0;
  v13 = v24;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v24 = v8;
    v14 = v22;
    v15 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 144))(v15);
    v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v16 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 168))(v16);
    v27 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v17 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 192))(v17);
    v26 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v19 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 216))(v19);
    v25 = 4;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v20 = v24;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v7);
  }
}

unint64_t lazy protocol witness table accessor for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for IntelligenceEngineTranscript.CodingKeys, &unk_24DA48A30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for IntelligenceEngineTranscript.CodingKeys, &unk_24DA48A30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for IntelligenceEngineTranscript.CodingKeys, &unk_24DA48A30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for IntelligenceEngineTranscript.CodingKeys, &unk_24DA48A30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceEngineTranscript.CodingKeys and conformance IntelligenceEngineTranscript.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date();
    result = MEMORY[0x219A27BFC](MEMORY[0x24BDCE920], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date();
    result = MEMORY[0x219A27BFC](MEMORY[0x24BDCE948], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t IntelligenceEngineSession.clientSessionId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IntelligenceEngineSession.clientSessionId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*IntelligenceEngineSession.clientSessionId.modify())()
{
  swift_beginAccess();
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t IntelligenceEngineSession.clientRequestIds.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t IntelligenceEngineSession.clientRequestIds.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*IntelligenceEngineSession.clientRequestIds.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for IntelligenceEngineSession.startTime : IntelligenceEngineSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 168))(v6);
}

uint64_t IntelligenceEngineSession.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_startTime, a1);
}

uint64_t IntelligenceEngineSession.startTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_startTime);
}

uint64_t (*IntelligenceEngineSession.startTime.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for IntelligenceEngineSession.endTime : IntelligenceEngineSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 192))(v6);
}

uint64_t IntelligenceEngineSession.endTime.getter@<X0>(uint64_t a1@<X8>)
{
  return SiriExecutionTask.startTime.getter(&OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_endTime, a1);
}

uint64_t IntelligenceEngineSession.endTime.setter(uint64_t a1)
{
  return SiriExecutionTask.startTime.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_endTime);
}

uint64_t (*IntelligenceEngineSession.endTime.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

char *IntelligenceEngineSession.__allocating_init(clientSessionId:clientRequestId:startTime:endTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);

  v10 = (char *)swift_allocObject();
  *((_QWORD *)v10 + 3) = 0;
  *((_QWORD *)v10 + 2) = 0;
  swift_beginAccess();
  *((_QWORD *)v10 + 2) = a1;
  *((_QWORD *)v10 + 3) = a2;
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 4) = a3;
  v11 = &v10[OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_startTime];
  v12 = type metadata accessor for Date();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v11, a4, v12);
  v13(&v10[OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_endTime], a5, v12);
  return v10;
}

char *IntelligenceEngineSession.init(clientSessionId:clientRequestId:startTime:endTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);

  *((_QWORD *)v5 + 3) = 0;
  *((_QWORD *)v5 + 2) = 0;
  swift_beginAccess();
  *((_QWORD *)v5 + 2) = a1;
  *((_QWORD *)v5 + 3) = a2;
  swift_bridgeObjectRelease();
  *((_QWORD *)v5 + 4) = a3;
  v11 = &v5[OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_startTime];
  v12 = type metadata accessor for Date();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v11, a4, v12);
  v13(&v5[OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_endTime], a5, v12);
  return v5;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntelligenceEngineSession.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218F89EDC + 4 * byte_218FBDA55[*v0]))(0x6553746E65696C63, 0xEF64496E6F697373);
}

unint64_t sub_218F89EDC()
{
  return 0xD000000000000010;
}

uint64_t sub_218F89EF8()
{
  return 0x6D69547472617473;
}

uint64_t sub_218F89F14()
{
  return 0x656D6954646E65;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntelligenceEngineSession.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized IntelligenceEngineSession.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntelligenceEngineSession.CodingKeys()
{
  lazy protocol witness table accessor for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntelligenceEngineSession.CodingKeys()
{
  lazy protocol witness table accessor for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t IntelligenceEngineSession.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_startTime;
  v2 = type metadata accessor for Date();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_endTime, v2);
  return v0;
}

uint64_t IntelligenceEngineSession.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_startTime;
  v2 = type metadata accessor for Date();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_endTime, v2);
  return swift_deallocClassInstance();
}

uint64_t IntelligenceEngineSession.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v2 = v1;
  v4 = type metadata accessor for Date();
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v27 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IntelligenceEngineSession.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys();
  v14 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 112))(v14);
  v36 = 0;
  v16 = v31;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v27 = v7;
    v28 = v9;
    v31 = v11;
    v18 = v30;
    v19 = swift_bridgeObjectRelease();
    v20 = v2;
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v19);
    v35 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v21 = swift_bridgeObjectRelease();
    v22 = v28;
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 160))(v21);
    v34 = 2;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v23 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
    v24 = v23(v22, v18);
    v25 = v27;
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 184))(v24);
    v33 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v26 = v31;
    v23(v25, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v13, v10);
  }
}

unint64_t lazy protocol witness table accessor for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for IntelligenceEngineSession.CodingKeys, &unk_24DA489A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for IntelligenceEngineSession.CodingKeys, &unk_24DA489A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for IntelligenceEngineSession.CodingKeys, &unk_24DA489A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for IntelligenceEngineSession.CodingKeys, &unk_24DA489A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceEngineSession.CodingKeys and conformance IntelligenceEngineSession.CodingKeys);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntelligenceEngineSession()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t IntelligenceEngineSignalFactory.buildIESessionsBoundary(bmEvents:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(char *, uint64_t, unint64_t);
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, char *, unint64_t);
  uint64_t v82;
  void (*v83)(char *, unint64_t);
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t result;
  uint64_t v92;
  int64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (int64_t)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v92 - v6;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v96 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v95 = (char *)&v92 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v103 = (char *)&v92 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t)&v92 - v16;
  v110 = MEMORY[0x24BEE4AF8];
  swift_retain();
  v18 = a1;
  v19 = 0;
  v20 = specialized Sequence.compactMap<A>(_:)(v18);
  swift_release();
  if ((unint64_t)v20 >> 62)
    goto LABEL_107;
  v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v21)
  {
LABEL_108:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1)
      swift_once();
    v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)static Logger.engagement);
    v88 = Logger.logObject.getter();
    v89 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v90 = 0;
      _os_log_impl(&dword_218F54000, v88, v89, "No IntelligenceEngine transcript to construct session boundary", v90, 2u);
      MEMORY[0x219A27C8C](v90, -1, -1);
    }

    return MEMORY[0x24BEE4AF8];
  }
LABEL_3:
  v101 = v17;
  v104 = v9;
  v94 = v7;
  v97 = (char *)v5;
  v106 = v19;
  v107 = (_QWORD *)MEMORY[0x24BEE4B00];
  v108 = (_QWORD *)MEMORY[0x24BEE4B00];
  v102 = v20 & 0xC000000000000001;
  v17 = 4;
  v100 = xmmword_218FBBF20;
  v105 = v8;
  do
  {
    v24 = v17 - 4;
    if (v102)
    {
      v19 = MEMORY[0x219A2756C](v17 - 4, v20);
      v9 = v17 - 3;
      if (__OFADD__(v24, 1))
        goto LABEL_97;
    }
    else
    {
      v19 = *(_QWORD *)(v20 + 8 * v17);
      swift_retain();
      v9 = v17 - 3;
      if (__OFADD__(v24, 1))
      {
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        swift_bridgeObjectRetain();
        v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v21)
          goto LABEL_108;
        goto LABEL_3;
      }
    }
    v7 = (char *)v20;
    v8 = (*(uint64_t (**)(void))(*(_QWORD *)v19 + 120))();
    v20 = v25;
    v26 = v107;
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v25);
    v28 = v26[2];
    v29 = (v27 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      goto LABEL_98;
    v31 = v27;
    if (v26[3] < v30)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, 1);
      v107 = v108;
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v20);
      if ((v31 & 1) != (v33 & 1))
      {
LABEL_116:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        goto LABEL_117;
      }
      v5 = v32;
    }
    if ((v31 & 1) != 0)
    {
      v22 = swift_bridgeObjectRelease();
      v23 = (_QWORD *)(v107[7] + 8 * v5);
      MEMORY[0x219A2732C](v22);
      if (*(_QWORD *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = v100;
      *(_QWORD *)(v34 + 32) = v19;
      v109 = v34;
      specialized Array._endMutation()();
      v35 = v109;
      v36 = v107;
      v107[((unint64_t)v5 >> 6) + 8] |= 1 << v5;
      v37 = (unint64_t *)(v36[6] + 16 * v5);
      *v37 = v8;
      v37[1] = v20;
      *(_QWORD *)(v36[7] + 8 * v5) = v35;
      v38 = v36[2];
      v39 = __OFADD__(v38, 1);
      v40 = v38 + 1;
      if (v39)
        goto LABEL_100;
      v36[2] = v40;
    }
    v8 = v105;
    v20 = (uint64_t)v7;
    ++v17;
  }
  while (v9 != v21);
  swift_bridgeObjectRelease();
  v41 = v107;
  v42 = v107[8];
  v98 = v107 + 8;
  v43 = 1 << *((_BYTE *)v107 + 32);
  v44 = -1;
  if (v43 < 64)
    v44 = ~(-1 << v43);
  v9 = v44 & v42;
  v5 = (unint64_t)(v43 + 63) >> 6;
  swift_retain();
  v20 = 0;
  v19 = v106;
  v7 = v97;
  v93 = v5;
  while (1)
  {
    while (v9)
    {
      v45 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v46 = v45 | (v20 << 6);
      if (!v41[2])
        continue;
LABEL_44:
      v49 = (uint64_t *)(v41[6] + 16 * v46);
      v17 = *v49;
      v50 = v49[1];
      swift_bridgeObjectRetain();
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v50);
      if ((v52 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        continue;
      }
      *(_QWORD *)&v100 = v9;
      v53 = v41;
      v9 = *(_QWORD *)(v41[7] + 8 * v51);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v102 = v20;
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        v17 = _CocoaArrayWrapper.endIndex.getter();
        if (!v17)
        {
LABEL_57:
          swift_bridgeObjectRelease();
          v5 = *(_QWORD *)(v104 + 56);
          v56 = (uint64_t)v94;
          ((void (*)(char *, uint64_t, uint64_t, unint64_t))v5)(v94, 1, 1, v8);
          goto LABEL_58;
        }
      }
      else
      {
        v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v17)
          goto LABEL_57;
      }
      if ((v9 & 0xC000000000000001) != 0)
      {
        v54 = MEMORY[0x219A2756C](0, v9);
      }
      else
      {
        if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_105;
        v54 = *(_QWORD *)(v9 + 32);
        swift_retain();
      }
      v55 = swift_bridgeObjectRelease();
      v56 = (uint64_t)v94;
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 216))(v55);
      swift_release();
      v57 = v104;
      v5 = *(_QWORD *)(v104 + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, unint64_t))v5)(v56, 0, 1, v8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v57 + 48))(v56, 1, v8) != 1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(v57 + 32))(v101, v56, v8);
        goto LABEL_59;
      }
LABEL_58:
      Date.init()();
      outlined destroy of Date?(v56);
      if (!v17)
      {
        ((void (*)(char *, uint64_t, uint64_t, unint64_t))v5)(v7, 1, 1, v8);
        goto LABEL_67;
      }
LABEL_59:
      v58 = v17 - 1;
      if (__OFSUB__(v17, 1))
        goto LABEL_102;
      if ((v9 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v59 = MEMORY[0x219A2756C](v17 - 1, v9);
        v60 = swift_bridgeObjectRelease();
      }
      else
      {
        if ((v58 & 0x8000000000000000) != 0)
          goto LABEL_103;
        if (v58 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_104;
        v59 = *(_QWORD *)(v9 + 8 * v58 + 32);
        v60 = swift_retain();
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 216))(v60);
      swift_release();
      ((void (*)(char *, _QWORD, uint64_t, unint64_t))v5)(v7, 0, 1, v8);
      v61 = v104;
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v104 + 48))(v7, 1, v8) != 1)
      {
        (*(void (**)(char *, char *, unint64_t))(v61 + 32))(v103, v7, v8);
        goto LABEL_68;
      }
LABEL_67:
      Date.init()();
      outlined destroy of Date?((uint64_t)v7);
      if (!v17)
      {
        v20 = MEMORY[0x24BEE4AF8];
        goto LABEL_80;
      }
LABEL_68:
      if (v17 < 1)
        goto LABEL_101;
      v106 = v19;
      v7 = (char *)(v9 & 0xC000000000000001);
      swift_bridgeObjectRetain();
      v62 = 0;
      v20 = MEMORY[0x24BEE4AF8];
      do
      {
        if (v7)
        {
          v63 = MEMORY[0x219A2756C](v62, v9);
        }
        else
        {
          v63 = *(_QWORD *)(v9 + 8 * v62 + 32);
          swift_retain();
        }
        v64 = (*(uint64_t (**)(void))(*(_QWORD *)v63 + 144))();
        v5 = v65;
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1, (_QWORD *)v20);
        v8 = *(_QWORD *)(v20 + 16);
        v66 = *(_QWORD *)(v20 + 24);
        if (v8 >= v66 >> 1)
          v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v8 + 1, 1, (_QWORD *)v20);
        ++v62;
        *(_QWORD *)(v20 + 16) = v8 + 1;
        v67 = v20 + 16 * v8;
        *(_QWORD *)(v67 + 32) = v64;
        *(_QWORD *)(v67 + 40) = v5;
      }
      while (v17 != v62);
      swift_bridgeObjectRelease();
      v19 = v106;
LABEL_80:
      v109 = MEMORY[0x24BEE4B08];
      v68 = swift_bridgeObjectRetain();
      v69 = specialized Sequence.filter(_:)(v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v106 = v19;
      v107 = v53;
      v99 = v69;
      if (v17)
      {
        if ((v9 & 0xC000000000000001) != 0)
        {
          v70 = MEMORY[0x219A2756C](0, v9);
        }
        else
        {
          if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_106;
          v70 = *(_QWORD *)(v9 + 32);
          swift_retain();
        }
        v71 = swift_bridgeObjectRelease();
        v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 120))(v71);
        v74 = v73;
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        v72 = 0;
        v74 = 0;
      }
      v75 = v104;
      v8 = v105;
      v76 = *(void (**)(char *, uint64_t, unint64_t))(v104 + 16);
      v77 = v95;
      v78 = v101;
      v76(v95, v101, v105);
      v17 = (uint64_t)v96;
      v79 = v103;
      v76(v96, (uint64_t)v103, v8);
      type metadata accessor for IntelligenceEngineSession(0);
      v80 = (char *)swift_allocObject();
      *((_QWORD *)v80 + 3) = 0;
      *((_QWORD *)v80 + 2) = 0;
      swift_beginAccess();
      *((_QWORD *)v80 + 2) = v72;
      *((_QWORD *)v80 + 3) = v74;
      swift_bridgeObjectRelease();
      *((_QWORD *)v80 + 4) = v99;
      v81 = *(void (**)(char *, char *, unint64_t))(v75 + 32);
      v81(&v80[OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_startTime], v77, v8);
      v82 = ((uint64_t (*)(char *, uint64_t, unint64_t))v81)(&v80[OBJC_IVAR____TtC18PostSiriEngagement25IntelligenceEngineSession_endTime], v17, v8);
      MEMORY[0x219A2732C](v82);
      if (*(_QWORD *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v83 = *(void (**)(char *, unint64_t))(v75 + 8);
      v83(v79, v8);
      v83((char *)v78, v8);
      v7 = v97;
      v19 = v106;
      v41 = v107;
      v5 = v93;
      v20 = v102;
      v9 = v100;
    }
    v39 = __OFADD__(v20++, 1);
    if (v39)
      goto LABEL_99;
    if (v20 >= v5)
      break;
    v47 = v98[v20];
    if (!v47)
    {
      v48 = v20 + 1;
      if (v20 + 1 >= v5)
        break;
      v47 = v98[v48];
      if (!v47)
      {
        v48 = v20 + 2;
        if (v20 + 2 >= v5)
          break;
        v47 = v98[v48];
        if (!v47)
        {
          v48 = v20 + 3;
          if (v20 + 3 >= v5)
            break;
          v47 = v98[v48];
          if (!v47)
          {
            v48 = v20 + 4;
            if (v20 + 4 >= v5)
              break;
            v47 = v98[v48];
            if (!v47)
            {
              v48 = v20 + 5;
              if (v20 + 5 >= v5)
                break;
              v47 = v98[v48];
              if (!v47)
              {
                v48 = v20 + 6;
                if (v20 + 6 >= v5)
                  break;
                v47 = v98[v48];
                if (!v47)
                {
                  while (1)
                  {
                    v20 = v48 + 1;
                    if (__OFADD__(v48, 1))
                      break;
                    if (v20 >= v5)
                      goto LABEL_92;
                    v47 = v98[v20];
                    ++v48;
                    if (v47)
                      goto LABEL_43;
                  }
                  __break(1u);
                  goto LABEL_116;
                }
              }
            }
          }
        }
      }
      v20 = v48;
    }
LABEL_43:
    v9 = (v47 - 1) & v47;
    v46 = __clz(__rbit64(v47)) + (v20 << 6);
    if (v41[2])
      goto LABEL_44;
  }
LABEL_92:
  swift_release_n();
  v84 = v110;
  if ((v110 & 0x8000000000000000) != 0 || (v110 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
    v85 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v84);
    swift_bridgeObjectRelease();
  }
  else
  {
    v85 = v110 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
  }
  v109 = v85;
  specialized MutableCollection<>.sort(by:)(&v109);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    v86 = v109;
    swift_bridgeObjectRelease();
    return v86;
  }
LABEL_117:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t Sequence<>.dedupe()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = static Array._allocateUninitialized(_:)();
  if (MEMORY[0x219A273BC](v12, AssociatedTypeWitness))
    v13 = specialized Set.init(_nonEmptyArrayLiteral:)(v12, AssociatedTypeWitness, a3);
  else
    v13 = MEMORY[0x24BEE4B08];
  swift_bridgeObjectRelease();
  v18 = v13;
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a1);
  MEMORY[0x24BDAC7A8](v14);
  *(&v17 - 4) = a1;
  *(&v17 - 3) = a2;
  *(&v17 - 2) = a3;
  *(&v17 - 1) = (uint64_t)&v18;
  v15 = Sequence.filter(_:)();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t IntelligenceEngineSignalFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t IntelligenceEngineSignalFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t IntelligenceEngineSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t IntelligenceEngineSignalFactory.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t closure #1 in Sequence<>.dedupe()(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, AssociatedTypeWitness);
  type metadata accessor for Set();
  v9 = Set.insert(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, AssociatedTypeWitness);
  return v9 & 1;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  id v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  char v15;
  void *v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  id v20;
  uint64_t v21;

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    v7 = a2;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v3;
    *v3 = 0x8000000000000000;
    v20 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v21;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v11 = ~v9;
  while (1)
  {
    v12 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v10);
    if (v12)
      break;
    if (!a2)
      goto LABEL_12;
LABEL_7:
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_13;
  }
  if (!a2)
    goto LABEL_7;
  type metadata accessor for NSNumber();
  v13 = a2;
  v14 = v12;
  v15 = static NSObject.== infix(_:_:)();

  if ((v15 & 1) == 0)
    goto LABEL_7;

LABEL_12:
  swift_bridgeObjectRelease();
  v16 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v10);
  *a1 = v16;
  v17 = v16;
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  Swift::Int *v16;
  Swift::Int v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;

  v7 = *v3;
  Hasher.init(_seed:)();
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v3;
    *v3 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v20;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  v11 = ~v9;
  v12 = *(_QWORD *)(v7 + 48);
  while (1)
  {
    v13 = (_QWORD *)(v12 + 16 * v10);
    v14 = v13[1];
    if (v14)
      break;
    if (!a3)
      goto LABEL_16;
LABEL_7:
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_17;
  }
  if (!a3)
    goto LABEL_7;
  v15 = *v13 == a2 && v14 == a3;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_7;
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  v16 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
  v17 = v16[1];
  *a1 = *v16;
  a1[1] = v17;
  swift_bridgeObjectRetain();
  return 0;
}

{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSNumber?>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v29 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_36;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_36;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_36;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_36:
                swift_release();
                v1 = v29;
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v9)
                    goto LABEL_36;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      if (v19)
      {
        Hasher._combine(_:)(1u);
        v20 = v19;
        NSObject.hash(into:)();

      }
      else
      {
        Hasher._combine(_:)(0);
      }
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_36;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_36;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_36;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_36:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v11 >= v8)
                    goto LABEL_36;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v21 = *v19;
      v20 = v19[1];
      Hasher.init(_seed:)();
      if (v20)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v21;
      v13[1] = v20;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(void *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_19;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_19;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    v10 = a1;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      v14 = *(void **)(*(_QWORD *)(v9 + 48) + 8 * a2);
      if (v14)
      {
        if (a1)
        {
          type metadata accessor for NSNumber();
          v15 = a1;
          v16 = v14;
          v17 = static NSObject.== infix(_:_:)();

          if ((v17 & 1) != 0)
          {
LABEL_18:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNumber?);
            ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            break;
          }
        }
      }
      else if (!a1)
      {
        goto LABEL_18;
      }
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_19:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * a2) = a1;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v21;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  Swift::Int *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_23;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_23;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v11 + 48);
    do
    {
      v16 = (_QWORD *)(v15 + 16 * a3);
      v17 = v16[1];
      if (v17)
      {
        if (a2)
        {
          v18 = *v16 == v8 && v17 == a2;
          if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
LABEL_22:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            break;
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_22;
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_23:
  v19 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v20 = (Swift::Int *)(*(_QWORD *)(v19 + 48) + 16 * a3);
  *v20 = v8;
  v20[1] = a2;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v23;
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSNumber?>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSNumber?>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v4;
    return result;
  }
  v28 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v9)
      goto LABEL_36;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_36;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_36;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    if (v19)
    {
      Hasher._combine(_:)(1u);
      v20 = v19;
      NSObject.hash(into:)();

    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v28;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_36;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v29)
      goto LABEL_36;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_36;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_36;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v21 = *v19;
    v20 = v19[1];
    Hasher.init(_seed:)();
    if (v20)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v21;
    v13[1] = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_36;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized IntelligenceEngineTranscript.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6553746E65696C63 && a2 == 0xEF64496E6F697373;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6552746E65696C63 && a2 == 0xEF64497473657571
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000218FC0A00
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000218FC0A20
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D6954746E657665 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized IntelligenceEngineSession.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6553746E65696C63 && a2 == 0xEF64496E6F697373;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000218FC0A80
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D69547472617473 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D6954646E65 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

char *specialized IntelligenceEngineSignalFactory.convertBiomeEventToIETranscript(bmEvent:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  void (*v20)(char *, char *, uint64_t);
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  char *v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;

  v64 = type metadata accessor for ReliabilityCategory();
  v2 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v58 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v58 - v16;
  v18 = objc_msgSend(a1, sel_absoluteTimestamp);
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_11;
  }
  v19 = v18;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v20(v7, v15, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_11:
    outlined destroy of Date?((uint64_t)v7);
    if (one-time initialization token for engagement != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.engagement);
    v39 = *MEMORY[0x24BEA81C8];
    v40 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v4, v39, v40);
    v41 = v64;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEA8018], v64);
    Logger.error(_:_:)(0xD000000000000022, 0x8000000218FC0AE0, (uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v41);
    return 0;
  }
  v20(v17, v7, v8);
  v21 = objc_msgSend(a1, sel_clientSessionId);
  if (!v21)
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.engagement);
    v43 = *MEMORY[0x24BEA81D8];
    v44 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v4, v43, v44);
    v45 = v64;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEA8018], v64);
    v46 = "Client Session ID missing";
    goto LABEL_23;
  }
  v22 = v21;
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;

  v25 = objc_msgSend(a1, sel_clientRequestId);
  if (!v25)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1)
      swift_once();
    v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.engagement);
    v52 = *MEMORY[0x24BEA81D0];
    v53 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 104))(v4, v52, v53);
    v45 = v64;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEA8018], v64);
    v46 = "Client Request ID missing";
LABEL_23:
    Logger.error(_:_:)(0xD000000000000019, (unint64_t)(v46 - 32) | 0x8000000000000000, (uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v45);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    return 0;
  }
  v26 = v25;
  v63 = v17;
  v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v62 = v27;

  v28 = objc_msgSend(a1, sel_identifiers);
  if (!v28
    || (v29 = v28,
        v30 = objc_msgSend(v28, sel_clientApplicationId),
        v29,
        !v30))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.engagement);
    v48 = *MEMORY[0x24BEA81E0];
    v49 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v4, v48, v49);
    v50 = v64;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEA8018], v64);
    Logger.error(_:_:)(0xD00000000000001DLL, 0x8000000218FC0B50, (uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v50);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v63, v8);
    return 0;
  }
  v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v59 = v31;

  v32 = v63;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v63, v8);
  v33 = objc_msgSend(a1, sel_identifiers);
  v34 = v33;
  if (v33)
  {
    v35 = objc_msgSend(v33, sel_clientGroupIdentifier);

    if (v35)
    {
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v34 = v37;

    }
    else
    {
      v36 = 0;
      v34 = 0;
    }
  }
  else
  {
    v36 = 0;
  }
  type metadata accessor for IntelligenceEngineTranscript(0);
  v54 = (char *)swift_allocObject();
  *((_QWORD *)v54 + 9) = 0;
  *((_QWORD *)v54 + 8) = 0;
  *((_QWORD *)v54 + 2) = v61;
  *((_QWORD *)v54 + 3) = v24;
  v56 = v62;
  *((_QWORD *)v54 + 4) = v60;
  *((_QWORD *)v54 + 5) = v56;
  v57 = v59;
  *((_QWORD *)v54 + 6) = v64;
  *((_QWORD *)v54 + 7) = v57;
  v20(&v54[OBJC_IVAR____TtC18PostSiriEngagement28IntelligenceEngineTranscript_eventTime], v12, v8);
  swift_beginAccess();
  *((_QWORD *)v54 + 8) = v36;
  *((_QWORD *)v54 + 9) = v34;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v32, v8);
  return v54;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i = 4; ; ++i)
    {
      v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x219A2756C](i - 4, a1) : *(id *)(a1 + 8 * i);
      v5 = v4;
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v7 = specialized IntelligenceEngineSignalFactory.convertBiomeEventToIETranscript(bmEvent:)(v4);

      if (v7)
      {
        MEMORY[0x219A2732C]();
        if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized Sequence.filter(_:)(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Swift::Int *i;
  Swift::Int v9;
  Swift::Int v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  uint64_t v18;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v2 = 0;
  v3 = result + 40;
  v4 = -(uint64_t)v1;
  v5 = MEMORY[0x24BEE4AF8];
  v15 = result + 40;
  v16 = *(_QWORD *)(result + 16);
  do
  {
    if (v2 <= v1)
      v6 = v1;
    else
      v6 = v2;
    v7 = -(uint64_t)v6;
    for (i = (Swift::Int *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 1);
      v9 = *i;
      swift_bridgeObjectRetain_n();
      v11 = specialized Set._Variant.insert(_:)(&v17, v10, v9);
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        break;
      result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1)
        return v5;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    v18 = v5;
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v5 = v18;
    }
    v13 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)(v5 + 24);
    if (v13 >= v12 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v5 = v18;
    }
    *(_QWORD *)(v5 + 16) = v13 + 1;
    v14 = v5 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v10;
    *(_QWORD *)(v14 + 40) = v9;
    v3 = v15;
    v1 = v16;
  }
  while (v4 + v2);
  return v5;
}

uint64_t type metadata accessor for IntelligenceEngineSession(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for IntelligenceEngineSession);
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Bool IsNativeType;
  void (*v18)(char *, unint64_t, uint64_t);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = a1;
  v45 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)&v37 - v10;
  v37 = v11;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v37 - v13;
  if (MEMORY[0x219A273B0](v12))
  {
    type metadata accessor for _SetStorage();
    v15 = static _SetStorage.allocate(capacity:)();
  }
  else
  {
    v15 = MEMORY[0x24BEE4B08];
  }
  v40 = MEMORY[0x219A273BC](v5, a2);
  if (!v40)
    return v15;
  v16 = 0;
  v43 = v15 + 56;
  v38 = v14;
  v39 = v5;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, v5+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v16, a2);
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
        goto LABEL_20;
    }
    else
    {
      result = _ArrayBuffer._getElementSlowPath(_:)();
      if (v37 != 8)
        goto LABEL_23;
      v46 = result;
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, (unint64_t)&v46, a2);
      swift_unknownObjectRelease();
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
      {
LABEL_20:
        __break(1u);
        return v15;
      }
    }
    v21 = v45;
    v41 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v42 = v20;
    v41(v44, v14, a2);
    v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v23 = -1 << *(_BYTE *)(v15 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
    v27 = 1 << v24;
    v28 = *(_QWORD *)(v21 + 72);
    if (((1 << v24) & v26) != 0)
    {
      v29 = ~v23;
      do
      {
        v18(v8, *(_QWORD *)(v15 + 48) + v28 * v24, a2);
        v30 = a3;
        v31 = dispatch thunk of static Equatable.== infix(_:_:)();
        v32 = *(void (**)(char *, uint64_t))(v45 + 8);
        v32(v8, a2);
        if ((v31 & 1) != 0)
        {
          v32(v44, a2);
          a3 = v30;
          v14 = v38;
          v5 = v39;
          goto LABEL_7;
        }
        v24 = (v24 + 1) & v29;
        v25 = v24 >> 6;
        v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
        v27 = 1 << v24;
        a3 = v30;
      }
      while ((v26 & (1 << v24)) != 0);
      v14 = v38;
      v5 = v39;
    }
    v33 = v44;
    *(_QWORD *)(v43 + 8 * v25) = v27 | v26;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v41)(*(_QWORD *)(v15 + 48) + v28 * v24, v33, a2);
    v35 = *(_QWORD *)(v15 + 16);
    v19 = __OFADD__(v35, 1);
    v36 = v35 + 1;
    if (v19)
      break;
    *(_QWORD *)(v15 + 16) = v36;
LABEL_7:
    v16 = v42;
    if (v42 == v40)
      return v15;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in Sequence<>.dedupe()(uint64_t a1)
{
  return closure #1 in Sequence<>.dedupe()(a1) & 1;
}

uint64_t sub_218F8F1D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F8F208(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 128);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F8F24C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F8F27C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F8F2C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F8F2F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 176);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F8F334@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F8F364(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 200);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F8F3A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
}

uint64_t sub_218F8F3D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_218F8F404(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 120);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_218F8F448@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_218F8F478(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_218F8F4A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
}

uint64_t sub_218F8F4D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
}

uint64_t ObjC metadata update function for IntelligenceEngineTranscript()
{
  return type metadata accessor for IntelligenceEngineTranscript(0);
}

uint64_t type metadata accessor for IntelligenceEngineTranscript(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for IntelligenceEngineTranscript);
}

uint64_t type metadata completion function for IntelligenceEngineTranscript()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for IntelligenceEngineTranscript()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientSessionId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientSessionId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientSessionId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientRequestId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientRequestId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientRequestId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientApplicationId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientApplicationId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientApplicationId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientGroupIdentifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientGroupIdentifier.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.clientGroupIdentifier.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.eventTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.eventTime.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.eventTime.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.__allocating_init(clientSessionId:clientRequestId:clientApplicationId:eventTime:clientGroupIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of IntelligenceEngineTranscript.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t ObjC metadata update function for IntelligenceEngineSession()
{
  return type metadata accessor for IntelligenceEngineSession(0);
}

uint64_t type metadata completion function for IntelligenceEngineSession()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for IntelligenceEngineSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IntelligenceEngineSession.clientSessionId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.clientSessionId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.clientSessionId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.clientRequestIds.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.clientRequestIds.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.clientRequestIds.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.startTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.startTime.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.startTime.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.endTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.endTime.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.endTime.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.__allocating_init(clientSessionId:clientRequestId:startTime:endTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of IntelligenceEngineSession.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t type metadata accessor for IntelligenceEngineSignalFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for IntelligenceEngineSignalFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IntelligenceEngineSignalFactory.buildIESessionsBoundary(bmEvents:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of IntelligenceEngineSignalFactory.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t storeEnumTagSinglePayload for IntelligenceEngineSession.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_218F8F864 + 4 * byte_218FBDA5E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_218F8F898 + 4 * byte_218FBDA59[v4]))();
}

uint64_t sub_218F8F898(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F8F8A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218F8F8A8);
  return result;
}

uint64_t sub_218F8F8B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218F8F8BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_218F8F8C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F8F8C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for IntelligenceEngineSession.CodingKeys()
{
  return &unk_24DA489A0;
}

uint64_t storeEnumTagSinglePayload for IntelligenceEngineTranscript.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_218F8F930 + 4 * byte_218FBDA68[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_218F8F964 + 4 * byte_218FBDA63[v4]))();
}

uint64_t sub_218F8F964(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F8F96C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218F8F974);
  return result;
}

uint64_t sub_218F8F980(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218F8F988);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_218F8F98C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218F8F994(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for IntelligenceEngineTranscript.CodingKeys()
{
  return &unk_24DA48A30;
}

Swift::Double *donatedTimestampDifferenceInSeconds.unsafeMutableAddressor()
{
  return &donatedTimestampDifferenceInSeconds;
}

uint64_t AppIntentSignalFactory.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t AppIntentSignalFactory.deinit()
{
  uint64_t v0;

  return v0;
}

void AppIntentSignalFactory.convertBmEventToEngagementFeatureSet(bmEvent:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  double v28;
  double v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  char *v40;
  char *v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;

  v44 = a2;
  v3 = type metadata accessor for ProtoTaskEngagementType();
  MEMORY[0x24BDAC7A8](v3);
  v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskFeatureSet?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)type metadata accessor for ProtoTaskFeatureSet();
  v12 = *(v11 - 1);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v41 - v17;
  v19 = (void *)MEMORY[0x219A27818](v16);
  v20 = v48;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v49);
  if (v20)
  {
    objc_autoreleasePoolPop(v19);
    return;
  }
  v41 = v15;
  v42 = a1;
  v43 = v18;
  v21 = v47;
  v48 = 0;
  objc_autoreleasePoolPop(v19);
  v22 = v49;
  INInteraction.extractFeatures()();
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v12 + 48))(v10, 1, v11) != 1)
  {
    (*(void (**)(char *, char *, _QWORD *))(v12 + 32))(v43, v10, v11);
    v27 = v7;
    ProtoTaskEngagementFeatureSet.init()();
    objc_msgSend(v42, sel_absoluteTimestamp);
    v29 = round(v28 * 1000.0);
    if ((~*(_QWORD *)&v29 & 0x7FF0000000000000) != 0)
    {
      if (v29 > -1.0)
      {
        v42 = v11;
        v30 = v41;
        if (v29 < 1.84467441e19)
        {
          v31 = (uint64_t)v21;
          v32 = v12;
          ProtoTaskEngagementFeatureSet.startTimestampMs.setter();
          type metadata accessor for Utils();
          v33 = objc_msgSend(v22, sel_intent);
          v34 = objc_msgSend(v33, sel__className);

          v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v36 = v22;
          v38 = v37;

          static Utils.deriveEngagmentType(from:)(v35, v38, v31);
          swift_bridgeObjectRelease();
          ProtoTaskEngagementFeatureSet.engagementType.setter();
          v39 = v42;
          v40 = v43;
          (*(void (**)(char *, char *, id))(v32 + 16))(v30, v43, v42);
          ProtoTaskEngagementFeatureSet.featureSet.setter();

          (*(void (**)(char *, id))(v32 + 8))(v40, v39);
          v24 = v44;
          v25 = v45;
          v26 = v46;
          (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v44, v27, v46);
          v23 = 0;
          goto LABEL_9;
        }
LABEL_13:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }

  outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for ProtoTaskFeatureSet?);
  v23 = 1;
  v24 = v44;
  v25 = v45;
  v26 = v46;
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v24, v23, 1, v26);
}

unint64_t AppIntentSignalFactory.getINIntentResponseCodeDescription(responseCode:)(uint64_t a1)
{
  unint64_t result;

  result = 0x6669636570736E75;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x7964616572;
      break;
    case 2:
      result = 0x65756E69746E6F63;
      break;
    case 3:
      result = 0x6572676F72506E69;
      break;
    case 4:
      result = 0x73736563637573;
      break;
    case 5:
      result = 0x6572756C696166;
      break;
    case 6:
      result = 0xD000000000000019;
      break;
    case 7:
      result = 0x6E49656C646E6168;
      break;
    case 8:
      result = 0xD000000000000018;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t AppIntentSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AppIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  uint64_t v22;
  uint64_t (*v23)(id, uint64_t);
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t (*v56)(id, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = v3;
  v58 = a2;
  v7 = type metadata accessor for ReliabilityCategory();
  v62 = *(_QWORD *)(v7 - 8);
  v63 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v61 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger();
  v60 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v59 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v42 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v41 = (char *)&v39 - v18;
  v64 = MEMORY[0x24BEE4AF8];
  if (!(a1 >> 62))
  {
    v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v19)
      goto LABEL_3;
LABEL_23:
    result = swift_bridgeObjectRelease();
    v37 = MEMORY[0x24BEE4AF8];
    v38 = MEMORY[0x24BEE4AF8];
LABEL_24:
    *a3 = v37;
    a3[1] = v38;
    return result;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v19 = result;
  if (!result)
    goto LABEL_23;
LABEL_3:
  if (v19 >= 1)
  {
    v43 = v15;
    v44 = v14;
    v50 = v13;
    v39 = a3;
    v22 = 0;
    v23 = *(uint64_t (**)(id, uint64_t))(*(_QWORD *)v4 + 88);
    v55 = a1 & 0xC000000000000001;
    v56 = v23;
    v53 = *MEMORY[0x24BEA8130];
    v52 = *MEMORY[0x24BEA8000];
    v45 = MEMORY[0x24BEE4AF8];
    v51 = 0x8000000218FC07E0;
    *(_QWORD *)&v21 = 136315138;
    v47 = v21;
    v46 = MEMORY[0x24BEE4AD8] + 8;
    v57 = v19;
    v49 = v4;
    v48 = a1;
    v54 = v9;
    do
    {
      if (v55)
        v24 = (id)MEMORY[0x219A2756C](v22, a1);
      else
        v24 = *(id *)(a1 + 8 * v22 + 32);
      v25 = v24;
      if (v56(v24, v58))
      {
        v26 = swift_retain();
        MEMORY[0x219A2732C](v26);
        if (*(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      (*(void (**)(void *))(*(_QWORD *)v4 + 80))(v25);
      v27 = v43;
      v28 = (uint64_t)v50;
      v29 = v44;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v50, 1, v44) == 1)
      {

        outlined destroy of Any?(v28, &demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
      }
      else
      {
        v30 = v41;
        v40 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 32);
        v40(v41, v28, v29);
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v42, v30, v29);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v31 = v45;
        else
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, v45);
        v33 = *(_QWORD *)(v31 + 16);
        v32 = *(_QWORD *)(v31 + 24);
        if (v33 >= v32 >> 1)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v31);
        *(_QWORD *)(v31 + 16) = v33 + 1;
        v34 = v43;
        v35 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
        v45 = v31;
        v36 = v44;
        v40((char *)(v31 + v35 + *(_QWORD *)(v43 + 72) * v33), (uint64_t)v42, v44);

        (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v36);
      }
      ++v22;
    }
    while (v57 != v22);
    result = swift_bridgeObjectRelease();
    v37 = v64;
    a3 = v39;
    v38 = v45;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

void AppIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _OWORD v73[2];
  uint64_t v74;

  v4 = v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v61 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (void *)MEMORY[0x219A27818](v14);
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v68);
  if (v3)
  {
    objc_autoreleasePoolPop(v17);
  }
  else
  {
    *(_QWORD *)&v67 = a2;
    objc_autoreleasePoolPop(v17);
    v18 = (void *)v68;
    v19 = objc_msgSend((id)v68, sel_intent);
    objc_opt_self();
    if (swift_dynamicCastObjCClass() || (objc_opt_self(), swift_dynamicCastObjCClass()))
    {

    }
    else
    {
      v65 = v19;
      v66 = v18;
      v20 = objc_msgSend(v19, sel_domain);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v22;

      v24 = v23;
      if (!String.count.getter())
      {
        swift_bridgeObjectRelease();
        v25 = objc_msgSend(a1, sel_intentClass);
        if (!v25)
          v25 = objc_msgSend(v65, sel_typeName);
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v27 = v26;

        v24 = v27;
      }
      if (String.count.getter() < 1)
      {

        swift_bridgeObjectRelease();
      }
      else
      {
        v63 = v21;
        v64 = v24;
        v28 = objc_msgSend(a1, sel_donatedBySiri);
        v70 = MEMORY[0x24BEE1328];
        LOBYTE(v68) = v28;
        outlined init with take of Any(&v68, v73);
        v29 = MEMORY[0x24BEE4B00];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v74 = v29;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v73, 0x42646574616E6F64, 0xED00006972695379, isUniquelyReferenced_nonNull_native);
        v31 = v74;
        swift_bridgeObjectRelease();
        v32 = objc_msgSend(v65, sel_typeName);
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v62 = v34;

        v70 = MEMORY[0x24BEE0D00];
        *(_QWORD *)&v68 = v33;
        *((_QWORD *)&v68 + 1) = v62;
        outlined init with take of Any(&v68, v73);
        v35 = swift_isUniquelyReferenced_nonNull_native();
        v74 = v31;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v73, 0x7954746E65746E69, 0xEE00656D614E6570, v35);
        v36 = v74;
        swift_bridgeObjectRelease();
        v37 = v66;
        v38 = objc_msgSend(v66, sel_intentResponse);
        if (v38)
        {
          v39 = v38;
          v40 = (*(uint64_t (**)(id))(*(_QWORD *)v4 + 104))(objc_msgSend(v38, sel__intentResponseCode));
          v70 = MEMORY[0x24BEE0D00];
          *(_QWORD *)&v68 = v40;
          *((_QWORD *)&v68 + 1) = v41;
          outlined init with take of Any(&v68, v73);
          v42 = swift_isUniquelyReferenced_nonNull_native();
          v74 = v36;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v73, 0xD000000000000012, 0x8000000218FC07C0, v42);
          v37 = v66;
          v36 = v74;

          swift_bridgeObjectRelease();
        }
        objc_msgSend(a1, sel_absoluteTimestamp);
        Date.init(timeIntervalSinceReferenceDate:)();
        v43 = type metadata accessor for Date();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v16, 0, 1, v43);
        v44 = objc_msgSend(v37, sel_dateInterval);
        if (v44)
        {
          v45 = v44;
          static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

          v46 = type metadata accessor for DateInterval();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v10, 0, 1, v46);
        }
        else
        {
          v46 = type metadata accessor for DateInterval();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v10, 1, 1, v46);
        }
        v47 = v36;
        outlined init with take of DateInterval?((uint64_t)v10, (uint64_t)v12);
        type metadata accessor for DateInterval();
        v48 = 0.0;
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v12, 1, v46))
        {
          DateInterval.duration.getter();
          v48 = v49;
        }
        outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for DateInterval?);
        type metadata accessor for Utils();
        static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v16, v67, (uint64_t)&v68, v48);
        outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Date?);
        v67 = v68;
        v50 = v69;
        v51 = v70;
        v52 = v71;
        v53 = v72;
        v54 = v65;
        v55 = objc_msgSend(v65, sel_verb);
        v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v58 = v57;

        type metadata accessor for Signal();
        v59 = swift_allocObject();
        *(_OWORD *)(v59 + 16) = v67;
        *(_QWORD *)(v59 + 32) = v50;
        *(_QWORD *)(v59 + 40) = v51;
        *(_QWORD *)(v59 + 48) = v52;
        *(_BYTE *)(v59 + 56) = v53;
        v60 = v64;
        *(_QWORD *)(v59 + 64) = v63;
        *(_QWORD *)(v59 + 72) = v60;
        *(_QWORD *)(v59 + 80) = v56;
        *(_QWORD *)(v59 + 88) = v58;
        *(_BYTE *)(v59 + 96) = 1;
        *(_QWORD *)(v59 + 104) = v47;
      }
    }
  }
}

uint64_t AppIntentSignalFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance AppIntentSignalFactory(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 88))(*a1);
}

uint64_t outlined init with take of DateInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AppIntentSignalFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for AppIntentSignalFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppIntentSignalFactory.convertBmEventToEngagementFeatureSet(bmEvent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of AppIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of AppIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AppIntentSignalFactory.getINIntentResponseCodeDescription(responseCode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AppIntentSignalFactory.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

double AppLaunchSignalFactory.durationBucketSeparatorShort.getter()
{
  return 2.0;
}

double AppLaunchSignalFactory.durationBucketSeparatorLong.getter()
{
  return 10.0;
}

uint64_t AppLaunchSignalFactory.launchReasonSiri.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppLaunchSignalFactory.launchReasonHomescreen.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppLaunchSignalFactory.launchReasonHomeScreenOpenFolder.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppLaunchSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  return 0;
}

uint64_t AppLaunchSignalFactory.convertBmAppLaunchEventToSignal(startingBmEvent:endDateTime:siriUISession:)(void *a1, uint64_t a2, double a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double v18;
  double v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  Swift::String v29;
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  char v42;
  uint64_t inited;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  *(_QWORD *)&v54 = a2;
  v6 = type metadata accessor for ReliabilityCategory();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, sel_absoluteTimestamp);
  v18 = a3 - v17;
  v19 = 0.0;
  if (v18 >= 2.0)
  {
    v19 = 1.0;
    if (v18 > 10.0)
      v19 = 2.0;
  }
  v20 = objc_msgSend(a1, sel_launchReason, (_QWORD)v54);
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

    if (v3[4] == v22 && v3[5] == v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v25 = 1769105747;
      swift_bridgeObjectRelease();
      v26 = 0;
      v27 = 0xE400000000000000;
    }
    else
    {
      v27 = 0xEA00000000006E65;
      v25 = 0x65726373656D6F48;
      if (v3[6] == v22 && v3[7] == v24)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v42 & 1) == 0)
        {
          v25 = 0x726568744FLL;
          v27 = 0xE500000000000000;
        }
      }
      v26 = 1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_218FBD9F0;
    *(_QWORD *)(inited + 32) = 0xD000000000000011;
    *(_QWORD *)(inited + 40) = 0x8000000218FBEF40;
    v44 = objc_msgSend(a1, sel_bundleID);
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v47 = v46;

    v48 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 48) = v45;
    *(_QWORD *)(inited + 56) = v47;
    *(_QWORD *)(inited + 72) = v48;
    *(_QWORD *)(inited + 80) = 0xD000000000000011;
    *(_QWORD *)(inited + 88) = 0x8000000218FC0C40;
    *(_QWORD *)(inited + 120) = MEMORY[0x24BEE13C8];
    *(double *)(inited + 96) = v19;
    v49 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for Utils();
    objc_msgSend(a1, sel_absoluteTimestamp);
    Date.init(timeIntervalSinceReferenceDate:)();
    v50 = type metadata accessor for Date();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v16, 0, 1, v50);
    static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v16, v54, (uint64_t)&v55, v19);
    outlined destroy of Date?((uint64_t)v16);
    v54 = v55;
    v51 = v56;
    v52 = v57;
    v53 = v58;
    LOBYTE(inited) = v59;
    type metadata accessor for Signal();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = v54;
    *(_QWORD *)(result + 32) = v51;
    *(_QWORD *)(result + 40) = v52;
    *(_QWORD *)(result + 48) = v53;
    *(_BYTE *)(result + 56) = inited;
    *(_QWORD *)(result + 64) = 0x636E75614C707041;
    *(_QWORD *)(result + 72) = 0xE900000000000068;
    *(_QWORD *)(result + 80) = v25;
    *(_QWORD *)(result + 88) = v27;
    *(_BYTE *)(result + 96) = v26;
    *(_QWORD *)(result + 104) = v49;
  }
  else
  {
    *(_QWORD *)&v54 = v6;
    if (one-time initialization token for engagement != -1)
      swift_once();
    v28 = __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v28, v10);
    *(_QWORD *)&v55 = 0;
    *((_QWORD *)&v55 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v29._countAndFlagsBits = 0xD00000000000001BLL;
    v29._object = (void *)0x8000000218FC0BF0;
    String.append(_:)(v29);
    v30 = a1;
    v31 = objc_msgSend(v30, sel_description);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    v35._countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 0xD000000000000020;
    v36._object = (void *)0x8000000218FC0C10;
    String.append(_:)(v36);
    v37 = v55;
    v38 = *MEMORY[0x24BEA8150];
    v39 = type metadata accessor for AppLaunchEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v9, v38, v39);
    v40 = v54;
    (*(void (**)(char *, _QWORD, _QWORD))(v7 + 104))(v9, *MEMORY[0x24BEA8008], v54);
    Logger.error(_:_:)(v37, *((unint64_t *)&v37 + 1), (uint64_t)v9);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v40);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0;
  }
  return result;
}

void AppLaunchSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  double v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  id v57;
  uint64_t v58;
  void *v59;
  void *v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t *v81;
  uint64_t v82;
  char *v83;
  void *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  id v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v76 = a1;
  v74 = a2;
  v96 = type metadata accessor for ReliabilityCategory();
  v3 = *(_QWORD *)(v96 - 8);
  MEMORY[0x24BDAC7A8](v96);
  v5 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger();
  v95 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v94 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = 0;
  v102 = MEMORY[0x24BEE4AF8];
  swift_retain();
  v8 = swift_bridgeObjectRetain();
  v9 = specialized _ArrayProtocol.filter(_:)(v8, v2);
  swift_bridgeObjectRelease();
  v77 = v2;
  swift_release();
  v75 = v9;
  if ((unint64_t)v9 >> 62)
    goto LABEL_56;
  v92 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v92 == 1)
  {
    v10 = v75;
    swift_bridgeObjectRetain();
    goto LABEL_4;
  }
  do
  {
LABEL_13:
    swift_beginAccess();
    v15 = v101;
    v9 = v101 + 1;
    if (!__OFADD__(v101, 1))
    {
      v90 = v75 & 0xFFFFFFFFFFFFFF8;
      v91 = v75 & 0xC000000000000001;
      v16 = v75 + 32;
      v81 = &v99;
      v17 = *MEMORY[0x24BEA8150];
      v85 = *MEMORY[0x24BEA8008];
      v86 = v17;
      *(_QWORD *)&v14 = 134218498;
      v80 = v14;
      v79 = MEMORY[0x24BEE4AD8] + 8;
      v84 = (void *)0x8000000218FC0C10;
      *(_QWORD *)&v14 = 136315138;
      v78 = v14;
      v83 = v5;
      v87 = v6;
      v82 = v3;
      v89 = v75 + 32;
      while (1)
      {
        if (v9 >= v92)
        {
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
        if (v91)
        {
          v71 = v75;
          v22 = (void *)MEMORY[0x219A2756C]();
          v23 = (id)MEMORY[0x219A2756C](v9, v71);
        }
        else
        {
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_50;
          v20 = *(_QWORD *)(v90 + 16);
          if (v15 >= v20)
            goto LABEL_51;
          v21 = *(id *)(v16 + 8 * v15);
          if (v9 < 0)
            goto LABEL_52;
          if (v9 >= v20)
            goto LABEL_53;
          v22 = v21;
          v23 = *(id *)(v16 + 8 * v9);
        }
        v24 = v23;
        if (one-time initialization token for engagement != -1)
          swift_once();
        v25 = __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
        v26 = v22;
        v9 = v24;
        v27 = v26;
        v28 = (id)v9;
        v29 = Logger.logObject.getter();
        v30 = static os_log_type_t.debug.getter();
        v31 = os_log_type_enabled(v29, v30);
        v97 = v25;
        if (v31)
        {
          v32 = swift_slowAlloc();
          v9 = swift_slowAlloc();
          *(_DWORD *)v32 = v80;
          v98 = v101;
          v99 = v9;
          v93 = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v32 + 12) = 2080;
          v33 = v27;
          v34 = objc_msgSend(v33, sel_description);
          v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v88 = v27;
          v36 = v35;
          v38 = v37;

          v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v32 + 22) = 2080;
          v39 = v93;
          v40 = objc_msgSend(v39, sel_description);
          v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v43 = v42;

          v6 = v87;
          v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v99);
          v28 = v93;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          v27 = v88;
          v3 = v82;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_218F54000, v29, v30, "index=%ld. This event = %s, Next event = %s", (uint8_t *)v32, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x219A27C8C](v9, -1, -1);
          v44 = v32;
          v5 = v83;
          MEMORY[0x219A27C8C](v44, -1, -1);

        }
        else
        {

        }
        if (!objc_msgSend(v27, sel_isStarting, v74)
          || (objc_msgSend(v28, sel_isStarting) & 1) != 0)
        {
          break;
        }
        v45 = objc_msgSend(v27, sel_bundleID);
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v9 = v47;

        v48 = objc_msgSend(v28, (SEL)&selRef_setMessageSignalGenerated_);
        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v51 = v50;

        if (v46 == v49 && v9 == v51)
        {
          swift_bridgeObjectRelease_n();
          v5 = v83;
        }
        else
        {
          v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v5 = v83;
          if ((v52 & 1) == 0)
            break;
        }
        objc_msgSend(v28, sel_absoluteTimestamp);
        v53 = (*(uint64_t (**)(id, uint64_t))(*(_QWORD *)v77 + 128))(v27, v76);
        if (v53)
        {
          v9 = v53;
          v54 = swift_retain();
          MEMORY[0x219A2732C](v54);
          if (*(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
        }

        v15 = v101 + 2;
        if (__OFADD__(v101, 2))
          goto LABEL_55;
        v101 += 2;
LABEL_17:
        v9 = v15 + 1;
        v16 = v89;
        if (__OFADD__(v15, 1))
          goto LABEL_49;
      }
      if (__OFADD__(v101, 1))
        goto LABEL_54;
      v55 = v28;
      ++v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v94, v97, v6);
      v99 = 0;
      v100 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      v99 = 0x6576652073696854;
      v100 = 0xEB0000000020746ELL;
      v56 = v27;
      v57 = objc_msgSend(v56, sel_description);
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v60 = v59;

      v61._countAndFlagsBits = v58;
      v61._object = v60;
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      v62._countAndFlagsBits = 0xD000000000000020;
      v62._object = v84;
      String.append(_:)(v62);
      v63 = v99;
      v64 = v100;
      v65 = type metadata accessor for AppLaunchEventDataIssues();
      (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v5, v86, v65);
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, v85, v96);
      swift_bridgeObjectRetain_n();
      v66 = Logger.logObject.getter();
      v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v66, v67))
      {
        v68 = swift_slowAlloc();
        v69 = swift_slowAlloc();
        v99 = v69;
        *(_DWORD *)v68 = v78;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v68 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v99);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_218F54000, v66, v67, "%s", (uint8_t *)v68, 0xCu);
        swift_arrayDestroy();
        v70 = v69;
        v6 = v87;
        MEMORY[0x219A27C8C](v70, -1, -1);
        MEMORY[0x219A27C8C](v68, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      type metadata accessor for SiriTaskEngagementUtils();
      v18 = dispatch thunk of static SiriTaskEngagementUtils.formulateSimplifiedReliabilityReasonDescription(reliabilityDescription:)();
      MEMORY[0x219A26EAC](v5, v18, v19);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v96);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v94, v6);
      v15 = v101;
      goto LABEL_17;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    if (v9 >= 0)
      v9 &= 0xFFFFFFFFFFFFFF8uLL;
    swift_bridgeObjectRetain();
    v73 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v92 = v73;
  }
  while (v73 != 1);
  v10 = v75;
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
LABEL_4:
  if ((v10 & 0xC000000000000001) != 0)
  {
    v11 = (id)MEMORY[0x219A2756C](0, v10);
LABEL_7:
    v9 = (uint64_t)v11;
    swift_bridgeObjectRelease();
    if (!objc_msgSend((id)v9, sel_isStarting))
    {

LABEL_12:
      v92 = 1;
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
    objc_msgSend((id)v9, sel_absoluteTimestamp);
    if (!(*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v77 + 128))(v9, v76, v12 + 60.0))
    {

      goto LABEL_47;
    }
    v13 = swift_retain();
    MEMORY[0x219A2732C](v13);
    if (*(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_63;
  }
  else
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v11 = *(id *)(v10 + 32);
      goto LABEL_7;
    }
    __break(1u);
LABEL_63:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  swift_release();
LABEL_47:
  v72 = v74;
  *v74 = v102;
  v72[1] = MEMORY[0x24BEE4AF8];
}

uint64_t AppLaunchSignalFactory.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AppLaunchSignalFactory.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double AppLaunchSignalFactory.__allocating_init()()
{
  uint64_t v0;
  double result;

  v0 = swift_allocObject();
  result = 2.0;
  *(_OWORD *)(v0 + 16) = xmmword_218FBDE30;
  *(_QWORD *)(v0 + 32) = 0xD00000000000002BLL;
  *(_QWORD *)(v0 + 40) = 0x8000000218FC0C60;
  *(_QWORD *)(v0 + 48) = 0xD000000000000031;
  *(_QWORD *)(v0 + 56) = 0x8000000218FC0C90;
  *(_QWORD *)(v0 + 64) = 0xD00000000000002DLL;
  *(_QWORD *)(v0 + 72) = 0x8000000218FC0CD0;
  return result;
}

double AppLaunchSignalFactory.init()()
{
  uint64_t v0;
  double result;

  result = 2.0;
  *(_OWORD *)(v0 + 16) = xmmword_218FBDE30;
  *(_QWORD *)(v0 + 32) = 0xD00000000000002BLL;
  *(_QWORD *)(v0 + 40) = 0x8000000218FC0C60;
  *(_QWORD *)(v0 + 48) = 0xD000000000000031;
  *(_QWORD *)(v0 + 56) = 0x8000000218FC0C90;
  *(_QWORD *)(v0 + 64) = 0xD00000000000002DLL;
  *(_QWORD *)(v0 + 72) = 0x8000000218FC0CD0;
  return result;
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance AppLaunchSignalFactory(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 120))(*a1);
}

uint64_t protocol witness for SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:) in conformance AppLaunchSignalFactory()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t type metadata accessor for AppLaunchSignalFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for AppLaunchSignalFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppLaunchSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AppLaunchSignalFactory.convertBmAppLaunchEventToSignal(startingBmEvent:endDateTime:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AppLaunchSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of AppLaunchSignalFactory.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t PSEBiomeFetchConfiguration.init(startDate:endDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v9(a3, a1, v6);
  v7 = a3 + *(int *)(type metadata accessor for PSEBiomeFetchConfiguration() + 20);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v7, a2, v6);
}

uint64_t PSEBiomeFetchConfiguration.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PSEBiomeFetchConfiguration.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PSEBiomeFetchConfiguration() + 20);
  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PSEBiomeEventsSource.nowPlayingEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.nowPlayingEvents.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.nowPlayingEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSEBiomeEventsSource.appIntentEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.appIntentEvents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.appIntentEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSEBiomeEventsSource.alarmEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.alarmEvents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.alarmEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSEBiomeEventsSource.appLaunchEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.appLaunchEvents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.appLaunchEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t PSEBiomeEventsSource.homeEvents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PSEBiomeEventsSource.homeEvents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*PSEBiomeEventsSource.homeEvents.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

void __swiftcall PSEBiomeEventsSource.init()(PostSiriEngagement::PSEBiomeEventsSource *__return_ptr retstr)
{
  void *v1;

  v1 = (void *)MEMORY[0x24BEE4AF8];
  retstr->nowPlayingEvents._rawValue = (void *)MEMORY[0x24BEE4AF8];
  retstr->appIntentEvents._rawValue = v1;
  retstr->alarmEvents._rawValue = v1;
  retstr->appLaunchEvents._rawValue = v1;
  retstr->homeEvents._rawValue = v1;
}

uint64_t default argument 0 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 1 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 2 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 3 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 4 of PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:)()
{
  return MEMORY[0x24BEE4AF8];
}

void __swiftcall PSEBiomeEventsSource.init(nowPlayingEvents:appIntentEvents:alarmEvents:appLaunchEvents:homeEvents:)(PostSiriEngagement::PSEBiomeEventsSource *__return_ptr retstr, Swift::OpaquePointer nowPlayingEvents, Swift::OpaquePointer appIntentEvents, Swift::OpaquePointer alarmEvents, Swift::OpaquePointer appLaunchEvents, Swift::OpaquePointer homeEvents)
{
  retstr->nowPlayingEvents = nowPlayingEvents;
  retstr->appIntentEvents = appIntentEvents;
  retstr->alarmEvents = alarmEvents;
  retstr->appLaunchEvents = appLaunchEvents;
  retstr->homeEvents = homeEvents;
}

id BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  Class isa;
  Class v14;
  id v15;

  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  isa = 0;
  if (v12(a1, 1, v10) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  }
  if (v12(a2, 1, v10) == 1)
  {
    v14 = 0;
  }
  else
  {
    v14 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithStartDate_endDate_maxEvents_lastN_reversed_, isa, v14, a3, a4, a5 & 1);

  return v15;
}

void closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for ReliabilityCategory();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, sel_eventBody);
  if (v8)
  {
    v9 = v8;
    swift_beginAccess();
    v10 = v9;
    MEMORY[0x219A2732C]();
    if (*(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    v12 = *MEMORY[0x24BEA7E88];
    v13 = type metadata accessor for SiriUIEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v7, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEA7FF8], v4);
    Logger.error(_:_:)(0xD000000000000030, 0x8000000218FC0F80, (uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for ReliabilityCategory();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, sel_eventBody);
  if (v8)
  {
    v9 = v8;
    swift_beginAccess();
    v10 = v9;
    MEMORY[0x219A2732C]();
    if (*(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    v12 = *MEMORY[0x24BEA7EB0];
    v13 = type metadata accessor for SiriExecutionEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v7, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEA8020], v4);
    Logger.error(_:_:)(0xD000000000000037, 0x8000000218FC0F00, (uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t static PSEBiomeEventsSourceFetcher.fetchSiriTranscriptEvents(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t aBlock;
  uint64_t v27;
  uint64_t (*v28)();
  void *v29;
  void (*v30)(void *);
  uint64_t v31;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&aBlock - v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = MEMORY[0x24BEE4AF8];
  type metadata accessor for BMPublisherOptions();
  v13 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v11, a1, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  outlined init with copy of Date?(a2, (uint64_t)v9);
  v15 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v11, (uint64_t)v9, 0, 0, 0);
  v16 = objc_msgSend((id)BiomeLibrary(), sel_Sage);
  swift_unknownObjectRelease();
  v17 = objc_msgSend(v16, sel_Transcript);
  swift_unknownObjectRelease();
  v18 = objc_msgSend(v17, sel_publisherWithOptions_, v15);
  v30 = (void (*)(void *))AbstractActivityCollector.collect(callback:);
  v31 = 0;
  v19 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v27 = 1107296256;
  v28 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v29 = &block_descriptor_0;
  v20 = _Block_copy(&aBlock);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v3;
  *(_QWORD *)(v21 + 24) = v12;
  v30 = partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriTranscriptEvents(startDate:endDate:);
  v31 = v21;
  aBlock = v19;
  v27 = 1107296256;
  v28 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v29 = &block_descriptor_6;
  v22 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v23 = objc_msgSend(v18, sel_sinkWithCompletion_receiveInput_, v20, v22);

  _Block_release(v22);
  _Block_release(v20);

  swift_beginAccess();
  v24 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v24;
}

void closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriTranscriptEvents(startDate:endDate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v5 = type metadata accessor for ReliabilityCategory();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, sel_eventBody);
  if (v9)
  {
    v14 = v9;
    if ((specialized static PSEBiomeEventsSourceFetcher.isSiriQuery(bmEvent:)(v9) & 1) != 0)
    {
      swift_beginAccess();
      v10 = v14;
      MEMORY[0x219A2732C]();
      if (*(_QWORD *)((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();

    }
    else
    {

    }
  }
  else
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    v12 = *MEMORY[0x24BEA81C0];
    v13 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v8, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA8018], v5);
    Logger.error(_:_:)(0xD000000000000033, 0x8000000218FC0EC0, (uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t static PSEBiomeEventsSourceFetcher.fetchAppIntentTranscriptEvents(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t aBlock;
  uint64_t v25;
  uint64_t (*v26)();
  void *v27;
  void (*v28)(void *);
  uint64_t v29;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&aBlock - v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  type metadata accessor for BMPublisherOptions();
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a1, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  outlined init with copy of Date?(a2, (uint64_t)v7);
  v13 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v9, (uint64_t)v7, 0, 0, 0);
  v14 = objc_msgSend((id)BiomeLibrary(), sel_App);
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_Intents);
  swift_unknownObjectRelease();
  v16 = objc_msgSend(v15, sel_Transcript);
  swift_unknownObjectRelease();
  v17 = objc_msgSend(v16, sel_publisherWithOptions_, v13);
  v28 = (void (*)(void *))AbstractActivityCollector.collect(callback:);
  v29 = 0;
  v18 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v25 = 1107296256;
  v26 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v27 = &block_descriptor_12;
  v19 = _Block_copy(&aBlock);
  v28 = partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchAppIntentTranscriptEvents(startDate:endDate:);
  v29 = v10;
  aBlock = v18;
  v25 = 1107296256;
  v26 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v27 = &block_descriptor_15;
  v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v21 = objc_msgSend(v17, sel_sinkWithCompletion_receiveInput_, v19, v20);

  _Block_release(v20);
  _Block_release(v19);

  swift_beginAccess();
  v22 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v22;
}

void closure #2 in static PSEBiomeEventsSourceFetcher.fetchAppIntentTranscriptEvents(startDate:endDate:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for ReliabilityCategory();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, sel_eventBody);
  if (v8)
  {
    v9 = v8;
    swift_beginAccess();
    v10 = v9;
    MEMORY[0x219A2732C]();
    if (*(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    v12 = *MEMORY[0x24BEA81B8];
    v13 = type metadata accessor for TranscriptEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v7, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEA8018], v4);
    Logger.error(_:_:)(0xD00000000000003ELL, 0x8000000218FC0E60, (uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t closure #1 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)()
{
  return 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any) -> (@unowned NSComparisonResult)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *, _QWORD *);
  uint64_t v6;
  _QWORD v8[4];
  _QWORD v9[4];

  v5 = *(uint64_t (**)(_QWORD *, _QWORD *))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a2;
  v8[3] = swift_getObjectType();
  v8[0] = a3;
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v6 = v5(v9, v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  return v6;
}

void closure #2 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(void *a1, void (*a2)(id, __int128 *), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  Swift::String v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  __int128 *v22;
  __int128 v23;
  NSObject *v24;
  os_log_type_t v25;
  void (*v26)(id, __int128 *);
  uint8_t *v27;
  __int128 *v28;
  __int128 v29;
  _QWORD v30[2];
  void (*v31)(id, __int128 *);
  uint64_t v32;
  __int128 *v33;
  id v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v32 = type metadata accessor for ReliabilityCategory();
  v8 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = (__int128 *)(a4 + 16);
  if (objc_msgSend(a1, sel_state))
  {
    v30[1] = a3;
    v31 = a2;
    if (one-time initialization token for engagement != -1)
      swift_once();
    v15 = __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
    *(_QWORD *)&v35 = 0;
    *((_QWORD *)&v35 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v35 = 0xD000000000000026;
    *((_QWORD *)&v35 + 1) = 0x8000000218FC0F50;
    v34 = objc_msgSend(a1, sel_error);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = v35;
    v18 = *MEMORY[0x24BEA7F08];
    v19 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v10, v18, v19);
    v20 = v32;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEA8030], v32);
    Logger.error(_:_:)(v17, *((unint64_t *)&v17 + 1), (uint64_t)v10);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v21 = objc_msgSend(a1, sel_error);
    v22 = v33;
    swift_beginAccess();
    v23 = v22[1];
    v35 = *v22;
    v36 = v23;
    v38 = v35;
    v39 = v23;
    v37 = *((_QWORD *)v22 + 4);
    v40 = v37;
    outlined retain of [ExtendedBMAlarmEvent]((uint64_t)&v38);
    outlined retain of [ExtendedBMAlarmEvent]((uint64_t)&v38 + 8);
    outlined retain of [ExtendedBMAlarmEvent]((uint64_t)&v39);
    outlined retain of [ExtendedBMAlarmEvent]((uint64_t)&v39 + 8);
    outlined retain of [ExtendedBMAlarmEvent]((uint64_t)&v40);
    v31(v21, &v35);
    outlined release of [ExtendedBMAlarmEvent]((uint64_t)&v38);
    outlined release of [ExtendedBMAlarmEvent]((uint64_t)&v38 + 8);
    outlined release of [ExtendedBMAlarmEvent]((uint64_t)&v39);
    outlined release of [ExtendedBMAlarmEvent]((uint64_t)&v39 + 8);
    outlined release of [ExtendedBMAlarmEvent]((uint64_t)&v40);

  }
  else
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.info.getter();
    v26 = a2;
    if (os_log_type_enabled(v24, v25))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_218F54000, v24, v25, "receiving all Biome events successfully.", v27, 2u);
      MEMORY[0x219A27C8C](v27, -1, -1);
    }

    v28 = v33;
    swift_beginAccess();
    v29 = v28[1];
    v35 = *v28;
    v36 = v29;
    v38 = v35;
    v39 = v29;
    v37 = *((_QWORD *)v28 + 4);
    v40 = v37;
    outlined retain of [ExtendedBMAlarmEvent]((uint64_t)&v38);
    outlined retain of [ExtendedBMAlarmEvent]((uint64_t)&v38 + 8);
    outlined retain of [ExtendedBMAlarmEvent]((uint64_t)&v39);
    outlined retain of [ExtendedBMAlarmEvent]((uint64_t)&v39 + 8);
    outlined retain of [ExtendedBMAlarmEvent]((uint64_t)&v40);
    v26(0, &v35);
    outlined release of [ExtendedBMAlarmEvent]((uint64_t)&v38);
    outlined release of [ExtendedBMAlarmEvent]((uint64_t)&v38 + 8);
    outlined release of [ExtendedBMAlarmEvent]((uint64_t)&v39);
    outlined release of [ExtendedBMAlarmEvent]((uint64_t)&v39 + 8);
    outlined release of [ExtendedBMAlarmEvent]((uint64_t)&v40);
  }
}

uint64_t closure #3 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(void *a1, _QWORD *a2, double a3, double a4)
{
  uint64_t v8;
  void *v9;
  char **p_name;
  uint64_t v11;
  double v12;
  uint64_t v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50[4];

  v50[3] = (uint64_t)&unk_25503C570;
  swift_unknownObjectRetain();
  v8 = swift_dynamicCastObjCProtocolConditional();
  if (!v8)
    return swift_unknownObjectRelease();
  v9 = (void *)v8;
  p_name = &PSEAlarmSELFEmitter.name;
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody) & 1) == 0
    || !objc_msgSend(a1, sel_eventBody)
    || (objc_opt_self(), v11 = swift_dynamicCastObjCClass(), swift_unknownObjectRelease(), !v11))
  {
    if ((objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody) & 1) != 0)
    {
      if (objc_msgSend(a1, sel_eventBody))
      {
        objc_opt_self();
        v13 = swift_dynamicCastObjCClass();
        swift_unknownObjectRelease();
        if (v13)
        {
          if ((objc_msgSend(a1, sel_respondsToSelector_, sel_eventBody) & 1) != 0
            && objc_msgSend(a1, sel_eventBody))
          {
            objc_opt_self();
            v14 = (void *)swift_dynamicCastObjCClass();
            if (v14)
            {
              objc_msgSend(v14, sel_absoluteTimestamp);
              v16 = v15;
              swift_unknownObjectRelease();
              if (v16 <= a4)
                goto LABEL_17;
              return swift_unknownObjectRelease();
            }
            swift_unknownObjectRelease();
          }
        }
      }
    }
    objc_msgSend(v9, sel_timestamp);
    if (v17 <= a4)
      goto LABEL_17;
    return swift_unknownObjectRelease();
  }
  objc_msgSend(v9, sel_timestamp);
  if (v12 > a3)
    return swift_unknownObjectRelease();
LABEL_17:
  if (one-time initialization token for engagement != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.engagement);
  swift_unknownObjectRetain_n();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v48 = a2;
    v22 = swift_slowAlloc();
    v50[0] = v22;
    *(_DWORD *)v21 = 136315138;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BMStoreEvent);
    v23 = String.init<A>(describing:)();
    v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v50);
    p_name = (char **)(&PSEAlarmSELFEmitter + 24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_218F54000, v19, v20, "receiving Biome event %s", v21, 0xCu);
    swift_arrayDestroy();
    v25 = v22;
    a2 = v48;
    MEMORY[0x219A27C8C](v25, -1, -1);
    MEMORY[0x219A27C8C](v21, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  if ((objc_msgSend(a1, p_name[153], sel_eventBody, v48, v49, v50[0]) & 1) != 0)
  {
    if (objc_msgSend(a1, sel_eventBody))
    {
      objc_opt_self();
      v26 = swift_dynamicCastObjCClass();
      swift_unknownObjectRelease();
      if (v26)
      {
        result = (uint64_t)objc_msgSend(a1, p_name[153], sel_eventBody);
        if ((result & 1) != 0)
        {
          result = (uint64_t)objc_msgSend(a1, sel_eventBody);
          if (result)
          {
            objc_opt_self();
            swift_dynamicCastObjCClassUnconditional();
            v28 = swift_beginAccess();
            MEMORY[0x219A2732C](v28);
            v29 = a2[5];
            goto LABEL_42;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_69;
      }
    }
  }
  if ((objc_msgSend(a1, p_name[153], sel_eventBody) & 1) != 0)
  {
    if (objc_msgSend(a1, sel_eventBody))
    {
      objc_opt_self();
      v30 = swift_dynamicCastObjCClass();
      swift_unknownObjectRelease();
      if (v30)
      {
        result = (uint64_t)objc_msgSend(a1, p_name[153], sel_eventBody);
        if ((result & 1) != 0)
        {
          result = (uint64_t)objc_msgSend(a1, sel_eventBody);
          if (result)
          {
            objc_opt_self();
            swift_dynamicCastObjCClassUnconditional();
            v31 = swift_beginAccess();
            MEMORY[0x219A2732C](v31);
            if (*(_QWORD *)((a2[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a2[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            goto LABEL_44;
          }
          goto LABEL_70;
        }
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
    }
  }
  if ((objc_msgSend(a1, p_name[153], sel_eventBody) & 1) != 0)
  {
    if (objc_msgSend(a1, sel_eventBody))
    {
      objc_opt_self();
      v32 = swift_dynamicCastObjCClass();
      swift_unknownObjectRelease();
      if (v32)
      {
        result = (uint64_t)objc_msgSend(a1, p_name[153], sel_eventBody);
        if ((result & 1) != 0)
        {
          result = (uint64_t)objc_msgSend(a1, sel_eventBody);
          if (result)
          {
            objc_opt_self();
            swift_dynamicCastObjCClassUnconditional();
            v33 = swift_beginAccess();
            MEMORY[0x219A2732C](v33);
            v29 = a2[3];
LABEL_42:
            if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_44:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();
            return swift_unknownObjectRelease();
          }
          goto LABEL_72;
        }
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
    }
  }
  if ((objc_msgSend(a1, p_name[153], sel_eventBody) & 1) != 0)
  {
    if (objc_msgSend(a1, sel_eventBody))
    {
      objc_opt_self();
      v34 = swift_dynamicCastObjCClass();
      swift_unknownObjectRelease();
      if (v34)
      {
        result = (uint64_t)objc_msgSend(a1, p_name[153], sel_eventBody);
        if ((result & 1) == 0)
        {
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        result = (uint64_t)objc_msgSend(a1, sel_eventBody);
        if (!result)
        {
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }
        result = (uint64_t)objc_msgSend(a1, p_name[153], sel_timestamp);
        if ((result & 1) == 0)
        {
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
          goto LABEL_77;
        }
        objc_msgSend(a1, sel_timestamp);
        v36 = v35;
        objc_opt_self();
        v37 = swift_dynamicCastObjCClassUnconditional();
        swift_beginAccess();
        v38 = (_QWORD *)a2[4];
        swift_unknownObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        a2[4] = v38;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
          a2[4] = v38;
        }
        v41 = v38[2];
        v40 = v38[3];
        v42 = v41 + 1;
        if (v41 >= v40 >> 1)
        {
          v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v38);
          a2[4] = v38;
        }
LABEL_65:
        v38[2] = v42;
        v47 = &v38[2 * v41];
        v47[4] = v37;
        v47[5] = v36;
        swift_endAccess();
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
  }
  if ((objc_msgSend(a1, p_name[153], sel_eventBody) & 1) == 0)
    return swift_unknownObjectRelease();
  if (!objc_msgSend(a1, sel_eventBody))
    return swift_unknownObjectRelease();
  objc_opt_self();
  v43 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  if (!v43)
    return swift_unknownObjectRelease();
  result = (uint64_t)objc_msgSend(a1, p_name[153], sel_eventBody);
  if ((result & 1) == 0)
    goto LABEL_76;
  result = (uint64_t)objc_msgSend(a1, sel_eventBody);
  if (!result)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  result = (uint64_t)objc_msgSend(a1, p_name[153], sel_timestamp);
  if ((result & 1) != 0)
  {
    objc_msgSend(a1, sel_timestamp);
    v36 = v44;
    objc_opt_self();
    v37 = swift_dynamicCastObjCClassUnconditional();
    swift_beginAccess();
    v38 = (_QWORD *)a2[6];
    swift_unknownObjectRetain();
    v45 = swift_isUniquelyReferenced_nonNull_native();
    a2[6] = v38;
    if ((v45 & 1) == 0)
    {
      v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
      a2[6] = v38;
    }
    v41 = v38[2];
    v46 = v38[3];
    v42 = v41 + 1;
    if (v41 >= v46 >> 1)
    {
      v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v41 + 1, 1, v38);
      a2[6] = v38;
    }
    goto LABEL_65;
  }
LABEL_78:
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t PSEBiomeEventsSourceFetcher.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEBiomeEventsSourceFetcher.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t PSEBiomeEventsSourceFetcher.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSEBiomeEventsSourceFetcher.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, _QWORD, uint64_t, uint64_t);
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t aBlock;
  uint64_t v26;
  uint64_t (*v27)();
  void *v28;
  void (*v29)(void *);
  uint64_t v30;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&aBlock - v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  type metadata accessor for BMPublisherOptions();
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v13(v9, a1, v11);
  v14 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
  v14(v9, 0, 1, v11);
  v13(v7, a2, v11);
  v14(v7, 0, 1, v11);
  v15 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v9, (uint64_t)v7, 0, 0, 0);
  v16 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  v17 = objc_msgSend(v16, sel_Execution);
  swift_unknownObjectRelease();
  v18 = objc_msgSend(v17, sel_publisherWithOptions_, v15);
  v29 = (void (*)(void *))AbstractActivityCollector.collect(callback:);
  v30 = 0;
  v19 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v26 = 1107296256;
  v27 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v28 = &block_descriptor_21;
  v20 = _Block_copy(&aBlock);
  v29 = partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:);
  v30 = v10;
  aBlock = v19;
  v26 = 1107296256;
  v27 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v28 = &block_descriptor_24;
  v21 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v22 = objc_msgSend(v18, sel_sinkWithCompletion_receiveInput_, v20, v21);

  _Block_release(v21);
  _Block_release(v20);

  swift_beginAccess();
  v23 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v23;
}

void specialized static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  Class isa;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  uint64_t aBlock;
  uint64_t v39;
  uint64_t (*v40)();
  void *v41;
  void *v42;
  _QWORD *v43;

  Date.timeIntervalSinceReferenceDate.getter();
  v6 = v5;
  Date.timeIntervalSinceReferenceDate.getter();
  v8 = v7;
  v9 = v7 + 30.0;
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0CB40]), sel_init);
  v11 = objc_msgSend(v10, sel_publisherFromStartTime_, v6);

  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0CBE0]), sel_init);
  v13 = objc_msgSend(v12, sel_publisherFromStartTime_, v6);

  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0CC50]), sel_init);
  v15 = objc_msgSend(v14, sel_publisherFromStartTime_, v6);

  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0CB30]), sel_init);
  v17 = objc_msgSend(v16, sel_publisherFromStartTime_, v6);

  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0CB98]), sel_init);
  v19 = objc_msgSend(v18, sel_publisherFromStartTime_, v6);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_218FBDED0;
  *(_QWORD *)(v20 + 32) = v13;
  *(_QWORD *)(v20 + 40) = v15;
  *(_QWORD *)(v20 + 48) = v17;
  *(_QWORD *)(v20 + 56) = v19;
  specialized Array._endMutation()();
  v36 = v13;
  v21 = v15;
  v22 = v17;
  v23 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BPSPublisher);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v42 = closure #1 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:);
  v43 = 0;
  v25 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v39 = 1107296256;
  v40 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any) -> (@unowned NSComparisonResult);
  v41 = &block_descriptor_27;
  v26 = _Block_copy(&aBlock);
  v27 = v11;
  v28 = objc_msgSend(v11, sel_orderedMergeWithOthers_comparator_, isa, v26);
  _Block_release(v26);

  v29 = (_QWORD *)swift_allocObject();
  v30 = MEMORY[0x24BEE4AF8];
  v29[2] = MEMORY[0x24BEE4AF8];
  v29[3] = v30;
  v29[4] = v30;
  v29[5] = v30;
  v29[6] = v30;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = a3;
  v31[3] = a4;
  v31[4] = v29;
  v42 = partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:);
  v43 = v31;
  aBlock = v25;
  v39 = 1107296256;
  v40 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v41 = &block_descriptor_36;
  v32 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  v33 = swift_allocObject();
  *(double *)(v33 + 16) = v9;
  *(double *)(v33 + 24) = v8;
  *(_QWORD *)(v33 + 32) = v29;
  v42 = partial apply for closure #3 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:);
  v43 = (_QWORD *)v33;
  aBlock = v25;
  v39 = 1107296256;
  v40 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> ();
  v41 = &block_descriptor_42;
  v34 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v35 = objc_msgSend(v28, sel_sinkWithCompletion_receiveInput_, v32, v34);
  _Block_release(v34);
  _Block_release(v32);

  swift_release();
}

uint64_t specialized static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t aBlock;
  uint64_t v24;
  uint64_t (*v25)();
  void *v26;
  void (*v27)(void *);
  uint64_t v28;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&aBlock - v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  type metadata accessor for BMPublisherOptions();
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a1, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  outlined init with copy of Date?(a2, (uint64_t)v7);
  v13 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v9, (uint64_t)v7, 0, 0, 0);
  v14 = objc_msgSend((id)BiomeLibrary(), sel_Siri);
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_UI);
  swift_unknownObjectRelease();
  v16 = objc_msgSend(v15, sel_publisherWithOptions_, v13);
  v27 = (void (*)(void *))AbstractActivityCollector.collect(callback:);
  v28 = 0;
  v17 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v24 = 1107296256;
  v25 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v26 = &block_descriptor_48;
  v18 = _Block_copy(&aBlock);
  v27 = partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:);
  v28 = v10;
  aBlock = v17;
  v24 = 1107296256;
  v25 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v26 = &block_descriptor_51;
  v19 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v20 = objc_msgSend(v16, sel_sinkWithCompletion_receiveInput_, v18, v19);

  _Block_release(v19);
  _Block_release(v18);

  swift_beginAccess();
  v21 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v21;
}

uint64_t type metadata accessor for PSEBiomeFetchConfiguration()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PSEBiomeFetchConfiguration;
  if (!type metadata singleton initialization cache for PSEBiomeFetchConfiguration)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_218F94BDC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t type metadata accessor for BMPublisherOptions()
{
  unint64_t result;

  result = lazy cache variable for type metadata for BMPublisherOptions;
  if (!lazy cache variable for type metadata for BMPublisherOptions)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BMPublisherOptions);
  }
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_218F94C54()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriTranscriptEvents(startDate:endDate:)(void *a1)
{
  uint64_t v1;

  closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriTranscriptEvents(startDate:endDate:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t specialized static PSEBiomeEventsSourceFetcher.isSiriQuery(bmEvent:)(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(a1, sel_identifiers);
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, sel_clientApplicationId);

    if (v3)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      String.lowercased()();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type String and conformance String();
      LOBYTE(v2) = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      LOBYTE(v2) = 0;
    }
  }
  return v2 & 1;
}

void partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchAppIntentTranscriptEvents(startDate:endDate:)(void *a1)
{
  uint64_t v1;

  closure #2 in static PSEBiomeEventsSourceFetcher.fetchAppIntentTranscriptEvents(startDate:endDate:)(a1, v1);
}

uint64_t *initializeBufferWithCopyOfBuffer for PSEBiomeFetchConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t destroy for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t initializeWithCopy for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithCopy for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t initializeWithTake for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithTake for PSEBiomeFetchConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PSEBiomeFetchConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_218F9504C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PSEBiomeFetchConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_218F95094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PSEBiomeFetchConfiguration()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ExtendedBMAlarmEvent(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for ExtendedBMAlarmEvent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ExtendedBMAlarmEvent(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for ExtendedBMAlarmEvent()
{
  return &type metadata for ExtendedBMAlarmEvent;
}

ValueMetadata *type metadata accessor for ExtendedHomeKitClientAccessoryEvent()
{
  return &type metadata for ExtendedHomeKitClientAccessoryEvent;
}

uint64_t destroy for PSEBiomeEventsSource()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PSEBiomeEventsSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PSEBiomeEventsSource(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PSEBiomeEventsSource(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PSEBiomeEventsSource(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PSEBiomeEventsSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PSEBiomeEventsSource()
{
  return &type metadata for PSEBiomeEventsSource;
}

uint64_t type metadata accessor for PSEBiomeEventsSourceFetcher()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSEBiomeEventsSourceFetcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSEBiomeEventsSourceFetcher.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

void partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(void *a1)
{
  uint64_t v1;

  closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(a1, v1);
}

uint64_t sub_218F954B8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_218F954FC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(void *a1)
{
  uint64_t v1;

  closure #2 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(a1, *(void (**)(id, __int128 *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_218F95534()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(void *a1)
{
  uint64_t v1;

  return closure #3 in static PSEBiomeEventsSourceFetcher.fetchDonatedEvents(startDate:endDate:completion:)(a1, *(_QWORD **)(v1 + 32), *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t outlined retain of [ExtendedBMAlarmEvent](uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of [ExtendedBMAlarmEvent](uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void partial apply for closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:)(void *a1)
{
  uint64_t v1;

  closure #2 in static PSEBiomeEventsSourceFetcher.fetchSiriUIEvents(startDate:endDate:)(a1, v1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS8UTF8ViewV_s5UInt8Vs5NeverOTg5052_sSS18PostSiriEngagementE17encodeWithXorByte3keySSs5F12V_tFA2EXEfU_AITf1cn_n(unint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v4 = a1;
  v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_37;
  if ((a2 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a2) & 0xF;
  else
    v6 = a1 & 0xFFFFFFFFFFFFLL;
LABEL_5:
  v7 = MEMORY[0x24BEE4AF8];
  if (!v6)
    return v7;
  v22 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v9 = (v4 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0)
      LOBYTE(v9) = 1;
    v10 = 4 << v9;
    v11 = v4 & 0xFFFFFFFFFFFFLL;
    if ((a2 & 0x2000000000000000) != 0)
      v11 = v5;
    v20 = v11;
    v12 = 15;
    v18 = v4;
    while (1)
    {
      v13 = v12;
      if ((v12 & 0xC) == v10)
        v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v4, a2);
      v14 = v13 >> 16;
      if (v13 >> 16 >= v20)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        v6 = String.UTF8View._foreignCount()();
        goto LABEL_5;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v16 = String.UTF8View._foreignSubscript(position:)();
      }
      else if ((a2 & 0x2000000000000000) != 0)
      {
        v21[0] = v4;
        v21[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v16 = *((_BYTE *)v21 + v14);
      }
      else
      {
        v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v4 & 0x1000000000000000) == 0)
          v15 = _StringObject.sharedUTF8.getter();
        v16 = *(_BYTE *)(v15 + v14);
      }
      v7 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v22;
      }
      v5 = *(_QWORD *)(v7 + 16);
      v17 = *(_QWORD *)(v7 + 24);
      if (v5 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v5 + 1, 1);
        v7 = v22;
      }
      *(_QWORD *)(v7 + 16) = v5 + 1;
      *(_BYTE *)(v7 + v5 + 32) = v16 ^ a3;
      if ((v12 & 0xC) == v10)
      {
        v4 = v18;
        v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v18, a2);
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_12;
LABEL_29:
        if (v20 <= v12 >> 16)
          goto LABEL_36;
        v12 = String.UTF8View._foreignIndex(after:)();
        if (!--v6)
          return v7;
      }
      else
      {
        v4 = v18;
        if ((a2 & 0x1000000000000000) != 0)
          goto LABEL_29;
LABEL_12:
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        if (!--v6)
          return v7;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t static UnarchiveError.== infix(_:_:)()
{
  return 1;
}

void UnarchiveError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int UnarchiveError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnarchiveError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance UnarchiveError()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnarchiveError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::String __swiftcall String.encodeWithXorByte(key:)(Swift::UInt8 key)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String result;

  v3 = v2;
  v4 = v1;
  v6 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v6);
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS8UTF8ViewV_s5UInt8Vs5NeverOTg5052_sSS18PostSiriEngagementE17encodeWithXorByte3keySSs5F12V_tFA2EXEfU_AITf1cn_n(v4, v3, key);
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  v7 = String.init<A>(bytes:encoding:)();
  v9 = v8;
  swift_bridgeObjectRelease();
  if (v9)
    v10 = v7;
  else
    v10 = 0;
  if (v9)
    v11 = v9;
  else
    v11 = (void *)0xE000000000000000;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [UInt8] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance [A]);
  }
  return result;
}

void *TaskMetricsConst.commaDelimiter.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.commaDelimiter;
}

uint64_t static TaskMetricsConst.commaDelimiter.getter()
{
  return 46;
}

const char *TaskMetricsConst.unparsedIntent.unsafeMutableAddressor()
{
  return "UnparsedIntent";
}

uint64_t static TaskMetricsConst.unparsedIntent.getter()
{
  return 0x6465737261706E55;
}

void *TaskMetricsConst.taskTypePrefix.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.taskTypePrefix;
}

uint64_t static TaskMetricsConst.taskTypePrefix.getter()
{
  return 20041;
}

uint64_t static Utils.deltaTBetween(eventStart:siriUISession:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  void (*v33)(char *, uint64_t);
  uint64_t result;
  uint64_t v35;
  double v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v38 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v20((char *)&v38 - v18, a2, v10);
  v21 = type metadata accessor for SiriUISession(0);
  v20(v17, a2 + *(int *)(v21 + 20), v10);
  outlined init with copy of Date?(a1, (uint64_t)v9);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (v22 == 1)
  {
    v37 = *(void (**)(char *, uint64_t))(v11 + 8);
    v37(v17, v10);
    v37(v19, v10);
    result = outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
    v35 = 0x3FF0000000000000;
    v24 = 0;
    v28 = 0.0;
    v36 = 0.0;
    a4 = 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    Date.timeIntervalSinceReferenceDate.getter();
    v24 = v23;
    Date.timeIntervalSinceReferenceDate.getter();
    v26 = v25;
    Date.timeIntervalSinceReferenceDate.getter();
    v28 = v26 - v27;
    Date.timeIntervalSinceReferenceDate.getter();
    v30 = v29;
    Date.timeIntervalSinceReferenceDate.getter();
    v32 = v31;
    v33 = *(void (**)(char *, uint64_t))(v11 + 8);
    v33(v14, v10);
    v33(v17, v10);
    result = ((uint64_t (*)(char *, uint64_t))v33)(v19, v10);
    v35 = 0;
    v36 = v30 - v32;
  }
  *(_QWORD *)a3 = v24;
  *(double *)(a3 + 8) = v28;
  *(double *)(a3 + 16) = v36;
  *(double *)(a3 + 24) = a4;
  *(_QWORD *)(a3 + 32) = v35;
  *(_BYTE *)(a3 + 40) = v22 != 1;
  return result;
}

uint64_t static Utils.deriveEngagmentType(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  BOOL v15;
  char v16;
  char v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v6 = type metadata accessor for ReliabilityCategory();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 0xD000000000000011 && a2 == (void *)0x8000000218FC0FC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000016 && a2 == (void *)0x8000000218FC0FE0
    || ((v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000016)
      ? (v15 = a2 == (void *)0x8000000218FC1000)
      : (v15 = 0),
        !v15 ? (v16 = 0) : (v16 = 1),
        (v14 & 1) != 0 || (v16 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v10 = (unsigned int *)MEMORY[0x24BEA7E38];
LABEL_7:
    v11 = *v10;
    v12 = type metadata accessor for ProtoTaskEngagementType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a3, v11, v12);
  }
  if (a1 == 0xD000000000000013 && a2 == (void *)0x8000000218FC1020
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v10 = (unsigned int *)MEMORY[0x24BEA7E08];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000013 && a2 == (void *)0x8000000218FC1040
    || ((v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000013)
      ? (v18 = a2 == (void *)0x8000000218FC1060)
      : (v18 = 0),
        !v18 ? (v19 = 0) : (v19 = 1),
        (v17 & 1) != 0 || (v19 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v10 = (unsigned int *)MEMORY[0x24BEA7DF8];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000013 && a2 == (void *)0x8000000218FC01E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v10 = (unsigned int *)MEMORY[0x24BEA7E10];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000013 && a2 == (void *)0x8000000218FC0200
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v10 = (unsigned int *)MEMORY[0x24BEA7E20];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000013 && a2 == (void *)0x8000000218FC1080
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v10 = (unsigned int *)MEMORY[0x24BEA7E00];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000018 && a2 == (void *)0x8000000218FC10A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v10 = (unsigned int *)MEMORY[0x24BEA7E40];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000010 && a2 == (void *)0x8000000218FC10C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v10 = (unsigned int *)MEMORY[0x24BEA7E28];
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000011 && a2 == (void *)0x8000000218FC10E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v10 = (unsigned int *)MEMORY[0x24BEA7E58];
    goto LABEL_7;
  }
  if (a1 == 0x7370616D4E49 && a2 == (void *)0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v10 = (unsigned int *)MEMORY[0x24BEA7E30];
    goto LABEL_7;
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.engagement);
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v21._countAndFlagsBits = 0xD00000000000003ELL;
  v21._object = (void *)0x8000000218FC1100;
  String.append(_:)(v21);
  v22._countAndFlagsBits = a1;
  v22._object = a2;
  String.append(_:)(v22);
  v23 = v29;
  v24 = v30;
  v25 = *MEMORY[0x24BEA7EC0];
  v26 = type metadata accessor for EngagementFeaturizationError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v9, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEA8028], v6);
  Logger.error(_:_:)(v23, v24, (uint64_t)v9);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v27 = *MEMORY[0x24BEA7E18];
  v28 = type metadata accessor for ProtoTaskEngagementType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(a3, v27, v28);
}

id static Utils.isDiagnosticsSubmissionAllowed()()
{
  id result;
  void *v1;
  unsigned int v2;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedConnection);
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, sel_effectiveBoolValueForSetting_, *MEMORY[0x24BE638E0]);

    return (id)(v2 == 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static Utils.isFirstPartyAppDonation(bundleId:)()
{
  lazy protocol witness table accessor for type String and conformance String();
  return StringProtocol.contains<A>(_:)() & 1;
}

void static Utils.extractInteraction(fromAppIntentEvent:)(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x219A27818]();
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, &v3);
  objc_autoreleasePoolPop(v2);
}

void closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  Swift::String v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v46 = a2;
  v3 = type metadata accessor for ReliabilityCategory();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = a1;
  v11 = objc_msgSend(a1, sel_interaction);
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v15 = objc_allocWithZone(MEMORY[0x24BDD1620]);
  outlined copy of Data._Representation(v12, v14);
  v16 = v49;
  v17 = v14;
  v18 = specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)();
  v49 = v12;
  outlined consume of Data._Representation(v12, v17);
  if (v16)
  {
    v19 = v49;
    v20 = v17;
LABEL_3:
    outlined consume of Data._Representation(v19, v20);
    return;
  }
  v43 = v3;
  v44 = v17;
  v40 = v10;
  v41 = v6;
  v42 = v4;
  type metadata accessor for INInteraction();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = NSCoder.decodeObject<A>(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!v21)
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v22 = v7;
    v23 = __swift_project_value_buffer(v7, (uint64_t)static Logger.engagement);
    v39 = v8;
    v24 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v40, v23, v22);
    v47 = 0;
    v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(78);
    v25._object = (void *)0x8000000218FC11E0;
    v25._countAndFlagsBits = 0xD00000000000004CLL;
    String.append(_:)(v25);
    v26 = v45;
    v27 = objc_msgSend(v26, sel_description);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

    v31._countAndFlagsBits = v28;
    v31._object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32 = v47;
    v33 = v48;
    v34 = *MEMORY[0x24BEA8130];
    v35 = type metadata accessor for AppIntentEventDataIssues();
    v36 = (uint64_t)v41;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v41, v34, v35);
    v37 = v42;
    v38 = v43;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v42 + 104))(v36, *MEMORY[0x24BEA8000], v43);
    Logger.error(_:_:)(v32, v33, v36);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v22);
    lazy protocol witness table accessor for type UnarchiveError and conformance UnarchiveError();
    swift_allocError();
    swift_willThrow();

    v19 = v49;
    v20 = v44;
    goto LABEL_3;
  }
  outlined consume of Data._Representation(v49, v44);

  *v46 = v21;
}

uint64_t Utils.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t Utils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Utils.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t Utils.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x219A272D8](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t specialized static Utils.formulateIntentTypeName(intentTypeName:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  unint64_t v26;

  v4 = type metadata accessor for ReliabilityCategory();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1;
  v26 = (unint64_t)a2;
  v24[0] = 46;
  v24[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v8 = StringProtocol.components<A>(separatedBy:)();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + 16 * v9;
    v12 = *(_QWORD *)(v10 + 16);
    v11 = *(void **)(v10 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 20041;
    v13._object = (void *)0xE200000000000000;
    if (!String.hasPrefix(_:)(v13))
    {
      v25 = 20041;
      v26 = 0xE200000000000000;
      v14._countAndFlagsBits = v12;
      v14._object = v11;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      return v25;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.engagement);
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(109);
    v16._countAndFlagsBits = 0xD000000000000048;
    v16._object = (void *)0x8000000218FC1160;
    String.append(_:)(v16);
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    v18._object = (void *)0x8000000218FC11B0;
    v18._countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v18);
    v19 = v25;
    v20 = v26;
    v21 = *MEMORY[0x24BEA7EA8];
    v22 = type metadata accessor for SiriExecutionEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v7, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEA8020], v4);
    Logger.error(_:_:)(v19, v20, (uint64_t)v7);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0x6465737261706E55;
  }
  return v12;
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initForReadingFromData_error_, isa, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t specialized static Utils.normalizedAlarmIdentifier(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLQueryItem?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for URLQueryItem();
  v7 = *(_QWORD *)(v47 - 8);
  v8 = MEMORY[0x24BDAC7A8](v47);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v42 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v42 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a1;
  v44 = a2;
  URLComponents.init(string:)();
  v19 = type metadata accessor for URLComponents();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  v45 = v6;
  if (v21 == 1)
  {
    outlined destroy of Any?((uint64_t)v18, &demangling cache variable for type metadata for URLComponents?);
    v22 = v47;
LABEL_18:
    v36 = (uint64_t)v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v45, 1, 1, v22);
    goto LABEL_19;
  }
  v48 = v10;
  v42 = v15;
  v23 = URLComponents.queryItems.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  v22 = v47;
  if (!v23)
    goto LABEL_18;
  v25 = MEMORY[0x24BEE4AF8];
  v49 = MEMORY[0x24BEE4AF8];
  v46 = *(_QWORD *)(v23 + 16);
  if (!v46)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v25 + 16))
    {
      v36 = (uint64_t)v45;
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v45, v25 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v22);
      v37 = 0;
    }
    else
    {
      v37 = 1;
      v36 = (uint64_t)v45;
    }
    v38 = v42;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v36, v37, 1, v22);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v36, 1, v22) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v38, v36, v22);
      v39 = URLQueryItem.value.getter();
      v41 = v40;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v38, v22);
      if (v41)
        return v39;
LABEL_20:
      swift_bridgeObjectRetain();
      return v43;
    }
LABEL_19:
    outlined destroy of Any?(v36, &demangling cache variable for type metadata for URLQueryItem?);
    goto LABEL_20;
  }
  v26 = 0;
  while (v26 < *(_QWORD *)(v23 + 16))
  {
    v27 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v28 = *(_QWORD *)(v7 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v13, v23 + v27 + v28 * v26, v22);
    if (URLQueryItem.name.getter() == 25705 && v29 == 0xE200000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      v31 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v31(v48, v13, v22);
      v32 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
        v32 = v49;
      }
      v34 = *(_QWORD *)(v32 + 16);
      v33 = *(_QWORD *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v32 = v49;
      }
      *(_QWORD *)(v32 + 16) = v34 + 1;
      v35 = v32 + v27 + v34 * v28;
      v22 = v47;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(v35, v48, v47);
      v49 = v32;
      goto LABEL_7;
    }
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
      goto LABEL_13;
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v22);
LABEL_7:
    if (v46 == ++v26)
    {
      v25 = v49;
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type UnarchiveError and conformance UnarchiveError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError;
  if (!lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for UnarchiveError, &type metadata for UnarchiveError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError;
  if (!lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError)
  {
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnarchiveError and conformance UnarchiveError);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UnarchiveError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for UnarchiveError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_218F97094 + 4 * byte_218FBDFF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_218F970B4 + 4 * byte_218FBDFF5[v4]))();
}

_BYTE *sub_218F97094(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_218F970B4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_218F970BC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_218F970C4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_218F970CC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_218F970D4(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for UnarchiveError()
{
  return 0;
}

ValueMetadata *type metadata accessor for UnarchiveError()
{
  return &type metadata for UnarchiveError;
}

ValueMetadata *type metadata accessor for TaskMetricsConst()
{
  return &type metadata for TaskMetricsConst;
}

uint64_t type metadata accessor for Utils()
{
  return objc_opt_self();
}

uint64_t method lookup function for Utils()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static Utils.deltaTBetween(eventStart:siriUISession:duration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static Utils.formulateIntentTypeName(intentTypeName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static Utils.deriveEngagmentType(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static Utils.isDiagnosticsSubmissionAllowed()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static Utils.isFirstPartyAppDonation(bundleId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static Utils.extractInteraction(fromAppIntentEvent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of static Utils.normalizedAlarmIdentifier(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of Utils.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

unint64_t type metadata accessor for INInteraction()
{
  unint64_t result;

  result = lazy cache variable for type metadata for INInteraction;
  if (!lazy cache variable for type metadata for INInteraction)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INInteraction);
  }
  return result;
}

uint64_t UserDefaultsDomainProvider.lastCollectionDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  __int128 v48;
  __int128 v49;

  v2 = v1;
  v4 = type metadata accessor for Date();
  v45 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v42 - v8;
  Date.init(timeIntervalSinceNow:)();
  v10 = *(void **)(v1 + 16);
  if (v10)
  {
    swift_beginAccess();
    v11 = *(_QWORD *)(v2 + 40);
    v12 = *(_QWORD *)(v2 + 48);
    swift_bridgeObjectRetain();
    v13 = (void *)MEMORY[0x219A27218](v11, v12);
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v10, sel_valueForKey_, v13);

    if (v14)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v46, 0, sizeof(v46));
    }
    outlined init with take of Any?((uint64_t)v46, (uint64_t)&v48);
    if (*((_QWORD *)&v49 + 1))
    {
      outlined destroy of Any?((uint64_t)&v48);
      v15 = *(_QWORD *)(v2 + 40);
      v16 = *(_QWORD *)(v2 + 48);
      swift_bridgeObjectRetain();
      v17 = (void *)MEMORY[0x219A27218](v15, v16);
      swift_bridgeObjectRelease();
      objc_msgSend(v10, sel_doubleForKey_, v17);
      v19 = v18;

      if (one-time initialization token for engagement != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.engagement);
      swift_retain();
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = swift_slowAlloc();
        v43 = swift_slowAlloc();
        *(_QWORD *)&v48 = v43;
        *(_DWORD *)v23 = 136315394;
        v44 = a1;
        v24 = *(_QWORD *)(v2 + 40);
        v25 = *(_QWORD *)(v2 + 48);
        swift_bridgeObjectRetain();
        *(_QWORD *)&v46[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, (uint64_t *)&v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2048;
        *(_QWORD *)&v46[0] = v19;
        a1 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_218F54000, v21, v22, "The userdefault has key %s with the value %f", (uint8_t *)v23, 0x16u);
        v26 = v43;
        swift_arrayDestroy();
        MEMORY[0x219A27C8C](v26, -1, -1);
        MEMORY[0x219A27C8C](v23, -1, -1);

      }
      else
      {

        swift_release();
      }
      Date.init(timeIntervalSinceReferenceDate:)();
      lazy protocol witness table accessor for type Date and conformance Date();
      v37 = v4;
      v38 = dispatch thunk of static Comparable.>= infix(_:_:)();
      v39 = v45;
      if ((v38 & 1) != 0)
        v40 = v7;
      else
        v40 = v9;
      (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(a1, v40, v4);
      v41 = *(void (**)(char *, uint64_t))(v39 + 8);
      v41(v7, v37);
      return ((uint64_t (*)(char *, uint64_t))v41)(v9, v37);
    }
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v48);
  if (one-time initialization token for engagement != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.engagement);
  swift_retain();
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v43 = v4;
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    *(_QWORD *)&v46[0] = v31;
    v44 = a1;
    *(_DWORD *)v30 = 136315138;
    swift_beginAccess();
    v32 = v9;
    v34 = *(_QWORD *)(v2 + 40);
    v33 = *(_QWORD *)(v2 + 48);
    swift_bridgeObjectRetain();
    v35 = v34;
    v9 = v32;
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v33, (uint64_t *)v46);
    a1 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    v4 = v43;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_218F54000, v28, v29, "The userdefault contained no value for %s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x219A27C8C](v31, -1, -1);
    MEMORY[0x219A27C8C](v30, -1, -1);

  }
  else
  {

    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 32))(a1, v9, v4);
}

uint64_t UserDefaultsDomainProvider.__allocating_init(collectorIdentifier:domain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  UserDefaultsDomainProvider.init(collectorIdentifier:domain:)(a1, a2, a3, a4);
  return v8;
}

uint64_t UserDefaultsDomainProvider.lastCollectionDate.setter(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  double v6;
  double v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32[3];
  double v33;

  v3 = v1[4];
  v4 = v1[3] & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0)
    v4 = HIBYTE(v3) & 0xF;
  if (v4)
  {
    v5 = v1;
    Date.timeIntervalSinceReferenceDate.getter();
    v7 = v6;
    if (one-time initialization token for engagement != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.engagement);
    swift_retain();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      v12 = swift_slowAlloc();
      v32[0] = v12;
      *(_DWORD *)v11 = 136315394;
      swift_beginAccess();
      v13 = v1[5];
      v14 = v1[6];
      swift_bridgeObjectRetain();
      v33 = COERCE_DOUBLE(getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v32));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2048;
      v33 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_218F54000, v9, v10, "Set key %s to %f", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x219A27C8C](v12, -1, -1);
      MEMORY[0x219A27C8C](v11, -1, -1);

      v15 = (void *)v1[2];
      if (v15)
      {
LABEL_8:
        swift_beginAccess();
        v16 = v1[5];
        v17 = v5[6];
        v18 = v15;
        swift_bridgeObjectRetain();
        v19 = MEMORY[0x219A27218](v16, v17);
        swift_bridgeObjectRelease();
        objc_msgSend(v18, sel_setDouble_forKey_, v19, v7);

LABEL_18:
        v31 = type metadata accessor for Date();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
      }
    }
    else
    {

      swift_release();
      v15 = (void *)v1[2];
      if (v15)
        goto LABEL_8;
    }
    swift_retain_n();
    v19 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v33 = *(double *)&v28;
      *(_DWORD *)v27 = 136315138;
      swift_beginAccess();
      v29 = v5[5];
      v30 = v5[6];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_218F54000, v19, v26, "Fail to set key %s due to empty userdefaults", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x219A27C8C](v28, -1, -1);
      MEMORY[0x219A27C8C](v27, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    goto LABEL_18;
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.engagement);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_218F54000, v21, v22, "Skip userDefault set due to empty identifier", v23, 2u);
    MEMORY[0x219A27C8C](v23, -1, -1);
  }

  v24 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1, v24);
}

uint64_t UserDefaultsDomainProvider.userDefaultsKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UserDefaultsDomainProvider.userDefaultsKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*UserDefaultsDomainProvider.userDefaultsKey.modify())()
{
  swift_beginAccess();
  return NowPlayingSignalFactory.postEndDate.modify;
}

_QWORD *UserDefaultsDomainProvider.init(collectorIdentifier:domain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  id v10;
  void *v11;
  id v12;
  Swift::String v13;

  v5 = v4;
  v10 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v11 = (void *)MEMORY[0x219A27218](a3, a4);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v10, sel_initWithSuiteName_, v11);

  v5[2] = v12;
  v5[3] = a1;
  v5[4] = a2;
  swift_bridgeObjectRetain();
  v13._object = (void *)0x8000000218FC0390;
  v13._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v13);
  v5[5] = a1;
  v5[6] = a2;
  return v5;
}

uint64_t key path setter for UserDefaultsDomainProvider.lastCollectionDate : UserDefaultsDomainProvider(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return UserDefaultsDomainProvider.lastCollectionDate.setter((uint64_t)v4);
}

void (*UserDefaultsDomainProvider.lastCollectionDate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for Date();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)v7);
  return UserDefaultsDomainProvider.lastCollectionDate.modify;
}

void UserDefaultsDomainProvider.lastCollectionDate.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    UserDefaultsDomainProvider.lastCollectionDate.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    UserDefaultsDomainProvider.lastCollectionDate.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t UserDefaultsDomainProvider.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t UserDefaultsDomainProvider.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_218F98068@<X0>(uint64_t a1@<X8>)
{
  return UserDefaultsDomainProvider.lastCollectionDate.getter(a1);
}

uint64_t type metadata accessor for UserDefaultsDomainProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for UserDefaultsDomainProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UserDefaultsDomainProvider.__allocating_init(collectorIdentifier:domain:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

const char *IdentifyEntitySimilarityExample.musicPlayState.unsafeMutableAddressor()
{
  return "Playing";
}

uint64_t static IdentifyEntitySimilarityExample.musicPlayState.getter()
{
  return 0x676E6979616C50;
}

void static IdentifyEntitySimilarityExample.runIdentifyMusicEntitySimilarity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint8_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char v63;
  __int128 *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, unint64_t, NSObject *);
  uint64_t v111;
  Class isa;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  NSObject *v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v116 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  isa = v116[-1].isa;
  MEMORY[0x24BDAC7A8](v116);
  v115 = (char *)&v84 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v106 = (uint64_t)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v109 = (uint64_t)&v84 - v4;
  v114 = type metadata accessor for ProtoPlayMediaTaskFeatureSet();
  v90 = *(_QWORD *)(v114 - 8);
  MEMORY[0x24BDAC7A8](v114);
  v6 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for ProtoTaskFeatureSet();
  v89 = *(_QWORD *)(v113 - 8);
  MEMORY[0x24BDAC7A8](v113);
  v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for ProtoMediaEntitySignal();
  v104 = *(_QWORD *)(v108 - 8);
  v9 = MEMORY[0x24BDAC7A8](v108);
  v88 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v103 = (char *)&v84 - v11;
  v100 = type metadata accessor for ProtoTaskEngagementType();
  v99 = *(_QWORD *)(v100 - 8);
  v12 = MEMORY[0x24BDAC7A8](v100);
  v98 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v97 = (char *)&v84 - v14;
  v15 = type metadata accessor for ProtoSiriTaskEngagement();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = static SiriTaskEngagementRetriever.retrieveAllSiriTaskEngagement(streamId:)();
  if (v19)
  {
    v20 = v19;
    v96 = *(_QWORD *)(v19 + 16);
    if (v96)
    {
      v21 = 0;
      v95 = v19 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      v94 = *MEMORY[0x24BEA7E58];
      v87 = &v120;
      v91 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v101 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v102 = v18;
      v85 = v15;
      v93 = v16;
      v92 = v19;
      v86 = (__int128 *)&v118;
      while (v21 < *(_QWORD *)(v20 + 16))
      {
        v23 = *(_QWORD *)(v16 + 72);
        v105 = v21;
        (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v18, v95 + v23 * v21, v15);
        v24 = v97;
        ProtoSiriTaskEngagement.engagementType.getter();
        v25 = v15;
        v26 = v99;
        v27 = v98;
        v28 = v100;
        (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v98, v94, v100);
        lazy protocol witness table accessor for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType();
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        v29 = v119;
        v30 = v117;
        v31 = *(void (**)(char *, uint64_t))(v26 + 8);
        v31(v27, v28);
        v31(v24, v28);
        if (v29 == v30)
        {
          ProtoSiriTaskEngagement.siriTaskFeatureSet.getter();
          ProtoTaskFeatureSet.playMediaFeatureSet.getter();
          v32 = *(void (**)(char *, uint64_t))(v89 + 8);
          v33 = v113;
          v32(v8, v113);
          ProtoPlayMediaTaskFeatureSet.mediaEntity.getter();
          v34 = *(void (**)(char *, uint64_t))(v90 + 8);
          v35 = v114;
          v34(v6, v114);
          ProtoSiriTaskEngagement.siriTaskFeatureSet.getter();
          ProtoTaskFeatureSet.playMediaFeatureSet.getter();
          v32(v8, v33);
          ProtoPlayMediaTaskFeatureSet.playDurationInSec.getter();
          v37 = v36;
          v34(v6, v35);
          v107 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v104 + 56);
          v107(v109, 1, 1, v108);
          v38 = *(_QWORD *)(ProtoSiriTaskEngagement.followupUserInitatedEngagements.getter() + 16);
          swift_bridgeObjectRelease();
          if (v38)
          {
            v39 = ProtoSiriTaskEngagement.followupUserInitatedEngagements.getter();
            v40 = *(_QWORD *)(v39 + 16);
            if (v40)
            {
              v41 = (*((unsigned __int8 *)isa + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)isa + 80);
              v84 = v39;
              v42 = v39 + v41;
              v43 = *((_QWORD *)isa + 9);
              v110 = (void (*)(char *, unint64_t, NSObject *))*((_QWORD *)isa + 2);
              v111 = v43;
              v110(v115, v39 + v41, v116);
              while (1)
              {
                ProtoTaskEngagementFeatureSet.featureSet.getter();
                ProtoTaskFeatureSet.playMediaFeatureSet.getter();
                v32(v8, v113);
                v44 = ProtoPlayMediaTaskFeatureSet.actionState.getter();
                v46 = v45;
                v34(v6, v114);
                if (v44 == 0x676E6979616C50 && v46 == 0xE700000000000000)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v47 & 1) == 0)
                  {
                    (*((void (**)(char *, NSObject *))isa + 1))(v115, v116);
                    goto LABEL_12;
                  }
                }
                v48 = v115;
                ProtoTaskEngagementFeatureSet.featureSet.getter();
                ProtoTaskFeatureSet.playMediaFeatureSet.getter();
                v32(v8, v113);
                v49 = v106;
                ProtoPlayMediaTaskFeatureSet.mediaEntity.getter();
                v34(v6, v114);
                (*((void (**)(char *, NSObject *))isa + 1))(v48, v116);
                v50 = v109;
                outlined destroy of Any?(v109, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
                v107(v49, 0, 1, v108);
                outlined init with take of ProtoMediaEntitySignal?(v49, v50);
LABEL_12:
                v42 += v111;
                if (!--v40)
                  break;
                v110(v115, v42, v116);
              }
            }
            swift_bridgeObjectRelease();
            v22 = v105;
          }
          else
          {
            if (one-time initialization token for engagement != -1)
              swift_once();
            v51 = type metadata accessor for Logger();
            __swift_project_value_buffer(v51, (uint64_t)static Logger.engagement);
            v52 = Logger.logObject.getter();
            v53 = static os_log_type_t.debug.getter();
            v54 = os_log_type_enabled(v52, v53);
            v22 = v105;
            if (v54)
            {
              v55 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v55 = 0;
              _os_log_impl(&dword_218F54000, v52, v53, "No user followups", v55, 2u);
              MEMORY[0x219A27C8C](v55, -1, -1);
            }

          }
          v56 = v104;
          v57 = v88;
          v58 = v108;
          (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v88, v103, v108);
          v59 = v106;
          outlined init with copy of Date?(v109, v106, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
          type metadata accessor for MusicEntitySimilarity(0);
          v60 = swift_allocObject();
          v61 = v60 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity;
          v107(v60 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity, 1, 1, v58);
          (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v60 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, v57, v58);
          swift_beginAccess();
          outlined assign with take of ProtoMediaEntitySignal?(v59, v61, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
          swift_endAccess();
          *(_QWORD *)(v60 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_playDuration) = v37;
          v62 = v87;
          v63 = MusicEntitySimilarity.compare()(v87);
          LOBYTE(v119) = v63 & 1;
          LOBYTE(v117) = v63 & 1;
          v64 = v86;
          outlined init with copy of EntitySimilarity((uint64_t)v62, (uint64_t)v86);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v64);
          if ((v63 & 1) != 0)
          {
            LOBYTE(v117) = v63 & 1;
            outlined init with copy of EntitySimilarity((uint64_t)v62, (uint64_t)v64);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v91[2] + 1, 1, v91);
            v15 = v85;
            v16 = v93;
            v20 = v92;
            v66 = v91[2];
            v65 = v91[3];
            v67 = v66 + 1;
            if (v66 >= v65 >> 1)
              v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v65 > 1), v66 + 1, 1, v91);
            v68 = &v119;
          }
          else
          {
            LOBYTE(v117) = v63 & 1;
            outlined init with copy of EntitySimilarity((uint64_t)v62, (uint64_t)v64);
            v69 = v101;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
            v15 = v85;
            v16 = v93;
            v20 = v92;
            v70 = v69;
            v66 = v69[2];
            v101 = v70;
            v71 = v70[3];
            v67 = v66 + 1;
            if (v66 >= v71 >> 1)
              v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v71 > 1), v66 + 1, 1, v101);
            v68 = &v123;
          }
          v72 = *(v68 - 32);
          *(_QWORD *)(v72 + 16) = v67;
          outlined init with take of EntitySimilarity(v64, v72 + 40 * v66 + 32);
          swift_release();
          outlined destroy of Any?((uint64_t)&v119, &demangling cache variable for type metadata for (Bool, EntitySimilarity));
          outlined destroy of Any?(v109, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
          (*(void (**)(char *, uint64_t))(v104 + 8))(v103, v108);
          v18 = v102;
          (*(void (**)(char *, uint64_t))(v16 + 8))(v102, v15);
        }
        else
        {
          v16 = v93;
          v18 = v102;
          (*(void (**)(char *, uint64_t))(v93 + 8))(v102, v25);
          v15 = v25;
          v20 = v92;
          v22 = v105;
        }
        v21 = v22 + 1;
        if (v21 == v96)
        {
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      v91 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v101 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_44:
      if (one-time initialization token for engagement == -1)
        goto LABEL_45;
    }
    swift_once();
LABEL_45:
    v76 = type metadata accessor for Logger();
    __swift_project_value_buffer(v76, (uint64_t)static Logger.engagement);
    v77 = Logger.logObject.getter();
    v78 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v77, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v79 = 0;
      _os_log_impl(&dword_218F54000, v77, v78, "\n\n\n ======== Bad Music Entity Match ========\n\n", v79, 2u);
      MEMORY[0x219A27C8C](v79, -1, -1);
    }

    v80 = v101[2];
    if (v80)
    {
      v81 = v101 + 4;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of EntitySimilarity((uint64_t)v81, (uint64_t)&v119);
        v82 = v121;
        v83 = v122;
        __swift_project_boxed_opaque_existential_1(&v119, v121);
        (*(void (**)(uint64_t, uint64_t))(v83 + 72))(v82, v83);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v119);
        v81 += 5;
        --v80;
      }
      while (v80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return;
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v73 = type metadata accessor for Logger();
  __swift_project_value_buffer(v73, (uint64_t)static Logger.engagement);
  v116 = Logger.logObject.getter();
  v74 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v116, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v75 = 0;
    _os_log_impl(&dword_218F54000, v116, v74, "Failed to retrieve engagement features", v75, 2u);
    MEMORY[0x219A27C8C](v75, -1, -1);
  }

}

uint64_t MusicEntitySimilarity.__allocating_init(siri:playDuration:userFollowup:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = swift_allocObject();
  v7 = v6 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity;
  v8 = type metadata accessor for ProtoMediaEntitySignal();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, a1, v8);
  swift_beginAccess();
  outlined assign with take of ProtoMediaEntitySignal?(a2, v7, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  swift_endAccess();
  *(double *)(v6 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_playDuration) = a3;
  return v6;
}

uint64_t IdentifyEntitySimilarityExample.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t IdentifyEntitySimilarityExample.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t IdentifyEntitySimilarityExample.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t IdentifyEntitySimilarityExample.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t MusicEntitySimilarity.siriChosenEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return MusicEntitySimilarity.siriChosenEntity.getter(&OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, (uint64_t (*)(_QWORD))MEMORY[0x24BEA80C0], a1);
}

uint64_t MusicEntitySimilarity.siriChosenEntity.setter(uint64_t a1)
{
  return MusicEntitySimilarity.siriChosenEntity.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, (uint64_t (*)(_QWORD))MEMORY[0x24BEA80C0]);
}

uint64_t (*MusicEntitySimilarity.siriChosenEntity.modify())()
{
  swift_beginAccess();
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t MusicEntitySimilarity.userFollowupEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return MusicEntitySimilarity.userFollowupEntity.getter(&OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoMediaEntitySignal?, a1);
}

uint64_t MusicEntitySimilarity.userFollowupEntity.setter(uint64_t a1)
{
  return MusicEntitySimilarity.userFollowupEntity.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
}

uint64_t (*MusicEntitySimilarity.userFollowupEntity.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

double MusicEntitySimilarity.playDuration.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_playDuration;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t MusicEntitySimilarity.playDuration.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_playDuration);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*MusicEntitySimilarity.playDuration.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t MusicEntitySimilarity.init(siri:playDuration:userFollowup:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = v3 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity;
  v8 = type metadata accessor for ProtoMediaEntitySignal();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v3 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, a1, v8);
  swift_beginAccess();
  outlined assign with take of ProtoMediaEntitySignal?(a2, v7, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  swift_endAccess();
  *(double *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_playDuration) = a3;
  return v3;
}

uint64_t MusicEntitySimilarity.compare()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char v21;
  uint64_t v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProtoMediaEntitySignal();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v23 - v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
LABEL_9:
    a1[3] = type metadata accessor for MusicEntitySimilarity(0);
    a1[4] = &protocol witness table for MusicEntitySimilarity;
    *a1 = v1;
    swift_retain();
    return 0;
  }
  v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v13, v5, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 104))(v14);
  v15 = ProtoMediaEntitySignal.adamIdentifier.getter();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v6);
  if (v15 == ProtoMediaEntitySignal.adamIdentifier.getter() && v17 == v19)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      v18(v13, v6);
      goto LABEL_9;
    }
  }
  a1[3] = type metadata accessor for MusicEntitySimilarity(0);
  a1[4] = &protocol witness table for MusicEntitySimilarity;
  *a1 = v1;
  swift_retain();
  v18(v13, v6);
  return 1;
}

Swift::Void __swiftcall MusicEntitySimilarity.print()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  os_log_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  os_log_t v58;
  char *v59;
  int v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ProtoMediaEntitySignal();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v57 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v57 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v57 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v57 - v20;
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 128))(v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v21, v4, v5);
    v22 = v21;
    if (one-time initialization token for engagement != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.engagement);
    v24 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    swift_retain_n();
    v63 = v18;
    v24(v18, v22, v5);
    v64 = v15;
    v24(v15, v22, v5);
    v24(v12, v22, v5);
    swift_retain_n();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc();
      v59 = v12;
      v29 = v28;
      v30 = swift_slowAlloc();
      v62 = v30;
      v66 = v30;
      *(_DWORD *)v29 = 136316674;
      v57 = v29 + 4;
      v58 = v25;
      v31 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 104);
      v60 = v27;
      v31(v30);
      v32 = ProtoMediaEntitySignal.title.getter();
      v34 = v33;
      v35 = *(void (**)(char *, uint64_t))(v6 + 8);
      v35(v9, v5);
      v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v66);
      v61 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      v36 = swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      v31(v36);
      v37 = ProtoMediaEntitySignal.album.getter();
      v39 = v38;
      v35(v9, v5);
      v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      v40 = swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2080;
      v31(v40);
      v41 = ProtoMediaEntitySignal.artist.getter();
      v43 = v42;
      v35(v9, v5);
      v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      v44 = swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 32) = 2048;
      v65 = (*(double (**)(uint64_t))(*(_QWORD *)v1 + 152))(v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      *(_WORD *)(v29 + 42) = 2080;
      v45 = v63;
      v46 = ProtoMediaEntitySignal.title.getter();
      v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v35(v45, v5);
      *(_WORD *)(v29 + 52) = 2080;
      v48 = v64;
      v49 = ProtoMediaEntitySignal.album.getter();
      v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v35(v48, v5);
      *(_WORD *)(v29 + 62) = 2080;
      v51 = v59;
      v52 = ProtoMediaEntitySignal.artist.getter();
      v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v35(v51, v5);
      v54 = v58;
      _os_log_impl(&dword_218F54000, v58, (os_log_type_t)v60, "\n Siri Played => Title: %s, Album: %s, Artist: %s ------------- Played %f seconds\n User Played in followup => Title: %s, Album: %s, Artist: %s\n\n ", (uint8_t *)v29, 0x48u);
      v55 = v62;
      swift_arrayDestroy();
      MEMORY[0x219A27C8C](v55, -1, -1);
      MEMORY[0x219A27C8C](v29, -1, -1);

      v35(v61, v5);
    }
    else
    {

      v56 = *(void (**)(char *, uint64_t))(v6 + 8);
      v56(v12, v5);
      v56(v64, v5);
      v56(v63, v5);
      swift_release_n();
      v56(v22, v5);
    }
  }
}

uint64_t MusicEntitySimilarity.deinit()
{
  return MusicEntitySimilarity.deinit(&OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, (uint64_t (*)(_QWORD))MEMORY[0x24BEA80C0], &OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
}

uint64_t MusicEntitySimilarity.__deallocating_deinit()
{
  return MusicEntitySimilarity.__deallocating_deinit(&OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_siriChosenEntity, (uint64_t (*)(_QWORD))MEMORY[0x24BEA80C0], &OBJC_IVAR____TtC18PostSiriEngagement21MusicEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
}

uint64_t protocol witness for EntitySimilarity.siriChosenEntity.getter in conformance MusicEntitySimilarity()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t protocol witness for EntitySimilarity.siriChosenEntity.setter in conformance MusicEntitySimilarity()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t (*protocol witness for EntitySimilarity.siriChosenEntity.modify in conformance MusicEntitySimilarity(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 120))();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t protocol witness for EntitySimilarity.userFollowupEntity.getter in conformance MusicEntitySimilarity()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t protocol witness for EntitySimilarity.userFollowupEntity.setter in conformance MusicEntitySimilarity()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t (*protocol witness for EntitySimilarity.userFollowupEntity.modify in conformance MusicEntitySimilarity(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 144))();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t protocol witness for EntitySimilarity.compare() in conformance MusicEntitySimilarity()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))() & 1;
}

uint64_t protocol witness for EntitySimilarity.print() in conformance MusicEntitySimilarity()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t key path setter for MusicEntitySimilarity.siriChosenEntity : MusicEntitySimilarity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  a5(0);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v11 - v7, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 112))(v8);
}

uint64_t PhoneCallEntitySimilarity.siriChosenEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return MusicEntitySimilarity.siriChosenEntity.getter(&OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, (uint64_t (*)(_QWORD))MEMORY[0x24BEA8170], a1);
}

uint64_t MusicEntitySimilarity.siriChosenEntity.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *a1;
  swift_beginAccess();
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v6, v7);
}

uint64_t PhoneCallEntitySimilarity.siriChosenEntity.setter(uint64_t a1)
{
  return MusicEntitySimilarity.siriChosenEntity.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, (uint64_t (*)(_QWORD))MEMORY[0x24BEA8170]);
}

uint64_t MusicEntitySimilarity.siriChosenEntity.setter(uint64_t a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *a2;
  swift_beginAccess();
  v7 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v6, a1, v7);
  return swift_endAccess();
}

uint64_t (*PhoneCallEntitySimilarity.siriChosenEntity.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t key path setter for MusicEntitySimilarity.userFollowupEntity : MusicEntitySimilarity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Date?(a1, (uint64_t)v10, a5);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 136))(v10);
}

uint64_t PhoneCallEntitySimilarity.userFollowupEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return MusicEntitySimilarity.userFollowupEntity.getter(&OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoContactEntitySignal?, a1);
}

uint64_t MusicEntitySimilarity.userFollowupEntity.getter@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of Date?(v6, a3, a2);
}

uint64_t PhoneCallEntitySimilarity.userFollowupEntity.setter(uint64_t a1)
{
  return MusicEntitySimilarity.userFollowupEntity.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
}

uint64_t MusicEntitySimilarity.userFollowupEntity.setter(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of ProtoMediaEntitySignal?(a1, v6, a3);
  return swift_endAccess();
}

uint64_t (*PhoneCallEntitySimilarity.userFollowupEntity.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

double PhoneCallEntitySimilarity.callDuration.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_callDuration;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t PhoneCallEntitySimilarity.callDuration.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_callDuration);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*PhoneCallEntitySimilarity.callDuration.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t PhoneCallEntitySimilarity.__allocating_init(siri:callDuration:userFollowup:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = swift_allocObject();
  v7 = v6 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity;
  v8 = type metadata accessor for ProtoContactEntitySignal();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, a1, v8);
  swift_beginAccess();
  outlined assign with take of ProtoMediaEntitySignal?(a2, v7, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
  swift_endAccess();
  *(double *)(v6 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_callDuration) = a3;
  return v6;
}

uint64_t PhoneCallEntitySimilarity.init(siri:callDuration:userFollowup:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = v3 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity;
  v8 = type metadata accessor for ProtoContactEntitySignal();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v3 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, a1, v8);
  swift_beginAccess();
  outlined assign with take of ProtoMediaEntitySignal?(a2, v7, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
  swift_endAccess();
  *(double *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_callDuration) = a3;
  return v3;
}

uint64_t PhoneCallEntitySimilarity.compare()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  void (*v33)(uint64_t);

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoContactEntitySignal?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProtoContactEntitySignal();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v32 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v32 - v15;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v16, v5, v6);
    v33 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 104);
    v33(v17);
    v18 = ProtoContactEntitySignal.givenName.getter();
    v20 = v19;
    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v13, v6);
    if (v18 == ProtoContactEntitySignal.givenName.getter() && v20 == v22)
    {
      v25 = swift_bridgeObjectRelease_n();
    }
    else
    {
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v25 = swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
        goto LABEL_15;
    }
    v33(v25);
    v26 = ProtoContactEntitySignal.familyName.getter();
    v28 = v27;
    v21(v10, v6);
    if (v26 == ProtoContactEntitySignal.familyName.getter() && v28 == v29)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0)
      {
LABEL_15:
        v21(v16, v6);
        goto LABEL_16;
      }
    }
    a1[3] = type metadata accessor for PhoneCallEntitySimilarity(0);
    a1[4] = &protocol witness table for PhoneCallEntitySimilarity;
    *a1 = v1;
    swift_retain();
    v21(v16, v6);
    return 1;
  }
  outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
LABEL_16:
  a1[3] = type metadata accessor for PhoneCallEntitySimilarity(0);
  a1[4] = &protocol witness table for PhoneCallEntitySimilarity;
  *a1 = v1;
  swift_retain();
  return 0;
}

Swift::Void __swiftcall PhoneCallEntitySimilarity.print()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  os_log_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  _QWORD v45[3];
  void (*v46)(char *, uint64_t);
  char *v47;
  int v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoContactEntitySignal?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ProtoContactEntitySignal();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v45 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v45 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v45 - v17;
  (*(void (**)(uint64_t))(*v0 + 128))(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v18, v4, v5);
    if (one-time initialization token for engagement != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.engagement);
    v20 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v20(v15, v18, v5);
    v20(v12, v18, v5);
    swift_retain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      v24 = swift_slowAlloc();
      v50 = swift_slowAlloc();
      v52 = v50;
      *(_DWORD *)v24 = 136316162;
      v45[1] = v24 + 4;
      v25 = *v1;
      v47 = v12;
      v26 = *(void (**)(void))(v25 + 104);
      v49 = v21;
      v26();
      v27 = ProtoContactEntitySignal.givenName.getter();
      v48 = v23;
      v29 = v28;
      v46 = *(void (**)(char *, uint64_t))(v6 + 8);
      v46(v9, v5);
      v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v52);
      v45[2] = &v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      v30 = swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      ((void (*)(uint64_t))v26)(v30);
      v31 = ProtoContactEntitySignal.familyName.getter();
      v33 = v32;
      v34 = v9;
      v35 = v46;
      v46(v34, v5);
      v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      v36 = swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 22) = 2048;
      v51 = (*(double (**)(uint64_t))(*v1 + 152))(v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      *(_WORD *)(v24 + 32) = 2080;
      v37 = ProtoContactEntitySignal.givenName.getter();
      v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v35(v15, v5);
      *(_WORD *)(v24 + 42) = 2080;
      v39 = v47;
      v40 = ProtoContactEntitySignal.givenName.getter();
      v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v35(v39, v5);
      v42 = v49;
      _os_log_impl(&dword_218F54000, v49, (os_log_type_t)v48, "\n Siri Called => First name: %s, Last name: %s,  ------------- CallDuration %f seconds\n User Called in followup => First name: %s, Last name: %s\n\n ", (uint8_t *)v24, 0x34u);
      v43 = v50;
      swift_arrayDestroy();
      MEMORY[0x219A27C8C](v43, -1, -1);
      MEMORY[0x219A27C8C](v24, -1, -1);

      v35(v18, v5);
    }
    else
    {

      v44 = *(void (**)(char *, uint64_t))(v6 + 8);
      v44(v12, v5);
      v44(v15, v5);
      swift_release_n();
      v44(v18, v5);
    }
  }
}

uint64_t PhoneCallEntitySimilarity.deinit()
{
  return MusicEntitySimilarity.deinit(&OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, (uint64_t (*)(_QWORD))MEMORY[0x24BEA8170], &OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
}

uint64_t MusicEntitySimilarity.deinit(_QWORD *a1, uint64_t (*a2)(_QWORD), _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = v4 + *a1;
  v8 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  outlined destroy of Any?(v4 + *a3, a4);
  return v4;
}

uint64_t PhoneCallEntitySimilarity.__deallocating_deinit()
{
  return MusicEntitySimilarity.__deallocating_deinit(&OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_siriChosenEntity, (uint64_t (*)(_QWORD))MEMORY[0x24BEA8170], &OBJC_IVAR____TtC18PostSiriEngagement25PhoneCallEntitySimilarity_userFollowupEntity, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
}

uint64_t MusicEntitySimilarity.__deallocating_deinit(_QWORD *a1, uint64_t (*a2)(_QWORD), _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = v4 + *a1;
  v8 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  outlined destroy of Any?(v4 + *a3, a4);
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType;
  if (!lazy protocol witness table cache variable for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType)
  {
    v1 = type metadata accessor for ProtoTaskEngagementType();
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEA7E80], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType);
  }
  return result;
}

uint64_t outlined init with copy of EntitySimilarity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for MusicEntitySimilarity(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for MusicEntitySimilarity);
}

uint64_t outlined init with take of EntitySimilarity(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with take of ProtoMediaEntitySignal?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoMediaEntitySignal?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ProtoMediaEntitySignal?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for PhoneCallEntitySimilarity(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for PhoneCallEntitySimilarity);
}

uint64_t sub_218F9AB24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 104))();
}

uint64_t sub_218F9AB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MusicEntitySimilarity.siriChosenEntity : MusicEntitySimilarity(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x24BEA80C0]);
}

uint64_t sub_218F9AB68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
}

uint64_t sub_218F9AB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MusicEntitySimilarity.userFollowupEntity : MusicEntitySimilarity(a1, a2, a3, a4, &demangling cache variable for type metadata for ProtoMediaEntitySignal?);
}

void sub_218F9ABAC(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))(**(_QWORD **)a1 + 152))();
}

uint64_t sub_218F9ABDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MusicEntitySimilarity.siriChosenEntity : MusicEntitySimilarity(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x24BEA8170]);
}

uint64_t sub_218F9ABF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MusicEntitySimilarity.userFollowupEntity : MusicEntitySimilarity(a1, a2, a3, a4, &demangling cache variable for type metadata for ProtoContactEntitySignal?);
}

uint64_t sub_218F9AC14(double *a1, uint64_t a2)
{
  return (*(uint64_t (**)(double))(**(_QWORD **)a2 + 160))(*a1);
}

uint64_t type metadata accessor for IdentifyEntitySimilarityExample()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentifyEntitySimilarityExample()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentifyEntitySimilarityExample.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t ObjC metadata update function for MusicEntitySimilarity()
{
  return type metadata accessor for MusicEntitySimilarity(0);
}

void type metadata completion function for MusicEntitySimilarity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for MusicEntitySimilarity(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BEA80C0], &lazy cache variable for type metadata for ProtoMediaEntitySignal?);
}

uint64_t method lookup function for MusicEntitySimilarity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MusicEntitySimilarity.siriChosenEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.siriChosenEntity.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.siriChosenEntity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.userFollowupEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.userFollowupEntity.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.userFollowupEntity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.playDuration.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.playDuration.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.playDuration.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.__allocating_init(siri:playDuration:userFollowup:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.compare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MusicEntitySimilarity.print()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t ObjC metadata update function for PhoneCallEntitySimilarity()
{
  return type metadata accessor for PhoneCallEntitySimilarity(0);
}

void type metadata completion function for PhoneCallEntitySimilarity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for MusicEntitySimilarity(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BEA8170], &lazy cache variable for type metadata for ProtoContactEntitySignal?);
}

void type metadata completion function for MusicEntitySimilarity(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), unint64_t *a5)
{
  unint64_t v7;
  unint64_t v8;

  a4(319);
  if (v7 <= 0x3F)
  {
    type metadata accessor for ProtoMediaEntitySignal?(319, a5, a4);
    if (v8 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PhoneCallEntitySimilarity()
{
  return swift_lookUpClassMethod();
}

void type metadata accessor for ProtoMediaEntitySignal?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t HomeKitAccessoryControlSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  id v20;
  id v21;
  char v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[2];
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = MEMORY[0x24BEE4B00];
  type metadata accessor for Utils();
  Date.init(timeIntervalSinceReferenceDate:)();
  v7 = type metadata accessor for Date();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v6, a2, (uint64_t)&v86, 0.0);
  outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for Date?);
  v8 = v86;
  v9 = v87;
  v10 = v88;
  v11 = v89;
  v12 = v90;
  v13 = objc_msgSend(a1, sel_accessoryUniqueIdentifier);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v88 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v86 = v14;
  *((_QWORD *)&v86 + 1) = v16;
  outlined init with take of Any(&v86, v85);
  v17 = v91;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v84 = v17;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0xD000000000000019, 0x8000000218FBFDE0, isUniquelyReferenced_nonNull_native);
  v19 = v84;
  v91 = v84;
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(a1, sel_accessoryStateNumber);
  v83 = v11;
  HIDWORD(v82) = v12;
  if (v20)
  {
    v21 = v20;
    v88 = type metadata accessor for NSNumber();
    *(_QWORD *)&v86 = v21;
    outlined init with take of Any(&v86, v85);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v84 = v19;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0xD000000000000014, 0x8000000218FBFE20, v22);
    v23 = v84;
    v91 = v84;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000014, 0x8000000218FBFE20, &v86);
    outlined destroy of Any?((uint64_t)&v86, &demangling cache variable for type metadata for Any?);
    v23 = v91;
  }
  v24 = objc_msgSend(a1, sel_characteristicType);
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v26;

  v28 = MEMORY[0x24BEE0D00];
  v88 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v86 = v25;
  *((_QWORD *)&v86 + 1) = v27;
  outlined init with take of Any(&v86, v85);
  v29 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v23;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0xD000000000000012, 0x8000000218FBFE00, v29);
  v30 = v84;
  swift_bridgeObjectRelease();
  v31 = objc_msgSend(a1, sel_base);
  v32 = objc_msgSend(v31, sel_source);

  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v35 = v34;

  v88 = v28;
  *(_QWORD *)&v86 = v33;
  *((_QWORD *)&v86 + 1) = v35;
  outlined init with take of Any(&v86, v85);
  v36 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v30;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0x656372756F73, 0xE600000000000000, v36);
  v37 = v84;
  swift_bridgeObjectRelease();
  v38 = objc_msgSend(a1, sel_base);
  v39 = objc_msgSend(v38, sel_clientName);

  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v42 = v41;

  v88 = v28;
  *(_QWORD *)&v86 = v40;
  *((_QWORD *)&v86 + 1) = v42;
  outlined init with take of Any(&v86, v85);
  v43 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v37;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0x614E746E65696C63, 0xEA0000000000656DLL, v43);
  v91 = v84;
  swift_bridgeObjectRelease();
  v44 = objc_msgSend(a1, sel_base);
  v45 = objc_msgSend(v44, sel_source);

  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v48 = v47;

  if (v46 == 1769105747 && v48 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v49 = 1;
  }
  else
  {
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v49 = v50 & 1;
  }
  v51 = MEMORY[0x24BEE1328];
  v88 = MEMORY[0x24BEE1328];
  LOBYTE(v86) = v49;
  outlined init with take of Any(&v86, v85);
  v52 = v91;
  v53 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v52;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0x42646574616E6F64, 0xED00006972695379, v53);
  v91 = v84;
  swift_bridgeObjectRelease();
  v54 = objc_msgSend(a1, sel_base);
  v55 = objc_msgSend(v54, sel_source);

  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v58 = v57;

  if (v56 == 0x7261506472696854 && v58 == 0xEA00000000007974)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0)
    {
      v60 = 1;
      goto LABEL_14;
    }
  }
  v60 = 0;
LABEL_14:
  v88 = v51;
  LOBYTE(v86) = v60;
  outlined init with take of Any(&v86, v85);
  v61 = v91;
  v62 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v61;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0xD000000000000016, 0x8000000218FBF020, v62);
  v63 = v84;
  swift_bridgeObjectRelease();
  v64 = objc_msgSend(a1, sel_roomUniqueIdentifier);
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v67 = v66;

  v68 = MEMORY[0x24BEE0D00];
  v88 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v86 = v65;
  *((_QWORD *)&v86 + 1) = v67;
  outlined init with take of Any(&v86, v85);
  v69 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v63;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0xD000000000000014, 0x8000000218FBFE60, v69);
  v70 = v84;
  swift_bridgeObjectRelease();
  v71 = objc_msgSend(a1, sel_zoneUniqueIdentifiers);
  v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)&v86 = v72;
  outlined init with take of Any(&v86, v85);
  v73 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v70;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0xD000000000000015, 0x8000000218FBFE80, v73);
  v74 = v84;
  swift_bridgeObjectRelease();
  v75 = objc_msgSend(a1, sel_serviceType);
  v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v78 = v77;

  v88 = v68;
  *(_QWORD *)&v86 = v76;
  *((_QWORD *)&v86 + 1) = v78;
  outlined init with take of Any(&v86, v85);
  v79 = swift_isUniquelyReferenced_nonNull_native();
  v84 = v74;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v85, 0x5465636976726573, 0xEB00000000657079, v79);
  v80 = v84;
  swift_bridgeObjectRelease();
  type metadata accessor for Signal();
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = v8;
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v10;
  *(_QWORD *)(result + 48) = v83;
  *(_BYTE *)(result + 56) = BYTE4(v82);
  strcpy((char *)(result + 64), "HomeAutomation");
  *(_BYTE *)(result + 79) = -18;
  *(_QWORD *)(result + 80) = 0x486C6F72746E6F43;
  *(_QWORD *)(result + 88) = 0xEB00000000656D6FLL;
  *(_BYTE *)(result + 96) = 1;
  *(_QWORD *)(result + 104) = v80;
  return result;
}

uint64_t HomeKitAccessoryControlSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  _QWORD *v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int64_t v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  _QWORD *v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  id v125;
  id v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  uint64_t v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  unint64_t v141;
  uint64_t v142;
  _BOOL8 v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  char v147;
  uint64_t v148;
  _QWORD *v149;
  char v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  int64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  unint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  id v177;
  unint64_t v178;
  char v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  id v184;
  void *v185;
  _QWORD *v186;
  unint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t (*v193)(double);
  int v194;
  double *v195;
  double v196;
  id v197;
  uint64_t v198;
  uint64_t result;
  _QWORD *v200;
  _QWORD *v201;
  int64_t v202;
  _QWORD *v203;
  uint64_t v204;
  int64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  int64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  _QWORD *v221;
  uint64_t v222;
  __int128 v223;
  int64_t v224;
  char *v225;
  __int128 v226;
  __int128 v227;
  _QWORD *v228;
  uint64_t v229;

  v209 = a2;
  v201 = a3;
  v216 = type metadata accessor for ReliabilityCategory();
  v215 = *(_QWORD *)(v216 - 8);
  MEMORY[0x24BDAC7A8](v216);
  v214 = (char *)&v201 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = 0;
  v213 = type metadata accessor for Logger();
  v212 = *(_QWORD *)(v213 - 8);
  MEMORY[0x24BDAC7A8](v213);
  v211 = (char *)&v201 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = MEMORY[0x24BEE4AF8];
  v6 = (_QWORD *)MEMORY[0x24BEE4B00];
  v228 = (_QWORD *)MEMORY[0x24BEE4B00];
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    *(_QWORD *)&v226 = a1;
    v9 = (uint64_t *)(a1 + 40);
    v227 = xmmword_218FBDA00;
    do
    {
      v11 = *v9;
      v12 = (id)*(v9 - 1);
      v13 = objc_msgSend(v12, sel_accessoryUniqueIdentifier);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v15;

      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v16);
      v19 = v8[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
        goto LABEL_211;
      v22 = v17;
      if (v8[3] < v21)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, 1);
        v8 = v228;
        v23 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v16);
        if ((v22 & 1) != (v24 & 1))
          goto LABEL_219;
        v18 = v23;
      }
      if ((v22 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v25 = v8[7];
        v26 = *(_QWORD **)(v25 + 8 * v18);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v25 + 8 * v18) = v26;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
          *(_QWORD *)(v25 + 8 * v18) = v26;
        }
        v29 = v26[2];
        v28 = v26[3];
        if (v29 >= v28 >> 1)
        {
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v26);
          *(_QWORD *)(v25 + 8 * v18) = v26;
        }
        v26[2] = v29 + 1;
        v10 = &v26[2 * v29];
        v10[4] = v12;
        v10[5] = v11;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedHomeKitClientAccessoryEvent>);
        v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = v227;
        *(_QWORD *)(v30 + 32) = v12;
        *(_QWORD *)(v30 + 40) = v11;
        v8[(v18 >> 6) + 8] |= 1 << v18;
        v31 = (uint64_t *)(v8[6] + 16 * v18);
        *v31 = v14;
        v31[1] = v16;
        *(_QWORD *)(v8[7] + 8 * v18) = v30;
        v32 = v8[2];
        v33 = __OFADD__(v32, 1);
        v34 = v32 + 1;
        if (v33)
          goto LABEL_213;
        v8[2] = v34;
      }
      v9 += 2;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    v6 = v8;
  }
  v35 = v6 + 8;
  v36 = 1 << *((_BYTE *)v6 + 32);
  if (v36 < 64)
    v37 = ~(-1 << v36);
  else
    v37 = -1;
  v38 = v37 & v6[8];
  v39 = (unint64_t)(v36 + 63) >> 6;
  swift_retain();
  v40 = 0;
  v225 = "ity";
  *(_QWORD *)&v223 = 0x8000000218FC13A0;
  v226 = xmmword_218FBDA00;
  v220 = "00-8000-0026BB765291";
  v218 = 0x8000000218FC13D0;
  v217 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v207 = v6;
  v206 = v6 + 8;
  v205 = v39;
  while (1)
  {
    while (1)
    {
      do
      {
        while (v38)
        {
          v41 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          v42 = v41 | (v40 << 6);
          if (v6[2])
            goto LABEL_42;
        }
        v33 = __OFADD__(v40++, 1);
        if (v33)
          goto LABEL_212;
        if (v40 >= v39)
          goto LABEL_195;
        v43 = v35[v40];
        if (!v43)
        {
          v44 = v40 + 1;
          if (v40 + 1 >= v39)
            goto LABEL_195;
          v43 = v35[v44];
          if (!v43)
          {
            v44 = v40 + 2;
            if (v40 + 2 >= v39)
              goto LABEL_195;
            v43 = v35[v44];
            if (!v43)
            {
              v44 = v40 + 3;
              if (v40 + 3 >= v39)
                goto LABEL_195;
              v43 = v35[v44];
              if (!v43)
              {
                v44 = v40 + 4;
                if (v40 + 4 >= v39)
                  goto LABEL_195;
                v43 = v35[v44];
                if (!v43)
                {
                  v44 = v40 + 5;
                  if (v40 + 5 >= v39)
                    goto LABEL_195;
                  v43 = v35[v44];
                  if (!v43)
                  {
                    v44 = v40 + 6;
                    if (v40 + 6 >= v39)
                      goto LABEL_195;
                    v43 = v35[v44];
                    if (!v43)
                    {
                      while (1)
                      {
                        v40 = v44 + 1;
                        if (__OFADD__(v44, 1))
                          goto LABEL_218;
                        if (v40 >= v39)
                          break;
                        v43 = v35[v40];
                        ++v44;
                        if (v43)
                          goto LABEL_41;
                      }
LABEL_195:
                      swift_release_n();
                      v228 = v217;
                      swift_bridgeObjectRetain_n();
                      v190 = v204;
                      specialized MutableCollection<>.sort(by:)((uint64_t *)&v228);
                      if (v190)
                        goto LABEL_220;
                      swift_bridgeObjectRelease_n();
                      v192 = v228[2];
                      if (v192)
                      {
                        v193 = *(uint64_t (**)(double))(*(_QWORD *)v210 + 80);
                        v194 = *MEMORY[0x24BEA8130];
                        LODWORD(v226) = *MEMORY[0x24BEA8000];
                        v221 = v228;
                        v195 = (double *)(v228 + 5);
                        v225 = (char *)0x8000000218FC07E0;
                        *(_QWORD *)&v191 = 136315138;
                        v223 = v191;
                        v222 = MEMORY[0x24BEE4AD8] + 8;
                        LODWORD(v224) = v194;
                        do
                        {
                          v196 = *v195;
                          v197 = *((id *)v195 - 1);
                          if (v193(v196))
                          {
                            v198 = swift_retain();
                            MEMORY[0x219A2732C](v198);
                            if (*(_QWORD *)((v229 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v229 & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
                              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                            specialized Array._endMutation()();

                            swift_release();
                          }
                          else
                          {

                          }
                          v195 += 2;
                          --v192;
                        }
                        while (v192);
                      }
                      result = swift_release();
                      v200 = v201;
                      *v201 = v229;
                      v200[1] = MEMORY[0x24BEE4AF8];
                      return result;
                    }
                  }
                }
              }
            }
          }
          v40 = v44;
        }
LABEL_41:
        v38 = (v43 - 1) & v43;
        v42 = __clz(__rbit64(v43)) + (v40 << 6);
      }
      while (!v6[2]);
LABEL_42:
      v45 = (uint64_t *)(v6[6] + 16 * v42);
      v47 = *v45;
      v46 = v45[1];
      swift_bridgeObjectRetain();
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v46);
      if ((v49 & 1) != 0)
        break;
      swift_bridgeObjectRelease();
    }
    v219 = v38;
    v50 = *(_QWORD *)(v6[7] + 8 * v48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v51 = *(_QWORD *)(v50 + 16);
    if (!v51)
    {
      swift_bridgeObjectRelease();
      goto LABEL_190;
    }
    v208 = v40;
    v52 = (_QWORD *)MEMORY[0x24BEE4B00];
    v228 = (_QWORD *)MEMORY[0x24BEE4B00];
    v53 = (uint64_t *)(v50 + 40);
    do
    {
      v55 = *v53;
      v56 = (id)*(v53 - 1);
      v57 = objc_msgSend(v56, sel_base);
      v58 = objc_msgSend(v57, sel_source);

      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v61 = v60;

      v63 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v61);
      v64 = v52[2];
      v65 = (v62 & 1) == 0;
      v66 = v64 + v65;
      if (__OFADD__(v64, v65))
      {
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
        goto LABEL_214;
      }
      v67 = v62;
      if (v52[3] < v66)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v66, 1);
        v52 = v228;
        v68 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v61);
        if ((v67 & 1) != (v69 & 1))
          goto LABEL_219;
        v63 = v68;
      }
      if ((v67 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v70 = v52[7];
        v71 = *(_QWORD **)(v70 + 8 * v63);
        v72 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v70 + 8 * v63) = v71;
        if ((v72 & 1) == 0)
        {
          v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71[2] + 1, 1, v71);
          *(_QWORD *)(v70 + 8 * v63) = v71;
        }
        v74 = v71[2];
        v73 = v71[3];
        if (v74 >= v73 >> 1)
        {
          v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v73 > 1), v74 + 1, 1, v71);
          *(_QWORD *)(v70 + 8 * v63) = v71;
        }
        v71[2] = v74 + 1;
        v54 = &v71[2 * v74];
        v54[4] = v56;
        v54[5] = v55;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedHomeKitClientAccessoryEvent>);
        v75 = swift_allocObject();
        *(_OWORD *)(v75 + 16) = v226;
        *(_QWORD *)(v75 + 32) = v56;
        *(_QWORD *)(v75 + 40) = v55;
        v52[(v63 >> 6) + 8] |= 1 << v63;
        v76 = (uint64_t *)(v52[6] + 16 * v63);
        *v76 = v59;
        v76[1] = v61;
        *(_QWORD *)(v52[7] + 8 * v63) = v75;
        v77 = v52[2];
        v33 = __OFADD__(v77, 1);
        v78 = v77 + 1;
        if (v33)
          goto LABEL_207;
        v52[2] = v78;
      }
      v53 += 2;
      --v51;
    }
    while (v51);
    swift_bridgeObjectRelease();
    v79 = v52 + 8;
    v80 = 1 << *((_BYTE *)v52 + 32);
    v81 = v80 < 64 ? ~(-1 << v80) : -1;
    v82 = v81 & v52[8];
    v83 = (unint64_t)(v80 + 63) >> 6;
    swift_retain();
    v84 = 0;
LABEL_63:
    if (v82)
      break;
    v33 = __OFADD__(v84++, 1);
    if (v33)
      goto LABEL_206;
    if (v84 < v83)
    {
      v87 = v79[v84];
      if (v87)
        goto LABEL_82;
      v88 = v84 + 1;
      if (v84 + 1 >= v83)
        goto LABEL_188;
      v87 = v79[v88];
      if (v87)
        goto LABEL_81;
      v88 = v84 + 2;
      if (v84 + 2 >= v83)
        goto LABEL_188;
      v87 = v79[v88];
      if (v87)
        goto LABEL_81;
      v88 = v84 + 3;
      if (v84 + 3 >= v83)
        goto LABEL_188;
      v87 = v79[v88];
      if (v87)
        goto LABEL_81;
      v88 = v84 + 4;
      if (v84 + 4 >= v83)
        goto LABEL_188;
      v87 = v79[v88];
      if (v87)
        goto LABEL_81;
      v88 = v84 + 5;
      if (v84 + 5 >= v83)
        goto LABEL_188;
      v87 = v79[v88];
      if (v87)
        goto LABEL_81;
      v88 = v84 + 6;
      if (v84 + 6 >= v83)
        goto LABEL_188;
      v87 = v79[v88];
      if (v87)
      {
LABEL_81:
        v84 = v88;
LABEL_82:
        v82 = (v87 - 1) & v87;
        v86 = __clz(__rbit64(v87)) + (v84 << 6);
        if (!v52[2])
          goto LABEL_63;
        goto LABEL_83;
      }
      while (1)
      {
        v84 = v88 + 1;
        if (__OFADD__(v88, 1))
          break;
        if (v84 >= v83)
          goto LABEL_188;
        v87 = v79[v84];
        ++v88;
        if (v87)
          goto LABEL_82;
      }
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
      goto LABEL_216;
    }
LABEL_188:
    swift_release_n();
    v6 = v207;
    v35 = v206;
    v39 = v205;
    v40 = v208;
LABEL_190:
    v38 = v219;
  }
  v85 = __clz(__rbit64(v82));
  v82 &= v82 - 1;
  v86 = v85 | (v84 << 6);
  if (!v52[2])
    goto LABEL_63;
LABEL_83:
  v89 = (uint64_t *)(v52[6] + 16 * v86);
  v91 = *v89;
  v90 = v89[1];
  swift_bridgeObjectRetain();
  v92 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v90);
  if ((v93 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
  *(_QWORD *)&v227 = v82;
  v94 = *(_QWORD **)(v52[7] + 8 * v92);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v95 = v94[2];
  if (!v95)
  {
    swift_bridgeObjectRelease();
    v82 = v227;
    goto LABEL_63;
  }
  if (v95 == 1)
  {
    v96 = v94[5];
    v97 = (id)v94[4];
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v98 = v217;
    else
      v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v217[2] + 1, 1, v217);
    v82 = v227;
    v100 = v98[2];
    v99 = v98[3];
    if (v100 >= v99 >> 1)
      v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v99 > 1), v100 + 1, 1, v98);
    v98[2] = v100 + 1;
    v217 = v98;
    v101 = &v98[2 * v100];
    v101[4] = v97;
    v101[5] = v96;
    goto LABEL_63;
  }
  v222 = v84;
  v202 = v83;
  v203 = v79;
  swift_bridgeObjectRetain();
  v102 = v94 + 5;
  v221 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (2)
  {
    v103 = *v102;
    v104 = (id)*(v102 - 1);
    v105 = objc_msgSend(v104, sel_characteristicType);
    v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v108 = v107;

    if (v106 == 0xD000000000000024 && v108 == (_QWORD)v223)
    {
LABEL_97:

      swift_bridgeObjectRelease();
    }
    else
    {
      v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v109 & 1) != 0)
        goto LABEL_93;
      v110 = objc_msgSend(v104, sel_characteristicType);
      v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v113 = v112;

      if (v111 == 0xD000000000000024 && v113 == v218)
        goto LABEL_97;
      v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v114 & 1) != 0)
      {
LABEL_93:

      }
      else
      {
        v115 = v221;
        v116 = swift_isUniquelyReferenced_nonNull_native();
        v228 = v115;
        if ((v116 & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v115[2] + 1, 1);
          v115 = v228;
        }
        v118 = v115[2];
        v117 = v115[3];
        if (v118 >= v117 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v117 > 1, v118 + 1, 1);
          v115 = v228;
        }
        v115[2] = v118 + 1;
        v221 = v115;
        v119 = &v115[2 * v118];
        v119[4] = v104;
        v119[5] = v103;
      }
    }
    v102 += 2;
    if (--v95)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  if (v221[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_109;
  }
  v228 = v94;
  swift_bridgeObjectRetain();
  v121 = v204;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v228);
  v204 = v121;
  if (v121)
    goto LABEL_220;
  swift_bridgeObjectRelease();
  v122 = v228[2];
  if (v122)
  {
    v123 = &v228[2 * v122];
    v124 = v123[3];
    v125 = (id)v123[2];
    swift_release();
    v126 = v125;
    v120 = v221;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v120[2] + 1, 1, v120);
    v128 = v120[2];
    v127 = v120[3];
    if (v128 >= v127 >> 1)
      v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v127 > 1), v128 + 1, 1, v120);
    v120[2] = v128 + 1;
    v129 = &v120[2 * v128];
    v129[4] = v126;
    v129[5] = v124;

  }
  else
  {
    swift_release();
LABEL_109:
    v120 = v221;
  }
  v130 = (_QWORD *)MEMORY[0x24BEE4B00];
  v228 = (_QWORD *)MEMORY[0x24BEE4B00];
  v131 = v120[2];
  v221 = v120;
  if (v131)
  {
    swift_bridgeObjectRetain();
    v132 = v120 + 5;
    do
    {
      v134 = *v132;
      v135 = (id)*(v132 - 1);
      v136 = objc_msgSend(v135, sel_characteristicType);
      v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v139 = v138;

      v141 = specialized __RawDictionaryStorage.find<A>(_:)(v137, v139);
      v142 = v130[2];
      v143 = (v140 & 1) == 0;
      v144 = v142 + v143;
      if (__OFADD__(v142, v143))
        goto LABEL_209;
      v145 = v140;
      if (v130[3] < v144)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v144, 1);
        v130 = v228;
        v146 = specialized __RawDictionaryStorage.find<A>(_:)(v137, v139);
        if ((v145 & 1) != (v147 & 1))
          goto LABEL_219;
        v141 = v146;
      }
      if ((v145 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v148 = v130[7];
        v149 = *(_QWORD **)(v148 + 8 * v141);
        v150 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v148 + 8 * v141) = v149;
        if ((v150 & 1) == 0)
        {
          v149 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v149[2] + 1, 1, v149);
          *(_QWORD *)(v148 + 8 * v141) = v149;
        }
        v152 = v149[2];
        v151 = v149[3];
        if (v152 >= v151 >> 1)
        {
          v149 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v151 > 1), v152 + 1, 1, v149);
          *(_QWORD *)(v148 + 8 * v141) = v149;
        }
        v149[2] = v152 + 1;
        v133 = &v149[2 * v152];
        v133[4] = v135;
        v133[5] = v134;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedHomeKitClientAccessoryEvent>);
        v153 = swift_allocObject();
        *(_OWORD *)(v153 + 16) = v226;
        *(_QWORD *)(v153 + 32) = v135;
        *(_QWORD *)(v153 + 40) = v134;
        v130[(v141 >> 6) + 8] |= 1 << v141;
        v154 = (uint64_t *)(v130[6] + 16 * v141);
        *v154 = v137;
        v154[1] = v139;
        *(_QWORD *)(v130[7] + 8 * v141) = v153;
        v155 = v130[2];
        v33 = __OFADD__(v155, 1);
        v156 = v155 + 1;
        if (v33)
          goto LABEL_210;
        v130[2] = v156;
      }
      v132 += 2;
      --v131;
    }
    while (v131);
    swift_bridgeObjectRelease();
  }
  v157 = v130 + 8;
  v158 = 1 << *((_BYTE *)v130 + 32);
  if (v158 < 64)
    v159 = ~(-1 << v158);
  else
    v159 = -1;
  v160 = v159 & v130[8];
  v224 = (unint64_t)(v158 + 63) >> 6;
  swift_retain();
  v161 = 0;
  if (v160)
  {
    while (1)
    {
      v162 = __clz(__rbit64(v160));
      v160 &= v160 - 1;
      v163 = v162 | (v161 << 6);
LABEL_161:
      v166 = (uint64_t *)(v130[6] + 16 * v163);
      v168 = *v166;
      v167 = v166[1];
      v169 = v130[2];
      swift_bridgeObjectRetain();
      if (!v169)
        goto LABEL_142;
      v170 = specialized __RawDictionaryStorage.find<A>(_:)(v168, v167);
      if ((v171 & 1) != 0 && *(_QWORD *)(*(_QWORD *)(v130[7] + 8 * v170) + 16) == 1)
      {
        if (v130[2])
        {
          v172 = specialized __RawDictionaryStorage.find<A>(_:)(v168, v167);
          if ((v173 & 1) != 0)
          {
            v174 = *(_QWORD *)(v130[7] + 8 * v172);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (!*(_QWORD *)(v174 + 16))
              goto LABEL_217;
            v175 = *(_QWORD *)(v174 + 40);
            v176 = *(id *)(v174 + 32);
            swift_bridgeObjectRelease();
            v177 = v176;
            goto LABEL_173;
          }
        }
LABEL_142:
        swift_bridgeObjectRelease();
        if (!v160)
          break;
      }
      else
      {
        if (!v130[2])
          goto LABEL_142;
        v178 = specialized __RawDictionaryStorage.find<A>(_:)(v168, v167);
        if ((v179 & 1) == 0)
          goto LABEL_142;
        v180 = *(_QWORD **)(v130[7] + 8 * v178);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v228 = v180;
        swift_bridgeObjectRetain();
        v181 = v204;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v228);
        v204 = v181;
        if (v181)
          goto LABEL_220;
        swift_bridgeObjectRelease();
        v182 = v228[2];
        if (!v182)
          goto LABEL_215;
        v183 = &v228[2 * v182];
        v175 = v183[3];
        v184 = (id)v183[2];
        swift_release();
        v177 = v184;
LABEL_173:
        v185 = v177;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v186 = v217;
        else
          v186 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v217[2] + 1, 1, v217);
        v188 = v186[2];
        v187 = v186[3];
        if (v188 >= v187 >> 1)
          v186 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v187 > 1), v188 + 1, 1, v186);
        v186[2] = v188 + 1;
        v217 = v186;
        v189 = &v186[2 * v188];
        v189[4] = v185;
        v189[5] = v175;

        if (!v160)
          break;
      }
    }
  }
  v33 = __OFADD__(v161++, 1);
  if (v33)
    goto LABEL_208;
  if (v161 >= v224)
  {
    v84 = v222;
LABEL_185:
    v82 = v227;
    swift_release_n();
    swift_bridgeObjectRelease();
    v79 = v203;
    v83 = v202;
    goto LABEL_63;
  }
  v164 = v157[v161];
  v84 = v222;
  if (v164)
  {
LABEL_160:
    v160 = (v164 - 1) & v164;
    v163 = __clz(__rbit64(v164)) + (v161 << 6);
    goto LABEL_161;
  }
  v165 = v161 + 1;
  if (v161 + 1 >= v224)
    goto LABEL_185;
  v164 = v157[v165];
  if (v164)
    goto LABEL_159;
  v165 = v161 + 2;
  if (v161 + 2 >= v224)
    goto LABEL_185;
  v164 = v157[v165];
  if (v164)
    goto LABEL_159;
  v165 = v161 + 3;
  if (v161 + 3 >= v224)
    goto LABEL_185;
  v164 = v157[v165];
  if (v164)
    goto LABEL_159;
  v165 = v161 + 4;
  if (v161 + 4 >= v224)
    goto LABEL_185;
  v164 = v157[v165];
  if (v164)
    goto LABEL_159;
  v165 = v161 + 5;
  if (v161 + 5 >= v224)
    goto LABEL_185;
  v164 = v157[v165];
  if (v164)
    goto LABEL_159;
  v165 = v161 + 6;
  if (v161 + 6 >= v224)
    goto LABEL_185;
  v164 = v157[v165];
  if (v164)
  {
LABEL_159:
    v161 = v165;
    goto LABEL_160;
  }
  while (1)
  {
    v161 = v165 + 1;
    if (__OFADD__(v165, 1))
      break;
    if (v161 >= v224)
      goto LABEL_185;
    v164 = v157[v161];
    ++v165;
    if (v164)
      goto LABEL_160;
  }
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_220:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t HomeKitAccessoryControlSignalFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t HomeKitAccessoryControlSignalFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t HomeKitAccessoryControlSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t HomeKitAccessoryControlSignalFactory.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for SignalFactory.convertBmEventToSignal(bmEvent:siriUISession:) in conformance HomeKitAccessoryControlSignalFactory(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)v1 + 80))(*(_QWORD *)a1, *(double *)(a1 + 8));
}

uint64_t protocol witness for SignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:) in conformance HomeKitAccessoryControlSignalFactory()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t result;
  char *v23;
  char *v24;
  char *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[16 * v13];
      v23 = v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (char *)(a3 - 16);
        do
        {
          v20 = v19 + 16;
          if (*((double *)v18 - 1) >= *((double *)v6 - 1))
          {
            v23 = v18 - 16;
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 16;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 16;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 16;
            if (v21 <= v7)
              break;
          }
          v19 -= 16;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v25, &v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v23 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (*((double *)v6 + 1) >= *((double *)v15 + 1))
        {
          v4 = v15 + 16;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 16;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 16;
          }
        }
        else
        {
          v16 = v6 + 16;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 16;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for HomeKitAccessoryControlSignalFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for HomeKitAccessoryControlSignalFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HomeKitAccessoryControlSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of HomeKitAccessoryControlSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of HomeKitAccessoryControlSignalFactory.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void static GeoCorrectionExample.runIdentifyCorrection()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Class isa;
  char *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  char v57;
  Swift::String v58;
  Swift::String v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  Swift::String v66;
  Swift::String v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  Swift::String v77;
  Swift::String v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  __int128 v104;
  char *v105;
  unsigned int v106;
  void (*v107)(char *, unint64_t, uint64_t);
  Class v108;
  uint64_t v109;
  char *v110;
  NSObject *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;

  v90 = type metadata accessor for ProtoNavigationUserFollowupContext();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v88 = (char *)&v84 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoNavigationFollowupType?);
  MEMORY[0x24BDAC7A8](v100);
  v2 = (char *)&v84 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for ProtoTaskFeatureSet();
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v85 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
  MEMORY[0x24BDAC7A8](v4);
  v98 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v99 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v84 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v84 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v84 - v15;
  v17 = type metadata accessor for ProtoTaskEngagementType();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v101 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v110 = (char *)&v84 - v21;
  v22 = type metadata accessor for ProtoSiriTaskEngagement();
  v111 = *(NSObject **)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = static SiriTaskEngagementRetriever.retrieveAllSiriTaskEngagement(streamId:)();
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v95 = v14;
      v96 = v11;
      v27 = (LOBYTE(v111[10].isa) + 32) & ~(unint64_t)LOBYTE(v111[10].isa);
      v84 = v25;
      v28 = v25 + v27;
      isa = v111[9].isa;
      v107 = (void (*)(char *, unint64_t, uint64_t))v111[2].isa;
      v108 = isa;
      v106 = *MEMORY[0x24BEA7E30];
      v104 = xmmword_218FBDA00;
      v93 = 0x8000000218FC1440;
      v92 = 0x8000000218FC1470;
      v91 = 0x8000000218FC1490;
      v97 = v2;
      v105 = v16;
      v94 = v18;
      v30 = v101;
      v109 = v22;
      v107(v24, v25 + v27, v22);
      while (1)
      {
        v32 = v110;
        ProtoSiriTaskEngagement.engagementType.getter();
        (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v30, v106, v17);
        lazy protocol witness table accessor for type ProtoTaskEngagementType and conformance ProtoTaskEngagementType();
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        v33 = v112;
        v34 = v114;
        v35 = *(void (**)(char *, uint64_t))(v18 + 8);
        v35(v30, v17);
        v35(v32, v17);
        if (v33 == v34)
        {
          v36 = *(_QWORD *)(ProtoSiriTaskEngagement.followupUserInitatedEngagements.getter() + 16);
          swift_bridgeObjectRelease();
          if (v36)
          {
            v37 = ProtoSiriTaskEngagement.followupUserInitatedEngagements.getter();
            v38 = *(_QWORD *)(v37 + 16);
            v39 = type metadata accessor for ProtoTaskEngagementFeatureSet();
            v40 = *(_QWORD *)(v39 - 8);
            if (v38)
            {
              v41 = (uint64_t)v98;
              (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v98, v37 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80)), v39);
              v42 = 0;
            }
            else
            {
              v42 = 1;
              v41 = (uint64_t)v98;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v41, v42, 1, v39);
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v41, 1, v39) == 1)
            {
              outlined destroy of Any?(v41, &demangling cache variable for type metadata for ProtoTaskEngagementFeatureSet?);
              v48 = type metadata accessor for ProtoNavigationTaskFeatureSet();
              v49 = (uint64_t)v105;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v105, 1, 1, v48);
            }
            else
            {
              v50 = v85;
              ProtoTaskEngagementFeatureSet.featureSet.getter();
              (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v39);
              v49 = (uint64_t)v105;
              ProtoTaskFeatureSet.navigationFeatureSet.getter();
              (*(void (**)(char *, uint64_t))(v86 + 8))(v50, v87);
              v48 = type metadata accessor for ProtoNavigationTaskFeatureSet();
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v49, 0, 1, v48);
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
            v51 = swift_allocObject();
            *(_OWORD *)(v51 + 16) = v104;
            v112 = 0;
            v113 = 0xE000000000000000;
            _StringGuts.grow(_:)(47);
            swift_bridgeObjectRelease();
            v112 = 0xD00000000000002BLL;
            v113 = v93;
            v52 = v49;
            v53 = (uint64_t)v95;
            outlined init with copy of ProtoNavigationTaskFeatureSet?(v52, (uint64_t)v95);
            type metadata accessor for ProtoNavigationTaskFeatureSet();
            v54 = *(_QWORD *)(v48 - 8);
            v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
            v55 = v103(v53, 1, v48);
            v102 = v54;
            if (v55 == 1)
            {
              outlined destroy of Any?(v53, &demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
              v56 = 2;
            }
            else
            {
              v57 = ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.getter();
              (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v48);
              v56 = v57 & 1;
            }
            LOBYTE(v114) = v56;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
            v58._countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v58);
            swift_bridgeObjectRelease();
            v59._countAndFlagsBits = 2592;
            v59._object = (void *)0xE200000000000000;
            String.append(_:)(v59);
            v60 = v112;
            v61 = v113;
            *(_QWORD *)(v51 + 56) = MEMORY[0x24BEE0D00];
            *(_QWORD *)(v51 + 32) = v60;
            *(_QWORD *)(v51 + 40) = v61;
            print(_:separator:terminator:)();
            swift_bridgeObjectRelease();
            v62 = swift_allocObject();
            *(_OWORD *)(v62 + 16) = v104;
            v112 = 0;
            v113 = 0xE000000000000000;
            _StringGuts.grow(_:)(26);
            swift_bridgeObjectRelease();
            v112 = 0xD000000000000016;
            v113 = v92;
            v63 = (uint64_t)v96;
            outlined init with copy of ProtoNavigationTaskFeatureSet?((uint64_t)v105, (uint64_t)v96);
            if (v103(v63, 1, v48) == 1)
            {
              outlined destroy of Any?(v63, &demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
              v64 = 2;
            }
            else
            {
              v65 = ProtoNavigationTaskFeatureSet.isUserFollowup.getter();
              (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v63, v48);
              v64 = v65 & 1;
            }
            LOBYTE(v114) = v64;
            v66._countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v66);
            swift_bridgeObjectRelease();
            v67._countAndFlagsBits = 2592;
            v67._object = (void *)0xE200000000000000;
            String.append(_:)(v67);
            v68 = v112;
            v69 = v113;
            *(_QWORD *)(v62 + 56) = MEMORY[0x24BEE0D00];
            *(_QWORD *)(v62 + 32) = v68;
            *(_QWORD *)(v62 + 40) = v69;
            print(_:separator:terminator:)();
            swift_bridgeObjectRelease();
            v70 = swift_allocObject();
            *(_OWORD *)(v70 + 16) = v104;
            v112 = 0;
            v113 = 0xE000000000000000;
            _StringGuts.grow(_:)(34);
            swift_bridgeObjectRelease();
            v112 = 0xD00000000000001ELL;
            v113 = v91;
            v71 = (uint64_t)v105;
            v72 = v99;
            outlined init with copy of ProtoNavigationTaskFeatureSet?((uint64_t)v105, v99);
            if (v103(v72, 1, v48) == 1)
            {
              outlined destroy of Any?(v72, &demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
              v73 = type metadata accessor for ProtoNavigationFollowupType();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v97, 1, 1, v73);
            }
            else
            {
              v74 = v88;
              ProtoNavigationTaskFeatureSet.followupContext.getter();
              (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v72, v48);
              v75 = v97;
              ProtoNavigationUserFollowupContext.followupType.getter();
              (*(void (**)(char *, uint64_t))(v89 + 8))(v74, v90);
              v76 = type metadata accessor for ProtoNavigationFollowupType();
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v75, 0, 1, v76);
            }
            v77._countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v77);
            swift_bridgeObjectRelease();
            v78._countAndFlagsBits = 2592;
            v78._object = (void *)0xE200000000000000;
            String.append(_:)(v78);
            v79 = v112;
            v80 = v113;
            *(_QWORD *)(v70 + 56) = MEMORY[0x24BEE0D00];
            *(_QWORD *)(v70 + 32) = v79;
            *(_QWORD *)(v70 + 40) = v80;
            print(_:separator:terminator:)();
            swift_bridgeObjectRelease();
            outlined destroy of Any?(v71, &demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
            v18 = v94;
            v30 = v101;
          }
          else
          {
            if (one-time initialization token for engagement != -1)
              swift_once();
            v43 = type metadata accessor for Logger();
            __swift_project_value_buffer(v43, (uint64_t)static Logger.engagement);
            v44 = Logger.logObject.getter();
            v45 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v44, v45))
            {
              v46 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v46 = 0;
              _os_log_impl(&dword_218F54000, v44, v45, "No Geo PSE", v46, 2u);
              v47 = v46;
              v30 = v101;
              MEMORY[0x219A27C8C](v47, -1, -1);
            }

          }
        }
        v31 = v109;
        ((void (*)(char *, uint64_t))v111[1].isa)(v24, v109);
        v28 += (unint64_t)v108;
        if (!--v26)
          break;
        v107(v24, v28, v31);
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v81 = type metadata accessor for Logger();
    __swift_project_value_buffer(v81, (uint64_t)static Logger.engagement);
    v111 = Logger.logObject.getter();
    v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v111, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v83 = 0;
      _os_log_impl(&dword_218F54000, v111, v82, "Failed to retrieve engagement features", v83, 2u);
      MEMORY[0x219A27C8C](v83, -1, -1);
    }

  }
}

uint64_t outlined init with copy of ProtoNavigationTaskFeatureSet?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtoNavigationTaskFeatureSet?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for GeoCorrectionExample()
{
  return &type metadata for GeoCorrectionExample;
}

uint64_t PostInteractionEngagementCollector.collect(callback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void (*v6)(uint64_t (*)(), uint64_t);

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = *(void (**)(uint64_t (*)(), uint64_t))(*(_QWORD *)v2 + 328);
  swift_retain();
  v6(partial apply for closure #1 in PostInteractionEngagementCollector.collect(callback:), v5);
  return swift_release();
}

uint64_t sub_218F9E3EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PostInteractionEngagementCollector.collect(callback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t PostInteractionEngagementCollector.perform()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = PostInteractionEngagementCollector.perform();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PostInteractionEngagementCollector.perform()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  (*(void (**)(uint64_t (*)(), uint64_t))(*(_QWORD *)a2 + 328))(partial apply for closure #1 in closure #1 in PostInteractionEngagementCollector.perform(), v8);
  return swift_release();
}

uint64_t partial apply for closure #1 in PostInteractionEngagementCollector.perform()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PostInteractionEngagementCollector.perform()(a1, v1);
}

uint64_t PostInteractionEngagementCollector.collectWithSiriExecution(completion:)(void (*a1)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void (*v16)(_QWORD);
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v22 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - v10;
  if (one-time initialization token for engagement != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.engagement);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v23 = v3;
    v16 = a1;
    v17 = v15;
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_218F54000, v13, v14, "Starting activity collector with Siri Execution", v15, 2u);
    v18 = v17;
    a1 = v16;
    v3 = v23;
    MEMORY[0x219A27C8C](v18, -1, -1);
  }

  UserDefaultsDomainProvider.lastCollectionDate.getter((uint64_t)v11);
  Date.init()();
  PostInteractionEngagementCollector.runPSECollection(startDate:endDate:)((uint64_t)v11, (uint64_t)v9);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v9, v2);
  v19 = UserDefaultsDomainProvider.lastCollectionDate.setter((uint64_t)v6);
  a1(v19);
  v20 = *(void (**)(char *, uint64_t))(v3 + 8);
  v20(v9, v2);
  return ((uint64_t (*)(char *, uint64_t))v20)(v11, v2);
}

uint64_t PostInteractionEngagementCollector.runPSECollection(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t, int *);
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  int *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void (*v62)(uint64_t, _QWORD, uint64_t, int *);
  int *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v74 = *(_QWORD *)(v6 - 8);
  v75 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v73 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v72 = (char *)&v59 - v9;
  v10 = type metadata accessor for Date();
  v70 = *(_QWORD *)(v10 - 8);
  v71 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v69 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v68 = (char *)&v59 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v67 = (char *)&v59 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v66 = (char *)&v59 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v18);
  v65 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UISessionSignalBuilder(0);
  v20 = swift_allocObject();
  v21 = v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  v22 = type metadata accessor for SiriUISession(0);
  v23 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)(v22 - 8) + 56);
  v64 = v21;
  v63 = (int *)v22;
  v62 = v23;
  ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v21, 1, 1);
  v24 = (unint64_t *)(v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks);
  v25 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_intelligenceEngineSession) = v25;
  v26 = v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream;
  *(_QWORD *)(v26 + 32) = 0;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_QWORD *)(v20 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = v3;
  v83 = 0;
  v77 = v3;
  swift_retain();
  v76 = a2;
  v82 = v20;
  v27 = UISessionSignalBuilder.buildSiriExecutionTasks(startDate:endDate:)(a1, a2);
  swift_beginAccess();
  *v24 = v27;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if (!(v27 >> 62))
  {
    v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v29)
      goto LABEL_3;
LABEL_11:
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  v29 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v29)
    goto LABEL_11;
LABEL_3:
  if (v29 >= 1)
  {
    v30 = 0;
    v59 = v27 & 0xC000000000000001;
    v61 = v27;
    v60 = v29;
    v31 = v66;
    v32 = v67;
    v33 = v71;
    v34 = v75;
    do
    {
      if (v59)
      {
        v35 = MEMORY[0x219A2756C](v30, v27);
      }
      else
      {
        v35 = *(_QWORD *)(v27 + 8 * v30 + 32);
        swift_retain();
      }
      v81 = v30 + 1;
      v36 = UISessionSignalBuilder.fetchDataStreams(taskIndex:endDate:)(v30, v76);
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 320))(v36);
      v38 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 344);
      v39 = v38(v37);
      v40 = v69;
      v38(v39);
      v41 = v68;
      Date.addingTimeInterval(_:)();
      v42 = v70;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v40, v33);
      v43 = v72;
      UUID.init()();
      v44 = UUID.uuidString.getter();
      v79 = v45;
      v80 = v44;
      v46 = *(void (**)(char *, uint64_t))(v74 + 8);
      v46(v43, v34);
      v47 = v73;
      UUID.init()();
      v48 = UUID.uuidString.getter();
      v78 = v49;
      v46(v47, v34);
      v50 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      v51 = (uint64_t)v65;
      v50(v65, v31, v33);
      v52 = v63;
      v50((char *)(v51 + v63[5]), v32, v33);
      v50((char *)(v51 + v52[6]), v41, v33);
      v53 = (uint64_t *)(v51 + v52[7]);
      v54 = v79;
      *v53 = v80;
      v53[1] = v54;
      v55 = (uint64_t *)(v51 + v52[8]);
      v56 = v78;
      *v55 = v48;
      v55[1] = v56;
      v62(v51, 0, 1, v52);
      v57 = v64;
      swift_beginAccess();
      outlined assign with take of SiriUISession?(v51, v57);
      swift_endAccess();
      v58 = v77;
      swift_retain();
      specialized UISessionSignalBuilder.buildSignalsAndTaskFeatureSets(task:completion:)(v35, v82, v58, &v83);
      swift_release();
      swift_release();
      v30 = v81;
      v27 = v61;
    }
    while (v60 != v81);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t PostInteractionEngagementCollector.__allocating_init(parameters:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  v1 = specialized PostSiriEngagementMetricsCollector.init(parameters:)(v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PostInteractionEngagementCollector.init(parameters:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized PostSiriEngagementMetricsCollector.init(parameters:)(v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PostInteractionEngagementCollector.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return PostSiriEngagementMetricsCollector.init(identifier:)(a1, a2);
}

uint64_t PostInteractionEngagementCollector.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t PostInteractionEngagementCollector.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PostInteractionEngagementCollector()
{
  return objc_opt_self();
}

uint64_t method lookup function for PostInteractionEngagementCollector()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PostInteractionEngagementCollector.perform()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 320) + *(_QWORD *)(*(_QWORD *)v0 + 320));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = dispatch thunk of PostInteractionEngagementCollector.perform();
  return v4();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of PostInteractionEngagementCollector.collectWithSiriExecution(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t sub_218F9EF9C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PostInteractionEngagementCollector.perform()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t MusicSearchIntentSignalFactory.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 100;
  *(_QWORD *)(result + 24) = &outlined read-only object #0 of MusicSearchIntentSignalFactory.init();
  return result;
}

uint64_t MusicSearchIntentSignalFactory.kMusicSearchXORKeyMaximum.getter()
{
  return 100;
}

uint64_t MusicSearchIntentSignalFactory.kMusicSearchUnencryptedKeys.getter()
{
  return swift_bridgeObjectRetain();
}

void MusicSearchIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  int v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  char v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  _OWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  unsigned __int8 v82;
  char v83;
  _QWORD *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  Swift::String v118;
  id v119;
  id v120;
  uint64_t v121;
  void *v122;
  void *v123;
  Swift::String v124;
  Swift::String v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _BYTE v132[4];
  int v133;
  _QWORD *v134;
  _BYTE *v135;
  _BYTE *v136;
  _BYTE *v137;
  _BYTE *v138;
  void *v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  unint64_t v143;
  id v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  _QWORD *v155;
  _OWORD v156[2];

  v142 = a2;
  v143 = type metadata accessor for ReliabilityCategory();
  v147 = *(_QWORD *)(v143 - 8);
  MEMORY[0x24BDAC7A8](v143);
  v145 = &v132[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v148 = type metadata accessor for Logger();
  v4 = *(_QWORD *)(v148 - 8);
  MEMORY[0x24BDAC7A8](v148);
  v6 = &v132[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = &v132[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v12 = &v132[-v11];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v132[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for String.Encoding();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = &v132[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = (void *)MEMORY[0x219A27818](v17);
  v21 = v149;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v150);
  if (v21)
  {
    objc_autoreleasePoolPop(v20);
    return;
  }
  v134 = v6;
  *(_QWORD *)&v149 = v4;
  v22 = v148;
  v135 = v19;
  v139 = a1;
  v136 = v10;
  v137 = v12;
  v138 = v15;
  v140 = 0;
  objc_autoreleasePoolPop(v20);
  v141 = (id)v150;
  v144 = objc_msgSend((id)v150, sel_intent);
  v23 = objc_msgSend(v144, sel_domain);
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v26 = v25;

  if (v24 == 0x636973754DLL && v26 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v27 = v139;
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v27 = v139;
    if ((v28 & 1) == 0)
    {
      if (one-time initialization token for engagement != -1)
LABEL_90:
        swift_once();
      v116 = __swift_project_value_buffer(v22, (uint64_t)static Logger.engagement);
      v117 = v134;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v149 + 16))(v134, v116, v22);
      *(_QWORD *)&v150 = 0;
      *((_QWORD *)&v150 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v118._object = (void *)0x8000000218FC0170;
      v118._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v118);
      v119 = v144;
      v120 = objc_msgSend(v144, sel_domain);
      v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v123 = v122;

      v124._countAndFlagsBits = v121;
      v124._object = v123;
      String.append(_:)(v124);
      swift_bridgeObjectRelease();
      v125._countAndFlagsBits = 0xD000000000000024;
      v125._object = (void *)0x8000000218FC14F0;
      String.append(_:)(v125);
      v126 = v150;
      v127 = *MEMORY[0x24BEA8140];
      v128 = type metadata accessor for AppIntentEventDataIssues();
      v129 = (uint64_t)v145;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 104))(v145, v127, v128);
      v130 = v147;
      v131 = v143;
      (*(void (**)(uint64_t, _QWORD, unint64_t))(v147 + 104))(v129, *MEMORY[0x24BEA8000], v143);
      Logger.error(_:_:)(v126, *((unint64_t *)&v126 + 1), v129);
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, unint64_t))(v130 + 8))(v129, v131);
      (*(void (**)(_QWORD *, uint64_t))(v149 + 8))(v117, v22);
      return;
    }
  }
  v29 = specialized RandomNumberGenerator.next<A>(upperBound:)(101);
  v30 = objc_msgSend(v144, sel_parametersByName);
  v31 = MEMORY[0x24BEE4AD8];
  v133 = v29;
  if (v30)
  {
    v32 = v30;
    v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    v152 = MEMORY[0x24BEE4260];
    LOBYTE(v150) = v29;
    outlined init with take of Any(&v150, v156);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v155 = (_QWORD *)v33;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v156, 7955819, 0xE300000000000000, isUniquelyReferenced_nonNull_native);
    v35 = v155;
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v22 = v146;
  v36 = MEMORY[0x24BEE0D00];
  v37 = v35[8];
  v148 = (uint64_t)(v35 + 8);
  v38 = 1 << *((_BYTE *)v35 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & v37;
  *(_QWORD *)&v149 = (unint64_t)(v38 + 63) >> 6;
  swift_bridgeObjectRetain();
  v41 = 0;
  v147 = v31 + 8;
  v42 = v35;
  v43 = v35;
  v145 = v35;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        do
        {
LABEL_14:
          while (v40)
          {
            v44 = __clz(__rbit64(v40));
            v40 &= v40 - 1;
            v45 = v44 | (v41 << 6);
            if (v42[2])
              goto LABEL_32;
          }
          v46 = __OFADD__(v41++, 1);
          if (v46)
          {
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
          if (v41 >= (uint64_t)v149)
            goto LABEL_78;
          v47 = *(_QWORD *)(v148 + 8 * v41);
          if (!v47)
          {
            v48 = v41 + 1;
            if (v41 + 1 >= (uint64_t)v149)
              goto LABEL_78;
            v47 = *(_QWORD *)(v148 + 8 * v48);
            if (!v47)
            {
              v48 = v41 + 2;
              if (v41 + 2 >= (uint64_t)v149)
                goto LABEL_78;
              v47 = *(_QWORD *)(v148 + 8 * v48);
              if (!v47)
              {
                v48 = v41 + 3;
                if (v41 + 3 >= (uint64_t)v149)
                  goto LABEL_78;
                v47 = *(_QWORD *)(v148 + 8 * v48);
                if (!v47)
                {
                  v48 = v41 + 4;
                  if (v41 + 4 >= (uint64_t)v149)
                    goto LABEL_78;
                  v47 = *(_QWORD *)(v148 + 8 * v48);
                  if (!v47)
                  {
                    v48 = v41 + 5;
                    if (v41 + 5 >= (uint64_t)v149)
                    {
LABEL_78:
                      swift_release();
                      v81 = v142;
                      v82 = objc_msgSend(v27, sel_donatedBySiri);
                      v152 = MEMORY[0x24BEE1328];
                      LOBYTE(v150) = v82;
                      outlined init with take of Any(&v150, v156);
                      v83 = swift_isUniquelyReferenced_nonNull_native();
                      v155 = v42;
                      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v156, 0x42646574616E6F64, 0xED00006972695379, v83);
                      v84 = v155;
                      swift_bridgeObjectRelease();
                      v85 = objc_msgSend(v144, sel_typeName);
                      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v88 = v87;

                      v152 = v36;
                      *(_QWORD *)&v150 = v86;
                      *((_QWORD *)&v150 + 1) = v88;
                      outlined init with take of Any(&v150, v156);
                      v89 = swift_isUniquelyReferenced_nonNull_native();
                      v155 = v84;
                      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v156, 0x7954746E65746E69, 0xEE00656D614E6570, v89);
                      v90 = v27;
                      v91 = v155;
                      swift_bridgeObjectRelease();
                      objc_msgSend(v90, sel_absoluteTimestamp);
                      v92 = (uint64_t)v138;
                      Date.init(timeIntervalSinceReferenceDate:)();
                      v93 = type metadata accessor for Date();
                      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v92, 0, 1, v93);
                      v94 = objc_msgSend(v141, sel_dateInterval);
                      if (v94)
                      {
                        v95 = v94;
                        v96 = (uint64_t)v136;
                        static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

                        v97 = type metadata accessor for DateInterval();
                        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v96, 0, 1, v97);
                      }
                      else
                      {
                        v97 = type metadata accessor for DateInterval();
                        v96 = (uint64_t)v136;
                        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v136, 1, 1, v97);
                      }
                      v98 = (uint64_t)v137;
                      outlined init with take of DateInterval?(v96, (uint64_t)v137);
                      type metadata accessor for DateInterval();
                      v99 = 0.0;
                      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 48))(v98, 1, v97))
                      {
                        DateInterval.duration.getter();
                        v99 = v100;
                      }
                      outlined destroy of Any?(v98, &demangling cache variable for type metadata for DateInterval?);
                      type metadata accessor for Utils();
                      v101 = (uint64_t)v138;
                      static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v138, v81, (uint64_t)&v150, v99);
                      outlined destroy of Any?(v101, &demangling cache variable for type metadata for Date?);
                      v149 = v150;
                      v102 = v151;
                      v103 = v152;
                      v104 = v153;
                      v105 = v154;
                      v106 = v144;
                      v107 = objc_msgSend(v144, sel_domain);
                      v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v110 = v109;

                      v111 = objc_msgSend(v106, sel_verb);
                      v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v114 = v113;

                      type metadata accessor for Signal();
                      v115 = swift_allocObject();
                      *(_OWORD *)(v115 + 16) = v149;
                      *(_QWORD *)(v115 + 32) = v102;
                      *(_QWORD *)(v115 + 40) = v103;
                      *(_QWORD *)(v115 + 48) = v104;
                      *(_BYTE *)(v115 + 56) = v105;
                      *(_QWORD *)(v115 + 64) = v108;
                      *(_QWORD *)(v115 + 72) = v110;
                      *(_QWORD *)(v115 + 80) = v112;
                      *(_QWORD *)(v115 + 88) = v114;
                      *(_BYTE *)(v115 + 96) = 1;
                      *(_QWORD *)(v115 + 104) = v91;
                      return;
                    }
                    v47 = *(_QWORD *)(v148 + 8 * v48);
                    if (!v47)
                    {
                      while (1)
                      {
                        v41 = v48 + 1;
                        if (__OFADD__(v48, 1))
                          goto LABEL_88;
                        if (v41 >= (uint64_t)v149)
                          goto LABEL_78;
                        v47 = *(_QWORD *)(v148 + 8 * v41);
                        ++v48;
                        if (v47)
                          goto LABEL_31;
                      }
                    }
                  }
                }
              }
            }
            v41 = v48;
          }
LABEL_31:
          v40 = (v47 - 1) & v47;
          v45 = __clz(__rbit64(v47)) + (v41 << 6);
        }
        while (!v42[2]);
LABEL_32:
        v49 = (uint64_t *)(*((_QWORD *)v43 + 6) + 16 * v45);
        v51 = *v49;
        v50 = v49[1];
        swift_bridgeObjectRetain();
        v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v50);
        if ((v53 & 1) != 0)
        {
          outlined init with copy of Any(v42[7] + 32 * v52, (uint64_t)&v150);
          if ((swift_dynamicCast() & 1) != 0)
            break;
        }
        swift_bridgeObjectRelease();
      }
      v54 = *((_QWORD *)&v156[0] + 1);
      v55 = *(_QWORD **)(v22 + 24);
      v22 = v55[2];
      if (!v22)
      {
        v143 = *(_QWORD *)&v156[0];
LABEL_61:
        v134 = v42;
        goto LABEL_62;
      }
      if (v55[4] != v51 || v55[5] != v50)
      {
        v143 = *(_QWORD *)&v156[0];
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          break;
      }
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v43 = v145;
      v22 = v146;
      v36 = MEMORY[0x24BEE0D00];
    }
    if (v22 == 1)
      goto LABEL_61;
    if (v55[6] == v51 && v55[7] == v50 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_44;
    v134 = v42;
    if (v22 != 2)
    {
      v57 = v55 + 9;
      v58 = 2;
      do
      {
        v59 = v58 + 1;
        if (__OFADD__(v58, 1))
          goto LABEL_87;
        v60 = *(v57 - 1) == v51 && *v57 == v50;
        if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v27 = v139;
          v43 = v145;
          v22 = v146;
          v36 = MEMORY[0x24BEE0D00];
          v42 = v134;
          goto LABEL_14;
        }
        v57 += 2;
        ++v58;
      }
      while (v59 != v22);
    }
LABEL_62:
    swift_bridgeObjectRetain();
    v61 = v140;
    v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS8UTF8ViewV_s5UInt8Vs5NeverOTg5052_sSS18PostSiriEngagementE17encodeWithXorByte3keySSs5F12V_tFA2EXEfU_AITf1cn_n(v143, v54, v133);
    v140 = v61;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v150 = v22;
    static String.Encoding.utf8.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    lazy protocol witness table accessor for type [UInt8] and conformance [A]();
    v62 = String.init<A>(bytes:encoding:)();
    v64 = v63;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v64)
      v65 = v62;
    else
      v65 = 0;
    v36 = MEMORY[0x24BEE0D00];
    v152 = MEMORY[0x24BEE0D00];
    v66 = 0xE000000000000000;
    if (v64)
      v66 = v64;
    *(_QWORD *)&v150 = v65;
    *((_QWORD *)&v150 + 1) = v66;
    outlined init with take of Any(&v150, v156);
    v67 = v134;
    v68 = swift_isUniquelyReferenced_nonNull_native();
    v155 = v67;
    v70 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v50);
    v71 = v67[2];
    v72 = (v69 & 1) == 0;
    v73 = v71 + v72;
    if (__OFADD__(v71, v72))
      goto LABEL_89;
    v22 = v146;
    if (v67[3] >= v73)
    {
      if ((v68 & 1) == 0)
      {
        v80 = v69;
        specialized _NativeDictionary.copy()();
        LOBYTE(v69) = v80;
      }
    }
    else
    {
      LODWORD(v143) = v69;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v73, v68);
      v74 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v50);
      v75 = v69 & 1;
      LOBYTE(v69) = v143;
      if ((v143 & 1) != v75)
        goto LABEL_92;
      v70 = v74;
    }
    v27 = v139;
    v42 = v155;
    if ((v69 & 1) != 0)
    {
      v76 = (_OWORD *)(v155[7] + 32 * v70);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v76);
      outlined init with take of Any(v156, v76);
      goto LABEL_77;
    }
    v155[(v70 >> 6) + 8] |= 1 << v70;
    v77 = (uint64_t *)(v42[6] + 16 * v70);
    *v77 = v51;
    v77[1] = v50;
    outlined init with take of Any(v156, (_OWORD *)(v42[7] + 32 * v70));
    v78 = v42[2];
    v46 = __OFADD__(v78, 1);
    v79 = v78 + 1;
    if (v46)
      break;
    v42[2] = v79;
    swift_bridgeObjectRetain();
LABEL_77:
    v43 = v145;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_92:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t MusicSearchIntentSignalFactory.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_BYTE *)(v0 + 16) = 100;
  *(_QWORD *)(v0 + 24) = &outlined read-only object #0 of MusicSearchIntentSignalFactory.init();
  return result;
}

uint64_t MusicSearchIntentSignalFactory.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t MusicSearchIntentSignalFactory.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MusicSearchIntentSignalFactory.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  unsigned int v5;
  _QWORD v6[5];

  if ((_BYTE)result)
  {
    v6[3] = v1;
    v6[4] = v2;
    v3 = result;
    v6[0] = 0;
    MEMORY[0x219A27CA4](v6, 8);
    v4 = v3;
    result = (LOBYTE(v6[0]) * v3) >> 8;
    if (v3 > (LOBYTE(v6[0]) * v3)
      && -v3 % v3 > (LOBYTE(v6[0]) * v3))
    {
      v5 = (-v3 % v3);
      do
      {
        v6[0] = 0;
        MEMORY[0x219A27CA4](v6, 8);
      }
      while (v5 > (LOBYTE(v6[0]) * v4));
      return (LOBYTE(v6[0]) * v4) >> 8;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for MusicSearchIntentSignalFactory()
{
  return objc_opt_self();
}

uint64_t PSESELFEmitter.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t PSESELFEmitter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PSESELFEmitter.getPSESiriEngagementTaskSuccess(taskSuccess:)(uint64_t result)
{
  return result;
}

uint64_t PSESELFEmitter.getPSEDonationSource(pseDonationSource:)(char a1)
{
  unsigned int v1;

  if ((a1 & 1) != 0)
    v1 = 1;
  else
    v1 = 2;
  if (a1 == 2)
    return 3;
  else
    return v1;
}

uint64_t PSESELFEmitter.getPSETriggerOrigin()()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  swift_beginAccess();
  v0 = static PSEStruct.pseTriggerOrigin;
  v1 = qword_253F31BF0;
  v2 = static PSEStruct.pseTriggerOrigin == 0x6E61747369737361 && qword_253F31BF0 == 0xEA00000000006474;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 1;
  v3 = 2;
  if (v0 != 0x636E657265666E69 || v1 != 0xEA00000000006465)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 2;
    else
      return 0;
  }
  return v3;
}

uint64_t PSESELFEmitter.getPSEAppFollowup(appLaunchBundleId:taskAppPattern:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = 0;
  if (a2)
  {
    v5 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v5 = a1 & 0xFFFFFFFFFFFFLL;
    if (v5 && a4)
    {
      v6 = HIBYTE(a4) & 0xF;
      if ((a4 & 0x2000000000000000) == 0)
        v6 = a3 & 0xFFFFFFFFFFFFLL;
      if (v6)
      {
        v4 = 1;
        if (a1 != a3 || a2 != a4)
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            return 1;
          else
            return 2;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v4;
}

uint64_t PSESELFEmitter.getPSEAppFollowupForMaps(appLaunchBundleId:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!a2)
    return 0;
  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 1;
  v3 = 4;
  if ((StringProtocol.contains<A>(_:)() & 1) == 0)
  {
    if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      return 4;
    else
      return 2;
  }
  return v3;
}

uint64_t PSESELFEmitter.getPSEAppLaunchReason(reason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 == 1769105747 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 1;
  if (a1 == 0x65726373656D6F48 && a2 == 0xEA00000000006E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  v4 = 4;
  if (a1 != 0x726568744FLL || a2 != 0xE500000000000000)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 4;
    else
      return 0;
  }
  return v4;
}

uint64_t PSESELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PSESELFEmitter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t specialized PSESELFEmitter.applyMissingDonationMonitor(task:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  Swift::String v30;

  v2 = type metadata accessor for ReliabilityCategory();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 248))(v4);
  v7 = String.lowercased()();
  swift_bridgeObjectRelease();
  v30 = v7;
  v28 = 0x7373656D646E6573;
  v29 = 0xEB00000000656761;
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.engagement);
    v9 = *MEMORY[0x24BEA8138];
    v10 = type metadata accessor for AppIntentEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v6, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x24BEA8000], v2);
    v11 = 0xD000000000000057;
    v12 = "#SELF Logging - There are no PSE signals for SiriMessage task, emitting as Generic PSE.";
LABEL_17:
    v22 = (unint64_t)(v12 - 32) | 0x8000000000000000;
LABEL_18:
    Logger.debug(_:_:)(v11, v22, (uint64_t)v6);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  v30 = v7;
  v28 = 0x6C61637472617473;
  v29 = 0xE90000000000006CLL;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.engagement);
    v14 = *MEMORY[0x24BEA8138];
    v15 = type metadata accessor for AppIntentEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v6, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x24BEA8000], v2);
    v11 = 0xD000000000000059;
    v12 = "#SELF Logging - There are no PSE signals for SiriPhoneCall task, emitting as Generic PSE.";
    goto LABEL_17;
  }
  v30 = v7;
  v28 = 0x6964656D79616C70;
  v29 = 0xE900000000000061;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.engagement);
    v17 = *MEMORY[0x24BEA8180];
    v18 = type metadata accessor for NowPlayingEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v6, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x24BEA8010], v2);
    v11 = 0xD000000000000055;
    v12 = "#SELF Logging - There are no PSE signals for SiriMusic task, emitting as Generic PSE.";
    goto LABEL_17;
  }
  v30 = v7;
  v28 = 0x686C6F72746E6F63;
  v29 = 0xEB00000000656D6FLL;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for engagement != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.engagement);
    v20 = *MEMORY[0x24BEA8268];
    v21 = type metadata accessor for HomeKitClientAccessoryControlEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v6, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x24BEA8038], v2);
    v11 = 0xD000000000000054;
    v12 = "#SELF Logging - There are no PSE signals for SiriHome task, emitting as Generic PSE.";
    goto LABEL_17;
  }
  v30 = v7;
  v28 = 1936744813;
  v29 = 0xE400000000000000;
  v24 = StringProtocol.contains<A>(_:)();
  result = swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.engagement);
    v26 = *MEMORY[0x24BEA7FC8];
    v27 = type metadata accessor for MapsEventDataIssues();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v6, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x24BEA7FE8], v2);
    v22 = 0x8000000218FC15D0;
    v11 = 0xD000000000000050;
    goto LABEL_18;
  }
  return result;
}

void specialized PSESELFEmitter.emitPSESELFInstrumentation(signals:task:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t (*v97)(_QWORD, _QWORD);
  _QWORD *v98;
  NSObject *oslog;
  __int128 v100;
  __int128 v101;
  char v102;
  unint64_t v103;

  v10 = objc_msgSend((id)objc_opt_self(), sel_sharedConnection);
  if (!v10)
  {
    __break(1u);
LABEL_231:
    swift_once();
LABEL_227:
    v88 = type metadata accessor for Logger();
    __swift_project_value_buffer(v88, (uint64_t)static Logger.engagement);
    v89 = Logger.logObject.getter();
    v90 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v91 = 0;
      _os_log_impl(&dword_218F54000, v89, v90, "There is no specific PSE signals is available for supported domains for SELF Logging. Submit as Generic PSE (with/without App Launch info)", v91, 2u);
      MEMORY[0x219A27C8C](v91, -1, -1);
    }

    specialized PSESELFEmitter.applyMissingDonationMonitor(task:)(a2);
    type metadata accessor for PSEGenericSELFEmitter();
    swift_allocObject();
    PSEGenericSELFEmitter.emitPSEGeneric(appLaunchSignals:task:)(v2, a2);
    swift_release();
    goto LABEL_205;
  }
  v11 = v10;
  v12 = objc_msgSend(v10, sel_effectiveBoolValueForSetting_, *MEMORY[0x24BE638E0]);

  if (v12 != 1)
  {
    if (one-time initialization token for engagement != -1)
      goto LABEL_177;
    goto LABEL_28;
  }
  v98 = (_QWORD *)a2;
  v103 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_60;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v13)
  {
LABEL_61:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v32 = MEMORY[0x24BEE4AF8];
    v97 = (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE4AF8];
    goto LABEL_62;
  }
LABEL_5:
  if (v13 < 1)
  {
    __break(1u);
    __break(1u);
    goto LABEL_184;
  }
  v14 = 0;
  v5 = 0x636E75614C707041;
  v7 = a1 & 0xC000000000000001;
  v6 = 0xE400000000000000;
  do
  {
    if (v7)
    {
      v15 = MEMORY[0x219A2756C](v14, a1);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 8 * v14 + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(_QWORD *)v15 + 144))() == 0x636E75614C707041 && v16 == 0xE900000000000068)
    {
      v18 = swift_bridgeObjectRelease();
    }
    else
    {
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v18 = swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
        goto LABEL_7;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 168))(v18) == 1769105747 && v19 == 0xE400000000000000)
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v21 = swift_bridgeObjectRelease();
      if ((v3 & 1) != 0
        || ((*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v15 + 120))(&v100, v21),
            *((double *)&v100 + 1) > 30.0))
      {
LABEL_7:
        swift_release();
        goto LABEL_8;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v3 = *(_QWORD *)(v103 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
LABEL_8:
    ++v14;
  }
  while (v13 != v14);
  swift_bridgeObjectRelease();
  v97 = (uint64_t (*)(_QWORD, _QWORD))v103;
  v103 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v25 = 0;
  v4 = a1 & 0xFFFFFFFFFFFFFF8;
  while (!v7)
  {
    if (v25 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_60:
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      if (!v13)
        goto LABEL_61;
      goto LABEL_5;
    }
    v5 = *(_QWORD *)(a1 + 8 * v25 + 32);
    swift_retain();
    v3 = v25 + 1;
    if (__OFADD__(v25, 1))
      goto LABEL_57;
LABEL_35:
    if ((*(uint64_t (**)(void))(*(_QWORD *)v5 + 144))() == 0x736C6C6143 && v26 == 0xE500000000000000)
    {
      v28 = swift_bridgeObjectRelease();
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v28 = swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        goto LABEL_52;
    }
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v28);
    if (*(_QWORD *)(v29 + 16)
      && (v30 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000218FBF020),
          (v31 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v29 + 56) + 32 * v30, (uint64_t)&v100);
    }
    else
    {
      v100 = 0u;
      v101 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v101 + 1))
    {
      outlined destroy of Any?((uint64_t)&v100);
LABEL_52:
      swift_release();
      goto LABEL_53;
    }
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_52;
    if ((v102 & 1) == 0)
      goto LABEL_52;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v5 + 120))(&v100);
    if (*((double *)&v100 + 1) > 30.0)
      goto LABEL_52;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    v6 = *(_QWORD *)(v103 + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_53:
    ++v25;
    if (v3 == v13)
      goto LABEL_58;
  }
  v5 = MEMORY[0x219A2756C](v25, a1);
  v3 = v25 + 1;
  if (!__OFADD__(v25, 1))
    goto LABEL_35;
LABEL_57:
  __break(1u);
LABEL_58:
  v32 = v103;
LABEL_62:
  swift_bridgeObjectRelease();
  v103 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  if (!v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x24BEE4AF8];
    v5 = MEMORY[0x24BEE4AF8];
    v7 = MEMORY[0x24BEE4AF8];
    v3 = MEMORY[0x24BEE4AF8];
    v6 = MEMORY[0x24BEE4AF8];
    goto LABEL_171;
  }
  v96 = v32;
  v33 = 0;
  v34 = a1 & 0xC000000000000001;
  while (2)
  {
    if (v34)
    {
      v35 = MEMORY[0x219A2756C](v33, a1);
      v36 = v33 + 1;
      if (!__OFADD__(v33, 1))
        goto LABEL_67;
LABEL_89:
      __break(1u);
LABEL_90:
      v44 = v103;
      swift_bridgeObjectRelease();
      v103 = MEMORY[0x24BEE4AF8];
      v95 = v44;
      swift_bridgeObjectRetain();
      v45 = 0;
      while (2)
      {
        if (v34)
        {
          v46 = MEMORY[0x219A2756C](v45, a1);
        }
        else
        {
          v46 = *(_QWORD *)(a1 + 8 * v45 + 32);
          swift_retain();
        }
        if ((*(uint64_t (**)(void))(*(_QWORD *)v46 + 144))() != 1936744781 || v47 != 0xE400000000000000)
        {
          v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v50 = swift_bridgeObjectRelease();
          if ((v49 & 1) != 0)
            goto LABEL_104;
          goto LABEL_92;
        }
        v50 = swift_bridgeObjectRelease();
LABEL_104:
        v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 216))(v50);
        if (*(_QWORD *)(v51 + 16)
          && (v52 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000218FBF020),
              (v53 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v51 + 56) + 32 * v52, (uint64_t)&v100);
        }
        else
        {
          v100 = 0u;
          v101 = 0u;
        }
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v101 + 1))
        {
          outlined destroy of Any?((uint64_t)&v100);
          goto LABEL_92;
        }
        if ((swift_dynamicCast() & 1) != 0 && (v102 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
LABEL_92:
          swift_release();
        }
        if (v13 != ++v45)
          continue;
        break;
      }
      swift_bridgeObjectRelease();
      v94 = v103;
      v103 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      v54 = 0;
      while (2)
      {
        if (v34)
        {
          v55 = MEMORY[0x219A2756C](v54, a1);
        }
        else
        {
          v55 = *(_QWORD *)(a1 + 8 * v54 + 32);
          swift_retain();
        }
        if ((*(uint64_t (**)(void))(*(_QWORD *)v55 + 144))() == 0x6F747541656D6F48 && v56 == 0xEE006E6F6974616DLL)
        {
          v59 = swift_bridgeObjectRelease();
          goto LABEL_125;
        }
        v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v59 = swift_bridgeObjectRelease();
        if ((v58 & 1) != 0)
        {
LABEL_125:
          (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v55 + 120))(&v100, v59);
          if (*((double *)&v100 + 1) <= 30.0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
LABEL_114:
            if (v13 != ++v54)
              continue;
            swift_bridgeObjectRelease();
            v93 = v103;
            v103 = MEMORY[0x24BEE4AF8];
            swift_bridgeObjectRetain();
            v60 = 0;
            while (2)
            {
              if (v34)
              {
                v61 = MEMORY[0x219A2756C](v60, a1);
              }
              else
              {
                v61 = *(_QWORD *)(a1 + 8 * v60 + 32);
                swift_retain();
              }
              if ((*(uint64_t (**)(void))(*(_QWORD *)v61 + 144))() == 0x6D72616C41 && v62 == 0xE500000000000000)
              {
                v65 = swift_bridgeObjectRelease();
                goto LABEL_140;
              }
              v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v65 = swift_bridgeObjectRelease();
              if ((v64 & 1) != 0)
              {
LABEL_140:
                (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v61 + 120))(&v100, v65);
                if (*((double *)&v100 + 1) <= 30.0)
                {
                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized ContiguousArray._endMutation()();
LABEL_129:
                  if (v13 != ++v60)
                    continue;
                  swift_bridgeObjectRelease();
                  v92 = v103;
                  v103 = MEMORY[0x24BEE4AF8];
                  swift_bridgeObjectRetain();
                  v66 = 0;
                  while (2)
                  {
                    if (!v34)
                    {
                      if (v66 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
                        goto LABEL_176;
                      v67 = *(_QWORD *)(a1 + 8 * v66 + 32);
                      swift_retain();
                      v68 = v66 + 1;
                      if (!__OFADD__(v66, 1))
                        goto LABEL_146;
LABEL_168:
                      __break(1u);
LABEL_169:
                      v6 = v103;
                      v3 = v95;
                      v32 = v96;
                      v5 = v93;
                      v4 = v94;
                      v7 = v92;
LABEL_171:
                      swift_bridgeObjectRelease();
                      if ((v32 & 0x8000000000000000) != 0 || (v32 & 0x4000000000000000) != 0)
                      {
                        swift_bridgeObjectRetain();
                        v76 = _CocoaArrayWrapper.endIndex.getter();
                        swift_release();
                        if (v76 <= 0)
                          goto LABEL_179;
LABEL_174:
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        type metadata accessor for PSEPhoneCallSELFEmitter();
                        swift_allocObject();
                        PSEPhoneCallSELFEmitter.emitPSEPhoneCall(phoneCallSignals:appLaunchSignals:task:)(v32, (unint64_t)v97, (uint64_t)v98);
                        swift_release();
                        goto LABEL_204;
                      }
                      if (*(uint64_t *)(v32 + 16) > 0)
                        goto LABEL_174;
LABEL_179:
                      swift_release();
                      if ((v3 & 0x8000000000000000) == 0 && (v3 & 0x4000000000000000) == 0)
                      {
                        if (*(uint64_t *)(v3 + 16) >= 1)
                          goto LABEL_182;
LABEL_185:
                        swift_release();
                        if ((v4 & 0x8000000000000000) != 0 || (v4 & 0x4000000000000000) != 0)
                        {
                          swift_bridgeObjectRetain();
                          v78 = _CocoaArrayWrapper.endIndex.getter();
                          swift_release();
                          if (v78 < 1)
                            goto LABEL_190;
LABEL_188:
                          swift_release();
                          swift_release();
                          swift_release();
                          type metadata accessor for PSEGeoSELFEmitter();
                          swift_allocObject();
                          PSEGeoSELFEmitter.emitPSEGeo(geoSignals:appLaunchSignals:task:)(v4, v97, (uint64_t)v98);
                          swift_release();
                        }
                        else
                        {
                          if (*(uint64_t *)(v4 + 16) >= 1)
                            goto LABEL_188;
LABEL_190:
                          swift_release();
                          if ((v5 & 0x8000000000000000) != 0 || (v5 & 0x4000000000000000) != 0)
                          {
                            swift_bridgeObjectRetain();
                            v79 = _CocoaArrayWrapper.endIndex.getter();
                            swift_release();
                            if (v79 < 1)
                              goto LABEL_195;
LABEL_193:
                            swift_release();
                            swift_release();
                            type metadata accessor for PSEHomeSELFEmitter();
                            swift_allocObject();
                            PSEHomeSELFEmitter.emitPSEHome(homeSignals:appLaunchSignals:task:)(v5, (unint64_t)v97, (uint64_t)v98);
                            swift_release();
                          }
                          else
                          {
                            if (*(uint64_t *)(v5 + 16) >= 1)
                              goto LABEL_193;
LABEL_195:
                            swift_release();
                            if ((v7 & 0x8000000000000000) != 0 || (v7 & 0x4000000000000000) != 0)
                            {
                              swift_bridgeObjectRetain();
                              v80 = _CocoaArrayWrapper.endIndex.getter();
                              swift_release();
                              if (v80 < 1)
                                goto LABEL_200;
LABEL_198:
                              swift_release();
                              type metadata accessor for PSEAlarmSELFEmitter();
                              swift_allocObject();
                              PSEAlarmSELFEmitter.emitPSEAlarm(alarmSignals:appLaunchSignals:task:)((uint64_t (*)(_QWORD, _QWORD))v7, (unint64_t)v97, v98);
                              swift_release();
                            }
                            else
                            {
                              if (*(uint64_t *)(v7 + 16) >= 1)
                                goto LABEL_198;
LABEL_200:
                              swift_release();
                              if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
                              {
                                if (*(uint64_t *)(v6 + 16) >= 1)
                                  goto LABEL_203;
LABEL_207:
                                swift_release();
                                swift_release();
                                v103 = MEMORY[0x24BEE4AF8];
                                if (v13)
                                {
                                  if (v13 < 1)
                                  {
                                    __break(1u);
                                    return;
                                  }
                                  swift_bridgeObjectRetain();
                                  v82 = 0;
                                  while (1)
                                  {
                                    if ((a1 & 0xC000000000000001) != 0)
                                    {
                                      v83 = MEMORY[0x219A2756C](v82, a1);
                                    }
                                    else
                                    {
                                      v83 = *(_QWORD *)(a1 + 8 * v82 + 32);
                                      swift_retain();
                                    }
                                    if ((*(uint64_t (**)(void))(*(_QWORD *)v83 + 144))() == 0x636E75614C707041
                                      && v84 == 0xE900000000000068)
                                    {
                                      v87 = swift_bridgeObjectRelease();
                                    }
                                    else
                                    {
                                      v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      v87 = swift_bridgeObjectRelease();
                                      if ((v86 & 1) == 0)
                                        goto LABEL_210;
                                    }
                                    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v83 + 120))(&v100, v87);
                                    if (*((double *)&v100 + 1) <= 30.0)
                                    {
                                      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                                      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                                      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                                      specialized ContiguousArray._endMutation()();
                                      goto LABEL_211;
                                    }
LABEL_210:
                                    swift_release();
LABEL_211:
                                    if (v13 == ++v82)
                                    {
                                      swift_bridgeObjectRelease();
                                      v2 = v103;
                                      goto LABEL_226;
                                    }
                                  }
                                }
                                v2 = MEMORY[0x24BEE4AF8];
LABEL_226:
                                a2 = (uint64_t)v98;
                                if (one-time initialization token for engagement == -1)
                                  goto LABEL_227;
                                goto LABEL_231;
                              }
                              swift_bridgeObjectRetain();
                              v81 = _CocoaArrayWrapper.endIndex.getter();
                              swift_release();
                              if (v81 < 1)
                                goto LABEL_207;
LABEL_203:
                              type metadata accessor for PSEMediaSELFEmitter();
                              swift_allocObject();
                              PSEMediaSELFEmitter.emitPSEMedia(mediaSignals:appLaunchSignals:task:)((uint64_t (*)(_QWORD, _QWORD))v6, (unint64_t)v97, (uint64_t)v98);
                              swift_release();
                            }
                          }
                        }
LABEL_204:
                        swift_release();
LABEL_205:
                        swift_release();
                        return;
                      }
LABEL_184:
                      swift_bridgeObjectRetain();
                      v77 = _CocoaArrayWrapper.endIndex.getter();
                      swift_release();
                      if (v77 < 1)
                        goto LABEL_185;
LABEL_182:
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      type metadata accessor for PSESMSSELFEmitter();
                      swift_allocObject();
                      PSESMSSELFEmitter.emitPSESMS(smsSignals:appLaunchSignals:task:)(v3, (unint64_t)v97, v98);
                      swift_release();
                      goto LABEL_204;
                    }
                    v67 = MEMORY[0x219A2756C](v66, a1);
                    v68 = v66 + 1;
                    if (__OFADD__(v66, 1))
                      goto LABEL_168;
LABEL_146:
                    if ((*(uint64_t (**)(void))(*(_QWORD *)v67 + 144))() == 0x636973754DLL
                      && v69 == 0xE500000000000000)
                    {
                      v72 = swift_bridgeObjectRelease();
                    }
                    else
                    {
                      v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      v72 = swift_bridgeObjectRelease();
                      if ((v71 & 1) == 0)
                        goto LABEL_163;
                    }
                    v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 216))(v72);
                    if (*(_QWORD *)(v73 + 16)
                      && (v74 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000218FBF020), (v75 & 1) != 0))
                    {
                      outlined init with copy of Any(*(_QWORD *)(v73 + 56) + 32 * v74, (uint64_t)&v100);
                    }
                    else
                    {
                      v100 = 0u;
                      v101 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((_QWORD *)&v101 + 1))
                    {
                      if ((swift_dynamicCast() & 1) != 0 && (v102 & 1) != 0)
                      {
                        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v67 + 120))(&v100);
                        if (*((double *)&v100 + 1) <= 30.0)
                        {
                          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                          specialized ContiguousArray._endMutation()();
                          goto LABEL_164;
                        }
                      }
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v100);
                    }
LABEL_163:
                    swift_release();
LABEL_164:
                    ++v66;
                    if (v68 == v13)
                      goto LABEL_169;
                    continue;
                  }
                }
              }
              break;
            }
            swift_release();
            goto LABEL_129;
          }
        }
        break;
      }
      swift_release();
      goto LABEL_114;
    }
    if (v33 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      v35 = *(_QWORD *)(a1 + 8 * v33 + 32);
      swift_retain();
      v36 = v33 + 1;
      if (__OFADD__(v33, 1))
        goto LABEL_89;
LABEL_67:
      if ((*(uint64_t (**)(void))(*(_QWORD *)v35 + 144))() == 0x736567617373654DLL && v37 == 0xE800000000000000)
      {
        v40 = swift_bridgeObjectRelease();
      }
      else
      {
        v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v40 = swift_bridgeObjectRelease();
        if ((v39 & 1) == 0)
          goto LABEL_84;
      }
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 216))(v40);
      if (*(_QWORD *)(v41 + 16)
        && (v42 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000218FBF020),
            (v43 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v41 + 56) + 32 * v42, (uint64_t)&v100);
      }
      else
      {
        v100 = 0u;
        v101 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v101 + 1))
      {
        outlined destroy of Any?((uint64_t)&v100);
        goto LABEL_84;
      }
      if ((swift_dynamicCast() & 1) != 0
        && (v102 & 1) != 0
        && ((*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v35 + 120))(&v100),
            *((double *)&v100 + 1) <= 30.0))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
LABEL_84:
        swift_release();
      }
      ++v33;
      if (v36 == v13)
        goto LABEL_90;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  swift_once();
LABEL_28:
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.engagement);
  oslog = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_218F54000, oslog, v23, "D&U is not allowed.", v24, 2u);
    MEMORY[0x219A27C8C](v24, -1, -1);
  }

}

uint64_t type metadata accessor for PSESELFEmitter()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSESELFEmitter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSESELFEmitter.emitPSESELFInstrumentation(signals:task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSESiriEngagementTaskSuccess(taskSuccess:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSEDonationSource(pseDonationSource:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSETriggerOrigin()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSEAppFollowup(appLaunchBundleId:taskAppPattern:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSEAppFollowupForMaps(appLaunchBundleId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PSESELFEmitter.getPSEAppLaunchReason(reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PSESELFEmitter.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

const char *SignalFactoryConstants.donatedBySiriKey.unsafeMutableAddressor()
{
  return "donatedBySiri";
}

void *SignalFactoryConstants.appLaunchBundleId.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.appLaunchBundleId;
}

const char *SignalFactoryConstants.mediaPlayDurationKey.unsafeMutableAddressor()
{
  return "playDuration";
}

void *SignalFactoryConstants.mediaContentDurationKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.mediaContentDurationKey;
}

void *SignalFactoryConstants.donatedByFirstPartyAppKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.donatedByFirstPartyAppKey;
}

const char *SignalFactoryConstants.mediaIsAirPlayKey.unsafeMutableAddressor()
{
  return "isAirPlay";
}

void *SignalFactoryConstants.mediaITunesSubscriptionKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.mediaITunesSubscriptionKey;
}

const char *SignalFactoryConstants.mediaTypeKey.unsafeMutableAddressor()
{
  return "mediaType";
}

const char *SignalFactoryConstants.mediaSourceKey.unsafeMutableAddressor()
{
  return "source";
}

const char *SignalFactoryConstants.mediaTitleKey.unsafeMutableAddressor()
{
  return "title";
}

const char *SignalFactoryConstants.mediaArtistKey.unsafeMutableAddressor()
{
  return "artist";
}

const char *SignalFactoryConstants.mediaAlbumKey.unsafeMutableAddressor()
{
  return "album";
}

const char *SignalFactoryConstants.mediaITunesStoreIdKey.unsafeMutableAddressor()
{
  return "iTunesStoreId";
}

void *SignalFactoryConstants.EMPTY.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.EMPTY;
}

const char *DomainsConstants.musicDomain.unsafeMutableAddressor()
{
  return "Music";
}

void *SignalFactoryConstants.minimumMediaContentLength.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.minimumMediaContentLength;
}

const char *SignalFactoryConstants.appleMusic1RadioStationKey.unsafeMutableAddressor()
{
  return "Apple Music 1";
}

void *SignalFactoryConstants.appleMusicBundleID.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.appleMusicBundleID;
}

const char *SignalFactoryConstants.mediaGenreKey.unsafeMutableAddressor()
{
  return "genre";
}

const char *SignalFactoryConstants.mediaElapsedKey.unsafeMutableAddressor()
{
  return "elapsed";
}

const char *TaskTypeConstants.sageTask.unsafeMutableAddressor()
{
  return "sage task";
}

const char *SignalFactoryConstants.noneKey.unsafeMutableAddressor()
{
  return "none";
}

const char *SignalFactoryConstants.currentTaskKey.unsafeMutableAddressor()
{
  return "currenttask";
}

const char *SignalFactoryConstants.unparsedIntentKey.unsafeMutableAddressor()
{
  return "unparsedintent";
}

const char *SignalFactoryConstants.UnknownParseKey.unsafeMutableAddressor()
{
  return "unknown parse";
}

const char *SignalFactoryConstants.siriKey.unsafeMutableAddressor()
{
  return "Siri";
}

const char *TaskTypeConstants.mapsIntentType.unsafeMutableAddressor()
{
  return "maps";
}

const char *SignalFactoryConstants.serviceTypeKey.unsafeMutableAddressor()
{
  return "serviceType";
}

void *SignalFactoryConstants.accessoryUniqueIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.accessoryUniqueIdentifierKey;
}

void *SignalFactoryConstants.characteristicTypeKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.characteristicTypeKey;
}

void *SignalFactoryConstants.accessoryStateNumberKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.accessoryStateNumberKey;
}

const char *SignalFactoryConstants.accessoryClientNameKey.unsafeMutableAddressor()
{
  return "clientName";
}

const char *SignalFactoryConstants.homeAppIdentifier.unsafeMutableAddressor()
{
  return "com.apple.Home";
}

void *SignalFactoryConstants.nanoHomeAppIdentifier.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.nanoHomeAppIdentifier;
}

void *SignalFactoryConstants.roomUniqueIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.roomUniqueIdentifierKey;
}

void *SignalFactoryConstants.zoneUniqueIdentifiersKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.zoneUniqueIdentifiersKey;
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_218FA1DF0()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void *SignalFactoryConstants.alarmIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.alarmIdentifierKey;
}

const char *SignalFactoryConstants.intentTypeKey.unsafeMutableAddressor()
{
  return "intentTypeName";
}

const char *DomainsConstants.alarmsDomain.unsafeMutableAddressor()
{
  return "Alarm";
}

void *TaskTypeConstants.sendMessageIntentType.unsafeMutableAddressor()
{
  return &static TaskTypeConstants.sendMessageIntentType;
}

void *TaskTypeConstants.startCallIntentType.unsafeMutableAddressor()
{
  return &static TaskTypeConstants.startCallIntentType;
}

void *TaskTypeConstants.startAudioCallIntentType.unsafeMutableAddressor()
{
  return &static TaskTypeConstants.startAudioCallIntentType;
}

void *TaskTypeConstants.startVideoCallIntentType.unsafeMutableAddressor()
{
  return &static TaskTypeConstants.startVideoCallIntentType;
}

const char *TaskTypeConstants.genericIntentType.unsafeMutableAddressor()
{
  return "genericintent";
}

const char *DomainsConstants.calendarDomain.unsafeMutableAddressor()
{
  return "Calendar";
}

const char *DomainsConstants.callsDomain.unsafeMutableAddressor()
{
  return "Calls";
}

const char *SignalFactoryConstants.callDurationKey.unsafeMutableAddressor()
{
  return "callDuration";
}

const char *SignalFactoryConstants.callAudioRouteKey.unsafeMutableAddressor()
{
  return "audioRoute";
}

void *SignalFactoryConstants.callTimeToEstablishInSecondsKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.callTimeToEstablishInSecondsKey;
}

void *SignalFactoryConstants.callRecentCallStatusKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.callRecentCallStatusKey;
}

void *SignalFactoryConstants.callDisconnectedReasonKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.callDisconnectedReasonKey;
}

const char *SignalFactoryConstants.callContactsKey.unsafeMutableAddressor()
{
  return "contacts";
}

const char *SignalFactoryConstants.contactsValueKey.unsafeMutableAddressor()
{
  return "contactsValue";
}

void *SignalFactoryConstants.contactsDisplayNameKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.contactsDisplayNameKey;
}

void *SignalFactoryConstants.contactsFirstNameKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.contactsFirstNameKey;
}

void *SignalFactoryConstants.contactsLastNameKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.contactsLastNameKey;
}

void *SignalFactoryConstants.intentResponseIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.intentResponseIdentifierKey;
}

void *SignalFactoryConstants.unsendMessageIdentifiersKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.unsendMessageIdentifiersKey;
}

const char *DomainsConstants.messagesDomain.unsafeMutableAddressor()
{
  return "Messages";
}

void *SignalFactoryConstants.interactionDirectionKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.interactionDirectionKey;
}

void *SignalFactoryConstants.intentResponseCodeKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.intentResponseCodeKey;
}

const char *SignalFactoryConstants.messageRecipientsKey.unsafeMutableAddressor()
{
  return "recipients";
}

void *SignalFactoryConstants.messageIdentifiersKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.messageIdentifiersKey;
}

const char *DomainsConstants.appLaunchDomain.unsafeMutableAddressor()
{
  return "AppLaunch";
}

const char *DomainsConstants.mapsDomain.unsafeMutableAddressor()
{
  return "Maps";
}

const char *SignalFactoryConstants.show.unsafeMutableAddressor()
{
  return "Show";
}

const char *SignalFactoryConstants.placeCardTap.unsafeMutableAddressor()
{
  return "PlaceCardTap";
}

const char *SignalFactoryConstants.navigation.unsafeMutableAddressor()
{
  return "Navigation";
}

const char *SignalFactoryConstants.navigationTypeKey.unsafeMutableAddressor()
{
  return "navigationType";
}

const char *SignalFactoryConstants.continueKey.unsafeMutableAddressor()
{
  return "Continue";
}

void *SignalFactoryConstants.deleteAlarmIntentKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.deleteAlarmIntentKey;
}

const char *SignalFactoryConstants.appLaunchHomescreen.unsafeMutableAddressor()
{
  return "Homescreen";
}

const char *SignalFactoryConstants.appLaunchOther.unsafeMutableAddressor()
{
  return "Other";
}

void *SignalFactoryConstants.appLaunchDuration.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.appLaunchDuration;
}

void *SignalFactoryConstants.siriApplicationId.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.siriApplicationId;
}

void *SignalFactoryConstants.deltaMissingObjectErrorCode.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.deltaMissingObjectErrorCode;
}

const char *SignalFactoryConstants.firstPartyAppBundleId.unsafeMutableAddressor()
{
  return "com.apple.";
}

const char *SignalFactoryConstants.accessorySourceKey.unsafeMutableAddressor()
{
  return "source";
}

const char *SignalFactoryConstants.thirdPartyKey.unsafeMutableAddressor()
{
  return "ThirdParty";
}

const char *DomainsConstants.homeAutomationDomain.unsafeMutableAddressor()
{
  return "HomeAutomation";
}

const char *SignalFactoryConstants.homeAutomationAction.unsafeMutableAddressor()
{
  return "ControlHome";
}

void *SignalFactoryConstants.HomeKitCharacteristic_ON.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.HomeKitCharacteristic_ON;
}

void *SignalFactoryConstants.HomeKitCharacteristic_ACTIVE.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.HomeKitCharacteristic_ACTIVE;
}

uint64_t static SignalFactoryConstants.EMPTY.getter()
{
  return 0;
}

double static SignalFactoryConstants.minimumMediaContentLength.getter()
{
  return 1.0;
}

double static SignalFactoryConstants.deltaMissingObjectErrorCode.getter()
{
  return 1.0;
}

uint64_t static SignalFactoryConstants.firstPartyAppBundleId.getter()
{
  return 0x6C7070612E6D6F63;
}

void *SignalFactoryConstants.assistantServicesKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.assistantServicesKey;
}

unint64_t static SignalFactoryConstants.assistantServicesKey.getter()
{
  return 0xD000000000000011;
}

uint64_t static SignalFactoryConstants.siriKey.getter()
{
  return 1769105747;
}

uint64_t static SignalFactoryConstants.thirdPartyKey.getter()
{
  return 0x7261506472696854;
}

uint64_t static SignalFactoryConstants.noneKey.getter()
{
  return 1701736302;
}

uint64_t static SignalFactoryConstants.donatedBySiriKey.getter()
{
  return 0x42646574616E6F64;
}

uint64_t static SignalFactoryConstants.intentTypeKey.getter()
{
  return 0x7954746E65746E69;
}

unint64_t static SignalFactoryConstants.intentResponseCodeKey.getter()
{
  return 0xD000000000000012;
}

unint64_t static SignalFactoryConstants.intentResponseIdentifierKey.getter()
{
  return 0xD000000000000018;
}

unint64_t static SignalFactoryConstants.donatedByFirstPartyAppKey.getter()
{
  return 0xD000000000000016;
}

unint64_t static SignalFactoryConstants.interactionDirectionKey.getter()
{
  return 0xD000000000000014;
}

void *SignalFactoryConstants.intentHandlingStatusKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.intentHandlingStatusKey;
}

unint64_t static SignalFactoryConstants.intentHandlingStatusKey.getter()
{
  return 0xD000000000000014;
}

uint64_t static SignalFactoryConstants.callDurationKey.getter()
{
  return 0x617275446C6C6163;
}

unint64_t static SignalFactoryConstants.callTimeToEstablishInSecondsKey.getter()
{
  return 0xD000000000000018;
}

unint64_t static SignalFactoryConstants.callRecentCallStatusKey.getter()
{
  return 0xD000000000000010;
}

unint64_t static SignalFactoryConstants.callDisconnectedReasonKey.getter()
{
  return 0xD000000000000012;
}

uint64_t static SignalFactoryConstants.callAudioRouteKey.getter()
{
  return 0x756F526F69647561;
}

uint64_t static SignalFactoryConstants.callContactsKey.getter()
{
  return 0x73746361746E6F63;
}

uint64_t static SignalFactoryConstants.contactsValueKey.getter()
{
  return 0x73746361746E6F63;
}

unint64_t static SignalFactoryConstants.contactsDisplayNameKey.getter()
{
  return 0xD000000000000013;
}

unint64_t static SignalFactoryConstants.contactsFirstNameKey.getter()
{
  return 0xD000000000000011;
}

unint64_t static SignalFactoryConstants.contactsLastNameKey.getter()
{
  return 0xD000000000000010;
}

uint64_t static SignalFactoryConstants.messageRecipientsKey.getter()
{
  return 0x6E65697069636572;
}

unint64_t static SignalFactoryConstants.messageIdentifiersKey.getter()
{
  return 0xD000000000000012;
}

unint64_t static SignalFactoryConstants.unsendMessageIdentifiersKey.getter()
{
  return 0xD000000000000018;
}

uint64_t static SignalFactoryConstants.appLaunchHomescreen.getter()
{
  return 0x65726373656D6F48;
}

uint64_t static SignalFactoryConstants.appLaunchOther.getter()
{
  return 0x726568744FLL;
}

unint64_t static SignalFactoryConstants.appLaunchBundleId.getter()
{
  return 0xD000000000000011;
}

unint64_t static SignalFactoryConstants.appLaunchDuration.getter()
{
  return 0xD000000000000011;
}

uint64_t static SignalFactoryConstants.appleMusicBundleID.getter()
{
  return 0x6C7070612E6D6F63;
}

uint64_t static SignalFactoryConstants.mediaSourceKey.getter()
{
  return 0x656372756F73;
}

uint64_t static SignalFactoryConstants.mediaITunesStoreIdKey.getter()
{
  return 0x745373656E755469;
}

unint64_t static SignalFactoryConstants.mediaContentDurationKey.getter()
{
  return 0xD000000000000014;
}

uint64_t static SignalFactoryConstants.mediaPlayDurationKey.getter()
{
  return 0x6172754479616C70;
}

uint64_t static SignalFactoryConstants.mediaTitleKey.getter()
{
  return 0x656C746974;
}

uint64_t static SignalFactoryConstants.mediaArtistKey.getter()
{
  return 0x747369747261;
}

uint64_t static SignalFactoryConstants.mediaAlbumKey.getter()
{
  return 0x6D75626C61;
}

uint64_t static SignalFactoryConstants.mediaGenreKey.getter()
{
  return 0x65726E6567;
}

uint64_t static SignalFactoryConstants.mediaElapsedKey.getter()
{
  return 0x64657370616C65;
}

unint64_t static SignalFactoryConstants.mediaITunesSubscriptionKey.getter()
{
  return 0xD000000000000012;
}

uint64_t static SignalFactoryConstants.mediaIsAirPlayKey.getter()
{
  return 0x616C507269417369;
}

uint64_t static SignalFactoryConstants.mediaTypeKey.getter()
{
  return 0x707954616964656DLL;
}

uint64_t static SignalFactoryConstants.appleMusic1RadioStationKey.getter()
{
  return 0x754D20656C707041;
}

uint64_t static SignalFactoryConstants.unparsedIntentKey.getter()
{
  return 0x6465737261706E75;
}

uint64_t static SignalFactoryConstants.currentTaskKey.getter()
{
  return 0x74746E6572727563;
}

uint64_t static SignalFactoryConstants.UnknownParseKey.getter()
{
  return 0x206E776F6E6B6E75;
}

unint64_t static SignalFactoryConstants.accessoryUniqueIdentifierKey.getter()
{
  return 0xD000000000000019;
}

unint64_t static SignalFactoryConstants.accessoryStateNumberKey.getter()
{
  return 0xD000000000000014;
}

uint64_t static SignalFactoryConstants.accessorySourceKey.getter()
{
  return 0x656372756F73;
}

uint64_t static SignalFactoryConstants.accessoryClientNameKey.getter()
{
  return 0x614E746E65696C63;
}

unint64_t static SignalFactoryConstants.roomUniqueIdentifierKey.getter()
{
  return 0xD000000000000014;
}

unint64_t static SignalFactoryConstants.zoneUniqueIdentifiersKey.getter()
{
  return 0xD000000000000015;
}

uint64_t static SignalFactoryConstants.serviceTypeKey.getter()
{
  return 0x5465636976726573;
}

uint64_t static SignalFactoryConstants.homeAutomationAction.getter()
{
  return 0x486C6F72746E6F43;
}

unint64_t static SignalFactoryConstants.characteristicTypeKey.getter()
{
  return 0xD000000000000012;
}

uint64_t static SignalFactoryConstants.homeAppIdentifier.getter()
{
  return 0x6C7070612E6D6F63;
}

unint64_t static SignalFactoryConstants.nanoHomeAppIdentifier.getter()
{
  return 0xD000000000000012;
}

unint64_t static SignalFactoryConstants.HomeKitCharacteristic_ON.getter()
{
  return 0xD000000000000024;
}

unint64_t static SignalFactoryConstants.HomeKitCharacteristic_ACTIVE.getter()
{
  return 0xD000000000000024;
}

const char *SignalFactoryConstants.actionTypeKey.unsafeMutableAddressor()
{
  return "actionType";
}

uint64_t static SignalFactoryConstants.actionTypeKey.getter()
{
  return 0x79546E6F69746361;
}

uint64_t static SignalFactoryConstants.navigationTypeKey.getter()
{
  return 0x697461676976616ELL;
}

void *SignalFactoryConstants.navigationIdentifierKey.unsafeMutableAddressor()
{
  return &static SignalFactoryConstants.navigationIdentifierKey;
}

unint64_t static SignalFactoryConstants.navigationIdentifierKey.getter()
{
  return 0xD000000000000014;
}

const char *SignalFactoryConstants.poiIdentifierKey.unsafeMutableAddressor()
{
  return "poiIdentifier";
}

uint64_t static SignalFactoryConstants.poiIdentifierKey.getter()
{
  return 0x746E656449696F70;
}

const char *SignalFactoryConstants.sourceKey.unsafeMutableAddressor()
{
  return "source";
}

uint64_t static SignalFactoryConstants.sourceKey.getter()
{
  return 0x656372756F73;
}

uint64_t static SignalFactoryConstants.placeCardTap.getter()
{
  return 0x7261436563616C50;
}

uint64_t static SignalFactoryConstants.show.getter()
{
  return 2003789907;
}

uint64_t static SignalFactoryConstants.navigation.getter()
{
  return 0x697461676976614ELL;
}

const char *SignalFactoryConstants.selectCategory.unsafeMutableAddressor()
{
  return "SelectCategory";
}

uint64_t static SignalFactoryConstants.selectCategory.getter()
{
  return 0x61437463656C6553;
}

const char *SignalFactoryConstants.resultListTap.unsafeMutableAddressor()
{
  return "ResultListTap";
}

uint64_t static SignalFactoryConstants.resultListTap.getter()
{
  return 0x694C746C75736552;
}

const char *SignalFactoryConstants.search.unsafeMutableAddressor()
{
  return "Search";
}

uint64_t static SignalFactoryConstants.search.getter()
{
  return 0x686372616553;
}

const char *SignalFactoryConstants.getNavigationStatus.unsafeMutableAddressor()
{
  return "GET_NAV_STATUS";
}

uint64_t static SignalFactoryConstants.getNavigationStatus.getter()
{
  return 0x5F56414E5F544547;
}

uint64_t static SignalFactoryConstants.continueKey.getter()
{
  return 0x65756E69746E6F43;
}

uint64_t static SignalFactoryConstants.alarmIdentifierKey.getter()
{
  return 0x6564496D72616C61;
}

unint64_t static SignalFactoryConstants.deleteAlarmIntentKey.getter()
{
  return 0xD000000000000011;
}

unint64_t static SignalFactoryConstants.siriApplicationId.getter()
{
  return 0xD00000000000001ELL;
}

const char *DomainsConstants.mediaDomain.unsafeMutableAddressor()
{
  return "Media";
}

uint64_t static DomainsConstants.mediaDomain.getter()
{
  return 0x616964654DLL;
}

uint64_t static DomainsConstants.musicDomain.getter()
{
  return 0x636973754DLL;
}

uint64_t static DomainsConstants.mapsDomain.getter()
{
  return 1936744781;
}

uint64_t static DomainsConstants.callsDomain.getter()
{
  return 0x736C6C6143;
}

uint64_t static DomainsConstants.messagesDomain.getter()
{
  return 0x736567617373654DLL;
}

uint64_t static DomainsConstants.calendarDomain.getter()
{
  return 0x7261646E656C6143;
}

uint64_t static DomainsConstants.appLaunchDomain.getter()
{
  return 0x636E75614C707041;
}

uint64_t static DomainsConstants.alarmsDomain.getter()
{
  return 0x6D72616C41;
}

uint64_t static DomainsConstants.homeAutomationDomain.getter()
{
  return 0x6F747541656D6F48;
}

uint64_t static TaskTypeConstants.startCallIntentType.getter()
{
  return 0x6C61637472617473;
}

unint64_t static TaskTypeConstants.startAudioCallIntentType.getter()
{
  return 0xD000000000000014;
}

unint64_t static TaskTypeConstants.startVideoCallIntentType.getter()
{
  return 0xD000000000000014;
}

unint64_t static TaskTypeConstants.sendMessageIntentType.getter()
{
  return 0xD000000000000011;
}

uint64_t static TaskTypeConstants.mapsIntentType.getter()
{
  return 1936744813;
}

uint64_t static TaskTypeConstants.genericIntentType.getter()
{
  return 0x69636972656E6567;
}

uint64_t static TaskTypeConstants.sageTask.getter()
{
  return 0x7361742065676173;
}

void *static SynapseTypesAlarmRelatedConstants.allCases.getter()
{
  return &outlined read-only object #0 of static SynapseTypesAlarmRelatedConstants.allCases.getter;
}

uint64_t SynapseTypesAlarmRelatedConstants.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_218FA2B3C + 4 * byte_218FBE364[a1]))(0xD00000000000005ELL, 0x8000000218FBED20);
}

unint64_t sub_218FA2B3C()
{
  return 0xD00000000000005DLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SynapseTypesAlarmRelatedConstants(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = SynapseTypesAlarmRelatedConstants.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == SynapseTypesAlarmRelatedConstants.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SynapseTypesAlarmRelatedConstants()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  SynapseTypesAlarmRelatedConstants.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SynapseTypesAlarmRelatedConstants(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SynapseTypesAlarmRelatedConstants()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  SynapseTypesAlarmRelatedConstants.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SynapseTypesAlarmRelatedConstants@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SynapseTypesAlarmRelatedConstants.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SynapseTypesAlarmRelatedConstants@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = SynapseTypesAlarmRelatedConstants.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SynapseTypesAlarmRelatedConstants(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance SynapseTypesAlarmRelatedConstants;
}

unint64_t specialized SynapseTypesAlarmRelatedConstants.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SynapseTypesAlarmRelatedConstants.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type SynapseTypesAlarmRelatedConstants and conformance SynapseTypesAlarmRelatedConstants()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SynapseTypesAlarmRelatedConstants and conformance SynapseTypesAlarmRelatedConstants;
  if (!lazy protocol witness table cache variable for type SynapseTypesAlarmRelatedConstants and conformance SynapseTypesAlarmRelatedConstants)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for SynapseTypesAlarmRelatedConstants, &type metadata for SynapseTypesAlarmRelatedConstants);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SynapseTypesAlarmRelatedConstants and conformance SynapseTypesAlarmRelatedConstants);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SynapseTypesAlarmRelatedConstants] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [SynapseTypesAlarmRelatedConstants] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SynapseTypesAlarmRelatedConstants] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SynapseTypesAlarmRelatedConstants]);
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SynapseTypesAlarmRelatedConstants] and conformance [A]);
  }
  return result;
}

ValueMetadata *type metadata accessor for SignalFactoryConstants()
{
  return &type metadata for SignalFactoryConstants;
}

ValueMetadata *type metadata accessor for DomainsConstants()
{
  return &type metadata for DomainsConstants;
}

ValueMetadata *type metadata accessor for TaskTypeConstants()
{
  return &type metadata for TaskTypeConstants;
}

uint64_t storeEnumTagSinglePayload for SynapseTypesAlarmRelatedConstants(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_218FA2E7C + 4 * byte_218FBE36D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_218FA2EB0 + 4 * byte_218FBE368[v4]))();
}

uint64_t sub_218FA2EB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218FA2EB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218FA2EC0);
  return result;
}

uint64_t sub_218FA2ECC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218FA2ED4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_218FA2ED8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218FA2EE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SynapseTypesAlarmRelatedConstants()
{
  return &type metadata for SynapseTypesAlarmRelatedConstants;
}

uint64_t PSEPhoneCallSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

void PSEPhoneCallSELFEmitter.emitPSEPhoneCall(phoneCallSignals:appLaunchSignals:task:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  char *v27;
  char *v28;
  uint64_t (*v29)(void);
  uint64_t (*v30)(void);
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  int v52;
  double v53;
  uint64_t v54;
  id v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  double v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  double v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  __n128 v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  id v80;
  __n128 v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t (*v88)(void);
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(void);
  char *v93;
  id v94;
  Class isa;
  id v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, char *);
  int v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t, char *);
  char *v105;
  id v106;
  Class v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(char *, char *);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  id v117;
  Class v118;
  id v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(char *, char *);
  char *v126;
  id v127;
  Class v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  id v134;
  uint64_t (*v135)(void);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  id v140;
  char *v141;
  Class v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  unint64_t v153;
  uint64_t (*v154)(void);
  char *v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t (*v159)(void);
  id v160;
  id v161;
  uint64_t v162;
  char *v163;
  id v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;

  v172 = a1;
  v173 = a3;
  v5 = type metadata accessor for ReliabilityCategory();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v170 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v169 = (char *)&v152 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v152 - v14;
  v16 = type metadata accessor for UUID();
  v171 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v168 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v166 = (char *)&v152 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v167 = (char *)&v152 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v152 - v23;
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E0]), sel_init);
  if (v25)
  {
    v26 = v25;
    v165 = v16;
    v27 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E8]), sel_init);
    if (v27)
    {
      v28 = v27;
      v163 = v24;
      v29 = (uint64_t (*)(void))objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958D8]), sel_init);
      if (v29)
      {
        v30 = v29;
        v164 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958F0]), sel_init);
        if (v164)
        {
          v160 = v26;
          v162 = v3;
          v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958D0]), sel_init);
          if (v31)
          {
            v32 = v31;
            v33 = v172;
            v156 = v172 >> 62;
            if (v172 >> 62)
            {
              swift_bridgeObjectRetain();
              if (_CocoaArrayWrapper.endIndex.getter())
              {
LABEL_8:
                v153 = v33 & 0xC000000000000001;
                v159 = v30;
                v161 = v32;
                if ((v33 & 0xC000000000000001) != 0)
                {
                  v33 = MEMORY[0x219A2756C](0, v33);
                }
                else
                {
                  if (!*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
                  {
                    __break(1u);
                    goto LABEL_135;
                  }
                  v33 = *(_QWORD *)(v33 + 32);
                  swift_retain();
                }
                v35 = swift_bridgeObjectRelease();
                (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v33 + 120))(&v176, v35);
                v36 = v164;
                v37 = (*(uint64_t (**)(id))(*(_QWORD *)v33 + 144))(objc_msgSend(v164, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v176));
                v38 = (void *)MEMORY[0x219A27218](v37);
                swift_bridgeObjectRelease();
                objc_msgSend(v36, sel_setDomain_, v38);

                v39 = (*(uint64_t (**)(void))(*(_QWORD *)v33 + 168))();
                v40 = (void *)MEMORY[0x219A27218](v39);
                swift_bridgeObjectRelease();
                objc_msgSend(v36, sel_setAction_, v40);

                v30 = *(uint64_t (**)(void))(*(_QWORD *)v33 + 216);
                v41 = v30();
                if (*(_QWORD *)(v41 + 16)
                  && (v42 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
                      (v43 & 1) != 0))
                {
                  outlined init with copy of Any(*(_QWORD *)(v41 + 56) + 32 * v42, (uint64_t)&v176);
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v177 + 1))
                  {
                    if (swift_dynamicCast())
                      v44 = LOBYTE(v174);
                    else
                      v44 = 2;
LABEL_23:
                    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 104))(v44);
                    objc_msgSend(v164, sel_setIsDonatedBySiri_, v45);
                    if (!(a2 >> 62))
                    {
                      v46 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
                      swift_bridgeObjectRetain();
                      goto LABEL_25;
                    }
LABEL_135:
                    swift_bridgeObjectRetain();
                    v46 = _CocoaArrayWrapper.endIndex.getter();
LABEL_25:
                    v158 = v28;
                    v154 = v30;
                    v157 = v33;
                    if (v46)
                    {
                      if ((a2 & 0xC000000000000001) != 0)
                      {
                        v47 = MEMORY[0x219A2756C](0, a2);
                      }
                      else
                      {
                        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
                        {
                          __break(1u);
                          goto LABEL_138;
                        }
                        v47 = *(_QWORD *)(a2 + 32);
                        swift_retain();
                      }
                      v48 = swift_bridgeObjectRelease();
                      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v47 + 120))(&v176, v48);
                      v49 = (*(uint64_t (**)(id))(*(_QWORD *)v47 + 216))(objc_msgSend(v164, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v176));
                      if (*(_QWORD *)(v49 + 16)
                        && (v50 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FBEF40), (v51 & 1) != 0))
                      {
                        outlined init with copy of Any(*(_QWORD *)(v49 + 56) + 32 * v50, (uint64_t)&v176);
                      }
                      else
                      {
                        v176 = 0u;
                        v177 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      if (*((_QWORD *)&v177 + 1))
                      {
                        v52 = swift_dynamicCast();
                        v53 = v174;
                        if (!v52)
                          v53 = 0.0;
                        v152 = v53;
                        if (v52)
                          v54 = v175;
                        else
                          v54 = 0;
                      }
                      else
                      {
                        outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
                        v152 = 0.0;
                        v54 = 0;
                      }
                      v57 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v173 + 224))();
                      if (v57[2])
                      {
                        v59 = v57[4];
                        v58 = v57[5];
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        v59 = 0;
                        v58 = 0;
                      }
                      swift_bridgeObjectRelease();
                      v60 = v162;
                      v61 = (*(uint64_t (**)(double, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v162 + 120))(COERCE_DOUBLE(*(_QWORD *)&v152), v54, v59, v58);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v55 = v164;
                      v62 = (*(uint64_t (**)(id))(*(_QWORD *)v47 + 168))(objc_msgSend(v164, sel_setAppFollowup_, v61));
                      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 136))(v62);
                      swift_bridgeObjectRelease();
                      objc_msgSend(v55, sel_setAppLaunchReason_, v63);
                      v56 = (id)swift_release();
                      v28 = v158;
                      v30 = v154;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      v55 = v164;
                      v56 = objc_msgSend(v164, sel_setAppFollowup_, 3);
                    }
                    v64 = ((uint64_t (*)(id))v30)(v56);
                    if (*(_QWORD *)(v64 + 16)
                      && (v65 = specialized __RawDictionaryStorage.find<A>(_:)(0x617275446C6C6163, 0xEC0000006E6F6974), (v66 & 1) != 0))
                    {
                      outlined init with copy of Any(*(_QWORD *)(v64 + 56) + 32 * v65, (uint64_t)&v176);
                    }
                    else
                    {
                      v176 = 0u;
                      v177 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((_QWORD *)&v177 + 1))
                    {
                      if ((swift_dynamicCast() & 1) != 0)
                      {
                        v67 = fmin(v174, 30.0);
LABEL_54:
                        v68 = ((uint64_t (*)(id))v30)(objc_msgSend(v161, sel_setCallDurationInSeconds_, v67, *(_QWORD *)&v152));
                        if (*(_QWORD *)(v68 + 16)
                          && (v69 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000218FC0610), (v70 & 1) != 0))
                        {
                          outlined init with copy of Any(*(_QWORD *)(v68 + 56) + 32 * v69, (uint64_t)&v176);
                        }
                        else
                        {
                          v176 = 0u;
                          v177 = 0u;
                        }
                        swift_bridgeObjectRelease();
                        if (*((_QWORD *)&v177 + 1))
                        {
                          if (swift_dynamicCast())
                          {
                            v71 = v174;
LABEL_63:
                            v72 = ((uint64_t (*)(id))v30)(objc_msgSend(v161, sel_setTimeToEstablishInSeconds_, v71));
                            if (*(_QWORD *)(v72 + 16)
                              && (v73 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000218FC0630), (v74 & 1) != 0))
                            {
                              outlined init with copy of Any(*(_QWORD *)(v72 + 56) + 32 * v73, (uint64_t)&v176);
                            }
                            else
                            {
                              v176 = 0u;
                              v177 = 0u;
                            }
                            swift_bridgeObjectRelease();
                            if (*((_QWORD *)&v177 + 1))
                            {
                              if (swift_dynamicCast())
                              {
                                v75.n128_f64[0] = v174;
LABEL_72:
                                v76 = objc_msgSend(v161, sel_setRecentCallStatus_, (*(uint64_t (**)(__n128))(*(_QWORD *)v162 + 176))(v75));
                                v77 = ((uint64_t (*)(id))v30)(v76);
                                if (*(_QWORD *)(v77 + 16)
                                  && (v78 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000218FC0650), (v79 & 1) != 0))
                                {
                                  outlined init with copy of Any(*(_QWORD *)(v77 + 56) + 32 * v78, (uint64_t)&v176);
                                }
                                else
                                {
                                  v176 = 0u;
                                  v177 = 0u;
                                }
                                v80 = v161;
                                swift_bridgeObjectRelease();
                                if (*((_QWORD *)&v177 + 1))
                                {
                                  if (swift_dynamicCast())
                                  {
                                    v81.n128_f64[0] = v174;
LABEL_81:
                                    objc_msgSend(v80, sel_setDisconnectedReason_, (*(uint64_t (**)(__n128))(*(_QWORD *)v162 + 184))(v81));
                                    if (v156)
                                    {
                                      swift_bridgeObjectRetain();
                                      v83 = _CocoaArrayWrapper.endIndex.getter();
                                      swift_bridgeObjectRelease();
                                    }
                                    else
                                    {
                                      v83 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFF8) + 0x10);
                                    }
                                    v155 = v15;
                                    if (v83 >= 2)
                                    {
                                      if (v153)
                                      {
                                        v84 = MEMORY[0x219A2756C](1, v172);
                                      }
                                      else
                                      {
                                        if (*(_QWORD *)((v172 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                                        {
                                          __break(1u);
                                          return;
                                        }
                                        v84 = *(_QWORD *)(v172 + 40);
                                        swift_retain();
                                      }
                                      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v84 + 120))(&v176);
                                      swift_release();
                                      v82 = *((double *)&v176 + 1);
                                      if (*((double *)&v176 + 1) <= 30.0)
                                      {
                                        if (v153)
                                        {
                                          v85 = MEMORY[0x219A2756C](1, v172, *((double *)&v176 + 1));
                                        }
                                        else
                                        {
                                          v85 = *(_QWORD *)(v172 + 40);
                                          swift_retain();
                                        }
                                        v86 = (*(uint64_t (**)(void))(*(_QWORD *)v85 + 216))();
                                        swift_release();
                                        if (*(_QWORD *)(v86 + 16))
                                        {
                                          v87 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379);
                                          v88 = v154;
                                          if ((v89 & 1) != 0)
                                          {
                                            outlined init with copy of Any(*(_QWORD *)(v86 + 56) + 32 * v87, (uint64_t)&v176);
                                          }
                                          else
                                          {
                                            v176 = 0u;
                                            v177 = 0u;
                                          }
                                        }
                                        else
                                        {
                                          v176 = 0u;
                                          v177 = 0u;
                                          v88 = v154;
                                        }
                                        swift_bridgeObjectRelease();
                                        if (*((_QWORD *)&v177 + 1))
                                        {
                                          if ((swift_dynamicCast() & 1) != 0 && (LOBYTE(v174) & 1) == 0)
                                          {
                                            objc_msgSend(v80, sel_setHasUserInitiatedFollowup_, 1);
                                            v90 = ((uint64_t (*)(id))v88)(objc_msgSend(v55, sel_setHasUserInitiatedFollowup_, 1));
                                            if (v153)
                                            {
                                              v91 = MEMORY[0x219A2756C](1, v172);
                                            }
                                            else
                                            {
                                              v91 = *(_QWORD *)(v172 + 40);
                                              swift_retain();
                                            }
                                            v143 = (*(uint64_t (**)(void))(*(_QWORD *)v91 + 216))();
                                            swift_release();
                                            v144 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v162 + 168))(v90, v143);
                                            swift_bridgeObjectRelease();
                                            swift_bridgeObjectRelease();
                                            v145 = objc_msgSend(v80, sel_setContactMatch_, v144);
                                            v146 = ((uint64_t (*)(id))v154)(v145);
                                            if (v153)
                                            {
                                              v147 = MEMORY[0x219A2756C](1, v172);
                                            }
                                            else
                                            {
                                              v147 = *(_QWORD *)(v172 + 40);
                                              swift_retain();
                                            }
                                            v148 = (*(uint64_t (**)(void))(*(_QWORD *)v147 + 216))();
                                            swift_release();
                                            (*(void (**)(uint64_t, uint64_t, id))(*(_QWORD *)v162 + 160))(v146, v148, v80);
                                            swift_bridgeObjectRelease();
                                            swift_bridgeObjectRelease();
                                            v92 = v159;
                                            v55 = v164;
LABEL_105:
                                            objc_msgSend(v92, sel_setCommonSignal_, v55);
                                            objc_msgSend(v92, sel_setCallSignal_, v80);
                                            v93 = v163;
                                            UUID.init()();
                                            v94 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                                            isa = UUID._bridgeToObjectiveC()().super.isa;
                                            v96 = objc_msgSend(v94, sel_initWithNSUUID_, isa);

                                            v97 = v171;
                                            v98 = *(void (**)(char *, uint64_t))(v171 + 8);
                                            v99 = (char *)v165;
                                            v98(v93, v165);
                                            objc_msgSend(v28, sel_setPseId_, v96);

                                            (*(void (**)(void))(*(_QWORD *)v173 + 152))();
                                            v100 = (uint64_t)v155;
                                            UUID.init(uuidString:)();
                                            swift_bridgeObjectRelease();
                                            v101 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v97 + 48);
                                            v102 = v101(v100, 1, v99);
                                            v172 = (unint64_t)v98;
                                            if (v102 == 1)
                                            {
                                              v103 = outlined destroy of Any?(v100, &demangling cache variable for type metadata for UUID?);
                                            }
                                            else
                                            {
                                              v104 = *(void (**)(char *, uint64_t, char *))(v97 + 32);
                                              v105 = v167;
                                              v104(v167, v100, v99);
                                              v106 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                                              v107 = UUID._bridgeToObjectiveC()().super.isa;
                                              v108 = objc_msgSend(v106, sel_initWithNSUUID_, v107);

                                              objc_msgSend(v28, sel_setUiSessionId_, v108);
                                              v103 = ((uint64_t (*)(char *, char *))v98)(v105, v99);
                                            }
                                            v28 = v99;
                                            if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 200))(v103)
                                                           + 16))
                                            {
                                              swift_bridgeObjectRetain();
                                              swift_bridgeObjectRelease();
                                              v109 = (uint64_t)v169;
                                              UUID.init(uuidString:)();
                                              swift_bridgeObjectRelease();
                                              if (v101(v109, 1, v99) != 1)
                                              {
                                                v116 = v166;
                                                (*(void (**)(char *, uint64_t, char *))(v171 + 32))(v166, v109, v28);
                                                v117 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                                                v118 = UUID._bridgeToObjectiveC()().super.isa;
                                                v119 = objc_msgSend(v117, sel_initWithNSUUID_, v118);

                                                objc_msgSend(v158, sel_setOriginalLastRequestId_, v119);
                                                v120 = v116;
                                                v111 = (uint64_t (*)(char *, char *))v172;
                                                v115 = ((uint64_t (*)(char *, char *))v172)(v120, v28);
                                                v110 = (uint64_t)v170;
                                                goto LABEL_116;
                                              }
                                              outlined destroy of Any?(v109, &demangling cache variable for type metadata for UUID?);
                                            }
                                            else
                                            {
                                              swift_bridgeObjectRelease();
                                            }
                                            v110 = (uint64_t)v170;
                                            v111 = (uint64_t (*)(char *, char *))v172;
                                            if (one-time initialization token for engagement != -1)
                                              swift_once();
                                            v112 = type metadata accessor for Logger();
                                            __swift_project_value_buffer(v112, (uint64_t)static Logger.engagement);
                                            v113 = *MEMORY[0x24BEA7F28];
                                            v114 = type metadata accessor for EngagementSignalCollectionError();
                                            (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8)
                                                                                             + 104))(v8, v113, v114);
                                            (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA8030], v5);
                                            Logger.debug(_:_:)(0xD000000000000027, 0x8000000218FBEF80, (uint64_t)v8);
                                            v115 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_116:
                                            (*(void (**)(uint64_t))(*(_QWORD *)v173 + 176))(v115);
                                            UUID.init(uuidString:)();
                                            swift_bridgeObjectRelease();
                                            if (v101(v110, 1, v28) != 1)
                                            {
                                              v125 = v111;
                                              v126 = v168;
                                              (*(void (**)(char *, uint64_t, char *))(v171 + 32))(v168, v110, v28);
                                              v127 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                                              v128 = UUID._bridgeToObjectiveC()().super.isa;
                                              v129 = objc_msgSend(v127, sel_initWithNSUUID_, v128);

                                              v15 = v158;
                                              objc_msgSend(v158, sel_setTaskId_, v129);

                                              v124 = v125(v126, v28);
                                              goto LABEL_120;
                                            }
                                            outlined destroy of Any?(v110, &demangling cache variable for type metadata for UUID?);
                                            v15 = v158;
                                            if (one-time initialization token for engagement == -1)
                                            {
LABEL_118:
                                              v121 = type metadata accessor for Logger();
                                              __swift_project_value_buffer(v121, (uint64_t)static Logger.engagement);
                                              v122 = *MEMORY[0x24BEA7F10];
                                              v123 = type metadata accessor for EngagementSignalCollectionError();
                                              (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8)
                                                                                               + 104))(v8, v122, v123);
                                              (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA8030], v5);
                                              Logger.debug(_:_:)(0xD000000000000024, 0x8000000218FBEFB0, (uint64_t)v8);
                                              v124 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_120:
                                              v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 296))(v124);
                                              v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 104))(v130);
                                              swift_release();
                                              v132 = v162;
                                              v133 = objc_msgSend(v15, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 96))(v131));
                                              objc_msgSend(v15, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(_QWORD *)v132 + 112))(v133));
                                              v134 = v160;
                                              objc_msgSend(v160, sel_setEventMetadata_, v15);
                                              v135 = v159;
                                              objc_msgSend(v134, sel_setCallSignalGenerated_, v159);
                                              if (one-time initialization token for engagement != -1)
                                                swift_once();
                                              v136 = type metadata accessor for Logger();
                                              __swift_project_value_buffer(v136, (uint64_t)static Logger.engagement);
                                              v137 = *MEMORY[0x24BEA7FB0];
                                              v138 = type metadata accessor for SELFPSELogged();
                                              (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8)
                                                                                               + 104))(v8, v137, v138);
                                              (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA7FE0], v5);
                                              Logger.debug(_:_:)(0xD00000000000003ALL, 0x8000000218FC1850, (uint64_t)v8);
                                              (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                                              v139 = objc_msgSend((id)objc_opt_self(), sel_sharedAnalytics);
                                              v140 = objc_msgSend(v139, sel_defaultMessageStream);

                                              v141 = v163;
                                              UUID.init()();
                                              v142 = UUID._bridgeToObjectiveC()().super.isa;
                                              ((void (*)(char *, char *))v172)(v141, v28);
                                              objc_msgSend(v140, sel_emitMessage_isolatedStreamUUID_, v134, v142);

                                              swift_release();
                                              return;
                                            }
LABEL_138:
                                            swift_once();
                                            goto LABEL_118;
                                          }
                                        }
                                        else
                                        {
                                          outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
                                        }
                                      }
                                    }
                                    objc_msgSend(v80, sel_setHasUserInitiatedFollowup_, 0, v82);
                                    objc_msgSend(v55, sel_setHasUserInitiatedFollowup_, 0);
                                    objc_msgSend(v80, sel_setContactMatch_, 3);
                                    v92 = v159;
                                    goto LABEL_105;
                                  }
                                }
                                else
                                {
                                  outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
                                }
                                v81.n128_u64[0] = 0;
                                goto LABEL_81;
                              }
                            }
                            else
                            {
                              outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
                            }
                            v75.n128_u64[0] = 0;
                            goto LABEL_72;
                          }
                        }
                        else
                        {
                          outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
                        }
                        v71 = -1.0;
                        goto LABEL_63;
                      }
                    }
                    else
                    {
                      outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
                    }
                    v67 = -1.0;
                    goto LABEL_54;
                  }
                }
                else
                {
                  v176 = 0u;
                  v177 = 0u;
                  swift_bridgeObjectRelease();
                }
                outlined destroy of Any?((uint64_t)&v176, &demangling cache variable for type metadata for Any?);
                v44 = 2;
                goto LABEL_23;
              }
            }
            else
            {
              v34 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v34)
                goto LABEL_8;
            }

            swift_bridgeObjectRelease();
          }
          else
          {

          }
        }
        else
        {

        }
      }
      else
      {

      }
    }
    else
    {

    }
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v149 = type metadata accessor for Logger();
  __swift_project_value_buffer(v149, (uint64_t)static Logger.engagement);
  v150 = *MEMORY[0x24BEA7EF8];
  v151 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 104))(v8, v150, v151);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA8030], v5);
  Logger.debug(_:_:)(0xD000000000000032, 0x8000000218FC1810, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PSEPhoneCallSELFEmitter.calculatePhoneticallySimilarScore(firstPhoneSignalData:secondPhoneSignalData:callSchema:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t p_name;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  double v31;
  char v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  double v49;
  char v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;
  double v67;
  char v68;
  char v69;
  uint64_t v71;
  _QWORD *v72;
  _BYTE v73[32];
  Swift::Double_optional v74;
  Swift::Double_optional v75;
  Swift::Double_optional v76;

  v71 = a2;
  v5 = type metadata accessor for PhoneticEmbedder.LoadingOption();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PhoneticEmbedder.InputFormat();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v13);
  type metadata accessor for PSEPhoneticEmbedder();
  v14 = swift_allocObject();
  Locale.init(identifier:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BDE9D70], v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BDE9D80], v5);
  type metadata accessor for PhoneticEmbedder();
  swift_allocObject();
  *(_QWORD *)(v14 + 16) = PhoneticEmbedder.init(locale:clientID:inputFormat:loadingOption:)();
  objc_msgSend(a3, sel_setContactFullNamePhoneticScore_, -1.0);
  p_name = (uint64_t)&PSEAlarmSELFEmitter.name;
  objc_msgSend(a3, sel_setContactFirstNamePhoneticScore_, -1.0);
  v16 = (uint64_t)&PSEAlarmSELFEmitter.name;
  objc_msgSend(a3, sel_setContactLastNamePhoneticScore_, -1.0);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_20;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000218FC05B0);
  if ((v18 & 1) == 0)
    goto LABEL_20;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    p_name = 0x1F470E000;
    goto LABEL_20;
  }
  v19 = v72;
  if (!*(_QWORD *)(v71 + 16)
    || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000218FC05B0), (v21 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(v71 + 56) + 32 * v20, (uint64_t)v73), (swift_dynamicCast() & 1) == 0))
  {
LABEL_18:
    swift_bridgeObjectRelease();
    v16 = (uint64_t)&PSEAlarmSELFEmitter.name;
    goto LABEL_19;
  }
  v22 = v72;
  if (!v19[2])
    goto LABEL_17;
  v23 = v19[4];
  v24 = v19[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0)
    v25 = v23 & 0xFFFFFFFFFFFFLL;
  if (!v25 || !v22[2])
    goto LABEL_17;
  v27 = v22[4];
  v26 = v22[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0)
    v28 = v27 & 0xFFFFFFFFFFFFLL;
  if (!v28)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v29._countAndFlagsBits = v23;
  v29._object = (void *)v24;
  v30._countAndFlagsBits = v27;
  v30._object = (void *)v26;
  v74 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v29, v30);
  v31 = *(double *)&v74.is_nil;
  v33 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = (uint64_t)&PSEAlarmSELFEmitter.name;
  p_name = 0x1F470E000;
  if ((v33 & 1) == 0)
    objc_msgSend(a3, sel_setContactFullNamePhoneticScore_, v31);
LABEL_20:
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_38;
  v34 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FC05D0);
  if ((v35 & 1) == 0)
    goto LABEL_38;
  v36 = p_name;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v34, (uint64_t)v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_38;
  v37 = v72;
  if (!*(_QWORD *)(v71 + 16)
    || (v38 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FC05D0), (v39 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(v71 + 56) + 32 * v38, (uint64_t)v73), (swift_dynamicCast() & 1) == 0))
  {
LABEL_37:
    swift_bridgeObjectRelease();
    v16 = 0x1F470E000;
    goto LABEL_38;
  }
  v40 = v72;
  if (!v37[2])
    goto LABEL_36;
  v42 = v37[4];
  v41 = v37[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) == 0)
    v43 = v42 & 0xFFFFFFFFFFFFLL;
  if (!v43 || !v40[2])
    goto LABEL_36;
  v44 = v40[4];
  v45 = v40[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = HIBYTE(v45) & 0xF;
  if ((v45 & 0x2000000000000000) == 0)
    v46 = v44 & 0xFFFFFFFFFFFFLL;
  if (!v46)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  v47._countAndFlagsBits = v42;
  v47._object = (void *)v41;
  v48._countAndFlagsBits = v44;
  v48._object = (void *)v45;
  v75 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v47, v48);
  v49 = *(double *)&v75.is_nil;
  v51 = v50;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = 0x1F470E000;
  if ((v51 & 1) == 0)
    objc_msgSend(a3, (SEL)(v36 + 3856), v49);
LABEL_38:
  if (!*(_QWORD *)(a1 + 16))
    return swift_release();
  v52 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000218FC05F0);
  if ((v53 & 1) == 0)
    return swift_release();
  v54 = v16;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v52, (uint64_t)v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
    return swift_release();
  v55 = v72;
  if (!*(_QWORD *)(v71 + 16))
    goto LABEL_58;
  v56 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000218FC05F0);
  if ((v57 & 1) == 0)
    goto LABEL_58;
  outlined init with copy of Any(*(_QWORD *)(v71 + 56) + 32 * v56, (uint64_t)v73);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_58;
  v58 = v72;
  if (!v55[2])
    goto LABEL_56;
  v60 = v55[4];
  v59 = v55[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61 = HIBYTE(v59) & 0xF;
  if ((v59 & 0x2000000000000000) == 0)
    v61 = v60 & 0xFFFFFFFFFFFFLL;
  if (v61)
  {
    if (v58[2])
    {
      v63 = v58[4];
      v62 = v58[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v64 = HIBYTE(v62) & 0xF;
      if ((v62 & 0x2000000000000000) == 0)
        v64 = v63 & 0xFFFFFFFFFFFFLL;
      if (v64)
      {
        v65._countAndFlagsBits = v60;
        v65._object = (void *)v59;
        v66._countAndFlagsBits = v63;
        v66._object = (void *)v62;
        v76 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v65, v66);
        v67 = *(double *)&v76.is_nil;
        v69 = v68;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v69 & 1) == 0)
          objc_msgSend(a3, (SEL)(v54 + 3960), v67);
        return swift_release();
      }
      goto LABEL_57;
    }
LABEL_56:
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_57:
  swift_bridgeObjectRelease();
LABEL_58:
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t PSEPhoneCallSELFEmitter.getPSEPhoneContactMatch(firstPhoneSignalData:secondPhoneSignalData:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  char v8;
  _QWORD *v10;
  _BYTE v11[32];

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156);
  if ((v5 & 1) == 0)
    return 0;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  if (!*(_QWORD *)(a2 + 16)
    || (v6 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156), (v7 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v6, (uint64_t)v11), (swift_dynamicCast() & 1) == 0))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v10[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v8 = specialized static Array<A>.== infix(_:_:)(v10, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
    return 1;
  else
    return 2;
}

uint64_t PSEPhoneCallSELFEmitter.getRecentCallStatus(recentCallStatus:)(double a1)
{
  unsigned int v2;

  if (a1 == 0.0)
    return 0;
  if (a1 == 1.0)
    return 1;
  if (a1 == 2.0)
    return 2;
  if (a1 == 4.0)
    return 3;
  if (a1 == 16.0)
    v2 = 5;
  else
    v2 = 0;
  if (a1 == 8.0)
    return 4;
  else
    return v2;
}

uint64_t PSEPhoneCallSELFEmitter.getDisconnectedReason(disconnectedReason:)(double a1)
{
  if (a1 == 0.0)
    return 0;
  if (a1 == 1.0)
    return 4;
  if (a1 == 2.0)
    return 2;
  if (a1 == 3.0)
    return 3;
  if (a1 == 4.0)
    return 18;
  if (a1 == 5.0)
    return 6;
  if (a1 == 6.0)
    return 1;
  if (a1 == 7.0)
    return 19;
  if (a1 == 8.0)
    return 14;
  if (a1 == 9.0)
    return 15;
  if (a1 == 10.0)
    return 16;
  if (a1 == 11.0)
    return 13;
  if (a1 == 12.0)
    return 5;
  if (a1 == 13.0)
    return 8;
  if (a1 == 14.0)
    return 11;
  if (a1 == 15.0)
    return 7;
  if (a1 == 16.0)
    return 17;
  if (a1 == 17.0)
    return 12;
  if (a1 == 18.0)
    return 9;
  if (a1 == 19.0)
    return 10;
  if (a1 == 20.0)
    return 20;
  if (a1 == 21.0)
    return 21;
  if (a1 == 22.0)
    return 22;
  if (a1 == 23.0)
    return 23;
  if (a1 == 24.0)
    return 24;
  if (a1 == 25.0)
    return 25;
  if (a1 == 26.0)
    return 26;
  if (a1 == 27.0)
    return 27;
  if (a1 == 28.0)
    return 28;
  if (a1 == 29.0)
    return 29;
  if (a1 == 30.0)
    return 30;
  if (a1 == 31.0)
    return 31;
  if (a1 == 32.0)
    return 32;
  if (a1 == 33.0)
    return 33;
  if (a1 == 34.0)
    return 34;
  if (a1 == 35.0)
    return 35;
  if (a1 == 36.0)
    return 36;
  if (a1 == 1000.0)
    return 1000;
  if (a1 == 1001.0)
    return 1001;
  return 0;
}

uint64_t PSEPhoneCallSELFEmitter.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEPhoneCallSELFEmitter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEPhoneCallSELFEmitter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PSEPhoneCallSELFEmitter()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSEPhoneCallSELFEmitter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSEPhoneCallSELFEmitter.emitPSEPhoneCall(phoneCallSignals:appLaunchSignals:task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PSEPhoneCallSELFEmitter.calculatePhoneticallySimilarScore(firstPhoneSignalData:secondPhoneSignalData:callSchema:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PSEPhoneCallSELFEmitter.getPSEPhoneContactMatch(firstPhoneSignalData:secondPhoneSignalData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PSEPhoneCallSELFEmitter.getRecentCallStatus(recentCallStatus:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PSEPhoneCallSELFEmitter.getDisconnectedReason(disconnectedReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t PSESMSSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

void PSESMSSELFEmitter.emitPSESMS(smsSignals:appLaunchSignals:task:)(unint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t (*v45)(id);
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  id v73;
  id v74;
  char *v75;
  id v76;
  Class isa;
  id v78;
  uint64_t v79;
  void (*v80)(char *, _QWORD *);
  char *v81;
  _QWORD *v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  id v86;
  Class v87;
  id v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  id v99;
  Class v100;
  id v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  void (*v110)(char *, _QWORD *);
  unint64_t v111;
  char *v112;
  id v113;
  Class v114;
  id v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  id v127;
  char *v128;
  Class v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(void);
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t v150;
  id v151;
  uint64_t v152;
  void (*v153)(char *, _QWORD *);
  _QWORD *v154;
  id v155;
  id v156;
  _QWORD *v157;
  id v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;

  v164 = a3;
  v166 = a1;
  v4 = type metadata accessor for ReliabilityCategory();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v145 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v161 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v160 = (char *)&v145 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v145 - v13;
  v15 = (_QWORD *)type metadata accessor for UUID();
  v162 = *(v15 - 1);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v145 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v159 = (char *)&v145 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v145 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v163 = (char *)&v145 - v24;
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E0]), sel_init);
  if (v25)
  {
    v26 = v25;
    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E8]), sel_init);
    if (v27)
    {
      v158 = v27;
      v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95950]), sel_init);
      if (v28)
      {
        v156 = v28;
        v157 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958F0]), sel_init);
        if (v157)
        {
          v155 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95948]), sel_init);
          if (v155)
          {
            v153 = (void (*)(char *, _QWORD *))(v166 >> 62);
            if (v166 >> 62)
            {
              swift_bridgeObjectRetain();
              if (_CocoaArrayWrapper.endIndex.getter())
              {
LABEL_8:
                v150 = v166 & 0xC000000000000001;
                v154 = v15;
                v151 = v26;
                v149 = v18;
                if ((v166 & 0xC000000000000001) != 0)
                {
                  v30 = MEMORY[0x219A2756C](0, v166);
                }
                else
                {
                  if (!*(_QWORD *)((v166 & 0xFFFFFFFFFFFFF8) + 0x10))
                  {
                    __break(1u);
                    goto LABEL_51;
                  }
                  v30 = *(_QWORD *)(v166 + 32);
                  swift_retain();
                }
                v31 = swift_bridgeObjectRelease();
                (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v30 + 120))(&v169, v31);
                v26 = v157;
                v32 = (*(uint64_t (**)(id))(*(_QWORD *)v30 + 144))(objc_msgSend(v157, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v169));
                v33 = (void *)MEMORY[0x219A27218](v32);
                swift_bridgeObjectRelease();
                objc_msgSend(v26, sel_setDomain_, v33);

                v34 = (*(uint64_t (**)(void))(*(_QWORD *)v30 + 168))();
                v15 = (_QWORD *)MEMORY[0x219A27218](v34);
                swift_bridgeObjectRelease();
                objc_msgSend(v26, sel_setAction_, v15);

                v35 = *(uint64_t (**)(void))(*(_QWORD *)v30 + 216);
                v152 = v30;
                v146 = v35;
                v36 = v35();
                if (*(_QWORD *)(v36 + 16)
                  && (v37 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
                      (v38 & 1) != 0))
                {
                  outlined init with copy of Any(*(_QWORD *)(v36 + 56) + 32 * v37, (uint64_t)&v169);
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v170 + 1))
                  {
                    if (swift_dynamicCast())
                      v39 = v167;
                    else
                      v39 = 2;
LABEL_23:
                    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v165 + 104))(v39);
                    objc_msgSend(v157, sel_setIsDonatedBySiri_, v40);
                    if (!(a2 >> 62))
                    {
                      v41 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
                      swift_bridgeObjectRetain();
                      if (v41)
                      {
LABEL_25:
                        if ((a2 & 0xC000000000000001) != 0)
                        {
                          v42 = MEMORY[0x219A2756C](0, a2);
                        }
                        else
                        {
                          if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
                          {
                            __break(1u);
                            goto LABEL_107;
                          }
                          v42 = *(_QWORD *)(a2 + 32);
                          swift_retain();
                        }
                        v43 = swift_bridgeObjectRelease();
                        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v42 + 120))(&v169, v43);
                        v44 = objc_msgSend(v157, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v169);
                        v45 = *(uint64_t (**)(id))(*(_QWORD *)v42 + 216);
                        v148 = v42;
                        v46 = v45(v44);
                        if (*(_QWORD *)(v46 + 16))
                        {
                          v47 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FBEF40);
                          v48 = v164;
                          if ((v49 & 1) != 0)
                          {
                            outlined init with copy of Any(*(_QWORD *)(v46 + 56) + 32 * v47, (uint64_t)&v169);
                          }
                          else
                          {
                            v169 = 0u;
                            v170 = 0u;
                          }
                        }
                        else
                        {
                          v169 = 0u;
                          v170 = 0u;
                          v48 = v164;
                        }
                        swift_bridgeObjectRelease();
                        if (*((_QWORD *)&v170 + 1))
                        {
                          v50 = swift_dynamicCast();
                          v51 = v167;
                          if (!v50)
                            v51 = 0;
                          v147 = v51;
                          if (v50)
                            v52 = v168;
                          else
                            v52 = 0;
                        }
                        else
                        {
                          outlined destroy of Any?((uint64_t)&v169, &demangling cache variable for type metadata for Any?);
                          v147 = 0;
                          v52 = 0;
                        }
                        v53 = (_QWORD *)(*(uint64_t (**)(void))(*v48 + 224))();
                        if (v53[2])
                        {
                          v54 = v53[4];
                          v55 = v53[5];
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          v54 = 0;
                          v55 = 0;
                        }
                        swift_bridgeObjectRelease();
                        v56 = v165;
                        v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v165 + 120))(v147, v52, v54, v55);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v58 = v157;
                        v59 = objc_msgSend(v157, sel_setAppFollowup_, v57);
                        v60 = (*(uint64_t (**)(id))(*(_QWORD *)v148 + 168))(v59);
                        v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 136))(v60);
                        swift_bridgeObjectRelease();
                        objc_msgSend(v58, sel_setAppLaunchReason_, v61);
                        swift_release();
LABEL_53:
                        if (v153)
                        {
                          swift_bridgeObjectRetain();
                          v66 = _CocoaArrayWrapper.endIndex.getter();
                          swift_bridgeObjectRelease();
                          if (v66 < 2)
                            goto LABEL_75;
                        }
                        else if (*(uint64_t *)((v166 & 0xFFFFFFFFFFFFF8) + 0x10) < 2)
                        {
                          goto LABEL_75;
                        }
                        if (v150)
                        {
                          v67 = MEMORY[0x219A2756C](1, v166);
                        }
                        else
                        {
                          if (*(_QWORD *)((v166 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                          {
                            __break(1u);
                            return;
                          }
                          v67 = *(_QWORD *)(v166 + 40);
                          swift_retain();
                        }
                        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v67 + 120))(&v169);
                        swift_release();
                        v62 = *((double *)&v169 + 1);
                        if (*((double *)&v169 + 1) <= 30.0)
                        {
                          if (v150)
                          {
                            v68 = MEMORY[0x219A2756C](1, v166, *((double *)&v169 + 1));
                          }
                          else
                          {
                            v68 = *(_QWORD *)(v166 + 40);
                            swift_retain();
                          }
                          v69 = (*(uint64_t (**)(void))(*(_QWORD *)v68 + 216))();
                          swift_release();
                          if (*(_QWORD *)(v69 + 16)
                            && (v70 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v71 & 1) != 0))
                          {
                            outlined init with copy of Any(*(_QWORD *)(v69 + 56) + 32 * v70, (uint64_t)&v169);
                          }
                          else
                          {
                            v169 = 0u;
                            v170 = 0u;
                          }
                          swift_bridgeObjectRelease();
                          if (*((_QWORD *)&v170 + 1))
                          {
                            if ((swift_dynamicCast() & 1) != 0 && (v167 & 1) == 0)
                            {
                              objc_msgSend(v155, sel_setHasUserInitiatedFollowup_, 1);
                              objc_msgSend(v58, sel_setHasUserInitiatedFollowup_, 1);
                              if (v150)
                              {
                                v72 = MEMORY[0x219A2756C](1, v166);
                              }
                              else
                              {
                                v72 = *(_QWORD *)(v166 + 40);
                                swift_retain();
                              }
                              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v72 + 120))(&v169);
                              swift_release();
                              objc_msgSend(v155, sel_setUserFollowupEventDonationTimeInSecondsSince2001_, *(double *)&v169);
                              if (v150)
                              {
                                v130 = MEMORY[0x219A2756C](1, v166);
                              }
                              else
                              {
                                v130 = *(_QWORD *)(v166 + 40);
                                swift_retain();
                              }
                              v131 = (*(uint64_t (**)(void))(*(_QWORD *)v130 + 168))();
                              v133 = v132;
                              swift_release();
                              v134 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v165 + 176))(v131, v133);
                              swift_bridgeObjectRelease();
                              v135 = objc_msgSend(v155, sel_setMessageUserFollowupAction_, v134);
                              v136 = ((uint64_t (*)(id))v146)(v135);
                              if (v150)
                              {
                                v137 = MEMORY[0x219A2756C](1, v166);
                              }
                              else
                              {
                                v137 = *(_QWORD *)(v166 + 40);
                                swift_retain();
                              }
                              v138 = (*(uint64_t (**)(void))(*(_QWORD *)v137 + 216))();
                              swift_release();
                              v139 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v165 + 168))(v136, v138);
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              v140 = objc_msgSend(v155, sel_setContactMatch_, v139);
                              v141 = ((uint64_t (*)(id))v146)(v140);
                              v142 = v155;
                              if (v150)
                              {
                                v143 = MEMORY[0x219A2756C](1, v166);
                              }
                              else
                              {
                                v143 = *(_QWORD *)(v166 + 40);
                                swift_retain();
                              }
                              v144 = (*(uint64_t (**)(void))(*(_QWORD *)v143 + 216))();
                              swift_release();
                              (*(void (**)(uint64_t, uint64_t, id))(*(_QWORD *)v165 + 160))(v141, v144, v142);
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              v58 = v157;
LABEL_76:
                              v74 = v156;
                              objc_msgSend(v156, sel_setCommonSignal_, v58);
                              objc_msgSend(v74, sel_setMessageSignal_, v155);
                              v75 = v163;
                              UUID.init()();
                              v76 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                              isa = UUID._bridgeToObjectiveC()().super.isa;
                              v78 = objc_msgSend(v76, sel_initWithNSUUID_, isa);

                              v79 = v162;
                              v80 = *(void (**)(char *, _QWORD *))(v162 + 8);
                              v81 = v75;
                              v82 = v154;
                              v80(v81, v154);
                              objc_msgSend(v158, sel_setPseId_, v78);

                              (*(void (**)(void))(*v164 + 152))();
                              UUID.init(uuidString:)();
                              swift_bridgeObjectRelease();
                              v166 = *(_QWORD *)(v79 + 48);
                              v83 = ((uint64_t (*)(char *, uint64_t, _QWORD *))v166)(v14, 1, v82);
                              v153 = v80;
                              if (v83 == 1)
                              {
                                v84 = outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
                                v85 = 0x24BE95000;
                              }
                              else
                              {
                                (*(void (**)(char *, char *, _QWORD *))(v79 + 32))(v23, v14, v82);
                                v85 = 0x24BE95000uLL;
                                v86 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                                v87 = UUID._bridgeToObjectiveC()().super.isa;
                                v88 = objc_msgSend(v86, sel_initWithNSUUID_, v87);

                                objc_msgSend(v158, sel_setUiSessionId_, v88);
                                v84 = ((uint64_t (*)(char *, _QWORD *))v80)(v23, v82);
                              }
                              v15 = v164;
                              v89 = (*(uint64_t (**)(uint64_t))(*v164 + 200))(v84);
                              v90 = (unsigned int *)MEMORY[0x24BEA8030];
                              if (*(_QWORD *)(v89 + 16))
                              {
                                a2 = MEMORY[0x24BEA8030];
                                swift_bridgeObjectRetain();
                                swift_bridgeObjectRelease();
                                v91 = (uint64_t)v160;
                                UUID.init(uuidString:)();
                                swift_bridgeObjectRelease();
                                v92 = v154;
                                if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v166)(v91, 1, v154) != 1)
                                {
                                  v97 = v85;
                                  v98 = v159;
                                  (*(void (**)(char *, uint64_t, _QWORD *))(v162 + 32))(v159, v91, v92);
                                  v99 = objc_allocWithZone(*(Class *)(v97 + 3192));
                                  v100 = UUID._bridgeToObjectiveC()().super.isa;
                                  v101 = objc_msgSend(v99, sel_initWithNSUUID_, v100);

                                  objc_msgSend(v158, sel_setOriginalLastRequestId_, v101);
                                  v102 = v98;
                                  v85 = v97;
                                  v96 = ((uint64_t (*)(char *, _QWORD *))v153)(v102, v92);
                                  goto LABEL_87;
                                }
                                outlined destroy of Any?(v91, &demangling cache variable for type metadata for UUID?);
                                v90 = (unsigned int *)a2;
                              }
                              else
                              {
                                swift_bridgeObjectRelease();
                              }
                              if (one-time initialization token for engagement != -1)
                                swift_once();
                              v93 = type metadata accessor for Logger();
                              __swift_project_value_buffer(v93, (uint64_t)static Logger.engagement);
                              v94 = *MEMORY[0x24BEA7F28];
                              v95 = type metadata accessor for EngagementSignalCollectionError();
                              (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 104))(v7, v94, v95);
                              a2 = (unint64_t)v90;
                              (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *v90, v4);
                              Logger.debug(_:_:)(0xD000000000000027, 0x8000000218FBEF80, (uint64_t)v7);
                              v96 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_87:
                              (*(void (**)(uint64_t))(*v15 + 176))(v96);
                              v103 = (uint64_t)v161;
                              UUID.init(uuidString:)();
                              swift_bridgeObjectRelease();
                              v104 = v154;
                              if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v166)(v103, 1, v154) != 1)
                              {
                                v111 = v85;
                                v26 = &unk_253F31000;
                                v112 = v149;
                                (*(void (**)(char *, uint64_t, _QWORD *))(v162 + 32))(v149, v103, v104);
                                v113 = objc_allocWithZone(*(Class *)(v111 + 3192));
                                v114 = UUID._bridgeToObjectiveC()().super.isa;
                                v115 = objc_msgSend(v113, sel_initWithNSUUID_, v114);

                                v109 = v158;
                                objc_msgSend(v158, sel_setTaskId_, v115);

                                v116 = v112;
                                v110 = v153;
                                v108 = ((uint64_t (*)(char *, _QWORD *))v153)(v116, v104);
                                goto LABEL_91;
                              }
                              outlined destroy of Any?(v103, &demangling cache variable for type metadata for UUID?);
                              v26 = &unk_253F31000;
                              if (one-time initialization token for engagement == -1)
                              {
LABEL_89:
                                v105 = type metadata accessor for Logger();
                                __swift_project_value_buffer(v105, (uint64_t)static Logger.engagement);
                                v106 = *MEMORY[0x24BEA7F10];
                                v107 = type metadata accessor for EngagementSignalCollectionError();
                                (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 104))(v7, v106, v107);
                                (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *(unsigned int *)a2, v4);
                                Logger.debug(_:_:)(0xD000000000000024, 0x8000000218FBEFB0, (uint64_t)v7);
                                v108 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
                                v109 = v158;
                                v110 = v153;
LABEL_91:
                                v117 = (*(uint64_t (**)(uint64_t))(*v15 + 296))(v108);
                                v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 104))(v117);
                                swift_release();
                                v119 = v165;
                                v120 = objc_msgSend(v109, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(_QWORD *)v165 + 96))(v118));
                                objc_msgSend(v109, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(_QWORD *)v119 + 112))(v120));
                                v121 = v151;
                                objc_msgSend(v151, sel_setEventMetadata_, v109);
                                v122 = v156;
                                objc_msgSend(v121, sel_setMessageSignalGenerated_, v156);
                                if (v26[458] != -1)
                                  swift_once();
                                v123 = type metadata accessor for Logger();
                                __swift_project_value_buffer(v123, (uint64_t)static Logger.engagement);
                                v124 = *MEMORY[0x24BEA7FA8];
                                v125 = type metadata accessor for SELFPSELogged();
                                (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 104))(v7, v124, v125);
                                (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEA7FE0], v4);
                                Logger.debug(_:_:)(0xD000000000000033, 0x8000000218FC1900, (uint64_t)v7);
                                (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
                                v126 = objc_msgSend((id)objc_opt_self(), sel_sharedAnalytics);
                                v127 = objc_msgSend(v126, sel_defaultMessageStream);

                                v128 = v163;
                                UUID.init()();
                                v129 = UUID._bridgeToObjectiveC()().super.isa;
                                v110(v128, v154);
                                objc_msgSend(v127, sel_emitMessage_isolatedStreamUUID_, v121, v129);

                                swift_release();
                                return;
                              }
LABEL_107:
                              swift_once();
                              goto LABEL_89;
                            }
                          }
                          else
                          {
                            outlined destroy of Any?((uint64_t)&v169, &demangling cache variable for type metadata for Any?);
                          }
                        }
LABEL_75:
                        v73 = v155;
                        objc_msgSend(v155, sel_setHasUserInitiatedFollowup_, 0, v62);
                        objc_msgSend(v58, sel_setHasUserInitiatedFollowup_, 0);
                        objc_msgSend(v73, sel_setMessageUserFollowupAction_, 1);
                        objc_msgSend(v73, sel_setContactMatch_, 3);
                        goto LABEL_76;
                      }
LABEL_52:
                      swift_bridgeObjectRelease();
                      v58 = v157;
                      objc_msgSend(v157, sel_setAppFollowup_, 3);
                      goto LABEL_53;
                    }
LABEL_51:
                    swift_bridgeObjectRetain();
                    if (_CocoaArrayWrapper.endIndex.getter())
                      goto LABEL_25;
                    goto LABEL_52;
                  }
                }
                else
                {
                  v169 = 0u;
                  v170 = 0u;
                  swift_bridgeObjectRelease();
                }
                outlined destroy of Any?((uint64_t)&v169, &demangling cache variable for type metadata for Any?);
                v39 = 2;
                goto LABEL_23;
              }
            }
            else
            {
              v29 = *(_QWORD *)((v166 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v29)
                goto LABEL_8;
            }

            swift_bridgeObjectRelease();
          }
          else
          {

          }
        }
        else
        {

        }
      }
      else
      {

      }
    }
    else
    {

    }
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v63 = type metadata accessor for Logger();
  __swift_project_value_buffer(v63, (uint64_t)static Logger.engagement);
  v64 = *MEMORY[0x24BEA7EF8];
  v65 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v7, v64, v65);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEA8030], v4);
  Logger.debug(_:_:)(0xD00000000000002CLL, 0x8000000218FC18D0, (uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t PSESMSSELFEmitter.calculatePhoneticallySimilarScore(firstSMSSignalData:secondSMSSignalData:smsSchema:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t p_name;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  double v31;
  char v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  double v49;
  char v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;
  double v67;
  char v68;
  char v69;
  uint64_t v71;
  _QWORD *v72;
  _BYTE v73[32];
  Swift::Double_optional v74;
  Swift::Double_optional v75;
  Swift::Double_optional v76;

  v71 = a2;
  v5 = type metadata accessor for PhoneticEmbedder.LoadingOption();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PhoneticEmbedder.InputFormat();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v13);
  type metadata accessor for PSEPhoneticEmbedder();
  v14 = swift_allocObject();
  Locale.init(identifier:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BDE9D70], v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BDE9D80], v5);
  type metadata accessor for PhoneticEmbedder();
  swift_allocObject();
  *(_QWORD *)(v14 + 16) = PhoneticEmbedder.init(locale:clientID:inputFormat:loadingOption:)();
  objc_msgSend(a3, sel_setContactFullNamePhoneticScore_, -1.0);
  p_name = (uint64_t)&PSEAlarmSELFEmitter.name;
  objc_msgSend(a3, sel_setContactFirstNamePhoneticScore_, -1.0);
  v16 = (uint64_t)&PSEAlarmSELFEmitter.name;
  objc_msgSend(a3, sel_setContactLastNamePhoneticScore_, -1.0);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_20;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000218FC05B0);
  if ((v18 & 1) == 0)
    goto LABEL_20;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    p_name = 0x1F470E000;
    goto LABEL_20;
  }
  v19 = v72;
  if (!*(_QWORD *)(v71 + 16)
    || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000218FC05B0), (v21 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(v71 + 56) + 32 * v20, (uint64_t)v73), (swift_dynamicCast() & 1) == 0))
  {
LABEL_18:
    swift_bridgeObjectRelease();
    v16 = (uint64_t)&PSEAlarmSELFEmitter.name;
    goto LABEL_19;
  }
  v22 = v72;
  if (!v19[2])
    goto LABEL_17;
  v23 = v19[4];
  v24 = v19[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0)
    v25 = v23 & 0xFFFFFFFFFFFFLL;
  if (!v25 || !v22[2])
    goto LABEL_17;
  v27 = v22[4];
  v26 = v22[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0)
    v28 = v27 & 0xFFFFFFFFFFFFLL;
  if (!v28)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v29._countAndFlagsBits = v23;
  v29._object = (void *)v24;
  v30._countAndFlagsBits = v27;
  v30._object = (void *)v26;
  v74 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v29, v30);
  v31 = *(double *)&v74.is_nil;
  v33 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = (uint64_t)&PSEAlarmSELFEmitter.name;
  p_name = 0x1F470E000;
  if ((v33 & 1) == 0)
    objc_msgSend(a3, sel_setContactFullNamePhoneticScore_, v31);
LABEL_20:
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_38;
  v34 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FC05D0);
  if ((v35 & 1) == 0)
    goto LABEL_38;
  v36 = p_name;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v34, (uint64_t)v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_38;
  v37 = v72;
  if (!*(_QWORD *)(v71 + 16)
    || (v38 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FC05D0), (v39 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(v71 + 56) + 32 * v38, (uint64_t)v73), (swift_dynamicCast() & 1) == 0))
  {
LABEL_37:
    swift_bridgeObjectRelease();
    v16 = 0x1F470E000;
    goto LABEL_38;
  }
  v40 = v72;
  if (!v37[2])
    goto LABEL_36;
  v42 = v37[4];
  v41 = v37[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) == 0)
    v43 = v42 & 0xFFFFFFFFFFFFLL;
  if (!v43 || !v40[2])
    goto LABEL_36;
  v44 = v40[4];
  v45 = v40[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = HIBYTE(v45) & 0xF;
  if ((v45 & 0x2000000000000000) == 0)
    v46 = v44 & 0xFFFFFFFFFFFFLL;
  if (!v46)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  v47._countAndFlagsBits = v42;
  v47._object = (void *)v41;
  v48._countAndFlagsBits = v44;
  v48._object = (void *)v45;
  v75 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v47, v48);
  v49 = *(double *)&v75.is_nil;
  v51 = v50;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = 0x1F470E000;
  if ((v51 & 1) == 0)
    objc_msgSend(a3, (SEL)(v36 + 3856), v49);
LABEL_38:
  if (!*(_QWORD *)(a1 + 16))
    return swift_release();
  v52 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000218FC05F0);
  if ((v53 & 1) == 0)
    return swift_release();
  v54 = v16;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v52, (uint64_t)v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
    return swift_release();
  v55 = v72;
  if (!*(_QWORD *)(v71 + 16))
    goto LABEL_58;
  v56 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x8000000218FC05F0);
  if ((v57 & 1) == 0)
    goto LABEL_58;
  outlined init with copy of Any(*(_QWORD *)(v71 + 56) + 32 * v56, (uint64_t)v73);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_58;
  v58 = v72;
  if (!v55[2])
    goto LABEL_56;
  v60 = v55[4];
  v59 = v55[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61 = HIBYTE(v59) & 0xF;
  if ((v59 & 0x2000000000000000) == 0)
    v61 = v60 & 0xFFFFFFFFFFFFLL;
  if (v61)
  {
    if (v58[2])
    {
      v63 = v58[4];
      v62 = v58[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v64 = HIBYTE(v62) & 0xF;
      if ((v62 & 0x2000000000000000) == 0)
        v64 = v63 & 0xFFFFFFFFFFFFLL;
      if (v64)
      {
        v65._countAndFlagsBits = v60;
        v65._object = (void *)v59;
        v66._countAndFlagsBits = v63;
        v66._object = (void *)v62;
        v76 = PSEPhoneticEmbedder.distanceBetween(siriContact:userContact:)(v65, v66);
        v67 = *(double *)&v76.is_nil;
        v69 = v68;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v69 & 1) == 0)
          objc_msgSend(a3, (SEL)(v54 + 3960), v67);
        return swift_release();
      }
      goto LABEL_57;
    }
LABEL_56:
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_57:
  swift_bridgeObjectRelease();
LABEL_58:
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t PSESMSSELFEmitter.getPSEMessageContactMatch(firstSMSSignalData:secondSMSSignalData:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  char v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  char v14;
  _QWORD *v16;
  _BYTE v17[32];

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000218FC06D0);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v17);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*(_QWORD *)(a2 + 16))
        {
          v6 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x8000000218FC06F0);
          if ((v7 & 1) != 0)
          {
            outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v6, (uint64_t)v17);
            if ((swift_dynamicCast() & 1) != 0)
            {
              if (v16[2])
              {
                v8 = specialized static Array<A>.== infix(_:_:)(v16, v16);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v9 = (v8 & 1) == 0;
                goto LABEL_18;
              }
              swift_bridgeObjectRelease();
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156);
  if ((v11 & 1) == 0)
    return 0;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  if (!*(_QWORD *)(a2 + 16)
    || (v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x73746361746E6F63, 0xED000065756C6156), (v13 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v12, (uint64_t)v17), (swift_dynamicCast() & 1) == 0))
  {
LABEL_21:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v16[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v14 = specialized static Array<A>.== infix(_:_:)(v16, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (v14 & 1) == 0;
LABEL_18:
  if (v9)
    return 2;
  else
    return 1;
}

uint64_t PSESMSSELFEmitter.getPSEMessageUserFollowupAction(userAction:)()
{
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 3;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 4;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    return 2;
  return 0;
}

uint64_t PSESMSSELFEmitter.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t PSESMSSELFEmitter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PSESMSSELFEmitter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PSESMSSELFEmitter()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSESMSSELFEmitter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSESMSSELFEmitter.emitPSESMS(smsSignals:appLaunchSignals:task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PSESMSSELFEmitter.calculatePhoneticallySimilarScore(firstSMSSignalData:secondSMSSignalData:smsSchema:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PSESMSSELFEmitter.getPSEMessageContactMatch(firstSMSSignalData:secondSMSSignalData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PSESMSSELFEmitter.getPSEMessageUserFollowupAction(userAction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of EntitySimilarity.siriChosenEntity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EntitySimilarity.siriChosenEntity.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of EntitySimilarity.siriChosenEntity.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of EntitySimilarity.userFollowupEntity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of EntitySimilarity.userFollowupEntity.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of EntitySimilarity.userFollowupEntity.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of EntitySimilarity.compare()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of EntitySimilarity.print()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  _QWORD *v19;
  void (*v20)(void (*)(void *), _QWORD *);
  id v21;
  id v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  if (one-time initialization token for engagement != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
  swift_retain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v25 = a5;
    v13 = (uint8_t *)swift_slowAlloc();
    v24 = a4;
    v14 = swift_slowAlloc();
    v26 = v14;
    *(_DWORD *)v13 = 136315138;
    type metadata accessor for AbstractActivityCollector();
    swift_retain();
    v15 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_218F54000, v11, v12, "Starting %s", v13, 0xCu);
    swift_arrayDestroy();
    v17 = v14;
    a4 = v24;
    MEMORY[0x219A27C8C](v17, -1, -1);
    v18 = v13;
    a5 = v25;
    MEMORY[0x219A27C8C](v18, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a1;
  v19[3] = a2;
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = a5;
  v20 = *(void (**)(void (*)(void *), _QWORD *))(*(_QWORD *)a1 + 88);
  swift_retain();
  v21 = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  v22 = a5;
  v20(partial apply for closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:), v19);
  return swift_release();
}

void closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t aBlock[6];

  v39 = a5;
  v37 = a4;
  v40 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchWorkItemFlags();
  v38 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v36 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for engagement != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.engagement);
  swift_retain();
  v15 = a1;
  swift_retain();
  v16 = a1;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v34 = v9;
    v21 = v20;
    v41 = a2;
    aBlock[0] = v20;
    *(_DWORD *)v19 = 136315394;
    v35 = a6;
    type metadata accessor for AbstractActivityCollector();
    v33 = v12;
    swift_retain();
    v22 = String.init<A>(describing:)();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    v41 = (uint64_t)a1;
    v24 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    v25 = String.init<A>(describing:)();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, aBlock);
    v12 = v33;
    a6 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_218F54000, v17, v18, "%s completed with error? %s (nil is good)", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    v27 = v21;
    v9 = v34;
    MEMORY[0x219A27C8C](v27, -1, -1);
    MEMORY[0x219A27C8C](v19, -1, -1);

    if (!a1)
      goto LABEL_8;
    goto LABEL_7;
  }
  swift_release_n();

  if (a1)
  {
LABEL_7:
    v28 = v36;
    static DispatchWorkItemFlags.barrier.getter();
    v29 = swift_allocObject();
    v30 = v39;
    *(_QWORD *)(v29 + 16) = v37;
    *(_QWORD *)(v29 + 24) = v30;
    aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:);
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_46;
    v31 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    MEMORY[0x219A27458](0, v11, v28, v31);
    _Block_release(v31);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v40);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v12);
    swift_release();
  }
LABEL_8:
  dispatch_group_leave(a6);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;

  v4 = (_QWORD *)(a1 + 16);
  swift_beginAccess();
  v5 = *(_QWORD **)(a1 + 16);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *v4 = v5;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    *v4 = v5;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = a2;
  return swift_endAccess();
}

void closure #3 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Class isa;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(id, uint64_t);
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v6 = type metadata accessor for ReliabilityCategory();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    v30 = v6;
    v31 = a3;
    v32 = a2;
    if (one-time initialization token for engagement != -1)
      swift_once();
    v14 = __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
    v35 = 0;
    v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v33 = 0xD000000000000022;
    v34 = 0x8000000218FC1BB0;
    swift_beginAccess();
    v15 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    v16._countAndFlagsBits = MEMORY[0x219A27350](v15, v29);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v33;
    v18 = v34;
    v19 = *MEMORY[0x24BEA7F08];
    v20 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v9, v19, v20);
    v21 = v30;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEA8030], v30);
    Logger.error(_:_:)(v17, v18, (uint64_t)v9);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v22 = (void *)objc_opt_self();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v22, sel_getErrorFailedCollectors_, isa);

    v32(v24, 1);
  }
  else
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_218F54000, v25, v26, "All collectors run successfully", v27, 2u);
      MEMORY[0x219A27C8C](v27, -1, -1);
    }

    a2((id)1, 0);
  }
}

uint64_t ActivityDispatcher.getJSONObjectFromCollectorDefinitions(collectorDefinitions:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  Swift::String v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  Class isa;
  id v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  Swift::String v38;
  id v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _OWORD *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  _OWORD v54[2];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for Logger();
  v49 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v48 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ReliabilityCategory();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.Encoding();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v50 = a3;
    static String.Encoding.utf8.getter();
    v16 = String.data(using:allowLossyConversion:)();
    v17 = *(void (**)(char *, uint64_t))(v13 + 8);
    v19 = v18;
    v17(v15, v12);
    if (v19 >> 60 == 15)
    {
      if (one-time initialization token for engagement != -1)
        swift_once();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
      *(_QWORD *)&v54[0] = 0;
      *((_QWORD *)&v54[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(79);
      v20._countAndFlagsBits = 0xD00000000000004DLL;
      v20._object = (void *)0x8000000218FC19A0;
      String.append(_:)(v20);
      v21._countAndFlagsBits = a1;
      v21._object = a2;
      String.append(_:)(v21);
      v22 = v54[0];
      v23 = *MEMORY[0x24BEA7F30];
      v24 = type metadata accessor for EngagementSignalCollectionError();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v11, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEA8030], v8);
      Logger.error(_:_:)(v22, *((unint64_t *)&v22 + 1), (uint64_t)v11);
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v26 = v50;
      *v50 = 0u;
      v26[1] = 0u;
    }
    else
    {
      memset(v54, 0, sizeof(v54));
      v29 = (void *)objc_opt_self();
      isa = Data._bridgeToObjectiveC()().super.isa;
      v51 = 0;
      v31 = objc_msgSend(v29, sel_JSONObjectWithData_options_error_, isa, 4, &v51);

      v32 = v51;
      if (v31)
      {
        _bridgeAnyObjectToAny(_:)();
        outlined consume of Data?(v16, v19);
        swift_unknownObjectRelease();
        outlined destroy of Any?((uint64_t)v54);
        outlined init with take of Any?((uint64_t)&v52, (uint64_t)v54);
      }
      else
      {
        v33 = v32;
        v46 = v19;
        v47 = v16;
        v34 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        if (one-time initialization token for engagement != -1)
          swift_once();
        v35 = __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
        v36 = v48;
        v37 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v35, v6);
        v52 = 0;
        v53 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v38._countAndFlagsBits = 0xD000000000000052;
        v38._object = (void *)0x8000000218FC19F0;
        String.append(_:)(v38);
        v51 = v34;
        v39 = v34;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v40._countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        v41 = v52;
        v42 = v53;
        v43 = *MEMORY[0x24BEA7EE8];
        v44 = type metadata accessor for EngagementSignalCollectionError();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v11, v43, v44);
        (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEA8030], v8);
        Logger.error(_:_:)(v41, v42, (uint64_t)v11);
        outlined consume of Data?(v47, v46);
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v6);
      }
      return outlined init with take of Any?((uint64_t)v54, (uint64_t)v50);
    }
  }
  else
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
    v27 = *MEMORY[0x24BEA7F00];
    v28 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v11, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEA8030], v8);
    Logger.error(_:_:)(0xD000000000000023, 0x8000000218FC1970, (uint64_t)v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(uint64_t a1, unint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  __int128 aBlock;
  __int128 v40;
  void (*v41)();
  _QWORD *v42;
  uint64_t v43;

  v37 = a3;
  v38 = a4;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v36 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v16 = a1 & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    a1 = 0xD0000000000000DDLL;
    a2 = 0x8000000218FC1A70;
  }
  ActivityDispatcher.getJSONObjectFromCollectorDefinitions(collectorDefinitions:)(a1, (void *)a2, &aBlock);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v40 + 1))
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    v20 = objc_msgSend((id)objc_opt_self(), sel_getErrorNoCollectorDefinitionsToRun);
LABEL_14:
    v21 = v20;
    v37();

    return;
  }
  v17 = v43;
  if (!*(_QWORD *)(v43 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000218FC1A50);
  if ((v19 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&aBlock);
  }
  else
  {
    aBlock = 0u;
    v40 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v40 + 1))
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    if (one-time initialization token for engagement != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.engagement);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_218F54000, v30, v31, "Trying to run with no activity dictionaries - disregarding", v32, 2u);
      MEMORY[0x219A27C8C](v32, -1, -1);
    }

    v20 = objc_msgSend((id)objc_opt_self(), sel_getErrorNoCollectorDefinitionsToRun);
    goto LABEL_14;
  }
  v22 = v43;
  if (!*(_QWORD *)(v43 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BEE5490], v12);
  v23 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v24 = (_QWORD *)swift_allocObject();
  v25 = v34;
  v24[2] = v34;
  v24[3] = v22;
  v26 = v38;
  v24[4] = v37;
  v24[5] = v26;
  v41 = partial apply for closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:);
  v42 = v24;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v40 = thunk for @escaping @callee_guaranteed () -> ();
  *((_QWORD *)&v40 + 1) = &block_descriptor_1;
  v27 = _Block_copy(&aBlock);
  v28 = v25;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v43 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x219A27458](0, v11, v8, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v35);
  swift_release();
}

void closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2)
  {
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a3;
    *(_QWORD *)(v7 + 24) = a4;
    swift_retain();
    specialized ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(a2, (uint64_t)partial apply for closure #1 in closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:), v7);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(void *a1, char a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD v28[2];
  void (*v29)(void *);
  void *v30;
  unint64_t v31;
  unint64_t v32;

  v8 = type metadata accessor for ReliabilityCategory();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v28[1] = a4;
    v29 = a3;
    v19 = a1;
    if (one-time initialization token for engagement != -1)
      swift_once();
    v20 = __swift_project_value_buffer(v12, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v20, v12);
    v31 = 0;
    v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    v31 = 0xD000000000000018;
    v32 = 0x8000000218FC1BE0;
    v30 = a1;
    v21 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v22._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23 = v31;
    v24 = v32;
    v25 = *MEMORY[0x24BEA7EF0];
    v26 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v11, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEA8030], v8);
    Logger.error(_:_:)(v23, v24, (uint64_t)v11);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v27 = a1;
    v29(a1);
    outlined consume of Result<Int, Error>(a1, 1);
    outlined consume of Result<Int, Error>(a1, 1);
  }
  else
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.engagement);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_218F54000, v16, v17, "DispatchSerially success", v18, 2u);
      MEMORY[0x219A27C8C](v18, -1, -1);
    }

    a3(0);
  }
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t ActivityDispatcher.runEngagementCollector(collectionDefinition:completion:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t (*)(void *), uint64_t);
  _QWORD v17[6];
  char v18;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v11 = *((_BYTE *)a1 + 48);
  if (one-time initialization token for defaultParameters != -1)
    swift_once();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(static Constants.defaultParameters);
  v17[0] = v5;
  v17[1] = v6;
  v17[2] = v7;
  v17[3] = v8;
  v17[4] = v9;
  v17[5] = v10;
  v18 = v11;
  if (specialized ActivityDispatcher.adaptActivityCollectionParameter(collectionDefinition:)((uint64_t)v17))
    swift_bridgeObjectRelease();
  type metadata accessor for PostSiriEngagementMetricsCollector();
  v12 = swift_allocObject();
  v13 = specialized PostSiriEngagementMetricsCollector.init(parameters:)(v12);
  swift_bridgeObjectRelease();
  swift_release();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  v15 = *(void (**)(uint64_t (*)(void *), uint64_t))(*(_QWORD *)v13 + 88);
  swift_retain();
  v15(partial apply for closure #1 in ActivityDispatcher.runEngagementCollector(collectionDefinition:completion:), v14);
  swift_release();
  return swift_release();
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = &demangling cache variable for type metadata for [String];
  v11 = MEMORY[0x24BEE4AD8] + 8;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          outlined consume of [String : [String]].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(v10);
    swift_dynamicCast();
    outlined init with take of Any(v6, v7);
    outlined init with take of Any(v7, v40);
    outlined init with take of Any(v40, &v38);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
      result = (unint64_t)outlined init with take of Any(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t closure #1 in ActivityDispatcher.runEngagementCollector(collectionDefinition:completion:)(void *a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD v25[2];
  void (*v26)(_QWORD);
  void *v27;
  unint64_t v28;
  unint64_t v29;

  v6 = type metadata accessor for ReliabilityCategory();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v25[1] = a3;
    v26 = a2;
    if (one-time initialization token for engagement != -1)
      swift_once();
    v14 = __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
    v28 = 0;
    v29 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v28 = 0xD000000000000027;
    v29 = 0x8000000218FC1B80;
    v27 = a1;
    v15 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = v28;
    v18 = v29;
    v19 = *MEMORY[0x24BEA7F08];
    v20 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v9, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEA8030], v6);
    Logger.error(_:_:)(v17, v18, (uint64_t)v9);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    a2 = v26;
    v26(a1);
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.engagement);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_218F54000, v21, v22, "Engagement processing success", v23, 2u);
    MEMORY[0x219A27C8C](v23, -1, -1);
  }

  return ((uint64_t (*)(_QWORD))a2)(0);
}

uint64_t specialized ActivityDispatcher.getCollectorClassObjectFromString(collectorID:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t ObjCClassFromMetadata;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = type metadata accessor for ReliabilityCategory();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AbstractActivityCollector();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v12 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v13 = objc_msgSend(v12, sel_infoDictionary);
  if (!v13)
  {
    v41 = 0u;
    v42 = 0u;
    goto LABEL_11;
  }
  v14 = v13;
  v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v15 + 16)
    || (v16 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C646E75424643, 0xEC000000656D614ELL), (v17 & 1) == 0))
  {
    v41 = 0u;
    v42 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(v15 + 56) + 32 * v16, (uint64_t)&v41);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v42 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v41);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v41 = v40;
    v18._countAndFlagsBits = 46;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = a1;
    v19._object = a2;
    String.append(_:)(v19);
    v20 = (void *)MEMORY[0x219A27218](v41, *((_QWORD *)&v41 + 1));
    swift_bridgeObjectRelease();
    v21 = objc_msgSend(v12, sel_classNamed_, v20);

    if (v21)
    {
      swift_getObjCClassMetadata();
      v22 = swift_dynamicCastMetatype();
      if (v22)
      {
        v23 = v22;

        return v23;
      }
    }
  }
LABEL_12:
  if (one-time initialization token for engagement != -1)
    swift_once();
  v24 = __swift_project_value_buffer(v7, (uint64_t)static Logger.engagement);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v24, v7);
  *(_QWORD *)&v41 = 0;
  *((_QWORD *)&v41 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v41 = a1;
  *((_QWORD *)&v41 + 1) = a2;
  v25._object = (void *)0x8000000218FC1C50;
  v25._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v25);
  v26 = objc_msgSend(v12, sel_description);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v29 = v28;

  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v32 = *((_QWORD *)&v41 + 1);
  v31 = v41;
  v33 = *MEMORY[0x24BEA7F18];
  v34 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v6, v33, v34);
  v36 = v38;
  v35 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v6, *MEMORY[0x24BEA8030], v39);
  Logger.error(_:_:)(v31, v32, (uint64_t)v6);
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v35);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return 0;
}

uint64_t specialized ActivityDispatcher.createCollectorFromParameters(parameters:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;

  v2 = type metadata accessor for ReliabilityCategory();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16)
    || (v10 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000218FC1C00), (v11 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)&v35), (swift_dynamicCast() & 1) == 0))
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v18 = __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v18, v6);
    v35 = 0;
    v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v35 = 0xD000000000000026;
    v36 = 0x8000000218FC1C20;
    v19._countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 32;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21 = v35;
    v22 = v36;
    v23 = *MEMORY[0x24BEA7F18];
    v24 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v5, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEA8030], v2);
    Logger.error(_:_:)(v21, v22, (uint64_t)v5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  v13 = v33;
  v12 = (unint64_t)v34;
  v14 = specialized ActivityDispatcher.getCollectorClassObjectFromString(collectorID:)(v33, v34);
  if (!v14)
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v35 = v29;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain();
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      v30 = Dictionary.description.getter();
      v32 = v31;
      swift_bridgeObjectRelease();
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_218F54000, v26, v27, "Failed to construct collector: %s with parameters: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x219A27C8C](v29, -1, -1);
      MEMORY[0x219A27C8C](v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  v15 = *(uint64_t (**)(uint64_t))(v14 + 80);
  v16 = swift_bridgeObjectRetain();
  v17 = v15(v16);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

void partial apply for closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)()
{
  uint64_t *v0;

  closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t specialized ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  dispatch_group_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;
  _QWORD *v39;
  void *v40;
  char *v41;
  void *v42;
  dispatch_group_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  dispatch_group_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t aBlock;
  uint64_t v62;
  uint64_t (*v63)();
  void *v64;
  void *v65;
  _QWORD *v66;

  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  v59 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v57 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = objc_msgSend((id)objc_opt_self(), sel_getExecQ);
  v56 = swift_allocObject();
  *(_QWORD *)(v56 + 16) = MEMORY[0x24BEE4AF8];
  v52 = dispatch_group_create();
  v54 = *(_QWORD *)(a1 + 16);
  if (v54)
  {
    v46 = a2;
    v47 = a3;
    swift_bridgeObjectRetain();
    v13 = 0;
    *(_QWORD *)&v14 = 136315138;
    v49 = v14;
    v48 = MEMORY[0x24BEE4AD8] + 8;
    v50 = v7;
    v51 = v9;
    v53 = a1;
    do
    {
      v23 = *(_QWORD *)(a1 + 8 * v13 + 32);
      v24 = one-time initialization token for engagement;
      swift_bridgeObjectRetain();
      if (v24 != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.engagement);
      swift_bridgeObjectRetain_n();
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = swift_slowAlloc();
        v29 = v6;
        v30 = swift_slowAlloc();
        aBlock = v30;
        *(_DWORD *)v28 = v49;
        swift_bridgeObjectRetain();
        v31 = Dictionary.description.getter();
        v33 = v32;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v28 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &aBlock);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_218F54000, v26, v27, "Creating collector with %s", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy();
        v34 = v30;
        v6 = v29;
        v7 = v50;
        v9 = v51;
        MEMORY[0x219A27C8C](v34, -1, -1);
        MEMORY[0x219A27C8C](v28, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v35 = specialized ActivityDispatcher.createCollectorFromParameters(parameters:)(v23);
      if (v35)
      {
        v15 = v35;
        v16 = v52;
        dispatch_group_enter(v52);
        v17 = (_QWORD *)swift_allocObject();
        v19 = v55;
        v18 = v56;
        v17[2] = v15;
        v17[3] = v19;
        v17[4] = v18;
        v17[5] = v23;
        v17[6] = v16;
        v65 = partial apply for closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:);
        v66 = v17;
        aBlock = MEMORY[0x24BDAC760];
        v62 = 1107296256;
        v63 = thunk for @escaping @callee_guaranteed () -> ();
        v64 = &block_descriptor_37;
        v20 = _Block_copy(&aBlock);
        swift_retain();
        v19;
        swift_retain();
        v21 = v16;
        v22 = v57;
        static DispatchQoS.unspecified.getter();
        v60 = MEMORY[0x24BEE4AF8];
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x219A27458](0, v22, v9, v20);
        _Block_release(v20);
        swift_release();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v58);
      }
      else
      {
        static DispatchWorkItemFlags.barrier.getter();
        v36 = swift_allocObject();
        *(_QWORD *)(v36 + 16) = v56;
        *(_QWORD *)(v36 + 24) = v23;
        v65 = partial apply for closure #2 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:);
        v66 = (_QWORD *)v36;
        aBlock = MEMORY[0x24BDAC760];
        v62 = 1107296256;
        v63 = thunk for @escaping @callee_guaranteed () -> ();
        v64 = &block_descriptor_25;
        v37 = _Block_copy(&aBlock);
        swift_retain();
        v38 = v57;
        static DispatchQoS.unspecified.getter();
        MEMORY[0x219A27458](0, v38, v9, v37);
        _Block_release(v37);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v58);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      swift_release();
      ++v13;
      a1 = v53;
    }
    while (v54 != v13);
    swift_bridgeObjectRelease();
    a3 = v47;
    a2 = v46;
  }
  v39 = (_QWORD *)swift_allocObject();
  v39[2] = v56;
  v39[3] = a2;
  v39[4] = a3;
  v65 = partial apply for closure #3 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:);
  v66 = v39;
  aBlock = MEMORY[0x24BDAC760];
  v62 = 1107296256;
  v63 = thunk for @escaping @callee_guaranteed () -> ();
  v64 = &block_descriptor_31;
  v40 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  v41 = v57;
  static DispatchQoS.unspecified.getter();
  v60 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v42 = v55;
  v43 = v52;
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v40);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v41, v58);
  swift_release();
  return swift_release();
}

void specialized ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(uint64_t a1, unint64_t a2, void *a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 aBlock;
  __int128 v43;
  uint64_t (*v44)();
  _QWORD *v45;
  uint64_t v46;

  v37 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v38 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a4;
  v18 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v18 = a1 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    a1 = 0xD0000000000000DDLL;
    a2 = 0x8000000218FC1A70;
  }
  _Block_copy(a4);
  ActivityDispatcher.getJSONObjectFromCollectorDefinitions(collectorDefinitions:)(a1, (void *)a2, &aBlock);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v43 + 1))
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    v22 = objc_msgSend((id)objc_opt_self(), sel_getErrorNoCollectorDefinitionsToRun);
LABEL_14:
    v23 = v22;
    v24 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(_QWORD, void *))a4)[2](a4, v24);
    swift_release();

    return;
  }
  v19 = v46;
  if (!*(_QWORD *)(v46 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x8000000218FC1A50);
  if ((v21 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v19 + 56) + 32 * v20, (uint64_t)&aBlock);
  }
  else
  {
    aBlock = 0u;
    v43 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v43 + 1))
  {
    outlined destroy of Any?((uint64_t)&aBlock);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    if (one-time initialization token for engagement != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.engagement);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_218F54000, v33, v34, "Trying to run with no activity dictionaries - disregarding", v35, 2u);
      MEMORY[0x219A27C8C](v35, -1, -1);
    }

    v22 = objc_msgSend((id)objc_opt_self(), sel_getErrorNoCollectorDefinitionsToRun);
    goto LABEL_14;
  }
  v25 = v46;
  if (!*(_QWORD *)(v46 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x24BEE5490], v13);
  v26 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v27 = (_QWORD *)swift_allocObject();
  v28 = v37;
  v27[2] = v37;
  v27[3] = v25;
  v27[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ();
  v27[5] = v17;
  v44 = closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)partial apply;
  v45 = v27;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v43 = thunk for @escaping @callee_guaranteed () -> ();
  *((_QWORD *)&v43 + 1) = &block_descriptor_13;
  v29 = _Block_copy(&aBlock);
  v30 = v28;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v46 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v31 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x219A27458](0, v12, v9, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v31);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
  swift_release();
  swift_release();
}

unint64_t specialized ActivityDispatcher.adaptActivityCollectionParameter(collectionDefinition:)(uint64_t a1)
{
  unint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t inited;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 < 2)
    return 0;
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[2 * v5];
  v6[4] = 0x495569726953;
  v6[5] = 0xE600000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_218FBDA00;
  *(_QWORD *)(inited + 32) = 0x614E6D6165727473;
  *(_QWORD *)(inited + 40) = 0xEB0000000073656DLL;
  *(_QWORD *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)(inited + 48) = v3;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t partial apply for closure #1 in ActivityDispatcher.runEngagementCollector(collectionDefinition:completion:)(void *a1)
{
  uint64_t v1;

  return closure #1 in ActivityDispatcher.runEngagementCollector(collectionDefinition:completion:)(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_218FAA784()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined consume of ActivityCollectionParameter?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_218FAA804()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in ActivityDispatcher.runCollectorsDefinedIn(parameters:completion:)(a1, a2 & 1, *(void (**)(void *))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_218FAA834()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_218FAA874()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #3 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)()
{
  uint64_t v0;

  closure #3 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(*(_QWORD *)(v0 + 16), *(void (**)(id, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)()
{
  uint64_t v0;

  return closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t objectdestroy_33Tm()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(void *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in ActivityDispatcher.dispatchSerially(collectorDefinitions:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(NSObject **)(v1 + 48));
}

uint64_t objectdestroy_21Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void outlined consume of Result<Int, Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t StreamType.name.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_218FAA9B4
                                                            + 4 * asc_218FBE8F0[*v0]))(0x495569726953, 0xE600000000000000);
}

uint64_t sub_218FAA9B4()
{
  return 0x6365784569726953;
}

uint64_t sub_218FAA9D8()
{
  return 0x6979616C50776F4ELL;
}

uint64_t sub_218FAA9F4()
{
  return 0x6E65746E49707041;
}

uint64_t sub_218FAAA14()
{
  return 0x636E75614C707041;
}

uint64_t sub_218FAAA30()
{
  return 0x6D72616C41;
}

uint64_t ActivityCollectionParameter.startTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ActivityCollectionParameter.startTime.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*ActivityCollectionParameter.startTime.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t ActivityCollectionParameter.endTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t ActivityCollectionParameter.endTime.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*ActivityCollectionParameter.endTime.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t ActivityCollectionParameter.streams.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActivityCollectionParameter.streams.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*ActivityCollectionParameter.streams.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t ActivityCollectionParameter.timeWindowForCollection.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t ActivityCollectionParameter.timeWindowForCollection.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*ActivityCollectionParameter.timeWindowForCollection.modify())()
{
  return AbstractActivityCollector.collect(callback:);
}

uint64_t ActivityCollectionParameter.init(collectionType:_:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  return a1();
}

unint64_t CollectionType.name.getter()
{
  return 0xD000000000000012;
}

uint64_t static CollectionType.== infix(_:_:)()
{
  return 1;
}

void CollectionType.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int CollectionType.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL static StreamType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void StreamType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int StreamType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CollectionType and conformance CollectionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollectionType and conformance CollectionType;
  if (!lazy protocol witness table cache variable for type CollectionType and conformance CollectionType)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for CollectionType, &type metadata for CollectionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionType and conformance CollectionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamType and conformance StreamType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamType and conformance StreamType;
  if (!lazy protocol witness table cache variable for type StreamType and conformance StreamType)
  {
    result = MEMORY[0x219A27BFC](&protocol conformance descriptor for StreamType, &type metadata for StreamType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamType and conformance StreamType);
  }
  return result;
}

uint64_t destroy for ActivityCollectionParameter()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ActivityCollectionParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActivityCollectionParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[5];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ActivityCollectionParameter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivityCollectionParameter(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivityCollectionParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityCollectionParameter()
{
  return &type metadata for ActivityCollectionParameter;
}

uint64_t storeEnumTagSinglePayload for CollectionType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_218FAAF44 + 4 * byte_218FBE8F6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_218FAAF64 + 4 * byte_218FBE8FB[v4]))();
}

_BYTE *sub_218FAAF44(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_218FAAF64(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_218FAAF6C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_218FAAF74(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_218FAAF7C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_218FAAF84(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CollectionType()
{
  return &type metadata for CollectionType;
}

uint64_t getEnumTagSinglePayload for StreamType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StreamType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_218FAB07C + 4 * byte_218FBE905[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_218FAB0B0 + 4 * byte_218FBE900[v4]))();
}

uint64_t sub_218FAB0B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_218FAB0B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x218FAB0C0);
  return result;
}

uint64_t sub_218FAB0CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x218FAB0D4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_218FAB0D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_218FAB0E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StreamType()
{
  return &type metadata for StreamType;
}

uint64_t CalendarEventSignalFactory.__allocating_init()()
{
  return swift_allocObject();
}

void one-time initialization function for kCalendarActivityApprovedKeys()
{
  kCalendarActivityApprovedKeys._rawValue = &outlined read-only object #0 of one-time initialization function for kCalendarActivityApprovedKeys;
}

Swift::OpaquePointer *kCalendarActivityApprovedKeys.unsafeMutableAddressor()
{
  if (one-time initialization token for kCalendarActivityApprovedKeys != -1)
    swift_once();
  return &kCalendarActivityApprovedKeys;
}

Swift::Int *kCalendarRecurrenceIndex.unsafeMutableAddressor()
{
  return &kCalendarRecurrenceIndex;
}

Swift::String *kCalendarSignalWillUpdateVerb.unsafeMutableAddressor()
{
  return &kCalendarSignalWillUpdateVerb;
}

Swift::String *kCalendarSignalDidUpdateVerb.unsafeMutableAddressor()
{
  return &kCalendarSignalDidUpdateVerb;
}

Swift::String *kCalendarSignalUpdateAction.unsafeMutableAddressor()
{
  return &kCalendarSignalUpdateAction;
}

void CalendarEventSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  id v52;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v44 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)MEMORY[0x219A27818](v12);
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v47);
  if (v2)
  {
    objc_autoreleasePoolPop(v15);
    return;
  }
  *(_QWORD *)&v46 = a2;
  objc_autoreleasePoolPop(v15);
  v52 = (id)v47;
  v16 = objc_msgSend((id)v47, sel_intent);
  v17 = objc_msgSend(v16, sel_domain);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  if (v18 == 0x7261646E656C6143 && v20 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {

      return;
    }
  }
  v22 = objc_msgSend(v16, sel_verb);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;

  objc_msgSend(a1, sel_absoluteTimestamp);
  Date.init(timeIntervalSinceReferenceDate:)();
  v26 = type metadata accessor for Date();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v14, 0, 1, v26);
  v27 = objc_msgSend(v52, sel_dateInterval);
  v45 = v25;
  if (v27)
  {
    v28 = v27;
    v29 = v23;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    v30 = type metadata accessor for DateInterval();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v8, 0, 1, v30);
  }
  else
  {
    v29 = v23;
    v30 = type metadata accessor for DateInterval();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v8, 1, 1, v30);
  }
  v31 = v46;
  outlined init with take of DateInterval?((uint64_t)v8, (uint64_t)v10);
  type metadata accessor for DateInterval();
  v32 = 0.0;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v10, 1, v30))
  {
    DateInterval.duration.getter();
    v32 = v33;
  }
  outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for DateInterval?);
  type metadata accessor for Utils();
  static Utils.deltaTBetween(eventStart:siriUISession:duration:)((uint64_t)v14, v31, (uint64_t)&v47, v32);
  outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for Date?);
  v46 = v47;
  v34 = v48;
  v35 = v49;
  v36 = v50;
  v37 = v51;
  v38 = objc_msgSend(v16, sel_domain);
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v41 = v40;

  type metadata accessor for Signal();
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = v46;
  *(_QWORD *)(v42 + 32) = v34;
  *(_QWORD *)(v42 + 40) = v35;
  *(_QWORD *)(v42 + 48) = v36;
  *(_BYTE *)(v42 + 56) = v37;
  *(_QWORD *)(v42 + 64) = v39;
  *(_QWORD *)(v42 + 72) = v41;
  v43 = v45;
  *(_QWORD *)(v42 + 80) = v29;
  *(_QWORD *)(v42 + 88) = v43;
  *(_BYTE *)(v42 + 96) = 1;
  *(_QWORD *)(v42 + 104) = MEMORY[0x24BEE4B00];
}

uint64_t CalendarEventSignalFactory.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t CalendarEventSignalFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t CalendarEventSignalFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CalendarEventSignalFactory()
{
  return objc_opt_self();
}

uint64_t UISessionSignalBuilder.__allocating_init(siriUISession:index:collector:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_allocObject();
  v9 = v8 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  v10 = type metadata accessor for SiriUISession(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v8 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v8 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_intelligenceEngineSession) = v12;
  v13 = v8 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream;
  *(_QWORD *)(v13 + 32) = 0;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  outlined init with take of SiriUISession(a1, (uint64_t)v7);
  v11((uint64_t)v7, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of SiriUISession?((uint64_t)v7, v9);
  swift_endAccess();
  *(_QWORD *)(v8 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = a3;
  return v8;
}

uint64_t SiriUISession.init(startDate:endDate:postEndDate:sessionID:uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  int *v18;
  uint64_t result;
  _QWORD *v20;
  _QWORD *v21;

  v16 = type metadata accessor for Date();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(a8, a1, v16);
  v18 = (int *)type metadata accessor for SiriUISession(0);
  v17(a8 + v18[5], a2, v16);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v17)(a8 + v18[6], a3, v16);
  v20 = (_QWORD *)(a8 + v18[7]);
  *v20 = a4;
  v20[1] = a5;
  v21 = (_QWORD *)(a8 + v18[8]);
  *v21 = a6;
  v21[1] = a7;
  return result;
}

uint64_t UISessionSignalBuilder.__allocating_init(collector:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = swift_allocObject();
  v3 = v2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  v4 = type metadata accessor for SiriUISession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_intelligenceEngineSession) = v5;
  v6 = v2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream;
  *(_QWORD *)(v6 + 32) = 0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = a1;
  return v2;
}

uint64_t SiriUISession.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SiriUISession.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SiriUISession(0) + 20);
  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SiriUISession.endDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SiriUISession(0) + 20);
  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SiriUISession.endDate.modify())()
{
  type metadata accessor for SiriUISession(0);
  return AbstractActivityCollector.collect(callback:);
}

uint64_t SiriUISession.postEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SiriUISession(0) + 24);
  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SiriUISession.postEndDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SiriUISession(0) + 24);
  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SiriUISession.postEndDate.modify())()
{
  type metadata accessor for SiriUISession(0);
  return AbstractActivityCollector.collect(callback:);
}

uint64_t SiriUISession.sessionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SiriUISession(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriUISession.uuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SiriUISession(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for UISessionSignalBuilder.siriUISession : UISessionSignalBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SiriUISession?(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 128))(v6);
}

uint64_t UISessionSignalBuilder.siriUISession.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  swift_beginAccess();
  return outlined init with copy of SiriUISession?(v3, a1);
}

uint64_t UISessionSignalBuilder.siriUISession.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  swift_beginAccess();
  outlined assign with take of SiriUISession?(a1, v3);
  return swift_endAccess();
}

uint64_t (*UISessionSignalBuilder.siriUISession.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t UISessionSignalBuilder.siriExecutionTasks.getter()
{
  return UISessionSignalBuilder.siriExecutionTasks.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t UISessionSignalBuilder.siriExecutionTasks.setter(uint64_t a1)
{
  return UISessionSignalBuilder.siriExecutionTasks.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks);
}

uint64_t (*UISessionSignalBuilder.siriExecutionTasks.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t UISessionSignalBuilder.intelligenceEngineSession.getter()
{
  return UISessionSignalBuilder.siriExecutionTasks.getter();
}

uint64_t UISessionSignalBuilder.intelligenceEngineSession.setter(uint64_t a1)
{
  return UISessionSignalBuilder.siriExecutionTasks.setter(a1, &OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_intelligenceEngineSession);
}

uint64_t UISessionSignalBuilder.siriExecutionTasks.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*UISessionSignalBuilder.intelligenceEngineSession.modify())()
{
  swift_beginAccess();
  return EngagementUnderstandingFeatures.taskInteractionType.modify;
}

uint64_t UISessionSignalBuilder.postSiriDataStream.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  result = outlined copy of PSEBiomeEventsSource?(v4);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  return result;
}

_QWORD *UISessionSignalBuilder.postSiriDataStream.setter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream);
  swift_beginAccess();
  v4 = *v3;
  outlined init with take of PSEBiomeEventsSource?((uint64_t)a1, (uint64_t)v3);
  outlined retain of PSEBiomeEventsSource?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PSEBiomeEventsSource?);
  outlined consume of PSEBiomeEventsSource?(v4);
  return outlined retain of PSEBiomeEventsSource?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PSEBiomeEventsSource?);
}

uint64_t (*UISessionSignalBuilder.postSiriDataStream.modify())()
{
  swift_beginAccess();
  return NowPlayingSignalFactory.postEndDate.modify;
}

uint64_t UISessionSignalBuilder.init(siriUISession:index:collector:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v3 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  v10 = type metadata accessor for SiriUISession(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_intelligenceEngineSession) = v12;
  v13 = v3 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_QWORD *)(v13 + 32) = 0;
  outlined init with take of SiriUISession(a1, (uint64_t)v8);
  v11((uint64_t)v8, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of SiriUISession?((uint64_t)v8, v9);
  swift_endAccess();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = a3;
  return v3;
}

uint64_t type metadata accessor for SiriUISession(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for SiriUISession);
}

uint64_t UISessionSignalBuilder.init(collector:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession;
  v4 = type metadata accessor for SiriUISession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriExecutionTasks) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_intelligenceEngineSession) = v5;
  v6 = v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector) = a1;
  return v1;
}

uint64_t outlined copy of PSEBiomeEventsSource?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of PSEBiomeEventsSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PSEBiomeEventsSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of PSEBiomeEventsSource?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *outlined retain of PSEBiomeEventsSource?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t UISessionSignalBuilder.fetchSiriExecutionEvents(nextUISession:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t Configuration;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t);
  void (*v17)(_BYTE *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[32];

  Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  MEMORY[0x24BDAC7A8](Configuration);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for SiriUISession(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 120))(v11);
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v14((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for SiriUISession?);
    return MEMORY[0x24BEE4AF8];
  }
  else
  {
    outlined init with take of SiriUISession((uint64_t)v8, (uint64_t)v13);
    v16 = *(void (**)(_BYTE *, uint64_t))(**(_QWORD **)(v1
                                                                + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector)
                                                  + 296);
    swift_retain();
    v16(v13, a1);
    swift_release();
    v17 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v24);
    v19 = v18;
    if (!v14(v18, 1, v9))
    {
      v20 = &v5[*(int *)(Configuration + 20)];
      v21 = v19 + *(int *)(v9 + 24);
      v22 = type metadata accessor for Date();
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v21, v20, v22);
    }
    v17(v24, 0);
    v15 = specialized static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)((uint64_t)v5, (uint64_t)&v5[*(int *)(Configuration + 20)]);
    outlined destroy of SiriUISession((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PSEBiomeFetchConfiguration);
    outlined destroy of SiriUISession((uint64_t)v13, type metadata accessor for SiriUISession);
  }
  return v15;
}

uint64_t UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t Configuration;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  void (*v32)(uint64_t);
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  void (*v68)(uint64_t, char *, uint64_t);
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t);
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);

  v86 = a3;
  v87 = a2;
  v84 = a1;
  Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  MEMORY[0x24BDAC7A8](Configuration);
  v83 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v78 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v77 = (char *)&v72 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v79 = (char *)&v72 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v82 = (char *)&v72 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v81 = (char *)&v72 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v72 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v72 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SiriUISession(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v72 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 120))(v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    outlined destroy of Any?((uint64_t)v25, &demangling cache variable for type metadata for SiriUISession?);
    return v87(v3);
  }
  v76 = Configuration;
  v32 = (void (*)(uint64_t))v87;
  outlined init with take of SiriUISession((uint64_t)v25, (uint64_t)v30);
  v33 = v7;
  v34 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v34(v22, v30, v6);
  v35 = *(int *)(v26 + 24);
  v75 = v30;
  v36 = &v30[v35];
  v80 = v34;
  v37 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v20, v36, v6);
  v38 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 144);
  v85 = v3;
  v39 = v38(v37);
  if (v39 >> 62)
    v40 = _CocoaArrayWrapper.endIndex.getter();
  else
    v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
  v41 = swift_bridgeObjectRelease();
  if (v40 < 2)
    goto LABEL_28;
  v42 = v38(v41);
  v73 = v36;
  if ((v42 & 0xC000000000000001) == 0)
  {
    if (v84 < 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)v84)
    {
      v43 = *(_QWORD *)(v42 + 8 * v84 + 32);
      swift_retain();
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_33;
  }
  v43 = MEMORY[0x219A2756C](v84, v42);
LABEL_10:
  v44 = swift_bridgeObjectRelease();
  v45 = v81;
  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 320))(v44);
  v74 = *(void (**)(char *, uint64_t))(v33 + 8);
  v74(v22, v6);
  v81 = *(char **)(v33 + 32);
  v46 = ((uint64_t (*)(char *, char *, uint64_t))v81)(v22, v45, v6);
  v7 = *(_QWORD *)(*(_QWORD *)v43 + 344);
  v47 = ((uint64_t (*)(uint64_t))v7)(v46);
  v48 = v38(v47);
  if (!(v48 >> 62))
  {
    v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_12;
  }
LABEL_33:
  v49 = _CocoaArrayWrapper.endIndex.getter();
LABEL_12:
  v50 = swift_bridgeObjectRelease();
  v51 = v84 + 1;
  if (__OFADD__(v84, 1))
  {
    __break(1u);
  }
  else
  {
    if (v49 == v51)
    {
      swift_release();
      v52 = v82;
      v53 = v74;
      v74(v82, v6);
      v53(v20, v6);
      v80(v52, v73, v6);
LABEL_27:
      ((void (*)(char *, char *, uint64_t))v81)(v20, v52, v6);
LABEL_28:
      v67 = (uint64_t)v83;
      v68 = (void (*)(uint64_t, char *, uint64_t))v80;
      v80(v83, v22, v6);
      v68(v67 + *(int *)(v76 + 20), v20, v6);
      v69 = v85;
      v70 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(v85 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector)
                                                                                              + 304);
      swift_retain();
      swift_retain();
      v70(v67, partial apply for closure #1 in UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:), v69);
      swift_release();
      swift_release();
      v32(v69);
      outlined destroy of SiriUISession(v67, (uint64_t (*)(_QWORD))type metadata accessor for PSEBiomeFetchConfiguration);
      v71 = *(void (**)(char *, uint64_t))(v33 + 8);
      v71(v20, v6);
      v71(v22, v6);
      return outlined destroy of SiriUISession((uint64_t)v75, type metadata accessor for SiriUISession);
    }
    v54 = v38(v50);
    if (!(v54 >> 62))
    {
      v84 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_17;
    }
  }
  v84 = _CocoaArrayWrapper.endIndex.getter();
LABEL_17:
  v55 = swift_bridgeObjectRelease();
  if (v51 >= v84)
  {
    v74(v20, v6);
    swift_release();
    v52 = v82;
    goto LABEL_27;
  }
  result = v38(v55);
  if ((result & 0xC000000000000001) != 0)
  {
    v56 = MEMORY[0x219A2756C](v51, result);
    goto LABEL_22;
  }
  if (v51 < 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v51 < *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v56 = *(_QWORD *)(result + 8 * v51 + 32);
    swift_retain();
LABEL_22:
    v57 = swift_bridgeObjectRelease();
    v58 = v77;
    v59 = ((uint64_t (*)(uint64_t))v7)(v57);
    v60 = v78;
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 320))(v59);
    lazy protocol witness table accessor for type Date and conformance Date();
    if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) != 0)
      v61 = v60;
    else
      v61 = v58;
    v62 = v79;
    v80(v79, v61, v6);
    swift_release();
    swift_release();
    v63 = v74;
    v74(v60, v6);
    v63(v58, v6);
    v64 = v82;
    v63(v82, v6);
    v63(v20, v6);
    v65 = v62;
    v66 = (void (*)(char *, char *, uint64_t))v81;
    ((void (*)(char *, char *, uint64_t))v81)(v64, v65, v6);
    v32 = (void (*)(uint64_t))v87;
    v66(v20, v64, v6);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t UISessionSignalBuilder.fetchDataStreams(taskIndex:endDate:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Configuration;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t);
  uint64_t (*v41)(uint64_t);
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v3 = v2;
  v45 = a2;
  Configuration = type metadata accessor for PSEBiomeFetchConfiguration();
  MEMORY[0x24BDAC7A8](Configuration);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v43 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v42 = (char *)&v41 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v41 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v41 - v18;
  v20 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144);
  v21 = v20(v17);
  v46 = Configuration;
  if ((v21 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      Configuration = *(_QWORD *)(v21 + 8 * a1 + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_25;
  }
  Configuration = MEMORY[0x219A2756C](a1, v21);
LABEL_5:
  v44 = v16;
  v22 = swift_bridgeObjectRelease();
  v41 = *(uint64_t (**)(uint64_t))(*(_QWORD *)Configuration + 344);
  v23 = v41(v22);
  v24 = v20(v23);
  if (!(v24 >> 62))
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_7;
  }
LABEL_25:
  v25 = _CocoaArrayWrapper.endIndex.getter();
LABEL_7:
  v26 = swift_bridgeObjectRelease();
  v27 = __OFADD__(a1, 1);
  v28 = a1 + 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    if (v25 == v28)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v19, v8);
      v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v19, v45, v8);
LABEL_21:
      (*(void (**)(uint64_t))(*(_QWORD *)Configuration + 320))(v29);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v7[*(int *)(v46 + 20)], v19, v8);
      v40 = *(void (**)(char *, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(v3 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector)
                                                                                             + 304);
      swift_retain();
      swift_retain();
      v40(v7, partial apply for closure #1 in UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:), v3);
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of SiriUISession((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PSEBiomeFetchConfiguration);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v19, v8);
    }
    v30 = v20(v26);
    if (!(v30 >> 62))
    {
      v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_12;
    }
  }
  v31 = _CocoaArrayWrapper.endIndex.getter();
LABEL_12:
  v29 = swift_bridgeObjectRelease();
  if (v28 >= v31)
    goto LABEL_21;
  result = v20(v29);
  if ((result & 0xC000000000000001) != 0)
  {
    v33 = MEMORY[0x219A2756C](v28, result);
    goto LABEL_17;
  }
  if (v28 < 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v28 < *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v33 = *(_QWORD *)(result + 8 * v28 + 32);
    swift_retain();
LABEL_17:
    v34 = swift_bridgeObjectRelease();
    v35 = v42;
    v36 = v41(v34);
    v37 = v43;
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 320))(v36);
    lazy protocol witness table accessor for type Date and conformance Date();
    if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) != 0)
      v38 = v37;
    else
      v38 = v35;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v44, v38, v8);
    swift_release();
    v39 = *(void (**)(char *, uint64_t))(v9 + 8);
    v39(v37, v8);
    v39(v35, v8);
    v39(v19, v8);
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v19, v44, v8);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *);
  _QWORD v20[5];
  uint64_t v21;
  unint64_t v22;
  uint64_t v23[5];

  outlined init with take of PSEBiomeEventsSource?(a2, (uint64_t)v20);
  v5 = v20[0];
  v6 = v20[2];
  v7 = v20[3];
  v8 = v20[4];
  outlined init with take of PSEBiomeEventsSource?(a2, (uint64_t)&v21);
  if (v21)
  {
    v9 = v22;
    if ((v22 & 0x8000000000000000) != 0 || (v22 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      v10 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v9);
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = v22 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
    }
    v23[0] = v10;
    specialized MutableCollection<>.sort(by:)(v23, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), &lazy cache variable for type metadata for BMIntentEvent);
    swift_bridgeObjectRelease();
    v11 = v23[0];
    v23[0] = v6;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v23, specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_bridgeObjectRelease();
    v12 = v23[0];
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v13 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
    }
    v23[0] = v13;
    specialized MutableCollection<>.sort(by:)(v23, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), &lazy cache variable for type metadata for BMAppLaunchEvent);
    swift_bridgeObjectRelease();
    v14 = v23[0];
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v15 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
    }
    v23[0] = v15;
    specialized MutableCollection<>.sort(by:)(v23, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), &lazy cache variable for type metadata for BMNowPlayingEvent);
    swift_bridgeObjectRelease();
    v16 = v23[0];
    v23[0] = v8;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v23, specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_bridgeObjectRelease();
    v17 = v23[0];
  }
  else
  {
    v17 = MEMORY[0x24BEE4AF8];
    v16 = MEMORY[0x24BEE4AF8];
    v14 = MEMORY[0x24BEE4AF8];
    v12 = MEMORY[0x24BEE4AF8];
    v11 = MEMORY[0x24BEE4AF8];
  }
  v23[0] = v16;
  v23[1] = v11;
  v23[2] = v12;
  v23[3] = v14;
  v23[4] = v17;
  v18 = *(void (**)(uint64_t *))(*(_QWORD *)a3 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t UISessionSignalBuilder.buildSignalsAndTaskFeatureSets(task:completion:)(uint64_t a1, uint64_t (*a2)(unint64_t *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t *);
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t *__return_ptr, unint64_t, char *);
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  void (*v73)(uint64_t *);
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD v83[5];
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;

  v77 = a1;
  v6 = type metadata accessor for ReliabilityCategory();
  v75 = *(_QWORD *)(v6 - 8);
  v76 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger();
  v74 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SiriUISession(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 120))(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for SiriUISession?);
    v84 = 0;
    v85 = 0;
    v86 = 0;
    return a2(&v84);
  }
  v72[1] = a3;
  v73 = (void (*)(uint64_t *))a2;
  v21 = v19;
  v22 = outlined init with take of SiriUISession((uint64_t)v14, (uint64_t)v19);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v3 + 192))(v83, v22);
  outlined init with take of PSEBiomeEventsSource?((uint64_t)v83, (uint64_t)&v84);
  v23 = v84;
  if (!v84)
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v37 = __swift_project_value_buffer(v9, (uint64_t)static Logger.engagement);
    v38 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v11, v37, v9);
    v80 = 0;
    v81 = 0xE000000000000000;
    _StringGuts.grow(_:)(123);
    v39._countAndFlagsBits = 0xD000000000000078;
    v39._object = (void *)0x8000000218FC1CB0;
    String.append(_:)(v39);
    v40 = (uint64_t *)&v19[*(int *)(v15 + 32)];
    v41 = *v40;
    v42 = (void *)v40[1];
    swift_bridgeObjectRetain();
    v43._countAndFlagsBits = v41;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    v45 = v80;
    v46 = v81;
    v47 = *MEMORY[0x24BEA7F20];
    v48 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v8, v47, v48);
    v50 = v75;
    v49 = v76;
    (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v8, *MEMORY[0x24BEA8030], v76);
    Logger.error(_:_:)(v45, v46, (uint64_t)v8);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v8, v49);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v9);
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v73(&v80);
    v51 = (uint64_t)v21;
    return outlined destroy of SiriUISession(v51, type metadata accessor for SiriUISession);
  }
  v24 = v3;
  v25 = v85;
  v26 = v86;
  v27 = v87;
  v75 = v88;
  v78 = MEMORY[0x24BEE4AF8];
  v79 = MEMORY[0x24BEE4AF8];
  if (v85 >> 62)
  {
    swift_bridgeObjectRetain();
    v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v29 = v73;
  v74 = v25;
  v30 = v77;
  v76 = v27;
  if (v28)
  {
    v73 = (void (*)(uint64_t *))v26;
    v31 = *(_QWORD *)(v24 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector);
    v32 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 248);
    v33 = swift_retain();
    v34 = v32(v33);
    v35 = 0;
    v52 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 280))(v74, v34, v36);
    swift_release();
    swift_bridgeObjectRelease();
    if (v52)
    {
      v53 = *(void (**)(uint64_t *__return_ptr, unint64_t, char *))(*(_QWORD *)v52 + 96);
      v72[0] = 0;
      v53(&v80, v74, v19);
      v54 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v54);
      v55 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v35 = v72[0];
    }
    v26 = (uint64_t)v73;
    v27 = v76;
    if (*((_QWORD *)v73 + 2))
      goto LABEL_17;
  }
  else
  {
    v35 = 0;
    if (*(_QWORD *)(v26 + 16))
    {
LABEL_17:
      type metadata accessor for ExtendedAlarmSignalFactory();
      swift_allocObject();
      ExtendedAlarmSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v26, (uint64_t)v19, &v80);
      swift_release();
      v56 = v80;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v56);
      v57 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v57);
      v27 = v76;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (!(v27 >> 62))
  {
    if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_21;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v67 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v67)
  {
LABEL_20:
    type metadata accessor for AppLaunchSignalFactory();
    v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_218FBDE30;
    *(_QWORD *)(v58 + 32) = 0xD00000000000002BLL;
    *(_QWORD *)(v58 + 40) = 0x8000000218FC0C60;
    *(_QWORD *)(v58 + 48) = 0xD000000000000031;
    *(_QWORD *)(v58 + 56) = 0x8000000218FC0C90;
    *(_QWORD *)(v58 + 64) = 0xD00000000000002DLL;
    *(_QWORD *)(v58 + 72) = 0x8000000218FC0CD0;
    AppLaunchSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)((uint64_t)v19, &v80);
    swift_release();
    v59 = v80;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v59);
    v60 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_21:
  v61 = v75;
  if (*(_QWORD *)(v75 + 16))
  {
    type metadata accessor for HomeKitAccessoryControlSignalFactory();
    swift_allocObject();
    HomeKitAccessoryControlSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v61, (uint64_t)v19, &v80);
    swift_release();
    v62 = v80;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v62);
    v63 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v63);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    v68 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v68)
      goto LABEL_31;
  }
  else if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 312))(v30) & 1) == 0)
    goto LABEL_31;
  type metadata accessor for NowPlayingSignalFactory();
  swift_allocObject();
  v64 = NowPlayingSignalFactory.init()();
  (*(void (**)(uint64_t *__return_ptr, unint64_t, char *))(*(_QWORD *)v64 + 144))(&v80, v23, v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65 = v80;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v65);
  v66 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v66);
  swift_bridgeObjectRelease();
LABEL_32:
  swift_bridgeObjectRelease();
  v69 = v79;
  if ((v79 & 0x8000000000000000) != 0 || (v79 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
    v70 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v69);
    swift_bridgeObjectRelease();
  }
  else
  {
    v70 = v79 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
  }
  v80 = v70;
  specialized MutableCollection<>.sort(by:)(&v80);
  if (!v35)
  {
    swift_bridgeObjectRelease_n();
    v71 = v80;
    v80 = v30;
    v81 = v71;
    v82 = v78;
    swift_retain();
    v29(&v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v51 = (uint64_t)v19;
    return outlined destroy of SiriUISession(v51, type metadata accessor for SiriUISession);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x219A27578](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))type metadata accessor for Signal, &lazy protocol witness table cache variable for type [Signal] and conformance [A], &demangling cache variable for type metadata for [Signal], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UISessionSignalBuilder.buildSiriExecutionTasks(nextUISession:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SiriUISession(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 120))(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for SiriUISession?);
    return MEMORY[0x24BEE4AF8];
  }
  outlined init with take of SiriUISession((uint64_t)v6, (uint64_t)v11);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 256))(a1);
  if (v12 >> 62)
  {
    if (!_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_12;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_12;
  }
  type metadata accessor for SiriExecutionTaskFactory();
  swift_allocObject();
  v13 = SiriExecutionTaskFactory.processBiomeEventsToTask(siriExecutionEvents:)(v12);
  swift_bridgeObjectRelease();
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
      goto LABEL_7;
    goto LABEL_11;
  }
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_release();
LABEL_12:
    swift_bridgeObjectRelease();
    outlined destroy of SiriUISession((uint64_t)v11, type metadata accessor for SiriUISession);
    return MEMORY[0x24BEE4AF8];
  }
LABEL_7:
  v14 = (uint64_t *)&v11[*(int *)(v7 + 32)];
  v15 = *v14;
  v16 = v14[1];
  swift_bridgeObjectRetain();
  v17 = SiriExecutionTaskFactory.loadTaskEntities(steps:siriUISessionId:)(v13, v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 152))(v17);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v18);
  swift_release();
  outlined destroy of SiriUISession((uint64_t)v11, type metadata accessor for SiriUISession);
  return v19;
}

uint64_t UISessionSignalBuilder.buildSiriExecutionTasks(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = specialized static PSEBiomeEventsSourceFetcher.fetchSiriExecutionEvents(startDate:endDate:)(a1, a2);
  if (v10 >> 62)
  {
    if (!_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_10;
  }
  else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_10;
  }
  type metadata accessor for SiriExecutionTaskFactory();
  swift_allocObject();
  v11 = SiriExecutionTaskFactory.processBiomeEventsToTask(siriExecutionEvents:)(v10);
  swift_bridgeObjectRelease();
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18)
      goto LABEL_5;
    goto LABEL_9;
  }
  if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    swift_release();
LABEL_10:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
LABEL_5:
  UUID.init()();
  v12 = UUID.uuidString.getter();
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v15 = SiriExecutionTaskFactory.loadTaskEntities(steps:siriUISessionId:)(v11, v12, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v15);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 144))(v16);
  swift_release();
  return v17;
}

uint64_t UISessionSignalBuilder.buildSiriSessions(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _BYTE v17[16];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PSEBiomeEventsSourceFetcher();
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v9 = static PSEBiomeEventsSourceFetcher.fetchSiriTranscriptEvents(startDate:endDate:)(a1, (uint64_t)v6);
  outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for Date?);
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    type metadata accessor for IntelligenceEngineSignalFactory();
    swift_initStackObject();
    v10 = IntelligenceEngineSignalFactory.buildIESessionsBoundary(bmEvents:)(v9);
    swift_bridgeObjectRelease();
    return v10;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for engagement != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.engagement);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_218F54000, v13, v14, "No Siri event found from Intelligence Engine Transcript stream", v15, 2u);
    MEMORY[0x219A27C8C](v15, -1, -1);
  }

  return MEMORY[0x24BEE4AF8];
}

uint64_t UISessionSignalBuilder.isSiriMusicTask(task:)(uint64_t a1)
{
  _QWORD *v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;

  v2 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  v3 = specialized Sequence<>.contains(_:)(0x6C7070612E6D6F63, 0xEF636973754D2E65, v2);
  v4 = swift_bridgeObjectRelease();
  if ((v3 & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 248))(v4);
    String.lowercased()();
    swift_bridgeObjectRelease();
    String.lowercased()();
    lazy protocol witness table accessor for type String and conformance String();
    v5 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      if (one-time initialization token for engagement != -1)
        swift_once();
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.engagement);
      v7 = Logger.logObject.getter();
      v12 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v7, v12))
      {
        v10 = 0;
        goto LABEL_14;
      }
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_218F54000, v7, v12, "No Music Siri task found for the donated Now playing events. Most likely a background music is playing. Drop the noise.", v9, 2u);
      v10 = 0;
      goto LABEL_12;
    }
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.engagement);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_218F54000, v7, v8, "We have a Music Siri task for the donated Now playing events.", v9, 2u);
    v10 = 1;
LABEL_12:
    MEMORY[0x219A27C8C](v9, -1, -1);
    goto LABEL_14;
  }
  v10 = 1;
LABEL_14:

  return v10;
}

uint64_t UISessionSignalBuilder.deinit()
{
  uint64_t v0;

  outlined destroy of Any?(v0 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession, &demangling cache variable for type metadata for SiriUISession?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PSEBiomeEventsSource?(*(_QWORD *)(v0
                                                      + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream));
  swift_release();
  return v0;
}

uint64_t UISessionSignalBuilder.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Any?(v0 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_siriUISession, &demangling cache variable for type metadata for SiriUISession?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PSEBiomeEventsSource?(*(_QWORD *)(v0
                                                      + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_postSiriDataStream));
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCB988]);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedHomeKitClientAccessoryEvent>);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = a2(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  *a1 = v4;
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), unint64_t *a3)
{
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10[2];

  v6 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = a2(v6);
    *a1 = v6;
  }
  v8 = *(_QWORD *)(v6 + 16);
  v10[0] = v6 + 32;
  v10[1] = v8;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v10, a3);
  return specialized ContiguousArray._endMutation()();
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  void *v17;
  id v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id *v24;
  void *v25;
  id v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t *v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t *v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  void *v39;
  Swift::Int v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  double v45;
  double v46;
  double v47;
  double v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  Swift::Int v116;
  Swift::Int v117;
  Swift::Int v118;
  Swift::Int v119;
  void **v120;
  uint64_t v121;

  v4 = v2;
  v6 = a1[1];
  v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if (v6 < 0)
      goto LABEL_132;
    if (v6)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1);
    return;
  }
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (v6 < -1)
    goto LABEL_140;
  v9 = v7;
  v112 = a1;
  if (v6 < 2)
  {
    v12 = (char *)MEMORY[0x24BEE4AF8];
    v121 = MEMORY[0x24BEE4AF8];
    v120 = (void **)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      v15 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_98:
      v104 = v12;
      if (v15 >= 2)
      {
        v105 = *v112;
        do
        {
          v106 = v15 - 2;
          if (v15 < 2)
            goto LABEL_127;
          if (!v105)
            goto LABEL_139;
          v107 = v104;
          v108 = *(_QWORD *)&v104[16 * v106 + 32];
          v109 = *(_QWORD *)&v104[16 * v15 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v105 + 8 * v108), (id *)(v105 + 8 * *(_QWORD *)&v104[16 * v15 + 16]), v105 + 8 * v109, v120);
          if (v4)
            break;
          if (v109 < v108)
            goto LABEL_128;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v107 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v107);
          if (v106 >= *((_QWORD *)v107 + 2))
            goto LABEL_129;
          v110 = &v107[16 * v106 + 32];
          *(_QWORD *)v110 = v108;
          *((_QWORD *)v110 + 1) = v109;
          v111 = *((_QWORD *)v107 + 2);
          if (v15 > v111)
            goto LABEL_130;
          memmove(&v107[16 * v15 + 16], &v107[16 * v15 + 32], 16 * (v111 - v15));
          v104 = v107;
          *((_QWORD *)v107 + 2) = v111 - 1;
          v15 = v111 - 1;
        }
        while (v111 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v121 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v10 = v8 >> 1;
    type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, a2);
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
    v120 = (void **)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    v121 = v11;
  }
  v116 = v9;
  v13 = 0;
  v14 = *a1;
  v113 = *a1 - 8;
  v114 = *a1 + 16;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v117 = v6;
  while (1)
  {
    v16 = v13++;
    v118 = v16;
    if (v13 < v6)
    {
      v17 = *(void **)(v14 + 8 * v16);
      v18 = *(id *)(v14 + 8 * v13);
      v19 = v17;
      objc_msgSend(v18, sel_absoluteTimestamp);
      v21 = v20;
      objc_msgSend(v19, sel_absoluteTimestamp);
      v23 = v22;

      v13 = v16 + 2;
      if (v16 + 2 < v6)
      {
        v24 = (id *)(v114 + 8 * v16);
        while (1)
        {
          v25 = *(v24 - 1);
          v26 = *v24;
          v27 = v25;
          objc_msgSend(v26, sel_absoluteTimestamp);
          v29 = v28;
          objc_msgSend(v27, sel_absoluteTimestamp);
          v31 = v30;

          if (v21 < v23 == v29 >= v31)
            break;
          ++v13;
          ++v24;
          if (v6 == v13)
          {
            v13 = v6;
            break;
          }
        }
        v16 = v118;
      }
      if (v21 < v23)
      {
        if (v13 < v16)
          goto LABEL_133;
        if (v16 < v13)
        {
          v32 = (uint64_t *)(v113 + 8 * v13);
          v33 = v13;
          v34 = v16;
          v35 = (uint64_t *)(v14 + 8 * v16);
          do
          {
            if (v34 != --v33)
            {
              if (!v14)
                goto LABEL_138;
              v36 = *v35;
              *v35 = *v32;
              *v32 = v36;
            }
            ++v34;
            --v32;
            ++v35;
          }
          while (v34 < v33);
        }
      }
    }
    if (v13 >= v6)
      goto LABEL_47;
    if (__OFSUB__(v13, v16))
      goto LABEL_131;
    if (v13 - v16 >= v116)
      goto LABEL_47;
    if (__OFADD__(v16, v116))
      goto LABEL_134;
    v37 = v16 + v116 >= v6 ? v6 : v16 + v116;
    if (v37 < v16)
      break;
    if (v13 != v37)
    {
      v115 = v12;
      v38 = v113 + 8 * v13;
      do
      {
        v39 = *(void **)(v14 + 8 * v13);
        v40 = v16;
        v41 = v38;
        do
        {
          v42 = *(void **)v41;
          v43 = v39;
          v44 = v42;
          objc_msgSend(v43, sel_absoluteTimestamp);
          v46 = v45;
          objc_msgSend(v44, sel_absoluteTimestamp);
          v48 = v47;

          if (v46 >= v48)
            break;
          if (!v14)
            goto LABEL_136;
          v49 = *(void **)v41;
          v39 = *(void **)(v41 + 8);
          *(_QWORD *)v41 = v39;
          *(_QWORD *)(v41 + 8) = v49;
          v41 -= 8;
          ++v40;
        }
        while (v13 != v40);
        ++v13;
        v38 += 8;
        v16 = v118;
      }
      while (v13 != v37);
      v13 = v37;
      v12 = v115;
    }
LABEL_47:
    if (v13 < v16)
      goto LABEL_126;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v51 = *((_QWORD *)v12 + 2);
    v50 = *((_QWORD *)v12 + 3);
    v15 = v51 + 1;
    if (v51 >= v50 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v15;
    v52 = v12 + 32;
    v53 = &v12[16 * v51 + 32];
    *(_QWORD *)v53 = v16;
    *((_QWORD *)v53 + 1) = v13;
    if (v51)
    {
      v119 = v13;
      while (1)
      {
        v54 = v15 - 1;
        if (v15 >= 4)
        {
          v59 = &v52[16 * v15];
          v60 = *((_QWORD *)v59 - 8);
          v61 = *((_QWORD *)v59 - 7);
          v65 = __OFSUB__(v61, v60);
          v62 = v61 - v60;
          if (v65)
            goto LABEL_115;
          v64 = *((_QWORD *)v59 - 6);
          v63 = *((_QWORD *)v59 - 5);
          v65 = __OFSUB__(v63, v64);
          v57 = v63 - v64;
          v58 = v65;
          if (v65)
            goto LABEL_116;
          v66 = v15 - 2;
          v67 = &v52[16 * v15 - 32];
          v69 = *(_QWORD *)v67;
          v68 = *((_QWORD *)v67 + 1);
          v65 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          if (v65)
            goto LABEL_118;
          v65 = __OFADD__(v57, v70);
          v71 = v57 + v70;
          if (v65)
            goto LABEL_121;
          if (v71 >= v62)
          {
            v89 = &v52[16 * v54];
            v91 = *(_QWORD *)v89;
            v90 = *((_QWORD *)v89 + 1);
            v65 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v65)
              goto LABEL_125;
            v82 = v57 < v92;
            goto LABEL_85;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v83 = *((_QWORD *)v12 + 4);
            v84 = *((_QWORD *)v12 + 5);
            v65 = __OFSUB__(v84, v83);
            v76 = v84 - v83;
            v77 = v65;
            goto LABEL_79;
          }
          v56 = *((_QWORD *)v12 + 4);
          v55 = *((_QWORD *)v12 + 5);
          v65 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          v58 = v65;
        }
        if ((v58 & 1) != 0)
          goto LABEL_117;
        v66 = v15 - 2;
        v72 = &v52[16 * v15 - 32];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v75 = __OFSUB__(v73, v74);
        v76 = v73 - v74;
        v77 = v75;
        if (v75)
          goto LABEL_120;
        v78 = &v52[16 * v54];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v65 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v65)
          goto LABEL_123;
        if (__OFADD__(v76, v81))
          goto LABEL_124;
        if (v76 + v81 >= v57)
        {
          v82 = v57 < v81;
LABEL_85:
          if (v82)
            v54 = v66;
          goto LABEL_87;
        }
LABEL_79:
        if ((v77 & 1) != 0)
          goto LABEL_119;
        v85 = &v52[16 * v54];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v65 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v65)
          goto LABEL_122;
        if (v88 < v76)
          goto LABEL_14;
LABEL_87:
        v93 = v54 - 1;
        if (v54 - 1 >= v15)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        v94 = v14;
        if (!v14)
          goto LABEL_137;
        v95 = v12;
        v96 = &v52[16 * v93];
        v97 = *(_QWORD *)v96;
        v98 = v52;
        v99 = v54;
        v100 = &v52[16 * v54];
        v101 = *((_QWORD *)v100 + 1);
        v102 = v94;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v94 + 8 * *(_QWORD *)v96), (id *)(v94 + 8 * *(_QWORD *)v100), v94 + 8 * v101, v120);
        if (v2)
          goto LABEL_95;
        if (v101 < v97)
          goto LABEL_112;
        if (v99 > *((_QWORD *)v95 + 2))
          goto LABEL_113;
        *(_QWORD *)v96 = v97;
        *(_QWORD *)&v98[16 * v93 + 8] = v101;
        v103 = *((_QWORD *)v95 + 2);
        if (v99 >= v103)
          goto LABEL_114;
        v12 = v95;
        v15 = v103 - 1;
        memmove(v100, v100 + 16, 16 * (v103 - 1 - v99));
        v52 = v98;
        *((_QWORD *)v95 + 2) = v103 - 1;
        v14 = v102;
        v13 = v119;
        if (v103 <= 2)
          goto LABEL_14;
      }
    }
    v15 = 1;
LABEL_14:
    v6 = v117;
    if (v13 >= v117)
    {
      v4 = v2;
      goto LABEL_98;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = *a4;
    v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    v8 = *(void **)(v6 + 8 * v4);
    v9 = a1;
    v10 = v7;
    while (1)
    {
      v11 = *(void **)v10;
      v12 = v8;
      v13 = v11;
      objc_msgSend(v12, sel_absoluteTimestamp);
      v15 = v14;
      objc_msgSend(v13, sel_absoluteTimestamp);
      v17 = v16;

      if (v15 >= v17)
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v6)
        break;
      v18 = *(void **)v10;
      v8 = *(void **)(v10 + 8);
      *(_QWORD *)v10 = v8;
      *(_QWORD *)(v10 + 8) = v18;
      v10 -= 8;
      if (v4 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t result;
  char *v23;
  double *v24;
  double *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[2 * v13];
      v23 = (char *)v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (double *)(a3 - 16);
        do
        {
          v20 = v19 + 2;
          if (*(v18 - 1) >= *(v6 - 1))
          {
            v23 = (char *)(v18 - 2);
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 2;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 2;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 2;
            if (v21 <= v7)
              break;
          }
          v19 -= 2;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v23 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (v6[1] >= v15[1])
        {
          v4 = v15 + 2;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 2;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 2;
          }
        }
        else
        {
          v16 = v6 + 2;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 2;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **a4)
{
  id *v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  id v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id *v22;
  id *v23;
  id *v24;
  void **v25;
  id *v26;
  id *v27;
  void *v28;
  id v29;
  id v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t result;
  char *v37;
  void **v38;
  id *v39;

  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v39 = __src;
  v38 = a4;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7)
      goto LABEL_46;
    if (a4 != a2 || &a2[v12] <= a4)
      memmove(a4, a2, 8 * v12);
    v23 = &a4[v12];
    v37 = (char *)v23;
    v39 = v5;
    if (v6 >= v5 || v10 < 8)
      goto LABEL_45;
    v24 = (id *)(a3 - 8);
    v25 = v5;
    while (1)
    {
      v26 = v24 + 1;
      v27 = v23 - 1;
      v28 = *--v25;
      v29 = *(v23 - 1);
      v30 = v28;
      objc_msgSend(v29, sel_absoluteTimestamp);
      v32 = v31;
      objc_msgSend(v30, sel_absoluteTimestamp);
      v34 = v33;

      if (v32 < v34)
        break;
      v37 = (char *)(v23 - 1);
      if (v26 < v23 || v24 >= v23)
      {
        *v24 = *v27;
        v25 = v5;
        --v23;
        goto LABEL_43;
      }
      if (v26 != v23)
        *v24 = *v27;
      v25 = v5;
      --v23;
      if (v5 <= v6)
        goto LABEL_45;
LABEL_44:
      --v24;
      v5 = v25;
      if (v23 <= a4)
        goto LABEL_45;
    }
    if (v26 != v5 || v24 >= v5)
      *v24 = *v25;
    v39 = v25;
LABEL_43:
    if (v25 <= v6)
      goto LABEL_45;
    goto LABEL_44;
  }
  if (v7 >= -7)
  {
    if (a4 != __src || &__src[v9] <= a4)
      memmove(a4, __src, 8 * v9);
    v13 = &a4[v9];
    v37 = (char *)v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      v14 = a4;
      do
      {
        v15 = *v14;
        v16 = *v5;
        v17 = v15;
        objc_msgSend(v16, sel_absoluteTimestamp);
        v19 = v18;
        objc_msgSend(v17, sel_absoluteTimestamp);
        v21 = v20;

        if (v19 >= v21)
        {
          if (v6 != v14)
            *v6 = *v14;
          v38 = ++v14;
          v22 = v5;
        }
        else
        {
          v22 = v5 + 1;
          if (v6 < v5 || v6 >= v22 || v6 != v5)
            *v6 = *v5;
        }
        ++v6;
        if (v14 >= v13)
          break;
        v5 = v22;
      }
      while ((unint64_t)v22 < a3);
      v39 = v6;
    }
LABEL_45:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v39, (const void **)&v38, &v37);
    return 1;
  }
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, type metadata accessor for SiriUISession);
}

{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEA7DE8]);
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack();
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Signal, &lazy protocol witness table cache variable for type [Signal] and conformance [A], &demangling cache variable for type metadata for [Signal], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for SiriExecutionStep, &lazy protocol witness table cache variable for type [SiriExecutionStep] and conformance [A], &demangling cache variable for type metadata for [SiriExecutionStep], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for SiriExecutionTask, &lazy protocol witness table cache variable for type [SiriExecutionTask] and conformance [A], &demangling cache variable for type metadata for [SiriExecutionTask], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for IntelligenceEngineSession, &lazy protocol witness table cache variable for type [IntelligenceEngineSession] and conformance [A], &demangling cache variable for type metadata for [IntelligenceEngineSession], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [Signal] and conformance [A](&lazy protocol witness table cache variable for type [BMNowPlayingEvent] and conformance [A], &demangling cache variable for type metadata for [BMNowPlayingEvent]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BMNowPlayingEvent]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for BMNowPlayingEvent);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [Signal] and conformance [A](&lazy protocol witness table cache variable for type [BMAppLaunchEvent] and conformance [A], &demangling cache variable for type metadata for [BMAppLaunchEvent]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BMAppLaunchEvent]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for BMAppLaunchEvent);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [Signal] and conformance [A](&lazy protocol witness table cache variable for type [BMIntentEvent] and conformance [A], &demangling cache variable for type metadata for [BMIntentEvent]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BMIntentEvent]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for BMSiriPostSiriEngagementSignalContent(0, &lazy cache variable for type metadata for BMIntentEvent);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = lazy protocol witness table accessor for type [Signal] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x219A276C8);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedHomeKitClientAccessoryEvent>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExtendedBMAlarmEvent>);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SiriUISession>, type metadata accessor for SiriUISession);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ProtoTaskEngagementFeatureSet>, (uint64_t (*)(_QWORD))MEMORY[0x24BEA7DE8]);
}

uint64_t partial apply for closure #1 in UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:)(a1, a2, v2);
}

uint64_t sub_218FB1DF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
}

uint64_t sub_218FB1E24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_218FB1E54(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 152);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_218FB1E84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_218FB1EB4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 176);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_218FB1EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v4[5];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 192))(v4);
  return outlined init with take of PSEBiomeEventsSource?((uint64_t)v4, a2);
}

uint64_t sub_218FB1F28(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(_QWORD *);
  _QWORD v5[5];

  outlined init with take of PSEBiomeEventsSource?(a1, (uint64_t)v5);
  v3 = *(uint64_t (**)(_QWORD *))(**(_QWORD **)a2 + 200);
  outlined retain of PSEBiomeEventsSource?(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PSEBiomeEventsSource?);
  return v3(v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for SiriUISession(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v9 = a3[7];
    v10 = a3[8];
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (uint64_t *)((char *)a1 + v10);
    v15 = (uint64_t *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SiriUISession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  v5(a1 + *(int *)(a2 + 24), v4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SiriUISession(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[7];
  v9 = a3[8];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SiriUISession(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[8];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SiriUISession(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for SiriUISession(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = a3[8];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriUISession()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_218FB23CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriUISession()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_218FB2458(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for SiriUISession()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for UISessionSignalBuilder()
{
  return type metadata accessor for UISessionSignalBuilder(0);
}

uint64_t type metadata accessor for UISessionSignalBuilder(uint64_t a1)
{
  return type metadata accessor for SiriExecutionStep(a1, (uint64_t *)&type metadata singleton initialization cache for UISessionSignalBuilder);
}

void type metadata completion function for UISessionSignalBuilder()
{
  unint64_t v0;

  type metadata accessor for SiriUISession?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for UISessionSignalBuilder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriUISession.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriUISession.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriUISession.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriExecutionTasks.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriExecutionTasks.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.siriExecutionTasks.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.intelligenceEngineSession.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.intelligenceEngineSession.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.intelligenceEngineSession.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.postSiriDataStream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.postSiriDataStream.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_OWORD *);
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(uint64_t (**)(_OWORD *))(*(_QWORD *)v1 + 200);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = v2;
  return v3(v6);
}

uint64_t dispatch thunk of UISessionSignalBuilder.postSiriDataStream.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.__allocating_init(siriUISession:index:collector:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.__allocating_init(collector:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.fetchSiriExecutionEvents(nextUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.fetchDataStreams(taskIndex:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.fetchDataStreams(taskIndex:endDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.buildSignalsAndTaskFeatureSets(task:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.buildSiriExecutionTasks(nextUISession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.buildSiriExecutionTasks(startDate:endDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.buildSiriSessions(startDate:endDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of UISessionSignalBuilder.isSiriMusicTask(task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

void type metadata accessor for SiriUISession?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SiriUISession?)
  {
    type metadata accessor for SiriUISession(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SiriUISession?);
  }
}

uint64_t specialized UISessionSignalBuilder.buildSignalsAndTaskFeatureSets(task:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t *__return_ptr, unint64_t, char *);
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD v89[5];
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;

  v83 = a3;
  v84 = a1;
  v82 = type metadata accessor for ReliabilityCategory();
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUISession?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SiriUISession(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 120))(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for SiriUISession?);
    swift_beginAccess();
    *a4 = 0;
    return swift_release();
  }
  v21 = outlined init with take of SiriUISession((uint64_t)v14, (uint64_t)v19);
  v22 = a2;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 192))(v89, v21);
  outlined init with take of PSEBiomeEventsSource?((uint64_t)v89, (uint64_t)&v90);
  v23 = v90;
  if (!v90)
  {
    if (one-time initialization token for engagement != -1)
      swift_once();
    v37 = __swift_project_value_buffer(v8, (uint64_t)static Logger.engagement);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v37, v8);
    v87 = 0;
    v88 = 0xE000000000000000;
    _StringGuts.grow(_:)(123);
    v38._countAndFlagsBits = 0xD000000000000078;
    v38._object = (void *)0x8000000218FC1CB0;
    String.append(_:)(v38);
    v39 = (uint64_t *)&v19[*(int *)(v15 + 32)];
    v40 = *v39;
    v41 = (void *)v39[1];
    v42 = v19;
    swift_bridgeObjectRetain();
    v43._countAndFlagsBits = v40;
    v43._object = v41;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    v45 = v87;
    v46 = v88;
    v47 = *MEMORY[0x24BEA7F20];
    v48 = type metadata accessor for EngagementSignalCollectionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v7, v47, v48);
    v49 = v81;
    v50 = v82;
    (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v7, *MEMORY[0x24BEA8030], v82);
    Logger.error(_:_:)(v45, v46, (uint64_t)v7);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v7, v50);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_beginAccess();
    *a4 = 0;
    swift_release();
    v51 = (uint64_t)v42;
    return outlined destroy of SiriUISession(v51, type metadata accessor for SiriUISession);
  }
  v24 = v92;
  v25 = v94;
  v80 = v93;
  v85 = MEMORY[0x24BEE4AF8];
  v86 = MEMORY[0x24BEE4AF8];
  v81 = v91;
  if (v91 >> 62)
  {
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = *(_QWORD *)((v91 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v27 = a4;
  v28 = v22;
  v82 = v25;
  if (v26)
  {
    v79 = v24;
    v29 = a4;
    v30 = *(_QWORD *)(v22 + OBJC_IVAR____TtC18PostSiriEngagement22UISessionSignalBuilder_collector);
    v31 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 248);
    v32 = swift_retain();
    v33 = v31(v32);
    v34 = v81;
    v35 = 0;
    v52 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 280))(v81, v33, v36);
    swift_release();
    swift_bridgeObjectRelease();
    if (v52)
    {
      v53 = *(void (**)(uint64_t *__return_ptr, unint64_t, char *))(*(_QWORD *)v52 + 96);
      v78 = 0;
      v53(&v87, v34, v19);
      v54 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v54);
      v55 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v28 = v22;
      v27 = v29;
      v35 = v78;
    }
    else
    {
      v28 = v22;
      v27 = v29;
    }
    v24 = v79;
    v25 = v82;
  }
  else
  {
    v35 = 0;
  }
  v56 = v80;
  if (*(_QWORD *)(v24 + 16))
  {
    type metadata accessor for ExtendedAlarmSignalFactory();
    swift_allocObject();
    ExtendedAlarmSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v24, (uint64_t)v19, &v87);
    swift_release();
    v57 = v87;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v57);
    v58 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v58);
    swift_bridgeObjectRelease();
    v25 = v82;
    swift_bridgeObjectRelease();
  }
  if (!(v56 >> 62))
  {
    if (!*(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_21;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v67 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v67)
  {
LABEL_20:
    type metadata accessor for AppLaunchSignalFactory();
    v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = xmmword_218FBDE30;
    *(_QWORD *)(v59 + 32) = 0xD00000000000002BLL;
    *(_QWORD *)(v59 + 40) = 0x8000000218FC0C60;
    *(_QWORD *)(v59 + 48) = 0xD000000000000031;
    *(_QWORD *)(v59 + 56) = 0x8000000218FC0C90;
    *(_QWORD *)(v59 + 64) = 0xD00000000000002DLL;
    *(_QWORD *)(v59 + 72) = 0x8000000218FC0CD0;
    AppLaunchSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)((uint64_t)v19, &v87);
    swift_release();
    v60 = v87;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v60);
    v61 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v61);
    swift_bridgeObjectRelease();
    v25 = v82;
    swift_bridgeObjectRelease();
  }
LABEL_21:
  if (*(_QWORD *)(v25 + 16))
  {
    type metadata accessor for HomeKitAccessoryControlSignalFactory();
    swift_allocObject();
    HomeKitAccessoryControlSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)(v25, (uint64_t)v19, &v87);
    swift_release();
    v62 = v87;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v62);
    v63 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v63);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    v68 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v68)
      goto LABEL_31;
  }
  else if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 312))(v84) & 1) == 0)
    goto LABEL_31;
  type metadata accessor for NowPlayingSignalFactory();
  swift_allocObject();
  v64 = NowPlayingSignalFactory.init()();
  (*(void (**)(uint64_t *__return_ptr, unint64_t, char *))(*(_QWORD *)v64 + 144))(&v87, v23, v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65 = v87;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v65);
  v66 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v66);
  swift_bridgeObjectRelease();
LABEL_32:
  swift_bridgeObjectRelease();
  v69 = v86;
  if ((v86 & 0x8000000000000000) != 0 || (v86 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
    v70 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v69);
    swift_bridgeObjectRelease();
  }
  else
  {
    v70 = v86 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
  }
  v87 = v70;
  specialized MutableCollection<>.sort(by:)(&v87);
  if (!v35)
  {
    swift_bridgeObjectRelease_n();
    v71 = v87;
    v72 = v85;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PSETask>);
    v73 = swift_allocObject();
    *(_OWORD *)(v73 + 16) = xmmword_218FBDA00;
    v74 = v84;
    *(_QWORD *)(v73 + 32) = v84;
    *(_QWORD *)(v73 + 40) = v71;
    *(_QWORD *)(v73 + 48) = v72;
    swift_beginAccess();
    v75 = *v27;
    v76 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v83 + 264);
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v76(v73, v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_beginAccess();
    *v27 = v74;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v51 = (uint64_t)v19;
    return outlined destroy of SiriUISession(v51, type metadata accessor for SiriUISession);
  }
  swift_release();
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type [Signal] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MapsIntentSignalFactory.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = &outlined read-only object #0 of MapsIntentSignalFactory.init();
  return result;
}

uint64_t MapsIntentSignalFactory.USER_INTERACTIONS.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MapsIntentSignalFactory.processBiomeEventsToSignals(bmEvents:siriUISession:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t (*v10)(id, uint64_t);
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v21 = MEMORY[0x24BEE4AF8];
  if (!(a1 >> 62))
  {
    v6 = a2;
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
LABEL_17:
    v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128);
    v16 = swift_bridgeObjectRetain();
    v17 = v15(v16);
    swift_bridgeObjectRelease();
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 136))(v14);
    result = swift_bridgeObjectRelease();
    *a3 = v17;
    a3[1] = v18;
    return result;
  }
  swift_bridgeObjectRetain();
  v6 = a2;
  v3 = v20;
  result = _CocoaArrayWrapper.endIndex.getter();
  v7 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v7 >= 1)
  {
    v9 = 0;
    v10 = *(uint64_t (**)(id, uint64_t))(*(_QWORD *)v3 + 88);
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x219A2756C](v9, a1);
      else
        v11 = *(id *)(a1 + 8 * v9 + 32);
      v12 = v11;
      if (v10(v11, v6))
      {
        v13 = swift_retain();
        MEMORY[0x219A2732C](v13);
        if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        swift_release();
        v6 = a2;
        v3 = v20;
      }
      else
      {

      }
      ++v9;
    }
    while (v7 != v9);
    swift_bridgeObjectRelease();
    v14 = v21;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

unint64_t MapsIntentSignalFactory.transformSignalsToFeatures(signals:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(__int128 *, _QWORD);
  void (*v38)(__int128 *, _QWORD);
  void (*v39)(_QWORD *, _QWORD);
  void (*v40)(_QWORD *, _QWORD);
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(__int128 *, _QWORD);
  void (*v57)(_QWORD *, _QWORD);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(__int128 *, _QWORD);
  uint64_t (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  BOOL v77;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  char v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  void (*v93)(__int128 *, _QWORD);
  void (*v94)(_QWORD *, _QWORD);
  void (*v95)(__int128 *, _QWORD);
  void (*v96)(_QWORD *, _QWORD);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  _QWORD *v139;
  char *v140;
  uint64_t (*v141)(uint64_t);
  unint64_t v142;
  _QWORD v143[2];
  __int128 v144;
  __int128 v145;

  v2 = v1;
  v109 = type metadata accessor for ProtoTaskFeatureSet();
  v107 = *(_QWORD *)(v109 - 8);
  MEMORY[0x24BDAC7A8](v109);
  v108 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for ProtoNavigationFollowupType();
  v127 = *(_QWORD *)(v128 - 8);
  v5 = MEMORY[0x24BDAC7A8](v128);
  v105 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v126 = (char *)&v102 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v122 = (char *)&v102 - v9;
  v10 = type metadata accessor for ProtoLocationEntitySignal();
  v136 = *(_QWORD *)(v10 - 8);
  v137 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v121 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v140 = (char *)&v102 - v13;
  v125 = type metadata accessor for ProtoNavigationUserFollowupContext();
  v124 = *(_QWORD *)(v125 - 8);
  v14 = MEMORY[0x24BDAC7A8](v125);
  v123 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v135 = (char *)&v102 - v16;
  v134 = type metadata accessor for ProtoNavigationFeatures();
  v133 = *(_QWORD *)(v134 - 8);
  MEMORY[0x24BDAC7A8](v134);
  v130 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for ProtoNavigationTaskFeatureSet();
  v18 = *(_QWORD **)(v106 - 8);
  MEMORY[0x24BDAC7A8](v106);
  v113 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ProtoTaskEngagementType();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (unint64_t)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v111 = *(_QWORD *)(v112 - 8);
  v24 = MEMORY[0x24BDAC7A8](v112);
  v110 = (char *)&v102 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v138 = (char *)&v102 - v26;
  v27 = type metadata accessor for ReliabilityCategory();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (unint64_t)&v102 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = a1 >> 62;
  v131 = a1;
  if (a1 >> 62)
    goto LABEL_92;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_93:
    if (one-time initialization token for engagement != -1)
      goto LABEL_101;
    goto LABEL_94;
  }
  while (2)
  {
    v104 = v18;
    v28 = (uint64_t)v138;
    ProtoTaskEngagementFeatureSet.init()();
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v21 + 104))(v23, *MEMORY[0x24BEA7E30], v20);
    ProtoTaskEngagementFeatureSet.engagementType.setter();
    v23 = v131;
    if (v31)
    {
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      v21 = *(_QWORD *)((v131 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v32 = (unint64_t)v113;
    v33 = v130;
    if (!v21)
      goto LABEL_14;
    if ((v23 & 0xC000000000000001) != 0)
    {
      v34 = MEMORY[0x219A2756C](0, v23);
      goto LABEL_10;
    }
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v34 = *(_QWORD *)(v23 + 32);
      swift_retain();
LABEL_10:
      v35 = swift_bridgeObjectRelease();
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v34 + 120))(&v144, v35);
      swift_release();
      v36 = v144;
      if ((~(_QWORD)v144 & 0x7FF0000000000000) == 0)
        goto LABEL_100;
      if (*(double *)&v144 <= -1.0)
      {
        __break(1u);
        goto LABEL_97;
      }
      if (*(double *)&v144 < 1.84467441e19)
        goto LABEL_15;
      __break(1u);
LABEL_14:
      swift_bridgeObjectRelease();
LABEL_15:
      ProtoTaskEngagementFeatureSet.startTimestampMs.setter();
      ProtoNavigationTaskFeatureSet.init()();
      v37 = (void (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
      ProtoTaskFeatureSet.navigationFeatureSet.setter();
      v37(&v144, 0);
      v38 = (void (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
      v39 = (void (*)(_QWORD *, _QWORD))ProtoTaskFeatureSet.navigationFeatureSet.modify();
      ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.setter();
      v39(v143, 0);
      v38(&v144, 0);
      v30 = ProtoTaskEngagementFeatureSet.featureSet.modify();
      v40 = (void (*)(_QWORD *, _QWORD))ProtoTaskFeatureSet.navigationFeatureSet.modify();
      v20 = v41;
      ProtoNavigationTaskFeatureSet.isUserFollowup.setter();
      v40(v143, 0);
      ((void (*)(__int128 *, _QWORD))v30)(&v144, 0);
      if (!v21)
      {
LABEL_80:
        v78 = v108;
        ProtoTaskEngagementFeatureSet.featureSet.getter();
        v79 = v113;
        ProtoTaskFeatureSet.navigationFeatureSet.getter();
        v80 = *(void (**)(char *, uint64_t))(v107 + 8);
        v81 = v109;
        v80(v78, v109);
        v82 = ProtoNavigationTaskFeatureSet.isUserFollowup.getter();
        v83 = (void (*)(char *, uint64_t))v104[1];
        v84 = v106;
        v83(v79, v106);
        if ((v82 & 1) != 0)
        {
          ProtoTaskEngagementFeatureSet.featureSet.getter();
          ProtoTaskFeatureSet.navigationFeatureSet.getter();
          v80(v78, v81);
          v85 = v123;
          ProtoNavigationTaskFeatureSet.followupContext.getter();
          v83(v79, v84);
          v86 = v126;
          ProtoNavigationUserFollowupContext.followupType.getter();
          (*(void (**)(char *, uint64_t))(v124 + 8))(v85, v125);
          v87 = v127;
          v88 = v105;
          v89 = v128;
          (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v105, *MEMORY[0x24BEA81F0], v128);
          lazy protocol witness table accessor for type ProtoNavigationFollowupType and conformance ProtoNavigationFollowupType();
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          v90 = v144;
          v91 = v143[0];
          v92 = *(void (**)(char *, uint64_t))(v87 + 8);
          v92(v88, v89);
          v92(v86, v89);
          v21 = v111;
          v27 = (uint64_t)v110;
          if (v90 == v91)
          {
            v93 = (void (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
            v94 = (void (*)(_QWORD *, _QWORD))ProtoTaskFeatureSet.navigationFeatureSet.modify();
            ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.setter();
            v94(v143, 0);
            v93(&v144, 0);
          }
        }
        else
        {
          v95 = (void (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
          v96 = (void (*)(_QWORD *, _QWORD))ProtoTaskFeatureSet.navigationFeatureSet.modify();
          ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.setter();
          v96(v143, 0);
          v95(&v144, 0);
          v21 = v111;
          v27 = (uint64_t)v110;
        }
        v31 = v112;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v27, v28, v112);
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
        v30 = *(_QWORD *)(v32 + 16);
        v36 = *(_QWORD *)(v32 + 24);
        v34 = v30 + 1;
        if (v30 >= v36 >> 1)
LABEL_97:
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v34, 1, v32);
        *(_QWORD *)(v32 + 16) = v34;
        (*(void (**)(unint64_t, uint64_t, unint64_t))(v21 + 32))(v32+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v30, v27, v31);
        (*(void (**)(uint64_t, unint64_t))(v21 + 8))(v28, v31);
        return v32;
      }
      v18 = *(_QWORD **)(v2 + 16);
      v27 = v18[2];
      v132 = v23 & 0xC000000000000001;
      v115 = v23 & 0xFFFFFFFFFFFFFF8;
      v114 = (char *)(v23 + 32);
      v117 = *MEMORY[0x24BEA81F0];
      v116 = *MEMORY[0x24BEA81F8];
      swift_bridgeObjectRetain();
      v31 = 0;
      v103 = v18 + 9;
      v129 = MEMORY[0x24BEE4AD8] + 8;
      v120 = v21;
      v119 = v18;
      v118 = v27;
      while (1)
      {
        if (v132)
        {
          v30 = MEMORY[0x219A2756C](v31, v23);
          v43 = __OFADD__(v31++, 1);
          if (v43)
            goto LABEL_86;
        }
        else
        {
          if (v31 >= *(_QWORD *)(v115 + 16))
            goto LABEL_90;
          v30 = *(_QWORD *)&v114[8 * v31];
          swift_retain();
          v43 = __OFADD__(v31++, 1);
          if (v43)
          {
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            goto LABEL_91;
          }
        }
        v44 = ProtoNavigationFeatures.init()();
        v20 = v30;
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v30 + 120))(&v144, v44);
        if ((~(_QWORD)v144 & 0x7FF0000000000000) == 0)
          goto LABEL_87;
        if (*(double *)&v144 <= -1.0)
          goto LABEL_88;
        if (*(double *)&v144 >= 1.84467441e19)
          goto LABEL_89;
        v45 = ProtoNavigationFeatures.timestampInMs.setter();
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 168))(v45);
        v46 = ProtoNavigationFeatures.navigationAction.setter();
        v28 = *(_QWORD *)(*(_QWORD *)v30 + 216);
        v47 = ((uint64_t (*)(uint64_t))v28)(v46);
        if (*(_QWORD *)(v47 + 16)
          && (v48 = specialized __RawDictionaryStorage.find<A>(_:)(0x79546E6F69746361, 0xEA00000000006570),
              (v49 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v47 + 56) + 32 * v48, (uint64_t)&v144);
        }
        else
        {
          v144 = 0u;
          v145 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v145 + 1))
          swift_dynamicCast();
        else
          outlined destroy of Any?((uint64_t)&v144, &demangling cache variable for type metadata for Any?);
        v50 = ProtoNavigationFeatures.navigationActionType.setter();
        v51 = ((uint64_t (*)(uint64_t))v28)(v50);
        if (*(_QWORD *)(v51 + 16)
          && (v52 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000),
              (v53 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v51 + 56) + 32 * v52, (uint64_t)&v144);
        }
        else
        {
          v144 = 0u;
          v145 = 0u;
        }
        swift_bridgeObjectRelease();
        v141 = (uint64_t (*)(uint64_t))v28;
        v142 = v30;
        if (*((_QWORD *)&v145 + 1))
          swift_dynamicCast();
        else
          outlined destroy of Any?((uint64_t)&v144, &demangling cache variable for type metadata for Any?);
        ProtoNavigationFeatures.navigationSource.setter();
        swift_bridgeObjectRetain();
        v54 = ProtoNavigationFeatures.navigationAction.getter();
        v20 = v55;
        if (v27)
        {
          v30 = v54;
          v139 = (_QWORD *)v31;
          if (v18[4] == v54 && v18[5] == v55 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_46;
          v31 = (unint64_t)v139;
          if (v27 != 1)
            break;
        }
        swift_bridgeObjectRelease();
        v73 = swift_bridgeObjectRelease();
LABEL_60:
        v30 = v142;
        v74 = v141(v73);
        if (*(_QWORD *)(v74 + 16)
          && (v75 = specialized __RawDictionaryStorage.find<A>(_:)(0x697461676976616ELL, 0xEE00657079546E6FLL),
              (v76 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v74 + 56) + 32 * v75, (uint64_t)&v144);
        }
        else
        {
          v144 = 0u;
          v145 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v145 + 1))
          swift_dynamicCast();
        else
          outlined destroy of Any?((uint64_t)&v144, &demangling cache variable for type metadata for Any?);
        ProtoNavigationFeatures.navigationType.setter();
        ProtoNavigationFeatures.navigationType.getter();
        v20 = v42;
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v133 + 8))(v33, v134);
        if (v31 == v21)
        {
          swift_bridgeObjectRelease();
          v28 = (uint64_t)v138;
          goto LABEL_80;
        }
      }
      if (v18[6] == v30 && v18[7] == v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ProtoNavigationUserFollowupContext.init()();
        v56 = (void (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v57 = (void (*)(_QWORD *, _QWORD))ProtoTaskFeatureSet.navigationFeatureSet.modify();
        ProtoNavigationTaskFeatureSet.isUserFollowup.setter();
        v57(v143, 0);
        v56(&v144, 0);
        ProtoNavigationFeatures.navigationAction.getter();
        ProtoNavigationUserFollowupContext.navigationAction.setter();
        ProtoNavigationFeatures.navigationActionType.getter();
        ProtoNavigationUserFollowupContext.navigationActionType.setter();
        v58 = ProtoLocationEntitySignal.init()();
        v59 = v141(v58);
        if (*(_QWORD *)(v59 + 16)
          && (v60 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656449696F70, 0xED00007265696669),
              (v61 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v59 + 56) + 32 * v60, (uint64_t)&v144);
        }
        else
        {
          v144 = 0u;
          v145 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v145 + 1))
          swift_dynamicCast();
        else
          outlined destroy of Any?((uint64_t)&v144, &demangling cache variable for type metadata for Any?);
        v62 = v140;
        ProtoLocationEntitySignal.poiIdentifier.setter();
        (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v121, v62, v137);
        v63 = v135;
        ProtoNavigationUserFollowupContext.locationEntity.setter();
        ProtoNavigationFeatures.timestampInMs.getter();
        ProtoNavigationUserFollowupContext.timestampInMs.setter();
        v64 = v122;
        ProtoNavigationFollowupType.init()();
        *(_QWORD *)&v144 = ProtoNavigationFeatures.navigationSource.getter();
        *((_QWORD *)&v144 + 1) = v65;
        v143[0] = 1936744781;
        v143[1] = 0xE400000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        LOBYTE(v62) = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
        v66 = v127;
        v67 = *(void (**)(char *, uint64_t))(v127 + 8);
        v2 = v128;
        v67(v64, v128);
        if ((v62 & 1) != 0)
          v68 = v116;
        else
          v68 = v117;
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 104))(v64, v68, v2);
        (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v126, v64, v2);
        ProtoNavigationUserFollowupContext.followupType.setter();
        v69 = v124;
        v70 = v125;
        (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v123, v63, v125);
        v71 = (void (*)(__int128 *, _QWORD))ProtoTaskEngagementFeatureSet.featureSet.modify();
        v28 = ProtoTaskFeatureSet.navigationFeatureSet.modify();
        ProtoNavigationTaskFeatureSet.followupContext.setter();
        ((void (*)(_QWORD *, _QWORD))v28)(v143, 0);
        v71(&v144, 0);
        v67(v64, v2);
        (*(void (**)(char *, uint64_t))(v136 + 8))(v140, v137);
        v72 = *(uint64_t (**)(char *, uint64_t))(v69 + 8);
        v33 = v130;
        v73 = v72(v63, v70);
        v23 = v131;
        v21 = v120;
        v18 = v119;
        v27 = v118;
      }
      else
      {
        if (v27 != 2)
        {
          v31 = (unint64_t)v103;
          v28 = 2;
          while (1)
          {
            v2 = v28 + 1;
            if (__OFADD__(v28, 1))
              break;
            v77 = *(_QWORD *)(v31 - 8) == v30 && *(_QWORD *)v31 == v20;
            if (v77 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_46;
            v31 += 16;
            ++v28;
            if (v2 == v27)
              goto LABEL_78;
          }
LABEL_91:
          __break(1u);
LABEL_92:
          v142 = v2;
          swift_bridgeObjectRetain();
          v97 = _CocoaArrayWrapper.endIndex.getter();
          v2 = v142;
          swift_bridgeObjectRelease();
          if (!v97)
            goto LABEL_93;
          continue;
        }
LABEL_78:
        swift_bridgeObjectRelease();
        v73 = swift_bridgeObjectRelease();
      }
      v31 = (unint64_t)v139;
      goto LABEL_60;
    }
    break;
  }
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  swift_once();
LABEL_94:
  v98 = type metadata accessor for Logger();
  __swift_project_value_buffer(v98, (uint64_t)static Logger.engagement);
  v99 = *MEMORY[0x24BEA7FC0];
  v100 = type metadata accessor for MapsEventDataIssues();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 104))(v30, v99, v100);
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v28 + 104))(v30, *MEMORY[0x24BEA7FE8], v27);
  Logger.debug(_:_:)(0xD000000000000015, 0x8000000218FBF1C0, v30);
  (*(void (**)(unint64_t, uint64_t))(v28 + 8))(v30, v27);
  return MEMORY[0x24BEE4AF8];
}

void MapsIntentSignalFactory.convertBmEventToSignal(bmEvent:siriUISession:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  Swift::String v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  id v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  id v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  id v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  id v121;
  void *v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  id v133;
  void *v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  Swift::String v138;
  Swift::Bool v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  Swift::String v150;
  Swift::Bool v151;
  char v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  id v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  _OWORD v167[2];
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  unsigned __int8 v171;
  uint64_t v172;

  v165 = a2;
  v3 = type metadata accessor for ReliabilityCategory();
  v163 = *(_QWORD *)(v3 - 8);
  v164 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v162 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v153 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v153 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)MEMORY[0x219A27818](v16);
  v20 = a1;
  v21 = v166;
  closure #1 in static Utils.extractInteraction(fromAppIntentEvent:)(a1, (uint64_t *)&v168);
  if (v21)
  {
    objc_autoreleasePoolPop(v19);
    return;
  }
  v154 = v8;
  v156 = v6;
  v155 = v5;
  v159 = v18;
  v157 = v14;
  v158 = v12;
  v160 = 0;
  objc_autoreleasePoolPop(v19);
  v161 = (id)v168;
  v166 = objc_msgSend((id)v168, sel_intent);
  v22 = objc_msgSend(v166, sel_domain);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;

  if (v23 == 1936744781 && v25 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
LABEL_7:
    v27 = objc_msgSend(v166, sel_parametersByName);
    if (v27)
    {
      v28 = v27;
      v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(_QWORD *)(v29 + 16))
      {
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656D656C65, 0xE700000000000000);
        v31 = (uint64_t)v159;
        if ((v32 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v29 + 56) + 32 * v30, (uint64_t)&v168);
          swift_bridgeObjectRelease();
          if (*((_QWORD *)&v169 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              if (v167[0] == __PAIR128__(0xEE00535554415453, 0x5F56414E5F544547))
              {

                swift_bridgeObjectRelease();
                return;
              }
              v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v152 & 1) != 0)
              {

                return;
              }
            }
LABEL_22:
            objc_msgSend(v20, sel_absoluteTimestamp);
            Date.init(timeIntervalSinceReferenceDate:)();
            v50 = type metadata accessor for Date();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v31, 0, 1, v50);
            v51 = objc_msgSend(v161, sel_dateInterval);
            if (v51)
            {
              v52 = v51;
              v53 = (uint64_t)v158;
              static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

              v54 = type metadata accessor for DateInterval();
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 0, 1, v54);
            }
            else
            {
              v54 = type metadata accessor for DateInterval();
              v53 = (uint64_t)v158;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v158, 1, 1, v54);
            }
            v55 = (uint64_t)v157;
            v56 = MEMORY[0x24BEE0D00];
            outlined init with take of DateInterval?(v53, (uint64_t)v157);
            type metadata accessor for DateInterval();
            v57 = 0.0;
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v55, 1, v54))
            {
              DateInterval.duration.getter();
              v57 = v58;
            }
            outlined destroy of Any?(v55, &demangling cache variable for type metadata for DateInterval?);
            type metadata accessor for Utils();
            static Utils.deltaTBetween(eventStart:siriUISession:duration:)(v31, v165, (uint64_t)&v168, v57);
            outlined destroy of Any?(v31, &demangling cache variable for type metadata for Date?);
            v59 = v168;
            v60 = v169;
            v61 = v170;
            v62 = v171;
            v63 = v166;
            v64 = objc_msgSend(v166, sel_typeName);
            v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v67 = v66;

            *((_QWORD *)&v169 + 1) = v56;
            *(_QWORD *)&v168 = v65;
            *((_QWORD *)&v168 + 1) = v67;
            outlined init with take of Any(&v168, v167);
            v68 = MEMORY[0x24BEE4B00];
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v172 = v68;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v167, 0x7954746E65746E69, 0xEE00656D614E6570, isUniquelyReferenced_nonNull_native);
            v70 = v172;
            swift_bridgeObjectRelease();
            v71 = objc_msgSend(v63, sel_parametersByName);
            if (v71)
            {
              v72 = v71;
              v73 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

              if (*(_QWORD *)(v73 + 16)
                && (v74 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E656D656C65, 0xE700000000000000),
                    (v75 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v73 + 56) + 32 * v74, (uint64_t)&v168);
              }
              else
              {
                v168 = 0u;
                v169 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v169 + 1))
              {
                v76 = MEMORY[0x24BEE0D00];
                if ((swift_dynamicCast() & 1) != 0)
                {
                  v78 = *((_QWORD *)&v167[0] + 1);
                  v77 = *(_QWORD *)&v167[0];
                  *((_QWORD *)&v169 + 1) = v76;
                  if (*((_QWORD *)&v167[0] + 1))
                    goto LABEL_40;
                  goto LABEL_39;
                }
LABEL_38:
                *((_QWORD *)&v169 + 1) = v56;
LABEL_39:
                v77 = 0;
                v78 = 0xE000000000000000;
LABEL_40:
                *(_QWORD *)&v168 = v77;
                *((_QWORD *)&v168 + 1) = v78;
                outlined init with take of Any(&v168, v167);
                v79 = swift_isUniquelyReferenced_nonNull_native();
                v172 = v70;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v167, 0x79546E6F69746361, 0xEA00000000006570, v79);
                v80 = v172;
                swift_bridgeObjectRelease();
                v81 = objc_msgSend(v63, sel_parametersByName);
                if (v81)
                {
                  v82 = v81;
                  v83 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                  if (*(_QWORD *)(v83 + 16)
                    && (v84 = specialized __RawDictionaryStorage.find<A>(_:)(0x697461676976616ELL, 0xEE00657079546E6FLL),
                        (v85 & 1) != 0))
                  {
                    outlined init with copy of Any(*(_QWORD *)(v83 + 56) + 32 * v84, (uint64_t)&v168);
                  }
                  else
                  {
                    v168 = 0u;
                    v169 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v169 + 1))
                  {
                    v86 = MEMORY[0x24BEE0D00];
                    if ((swift_dynamicCast() & 1) != 0)
                    {
                      v88 = *((_QWORD *)&v167[0] + 1);
                      v87 = *(_QWORD *)&v167[0];
                      *((_QWORD *)&v169 + 1) = v86;
                      if (*((_QWORD *)&v167[0] + 1))
                        goto LABEL_53;
                      goto LABEL_52;
                    }
LABEL_51:
                    *((_QWORD *)&v169 + 1) = v56;
LABEL_52:
                    v87 = 0;
                    v88 = 0xE000000000000000;
LABEL_53:
                    *(_QWORD *)&v168 = v87;
                    *((_QWORD *)&v168 + 1) = v88;
                    outlined init with take of Any(&v168, v167);
                    v89 = swift_isUniquelyReferenced_nonNull_native();
                    v172 = v80;
                    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v167, 0x697461676976616ELL, 0xEE00657079546E6FLL, v89);
                    v90 = v172;
                    swift_bridgeObjectRelease();
                    v91 = objc_msgSend(v63, sel_parametersByName);
                    LODWORD(v165) = v62;
                    if (v91)
                    {
                      v92 = v91;
                      v93 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                      if (*(_QWORD *)(v93 + 16)
                        && (v94 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6564695F76616ELL, 0xEE00726569666974), (v95 & 1) != 0))
                      {
                        outlined init with copy of Any(*(_QWORD *)(v93 + 56) + 32 * v94, (uint64_t)&v168);
                      }
                      else
                      {
                        v168 = 0u;
                        v169 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      if (*((_QWORD *)&v169 + 1))
                      {
                        v96 = MEMORY[0x24BEE0D00];
                        if ((swift_dynamicCast() & 1) != 0)
                        {
                          v98 = *((_QWORD *)&v167[0] + 1);
                          v97 = *(_QWORD *)&v167[0];
                          *((_QWORD *)&v169 + 1) = v96;
                          if (*((_QWORD *)&v167[0] + 1))
                            goto LABEL_66;
                          goto LABEL_65;
                        }
LABEL_64:
                        *((_QWORD *)&v169 + 1) = v56;
LABEL_65:
                        v97 = 0;
                        v98 = 0xE000000000000000;
LABEL_66:
                        *(_QWORD *)&v168 = v97;
                        *((_QWORD *)&v168 + 1) = v98;
                        outlined init with take of Any(&v168, v167);
                        v99 = swift_isUniquelyReferenced_nonNull_native();
                        v172 = v90;
                        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v167, 0xD000000000000014, 0x8000000218FC17F0, v99);
                        v100 = v172;
                        swift_bridgeObjectRelease();
                        v101 = objc_msgSend(v63, sel_parametersByName);
                        if (v101)
                        {
                          v102 = v101;
                          v103 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                          if (*(_QWORD *)(v103 + 16)
                            && (v104 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6564695F696F70, 0xEE00726569666974), (v105 & 1) != 0))
                          {
                            outlined init with copy of Any(*(_QWORD *)(v103 + 56) + 32 * v104, (uint64_t)&v168);
                          }
                          else
                          {
                            v168 = 0u;
                            v169 = 0u;
                          }
                          swift_bridgeObjectRelease();
                          if (*((_QWORD *)&v169 + 1))
                          {
                            v106 = MEMORY[0x24BEE0D00];
                            if ((swift_dynamicCast() & 1) != 0)
                            {
                              v108 = *((_QWORD *)&v167[0] + 1);
                              v107 = *(_QWORD *)&v167[0];
                              *((_QWORD *)&v169 + 1) = v106;
                              if (*((_QWORD *)&v167[0] + 1))
                                goto LABEL_79;
                              goto LABEL_78;
                            }
LABEL_77:
                            *((_QWORD *)&v169 + 1) = v56;
LABEL_78:
                            v107 = 0;
                            v108 = 0xE000000000000000;
LABEL_79:
                            *(_QWORD *)&v168 = v107;
                            *((_QWORD *)&v168 + 1) = v108;
                            outlined init with take of Any(&v168, v167);
                            v109 = swift_isUniquelyReferenced_nonNull_native();
                            v172 = v100;
                            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v167, 0x746E656449696F70, 0xED00007265696669, v109);
                            v110 = v172;
                            swift_bridgeObjectRelease();
                            v111 = objc_msgSend(v63, sel_parametersByName);
                            if (v111)
                            {
                              v112 = v111;
                              v113 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                              if (*(_QWORD *)(v113 + 16)
                                && (v114 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000), (v115 & 1) != 0))
                              {
                                outlined init with copy of Any(*(_QWORD *)(v113 + 56) + 32 * v114, (uint64_t)&v168);
                              }
                              else
                              {
                                v168 = 0u;
                                v169 = 0u;
                              }
                              swift_bridgeObjectRelease();
                              if (*((_QWORD *)&v169 + 1))
                              {
                                v116 = MEMORY[0x24BEE0D00];
                                if ((swift_dynamicCast() & 1) != 0)
                                {
                                  v118 = *((_QWORD *)&v167[0] + 1);
                                  v117 = *(_QWORD *)&v167[0];
                                  *((_QWORD *)&v169 + 1) = v116;
                                  if (*((_QWORD *)&v167[0] + 1))
                                    goto LABEL_92;
                                  goto LABEL_91;
                                }
LABEL_90:
                                *((_QWORD *)&v169 + 1) = v56;
LABEL_91:
                                v117 = 0;
                                v118 = 0xE000000000000000;
LABEL_92:
                                *(_QWORD *)&v168 = v117;
                                *((_QWORD *)&v168 + 1) = v118;
                                outlined init with take of Any(&v168, v167);
                                v119 = swift_isUniquelyReferenced_nonNull_native();
                                v172 = v110;
                                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v167, 0x656372756F73, 0xE600000000000000, v119);
                                v120 = v172;
                                swift_bridgeObjectRelease();
                                v121 = objc_msgSend(v63, sel_parametersByName);
                                if (v121)
                                {
                                  v122 = v121;
                                  v123 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                                  if (*(_QWORD *)(v123 + 16)
                                    && (v124 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000), (v125 & 1) != 0))
                                  {
                                    outlined init with copy of Any(*(_QWORD *)(v123 + 56) + 32 * v124, (uint64_t)&v168);
                                  }
                                  else
                                  {
                                    v168 = 0u;
                                    v169 = 0u;
                                  }
                                  swift_bridgeObjectRelease();
                                  if (*((_QWORD *)&v169 + 1))
                                  {
                                    if (swift_dynamicCast())
                                    {
                                      v127 = *((_QWORD *)&v167[0] + 1);
                                      v126 = *(_QWORD *)&v167[0];
                                      goto LABEL_103;
                                    }
LABEL_102:
                                    v126 = 0;
                                    v127 = 0xE000000000000000;
LABEL_103:
                                    *(_QWORD *)&v168 = v126;
                                    *((_QWORD *)&v168 + 1) = v127;
                                    *(_QWORD *)&v167[0] = 0x6C7070612E6D6F63;
                                    *((_QWORD *)&v167[0] + 1) = 0xEA00000000002E65;
                                    lazy protocol witness table accessor for type String and conformance String();
                                    v128 = StringProtocol.contains<A>(_:)();
                                    swift_bridgeObjectRelease();
                                    v129 = MEMORY[0x24BEE1328];
                                    *((_QWORD *)&v169 + 1) = MEMORY[0x24BEE1328];
                                    LOBYTE(v168) = v128 & 1;
                                    outlined init with take of Any(&v168, v167);
                                    v130 = swift_isUniquelyReferenced_nonNull_native();
                                    v172 = v120;
                                    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v167, 0xD000000000000016, 0x8000000218FBF020, v130);
                                    v131 = v172;
                                    swift_bridgeObjectRelease();
                                    if (*((double *)&v59 + 1) < 0.0)
                                      goto LABEL_104;
                                    v133 = objc_msgSend(v166, sel_parametersByName);
                                    if (v133)
                                    {
                                      v134 = v133;
                                      v135 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                                      if (*(_QWORD *)(v135 + 16)
                                        && (v136 = specialized __RawDictionaryStorage.find<A>(_:)(0x656372756F73, 0xE600000000000000), (v137 & 1) != 0))
                                      {
                                        outlined init with copy of Any(*(_QWORD *)(v135 + 56) + 32 * v136, (uint64_t)&v168);
                                      }
                                      else
                                      {
                                        v168 = 0u;
                                        v169 = 0u;
                                      }
                                      swift_bridgeObjectRelease();
                                      if (*((_QWORD *)&v169 + 1))
                                      {
                                        if ((swift_dynamicCast() & 1) == 0)
                                          goto LABEL_116;
                                        v138 = String.lowercased()();
                                        v139 = String.hasSuffix(_:)(v138);
                                        swift_bridgeObjectRelease();
                                        if (v139)
                                        {
                                          swift_bridgeObjectRelease();
                                        }
                                        else
                                        {
                                          v150._object = (void *)0x8000000218FC17B0;
                                          v150._countAndFlagsBits = 0xD000000000000011;
                                          v151 = String.hasSuffix(_:)(v150);
                                          swift_bridgeObjectRelease();
                                          if (!v151)
                                            goto LABEL_116;
                                        }
LABEL_104:
                                        *((_QWORD *)&v169 + 1) = v129;
                                        LOBYTE(v168) = 1;
                                        outlined init with take of Any(&v168, v167);
                                        v132 = swift_isUniquelyReferenced_nonNull_native();
                                        v172 = v131;
                                        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v167, 0x42646574616E6F64, 0xED00006972695379, v132);
                                        v131 = v172;
                                        swift_bridgeObjectRelease();
LABEL_116:
                                        v140 = v166;
                                        v141 = objc_msgSend(v166, sel_domain);
                                        v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                                        v144 = v143;

                                        v145 = objc_msgSend(v140, sel_verb);
                                        v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                                        v148 = v147;

                                        type metadata accessor for Signal();
                                        v149 = swift_allocObject();
                                        *(_OWORD *)(v149 + 16) = v59;
                                        *(_OWORD *)(v149 + 32) = v60;
                                        *(_QWORD *)(v149 + 48) = v61;
                                        *(_BYTE *)(v149 + 56) = v165;
                                        *(_QWORD *)(v149 + 64) = v142;
                                        *(_QWORD *)(v149 + 72) = v144;
                                        *(_QWORD *)(v149 + 80) = v146;
                                        *(_QWORD *)(v149 + 88) = v148;
                                        *(_BYTE *)(v149 + 96) = 1;
                                        *(_QWORD *)(v149 + 104) = v131;
                                        return;
                                      }
                                    }
                                    else
                                    {
                                      v168 = 0u;
                                      v169 = 0u;
                                    }
                                    outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for Any?);
                                    goto LABEL_116;
                                  }
                                }
                                else
                                {
                                  v168 = 0u;
                                  v169 = 0u;
                                }
                                outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for Any?);
                                goto LABEL_102;
                              }
                            }
                            else
                            {
                              v168 = 0u;
                              v169 = 0u;
                            }
                            outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for Any?);
                            goto LABEL_90;
                          }
                        }
                        else
                        {
                          v168 = 0u;
                          v169 = 0u;
                        }
                        outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for Any?);
                        goto LABEL_77;
                      }
                    }
                    else
                    {
                      v168 = 0u;
                      v169 = 0u;
                    }
                    outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for Any?);
                    goto LABEL_64;
                  }
                }
                else
                {
                  v168 = 0u;
                  v169 = 0u;
                }
                outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for Any?);
                goto LABEL_51;
              }
            }
            else
            {
              v168 = 0u;
              v169 = 0u;
            }
            outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for Any?);
            goto LABEL_38;
          }
        }
        else
        {
          v168 = 0u;
          v169 = 0u;
          swift_bridgeObjectRelease();
        }
LABEL_21:
        outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for Any?);
        goto LABEL_22;
      }
      v168 = 0u;
      v169 = 0u;
      swift_bridgeObjectRelease();
    }
    else
    {
      v168 = 0u;
      v169 = 0u;
    }
    v31 = (uint64_t)v159;
    goto LABEL_21;
  }
  if (one-time initialization token for engagement != -1)
    swift_once();
  v33 = v155;
  v34 = __swift_project_value_buffer(v155, (uint64_t)static Logger.engagement);
  v35 = v154;
  (*(void (**)(char *, uint64_t, uint64_t))(v156 + 16))(v154, v34, v33);
  *(_QWORD *)&v168 = 0;
  *((_QWORD *)&v168 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v36._countAndFlagsBits = 0xD000000000000012;
  v36._object = (void *)0x8000000218FC0170;
  String.append(_:)(v36);
  v37 = v166;
  v38 = objc_msgSend(v166, sel_domain);
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v41 = v40;

  v42._countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 0xD000000000000023;
  v43._object = (void *)0x8000000218FC1DD0;
  String.append(_:)(v43);
  v44 = v168;
  v45 = *MEMORY[0x24BEA8140];
  v46 = type metadata accessor for AppIntentEventDataIssues();
  v47 = (uint64_t)v162;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v162, v45, v46);
  v48 = v163;
  v49 = v164;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v163 + 104))(v47, *MEMORY[0x24BEA8000], v164);
  Logger.error(_:_:)(v44, *((unint64_t *)&v44 + 1), v47);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  (*(void (**)(char *, uint64_t))(v156 + 8))(v35, v33);
}

uint64_t MapsIntentSignalFactory.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = &outlined read-only object #0 of MapsIntentSignalFactory.init();
  return result;
}

uint64_t MapsIntentSignalFactory.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t MapsIntentSignalFactory.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MapsIntentSignalFactory.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type ProtoNavigationFollowupType and conformance ProtoNavigationFollowupType()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ProtoNavigationFollowupType and conformance ProtoNavigationFollowupType;
  if (!lazy protocol witness table cache variable for type ProtoNavigationFollowupType and conformance ProtoNavigationFollowupType)
  {
    v1 = type metadata accessor for ProtoNavigationFollowupType();
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEA8218], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtoNavigationFollowupType and conformance ProtoNavigationFollowupType);
  }
  return result;
}

uint64_t type metadata accessor for MapsIntentSignalFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for MapsIntentSignalFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MapsIntentSignalFactory.transformSignalsToBiomePSE(signals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MapsIntentSignalFactory.transformSignalsToFeatures(signals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t PSEGeoSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

void PSEGeoSELFEmitter.emitPSEGeo(geoSignals:appLaunchSignals:task:)(unint64_t a1, uint64_t (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t (*v41)(void);
  uint64_t v42;
  unint64_t v43;
  char v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  uint64_t v68;
  char v70;
  uint64_t j;
  uint64_t v72;
  uint64_t v73;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  id v80;
  char *v81;
  char **p_name;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  id v99;
  char *v100;
  unint64_t v101;
  id v102;
  Class isa;
  id v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  char *v113;
  id v114;
  Class v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(_QWORD, _QWORD);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  id v127;
  Class v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  id v138;
  char *v139;
  id v140;
  Class v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  id v153;
  char *v154;
  Class v155;
  uint64_t v156;
  uint64_t (*v157)(uint64_t);
  uint64_t v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  char *v162;
  id v163;
  id v164;
  id v165;
  char *v166;
  void *v167;
  id v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t (*v175)(_QWORD, _QWORD);
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;

  v4 = v3;
  v175 = a2;
  v7 = type metadata accessor for ReliabilityCategory();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v177 = (char *)&v156 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v174 = (char *)&v156 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v172 = (char *)&v156 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v173 = (char *)&v156 - v15;
  v16 = type metadata accessor for UUID();
  v176 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v170 = (char *)&v156 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v171 = (char *)&v156 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v156 - v24;
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E0]), sel_init);
  if (!v26)
    goto LABEL_43;
  v27 = v26;
  v169 = a3;
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E8]), sel_init);
  if (!v28)
  {

LABEL_43:
    if (one-time initialization token for engagement != -1)
      swift_once();
    v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.engagement);
    v63 = *MEMORY[0x24BEA7EF8];
    v64 = type metadata accessor for EngagementSignalCollectionError();
    v65 = (uint64_t)v177;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v177, v63, v64);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v65, *MEMORY[0x24BEA8030], v7);
    Logger.debug(_:_:)(0xD000000000000031, 0x8000000218FC1E60, v65);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v65, v7);
    return;
  }
  v29 = v28;
  v166 = v19;
  v167 = (void *)v3;
  v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95918]), sel_init);
  if (!v30)
  {

    goto LABEL_43;
  }
  v31 = v30;
  v168 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958F0]), sel_init);
  if (!v168)
  {

    goto LABEL_43;
  }
  v165 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95910]), sel_init);
  if (!v165)
  {

    goto LABEL_43;
  }
  v162 = v25;
  v164 = v31;
  v163 = v29;
  v160 = v27;
  if (!(a1 >> 62))
  {
    v32 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v32)
      goto LABEL_8;
    goto LABEL_42;
  }
  swift_bridgeObjectRetain();
  v32 = _CocoaArrayWrapper.endIndex.getter();
  if (!v32)
  {
LABEL_42:

    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
LABEL_8:
  v161 = v16;
  v33 = (id)(a1 & 0xC000000000000001);
  if ((a1 & 0xC000000000000001) != 0)
  {
    v34 = MEMORY[0x219A2756C](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_48:
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter())
        goto LABEL_25;
      goto LABEL_49;
    }
    v34 = *(_QWORD *)(a1 + 32);
    swift_retain();
  }
  v35 = swift_bridgeObjectRelease();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v34 + 120))(&v180, v35);
  v31 = v168;
  v36 = (*(uint64_t (**)(id))(*(_QWORD *)v34 + 144))(objc_msgSend(v168, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v180));
  v37 = (void *)MEMORY[0x219A27218](v36);
  swift_bridgeObjectRelease();
  objc_msgSend(v31, sel_setDomain_, v37);

  v38 = (*(uint64_t (**)(void))(*(_QWORD *)v34 + 168))();
  v27 = v39;
  v40 = (void *)MEMORY[0x219A27218](v38);
  swift_bridgeObjectRelease();
  objc_msgSend(v31, sel_setAction_, v40);

  v41 = *(uint64_t (**)(void))(*(_QWORD *)v34 + 216);
  v159 = v34;
  v42 = v41();
  if (!*(_QWORD *)(v42 + 16)
    || (v43 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379), (v44 & 1) == 0))
  {
    v180 = 0u;
    v181 = 0u;
    swift_bridgeObjectRelease();
    v45 = v167;
    v4 = (unint64_t)v175;
    goto LABEL_22;
  }
  outlined init with copy of Any(*(_QWORD *)(v42 + 56) + 32 * v43, (uint64_t)&v180);
  swift_bridgeObjectRelease();
  v45 = v167;
  v4 = (unint64_t)v175;
  if (!*((_QWORD *)&v181 + 1))
  {
LABEL_22:
    outlined destroy of Any?((uint64_t)&v180, &demangling cache variable for type metadata for Any?);
    v46 = 2;
    goto LABEL_23;
  }
  if (swift_dynamicCast())
    v46 = v178;
  else
    v46 = 2;
LABEL_23:
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 104))(v46);
  objc_msgSend(v168, sel_setIsDonatedBySiri_, v47);
  if (v4 >> 62)
    goto LABEL_48;
  v48 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v48)
  {
LABEL_25:
    if ((v4 & 0xC000000000000001) != 0)
    {
      v49 = MEMORY[0x219A2756C](0, v4);
    }
    else
    {
      if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_107;
      }
      v49 = *(_QWORD *)(v4 + 32);
      swift_retain();
    }
    v50 = swift_bridgeObjectRelease();
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v49 + 120))(&v180, v50);
    v4 = (unint64_t)v168;
    v51 = (*(uint64_t (**)(id))(*(_QWORD *)v49 + 216))(objc_msgSend(v168, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v180));
    if (*(_QWORD *)(v51 + 16)
      && (v52 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FBEF40),
          (v53 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v51 + 56) + 32 * v52, (uint64_t)&v180);
    }
    else
    {
      v180 = 0u;
      v181 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v181 + 1))
    {
      v54 = swift_dynamicCast();
      v55 = v54 == 0;
      if (v54)
        v56 = v178;
      else
        v56 = 0;
      if (v55)
        v57 = 0;
      else
        v57 = v179;
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v180, &demangling cache variable for type metadata for Any?);
      v56 = 0;
      v57 = 0;
    }
    v27 = v167;
    v58 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 128))(v56, v57);
    swift_bridgeObjectRelease();
    v59 = (*(uint64_t (**)(id))(*(_QWORD *)v49 + 168))(objc_msgSend((id)v4, sel_setAppFollowup_, v58));
    v31 = v60;
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 136))(v59);
    swift_bridgeObjectRelease();
    objc_msgSend((id)v4, sel_setAppLaunchReason_, v61);
    swift_release();
    goto LABEL_50;
  }
LABEL_49:
  swift_bridgeObjectRelease();
  objc_msgSend(v168, sel_setAppFollowup_, 3);
LABEL_50:
  v158 = v8;
  v175 = (uint64_t (*)(_QWORD, _QWORD))v7;
  *(_QWORD *)&v180 = MEMORY[0x24BEE4AF8];
  if (v32 < 1)
  {
    __break(1u);
    goto LABEL_104;
  }
  swift_bridgeObjectRetain();
  for (i = 0; i != v32; ++i)
  {
    if (v33)
    {
      v67 = MEMORY[0x219A2756C](i, a1);
    }
    else
    {
      v67 = *(_QWORD *)(a1 + 8 * i + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(_QWORD *)v67 + 168))() == 2003789907 && v68 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_53:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      continue;
    }
    v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v70 & 1) != 0)
      goto LABEL_53;
    swift_release();
  }
  swift_bridgeObjectRelease();
  v4 = v180;
  *(_QWORD *)&v180 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  for (j = 0; j != v32; ++j)
  {
    if (v33)
    {
      v72 = MEMORY[0x219A2756C](j, a1);
    }
    else
    {
      v72 = *(_QWORD *)(a1 + 8 * j + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(void))(*(_QWORD *)v72 + 168))() == 0x7261436563616C50 && v73 == 0xEC00000070615464)
    {
      swift_bridgeObjectRelease();
LABEL_66:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      continue;
    }
    v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v75 & 1) != 0)
      goto LABEL_66;
    swift_release();
  }
  v76 = swift_bridgeObjectRelease();
  a1 = v180;
  v27 = *(void **)(*(_QWORD *)v169 + 296);
  v77 = ((uint64_t (*)(uint64_t))v27)(v76);
  v78 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)v77 + 104))(v77);
  swift_release();
  v31 = v165;
  objc_msgSend(v165, sel_setIsSiriResultUseful_, v78 == 3);
  v33 = v168;
  if ((v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v79 = *(_QWORD *)(v4 + 16);
    goto LABEL_80;
  }
LABEL_104:
  swift_bridgeObjectRetain();
  v79 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
LABEL_80:
  v7 = v161;
  v80 = v164;
  v81 = v162;
  v157 = (uint64_t (*)(uint64_t))v27;
  if (!v79)
  {
    swift_release();
    swift_release();
    objc_msgSend(v33, sel_setHasUserInitiatedFollowup_, 0);
    objc_msgSend(v31, sel_setFollowup_, 0);
    goto LABEL_122;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
LABEL_107:
    v4 = MEMORY[0x219A2756C](0, v4);
    swift_release();
    p_name = (char **)(&PSEAlarmSELFEmitter + 24);
LABEL_84:
    objc_msgSend(v33, sel_setHasUserInitiatedFollowup_, 1);
    v83 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95920]), p_name[27]);
    if (!v83)
    {
      swift_release();
      goto LABEL_121;
    }
    v32 = (uint64_t)v83;
    objc_msgSend(v83, sel_setFollowupType_, (*(uint64_t (**)(unint64_t))(*(_QWORD *)v167 + 160))(v4));
    if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
      goto LABEL_109;
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_88;
LABEL_110:
    v93 = swift_release();
    v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 168))(v93);
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 168))(v94);
    swift_bridgeObjectRelease();
    v96 = (*(uint64_t (**)(id))(*(_QWORD *)v4 + 216))(objc_msgSend((id)v32, sel_setMapsAction_, v95));
    if (*(_QWORD *)(v96 + 16)
      && (v97 = specialized __RawDictionaryStorage.find<A>(_:)(0x79546E6F69746361, 0xEA00000000006570),
          (v98 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v96 + 56) + 32 * v97, (uint64_t)&v180);
    }
    else
    {
      v180 = 0u;
      v181 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v181 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v91 = (void *)MEMORY[0x219A27218](v178, v179);
        swift_bridgeObjectRelease();
LABEL_119:
        objc_msgSend((id)v32, sel_setMapsActionType_, v91);
        goto LABEL_120;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v180, &demangling cache variable for type metadata for Any?);
    }
    v91 = 0;
    goto LABEL_119;
  }
  p_name = &PSEAlarmSELFEmitter.name;
  if (*(_QWORD *)(v4 + 16))
  {
    v4 = *(_QWORD *)(v4 + 32);
    swift_retain();
    swift_release();
    goto LABEL_84;
  }
  __break(1u);
LABEL_109:
  swift_bridgeObjectRetain();
  v92 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v92)
    goto LABEL_110;
LABEL_88:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v84 = MEMORY[0x219A2756C](0, a1);
    goto LABEL_91;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v84 = *(_QWORD *)(a1 + 32);
    swift_retain();
LABEL_91:
    v85 = swift_release();
    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 168))(v85);
    v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 168))(v86);
    swift_bridgeObjectRelease();
    v88 = (*(uint64_t (**)(id))(*(_QWORD *)v84 + 216))(objc_msgSend((id)v32, sel_setMapsAction_, v87));
    if (*(_QWORD *)(v88 + 16)
      && (v89 = specialized __RawDictionaryStorage.find<A>(_:)(0x79546E6F69746361, 0xEA00000000006570),
          (v90 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v88 + 56) + 32 * v89, (uint64_t)&v180);
    }
    else
    {
      v180 = 0u;
      v181 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v181 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v91 = (void *)MEMORY[0x219A27218](v178, v179);
        swift_bridgeObjectRelease();
        goto LABEL_102;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v180, &demangling cache variable for type metadata for Any?);
    }
    v91 = 0;
LABEL_102:
    objc_msgSend((id)v32, sel_setMapsActionType_, v91);
    swift_release();
LABEL_120:

    v99 = (id)v32;
    objc_msgSend(v31, sel_setFollowup_, v99);

LABEL_121:
    swift_release();
    v80 = v164;
    v81 = v162;
LABEL_122:
    objc_msgSend(v80, sel_setCommonSignal_, v33);
    objc_msgSend(v80, sel_setMapsSignal_, v31);
    UUID.init()();
    v100 = v81;
    v101 = 0x24BE95000uLL;
    v102 = objc_allocWithZone(MEMORY[0x24BE95C78]);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v104 = objc_msgSend(v102, sel_initWithNSUUID_, isa);

    v105 = v176;
    v106 = *(void (**)(char *, uint64_t))(v176 + 8);
    v106(v100, v7);
    v107 = v163;
    objc_msgSend(v163, sel_setPseId_, v104);

    v108 = v169;
    (*(void (**)(void))(*(_QWORD *)v169 + 152))();
    v109 = (uint64_t)v173;
    UUID.init(uuidString:)();
    v110 = v105;
    swift_bridgeObjectRelease();
    v111 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
    if (v111(v109, 1, v7) == 1)
    {
      v112 = outlined destroy of Any?(v109, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      v113 = v171;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v171, v109, v7);
      v114 = objc_allocWithZone(MEMORY[0x24BE95C78]);
      v115 = UUID._bridgeToObjectiveC()().super.isa;
      v116 = objc_msgSend(v114, sel_initWithNSUUID_, v115);

      objc_msgSend(v107, sel_setUiSessionId_, v116);
      v112 = ((uint64_t (*)(char *, uint64_t))v106)(v113, v7);
    }
    if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 200))(v112) + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v117 = (uint64_t)v172;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      v118 = v161;
      if (v111(v117, 1, v161) == 1)
      {
        outlined destroy of Any?(v117, &demangling cache variable for type metadata for UUID?);
        v119 = v175;
        v120 = v158;
        goto LABEL_129;
      }
      v126 = v170;
      (*(void (**)(char *, uint64_t, uint64_t))(v176 + 32))(v170, v117, v118);
      v127 = objc_allocWithZone(MEMORY[0x24BE95C78]);
      v128 = UUID._bridgeToObjectiveC()().super.isa;
      v129 = objc_msgSend(v127, sel_initWithNSUUID_, v128);

      objc_msgSend(v163, sel_setOriginalLastRequestId_, v129);
      v125 = ((uint64_t (*)(char *, uint64_t))v106)(v126, v118);
      v119 = v175;
      v120 = v158;
    }
    else
    {
      swift_bridgeObjectRelease();
      v119 = v175;
      v120 = v158;
LABEL_129:
      if (one-time initialization token for engagement != -1)
        swift_once();
      v121 = type metadata accessor for Logger();
      __swift_project_value_buffer(v121, (uint64_t)static Logger.engagement);
      v122 = *MEMORY[0x24BEA7F28];
      v123 = type metadata accessor for EngagementSignalCollectionError();
      v124 = (uint64_t)v177;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 104))(v177, v122, v123);
      (*(void (**)(uint64_t, _QWORD, uint64_t (*)(_QWORD, _QWORD)))(v120 + 104))(v124, *MEMORY[0x24BEA8030], v119);
      Logger.debug(_:_:)(0xD000000000000027, 0x8000000218FBEF80, v124);
      v125 = (*(uint64_t (**)(uint64_t, _QWORD))(v120 + 8))(v124, v119);
      v101 = 0x24BE95000;
    }
    v175 = (uint64_t (*)(_QWORD, _QWORD))v106;
    (*(void (**)(uint64_t))(*(_QWORD *)v108 + 176))(v125);
    v130 = (uint64_t)v174;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    v131 = v161;
    if (v111(v130, 1, v161) == 1)
    {
      outlined destroy of Any?(v130, &demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for engagement != -1)
        swift_once();
      v132 = type metadata accessor for Logger();
      __swift_project_value_buffer(v132, (uint64_t)static Logger.engagement);
      v133 = *MEMORY[0x24BEA7F10];
      v134 = type metadata accessor for EngagementSignalCollectionError();
      v135 = (uint64_t)v177;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 104))(v177, v133, v134);
      (*(void (**)(uint64_t, _QWORD, uint64_t (*)(_QWORD, _QWORD)))(v120 + 104))(v135, *MEMORY[0x24BEA8030], v119);
      Logger.debug(_:_:)(0xD000000000000024, 0x8000000218FBEFB0, v135);
      v136 = (*(uint64_t (**)(uint64_t, _QWORD))(v120 + 8))(v135, v119);
      v131 = v161;
      v137 = v160;
      v138 = v163;
    }
    else
    {
      v139 = v166;
      (*(void (**)(char *, uint64_t, uint64_t))(v176 + 32))(v166, v130, v131);
      v140 = objc_allocWithZone(*(Class *)(v101 + 3192));
      v141 = UUID._bridgeToObjectiveC()().super.isa;
      v142 = objc_msgSend(v140, sel_initWithNSUUID_, v141);

      v138 = v163;
      objc_msgSend(v163, sel_setTaskId_, v142);

      v136 = v175(v139, v131);
      v137 = v160;
    }
    v143 = v157(v136);
    v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 104))(v143);
    swift_release();
    v145 = v167;
    v146 = objc_msgSend(v138, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 96))(v144));
    objc_msgSend(v138, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(_QWORD *)v145 + 112))(v146));
    objc_msgSend(v137, sel_setEventMetadata_, v138);
    v147 = v164;
    objc_msgSend(v137, sel_setMapsSignalGenerated_, v164);
    if (one-time initialization token for engagement != -1)
      swift_once();
    v148 = type metadata accessor for Logger();
    __swift_project_value_buffer(v148, (uint64_t)static Logger.engagement);
    v149 = *MEMORY[0x24BEA7F88];
    v150 = type metadata accessor for SELFPSELogged();
    v151 = (uint64_t)v177;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 104))(v177, v149, v150);
    (*(void (**)(uint64_t, _QWORD, uint64_t (*)(_QWORD, _QWORD)))(v120 + 104))(v151, *MEMORY[0x24BEA7FE0], v119);
    Logger.debug(_:_:)(0xD000000000000038, 0x8000000218FC1EA0, v151);
    (*(void (**)(uint64_t, uint64_t (*)(_QWORD, _QWORD)))(v120 + 8))(v151, v119);
    v152 = objc_msgSend((id)objc_opt_self(), sel_sharedAnalytics);
    v153 = objc_msgSend(v152, sel_defaultMessageStream);

    v154 = v162;
    UUID.init()();
    v155 = UUID._bridgeToObjectiveC()().super.isa;
    v175(v154, v131);
    objc_msgSend(v153, sel_emitMessage_isolatedStreamUUID_, v137, v155);

    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t PSEGeoSELFEmitter.getFollowupType(firstShowSignal:)(uint64_t a1)
{
  _QWORD v2[6];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 120))(v2);
  if (*(double *)&v2[1] <= 0.0)
    return 1;
  else
    return 2;
}

uint64_t PSEGeoSELFEmitter.getPSEMapsAction(mapsAction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 == 0x697461676976614ELL && a2 == 0xEA00000000006E6FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 1;
  }
  if (a1 == 0x7261436563616C50 && a2 == 0xEC00000070615464
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  if (a1 == 2003789907 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 3;
  if (a1 == 0x694C746C75736552 && a2 == 0xED00007061547473
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 4;
  }
  if (a1 == 0x61437463656C6553 && a2 == 0xEE0079726F676574
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 5;
  }
  v4 = 6;
  if (a1 != 0x686372616553 || a2 != 0xE600000000000000)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 6;
    else
      return 0;
  }
  return v4;
}

uint64_t PSEGeoSELFEmitter.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEGeoSELFEmitter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEGeoSELFEmitter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PSEGeoSELFEmitter()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSEGeoSELFEmitter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSEGeoSELFEmitter.emitPSEGeo(geoSignals:appLaunchSignals:task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PSEGeoSELFEmitter.getFollowupType(firstShowSignal:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PSEGeoSELFEmitter.getPSEMapsAction(mapsAction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

void *Constants.timeAfterSiriForServerSubmission.unsafeMutableAddressor()
{
  return &static Constants.timeAfterSiriForServerSubmission;
}

void *Constants.pseCollectorIdKey.unsafeMutableAddressor()
{
  return &static Constants.pseCollectorIdKey;
}

uint64_t *PSEStruct.pseTriggerOrigin.unsafeMutableAddressor()
{
  return &static PSEStruct.pseTriggerOrigin;
}

const char *Constants.assistantdTrigger.unsafeMutableAddressor()
{
  return "assistantd";
}

const char *Constants.inferencedTrigger.unsafeMutableAddressor()
{
  return "inferenced";
}

void *Constants.timeWindowAfterSiriUISession.unsafeMutableAddressor()
{
  return &static Constants.timeWindowAfterSiriUISession;
}

void *Constants.quickHungUpDuration.unsafeMutableAddressor()
{
  return &static Constants.quickHungUpDuration;
}

void *Constants.shortPlayDuration.unsafeMutableAddressor()
{
  return &static Constants.shortPlayDuration;
}

void *Constants.pseBundleId.unsafeMutableAddressor()
{
  return &static Constants.pseBundleId;
}

void *Constants.maximumTimeToSearchHistorySeconds.unsafeMutableAddressor()
{
  return &static Constants.maximumTimeToSearchHistorySeconds;
}

const char *Constants.collectorBundleName.unsafeMutableAddressor()
{
  return "CFBundleName";
}

void *Constants.activityCollectorIDDictionaryKey.unsafeMutableAddressor()
{
  return &static Constants.activityCollectorIDDictionaryKey;
}

void *Constants.activityCollectorsParameterName.unsafeMutableAddressor()
{
  return &static Constants.activityCollectorsParameterName;
}

uint64_t *Constants.defaultParameters.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultParameters != -1)
    swift_once();
  return &static Constants.defaultParameters;
}

uint64_t static PSEStruct.pseTriggerOrigin.getter()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = static PSEStruct.pseTriggerOrigin;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static PSEStruct.pseTriggerOrigin.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  static PSEStruct.pseTriggerOrigin = a1;
  qword_253F31BF0 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static PSEStruct.pseTriggerOrigin.modify())()
{
  swift_beginAccess();
  return NowPlayingSignalFactory.postEndDate.modify;
}

unint64_t one-time initialization function for defaultParameters()
{
  uint64_t inited;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_218FBDA00;
  *(_QWORD *)(inited + 32) = 0x614E6D6165727473;
  *(_QWORD *)(inited + 40) = 0xEB0000000073656DLL;
  *(_QWORD *)(inited + 48) = &outlined read-only object #0 of one-time initialization function for defaultParameters;
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static Constants.defaultParameters = result;
  return result;
}

uint64_t static Constants.defaultParameters.getter()
{
  if (one-time initialization token for defaultParameters != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t static Constants.assistantdTrigger.getter()
{
  return 0x6E61747369737361;
}

uint64_t static Constants.inferencedTrigger.getter()
{
  return 0x636E657265666E69;
}

uint64_t static Constants.collectorBundleName.getter()
{
  return 0x656C646E75424643;
}

unint64_t static Constants.activityCollectorsParameterName.getter()
{
  return 0xD000000000000012;
}

unint64_t static Constants.activityCollectorIDDictionaryKey.getter()
{
  return 0xD000000000000013;
}

void *Constants.activityCollectorIdKey.unsafeMutableAddressor()
{
  return &static Constants.activityCollectorIdKey;
}

unint64_t static Constants.activityCollectorIdKey.getter()
{
  return 0xD000000000000013;
}

unint64_t static Constants.pseCollectorIdKey.getter()
{
  return 0xD000000000000022;
}

unint64_t static Constants.pseBundleId.getter()
{
  return 0xD000000000000021;
}

void *Constants.siriUIBeginType.unsafeMutableAddressor()
{
  return &static Constants.siriUIBeginType;
}

unint64_t static Constants.siriUIBeginType.getter()
{
  return 0xD000000000000017;
}

void *Constants.siriUIEndType.unsafeMutableAddressor()
{
  return &static Constants.siriUIEndType;
}

unint64_t static Constants.siriUIEndType.getter()
{
  return 0xD000000000000015;
}

double static Constants.timeWindowAfterSiriUISession.getter()
{
  return 60.0;
}

double static Constants.timeAfterSiriForServerSubmission.getter()
{
  return 30.0;
}

double static Constants.maximumTimeToSearchHistorySeconds.getter()
{
  return 2419200.0;
}

double static Constants.quickHungUpDuration.getter()
{
  return 5.0;
}

double static Constants.shortPlayDuration.getter()
{
  return 10.0;
}

ValueMetadata *type metadata accessor for PSEStruct()
{
  return &type metadata for PSEStruct;
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

uint64_t PSEAlarmSELFEmitter.__allocating_init()()
{
  return swift_allocObject();
}

void PSEAlarmSELFEmitter.emitPSEAlarm(alarmSignals:appLaunchSignals:task:)(uint64_t (*a1)(_QWORD, _QWORD), unint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  int v56;
  uint64_t (*v57)(id);
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  id v77;
  uint64_t v78;
  id v79;
  char *v80;
  id v81;
  Class isa;
  id v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  id v91;
  Class v92;
  id v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  void *v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  id v107;
  Class v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  id v117;
  Class v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  id v130;
  char *v131;
  Class v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t (*v137)(id);
  char *v138;
  uint64_t v139;
  unint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  id v145;
  id v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  id v153;
  void *v154;
  uint64_t (*v155)(id);
  uint64_t v156;
  __int128 v157;
  __int128 v158;

  v154 = a3;
  v152 = (unint64_t)a1;
  v5 = type metadata accessor for ReliabilityCategory();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v149 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v148 = (char *)&v135 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v135 - v14;
  v16 = type metadata accessor for UUID();
  v150 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v135 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v147 = (char *)&v135 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v135 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v151 = (char *)&v135 - v25;
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E0]), sel_init);
  if (!v26)
    goto LABEL_22;
  v153 = v26;
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958E8]), sel_init);
  if (!v27)
  {
    v45 = v153;
LABEL_21:

    goto LABEL_22;
  }
  v146 = v27;
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958C8]), sel_init);
  if (!v28)
  {

    v45 = v146;
    goto LABEL_21;
  }
  v144 = v28;
  v145 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958F0]), sel_init);
  if (!v145)
  {

    v45 = v144;
    goto LABEL_21;
  }
  v143 = v3;
  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE958C0]), sel_init);
  if (!v29)
  {

    v45 = v145;
    goto LABEL_21;
  }
  v30 = v29;
  v140 = v152 >> 62;
  if (v152 >> 62)
  {
    swift_bridgeObjectRetain();
    v67 = _CocoaArrayWrapper.endIndex.getter();
    v32 = v153;
    if (v67)
    {
LABEL_8:
      v136 = v152 & 0xC000000000000001;
      v142 = v16;
      v141 = v30;
      v138 = v19;
      if ((v152 & 0xC000000000000001) != 0)
      {
        v33 = MEMORY[0x219A2756C](0, v152);
      }
      else
      {
        if (!*(_QWORD *)((v152 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_51;
        }
        v33 = *(_QWORD *)(v152 + 32);
        swift_retain();
      }
      v34 = swift_bridgeObjectRelease();
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v33 + 120))(&v157, v34);
      v35 = v145;
      v36 = (*(uint64_t (**)(id))(*(_QWORD *)v33 + 144))(objc_msgSend(v145, sel_setEventDonationTimeInSecondsSince2001_, *(double *)&v157));
      v37 = (void *)MEMORY[0x219A27218](v36);
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_setDomain_, v37);

      v38 = (*(uint64_t (**)(void))(*(_QWORD *)v33 + 168))();
      v39 = (void *)MEMORY[0x219A27218](v38);
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_setAction_, v39);

      v40 = *(uint64_t (**)(void))(*(_QWORD *)v33 + 216);
      v139 = v33;
      v41 = v40();
      if (*(_QWORD *)(v41 + 16)
        && (v42 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379),
            (v43 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v41 + 56) + 32 * v42, (uint64_t)&v157);
        swift_bridgeObjectRelease();
        v30 = v154;
        if (*((_QWORD *)&v158 + 1))
        {
          if (swift_dynamicCast())
            v44 = v155;
          else
            v44 = 2;
LABEL_27:
          v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 104))(v44);
          objc_msgSend(v145, sel_setIsDonatedBySiri_, v49);
          if (!(a2 >> 62))
          {
            v50 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v50)
            {
LABEL_29:
              if ((a2 & 0xC000000000000001) != 0)
              {
                v51 = MEMORY[0x219A2756C](0, a2);
              }
              else
              {
                if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
                  goto LABEL_99;
                }
                v51 = *(_QWORD *)(a2 + 32);
                swift_retain();
              }
              v52 = swift_bridgeObjectRelease();
              (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v51 + 120))(&v157, v52);
              v53 = (*(uint64_t (**)(id))(*(_QWORD *)v51 + 216))(objc_msgSend(v145, sel_setAppLaunchTimeInSecondsSince2001_, *(double *)&v157));
              if (*(_QWORD *)(v53 + 16)
                && (v54 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x8000000218FBEF40),
                    (v55 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v53 + 56) + 32 * v54, (uint64_t)&v157);
              }
              else
              {
                v157 = 0u;
                v158 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v158 + 1))
              {
                v56 = swift_dynamicCast();
                v57 = v155;
                if (!v56)
                  v57 = 0;
                v137 = v57;
                if (v56)
                  v58 = v156;
                else
                  v58 = 0;
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v157, &demangling cache variable for type metadata for Any?);
                v137 = 0;
                v58 = 0;
              }
              v59 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v30 + 224))();
              if (v59[2])
              {
                v60 = v59[5];
                v135 = v59[4];
                swift_bridgeObjectRetain();
              }
              else
              {
                v135 = 0;
                v60 = 0;
              }
              swift_bridgeObjectRelease();
              v61 = v143;
              v62 = (*(uint64_t (**)(uint64_t (*)(id), uint64_t, uint64_t, uint64_t))(*(_QWORD *)v143 + 120))(v137, v58, v135, v60);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v63 = v145;
              v64 = (*(uint64_t (**)(id))(*(_QWORD *)v51 + 168))(objc_msgSend(v145, sel_setAppFollowup_, v62));
              v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 136))(v64);
              swift_bridgeObjectRelease();
              objc_msgSend(v63, sel_setAppLaunchReason_, v65);
              v66 = (id)swift_release();
              v30 = v154;
LABEL_53:
              v137 = *(uint64_t (**)(id))(*(_QWORD *)v30 + 296);
              v68 = v137(v66);
              v69 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)v68 + 104))(v68);
              swift_release();
              objc_msgSend(v141, sel_setIsSiriResultUseful_, v69 == 3);
              if (v140)
              {
                swift_bridgeObjectRetain();
                v71 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (v71 < 2)
                  goto LABEL_76;
              }
              else if (*(uint64_t *)((v152 & 0xFFFFFFFFFFFFF8) + 0x10) < 2)
              {
                goto LABEL_76;
              }
              if (v136)
              {
                v72 = MEMORY[0x219A2756C](1, v152);
              }
              else
              {
                if (*(_QWORD *)((v152 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                {
                  __break(1u);
                  return;
                }
                v72 = *(_QWORD *)(v152 + 40);
                swift_retain();
              }
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v72 + 120))(&v157);
              swift_release();
              v70 = *((double *)&v157 + 1);
              if (*((double *)&v157 + 1) <= 30.0)
              {
                if (v136)
                {
                  v73 = MEMORY[0x219A2756C](1, v152, *((double *)&v157 + 1));
                }
                else
                {
                  v73 = *(_QWORD *)(v152 + 40);
                  swift_retain();
                }
                v74 = (*(uint64_t (**)(void))(*(_QWORD *)v73 + 216))();
                swift_release();
                if (*(_QWORD *)(v74 + 16))
                {
                  v75 = specialized __RawDictionaryStorage.find<A>(_:)(0x42646574616E6F64, 0xED00006972695379);
                  v63 = v145;
                  if ((v76 & 1) != 0)
                  {
                    outlined init with copy of Any(*(_QWORD *)(v74 + 56) + 32 * v75, (uint64_t)&v157);
                  }
                  else
                  {
                    v157 = 0u;
                    v158 = 0u;
                  }
                }
                else
                {
                  v157 = 0u;
                  v158 = 0u;
                  v63 = v145;
                }
                swift_bridgeObjectRelease();
                if (*((_QWORD *)&v158 + 1))
                {
                  if ((swift_dynamicCast() & 1) != 0 && (v155 & 1) == 0)
                  {
                    v77 = v141;
                    objc_msgSend(v63, sel_setHasUserInitiatedFollowup_, 1);
                    if (v136)
                    {
                      v78 = MEMORY[0x219A2756C](1, v152);
                    }
                    else
                    {
                      v78 = *(_QWORD *)(v152 + 40);
                      swift_retain();
                    }
                    v133 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v143 + 160))(v139, v78);
                    swift_release();
                    objc_msgSend(v77, sel_setFollowUpType_, v133, v134, v135);
LABEL_77:
                    v79 = v144;
                    objc_msgSend(v144, sel_setCommonSignal_, v63);
                    objc_msgSend(v79, sel_setAlarmSignal_, v141);
                    v80 = v151;
                    UUID.init()();
                    v81 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                    isa = UUID._bridgeToObjectiveC()().super.isa;
                    v83 = objc_msgSend(v81, sel_initWithNSUUID_, isa);

                    v84 = v150;
                    v85 = *(void (**)(char *, uint64_t))(v150 + 8);
                    v86 = v80;
                    v87 = v142;
                    v85(v86, v142);
                    objc_msgSend(v146, sel_setPseId_, v83);

                    (*(void (**)(void))(*(_QWORD *)v154 + 152))();
                    UUID.init(uuidString:)();
                    v88 = v84;
                    swift_bridgeObjectRelease();
                    v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
                    if (v89(v15, 1, v87) == 1)
                    {
                      v90 = outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
                    }
                    else
                    {
                      (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v24, v15, v87);
                      v91 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                      v92 = UUID._bridgeToObjectiveC()().super.isa;
                      v93 = objc_msgSend(v91, sel_initWithNSUUID_, v92);

                      objc_msgSend(v146, sel_setUiSessionId_, v93);
                      v90 = ((uint64_t (*)(char *, uint64_t))v85)(v24, v87);
                    }
                    v94 = v138;
                    v95 = v85;
                    v96 = v154;
                    v97 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 200))(v90) + 16);
                    v152 = (unint64_t)v95;
                    if (v97)
                    {
                      v98 = (uint64_t (*)(char *, uint64_t))v95;
                      v99 = v94;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRelease();
                      v100 = (uint64_t)v148;
                      UUID.init(uuidString:)();
                      swift_bridgeObjectRelease();
                      v101 = v142;
                      if (v89((char *)v100, 1, v142) != 1)
                      {
                        v106 = v147;
                        (*(void (**)(char *, uint64_t, uint64_t))(v150 + 32))(v147, v100, v101);
                        v107 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                        v108 = UUID._bridgeToObjectiveC()().super.isa;
                        v109 = objc_msgSend(v107, sel_initWithNSUUID_, v108);

                        objc_msgSend(v146, sel_setOriginalLastRequestId_, v109);
                        v105 = v98(v106, v101);
                        v94 = v99;
                        v96 = v154;
                        goto LABEL_88;
                      }
                      outlined destroy of Any?(v100, &demangling cache variable for type metadata for UUID?);
                      v94 = v99;
                      v96 = v154;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                    }
                    if (one-time initialization token for engagement != -1)
                      swift_once();
                    v102 = type metadata accessor for Logger();
                    __swift_project_value_buffer(v102, (uint64_t)static Logger.engagement);
                    v103 = *MEMORY[0x24BEA7F28];
                    v104 = type metadata accessor for EngagementSignalCollectionError();
                    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 104))(v8, v103, v104);
                    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA8030], v5);
                    Logger.debug(_:_:)(0xD000000000000027, 0x8000000218FBEF80, (uint64_t)v8);
                    v105 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_88:
                    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 176))(v105);
                    v110 = (uint64_t)v149;
                    UUID.init(uuidString:)();
                    swift_bridgeObjectRelease();
                    v111 = v142;
                    if (v89((char *)v110, 1, v142) != 1)
                    {
                      a2 = (unint64_t)&unk_253F31000;
                      (*(void (**)(char *, uint64_t, uint64_t))(v150 + 32))(v94, v110, v111);
                      v117 = objc_allocWithZone(MEMORY[0x24BE95C78]);
                      v118 = UUID._bridgeToObjectiveC()().super.isa;
                      v119 = objc_msgSend(v117, sel_initWithNSUUID_, v118);

                      v116 = v146;
                      objc_msgSend(v146, sel_setTaskId_, v119);

                      v115 = ((uint64_t (*)(char *, uint64_t))v152)(v94, v111);
                      goto LABEL_92;
                    }
                    outlined destroy of Any?(v110, &demangling cache variable for type metadata for UUID?);
                    a2 = (unint64_t)&unk_253F31000;
                    if (one-time initialization token for engagement == -1)
                    {
LABEL_90:
                      v112 = type metadata accessor for Logger();
                      __swift_project_value_buffer(v112, (uint64_t)static Logger.engagement);
                      v113 = *MEMORY[0x24BEA7F10];
                      v114 = type metadata accessor for EngagementSignalCollectionError();
                      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 104))(v8, v113, v114);
                      (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA8030], v5);
                      Logger.debug(_:_:)(0xD000000000000024, 0x8000000218FBEFB0, (uint64_t)v8);
                      v115 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                      v111 = v142;
                      v116 = v146;
LABEL_92:
                      v120 = v137((id)v115);
                      v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 104))(v120);
                      swift_release();
                      v122 = v143;
                      v123 = objc_msgSend(v116, sel_setSiriEngagementTaskSuccess_, (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 96))(v121));
                      objc_msgSend(v116, sel_setTriggerOrigin_, (*(uint64_t (**)(id))(*(_QWORD *)v122 + 112))(v123));
                      v124 = v153;
                      objc_msgSend(v153, sel_setEventMetadata_, v116);
                      v125 = v144;
                      objc_msgSend(v124, sel_setAlarmSignalGenerated_, v144);
                      if (*(_QWORD *)(a2 + 3664) != -1)
                        swift_once();
                      v126 = type metadata accessor for Logger();
                      __swift_project_value_buffer(v126, (uint64_t)static Logger.engagement);
                      v127 = *MEMORY[0x24BEA7F90];
                      v128 = type metadata accessor for SELFPSELogged();
                      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 104))(v8, v127, v128);
                      (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA7FE0], v5);
                      Logger.debug(_:_:)(0xD000000000000035, 0x8000000218FC1FB0, (uint64_t)v8);
                      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                      v129 = objc_msgSend((id)objc_opt_self(), sel_sharedAnalytics);
                      v130 = objc_msgSend(v129, sel_defaultMessageStream);

                      v131 = v151;
                      UUID.init()();
                      v132 = UUID._bridgeToObjectiveC()().super.isa;
                      ((void (*)(char *, uint64_t))v152)(v131, v111);
                      objc_msgSend(v130, sel_emitMessage_isolatedStreamUUID_, v124, v132);

                      swift_release();
                      return;
                    }
LABEL_99:
                    swift_once();
                    goto LABEL_90;
                  }
                }
                else
                {
                  outlined destroy of Any?((uint64_t)&v157, &demangling cache variable for type metadata for Any?);
                }
              }
LABEL_76:
              objc_msgSend(v63, sel_setHasUserInitiatedFollowup_, 0, v70, v135);
              goto LABEL_77;
            }
LABEL_52:
            swift_bridgeObjectRelease();
            v63 = v145;
            v66 = objc_msgSend(v145, sel_setAppFollowup_, 3);
            goto LABEL_53;
          }
LABEL_51:
          swift_bridgeObjectRetain();
          if (_CocoaArrayWrapper.endIndex.getter())
            goto LABEL_29;
          goto LABEL_52;
        }
      }
      else
      {
        v157 = 0u;
        v158 = 0u;
        swift_bridgeObjectRelease();
        v30 = v154;
      }
      outlined destroy of Any?((uint64_t)&v157, &demangling cache variable for type metadata for Any?);
      v44 = 2;
      goto LABEL_27;
    }
  }
  else
  {
    v31 = *(_QWORD *)((v152 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v32 = v153;
    if (v31)
      goto LABEL_8;
  }

  swift_bridgeObjectRelease();
LABEL_22:
  if (one-time initialization token for engagement != -1)
    swift_once();
  v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.engagement);
  v47 = *MEMORY[0x24BEA7EF8];
  v48 = type metadata accessor for EngagementSignalCollectionError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v8, v47, v48);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEA8030], v5);
  Logger.debug(_:_:)(0xD00000000000002ELL, 0x8000000218FC1F80, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PSEAlarmSELFEmitter.getPSEAlarmFollowupAction(siriAlarm:userAlarm:)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(void);
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;

  v4 = *(uint64_t (**)(void))(*(_QWORD *)a2 + 168);
  *(_QWORD *)&v40 = v4();
  *((_QWORD *)&v40 + 1) = v5;
  v42 = 0x657461647055;
  v43 = 0xE600000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v6 = StringProtocol.contains<A>(_:)();
  v7 = swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 216))(v7);
    if (*(_QWORD *)(v8 + 16)
      && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL), (v10 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v40);
    }
    else
    {
      v40 = 0u;
      v41 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v41 + 1))
    {
      v17 = swift_dynamicCast();
      if ((v17 & 1) == 0)
        return 2;
      v21 = v42;
      v20 = v43;
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(v17, v18, v19);
      if (*(_QWORD *)(v22 + 16)
        && (v23 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL),
            (v24 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v22 + 56) + 32 * v23, (uint64_t)&v40);
      }
      else
      {
        v40 = 0u;
        v41 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v41 + 1))
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v34 = HIBYTE(v43) & 0xF;
          if ((v43 & 0x2000000000000000) == 0)
            v34 = v42 & 0xFFFFFFFFFFFFLL;
          if (v34)
          {
            v35 = HIBYTE(v20) & 0xF;
            if ((v20 & 0x2000000000000000) == 0)
              v35 = v21 & 0xFFFFFFFFFFFFLL;
            if (v35)
            {
              if (v42 == v21 && v43 == v20)
              {
                swift_bridgeObjectRelease_n();
                return 1;
              }
              v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v38 & 1) != 0)
                return 1;
              return 2;
            }
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        return 2;
      }
      swift_bridgeObjectRelease();
    }
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    return 2;
  }
  *(_QWORD *)&v40 = ((uint64_t (*)(uint64_t))v4)(v7);
  *((_QWORD *)&v40 + 1) = v11;
  v42 = 0x6574656C6544;
  v43 = 0xE600000000000000;
  v12 = StringProtocol.contains<A>(_:)();
  v13 = swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
    return 0;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 216))(v13);
  if (*(_QWORD *)(v14 + 16)
    && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
    goto LABEL_53;
  v26 = swift_dynamicCast();
  if ((v26 & 1) == 0)
    return 4;
  v30 = v42;
  v29 = v43;
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(v26, v27, v28);
  if (*(_QWORD *)(v31 + 16)
    && (v32 = specialized __RawDictionaryStorage.find<A>(_:)(0x6564496D72616C61, 0xEF7265696669746ELL), (v33 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v32, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v41 + 1))
  {
    swift_bridgeObjectRelease();
LABEL_53:
    outlined destroy of Any?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    return 4;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v36 = HIBYTE(v43) & 0xF;
    if ((v43 & 0x2000000000000000) == 0)
      v36 = v42 & 0xFFFFFFFFFFFFLL;
    if (!v36)
      goto LABEL_57;
    v37 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0)
      v37 = v30 & 0xFFFFFFFFFFFFLL;
    if (v37)
    {
      if (v42 == v30 && v43 == v29)
      {
        swift_bridgeObjectRelease_n();
        return 3;
      }
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) != 0)
        return 3;
    }
    else
    {
LABEL_57:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 4;
}

uint64_t PSEAlarmSELFEmitter.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEAlarmSELFEmitter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PSEAlarmSELFEmitter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PSEAlarmSELFEmitter()
{
  return objc_opt_self();
}

uint64_t method lookup function for PSEAlarmSELFEmitter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PSEAlarmSELFEmitter.emitPSEAlarm(alarmSignals:appLaunchSignals:task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PSEAlarmSELFEmitter.getPSEAlarmFollowupAction(siriAlarm:userAlarm:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t static SiriTaskEngagementFeatureDonator.donate(siriTask:previousTask:taskFeatureSets:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return specialized static SiriTaskEngagementFeatureDonator.donate(siriTask:previousTask:taskFeatureSets:)(a1, a2, a3);
}

uint64_t SiriTaskEngagementFeatureDonator.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SiriTaskEngagementFeatureDonator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SiriTaskEngagementFeatureDonator.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SiriTaskEngagementFeatureDonator.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized static SiriTaskEngagementFeatureDonator.donate(siriTask:previousTask:taskFeatureSets:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  void *v35;
  Swift::Int v36;
  void *v37;
  _QWORD *v38;
  uint64_t (*v39)(Swift::Int);
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *);
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  Swift::String v70;
  Swift::String v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(void);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  void *v107;

  v101 = a2;
  v102 = a3;
  v4 = type metadata accessor for ReliabilityCategory();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger();
  v103 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v97 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for JSONEncodingOptions();
  v100 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v99 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ProtoTaskEngagementFeatureSet();
  v91 = *(_QWORD *)(v12 - 8);
  v92 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v89 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ProtoTaskFeatureSet();
  v94 = *(_QWORD *)(v14 - 8);
  v95 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v90 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v88 = (char *)&v82 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v93 = (char *)&v82 - v19;
  v20 = type metadata accessor for ProtoSiriTaskEvaluationSummary();
  MEMORY[0x24BDAC7A8](v20);
  v21 = type metadata accessor for ProtoTaskEngagementType();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for ProtoSiriTaskEngagement();
  MEMORY[0x24BDAC7A8](v104);
  v26 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v85 = v10;
    v87 = v24;
    v98 = v8;
    v96 = v7;
    type metadata accessor for PSEFeatureStoreManager();
    swift_retain();
    static PSEFeatureStoreManager.shared.getter();
    static PSEFeatureStoreStreamIdConstants.SiriTaskEngagementStreamId.getter();
    v27 = PSEFeatureStoreManager.getStream(streamId:)();
    swift_release();
    swift_bridgeObjectRelease();
    v86 = v27;
    if (v27)
    {
      v84 = v5;
      v82 = v4;
      v28 = ProtoSiriTaskEngagement.init()();
      v83 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 176);
      ((void (*)(uint64_t))v83)(v28);
      ProtoSiriTaskEngagement.taskID.setter();
      type metadata accessor for Utils();
      v29 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 248))();
      specialized static Utils.formulateIntentTypeName(intentTypeName:)(v29, v30);
      swift_bridgeObjectRelease();
      ProtoSiriTaskEngagement.taskName.setter();
      v31 = ProtoSiriTaskEngagement.taskName.getter();
      static Utils.deriveEngagmentType(from:)(v31, v32, (uint64_t)v23);
      swift_bridgeObjectRelease();
      ProtoSiriTaskEngagement.engagementType.setter();
      SiriExecutionTask.toProto()();
      ProtoSiriTaskEngagement.evaluationSummary.setter();
      ProtoSiriTaskEngagement.followupTimeWindowInMs.setter();
      if (v101)
      {
        v33 = *(void (**)(uint64_t))(*(_QWORD *)v101 + 176);
        v34 = swift_retain();
        v33(v34);
        ProtoSiriTaskEngagement.previousTaskID.setter();
        swift_release();
      }
      v105 = v102;
      swift_bridgeObjectRetain();
      v35 = v107;
      v36 = specialized MutableCollection<>.sort(by:)(&v105);
      if (v35)
      {
        result = swift_release();
        __break(1u);
        return result;
      }
      v37 = 0;
      v38 = v105;
      v39 = *(uint64_t (**)(Swift::Int))(*(_QWORD *)a1 + 296);
      v40 = v39(v36);
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 184))(v40);
      v42 = swift_release();
      v43 = v84;
      if ((v41 & 1) != 0
        || (v44 = v39(v42),
            v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 192))(v44),
            v46 = swift_release(),
            (v45 & 1) != 0)
        || (v47 = v39(v46),
            v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 240))(v47),
            swift_release(),
            (v48 & 1) != 0)
        || (v49 = v38[2]) == 0)
      {
        v60 = v100;
LABEL_21:
        v65 = v99;
        ProtoSiriTaskEngagement.followupUserInitatedEngagements.setter();
        JSONEncodingOptions.init()();
        lazy protocol witness table accessor for type ProtoSiriTaskEngagement and conformance ProtoSiriTaskEngagement();
        Message.jsonString(options:)();
        if (v37)
        {
          v66 = v43;

          (*(void (**)(char *, uint64_t))(v60 + 8))(v65, v85);
          if (one-time initialization token for engagement != -1)
            swift_once();
          v67 = v98;
          v68 = __swift_project_value_buffer(v98, (uint64_t)static Logger.engagement);
          v69 = v97;
          (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v97, v68, v67);
          v105 = 0;
          v106 = 0xE000000000000000;
          _StringGuts.grow(_:)(68);
          v70._countAndFlagsBits = 0xD000000000000042;
          v70._object = (void *)0x8000000218FC20E0;
          String.append(_:)(v70);
          v71._countAndFlagsBits = v83();
          String.append(_:)(v71);
          swift_bridgeObjectRelease();
          v72 = v105;
          v73 = v106;
          v74 = *MEMORY[0x24BEA7ED8];
          v75 = type metadata accessor for EngagementFeaturizationError();
          v76 = (uint64_t)v96;
          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 104))(v96, v74, v75);
          v77 = v82;
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v66 + 104))(v76, *MEMORY[0x24BEA8028], v82);
          Logger.error(_:_:)((uint64_t)v72, v73, v76);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v76, v77);
          (*(void (**)(char *, uint64_t))(v103 + 8))(v69, v98);
          return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v26, v104);
        }
        else
        {
          v81 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v65, v85);
          ((void (*)(uint64_t))v83)(v81);
          dispatch thunk of PSEFeatureStoreDonator.writeFeature(interactionId:jsonStr:)();
          (*(void (**)(char *, uint64_t))(v87 + 8))(v26, v104);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          return swift_bridgeObjectRelease();
        }
      }
      v107 = 0;
      v51 = v91;
      v50 = v92;
      v52 = *(void (**)(char *))(v91 + 16);
      v53 = v89;
      v102 = (_QWORD *)((char *)v38
                      + ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80)));
      v52(v89);
      v37 = v88;
      ProtoTaskEngagementFeatureSet.featureSet.getter();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
      v55 = v93;
      v54 = v94;
      v56 = v95;
      (*(void (**)(char *, void *, uint64_t))(v94 + 32))(v93, v37, v95);
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v90, v55, v56);
      ProtoSiriTaskEngagement.siriTaskFeatureSet.setter();
      if (v38[2] < v49)
      {
        __break(1u);
      }
      else
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v57 = swift_dynamicCastClass();
        if (!v57)
        {
          swift_release();
          v57 = MEMORY[0x24BEE4AF8];
        }
        v58 = *(_QWORD *)(v57 + 16);
        swift_release();
        v37 = v107;
        if (v58 == v49 - 1)
        {
          v59 = swift_dynamicCastClass();
          v60 = v100;
          if (!v59)
            swift_release();
          goto LABEL_16;
        }
      }
      swift_release();
      specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v38, (uint64_t)v102, 1, (2 * v49) | 1);
      v60 = v100;
LABEL_16:
      swift_release();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
      goto LABEL_21;
    }
    if (one-time initialization token for engagement != -1)
      swift_once();
    __swift_project_value_buffer(v98, (uint64_t)static Logger.engagement);
    v78 = *MEMORY[0x24BEA7EC8];
    v79 = type metadata accessor for EngagementFeaturizationError();
    v80 = (uint64_t)v96;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 104))(v96, v78, v79);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v80, *MEMORY[0x24BEA8028], v4);
    Logger.error(_:_:)(0xD00000000000003ELL, 0x8000000218FC20A0, v80);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v80, v4);
  }
  else
  {
    v61 = (uint64_t)v7;
    if (one-time initialization token for engagement != -1)
      swift_once();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.engagement);
    v62 = *MEMORY[0x24BEA7ED0];
    v63 = type metadata accessor for EngagementFeaturizationError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 104))(v61, v62, v63);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v61, *MEMORY[0x24BEA8028], v4);
    Logger.error(_:_:)(0xD00000000000003DLL, 0x8000000218FC2060, v61);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v61, v4);
  }
}

uint64_t type metadata accessor for SiriTaskEngagementFeatureDonator()
{
  return objc_opt_self();
}

uint64_t method lookup function for SiriTaskEngagementFeatureDonator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static SiriTaskEngagementFeatureDonator.donate(siriTask:previousTask:taskFeatureSets:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of SiriTaskEngagementFeatureDonator.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

unint64_t lazy protocol witness table accessor for type ProtoSiriTaskEngagement and conformance ProtoSiriTaskEngagement()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ProtoSiriTaskEngagement and conformance ProtoSiriTaskEngagement;
  if (!lazy protocol witness table cache variable for type ProtoSiriTaskEngagement and conformance ProtoSiriTaskEngagement)
  {
    v1 = type metadata accessor for ProtoSiriTaskEngagement();
    result = MEMORY[0x219A27BFC](MEMORY[0x24BEA7D58], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtoSiriTaskEngagement and conformance ProtoSiriTaskEngagement);
  }
  return result;
}

uint64_t static DateInterval._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCB828]();
}

uint64_t DateInterval.duration.getter()
{
  return MEMORY[0x24BDCB868]();
}

uint64_t type metadata accessor for DateInterval()
{
  return MEMORY[0x24BDCB878]();
}

uint64_t URLQueryItem.name.getter()
{
  return MEMORY[0x24BDCB960]();
}

uint64_t URLQueryItem.value.getter()
{
  return MEMORY[0x24BDCB980]();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return MEMORY[0x24BDCB988]();
}

uint64_t URLComponents.queryItems.getter()
{
  return MEMORY[0x24BDCBA58]();
}

uint64_t URLComponents.init(string:)()
{
  return MEMORY[0x24BDCBB30]();
}

uint64_t type metadata accessor for URLComponents()
{
  return MEMORY[0x24BDCBB78]();
}

uint64_t PersonNameComponents.givenName.getter()
{
  return MEMORY[0x24BDCCB20]();
}

uint64_t PersonNameComponents.familyName.getter()
{
  return MEMORY[0x24BDCCB30]();
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCCBD0]();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return MEMORY[0x24BDCCC10]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return MEMORY[0x24BDCDE78]();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x24BDCDE90]();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return MEMORY[0x24BDCE468]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x24BDCE5D8]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x24BDCE5E8]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x24BDCE5F0]();
}

uint64_t Date.init(timeIntervalSinceNow:)()
{
  return MEMORY[0x24BDCE610]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t Date.init()()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t UUID.init(uuidString:)()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x24BDCE9D0]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t Locale.init(identifier:)()
{
  return MEMORY[0x24BDCEB18]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t static Calendar.current.getter()
{
  return MEMORY[0x24BDCF1B0]();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t Calendar.component(_:from:)()
{
  return MEMORY[0x24BDCF2D0]();
}

uint64_t type metadata accessor for Calendar()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t ProtoAlarmTaskFeatureSet.alarmIdentifier.setter()
{
  return MEMORY[0x24BEA7A98]();
}

uint64_t ProtoAlarmTaskFeatureSet.init()()
{
  return MEMORY[0x24BEA7AA0]();
}

uint64_t type metadata accessor for ProtoAlarmTaskFeatureSet()
{
  return MEMORY[0x24BEA7AA8]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.actionState.getter()
{
  return MEMORY[0x24BEA7AD8]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.actionState.setter()
{
  return MEMORY[0x24BEA7AE0]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.appBundleID.setter()
{
  return MEMORY[0x24BEA7AE8]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.mediaEntity.modify()
{
  return MEMORY[0x24BEA7AF0]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.mediaEntity.getter()
{
  return MEMORY[0x24BEA7AF8]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.playDurationInSec.getter()
{
  return MEMORY[0x24BEA7B00]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.playDurationInSec.setter()
{
  return MEMORY[0x24BEA7B08]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.mediaContentLengthInSec.setter()
{
  return MEMORY[0x24BEA7B10]();
}

uint64_t ProtoPlayMediaTaskFeatureSet.init()()
{
  return MEMORY[0x24BEA7B18]();
}

uint64_t type metadata accessor for ProtoPlayMediaTaskFeatureSet()
{
  return MEMORY[0x24BEA7B20]();
}

uint64_t ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.getter()
{
  return MEMORY[0x24BEA7B38]();
}

uint64_t ProtoNavigationTaskFeatureSet.isSiriNavigationContinued.setter()
{
  return MEMORY[0x24BEA7B40]();
}

uint64_t ProtoNavigationTaskFeatureSet.isUserFollowup.getter()
{
  return MEMORY[0x24BEA7B48]();
}

uint64_t ProtoNavigationTaskFeatureSet.isUserFollowup.setter()
{
  return MEMORY[0x24BEA7B50]();
}

uint64_t ProtoNavigationTaskFeatureSet.followupContext.getter()
{
  return MEMORY[0x24BEA7B58]();
}

uint64_t ProtoNavigationTaskFeatureSet.followupContext.setter()
{
  return MEMORY[0x24BEA7B60]();
}

uint64_t ProtoNavigationTaskFeatureSet.init()()
{
  return MEMORY[0x24BEA7B68]();
}

uint64_t type metadata accessor for ProtoNavigationTaskFeatureSet()
{
  return MEMORY[0x24BEA7B70]();
}

uint64_t ProtoTaskFeatureSet.navigationFeatureSet.modify()
{
  return MEMORY[0x24BEA7B80]();
}

uint64_t ProtoTaskFeatureSet.navigationFeatureSet.getter()
{
  return MEMORY[0x24BEA7B88]();
}

uint64_t ProtoTaskFeatureSet.navigationFeatureSet.setter()
{
  return MEMORY[0x24BEA7B90]();
}

uint64_t ProtoTaskFeatureSet.alarmFeatureSet.setter()
{
  return MEMORY[0x24BEA7BA0]();
}

uint64_t ProtoTaskFeatureSet.playMediaFeatureSet.modify()
{
  return MEMORY[0x24BEA7BB0]();
}

uint64_t ProtoTaskFeatureSet.playMediaFeatureSet.getter()
{
  return MEMORY[0x24BEA7BB8]();
}

uint64_t ProtoTaskFeatureSet.playMediaFeatureSet.setter()
{
  return MEMORY[0x24BEA7BC0]();
}

uint64_t ProtoTaskFeatureSet.init()()
{
  return MEMORY[0x24BEA7BD0]();
}

uint64_t type metadata accessor for ProtoTaskFeatureSet()
{
  return MEMORY[0x24BEA7BD8]();
}

uint64_t type metadata accessor for ProtoSiriTaskSuccessType()
{
  return MEMORY[0x24BEA7C10]();
}

uint64_t type metadata accessor for ProtoSiriTaskCompletionType()
{
  return MEMORY[0x24BEA7C48]();
}

uint64_t ProtoSiriTaskInteractionType.includesPrompt.setter()
{
  return MEMORY[0x24BEA7C60]();
}

uint64_t ProtoSiriTaskInteractionType.includesConfirm.setter()
{
  return MEMORY[0x24BEA7C70]();
}

uint64_t ProtoSiriTaskInteractionType.includesDisambiguate.setter()
{
  return MEMORY[0x24BEA7C80]();
}

uint64_t ProtoSiriTaskInteractionType.includesUnsupportedPrompt.setter()
{
  return MEMORY[0x24BEA7C88]();
}

uint64_t ProtoSiriTaskInteractionType.init()()
{
  return MEMORY[0x24BEA7C90]();
}

uint64_t type metadata accessor for ProtoSiriTaskInteractionType()
{
  return MEMORY[0x24BEA7C98]();
}

uint64_t ProtoSiriTaskEvaluationSummary.requestIds.setter()
{
  return MEMORY[0x24BEA7CA8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.taskSuccess.setter()
{
  return MEMORY[0x24BEA7CB8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.endTimestampMs.setter()
{
  return MEMORY[0x24BEA7CC8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.taskCompletion.setter()
{
  return MEMORY[0x24BEA7CD8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.interactionType.setter()
{
  return MEMORY[0x24BEA7CE8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.startTimestampMs.setter()
{
  return MEMORY[0x24BEA7CF8]();
}

uint64_t ProtoSiriTaskEvaluationSummary.init()()
{
  return MEMORY[0x24BEA7D00]();
}

uint64_t type metadata accessor for ProtoSiriTaskEvaluationSummary()
{
  return MEMORY[0x24BEA7D08]();
}

uint64_t ProtoSiriTaskEngagement.siriTaskFeatureSet.getter()
{
  return MEMORY[0x24BEA7D18]();
}

uint64_t ProtoSiriTaskEngagement.siriTaskFeatureSet.setter()
{
  return MEMORY[0x24BEA7D20]();
}

uint64_t ProtoSiriTaskEngagement.previousTaskID.setter()
{
  return MEMORY[0x24BEA7D30]();
}

uint64_t ProtoSiriTaskEngagement.engagementType.getter()
{
  return MEMORY[0x24BEA7D38]();
}

uint64_t ProtoSiriTaskEngagement.engagementType.setter()
{
  return MEMORY[0x24BEA7D40]();
}

uint64_t ProtoSiriTaskEngagement.evaluationSummary.setter()
{
  return MEMORY[0x24BEA7D50]();
}

uint64_t ProtoSiriTaskEngagement.followupTimeWindowInMs.setter()
{
  return MEMORY[0x24BEA7D60]();
}

uint64_t ProtoSiriTaskEngagement.followupUserInitatedEngagements.getter()
{
  return MEMORY[0x24BEA7D68]();
}

uint64_t ProtoSiriTaskEngagement.followupUserInitatedEngagements.setter()
{
  return MEMORY[0x24BEA7D70]();
}

uint64_t ProtoSiriTaskEngagement.taskID.setter()
{
  return MEMORY[0x24BEA7D80]();
}

uint64_t ProtoSiriTaskEngagement.taskName.getter()
{
  return MEMORY[0x24BEA7D88]();
}

uint64_t ProtoSiriTaskEngagement.taskName.setter()
{
  return MEMORY[0x24BEA7D90]();
}

uint64_t ProtoSiriTaskEngagement.init()()
{
  return MEMORY[0x24BEA7D98]();
}

uint64_t type metadata accessor for ProtoSiriTaskEngagement()
{
  return MEMORY[0x24BEA7DA0]();
}

uint64_t ProtoTaskEngagementFeatureSet.featureSet.modify()
{
  return MEMORY[0x24BEA7DB0]();
}

uint64_t ProtoTaskEngagementFeatureSet.featureSet.getter()
{
  return MEMORY[0x24BEA7DB8]();
}

uint64_t ProtoTaskEngagementFeatureSet.featureSet.setter()
{
  return MEMORY[0x24BEA7DC0]();
}

uint64_t ProtoTaskEngagementFeatureSet.engagementType.setter()
{
  return MEMORY[0x24BEA7DC8]();
}

uint64_t ProtoTaskEngagementFeatureSet.startTimestampMs.getter()
{
  return MEMORY[0x24BEA7DD0]();
}

uint64_t ProtoTaskEngagementFeatureSet.startTimestampMs.setter()
{
  return MEMORY[0x24BEA7DD8]();
}

uint64_t ProtoTaskEngagementFeatureSet.init()()
{
  return MEMORY[0x24BEA7DE0]();
}

uint64_t type metadata accessor for ProtoTaskEngagementFeatureSet()
{
  return MEMORY[0x24BEA7DE8]();
}

uint64_t type metadata accessor for ProtoTaskEngagementType()
{
  return MEMORY[0x24BEA7E60]();
}

uint64_t type metadata accessor for SiriUIEventDataIssues()
{
  return MEMORY[0x24BEA7EA0]();
}

uint64_t type metadata accessor for SiriExecutionEventDataIssues()
{
  return MEMORY[0x24BEA7EB8]();
}

uint64_t type metadata accessor for EngagementFeaturizationError()
{
  return MEMORY[0x24BEA7EE0]();
}

uint64_t type metadata accessor for EngagementSignalCollectionError()
{
  return MEMORY[0x24BEA7F38]();
}

uint64_t dispatch thunk of static SiriTaskEngagementUtils.convertDateTimeToUInt64(date:)()
{
  return MEMORY[0x24BEA7F40]();
}

uint64_t dispatch thunk of static SiriTaskEngagementUtils.formulateSimplifiedReliabilityReasonDescription(reliabilityDescription:)()
{
  return MEMORY[0x24BEA7F48]();
}

uint64_t type metadata accessor for SiriTaskEngagementUtils()
{
  return MEMORY[0x24BEA7F50]();
}

uint64_t static SiriTaskEngagementRetriever.retrieveAllSiriTaskEngagement(streamId:)()
{
  return MEMORY[0x24BEA7F58]();
}

uint64_t type metadata accessor for EncodingError()
{
  return MEMORY[0x24BEA7F78]();
}

uint64_t type metadata accessor for SELFPSELogged()
{
  return MEMORY[0x24BEA7FB8]();
}

uint64_t type metadata accessor for MapsEventDataIssues()
{
  return MEMORY[0x24BEA7FD0]();
}

uint64_t type metadata accessor for ReliabilityCategory()
{
  return MEMORY[0x24BEA8040]();
}

uint64_t type metadata accessor for AlarmEventDataIssues()
{
  return MEMORY[0x24BEA8050]();
}

uint64_t static CoreAnalyticsService.submitReliabilityAnalytics(category:reason:)()
{
  return MEMORY[0x24BEA8058]();
}

uint64_t dispatch thunk of PSEFeatureStoreDonator.writeFeature(interactionId:jsonStr:)()
{
  return MEMORY[0x24BEA8060]();
}

uint64_t static PSEFeatureStoreManager.shared.getter()
{
  return MEMORY[0x24BEA8068]();
}

uint64_t PSEFeatureStoreManager.getStream(streamId:)()
{
  return MEMORY[0x24BEA8070]();
}

uint64_t type metadata accessor for PSEFeatureStoreManager()
{
  return MEMORY[0x24BEA8078]();
}

uint64_t ProtoMediaEntitySignal.adamIdentifier.getter()
{
  return MEMORY[0x24BEA8080]();
}

uint64_t ProtoMediaEntitySignal.adamIdentifier.setter()
{
  return MEMORY[0x24BEA8088]();
}

uint64_t ProtoMediaEntitySignal.album.getter()
{
  return MEMORY[0x24BEA8090]();
}

uint64_t ProtoMediaEntitySignal.album.setter()
{
  return MEMORY[0x24BEA8098]();
}

uint64_t ProtoMediaEntitySignal.title.getter()
{
  return MEMORY[0x24BEA80A0]();
}

uint64_t ProtoMediaEntitySignal.title.setter()
{
  return MEMORY[0x24BEA80A8]();
}

uint64_t ProtoMediaEntitySignal.artist.getter()
{
  return MEMORY[0x24BEA80B0]();
}

uint64_t ProtoMediaEntitySignal.artist.setter()
{
  return MEMORY[0x24BEA80B8]();
}

uint64_t type metadata accessor for ProtoMediaEntitySignal()
{
  return MEMORY[0x24BEA80C0]();
}

uint64_t ProtoNavigationFeatures.timestampInMs.getter()
{
  return MEMORY[0x24BEA80D0]();
}

uint64_t ProtoNavigationFeatures.timestampInMs.setter()
{
  return MEMORY[0x24BEA80D8]();
}

uint64_t ProtoNavigationFeatures.navigationType.getter()
{
  return MEMORY[0x24BEA80E0]();
}

uint64_t ProtoNavigationFeatures.navigationType.setter()
{
  return MEMORY[0x24BEA80E8]();
}

uint64_t ProtoNavigationFeatures.navigationAction.getter()
{
  return MEMORY[0x24BEA80F0]();
}

uint64_t ProtoNavigationFeatures.navigationAction.setter()
{
  return MEMORY[0x24BEA80F8]();
}

uint64_t ProtoNavigationFeatures.navigationSource.getter()
{
  return MEMORY[0x24BEA8100]();
}

uint64_t ProtoNavigationFeatures.navigationSource.setter()
{
  return MEMORY[0x24BEA8108]();
}

uint64_t ProtoNavigationFeatures.navigationActionType.getter()
{
  return MEMORY[0x24BEA8110]();
}

uint64_t ProtoNavigationFeatures.navigationActionType.setter()
{
  return MEMORY[0x24BEA8118]();
}

uint64_t ProtoNavigationFeatures.init()()
{
  return MEMORY[0x24BEA8120]();
}

uint64_t type metadata accessor for ProtoNavigationFeatures()
{
  return MEMORY[0x24BEA8128]();
}

uint64_t type metadata accessor for AppIntentEventDataIssues()
{
  return MEMORY[0x24BEA8148]();
}

uint64_t type metadata accessor for AppLaunchEventDataIssues()
{
  return MEMORY[0x24BEA8158]();
}

uint64_t ProtoContactEntitySignal.familyName.getter()
{
  return MEMORY[0x24BEA8160]();
}

uint64_t ProtoContactEntitySignal.givenName.getter()
{
  return MEMORY[0x24BEA8168]();
}

uint64_t type metadata accessor for ProtoContactEntitySignal()
{
  return MEMORY[0x24BEA8170]();
}

uint64_t type metadata accessor for NowPlayingEventDataIssues()
{
  return MEMORY[0x24BEA8198]();
}

uint64_t ProtoLocationEntitySignal.poiIdentifier.setter()
{
  return MEMORY[0x24BEA81A0]();
}

uint64_t ProtoLocationEntitySignal.init()()
{
  return MEMORY[0x24BEA81A8]();
}

uint64_t type metadata accessor for ProtoLocationEntitySignal()
{
  return MEMORY[0x24BEA81B0]();
}

uint64_t type metadata accessor for TranscriptEventDataIssues()
{
  return MEMORY[0x24BEA81E8]();
}

uint64_t ProtoNavigationFollowupType.init()()
{
  return MEMORY[0x24BEA8200]();
}

uint64_t type metadata accessor for ProtoNavigationFollowupType()
{
  return MEMORY[0x24BEA8208]();
}

uint64_t static PSEFeatureStoreStreamIdConstants.SiriTaskEngagementStreamId.getter()
{
  return MEMORY[0x24BEA8220]();
}

uint64_t ProtoNavigationUserFollowupContext.followupType.getter()
{
  return MEMORY[0x24BEA8228]();
}

uint64_t ProtoNavigationUserFollowupContext.followupType.setter()
{
  return MEMORY[0x24BEA8230]();
}

uint64_t ProtoNavigationUserFollowupContext.timestampInMs.setter()
{
  return MEMORY[0x24BEA8238]();
}

uint64_t ProtoNavigationUserFollowupContext.locationEntity.setter()
{
  return MEMORY[0x24BEA8240]();
}

uint64_t ProtoNavigationUserFollowupContext.navigationAction.setter()
{
  return MEMORY[0x24BEA8248]();
}

uint64_t ProtoNavigationUserFollowupContext.navigationActionType.setter()
{
  return MEMORY[0x24BEA8250]();
}

uint64_t ProtoNavigationUserFollowupContext.init()()
{
  return MEMORY[0x24BEA8258]();
}

uint64_t type metadata accessor for ProtoNavigationUserFollowupContext()
{
  return MEMORY[0x24BEA8260]();
}

uint64_t type metadata accessor for HomeKitClientAccessoryControlEventDataIssues()
{
  return MEMORY[0x24BEA8270]();
}

uint64_t JSONEncodingOptions.init()()
{
  return MEMORY[0x24BE5BFA8]();
}

uint64_t type metadata accessor for JSONEncodingOptions()
{
  return MEMORY[0x24BE5BFB0]();
}

uint64_t Message.jsonString(options:)()
{
  return MEMORY[0x24BE5C188]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x24BEE78E8]();
}

uint64_t PhoneticEmbedder.embeddings(of:completion:)()
{
  return MEMORY[0x24BDE9D68]();
}

uint64_t type metadata accessor for PhoneticEmbedder.InputFormat()
{
  return MEMORY[0x24BDE9D78]();
}

uint64_t type metadata accessor for PhoneticEmbedder.LoadingOption()
{
  return MEMORY[0x24BDE9D88]();
}

uint64_t PhoneticEmbedder.init(locale:clientID:inputFormat:loadingOption:)()
{
  return MEMORY[0x24BDE9D98]();
}

uint64_t type metadata accessor for PhoneticEmbedder()
{
  return MEMORY[0x24BDE9DB0]();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return MEMORY[0x24BEE5450]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return MEMORY[0x24BEE54B0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t Character.isSymbol.getter()
{
  return MEMORY[0x24BEE0700]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t String.init<A>(bytes:encoding:)()
{
  return MEMORY[0x24BDCFA50]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A08]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BB8](a1._countAndFlagsBits, a1._object);
}

{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x24BEE0C00]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CC8](a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CD0](a1._countAndFlagsBits, a1._object);
}

uint64_t Sequence.filter(_:)()
{
  return MEMORY[0x24BEE0EA0]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x24BEE1140]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x24BEE11A0]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x24BEE11C8]();
}

Swift::Int __swiftcall Array._getCount()()
{
  return MEMORY[0x24BEE1228]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC08]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x24BEE6828]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC58]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t Set.insert(_:)()
{
  return MEMORY[0x24BEE1648]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x24BEE16D8]();
}

uint64_t INInteraction.extractFeatures()()
{
  return MEMORY[0x24BEA8278]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return MEMORY[0x24BEE5660]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return MEMORY[0x24BEE57B0]();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return MEMORY[0x24BDD0170]();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x24BDD01F8](integerLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x24BEE79A0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t type metadata accessor for _SetStorage()
{
  return MEMORY[0x24BEE24D8]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2648](a1);
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2650]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x24BEE3070]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

{
  return MEMORY[0x24BEE3438]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34A8]();
}

{
  return MEMORY[0x24BEE34B0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE3540]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  MEMORY[0x24BEE4310](*(_QWORD *)&a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x24BE0C258]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x24BEDCE10]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x24BEDCE18]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x24BEE4C28]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x24BEE4C68]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x24BEE4C70]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

