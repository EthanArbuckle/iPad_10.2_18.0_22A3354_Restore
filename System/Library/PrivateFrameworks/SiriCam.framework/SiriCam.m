uint64_t one-time initialization function for defaultModelMetadata()
{
  uint64_t inited;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2E93F60;
  *(_QWORD *)(inited + 32) = 0xD000000000000025;
  *(_QWORD *)(inited + 40) = 0x80000001C2E997D0;
  *(_QWORD *)(inited + 48) = OUTLINED_FUNCTION_0();
  *(_QWORD *)(inited + 56) = 0xD000000000000029;
  *(_QWORD *)(inited + 64) = 0x80000001C2E99760;
  *(_QWORD *)(inited + 72) = OUTLINED_FUNCTION_0();
  *(_QWORD *)(inited + 80) = 0xD000000000000031;
  *(_QWORD *)(inited + 88) = 0x80000001C2E99790;
  *(_QWORD *)(inited + 96) = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  result = Dictionary.init(dictionaryLiteral:)();
  static AssetMetadataProvider.defaultModelMetadata = result;
  return result;
}

uint64_t static AssetMetadataProvider.parseAssetMetadata(modelName:metadata:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = type metadata accessor for CamModelMetadata();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v33 - v15;
  if (*(_QWORD *)(a3 + 16))
  {
    LOBYTE(v17) = static AssetMetadataProvider.getShadowLogField(for:using:)(a1, a2, a3);
    LODWORD(v34) = v17;
    static AssetMetadataProvider.getLocale(from:)(a3, (uint64_t)v16);
    v18 = static AssetMetadataProvider.getModelVersion(for:using:)(a1, a2, a3);
    v20 = v19;
    v22 = v21;
    v33 = (uint8_t *)a4;
    v24 = v23;
    outlined init with copy of Locale?((uint64_t)v16, (uint64_t)v14);
    v25 = (uint64_t)&v10[*(int *)(v8 + 28)];
    v26 = type metadata accessor for Locale();
    __swift_storeEnumTagSinglePayload(v25, 1, 1, v26);
    *(_QWORD *)v10 = a1;
    *((_QWORD *)v10 + 1) = a2;
    *((_QWORD *)v10 + 2) = v18;
    *((_QWORD *)v10 + 3) = v20;
    *((_QWORD *)v10 + 4) = v22;
    *((_QWORD *)v10 + 5) = v24;
    v10[48] = v34;
    OUTLINED_FUNCTION_2();
    outlined assign with take of Locale?((uint64_t)v14, v25);
    outlined init with take of CamModelMetadata((uint64_t)v10, (uint64_t)v33);
    return outlined destroy of Locale?((uint64_t)v16);
  }
  else
  {
    if (one-time initialization token for common != -1)
      swift_once();
    v34 = v8;
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.common);
    swift_bridgeObjectRetain_n();
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      *(_DWORD *)v31 = 136315138;
      v33 = v31 + 4;
      OUTLINED_FUNCTION_2();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2E0C000, v29, v30, "%s: Model metadata is empty. Setting modelname alone", v31, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    swift_bridgeObjectRelease_n();
    type metadata accessor for Locale();
    OUTLINED_FUNCTION_1((uint64_t)v16);
    v32 = (uint64_t)&v10[*(int *)(v34 + 28)];
    OUTLINED_FUNCTION_1(v32);
    *(_QWORD *)v10 = a1;
    *((_QWORD *)v10 + 1) = a2;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 3) = 0;
    *((_QWORD *)v10 + 4) = 0;
    *((_QWORD *)v10 + 5) = 1;
    v10[48] = 2;
    OUTLINED_FUNCTION_2();
    outlined assign with take of Locale?((uint64_t)v16, v32);
    return outlined init with take of CamModelMetadata((uint64_t)v10, a4);
  }
}

Swift::Bool_optional static AssetMetadataProvider.getShadowLogField(for:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;

  if (*(_QWORD *)(a3 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(0x6F4C776F64616873, 0xE900000000000067);
    if ((v5 & 1) != 0)
    {
      swift_bridgeObjectRetain();
LABEL_9:
      v12 = String.lowercased()();
      swift_bridgeObjectRelease();
      return Bool.init(_:)(v12);
    }
  }
  if (one-time initialization token for defaultModelMetadata != -1)
    swift_once();
  v6 = static AssetMetadataProvider.defaultModelMetadata;
  if (*(_QWORD *)(static AssetMetadataProvider.defaultModelMetadata + 16))
  {
    swift_bridgeObjectRetain();
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      specialized Dictionary.subscript.getter(0x6F4C776F64616873, 0xE900000000000067, v9);
      v11 = v10;
      swift_bridgeObjectRelease();
      if (v11)
        goto LABEL_9;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return (Swift::Bool_optional)2;
}

uint64_t static AssetMetadataProvider.getLocale(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD v17[6];

  v4 = type metadata accessor for Locale();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = specialized Dictionary.subscript.getter(0x656C61636F6CLL, 0xE600000000000000, a1);
  if (v9)
  {
    v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v10 = v8 & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      Locale.init(identifier:)();
      v17[4] = Locale.identifier.getter();
      v17[5] = v11;
      v17[2] = 45;
      v17[3] = 0xE100000000000000;
      v17[0] = 95;
      v17[1] = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      swift_bridgeObjectRelease();
      Locale.init(identifier:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return __swift_storeEnumTagSinglePayload(a2, 0, 1, v4);
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for common != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.common);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C2E0C000, v14, v15, "Locale not present in asset metadata", v16, 2u);
    MEMORY[0x1C3BCB4A4](v16, -1, -1);
  }

  return __swift_storeEnumTagSinglePayload(a2, 1, 1, v4);
}

uint64_t static AssetMetadataProvider.getModelVersion(for:using:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  specialized Dictionary.subscript.getter(0x6E6F6973726576, 0xE700000000000000, a3);
  if (v5)
  {
    swift_bridgeObjectRetain();
    CamModelVersion.init(_:)();
    v15 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for common != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.common);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v17 = v10;
      *(_DWORD *)v9 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      v11 = Dictionary.description.getter();
      v13 = v12;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2E0C000, v7, v8, "%s: Version information not present in UAF asset metadata : %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v10, -1, -1);
      MEMORY[0x1C3BCB4A4](v9, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  return v15;
}

uint64_t AssetMetadataProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AssetMetadataProvider()
{
  return objc_opt_self();
}

void type metadata accessor for RepetitionType(uint64_t a1)
{
  type metadata accessor for RepetitionType(a1, &lazy cache variable for type metadata for RepetitionType);
}

void type metadata accessor for MLMultiArrayDataType(uint64_t a1)
{
  type metadata accessor for RepetitionType(a1, &lazy cache variable for type metadata for MLMultiArrayDataType);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLMultiArrayDataType(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSJSONWritingOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized OptionSet<>.init()();
  *a1 = result;
  return result;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance MLMultiArrayDataType(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  MLMultiArrayDataType.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLMultiArrayDataType@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = destructiveProjectEnumData for FeatureDictionaryError(*v1);
  *a1 = result;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3BCB3CC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t outlined init with copy of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t outlined assign with take of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CamModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CamModelMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance NSJSONWritingOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEA980], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEFF48], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void type metadata accessor for CAMSchemaCAMAction(uint64_t a1)
{
  type metadata accessor for RepetitionType(a1, &lazy cache variable for type metadata for CAMSchemaCAMAction);
}

void type metadata accessor for CAMSchemaCAMFeature(uint64_t a1)
{
  type metadata accessor for RepetitionType(a1, &lazy cache variable for type metadata for CAMSchemaCAMFeature);
}

void type metadata accessor for RepetitionType(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t OUTLINED_FUNCTION_0()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_2()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_3()
{
  JUMPOUT(0x1C3BCB4A4);
}

_QWORD *initializeBufferWithCopyOfBuffer for CamInputFeatureExtractor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for CamInputFeatureExtractor()
{
  return swift_release();
}

_QWORD *assignWithCopy for CamInputFeatureExtractor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for CamInputFeatureExtractor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CamInputFeatureExtractor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CamInputFeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CamInputFeatureExtractor()
{
  return &type metadata for CamInputFeatureExtractor;
}

uint64_t static CamInputFeatureExtractor.extractedFeatures.getter()
{
  uint64_t v0;

  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  v0 = static ConstantStepFeatureExtractor.extractedFeatures;
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  return v0;
}

id CamInputFeatureExtractor.extractImpl(from:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id result;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28[3];
  uint64_t v29;

  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.ambiguityHandling);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1C2E0C000, v6, v7, "Extracting CAM features", v8, 2u);
    OUTLINED_FUNCTION_3();
  }

  type metadata accessor for MLMultiArray();
  v29 = Dictionary.init(dictionaryLiteral:)();
  v9 = specialized FeatureExtracting.extract(from:)(a2);
  if (v2)
    return (id)swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_0(v9);
  swift_bridgeObjectRelease();
  v11 = *(void **)(a1 + *(int *)(type metadata accessor for CamInput() + 32));
  if (!v11)
    goto LABEL_15;
  v12 = v11;
  v13 = objc_msgSend(v12, sel_recognition);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v12, sel_audioAnalytics);
    if (v15)
    {
      v16 = v15;
      v17 = specialized FeatureExtracting.extract(from:)((uint64_t)v15);
      OUTLINED_FUNCTION_0_0(v17);
      OUTLINED_FUNCTION_2_0();
      result = objc_msgSend(v14, sel_aceRecognition);
      if (result)
      {
        v24 = result;
        v25 = specialized FeatureExtracting.extract(from:)((uint64_t)result);

        OUTLINED_FUNCTION_0_0(v25);
        OUTLINED_FUNCTION_2_0();
        swift_retain();
        result = objc_msgSend(v14, sel_aceRecognition);
        if (result)
        {
          v26 = result;
          v27 = specialized FeatureExtracting.extract(from:)();
          swift_release();

          OUTLINED_FUNCTION_0_0(v27);
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }

  }
  else
  {
    v14 = v12;
  }

LABEL_15:
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)OUTLINED_FUNCTION_4();
    v28[0] = OUTLINED_FUNCTION_4();
    *(_DWORD *)v20 = 136315138;
    OUTLINED_FUNCTION_3_0();
    swift_bridgeObjectRetain();
    v21 = Dictionary.Keys.description.getter();
    v23 = v22;
    OUTLINED_FUNCTION_2_0();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2E0C000, v18, v19, "Extracted CAM features: %s", v20, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_3_0();
  return (id)v29;
}

id protocol witness for FeatureExtracting.extractImpl(from:) in conformance CamInputFeatureExtractor(uint64_t a1)
{
  double *v1;

  return CamInputFeatureExtractor.extractImpl(from:)(a1, *v1);
}

unint64_t type metadata accessor for MLMultiArray()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MLMultiArray;
  if (!lazy cache variable for type metadata for MLMultiArray)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_0(uint64_t a1)
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, 0);
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_4()
{
  return swift_slowAlloc();
}

uint64_t *LatticePathFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static LatticePathFeatureExtractor.extractedFeatures;
}

void one-time initialization function for extractedFeatures()
{
  static LatticePathFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static UserParseFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static PommesFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static WordEmbeddingFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static RankedActionFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static AsrSimpleFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static ConstantStepFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  if (one-time initialization token for CLIENT_TIME_RANGE != -1)
    swift_once();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  static PersonalContextFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static SnrFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static DeviceContextFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

uint64_t LatticePathFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  return LatticePathFeatureExtractor.getLatticePathFeatures(from:)(a1);
}

uint64_t LatticePathFeatureExtractor.getLatticePathFeatures(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  uint64_t inited;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;

  v5 = v1;
  v6 = (void *)a1;
  OUTLINED_FUNCTION_29(a1, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  v73 = OUTLINED_FUNCTION_14();
  v7 = outlined bridged method (pb) of @objc SASRecognition.utterances.getter(v6);
  if (!v7)
    goto LABEL_50;
  v8 = v7;
  outlined bridged method (pb) of @objc SASUtterance.interpretationIndices.getter(v6, (SEL *)&selRef_phrases);
  v70 = v9;
  if (!v9)
  {
    OUTLINED_FUNCTION_1_0();
LABEL_50:
    swift_bridgeObjectRelease();
    if (one-time initialization token for common != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.common);
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v52 = 0;
      _os_log_impl(&dword_1C2E0C000, v50, v51, "LatticePathFeature Extractor failed due to empty SASRecognition", v52, 2u);
      MEMORY[0x1C3BCB4A4](v52, -1, -1);
    }

    lazy protocol witness table accessor for type CamError and conformance CamError();
    OUTLINED_FUNCTION_2_1();
    return OUTLINED_FUNCTION_0_1(v53, 0xD000000000000014);
  }
  if ((unint64_t)v8 >> 62)
  {
    if (v8 >= 0)
      v1 = v8 & 0xFFFFFFFFFFFFFF8;
    else
      v1 = v8;
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    v65 = OUTLINED_FUNCTION_13();
    if (v10 < 0)
    {
      __break(1u);
      goto LABEL_74;
    }
  }
  else
  {
    v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v66 = v6;
  if (v10)
  {
    v11 = 0;
    v69 = v8 & 0xC000000000000001;
    v12 = MEMORY[0x1E0DEE9D8];
    OUTLINED_FUNCTION_19();
    v67 = v10;
    v68 = v8;
    while (1)
    {
      if (v10 == v11)
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        v64 = isUniquelyReferenced_nonNull_native;
        OUTLINED_FUNCTION_1_0();
        OUTLINED_FUNCTION_9();
        OUTLINED_FUNCTION_22(v64);
        if (v1)
        {
          OUTLINED_FUNCTION_1_0();

          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_2_0();
        LatticePathFeatureExtractor.getTopLatticePathLeadingSilenceFeature(recognition:)(v66);
        v4 = 0;
LABEL_74:
        specialized Dictionary.update(other:allowDuplicateKeys:)(v65, 0);
        OUTLINED_FUNCTION_1_0();

        swift_bridgeObjectRelease();
        if (v4)
          return OUTLINED_FUNCTION_3_1();
        else
          return v73;
      }
      if (v69)
        v14 = (id)MEMORY[0x1C3BCAC88](v11, v8);
      else
        v14 = OUTLINED_FUNCTION_33(v8 + 8 * v11);
      v15 = v14;
      v1 = v5;
      LatticePathFeatureExtractor.getTokenConfidences(from:for:)(v70, v14);
      if (v5)
      {
        OUTLINED_FUNCTION_1_0();
        OUTLINED_FUNCTION_10();
        OUTLINED_FUNCTION_3_1();
        OUTLINED_FUNCTION_5();
        OUTLINED_FUNCTION_9();
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_11();

        return swift_bridgeObjectRelease();
      }
      v10 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v71 = v15;
      v8 = (uint64_t)v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v12 = isUniquelyReferenced_nonNull_native;
      }
      v18 = *(_QWORD *)(v12 + 16);
      v17 = *(_QWORD *)(v12 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        OUTLINED_FUNCTION_4_0(v17);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v12 = isUniquelyReferenced_nonNull_native;
      }
      *(_QWORD *)(v12 + 16) = v19;
      *(_QWORD *)(v12 + 8 * v18 + 32) = v10;
      if (v11 > v18)
        goto LABEL_62;
      v20 = v12 + 8 * v11;
      v21 = specialized Sequence<>.max()(*(_QWORD *)(v20 + 32));
      if ((v22 & 1) != 0)
      {
        v10 = 0;
        if ((OUTLINED_FUNCTION_30() & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        v10 = v21;
        if ((OUTLINED_FUNCTION_30() & 1) != 0)
          goto LABEL_19;
      }
      OUTLINED_FUNCTION_7();
      v19 = v38;
LABEL_19:
      v24 = *(_QWORD *)(v19 + 16);
      v23 = *(_QWORD *)(v19 + 24);
      v72 = v19;
      if (v24 >= v23 >> 1)
      {
        OUTLINED_FUNCTION_4_0(v23);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v72 = v44;
      }
      *(_QWORD *)(v72 + 16) = v24 + 1;
      OUTLINED_FUNCTION_16(v72 + 8 * v24);
      if (v25)
        goto LABEL_63;
      v26 = specialized Sequence<>.min()(*(_QWORD *)(v20 + 32));
      if ((v27 & 1) != 0)
      {
        v10 = 0x408F400000000000;
        if ((OUTLINED_FUNCTION_26() & 1) != 0)
          goto LABEL_24;
      }
      else
      {
        v10 = v26;
        if ((OUTLINED_FUNCTION_26() & 1) != 0)
          goto LABEL_24;
      }
      OUTLINED_FUNCTION_6();
      v2 = v39;
LABEL_24:
      v28 = v2[2];
      v29 = v28 + 1;
      if (v28 >= v2[3] >> 1)
      {
        OUTLINED_FUNCTION_6();
        v2 = v45;
      }
      v2[2] = v29;
      OUTLINED_FUNCTION_16((uint64_t)&v2[v28]);
      if (v25)
        goto LABEL_64;
      v30 = specialized Array<A>.avg()(*(_QWORD *)(v20 + 32));
      if ((v31 & 1) != 0)
      {
        v10 = 0;
        if ((OUTLINED_FUNCTION_23() & 1) != 0)
          goto LABEL_29;
      }
      else
      {
        v10 = v30;
        if ((OUTLINED_FUNCTION_23() & 1) != 0)
          goto LABEL_29;
      }
      OUTLINED_FUNCTION_7();
      v29 = v40;
LABEL_29:
      v33 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v29 + 24);
      v8 = v29;
      if (v33 >= v32 >> 1)
      {
        OUTLINED_FUNCTION_4_0(v32);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v46;
      }
      *(_QWORD *)(v8 + 16) = v33 + 1;
      OUTLINED_FUNCTION_16(v8 + 8 * v33);
      if (v25)
        goto LABEL_65;
      v34 = specialized Array<A>.variance()(*(_QWORD *)(v20 + 32));
      if ((v35 & 1) != 0)
      {
        v37 = swift_isUniquelyReferenced_nonNull_native();
        v36 = 0;
      }
      else
      {
        v36 = v34;
        v37 = swift_isUniquelyReferenced_nonNull_native();
      }
      v5 = v1;
      if ((v37 & 1) != 0)
      {
        v41 = v3;
      }
      else
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v41 = v47;
      }
      v43 = v41[2];
      v42 = v41[3];
      if (v43 >= v42 >> 1)
      {
        OUTLINED_FUNCTION_4_0(v42);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v41 = v48;
      }
      ++v11;
      v41[2] = v43 + 1;
      v3 = v41;
      v41[v43 + 4] = v36;

      v10 = v67;
      v6 = (void *)v8;
      v8 = v68;
      if (v67 == v11)
        goto LABEL_56;
    }
  }
  OUTLINED_FUNCTION_19();
LABEL_56:
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_13();
  v55 = swift_bridgeObjectRetain();
  v56 = OUTLINED_FUNCTION_18(v55);
  if (!v1)
  {
    v57 = v56;
    OUTLINED_FUNCTION_3_1();
    v58 = OUTLINED_FUNCTION_18((uint64_t)v2);
    OUTLINED_FUNCTION_5();
    v59 = OUTLINED_FUNCTION_18(v72);
    OUTLINED_FUNCTION_13();
    v60 = OUTLINED_FUNCTION_18((uint64_t)v3);
    OUTLINED_FUNCTION_8();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2E940D0;
    *(_QWORD *)(inited + 32) = 0xD00000000000002CLL;
    *(_QWORD *)(inited + 40) = 0x80000001C2E98730;
    *(_QWORD *)(inited + 48) = v59;
    *(_QWORD *)(inited + 56) = 0xD00000000000002CLL;
    *(_QWORD *)(inited + 64) = 0x80000001C2E98760;
    *(_QWORD *)(inited + 72) = v58;
    *(_QWORD *)(inited + 80) = 0xD00000000000002DLL;
    *(_QWORD *)(inited + 88) = 0x80000001C2E98790;
    *(_QWORD *)(inited + 96) = v57;
    *(_QWORD *)(inited + 104) = 0xD00000000000002CLL;
    *(_QWORD *)(inited + 112) = 0x80000001C2E987C0;
    *(_QWORD *)(inited + 120) = v60;
    v3 = v59;
    v2 = v58;
    v10 = v57;
    v8 = (uint64_t)v60;
    v62 = OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_22(v62);
    OUTLINED_FUNCTION_2_0();
    v63 = swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = LatticePathFeatureExtractor.getTopLatticePathScoresFeatures(tokenConfidences:meanConfidences:)(v63);
    goto LABEL_66;
  }
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  return swift_bridgeObjectRelease_n();
}

uint64_t specialized Sequence<>.min()(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v5 < v2)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

uint64_t specialized Array<A>.avg()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 0.0;
    do
    {
      v4 = *(double *)(a1 + 32 + 8 * v2++);
      v3 = v3 + v4;
    }
    while (v1 != v2);
    *(double *)&result = v3 / (double)v1;
  }
  else
  {
    *(double *)&result = 0.0;
  }
  return result;
}

uint64_t specialized Array<A>.variance()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (double *)(a1 + 32);
    v4 = 0.0;
    do
    {
      v5 = v3[v2++];
      v4 = v4 + v5;
    }
    while (v1 != v2);
    v6 = v4 / (double)v1;
    v7 = 0.0;
    v8 = *(_QWORD *)(a1 + 16);
    do
    {
      v9 = *v3++;
      v7 = v7 + (v6 - v9) * (v6 - v9);
      --v8;
    }
    while (v8);
    *(double *)&result = v7 / (double)v1;
  }
  else
  {
    *(double *)&result = 0.0;
  }
  return result;
}

uint64_t LatticePathFeatureExtractor.getTopLatticePathScoresFeatures(tokenConfidences:meanConfidences:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t inited;
  id v11;

  if (*(_QWORD *)(a1 + 16))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v1 = OUTLINED_FUNCTION_29(a1, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    v4 = (double)*(uint64_t *)(v3 + 16);
    swift_bridgeObjectRetain();
    v5 = static MLMultiArray.makeScalar(from:)(v4);
    if (v2)
    {
      OUTLINED_FUNCTION_5();
    }
    else
    {
      v7 = (void *)v5;
      v8 = static MLMultiArray.make1DSetOrSequence(from:)(v3);
      OUTLINED_FUNCTION_5();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C2E940E0;
      *(_QWORD *)(inited + 32) = 0xD00000000000002BLL;
      *(_QWORD *)(inited + 40) = 0x80000001C2E98840;
      *(_QWORD *)(inited + 48) = v7;
      *(_QWORD *)(inited + 56) = 0xD00000000000002CLL;
      *(_QWORD *)(inited + 64) = 0x80000001C2E98870;
      *(_QWORD *)(inited + 72) = v8;
      v11 = v7;
      v1 = OUTLINED_FUNCTION_14();

    }
  }
  else
  {
    lazy protocol witness table accessor for type CamError and conformance CamError();
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_0_1(v6, 0xD000000000000014);
  }
  return v1;
}

void LatticePathFeatureExtractor.getTokenConfidences(from:for:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  outlined bridged method (pb) of @objc SASUtterance.interpretationIndices.getter(a2, (SEL *)&selRef_interpretationIndices);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = specialized Zip2Sequence.Iterator.next()();
    if (v3)
    {
      v5 = v3;
      v6 = v4;
      static Int._conditionallyBridgeFromObjectiveC(_:result:)();
      OUTLINED_FUNCTION_11();
      OUTLINED_FUNCTION_13();
      OUTLINED_FUNCTION_3_1();
      lazy protocol witness table accessor for type CamError and conformance CamError();
      OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_0_1(v7, 0xD000000000000022);

    }
    else
    {
      OUTLINED_FUNCTION_11();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

void LatticePathFeatureExtractor.getTopLatticePathLeadingSilenceFeature(recognition:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  void *v42;
  uint64_t inited;
  id v44;
  uint64_t v45;

  outlined bridged method (pb) of @objc SASUtterance.interpretationIndices.getter(a1, (SEL *)&selRef_phrases);
  if (!v4)
  {
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v5 = v4;
  OUTLINED_FUNCTION_17();
  if (v7)
  {
    if (!OUTLINED_FUNCTION_28())
      goto LABEL_38;
  }
  else if (!*(_QWORD *)(v6 + 16))
  {
LABEL_38:
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  v8 = OUTLINED_FUNCTION_32();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v8, v9, v10);
  if (v2)
    OUTLINED_FUNCTION_27();
  v11 = *(id *)(v5 + 32);
  v12 = OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_25(v12, (SEL *)&selRef_interpretations);
  if (!v13)
    goto LABEL_39;
  v14 = v13;
  v15 = outlined bridged method (pb) of @objc SASRecognition.utterances.getter(a1);
  if (!v15)
    goto LABEL_42;
  v16 = v15;
  OUTLINED_FUNCTION_17();
  if (v18)
  {
    if (!_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_30;
  }
  else if (!*(_QWORD *)(v17 + 16))
  {
    goto LABEL_30;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v16 & 0xC000000000000001) == 0, v16);
  if ((v16 & 0xC000000000000001) != 0)
    MEMORY[0x1C3BCAC88](0, v16);
  else
    v19 = *(id *)(v16 + 32);
  v20 = OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_25(v20, (SEL *)&selRef_interpretationIndices);
  if (!v21)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    return;
  }
  v22 = v21;
  OUTLINED_FUNCTION_17();
  if (!v24)
  {
    if (*(_QWORD *)(v23 + 16))
      goto LABEL_14;
    goto LABEL_30;
  }
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_30:
    OUTLINED_FUNCTION_12();
    goto LABEL_38;
  }
LABEL_14:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v22 & 0xC000000000000001) == 0, v22);
  if ((v22 & 0xC000000000000001) != 0)
    v25 = (id)MEMORY[0x1C3BCAC88](0, v22);
  else
    v25 = *(id *)(v22 + 32);
  v26 = v25;
  OUTLINED_FUNCTION_5();
  v27 = Int.init(truncating:)();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v27, (v14 & 0xC000000000000001) == 0, v14);
  if ((v14 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_27();
  v28 = OUTLINED_FUNCTION_33(v14 + 8 * v27);
  v29 = OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_25(v29, (SEL *)&selRef_tokens);
  if (!v30)
    goto LABEL_44;
  v31 = v30;
  OUTLINED_FUNCTION_17();
  if (!v33)
  {
    if (*(_QWORD *)(v32 + 16))
      goto LABEL_20;
    goto LABEL_37;
  }
  if (!OUTLINED_FUNCTION_28())
  {
LABEL_37:

    goto LABEL_38;
  }
LABEL_20:
  v34 = OUTLINED_FUNCTION_32();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v34, v35, v36);
  if (v28)
    OUTLINED_FUNCTION_27();
  v37 = *(id *)(v31 + 32);
  OUTLINED_FUNCTION_12();
  v38 = objc_msgSend(v37, sel_startTime);

  if (!v38)
  {

LABEL_39:
    lazy protocol witness table accessor for type CamError and conformance CamError();
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_0_1(v45, 0xD000000000000038);
    return;
  }
  OUTLINED_FUNCTION_29(v39, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  Double.init(truncating:)();
  v41 = static MLMultiArray.makeScalar(from:)(v40);
  if (!v1)
  {
    v42 = (void *)v41;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2E940E0;
    *(_QWORD *)(inited + 32) = 0xD00000000000002CLL;
    *(_QWORD *)(inited + 40) = 0x80000001C2E987F0;
    *(_QWORD *)(inited + 48) = v42;
    *(_QWORD *)(inited + 56) = 0xD00000000000001BLL;
    *(_QWORD *)(inited + 64) = 0x80000001C2E98820;
    *(_QWORD *)(inited + 72) = v42;
    v44 = v42;
    OUTLINED_FUNCTION_14();
  }

}

uint64_t type metadata accessor for LatticePathFeatureExtractor()
{
  return objc_opt_self();
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance LatticePathFeatureExtractor()
{
  LatticePathFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance LatticePathFeatureExtractor(uint64_t *a1)
{
  return LatticePathFeatureExtractor.extractImpl(from:)(*a1);
}

void outlined bridged method (pb) of @objc SASUtterance.interpretationIndices.getter(void *a1, SEL *a2)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(a1, *a2);
  if (v2)
  {
    v3 = v2;
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_21();

  }
  OUTLINED_FUNCTION_31();
}

void outlined bridged method (ob) of @objc SASInterpretation.tokens.getter(void *a1, SEL *a2)
{
  id v3;

  v3 = objc_msgSend(a1, *a2);

  if (v3)
  {
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_21();

  }
  OUTLINED_FUNCTION_31();
}

unint64_t lazy protocol witness table accessor for type CamError and conformance CamError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamError and conformance CamError;
  if (!lazy protocol witness table cache variable for type CamError and conformance CamError)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamError, &type metadata for CamError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamError and conformance CamError);
  }
  return result;
}

uint64_t type metadata accessor for MLMultiArray(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_1@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(_BYTE *)(a1 + 16) = 1;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_1_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  return swift_bridgeObjectRelease();
}

BOOL OUTLINED_FUNCTION_4_0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_5()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_6()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_7()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_8()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_10()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_11()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_12()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_13()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_14()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_15()
{
  unint64_t *v0;

  return type metadata accessor for MLMultiArray(0, v0);
}

void OUTLINED_FUNCTION_16(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 32) = v1;
}

id OUTLINED_FUNCTION_18(uint64_t a1)
{
  return static MLMultiArray.make1DSetOrSequence(from:)(a1);
}

uint64_t OUTLINED_FUNCTION_21()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_22(uint64_t a1)
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, 0);
}

uint64_t OUTLINED_FUNCTION_23()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_24()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_25(uint64_t a1, SEL *a2)
{
  void *v2;

  outlined bridged method (ob) of @objc SASInterpretation.tokens.getter(v2, a2);
}

uint64_t OUTLINED_FUNCTION_26()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_27()
{
  JUMPOUT(0x1C3BCAC88);
}

uint64_t OUTLINED_FUNCTION_28()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_29(uint64_t a1, unint64_t *a2)
{
  return type metadata accessor for MLMultiArray(0, a2);
}

uint64_t OUTLINED_FUNCTION_30()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_32()
{
  return 0;
}

id OUTLINED_FUNCTION_33@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t dispatch thunk of CaarHandler.init(scorer:tieBreakerChain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of CaarHandler.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Scoring.scoreHypothesis(features:loggingId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

void static CamModelLogger.map(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  void *v33;
  void *v34;
  unint64_t v35;
  double v36;
  double v37;
  int v38;
  _QWORD v39[3];
  uint64_t v40;

  type metadata accessor for CamModelMetadata();
  OUTLINED_FUNCTION_1_1();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)v39 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (_QWORD *)((char *)v39 - v11);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
  OUTLINED_FUNCTION_1_1();
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)v39 - v19;
  v21 = (char *)v39 + *(int *)(v18 + 48) - v19;
  *(_QWORD *)((char *)v39 - v19) = a1;
  outlined init with copy of CamModelMetadata(a2, (uint64_t)v21);
  v22 = (uint64_t)&v17[*(int *)(v13 + 48)];
  outlined init with copy of CamModelMetadata((uint64_t)v21, v22);
  outlined init with take of CamModelMetadata(v22, (uint64_t)v12);
  v23 = one-time initialization token for common;
  swift_retain_n();
  if (v23 != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.common);
  outlined init with copy of CamModelMetadata((uint64_t)v12, (uint64_t)v10);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v39[1] = v20;
    v28 = (uint8_t *)v27;
    v29 = swift_slowAlloc();
    v39[0] = a1;
    v40 = v29;
    *(_DWORD *)v28 = 136315138;
    outlined init with copy of CamModelMetadata((uint64_t)v10, (uint64_t)v7);
    v30 = String.init<A>(describing:)();
    v39[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamModelMetadata((uint64_t)v10);
    _os_log_impl(&dword_1C2E0C000, v25, v26, "Model metadata used for logging: %s", v28, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }
  outlined destroy of CamModelMetadata((uint64_t)v10);

  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993D8]), sel_init);
  if (!v32)
  {
    swift_release();
LABEL_12:
    outlined destroy of CamModelMetadata((uint64_t)v12);
    outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v20, &demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
    OUTLINED_FUNCTION_0_2();
    return;
  }
  specialized static ModelLoggingProtocol.setAssetInformation(modelMetadata:namespace:)(v12, 0xD000000000000013, 0x80000001C2E99AC0);
  v34 = v33;
  objc_msgSend(v32, sel_setAsset_, v33);
  v35 = *(_QWORD *)(a1 + 16);
  if ((v35 & 0x8000000000000000) == 0 && !HIDWORD(v35))
  {
    objc_msgSend(v32, sel_setPrediction_);
    v36 = *(double *)(a1 + 24);
    *(float *)&v36 = v36;
    objc_msgSend(v32, sel_setPredictionScore_, v36);
    v37 = *(double *)(a1 + 32);
    *(float *)&v37 = v37;
    objc_msgSend(v32, sel_setPredictionThreshold_, v37);
    v38 = *((unsigned __int8 *)v12 + 48);
    if (v38 != 2)
      objc_msgSend(v32, sel_setIsShadowLog_, v38 & 1);
    swift_release();

    goto LABEL_12;
  }
  OUTLINED_FUNCTION_4_1();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized static ModelLoggingProtocol.setAssetInformation(modelMetadata:namespace:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A3D8]), sel_init);
  v14 = v13;
  if (v13)
  {
    v33 = v10;
    v15 = *a1;
    v16 = a1[1];
    v17 = v13;
    v18 = (void *)MEMORY[0x1C3BCA844](v15, v16);
    objc_msgSend(v17, sel_setAssetName_, v18);

    v19 = v17;
    v20 = specialized static ModelLoggingProtocol.generateModelVersion(using:)(a1);
    objc_msgSend(v19, sel_setAssetVersion_, v20);

    v21 = v19;
    v22 = (void *)MEMORY[0x1C3BCA844](a2, a3);
    objc_msgSend(v21, sel_setTrialNamespace_, v22);

    v10 = v33;
  }
  v23 = type metadata accessor for CamModelMetadata();
  outlined init with copy of Locale?((uint64_t)a1 + *(int *)(v23 + 28), (uint64_t)v8);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v38 = Locale.identifier.getter();
    v39 = v24;
    v36 = 95;
    v37 = 0xE100000000000000;
    v34 = 45;
    v35 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v27 = v26;
    swift_bridgeObjectRelease();
    if (v14)
    {
      v28 = (void *)objc_opt_self();
      v29 = v14;
      v30 = (void *)MEMORY[0x1C3BCA844](v25, v27);
      swift_bridgeObjectRelease();
      v31 = objc_msgSend(v28, sel_convertLanguageCodeToSchemaLocale_, v30);

      objc_msgSend(v29, sel_setAssetLocale_, v31);
      OUTLINED_FUNCTION_2_2();
    }
    else
    {
      OUTLINED_FUNCTION_2_2();
      swift_bridgeObjectRelease();
    }
  }
  OUTLINED_FUNCTION_0_2();
}

void *specialized static ModelLoggingProtocol.generateModelVersion(using:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  id v7;

  v1 = (void *)a1[5];
  if (v1 == (void *)1)
    return 0;
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[2];
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A510]), sel_init);
  v2 = v6;
  if (v6)
  {
    objc_msgSend(v6, sel_setMajor_, v5);
    objc_msgSend(v2, sel_setMinor_, HIDWORD(v5));
    objc_msgSend(v2, sel_setPatch_, v4);
    v7 = v2;
    if (v1)
      v1 = (void *)MEMORY[0x1C3BCA844](v3, v1);
    objc_msgSend(v2, sel_setPrerelease_, v1);

  }
  return v2;
}

uint64_t outlined init with copy of CamModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CamModelMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CamModelMetadata(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CamModelMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t outlined destroy of (CamLogOutput, CamModelMetadata)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t *initializeBufferWithCopyOfBuffer for AutoSendPersonalFeatureExtractor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v7 = *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v10))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v8, v9, v13);
      *(_QWORD *)&v8[v10[5]] = *(_QWORD *)&v9[v10[5]];
      v14 = v10[6];
      v15 = *(void **)&v9[v14];
      *(_QWORD *)&v8[v14] = v15;
      *(_QWORD *)&v8[v10[7]] = *(_QWORD *)&v9[v10[7]];
      swift_retain();
      v16 = v15;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, (uint64_t)v10);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AutoSendPersonalFeatureExtractor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  v2 = a1 + *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  v3 = type metadata accessor for WordEmbeddingFeatureExtractor();
  if (!__swift_getEnumTagSinglePayload(v2, 1, v3))
  {
    v4 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
    swift_release();

    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t initializeWithCopy for AutoSendPersonalFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
    *(_QWORD *)&v7[v9[5]] = *(_QWORD *)&v8[v9[5]];
    v12 = v9[6];
    v13 = *(void **)&v8[v12];
    *(_QWORD *)&v7[v12] = v13;
    *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
    swift_retain();
    v14 = v13;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AutoSendPersonalFeatureExtractor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9);
  if (!EnumTagSinglePayload)
  {
    if (!v11)
    {
      v18 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v7, v8, v18);
      *(_QWORD *)&v7[v9[5]] = *(_QWORD *)&v8[v9[5]];
      swift_retain();
      swift_release();
      v19 = v9[6];
      v20 = *(void **)&v7[v19];
      v21 = *(void **)&v8[v19];
      *(_QWORD *)&v7[v19] = v21;
      v22 = v21;

      *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of WordEmbeddingFeatureExtractor((uint64_t)v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v12 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v7, v8, v12);
  *(_QWORD *)&v7[v9[5]] = *(_QWORD *)&v8[v9[5]];
  v13 = v9[6];
  v14 = *(void **)&v8[v13];
  *(_QWORD *)&v7[v13] = v14;
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  swift_retain();
  v15 = v14;
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of WordEmbeddingFeatureExtractor(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WordEmbeddingFeatureExtractor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for AutoSendPersonalFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
    *(_QWORD *)&v7[v9[5]] = *(_QWORD *)&v8[v9[5]];
    *(_QWORD *)&v7[v9[6]] = *(_QWORD *)&v8[v9[6]];
    *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithTake for AutoSendPersonalFeatureExtractor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  *a1 = *a2;
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  v7 = *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v10);
  if (!EnumTagSinglePayload)
  {
    if (!v12)
    {
      v16 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v8, v9, v16);
      *(_QWORD *)&v8[v10[5]] = *(_QWORD *)&v9[v10[5]];
      swift_release();
      v17 = v10[6];
      v18 = *(void **)&v8[v17];
      *(_QWORD *)&v8[v17] = *(_QWORD *)&v9[v17];

      *(_QWORD *)&v8[v10[7]] = *(_QWORD *)&v9[v10[7]];
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of WordEmbeddingFeatureExtractor((uint64_t)v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v13 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
  *(_QWORD *)&v8[v10[5]] = *(_QWORD *)&v9[v10[5]];
  *(_QWORD *)&v8[v10[6]] = *(_QWORD *)&v9[v10[6]];
  *(_QWORD *)&v8[v10[7]] = *(_QWORD *)&v9[v10[7]];
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, (uint64_t)v10);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoSendPersonalFeatureExtractor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E12960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = type metadata accessor for AutoSendInputFeatureExtractor();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoSendPersonalFeatureExtractor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E129E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for AutoSendInputFeatureExtractor();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AutoSendPersonalFeatureExtractor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AutoSendPersonalFeatureExtractor;
  if (!type metadata singleton initialization cache for AutoSendPersonalFeatureExtractor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AutoSendPersonalFeatureExtractor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AutoSendInputFeatureExtractor();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static AutoSendPersonalFeatureExtractor.extractedFeatures.getter()
{
  uint64_t v0;

  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  v0 = static PersonalContextFeatureExtractor.extractedFeatures;
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  static AutoSendInputFeatureExtractor.extractedFeatures.getter();
  specialized Array.append<A>(contentsOf:)();
  return v0;
}

uint64_t AutoSendPersonalFeatureExtractor.extractImpl(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  uint64_t v34;

  v4 = v3;
  v5 = v2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (autoSendInput: AutoSendInput, crrSignals: [String : Int]));
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AutoSendInput(a1, (uint64_t)v10);
  v11 = *(int *)(v8 + 48);
  *(_QWORD *)&v10[v11] = a2;
  v12 = one-time initialization token for autoSend;
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.autoSend);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C2E0C000, v14, v15, "Extracting Personal AutoSend features", v16, 2u);
    OUTLINED_FUNCTION_3();
  }

  type metadata accessor for MLMultiArray();
  v34 = Dictionary.init(dictionaryLiteral:)();
  v17 = v5;
  v18 = specialized FeatureExtracting.extract(from:)(v10);
  if (v4)
  {
    OUTLINED_FUNCTION_13();
    outlined destroy of (autoSendInput: AutoSendInput, crrSignals: [String : Int])((uint64_t)v10);
  }
  else
  {
    v19 = v18;
    v20 = specialized FeatureExtracting.extract(from:)(*(_QWORD *)&v10[v11]);
    type metadata accessor for AutoSendPersonalFeatureExtractor();
    v21 = swift_retain();
    v23 = specialized FeatureExtracting.extract(from:)(v21);
    swift_release();
    OUTLINED_FUNCTION_0_3(v19);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_3(v20);
    OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_0_3(v23);
    swift_bridgeObjectRelease();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)OUTLINED_FUNCTION_4();
      v31 = OUTLINED_FUNCTION_4();
      v33[0] = v31;
      *(_DWORD *)v26 = 136315138;
      v30[1] = v26 + 4;
      OUTLINED_FUNCTION_3_0();
      swift_bridgeObjectRetain();
      v27 = Dictionary.Keys.description.getter();
      v29 = v28;
      OUTLINED_FUNCTION_2_0();
      v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_13();
      _os_log_impl(&dword_1C2E0C000, v24, v25, "Extracted Personal AutoSend features: %s", v26, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_3_0();
    v17 = v34;
    outlined destroy of (autoSendInput: AutoSendInput, crrSignals: [String : Int])((uint64_t)v10);
  }
  return v17;
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance AutoSendPersonalFeatureExtractor(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (autoSendInput: AutoSendInput, crrSignals: [String : Int]));
  return AutoSendPersonalFeatureExtractor.extractImpl(from:)(a1, *(_QWORD *)(a1 + *(int *)(v2 + 48)));
}

uint64_t outlined init with copy of AutoSendInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AutoSendInput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_3(uint64_t a1)
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, 0);
}

uint64_t AutoSendPersonalHandlerProvider.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AutoSendPersonalHandlerProvider()
{
  return objc_opt_self();
}

uint64_t AutoSendPersonalHandler.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  outlined destroy of AutoSendPersonalFeatureExtractor(v0 + OBJC_IVAR____TtC7SiriCam23AutoSendPersonalHandler_autoSendPersonalFeatureExtractor);
  return v0;
}

uint64_t AutoSendPersonalHandler.__deallocating_deinit()
{
  AutoSendPersonalHandler.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for AutoSendPersonalHandler()
{
  return type metadata accessor for AutoSendPersonalHandler();
}

uint64_t type metadata accessor for AutoSendPersonalHandler()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AutoSendPersonalHandler;
  if (!type metadata singleton initialization cache for AutoSendPersonalHandler)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AutoSendPersonalHandler()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AutoSendPersonalFeatureExtractor();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined destroy of AutoSendPersonalFeatureExtractor(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AutoSendPersonalFeatureExtractor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *static ConversationHistoryFeatureExtractor.extractedFeatures.getter()
{
  return &outlined read-only object #0 of static ConversationHistoryFeatureExtractor.extractedFeatures.getter;
}

uint64_t ConversationHistoryFeatureExtractor.extractImpl(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  _BOOL8 v4;
  uint64_t inited;

  v2 = *(_QWORD *)(v1 + 24);
  v4 = 0;
  if (v2)
  {
    v3 = *a1 == *(_QWORD *)(v1 + 16) && v2 == a1[1];
    if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      v4 = 1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2E94230;
  *(_QWORD *)(inited + 32) = 0xD000000000000018;
  *(_QWORD *)(inited + 40) = 0x80000001C2E98DF0;
  *(_QWORD *)(inited + 48) = objc_msgSend((id)objc_opt_self(), sel_featureValueWithInt64_, v4);
  type metadata accessor for MLFeatureValue();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t ConversationHistoryFeatureExtractor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConversationHistoryFeatureExtractor()
{
  return objc_opt_self();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance ConversationHistoryFeatureExtractor(_QWORD *a1)
{
  return ConversationHistoryFeatureExtractor.extractImpl(from:)(a1);
}

unint64_t type metadata accessor for MLFeatureValue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MLFeatureValue;
  if (!lazy cache variable for type metadata for MLFeatureValue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MLFeatureValue);
  }
  return result;
}

uint64_t Array<A>.topTwo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 16) >= 2uLL)
  {
    v7 = *(_QWORD *)(OUTLINED_FUNCTION_0_4() - 8);
    v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    outlined init with copy of RankedAction(v8, a2);
    v9 = type metadata accessor for TopTwo();
    outlined init with copy of RankedAction(v8 + *(_QWORD *)(v7 + 72), a2 + *(int *)(v9 + 20));
    v5 = a2;
    v6 = 0;
    v4 = v9;
  }
  else
  {
    v4 = type metadata accessor for TopTwo();
    v5 = a2;
    v6 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v5, v6, 1, v4);
}

uint64_t outlined init with copy of RankedAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RankedAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TopTwo()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TopTwo;
  if (!type metadata singleton initialization cache for TopTwo)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TopTwo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  void **v48;
  int v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v73;
  char *__dsta;
  void (*v76)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = (int *)type metadata accessor for RankedAction();
    v8 = v7[5];
    v9 = (void **)((char *)v4 + v8);
    v10 = (void **)((char *)a2 + v8);
    v11 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v21 = *v10;
      *v9 = *v10;
      v22 = v21;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        goto LABEL_12;
      }
      v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
      v14 = (int *)type metadata accessor for CamUSOParse(0);
      v15 = v14[5];
      v16 = (char *)v9 + v15;
      v17 = (char *)v10 + v15;
      v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      v23 = v14[6];
      v24 = (void **)((char *)v9 + v23);
      v25 = (void **)((char *)v10 + v23);
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      v27 = v14[7];
      v28 = (char *)v9 + v27;
      v29 = (char *)v10 + v27;
      v28[4] = v29[4];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
LABEL_12:
    v30 = v11;
    *(_QWORD *)((char *)v4 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
    *(_QWORD *)((char *)v4 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    *(_QWORD *)((char *)v4 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
    v31 = v7[9];
    v32 = (char *)v4 + v31;
    v33 = (char *)a2 + v31;
    v34 = type metadata accessor for UUID();
    v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36 = v33;
    v37 = v34;
    v76 = v35;
    v35(v32, v36, v34);
    v38 = v7[10];
    v39 = (_QWORD *)((char *)v4 + v38);
    v40 = (_QWORD *)((char *)a2 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    *(_QWORD *)((char *)v4 + v7[11]) = *(_QWORD *)((char *)a2 + v7[11]);
    v42 = *(int *)(a3 + 20);
    v43 = (_QWORD *)((char *)v4 + v42);
    v44 = (char *)a2 + v42;
    v45 = *(_QWORD *)((char *)a2 + v42 + 8);
    *v43 = *(_QWORD *)((char *)a2 + v42);
    v43[1] = v45;
    v46 = v7[5];
    v47 = (void **)((char *)v43 + v46);
    v48 = (void **)&v44[v46];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49 = swift_getEnumCaseMultiPayload();
    if (v49 == 1)
    {
      v56 = *v48;
      *v47 = *v48;
      v57 = v56;
    }
    else
    {
      if (v49)
      {
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
LABEL_21:
        *(_QWORD *)((char *)v43 + v7[6]) = *(_QWORD *)&v44[v7[6]];
        *(_QWORD *)((char *)v43 + v7[7]) = *(_QWORD *)&v44[v7[7]];
        *(_QWORD *)((char *)v43 + v7[8]) = *(_QWORD *)&v44[v7[8]];
        v65 = v7[9];
        v66 = (char *)v43 + v65;
        v67 = &v44[v65];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v76(v66, v67, v37);
        v68 = v7[10];
        v69 = (_QWORD *)((char *)v43 + v68);
        v70 = &v44[v68];
        v71 = *((_QWORD *)v70 + 1);
        *v69 = *(_QWORD *)v70;
        v69[1] = v71;
        *(_QWORD *)((char *)v43 + v7[11]) = *(_QWORD *)&v44[v7[11]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return v4;
      }
      v73 = v37;
      v50 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v47, v48, v50);
      v51 = (int *)type metadata accessor for CamUSOParse(0);
      v52 = v51[5];
      __dsta = (char *)v47 + v52;
      v53 = (char *)v48 + v52;
      v54 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v53, 1, v54))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dsta, v53, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(__dsta, v53, v54);
        __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v54);
      }
      v37 = v73;
      v58 = v51[6];
      v59 = (void **)((char *)v47 + v58);
      v60 = (void **)((char *)v48 + v58);
      v61 = v60[1];
      *v59 = *v60;
      v59[1] = v61;
      v62 = v51[7];
      v63 = (char *)v47 + v62;
      v64 = (char *)v48 + v62;
      v63[4] = v64[4];
      *(_DWORD *)v63 = *(_DWORD *)v64;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_21;
  }
  v20 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for TopTwo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id *v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  id *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_bridgeObjectRelease();
  v4 = type metadata accessor for RankedAction();
  v5 = (id *)(a1 + *(int *)(v4 + 20));
  type metadata accessor for CamParse(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {

  }
  else if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    v8 = (uint64_t)v5 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + *(int *)(v4 + 36);
  v11 = type metadata accessor for UUID();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v14 = (id *)(v13 + *(int *)(v4 + 20));
  v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 1)
  {

  }
  else if (!v15)
  {
    v16 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
    v17 = (uint64_t)v14 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v17, 1, v18))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12(v13 + *(int *)(v4 + 36), v11);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TopTwo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  void **v43;
  int v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v68;
  char *__dsta;
  void (*v71)(char *, char *, uint64_t);

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = (int *)type metadata accessor for RankedAction();
  v7 = v6[5];
  v8 = (void **)((char *)a1 + v7);
  v9 = (void **)((char *)a2 + v7);
  v10 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v19 = *v9;
    *v8 = *v9;
    v20 = v19;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      goto LABEL_10;
    }
    v12 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
    v13 = (int *)type metadata accessor for CamUSOParse(0);
    v14 = v13[5];
    v15 = (char *)v8 + v14;
    v16 = (char *)v9 + v14;
    v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
    }
    v21 = v13[6];
    v22 = (void **)((char *)v8 + v21);
    v23 = (void **)((char *)v9 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v13[7];
    v26 = (char *)v8 + v25;
    v27 = (char *)v9 + v25;
    v26[4] = v27[4];
    *(_DWORD *)v26 = *(_DWORD *)v27;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_10:
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  v28 = v6[9];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for UUID();
  v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v71 = v32;
  v32(v29, v30, v31);
  v33 = v6[10];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  *(_QWORD *)((char *)a1 + v6[11]) = *(_QWORD *)((char *)a2 + v6[11]);
  v37 = *(int *)(a3 + 20);
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (char *)a2 + v37;
  v40 = *(_QWORD *)((char *)a2 + v37 + 8);
  *v38 = *(_QWORD *)((char *)a2 + v37);
  v38[1] = v40;
  v41 = v6[5];
  v42 = (void **)((char *)v38 + v41);
  v43 = (void **)&v39[v41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = swift_getEnumCaseMultiPayload();
  if (v44 == 1)
  {
    v51 = *v43;
    *v42 = *v43;
    v52 = v51;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    goto LABEL_19;
  }
  if (!v44)
  {
    v68 = v31;
    v45 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
    v46 = (int *)type metadata accessor for CamUSOParse(0);
    v47 = v46[5];
    __dsta = (char *)v42 + v47;
    v48 = (char *)v43 + v47;
    v49 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v48, 1, v49))
    {
      v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dsta, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(__dsta, v48, v49);
      __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v49);
    }
    v31 = v68;
    v53 = v46[6];
    v54 = (void **)((char *)v42 + v53);
    v55 = (void **)((char *)v43 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = v46[7];
    v58 = (char *)v42 + v57;
    v59 = (char *)v43 + v57;
    v58[4] = v59[4];
    *(_DWORD *)v58 = *(_DWORD *)v59;
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
  memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_19:
  *(_QWORD *)((char *)v38 + v6[6]) = *(_QWORD *)&v39[v6[6]];
  *(_QWORD *)((char *)v38 + v6[7]) = *(_QWORD *)&v39[v6[7]];
  *(_QWORD *)((char *)v38 + v6[8]) = *(_QWORD *)&v39[v6[8]];
  v60 = v6[9];
  v61 = (char *)v38 + v60;
  v62 = &v39[v60];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v71(v61, v62, v31);
  v63 = v6[10];
  v64 = (_QWORD *)((char *)v38 + v63);
  v65 = &v39[v63];
  v66 = *((_QWORD *)v65 + 1);
  *v64 = *(_QWORD *)v65;
  v64[1] = v66;
  *(_QWORD *)((char *)v38 + v6[11]) = *(_QWORD *)&v39[v6[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TopTwo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void **v41;
  void **v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int *v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  char *v66;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for RankedAction();
  v7 = (int *)v6;
  if (a1 != a2)
  {
    v8 = *(int *)(v6 + 20);
    v9 = (void **)((char *)a1 + v8);
    v10 = (void **)((char *)a2 + v8);
    outlined destroy of CamParse((uint64_t)a1 + v8);
    v11 = type metadata accessor for CamParse(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v20 = *v10;
      *v9 = *v10;
      v21 = v20;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v65 = a3;
      v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
      v14 = (int *)type metadata accessor for CamUSOParse(0);
      v15 = v14[5];
      v16 = (char *)v9 + v15;
      v17 = (char *)v10 + v15;
      v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      v22 = v14[6];
      v23 = (void **)((char *)v9 + v22);
      v24 = (void **)((char *)v10 + v22);
      *v23 = *v24;
      v23[1] = v24[1];
      v25 = v14[7];
      v26 = (char *)v9 + v25;
      v27 = (char *)v10 + v25;
      v28 = *(_DWORD *)v27;
      v26[4] = v27[4];
      *(_DWORD *)v26 = v28;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      a3 = v65;
    }
  }
  *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
  *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = v7[9];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for UUID();
  v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24);
  v33(v30, v31, v32);
  v34 = v7[10];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v7[11]) = *(_QWORD *)((char *)a2 + v7[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = *(int *)(a3 + 20);
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  *(_QWORD *)v38 = *(_QWORD *)((char *)a2 + v37);
  *((_QWORD *)v38 + 1) = *(_QWORD *)((char *)a2 + v37 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v40 = v7[5];
    v41 = (void **)&v38[v40];
    v42 = (void **)&v39[v40];
    outlined destroy of CamParse((uint64_t)&v38[v40]);
    v43 = type metadata accessor for CamParse(0);
    v44 = swift_getEnumCaseMultiPayload();
    if (v44 == 1)
    {
      v50 = *v42;
      *v41 = *v42;
      v51 = v50;
LABEL_19:
      swift_storeEnumTagMultiPayload();
      goto LABEL_20;
    }
    if (!v44)
    {
      v64 = v33;
      v45 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v41, v42, v45);
      v63 = (int *)type metadata accessor for CamUSOParse(0);
      v46 = v63[5];
      v66 = (char *)v41 + v46;
      v47 = (char *)v42 + v46;
      v48 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v47, 1, v48))
      {
        v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v66, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v66, v47, v48);
        __swift_storeEnumTagSinglePayload((uint64_t)v66, 0, 1, v48);
      }
      v33 = v64;
      v52 = v63[6];
      v53 = (void **)((char *)v41 + v52);
      v54 = (void **)((char *)v42 + v52);
      *v53 = *v54;
      v53[1] = v54[1];
      v55 = v63[7];
      v56 = (char *)v41 + v55;
      v57 = (char *)v42 + v55;
      v58 = *(_DWORD *)v57;
      v56[4] = v57[4];
      *(_DWORD *)v56 = v58;
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
LABEL_20:
  *(_QWORD *)&v38[v7[6]] = *(_QWORD *)&v39[v7[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v38[v7[7]] = *(_QWORD *)&v39[v7[7]];
  *(_QWORD *)&v38[v7[8]] = *(_QWORD *)&v39[v7[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33(&v38[v7[9]], &v39[v7[9]], v32);
  v59 = v7[10];
  v60 = &v38[v59];
  v61 = &v39[v59];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *((_QWORD *)v60 + 1) = *((_QWORD *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v38[v7[11]] = *(_QWORD *)&v39[v7[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of CamParse(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CamParse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for TopTwo(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v41;
  void (*v42)(char *, char *, uint64_t);
  int *__dst;
  char *__dsta;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for RankedAction();
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for CamParse(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    __dst = a3;
    v11 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    v12 = (int *)type metadata accessor for CamUSOParse(0);
    v13 = v12[5];
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    *(_OWORD *)&v8[v12[6]] = *(_OWORD *)&v9[v12[6]];
    v18 = v12[7];
    v19 = &v8[v18];
    v20 = &v9[v18];
    v19[4] = v20[4];
    *(_DWORD *)v19 = *(_DWORD *)v20;
    swift_storeEnumTagMultiPayload();
    a3 = __dst;
  }
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  v21 = v6[9];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for UUID();
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
  *(_QWORD *)((char *)a1 + v6[11]) = *(_QWORD *)((char *)a2 + v6[11]);
  v26 = a3[5];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_OWORD *)v27 = *(_OWORD *)((char *)a2 + v26);
  v29 = v6[5];
  v30 = &v27[v29];
  v31 = &v28[v29];
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v42 = v25;
    v32 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
    v41 = (int *)type metadata accessor for CamUSOParse(0);
    v33 = v41[5];
    __dsta = &v30[v33];
    v34 = &v31[v33];
    v35 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dsta, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(__dsta, v34, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v35);
    }
    *(_OWORD *)&v30[v41[6]] = *(_OWORD *)&v31[v41[6]];
    v37 = v41[7];
    v38 = &v30[v37];
    v39 = &v31[v37];
    v38[4] = v39[4];
    *(_DWORD *)v38 = *(_DWORD *)v39;
    swift_storeEnumTagMultiPayload();
    v25 = v42;
  }
  *(_QWORD *)&v27[v6[6]] = *(_QWORD *)&v28[v6[6]];
  *(_QWORD *)&v27[v6[7]] = *(_QWORD *)&v28[v6[7]];
  *(_QWORD *)&v27[v6[8]] = *(_QWORD *)&v28[v6[8]];
  v25(&v27[v6[9]], &v28[v6[9]], v24);
  *(_OWORD *)&v27[v6[10]] = *(_OWORD *)&v28[v6[10]];
  *(_QWORD *)&v27[v6[11]] = *(_QWORD *)&v28[v6[11]];
  return a1;
}

_QWORD *assignWithTake for TopTwo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int *v54;
  void (*v55)(char *, char *, uint64_t);
  char *__dst;
  char *__dsta;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for RankedAction();
  v8 = (int *)v7;
  if (a1 != a2)
  {
    v9 = *(int *)(v7 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    outlined destroy of CamParse((uint64_t)a1 + v9);
    v12 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      v14 = (int *)type metadata accessor for CamUSOParse(0);
      v15 = v14[5];
      __dst = &v10[v15];
      v16 = &v11[v15];
      v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(__dst, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v17);
      }
      *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
      v19 = v14[7];
      v20 = &v10[v19];
      v21 = &v11[v19];
      v20[4] = v21[4];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)((char *)a1 + v8[6]) = *(_QWORD *)((char *)a2 + v8[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
  *(_QWORD *)((char *)a1 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
  swift_bridgeObjectRelease();
  v22 = v8[9];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for UUID();
  v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40);
  v26(v23, v24, v25);
  v27 = v8[10];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v8[11]) = *(_QWORD *)((char *)a2 + v8[11]);
  swift_bridgeObjectRelease();
  v32 = *(int *)(a3 + 20);
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a2 + v32 + 8);
  *(_QWORD *)v33 = *(_QWORD *)((char *)a2 + v32);
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v36 = v8[5];
    v37 = &v33[v36];
    v38 = &v34[v36];
    outlined destroy of CamParse((uint64_t)&v33[v36]);
    v39 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v55 = v26;
      v40 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v37, v38, v40);
      v54 = (int *)type metadata accessor for CamUSOParse(0);
      v41 = v54[5];
      __dsta = &v37[v41];
      v42 = &v38[v41];
      v43 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dsta, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(__dsta, v42, v43);
        __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v43);
      }
      v26 = v55;
      *(_OWORD *)&v37[v54[6]] = *(_OWORD *)&v38[v54[6]];
      v45 = v54[7];
      v46 = &v37[v45];
      v47 = &v38[v45];
      v46[4] = v47[4];
      *(_DWORD *)v46 = *(_DWORD *)v47;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)&v33[v8[6]] = *(_QWORD *)&v34[v8[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v33[v8[7]] = *(_QWORD *)&v34[v8[7]];
  *(_QWORD *)&v33[v8[8]] = *(_QWORD *)&v34[v8[8]];
  swift_bridgeObjectRelease();
  v26(&v33[v8[9]], &v34[v8[9]], v25);
  v48 = v8[10];
  v49 = &v33[v48];
  v50 = &v34[v48];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v33[v8[11]] = *(_QWORD *)&v34[v8[11]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TopTwo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E14C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_0_4();
  return __swift_getEnumTagSinglePayload(v2, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TopTwo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E14CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_0_4();
  return __swift_storeEnumTagSinglePayload(v2, a2, a2, v4);
}

uint64_t type metadata completion function for TopTwo()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RankedAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  return type metadata accessor for RankedAction();
}

unint64_t Dictionary<>.debugDescription.getter(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  unint64_t v12;
  char v13;
  void *v14;
  id v15;
  Swift::String v16;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;

  v2 = 0xD00000000000001ALL;
  v19 = 0xD00000000000001ALL;
  v20 = 0x80000001C2E99CD0;
  v3 = swift_bridgeObjectRetain();
  v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = (uint64_t)v4;
  swift_retain();
  specialized MutableCollection<>.sort(by:)(&v18._countAndFlagsBits);
  swift_release();
  v5 = *(_QWORD *)(v18._countAndFlagsBits + 16);
  if (v5)
  {
    v6 = (void **)(v18._countAndFlagsBits + 40);
    do
    {
      v8 = (uint64_t)*(v6 - 1);
      v7 = *v6;
      v18._countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      v9._countAndFlagsBits = 8237;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
      v10._countAndFlagsBits = v8;
      v10._object = v7;
      String.append(_:)(v10);
      v11._countAndFlagsBits = 8250;
      v11._object = (void *)0xE200000000000000;
      String.append(_:)(v11);
      if (*(_QWORD *)(a1 + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, (uint64_t)v7), (v13 & 1) != 0))
      {
        v14 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v12);
        v15 = v14;
      }
      else
      {
        v14 = 0;
      }
      v6 += 2;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFeatureValue?);
      _print_unlocked<A, B>(_:_:)();

      v16._countAndFlagsBits = 10;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      --v5;
    }
    while (v5);
    swift_release();
    return v19;
  }
  else
  {
    swift_release();
  }
  return v2;
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v5)
  {
    if (v5 <= 0)
      goto LABEL_11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>);
    v8 = *(_QWORD *)(type metadata accessor for RankedAction() - 8);
    v9 = *(_QWORD *)(v8 + 72);
    v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v11 = (_QWORD *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    if (v9)
    {
      if (v12 - v10 != 0x8000000000000000 || v9 != -1)
      {
        v11[2] = v5;
        v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
LABEL_11:
        if (v4 != a3)
        {
          v14 = type metadata accessor for RankedAction();
          specialized UnsafeMutablePointer.initialize(from:count:)(a2 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * a3, v5);
          return;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      return;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 16);
  v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : MLFeatureValue].Iterator._Variant();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v16;
  Swift::Int v17;
  _QWORD *v18;
  _QWORD *v19;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  Swift::Int v85;
  _QWORD *v86;
  BOOL v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  Swift::Int v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return;
    }
    goto LABEL_144;
  }
  v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v98 = v6;
  v99 = v3;
  v100 = v7;
  v96 = a1;
  if (v3 <= 0)
  {
    v101 = MEMORY[0x1E0DEE9D8];
    v33 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_110:
    if (v33 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(_QWORD *)(v98 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_149;
    }
    v88 = *v96;
    while (1)
    {
      v89 = v33 - 2;
      if (v33 < 2)
        break;
      if (!v88)
        goto LABEL_153;
      v90 = (char *)v101;
      v91 = *(_QWORD *)(v101 + 32 + 16 * v89);
      v92 = *(_QWORD *)(v101 + 32 + 16 * (v33 - 1) + 8);
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v88 + 16 * v91), (char *)(v88 + 16 * *(_QWORD *)(v101 + 32 + 16 * (v33 - 1))), v88 + 16 * v92, v100);
      if (v1)
        goto LABEL_106;
      if (v92 < v91)
        goto LABEL_139;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v90 = specialized _ArrayBuffer._consumeAndCreateNew()(v101);
      if (v89 >= *((_QWORD *)v90 + 2))
        goto LABEL_140;
      v93 = &v90[16 * v89 + 32];
      *(_QWORD *)v93 = v91;
      *((_QWORD *)v93 + 1) = v92;
      v94 = *((_QWORD *)v90 + 2);
      if (v33 > v94)
        goto LABEL_141;
      memmove(&v90[16 * v33 + 16], &v90[16 * v33 + 32], 16 * (v94 - v33));
      v101 = (uint64_t)v90;
      *((_QWORD *)v90 + 2) = v94 - 1;
      v33 = v94 - 1;
      v3 = v99;
      if (v94 <= 2)
        goto LABEL_121;
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }
  v97 = v5;
  v8 = 0;
  v9 = *a1;
  v95 = *a1 + 8;
  v101 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v10 = v8++;
    if (v8 >= v3)
      goto LABEL_32;
    v11 = (uint64_t *)(v9 + 16 * v8);
    v12 = *v11;
    v13 = v11[1];
    v14 = (_QWORD *)(v9 + 16 * v10);
    if (v12 == *v14 && v13 == v14[1])
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v3)
        goto LABEL_31;
      v16 = 0;
LABEL_13:
      v18 = (_QWORD *)(v95 + 16 * v17);
      do
      {
        v19 = (_QWORD *)(v9 + 16 * v8);
        if (*(v18 - 1) == *v19 && *v18 == v19[1])
        {
          if ((v16 & 1) != 0)
            goto LABEL_24;
        }
        else if (((v16 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
        {
          goto LABEL_23;
        }
        v18 += 2;
        v21 = v17 + 1;
        v8 = v17;
        v17 = v21;
      }
      while (v21 < v3);
      v17 = v21;
      goto LABEL_23;
    }
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v17 = v10 + 2;
    if (v10 + 2 < v3)
      goto LABEL_13;
LABEL_23:
    v8 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_32;
LABEL_24:
    if (v17 < v10)
      goto LABEL_148;
    if (v10 < v17)
    {
      v22 = 16 * v17;
      v23 = 16 * v10;
      v24 = v17;
      v25 = v10;
      do
      {
        if (v25 != --v24)
        {
          if (!v9)
            goto LABEL_152;
          v26 = v9 + v22;
          v27 = *(_QWORD *)(v9 + v23);
          v28 = *(_QWORD *)(v9 + v23 + 8);
          *(_OWORD *)(v9 + v23) = *(_OWORD *)(v9 + v22 - 16);
          *(_QWORD *)(v26 - 16) = v27;
          *(_QWORD *)(v26 - 8) = v28;
        }
        ++v25;
        v22 -= 16;
        v23 += 16;
      }
      while (v25 < v24);
    }
LABEL_31:
    v8 = v17;
LABEL_32:
    if (v8 >= v3)
      goto LABEL_41;
    if (__OFSUB__(v8, v10))
      goto LABEL_143;
    if (v8 - v10 >= v97)
      goto LABEL_41;
    if (__OFADD__(v10, v97))
      goto LABEL_146;
    if (v10 + v97 >= v3)
      v29 = v3;
    else
      v29 = v10 + v97;
    if (v29 < v10)
      goto LABEL_147;
    if (v8 == v29)
    {
LABEL_41:
      v30 = (char *)v101;
    }
    else
    {
      v81 = (_QWORD *)(v9 + 16 * v8);
      v30 = (char *)v101;
      do
      {
        v82 = (uint64_t *)(v9 + 16 * v8);
        v83 = *v82;
        v84 = v82[1];
        v85 = v10;
        v86 = v81;
        do
        {
          v87 = v83 == *(v86 - 2) && v84 == *(v86 - 1);
          if (v87 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v9)
            goto LABEL_150;
          v83 = *v86;
          v84 = v86[1];
          *(_OWORD *)v86 = *((_OWORD *)v86 - 1);
          *(v86 - 1) = v84;
          *(v86 - 2) = v83;
          v86 -= 2;
          ++v85;
        }
        while (v8 != v85);
        ++v8;
        v81 += 2;
      }
      while (v8 != v29);
      v8 = v29;
    }
    if (v8 < v10)
      goto LABEL_142;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
    v32 = *((_QWORD *)v30 + 2);
    v31 = *((_QWORD *)v30 + 3);
    v33 = v32 + 1;
    if (v32 >= v31 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v30);
    *((_QWORD *)v30 + 2) = v33;
    v34 = v30 + 32;
    v35 = &v30[16 * v32 + 32];
    *(_QWORD *)v35 = v10;
    *((_QWORD *)v35 + 1) = v8;
    v101 = (uint64_t)v30;
    if (v32)
      break;
    v33 = 1;
LABEL_90:
    v3 = v99;
    if (v8 >= v99)
      goto LABEL_110;
  }
  while (1)
  {
    v36 = v33 - 1;
    if (v33 >= 4)
    {
      v41 = &v34[16 * v33];
      v42 = *((_QWORD *)v41 - 8);
      v43 = *((_QWORD *)v41 - 7);
      v47 = __OFSUB__(v43, v42);
      v44 = v43 - v42;
      if (v47)
        goto LABEL_127;
      v46 = *((_QWORD *)v41 - 6);
      v45 = *((_QWORD *)v41 - 5);
      v47 = __OFSUB__(v45, v46);
      v39 = v45 - v46;
      v40 = v47;
      if (v47)
        goto LABEL_128;
      v48 = v33 - 2;
      v49 = &v34[16 * v33 - 32];
      v51 = *(_QWORD *)v49;
      v50 = *((_QWORD *)v49 + 1);
      v47 = __OFSUB__(v50, v51);
      v52 = v50 - v51;
      if (v47)
        goto LABEL_129;
      v47 = __OFADD__(v39, v52);
      v53 = v39 + v52;
      if (v47)
        goto LABEL_131;
      if (v53 >= v44)
      {
        v71 = &v34[16 * v36];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v47 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v47)
          goto LABEL_137;
        v64 = v39 < v74;
        goto LABEL_79;
      }
    }
    else
    {
      if (v33 != 3)
      {
        v65 = *((_QWORD *)v30 + 4);
        v66 = *((_QWORD *)v30 + 5);
        v47 = __OFSUB__(v66, v65);
        v58 = v66 - v65;
        v59 = v47;
        goto LABEL_73;
      }
      v38 = *((_QWORD *)v30 + 4);
      v37 = *((_QWORD *)v30 + 5);
      v47 = __OFSUB__(v37, v38);
      v39 = v37 - v38;
      v40 = v47;
    }
    if ((v40 & 1) != 0)
      goto LABEL_130;
    v48 = v33 - 2;
    v54 = &v34[16 * v33 - 32];
    v56 = *(_QWORD *)v54;
    v55 = *((_QWORD *)v54 + 1);
    v57 = __OFSUB__(v55, v56);
    v58 = v55 - v56;
    v59 = v57;
    if (v57)
      goto LABEL_132;
    v60 = &v34[16 * v36];
    v62 = *(_QWORD *)v60;
    v61 = *((_QWORD *)v60 + 1);
    v47 = __OFSUB__(v61, v62);
    v63 = v61 - v62;
    if (v47)
      goto LABEL_134;
    if (__OFADD__(v58, v63))
      goto LABEL_136;
    if (v58 + v63 >= v39)
    {
      v64 = v39 < v63;
LABEL_79:
      if (v64)
        v36 = v48;
      goto LABEL_81;
    }
LABEL_73:
    if ((v59 & 1) != 0)
      goto LABEL_133;
    v67 = &v34[16 * v36];
    v69 = *(_QWORD *)v67;
    v68 = *((_QWORD *)v67 + 1);
    v47 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if (v47)
      goto LABEL_135;
    if (v70 < v58)
      goto LABEL_90;
LABEL_81:
    v75 = v36 - 1;
    if (v36 - 1 >= v33)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v9)
      goto LABEL_151;
    v76 = &v34[16 * v75];
    v77 = *(_QWORD *)v76;
    v78 = &v34[16 * v36];
    v79 = *((_QWORD *)v78 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v9 + 16 * *(_QWORD *)v76), (char *)(v9 + 16 * *(_QWORD *)v78), v9 + 16 * v79, v100);
    if (v1)
      break;
    if (v79 < v77)
      goto LABEL_124;
    if (v36 > *(_QWORD *)(v101 + 16))
      goto LABEL_125;
    *(_QWORD *)v76 = v77;
    *(_QWORD *)&v34[16 * v75 + 8] = v79;
    v80 = *(_QWORD *)(v101 + 16);
    if (v36 >= v80)
      goto LABEL_126;
    v30 = (char *)v101;
    v33 = v80 - 1;
    memmove(&v34[16 * v36], v78 + 16, 16 * (v80 - 1 - v36));
    *(_QWORD *)(v101 + 16) = v80 - 1;
    if (v80 <= 2)
      goto LABEL_90;
  }
LABEL_106:
  swift_bridgeObjectRelease();
  if (v99 < -1)
    goto LABEL_145;
  *(_QWORD *)(v98 + 16) = 0;
  swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  char v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  Swift::Int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD v153[3];
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;

  v159 = a1;
  v2 = a1[1];
  v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0)
      goto LABEL_182;
    if (v2)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, v159);
    return;
  }
  v4 = v3;
  v152 = v1;
  specialized static Array._allocateUninitialized(_:)(v2 / 2);
  v143 = v5;
  v144 = v2;
  v151 = v6;
  if (v2 > 0)
  {
    v142 = v4;
    v7 = 0;
    v8 = (char *)MEMORY[0x1E0DEE9D8];
    v9 = v2;
    while (1)
    {
      v10 = v7++;
      v150 = v10;
      if (v7 >= v9)
        goto LABEL_48;
      v11 = *v159;
      outlined init with copy of SignalProviding(*v159 + 40 * v7, (uint64_t)&v156);
      v146 = v11;
      outlined init with copy of SignalProviding(v11 + 40 * v10, (uint64_t)v153);
      v145 = closure #1 in DisambiguationSerialiser.init(actions:)(&v156, v153);
      if (v152)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v153);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v156);
        swift_bridgeObjectRelease();
        v133 = v144;
LABEL_143:
        if (v133 < -1)
          goto LABEL_184;
        *(_QWORD *)(v143 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      v152 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v153);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v156);
      v7 = v10 + 2;
      v148 = v9;
      if (v10 + 2 >= v9)
        goto LABEL_39;
      v12 = v11 + 40 * v10 + 40;
      do
      {
        outlined init with copy of SignalProviding(v12 + 40, (uint64_t)&v156);
        outlined init with copy of SignalProviding(v12, (uint64_t)v153);
        v13 = v157;
        v14 = v158;
        __swift_project_boxed_opaque_existential_1(&v156, v157);
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(v13, v14);
        if (!v16)
        {
          v35 = 0;
          goto LABEL_36;
        }
        v17 = v15;
        v18 = v16;
        v19 = v154;
        v20 = v155;
        __swift_project_boxed_opaque_existential_1(v153, v154);
        v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v19, v20);
        if (!v22)
          goto LABEL_33;
        v23 = v17 == v21 && v18 == v22;
        if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v24 = v157;
        v25 = v158;
        __swift_project_boxed_opaque_existential_1(&v156, v157);
        v26 = ActionProtocol.actionRepresentation.getter(v24, v25);
        v28 = v27;
        v29 = v154;
        v30 = v155;
        __swift_project_boxed_opaque_existential_1(v153, v154);
        v31 = ActionProtocol.actionRepresentation.getter(v29, v30);
        v33 = v32;
        if (v28)
        {
          if (v32)
          {
            if (v26 == v31 && v28 == v32)
            {
              swift_bridgeObjectRelease();
LABEL_33:
              v35 = 0;
            }
            else
            {
LABEL_21:
              v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
            }
            v9 = v148;
            goto LABEL_35;
          }
          swift_bridgeObjectRelease();
        }
        if (one-time initialization token for ranker != -1)
          swift_once();
        v36 = type metadata accessor for Logger();
        __swift_project_value_buffer(v36, (uint64_t)static Logger.ranker);
        v37 = Logger.logObject.getter();
        v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          v39 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v39 = 0;
          _os_log_impl(&dword_1C2E0C000, v37, v38, "DisambiguationSerialiser: at least 1 action has nil representation, this should not happen.", v39, 2u);
          MEMORY[0x1C3BCB4A4](v39, -1, -1);
        }

        v9 = v148;
        if (!v33)
        {
          v35 = 1;
          goto LABEL_36;
        }
        v35 = 0;
LABEL_35:
        swift_bridgeObjectRelease();
LABEL_36:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v153);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v156);
        if (((v145 ^ v35) & 1) != 0)
          goto LABEL_39;
        ++v7;
        v12 += 40;
      }
      while (v7 < v9);
      v7 = v9;
LABEL_39:
      if ((v145 & 1) != 0)
      {
        if (v7 >= v10)
        {
          if (v10 < v7)
          {
            v40 = v8;
            v41 = v10;
            v42 = 40 * v7 - 40;
            v43 = 40 * v41;
            v44 = v7;
            do
            {
              if (v41 != --v44)
              {
                if (!v146)
                  goto LABEL_191;
                v45 = v146 + v43;
                outlined init with take of AppSelectionSignalComponent((__int128 *)(v146 + v43), (uint64_t)&v156);
                v46 = *(_QWORD *)(v146 + v42 + 32);
                v47 = *(_OWORD *)(v146 + v42 + 16);
                *(_OWORD *)v45 = *(_OWORD *)(v146 + v42);
                *(_OWORD *)(v45 + 16) = v47;
                *(_QWORD *)(v45 + 32) = v46;
                outlined init with take of AppSelectionSignalComponent(&v156, v146 + v42);
              }
              ++v41;
              v42 -= 40;
              v43 += 40;
            }
            while (v41 < v44);
            v8 = v40;
            v9 = v148;
            v10 = v150;
          }
          goto LABEL_48;
        }
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
        return;
      }
LABEL_48:
      if (v7 < v9)
      {
        if (__OFSUB__(v7, v10))
          goto LABEL_183;
        if (v7 - v10 < v142)
        {
          if (__OFADD__(v10, v142))
            goto LABEL_185;
          if (v10 + v142 >= v9)
            v48 = v9;
          else
            v48 = v10 + v142;
          if (v48 < v10)
          {
LABEL_186:
            __break(1u);
            goto LABEL_187;
          }
          if (v7 == v48)
            goto LABEL_89;
          v147 = v8;
          v149 = v48;
          v49 = 40 * v7 - 40;
LABEL_58:
          v50 = v49;
          while (1)
          {
            v51 = *v159 + v50;
            outlined init with copy of SignalProviding(v51 + 40, (uint64_t)&v156);
            outlined init with copy of SignalProviding(v51, (uint64_t)v153);
            v52 = v157;
            v53 = v158;
            __swift_project_boxed_opaque_existential_1(&v156, v157);
            v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 40))(v52, v53);
            if (!v55)
            {
LABEL_86:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v153);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v156);
LABEL_87:
              ++v7;
              v49 += 40;
              v10 = v150;
              if (v7 == v149)
              {
                v7 = v149;
                v8 = v147;
                break;
              }
              goto LABEL_58;
            }
            v56 = v54;
            v57 = v55;
            v58 = v154;
            v59 = v155;
            __swift_project_boxed_opaque_existential_1(v153, v154);
            v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 40))(v58, v59);
            if (!v61)
              goto LABEL_85;
            v62 = v56 == v60 && v57 == v61;
            if (!v62 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              goto LABEL_72;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v63 = v157;
            v64 = v158;
            __swift_project_boxed_opaque_existential_1(&v156, v157);
            v65 = ActionProtocol.actionRepresentation.getter(v63, v64);
            v67 = v66;
            v68 = v154;
            v69 = v155;
            __swift_project_boxed_opaque_existential_1(v153, v154);
            v70 = ActionProtocol.actionRepresentation.getter(v68, v69);
            v72 = v71;
            if (v67)
            {
              if (v71)
              {
                if (v65 == v70 && v67 == v71)
                {
                  swift_bridgeObjectRelease();
LABEL_85:
                  swift_bridgeObjectRelease();
                  goto LABEL_86;
                }
LABEL_72:
                v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v153);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v156);
                if ((v74 & 1) == 0)
                  goto LABEL_87;
                goto LABEL_81;
              }
              swift_bridgeObjectRelease();
            }
            if (one-time initialization token for ranker != -1)
              swift_once();
            v75 = type metadata accessor for Logger();
            __swift_project_value_buffer(v75, (uint64_t)static Logger.ranker);
            v76 = Logger.logObject.getter();
            v77 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v76, v77))
            {
              v78 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v78 = 0;
              _os_log_impl(&dword_1C2E0C000, v76, v77, "DisambiguationSerialiser: at least 1 action has nil representation, this should not happen.", v78, 2u);
              MEMORY[0x1C3BCB4A4](v78, -1, -1);
            }

            if (v72)
              goto LABEL_85;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v153);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v156);
LABEL_81:
            v79 = *v159;
            if (!*v159)
              goto LABEL_189;
            v80 = v79 + v50;
            outlined init with take of AppSelectionSignalComponent((__int128 *)(v79 + v50 + 40), (uint64_t)&v156);
            v81 = *(_OWORD *)(v80 + 16);
            *(_OWORD *)(v80 + 40) = *(_OWORD *)v80;
            *(_OWORD *)(v80 + 56) = v81;
            *(_QWORD *)(v80 + 72) = *(_QWORD *)(v80 + 32);
            outlined init with take of AppSelectionSignalComponent(&v156, v80);
            v50 -= 40;
            if (v7 == ++v10)
              goto LABEL_87;
          }
        }
      }
LABEL_89:
      if (v7 < v10)
        goto LABEL_181;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v83 = *((_QWORD *)v8 + 2);
      v82 = *((_QWORD *)v8 + 3);
      v84 = v83 + 1;
      if (v83 >= v82 >> 1)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v82 > 1), v83 + 1, 1, v8);
      *((_QWORD *)v8 + 2) = v84;
      v85 = v8 + 32;
      v86 = &v8[16 * v83 + 32];
      *(_QWORD *)v86 = v150;
      *((_QWORD *)v86 + 1) = v7;
      if (v83)
      {
        while (2)
        {
          v87 = v84 - 1;
          if (v84 >= 4)
          {
            v92 = &v85[16 * v84];
            v93 = *((_QWORD *)v92 - 8);
            v94 = *((_QWORD *)v92 - 7);
            v98 = __OFSUB__(v94, v93);
            v95 = v94 - v93;
            if (v98)
              goto LABEL_166;
            v97 = *((_QWORD *)v92 - 6);
            v96 = *((_QWORD *)v92 - 5);
            v98 = __OFSUB__(v96, v97);
            v90 = v96 - v97;
            v91 = v98;
            if (v98)
              goto LABEL_167;
            v99 = v84 - 2;
            v100 = &v85[16 * v84 - 32];
            v102 = *(_QWORD *)v100;
            v101 = *((_QWORD *)v100 + 1);
            v98 = __OFSUB__(v101, v102);
            v103 = v101 - v102;
            if (v98)
              goto LABEL_168;
            v98 = __OFADD__(v90, v103);
            v104 = v90 + v103;
            if (v98)
              goto LABEL_170;
            if (v104 >= v95)
            {
              v122 = &v85[16 * v87];
              v124 = *(_QWORD *)v122;
              v123 = *((_QWORD *)v122 + 1);
              v98 = __OFSUB__(v123, v124);
              v125 = v123 - v124;
              if (v98)
                goto LABEL_176;
              v115 = v90 < v125;
            }
            else
            {
LABEL_108:
              if ((v91 & 1) != 0)
                goto LABEL_169;
              v99 = v84 - 2;
              v105 = &v85[16 * v84 - 32];
              v107 = *(_QWORD *)v105;
              v106 = *((_QWORD *)v105 + 1);
              v108 = __OFSUB__(v106, v107);
              v109 = v106 - v107;
              v110 = v108;
              if (v108)
                goto LABEL_171;
              v111 = &v85[16 * v87];
              v113 = *(_QWORD *)v111;
              v112 = *((_QWORD *)v111 + 1);
              v98 = __OFSUB__(v112, v113);
              v114 = v112 - v113;
              if (v98)
                goto LABEL_173;
              if (__OFADD__(v109, v114))
                goto LABEL_175;
              if (v109 + v114 < v90)
                goto LABEL_120;
              v115 = v90 < v114;
            }
            if (v115)
              v87 = v99;
          }
          else
          {
            if (v84 == 3)
            {
              v89 = *((_QWORD *)v8 + 4);
              v88 = *((_QWORD *)v8 + 5);
              v98 = __OFSUB__(v88, v89);
              v90 = v88 - v89;
              v91 = v98;
              goto LABEL_108;
            }
            v116 = *((_QWORD *)v8 + 4);
            v117 = *((_QWORD *)v8 + 5);
            v98 = __OFSUB__(v117, v116);
            v109 = v117 - v116;
            v110 = v98;
LABEL_120:
            if ((v110 & 1) != 0)
              goto LABEL_172;
            v118 = &v85[16 * v87];
            v120 = *(_QWORD *)v118;
            v119 = *((_QWORD *)v118 + 1);
            v98 = __OFSUB__(v119, v120);
            v121 = v119 - v120;
            if (v98)
              goto LABEL_174;
            if (v121 < v109)
              goto LABEL_137;
          }
          v126 = v87 - 1;
          if (v87 - 1 >= v84)
          {
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
            goto LABEL_186;
          }
          if (!*v159)
            goto LABEL_190;
          v127 = v8;
          v128 = &v85[16 * v126];
          v129 = *(_QWORD *)v128;
          v130 = &v85[16 * v87];
          v131 = *((_QWORD *)v130 + 1);
          specialized _merge<A>(low:mid:high:buffer:by:)(*v159 + 40 * *(_QWORD *)v128, *v159 + 40 * *(_QWORD *)v130, *v159 + 40 * v131, v151);
          if (v152)
          {
LABEL_142:
            swift_bridgeObjectRelease();
            v133 = v144;
            goto LABEL_143;
          }
          if (v131 < v129)
            goto LABEL_163;
          if (v87 > *((_QWORD *)v127 + 2))
            goto LABEL_164;
          *(_QWORD *)v128 = v129;
          *(_QWORD *)&v85[16 * v126 + 8] = v131;
          v132 = *((_QWORD *)v127 + 2);
          if (v87 >= v132)
            goto LABEL_165;
          v8 = v127;
          v84 = v132 - 1;
          memmove(&v85[16 * v87], v130 + 16, 16 * (v132 - 1 - v87));
          *((_QWORD *)v127 + 2) = v132 - 1;
          if (v132 <= 2)
            goto LABEL_137;
          continue;
        }
      }
      v84 = 1;
LABEL_137:
      v9 = v159[1];
      if (v7 >= v9)
        goto LABEL_146;
    }
  }
  v8 = (char *)MEMORY[0x1E0DEE9D8];
  v84 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_146:
  if (v84 >= 2)
  {
    v134 = *v159;
    do
    {
      v135 = v84 - 2;
      if (v84 < 2)
        goto LABEL_177;
      if (!v134)
        goto LABEL_192;
      v136 = v8;
      v137 = v8 + 32;
      v138 = *(_QWORD *)&v8[16 * v135 + 32];
      v139 = *(_QWORD *)&v8[16 * v84 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)(v134 + 40 * v138, v134 + 40 * *(_QWORD *)&v137[16 * v84 - 16], v134 + 40 * v139, v151);
      if (v152)
        goto LABEL_142;
      if (v139 < v138)
        goto LABEL_178;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v136 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v136);
      if (v135 >= *((_QWORD *)v136 + 2))
        goto LABEL_179;
      v140 = &v136[16 * v135 + 32];
      *(_QWORD *)v140 = v138;
      *((_QWORD *)v140 + 1) = v139;
      v141 = *((_QWORD *)v136 + 2);
      if (v84 > v141)
        goto LABEL_180;
      v8 = v136;
      memmove(&v136[16 * v84 + 16], &v136[16 * v84 + 32], 16 * (v141 - v84));
      *((_QWORD *)v136 + 2) = v141 - 1;
      v84 = v141 - 1;
    }
    while (v141 > 2);
  }
  swift_bridgeObjectRelease();
  if (v144 < -1)
    goto LABEL_188;
  *(_QWORD *)(v143 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1))
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v40 = result;
  if (a3 == a2)
    return result;
  v5 = a3;
  v6 = 40 * a3 - 40;
  while (2)
  {
    v7 = v40;
    v47 = v6;
    while (1)
    {
      v8 = *a4 + v6;
      outlined init with copy of SignalProviding(v8 + 40, (uint64_t)&v44);
      outlined init with copy of SignalProviding(v8, (uint64_t)v41);
      v9 = v45;
      v10 = v46;
      __swift_project_boxed_opaque_existential_1(&v44, v45);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(v9, v10);
      if (!v12)
        break;
      v13 = v11;
      v14 = v12;
      v16 = v42;
      v15 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(v16, v15);
      if (!v18)
        goto LABEL_30;
      v19 = v13 == v17 && v14 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = v45;
      v21 = v46;
      __swift_project_boxed_opaque_existential_1(&v44, v45);
      v22 = ActionProtocol.actionRepresentation.getter(v20, v21);
      v24 = v23;
      v25 = v42;
      v26 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      v27 = ActionProtocol.actionRepresentation.getter(v25, v26);
      v29 = v28;
      if (v24)
      {
        if (v28)
        {
          if (v22 == v27 && v24 == v28)
          {
            swift_bridgeObjectRelease();
LABEL_30:
            swift_bridgeObjectRelease();
            break;
          }
LABEL_17:
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
          result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
          if ((v31 & 1) == 0)
            goto LABEL_32;
          goto LABEL_26;
        }
        swift_bridgeObjectRelease();
      }
      if (one-time initialization token for ranker != -1)
        swift_once();
      v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.ranker);
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v35 = 0;
        _os_log_impl(&dword_1C2E0C000, v33, v34, "DisambiguationSerialiser: at least 1 action has nil representation, this should not happen.", v35, 2u);
        MEMORY[0x1C3BCB4A4](v35, -1, -1);
      }

      if (v29)
        goto LABEL_30;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
LABEL_26:
      v36 = *a4;
      if (!*a4)
      {
        __break(1u);
        return result;
      }
      v37 = v36 + v6;
      outlined init with take of AppSelectionSignalComponent((__int128 *)(v36 + v6 + 40), (uint64_t)&v44);
      v38 = *(_OWORD *)(v37 + 16);
      *(_OWORD *)(v37 + 40) = *(_OWORD *)v37;
      *(_OWORD *)(v37 + 56) = v38;
      *(_QWORD *)(v37 + 72) = *(_QWORD *)(v37 + 32);
      result = outlined init with take of AppSelectionSignalComponent(&v44, v37);
      v6 -= 40;
      if (v5 == ++v7)
        goto LABEL_32;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
LABEL_32:
    ++v5;
    v6 = v47 + 40;
    if (v5 != a2)
      continue;
    return result;
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v14;
  char *v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v18 = (char *)(a3 - 16);
    while (1)
    {
      v19 = v18 + 16;
      v20 = (char *)(v12 - 16);
      v21 = *(_QWORD *)(v12 - 16) == *((_QWORD *)v6 - 2) && *(_QWORD *)(v12 - 8) == *((_QWORD *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23)
          goto LABEL_43;
      }
      else
      {
        v22 = v19 != v6 || v18 >= v6;
        v20 = v6 - 16;
        v6 -= 16;
        if (!v22)
          goto LABEL_43;
      }
      *(_OWORD *)v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_47;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      v15 = v4;
      v14 = v7 == v4;
      v4 += 16;
      if (!v14)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v15 = v6;
    v14 = v7 == v6;
    v6 += 16;
    if (v14)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (_QWORD)v4) / 16, v6);
  return 1;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12)
      memmove(v12, v13, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (__dst != __src || &__src[16 * a2] <= __dst)
    return (char *)memmove(__dst, __src, 16 * a2);
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for FeatureDictionaryError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FeatureDictionaryError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for FeatureDictionaryError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FeatureDictionaryError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTag for FeatureDictionaryError()
{
  return 0;
}

ValueMetadata *type metadata accessor for FeatureDictionaryError()
{
  return &type metadata for FeatureDictionaryError;
}

uint64_t initializeBufferWithCopyOfBuffer for MixingModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for MixingModel(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MixingModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for MixingModel(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for MixingModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MixingModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MixingModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MixingModel()
{
  return &type metadata for MixingModel;
}

uint64_t static AppLaunchCountFeatureExtractor.extractedFeatures.getter()
{
  if (one-time initialization token for APP_LAUNCH_COUNT != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t AppLaunchCountFeatureExtractor.extractAppLaunchCount(from:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  Swift::String_optional v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v3 = ActionProtocol.inferBundleId()();
  if (v3.value._object)
  {
    __swift_project_boxed_opaque_existential_1(v1, v1[3]);
    type metadata accessor for AppLaunchCountSignal();
    v4 = MEMORY[0x1C3BCA1D8]();
    v5 = SiriSignalsContainer.get(from:query:defaultVal:)(v4, v3.value._countAndFlagsBits, (unint64_t)v3.value._object, 0);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      v8 = v5;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = specialized _NativeDictionary.mapValues<A>(_:)(v8);
      swift_bridgeObjectRelease();
      return (uint64_t)v9;
    }
  }
  else
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(_QWORD *)v7 = 0xD000000000000022;
    *(_QWORD *)(v7 + 8) = 0x80000001C2E99CF0;
    *(_BYTE *)(v7 + 16) = 1;
    return swift_willThrow();
  }
}

uint64_t AppLaunchCountFeatureExtractor.extractImpl(from:)(_QWORD *a1)
{
  return AppLaunchCountFeatureExtractor.extractAppLaunchCount(from:)(a1);
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance AppLaunchCountFeatureExtractor(_QWORD *a1)
{
  return AppLaunchCountFeatureExtractor.extractImpl(from:)(a1);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type CaarError and conformance CaarError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CaarError and conformance CaarError;
  if (!lazy protocol witness table cache variable for type CaarError and conformance CaarError)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CaarError, &type metadata for CaarError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaarError and conformance CaarError);
  }
  return result;
}

uint64_t initializeWithCopy for AppLaunchCountFeatureExtractor(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AppLaunchCountFeatureExtractor(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AppLaunchCountFeatureExtractor(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppLaunchCountFeatureExtractor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppLaunchCountFeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppLaunchCountFeatureExtractor()
{
  return &type metadata for AppLaunchCountFeatureExtractor;
}

uint64_t one-time initialization function for modelOutputToAutoConfirmAction()
{
  uint64_t result;

  result = Dictionary.init(dictionaryLiteral:)();
  static AutoSendOutput.modelOutputToAutoConfirmAction = result;
  return result;
}

uint64_t AutoSendOutput.init(decision:score:threshold:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21[2];
  uint64_t v22;

  v4 = v3;
  v8 = one-time initialization token for modelOutputToAutoConfirmAction;
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = static AutoSendOutput.modelOutputToAutoConfirmAction;
  if (*(_QWORD *)(static AutoSendOutput.modelOutputToAutoConfirmAction + 16)
    && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v11 & 1) != 0))
  {
    v12 = *(_BYTE *)(*(_QWORD *)(v9 + 56) + v10);
    *(_BYTE *)(v4 + 57) = v12;
    *(_BYTE *)(v4 + 56) = v12;
    swift_release();
    return CamLogOutput.init(prediction:score:threshold:)(a1, a2, a3);
  }
  else
  {
    swift_release();
    v21[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v14._object = (void *)0x80000001C2E99D60;
    v14._countAndFlagsBits = 0xD000000000000044;
    String.append(_:)(v14);
    v22 = a1;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.autoSend);
    swift_bridgeObjectRetain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain();
      v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2E0C000, v17, v18, "%s", v19, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    swift_bridgeObjectRelease_n();
    lazy protocol witness table accessor for type AutoConfirmError and conformance AutoConfirmError();
    swift_allocError();
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v20 + 8) = 0xE000000000000000;
    *(_BYTE *)(v20 + 16) = 5;
    swift_willThrow();
    type metadata accessor for AutoSendOutput();
    return swift_deallocPartialClassInstance();
  }
}

Swift::Void __swiftcall AutoSendOutput.overrideAction(action:enforcer:)(SiriCam::AutoConfirmAction action, Swift::String enforcer)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 57) = *(_BYTE *)action;
  *(Swift::String *)(v2 + 40) = enforcer;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
}

uint64_t AutoSendOutput.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AutoSendOutput()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type AutoConfirmError and conformance AutoConfirmError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutoConfirmError and conformance AutoConfirmError;
  if (!lazy protocol witness table cache variable for type AutoConfirmError and conformance AutoConfirmError)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for AutoConfirmError, &type metadata for AutoConfirmError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoConfirmError and conformance AutoConfirmError);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AutoSendInput(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  id v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = *(void **)&a2[v9];
    *(_QWORD *)&a1[v9] = v11;
    v12 = &a1[v10];
    v13 = &a2[v10];
    v14 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v14;
    v15 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    v16 = &a1[v15];
    v17 = &a2[v15];
    v18 = v11;
    swift_bridgeObjectRetain();
    v8(v16, v17, v7);
  }
  return a1;
}

uint64_t destroy for AutoSendInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);

  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 32), v4);
}

uint64_t initializeWithCopy for AutoSendInput(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = (_QWORD *)(a1 + v9);
  v12 = (_QWORD *)(a2 + v9);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = v10;
  swift_bridgeObjectRetain();
  v7(v15, v16, v6);
  return a1;
}

uint64_t assignWithCopy for AutoSendInput(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = *(void **)(a2 + v8);
  v10 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v11 = v9;

  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v7(a1 + a3[8], a2 + a3[8], v6);
  return a1;
}

uint64_t initializeWithTake for AutoSendInput(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v7(a1 + v9, a2 + v9, v6);
  return a1;
}

uint64_t assignWithTake for AutoSendInput(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);

  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v7(a1 + v15, a2 + v15, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoSendInput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E16D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoSendInput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E16DE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for UUID();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AutoSendInput()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AutoSendInput;
  if (!type metadata singleton initialization cache for AutoSendInput)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AutoSendInput()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoSendOutputProvider()
{
  return &type metadata for AutoSendOutputProvider;
}

void AutoSendOutputProvider.toAutoSendOutput(from:)(void *a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14[6];

  v2 = (void *)MEMORY[0x1C3BCA844](0xD00000000000001ALL, 0x80000001C2E99DB0);
  v3 = objc_msgSend(a1, sel_featureValueForName_, v2);

  if (v3 && (v4 = OUTLINED_FUNCTION_0_5(), v3, v4))
  {
    MLMultiArray.toDoubleScalar()();

    if (!v5)
      OUTLINED_FUNCTION_1_2();
  }
  else
  {
    OUTLINED_FUNCTION_2_3();
    _StringGuts.grow(_:)(60);
    OUTLINED_FUNCTION_3_2(0xD00000000000003ALL, (uint64_t)"Unable to retrieve model score from output feature name : ");
    v6._countAndFlagsBits = 0xD00000000000001ALL;
    v6._object = (void *)0x80000001C2E99DB0;
    String.append(_:)(v6);
    v7 = v14[0];
    v8 = v14[1];
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.autoSend);
    swift_bridgeObjectRetain_n();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v14[0] = swift_slowAlloc();
      *(_DWORD *)v12 = 136315138;
      swift_bridgeObjectRetain();
      v14[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2E0C000, v10, v11, "%s", v12, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    swift_bridgeObjectRelease_n();
    lazy protocol witness table accessor for type AutoConfirmError and conformance AutoConfirmError();
    swift_allocError();
    *(_QWORD *)v13 = v14[0];
    *(_QWORD *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + 16) = 5;
    swift_willThrow();
  }
}

id OUTLINED_FUNCTION_0_5()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 2228));
}

void OUTLINED_FUNCTION_1_2()
{
  JUMPOUT(0x1C3BCA844);
}

void OUTLINED_FUNCTION_3_2(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

id OUTLINED_FUNCTION_4_2(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t dispatch thunk of ScoreHeuristic.requiredInputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScoreHeuristic.requiredInputs.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ScoreHeuristic.requiredInputs.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ScoreHeuristic.score(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t RankerContext.rrCandidates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RankerContext.responseMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_1_3() + 20);
  v4 = OUTLINED_FUNCTION_2_4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RankerContext()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RankerContext;
  if (!type metadata singleton initialization cache for RankerContext)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t RankerContext.previousConversationHandlerId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_1_3() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RankerContext.maxNLProba.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_1_3() + 28));
}

uint64_t RankerContext.init(rrCandidates:responseMode:previousConversationHandlerId:maxNLProba:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  char *v18;

  *a7 = a1;
  v13 = (int *)OUTLINED_FUNCTION_1_3();
  v14 = (char *)a7 + v13[5];
  v15 = OUTLINED_FUNCTION_2_4();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a2, v15);
  v17 = (_QWORD *)((char *)a7 + v13[6]);
  *v17 = a3;
  v17[1] = a4;
  v18 = (char *)a7 + v13[7];
  *(_QWORD *)v18 = a5;
  v18[8] = a6 & 1;
  return result;
}

uint64_t RankerContext.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(100);
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  v6._object = (void *)0x80000001C2E99ED0;
  OUTLINED_FUNCTION_0_6(v6);
  v0 = type metadata accessor for RRCandidate();
  v1 = swift_bridgeObjectRetain();
  v7._countAndFlagsBits = MEMORY[0x1C3BCA9B8](v1, v0);
  OUTLINED_FUNCTION_0_6(v7);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_0();
  v2._object = (void *)0x80000001C2E99EF0;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_1_3();
  v8._countAndFlagsBits = ResponseMode.aceValue.getter();
  OUTLINED_FUNCTION_0_6(v8);
  OUTLINED_FUNCTION_1_0();
  v9._countAndFlagsBits = 0xD000000000000021;
  v9._object = (void *)0x80000001C2E99F10;
  OUTLINED_FUNCTION_0_6(v9);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v10._countAndFlagsBits = OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_0_6(v10);
  OUTLINED_FUNCTION_1_0();
  v3._countAndFlagsBits = 0x504C4E78616D202CLL;
  v3._object = (void *)0xEE00203A61626F72;
  String.append(_:)(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  v11._countAndFlagsBits = OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_0_6(v11);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t dispatch thunk of Caar.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 8))(a1);
}

uint64_t dispatch thunk of Caar.rank(requestId:caarId:rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of Caar.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for RankerContext(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ResponseMode();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v7 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (char *)v7 + v14;
    v19 = (char *)a2 + v14;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for RankerContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ResponseMode();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for RankerContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ResponseMode();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (char *)a1 + v12;
  v17 = (char *)a2 + v12;
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RankerContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *(_QWORD *)v14 = v16;
  return a1;
}

_QWORD *initializeWithTake for RankerContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v11[8] = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  return a1;
}

_QWORD *assignWithTake for RankerContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for RankerContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E17B04(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_2_4();
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RankerContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *sub_1C2E17B80(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_2_4();
    return (_QWORD *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for RankerContext()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ResponseMode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined copy of CaarError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for CaarError(uint64_t a1)
{
  return outlined consume of CaarError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of CaarError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CaarError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CaarError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CaarError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CaarError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of CaarError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CaarError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of CaarError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CaarError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CaarError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for CaarError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for CaarError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CaarError()
{
  return &type metadata for CaarError;
}

void OUTLINED_FUNCTION_0_6(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_1_3()
{
  return type metadata accessor for RankerContext();
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return type metadata accessor for ResponseMode();
}

uint64_t OUTLINED_FUNCTION_4_3()
{
  return String.init<A>(describing:)();
}

id static MLMultiArray.make1DSetOrSequence(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    v10 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v3 = (uint64_t *)(v2 + 32);
    do
    {
      v4 = *v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      a1 = swift_allocObject();
      v5 = a1;
      *(_OWORD *)(a1 + 16) = xmmword_1C2E94230;
      *(_QWORD *)(a1 + 32) = v4;
      v6 = *(_QWORD *)(v10 + 16);
      if (v6 >= *(_QWORD *)(v10 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v10 + 16) = v6 + 1;
      *(_QWORD *)(v10 + 8 * v6 + 32) = v5;
      ++v3;
      --v1;
    }
    while (v1);
  }
  OUTLINED_FUNCTION_29(a1, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  v7 = OUTLINED_FUNCTION_26_0();
  v8 = static MLMultiArray.make1DSetOrSequence(from:)(v7);
  swift_bridgeObjectRelease();
  return v8;
}

{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 32;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2E93F60;
    *(_QWORD *)(inited + 32) = 1;
    *(_QWORD *)(inited + 40) = v3;
    *(_QWORD *)(inited + 48) = v5;
    v7 = specialized _arrayForceCast<A, B>(_:)(inited);
    swift_setDeallocating();
    v1 = objc_allocWithZone(MEMORY[0x1E0C9E970]);
    v8 = @nonobjc MLMultiArray.init(shape:dataType:)(v7, 65600);
    if (!v2)
    {
      v1 = v8;
      swift_bridgeObjectRetain();
      v9 = 0;
      v17 = v4;
      do
      {
        v10 = *(_QWORD *)(v4 + 8 * v9);
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          swift_bridgeObjectRetain();
          for (i = 0; i != v11; ++i)
          {
            v13 = *(double *)(v10 + 8 * i + 32);
            v14 = swift_allocObject();
            *(_OWORD *)(v14 + 16) = xmmword_1C2E93F60;
            *(_QWORD *)(v14 + 32) = 0;
            *(_QWORD *)(v14 + 40) = v9;
            *(_QWORD *)(v14 + 48) = i;
            specialized MLMultiArray.safeAssign<A>(_:at:)(v14, v13);
            OUTLINED_FUNCTION_24();
          }
          swift_bridgeObjectRelease();
        }
        v4 = v17;
        ++v9;
      }
      while (v9 != v3);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v15 = 0xD000000000000037;
    *(_QWORD *)(v15 + 8) = 0x80000001C2E99F70;
    *(_BYTE *)(v15 + 16) = 1;
    swift_willThrow();
  }
  return v1;
}

uint64_t static MLMultiArray.makeScalar(from:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = specialized _arrayForceCast<A, B>(_:)((uint64_t)&outlined read-only object #0 of static MLMultiArray.makeScalar(from:));
  v4 = objc_allocWithZone(MEMORY[0x1E0C9E970]);
  @nonobjc MLMultiArray.init(shape:dataType:)(v3, 65600);
  if (!v1)
    specialized MLMultiArray.safeAssign<A>(_:at:)((uint64_t)&outlined read-only object #1 of static MLMultiArray.makeScalar(from:), a1);
  return OUTLINED_FUNCTION_26_0();
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLMultiArray.toDoubleScalar()()
{
  uint64_t v0;
  id v1;
  double v2;
  double v3;
  uint64_t v5;
  id v6;

  if (OUTLINED_FUNCTION_12_0(v0, sel_count) != (id)1)
  {
    OUTLINED_FUNCTION_6_0();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_29_0();
    v6 = OUTLINED_FUNCTION_41(v5, sel_shape);
    OUTLINED_FUNCTION_29((uint64_t)v6, &lazy cache variable for type metadata for NSNumber);
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_43();
    OUTLINED_FUNCTION_25_0();
  }
  v1 = OUTLINED_FUNCTION_24_0(1, sel_objectAtIndexedSubscript_);
  Double.init(truncating:)();
  v3 = v2;

  return v3;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLMultiArray.toIntScalar()()
{
  uint64_t v0;
  id v1;
  Swift::Int v2;
  uint64_t v4;
  id v5;

  if (OUTLINED_FUNCTION_12_0(v0, sel_count) != (id)1)
  {
    OUTLINED_FUNCTION_6_0();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_29_0();
    v5 = OUTLINED_FUNCTION_41(v4, sel_shape);
    OUTLINED_FUNCTION_29((uint64_t)v5, &lazy cache variable for type metadata for NSNumber);
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_43();
    OUTLINED_FUNCTION_25_0();
  }
  v1 = OUTLINED_FUNCTION_24_0(1, sel_objectAtIndexedSubscript_);
  v2 = Int.init(truncating:)();

  return v2;
}

uint64_t MLMultiArrayDataType.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0x656C62756F64;
  v2 = 0x6E776F6E6B6E75;
  if (a1 == 65552)
    v2 = 0x363174616F6C66;
  if (a1 != 65600)
    v1 = v2;
  if (a1 == 65568)
    v1 = 0x323374616F6C66;
  if (a1 == 131104)
    return 0x3233746E69;
  else
    return v1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLMultiArrayDataType()
{
  uint64_t *v0;

  return MLMultiArrayDataType.description.getter(*v0);
}

void specialized MLMultiArray.safeAssign<A>(_:at:)(uint64_t a1, double a2)
{
  void *v2;
  uint64_t v3;
  char v6;
  void *v7;
  Class isa;
  Swift::String v9;
  Swift::String v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;

  v6 = MLMultiArray.indexExists(_:)(a1);
  if (!v3)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (void *)MEMORY[0x1C3BCAA54](a2);
      specialized _arrayForceCast<A, B>(_:)(a1);
      type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setObject_forKeyedSubscript_, v7, isa);

    }
    else
    {
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = MEMORY[0x1C3BCA9B8](a1, MEMORY[0x1E0DEB418]);
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x80000001C2E99FB0;
      v10._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v10);
      v11 = objc_msgSend(v2, sel_shape);
      v12 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
      v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v14._countAndFlagsBits = MEMORY[0x1C3BCA9B8](v13, v12);
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
      swift_allocError();
      *(_QWORD *)v15 = 0x207865646E49;
      *(_QWORD *)(v15 + 8) = 0xE600000000000000;
      *(_BYTE *)(v15 + 16) = 2;
      swift_willThrow();
    }
  }
}

void specialized MLMultiArray.safeAssign<A>(_:at:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  char v5;
  Class isa;
  Class v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;

  v5 = MLMultiArray.indexExists(_:)(a2);
  if (!v3)
  {
    if ((v5 & 1) != 0)
    {
      isa = Int._bridgeToObjectiveC()().super.super.isa;
      specialized _arrayForceCast<A, B>(_:)(a2);
      type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
      v7 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setObject_forKeyedSubscript_, isa, v7);

    }
    else
    {
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = MEMORY[0x1C3BCA9B8](a2, MEMORY[0x1E0DEB418]);
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x80000001C2E99FB0;
      v9._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v9);
      v10 = objc_msgSend(v2, sel_shape);
      v11 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
      v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v13._countAndFlagsBits = MEMORY[0x1C3BCA9B8](v12, v11);
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
      swift_allocError();
      *(_QWORD *)v14 = 0x207865646E49;
      *(_QWORD *)(v14 + 8) = 0xE600000000000000;
      *(_BYTE *)(v14 + 16) = 2;
      swift_willThrow();
    }
  }
}

uint64_t MLMultiArray.indexExists(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  char v21;

  v2 = v1;
  v4 = objc_msgSend(v2, sel_shape);
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    v7 = 0;
    while (1)
    {
      if ((v5 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x1C3BCAC88](v7, v5);
      else
        v8 = *(id *)(v5 + 8 * v7 + 32);
      v9 = v8;
      v10 = Int.init(exactly:)();
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        v14 = objc_msgSend(v9, sel_description);
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;

        v18._countAndFlagsBits = v15;
        v18._object = v17;
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0x746E69206F7420;
        v19._object = (void *)0xE700000000000000;
        String.append(_:)(v19);
        lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
        swift_allocError();
        *(_QWORD *)v20 = 0xD00000000000001ELL;
        *(_QWORD *)(v20 + 8) = 0x80000001C2E99FD0;
        *(_BYTE *)(v20 + 16) = 0;
        swift_willThrow();

        return v21 & 1;
      }
      if (v7 >= *(_QWORD *)(a1 + 16))
        break;
      v12 = *(_QWORD *)(a1 + 32 + 8 * v7);
      if (v12 < 0)
      {
        swift_bridgeObjectRelease();

LABEL_16:
        v21 = 0;
        return v21 & 1;
      }
      v13 = v10;

      if (v12 >= v13)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if (v6 == ++v7)
        goto LABEL_19;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  v21 = 1;
  return v21 & 1;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    do
    {
      v4 += 8;
      Int._bridgeToObjectiveC()();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[40];
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      outlined init with copy of SignalProviding(v4, (uint64_t)v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignalProviding);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppSelectionSignalComponent);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v9;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v5 + 1;
      outlined init with take of AppSelectionSignalComponent(&v8, v2 + 40 * v5 + 32);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t v15;

  v2 = type metadata accessor for RankedAction();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v7 = v15;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      outlined init with copy of RankedAction(v8, (uint64_t)v5);
      v15 = v7;
      v10 = *(_QWORD *)(v7 + 16);
      if (v10 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v7 = v15;
      }
      v13 = v2;
      v14 = &protocol witness table for RankedAction;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
      outlined init with copy of RankedAction((uint64_t)v5, (uint64_t)boxed_opaque_existential_1);
      *(_QWORD *)(v7 + 16) = v10 + 1;
      outlined init with take of AppSelectionSignalComponent(&v12, v7 + 40 * v10 + 32);
      outlined destroy of RankedAction((uint64_t)v5);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  OUTLINED_FUNCTION_0_2();
}

id static MLMultiArray.makeScalar(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;

  v3 = specialized _arrayForceCast<A, B>(_:)((uint64_t)&outlined read-only object #0 of static MLMultiArray.makeScalar(from:));
  v4 = objc_allocWithZone(MEMORY[0x1E0C9E970]);
  v5 = @nonobjc MLMultiArray.init(shape:dataType:)(v3, 131104);
  if (!v1)
    specialized MLMultiArray.safeAssign<A>(_:at:)(a1, (uint64_t)&outlined read-only object #1 of static MLMultiArray.makeScalar(from:));
  return v5;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLMultiArray.toBoolScalar()()
{
  uint64_t v0;
  id v1;
  char v2;
  uint64_t v4;
  id v5;

  if (OUTLINED_FUNCTION_12_0(v0, sel_count) != (id)1)
  {
    OUTLINED_FUNCTION_6_0();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_29_0();
    v5 = OUTLINED_FUNCTION_41(v4, sel_shape);
    OUTLINED_FUNCTION_29((uint64_t)v5, &lazy cache variable for type metadata for NSNumber);
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_43();
    OUTLINED_FUNCTION_25_0();
  }
  v1 = OUTLINED_FUNCTION_24_0(1, sel_objectAtIndexedSubscript_);
  v2 = Bool.init(truncating:)();

  return v2 & 1;
}

void MLMultiArray.toDoubleArray()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  unint64_t v4;
  char v5;
  void *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;

  if (OUTLINED_FUNCTION_2_5() != (id)65600)
  {
    OUTLINED_FUNCTION_2_3();
    _StringGuts.grow(_:)(38);
    v7 = OUTLINED_FUNCTION_14_0();
    v15 = OUTLINED_FUNCTION_1_4(v7, v8, v9, v10, v11, v12, v13, v14, v19, v20);
    v21._countAndFlagsBits = MLMultiArrayDataType.description.getter((uint64_t)v15);
    OUTLINED_FUNCTION_4_4(v21);
    OUTLINED_FUNCTION_3_1();
    OUTLINED_FUNCTION_19_0();
    v16 = OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_8_0(v16, v17);
    goto LABEL_10;
  }
  v2 = OUTLINED_FUNCTION_9_0();
  specialized Array.init(repeating:count:)((uint64_t)v2, 0.0);
  v3 = OUTLINED_FUNCTION_23_0();
  objc_msgSend(v3, sel_dataPointer);
  v4 = (unint64_t)OUTLINED_FUNCTION_11_0();
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = (id)v4;
    if (!v4)
      goto LABEL_10;
    OUTLINED_FUNCTION_33_0();
    if (!v5)
    {
      if ((OUTLINED_FUNCTION_37() & 1) != 0)
        goto LABEL_6;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  specialized _ArrayBuffer._consumeAndCreateNew()();
  v0 = v18;
LABEL_6:
  v6 = 0;
  do
  {
    *(_QWORD *)(v0 + 8 * (_QWORD)v6 + 32) = *(_QWORD *)(v1 + 8 * (_QWORD)v6);
    v6 = (char *)v6 + 1;
  }
  while (v3 != v6);
LABEL_10:
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_7_0();
}

void MLMultiArray.toIntArray()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  unint64_t v4;
  char v5;
  void *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;

  if (OUTLINED_FUNCTION_2_5() != (id)131104)
  {
    OUTLINED_FUNCTION_2_3();
    _StringGuts.grow(_:)(35);
    v7 = OUTLINED_FUNCTION_14_0();
    v15 = OUTLINED_FUNCTION_1_4(v7, v8, v9, v10, v11, v12, v13, v14, v19, v20);
    v21._countAndFlagsBits = MLMultiArrayDataType.description.getter((uint64_t)v15);
    OUTLINED_FUNCTION_4_4(v21);
    OUTLINED_FUNCTION_3_1();
    OUTLINED_FUNCTION_19_0();
    v16 = OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_8_0(v16, v17);
    goto LABEL_10;
  }
  v2 = OUTLINED_FUNCTION_9_0();
  specialized Array.init(repeating:count:)(0, (uint64_t)v2);
  v3 = OUTLINED_FUNCTION_23_0();
  objc_msgSend(v3, sel_dataPointer);
  v4 = (unint64_t)OUTLINED_FUNCTION_11_0();
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = (id)v4;
    if (!v4)
      goto LABEL_10;
    OUTLINED_FUNCTION_33_0();
    if (!v5)
    {
      if ((OUTLINED_FUNCTION_37() & 1) != 0)
        goto LABEL_6;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  specialized _ArrayBuffer._consumeAndCreateNew()(v0);
  v0 = v18;
LABEL_6:
  v6 = 0;
  do
  {
    *(_DWORD *)(v0 + 4 * (_QWORD)v6 + 32) = *(_DWORD *)(v1 + 4 * (_QWORD)v6);
    v6 = (char *)v6 + 1;
  }
  while (v3 != v6);
LABEL_10:
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_7_0();
}

void MLMultiArray.toFloatArray()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  unint64_t v4;
  char v5;
  void *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;

  if (OUTLINED_FUNCTION_2_5() != (id)65568)
  {
    OUTLINED_FUNCTION_2_3();
    _StringGuts.grow(_:)(37);
    v7 = OUTLINED_FUNCTION_14_0();
    v15 = OUTLINED_FUNCTION_1_4(v7, v8, v9, v10, v11, v12, v13, v14, v19, v20);
    v21._countAndFlagsBits = MLMultiArrayDataType.description.getter((uint64_t)v15);
    OUTLINED_FUNCTION_4_4(v21);
    OUTLINED_FUNCTION_3_1();
    OUTLINED_FUNCTION_19_0();
    v16 = OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_8_0(v16, v17);
    goto LABEL_10;
  }
  v2 = OUTLINED_FUNCTION_9_0();
  specialized Array.init(repeating:count:)((uint64_t)v2, 0.0);
  v3 = OUTLINED_FUNCTION_23_0();
  objc_msgSend(v3, sel_dataPointer);
  v4 = (unint64_t)OUTLINED_FUNCTION_11_0();
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = (id)v4;
    if (!v4)
      goto LABEL_10;
    OUTLINED_FUNCTION_33_0();
    if (!v5)
    {
      if ((OUTLINED_FUNCTION_37() & 1) != 0)
        goto LABEL_6;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  specialized _ArrayBuffer._consumeAndCreateNew()(v0);
  v0 = v18;
LABEL_6:
  v6 = 0;
  do
  {
    *(_DWORD *)(v0 + 4 * (_QWORD)v6 + 32) = *(_DWORD *)(v1 + 4 * (_QWORD)v6);
    v6 = (char *)v6 + 1;
  }
  while (v3 != v6);
LABEL_10:
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_7_0();
}

BOOL static MLMultiArray.MLMultiArrayCodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void MLMultiArray.MLMultiArrayCodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t MLMultiArray.MLMultiArrayCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x6570616873 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6570795461746164 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 1635017060 && a2 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t MLMultiArray.MLMultiArrayCodingKeys.init(intValue:)()
{
  return 3;
}

Swift::Int MLMultiArray.MLMultiArrayCodingKeys.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t MLMultiArray.MLMultiArrayCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t MLMultiArray.MLMultiArrayCodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x6570616873;
  if (a1 == 1)
    return 0x6570795461746164;
  return 1635017060;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLMultiArray.MLMultiArrayCodingKeys(char *a1, char *a2)
{
  return static MLMultiArray.MLMultiArrayCodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  unsigned __int8 *v0;

  return MLMultiArray.MLMultiArrayCodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MLMultiArray.MLMultiArrayCodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  MLMultiArray.MLMultiArrayCodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  char *v0;

  return MLMultiArray.MLMultiArrayCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MLMultiArray.MLMultiArrayCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = MLMultiArray.MLMultiArrayCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  return MLMultiArray.MLMultiArrayCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MLMultiArray.MLMultiArrayCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MLMultiArray.MLMultiArrayCodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  lazy protocol witness table accessor for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  lazy protocol witness table accessor for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys();
  return CodingKey.debugDescription.getter();
}

void MLMultiArray.encode(to:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MLMultiArray.MLMultiArrayCodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8 = objc_msgSend(v2, sel_shape);
  OUTLINED_FUNCTION_29((uint64_t)v8, &lazy cache variable for type metadata for NSNumber);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_24();
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v30 = v2;
  if (!v10)
  {
    OUTLINED_FUNCTION_24();
    v12 = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  v33 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v10 & 0x8000000000000000) == 0)
  {
    v27 = v5;
    v28 = v7;
    v29 = v4;
    v11 = 0;
    v12 = v33;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x1C3BCAC88](v11, v9);
      else
        v13 = *(id *)(v9 + 8 * v11 + 32);
      v14 = v13;
      v15 = Int.init(truncating:)();

      v33 = v12;
      v16 = *(_QWORD *)(v12 + 16);
      if (v16 >= *(_QWORD *)(v12 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v12 = v33;
      }
      ++v11;
      *(_QWORD *)(v12 + 16) = v16 + 1;
      *(_QWORD *)(v12 + 8 * v16 + 32) = v15;
    }
    while (v10 != v11);
    OUTLINED_FUNCTION_24();
    v7 = v28;
    v4 = v29;
    v5 = v27;
LABEL_14:
    v33 = v12;
    v32 = 0;
    OUTLINED_FUNCTION_27_0();
    lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int], MEMORY[0x1E0DEB420]);
    OUTLINED_FUNCTION_40();
    v17 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v17)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return;
    }
    swift_bridgeObjectRelease();
    v18 = v30;
    objc_msgSend(v30, sel_dataType);
    LOBYTE(v33) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v19 = objc_msgSend(v18, sel_dataType);
    if (v19 == (id)65568)
    {
      MLMultiArray.toFloatArray()();
      OUTLINED_FUNCTION_17_0(v24);
      v21 = (uint64_t *)&demangling cache variable for type metadata for [Float];
      OUTLINED_FUNCTION_27_0();
      v22 = (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance <A> [A];
      v23 = MEMORY[0x1E0DEB198];
    }
    else if (v19 == (id)131104)
    {
      MLMultiArray.toIntArray()();
      OUTLINED_FUNCTION_17_0(v25);
      v21 = (uint64_t *)&demangling cache variable for type metadata for [Int32];
      OUTLINED_FUNCTION_27_0();
      v22 = (unint64_t *)&lazy protocol witness table cache variable for type [Int32] and conformance <A> [A];
      v23 = MEMORY[0x1E0DEDBD0];
    }
    else
    {
      if (v19 != (id)65600)
      {
        lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
        OUTLINED_FUNCTION_2_1();
        *(_QWORD *)v26 = 0xD000000000000026;
        *(_QWORD *)(v26 + 8) = 0x80000001C2E99F40;
        *(_BYTE *)(v26 + 16) = 0;
        swift_willThrow();
        goto LABEL_17;
      }
      MLMultiArray.toDoubleArray()();
      OUTLINED_FUNCTION_17_0(v20);
      v21 = &demangling cache variable for type metadata for [Double];
      OUTLINED_FUNCTION_27_0();
      v22 = (unint64_t *)&lazy protocol witness table cache variable for type [Double] and conformance <A> [A];
      v23 = MEMORY[0x1E0DEB080];
    }
    lazy protocol witness table accessor for type [Int] and conformance <A> [A](v22, v21, v23);
    OUTLINED_FUNCTION_40();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
LABEL_17:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return;
  }
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys;
  if (!lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for MLMultiArray.MLMultiArrayCodingKeys, &unk_1E7CC1338);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys;
  if (!lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for MLMultiArray.MLMultiArrayCodingKeys, &unk_1E7CC1338);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys;
  if (!lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for MLMultiArray.MLMultiArrayCodingKeys, &unk_1E7CC1338);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys;
  if (!lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for MLMultiArray.MLMultiArrayCodingKeys, &unk_1E7CC1338);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys);
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance MLMultiArray(_QWORD *a1)
{
  MLMultiArray.encode(to:)(a1);
}

id @nonobjc MLMultiArray.init(shape:dataType:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  Class isa;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9[0] = 0;
  v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, isa, a2, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Token>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D506C0], (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8], (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3D70], (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CamParse>, type metadata accessor for CamParse, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3BCB3D8](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CoreMLError and conformance CoreMLError;
  if (!lazy protocol witness table cache variable for type CoreMLError and conformance CoreMLError)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CoreMLError, &type metadata for CoreMLError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoreMLError and conformance CoreMLError);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3;
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEAF10], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of CoreMLError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for CoreMLError(uint64_t a1)
{
  return outlined consume of CoreMLError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of CoreMLError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CoreMLError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CoreMLError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CoreMLError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CoreMLError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of CoreMLError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CoreMLError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of CoreMLError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreMLError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreMLError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreMLError()
{
  return &type metadata for CoreMLError;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MLMultiArray.MLMultiArrayCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MLMultiArray.MLMultiArrayCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2E19FCC + 4 * byte_1C2E94535[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2E1A000 + 4 * byte_1C2E94530[v4]))();
}

uint64_t sub_1C2E1A000(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E1A008(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E1A010);
  return result;
}

uint64_t sub_1C2E1A01C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E1A024);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2E1A028(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E1A030(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for MLMultiArray.MLMultiArrayCodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for MLMultiArray.MLMultiArrayCodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for MLMultiArray.MLMultiArrayCodingKeys()
{
  return &unk_1E7CC1338;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_16_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_38();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v5)
  {
    OUTLINED_FUNCTION_36(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_39();
    v15 = _swift_stdlib_malloc_size(v14);
    v14[2] = v4;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  v16 = OUTLINED_FUNCTION_34();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_16_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_38();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v5)
  {
    OUTLINED_FUNCTION_36(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_39();
    v15 = _swift_stdlib_malloc_size(v14);
    v14[2] = v4;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 8);
  }
  v16 = OUTLINED_FUNCTION_34();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_32_0();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_16_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_38();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v5)
  {
    OUTLINED_FUNCTION_36(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_39();
    v15 = _swift_stdlib_malloc_size(v14);
    v14[2] = v4;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 16);
  }
  v16 = OUTLINED_FUNCTION_34();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_32_0();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
    v10 = swift_allocObject();
    v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = MEMORY[0x1E0DEE9D8];
  }
  v12 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12, v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
}

uint64_t outlined init with copy of SignalProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with take of AppSelectionSignalComponent(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UUID, [String : MLFeatureValue])>);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]))
                  - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_24;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]))
                                       - 8)
                           + 80);
  v16 = a4 + ((v15 + 32) & ~v15);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v16, v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v16, v8);
  }
  swift_release();
  return (size_t)v13;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD), void (*a7)(uint64_t, uint64_t, char *), void (*a8)(uint64_t, uint64_t, char *))
{
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  size_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v12 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_38();
      if (v14)
      {
LABEL_24:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  else
  {
    v13 = a2;
  }
  v16 = *(_QWORD *)(a4 + 16);
  if (v13 <= v16)
    v17 = *(_QWORD *)(a4 + 16);
  else
    v17 = v13;
  if (!v17)
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_36(a1, a2, a3, a4, a5);
  v18 = *(_QWORD *)(a6(0) - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v21 = (_QWORD *)swift_allocObject();
  v22 = _swift_stdlib_malloc_size(v21);
  if (!v19)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v22 - v20 == 0x8000000000000000 && v19 == -1)
    goto LABEL_23;
  v21[2] = v16;
  v21[3] = 2 * ((uint64_t)(v22 - v20) / v19);
LABEL_18:
  v24 = *(unsigned __int8 *)(*(_QWORD *)(a6(0) - 8) + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = (char *)v21 + v25;
  v27 = a4 + v25;
  if ((v12 & 1) != 0)
  {
    a7(v27, v16, v26);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a8(v27, v16, v26);
  }
  OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_0_2();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined destroy of RankedAction(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RankedAction();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id OUTLINED_FUNCTION_1_4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  return objc_msgSend(v10, (SEL)(v11 + 968));
}

id OUTLINED_FUNCTION_2_5()
{
  void *v0;

  return objc_msgSend(v0, sel_dataType);
}

void OUTLINED_FUNCTION_3_3(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
}

void OUTLINED_FUNCTION_4_4(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_5_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = 1;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_6_0()
{
  _StringGuts.grow(_:)(42);
}

uint64_t OUTLINED_FUNCTION_8_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = 0;
  return swift_willThrow();
}

id OUTLINED_FUNCTION_9_0()
{
  void *v0;

  return objc_msgSend(v0, sel_count);
}

uint64_t OUTLINED_FUNCTION_10_0()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

id OUTLINED_FUNCTION_11_0()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1480));
}

id OUTLINED_FUNCTION_12_0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_17_0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = result;
  *(_BYTE *)(v1 - 81) = 2;
  return result;
}

unint64_t OUTLINED_FUNCTION_19_0()
{
  return lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
}

id OUTLINED_FUNCTION_23_0()
{
  void *v0;

  return objc_retainAutorelease(v0);
}

id OUTLINED_FUNCTION_24_0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

void OUTLINED_FUNCTION_25_0()
{
  JUMPOUT(0x1C3BCA9B8);
}

uint64_t OUTLINED_FUNCTION_26_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_27_0()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_34()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_35()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return __swift_instantiateConcreteTypeFromMangledName(a5);
}

uint64_t OUTLINED_FUNCTION_37()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_39()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_40()
{
  uint64_t v0;

  return v0 - 72;
}

id OUTLINED_FUNCTION_41(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void OUTLINED_FUNCTION_43()
{
  void *v0;

}

uint64_t one-time initialization function for common()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static Log.common = result;
  return result;
}

void one-time initialization function for ambiguityHandling()
{
  OUTLINED_FUNCTION_2_6();
  static Log.ambiguityHandling = OS_os_log.init(subsystem:category:)();
  OUTLINED_FUNCTION_1_5();
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

void one-time initialization function for autoSend()
{
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_7();
  static Log.autoSend = OS_os_log.init(subsystem:category:)();
  OUTLINED_FUNCTION_1_5();
}

void one-time initialization function for ranker()
{
  OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_0_7();
  static Log.ranker = OS_os_log.init(subsystem:category:)();
  OUTLINED_FUNCTION_1_5();
}

uint64_t one-time initialization function for common(uint64_t a1)
{
  return one-time initialization function for common(a1, static Logger.common, &one-time initialization token for common, (id *)&static Log.common);
}

uint64_t one-time initialization function for ambiguityHandling(uint64_t a1)
{
  return one-time initialization function for common(a1, static Logger.ambiguityHandling, &one-time initialization token for ambiguityHandling, (id *)&static Log.ambiguityHandling);
}

uint64_t one-time initialization function for autoSend(uint64_t a1)
{
  return one-time initialization function for common(a1, static Logger.autoSend, &one-time initialization token for autoSend, (id *)&static Log.autoSend);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t one-time initialization function for ranker(uint64_t a1)
{
  return one-time initialization function for common(a1, static Logger.ranker, &one-time initialization token for ranker, (id *)&static Log.ranker);
}

uint64_t one-time initialization function for common(uint64_t a1, uint64_t *a2, _QWORD *a3, id *a4)
{
  uint64_t v7;
  id v8;

  v7 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  if (*a3 != -1)
    swift_once();
  v8 = *a4;
  return Logger.init(_:)();
}

unint64_t OUTLINED_FUNCTION_0_7()
{
  return 0xD000000000000012;
}

unint64_t OUTLINED_FUNCTION_2_6()
{
  return type metadata accessor for OS_os_log();
}

uint64_t PommesResponse.sash()@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  id v39;
  char *v40;
  uint64_t v41;
  id v42;

  v2 = v1;
  v41 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  MEMORY[0x1E0C80A78](v41);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v40 = (char *)&v35 - v12;
  v13 = dispatch thunk of PommesResponse.experiences.getter();
  if (!(v13 >> 62))
  {
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_18;
LABEL_3:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v13 & 0xC000000000000001) == 0, v13);
  if ((v13 & 0xC000000000000001) != 0)
    v14 = (id)MEMORY[0x1C3BCAC88](0, v13);
  else
    v14 = *(id *)(v13 + 32);
  v15 = v14;
  swift_bridgeObjectRelease();
  type metadata accessor for GenericExperience();
  if (swift_dynamicCastClass())
  {
    v39 = v15;
    v16 = GenericExperience.components.getter();
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v36 = v6;
      v37 = v2;
      v38 = a1;
      v18 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v35 = v16;
      v19 = v16 + v18;
      v20 = *(_QWORD *)(v8 + 72);
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      while (1)
      {
        v21(v11, v19, v7);
        Apple_Parsec_Siri_V2alpha_ExperienceComponent.layoutExperience.getter();
        v22 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasSash.getter();
        OUTLINED_FUNCTION_0_8();
        if ((v22 & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
        v19 += v20;
        if (!--v17)
        {
          v23 = 1;
          v2 = v37;
          a1 = v38;
          v6 = v36;
          goto LABEL_14;
        }
      }
      v6 = v36;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v36, v11, v7);
      v23 = 0;
      v2 = v37;
      a1 = v38;
    }
    else
    {
      v23 = 1;
    }
LABEL_14:
    __swift_storeEnumTagSinglePayload((uint64_t)v6, v23, 1, v7);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) != 1)
    {
      v24 = v40;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v40, v6, v7);
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.layoutExperience.getter();
      Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.sash.getter();

      OUTLINED_FUNCTION_0_8();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v24, v7);
      v25 = 0;
      goto LABEL_24;
    }

    outlined destroy of Apple_Parsec_Siri_V2alpha_ExperienceComponent?((uint64_t)v6);
  }
  else
  {

  }
LABEL_19:
  if (one-time initialization token for common != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.common);
  v27 = v2;
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v30 = 138412290;
    v42 = v27;
    v32 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v31 = v27;

    _os_log_impl(&dword_1C2E0C000, v28, v29, "No sash found in pommes response: %@", v30, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  v25 = 1;
LABEL_24:
  v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash();
  return __swift_storeEnumTagSinglePayload(a1, v25, 1, v33);
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_ExperienceComponent?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 96));
}

id static CaarRequestLogger.wrapIntoLogEvent(message:)(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99388]), sel_init);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99360]), sel_init);
  if (v4)
  {
    objc_msgSend(v3, sel_setStartedOrChanged_, a1);
    objc_msgSend(v4, sel_setCaarRequestContext_, v3);
  }

  return v4;
}

uint64_t dispatch thunk of static FeatureStoreLoggingProtocol.write(streamId:object:requestId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 16))(a1);
}

uint64_t dispatch thunk of static FeatureStoreLoggingProtocol.write(streamId:interaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of static FeatureStoreLoggingProtocol.createStream(streamId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t FeatureStoreStream.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6C65646F4D6D6143;
  if (a1 == 1)
    return 0x65646F4D72616143;
  return 0x646E65536F747541;
}

_QWORD *assignWithCopy for AnyEncodable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AnyEncodable(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyEncodable(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyEncodable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyEncodable()
{
  return &type metadata for AnyEncodable;
}

uint64_t AnyEncodable.encode(to:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyEncodable(uint64_t a1)
{
  uint64_t (**v1)(void);

  return AnyEncodable.encode(to:)(a1, *v1);
}

id static CaarModelLogger.map(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  double v49;
  uint64_t v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v6 = type metadata accessor for UUID();
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_4_5();
  v10 = v9 - v8;
  v11 = type metadata accessor for RankedAction();
  v64 = *(_QWORD *)(v11 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_4_5();
  v15 = v14 - v13;
  type metadata accessor for CamModelMetadata();
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_4_5();
  v19 = v18 - v17;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([RankedAction], CamModelMetadata, CAARTrialEnrollment));
  OUTLINED_FUNCTION_6_1();
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v59 + *(int *)(v25 + 48) - v26;
  *(uint64_t *)((char *)&v59 - v26) = a1;
  v28 = a2;
  v29 = (char *)&v59 - v26;
  outlined init with copy of CamModelMetadata(v28, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
  v30 = *(int *)(v20 + 64);
  v66 = v29;
  v31 = &v29[v30];
  v32 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v31 = *(_OWORD *)a3;
  *((_OWORD *)v31 + 1) = v32;
  v33 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v31 + 2) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v31 + 3) = v33;
  v34 = objc_allocWithZone(MEMORY[0x1E0D99378]);
  v65 = a1;
  swift_bridgeObjectRetain();
  outlined retain of CAARTrialEnrollment(a3);
  v35 = objc_msgSend(v34, sel_init);
  if (v35)
  {
    v36 = (uint64_t)&v24[*(int *)(v20 + 48)];
    outlined init with copy of CamModelMetadata((uint64_t)v27, v36, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
    outlined init with take of CamModelMetadata(v36, v19);
    v37 = v65;
    OUTLINED_FUNCTION_3_4();
    outlined retain of CAARTrialEnrollment(a3);
    v38 = (void *)specialized static ModelLoggingProtocol.setAssetInformation(modelMetadata:namespace:)(v19, 0xD000000000000013, 0x80000001C2E99AC0);
    objc_msgSend(v35, sel_setAsset_, v38);
    v39 = *(unsigned __int8 *)(v19 + 48);
    v40 = v19;
    if (v39 != 2)
      objc_msgSend(v35, sel_setIsShadowLog_, v39 & 1);
    v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99380]), sel_init);
    if (v41)
    {
      v42 = v41;
      v63 = v38;
      v43 = *(_QWORD *)(v37 + 16);
      if (!v43)
      {
        OUTLINED_FUNCTION_2_7();
        v51 = v63;
        v50 = (uint64_t)v66;
LABEL_13:
        objc_msgSend(v35, sel_setModelOutput_, v42);
        v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993C0]), sel_init);
        if (v52)
        {
          v53 = v52;
          if (*(_QWORD *)(a3 + 40))
          {
            OUTLINED_FUNCTION_3_4();
            OUTLINED_FUNCTION_0_9();
          }
          OUTLINED_FUNCTION_1_6((uint64_t)v52, sel_setDeploymentId_);

          if (*(_QWORD *)(a3 + 56))
          {
            OUTLINED_FUNCTION_3_4();
            OUTLINED_FUNCTION_0_9();
          }
          OUTLINED_FUNCTION_1_6(v54, sel_setRolloutId_);

          if (*(_QWORD *)(a3 + 24))
          {
            OUTLINED_FUNCTION_3_4();
            OUTLINED_FUNCTION_0_9();
          }
          OUTLINED_FUNCTION_1_6(v55, sel_setTreatmentId_);

          if (*(_QWORD *)(a3 + 8))
          {
            OUTLINED_FUNCTION_3_4();
            OUTLINED_FUNCTION_0_9();
          }
          v56 = OUTLINED_FUNCTION_5_1();
          OUTLINED_FUNCTION_1_6(v56, sel_setExperimentId_);

          v57 = v53;
          objc_msgSend(v35, sel_setTrialEnrollment_, v57);

        }
        else
        {

          OUTLINED_FUNCTION_5_1();
          v35 = 0;
        }
        goto LABEL_26;
      }
      v60 = v35;
      v61 = a3;
      v62 = v40;
      v44 = v37 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
      v45 = *(_QWORD *)(v64 + 72);
      while (1)
      {
        outlined init with copy of CamModelMetadata(v44, v15, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
        v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99348]), sel_init);
        if (!v46)
          break;
        v47 = v46;
        type metadata accessor for SISchemaUUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v10, v15 + *(int *)(v11 + 36), v68);
        v48 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v47, sel_setActionCandidateId_, v48);

        v49 = *(double *)(v15 + *(int *)(v11 + 28));
        *(float *)&v49 = v49;
        objc_msgSend(v47, sel_setModelScore_, v49);
        objc_msgSend(v42, sel_addActionModelOutputs_, v47);

        outlined destroy of CamModelMetadata(v15, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
        v44 += v45;
        if (!--v43)
        {
          swift_bridgeObjectRelease();
          a3 = v61;
          v40 = v62;
          v50 = (uint64_t)v66;
          v35 = v60;
          v51 = v63;
          goto LABEL_13;
        }
      }

      outlined release of CAARTrialEnrollment(v61);
      outlined destroy of CamModelMetadata(v15, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      swift_bridgeObjectRelease();
      v35 = 0;
      v40 = v62;
    }
    else
    {
      OUTLINED_FUNCTION_2_7();

      OUTLINED_FUNCTION_5_1();
      v35 = 0;
    }
    v50 = (uint64_t)v66;
LABEL_26:
    outlined destroy of CamModelMetadata(v40, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
    goto LABEL_27;
  }
  v50 = (uint64_t)v66;
LABEL_27:
  outlined destroy of ([RankedAction], CamModelMetadata, CAARTrialEnrollment)(v50);
  return v35;
}

uint64_t outlined retain of CAARTrialEnrollment(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of ([RankedAction], CamModelMetadata, CAARTrialEnrollment)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([RankedAction], CamModelMetadata, CAARTrialEnrollment));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of CAARTrialEnrollment(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with copy of CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CamModelMetadata(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t type metadata accessor for SISchemaUUID()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SISchemaUUID;
  if (!lazy cache variable for type metadata for SISchemaUUID)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  }
  return result;
}

void OUTLINED_FUNCTION_0_9()
{
  JUMPOUT(0x1C3BCA844);
}

id OUTLINED_FUNCTION_1_6(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  uint64_t v0;

  return outlined release of CAARTrialEnrollment(v0);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance DateTimeOptions@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = specialized OptionSet.intersection(_:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance DateTimeOptions(uint64_t *a1)
{
  return specialized OptionSet<>.formIntersection(_:)(*a1);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DateTimeOptions(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance DateTimeOptions(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isSuperset(of:)(*a1, *v1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DateTimeOptions(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void *one-time initialization function for top13LocaleMap()
{
  void *result;

  result = (void *)Dictionary.init(dictionaryLiteral:)();
  top13LocaleMap._rawValue = result;
  return result;
}

void *one-time initialization function for top13RegionMap()
{
  void *result;

  result = (void *)Dictionary.init(dictionaryLiteral:)();
  top13RegionMap._rawValue = result;
  return result;
}

void *one-time initialization function for top13LanguageMap()
{
  void *result;

  result = (void *)Dictionary.init(dictionaryLiteral:)();
  top13LanguageMap._rawValue = result;
  return result;
}

uint64_t ForcedDisambiguation.trialFactor.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(_QWORD, _QWORD))((char *)sub_1C2E1BE6C + 4 * byte_1C2E947A0[a1]))(0, 0);
}

unint64_t sub_1C2E1BE6C()
{
  return 0xD000000000000027;
}

unint64_t sub_1C2E1BEA4()
{
  return 0xD000000000000023;
}

void ForcedDisambiguation.overrideRate.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1C2E1BEF0()
{
  return CamDoubleUserDefaults.value.getter(2);
}

void ForcedDisambiguation.cooldownKey.getter(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1C2E1BF60()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v3;

  v1._countAndFlagsBits = 0xD000000000000016;
  v3 = v0 + 10;
  v1._object = (void *)0x80000001C2E99730;
  String.append(_:)(v1);
  OUTLINED_FUNCTION_3_1();
  return v3;
}

uint64_t ForcedDisambiguation.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1C2E1C008 + 4 * byte_1C2E947AC[a1]))(0xD000000000000021, 0x80000001C2E99700);
}

unint64_t sub_1C2E1C008()
{
  return 0xD000000000000016;
}

uint64_t sub_1C2E1C024()
{
  return OUTLINED_FUNCTION_0_10();
}

uint64_t sub_1C2E1C038()
{
  return OUTLINED_FUNCTION_2_8();
}

void ForcedDisambiguation.cooldownPeriodInDays.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1C2E1C080()
{
  return 84;
}

Swift::Bool __swiftcall ForcedDisambiguation.decision()()
{
  char v0;
  void *v1;
  char v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _DWORD *v6;
  os_log_type_t v7;
  _DWORD *v8;

  v2 = v0;
  if (one-time initialization token for common != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_14_1();
  v4 = OUTLINED_FUNCTION_8_1(v3, (uint64_t)static Logger.common);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (_DWORD *)OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_4();
    *v6 = 136315138;
    __asm { BR              X10 }
  }

  if (!ForcedDisambiguation.inCooldown()(v2))
    __asm { BR              X11 }
  Logger.logObject.getter();
  v7 = OUTLINED_FUNCTION_12_1();
  if (OUTLINED_FUNCTION_4_6(v7))
  {
    v8 = (_DWORD *)OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_4();
    *v8 = 136315394;
    __asm { BR              X10 }
  }

  return 0;
}

BOOL ForcedDisambiguation.inCooldown()(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double v12;
  double v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _DWORD *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _DWORD *v22;
  uint64_t v23;
  os_log_type_t v24;
  _DWORD *v25;
  void (*v27)(char *, uint64_t);
  __int128 v28;
  uint64_t v29;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  ForcedDisambiguation.cooldownPeriodInDays.getter(a1);
  if ((v10 & 1) != 0)
  {
    if (one-time initialization token for common != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.common);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (_DWORD *)swift_slowAlloc();
      *(_QWORD *)&v28 = swift_slowAlloc();
      *v22 = 136315138;
      __asm { BR              X10 }
    }
    goto LABEL_18;
  }
  v11 = v9;
  ForcedDisambiguation.cooldownKey.getter(a1);
  static CamUserHistoryDefaultsManager.getValue(key:)(&v28);
  swift_bridgeObjectRelease();
  if (!v29)
  {
    outlined destroy of Any?((uint64_t)&v28);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    if (one-time initialization token for common != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.common);
    v20 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v24))
    {
      v25 = (_DWORD *)swift_slowAlloc();
      *(_QWORD *)&v28 = swift_slowAlloc();
      *v25 = 136315138;
      __asm { BR              X10 }
    }
LABEL_18:

    return 0;
  }
  Date.init(timeIntervalSince1970:)();
  Date.init()();
  Date.timeIntervalSince(_:)();
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v6, v2);
  if (one-time initialization token for common != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.common);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v27 = v14;
    v18 = (_DWORD *)swift_slowAlloc();
    *(_QWORD *)&v28 = swift_slowAlloc();
    *v18 = 136315394;
    __asm { BR              X10 }
  }

  v14(v8, v2);
  return v13 < (double)(86400 * v11);
}

Swift::Double __swiftcall ForcedDisambiguation.getRate()()
{
  char v0;
  void *v1;
  signed __int8 v2;
  double v3;
  char v4;
  double v5;
  uint64_t v6;
  os_log_type_t v7;
  _DWORD *v8;
  void *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  os_log_type_t v14;
  _DWORD *v15;
  uint64_t v16;
  void *v17;
  os_log_type_t v18;
  _DWORD *v19;

  v2 = v0;
  ForcedDisambiguation.overrideRate.getter(v0);
  if ((v4 & 1) == 0)
  {
    v5 = v3;
    if (one-time initialization token for common != -1)
      swift_once();
    v6 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v6, (uint64_t)static Logger.common);
    v7 = OUTLINED_FUNCTION_12_1();
    if (OUTLINED_FUNCTION_4_6(v7))
    {
      v8 = (_DWORD *)OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_4();
      *v8 = 136315394;
      __asm { BR              X10 }
    }
LABEL_17:

    return v5;
  }
  ForcedDisambiguation.trialFactor.getter(v2);
  if (v9)
  {
    v1 = v9;
    *(double *)&v10 = COERCE_DOUBLE(static TrialProvider.fetchDoubleFactorFromTrial(_:)());
    v12 = v11;
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      v5 = *(double *)&v10;
      if (one-time initialization token for common != -1)
        swift_once();
      v13 = OUTLINED_FUNCTION_14_1();
      OUTLINED_FUNCTION_8_1(v13, (uint64_t)static Logger.common);
      v14 = OUTLINED_FUNCTION_12_1();
      if (OUTLINED_FUNCTION_4_6(v14))
      {
        v15 = (_DWORD *)OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_4();
        *v15 = 136315394;
        __asm { BR              X10 }
      }
      goto LABEL_17;
    }
  }
  if (one-time initialization token for common != -1)
    swift_once();
  v16 = OUTLINED_FUNCTION_14_1();
  v17 = (void *)OUTLINED_FUNCTION_8_1(v16, (uint64_t)static Logger.common);
  v18 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_4_6(v18))
  {
    v19 = (_DWORD *)OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_4();
    *v19 = 136315394;
    __asm { BR              X10 }
  }

  return dbl_1C2E948B0[v2];
}

void ForcedDisambiguation.startCooldown()(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForcedDisambiguation.cooldownKey.getter(a1);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v8[3] = MEMORY[0x1E0DEB070];
  v8[0] = v7;
  static CamUserHistoryDefaultsManager.setValue(key:value:)();
}

uint64_t sub_1C2E1D110()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(v0 - 96);
}

SiriCam::ForcedDisambiguation_optional __swiftcall ForcedDisambiguation.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ForcedDisambiguation.init(rawValue:), v2);
  OUTLINED_FUNCTION_3_1();
  if (v3 >= 4)
    return (SiriCam::ForcedDisambiguation_optional)4;
  else
    return (SiriCam::ForcedDisambiguation_optional)v3;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ForcedDisambiguation(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance ForcedDisambiguation()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ForcedDisambiguation(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ForcedDisambiguation(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::ForcedDisambiguation_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ForcedDisambiguation@<W0>(Swift::String *a1@<X0>, SiriCam::ForcedDisambiguation_optional *a2@<X8>)
{
  SiriCam::ForcedDisambiguation_optional result;

  result.value = ForcedDisambiguation.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ForcedDisambiguation@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ForcedDisambiguation.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t result;

  a4();
  v5 = *a1 + 8;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

void specialized static BinaryFloatingPoint<>.random<A>(in:using:)(double a1, double a2)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000) != 0)
    specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL);
  else
    __break(1u);
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x1C3BCB4BC](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x1C3BCB4BC](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForcedDisambiguation(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ForcedDisambiguation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C2E1D480 + 4 * byte_1C2E947E1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C2E1D4B4 + 4 * byte_1C2E947DC[v4]))();
}

uint64_t sub_1C2E1D4B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E1D4BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E1D4C4);
  return result;
}

uint64_t sub_1C2E1D4D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E1D4D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C2E1D4DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E1D4E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForcedDisambiguation()
{
  return &type metadata for ForcedDisambiguation;
}

unint64_t lazy protocol witness table accessor for type ForcedDisambiguation and conformance ForcedDisambiguation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForcedDisambiguation and conformance ForcedDisambiguation;
  if (!lazy protocol witness table cache variable for type ForcedDisambiguation and conformance ForcedDisambiguation)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for ForcedDisambiguation, &type metadata for ForcedDisambiguation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForcedDisambiguation and conformance ForcedDisambiguation);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_10()
{
  return 0x534549545F4C4C41;
}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return 0x444E45534F545541;
}

BOOL OUTLINED_FUNCTION_4_6(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2048;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_6_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

unint64_t OUTLINED_FUNCTION_7_1()
{
  return 0xD000000000000016;
}

uint64_t OUTLINED_FUNCTION_8_1(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_9_1(uint64_t a1, uint64_t a2, ...)
{
  unint64_t v2;
  va_list va;

  va_start(va, a2);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v2, (uint64_t *)va);
}

void OUTLINED_FUNCTION_11_1(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_impl(a1, v4, a3, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_12_1()
{
  return static os_log_type_t.info.getter();
}

uint64_t OUTLINED_FUNCTION_13_1()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return type metadata accessor for Logger();
}

uint64_t OUTLINED_FUNCTION_16_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

unint64_t OUTLINED_FUNCTION_17_1()
{
  return 0xD000000000000016;
}

uint64_t *initializeBufferWithCopyOfBuffer for AutoSendInputFeatureExtractor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v5 = *(int *)(a3 + 36);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v8))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v6, v7, v11);
      *(_QWORD *)&v6[v8[5]] = *(_QWORD *)&v7[v8[5]];
      v12 = v8[6];
      v13 = *(void **)&v7[v12];
      *(_QWORD *)&v6[v12] = v13;
      *(_QWORD *)&v6[v8[7]] = *(_QWORD *)&v7[v8[7]];
      swift_retain();
      v14 = v13;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, (uint64_t)v8);
    }
  }
  return v3;
}

uint64_t destroy for AutoSendInputFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  swift_release();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for WordEmbeddingFeatureExtractor();
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
    swift_release();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AutoSendInputFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 36);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v5, v6, v9);
    *(_QWORD *)&v5[v7[5]] = *(_QWORD *)&v6[v7[5]];
    v10 = v7[6];
    v11 = *(void **)&v6[v10];
    *(_QWORD *)&v5[v10] = v11;
    *(_QWORD *)&v5[v7[7]] = *(_QWORD *)&v6[v7[7]];
    swift_retain();
    v12 = v11;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, (uint64_t)v7);
  }
  return a1;
}

_QWORD *assignWithCopy for AutoSendInputFeatureExtractor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9);
  if (!EnumTagSinglePayload)
  {
    if (!v11)
    {
      v18 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v7, v8, v18);
      *(_QWORD *)&v7[v9[5]] = *(_QWORD *)&v8[v9[5]];
      swift_retain();
      swift_release();
      v19 = v9[6];
      v20 = *(void **)&v7[v19];
      v21 = *(void **)&v8[v19];
      *(_QWORD *)&v7[v19] = v21;
      v22 = v21;

      *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of WordEmbeddingFeatureExtractor((uint64_t)v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  v12 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v7, v8, v12);
  *(_QWORD *)&v7[v9[5]] = *(_QWORD *)&v8[v9[5]];
  v13 = v9[6];
  v14 = *(void **)&v8[v13];
  *(_QWORD *)&v7[v13] = v14;
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  swift_retain();
  v15 = v14;
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
  return a1;
}

uint64_t initializeWithTake for AutoSendInputFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 36);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v5, v6, v9);
    *(_QWORD *)&v5[v7[5]] = *(_QWORD *)&v6[v7[5]];
    *(_QWORD *)&v5[v7[6]] = *(_QWORD *)&v6[v7[6]];
    *(_QWORD *)&v5[v7[7]] = *(_QWORD *)&v6[v7[7]];
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, (uint64_t)v7);
  }
  return a1;
}

_QWORD *assignWithTake for AutoSendInputFeatureExtractor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  *a1 = *a2;
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v10);
  if (!EnumTagSinglePayload)
  {
    if (!v12)
    {
      v16 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v8, v9, v16);
      *(_QWORD *)&v8[v10[5]] = *(_QWORD *)&v9[v10[5]];
      swift_release();
      v17 = v10[6];
      v18 = *(void **)&v8[v17];
      *(_QWORD *)&v8[v17] = *(_QWORD *)&v9[v17];

      *(_QWORD *)&v8[v10[7]] = *(_QWORD *)&v9[v10[7]];
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of WordEmbeddingFeatureExtractor((uint64_t)v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  v13 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
  *(_QWORD *)&v8[v10[5]] = *(_QWORD *)&v9[v10[5]];
  *(_QWORD *)&v8[v10[6]] = *(_QWORD *)&v9[v10[6]];
  *(_QWORD *)&v8[v10[7]] = *(_QWORD *)&v9[v10[7]];
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, (uint64_t)v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoSendInputFeatureExtractor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E1DD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AutoSendInputFeatureExtractor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E1DD90(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AutoSendInputFeatureExtractor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AutoSendInputFeatureExtractor;
  if (!type metadata singleton initialization cache for AutoSendInputFeatureExtractor)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for AutoSendInputFeatureExtractor()
{
  unint64_t v0;

  type metadata accessor for WordEmbeddingFeatureExtractor?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for WordEmbeddingFeatureExtractor?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WordEmbeddingFeatureExtractor?)
  {
    type metadata accessor for WordEmbeddingFeatureExtractor();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WordEmbeddingFeatureExtractor?);
  }
}

#error "1C2E1DFEC: call analysis failed (funcsize=75)"

uint64_t specialized FeatureExtracting.extract(from:)(uint64_t a1)
{
  return specialized FeatureExtracting.extract(from:)(a1, CRRFeatureExtractor.extractImpl(from:), &one-time initialization token for extractedFeatures, &static CRRFeatureExtractor.extractedFeatures, one-time initialization function for extractedFeatures);
}

{
  return specialized FeatureExtracting.extract(from:)(a1, AsrSimpleFeatureExtractor.extractImpl(from:), &one-time initialization token for extractedFeatures, &static AsrSimpleFeatureExtractor.extractedFeatures, one-time initialization function for extractedFeatures);
}

{
  return specialized FeatureExtracting.extract(from:)(a1, SnrFeatureExtractor.extractImpl(from:), &one-time initialization token for extractedFeatures, &static SnrFeatureExtractor.extractedFeatures, one-time initialization function for extractedFeatures);
}

{
  return specialized FeatureExtracting.extract(from:)(a1, ConversationHistoryFeatureExtractor.extractImpl(from:), type metadata accessor for ConversationHistoryFeatureExtractor, static ConversationHistoryFeatureExtractor.extractedFeatures.getter);
}

{
  return specialized FeatureExtracting.extract(from:)(a1, AffinityRankFeatureExtractor.extractImpl(from:), type metadata accessor for AffinityRankFeatureExtractor, static AffinityRankFeatureExtractor.extractedFeatures.getter);
}

#error "1C2E1E190: call analysis failed (funcsize=85)"

#error "1C2E1E318: call analysis failed (funcsize=85)"

uint64_t specialized FeatureExtracting.extract(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19[4];

  v3 = DeviceContextFeatureExtractor.extractImpl(from:)(a1, a2);
  if (!v2)
  {
    if (one-time initialization token for extractedFeatures != -1)
      swift_once();
    v4 = swift_bridgeObjectRetain();
    v5 = specialized Set.init<A>(_:)(v4);
    v6 = swift_bridgeObjectRetain();
    v7 = specialized Set.init<A>(_:)(v6);
    v8 = specialized Set.subtracting(_:)(v7, v5);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v8 + 16))
    {
      swift_bridgeObjectRelease();
      v19[0] = 0;
      v19[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v9._countAndFlagsBits = 0x7365727574616546;
      v9._object = (void *)0xE900000000000020;
      String.append(_:)(v9);
      v10._countAndFlagsBits = Set.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11._object = (void *)0x80000001C2E9A200;
      v11._countAndFlagsBits = 0xD00000000000002ALL;
      String.append(_:)(v11);
      if (one-time initialization token for common != -1)
        swift_once();
      v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.common);
      swift_bridgeObjectRetain_n();
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        v16 = swift_slowAlloc();
        v19[0] = v16;
        *(_DWORD *)v15 = 136315138;
        swift_bridgeObjectRetain();
        v19[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2E0C000, v13, v14, "%s", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v16, -1, -1);
        MEMORY[0x1C3BCB4A4](v15, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      lazy protocol witness table accessor for type CamError and conformance CamError();
      swift_allocError();
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0xE000000000000000;
      *(_BYTE *)(v17 + 16) = 1;
      swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return v3;
}

#error "1C2E1E804: call analysis failed (funcsize=86)"

#error "1C2E1E984: call analysis failed (funcsize=85)"

uint64_t specialized FeatureExtracting.extract(from:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[4];

  v2 = WordEmbeddingFeatureExtractor.extractImpl(from:)(a1);
  if (!v1)
  {
    if (one-time initialization token for extractedFeatures != -1)
      swift_once();
    v3 = swift_bridgeObjectRetain();
    v4 = specialized Set.init<A>(_:)(v3);
    v5 = swift_bridgeObjectRetain();
    v6 = specialized Set.init<A>(_:)(v5);
    v7 = specialized Set.subtracting(_:)(v6, v4);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v7 + 16))
    {
      swift_bridgeObjectRelease();
      v18[0] = 0;
      v18[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v8._countAndFlagsBits = 0x7365727574616546;
      v8._object = (void *)0xE900000000000020;
      String.append(_:)(v8);
      v9._countAndFlagsBits = Set.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10._object = (void *)0x80000001C2E9A200;
      v10._countAndFlagsBits = 0xD00000000000002ALL;
      String.append(_:)(v10);
      if (one-time initialization token for common != -1)
        swift_once();
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.common);
      swift_bridgeObjectRetain_n();
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v15 = swift_slowAlloc();
        v18[0] = v15;
        *(_DWORD *)v14 = 136315138;
        swift_bridgeObjectRetain();
        v18[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2E0C000, v12, v13, "%s", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v15, -1, -1);
        MEMORY[0x1C3BCB4A4](v14, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      lazy protocol witness table accessor for type CamError and conformance CamError();
      swift_allocError();
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0xE000000000000000;
      *(_BYTE *)(v16 + 16) = 1;
      swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return v2;
}

#error "1C2E1EE1C: call analysis failed (funcsize=75)"

#error "1C2E1EFC8: call analysis failed (funcsize=89)"

#error "1C2E1F14C: call analysis failed (funcsize=86)"

#error "1C2E1F2D4: call analysis failed (funcsize=85)"

#error "1C2E1F45C: call analysis failed (funcsize=85)"

#error "1C2E1F5D0: call analysis failed (funcsize=75)"

#error "1C2E1F728: call analysis failed (funcsize=75)"

#error "1C2E1F880: call analysis failed (funcsize=75)"

#error "1C2E1F9F0: call analysis failed (funcsize=85)"

uint64_t specialized Dictionary.update(other:allowDuplicateKeys:)(uint64_t a1, int a2)
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, a2, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
}

{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, a2, &demangling cache variable for type metadata for _NativeDictionary<String, MLFeatureValue>);
}

uint64_t specialized Dictionary.update(other:allowDuplicateKeys:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  void *v29;
  char v30;
  id v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  Swift::Int v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t result;
  Swift::String v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v67;
  _QWORD *v68;
  int64_t v69;

  v4 = v3;
  HIDWORD(v65) = a2;
  v63 = a1 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a1 + 64);
  v62 = (unint64_t)(63 - v6) >> 6;
  v8 = swift_bridgeObjectRetain();
  v16 = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v67 = (v7 - 1) & v7;
  v17 = __clz(__rbit64(v7)) | (v16 << 6);
  v69 = v16;
  while (1)
  {
    v22 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v17);
    v23 = *v22;
    v24 = v22[1];
    v25 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v17);
    if ((v65 & 0x100000000) != 0)
    {
      OUTLINED_FUNCTION_2();
      v26 = v25;
    }
    else
    {
      v27 = *(_QWORD *)(*v4 + 16);
      OUTLINED_FUNCTION_2();
      v28 = v25;
      if (v27)
      {
        v29 = v28;
        OUTLINED_FUNCTION_38_0();
        if ((v30 & 1) != 0)
        {
          _StringGuts.grow(_:)(41);
          v50._object = (void *)0x80000001C2E9A230;
          v50._countAndFlagsBits = 0xD000000000000027;
          String.append(_:)(v50);
          _print_unlocked<A, B>(_:_:)();
          lazy protocol witness table accessor for type FeatureDictionaryError and conformance FeatureDictionaryError();
          OUTLINED_FUNCTION_2_1();
          *v51 = 0;
          v51[1] = 0xE000000000000000;
          swift_willThrow();
          OUTLINED_FUNCTION_1_0();

          OUTLINED_FUNCTION_44(v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, (uint64_t)a3, v65, a1);
          return outlined consume of [String : MLFeatureValue].Iterator._Variant();
        }
      }
    }
    v31 = v25;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v33 = *v4;
    v68 = (_QWORD *)*v4;
    *v4 = 0x8000000000000000;
    v34 = OUTLINED_FUNCTION_38_0();
    v36 = *(_QWORD *)(v33 + 16);
    v37 = (v35 & 1) == 0;
    v38 = v36 + v37;
    if (__OFADD__(v36, v37))
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v39 = v34;
    v40 = v35;
    __swift_instantiateConcreteTypeFromMangledName(a3);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38))
    {
      v41 = OUTLINED_FUNCTION_38_0();
      if ((v40 & 1) != (v42 & 1))
        goto LABEL_39;
      v39 = v41;
    }
    if ((v40 & 1) != 0)
    {
      v43 = v68[7];
      v44 = *(void **)(v43 + 8 * v39);
      *(_QWORD *)(v43 + 8 * v39) = v31;
    }
    else
    {
      v68[(v39 >> 6) + 8] |= 1 << v39;
      v45 = (_QWORD *)(v68[6] + 16 * v39);
      *v45 = v23;
      v45[1] = v24;
      *(_QWORD *)(v68[7] + 8 * v39) = v31;
      v46 = v68[2];
      v47 = __OFADD__(v46, 1);
      v48 = v46 + 1;
      if (v47)
        goto LABEL_36;
      v68[2] = v48;
      OUTLINED_FUNCTION_2();
      v44 = 0;
    }
    *v4 = (uint64_t)v68;
    OUTLINED_FUNCTION_1_0();

    v8 = OUTLINED_FUNCTION_3_1();
    v16 = v69;
    v7 = v67;
    if (v67)
      goto LABEL_4;
LABEL_5:
    v18 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_37;
    if (v18 >= v62)
      goto LABEL_33;
    v19 = *(_QWORD *)(v63 + 8 * v18);
    v20 = v16 + 1;
    if (!v19)
    {
      v20 = v16 + 2;
      if (v16 + 2 >= v62)
        goto LABEL_33;
      v19 = *(_QWORD *)(v63 + 8 * v20);
      if (!v19)
      {
        v20 = v16 + 3;
        if (v16 + 3 >= v62)
          goto LABEL_33;
        v19 = *(_QWORD *)(v63 + 8 * v20);
        if (!v19)
          break;
      }
    }
LABEL_18:
    v67 = (v19 - 1) & v19;
    v69 = v20;
    v17 = __clz(__rbit64(v19)) + (v20 << 6);
  }
  v21 = v16 + 4;
  if (v16 + 4 >= v62)
  {
LABEL_33:
    OUTLINED_FUNCTION_44(v8, v9, v10, v11, v12, v13, v14, v15, v60, v61, v62, v63, (uint64_t)a3, v65, a1);
    return outlined consume of [String : MLFeatureValue].Iterator._Variant();
  }
  v19 = *(_QWORD *)(v63 + 8 * v21);
  if (v19)
  {
    v20 = v16 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v20 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v20 >= v62)
      goto LABEL_33;
    v19 = *(_QWORD *)(v63 + 8 * v20);
    ++v21;
    if (v19)
      goto LABEL_18;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static AutoSendInputFeatureExtractor.extractedFeatures.getter()
{
  uint64_t v0;

  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  v0 = static AsrSimpleFeatureExtractor.extractedFeatures;
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_34_0();
  static AutoSendInputFeatureExtractor.wordEmbeddingExtractedFeatures.getter();
  OUTLINED_FUNCTION_34_0();
  return v0;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v7;
  uint64_t v8;

  v2 = Set.init(minimumCapacity:)();
  v8 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 40;
    do
    {
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_46(&v7);
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {
    v5 = v2;
    swift_bridgeObjectRelease();
  }
  return v5;
}

{
  uint64_t result;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  Swift::Int v11;
  uint64_t v12;
  _QWORD v13[4];
  uint64_t v14;

  v12 = Set.init(minimumCapacity:)();
  result = specialized _NativeDictionary.makeIterator()(a1, v13);
  v3 = v13[1];
  v4 = v13[3];
  v5 = v14;
  v6 = (unint64_t)(v13[2] + 64) >> 6;
  if (!v14)
    goto LABEL_3;
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_46(&v11);
    result = swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_2;
LABEL_3:
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v7 >= v6)
      goto LABEL_21;
    v8 = *(_QWORD *)(v3 + 8 * v7);
    v9 = v4 + 1;
    if (!v8)
    {
      v9 = v4 + 2;
      if (v4 + 2 >= v6)
        goto LABEL_21;
      v8 = *(_QWORD *)(v3 + 8 * v9);
      if (!v8)
      {
        v9 = v4 + 3;
        if (v4 + 3 >= v6)
          goto LABEL_21;
        v8 = *(_QWORD *)(v3 + 8 * v9);
        if (!v8)
        {
          v9 = v4 + 4;
          if (v4 + 4 >= v6)
            goto LABEL_21;
          v8 = *(_QWORD *)(v3 + 8 * v9);
          if (!v8)
          {
            v9 = v4 + 5;
            if (v4 + 5 >= v6)
              goto LABEL_21;
            v8 = *(_QWORD *)(v3 + 8 * v9);
            if (!v8)
            {
              v10 = v4 + 6;
              while (v10 < v6)
              {
                v8 = *(_QWORD *)(v3 + 8 * v10++);
                if (v8)
                {
                  v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return v12;
            }
          }
        }
      }
    }
LABEL_18:
    v5 = (v8 - 1) & v8;
    v4 = v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_4_5();
  v12 = v11 - v10;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  v13 = Set.init(minimumCapacity:)();
  v19 = a1;
  v20 = v13;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v15 = v19 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v16 = *(_QWORD *)(v3 + 72);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v17(v12, v15, v2);
      OUTLINED_FUNCTION_42(v12, 0);
      if (__swift_getEnumTagSinglePayload(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v6, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v15 += v16;
      if (!--v14)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    OUTLINED_FUNCTION_42(v12, 1);
  }
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t specialized Set.subtracting(_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return specialized _NativeSet.subtracting<A>(_:)(a1, a2);
  specialized Set._subtract<A>(_:)(a1);
  return a2;
}

uint64_t static AutoSendInputFeatureExtractor.wordEmbeddingExtractedFeatures.getter()
{
  char v0;
  char v2[24];
  ValueMetadata *v3;
  unint64_t v4;

  v3 = &type metadata for CamFeatureFlag;
  v4 = lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag();
  v2[0] = 1;
  v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  if ((v0 & 1) == 0 || (static WordEmbeddingFeatureExtractor.currentLocaleIsSupported()() & 1) == 0)
    return MEMORY[0x1E0DEE9D8];
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void AutoSendInputFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48[5];

  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_4_5();
  v8 = v7 - v6;
  v9 = type metadata accessor for WordEmbeddingFeatureExtractor();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_4_5();
  v47 = v12 - v11;
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v13 = OUTLINED_FUNCTION_14_1();
  v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.autoSend);
  Logger.logObject.getter();
  v15 = OUTLINED_FUNCTION_47();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C2E0C000, v14, v15, "Extracting AutoSend features", v16, 2u);
    OUTLINED_FUNCTION_3();
  }

  v17 = *(void **)(a1 + *(int *)(type metadata accessor for AutoSendInput() + 20));
  v18 = objc_msgSend(v17, sel_recognition);
  if (!v18)
    goto LABEL_10;
  v19 = v18;
  v20 = objc_msgSend(v17, sel_audioAnalytics);
  if (!v20)
  {

LABEL_10:
    lazy protocol witness table accessor for type AutoConfirmError and conformance AutoConfirmError();
    OUTLINED_FUNCTION_2_1();
    *v23 = 0xD000000000000038;
    v23[1] = 0x80000001C2E9A1C0;
    OUTLINED_FUNCTION_20((uint64_t)v23, 2);
    return;
  }
  v46 = v20;
  type metadata accessor for MLMultiArray();
  v48[4] = Dictionary.init(dictionaryLiteral:)();
  v21 = specialized FeatureExtracting.extract(from:)(*(double *)v3);
  if (v2)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_37_0();

    return;
  }
  OUTLINED_FUNCTION_33_1(v21, v22, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
  swift_bridgeObjectRelease();
  v24 = specialized FeatureExtracting.extract(from:)(a1, *(_QWORD *)(v3 + 8));
  OUTLINED_FUNCTION_33_1(v24, v25, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
  OUTLINED_FUNCTION_5();
  v26 = OUTLINED_FUNCTION_35_0();
  if (!v26)
  {
    __break(1u);
    goto LABEL_21;
  }
  v27 = v26;
  v28 = specialized FeatureExtracting.extract(from:)(v26, AsrSimpleFeatureExtractor.extractImpl(from:), &one-time initialization token for extractedFeatures, &static AsrSimpleFeatureExtractor.extractedFeatures, one-time initialization function for extractedFeatures);

  OUTLINED_FUNCTION_33_1(v28, v29, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
  OUTLINED_FUNCTION_5();
  v30 = specialized FeatureExtracting.extract(from:)(v46, SnrFeatureExtractor.extractImpl(from:), &one-time initialization token for extractedFeatures, &static SnrFeatureExtractor.extractedFeatures, one-time initialization function for extractedFeatures);
  OUTLINED_FUNCTION_33_1(v30, v31, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
  OUTLINED_FUNCTION_5();
  swift_retain();
  v32 = OUTLINED_FUNCTION_35_0();
  if (!v32)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v33 = v32;
  v45 = specialized FeatureExtracting.extract(from:)();
  swift_release();

  OUTLINED_FUNCTION_33_1(v45, v34, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
  swift_bridgeObjectRelease();
  v35 = type metadata accessor for AutoSendInputFeatureExtractor();
  outlined init with copy of WordEmbeddingFeatureExtractor?(v3 + *(int *)(v35 + 36), v8);
  if (__swift_getEnumTagSinglePayload(v8, 1, v9) != 1)
  {
    outlined init with take of WordEmbeddingFeatureExtractor(v8, v47);
    v42 = OUTLINED_FUNCTION_35_0();
    if (v42)
    {
      v43 = v42;
      v33 = (void *)specialized FeatureExtracting.extract(from:)(v42);

      OUTLINED_FUNCTION_33_1((uint64_t)v33, v44, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
      outlined destroy of WordEmbeddingFeatureExtractor(v47);
      OUTLINED_FUNCTION_5();
      goto LABEL_15;
    }
LABEL_22:
    __break(1u);
    return;
  }
  outlined destroy of WordEmbeddingFeatureExtractor?(v8);
LABEL_15:
  v36 = v14;
  Logger.logObject.getter();
  v37 = OUTLINED_FUNCTION_47();
  if (OUTLINED_FUNCTION_41_0(v37))
  {
    v38 = (uint8_t *)OUTLINED_FUNCTION_4();
    v48[0] = OUTLINED_FUNCTION_4();
    *(_DWORD *)v38 = 136315138;
    OUTLINED_FUNCTION_3_0();
    swift_bridgeObjectRetain();
    v39 = Dictionary.Keys.description.getter();
    v41 = v40;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2E0C000, v36, (os_log_type_t)v33, "Extracted AutoSend features: %s", v38, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_3_0();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AutoSendInputFeatureExtractor.update()()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0;
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_14_1();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.autoSend);
  Logger.logObject.getter();
  v5 = OUTLINED_FUNCTION_47();
  if (OUTLINED_FUNCTION_41_0(v5))
  {
    v6 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C2E0C000, v4, v1, "Updating AutoSendInputFeatureExtractor", v6, 2u);
    OUTLINED_FUNCTION_3();
  }

  v7 = v2 + *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  v8 = type metadata accessor for WordEmbeddingFeatureExtractor();
  if (!__swift_getEnumTagSinglePayload(v7, 1, v8))
    WordEmbeddingFeatureExtractor.update()();
}

void protocol witness for FeatureExtracting.extractImpl(from:) in conformance AutoSendInputFeatureExtractor(uint64_t a1)
{
  AutoSendInputFeatureExtractor.extractImpl(from:)(a1);
}

uint64_t outlined init with copy of WordEmbeddingFeatureExtractor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WordEmbeddingFeatureExtractor?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WordEmbeddingFeatureExtractor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10;
  v15 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v12;
    v16 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v29 = v16;
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v16 + 16);
    while (1)
    {
      v19 = v14;
      v20 = v18;
      v18(v9, *(_QWORD *)(v14 + 48) + v17 * v13, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09D0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v13 = (v13 + 1) & v28;
      v14 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v15 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v13, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v9, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.remove(_:)(v15, v16);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release();
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  char v28;
  unint64_t v29;
  size_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;

  v2 = a2;
  v42 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v36 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v34 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v35 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain();
    v9 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
    while (1)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7)
        goto LABEL_6;
LABEL_7:
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v35)
        goto LABEL_48;
      v13 = *(_QWORD *)(v36 + 8 * v12);
      v14 = v9 + 1;
      if (!v13)
      {
        v14 = v9 + 2;
        if (v9 + 2 >= v35)
          goto LABEL_48;
        v13 = *(_QWORD *)(v36 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 3;
          if (v9 + 3 >= v35)
            goto LABEL_48;
          v13 = *(_QWORD *)(v36 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 4;
            if (v9 + 4 >= v35)
              goto LABEL_48;
            v13 = *(_QWORD *)(v36 + 8 * v14);
            if (!v13)
            {
              v15 = v9 + 5;
              if (v9 + 5 >= v35)
              {
LABEL_48:
                outlined consume of [String : MLFeatureValue].Iterator._Variant();
                return v2;
              }
              v13 = *(_QWORD *)(v36 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  v14 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v14 >= v35)
                    goto LABEL_48;
                  v13 = *(_QWORD *)(v36 + 8 * v14);
                  ++v15;
                  if (v13)
                    goto LABEL_22;
                }
LABEL_50:
                __break(1u);
              }
              v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      v7 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
      v9 = v14;
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v37 = a1;
      v38 = v36;
      v39 = v34;
      v40 = v9;
      v41 = v7;
    }
    else
    {
      v25 = ~v20;
      do
      {
        v21 = (v21 + 1) & v25;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_37;
        v26 = (_QWORD *)(v22 + 16 * v21);
        v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      v37 = a1;
      v38 = v36;
      v39 = v34;
      v40 = v9;
      v41 = v7;
      swift_bridgeObjectRelease();
    }
    v28 = *(_BYTE *)(v2 + 32);
    v29 = (unint64_t)((1 << v28) + 63) >> 6;
    v30 = 8 * v29;
    if ((v28 & 0x3Fu) < 0xE || swift_stdlib_isStackAllocationSafe())
    {
      MEMORY[0x1E0C80A78]();
      memcpy((char *)&v34 - ((v30 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v30);
      v31 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)&v34 - ((v30 + 15) & 0x3FFFFFFFFFFFFFF0), v29, v2, v21, &v37);
      swift_release();
      outlined consume of [String : MLFeatureValue].Iterator._Variant();
    }
    else
    {
      v32 = (void *)swift_slowAlloc();
      memcpy(v32, (const void *)(v2 + 56), v30);
      v31 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v32, v29, v2, v21, &v37);
      swift_release();
      outlined consume of [String : MLFeatureValue].Iterator._Variant();
      MEMORY[0x1C3BCB4A4](v32, -1, -1);
    }
    return v31;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;

  v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v15 = ~v7;
    do
    {
      v8 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v16 = (_QWORD *)(v9 + 16 * v8);
      v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v2;
  v19 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v13 = v19;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        goto LABEL_32;
      v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_32;
        v15 = v30[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v8)
            goto LABEL_32;
          v15 = v30[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v11 >= v8)
                  goto LABEL_32;
                v15 = v30[v11];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_20:
      v7 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    if (!v11)
      goto LABEL_7;
LABEL_6:
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      v20 = v5;
      v21 = *(_QWORD *)(v36 + 72);
      v22 = *(_QWORD *)(v5 + 48) + v21 * i;
      v23 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v23(v4, v22, v2);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) == 0)
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          v30 = v26 == v29;
          if (v26 == v29)
            v26 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v26);
          if (v31 != -1)
          {
            v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(*(_QWORD *)(v7 + 48) + v27 * v21, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v20;
      if (v11)
        goto LABEL_6;
LABEL_7:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_38;
      if (v17 >= v34)
        goto LABEL_32;
      v18 = v35[v17];
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v34)
          goto LABEL_32;
        v18 = v35[v14];
        if (!v18)
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v34)
            goto LABEL_32;
          v18 = v35[v14];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v34)
            {
LABEL_32:
              swift_release();
              v1 = v33;
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v32 + 63) >> 6, v35);
              else
                *v35 = -1 << v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                v14 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_39;
                if (v14 >= v34)
                  goto LABEL_32;
                v18 = v35[v14];
                ++v19;
                if (v18)
                  goto LABEL_20;
              }
            }
            v14 = v19;
          }
        }
      }
LABEL_20:
      v11 = (v18 - 1) & v18;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t i;
  unint64_t v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;

  v7 = *(_QWORD *)(a3 + 16);
  v38 = (unint64_t *)result;
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v39 = a3 + 56;
  while (2)
  {
    v37 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_46;
          }
          v14 = (unint64_t)(a5[2] + 64) >> 6;
          v15 = a5[3];
          if (v13 >= v14)
            goto LABEL_44;
          v16 = a5[1];
          v17 = *(_QWORD *)(v16 + 8 * v13);
          if (!v17)
          {
            v15 = v9 + 1;
            if (v9 + 2 >= v14)
              goto LABEL_44;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              v13 = v9 + 2;
            }
            else
            {
              v15 = v9 + 2;
              if (v9 + 3 >= v14)
                goto LABEL_44;
              v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                v13 = v9 + 3;
              }
              else
              {
                v13 = v9 + 4;
                v15 = v9 + 3;
                if (v9 + 4 >= v14)
                  goto LABEL_44;
                v17 = *(_QWORD *)(v16 + 8 * v13);
                if (!v17)
                {
                  v18 = v9 + 5;
                  while (v18 < v14)
                  {
                    v17 = *(_QWORD *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      v13 = v18 - 1;
                      goto LABEL_20;
                    }
                  }
                  v15 = v14 - 1;
LABEL_44:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain();
                  return specialized _NativeSet.extractSubset(using:count:)(v38, a2, v37, a3);
                }
              }
            }
          }
LABEL_20:
          v11 = (v17 - 1) & v17;
          v12 = __clz(__rbit64(v17)) + (v13 << 6);
          v9 = v13;
        }
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v39 + 8 * (v24 >> 6))) != 0)
          break;
LABEL_38:
        result = swift_bridgeObjectRelease();
      }
      v27 = *(_QWORD *)(a3 + 48);
      v28 = (_QWORD *)(v27 + 16 * v24);
      v29 = *v28 == v21 && v28[1] == v20;
      if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v31 = ~v23;
        for (i = v24 + 1; ; i = v33 + 1)
        {
          v33 = i & v31;
          if (((*(_QWORD *)(v39 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0)
            break;
          v34 = (_QWORD *)(v27 + 16 * v33);
          v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v25 = v33 >> 6;
            v26 = 1 << v33;
            goto LABEL_28;
          }
        }
        goto LABEL_38;
      }
      result = swift_bridgeObjectRelease();
LABEL_28:
      v30 = v38[v25];
      v38[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    v8 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_46:
      __break(1u);
      return result;
    }
    if (v37 != 1)
      continue;
    return MEMORY[0x1E0DEE9E8];
  }
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x1E0DEE9E8];
LABEL_35:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_35;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_35;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_35;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_35;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_35;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = *(_QWORD *)(v6 + 56);
  v16 = -1;
  if (v14 < 64)
    v16 = ~(-1 << v14);
  v17 = v16 & v15;
  v18 = (unint64_t)(v14 + 63) >> 6;
  if ((v16 & v15) == 0)
    goto LABEL_12;
LABEL_11:
  v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v19 | (v13 << 6); ; i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    v24 = *(_QWORD *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v24, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v24, v5, v2);
    if (v17)
      goto LABEL_11;
LABEL_12:
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v18)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v17 = (v22 - 1) & v22;
  }
  v23 = v21 + 3;
  if (v23 >= v18)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v18)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  if (!v12)
    goto LABEL_7;
LABEL_6:
  v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    v21 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v21 * i, v2);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v22 = -1 << *(_BYTE *)(v8 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v13 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v25 * v21, v5, v2);
    ++*(_QWORD *)(v8 + 16);
    if (v12)
      goto LABEL_6;
LABEL_7:
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_36;
    if (v18 >= v33)
      goto LABEL_32;
    v19 = *(_QWORD *)(v32 + 8 * v18);
    ++v15;
    if (!v19)
    {
      v15 = v18 + 1;
      if (v18 + 1 >= v33)
        goto LABEL_32;
      v19 = *(_QWORD *)(v32 + 8 * v15);
      if (!v19)
      {
        v15 = v18 + 2;
        if (v18 + 2 >= v33)
          goto LABEL_32;
        v19 = *(_QWORD *)(v32 + 8 * v15);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v12 = (v19 - 1) & v19;
  }
  v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_34;
  }
  v19 = *(_QWORD *)(v32 + 8 * v20);
  if (v19)
  {
    v15 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v33)
      goto LABEL_32;
    v19 = *(_QWORD *)(v32 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            v14 = *(_QWORD *)(v3 + 48);
            v15 = (_OWORD *)(v14 + 16 * v2);
            v16 = (_OWORD *)(v14 + 16 * v6);
            v17 = v2 != v6 || v15 >= v16 + 1;
            v2 = v6;
            if (v17)
            {
              *v15 = *v16;
              v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09D0]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type FeatureDictionaryError and conformance FeatureDictionaryError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FeatureDictionaryError and conformance FeatureDictionaryError;
  if (!lazy protocol witness table cache variable for type FeatureDictionaryError and conformance FeatureDictionaryError)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for FeatureDictionaryError, &type metadata for FeatureDictionaryError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeatureDictionaryError and conformance FeatureDictionaryError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag;
  if (!lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamFeatureFlag, &type metadata for CamFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag;
  if (!lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamFeatureFlag, &type metadata for CamFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag);
  }
  return result;
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID();
    result = MEMORY[0x1C3BCB3E4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void OUTLINED_FUNCTION_0_11()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x7365727574616546;
  v0._object = (void *)0xE900000000000020;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_2_9()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_3_5(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v1);
}

uint64_t OUTLINED_FUNCTION_5_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = 1;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_6_3()
{
  _StringGuts.grow(_:)(53);
}

void OUTLINED_FUNCTION_7_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_8_2(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_9_2(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_10_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_12_2(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_14_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v10;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &a9);
}

uint64_t OUTLINED_FUNCTION_20@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(a1 + 16) = a2;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_21_0(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_23_1()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_24_1(uint64_t a1)
{
  uint64_t v1;

  return specialized Set.subtracting(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_28_1()
{
  return Set.description.getter();
}

uint64_t OUTLINED_FUNCTION_29_1()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_31_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_33_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, 0, a3);
}

void OUTLINED_FUNCTION_34_0()
{
  specialized Array.append<A>(contentsOf:)();
}

id OUTLINED_FUNCTION_35_0()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 734));
}

void OUTLINED_FUNCTION_37_0()
{
  uint64_t v0;

}

unint64_t OUTLINED_FUNCTION_38_0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
}

BOOL OUTLINED_FUNCTION_41_0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return a15;
}

uint64_t OUTLINED_FUNCTION_46(Swift::Int *a1)
{
  Swift::Int v1;
  Swift::Int v2;

  return specialized Set._Variant.insert(_:)(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_47()
{
  return static os_log_type_t.debug.getter();
}

uint64_t dispatch thunk of static WithForcedValuesOffering.forcedValues.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static WithForcedValuesOffering.forcedValues.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static WithForcedValuesOffering.forcedValues.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of WithForcedValuesOffering.withForcedValue<A>(_:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t CamDoubleUserDefaults.value.getter(char a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  if (one-time initialization token for forcedValues != -1)
    swift_once();
  OUTLINED_FUNCTION_2_10();
  v2 = static CamDoubleUserDefaults.forcedValues;
  if (!*(_QWORD *)(static CamDoubleUserDefaults.forcedValues + 16)
    || (v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) == 0))
  {
    OUTLINED_FUNCTION_6_4();
    CamDoubleUserDefaults.values.getter();
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
  OUTLINED_FUNCTION_6_4();
  return v5;
}

uint64_t static CamUserHistoryDefaultsManager.getValue(key:)@<X0>(_OWORD *a1@<X8>)
{
  __int128 v3;
  uint64_t v4;

  if (one-time initialization token for forcedValues != -1)
    swift_once();
  OUTLINED_FUNCTION_2_10();
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_5_4(&v3);
  OUTLINED_FUNCTION_3_1();
  if (!v4)
  {
    outlined destroy of Any?((uint64_t)&v3);
    swift_endAccess();
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99EA0]), sel_init);
    OUTLINED_FUNCTION_0_12();
  }
  outlined init with take of Any(&v3, a1);
  return swift_endAccess();
}

void static CamUserHistoryDefaultsManager.setValue(key:value:)()
{
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99EA0]), sel_init);
  OUTLINED_FUNCTION_0_12();
}

void sub_1C2E2394C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v21;
  uint64_t v22;

  v21 = objc_msgSend(v17, sel_dictionaryForKey_, a1);

  if (v21)
  {
    v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v22 = Dictionary.init(dictionaryLiteral:)();
  }
  a14 = v22;
  outlined init with copy of Any(v15, (uint64_t)&a10);
  OUTLINED_FUNCTION_11_3();
  specialized Dictionary.subscript.setter((uint64_t)&a10, v16, v14);
  objc_msgSend(objc_allocWithZone(*(Class *)(v18 + 3744)), *(SEL *)(v19 + 2008));
  Dictionary._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_12();
}

void sub_1C2E23A3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  objc_msgSend(v26, sel_setObject_forKey_, v27, a1);

}

void PersistencyKeys.rawValue.getter(char a1)
{
  if (!a1)
    OUTLINED_FUNCTION_9_3();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v6[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v6);
    specialized Dictionary._Variant.setValue(_:forKey:)(v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v6);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v6);
  }
}

void one-time initialization function for forcedValues()
{
  static CamDoubleUserDefaults.forcedValues = MEMORY[0x1E0DEE9E0];
}

{
  static CamStringUserDefaults.forcedValues = MEMORY[0x1E0DEE9E0];
}

{
  static CamUserHistoryDefaultsManager.forcedValues = MEMORY[0x1E0DEE9E0];
}

void CamDoubleUserDefaults.values.getter()
{
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99EA0]), sel_init);
  OUTLINED_FUNCTION_0_12();
}

void sub_1C2E23BA8(void *a1)
{
  void *v1;
  id v3;

  v3 = OUTLINED_FUNCTION_8_3((uint64_t)a1, sel_dictionaryForKey_);

  if (v3)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_31();
  }
  else
  {
    OUTLINED_FUNCTION_1_8();
  }
}

void CamDoubleUserDefaults.rawValue.getter(char a1)
{
  if (!a1)
    OUTLINED_FUNCTION_9_3();
}

uint64_t specialized Double.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  char v9;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    v6 = v9;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (v7 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = _StringObject.sharedUTF8.getter();
      }
      v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  if ((v6 & 1) != 0)
    return 0;
  else
    return 0;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance CamDoubleUserDefaults()
{
  specialized == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CamDoubleUserDefaults(uint64_t a1)
{
  char *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CamDoubleUserDefaults(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CamDoubleUserDefaults(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;

  CamDoubleUserDefaults.rawValue.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

void CamStringUserDefaults.values.getter()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99EA0]), sel_init);
  v1 = (void *)MEMORY[0x1C3BCA844](0xD00000000000001ELL, 0x80000001C2E9A340);
  v2 = OUTLINED_FUNCTION_8_3((uint64_t)v1, sel_dictionaryForKey_);

  if (v2)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    OUTLINED_FUNCTION_31();
  }
  else
  {
    OUTLINED_FUNCTION_1_8();
  }
}

uint64_t CamStringUserDefaults.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;

  if (one-time initialization token for forcedValues != -1)
    swift_once();
  OUTLINED_FUNCTION_2_10();
  v0 = static CamStringUserDefaults.forcedValues;
  if (!*(_QWORD *)(static CamStringUserDefaults.forcedValues + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) == 0))
  {
    OUTLINED_FUNCTION_6_4();
    CamStringUserDefaults.values.getter();
    v5 = v4;
    v6 = OUTLINED_FUNCTION_3_6();
    specialized Dictionary.subscript.getter(v6, v7, v5, v8);
    OUTLINED_FUNCTION_3_1();
    if (v12)
    {
      if ((OUTLINED_FUNCTION_4_7() & 1) != 0)
        return v10;
    }
    else
    {
      outlined destroy of Any?((uint64_t)v11);
    }
    return 0;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 16 * v1);
  OUTLINED_FUNCTION_6_4();
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t CamStringUserDefaults.rawValue.getter()
{
  return OUTLINED_FUNCTION_3_6();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CamStringUserDefaults(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "ModelDecision");
  *(_WORD *)(a1 + 14) = -4864;
}

_BYTE *closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

_QWORD *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
    *a1 = v5;
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void OUTLINED_FUNCTION_0_12()
{
  JUMPOUT(0x1C3BCA844);
}

uint64_t OUTLINED_FUNCTION_1_8()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_2_10()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return 0x6365446C65646F4DLL;
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_5_4(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  specialized Dictionary.subscript.getter(v2, v1, v3, a1);
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return swift_endAccess();
}

id OUTLINED_FUNCTION_8_3(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  return swift_bridgeObjectRetain();
}

void DawnHeuristicScorer.scoreHypothesis(features:loggingId:)(Swift::OpaquePointer a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)OUTLINED_FUNCTION_0_13(0xD000000000000015, 0x80000001C2E98E30);
  if (v2)
  {
    objc_msgSend(v2, sel_int64Value);
    OUTLINED_FUNCTION_2_11();
    DawnHeuristicScorer.platformBoost(features:)(a1);
  }
  else
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(_QWORD *)v3 = 0xD00000000000002FLL;
    *(_QWORD *)(v3 + 8) = 0x80000001C2E9A3C0;
    *(_BYTE *)(v3 + 16) = 1;
    swift_willThrow();
  }
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DawnHeuristicScorer.platformBoost(features:)(Swift::OpaquePointer features)
{
  uint64_t v1;
  void *v2;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v2 = (void *)OUTLINED_FUNCTION_0_13(0x665F73656D6D6F70, 0xEF6B6361626C6C61);
  if (v2)
  {
    OUTLINED_FUNCTION_1_9(v2);
    OUTLINED_FUNCTION_2_11();
    if (v1)
      return 0.1;
  }
  v4 = (void *)OUTLINED_FUNCTION_0_13(0x535F5050415F5349, 0xEF54554354524F48);
  if (v4 && (OUTLINED_FUNCTION_1_9(v4), OUTLINED_FUNCTION_2_11(), v1))
  {
    if ((static TrialProvider.fetchBoolFactorFromTrial(_:)() & 1) != 0
      && (CamFeatureFlag.isEnabled.getter(5u) & 1) != 0)
    {
      return 0.015;
    }
    v5 = (void *)OUTLINED_FUNCTION_0_13(0xD000000000000013, 0x80000001C2E99680);
    if (!v5)
      return 0.015;
    v6 = v5;
    v7 = OUTLINED_FUNCTION_1_9(v5);

    if (!v7)
      return 0.015;
    else
      return 0.06;
  }
  else
  {
    v8 = (void *)OUTLINED_FUNCTION_0_13(0x705F726573726170, 0xEF797469726F6972);
    if (v8)
    {
      v9 = v8;
      v10 = OUTLINED_FUNCTION_1_9(v8);

      return (double)(uint64_t)v10 * 0.01;
    }
    else
    {
      return 0.0;
    }
  }
}

uint64_t type metadata accessor for DawnHeuristicScorer()
{
  return objc_opt_self();
}

void protocol witness for Scoring.scoreHypothesis(features:loggingId:) in conformance DawnHeuristicScorer(Swift::OpaquePointer a1)
{
  DawnHeuristicScorer.scoreHypothesis(features:loggingId:)(a1);
}

uint64_t OUTLINED_FUNCTION_0_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1, a2, v2);
}

id OUTLINED_FUNCTION_1_9(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 1480));
}

void OUTLINED_FUNCTION_2_11()
{
  void *v0;

}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg503_s7d78Cam25UserParseFeatureExtractorV27extractOnScreenAppBundleIds4fromShySSGSay0A28efg7Model11I63VG_tFZSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = type metadata accessor for RREntity();
  v18 = *(_QWORD *)(v3 - 8);
  v19 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v17[1] = v1;
    v20 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v8 = *(_QWORD *)(type metadata accessor for RRCandidate() - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    do
    {
      RRCandidate.entity.getter();
      v11 = RREntity.id.getter();
      v13 = v12;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v19);
      v7 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v7 = v20;
      }
      v14 = *(_QWORD *)(v7 + 16);
      if (v14 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v7 = v20;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      v15 = v7 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v13;
      v9 += v10;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t one-time initialization function for kLogger()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for ranker != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.ranker);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for ranker != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.ranker);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void static UserParseFeatureExtractor.extractOnScreenAppBundleIds(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, _QWORD, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  void (*v101)(uint64_t, _QWORD, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_4_5();
  v5 = v4 - v3;
  v6 = type metadata accessor for RRMetadata();
  v104 = *(_QWORD *)(v6 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_25_2();
  v10 = v8 - v9;
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_23_2();
  v105 = v12;
  v13 = type metadata accessor for RRDataSourceMetadataValue();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_2_12();
  v93 = v15;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_13_3();
  v99 = v17;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_13_3();
  v95 = v19;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_13_3();
  v94 = v21;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_23_2();
  v97 = v23;
  OUTLINED_FUNCTION_31_1();
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_23_2();
  v26 = type metadata accessor for RRCandidate();
  v89 = *(_QWORD *)(v26 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v27);
  OUTLINED_FUNCTION_2_12();
  v82 = v28;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v29);
  OUTLINED_FUNCTION_13_3();
  v91 = v30;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v31);
  OUTLINED_FUNCTION_23_2();
  v85 = v32;
  if (one-time initialization token for kLogger != -1)
    swift_once();
  v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)kLogger);
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.info.getter();
  v102 = v10;
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_1C2E0C000, v34, v35, "Expanding salient entity apps.", v36, 2u);
    MEMORY[0x1C3BCB4A4](v36, -1, -1);
  }

  v37 = MEMORY[0x1E0DEE9D8];
  v106 = MEMORY[0x1E0DEE9D8];
  v38 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v88 = v38;
  if (v38)
  {
    OUTLINED_FUNCTION_10_2();
    v90 = *(_QWORD *)(v40 + 72);
    v80 = v41;
    v87 = a1 + v41;
    v103 = v14;
    v42 = *(void (**)(_QWORD, _QWORD, _QWORD))(v40 + 16);
    v98 = *MEMORY[0x1E0DA3D48];
    v83 = *MEMORY[0x1E0DA3DC0];
    v81 = *MEMORY[0x1E0DA3DB8];
    v96 = v5;
    v43 = v85;
    v86 = v42;
    v84 = v26;
    while (1)
    {
      v92 = v39;
      v44 = v26;
      v42(v43, v87 + v90 * v39, v26);
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      OUTLINED_FUNCTION_33_2();
      v45 = UsoTask.verbString.getter();
      v47 = v46;
      swift_release();
      if (v45 == 0x415F6E6F6D6D6F63 && v47 == 0xEA00000000007070)
      {
        swift_bridgeObjectRelease();
        v50 = v91;
        OUTLINED_FUNCTION_19_1(v91, v43);
        v51 = v103;
      }
      else
      {
        v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_19_1(v91, v43);
        v50 = v91;
        v51 = v103;
        if ((v49 & 1) == 0)
          goto LABEL_36;
      }
      RRCandidate.entity.getter();
      v52 = RREntity.metadata.getter();
      OUTLINED_FUNCTION_33_2();
      v53 = *(_QWORD *)(v52 + 16);
      v54 = v102;
      if (v53)
      {
        OUTLINED_FUNCTION_10_2();
        v56 = v52 + v55;
        OUTLINED_FUNCTION_36_0();
        v57 = *(_QWORD *)(v104 + 72);
        v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 16);
        v58 = MEMORY[0x1E0DEE9D8];
        do
        {
          v100(v105, v56, v6);
          v100(v54, v105, v6);
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v104 + 88))(v54, v6) == v98)
          {
            OUTLINED_FUNCTION_35_1(v54, *(uint64_t (**)(uint64_t, uint64_t))(v104 + 96));
            v59 = v54;
            v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 32);
            v60(v95, v59, v13);
            v51 = v103;
            v60(v5, v95, v13);
            OUTLINED_FUNCTION_29_2(v5, 0);
            (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v105, v6);
          }
          else
          {
            v61 = v54;
            v62 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
            v62(v61, v6);
            OUTLINED_FUNCTION_29_2(v5, 1);
            v51 = v103;
            v62(v105, v6);
          }
          if (__swift_getEnumTagSinglePayload(v5, 1, v13) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v5, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
          }
          else
          {
            OUTLINED_FUNCTION_24_2(v94, v5);
            OUTLINED_FUNCTION_24_2(v99, v94);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_30_2(0, *(_QWORD *)(v58 + 16) + 1);
              v58 = v66;
            }
            v64 = *(_QWORD *)(v58 + 16);
            v63 = *(_QWORD *)(v58 + 24);
            if (v64 >= v63 >> 1)
            {
              OUTLINED_FUNCTION_30_2(v63 > 1, v64 + 1);
              v58 = v67;
            }
            *(_QWORD *)(v58 + 16) = v64 + 1;
            OUTLINED_FUNCTION_10_2();
            OUTLINED_FUNCTION_24_2(v58 + v65 + *(_QWORD *)(v51 + 72) * v64, v99);
            v5 = v96;
          }
          v54 = v102;
          v56 += v57;
          --v53;
        }
        while (v53);
        swift_bridgeObjectRelease_n();
        v50 = v91;
      }
      else
      {
        OUTLINED_FUNCTION_13();
        v58 = MEMORY[0x1E0DEE9D8];
      }
      v68 = *(void (**)(uint64_t, _QWORD, uint64_t))(v51 + 104);
      v68(v97, v83, v13);
      v69 = *(_QWORD *)(v58 + 16);
      if (v69)
      {
        v101 = v68;
        OUTLINED_FUNCTION_10_2();
        v71 = v58 + v70;
        v72 = *(_QWORD *)(v51 + 72);
        lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3DC8], MEMORY[0x1E0DA3DD8]);
        OUTLINED_FUNCTION_36_0();
        v73 = v71;
        while ((OUTLINED_FUNCTION_22_1() & 1) == 0)
        {
          v73 += v72;
          if (!--v69)
          {
            OUTLINED_FUNCTION_13();
            v51 = v103;
            v50 = v91;
            goto LABEL_34;
          }
        }
        OUTLINED_FUNCTION_13();
        OUTLINED_FUNCTION_28_2(v97);
        v101(v93, v81, v13);
        v75 = *(_QWORD *)(v58 + 16);
        if (!v75)
        {
LABEL_44:
          OUTLINED_FUNCTION_28_2(v93);
          OUTLINED_FUNCTION_13();
          (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v91, v84);
          v43 = v85;
          OUTLINED_FUNCTION_19_1(v82, v85);
          v76 = v106;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v106 + 16) + 1, 1);
            v76 = v106;
          }
          v78 = *(_QWORD *)(v76 + 16);
          v77 = *(_QWORD *)(v76 + 24);
          if (v78 >= v77 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1);
            v76 = v106;
          }
          *(_QWORD *)(v76 + 16) = v78 + 1;
          v26 = v84;
          OUTLINED_FUNCTION_19_1(v76 + v80 + v78 * v90, v82);
          v106 = v76;
          v5 = v96;
          goto LABEL_37;
        }
        OUTLINED_FUNCTION_36_0();
        while ((OUTLINED_FUNCTION_22_1() & 1) == 0)
        {
          v71 += v72;
          if (!--v75)
          {
            OUTLINED_FUNCTION_13();
            goto LABEL_44;
          }
        }
        OUTLINED_FUNCTION_13();
        OUTLINED_FUNCTION_28_2(v93);
        v50 = v91;
      }
      else
      {
LABEL_34:
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v97, v13);
      }
      OUTLINED_FUNCTION_13();
      v44 = v84;
      v43 = v85;
LABEL_36:
      v74 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
      v74(v50, v44);
      v26 = v44;
      v74(v43, v44);
LABEL_37:
      v39 = v92 + 1;
      v42 = v86;
      if (v92 + 1 == v88)
      {
        v37 = v106;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  v79 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg503_s7d78Cam25UserParseFeatureExtractorV27extractOnScreenAppBundleIds4fromShySSGSay0A28efg7Model11I63VG_tFZSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(v37);
  swift_release();
  specialized Set.init<A>(_:)(v79);
  OUTLINED_FUNCTION_0_2();
}

uint64_t *UserParseFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static UserParseFeatureExtractor.extractedFeatures;
}

uint64_t UserParseFeatureExtractor.extractImpl(from:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  void *v21;
  SEL v22;
  void *v23;
  SEL v24;
  uint64_t v25;
  void *v26;
  SEL v27;
  uint64_t v28;
  void *v29;
  SEL v30;
  uint64_t v31;
  void *v32;
  SEL v33;
  uint64_t v34;
  void *v35;
  SEL v36;

  v8 = UserParseFeatureExtractor.extractProbaFromAction(from:)();
  UserParseFeatureExtractor.extractRepetitionTypeFromAction(from:)(a1);
  v10 = v9;
  v11 = type metadata accessor for ActionCandidate();
  v12 = *(_QWORD *)(a1 + *(int *)(v11 + 24));
  v13 = (uint64_t *)(a1 + *(int *)(v11 + 36));
  v14 = v13[1];
  if (v14)
  {
    specialized Set.contains(_:)(*v13, v14, a2);
    v16 = v15 & 1;
  }
  else
  {
    v16 = 0;
  }
  v17 = UserParseFeatureExtractor.extractIsTopNLParse(from:maxNLProba:)(a1, a3, a4 & 1);
  v18 = UserParseFeatureExtractor.extractHighPriorityNLXParse(from:)(a1);
  v19 = UserParseFeatureExtractor.extractIsInterpretableAsUniversalCommand(from:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2E949C0;
  strcpy((char *)(inited + 32), "nl_parse_proba");
  *(_BYTE *)(inited + 47) = -18;
  *(_QWORD *)(inited + 48) = objc_msgSend((id)objc_opt_self(), sel_featureValueWithDouble_, v8);
  strcpy((char *)(inited + 56), "top_nl_parse");
  *(_BYTE *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  v21 = (void *)OUTLINED_FUNCTION_15_2();
  *(_QWORD *)(inited + 72) = objc_msgSend(v21, v22, v17);
  *(_QWORD *)(inited + 80) = 0x6974697465706572;
  *(_QWORD *)(inited + 88) = 0xEF657079745F6E6FLL;
  v23 = (void *)OUTLINED_FUNCTION_15_2();
  *(_QWORD *)(inited + 96) = objc_msgSend(v23, v24, v10);
  *(_QWORD *)(inited + 104) = 0xD000000000000015;
  OUTLINED_FUNCTION_37_1();
  *(_QWORD *)(inited + 112) = v25;
  v26 = (void *)OUTLINED_FUNCTION_15_2();
  *(_QWORD *)(inited + 120) = objc_msgSend(v26, v27, v12);
  *(_QWORD *)(inited + 128) = 0xD000000000000013;
  OUTLINED_FUNCTION_37_1();
  *(_QWORD *)(inited + 136) = v28;
  v29 = (void *)OUTLINED_FUNCTION_15_2();
  *(_QWORD *)(inited + 144) = objc_msgSend(v29, v30, v16);
  *(_QWORD *)(inited + 152) = 0xD000000000000017;
  OUTLINED_FUNCTION_37_1();
  *(_QWORD *)(inited + 160) = v31;
  v32 = (void *)OUTLINED_FUNCTION_15_2();
  *(_QWORD *)(inited + 168) = objc_msgSend(v32, v33, v18);
  *(_QWORD *)(inited + 176) = 0xD000000000000025;
  OUTLINED_FUNCTION_37_1();
  *(_QWORD *)(inited + 184) = v34;
  v35 = (void *)OUTLINED_FUNCTION_15_2();
  *(_QWORD *)(inited + 192) = objc_msgSend(v35, v36, v19);
  type metadata accessor for MLFeatureValue();
  return Dictionary.init(dictionaryLiteral:)();
}

double UserParseFeatureExtractor.extractProbaFromAction(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;

  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_21_1(v4);
  if (OUTLINED_FUNCTION_34_1())
  {
    outlined destroy of CamParse(v0, type metadata accessor for CamParse);
    return 0.0;
  }
  else
  {
    OUTLINED_FUNCTION_32_2();
    Siri_Nlu_External_UserParse.comparableProbability.getter();
    v5 = v6;
    outlined destroy of CamParse(v1, type metadata accessor for CamUSOParse);
  }
  return v5;
}

void UserParseFeatureExtractor.extractRepetitionTypeFromAction(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = type metadata accessor for Siri_Nlu_External_RepetitionResult();
  v2 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_4_5();
  v5 = v4 - v3;
  v6 = type metadata accessor for Siri_Nlu_External_RepetitionResult.RepetitionType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_2_12();
  v31 = v8;
  OUTLINED_FUNCTION_3_7();
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v30 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v30 - v13;
  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_4_5();
  v18 = v17 - v16;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_4_5();
  v22 = v21 - v20;
  v23 = OUTLINED_FUNCTION_17_2();
  outlined init with copy of CamParse(a1 + *(int *)(v23 + 20), v22);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of CamParse(v22, type metadata accessor for CamParse);
  }
  else
  {
    outlined init with take of CamUSOParse(v22, v18);
    Siri_Nlu_External_UserParse.repetitionResult.getter();
    Siri_Nlu_External_RepetitionResult.repetitionType.getter();
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v5, v30);
    OUTLINED_FUNCTION_27_1(v24, *MEMORY[0x1E0D9F6C0]);
    lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type Siri_Nlu_External_RepetitionResult.RepetitionType and conformance Siri_Nlu_External_RepetitionResult.RepetitionType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F6D0], MEMORY[0x1E0D9F6D8]);
    OUTLINED_FUNCTION_5_5();
    OUTLINED_FUNCTION_5_5();
    v26 = v32;
    v25 = v33;
    OUTLINED_FUNCTION_11_4((uint64_t)v12);
    v27 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 16);
    v28 = v31;
    v29 = v27(v31, v14, v6);
    if (v25 != v26)
    {
      OUTLINED_FUNCTION_27_1(v29, *MEMORY[0x1E0D9F6C8]);
      OUTLINED_FUNCTION_5_5();
      OUTLINED_FUNCTION_5_5();
      OUTLINED_FUNCTION_11_4((uint64_t)v12);
    }
    OUTLINED_FUNCTION_11_4(v28);
    OUTLINED_FUNCTION_11_4((uint64_t)v14);
    outlined destroy of CamParse(v18, type metadata accessor for CamUSOParse);
  }
  OUTLINED_FUNCTION_0_2();
}

BOOL UserParseFeatureExtractor.extractIsTopNLParse(from:maxNLProba:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v14;
  double v15;

  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_4_5();
  v11 = v10 - v9;
  v12 = OUTLINED_FUNCTION_17_2();
  outlined init with copy of CamParse(a1 + *(int *)(v12 + 20), v11);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of CamParse(v11, type metadata accessor for CamParse);
    return 0;
  }
  else
  {
    outlined init with take of CamUSOParse(v11, v3);
    Siri_Nlu_External_UserParse.comparableProbability.getter();
    v15 = v14;
    outlined destroy of CamParse(v3, type metadata accessor for CamUSOParse);
    return v15 == *(double *)&a2 && (a3 & 1) == 0;
  }
}

uint64_t UserParseFeatureExtractor.extractHighPriorityNLXParse(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v23;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_25_2();
  v6 = v4 - v5;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - v8;
  v10 = OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_8_4();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = OUTLINED_FUNCTION_17_2();
  outlined init with copy of CamParse(a1 + *(int *)(v15 + 20), (uint64_t)v14);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of CamParse((uint64_t)v14, type metadata accessor for CamParse);
    return 0;
  }
  else
  {
    outlined init with take of CamUSOParse((uint64_t)v14, v1);
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v1 + *(int *)(v10 + 20), (uint64_t)v9);
    v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    v16 = 0;
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v17) != 1)
    {
      outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?((uint64_t)v9, v6);
      v18 = *(_QWORD *)(v17 - 8);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v6, v17);
      if (v19 == *MEMORY[0x1E0D9F138] || v19 == *MEMORY[0x1E0D9F110] || v19 == *MEMORY[0x1E0D9F0F8])
      {
        v16 = 1;
      }
      else
      {
        OUTLINED_FUNCTION_35_1(v6, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
        v16 = 0;
      }
    }
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    outlined destroy of CamParse(v1, type metadata accessor for CamUSOParse);
  }
  return v16;
}

uint64_t UserParseFeatureExtractor.extractIsInterpretableAsUniversalCommand(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  OUTLINED_FUNCTION_16_2();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_21_1(v4);
  if (OUTLINED_FUNCTION_34_1())
  {
    outlined destroy of CamParse(v0, type metadata accessor for CamParse);
    return 0;
  }
  else
  {
    OUTLINED_FUNCTION_32_2();
    v6 = Siri_Nlu_External_UserParse.interpretableAsUniversalCommand.getter();
    outlined destroy of CamParse(v1, type metadata accessor for CamUSOParse);
    return v6 & 1;
  }
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  char v18;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    OUTLINED_FUNCTION_14_3();
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (OUTLINED_FUNCTION_26_1() & 1) == 0)
      {
        v13 = ~v7;
        v14 = (v8 + 1) & v13;
        OUTLINED_FUNCTION_14_3();
        if ((v15 & 1) != 0)
        {
          do
          {
            v16 = (_QWORD *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2)
              break;
            if ((OUTLINED_FUNCTION_26_1() & 1) != 0)
              break;
            v14 = (v14 + 1) & v13;
            OUTLINED_FUNCTION_14_3();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

uint64_t RRCandidate.isOnScreen.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  _QWORD *v39;
  void (*v40)(unint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, _QWORD, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void (*v59)(uint64_t, uint64_t);
  void (*v60)(uint64_t, _QWORD, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  void (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v68 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for RRMetadata();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_25_2();
  v7 = v5 - v6;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v68 - v9;
  v11 = type metadata accessor for RRDataSourceMetadataValue();
  v79 = *(_QWORD **)(v11 - 8);
  v80 = v11;
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_2_12();
  v69 = v13;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_13_3();
  v77 = v15;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_13_3();
  v74 = v17;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_13_3();
  v73 = v19;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_23_2();
  v70 = v21;
  v22 = OUTLINED_FUNCTION_31_1();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_4_5();
  v26 = v25 - v24;
  RRCandidate.entity.getter();
  v27 = RREntity.metadata.getter();
  OUTLINED_FUNCTION_35_1(v26, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    OUTLINED_FUNCTION_10_2();
    v29 = v27;
    v31 = v27 + v30;
    v32 = v4;
    v33 = *(_QWORD *)(v4 + 72);
    v76 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
    v75 = *MEMORY[0x1E0DA3D48];
    v68[1] = v29;
    swift_bridgeObjectRetain();
    v78 = MEMORY[0x1E0DEE9D8];
    v71 = v10;
    v72 = v32;
    do
    {
      v76(v10, v31, v3);
      OUTLINED_FUNCTION_24_2(v7, (uint64_t)v10);
      v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 88))(v7, v3);
      if (v34 == v75)
      {
        (*(void (**)(uint64_t, uint64_t))(v32 + 96))(v7, v3);
        v35 = v74;
        v36 = v80;
        OUTLINED_FUNCTION_20_0(v74, v7);
        v37 = v35;
        v10 = v71;
        OUTLINED_FUNCTION_20_0((uint64_t)v2, v37);
        __swift_storeEnumTagSinglePayload((uint64_t)v2, 0, 1, v36);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v3);
      }
      else
      {
        v38 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v38(v7, v3);
        v36 = v80;
        __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v80);
        v38((uint64_t)v10, v3);
      }
      if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v36) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v2, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        v39 = v79;
      }
      else
      {
        v40 = (void (*)(unint64_t))v79[4];
        v41 = v73;
        OUTLINED_FUNCTION_20_0(v73, (uint64_t)v2);
        OUTLINED_FUNCTION_20_0(v77, v41);
        v42 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v42 + 16) + 1, 1, v42);
          v42 = v47;
        }
        v44 = *(_QWORD *)(v42 + 16);
        v43 = *(_QWORD *)(v42 + 24);
        v78 = v42;
        if (v44 >= v43 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v78);
          v78 = v48;
        }
        *(_QWORD *)(v78 + 16) = v44 + 1;
        v39 = v79;
        OUTLINED_FUNCTION_10_2();
        v40(v46 + v45 + v39[9] * v44);
        v32 = v72;
      }
      v31 += v33;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease_n();
    v49 = v78;
  }
  else
  {
    swift_bridgeObjectRelease();
    v49 = MEMORY[0x1E0DEE9D8];
    v39 = v79;
  }
  v50 = (void (*)(uint64_t, _QWORD, uint64_t))v39[13];
  v50(v70, *MEMORY[0x1E0DA3DC0], v80);
  v51 = *(_QWORD *)(v49 + 16);
  if (v51)
  {
    OUTLINED_FUNCTION_10_2();
    v53 = v49 + v52;
    v54 = v39[9];
    lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3DC8], MEMORY[0x1E0DA3DD8]);
    v55 = v49;
    swift_bridgeObjectRetain();
    v56 = v53;
    v57 = v70;
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      v56 += v54;
      if (!--v51)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    v59 = (void (*)(uint64_t, uint64_t))v39[1];
    v60 = v50;
    v61 = v80;
    v59(v57, v80);
    v62 = v69;
    v60(v69, *MEMORY[0x1E0DA3DB8], v61);
    v63 = *(_QWORD *)(v55 + 16);
    if (v63)
    {
      swift_bridgeObjectRetain();
      v64 = v63 - 1;
      do
      {
        v65 = v64;
        v66 = dispatch thunk of static Equatable.== infix(_:_:)();
        if ((v66 & 1) != 0)
          break;
        v64 = v65 - 1;
        v53 += v54;
      }
      while (v65);
      v58 = v66 ^ 1;
      swift_bridgeObjectRelease();
    }
    else
    {
      v58 = 1;
    }
    v59(v62, v61);
  }
  else
  {
LABEL_21:
    ((void (*)(uint64_t, uint64_t))v39[1])(v70, v80);
    v58 = 0;
  }
  swift_bridgeObjectRelease();
  return v58 & 1;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance UserParseFeatureExtractor()
{
  UserParseFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance UserParseFeatureExtractor(uint64_t a1)
{
  uint64_t v1;

  return UserParseFeatureExtractor.extractImpl(from:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

uint64_t outlined init with copy of CamParse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CamParse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CamUSOParse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CamUSOParse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined destroy of CamParse(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  OUTLINED_FUNCTION_18_0(v2);
  OUTLINED_FUNCTION_1_5();
}

uint64_t outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void outlined destroy of RRDataSourceMetadataValue?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_18_0(v2);
  OUTLINED_FUNCTION_1_5();
}

void lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x1C3BCB3E4](a3, v5), a1);
  }
  OUTLINED_FUNCTION_1_5();
}

uint64_t initializeBufferWithCopyOfBuffer for UserParseFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for UserParseFeatureExtractor()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for UserParseFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithTake for UserParseFeatureExtractor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserParseFeatureExtractor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserParseFeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserParseFeatureExtractor()
{
  return &type metadata for UserParseFeatureExtractor;
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_6_5()
{
  return type metadata accessor for CamParse(0);
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return type metadata accessor for ActionCandidate();
}

uint64_t OUTLINED_FUNCTION_8_4()
{
  return type metadata accessor for CamParse(0);
}

uint64_t OUTLINED_FUNCTION_11_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_15_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  return type metadata accessor for CamUSOParse(0);
}

uint64_t OUTLINED_FUNCTION_17_2()
{
  return type metadata accessor for ActionCandidate();
}

uint64_t OUTLINED_FUNCTION_18_0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_19_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_20_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_21_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with copy of CamParse(v2 + *(int *)(a1 + 20), v1);
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_24_2(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_27_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_28_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_29_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_30_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_31_1()
{
  return type metadata accessor for RREntity();
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of CamUSOParse(v0, v1);
}

uint64_t OUTLINED_FUNCTION_33_2()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;

  return v1(v0, *(_QWORD *)(v2 - 232));
}

uint64_t OUTLINED_FUNCTION_34_1()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_35_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  return swift_bridgeObjectRetain();
}

void HeuristicScorer.scoreHypothesis(features:loggingId:)(Swift::OpaquePointer a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD *v8;
  const char *v9;

  v2 = (void *)OUTLINED_FUNCTION_0_13(0x535F5050415F5349, 0xEF54554354524F48);
  if (!v2)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *v8 = 0xD000000000000029;
    v9 = "Could not find extracted IS_APP_SHORTCUT.";
LABEL_7:
    OUTLINED_FUNCTION_0_14((uint64_t)v8, (uint64_t)v9);
    return;
  }
  v3 = v2;
  v4 = objc_msgSend(v2, sel_int64Value);

  v5 = (void *)OUTLINED_FUNCTION_0_13(0x656D6D6F705F7369, 0xE900000000000073);
  if (!v5)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *v8 = 0xD000000000000023;
    v9 = "Could not find extracted IS_POMMES.";
    goto LABEL_7;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, sel_int64Value);

  if (v4)
  {
    HeuristicScorer.scoreAppShortcut(features:)(a1);
  }
  else if (v7)
  {
    HeuristicScorer.scorePommes(features:)(a1);
  }
  else
  {
    HeuristicScorer.scoreNLX(features:)(a1);
  }
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HeuristicScorer.scoreAppShortcut(features:)(Swift::OpaquePointer features)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  Swift::Double result;
  _QWORD *v15;
  const char *v16;

  if (one-time initialization token for ranker != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.ranker);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)OUTLINED_FUNCTION_7_4();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C2E0C000, v2, v3, "AppShortcut feature flag enabled, running AppShortcut scoring logic", v4, 2u);
    OUTLINED_FUNCTION_3();
  }

  v5 = (void *)OUTLINED_FUNCTION_3_8(0xD000000000000013, 0x80000001C2E99680);
  if (!v5)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *v15 = 0xD00000000000002DLL;
    v16 = "Could not find extracted IS_APP_FOREGROUNDED.";
LABEL_14:
    OUTLINED_FUNCTION_0_14((uint64_t)v15, (uint64_t)v16);
    return result;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, sel_int64Value);

  v8 = (void *)OUTLINED_FUNCTION_2_13(0xD000000000000018, (uint64_t)"repeated_flow_handler_id");
  if (!v8)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *v15 = 0xD000000000000032;
    v16 = "Could not find extracted REPEATED_FLOW_HANDLER_ID.";
    goto LABEL_14;
  }
  v9 = v8;
  v10 = objc_msgSend(v8, sel_int64Value);

  if (v7)
  {
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)OUTLINED_FUNCTION_7_4();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C2E0C000, v11, v12, "Boosting auto shortcut score because app is on screen", v13, 2u);
      OUTLINED_FUNCTION_3();
    }

    if (v10)
      return 0.57;
    else
      return 0.56;
  }
  else if (v10)
  {
    return 0.53;
  }
  else
  {
    return 0.52;
  }
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HeuristicScorer.scorePommes(features:)(Swift::OpaquePointer features)
{
  void *v1;
  void *v2;
  unint64_t v3;
  void *v4;
  void *v5;
  _BOOL4 v6;
  Swift::Double result;
  _QWORD *v8;
  const char *v9;

  v1 = (void *)OUTLINED_FUNCTION_0_13(0xD000000000000016, 0x80000001C2E98EA0);
  if (v1)
  {
    v2 = v1;
    v3 = (unint64_t)objc_msgSend(v1, sel_int64Value);

    v4 = (void *)OUTLINED_FUNCTION_0_13(0x665F73656D6D6F70, 0xEF6B6361626C6C61);
    if (v4)
    {
      v5 = v4;
      v6 = (v3 | (unint64_t)objc_msgSend(v4, sel_int64Value)) == 0;

      return dbl_1C2E94A40[v6];
    }
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *v8 = 0xD000000000000029;
    v9 = "Could not find extracted POMMES_FALLBACK.";
  }
  else
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *v8 = 0xD000000000000030;
    v9 = "Could not find extracted POMMES_HIGH_CONFIDENCE.";
  }
  OUTLINED_FUNCTION_0_14((uint64_t)v8, (uint64_t)v9);
  return result;
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HeuristicScorer.scoreNLX(features:)(Swift::OpaquePointer features)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  _BOOL4 v15;
  double *v16;
  _QWORD *v17;
  const char *v18;
  Swift::Double result;

  v1 = (void *)OUTLINED_FUNCTION_2_13(0xD000000000000017, (uint64_t)"high_priority_nl_parser");
  if (!v1)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *v17 = 0xD000000000000030;
    v18 = "Could not find extracted POMMES_HIGH_CONFIDENCE.";
LABEL_13:
    OUTLINED_FUNCTION_0_14((uint64_t)v17, (uint64_t)v18);
    return result;
  }
  v2 = v1;
  v3 = OUTLINED_FUNCTION_5_6(v1);

  v4 = (void *)OUTLINED_FUNCTION_3_8(0x705F6C6E5F706F74, 0xEC00000065737261);
  if (!v4)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *v17 = 0xD000000000000026;
    v18 = "Could not find extracted TOP_NL_PARSE.";
    goto LABEL_13;
  }
  v5 = v4;
  v6 = OUTLINED_FUNCTION_5_6(v4);

  v7 = (void *)OUTLINED_FUNCTION_3_8(0x65737261705F6C6ELL, 0xEE0061626F72705FLL);
  if (!v7)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *v17 = 0xD000000000000025;
    v18 = "Could not find extracted PARSE_PROBA.";
    goto LABEL_13;
  }
  v8 = v7;
  objc_msgSend(v7, sel_doubleValue);

  v9 = (void *)OUTLINED_FUNCTION_2_13(0xD000000000000018, (uint64_t)"repeated_flow_handler_id");
  if (!v9
    || (v10 = v9,
        v11 = OUTLINED_FUNCTION_5_6(v9),
        v10,
        (v12 = (void *)OUTLINED_FUNCTION_2_13(0xD000000000000014, (uint64_t)"plugin_affinity_rank")) == 0))
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *v17 = 0xD000000000000032;
    v18 = "Could not find extracted REPEATED_FLOW_HANDLER_ID.";
    goto LABEL_13;
  }
  v13 = v12;
  v14 = OUTLINED_FUNCTION_5_6(v12);

  if (!v6)
  {
    v15 = v14 == (id)2;
    v16 = (double *)&unk_1C2E94A60;
LABEL_16:
    result = v16[v15];
    if (!v11)
      return result;
    return result + 0.01;
  }
  if (v3)
  {
    v15 = v14 == (id)2;
    v16 = (double *)&unk_1C2E94A50;
    goto LABEL_16;
  }
  result = 0.52;
  if (v14 != (id)2)
    result = 0.5;
  if (v11)
    return result + 0.01;
  return result;
}

uint64_t type metadata accessor for HeuristicScorer()
{
  return objc_opt_self();
}

void protocol witness for Scoring.scoreHypothesis(features:loggingId:) in conformance HeuristicScorer(Swift::OpaquePointer a1)
{
  HeuristicScorer.scoreHypothesis(features:loggingId:)(a1);
}

uint64_t OUTLINED_FUNCTION_0_14@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 8) = (a2 - 32) | 0x8000000000000000;
  *(_BYTE *)(a1 + 16) = 1;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_2_13@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000, v2);
}

uint64_t OUTLINED_FUNCTION_3_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1, a2, v2);
}

id OUTLINED_FUNCTION_5_6(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 1480));
}

uint64_t OUTLINED_FUNCTION_7_4()
{
  return swift_slowAlloc();
}

uint64_t dispatch thunk of ActionHandler.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ActionHandler.handle(camInput:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

void static PommesFeatureExtractor.configuredScoreThreshold()()
{
  id v0;
  id v1;
  id v2;
  void *v3;

  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000015, 0x80000001C2E9A5B0);
  if (v1)
  {
    v2 = v1;
    v3 = (void *)MEMORY[0x1C3BCA844](0xD000000000000012, 0x80000001C2E9A5D0);
    objc_msgSend(v2, sel_doubleForKey_, v3);

  }
}

uint64_t *PommesFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static PommesFeatureExtractor.extractedFeatures;
}

uint64_t PommesFeatureExtractor.extractImpl(from:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t inited;
  void *v12;
  uint64_t v14;

  v4 = type metadata accessor for CamParse(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = closure #1 in PommesFeatureExtractor.extractImpl(from:)(a1, a2);
  v8 = closure #2 in PommesFeatureExtractor.extractImpl(from:)(a1);
  v9 = type metadata accessor for ActionCandidate();
  outlined init with copy of CamParse(a1 + *(int *)(v9 + 20), (uint64_t)v6);
  v10 = swift_getEnumCaseMultiPayload() == 1;
  outlined destroy of CamParse((uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2E93F60;
  *(_QWORD *)(inited + 32) = 0xD000000000000016;
  *(_QWORD *)(inited + 40) = 0x80000001C2E98EA0;
  v12 = (void *)objc_opt_self();
  *(_QWORD *)(inited + 48) = objc_msgSend(v12, sel_featureValueWithInt64_, v7);
  *(_QWORD *)(inited + 56) = 0x665F73656D6D6F70;
  *(_QWORD *)(inited + 64) = 0xEF6B6361626C6C61;
  *(_QWORD *)(inited + 72) = objc_msgSend(v12, sel_featureValueWithInt64_, v8);
  *(_QWORD *)(inited + 80) = 0x656D6D6F705F7369;
  *(_QWORD *)(inited + 88) = 0xE900000000000073;
  *(_QWORD *)(inited + 96) = objc_msgSend(v12, sel_featureValueWithInt64_, v10);
  type metadata accessor for MLFeatureValue();
  return Dictionary.init(dictionaryLiteral:)();
}

BOOL closure #1 in PommesFeatureExtractor.extractImpl(from:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  int v9;
  _BOOL8 result;
  void *v11;
  double v12;
  double v13;
  uint64_t v14;

  v4 = type metadata accessor for CamParse(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (void **)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ActionCandidate();
  outlined init with copy of CamParse(a1 + *(int *)(v7 + 20), (uint64_t)v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v9 = EnumCaseMultiPayload;
    result = 0;
    if (v9 == 1)
    {
      v11 = *v6;
      dispatch thunk of PommesResponse.primaryQueryConfidence()();
      v13 = v12;

      return v13 >= a2;
    }
  }
  else
  {
    outlined destroy of CamParse((uint64_t)v6);
    return 0;
  }
  return result;
}

uint64_t closure #2 in PommesFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  int v7;
  uint64_t result;
  void *v9;
  char v10;
  uint64_t v11;

  v2 = type metadata accessor for CamParse(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (void **)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for ActionCandidate();
  outlined init with copy of CamParse(a1 + *(int *)(v5 + 20), (uint64_t)v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v7 = EnumCaseMultiPayload;
    result = 0;
    if (v7 == 1)
    {
      v9 = *v4;
      v10 = dispatch thunk of PommesResponse.isPersonalDomainFallback.getter();

      return v10 & 1;
    }
  }
  else
  {
    outlined destroy of CamParse((uint64_t)v4);
    return 0;
  }
  return result;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance PommesFeatureExtractor()
{
  PommesFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance PommesFeatureExtractor(uint64_t a1)
{
  double *v1;

  return PommesFeatureExtractor.extractImpl(from:)(a1, *v1);
}

id @nonobjc NSUserDefaults.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;

  if (a2)
  {
    v3 = (void *)MEMORY[0x1C3BCA844]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  return v4;
}

ValueMetadata *type metadata accessor for PommesFeatureExtractor()
{
  return &type metadata for PommesFeatureExtractor;
}

uint64_t CamSingletonProvider.camHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return outlined consume of CamHandler?(v3);
}

void static CamSingletonProvider.cam()(uint64_t *a1@<X8>)
{
  static CamSingletonProvider.cam(camEnabledFeatures:allowDefaultAskRepeatModel:)((uint64_t)&outlined read-only object #0 of static CamSingletonProvider.cam(), 0, a1);
}

void static CamSingletonProvider.cam(camEnabledFeatures:allowDefaultAskRepeatModel:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  NSObject *v3;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *log;
  os_log_type_t type;
  uint64_t v43;
  uint64_t v44;

  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.ambiguityHandling);
  OUTLINED_FUNCTION_7_5();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = OUTLINED_FUNCTION_4();
    v44 = OUTLINED_FUNCTION_4();
    *(_DWORD *)v10 = 136315394;
    v11 = OUTLINED_FUNCTION_8_5();
    v12 = MEMORY[0x1C3BCA9B8](v11, &type metadata for CamFeature);
    v14 = v13;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_1_10();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2E0C000, v8, v9, "camEnabledFeatures: %s, allowDefaultAskRepeatModel: %{BOOL}d", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_1_10();
  v15 = qword_1ED7999A0;
  if (qword_1ED7999A0)
  {
    v16 = qword_1ED7999A8;
    OUTLINED_FUNCTION_10_3();
    swift_bridgeObjectRetain();
    Logger.logObject.getter();
    v17 = OUTLINED_FUNCTION_6_6();
    if (OUTLINED_FUNCTION_5_7(v17))
    {
      v18 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1C2E0C000, v3, v9, "Found existing CamHandler", v18, 2u);
      OUTLINED_FUNCTION_3();
    }

    if ((specialized static Array<A>.== infix(_:_:)(v15, a1) & 1) != 0)
    {
      Logger.logObject.getter();
      v19 = OUTLINED_FUNCTION_6_6();
      if (OUTLINED_FUNCTION_4_8(v19))
      {
        *(_WORD *)OUTLINED_FUNCTION_4() = 0;
        OUTLINED_FUNCTION_3_9(&dword_1C2E0C000, v20, v21, "Trying to update existing CamHandler.");
        OUTLINED_FUNCTION_3();
      }

      CamHandler.update()();
      if (v22)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_24();
      }
      else
      {
        a3[3] = (uint64_t)&type metadata for CamHandler;
        a3[4] = (uint64_t)&protocol witness table for CamHandler;
        *a3 = v15;
        a3[1] = v16;
      }
      return;
    }
    OUTLINED_FUNCTION_7_5();
    OUTLINED_FUNCTION_10_3();
    swift_bridgeObjectRetain();
    v3 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_7(v23))
    {
      v24 = OUTLINED_FUNCTION_4();
      v44 = OUTLINED_FUNCTION_4();
      *(_DWORD *)v24 = 136315394;
      v25 = OUTLINED_FUNCTION_10_3();
      log = v3;
      v26 = MEMORY[0x1C3BCA9B8](v25, &type metadata for CamFeature);
      type = v9;
      v28 = v27;
      OUTLINED_FUNCTION_24();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_1_10();
      OUTLINED_FUNCTION_1_10();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      v29 = OUTLINED_FUNCTION_8_5();
      v30 = MEMORY[0x1C3BCA9B8](v29, &type metadata for CamFeature);
      v32 = v31;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_1_10();
      OUTLINED_FUNCTION_24();
      _os_log_impl(&dword_1C2E0C000, log, type, "Feature flags for existing CamHandler %s don't match: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_1_10();
    OUTLINED_FUNCTION_1_10();
    OUTLINED_FUNCTION_1_10();
  }
  Logger.logObject.getter();
  v33 = OUTLINED_FUNCTION_6_6();
  if (OUTLINED_FUNCTION_4_8(v33))
  {
    *(_WORD *)OUTLINED_FUNCTION_4() = 0;
    OUTLINED_FUNCTION_3_9(&dword_1C2E0C000, v34, v35, "Creating new CamHandler");
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_8_5();
  if (AFDeviceSupportsFullSiriUOD())
    v36 = AFShouldRunAsrOnServerForUOD() ^ 1;
  else
    v36 = 0;
  v37 = CamHandler.init(camEnabledFeatures:allowDefaultAskRepeatModel:asrOnDevice:)(a1, a2 & 1, v36);
  if (!v43)
  {
    v39 = v37;
    v40 = v38;
    type metadata accessor for CamSingletonProvider();
    swift_initStaticObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CamSingletonProvider.camHandler.setter(v39, v40);
    a3[3] = (uint64_t)&type metadata for CamHandler;
    a3[4] = (uint64_t)&protocol witness table for CamHandler;
    *a3 = v39;
    a3[1] = v40;
  }
}

void static CamSingletonProvider.cam(camEnabledFeatures:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  static CamSingletonProvider.cam(camEnabledFeatures:allowDefaultAskRepeatModel:)(a1, 0, a2);
}

uint64_t CamSingletonProvider.deinit()
{
  uint64_t v0;

  outlined consume of CamHandler?(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t CamSingletonProvider.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of CamHandler?(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unsigned __int8 *)(a1 + 32);
    v4 = (unsigned __int8 *)(a2 + 32);
    do
    {
      v6 = *v3++;
      v5 = v6;
      v8 = *v4++;
      v7 = v8;
      if (v5 == 1)
        v9 = 0x4F5455415F534D53;
      else
        v9 = 0xD000000000000010;
      if (v5 == 1)
        v10 = 0xEC000000444E4553;
      else
        v10 = 0x80000001C2E99960;
      if (v5)
        v11 = v9;
      else
        v11 = 0x455045525F4B5341;
      if (v5)
        v12 = v10;
      else
        v12 = 0xEA00000000005441;
      v13 = 0x80000001C2E99960;
      if (v7 == 1)
        v14 = 0x4F5455415F534D53;
      else
        v14 = 0xD000000000000010;
      if (v7 == 1)
        v13 = 0xEC000000444E4553;
      if (v7)
        v15 = v14;
      else
        v15 = 0x455045525F4B5341;
      if (v7)
        v16 = v13;
      else
        v16 = 0xEA00000000005441;
      if (v11 == v15 && v12 == v16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
          return 0;
      }
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return OUTLINED_FUNCTION_9_4(a1) & 1;
}

{
  return OUTLINED_FUNCTION_9_4(a1);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = OUTLINED_FUNCTION_9_4(a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for CamSingletonProvider()
{
  return objc_opt_self();
}

uint64_t outlined consume of CamHandler?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t method lookup function for CamSingletonProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t OUTLINED_FUNCTION_1_10()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_3_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

BOOL OUTLINED_FUNCTION_4_8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL OUTLINED_FUNCTION_5_7(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_7_5()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_9_4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_10_3()
{
  return swift_bridgeObjectRetain();
}

void CamModelVersion.init(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *i;
  char v20;
  unsigned __int8 v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  OUTLINED_FUNCTION_17_3();
  v4 = (void *)v3;
  if ((v3 & 0x2000000000000000) != 0)
    v5 = HIBYTE(v3) & 0xF;
  else
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    OUTLINED_FUNCTION_21_2();
    lazy protocol witness table accessor for type CamModelVersionError and conformance CamModelVersionError();
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v13 = 0xD000000000000017;
    *(_QWORD *)(v13 + 8) = 0x80000001C2E9A660;
    *(_BYTE *)(v13 + 16) = 0;
    swift_willThrow();
LABEL_76:
    OUTLINED_FUNCTION_4_9();
    return;
  }
  v6 = v2;
  v54 = v2;
  v55 = v3;
  v52 = 45;
  v53 = 0xE100000000000000;
  MEMORY[0x1E0C80A78](v2);
  v49[2] = &v52;
  swift_bridgeObjectRetain();
  v7 = specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v49, v6, (unint64_t)v4);
  if ((v8 & 1) != 0)
  {
    v11 = (uint64_t)v4;
    v12 = v6;
  }
  else
  {
    v9 = v7;
    if (4 * v5 < v7 >> 14)
    {
      __break(1u);
      goto LABEL_72;
    }
    v10 = String.subscript.getter();
    MEMORY[0x1C3BCA8B0](v10);
    OUTLINED_FUNCTION_12();
    String.removeSubrange(_:)();
    v12 = v54;
    v11 = v55;
  }
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v52 = 0x206E6F6973726556;
  v53 = 0xE800000000000000;
  v14._countAndFlagsBits = v6;
  v14._object = v4;
  String.append(_:)(v14);
  OUTLINED_FUNCTION_21_2();
  v15._countAndFlagsBits = 0x61766E6920736920;
  v15._object = (void *)0xEB0000000064696CLL;
  String.append(_:)(v15);
  v6 = v52;
  v1 = v53;
  v52 = v12;
  v53 = v11;
  v50 = 46;
  v51 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v5 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v5 + 16) != 3)
  {
    OUTLINED_FUNCTION_12();
    v20 = 1;
LABEL_75:
    lazy protocol witness table accessor for type CamModelVersionError and conformance CamModelVersionError();
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v48 = v6;
    *(_QWORD *)(v48 + 8) = v1;
    *(_BYTE *)(v48 + 16) = v20;
    swift_willThrow();
    swift_bridgeObjectRelease();
    goto LABEL_76;
  }
  v0 = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 40);
  v16 = HIBYTE(v9) & 0xF;
  v17 = v0 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x2000000000000000) != 0)
    v18 = HIBYTE(v9) & 0xF;
  else
    v18 = v0 & 0xFFFFFFFFFFFFLL;
  if (!v18)
  {
LABEL_73:
    OUTLINED_FUNCTION_12();
LABEL_74:
    v20 = 2;
    goto LABEL_75;
  }
  if ((v9 & 0x1000000000000000) != 0)
  {
LABEL_72:
    swift_bridgeObjectRetain();
    v47 = specialized _parseInteger<A, B>(ascii:radix:)(v0, v9, 10);
    swift_bridgeObjectRelease();
    if ((v47 & 0x100000000) == 0)
      goto LABEL_60;
    goto LABEL_73;
  }
  if ((v9 & 0x2000000000000000) == 0)
  {
    if ((v0 & 0x1000000000000000) == 0)
      goto LABEL_78;
    for (i = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
          ;
          i = (unsigned __int8 *)_StringObject.sharedUTF8.getter())
    {
      LOBYTE(v50) = ((unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(i, v17, 10) >> 32) & 1;
      LOBYTE(v16) = v50;
LABEL_59:
      if ((v16 & 1) != 0)
        break;
LABEL_60:
      if (*(_QWORD *)(v5 + 16) >= 2uLL)
      {
        v40 = *(_QWORD *)(v5 + 48);
        v41 = *(_QWORD *)(v5 + 56);
        swift_bridgeObjectRetain();
        if ((specialized FixedWidthInteger.init(_:)(v40, v41) & 0x100000000) != 0)
          goto LABEL_73;
        if (*(_QWORD *)(v5 + 16) < 3uLL)
        {
          __break(1u);
          goto LABEL_81;
        }
        v42 = *(_QWORD *)(v5 + 64);
        v43 = *(_QWORD *)(v5 + 72);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_12();
        if ((specialized FixedWidthInteger.init(_:)(v42, v43) & 0x100000000) != 0)
          goto LABEL_74;
        swift_bridgeObjectRelease();
        goto LABEL_76;
      }
      __break(1u);
LABEL_78:
      ;
    }
    goto LABEL_73;
  }
  v52 = *(_QWORD *)(v5 + 32);
  v53 = v9 & 0xFFFFFFFFFFFFFFLL;
  if (v0 == 43)
  {
    if (!v16)
      goto LABEL_82;
    if (v16 == 1)
      goto LABEL_59;
    v24 = (BYTE1(v0) - 48);
    if (v24 > 9)
      goto LABEL_44;
    if (v16 != 2)
    {
      if ((BYTE2(v0) - 48) > 9u)
        goto LABEL_44;
      v25 = 10 * v24 + (BYTE2(v0) - 48);
      v26 = v16 - 3;
      if (v16 != 3)
      {
        v27 = (unsigned __int8 *)&v52 + 3;
        while (1)
        {
          v28 = *v27 - 48;
          if (v28 > 9)
            goto LABEL_44;
          v29 = 10 * v25;
          if ((v29 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_44;
          v25 = v29 + v28;
          if (__CFADD__((_DWORD)v29, v28))
            goto LABEL_44;
          LOBYTE(v16) = 0;
          ++v27;
          if (!--v26)
            goto LABEL_59;
        }
      }
    }
LABEL_58:
    LOBYTE(v16) = 0;
    goto LABEL_59;
  }
  if (v0 != 45)
  {
    if (!v16)
      goto LABEL_44;
    v30 = (v0 - 48);
    if (v30 > 9)
      goto LABEL_44;
    if (v16 != 1)
    {
      if ((BYTE1(v0) - 48) > 9u)
        goto LABEL_44;
      v31 = 10 * v30 + (BYTE1(v0) - 48);
      v32 = v16 - 2;
      if (v16 != 2)
      {
        v33 = (unsigned __int8 *)&v52 + 2;
        while (1)
        {
          v34 = *v33 - 48;
          if (v34 > 9)
            goto LABEL_44;
          v35 = 10 * v31;
          if ((v35 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_44;
          v31 = v35 + v34;
          if (__CFADD__((_DWORD)v35, v34))
            goto LABEL_44;
          LOBYTE(v16) = 0;
          ++v33;
          if (!--v32)
            goto LABEL_59;
        }
      }
    }
    goto LABEL_58;
  }
  if (v16)
  {
    if (v16 == 1)
      goto LABEL_59;
    v21 = BYTE1(v0) - 48;
    if ((BYTE1(v0) - 48) <= 9u)
    {
      v22 = v21 == 0;
      v23 = -v21;
      if (v22)
      {
        if (v16 == 2)
        {
          LOBYTE(v16) = 0;
          goto LABEL_59;
        }
        v36 = BYTE2(v0) - 48;
        if ((BYTE2(v0) - 48) <= 9u)
        {
          v37 = 10 * v23;
          if ((v37 & 0xFFFFFFFF00000000) == 0)
          {
            v38 = v37 - v36;
            if (v37 >= v36)
            {
              v39 = v16 - 3;
              if (v16 == 3)
                goto LABEL_58;
              v44 = (unsigned __int8 *)&v52 + 3;
              while (1)
              {
                v45 = *v44 - 48;
                if (v45 > 9)
                  break;
                v46 = 10 * v38;
                if ((v46 & 0xFFFFFFFF00000000) != 0)
                  break;
                v38 = v46 - v45;
                if (v46 < v45)
                  break;
                LOBYTE(v16) = 0;
                ++v44;
                if (!--v39)
                  goto LABEL_59;
              }
            }
          }
        }
      }
    }
LABEL_44:
    LOBYTE(v16) = 1;
    goto LABEL_59;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
}

uint64_t CamLogOutput.init(prediction:score:threshold:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  *(double *)(v3 + 24) = a2;
  *(double *)(v3 + 32) = a3;
  return v3;
}

void CamLogOutput.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamLogOutput.CodingKeys>);
  OUTLINED_FUNCTION_14_4();
  MEMORY[0x1E0C80A78](v4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys();
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_11_5();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v1)
  {
    OUTLINED_FUNCTION_1_11(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_9_5();
    OUTLINED_FUNCTION_9_5();
    swift_bridgeObjectRetain();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_1_11(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    OUTLINED_FUNCTION_21_2();
  }
  OUTLINED_FUNCTION_6_7();
}

uint64_t CamLogOutput.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 0x6974636964657270 && a2 == 0xEA00000000006E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x65726F6373 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x726563726F666E65 && a2 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t CamLogOutput.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2E2823C + 4 * byte_1C2E94B50[a1]))(0x6974636964657270, 0xEA00000000006E6FLL);
}

uint64_t sub_1C2E2823C()
{
  return 0x65726F6373;
}

uint64_t sub_1C2E28250()
{
  return 0x6C6F687365726874;
}

uint64_t sub_1C2E2826C()
{
  return 0x726563726F666E65;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CamLogOutput.CodingKeys()
{
  unsigned __int8 *v0;

  return CamLogOutput.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamLogOutput.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CamLogOutput.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamLogOutput.CodingKeys()
{
  lazy protocol witness table accessor for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamLogOutput.CodingKeys()
{
  lazy protocol witness table accessor for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CamLogOutput.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CamLogOutput()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for CamModelMetadata(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[5];
    swift_bridgeObjectRetain();
    if (v8 == 1)
    {
      v9 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v9;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v8;
      swift_bridgeObjectRetain();
    }
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = *(int *)(a3 + 28);
    v12 = (void *)(a1 + v11);
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for Locale();
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for CamModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40) != 1)
    swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Locale();
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v7 == 1)
  {
    v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v7;
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(int *)(a3 + 28);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithCopy for CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  int EnumTagSinglePayload;
  int v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a1 + 16);
  v7 = (_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) == 1)
  {
    if (v8 == 1)
    {
      v9 = *(_OWORD *)(a2 + 32);
      *v6 = *v7;
      *(_OWORD *)(a1 + 32) = v9;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    outlined destroy of CamModelVersion(a1 + 16);
    v10 = *(_OWORD *)(a2 + 32);
    *v6 = *v7;
    *(_OWORD *)(a1 + 32) = v10;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v11 = *(int *)(a3 + 28);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14);
  v16 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14);
  if (!EnumTagSinglePayload)
  {
    v17 = *(_QWORD *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_13;
  }
  if (v16)
  {
LABEL_13:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  return a1;
}

uint64_t outlined destroy of CamModelVersion(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(int *)(a3 + 28);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40) == 1)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 40);
  if (v7 == 1)
  {
    outlined destroy of CamModelVersion(a1 + 16);
LABEL_4:
    v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(int *)(a3 + 28);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    v15 = *(_QWORD *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_11;
  }
  if (v14)
  {
LABEL_11:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for CamModelMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E28A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CamModelMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E28A98(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CamModelMetadata()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CamModelMetadata;
  if (!type metadata singleton initialization cache for CamModelMetadata)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for CamModelMetadata()
{
  unint64_t v0;

  type metadata accessor for Locale?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Locale?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Locale?)
  {
    type metadata accessor for Locale();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Locale?);
  }
}

uint64_t destroy for CamModelVersion()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CamModelVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CamModelVersion(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for CamModelVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CamModelVersion(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CamModelVersion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CamModelVersion()
{
  return &type metadata for CamModelVersion;
}

void protocol witness for Encodable.encode(to:) in conformance CamLogOutput(_QWORD *a1)
{
  CamLogOutput.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamLogOutput(uint64_t a1)
{
  MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamLogOutput, a1);
  return ReflectedStringConvertible.description.getter(a1);
}

uint64_t CamModelMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6F4C776F64616873 && a2 == 0xE900000000000067;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t CamModelMetadata.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2E28FFC + 4 * byte_1C2E94B54[a1]))(0x6D614E6C65646F6DLL, 0xE900000000000065);
}

uint64_t sub_1C2E28FFC()
{
  return 0x6E6F6973726576;
}

uint64_t sub_1C2E29014()
{
  return 0x6F4C776F64616873;
}

uint64_t sub_1C2E2902C()
{
  return 0x656C61636F6CLL;
}

void CamModelMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamModelMetadata.CodingKeys>);
  OUTLINED_FUNCTION_14_4();
  MEMORY[0x1E0C80A78](v4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys();
  OUTLINED_FUNCTION_8_6();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type CamModelVersion and conformance CamModelVersion();
    OUTLINED_FUNCTION_11_5();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_11_5();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for CamModelMetadata();
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type CamLogOutput and conformance CamLogOutput(&lazy protocol witness table cache variable for type Locale and conformance Locale, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E50]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  OUTLINED_FUNCTION_1_11(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_6_7();
}

void CamModelMetadata.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  OUTLINED_FUNCTION_17_3();
  v24 = v0;
  v3 = v2;
  v20 = v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CamModelMetadata.CodingKeys>);
  MEMORY[0x1E0C80A78](v21);
  v8 = type metadata accessor for CamModelMetadata();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_12_3();
  *(_BYTE *)(v1 + 48) = 2;
  v10 = v1 + *(int *)(v9 + 28);
  v11 = type metadata accessor for Locale();
  v23 = v10;
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v11);
  v12 = v3[3];
  v22 = v3;
  __swift_project_boxed_opaque_existential_1(v3, v12);
  lazy protocol witness table accessor for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys();
  v13 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
  {
    v16 = v23;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    outlined destroy of Locale?(v16);
  }
  else
  {
    v14 = (uint64_t)v7;
    v15 = v20;
    LOBYTE(v25) = 0;
    *(_QWORD *)v1 = KeyedDecodingContainer.decode(_:forKey:)();
    *(_QWORD *)(v1 + 8) = v17;
    lazy protocol witness table accessor for type CamModelVersion and conformance CamModelVersion();
    OUTLINED_FUNCTION_20_1();
    v18 = v26;
    *(_OWORD *)(v1 + 16) = v25;
    *(_OWORD *)(v1 + 32) = v18;
    LOBYTE(v25) = 2;
    v24 = 0;
    *(_BYTE *)(v1 + 48) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v25) = 3;
    lazy protocol witness table accessor for type CamLogOutput and conformance CamLogOutput(&lazy protocol witness table cache variable for type Locale and conformance Locale, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E68]);
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_0_15();
    outlined assign with take of Locale?(v14, v23);
    outlined init with copy of CamModelMetadata(v1, v15);
    OUTLINED_FUNCTION_13_4();
    outlined destroy of CamModelMetadata(v1);
  }
  OUTLINED_FUNCTION_4_9();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CamModelMetadata.CodingKeys()
{
  unsigned __int8 *v0;

  return CamModelMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamModelMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CamModelMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamModelMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamModelMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance CamModelMetadata()
{
  CamModelMetadata.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance CamModelMetadata(_QWORD *a1)
{
  CamModelMetadata.encode(to:)(a1);
}

unint64_t specialized FixedWidthInteger.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;

  v3 = HIBYTE(a2) & 0xF;
  v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    v21 = 0;
    LOBYTE(v20) = 1;
    return v21 | ((unint64_t)v20 << 32);
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      LODWORD(v8) = (_DWORD)v7;
      v27 = BYTE4(v7) & 1;
      v9 = BYTE4(v7) & 1;
      goto LABEL_38;
    }
    v26[0] = a1;
    v26[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v10 = a1;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          LODWORD(v8) = (BYTE1(a1) - 48);
          if (v8 <= 9)
          {
            v15 = v3 - 2;
            if (v15)
            {
              v16 = (unsigned __int8 *)v26 + 2;
              while (1)
              {
                v17 = *v16 - 48;
                if (v17 > 9)
                  goto LABEL_35;
                v18 = 10 * v8;
                if ((v18 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_35;
                LODWORD(v8) = v18 + v17;
                if (__CFADD__((_DWORD)v18, v17))
                  goto LABEL_35;
                v9 = 0;
                ++v16;
                if (!--v15)
                  goto LABEL_38;
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          LODWORD(v8) = (a1 - 48);
          if (v8 <= 9)
          {
            v19 = v3 - 1;
            if (v19)
            {
              v23 = (unsigned __int8 *)v26 + 1;
              while (1)
              {
                v24 = *v23 - 48;
                if (v24 > 9)
                  goto LABEL_35;
                v25 = 10 * v8;
                if ((v25 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_35;
                LODWORD(v8) = v25 + v24;
                if (__CFADD__((_DWORD)v25, v24))
                  goto LABEL_35;
                v9 = 0;
                ++v23;
                if (!--v19)
                  goto LABEL_38;
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
      if (v3)
      {
        if (v3 != 1 && (BYTE1(a1) - 48) <= 9u)
        {
          v10 = 0;
          LODWORD(v8) = -(BYTE1(a1) - 48);
          if (BYTE1(a1) == 48)
          {
            v11 = v3 - 2;
            if (v11)
            {
              v12 = (unsigned __int8 *)v26 + 2;
              while (1)
              {
                v13 = *v12 - 48;
                if (v13 > 9)
                  goto LABEL_35;
                v14 = 10 * v8;
                if ((v14 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_35;
                LODWORD(v8) = v14 - v13;
                if (v14 < v13)
                  goto LABEL_35;
                v9 = 0;
                ++v12;
                if (!--v11)
                  goto LABEL_38;
              }
            }
LABEL_37:
            v9 = 0;
            goto LABEL_38;
          }
LABEL_53:
          v9 = 1;
          LODWORD(v8) = v10;
          goto LABEL_38;
        }
LABEL_35:
        LODWORD(v8) = 0;
        v9 = 1;
LABEL_38:
        swift_bridgeObjectRelease();
        LODWORD(v20) = v9 & 1;
        goto LABEL_39;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_53;
  }
  v8 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10);
  swift_bridgeObjectRelease();
  v20 = HIDWORD(v8) & 1;
LABEL_39:
  v21 = v8;
  if ((_DWORD)v20)
    v21 = 0;
  return v21 | ((unint64_t)v20 << 32);
}

uint64_t static CamModelVersion.== infix(_:_:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a1 != a5 || a2 != a6)
    return 0;
  result = (a4 | a8) == 0;
  if (a4 && a8)
  {
    if (a3 == a7 && a4 == a8)
      return 1;
    else
      return OUTLINED_FUNCTION_7_6();
  }
  return result;
}

uint64_t CamModelVersion.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 0x726F6A616DLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x726F6E696DLL && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6863746170 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x61656C6572657270 && a2 == 0xEA00000000006573)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t CamModelVersion.CodingKeys.init(intValue:)()
{
  return 4;
}

void CamLogOutput.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  OUTLINED_FUNCTION_19_2();
}

uint64_t CamModelVersion.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2E299DC + 4 * byte_1C2E94B58[a1]))(0x726F6A616DLL, 0xE500000000000000);
}

uint64_t sub_1C2E299DC()
{
  return 0x726F6E696DLL;
}

uint64_t sub_1C2E299EC()
{
  return 0x6863746170;
}

uint64_t sub_1C2E299FC()
{
  return 0x61656C6572657270;
}

void CamModelVersion.encode(to:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_17_3();
  v2 = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamModelVersion.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_2_14();
  if (!v0)
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_2_14();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  OUTLINED_FUNCTION_1_11(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_4_9();
}

void CamModelVersion.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_17_3();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CamModelVersion.CodingKeys>);
  OUTLINED_FUNCTION_14_4();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_12_3();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_3_10();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_10_4();
  }
  OUTLINED_FUNCTION_13_4();
  OUTLINED_FUNCTION_4_9();
}

uint64_t static CamModelVersionError.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 == 1)
    {
      if (a6 == 1)
        goto LABEL_8;
      return 0;
    }
    if (a6 != 2)
      return 0;
  }
  else if (a6)
  {
    return 0;
  }
LABEL_8:
  if (a1 == a4 && a2 == a5)
    return 1;
  else
    return OUTLINED_FUNCTION_7_6();
}

void protocol witness for Hashable.hashValue.getter in conformance CamModelVersion.CodingKeys()
{
  unsigned __int8 *v0;

  CamLogOutput.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CamLogOutput.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  OUTLINED_FUNCTION_19_2();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CamModelVersion.CodingKeys()
{
  unsigned __int8 *v0;

  return CamModelVersion.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamModelVersion.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CamModelVersion.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CamModelVersion.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CamModelVersion.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamModelVersion.CodingKeys()
{
  lazy protocol witness table accessor for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamModelVersion.CodingKeys()
{
  lazy protocol witness table accessor for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance CamModelVersion(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  CamModelVersion.init(from:)();
  if (!v1)
  {
    *(_QWORD *)a1 = v3;
    *(_DWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
  }
}

void protocol witness for Encodable.encode(to:) in conformance CamModelVersion()
{
  CamModelVersion.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CamModelVersion(uint64_t a1, uint64_t a2)
{
  return static CamModelVersion.== infix(_:_:)(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

void instantiation function for generic protocol witness table for CamLogOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type CamLogOutput and conformance CamLogOutput(&lazy protocol witness table cache variable for type CamLogOutput and conformance CamLogOutput, a2, (uint64_t (*)(uint64_t))type metadata accessor for CamLogOutput, (uint64_t)&protocol conformance descriptor for CamLogOutput);
  *(_QWORD *)(a1 + 8) = v3;
}

unint64_t lazy protocol witness table accessor for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelMetadata.CodingKeys, &unk_1E7CC18E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelMetadata.CodingKeys, &unk_1E7CC18E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelMetadata.CodingKeys, &unk_1E7CC18E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelMetadata.CodingKeys, &unk_1E7CC18E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamModelVersion and conformance CamModelVersion()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion;
  if (!lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelVersion, &type metadata for CamModelVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion;
  if (!lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelVersion, &type metadata for CamModelVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion);
  }
  return result;
}

uint64_t outlined consume of CamModelVersion?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

void lazy protocol witness table accessor for type CamLogOutput and conformance CamLogOutput(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(MEMORY[0x1C3BCB3E4](a4, v6), a1);
  }
  OUTLINED_FUNCTION_1_5();
}

unint64_t lazy protocol witness table accessor for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelVersion.CodingKeys, &unk_1E7CC1858);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelVersion.CodingKeys, &unk_1E7CC1858);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelVersion.CodingKeys, &unk_1E7CC1858);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelVersion.CodingKeys, &unk_1E7CC1858);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CamModelVersionError(uint64_t a1, uint64_t a2)
{
  return static CamModelVersionError.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

void specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v4[2] = a1;
    v4[3] = 2 * v5 - 64;
  }
  OUTLINED_FUNCTION_1_5();
}

void _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v4 = String.UTF16View.index(_:offsetBy:)();
    OUTLINED_FUNCTION_16_3(v4);
  }
  else
  {
    v3 = MEMORY[0x1C3BCA910](15, a1 >> 16);
    OUTLINED_FUNCTION_16_3(v3);
  }
  OUTLINED_FUNCTION_1_5();
}

uint64_t specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD v12[2];

  v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  while (1)
  {
    v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    v9 = a1(v12);
    if (v4)
      break;
    v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v7;
    if (v7 < 0x4000)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = specialized Collection.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Collection.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = v11;
      specialized Sequence._copySequenceContents(initializing:)(v16, v11 + 32, v10, a1, a2, a3, a4);
      v14 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v14 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v12 = MEMORY[0x1E0DEE9D8];
    }
    v15 = MEMORY[0x1C3BCA8C8](v12 + 32, *(_QWORD *)(v12 + 16));
    swift_release();
    return v15;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1C3BCA8C8);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1C3BCA8C8]((char *)v16 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

void specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = a1;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    v7 = v10;
  }
  if ((a2 & 0xC) == v9)
  {
    _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = v11;
    if ((a4 & 0x1000000000000000) == 0)
      return;
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return;
  }
  v12 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  if (v12 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v12 >= a2 >> 16)
  {
    String.UTF8View._foreignDistance(from:to:)();
    return;
  }
  __break(1u);
}

void specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v11 = a4;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v29 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = a4;
LABEL_33:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = a7;
    a1[4] = v11;
    return;
  }
  v13 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v23 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v24 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v25 = v16;
  v28 = a3 - 1;
  v11 = a4;
  while (1)
  {
    v17 = v11;
    if ((v11 & 0xC) == v15)
      _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a6, a7);
    if (v17 >> 14 < v29 || v17 >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      v21 = String.UTF8View._foreignSubscript(position:)();
    }
    else
    {
      v19 = v17 >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v30[0] = a6;
        v30[1] = v24;
        v21 = *((_BYTE *)v30 + v19);
      }
      else
      {
        v20 = v23;
        if ((a6 & 0x1000000000000000) == 0)
          v20 = _StringObject.sharedUTF8.getter();
        v21 = *(_BYTE *)(v20 + v19);
      }
    }
    if ((v11 & 0xC) == v15)
    {
      _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a6, a7);
      v11 = v22;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v25 <= v11 >> 16)
      goto LABEL_35;
    v11 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(_BYTE *)(a2 + v13) = v21;
    if (v28 != v13)
    {
      ++v13;
      if (v10 != v11 >> 14)
        continue;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(uint64_t *a1, uint64_t *a2)
{
  return specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(uint64_t *a1)
{
  uint64_t v1;

  return specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(a1, *(uint64_t **)(v1 + 16)) & 1;
}

unint64_t lazy protocol witness table accessor for type CamModelVersionError and conformance CamModelVersionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamModelVersionError and conformance CamModelVersionError;
  if (!lazy protocol witness table cache variable for type CamModelVersionError and conformance CamModelVersionError)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamModelVersionError, &type metadata for CamModelVersionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersionError and conformance CamModelVersionError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamLogOutput.CodingKeys, &unk_1E7CC17C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamLogOutput.CodingKeys, &unk_1E7CC17C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamLogOutput.CodingKeys, &unk_1E7CC17C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamLogOutput.CodingKeys, &unk_1E7CC17C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys);
  }
  return result;
}

void *type metadata accessor for CamLogOutput.CodingKeys()
{
  return &unk_1E7CC17C8;
}

void *type metadata accessor for CamModelVersion.CodingKeys()
{
  return &unk_1E7CC1858;
}

uint64_t storeEnumTagSinglePayload for CamLogOutput.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C2E2AB38 + 4 * byte_1C2E94B61[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C2E2AB6C + 4 * byte_1C2E94B5C[v4]))();
}

uint64_t sub_1C2E2AB6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E2AB74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E2AB7CLL);
  return result;
}

uint64_t sub_1C2E2AB88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E2AB90);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C2E2AB94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E2AB9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CamModelMetadata.CodingKeys()
{
  return &unk_1E7CC18E8;
}

ValueMetadata *type metadata accessor for CamModelVersionError()
{
  return &type metadata for CamModelVersionError;
}

uint64_t OUTLINED_FUNCTION_0_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_1_11@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_2_14()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_3_10()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_7_6()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_8_6()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_9_5()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_10_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_13_4()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

unint64_t OUTLINED_FUNCTION_16_3(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t OUTLINED_FUNCTION_20_1()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t CamRequest.init(requestId:camId:rcId:maybeSpeechPackage:rankedActions:camEnabledFeatures:previousCamAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X7>, uint64_t a9@<X8>)
{
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a6;
  v38 = a7;
  v35 = a1;
  v36 = a5;
  v33 = a3;
  v34 = a4;
  v32 = a2;
  v39 = a9;
  v11 = (int *)type metadata accessor for CamRequest(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = OUTLINED_FUNCTION_1_12();
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v32 - v21;
  LOBYTE(a8) = *a8;
  OUTLINED_FUNCTION_4_10((uint64_t)&v32 - v21, a1);
  v23 = v32;
  OUTLINED_FUNCTION_4_10((uint64_t)v20, v32);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, v17);
  OUTLINED_FUNCTION_4_10((uint64_t)v13, (uint64_t)v22);
  OUTLINED_FUNCTION_4_10((uint64_t)&v13[v11[5]], (uint64_t)v20);
  v24 = &v13[v11[6]];
  v25 = v34;
  *(_QWORD *)v24 = v33;
  *((_QWORD *)v24 + 1) = v25;
  outlined init with copy of UUID?((uint64_t)v16, (uint64_t)&v13[v11[7]]);
  v26 = v36;
  v27 = v37;
  *(_QWORD *)&v13[v11[8]] = v36;
  *(_QWORD *)&v13[v11[10]] = v27;
  v13[v11[12]] = (char)a8;
  *(_QWORD *)&v13[v11[13]] = v38;
  v28 = &v13[v11[11]];
  v29 = v26;
  OUTLINED_FUNCTION_0_16();
  v30 = OUTLINED_FUNCTION_2_15();
  v28[*(int *)(v30 + 20)] = 5;
  v28[*(int *)(v30 + 24)] = 0;

  outlined destroy of UUID?((uint64_t)v16);
  OUTLINED_FUNCTION_3_11((uint64_t)v20);
  OUTLINED_FUNCTION_3_11((uint64_t)v22);
  *(_QWORD *)&v13[v11[9]] = MEMORY[0x1E0DEE9D8];
  outlined init with take of CamRequest((uint64_t)v13, v39);
  OUTLINED_FUNCTION_3_11(v23);
  return OUTLINED_FUNCTION_3_11(v35);
}

uint64_t CamRequest.init(requestId:camId:rcId:trpId:maybeSpeechPackage:rankedActions:camEnabledFeatures:previousCamAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10)
{
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t result;
  char v27;

  v27 = *a10;
  v17 = OUTLINED_FUNCTION_1_12();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v19(a9, a1, v17);
  v20 = (int *)type metadata accessor for CamRequest(0);
  v19(a9 + v20[5], a2, v17);
  v21 = (_QWORD *)(a9 + v20[6]);
  *v21 = a3;
  v21[1] = a4;
  outlined init with copy of UUID?(a5, a9 + v20[7]);
  *(_QWORD *)(a9 + v20[8]) = a6;
  *(_QWORD *)(a9 + v20[10]) = a7;
  *(_BYTE *)(a9 + v20[12]) = v27;
  *(_QWORD *)(a9 + v20[13]) = a8;
  v22 = a9 + v20[11];
  v23 = a6;
  OUTLINED_FUNCTION_0_16();
  v24 = OUTLINED_FUNCTION_2_15();
  *(_BYTE *)(v22 + *(int *)(v24 + 20)) = 5;
  *(_BYTE *)(v22 + *(int *)(v24 + 24)) = 0;

  outlined destroy of UUID?(a5);
  v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v25(a2, v17);
  result = ((uint64_t (*)(uint64_t, uint64_t))v25)(a1, v17);
  *(_QWORD *)(a9 + v20[9]) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t type metadata accessor for CamRequest(uint64_t a1)
{
  return type metadata accessor for CamRequest(a1, (uint64_t *)&type metadata singleton initialization cache for CamRequest);
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of CamRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CamRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void CamResponse.camAction.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void CamResponse.responseStatusCode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

SiriCam::CamAction_optional __swiftcall CamAction.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (SiriCam::CamAction_optional)rawValue;
}

uint64_t CamAction.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t lazy protocol witness table accessor for type CamAction and conformance CamAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamAction and conformance CamAction;
  if (!lazy protocol witness table cache variable for type CamAction and conformance CamAction)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamAction, &type metadata for CamAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamAction and conformance CamAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamAction and conformance CamAction;
  if (!lazy protocol witness table cache variable for type CamAction and conformance CamAction)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamAction, &type metadata for CamAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamAction and conformance CamAction);
  }
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance CamAction()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CamAction(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CamAction(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::CamAction_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CamAction(Swift::Int *a1)
{
  return CamAction.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CamAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CamAction.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t dispatch thunk of Cam.action(request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

char *initializeBufferWithCopyOfBuffer for CamUserParse(char *a1, char **a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v7[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v8 = *a2;
      v9 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v9;
      *((_QWORD *)a1 + 2) = a2[2];
      v10 = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CamUserParse(id *a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    return (*(uint64_t (**)(id *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {

    return swift_bridgeObjectRelease();
  }
}

_QWORD *initializeWithCopy for CamUserParse(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v5 = *(void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    a1[2] = *(_QWORD *)(a2 + 16);
    v7 = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for CamUserParse(void **a1, void **a2)
{
  uint64_t v4;
  void *v5;
  id v6;

  if (a1 != a2)
  {
    outlined destroy of CamUserParse((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      v5 = *a2;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      v6 = v5;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of CamUserParse(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CamUserParse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CamUserParse(uint64_t a1)
{
  return type metadata accessor for CamRequest(a1, (uint64_t *)&type metadata singleton initialization cache for CamUserParse);
}

uint64_t type metadata accessor for CamRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void *initializeWithTake for CamUserParse(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for CamUserParse(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of CamUserParse((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for CamUserParse()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for CamUserParse()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for CamRequest(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  id v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8(&a1[a3[5]], &a2[a3[5]], v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = &a1[v9];
    v12 = &a2[v9];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = &a1[v10];
    v15 = &a2[v10];
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v7))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v8(v14, v15, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v7);
    }
    v18 = a3[8];
    v19 = a3[9];
    v20 = *(void **)&a2[v18];
    *(_QWORD *)&a1[v18] = v20;
    *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
    v21 = a3[11];
    *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = type metadata accessor for Locale();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v26 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v22, v23, v24);
    v27 = type metadata accessor for CamRequestContext();
    v22[*(int *)(v27 + 20)] = v23[*(int *)(v27 + 20)];
    v22[*(int *)(v27 + 24)] = v23[*(int *)(v27 + 24)];
    v28 = a3[13];
    a1[a3[12]] = a2[a3[12]];
    *(_QWORD *)&a1[v28] = *(_QWORD *)&a2[v28];
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CamRequest(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for UUID();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease();
  v6 = a1 + a2[7];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v4))
    v5(v6, v4);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + a2[11];
  v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for CamRequest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  v13 = &a1[v9];
  v14 = &a2[v9];
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v6))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v7(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  v16 = a3[8];
  v17 = a3[9];
  v18 = *(void **)&a2[v16];
  *(_QWORD *)&a1[v16] = v18;
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v19 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for Locale();
  v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v24 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v20, v21, v22);
  v25 = type metadata accessor for CamRequestContext();
  v20[*(int *)(v25 + 20)] = v21[*(int *)(v25 + 20)];
  v20[*(int *)(v25 + 24)] = v21[*(int *)(v25 + 24)];
  v26 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for CamRequest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int EnumTagSinglePayload;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v12], 1, v6);
  v16 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v16)
    {
      v8(v13, v14, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
LABEL_7:
  v18 = a3[8];
  v19 = *(void **)&a1[v18];
  v20 = *(void **)&a2[v18];
  *(_QWORD *)&a1[v18] = v20;
  v21 = v20;

  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a3[11];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  v26 = type metadata accessor for CamRequestContext();
  v23[*(int *)(v26 + 20)] = v24[*(int *)(v26 + 20)];
  v23[*(int *)(v26 + 24)] = v24[*(int *)(v26 + 24)];
  a1[a3[12]] = a2[a3[12]];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for CamRequest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  v8 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = type metadata accessor for CamRequestContext();
  v14[*(int *)(v17 + 20)] = v15[*(int *)(v17 + 20)];
  v14[*(int *)(v17 + 24)] = v15[*(int *)(v17 + 24)];
  v18 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  return a1;
}

char *assignWithTake for CamRequest(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int EnumTagSinglePayload;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v14], 1, v6);
  v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v18)
    {
      v8(v15, v16, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v6);
LABEL_7:
  v20 = a3[8];
  v21 = *(void **)&a1[v20];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];

  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  swift_bridgeObjectRelease();
  v22 = a3[11];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  v26 = type metadata accessor for CamRequestContext();
  v23[*(int *)(v26 + 20)] = v24[*(int *)(v26 + 20)];
  v23[*(int *)(v26 + 24)] = v24[*(int *)(v26 + 24)];
  v27 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CamRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E2C2F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v6 = OUTLINED_FUNCTION_1_12();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v11;
      v12 = a3[7];
    }
    else
    {
      v7 = OUTLINED_FUNCTION_2_15();
      v12 = a3[11];
    }
    v8 = a1 + v12;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CamRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E2C3C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = OUTLINED_FUNCTION_1_12();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6] + 8) = (a2 - 1);
      return result;
    }
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = a4[7];
    }
    else
    {
      v9 = OUTLINED_FUNCTION_2_15();
      v12 = a4[11];
    }
    v10 = a1 + v12;
  }
  return __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

void type metadata completion function for CamRequest()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CamRequestContext();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for UUID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CamResponse(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 65284 <= 0xFFFEFFFF)
      v2 = 2;
    else
      v2 = 4;
    if (a2 + 65284 < 0xFF0000)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    else
    {
      v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((_BYTE *)a1 + 2))
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 16)) - 65285;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CamResponse(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65284 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65284 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1C2E2C684 + 4 * byte_1C2E950ED[v4]))();
  *a1 = a2 - 252;
  return ((uint64_t (*)(void))((char *)sub_1C2E2C6B8 + 4 * byte_1C2E950E8[v4]))();
}

uint64_t sub_1C2E2C6B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1C2E2C6C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1C2E2C6C8);
  return result;
}

uint64_t sub_1C2E2C6D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1C2E2C6DCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1C2E2C6E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1C2E2C6E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

void type metadata accessor for CamResponse()
{
  OUTLINED_FUNCTION_5_8();
}

uint64_t getEnumTagSinglePayload for CamAction(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CamAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1C2E2C7D4 + 4 * byte_1C2E950F7[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1C2E2C808 + 4 * byte_1C2E950F2[v4]))();
}

uint64_t sub_1C2E2C808(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E2C810(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E2C818);
  return result;
}

uint64_t sub_1C2E2C824(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E2C82CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1C2E2C830(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E2C838(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CamAction()
{
  OUTLINED_FUNCTION_5_8();
}

uint64_t outlined copy of CamError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for CamError(uint64_t a1)
{
  return outlined consume of CamError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of CamError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CamError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CamError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CamError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of CamError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of CamError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CamError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of CamError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CamError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 4)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CamError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

void type metadata accessor for CamError()
{
  OUTLINED_FUNCTION_5_8();
}

uint64_t OUTLINED_FUNCTION_0_16()
{
  return Locale.init(identifier:)();
}

uint64_t OUTLINED_FUNCTION_1_12()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_2_15()
{
  return type metadata accessor for CamRequestContext();
}

uint64_t OUTLINED_FUNCTION_3_11(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_4_10(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t *initializeBufferWithCopyOfBuffer for DisabledAppShortcutTieBreaker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  void **v49;
  int v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t *v80;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    v23 = (uint64_t *)(v22 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
    return v23;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(int *)(a3 + 32);
  v6 = (uint64_t *)((char *)a1 + v5);
  v7 = (char *)a2 + v5;
  v8 = *(uint64_t *)((char *)a2 + v5 + 8);
  *v6 = *(uint64_t *)((char *)a2 + v5);
  v6[1] = v8;
  v9 = (int *)type metadata accessor for RankedAction();
  v10 = v9[5];
  v11 = (void **)((char *)v6 + v10);
  v12 = (void **)&v7[v10];
  v13 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v80 = a1;
  if (EnumCaseMultiPayload == 1)
  {
    v24 = *v12;
    *v11 = *v12;
    v25 = v24;
    swift_storeEnumTagMultiPayload();
LABEL_9:
    v26 = v13;
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload)
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_9;
  }
  v76 = v13;
  v15 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
  v16 = (int *)type metadata accessor for CamUSOParse(0);
  v17 = v16[5];
  v18 = (char *)v11 + v17;
  v19 = (char *)v12 + v17;
  v20 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
  }
  v27 = v16[6];
  v28 = (void **)((char *)v11 + v27);
  v29 = (void **)((char *)v12 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = v16[7];
  v32 = (char *)v11 + v31;
  v33 = (char *)v12 + v31;
  v32[4] = v33[4];
  *(_DWORD *)v32 = *(_DWORD *)v33;
  swift_bridgeObjectRetain();
  v26 = v76;
  swift_storeEnumTagMultiPayload();
LABEL_12:
  *(_QWORD *)((char *)v6 + v9[6]) = *(_QWORD *)&v7[v9[6]];
  *(_QWORD *)((char *)v6 + v9[7]) = *(_QWORD *)&v7[v9[7]];
  *(_QWORD *)((char *)v6 + v9[8]) = *(_QWORD *)&v7[v9[8]];
  v34 = v9[9];
  v35 = (char *)v6 + v34;
  v36 = &v7[v34];
  v37 = type metadata accessor for UUID();
  v38 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v37 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77 = (void (*)(char *, char *, uint64_t))v38;
  v38(v35, v36, v37);
  v39 = v9[10];
  v40 = (_QWORD *)((char *)v6 + v39);
  v41 = &v7[v39];
  v42 = *((_QWORD *)v41 + 1);
  *v40 = *(_QWORD *)v41;
  v40[1] = v42;
  *(_QWORD *)((char *)v6 + v9[11]) = *(_QWORD *)&v7[v9[11]];
  v43 = *(int *)(a3 + 36);
  v23 = v80;
  v44 = (uint64_t *)((char *)v80 + v43);
  v45 = (char *)a2 + v43;
  v46 = *(uint64_t *)((char *)a2 + v43 + 8);
  *v44 = *(uint64_t *)((char *)a2 + v43);
  v44[1] = v46;
  v47 = v9[5];
  v48 = (void **)((char *)v44 + v47);
  v49 = (void **)&v45[v47];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = swift_getEnumCaseMultiPayload();
  if (v50 == 1)
  {
    v58 = *v49;
    *v48 = *v49;
    v59 = v58;
    swift_storeEnumTagMultiPayload();
  }
  else if (v50)
  {
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v79 = v37;
    v51 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v49, v51);
    v52 = (int *)type metadata accessor for CamUSOParse(0);
    v53 = v52[5];
    v54 = (char *)v48 + v53;
    v55 = (char *)v49 + v53;
    v56 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v55, 1, v56))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
      __swift_storeEnumTagSinglePayload((uint64_t)v54, 0, 1, v56);
    }
    v37 = v79;
    v60 = v52[6];
    v61 = (void **)((char *)v48 + v60);
    v62 = (void **)((char *)v49 + v60);
    v63 = v62[1];
    *v61 = *v62;
    v61[1] = v63;
    v64 = v52[7];
    v65 = (char *)v48 + v64;
    v66 = (char *)v49 + v64;
    v65[4] = v66[4];
    *(_DWORD *)v65 = *(_DWORD *)v66;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    v23 = v80;
  }
  *(_QWORD *)((char *)v44 + v9[6]) = *(_QWORD *)&v45[v9[6]];
  *(_QWORD *)((char *)v44 + v9[7]) = *(_QWORD *)&v45[v9[7]];
  *(_QWORD *)((char *)v44 + v9[8]) = *(_QWORD *)&v45[v9[8]];
  v67 = v9[9];
  v68 = (char *)v44 + v67;
  v69 = &v45[v67];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77(v68, v69, v37);
  v70 = v9[10];
  v71 = (_QWORD *)((char *)v44 + v70);
  v72 = &v45[v70];
  v73 = *((_QWORD *)v72 + 1);
  *v71 = *(_QWORD *)v72;
  v71[1] = v73;
  *(_QWORD *)((char *)v44 + v9[11]) = *(_QWORD *)&v45[v9[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v23;
}

uint64_t destroy for DisabledAppShortcutTieBreaker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  id *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1 + *(int *)(a2 + 32);
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for RankedAction();
  v6 = (id *)(v4 + *(int *)(v5 + 20));
  type metadata accessor for CamParse(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {

  }
  else if (!EnumCaseMultiPayload)
  {
    v8 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    v9 = (uint64_t)v6 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v4 + *(int *)(v5 + 36);
  v12 = type metadata accessor for UUID();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = a1 + *(int *)(a2 + 36);
  swift_bridgeObjectRelease();
  v15 = (id *)(v14 + *(int *)(v5 + 20));
  v16 = swift_getEnumCaseMultiPayload();
  if (v16 == 1)
  {

  }
  else if (!v16)
  {
    v17 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
    v18 = (uint64_t)v15 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v18, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13(v14 + *(int *)(v5 + 36), v12);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_DWORD *initializeWithCopy for DisabledAppShortcutTieBreaker(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  void **v48;
  int v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;

  *a1 = *a2;
  v5 = *(int *)(a3 + 32);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (char *)a2 + v5;
  v8 = *(_QWORD *)((char *)a2 + v5 + 8);
  *v6 = *(_QWORD *)((char *)a2 + v5);
  v6[1] = v8;
  v9 = (int *)type metadata accessor for RankedAction();
  v10 = v9[5];
  v11 = (void **)((char *)v6 + v10);
  v12 = (void **)&v7[v10];
  v13 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v78 = a3;
  v79 = a1;
  if (EnumCaseMultiPayload == 1)
  {
    v22 = *v12;
    *v11 = *v12;
    v23 = v22;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (!EnumCaseMultiPayload)
    {
      v74 = v13;
      v15 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
      v16 = (int *)type metadata accessor for CamUSOParse(0);
      v17 = v16[5];
      v18 = (char *)v11 + v17;
      v19 = (char *)v12 + v17;
      v20 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
        __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
      }
      v25 = v16[6];
      v26 = (void **)((char *)v11 + v25);
      v27 = (void **)((char *)v12 + v25);
      v28 = v27[1];
      *v26 = *v27;
      v26[1] = v28;
      v29 = v16[7];
      v30 = (char *)v11 + v29;
      v31 = (char *)v12 + v29;
      v30[4] = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      swift_bridgeObjectRetain();
      v24 = v74;
      swift_storeEnumTagMultiPayload();
      goto LABEL_10;
    }
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v24 = v13;
LABEL_10:
  *(_QWORD *)((char *)v6 + v9[6]) = *(_QWORD *)&v7[v9[6]];
  *(_QWORD *)((char *)v6 + v9[7]) = *(_QWORD *)&v7[v9[7]];
  *(_QWORD *)((char *)v6 + v9[8]) = *(_QWORD *)&v7[v9[8]];
  v32 = v9[9];
  v33 = (char *)v6 + v32;
  v34 = &v7[v32];
  v35 = type metadata accessor for UUID();
  v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77 = v35;
  v75 = v36;
  v36(v33, v34, v35);
  v37 = v9[10];
  v38 = (_QWORD *)((char *)v6 + v37);
  v39 = &v7[v37];
  v40 = *((_QWORD *)v39 + 1);
  *v38 = *(_QWORD *)v39;
  v38[1] = v40;
  *(_QWORD *)((char *)v6 + v9[11]) = *(_QWORD *)&v7[v9[11]];
  v41 = v79;
  v42 = *(int *)(v78 + 36);
  v43 = (_QWORD *)((char *)v79 + v42);
  v44 = (char *)a2 + v42;
  v45 = *(_QWORD *)((char *)a2 + v42 + 8);
  *v43 = *(_QWORD *)((char *)a2 + v42);
  v43[1] = v45;
  v46 = v9[5];
  v47 = (void **)((char *)v43 + v46);
  v48 = (void **)&v44[v46];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v49 = swift_getEnumCaseMultiPayload();
  if (v49 == 1)
  {
    v57 = *v48;
    *v47 = *v48;
    v58 = v57;
    swift_storeEnumTagMultiPayload();
  }
  else if (v49)
  {
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v50 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v47, v48, v50);
    v51 = (int *)type metadata accessor for CamUSOParse(0);
    v52 = v51[5];
    v53 = (char *)v47 + v52;
    v54 = (char *)v48 + v52;
    v55 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v54, 1, v55))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      __swift_storeEnumTagSinglePayload((uint64_t)v53, 0, 1, v55);
    }
    v59 = v51[6];
    v60 = (void **)((char *)v47 + v59);
    v61 = (void **)((char *)v48 + v59);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = v51[7];
    v64 = (char *)v47 + v63;
    v65 = (char *)v48 + v63;
    v64[4] = v65[4];
    *(_DWORD *)v64 = *(_DWORD *)v65;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    v41 = v79;
  }
  *(_QWORD *)((char *)v43 + v9[6]) = *(_QWORD *)&v44[v9[6]];
  *(_QWORD *)((char *)v43 + v9[7]) = *(_QWORD *)&v44[v9[7]];
  *(_QWORD *)((char *)v43 + v9[8]) = *(_QWORD *)&v44[v9[8]];
  v66 = v9[9];
  v67 = (char *)v43 + v66;
  v68 = &v44[v66];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75(v67, v68, v77);
  v69 = v9[10];
  v70 = (_QWORD *)((char *)v43 + v69);
  v71 = &v44[v69];
  v72 = *((_QWORD *)v71 + 1);
  *v70 = *(_QWORD *)v71;
  v70[1] = v72;
  *(_QWORD *)((char *)v43 + v9[11]) = *(_QWORD *)&v44[v9[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v41;
}

_BYTE *assignWithCopy for DisabledAppShortcutTieBreaker(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  void (*v34)(char *, _BYTE *, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  _BYTE *v40;
  uint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  int *v64;
  int *v65;
  void (*v66)(char *, _BYTE *, uint64_t);
  uint64_t v67;
  char *__dst;
  char *__dsta;

  v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = *(int *)(a3 + 32);
  v7 = &a1[v6];
  v8 = &a2[v6];
  *v7 = *(_QWORD *)&a2[v6];
  v7[1] = *(_QWORD *)&a2[v6 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for RankedAction();
  v10 = (int *)v9;
  if (a1 != a2)
  {
    v11 = *(int *)(v9 + 20);
    v12 = (void **)((char *)v7 + v11);
    v13 = (void **)&v8[v11];
    outlined destroy of CamModelMetadata((uint64_t)v7 + v11, type metadata accessor for CamParse);
    v14 = type metadata accessor for CamParse(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v21 = *v13;
      *v12 = *v13;
      v22 = v21;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v67 = v3;
      v16 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, v13, v16);
      v65 = (int *)type metadata accessor for CamUSOParse(0);
      v17 = v65[5];
      __dst = (char *)v12 + v17;
      v18 = (char *)v13 + v17;
      v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(__dst, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v19);
      }
      v23 = v65[6];
      v24 = (void **)((char *)v12 + v23);
      v25 = (void **)((char *)v13 + v23);
      *v24 = *v25;
      v24[1] = v25[1];
      v26 = v65[7];
      v27 = (char *)v12 + v26;
      v28 = (char *)v13 + v26;
      v29 = *(_DWORD *)v28;
      v27[4] = v28[4];
      *(_DWORD *)v27 = v29;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      v3 = v67;
    }
  }
  *(_QWORD *)((char *)v7 + v10[6]) = *(_QWORD *)&v8[v10[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v7 + v10[7]) = *(_QWORD *)&v8[v10[7]];
  *(_QWORD *)((char *)v7 + v10[8]) = *(_QWORD *)&v8[v10[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v10[9];
  v31 = (char *)v7 + v30;
  v32 = &v8[v30];
  v33 = type metadata accessor for UUID();
  v34 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 24);
  v34(v31, v32, v33);
  v35 = v10[10];
  v36 = (_QWORD *)((char *)v7 + v35);
  v37 = &v8[v35];
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v7 + v10[11]) = *(_QWORD *)&v8[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = *(int *)(v3 + 36);
  v39 = &a1[v38];
  v40 = &a2[v38];
  *(_QWORD *)v39 = *(_QWORD *)&a2[v38];
  *((_QWORD *)v39 + 1) = *(_QWORD *)&a2[v38 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v41 = v10[5];
    v42 = (void **)&v39[v41];
    v43 = (void **)&v40[v41];
    outlined destroy of CamModelMetadata((uint64_t)&v39[v41], type metadata accessor for CamParse);
    v44 = type metadata accessor for CamParse(0);
    v45 = swift_getEnumCaseMultiPayload();
    if (v45 == 1)
    {
      v51 = *v43;
      *v42 = *v43;
      v52 = v51;
LABEL_19:
      swift_storeEnumTagMultiPayload();
      goto LABEL_20;
    }
    if (!v45)
    {
      v66 = v34;
      v46 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v42, v43, v46);
      v64 = (int *)type metadata accessor for CamUSOParse(0);
      v47 = v64[5];
      __dsta = (char *)v42 + v47;
      v48 = (char *)v43 + v47;
      v49 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v48, 1, v49))
      {
        v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dsta, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(__dsta, v48, v49);
        __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v49);
      }
      v34 = v66;
      v53 = v64[6];
      v54 = (void **)((char *)v42 + v53);
      v55 = (void **)((char *)v43 + v53);
      *v54 = *v55;
      v54[1] = v55[1];
      v56 = v64[7];
      v57 = (char *)v42 + v56;
      v58 = (char *)v43 + v56;
      v59 = *(_DWORD *)v58;
      v57[4] = v58[4];
      *(_DWORD *)v57 = v59;
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
LABEL_20:
  *(_QWORD *)&v39[v10[6]] = *(_QWORD *)&v40[v10[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v39[v10[7]] = *(_QWORD *)&v40[v10[7]];
  *(_QWORD *)&v39[v10[8]] = *(_QWORD *)&v40[v10[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34(&v39[v10[9]], &v40[v10[9]], v33);
  v60 = v10[10];
  v61 = &v39[v60];
  v62 = &v40[v60];
  *(_QWORD *)v61 = *v62;
  *((_QWORD *)v61 + 1) = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v39[v10[11]] = *(_QWORD *)&v40[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_DWORD *initializeWithTake for DisabledAppShortcutTieBreaker(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *__dst;
  char *__dsta;
  _DWORD *v49;
  _DWORD *v50;

  v3 = a3;
  v5 = a1;
  *a1 = *a2;
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for RankedAction();
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for CamParse(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v45 = v3;
    v49 = v5;
    v14 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    v15 = (int *)type metadata accessor for CamUSOParse(0);
    v16 = v15[5];
    __dst = &v11[v16];
    v17 = &v12[v16];
    v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(__dst, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v18);
    }
    *(_OWORD *)&v11[v15[6]] = *(_OWORD *)&v12[v15[6]];
    v20 = v15[7];
    v21 = &v11[v20];
    v22 = &v12[v20];
    v21[4] = v22[4];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    swift_storeEnumTagMultiPayload();
    v5 = v49;
    v3 = v45;
  }
  *(_QWORD *)&v7[v9[6]] = *(_QWORD *)&v8[v9[6]];
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  *(_QWORD *)&v7[v9[8]] = *(_QWORD *)&v8[v9[8]];
  v23 = v9[9];
  v24 = &v7[v23];
  v25 = &v8[v23];
  v26 = type metadata accessor for UUID();
  v27 = v24;
  v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
  v28(v27, v25, v26);
  *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
  *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
  v29 = *(int *)(v3 + 36);
  v30 = (char *)v5 + v29;
  v31 = (char *)a2 + v29;
  *(_OWORD *)v30 = *(_OWORD *)((char *)a2 + v29);
  v32 = v9[5];
  v33 = &v30[v32];
  v34 = &v31[v32];
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v46 = v28;
    v50 = v5;
    v35 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
    v36 = (int *)type metadata accessor for CamUSOParse(0);
    v37 = v36[5];
    __dsta = &v33[v37];
    v38 = &v34[v37];
    v39 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v38, 1, v39))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dsta, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(__dsta, v38, v39);
      __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v39);
    }
    *(_OWORD *)&v33[v36[6]] = *(_OWORD *)&v34[v36[6]];
    v41 = v36[7];
    v42 = &v33[v41];
    v43 = &v34[v41];
    v42[4] = v43[4];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    swift_storeEnumTagMultiPayload();
    v5 = v50;
    v28 = v46;
  }
  *(_QWORD *)&v30[v9[6]] = *(_QWORD *)&v31[v9[6]];
  *(_QWORD *)&v30[v9[7]] = *(_QWORD *)&v31[v9[7]];
  *(_QWORD *)&v30[v9[8]] = *(_QWORD *)&v31[v9[8]];
  v28(&v30[v9[9]], &v31[v9[9]], v26);
  *(_OWORD *)&v30[v9[10]] = *(_OWORD *)&v31[v9[10]];
  *(_QWORD *)&v30[v9[11]] = *(_QWORD *)&v31[v9[11]];
  return v5;
}

_BYTE *assignWithTake for DisabledAppShortcutTieBreaker(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  uint64_t v27;
  void (*v28)(char *, _BYTE *, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int *v56;
  int *v57;
  uint64_t v58;
  void (*v59)(char *, _BYTE *, uint64_t);
  char *v60;
  char *v61;

  v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = *(int *)(a3 + 32);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *v7 = *(_QWORD *)&a2[v6];
  v7[1] = v9;
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for RankedAction();
  v11 = (int *)v10;
  if (a1 != a2)
  {
    v12 = *(int *)(v10 + 20);
    v13 = (char *)v7 + v12;
    v14 = &v8[v12];
    outlined destroy of CamModelMetadata((uint64_t)v7 + v12, type metadata accessor for CamParse);
    v15 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v58 = v3;
      v16 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      v56 = (int *)type metadata accessor for CamUSOParse(0);
      v17 = v56[5];
      v60 = &v13[v17];
      v18 = &v14[v17];
      v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v60, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v60, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)v60, 0, 1, v19);
      }
      v3 = v58;
      *(_OWORD *)&v13[v56[6]] = *(_OWORD *)&v14[v56[6]];
      v21 = v56[7];
      v22 = &v13[v21];
      v23 = &v14[v21];
      v22[4] = v23[4];
      *(_DWORD *)v22 = *(_DWORD *)v23;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)((char *)v7 + v11[6]) = *(_QWORD *)&v8[v11[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v7 + v11[7]) = *(_QWORD *)&v8[v11[7]];
  *(_QWORD *)((char *)v7 + v11[8]) = *(_QWORD *)&v8[v11[8]];
  swift_bridgeObjectRelease();
  v24 = v11[9];
  v25 = (char *)v7 + v24;
  v26 = &v8[v24];
  v27 = type metadata accessor for UUID();
  v28 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 40);
  v28(v25, v26, v27);
  v29 = v11[10];
  v30 = (_QWORD *)((char *)v7 + v29);
  v31 = (uint64_t *)&v8[v29];
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v7 + v11[11]) = *(_QWORD *)&v8[v11[11]];
  swift_bridgeObjectRelease();
  v34 = *(int *)(v3 + 36);
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = *(_QWORD *)&a2[v34 + 8];
  *(_QWORD *)v35 = *(_QWORD *)&a2[v34];
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v38 = v11[5];
    v39 = &v35[v38];
    v40 = &v36[v38];
    outlined destroy of CamModelMetadata((uint64_t)&v35[v38], type metadata accessor for CamParse);
    v41 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v59 = v28;
      v42 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v39, v40, v42);
      v57 = (int *)type metadata accessor for CamUSOParse(0);
      v43 = v57[5];
      v61 = &v39[v43];
      v44 = &v40[v43];
      v45 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v44, 1, v45))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v61, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v61, v44, v45);
        __swift_storeEnumTagSinglePayload((uint64_t)v61, 0, 1, v45);
      }
      v28 = v59;
      *(_OWORD *)&v39[v57[6]] = *(_OWORD *)&v40[v57[6]];
      v47 = v57[7];
      v48 = &v39[v47];
      v49 = &v40[v47];
      v48[4] = v49[4];
      *(_DWORD *)v48 = *(_DWORD *)v49;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)&v35[v11[6]] = *(_QWORD *)&v36[v11[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v35[v11[7]] = *(_QWORD *)&v36[v11[7]];
  *(_QWORD *)&v35[v11[8]] = *(_QWORD *)&v36[v11[8]];
  swift_bridgeObjectRelease();
  v28(&v35[v11[9]], &v36[v11[9]], v27);
  v50 = v11[10];
  v51 = &v35[v50];
  v52 = (uint64_t *)&v36[v50];
  v54 = *v52;
  v53 = v52[1];
  *(_QWORD *)v51 = v54;
  *((_QWORD *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v35[v11[11]] = *(_QWORD *)&v36[v11[11]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisabledAppShortcutTieBreaker()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C2E2E2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 254)
  {
    OUTLINED_FUNCTION_31();
  }
  else
  {
    v6 = OUTLINED_FUNCTION_3_12();
    __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 32), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for DisabledAppShortcutTieBreaker()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_1C2E2E33C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = OUTLINED_FUNCTION_3_12();
    return (_BYTE *)__swift_storeEnumTagSinglePayload((uint64_t)&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DisabledAppShortcutTieBreaker()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DisabledAppShortcutTieBreaker;
  if (!type metadata singleton initialization cache for DisabledAppShortcutTieBreaker)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for DisabledAppShortcutTieBreaker()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RankedAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t DisabledAppShortcutTieBreaker.init(tie:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = OUTLINED_FUNCTION_3_12();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v16 - v8;
  *(_WORD *)a2 = 1025;
  v10 = static DisabledAppShortcutTieBreaker.isDisabledAppShortcut(_:)(a1);
  *(_BYTE *)(a2 + 2) = v10 & 1;
  v11 = *(int *)(type metadata accessor for TopTwo() + 20);
  if ((v10 & 1) != 0)
    v12 = a1;
  else
    v12 = a1 + v11;
  if ((v10 & 1) != 0)
    v13 = a1 + v11;
  else
    v13 = a1;
  *(_BYTE *)(a2 + 3) = static DisabledAppShortcutTieBreaker.isDisabledAppShortcut(_:)(a1 + v11) & 1;
  outlined init with copy of CamModelMetadata(v12, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  v14 = OUTLINED_FUNCTION_8_7();
  outlined init with take of RankedAction((uint64_t)v9, a2 + *(int *)(v14 + 32));
  outlined init with copy of CamModelMetadata(v13, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  outlined destroy of CamModelMetadata(a1, (uint64_t (*)(_QWORD))type metadata accessor for TopTwo);
  return outlined init with take of RankedAction((uint64_t)v7, a2 + *(int *)(v14 + 36));
}

void *static DisabledAppShortcutTieBreaker.isDisabledAppShortcut(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *result;
  void *v16;
  id v17;
  __int128 v19;
  __int128 v20;

  v2 = OUTLINED_FUNCTION_3_12();
  v3 = *(_QWORD *)(a1 + *(int *)(v2 + 44));
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  v4 = v2;
  v5 = OUTLINED_FUNCTION_2_16();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
  if ((v8 & 1) == 0)
    return 0;
  v9 = objc_msgSend(*(id *)(*(_QWORD *)(v3 + 56) + 8 * v7), sel_int64Value);
  if (!*(_QWORD *)(a1 + *(int *)(v4 + 32)))
  {
    v19 = 0u;
    v20 = 0u;
    goto LABEL_13;
  }
  v10 = v9;
  OUTLINED_FUNCTION_9_3();
  specialized Dictionary.subscript.getter(0xD000000000000014, v11, v12, &v19);
  if (!*((_QWORD *)&v20 + 1))
  {
LABEL_13:
    outlined destroy of Any?((uint64_t)&v19);
    return 0;
  }
  outlined destroy of Any?((uint64_t)&v19);
  OUTLINED_FUNCTION_9_3();
  result = (void *)specialized Dictionary.subscript.getter(v13, v14, v3);
  if (result)
  {
    v16 = result;
    v17 = objc_msgSend(result, sel_int64Value);

    return (void *)(v10 && v17 == 0);
  }
  return result;
}

Swift::Bool __swiftcall DisabledAppShortcutTieBreaker.supportedTie()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  Swift::Bool result;
  uint64_t v6;

  v1 = OUTLINED_FUNCTION_8_7();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CamModelMetadata(v0, (uint64_t)v3, v4);
  outlined destroy of CamModelMetadata((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for DisabledAppShortcutTieBreaker);
  OUTLINED_FUNCTION_31();
  return result;
}

uint64_t DisabledAppShortcutTieBreaker.context.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  SiriCam::Domain3PProtectionLevel_optional v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  int v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;

  v1 = v0 + *(int *)(OUTLINED_FUNCTION_8_7() + 32);
  v2 = OUTLINED_FUNCTION_3_12();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + *(int *)(v2 + 44));
  OUTLINED_FUNCTION_9_3();
  v7 = (void *)specialized Dictionary.subscript.getter(v5, v6, v4);
  if (v7)
  {
    v8 = v7;
    v9 = OUTLINED_FUNCTION_11_6(v7);

    v10 = v9 != 0;
  }
  else
  {
    v10 = 2;
  }
  OUTLINED_FUNCTION_9_3();
  v14 = (void *)specialized Dictionary.subscript.getter(v11, v12, v13);
  if (v14)
  {
    v15 = v14;
    v16 = OUTLINED_FUNCTION_11_6(v14);

    v17.value = Domain3PProtectionLevel.init(rawValue:)((Swift::Int64)v16).value;
  }
  else
  {
    v17.value = SiriCam_Domain3PProtectionLevel_unknownDefault;
  }
  OUTLINED_FUNCTION_9_3();
  v19 = (void *)specialized Dictionary.subscript.getter(0xD000000000000013, v18, v4);
  if (v19)
  {
    v20 = v19;
    v21 = OUTLINED_FUNCTION_11_6(v19);

    v22 = v21 != 0;
  }
  else
  {
    v22 = 2;
  }
  if (one-time initialization token for ranker != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.ranker);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_7_7(v25))
  {
    v26 = (uint8_t *)OUTLINED_FUNCTION_4();
    v27 = OUTLINED_FUNCTION_4();
    *(_DWORD *)v26 = 136315138;
    v31 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ambiguousRunPreviouslyShown: Bool?, domainProtectionLevel: Domain3PProtectionLevel?, onScreenAppShortcut: Bool?));
    v28 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2E0C000, v24, v3, "[DisabledAppShortcutTieBreaker] Context: %s", v26, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  return (v17.value << 8) | (v22 << 16) | v10;
}

uint64_t DisabledAppShortcutTieBreaker.actionBoost(features:loggingId:)@<X0>(uint64_t a1@<X1>, double *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _BOOL4 v10;
  char v11;
  __int16 v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  double v19;
  uint64_t v20;
  uint64_t result;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  double v29;
  uint64_t v30;

  v5 = OUTLINED_FUNCTION_2_16();
  v8 = (void *)specialized Dictionary.subscript.getter(v5, v6, v7);
  if (v8)
  {
    v2 = v8;
    v9 = objc_msgSend(v8, sel_int64Value);

    v10 = v9 != 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = DisabledAppShortcutTieBreaker.context.getter();
  if (v11 != 2)
  {
    LOBYTE(v2) = v11;
    v12 = DisabledAppShortcutTieBreaker.context.getter();
    if ((v12 & 0xFF00) != 0x400)
    {
      v13 = HIBYTE(v12);
      v14 = DisabledAppShortcutTieBreaker.context.getter();
      if ((v14 & 0x30000) != 0x20000)
      {
        v22 = v14;
        v23 = v13;
        if (v10)
        {
          v24 = (char *)a2 + *(int *)(OUTLINED_FUNCTION_4_11() + 24);
          v25 = type metadata accessor for UUID();
          result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, a1, v25);
          if (v23 == 3 || (v22 & 0x10000) == 0)
          {
            *a2 = 0.0;
            a2[1] = 0.0;
            a2[2] = 0.0;
            return result;
          }
        }
        else
        {
          if (v23 != 3)
          {
            if ((v14 & 0x10000) != 0)
            {
              OUTLINED_FUNCTION_4_11();
              v28 = OUTLINED_FUNCTION_1_13();
              result = OUTLINED_FUNCTION_0_17(v28);
              a2[2] = 0.0;
              *a2 = 0.0;
            }
            else
            {
              OUTLINED_FUNCTION_9_3();
              if ((static TrialProvider.fetchBoolFactorFromTrial(_:)() & 1) != 0
                && (CamFeatureFlag.isEnabled.getter(5u) & 1) != 0)
              {
                v27 = (v2 & 1) == 0;
              }
              else
              {
                v27 = v23 == 1 && (v2 & 1) == 0;
              }
              if (v27)
                v29 = 0.0;
              else
                v29 = 0.02;
              OUTLINED_FUNCTION_4_11();
              v30 = OUTLINED_FUNCTION_1_13();
              result = OUTLINED_FUNCTION_0_17(v30);
              *a2 = v29;
              a2[2] = 0.0;
            }
            goto LABEL_22;
          }
          OUTLINED_FUNCTION_4_11();
          v26 = OUTLINED_FUNCTION_1_13();
          result = OUTLINED_FUNCTION_0_17(v26);
        }
        a2[2] = 0.0;
        *a2 = 0.02;
LABEL_22:
        a2[1] = 0.0;
        return result;
      }
    }
  }
  if (one-time initialization token for ranker != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.ranker);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_7_7(v17))
  {
    v18 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1C2E0C000, v16, (os_log_type_t)v2, "[DisabledAppShortcutTieBreaker] Context is unavailable, default to 1P.", v18, 2u);
    OUTLINED_FUNCTION_3();
  }

  if (v10)
    v19 = 0.02;
  else
    v19 = 0.0;
  OUTLINED_FUNCTION_4_11();
  v20 = OUTLINED_FUNCTION_1_13();
  result = OUTLINED_FUNCTION_0_17(v20);
  *a2 = v19;
  a2[1] = -2.31584178e77;
  *((_QWORD *)a2 + 2) = 0x80000001C2E9A680;
  return result;
}

uint64_t protocol witness for TieBreaking.enabled.getter in conformance DisabledAppShortcutTieBreaker()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for TieBreaking.forcedDisambiguation.getter in conformance DisabledAppShortcutTieBreaker()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t outlined init with take of RankedAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RankedAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_17(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_1_13()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_2_16()
{
  return 0x535F5050415F5349;
}

uint64_t OUTLINED_FUNCTION_3_12()
{
  return type metadata accessor for RankedAction();
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  return type metadata accessor for ScoreBoost();
}

BOOL OUTLINED_FUNCTION_7_7(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_8_7()
{
  return type metadata accessor for DisabledAppShortcutTieBreaker();
}

id OUTLINED_FUNCTION_11_6(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 1480));
}

void *static AppLaunchRecencyFeatureExtractor.extractedFeatures.getter()
{
  return &outlined read-only object #0 of static AppLaunchRecencyFeatureExtractor.extractedFeatures.getter;
}

unint64_t AppLaunchRecencyFeatureExtractor.extractSecondsSinceAppLaunch(from:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t Launched;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;

  v3 = (unint64_t)v1;
  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v5, v6);
  if (!v8)
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v25[0] = 0xD00000000000001BLL;
    v25[1] = 0x80000001C2E9A6C0;
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    v15._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v3 = 0x80000001C2E9A6C0;
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v17 = 0xD00000000000001BLL;
    *(_QWORD *)(v17 + 8) = 0x80000001C2E9A6C0;
LABEL_7:
    *(_BYTE *)(v17 + 16) = 1;
    swift_willThrow();
    return v3;
  }
  v9 = v7;
  v10 = v8;
  Launched = static TimeSinceAppLastLaunchedSignal.instances()();
  specialized Collection.first.getter(Launched, (uint64_t)&v23);
  swift_bridgeObjectRelease();
  if (!v24)
  {
    swift_bridgeObjectRelease();
    outlined destroy of SignalProviding?((uint64_t)&v23);
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v17 = 0xD00000000000003DLL;
    *(_QWORD *)(v17 + 8) = 0x80000001C2E9A6E0;
    goto LABEL_7;
  }
  outlined init with take of AppSelectionSignalComponent(&v23, (uint64_t)v25);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v12 = specialized SiriSignalsContaining.get(from:query:defaultVal:)(v25, v9, v10, -1);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = v12;
    if (one-time initialization token for ranker != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.ranker);
    swift_bridgeObjectRetain();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      *(_QWORD *)&v23 = swift_slowAlloc();
      *(_DWORD *)v22 = 134218242;
      v26 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)&v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2E0C000, v20, v21, "[AppLaunchRecencyFeatureExtractor] %lds since app launch for bundle: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }
    swift_bridgeObjectRelease_n();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  return v3;
}

unint64_t AppLaunchRecencyFeatureExtractor.extractImpl(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t result;
  unint64_t v3;
  uint64_t inited;

  result = AppLaunchRecencyFeatureExtractor.extractSecondsSinceAppLaunch(from:)(a1);
  v3 = result;
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2E94230;
    *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
    *(_QWORD *)(inited + 40) = 0x80000001C2E994C0;
    *(_QWORD *)(inited + 48) = objc_msgSend((id)objc_opt_self(), sel_featureValueWithInt64_, v3);
    type metadata accessor for MLFeatureValue();
    return Dictionary.init(dictionaryLiteral:)();
  }
  return result;
}

uint64_t outlined destroy of SignalProviding?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignalProviding?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance AppLaunchRecencyFeatureExtractor(_QWORD *a1)
{
  return AppLaunchRecencyFeatureExtractor.extractImpl(from:)(a1);
}

uint64_t specialized SiriSignalsContaining.get(from:query:defaultVal:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t inited;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  Swift::String v17;
  uint64_t v18;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SignalProviding>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2E94230;
  outlined init with copy of SignalProviding((uint64_t)a1, inited + 32);
  v10 = SiriSignalsContainer.get(from:query:defaultVal:)(inited, a2, a3, a4);
  if (v4)
  {
    swift_setDeallocating();
    v11 = inited;
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    v12 = v10;
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v13 = dispatch thunk of AppSelectionSignalComponent.name.getter();
    v11 = specialized Dictionary.subscript.getter(v13, v14, v12);
    v16 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      v17._countAndFlagsBits = dispatch thunk of AppSelectionSignalComponent.name.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v11 = 0x80000001C2E9A720;
      lazy protocol witness table accessor for type CaarError and conformance CaarError();
      swift_allocError();
      *(_QWORD *)v18 = 0xD000000000000015;
      *(_QWORD *)(v18 + 8) = 0x80000001C2E9A720;
      *(_BYTE *)(v18 + 16) = 1;
      swift_willThrow();
    }
  }
  return v11;
}

ValueMetadata *type metadata accessor for AppLaunchRecencyFeatureExtractor()
{
  return &type metadata for AppLaunchRecencyFeatureExtractor;
}

id specialized Zip2Sequence.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  uint64_t v7;
  id result;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    return 0;
  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v0 + 8);
  if (*(_QWORD *)v0 >> 62)
  {
    OUTLINED_FUNCTION_11_3();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v3 == v4)
  {
LABEL_13:
    v1 = 0;
    *(_BYTE *)(v0 + 32) = 1;
    return v1;
  }
  v5 = v2 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v3, (v2 & 0xC000000000000001) == 0, v2);
  if ((v2 & 0xC000000000000001) != 0)
    v6 = (id)MEMORY[0x1C3BCAC88](v3, v2);
  else
    v6 = *(id *)(v2 + 8 * v3 + 32);
  v1 = v6;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 8) = v3 + 1;
    v5 = *(_QWORD *)(v0 + 16);
    v3 = *(_QWORD *)(v0 + 24);
    if (!(v5 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_11:
  if (v3 == v7)
  {

    goto LABEL_13;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v3, (v5 & 0xC000000000000001) == 0, v5);
  if ((v5 & 0xC000000000000001) != 0)
    result = (id)MEMORY[0x1C3BCAC88](v3, v5);
  else
    result = *(id *)(v5 + 8 * v3 + 32);
  if (!__OFADD__(v3, 1))
  {
    *(_QWORD *)(v0 + 24) = v3 + 1;
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12MorphunSwift5TokenVG_SSs5NeverOTg5083_s7SiriCam29WordEmbeddingFeatureExtractorV10nlTokenize11recognitionSaySSGSS_tKFSS12d6Swift5F54Vcfu_33_159891d7692f873338f9510e7a09688eAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v13;
    v4 = *(_QWORD *)(type metadata accessor for Token() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = Token.cleanValue.getter();
      v9 = v8;
      v10 = *(_QWORD *)(v13 + 16);
      if (v10 >= *(_QWORD *)(v13 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized Array.init(repeating:count:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_4_12();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v4 = OUTLINED_FUNCTION_50();
      v5 = 0;
      *(_QWORD *)(v4 + 16) = a1;
      do
      {
        v6 = v4 + 8 * v5++;
        *(double *)(v6 + 32) = a2;
      }
      while (a1 != v5);
    }
    OUTLINED_FUNCTION_37_2();
  }
}

uint64_t specialized Array.init(repeating:count:)(int a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_14_5();
    result = OUTLINED_FUNCTION_4_12();
    __break(1u);
  }
  else if (a2)
  {
    result = OUTLINED_FUNCTION_50();
    v5 = 0;
    *(_QWORD *)(result + 16) = a2;
    do
    {
      v6 = result + 4 * v5++;
      *(_DWORD *)(v6 + 32) = a1;
    }
    while (a2 != v5);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

void specialized Array.init(repeating:count:)(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_4_12();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v4 = OUTLINED_FUNCTION_50();
      v5 = 0;
      *(_QWORD *)(v4 + 16) = a1;
      do
      {
        v6 = v4 + 4 * v5++;
        *(float *)(v6 + 32) = a2;
      }
      while (a1 != v5);
    }
    OUTLINED_FUNCTION_37_2();
  }
}

uint64_t static WordEmbeddingFeatureExtractor.currentLocaleIsSupported()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _WORD *v16;
  uint64_t v18;

  v0 = OUTLINED_FUNCTION_20_2();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78]();
  OUTLINED_FUNCTION_4_5();
  v4 = v3 - v2;
  static EnvironmentUtilities.currentSiriLocale.getter();
  v5 = Locale.languageCode.getter();
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  if (v7)
  {
    if (one-time initialization token for supportedEmbeddingLanguages != -1)
      swift_once();
    v8 = specialized Sequence<>.contains(_:)(v5, v7, (_QWORD *)static WordEmbeddingFeatureExtractor.supportedEmbeddingLanguages);
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v9 = OUTLINED_FUNCTION_14_1();
    v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.autoSend);
    swift_bridgeObjectRetain();
    Logger.logObject.getter();
    v11 = OUTLINED_FUNCTION_47();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = OUTLINED_FUNCTION_4();
      v18 = OUTLINED_FUNCTION_4();
      *(_DWORD *)v12 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 8) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2E0C000, v10, v11, "WordEmbeddingFeatureExtractor supported=%{BOOL}d for current siri language %s", (uint8_t *)v12, 0x12u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    swift_bridgeObjectRelease_n();
  }
  else
  {
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v13 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.autoSend);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (_WORD *)OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_38_1(v16);
      _os_log_impl(&dword_1C2E0C000, v14, v15, "Cannot detect current Siri language for WordEmbeddingFeatureExtractor", 0, 2u);
      OUTLINED_FUNCTION_3();
    }

    v8 = 0;
  }
  return v8 & 1;
}

uint64_t *WordEmbeddingFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static WordEmbeddingFeatureExtractor.extractedFeatures;
}

uint64_t WordEmbeddingFeatureExtractor.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;

  v3 = OUTLINED_FUNCTION_20_2();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_4_5();
  v7 = v6 - v5;
  static EnvironmentUtilities.currentSiriLocale.getter();
  v8 = (int *)OUTLINED_FUNCTION_13_5();
  *(_QWORD *)(a1 + v8[5]) = 0;
  *(_QWORD *)(a1 + v8[6]) = 0;
  *(_QWORD *)(a1 + v8[7]) = 0;
  objc_msgSend((id)objc_opt_self(), sel_setTrialNamespaceToUse_, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  WordEmbeddingFeatureExtractor.loadMorphunAssets(for:kickOffDownloads:)(v7, 1);
  if (v1)
  {
    OUTLINED_FUNCTION_32_3();
    return outlined destroy of WordEmbeddingFeatureExtractor(a1);
  }
  else
  {
    WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(v7, 1);
    return OUTLINED_FUNCTION_32_3();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> WordEmbeddingFeatureExtractor.update()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;

  v2 = v0;
  v3 = OUTLINED_FUNCTION_20_2();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_4_5();
  v7 = v6 - v5;
  v8 = (int *)OUTLINED_FUNCTION_13_5();
  if (*(_QWORD *)(v0 + v8[5]))
    goto LABEL_17;
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v13 = OUTLINED_FUNCTION_14_1();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.autoSend);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C2E0C000, v14, v15, "Morphun assets missing, attempting to load on update call", v16, 2u);
    OUTLINED_FUNCTION_3();
  }

  WordEmbeddingFeatureExtractor.loadMorphunAssets(for:kickOffDownloads:)(v2, 0);
  if (!v1)
  {
LABEL_17:
    if (!*(_QWORD *)(v2 + v8[6]) || !*(_QWORD *)(v2 + v8[7]))
    {
      if (one-time initialization token for autoSend != -1)
        swift_once();
      v9 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.autoSend);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)OUTLINED_FUNCTION_4();
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1C2E0C000, v10, v11, "NLEmbeddings assets missing, attempting to load on update call", v12, 2u);
        OUTLINED_FUNCTION_3();
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v2, v3);
      WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(v7, 0);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
    }
  }
  OUTLINED_FUNCTION_4_9();
}

uint64_t NLEmbeddingsAssetsManager.download(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[19] = a2;
  v3[20] = v2;
  v3[18] = a1;
  v4 = OUTLINED_FUNCTION_20_2();
  v3[21] = v4;
  v3[22] = *(_QWORD *)(v4 - 8);
  v3[23] = swift_task_alloc();
  return OUTLINED_FUNCTION_23_3();
}

uint64_t NLEmbeddingsAssetsManager.download(for:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30[3];

  OUTLINED_FUNCTION_11_3();
  Locale.init(identifier:)();
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_14_1();
  *(_QWORD *)(v0 + 192) = __swift_project_value_buffer(v1, (uint64_t)static Logger.autoSend);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (_WORD *)OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_38_1(v4);
    OUTLINED_FUNCTION_9_6(&dword_1C2E0C000, v2, v5, "Submitting NLTagger asset request");
    OUTLINED_FUNCTION_3();
  }

  v6 = Locale.languageCode.getter();
  if (v7)
  {
    v8 = v6;
    v9 = v7;
    v10 = (void *)objc_opt_self();
    v11 = MEMORY[0x1C3BCA844](v8, v9);
    *(_QWORD *)(v0 + 200) = v11;
    swift_bridgeObjectRelease();
    v12 = *MEMORY[0x1E0CCE0C8];
    *(_QWORD *)(v0 + 56) = v0 + 136;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = NLEmbeddingsAssetsManager.download(for:);
    v13 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
    v14 = (_QWORD *)(v0 + 80);
    v14[1] = 0x40000000;
    v14[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NLTaggerAssetsResult, @unowned NSError?) -> () with result type NLTaggerAssetsResult;
    v14[3] = &block_descriptor;
    v14[4] = v13;
    objc_msgSend(v10, sel_requestAssetsForLanguage_tagScheme_completionHandler_, v11, v12, v14);
    return swift_continuation_await();
  }
  else
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_57();
    v30[0] = v16;
    v30[1] = 0x80000001C2E9A7B0;
    lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E70]);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError();
    v18 = swift_allocError();
    *(_QWORD *)v19 = v30[0];
    *(_QWORD *)(v19 + 8) = 0x80000001C2E9A7B0;
    *(_BYTE *)(v19 + 16) = 0;
    swift_willThrow();
    OUTLINED_FUNCTION_25_3();
    OUTLINED_FUNCTION_25_3();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_41_0(v21))
    {
      v22 = (_DWORD *)OUTLINED_FUNCTION_4();
      v30[0] = OUTLINED_FUNCTION_4();
      *v22 = 136315138;
      *(_QWORD *)(v0 + 120) = v18;
      OUTLINED_FUNCTION_25_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v23 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_3_13();
      OUTLINED_FUNCTION_3_13();
      OUTLINED_FUNCTION_29_3(&dword_1C2E0C000, v25, v26, "Error during NLTagger asset request: %s");
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_3_13();
    OUTLINED_FUNCTION_3_13();
    OUTLINED_FUNCTION_3_13();

    OUTLINED_FUNCTION_55();
    v27 = OUTLINED_FUNCTION_47();
    if (OUTLINED_FUNCTION_16_4(v27))
    {
      v28 = (_WORD *)OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_38_1(v28);
      OUTLINED_FUNCTION_9_6(&dword_1C2E0C000, v20, v29, "Completed downloading NLTagger assets");
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_30_3();
    OUTLINED_FUNCTION_19_3();
    OUTLINED_FUNCTION_51();
    return OUTLINED_FUNCTION_8_8(*(uint64_t (**)(void))(v0 + 8));
  }
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 208) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return OUTLINED_FUNCTION_23_3();
}

{
  NSObject *v0;
  uint64_t v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_55();
  v2 = OUTLINED_FUNCTION_47();
  if (OUTLINED_FUNCTION_16_4(v2))
  {
    v3 = (_WORD *)OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_38_1(v3);
    OUTLINED_FUNCTION_9_6(&dword_1C2E0C000, v0, v4, "Completed downloading NLTagger assets");
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_30_3();
  OUTLINED_FUNCTION_19_3();
  OUTLINED_FUNCTION_51();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(void **)(v0 + 200);
  swift_willThrow();

  v2 = *(_QWORD *)(v0 + 208);
  OUTLINED_FUNCTION_25_3();
  OUTLINED_FUNCTION_25_3();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_41_0(v4))
  {
    v5 = (_DWORD *)OUTLINED_FUNCTION_4();
    v6 = OUTLINED_FUNCTION_4();
    *v5 = 136315138;
    v15 = v6;
    *(_QWORD *)(v0 + 120) = v2;
    OUTLINED_FUNCTION_25_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v7 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_13();
    OUTLINED_FUNCTION_3_13();
    OUTLINED_FUNCTION_29_3(&dword_1C2E0C000, v9, v10, "Error during NLTagger asset request: %s");
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_3_13();
  OUTLINED_FUNCTION_3_13();
  OUTLINED_FUNCTION_3_13();

  OUTLINED_FUNCTION_55();
  v11 = OUTLINED_FUNCTION_47();
  if (OUTLINED_FUNCTION_16_4(v11))
  {
    v12 = (_WORD *)OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_38_1(v12);
    OUTLINED_FUNCTION_9_6(&dword_1C2E0C000, v3, v13, "Completed downloading NLTagger assets");
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_30_3();
  OUTLINED_FUNCTION_19_3();
  OUTLINED_FUNCTION_51();
  return OUTLINED_FUNCTION_8_8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NLTaggerAssetsResult, @unowned NSError?) -> () with result type NLTaggerAssetsResult(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(*(_QWORD *)(a1 + 32), (uint64_t)a3);
  else
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(*(_QWORD *)(a1 + 32), a2);
}

uint64_t specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *v3 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

uint64_t NLEmbeddingsAssetsManager.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for NLEmbeddingsAssetsManager()
{
  return objc_opt_self();
}

uint64_t *initializeBufferWithCopyOfBuffer for WordEmbeddingFeatureExtractor(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Locale();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_retain();
    v10 = v9;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_retain();
  v9 = v8;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  v7 = a3[6];
  v8 = *(void **)(a1 + v7);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = v9;

  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_release();
  v7 = a3[6];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WordEmbeddingFeatureExtractor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E307C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;
  int v9;

  v6 = OUTLINED_FUNCTION_20_2();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  v9 = v8 - 1;
  if (v9 < 0)
    v9 = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for WordEmbeddingFeatureExtractor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E30854(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = OUTLINED_FUNCTION_20_2();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for WordEmbeddingFeatureExtractor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for WordEmbeddingFeatureExtractor;
  if (!type metadata singleton initialization cache for WordEmbeddingFeatureExtractor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for WordEmbeddingFeatureExtractor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t NLEmbeddingsAssetsManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance NLEmbeddingsAssetsManager()
{
  return NLEmbeddingsAssetsManager.unownedExecutor.getter();
}

uint64_t one-time initialization function for analyzerConfigOptions()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(unint64_t, _QWORD, uint64_t);
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConfigurationFeature>);
  v0 = type metadata accessor for ConfigurationFeature();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C2E940D0;
  v5 = v4 + v3;
  v6 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E0D50670], v0);
  v6(v5 + v2, *MEMORY[0x1E0D50650], v0);
  v6(v5 + 2 * v2, *MEMORY[0x1E0D50648], v0);
  result = ((uint64_t (*)(unint64_t, _QWORD, uint64_t))v6)(v5 + 3 * v2, *MEMORY[0x1E0D50638], v0);
  static WordEmbeddingFeatureExtractor.analyzerConfigOptions = v4;
  return result;
}

uint64_t one-time initialization function for nlEmbeddingsAssetsManager()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for NLEmbeddingsAssetsManager();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  static WordEmbeddingFeatureExtractor.nlEmbeddingsAssetsManager = v0;
  return result;
}

void one-time initialization function for supportedEmbeddingLanguages()
{
  static WordEmbeddingFeatureExtractor.supportedEmbeddingLanguages = (uint64_t)&outlined read-only object #0 of one-time initialization function for supportedEmbeddingLanguages;
}

void WordEmbeddingFeatureExtractor.loadMorphunAssets(for:kickOffDownloads:)(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  Class isa;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  Class v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  id v44;
  int v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v45 = a2;
  v50 = OUTLINED_FUNCTION_20_2();
  v47 = *(_QWORD *)(v50 - 8);
  v3 = MEMORY[0x1E0C80A78](v50);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v43 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_4_5();
  v10 = v9 - v8;
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v43 - v16;
  v18 = (void *)objc_opt_self();
  v51 = a1;
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v44 = v18;
  v20 = objc_msgSend(v18, sel_getAssetPathForLocale_, isa);

  if (v20)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v20 = *(id *)(v12 + 32);
    ((void (*)(uint64_t, char *, uint64_t))v20)(v10, v15, v11);
    OUTLINED_FUNCTION_49(v10, 0);
    if (__swift_getEnumTagSinglePayload(v10, 1, v11) != 1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v20)(v17, v10, v11);
      URL.absoluteString.getter();
      v21 = v49;
      registerDataPathForLocaleWithError(locale:path:)();
      if (v21)
      {
        OUTLINED_FUNCTION_10_5();
        OUTLINED_FUNCTION_12();
      }
      else
      {
        OUTLINED_FUNCTION_12();
        if (one-time initialization token for analyzerConfigOptions != -1)
          swift_once();
        type metadata accessor for DefaultAnalyzerFactory();
        swift_allocObject();
        swift_bridgeObjectRetain();
        v41 = DefaultAnalyzerFactory.init(configOptions:)();
        v42 = dispatch thunk of DefaultAnalyzerFactory.getAnalyzer(locale:)();
        OUTLINED_FUNCTION_10_5();
        OUTLINED_FUNCTION_45();
        OUTLINED_FUNCTION_13_5();
        OUTLINED_FUNCTION_41_1();
        *(_QWORD *)&v17[v41] = v42;
      }
      goto LABEL_14;
    }
  }
  else
  {
    OUTLINED_FUNCTION_49(v10, 1);
  }
  outlined destroy of (CamLogOutput, CamModelMetadata)(v10, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_13_5();
  OUTLINED_FUNCTION_41_1();
  *(_QWORD *)&v17[(_QWORD)v20] = 0;
  v22 = v51;
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v23 = OUTLINED_FUNCTION_14_1();
  v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.autoSend);
  v25 = (void (*)(char *, uint64_t))v47;
  v26 = v50;
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
  v48(v6, v22, v50);
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v43[2] = v24;
    v29 = (_DWORD *)OUTLINED_FUNCTION_4();
    v52 = OUTLINED_FUNCTION_4();
    *v29 = 136315138;
    v43[1] = v29 + 1;
    lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E70]);
    v30 = dispatch thunk of CustomStringConvertible.description.getter();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v52);
    OUTLINED_FUNCTION_54(v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_3_1();
    OUTLINED_FUNCTION_36_1();
    OUTLINED_FUNCTION_26_2(&dword_1C2E0C000, v27, v28, "Morphun assets not available for locale %s");
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_36_1();

  v33 = v46;
  if ((v45 & 1) != 0)
  {
    v48(v46, v22, v26);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (_DWORD *)OUTLINED_FUNCTION_4();
      v52 = OUTLINED_FUNCTION_4();
      *v36 = 136315138;
      v50 = (uint64_t)(v36 + 1);
      lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E70]);
      v37 = dispatch thunk of CustomStringConvertible.description.getter();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v52);
      OUTLINED_FUNCTION_54(v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_12();
      v25(v33, v26);
      OUTLINED_FUNCTION_26_2(&dword_1C2E0C000, v34, v35, "Kicking off morphun assets request for locale %s");
      OUTLINED_FUNCTION_13_1();
      OUTLINED_FUNCTION_3();
    }
    v25(v33, v26);

    v40 = Locale._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v44, sel_onDemandDownloadForLocale_withProgress_withCompletion_, v40, 0, 0);

  }
LABEL_14:
  OUTLINED_FUNCTION_4_9();
}

void WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;

  v4 = v2;
  LODWORD(v58) = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_4_5();
  v57 = v8 - v7;
  v9 = OUTLINED_FUNCTION_20_2();
  v59 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v59 + 64);
  v11 = MEMORY[0x1E0C80A78](v9);
  v56 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v50 - v12;
  v14 = Locale.languageCode.getter();
  if (v15)
  {
    v16 = v14;
    v17 = v15;
    v55 = a1;
    v18 = (void *)objc_opt_self();
    v19 = objc_msgSend(v18, sel_wordEmbeddingForLanguage_revision_, MEMORY[0x1C3BCA844](v16, v17), 1);
    OUTLINED_FUNCTION_56();
    if (v18)
    {
      OUTLINED_FUNCTION_3_1();
      v20 = OUTLINED_FUNCTION_13_5();
      v21 = *(int *)(v20 + 24);
      v22 = *(void **)(v4 + v21);
      v23 = v18;

      *(_QWORD *)(v4 + v21) = v18;
      specialized Array.init(repeating:count:)((uint64_t)objc_msgSend(v23, sel_dimension), 0.0);
      OUTLINED_FUNCTION_56();
      OUTLINED_FUNCTION_53();
      *(_QWORD *)(v4 + v20) = v18;
    }
    else
    {
      v54 = v9;
      if (one-time initialization token for autoSend != -1)
        swift_once();
      v29 = OUTLINED_FUNCTION_14_1();
      v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.autoSend);
      OUTLINED_FUNCTION_11_3();
      v52 = v30;
      v31 = Logger.logObject.getter();
      v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)OUTLINED_FUNCTION_4();
        v51 = OUTLINED_FUNCTION_4();
        v60 = v51;
        v53 = v3;
        *(_DWORD *)v33 = 136315138;
        v50 = v33 + 4;
        OUTLINED_FUNCTION_11_3();
        v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v60);
        OUTLINED_FUNCTION_48(v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2E0C000, v31, v32, "Cannot create word embedder for language: %s", v33, 0xCu);
        OUTLINED_FUNCTION_13_1();
        OUTLINED_FUNCTION_3();
      }

      swift_bridgeObjectRelease_n();
      v35 = OUTLINED_FUNCTION_13_5();
      v36 = *(int *)(v35 + 24);

      *(_QWORD *)(v4 + v36) = 0;
      OUTLINED_FUNCTION_53();
      *(_QWORD *)(v4 + v35) = 0;
      v37 = v54;
      if ((v58 & 1) != 0)
      {
        v38 = v59;
        v58 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
        v58(v13, v55, v54);
        v39 = Logger.logObject.getter();
        v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = (_DWORD *)OUTLINED_FUNCTION_4();
          v60 = OUTLINED_FUNCTION_4();
          *v41 = 136315138;
          v53 = v3;
          lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E70]);
          v42 = dispatch thunk of CustomStringConvertible.description.getter();
          v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v60);
          OUTLINED_FUNCTION_48(v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_12();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v54);
          OUTLINED_FUNCTION_26_2(&dword_1C2E0C000, v39, v40, "Kicking off NLEmbeddings assets request for locale %s");
          OUTLINED_FUNCTION_13_1();
          OUTLINED_FUNCTION_3();
        }
        (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v37);

        v45 = v57;
        static TaskPriority.background.getter();
        v46 = type metadata accessor for TaskPriority();
        __swift_storeEnumTagSinglePayload(v45, 0, 1, v46);
        v47 = v56;
        v58(v56, v55, v37);
        v48 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
        v49 = swift_allocObject();
        *(_QWORD *)(v49 + 16) = 0;
        *(_QWORD *)(v49 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v49 + v48, v47, v37);
        _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v45, (uint64_t)&async function pointer to partial apply for closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:), v49);
        swift_release();
        outlined destroy of (CamLogOutput, CamModelMetadata)(v45, &demangling cache variable for type metadata for TaskPriority?);
      }
    }
  }
  else
  {
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_57();
    v60 = v24;
    v61 = 0x80000001C2E9A7B0;
    lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E70]);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    OUTLINED_FUNCTION_3_1();
    v26 = v60;
    v27 = v61;
    lazy protocol witness table accessor for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError();
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v28 = v26;
    *(_QWORD *)(v28 + 8) = v27;
    *(_BYTE *)(v28 + 16) = 0;
    OUTLINED_FUNCTION_27_2();
  }
  OUTLINED_FUNCTION_4_9();
}

uint64_t closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (one-time initialization token for nlEmbeddingsAssetsManager != -1)
    swift_once();
  v1 = Locale.identifier.getter();
  v3 = v2;
  *(_QWORD *)(v0 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v4;
  *v4 = v0;
  v4[1] = closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:);
  return NLEmbeddingsAssetsManager.download(for:)(v1, v3);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_21_3(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  taskCreateFlags(priority:isChildTask:copyTaskLocals:inheritContext:enqueueJob:addPendingGroupTaskUnconditionally:isDiscardingTask:)(a1, 0, 0, 0, 1, 0, 0);
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  return swift_task_create();
}

uint64_t WordEmbeddingFeatureExtractor.extractImpl(from:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  id v24;
  uint64_t inited;
  id v26;

  v4 = OUTLINED_FUNCTION_13_5();
  v5 = *(void **)(v1 + *(int *)(v4 + 24));
  if (v5 && (v6 = *(_QWORD *)(v1 + *(int *)(v4 + 28))) != 0)
  {
    v7 = v5;
    swift_bridgeObjectRetain();
    specialized TopRecognitionExtractor.getTopRecognition(recognition:)(a1);
    if (v2)
    {

      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = WordEmbeddingFeatureExtractor.nlTokenize(recognition:)(v8);
      OUTLINED_FUNCTION_21_2();
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = (void **)(v11 + 40);
        v14 = MEMORY[0x1E0DEE9D8];
        do
        {
          v15 = (uint64_t)*(v13 - 1);
          v16 = *v13;
          swift_bridgeObjectRetain();
          v17._countAndFlagsBits = v15;
          v17._object = v16;
          v18 = (unint64_t)NLEmbedding.vector(for:)(v17);
          swift_bridgeObjectRelease();
          if (!v18)
          {
            swift_bridgeObjectRetain();
            v18 = v6;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_18_1();
            v14 = v20;
          }
          v19 = *(_QWORD *)(v14 + 16);
          if (v19 >= *(_QWORD *)(v14 + 24) >> 1)
          {
            OUTLINED_FUNCTION_18_1();
            v14 = v21;
          }
          v13 += 2;
          *(_QWORD *)(v14 + 16) = v19 + 1;
          *(_QWORD *)(v14 + 8 * v19 + 32) = v18;
          --v12;
        }
        while (v12);
      }
      else
      {
        v14 = MEMORY[0x1E0DEE9D8];
      }
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v14 + 16))
      {
        isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      }
      else
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          OUTLINED_FUNCTION_18_1();
          v14 = isUniquelyReferenced_nonNull_native;
        }
        v23 = *(_QWORD *)(v14 + 16);
        if (v23 >= *(_QWORD *)(v14 + 24) >> 1)
        {
          OUTLINED_FUNCTION_18_1();
          v14 = isUniquelyReferenced_nonNull_native;
        }
        *(_QWORD *)(v14 + 16) = v23 + 1;
        *(_QWORD *)(v14 + 8 * v23 + 32) = v6;
      }
      OUTLINED_FUNCTION_29(isUniquelyReferenced_nonNull_native, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
      v24 = static MLMultiArray.make1DSetOrSequence(from:)(v14);
      OUTLINED_FUNCTION_21_2();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C2E94230;
      *(_QWORD *)(inited + 32) = 0xD000000000000023;
      *(_QWORD *)(inited + 40) = 0x80000001C2E988D0;
      *(_QWORD *)(inited + 48) = v24;
      v26 = v24;
      v1 = Dictionary.init(dictionaryLiteral:)();

    }
  }
  else
  {
    lazy protocol witness table accessor for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError();
    OUTLINED_FUNCTION_2_1();
    *(_OWORD *)v9 = xmmword_1C2E953D0;
    *(_BYTE *)(v9 + 16) = 3;
    OUTLINED_FUNCTION_27_2();
  }
  return v1;
}

void specialized TopRecognitionExtractor.getTopRecognition(recognition:)(void *a1)
{
  void *v1;
  unint64_t v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  id *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  unint64_t v67;
  void *v68;

  v4 = v1;
  v5 = (unint64_t)a1;
  v6 = objc_msgSend(a1, sel_utterances);
  if (!v6)
    goto LABEL_78;
  v7 = v6;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASUtterance);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    v9 = *(void **)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_4;
    goto LABEL_77;
  }
LABEL_76:
  swift_bridgeObjectRetain();
  v9 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_77:
    swift_bridgeObjectRelease();
LABEL_78:
    lazy protocol witness table accessor for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError();
    swift_allocError();
    *v48 = 0xD000000000000028;
    v48[1] = 0x80000001C2E9A780;
    swift_willThrow();
    return;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v10 = (id)MEMORY[0x1C3BCAC88](0, v8);
  }
  else
  {
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_81;
    }
    v10 = *(id *)(v8 + 32);
  }
  v9 = v10;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend((id)v5, sel_phrases);
  if (!v11)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v12 = v11;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASPhrase);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = objc_msgSend(v9, sel_interpretationIndices);
  if (!v13)
  {
LABEL_95:
    __break(1u);
    return;
  }
  v5 = (unint64_t)v13;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    v14 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_11;
  }
LABEL_81:
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_11:
  v54 = v4;
  v55 = v9;
  if (v14)
  {
    v65 = v8 & 0xC000000000000001;
    if ((v8 & 0xC000000000000001) != 0)
    {
      v15 = (_QWORD *)MEMORY[0x1C3BCAC88](0, v8);
    }
    else
    {
      if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_84;
      }
      v15 = *(id *)(v8 + 32);
    }
    v3 = v15;
    if (!(v2 >> 62))
    {
      v16 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v16)
        goto LABEL_17;
LABEL_85:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_86;
    }
LABEL_84:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_17:
      v17 = 0;
      v64 = v2 & 0xC000000000000001;
      v60 = v8;
      v61 = v2;
      v58 = v2 + 32;
      v59 = v2 & 0xFFFFFFFFFFFFFF8;
      v56 = (id *)(v8 + 32);
      v57 = v8 & 0xFFFFFFFFFFFFFF8;
      v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v19 = 1;
      v62 = v16;
      v63 = v14;
      while (1)
      {
        if (v64)
        {
          v20 = (id)MEMORY[0x1C3BCAC88](v17, v61);
        }
        else
        {
          if (v17 >= *(_QWORD *)(v59 + 16))
            goto LABEL_74;
          v20 = *(id *)(v58 + 8 * v17);
        }
        v2 = (unint64_t)v20;
        v5 = Int.init(truncating:)();
        v21 = objc_msgSend(v3, sel_interpretations);
        if (!v21)
          break;
        v4 = v21;
        type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASInterpretation);
        v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v8 & 0xC000000000000001) != 0)
        {
          v22 = (id)MEMORY[0x1C3BCAC88](v5, v8);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
          {
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
          if (v5 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_72;
          v22 = *(id *)(v8 + 8 * v5 + 32);
        }
        v23 = v22;
        swift_bridgeObjectRelease();
        v8 = (unint64_t)objc_msgSend(v23, sel_tokens);

        if (!v8)
          goto LABEL_93;
        type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASToken);
        v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v5 >> 62)
        {
          swift_bridgeObjectRetain();
          v4 = (void *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v4 = *(void **)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v66 = (void *)v2;
        v67 = v19;
        v68 = v3;
        if (v4)
        {
          v24 = 4;
          v3 = v18;
          while (1)
          {
            v8 = v24 - 4;
            if ((v5 & 0xC000000000000001) != 0)
              v25 = (id)MEMORY[0x1C3BCAC88](v24 - 4, v5);
            else
              v25 = *(id *)(v5 + 8 * v24);
            v2 = (unint64_t)v25;
            v26 = (void *)(v24 - 3);
            if (__OFADD__(v8, 1))
            {
              __break(1u);
LABEL_70:
              __break(1u);
              goto LABEL_71;
            }
            if (objc_msgSend(v25, sel_removeSpaceBefore))
            {
              v27 = v3[2];
              if (v27)
              {
                v28 = &v3[2 * v27];
                v29 = v28[2] == 32 && v28[3] == 0xE100000000000000;
                if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew()();
                    v3 = v46;
                  }
                  v30 = v3[2];
                  if (!v30)
                    goto LABEL_70;
                  v3[2] = v30 - 1;
                  swift_bridgeObjectRelease();
                }
              }
            }
            v31 = objc_msgSend((id)v2, sel_text, v54, v55);
            if (!v31)
              break;
            v32 = v31;
            v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v35 = v34;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v3 = v43;
            }
            v36 = v3;
            v37 = v3[2];
            v38 = v36;
            v39 = v36[3] >> 1;
            v40 = v37 + 1;
            if (v39 <= v37)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v38 = v44;
              v39 = v44[3] >> 1;
            }
            v38[2] = v40;
            v41 = &v38[2 * v37];
            v41[4] = v33;
            v41[5] = v35;
            v8 = v37 + 2;
            if ((uint64_t)v39 < (uint64_t)(v37 + 2))
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v3 = v45;
            }
            else
            {
              v3 = v38;
            }
            v3[2] = v8;
            v42 = &v3[2 * v40];
            v42[4] = 32;
            v42[5] = 0xE100000000000000;

            ++v24;
            if (v26 == v4)
              goto LABEL_58;
          }
          __break(1u);
          break;
        }
        v3 = v18;
LABEL_58:

        swift_bridgeObjectRelease();
        v5 = v67;
        if (v67 == v63)
          goto LABEL_68;
        if (v65)
        {
          v18 = v3;
          v3 = (_QWORD *)MEMORY[0x1C3BCAC88](v67, v60);
          v47 = v62;
        }
        else
        {
          v47 = v62;
          if (v67 >= *(_QWORD *)(v57 + 16))
            goto LABEL_75;
          v18 = v3;
          v3 = v56[v67];
        }
        if (__OFADD__(v67, 1))
          goto LABEL_73;
        v17 = v67;
        v19 = v67 + 1;
        if (v67 == v47)
          goto LABEL_85;
      }
      __break(1u);
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    goto LABEL_85;
  }
LABEL_68:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_86:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v49 = BidirectionalCollection<>.joined(separator:)();
  v51 = v50;
  swift_bridgeObjectRelease();
  v52 = HIBYTE(v51) & 0xF;
  if ((v51 & 0x2000000000000000) == 0)
    v52 = v49 & 0xFFFFFFFFFFFFLL;
  if (!v52)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError();
    swift_allocError();
    *v53 = 0xD000000000000028;
    v53[1] = 0x80000001C2E9A780;
    swift_willThrow();
  }

}

{
  specialized TopRecognitionExtractor.getTopRecognition(recognition:)(a1);
}

{
  unint64_t v1;
  void *v2;
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  unint64_t v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  unint64_t v63;
  void *v64;

  v5 = v2;
  v6 = (unint64_t)a1;
  v7 = objc_msgSend(a1, sel_utterances);
  if (!v7)
    goto LABEL_74;
  OUTLINED_FUNCTION_29((uint64_t)v7, &lazy cache variable for type metadata for SASUtterance);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_56();
  if (!(v1 >> 62))
  {
    v8 = *(id *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_4;
    goto LABEL_73;
  }
LABEL_72:
  OUTLINED_FUNCTION_28_3();
  v8 = (id)OUTLINED_FUNCTION_43_1();
  OUTLINED_FUNCTION_12();
  if (!v8)
  {
LABEL_73:
    OUTLINED_FUNCTION_12();
LABEL_74:
    lazy protocol witness table accessor for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError();
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_57();
    *v44 = v45;
    v44[1] = 0x80000001C2E9A780;
    OUTLINED_FUNCTION_27_2();
    return;
  }
LABEL_4:
  if ((v1 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_47_0();
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(id *)(v1 + 32);
    OUTLINED_FUNCTION_12();
    v9 = objc_msgSend((id)v6, sel_phrases);
    if (!v9)
    {
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    v10 = v9;
    OUTLINED_FUNCTION_29((uint64_t)v9, &lazy cache variable for type metadata for SASPhrase);
    v1 = OUTLINED_FUNCTION_52();

    v11 = objc_msgSend(v8, sel_interpretationIndices);
    if (!v11)
    {
LABEL_91:
      __break(1u);
      return;
    }
    v6 = (unint64_t)v11;
    OUTLINED_FUNCTION_29((uint64_t)v11, &lazy cache variable for type metadata for NSNumber);
    v3 = OUTLINED_FUNCTION_52();

    if (!(v1 >> 62))
    {
      v12 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  OUTLINED_FUNCTION_28_3();
  v12 = OUTLINED_FUNCTION_43_1();
  OUTLINED_FUNCTION_12();
LABEL_10:
  v52 = v5;
  v53 = v8;
  if (v12)
  {
    if ((v1 & 0xC000000000000001) != 0)
      OUTLINED_FUNCTION_47_0();
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v4 = *(id *)(v1 + 32);
      if (!(v3 >> 62))
      {
        v13 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v13)
          goto LABEL_15;
LABEL_81:
        OUTLINED_FUNCTION_21_2();
        OUTLINED_FUNCTION_12();

        goto LABEL_82;
      }
    }
    else
    {
      __break(1u);
    }
    swift_bridgeObjectRetain();
    v13 = OUTLINED_FUNCTION_43_1();
    OUTLINED_FUNCTION_21_2();
    if (v13)
    {
LABEL_15:
      v14 = 0;
      v61 = v3 & 0xC000000000000001;
      v58 = v3;
      v56 = v3 + 32;
      v57 = v3 & 0xFFFFFFFFFFFFFF8;
      v54 = (id *)(v1 + 32);
      v55 = v1 & 0xFFFFFFFFFFFFFF8;
      v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = 1;
      v59 = v13;
      v60 = v12;
      while (1)
      {
        if (v61)
        {
          v17 = (id)MEMORY[0x1C3BCAC88](v14, v58);
        }
        else
        {
          if (v14 >= *(_QWORD *)(v57 + 16))
            goto LABEL_70;
          v17 = *(id *)(v56 + 8 * v14);
        }
        v3 = (unint64_t)v17;
        v6 = Int.init(truncating:)();
        v18 = objc_msgSend(v4, sel_interpretations);
        if (!v18)
          break;
        v5 = v18;
        type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASInterpretation);
        v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v1 & 0xC000000000000001) != 0)
        {
          v19 = (id)MEMORY[0x1C3BCAC88](v6, v1);
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0)
          {
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
            goto LABEL_72;
          }
          if (v6 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_68;
          v19 = *(id *)(v1 + 8 * v6 + 32);
        }
        v20 = v19;
        OUTLINED_FUNCTION_12();
        v1 = (unint64_t)objc_msgSend(v20, sel_tokens);

        if (!v1)
          goto LABEL_89;
        type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASToken);
        v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v6 >> 62)
        {
          OUTLINED_FUNCTION_11_3();
          v5 = (void *)OUTLINED_FUNCTION_43_1();
          OUTLINED_FUNCTION_3_1();
        }
        else
        {
          v5 = *(void **)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v62 = (void *)v3;
        v63 = v16;
        v64 = v4;
        if (v5)
        {
          v21 = 4;
          v4 = v15;
          while (1)
          {
            v1 = v21 - 4;
            if ((v6 & 0xC000000000000001) != 0)
              v22 = (id)MEMORY[0x1C3BCAC88](v21 - 4, v6);
            else
              v22 = *(id *)(v6 + 8 * v21);
            v3 = (unint64_t)v22;
            v23 = (void *)(v21 - 3);
            if (__OFADD__(v1, 1))
            {
              __break(1u);
LABEL_66:
              __break(1u);
              goto LABEL_67;
            }
            if (objc_msgSend(v22, sel_removeSpaceBefore))
            {
              v24 = v4[2];
              if (v24)
              {
                v25 = &v4[2 * v24];
                v26 = v25[2] == 32 && v25[3] == 0xE100000000000000;
                if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew()();
                    v4 = v43;
                  }
                  v27 = v4[2];
                  if (!v27)
                    goto LABEL_66;
                  v4[2] = v27 - 1;
                  swift_bridgeObjectRelease();
                }
              }
            }
            v28 = objc_msgSend((id)v3, sel_text, v52, v53);
            if (!v28)
              break;
            v29 = v28;
            v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v32 = v31;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v4 = v40;
            }
            v33 = v4;
            v34 = v4[2];
            v35 = v33;
            v36 = v33[3] >> 1;
            v37 = v34 + 1;
            if (v36 <= v34)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v35 = v41;
              v36 = v41[3] >> 1;
            }
            v35[2] = v37;
            v38 = &v35[2 * v34];
            v38[4] = v30;
            v38[5] = v32;
            v1 = v34 + 2;
            if ((uint64_t)v36 < (uint64_t)(v34 + 2))
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v4 = v42;
            }
            else
            {
              v4 = v35;
            }
            v4[2] = v1;
            v39 = &v4[2 * v37];
            v39[4] = 32;
            v39[5] = 0xE100000000000000;

            ++v21;
            if (v23 == v5)
              goto LABEL_56;
          }
          __break(1u);
          break;
        }
        v4 = v15;
LABEL_56:

        OUTLINED_FUNCTION_3_1();
        v6 = v63;
        if (v63 == v60)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_82;
        }
        if (v63 >= *(_QWORD *)(v55 + 16))
          goto LABEL_71;
        v15 = v4;
        v4 = v54[v63];
        if (__OFADD__(v63, 1))
          goto LABEL_69;
        v14 = v63;
        v16 = v63 + 1;
        if (v63 == v59)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_82;
        }
      }
      __break(1u);
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    goto LABEL_81;
  }
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_12();
LABEL_82:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v46 = BidirectionalCollection<>.joined(separator:)();
  v48 = v47;
  swift_bridgeObjectRelease();
  v49 = HIBYTE(v48) & 0xF;
  if ((v48 & 0x2000000000000000) == 0)
    v49 = v46 & 0xFFFFFFFFFFFFLL;
  if (!v49)
  {
    OUTLINED_FUNCTION_3_1();
    lazy protocol witness table accessor for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError();
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_57();
    *v50 = v51;
    v50[1] = 0x80000001C2E9A780;
    OUTLINED_FUNCTION_27_2();
  }

}

uint64_t WordEmbeddingFeatureExtractor.nlTokenize(recognition:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_13_5() + 20)))
  {
    swift_retain();
    dispatch thunk of ConfigurableAnalyzer.analyzeString(string:)();
    if (!v2)
    {
      v5 = swift_retain();
      v6 = specialized Sequence.filter(_:)(v5);
      a1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12MorphunSwift5TokenVG_SSs5NeverOTg5083_s7SiriCam29WordEmbeddingFeatureExtractorV10nlTokenize11recognitionSaySSGSS_tKFSS12d6Swift5F54Vcfu_33_159891d7692f873338f9510e7a09688eAISSTf3nnnpk_nTf1cn_n(v6);
      OUTLINED_FUNCTION_21_2();
      swift_release();
    }
    OUTLINED_FUNCTION_45();
  }
  else
  {
    lazy protocol witness table accessor for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError();
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_BYTE *)(v4 + 16) = 3;
    OUTLINED_FUNCTION_27_2();
  }
  return a1;
}

uint64_t specialized Sequence.filter(_:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[3];
  char *v20;
  uint64_t v21;
  uint64_t v22;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Token?);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Token();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v19 - v9;
  v22 = a1;
  v21 = MEMORY[0x1E0DEE9D8];
  v11 = type metadata accessor for TokenChain();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D50610];
  lazy protocol witness table accessor for type TokenChain and conformance TokenChain(&lazy protocol witness table cache variable for type TokenChain and conformance TokenChain, (uint64_t (*)(uint64_t))MEMORY[0x1E0D50610], MEMORY[0x1E0D50618]);
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type TokenChain and conformance TokenChain(&lazy protocol witness table cache variable for type TokenChain and conformance TokenChain, v12, MEMORY[0x1E0D50620]);
  dispatch thunk of IteratorProtocol.next()();
  if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v4) != 1)
  {
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v19[2] = v11;
    v20 = v8;
    do
    {
      v14(v10, v3, v4);
      if (Token.isSignificant()())
      {
        v14(v8, v10, v4);
        v15 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
          v15 = v21;
        }
        v17 = *(_QWORD *)(v15 + 16);
        v16 = *(_QWORD *)(v15 + 24);
        if (v17 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          v15 = v21;
        }
        *(_QWORD *)(v15 + 16) = v17 + 1;
        v18 = v15
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + *(_QWORD *)(v5 + 72) * v17;
        v8 = v20;
        v14((char *)v18, v20, v4);
        v21 = v15;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v4) != 1);
  }
  swift_release();
  outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v3, &demangling cache variable for type metadata for Token?);
  return v21;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance WordEmbeddingFeatureExtractor()
{
  WordEmbeddingFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance WordEmbeddingFeatureExtractor(void **a1)
{
  return WordEmbeddingFeatureExtractor.extractImpl(from:)(*a1);
}

unint64_t lazy protocol witness table accessor for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError;
  if (!lazy protocol witness table cache variable for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for WordEmbeddingFeatureExtractorError, &type metadata for WordEmbeddingFeatureExtractorError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError);
  }
  return result;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t taskCreateFlags(priority:isChildTask:copyTaskLocals:inheritContext:enqueueJob:addPendingGroupTaskUnconditionally:isDiscardingTask:)(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  unsigned __int8 v19;
  uint64_t v20;

  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v16);
  v17 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17) == 1)
  {
    outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v16, &demangling cache variable for type metadata for TaskPriority?);
    result = 0;
    if ((a2 & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    result = v19;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a3 & 1) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if ((a3 & 1) != 0)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if ((a5 & 1) != 0)
LABEL_6:
    result |= 0x1000uLL;
LABEL_7:
  if ((a6 & 1) != 0)
    result |= 0x2000uLL;
  if ((a7 & 1) != 0)
    return result | 0x4000;
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v0;

  OUTLINED_FUNCTION_2_17();
  return OUTLINED_FUNCTION_21_3(*(uint64_t (**)(void))(v0 + 8));
}

void specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t *v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  uint64_t v1;

  if (a1 + 1 > *(_QWORD *)(*(_QWORD *)v1 + 24) >> 1)
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

unint64_t lazy protocol witness table accessor for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError;
  if (!lazy protocol witness table cache variable for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for TopRecogntionFeatureExtractorError, &type metadata for TopRecogntionFeatureExtractorError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t lazy protocol witness table accessor for type TokenChain and conformance TokenChain(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1C3BCB3E4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C2E33148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = OUTLINED_FUNCTION_20_2();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_20_2() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:);
  return closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(a1, v5, v6, v7);
}

uint64_t partial apply for closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_2_17();
  return OUTLINED_FUNCTION_21_3(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1C2E3325C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t getEnumTag for WordEmbeddingFeatureExtractorError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for WordEmbeddingFeatureExtractorError(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WordEmbeddingFeatureExtractorError()
{
  return &type metadata for WordEmbeddingFeatureExtractorError;
}

uint64_t OUTLINED_FUNCTION_2_17()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_3_13()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_4_12()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_8_8(uint64_t (*a1)(void))
{
  return a1();
}

void OUTLINED_FUNCTION_9_6(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  uint8_t *v5;

  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t OUTLINED_FUNCTION_10_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_13_5()
{
  return type metadata accessor for WordEmbeddingFeatureExtractor();
}

BOOL OUTLINED_FUNCTION_16_4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_18_1()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_19_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return type metadata accessor for Locale();
}

uint64_t OUTLINED_FUNCTION_21_3(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_23_3()
{
  return swift_task_switch();
}

id OUTLINED_FUNCTION_25_3()
{
  void *v0;

  return v0;
}

void OUTLINED_FUNCTION_26_2(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_28_3()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_29_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_30_3()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_32_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_36_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

_WORD *OUTLINED_FUNCTION_38_1(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_40_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_41_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_43_1()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_45()
{
  return swift_release();
}

void OUTLINED_FUNCTION_47_0()
{
  JUMPOUT(0x1C3BCAC88);
}

uint64_t OUTLINED_FUNCTION_48(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t OUTLINED_FUNCTION_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_50()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t OUTLINED_FUNCTION_51()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_52()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_53()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_54(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t OUTLINED_FUNCTION_55()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_56()
{
  void *v0;

}

uint64_t destroy for CAARTrialEnrollment()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CAARTrialEnrollment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CAARTrialEnrollment(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for CAARTrialEnrollment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAARTrialEnrollment(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAARTrialEnrollment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAARTrialEnrollment()
{
  return &type metadata for CAARTrialEnrollment;
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

uint64_t specialized Sequence<>.max()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1[2];
  if (!v1)
    return 0;
  result = a1[4];
  v4 = v1 - 1;
  if (v1 != 1)
  {
    v5 = a1 + 5;
    do
    {
      v7 = *v5++;
      v6 = v7;
      if (result <= v7)
        result = v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam15ActionCandidateVG_Sis5NeverOTg503_s7d64Cam26DawnRankerFeatureExtractorV7actions13rankerContextACSayAA15fG71VG_AA0dI0VtcfcSiAGcfu_33_8226a15facd6e6e82cd0ea8a8c3738b3AGSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v11;
    v4 = type metadata accessor for ActionCandidate();
    v5 = *(_QWORD *)(v4 - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    do
    {
      v8 = *(_QWORD *)(v6 + *(int *)(v4 + 24));
      v9 = *(_QWORD *)(v11 + 16);
      if (v9 >= *(_QWORD *)(v11 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v6 += v7;
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam15ActionCandidateVG_SDySSSo14MLFeatureValueCGsAE_pTg5(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v6 = v17;
    v8 = *(_QWORD *)(type metadata accessor for ActionCandidate() - 8);
    v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      a1(&v16, v9, &v15);
      if (v4)
        break;
      v4 = 0;
      v11 = v16;
      v17 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      if (v12 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v17;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_QWORD *)(v6 + 8 * v12 + 32) = v11;
      v9 += v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam12RankedActionVG_10Foundation4UUIDVs5NeverOTg503_s7d104Cam22CodeBasedRankerHandlerC29extractDisambiguationFeatures13rankedActions20siriSignalsContainerySayAA12fG97VGz_AA0aM10Containing_ptF10Foundation4UUIDVAHcfu_33_1cb444e52906099451ab9d686f8988b8AhMTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v16[1] = v1;
    v19 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v8 = v19;
    v9 = type metadata accessor for RankedAction();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v18 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 36), v3);
      v19 = v8;
      v14 = *(_QWORD *)(v8 + 16);
      v13 = *(_QWORD *)(v8 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v8 = v19;
      }
      *(_QWORD *)(v8 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v11 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam0E5ParseOG_Sds5NeverOTg5(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v6 = v16;
    v9 = *(_QWORD *)(type metadata accessor for CamParse(0) - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      a1(&v15, v10);
      if (v4)
        break;
      v4 = 0;
      v12 = v15;
      v16 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      if (v13 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      *(_QWORD *)(v6 + 8 * v13 + 32) = v12;
      v10 += v11;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Sd7elementtG_Sis5NeverOTg5231_s7SiriCam22CodeBasedRankerHandlerC4rank9requestId04caarI002rcI003trpI06parses13rankerContextSayAA0B5ParseOG10Foundation4UUIDV_APSSAPSgAmA0eO0VtFS2i6offset_Sd7elementt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960SiAT_SdAUtSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    result = v8;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 2;
      v5 = v6;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      if (v7 >= *(_QWORD *)(result + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_QWORD *)(result + 8 * v7 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_7SiriCam0E5ParseOs5NeverOTg503_s7d94Cam22CodeBasedRankerHandlerC4rank9requestId04caarI002rcI003trpI06parses13rankerContextSayAA0B5F49OG10Foundation4UUIDV_APSSAPSgAmA0eO0VtFALSiXEfU0_SayAIGTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = type metadata accessor for CamParse(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v19 = v2;
    v23 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v10 = v23;
    v11 = (unint64_t *)(a1 + 32);
    v22 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v21 = a2 + v22;
    v20 = v6;
    while (1)
    {
      v13 = *v11++;
      v12 = v13;
      if ((v13 & 0x8000000000000000) != 0)
        break;
      if (v12 >= *(_QWORD *)(a2 + 16))
        goto LABEL_11;
      v14 = a2;
      v15 = (uint64_t)v8;
      v16 = *(_QWORD *)(v6 + 72);
      outlined init with copy of RankedAction(v21 + v16 * v12, v15, type metadata accessor for CamParse);
      v23 = v10;
      v18 = *(_QWORD *)(v10 + 16);
      v17 = *(_QWORD *)(v10 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v10 = v23;
      }
      *(_QWORD *)(v10 + 16) = v18 + 1;
      outlined init with take of CamModelMetadata(v15, v10 + v22 + v18 * v16, type metadata accessor for CamParse);
      --v9;
      a2 = v14;
      v6 = v20;
      v8 = (char *)v15;
      if (!v9)
        goto LABEL_8;
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
}

void specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v41 = a4;
  v45 = a3;
  v6 = type metadata accessor for UUID();
  v46 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v36 - v10;
  if (a1 == a2)
  {
    v37 = MEMORY[0x1E0DEE9D8];
LABEL_3:
    swift_bridgeObjectRelease();
    return;
  }
  if (a2 >= a1)
  {
    v44 = v45 + 56;
    v37 = MEMORY[0x1E0DEE9D8];
    v12 = a1;
    v39 = a1;
    v40 = a2;
    do
    {
      v13 = v12;
      v38 = v12;
      while (1)
      {
        if (v13 < a1)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        v14 = v12;
        if ((uint64_t)v12 >= a2)
          goto LABEL_25;
        if (v13 < 0)
          goto LABEL_26;
        v15 = *v41;
        if (v12 >= *(_QWORD *)(*v41 + 16))
          goto LABEL_27;
        v43 = v12 + 1;
        v16 = type metadata accessor for RankedAction();
        v17 = *(_QWORD *)(v16 - 8);
        v18 = *(unsigned __int8 *)(v17 + 80);
        v19 = *(_QWORD *)(v17 + 72);
        v42 = v14;
        v20 = v15 + ((v18 + 32) & ~v18) + v19 * v14 + *(int *)(v16 + 36);
        v21 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
        v21(v11, v20, v6);
        if (*(_QWORD *)(v45 + 16))
        {
          v22 = v45;
          lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
          v23 = dispatch thunk of Hashable._rawHashValue(seed:)();
          v24 = -1 << *(_BYTE *)(v22 + 32);
          v25 = v23 & ~v24;
          if (((*(_QWORD *)(v44 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
            break;
        }
LABEL_16:
        (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v6);
        a1 = v39;
        a2 = v40;
        v12 = v43;
        v13 = v38;
        if (v43 == v40)
          goto LABEL_3;
      }
      v26 = ~v24;
      v27 = *(_QWORD *)(v46 + 72);
      while (1)
      {
        v21(v9, *(_QWORD *)(v45 + 48) + v27 * v25, v6);
        lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
        v28 = dispatch thunk of static Equatable.== infix(_:_:)();
        v29 = *(void (**)(char *, uint64_t))(v46 + 8);
        v29(v9, v6);
        if ((v28 & 1) != 0)
          break;
        v25 = (v25 + 1) & v26;
        if (((*(_QWORD *)(v44 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
          goto LABEL_16;
      }
      v29(v11, v6);
      v30 = v37;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v32 = v30;
      v47 = v30;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v32 = v47;
      }
      a1 = v39;
      a2 = v40;
      v33 = v42;
      v34 = v32;
      v35 = *(_QWORD *)(v32 + 16);
      if (v35 >= *(_QWORD *)(v32 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v34 = v47;
      }
      *(_QWORD *)(v34 + 16) = v35 + 1;
      v37 = v34;
      *(_QWORD *)(v34 + 8 * v35 + 32) = v33;
      v12 = v43;
    }
    while (v43 != a2);
    goto LABEL_3;
  }
LABEL_28:
  __break(1u);
}

uint64_t one-time initialization function for postRankLoggingQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v6);
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.background.getter();
  v8[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v5, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static CodeBasedRankerHandler.postRankLoggingQueue = result;
  return result;
}

uint64_t CodeBasedRankerHandler.init(scorer:tieBreakerChain:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  outlined init with copy of SiriSignalsContaining(a1, v2 + 16);
  *(_QWORD *)(v2 + 104) = a2;
  *(_QWORD *)(v2 + 56) = 0xD000000000000011;
  *(_QWORD *)(v2 + 64) = 0x80000001C2E9A970;
  CamModelVersion.init(_:)();
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    __swift_destroy_boxed_opaque_existential_1(v2 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for CodeBasedRankerHandler();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v10 = v6;
    v11 = v7;
    v12 = v8;
    v13 = v9;
    v14 = HIDWORD(v6);
    __swift_destroy_boxed_opaque_existential_1(a1);
    *(_DWORD *)(v2 + 72) = v10;
    *(_DWORD *)(v2 + 76) = v14;
    *(_DWORD *)(v2 + 80) = v11;
    *(_QWORD *)(v2 + 88) = v12;
    *(_QWORD *)(v2 + 96) = v13;
  }
  return v2;
}

void CodeBasedRankerHandler.rank(requestId:caarId:rcId:actions:rankerContext:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;

  OUTLINED_FUNCTION_17_3();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_4_5();
  v11 = (v10 - v9);
  v12 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v12);
  v13 = OUTLINED_FUNCTION_74();
  CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(v13, v14, v7, v5, v11, v3, v1);
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_4_9();
}

uint64_t CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, NSObject *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), NSObject *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  id v51;
  id v52;
  void (*v53)(char *, id);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, id);
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  int v69;
  BOOL v70;
  uint8_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v91;
  _BOOL4 v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  id v105;
  uint64_t *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  void (*v132)(uint64_t, uint64_t);
  void *v133;
  char *v134;
  char *v135;
  NSObject *v136;
  uint64_t *v137;
  void *v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint8_t *v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  void (*v165)(uint64_t, uint64_t);
  void *v166;
  char *v167;
  void (*v168)(uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  _BOOL4 v173;
  uint64_t v174;
  char *v175;
  uint8_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  NSObject *v185;
  os_log_type_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  void (*v191)(char *, uint64_t);
  _QWORD v192[2];
  uint64_t v193;
  uint64_t v194;
  uint8_t *v195;
  NSObject *v196;
  uint64_t v197;
  char *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  NSObject *v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(uint64_t, uint64_t);
  uint64_t v221;
  char *v222;
  uint64_t v223;
  __int128 v224;
  void (*v225)(char *, id);
  uint64_t v226;
  uint64_t v227;
  char v228[8];
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232[8];
  char v233[8];
  uint64_t (*v234)();
  uint64_t v235;
  uint64_t v236;
  char v237[8];
  char v238[8];
  uint64_t v239;

  v221 = a7;
  v12 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_93(v12, (uint64_t)v233);
  v208 = v13;
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_37_3(v15);
  v16 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_93(v16, (uint64_t)v232);
  v207 = v17;
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_9_7();
  v206 = v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v203 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v204 = v21;
  OUTLINED_FUNCTION_37_3((uint64_t)v192 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for UUID();
  v23 = OUTLINED_FUNCTION_93(v22, (uint64_t)v228);
  v205 = v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v212 = (char *)v192 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = v26;
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_37_3((uint64_t)v192 - v27);
  *(_QWORD *)&v224 = type metadata accessor for RankedAction();
  v211 = *(_QWORD *)(v224 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v28);
  OUTLINED_FUNCTION_2_12();
  v226 = v29;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_13_3();
  v209 = v31;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)v192 - v33;
  v35 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_93(v35, (uint64_t)&v239);
  v219 = v36;
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v37);
  OUTLINED_FUNCTION_2_12();
  v210 = v38;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v39);
  OUTLINED_FUNCTION_13_3();
  v214 = v40;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_13_3();
  v215 = v42;
  OUTLINED_FUNCTION_3_7();
  v44 = MEMORY[0x1E0C80A78](v43);
  v46 = (char *)v192 - v45;
  MEMORY[0x1E0C80A78](v44);
  v48 = (char *)v192 - v47;
  v217 = a2;
  v218 = a3;
  v49 = a3;
  v50 = a5;
  v220 = a4;
  specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)((uint64_t)a2, v49, (uint64_t)a4, a1, a5);
  if (one-time initialization token for ranker != -1)
    swift_once();
  v51 = (id)static Log.ranker;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  v222 = v48;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  v52 = v51;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_35_2();
  v53 = v225;
  CodeBasedRankerHandler.extractFeatures(actions:rankerContext:)();
  if (v53)
  {
    OUTLINED_FUNCTION_43_2();
    OUTLINED_FUNCTION_58((uint64_t)v46);
    v55 = v222;
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_47_1();
    v53(v55, v52);
    v60 = v53;
    CamResponseStatusCode.init(fromError:)(v53, (char *)&v230);
    specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(v230, v217, v218, (unint64_t)v220, a1, (uint64_t)a5);
    swift_willThrow();
  }
  else
  {
    v56 = v54;
    v201 = a1;
    v221 = (uint64_t)v50;
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_35_2();
    v52;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    OUTLINED_FUNCTION_8_9();
    v57 = OUTLINED_FUNCTION_24_3();
    v58 = OUTLINED_FUNCTION_11_3();
    v59 = v216;
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay7SiriCam15ActionCandidateVGSaySDySSSo14MLFeatureValueCGGG_AH06RankedH0VsAE_pTg503_s7f5Cam15hi10VSDySSSo14jk6CGAA06l5C0Vs5C33_pIgngrzo_AC_AFtAHsAI_pIegnrzr_TRAjnRsAE_pIgngrzo_Tf1cn_n(v58, v56, (void (*)(char *, uint64_t))partial apply for closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:), v216);
    v63 = v62;
    v200 = v57;
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_3_1();
    v230 = v63;
    OUTLINED_FUNCTION_2();
    specialized MutableCollection<>.sort(by:)(&v230, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    v64 = (uint64_t *)(v200 + 16);
    swift_bridgeObjectRelease();
    v199 = v64;
    *v64 = v230;
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_8_9();
    v65 = v209;
    if (one-time initialization token for ranker != -1)
      swift_once();
    v66 = type metadata accessor for Logger();
    v67 = __swift_project_value_buffer(v66, (uint64_t)static Logger.ranker);
    swift_retain_n();
    v225 = (void (*)(char *, id))v67;
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.info.getter();
    v70 = os_log_type_enabled(v68, (os_log_type_t)v69);
    v198 = v46;
    v197 = 0;
    if (v70)
    {
      HIDWORD(v194) = v69;
      v196 = v68;
      v71 = (uint8_t *)OUTLINED_FUNCTION_4();
      v193 = OUTLINED_FUNCTION_4();
      v230 = v193;
      v195 = v71;
      *(_DWORD *)v71 = 136315138;
      v72 = v199;
      OUTLINED_FUNCTION_3_0();
      v73 = *v72;
      v74 = *(_QWORD *)(*v72 + 16);
      v75 = MEMORY[0x1E0DEE9D8];
      v76 = v224;
      if (v74)
      {
        v236 = MEMORY[0x1E0DEE9D8];
        OUTLINED_FUNCTION_2();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        OUTLINED_FUNCTION_11_7();
        v192[1] = v73;
        v78 = v73 + v77;
        v80 = *(_QWORD *)(v79 + 72);
        v75 = v236;
        do
        {
          OUTLINED_FUNCTION_79(v78, (uint64_t)v34);
          v81 = *(_QWORD *)&v34[*(int *)(v76 + 28)];
          outlined destroy of CamParse((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v75 = v236;
          }
          v82 = *(_QWORD *)(v75 + 16);
          if (v82 >= *(_QWORD *)(v75 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v75 = v236;
          }
          *(_QWORD *)(v75 + 16) = v82 + 1;
          *(_QWORD *)(v75 + 8 * v82 + 32) = v81;
          v78 += v80;
          --v74;
          v76 = v224;
        }
        while (v74);
        swift_bridgeObjectRelease();
      }
      v84 = v195;
      v85 = MEMORY[0x1C3BCA9B8](v75, MEMORY[0x1E0DEB070]);
      v87 = v86;
      swift_bridgeObjectRelease();
      v236 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v87, &v230);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      OUTLINED_FUNCTION_21_2();
      OUTLINED_FUNCTION_88(&dword_1C2E0C000, v196, BYTE4(v194), "Ranking generated scores %s", v84);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    swift_release_n();
    v83 = v224;
    v88 = OUTLINED_FUNCTION_86();
    v89 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v91 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_DWORD *)v91 = 67109120;
      v92 = (OUTLINED_FUNCTION_41_2() & 1) != 0 && (CamFeatureFlag.isEnabled.getter(5u) & 1) != 0;
      LODWORD(v230) = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2E0C000, v88, v89, "Dawn AppShortcuts experience enabled=%{BOOL}d", v91, 8u);
      OUTLINED_FUNCTION_3();
    }

    v93 = v199;
    OUTLINED_FUNCTION_3_0();
    v94 = *v93;
    v95 = *(_QWORD *)(*v93 + 16);
    if (v95 >= 2)
    {
      OUTLINED_FUNCTION_11_7();
      v98 = v94 + v97;
      v100 = *(_QWORD *)(v99 + 72);
      swift_bridgeObjectRetain();
      v101 = 1;
      while (1)
      {
        outlined init with copy of RankedAction(v98, v65, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
        v102 = *(_QWORD *)(v65 + *(int *)(v83 + 44));
        if (*(_QWORD *)(v102 + 16)
          && (v103 = specialized __RawDictionaryStorage.find<A>(_:)(0x535F5050415F5349, 0xEF54554354524F48),
              (v104 & 1) != 0))
        {
          v105 = objc_msgSend(*(id *)(*(_QWORD *)(v102 + 56) + 8 * v103), sel_int64Value);
          OUTLINED_FUNCTION_10_6(v65);
          if (v105)
          {
            v96 = 0;
            goto LABEL_39;
          }
        }
        else
        {
          OUTLINED_FUNCTION_10_6(v65);
        }
        if (v95 == v101)
          break;
        v98 += v100;
        if (__OFADD__(v101++, 1))
        {
          __break(1u);
          break;
        }
      }
      v96 = 1;
LABEL_39:
      OUTLINED_FUNCTION_21_2();
      v59 = v216;
    }
    else
    {
      v96 = 1;
    }
    v209 = OUTLINED_FUNCTION_24_3();
    v107 = (uint64_t *)(v209 + 16);
    v108 = OUTLINED_FUNCTION_41_2();
    *(_QWORD *)&v224 = v107;
    if ((v108 & 1) != 0 && !(v96 & 1 | ((CamFeatureFlag.isEnabled.getter(5u) & 1) == 0)))
    {
      OUTLINED_FUNCTION_76();
      OUTLINED_FUNCTION_81();
      static os_signpost_type_t.begin.getter();
      OUTLINED_FUNCTION_16_5();
      type metadata accessor for SiriSignalsContainer();
      v136 = OUTLINED_FUNCTION_24_3();
      type metadata accessor for SignalValue();
      v136[2].isa = (Class)Dictionary.init(dictionaryLiteral:)();
      SiriSignalsContainer.refreshSignals()();
      v137 = v199;
      swift_beginAccess();
      swift_retain();
      specialized CodeBasedRankerHandler.extractUserHistoryFeatures(rankedActions:siriSignalsContainer:)(v137, (uint64_t)v136);
      specialized CodeBasedRankerHandler.extractDisambiguationFeatures(rankedActions:siriSignalsContainer:)(v137, (uint64_t)v136);
      swift_endAccess();
      v196 = v136;
      swift_release();
      v138 = *(void **)(v65 + 2528);
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_16_5();
      v139 = v138;
      OSSignpostID.init(log:)();
      static os_signpost_type_t.begin.getter();
      OUTLINED_FUNCTION_16_5();
      v140 = *(_QWORD *)(v59 + 104);
      v141 = swift_bridgeObjectRetain();
      v142 = Array<A>.execute(_:)(v141, v140);
      v195 = v143;
      v144 = swift_bridgeObjectRelease();
      *v107 = v142;
      OUTLINED_FUNCTION_51_0(v144, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
      v199 = (uint64_t *)v140;
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_16_5();
      if (one-time initialization token for postRankLoggingQueue != -1)
        swift_once();
      v197 = static CodeBasedRankerHandler.postRankLoggingQueue;
      v145 = v205;
      v146 = *(void (**)(uint64_t))(v205 + 16);
      v147 = OUTLINED_FUNCTION_44_0();
      v146(v147);
      v148 = OUTLINED_FUNCTION_66();
      v149 = ((uint64_t (*)(uint64_t))v146)(v148);
      OUTLINED_FUNCTION_42_0(v149, v150, &demangling cache variable for type metadata for UUID?);
      v151 = *(unsigned __int8 *)(v145 + 80);
      v152 = (v151 + 32) & ~v151;
      v153 = (v202 + v152 + 7) & 0xFFFFFFFFFFFFFFF8;
      v154 = (v151 + v153 + 16) & ~v151;
      OUTLINED_FUNCTION_87();
      v157 = (v155 + v154) & ~v156;
      OUTLINED_FUNCTION_95();
      v159 = (v158 + v157 + 7) & 0xFFFFFFFFFFFFFFF8;
      v160 = swift_allocObject();
      v161 = v209;
      *(_QWORD *)(v160 + 16) = v216;
      *(_QWORD *)(v160 + 24) = v161;
      v162 = v160 + v152;
      v163 = *(_QWORD *)(v145 + 32);
      OUTLINED_FUNCTION_69(v162, (uint64_t)v237);
      v164 = (_QWORD *)(v160 + v153);
      v165 = v220;
      *v164 = v218;
      v164[1] = v165;
      OUTLINED_FUNCTION_69(v160 + v154, (uint64_t)v238);
      outlined init with take of (UUID, [String : MLFeatureValue])(v213, v160 + v157, &demangling cache variable for type metadata for UUID?);
      *(_QWORD *)(v160 + v159) = v195;
      v234 = partial apply for closure #3 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:);
      v235 = v160;
      v230 = MEMORY[0x1E0C809B0];
      v231 = 1107296256;
      v166 = OUTLINED_FUNCTION_84((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
      swift_retain();
      swift_retain();
      OUTLINED_FUNCTION_11_3();
      OUTLINED_FUNCTION_63();
      v227 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      v135 = v167;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_34_2();
      v168 = (void (*)(uint64_t, uint64_t))v197;
      MEMORY[0x1C3BCAB44](0, v163, v157, v166);
      _Block_release(v166);
      swift_release();
      OUTLINED_FUNCTION_33_3();
      OUTLINED_FUNCTION_21_4();
      OUTLINED_FUNCTION_43_2();
      v169 = v223;
      v168(v210, v223);
      v220 = v168;
      v168(v214, v169);
    }
    else
    {
      OUTLINED_FUNCTION_76();
      OUTLINED_FUNCTION_81();
      static os_signpost_type_t.begin.getter();
      OUTLINED_FUNCTION_8_9();
      v109 = *(_QWORD *)(v59 + 104);
      v110 = swift_bridgeObjectRetain();
      v111 = Array<A>.execute(_:)(v110, v109);
      v196 = v112;
      v113 = OUTLINED_FUNCTION_21_2();
      *v107 = v111;
      OUTLINED_FUNCTION_51_0(v113, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
      v199 = (uint64_t *)v109;
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_8_9();
      if (one-time initialization token for postRankLoggingQueue != -1)
        swift_once();
      v210 = static CodeBasedRankerHandler.postRankLoggingQueue;
      v114 = v205;
      v115 = *(void (**)(uint64_t))(v205 + 16);
      v116 = OUTLINED_FUNCTION_44_0();
      v115(v116);
      v117 = OUTLINED_FUNCTION_66();
      v118 = ((uint64_t (*)(uint64_t))v115)(v117);
      OUTLINED_FUNCTION_42_0(v118, v119, &demangling cache variable for type metadata for UUID?);
      v120 = *(unsigned __int8 *)(v114 + 80);
      v121 = (v120 + 32) & ~v120;
      v122 = (v202 + v121 + 7) & 0xFFFFFFFFFFFFFFF8;
      v123 = (v120 + v122 + 16) & ~v120;
      OUTLINED_FUNCTION_87();
      v126 = (v124 + v123) & ~v125;
      OUTLINED_FUNCTION_95();
      v128 = (v127 + v126 + 7) & 0xFFFFFFFFFFFFFFF8;
      v129 = swift_allocObject();
      v130 = v216;
      *(_QWORD *)(v129 + 16) = v200;
      *(_QWORD *)(v129 + 24) = v130;
      OUTLINED_FUNCTION_70(v129 + v121, (uint64_t)v237);
      v131 = (_QWORD *)(v129 + v122);
      v132 = v220;
      *v131 = v218;
      v131[1] = v132;
      OUTLINED_FUNCTION_70(v129 + v123, (uint64_t)v238);
      outlined init with take of (UUID, [String : MLFeatureValue])(v213, v129 + v126, &demangling cache variable for type metadata for UUID?);
      *(_QWORD *)(v129 + v128) = v196;
      v234 = partial apply for closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:);
      v235 = v129;
      v230 = MEMORY[0x1E0C809B0];
      v231 = 1107296256;
      v133 = OUTLINED_FUNCTION_84((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
      swift_retain();
      swift_retain();
      OUTLINED_FUNCTION_36_0();
      OUTLINED_FUNCTION_63();
      v227 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      v135 = v134;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_34_2();
      MEMORY[0x1C3BCAB44](0, v132, v114, v133);
      _Block_release(v133);
      OUTLINED_FUNCTION_33_3();
      OUTLINED_FUNCTION_21_4();
      v220 = *(void (**)(uint64_t, uint64_t))(v219 + 8);
      v220(v214, v223);
    }
    swift_release();
    v170 = v209;
    swift_retain();
    v171 = OUTLINED_FUNCTION_86();
    v172 = static os_log_type_t.info.getter();
    v173 = os_log_type_enabled(v171, v172);
    v174 = v226;
    v175 = v198;
    if (v173)
    {
      v176 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_DWORD *)v176 = 134217984;
      OUTLINED_FUNCTION_3_0();
      v230 = *(_QWORD *)(*(_QWORD *)(v170 + 16) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      OUTLINED_FUNCTION_88(&dword_1C2E0C000, v171, v172, "Returning %ld ranked actions", v176);
      OUTLINED_FUNCTION_3();
    }

    swift_release();
    OUTLINED_FUNCTION_72();
    v177 = v224;
    OUTLINED_FUNCTION_3_0();
    v178 = *(_QWORD *)(*(_QWORD *)v177 + 16);
    if (v178)
    {
      OUTLINED_FUNCTION_11_7();
      v181 = v179 + v180;
      v183 = *(_QWORD *)(v182 + 72);
      v219 = v179;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v184 = 136315138;
      v224 = v184;
      v221 = MEMORY[0x1E0DEE9B8] + 8;
      do
      {
        outlined init with copy of RankedAction(v181, v174, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
        v185 = OUTLINED_FUNCTION_86();
        v186 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v185, v186))
        {
          v187 = OUTLINED_FUNCTION_4();
          v229 = OUTLINED_FUNCTION_4();
          *(_DWORD *)v187 = v224;
          v188 = RankedAction.description.getter();
          *(_QWORD *)(v187 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v188, v189, &v229);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_10_6(v226);
          OUTLINED_FUNCTION_88(&dword_1C2E0C000, v185, v186, "%s", (uint8_t *)v187);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
        }

        OUTLINED_FUNCTION_10_6(v174);
        v181 += v183;
        --v178;
      }
      while (v178);
      swift_bridgeObjectRelease();
      v135 = v222;
      v175 = v198;
    }
    v190 = v223;
    v191 = (void (*)(char *, uint64_t))v220;
    v220(v215, v223);
    v191(v175, v190);
    OUTLINED_FUNCTION_11_3();
    swift_release();
    swift_release();
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_47_1();
    v191(v135, v190);
  }
  return OUTLINED_FUNCTION_45_0();
}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  void (*v56)(char *, uint64_t, uint64_t);
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  unint64_t v67;
  NSObject *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  NSObject *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  NSObject *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  id v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  id v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  char *v128;
  NSObject *v129;
  os_log_type_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void (*v137)(char *, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  id v159;
  id v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  os_log_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171[2];

  v166 = a5;
  v167 = a3;
  v163 = a4;
  v164 = a2;
  v165 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v151 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v154 = (uint64_t)&v151 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v153 = (uint64_t)&v151 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v156 = (uint64_t)&v151 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v162 = (char *)&v151 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v155 = (char *)&v151 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v151 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v157 = (uint64_t)&v151 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v161 = (char *)&v151 - v25;
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v151 - v26;
  v28 = type metadata accessor for UUID();
  v29 = *(_QWORD *)(v28 - 8);
  v168 = v28;
  v169 = v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v158 = (char *)&v151 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v152 = (char *)&v151 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v151 - v35;
  v37 = MEMORY[0x1E0C80A78](v34);
  v39 = (char *)&v151 - v38;
  v40 = MEMORY[0x1E0C80A78](v37);
  v42 = (char *)&v151 - v41;
  v43 = MEMORY[0x1E0C80A78](v40);
  v45 = (char *)&v151 - v44;
  v46 = MEMORY[0x1E0C80A78](v43);
  v48 = (char *)&v151 - v47;
  MEMORY[0x1E0C80A78](v46);
  v50 = (char *)&v151 - v49;
  v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99398]), sel_init);
  if (v51)
  {
    v52 = v51;
    objc_msgSend(v51, sel_setExists_, 1);
    v159 = v52;
    v160 = static CaarRequestLogger.wrapIntoLogEvent(message:)((uint64_t)v52);
    if (v160)
    {
      v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99368]), sel_init);
      v54 = v168;
      if (v53)
      {
        v55 = v53;
        type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        v56 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 16);
        v56(v42, v165, v54);
        v57 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v55, sel_setCaarId_, v57);

        v58 = (void *)MEMORY[0x1C3BCA844](v164, v167);
        objc_msgSend(v55, sel_setResultCandidateId_, v58);

        objc_msgSend(v55, sel_setRequestId_, 0);
        if ((AFDeviceSupportsSAE() & 1) != 0)
        {
          v56(v42, v163, v54);
          v59 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v55, sel_setSubRequestId_, v59);

        }
        outlined init with copy of UUID?((uint64_t)v166, (uint64_t)v21, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v54) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v21, &demangling cache variable for type metadata for UUID?);
          v60 = (uint64_t)v155;
          v61 = v167;
          UUID.init(uuidString:)();
          if (__swift_getEnumTagSinglePayload(v60, 1, v54) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v60, &demangling cache variable for type metadata for UUID?);
          }
          else
          {
            v122 = v169;
            v123 = v152;
            (*(void (**)(char *, uint64_t, uint64_t))(v169 + 32))(v152, v60, v54);
            v56(v42, (uint64_t)v123, v54);
            v124 = SISchemaUUID.__allocating_init(nsuuid:)();
            objc_msgSend(v55, sel_setTrpId_, v124);

            (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v54);
          }
        }
        else
        {
          v118 = v169;
          (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v36, v21, v54);
          v56(v42, (uint64_t)v36, v54);
          v119 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v55, sel_setTrpId_, v119);

          (*(void (**)(char *, uint64_t))(v118 + 8))(v36, v54);
          v61 = v167;
        }
        v125 = (uint64_t)v162;
        v126 = v160;
        objc_msgSend(v160, sel_setEventMetadata_, v55);
        objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, v126);
        swift_unknownObjectRelease();
        if (one-time initialization token for common != -1)
          swift_once();
        v127 = type metadata accessor for Logger();
        __swift_project_value_buffer(v127, (uint64_t)static Logger.common);
        v128 = v158;
        v56(v158, v165, v54);
        outlined init with copy of UUID?((uint64_t)v166, v125, &demangling cache variable for type metadata for UUID?);
        swift_bridgeObjectRetain_n();
        v129 = Logger.logObject.getter();
        v130 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v129, v130))
        {
          v131 = v128;
          v132 = swift_slowAlloc();
          v167 = swift_slowAlloc();
          v171[0] = v167;
          *(_DWORD *)v132 = 136315906;
          v170 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestReceived);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestReceived.Type);
          v133 = String.init<A>(describing:)();
          v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v134, v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v132 + 12) = 2080;
          v135 = UUID.uuidString.getter();
          v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v136, v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v137 = *(void (**)(char *, uint64_t))(v169 + 8);
          v137(v131, v168);
          *(_WORD *)(v132 + 22) = 2080;
          swift_bridgeObjectRetain();
          v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v164, v61, v171);
          v138 = v168;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v132 + 32) = 2080;
          v139 = (uint64_t)v162;
          v140 = v156;
          outlined init with copy of UUID?((uint64_t)v162, v156, &demangling cache variable for type metadata for UUID?);
          if (__swift_getEnumTagSinglePayload(v140, 1, v138) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v140, &demangling cache variable for type metadata for UUID?);
            v141 = 0;
            v142 = 0xE000000000000000;
          }
          else
          {
            v143 = UUID.uuidString.getter();
            v144 = v138;
            v141 = v143;
            v142 = v145;
            v137((char *)v140, v144);
          }
          v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v142, v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of RRDataSourceMetadataValue?(v139, &demangling cache variable for type metadata for UUID?);
          _os_log_impl(&dword_1C2E0C000, v129, v130, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v132, 0x2Au);
          v146 = v167;
          swift_arrayDestroy();
          MEMORY[0x1C3BCB4A4](v146, -1, -1);
          MEMORY[0x1C3BCB4A4](v132, -1, -1);

        }
        else
        {

          outlined destroy of RRDataSourceMetadataValue?(v125, &demangling cache variable for type metadata for UUID?);
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v169 + 8))(v128, v54);

        }
        return;
      }
      if (one-time initialization token for common != -1)
        swift_once();
      v101 = type metadata accessor for Logger();
      __swift_project_value_buffer(v101, (uint64_t)static Logger.common);
      v102 = v169;
      (*(void (**)(char *, uint64_t, uint64_t))(v169 + 16))(v39, v165, v54);
      v103 = v157;
      outlined init with copy of UUID?((uint64_t)v166, v157, &demangling cache variable for type metadata for UUID?);
      v104 = v167;
      swift_bridgeObjectRetain_n();
      v105 = Logger.logObject.getter();
      v106 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v105, (os_log_type_t)v106))
      {
        LODWORD(v166) = v106;
        v107 = swift_slowAlloc();
        v108 = v54;
        v165 = swift_slowAlloc();
        v171[0] = v165;
        *(_DWORD *)v107 = 136315906;
        v170 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestReceived.Type);
        v109 = String.init<A>(describing:)();
        v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v107 + 12) = 2080;
        v111 = UUID.uuidString.getter();
        v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v113 = *(void (**)(char *, uint64_t))(v102 + 8);
        v114 = v157;
        v113(v39, v54);
        *(_WORD *)(v107 + 22) = 2080;
        swift_bridgeObjectRetain();
        v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v164, v104, v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v107 + 32) = 2080;
        v115 = v153;
        outlined init with copy of UUID?(v114, v153, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v115, 1, v108) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v115, &demangling cache variable for type metadata for UUID?);
          v116 = 0;
          v117 = 0xE000000000000000;
        }
        else
        {
          v116 = UUID.uuidString.getter();
          v117 = v149;
          v113((char *)v115, v108);
        }
        v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v114, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C2E0C000, v105, (os_log_type_t)v166, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v107, 0x2Au);
        v150 = v165;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v150, -1, -1);
        MEMORY[0x1C3BCB4A4](v107, -1, -1);

        return;
      }

      outlined destroy of RRDataSourceMetadataValue?(v103, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v102 + 8))(v39, v54);
    }
    else
    {
      v83 = v168;
      if (one-time initialization token for common != -1)
        swift_once();
      v84 = type metadata accessor for Logger();
      __swift_project_value_buffer(v84, (uint64_t)static Logger.common);
      v85 = v169;
      (*(void (**)(char *, uint64_t, uint64_t))(v169 + 16))(v45, v165, v83);
      v86 = (uint64_t)v161;
      outlined init with copy of UUID?((uint64_t)v166, (uint64_t)v161, &demangling cache variable for type metadata for UUID?);
      v87 = v167;
      swift_bridgeObjectRetain_n();
      v88 = Logger.logObject.getter();
      v89 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v88, (os_log_type_t)v89))
      {
        LODWORD(v166) = v89;
        v90 = swift_slowAlloc();
        v165 = swift_slowAlloc();
        v171[0] = v165;
        *(_DWORD *)v90 = 136315906;
        v170 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestReceived.Type);
        v91 = String.init<A>(describing:)();
        v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v90 + 12) = 2080;
        v93 = UUID.uuidString.getter();
        v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v95 = *(void (**)(char *, uint64_t))(v85 + 8);
        v95(v45, v83);
        *(_WORD *)(v90 + 22) = 2080;
        swift_bridgeObjectRetain();
        v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v164, v87, v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v90 + 32) = 2080;
        v96 = (uint64_t)v161;
        v97 = v154;
        outlined init with copy of UUID?((uint64_t)v161, v154, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v97, 1, v83) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v97, &demangling cache variable for type metadata for UUID?);
          v98 = 0;
          v99 = 0xE000000000000000;
        }
        else
        {
          v98 = UUID.uuidString.getter();
          v99 = v147;
          v95((char *)v97, v83);
        }
        v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v96, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C2E0C000, v88, (os_log_type_t)v166, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v90, 0x2Au);
        v148 = v165;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v148, -1, -1);
        MEMORY[0x1C3BCB4A4](v90, -1, -1);

        return;
      }

      outlined destroy of RRDataSourceMetadataValue?(v86, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v85 + 8))(v45, v83);
    }

    return;
  }
  v161 = v8;
  v162 = v27;
  if (one-time initialization token for common != -1)
    swift_once();
  v62 = type metadata accessor for Logger();
  __swift_project_value_buffer(v62, (uint64_t)static Logger.common);
  v63 = v168;
  v64 = v169;
  v65 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 16);
  v65(v50, v165, v168);
  v65(v48, v163, v63);
  v66 = (uint64_t)v162;
  outlined init with copy of UUID?((uint64_t)v166, (uint64_t)v162, &demangling cache variable for type metadata for UUID?);
  v67 = v167;
  swift_bridgeObjectRetain_n();
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v68, (os_log_type_t)v69))
  {
    LODWORD(v165) = v69;
    v166 = v68;
    v70 = swift_slowAlloc();
    v163 = swift_slowAlloc();
    v171[0] = v163;
    *(_DWORD *)v70 = 136316162;
    v170 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestReceived);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestReceived.Type);
    v71 = String.init<A>(describing:)();
    v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v70 + 12) = 2080;
    v73 = UUID.uuidString.getter();
    v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v75 = v67;
    v76 = *(void (**)(char *, uint64_t))(v64 + 8);
    v76(v50, v63);
    *(_WORD *)(v70 + 22) = 2080;
    swift_bridgeObjectRetain();
    v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v164, v75, v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v70 + 32) = 2080;
    v77 = UUID.uuidString.getter();
    v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v76(v48, v63);
    *(_WORD *)(v70 + 42) = 2080;
    v80 = (uint64_t)v161;
    v79 = (uint64_t)v162;
    outlined init with copy of UUID?((uint64_t)v162, (uint64_t)v161, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v80, 1, v63) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v80, &demangling cache variable for type metadata for UUID?);
      v81 = 0;
      v82 = 0xE000000000000000;
    }
    else
    {
      v81 = UUID.uuidString.getter();
      v82 = v120;
      v76((char *)v80, v63);
    }
    v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v79, &demangling cache variable for type metadata for UUID?);
    v68 = v166;
    _os_log_impl(&dword_1C2E0C000, v166, (os_log_type_t)v165, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v70, 0x34u);
    v121 = v163;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v121, -1, -1);
    MEMORY[0x1C3BCB4A4](v70, -1, -1);
  }
  else
  {
    v100 = *(void (**)(char *, uint64_t))(v64 + 8);
    v100(v50, v63);
    swift_bridgeObjectRelease_n();
    v100(v48, v63);
    outlined destroy of RRDataSourceMetadataValue?(v66, &demangling cache variable for type metadata for UUID?);
  }

}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(char a1, NSObject *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  void (*v54)(char *, os_log_t, uint64_t);
  uint64_t v55;
  id v56;
  unint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, os_log_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  NSObject *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  os_log_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  NSObject *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  char *v126;
  NSObject *v127;
  int v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  id v155;
  id v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  os_log_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167[2];

  v162 = a6;
  v163 = a4;
  v159 = a5;
  v160 = a3;
  v164 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v147 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v149 = (uint64_t)&v147 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v148 = (uint64_t)&v147 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v151 = (uint64_t)&v147 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v158 = (char *)&v147 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v150 = (char *)&v147 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v147 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v153 = (uint64_t)&v147 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v157 = (char *)&v147 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v147 - v28;
  v161 = type metadata accessor for UUID();
  v165 = *(_QWORD *)(v161 - 8);
  v30 = MEMORY[0x1E0C80A78](v161);
  v154 = (char *)&v147 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v147 = (char *)&v147 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v147 - v35;
  v37 = MEMORY[0x1E0C80A78](v34);
  v152 = (char *)&v147 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v147 - v40;
  v42 = MEMORY[0x1E0C80A78](v39);
  v44 = (char *)&v147 - v43;
  v45 = MEMORY[0x1E0C80A78](v42);
  v47 = (char *)&v147 - v46;
  MEMORY[0x1E0C80A78](v45);
  v49 = (char *)&v147 - v48;
  v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99390]), sel_init);
  if (!v50)
  {
    v157 = v10;
    v158 = v29;
    if (one-time initialization token for common != -1)
      swift_once();
    v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.common);
    v64 = v165;
    v65 = *(void (**)(char *, os_log_t, uint64_t))(v165 + 16);
    v66 = v161;
    v65(v49, v164, v161);
    v65(v47, (os_log_t)v159, v66);
    v67 = (uint64_t)v158;
    outlined init with copy of UUID?(v162, (uint64_t)v158, &demangling cache variable for type metadata for UUID?);
    v68 = v163;
    swift_bridgeObjectRetain_n();
    v69 = Logger.logObject.getter();
    v70 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v69, (os_log_type_t)v70))
    {
      v100 = *(void (**)(char *, uint64_t))(v64 + 8);
      v100(v49, v66);
      swift_bridgeObjectRelease_n();
      v100(v47, v66);
      outlined destroy of RRDataSourceMetadataValue?(v67, &demangling cache variable for type metadata for UUID?);

      return;
    }
    LODWORD(v162) = v70;
    v164 = v69;
    v71 = swift_slowAlloc();
    v159 = swift_slowAlloc();
    v167[0] = v159;
    *(_DWORD *)v71 = 136316162;
    v166 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestFailed);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestFailed.Type);
    v72 = String.init<A>(describing:)();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v71 + 12) = 2080;
    v74 = UUID.uuidString.getter();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v76 = *(void (**)(char *, uint64_t))(v64 + 8);
    v76(v49, v66);
    *(_WORD *)(v71 + 22) = 2080;
    swift_bridgeObjectRetain();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, v68, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v71 + 32) = 2080;
    v77 = UUID.uuidString.getter();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v76(v47, v66);
    *(_WORD *)(v71 + 42) = 2080;
    v80 = (uint64_t)v157;
    v79 = (uint64_t)v158;
    outlined init with copy of UUID?((uint64_t)v158, (uint64_t)v157, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v80, 1, v66) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v80, &demangling cache variable for type metadata for UUID?);
      v81 = 0;
      v82 = 0xE000000000000000;
    }
    else
    {
      v81 = UUID.uuidString.getter();
      v82 = v120;
      v76((char *)v80, v66);
    }
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v79, &demangling cache variable for type metadata for UUID?);
    v88 = v164;
    _os_log_impl(&dword_1C2E0C000, v164, (os_log_type_t)v162, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v71, 0x34u);
    v121 = v159;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v121, -1, -1);
    MEMORY[0x1C3BCB4A4](v71, -1, -1);
    goto LABEL_43;
  }
  v51 = v50;
  objc_msgSend(v50, sel_setErrorCode_, dword_1C2E955F8[a1]);
  v155 = v51;
  v156 = static CaarErrorLogger.wrapIntoLogEvent(message:)((uint64_t)v51);
  if (!v156)
  {
    if (one-time initialization token for common != -1)
      swift_once();
    v83 = type metadata accessor for Logger();
    __swift_project_value_buffer(v83, (uint64_t)static Logger.common);
    v84 = v165;
    v85 = v161;
    (*(void (**)(char *, os_log_t, uint64_t))(v165 + 16))(v44, v164, v161);
    v86 = (uint64_t)v157;
    outlined init with copy of UUID?(v162, (uint64_t)v157, &demangling cache variable for type metadata for UUID?);
    v87 = v163;
    swift_bridgeObjectRetain_n();
    v88 = (os_log_t)Logger.logObject.getter();
    v89 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v88, (os_log_type_t)v89))
    {

      outlined destroy of RRDataSourceMetadataValue?(v86, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v44, v85);
      goto LABEL_30;
    }
    LODWORD(v164) = v89;
    v90 = swift_slowAlloc();
    v162 = swift_slowAlloc();
    v167[0] = v162;
    *(_DWORD *)v90 = 136315906;
    v166 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestFailed);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestFailed.Type);
    v91 = String.init<A>(describing:)();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v90 + 12) = 2080;
    v93 = UUID.uuidString.getter();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v95 = *(void (**)(char *, uint64_t))(v84 + 8);
    v95(v44, v85);
    *(_WORD *)(v90 + 22) = 2080;
    swift_bridgeObjectRetain();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, v87, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v90 + 32) = 2080;
    v96 = (uint64_t)v157;
    v97 = v149;
    outlined init with copy of UUID?((uint64_t)v157, v149, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v97, 1, v85) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v97, &demangling cache variable for type metadata for UUID?);
      v98 = 0;
      v99 = 0xE000000000000000;
    }
    else
    {
      v98 = UUID.uuidString.getter();
      v99 = v143;
      v95((char *)v97, v85);
    }
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v96, &demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_1C2E0C000, v88, (os_log_type_t)v164, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v90, 0x2Au);
    v144 = v162;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v144, -1, -1);
    MEMORY[0x1C3BCB4A4](v90, -1, -1);

LABEL_43:
    return;
  }
  v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99368]), sel_init);
  if (!v52)
  {
    v101 = v161;
    if (one-time initialization token for common != -1)
      swift_once();
    v102 = type metadata accessor for Logger();
    __swift_project_value_buffer(v102, (uint64_t)static Logger.common);
    v103 = v165;
    v104 = v152;
    (*(void (**)(char *, os_log_t, uint64_t))(v165 + 16))(v152, v164, v101);
    v105 = v153;
    outlined init with copy of UUID?(v162, v153, &demangling cache variable for type metadata for UUID?);
    v106 = v163;
    swift_bridgeObjectRetain_n();
    v107 = Logger.logObject.getter();
    v108 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v107, (os_log_type_t)v108))
    {
      LODWORD(v164) = v108;
      v109 = swift_slowAlloc();
      v162 = swift_slowAlloc();
      v167[0] = v162;
      *(_DWORD *)v109 = 136315906;
      v166 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestFailed);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestFailed.Type);
      v110 = String.init<A>(describing:)();
      v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v109 + 12) = 2080;
      v112 = UUID.uuidString.getter();
      v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v114 = *(void (**)(char *, uint64_t))(v103 + 8);
      v114(v104, v101);
      *(_WORD *)(v109 + 22) = 2080;
      swift_bridgeObjectRetain();
      v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, v106, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v109 + 32) = 2080;
      v115 = v153;
      v116 = v148;
      outlined init with copy of UUID?(v153, v148, &demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v116, 1, v101) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v116, &demangling cache variable for type metadata for UUID?);
        v117 = 0;
        v118 = 0xE000000000000000;
      }
      else
      {
        v117 = UUID.uuidString.getter();
        v118 = v145;
        v114((char *)v116, v101);
      }
      v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v118, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RRDataSourceMetadataValue?(v115, &demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_1C2E0C000, v107, (os_log_type_t)v164, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v109, 0x2Au);
      v146 = v162;
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v146, -1, -1);
      MEMORY[0x1C3BCB4A4](v109, -1, -1);

      return;
    }

    outlined destroy of RRDataSourceMetadataValue?(v105, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v101);
LABEL_30:

    return;
  }
  v53 = v52;
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  v54 = *(void (**)(char *, os_log_t, uint64_t))(v165 + 16);
  v55 = v161;
  v54(v41, v164, v161);
  v56 = SISchemaUUID.__allocating_init(nsuuid:)();
  objc_msgSend(v53, sel_setCaarId_, v56);

  v57 = v163;
  v58 = (void *)MEMORY[0x1C3BCA844](v160, v163);
  objc_msgSend(v53, sel_setResultCandidateId_, v58);

  objc_msgSend(v53, sel_setRequestId_, 0);
  if ((AFDeviceSupportsSAE() & 1) != 0)
  {
    v54(v41, (os_log_t)v159, v55);
    v59 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v53, sel_setSubRequestId_, v59);

  }
  v60 = v162;
  outlined init with copy of UUID?(v162, (uint64_t)v23, &demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v55) != 1)
  {
    v119 = v23;
    v62 = v165;
    (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v36, v119, v55);
LABEL_32:
    v54(v41, (os_log_t)v36, v55);
    v122 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v53, sel_setTrpId_, v122);

    (*(void (**)(char *, uint64_t))(v62 + 8))(v36, v55);
    goto LABEL_33;
  }
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
  v61 = (uint64_t)v150;
  UUID.init(uuidString:)();
  if (__swift_getEnumTagSinglePayload(v61, 1, v55) != 1)
  {
    v62 = v165;
    v36 = v147;
    (*(void (**)(char *, uint64_t, uint64_t))(v165 + 32))(v147, v61, v55);
    goto LABEL_32;
  }
  outlined destroy of RRDataSourceMetadataValue?(v61, &demangling cache variable for type metadata for UUID?);
  v62 = v165;
LABEL_33:
  v123 = (uint64_t)v158;
  v124 = v156;
  objc_msgSend(v156, sel_setEventMetadata_, v53);
  objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, v124);
  swift_unknownObjectRelease();
  if (one-time initialization token for common != -1)
    swift_once();
  v125 = type metadata accessor for Logger();
  __swift_project_value_buffer(v125, (uint64_t)static Logger.common);
  v126 = v154;
  v54(v154, v164, v55);
  outlined init with copy of UUID?(v60, v123, &demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain_n();
  v127 = Logger.logObject.getter();
  v128 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v127, (os_log_type_t)v128))
  {
    LODWORD(v164) = v128;
    v129 = v126;
    v130 = swift_slowAlloc();
    v131 = v55;
    v162 = swift_slowAlloc();
    v167[0] = v162;
    *(_DWORD *)v130 = 136315906;
    v166 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestFailed);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestFailed.Type);
    v132 = String.init<A>(describing:)();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v133, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v130 + 12) = 2080;
    v134 = UUID.uuidString.getter();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v136 = *(void (**)(char *, uint64_t))(v165 + 8);
    v136(v129, v55);
    *(_WORD *)(v130 + 22) = 2080;
    swift_bridgeObjectRetain();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, v57, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v130 + 32) = 2080;
    v137 = (uint64_t)v158;
    v138 = v151;
    outlined init with copy of UUID?((uint64_t)v158, v151, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v138, 1, v131) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v138, &demangling cache variable for type metadata for UUID?);
      v139 = 0;
      v140 = 0xE000000000000000;
    }
    else
    {
      v139 = UUID.uuidString.getter();
      v140 = v141;
      v136((char *)v138, v131);
    }
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v139, v140, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v137, &demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_1C2E0C000, v127, (os_log_type_t)v164, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v130, 0x2Au);
    v142 = v162;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v142, -1, -1);
    MEMORY[0x1C3BCB4A4](v130, -1, -1);

  }
  else
  {

    outlined destroy of RRDataSourceMetadataValue?(v123, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v126, v55);

  }
}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  unint64_t v70;
  NSObject *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  NSObject *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  id v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  id v126;
  id v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void (*v138)(char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  id v157;
  id v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169[2];

  v164 = a6;
  v165 = a4;
  v161 = a5;
  v162 = a3;
  v163 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v152 = (uint64_t)&v149 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v151 = (uint64_t)&v149 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v154 = (uint64_t)&v149 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v160 = (char *)&v149 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v153 = (char *)&v149 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v149 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v155 = (uint64_t)&v149 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v159 = (char *)&v149 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v149 - v28;
  v30 = type metadata accessor for UUID();
  v31 = *(_QWORD *)(v30 - 8);
  v166 = v30;
  v167 = v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v156 = (char *)&v149 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v150 = (char *)&v149 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v149 - v37;
  v39 = MEMORY[0x1E0C80A78](v36);
  v41 = (char *)&v149 - v40;
  v42 = MEMORY[0x1E0C80A78](v39);
  v44 = (char *)&v149 - v43;
  v45 = MEMORY[0x1E0C80A78](v42);
  v47 = (char *)&v149 - v46;
  v48 = MEMORY[0x1E0C80A78](v45);
  v50 = (char *)&v149 - v49;
  MEMORY[0x1E0C80A78](v48);
  v52 = (char *)&v149 - v51;
  static CaarFeatureLogger.map(from:)(a1);
  if (!v53)
  {
    v159 = v10;
    v160 = v29;
    if (one-time initialization token for common != -1)
      swift_once();
    v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.common);
    v66 = v166;
    v67 = v167;
    v68 = *(void (**)(char *, uint64_t, uint64_t))(v167 + 16);
    v68(v52, v163, v166);
    v68(v50, v161, v66);
    v69 = (uint64_t)v160;
    outlined init with copy of UUID?(v164, (uint64_t)v160, &demangling cache variable for type metadata for UUID?);
    v70 = v165;
    swift_bridgeObjectRetain_n();
    v71 = Logger.logObject.getter();
    v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, (os_log_type_t)v72))
    {
      LODWORD(v164) = v72;
      v73 = swift_slowAlloc();
      v163 = swift_slowAlloc();
      v169[0] = v163;
      *(_DWORD *)v73 = 136316162;
      v168 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARFeaturesGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARFeaturesGenerated.Type);
      v74 = String.init<A>(describing:)();
      v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v73 + 12) = 2080;
      v76 = UUID.uuidString.getter();
      v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v78 = *(void (**)(char *, uint64_t))(v67 + 8);
      v78(v52, v166);
      *(_WORD *)(v73 + 22) = 2080;
      swift_bridgeObjectRetain();
      v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v162, v70, v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v73 + 32) = 2080;
      v79 = UUID.uuidString.getter();
      v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v169);
      v81 = v166;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v78(v50, v81);
      *(_WORD *)(v73 + 42) = 2080;
      v83 = (uint64_t)v159;
      v82 = (uint64_t)v160;
      outlined init with copy of UUID?((uint64_t)v160, (uint64_t)v159, &demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v83, 1, v81) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v83, &demangling cache variable for type metadata for UUID?);
        v84 = 0;
        v85 = 0xE000000000000000;
      }
      else
      {
        v84 = UUID.uuidString.getter();
        v85 = v122;
        v78((char *)v83, v81);
      }
      v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RRDataSourceMetadataValue?(v82, &demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_1C2E0C000, v71, (os_log_type_t)v164, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v73, 0x34u);
      v123 = v163;
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v123, -1, -1);
      MEMORY[0x1C3BCB4A4](v73, -1, -1);
    }
    else
    {
      v102 = *(void (**)(char *, uint64_t))(v67 + 8);
      v102(v52, v66);
      swift_bridgeObjectRelease_n();
      v102(v50, v66);
      outlined destroy of RRDataSourceMetadataValue?(v69, &demangling cache variable for type metadata for UUID?);
    }
    goto LABEL_42;
  }
  v54 = v53;
  v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99360]), sel_init);
  objc_msgSend(v55, sel_setFeaturesGenerated_, v54);
  v157 = v54;
  v158 = v55;
  if (!v55)
  {
    if (one-time initialization token for common != -1)
      swift_once();
    v86 = type metadata accessor for Logger();
    __swift_project_value_buffer(v86, (uint64_t)static Logger.common);
    v88 = v166;
    v87 = v167;
    (*(void (**)(char *, uint64_t, uint64_t))(v167 + 16))(v47, v163, v166);
    v89 = (uint64_t)v159;
    outlined init with copy of UUID?(v164, (uint64_t)v159, &demangling cache variable for type metadata for UUID?);
    v90 = v165;
    swift_bridgeObjectRetain_n();
    v71 = Logger.logObject.getter();
    v91 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v71, (os_log_type_t)v91))
    {

      outlined destroy of RRDataSourceMetadataValue?(v89, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v47, v88);
LABEL_30:

      return;
    }
    LODWORD(v164) = v91;
    v92 = swift_slowAlloc();
    v163 = swift_slowAlloc();
    v169[0] = v163;
    *(_DWORD *)v92 = 136315906;
    v168 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARFeaturesGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARFeaturesGenerated.Type);
    v93 = String.init<A>(describing:)();
    v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v92 + 12) = 2080;
    v95 = UUID.uuidString.getter();
    v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v97 = *(void (**)(char *, uint64_t))(v87 + 8);
    v97(v47, v88);
    *(_WORD *)(v92 + 22) = 2080;
    swift_bridgeObjectRetain();
    v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v162, v90, v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v92 + 32) = 2080;
    v98 = (uint64_t)v159;
    v99 = v152;
    outlined init with copy of UUID?((uint64_t)v159, v152, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v99, 1, v88) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v99, &demangling cache variable for type metadata for UUID?);
      v100 = 0;
      v101 = 0xE000000000000000;
    }
    else
    {
      v100 = UUID.uuidString.getter();
      v101 = v145;
      v97((char *)v99, v88);
    }
    v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v98, &demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_1C2E0C000, v71, (os_log_type_t)v164, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v92, 0x2Au);
    v146 = v163;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v146, -1, -1);
    MEMORY[0x1C3BCB4A4](v92, -1, -1);

LABEL_42:
    return;
  }
  v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99368]), sel_init);
  if (v56)
  {
    v57 = v56;
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    v58 = v166;
    v59 = *(void (**)(char *, uint64_t, uint64_t))(v167 + 16);
    v59(v44, v163, v166);
    v60 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v57, sel_setCaarId_, v60);

    v61 = (void *)MEMORY[0x1C3BCA844](v162, v165);
    objc_msgSend(v57, sel_setResultCandidateId_, v61);

    objc_msgSend(v57, sel_setRequestId_, 0);
    if ((AFDeviceSupportsSAE() & 1) != 0)
    {
      v59(v44, v161, v58);
      v62 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v57, sel_setSubRequestId_, v62);

    }
    outlined init with copy of UUID?(v164, (uint64_t)v23, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v58) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
      v63 = (uint64_t)v153;
      v64 = v165;
      UUID.init(uuidString:)();
      if (__swift_getEnumTagSinglePayload(v63, 1, v58) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v63, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        v124 = v167;
        v125 = v150;
        (*(void (**)(char *, uint64_t, uint64_t))(v167 + 32))(v150, v63, v58);
        v59(v44, (uint64_t)v125, v58);
        v126 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v57, sel_setTrpId_, v126);

        (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v58);
      }
    }
    else
    {
      v120 = v167;
      (*(void (**)(char *, char *, uint64_t))(v167 + 32))(v38, v23, v58);
      v59(v44, (uint64_t)v38, v58);
      v121 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v57, sel_setTrpId_, v121);

      (*(void (**)(char *, uint64_t))(v120 + 8))(v38, v58);
      v64 = v165;
    }
    v127 = v158;
    objc_msgSend(v158, sel_setEventMetadata_, v57);
    objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, v127);
    swift_unknownObjectRelease();
    v128 = (uint64_t)v160;
    v129 = v156;
    if (one-time initialization token for common != -1)
      swift_once();
    v130 = type metadata accessor for Logger();
    __swift_project_value_buffer(v130, (uint64_t)static Logger.common);
    v59(v129, v163, v58);
    outlined init with copy of UUID?(v164, v128, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRetain_n();
    v131 = v58;
    v108 = Logger.logObject.getter();
    v132 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v108, (os_log_type_t)v132))
    {

      outlined destroy of RRDataSourceMetadataValue?(v128, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v167 + 8))(v129, v131);

      return;
    }
    LODWORD(v165) = v132;
    v133 = swift_slowAlloc();
    v164 = swift_slowAlloc();
    v169[0] = v164;
    *(_DWORD *)v133 = 136315906;
    v168 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARFeaturesGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARFeaturesGenerated.Type);
    v134 = String.init<A>(describing:)();
    v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v133 + 12) = 2080;
    v136 = UUID.uuidString.getter();
    v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v137, v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v138 = *(void (**)(char *, uint64_t))(v167 + 8);
    v138(v129, v131);
    *(_WORD *)(v133 + 22) = 2080;
    swift_bridgeObjectRetain();
    v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v162, v64, v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v133 + 32) = 2080;
    v139 = (uint64_t)v160;
    v140 = v154;
    outlined init with copy of UUID?((uint64_t)v160, v154, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v140, 1, v131) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v140, &demangling cache variable for type metadata for UUID?);
      v141 = 0;
      v142 = 0xE000000000000000;
    }
    else
    {
      v141 = UUID.uuidString.getter();
      v142 = v143;
      v138((char *)v140, v131);
    }
    v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v142, v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v139, &demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_1C2E0C000, v108, (os_log_type_t)v165, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v133, 0x2Au);
    v144 = v164;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v144, -1, -1);
    MEMORY[0x1C3BCB4A4](v133, -1, -1);

    goto LABEL_45;
  }
  v103 = v166;
  if (one-time initialization token for common != -1)
    swift_once();
  v104 = type metadata accessor for Logger();
  __swift_project_value_buffer(v104, (uint64_t)static Logger.common);
  v105 = v167;
  (*(void (**)(char *, uint64_t, uint64_t))(v167 + 16))(v41, v163, v103);
  v106 = v155;
  outlined init with copy of UUID?(v164, v155, &demangling cache variable for type metadata for UUID?);
  v107 = v165;
  swift_bridgeObjectRetain_n();
  v108 = Logger.logObject.getter();
  v109 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v108, (os_log_type_t)v109))
  {

    outlined destroy of RRDataSourceMetadataValue?(v106, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v41, v103);
    goto LABEL_30;
  }
  LODWORD(v164) = v109;
  v110 = swift_slowAlloc();
  v163 = swift_slowAlloc();
  v169[0] = v163;
  *(_DWORD *)v110 = 136315906;
  v168 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARFeaturesGenerated);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARFeaturesGenerated.Type);
  v111 = String.init<A>(describing:)();
  v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, v169);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v110 + 12) = 2080;
  v113 = UUID.uuidString.getter();
  v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, v169);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v115 = *(void (**)(char *, uint64_t))(v105 + 8);
  v115(v41, v103);
  *(_WORD *)(v110 + 22) = 2080;
  swift_bridgeObjectRetain();
  v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v162, v107, v169);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v110 + 32) = 2080;
  v116 = v155;
  v117 = v151;
  outlined init with copy of UUID?(v155, v151, &demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload(v117, 1, v103) == 1)
  {
    outlined destroy of RRDataSourceMetadataValue?(v117, &demangling cache variable for type metadata for UUID?);
    v118 = 0;
    v119 = 0xE000000000000000;
  }
  else
  {
    v118 = UUID.uuidString.getter();
    v119 = v147;
    v115((char *)v117, v103);
  }
  v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v119, v169);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of RRDataSourceMetadataValue?(v116, &demangling cache variable for type metadata for UUID?);
  _os_log_impl(&dword_1C2E0C000, v108, (os_log_type_t)v164, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v110, 0x2Au);
  v148 = v163;
  swift_arrayDestroy();
  MEMORY[0x1C3BCB4A4](v148, -1, -1);
  MEMORY[0x1C3BCB4A4](v110, -1, -1);

LABEL_45:
}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  void *v61;
  void (*v62)(char *, uint64_t, uint64_t);
  id v63;
  unint64_t v64;
  void *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  unint64_t v71;
  NSObject *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  NSObject *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void (*v106)(char *, uint64_t);
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  id v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  id v130;
  uint64_t v131;
  id v132;
  char *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void (*v141)(char *, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  id v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  id v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  os_log_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _OWORD v175[5];

  v170 = a2;
  v171 = a6;
  v167 = a5;
  v168 = a3;
  v169 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v153 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v156 = (uint64_t)&v153 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v155 = (uint64_t)&v153 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v159 = (uint64_t)&v153 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v166 = (char *)&v153 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v158 = (char *)&v153 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v153 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v164 = (uint64_t)&v153 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v165 = (uint64_t)&v153 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v153 - v28;
  v30 = type metadata accessor for UUID();
  v172 = *(_QWORD *)(v30 - 8);
  v31 = MEMORY[0x1E0C80A78](v30);
  v161 = (char *)&v153 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31);
  v154 = (char *)&v153 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v157 = (char *)&v153 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v160 = (char *)&v153 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v153 - v40;
  v42 = MEMORY[0x1E0C80A78](v39);
  v44 = (char *)&v153 - v43;
  v45 = MEMORY[0x1E0C80A78](v42);
  v47 = (char *)&v153 - v46;
  MEMORY[0x1E0C80A78](v45);
  v49 = (char *)&v153 - v48;
  v50 = *a1;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([RankedAction], CamModelMetadata, CAARTrialEnrollment));
  v52 = (uint64_t)a1 + *(int *)(v51 + 48);
  v53 = (_OWORD *)((char *)a1 + *(int *)(v51 + 64));
  v54 = v53[1];
  v175[0] = *v53;
  v175[1] = v54;
  v55 = v53[3];
  v175[2] = v53[2];
  v175[3] = v55;
  v56 = static CaarModelLogger.map(from:)(v50, v52, (uint64_t)v175);
  if (!v56)
  {
    v166 = v10;
    if (one-time initialization token for common != -1)
      swift_once();
    v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.common);
    v69 = v172;
    v70 = *(void (**)(char *, uint64_t, uint64_t))(v172 + 16);
    v70(v49, v170, v30);
    v70(v47, v167, v30);
    outlined init with copy of UUID?((uint64_t)v171, (uint64_t)v29, &demangling cache variable for type metadata for UUID?);
    v71 = v169;
    swift_bridgeObjectRetain_n();
    v72 = Logger.logObject.getter();
    v73 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v72, (os_log_type_t)v73))
    {
      v106 = *(void (**)(char *, uint64_t))(v69 + 8);
      v106(v49, v30);
      swift_bridgeObjectRelease_n();
      v106(v47, v30);
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v29, &demangling cache variable for type metadata for UUID?);

      return;
    }
    LODWORD(v170) = v73;
    v171 = v72;
    v74 = swift_slowAlloc();
    v165 = v30;
    v75 = v74;
    v167 = swift_slowAlloc();
    v174 = v167;
    *(_DWORD *)v75 = 136316162;
    v173 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARModelExecuted);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARModelExecuted.Type);
    v76 = String.init<A>(describing:)();
    v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 12) = 2080;
    v78 = UUID.uuidString.getter();
    v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v80 = v71;
    v81 = *(void (**)(char *, uint64_t))(v69 + 8);
    v82 = (uint64_t)v29;
    v83 = v165;
    v81(v49, v165);
    *(_WORD *)(v75 + 22) = 2080;
    swift_bridgeObjectRetain();
    v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v168, v80, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v75 + 32) = 2080;
    v84 = UUID.uuidString.getter();
    v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v81(v47, v83);
    *(_WORD *)(v75 + 42) = 2080;
    v86 = (uint64_t)v166;
    outlined init with copy of UUID?(v82, (uint64_t)v166, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v86, 1, v83) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v86, &demangling cache variable for type metadata for UUID?);
      v87 = 0;
      v88 = 0xE000000000000000;
    }
    else
    {
      v87 = UUID.uuidString.getter();
      v88 = v126;
      v81((char *)v86, v83);
    }
    v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v82, &demangling cache variable for type metadata for UUID?);
    v94 = v171;
    _os_log_impl(&dword_1C2E0C000, v171, (os_log_type_t)v170, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v75, 0x34u);
    v127 = v167;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v127, -1, -1);
    MEMORY[0x1C3BCB4A4](v75, -1, -1);
    goto LABEL_46;
  }
  v57 = v56;
  v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99360]), sel_init);
  objc_msgSend(v58, sel_setModelExecuted_, v57);
  v163 = v58;
  v162 = v57;
  if (!v58)
  {
    v89 = v30;
    if (one-time initialization token for common != -1)
      swift_once();
    v90 = type metadata accessor for Logger();
    __swift_project_value_buffer(v90, (uint64_t)static Logger.common);
    v91 = v172;
    (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v44, v170, v89);
    v92 = v165;
    outlined init with copy of UUID?((uint64_t)v171, v165, &demangling cache variable for type metadata for UUID?);
    v93 = v169;
    swift_bridgeObjectRetain_n();
    v94 = Logger.logObject.getter();
    v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, (os_log_type_t)v95))
    {
      LODWORD(v171) = v95;
      v96 = swift_slowAlloc();
      v170 = swift_slowAlloc();
      v174 = v170;
      *(_DWORD *)v96 = 136315906;
      v173 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARModelExecuted);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARModelExecuted.Type);
      v97 = String.init<A>(describing:)();
      v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, &v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v96 + 12) = 2080;
      v99 = UUID.uuidString.getter();
      v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v101 = *(void (**)(char *, uint64_t))(v91 + 8);
      v101(v44, v89);
      *(_WORD *)(v96 + 22) = 2080;
      swift_bridgeObjectRetain();
      v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v168, v93, &v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v96 + 32) = 2080;
      v102 = v165;
      v103 = v156;
      outlined init with copy of UUID?(v165, v156, &demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v103, 1, v89) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v103, &demangling cache variable for type metadata for UUID?);
        v104 = 0;
        v105 = 0xE000000000000000;
      }
      else
      {
        v104 = UUID.uuidString.getter();
        v105 = v148;
        v101((char *)v103, v89);
      }
      v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v105, &v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RRDataSourceMetadataValue?(v102, &demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_1C2E0C000, v94, (os_log_type_t)v171, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v96, 0x2Au);
      v149 = v170;
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v149, -1, -1);
      MEMORY[0x1C3BCB4A4](v96, -1, -1);
      v150 = v162;
      goto LABEL_45;
    }

    outlined destroy of RRDataSourceMetadataValue?(v92, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v44, v89);
LABEL_30:

    return;
  }
  v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99368]), sel_init);
  v60 = v30;
  if (v59)
  {
    v61 = v59;
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    v62 = *(void (**)(char *, uint64_t, uint64_t))(v172 + 16);
    v62(v41, v170, v30);
    v63 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v61, sel_setCaarId_, v63);

    v64 = v169;
    v65 = (void *)MEMORY[0x1C3BCA844](v168, v169);
    objc_msgSend(v61, sel_setResultCandidateId_, v65);

    objc_msgSend(v61, sel_setRequestId_, 0);
    if ((AFDeviceSupportsSAE() & 1) != 0)
    {
      v62(v41, v167, v30);
      v66 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v61, sel_setSubRequestId_, v66);

    }
    outlined init with copy of UUID?((uint64_t)v171, (uint64_t)v23, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v30) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
      v67 = (uint64_t)v158;
      UUID.init(uuidString:)();
      if (__swift_getEnumTagSinglePayload(v67, 1, v30) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v67, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        v128 = v172;
        v129 = v154;
        (*(void (**)(char *, uint64_t, uint64_t))(v172 + 32))(v154, v67, v60);
        v62(v41, (uint64_t)v129, v60);
        v130 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v61, sel_setTrpId_, v130);

        (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v60);
      }
    }
    else
    {
      v123 = v172;
      v124 = v157;
      (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v157, v23, v60);
      v62(v41, (uint64_t)v124, v60);
      v125 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v61, sel_setTrpId_, v125);

      (*(void (**)(char *, uint64_t))(v123 + 8))(v124, v60);
    }
    v131 = (uint64_t)v166;
    v132 = v163;
    objc_msgSend(v163, sel_setEventMetadata_, v61);
    objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, v132);
    swift_unknownObjectRelease();
    v133 = v161;
    if (one-time initialization token for common != -1)
      swift_once();
    v134 = type metadata accessor for Logger();
    __swift_project_value_buffer(v134, (uint64_t)static Logger.common);
    v62(v133, v170, v60);
    outlined init with copy of UUID?((uint64_t)v171, v131, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRetain_n();
    v94 = Logger.logObject.getter();
    v135 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v94, (os_log_type_t)v135))
    {

      outlined destroy of RRDataSourceMetadataValue?(v131, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v172 + 8))(v133, v60);

      return;
    }
    LODWORD(v171) = v135;
    v136 = swift_slowAlloc();
    v170 = swift_slowAlloc();
    v174 = v170;
    *(_DWORD *)v136 = 136315906;
    v173 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARModelExecuted);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARModelExecuted.Type);
    v137 = String.init<A>(describing:)();
    v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v137, v138, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v136 + 12) = 2080;
    v139 = UUID.uuidString.getter();
    v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v139, v140, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v141 = *(void (**)(char *, uint64_t))(v172 + 8);
    v141(v133, v60);
    *(_WORD *)(v136 + 22) = 2080;
    swift_bridgeObjectRetain();
    v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v168, v64, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v136 + 32) = 2080;
    v142 = (uint64_t)v166;
    v143 = v159;
    outlined init with copy of UUID?((uint64_t)v166, v159, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v143, 1, v60) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v143, &demangling cache variable for type metadata for UUID?);
      v144 = 0;
      v145 = 0xE000000000000000;
    }
    else
    {
      v144 = UUID.uuidString.getter();
      v145 = v146;
      v141((char *)v143, v60);
    }
    v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v144, v145, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v142, &demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_1C2E0C000, v94, (os_log_type_t)v171, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v136, 0x2Au);
    v147 = v170;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v147, -1, -1);
    MEMORY[0x1C3BCB4A4](v136, -1, -1);

    goto LABEL_44;
  }
  v107 = v169;
  if (one-time initialization token for common != -1)
    swift_once();
  v108 = type metadata accessor for Logger();
  __swift_project_value_buffer(v108, (uint64_t)static Logger.common);
  v109 = v172;
  v110 = v160;
  (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v160, v170, v30);
  v111 = v164;
  outlined init with copy of UUID?((uint64_t)v171, v164, &demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain_n();
  v94 = Logger.logObject.getter();
  v112 = v60;
  v113 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v94, (os_log_type_t)v113))
  {

    outlined destroy of RRDataSourceMetadataValue?(v111, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v60);
    goto LABEL_30;
  }
  LODWORD(v171) = v113;
  v114 = swift_slowAlloc();
  v170 = swift_slowAlloc();
  v174 = v170;
  *(_DWORD *)v114 = 136315906;
  v173 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARModelExecuted);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARModelExecuted.Type);
  v115 = String.init<A>(describing:)();
  v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, &v174);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v114 + 12) = 2080;
  v117 = UUID.uuidString.getter();
  v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v118, &v174);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v119 = *(void (**)(char *, uint64_t))(v109 + 8);
  v119(v110, v60);
  *(_WORD *)(v114 + 22) = 2080;
  swift_bridgeObjectRetain();
  v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v168, v107, &v174);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v114 + 32) = 2080;
  v120 = v155;
  outlined init with copy of UUID?(v164, v155, &demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload(v120, 1, v112) == 1)
  {
    outlined destroy of RRDataSourceMetadataValue?(v120, &demangling cache variable for type metadata for UUID?);
    v121 = 0;
    v122 = 0xE000000000000000;
  }
  else
  {
    v121 = UUID.uuidString.getter();
    v122 = v151;
    v119((char *)v120, v112);
  }
  v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v121, v122, &v174);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of RRDataSourceMetadataValue?(v164, &demangling cache variable for type metadata for UUID?);
  _os_log_impl(&dword_1C2E0C000, v94, (os_log_type_t)v171, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v114, 0x2Au);
  v152 = v170;
  swift_arrayDestroy();
  MEMORY[0x1C3BCB4A4](v152, -1, -1);
  MEMORY[0x1C3BCB4A4](v114, -1, -1);

LABEL_44:
  v150 = v163;
LABEL_45:

LABEL_46:
}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  id v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id v56;
  id v57;
  uint64_t v58;
  void *v59;
  void (*v60)(char *, uint64_t, uint64_t);
  id v61;
  void *v62;
  id v63;
  int EnumTagSinglePayload;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  unint64_t v73;
  NSObject *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  id v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  id v131;
  id v132;
  uint64_t v133;
  char *v134;
  NSObject *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void (*v142)(char *, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  os_log_t v148;
  unint64_t v149;
  os_log_t v150;
  unint64_t v151;
  os_log_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  id v161;
  id v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  os_log_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173[2];

  v168 = a6;
  v169 = a4;
  v165 = a5;
  v166 = a3;
  v167 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v153 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v155 = (uint64_t)&v153 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v154 = (uint64_t)&v153 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v157 = (uint64_t)&v153 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v164 = (char *)&v153 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v156 = (char *)&v153 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v153 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v159 = (uint64_t)&v153 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v163 = (char *)&v153 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v153 - v28;
  v30 = type metadata accessor for UUID();
  v31 = *(_QWORD *)(v30 - 8);
  v170 = v30;
  v171 = v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v160 = (char *)&v153 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v153 = (char *)&v153 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v153 - v37;
  v39 = MEMORY[0x1E0C80A78](v36);
  v158 = (char *)&v153 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v43 = (char *)&v153 - v42;
  v44 = MEMORY[0x1E0C80A78](v41);
  v46 = (char *)&v153 - v45;
  v47 = MEMORY[0x1E0C80A78](v44);
  v49 = (char *)&v153 - v48;
  MEMORY[0x1E0C80A78](v47);
  v51 = (char *)&v153 - v50;
  v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993B8]), sel_init);
  if (v52)
  {
    v53 = v52;
    v54 = a1;
    v55 = v53;
    outlined bridged method (mbgnn) of @objc CAARSchemaCAARTieBreakersExecuted.tiebreakers.setter(v54, v53);
    v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99360]), sel_init);
    v161 = v55;
    objc_msgSend(v56, sel_setTieBreakersExecuted_, v55);
    v162 = v56;
    if (v56)
    {
      v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99368]), sel_init);
      v58 = v170;
      if (v57)
      {
        v59 = v57;
        type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        v60 = *(void (**)(char *, uint64_t, uint64_t))(v171 + 16);
        v60(v43, v167, v58);
        v61 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v59, sel_setCaarId_, v61);

        v62 = (void *)MEMORY[0x1C3BCA844](v166, v169);
        objc_msgSend(v59, sel_setResultCandidateId_, v62);

        objc_msgSend(v59, sel_setRequestId_, 0);
        if ((AFDeviceSupportsSAE() & 1) != 0)
        {
          v60(v43, v165, v58);
          v63 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v59, sel_setSubRequestId_, v63);

        }
        outlined init with copy of UUID?((uint64_t)v168, (uint64_t)v23, &demangling cache variable for type metadata for UUID?);
        EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v58);
        v65 = (uint64_t)v164;
        if (EnumTagSinglePayload == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
          v66 = (uint64_t)v156;
          v67 = v169;
          UUID.init(uuidString:)();
          if (__swift_getEnumTagSinglePayload(v66, 1, v58) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v66, &demangling cache variable for type metadata for UUID?);
          }
          else
          {
            v129 = v171;
            v130 = v153;
            (*(void (**)(char *, uint64_t, uint64_t))(v171 + 32))(v153, v66, v58);
            v60(v43, (uint64_t)v130, v58);
            v131 = SISchemaUUID.__allocating_init(nsuuid:)();
            objc_msgSend(v59, sel_setTrpId_, v131);

            (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v58);
          }
        }
        else
        {
          v125 = v171;
          (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v38, v23, v58);
          v60(v43, (uint64_t)v38, v58);
          v126 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v59, sel_setTrpId_, v126);

          (*(void (**)(char *, uint64_t))(v125 + 8))(v38, v58);
          v67 = v169;
        }
        v132 = v162;
        objc_msgSend(v162, sel_setEventMetadata_, v59);
        objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, v132);
        swift_unknownObjectRelease();
        if (one-time initialization token for common != -1)
          swift_once();
        v133 = type metadata accessor for Logger();
        __swift_project_value_buffer(v133, (uint64_t)static Logger.common);
        v134 = v160;
        v60(v160, v167, v58);
        outlined init with copy of UUID?((uint64_t)v168, v65, &demangling cache variable for type metadata for UUID?);
        swift_bridgeObjectRetain_n();
        v135 = Logger.logObject.getter();
        v136 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v135, (os_log_type_t)v136))
        {
          LODWORD(v169) = v136;
          v137 = swift_slowAlloc();
          v168 = (os_log_t)swift_slowAlloc();
          v173[0] = (uint64_t)v168;
          *(_DWORD *)v137 = 136315906;
          v172 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted.Type);
          v138 = String.init<A>(describing:)();
          v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v139, v173);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v137 + 12) = 2080;
          v140 = UUID.uuidString.getter();
          v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, v173);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v142 = *(void (**)(char *, uint64_t))(v171 + 8);
          v142(v134, v58);
          *(_WORD *)(v137 + 22) = 2080;
          swift_bridgeObjectRetain();
          v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, v67, v173);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v143 = (uint64_t)v164;
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v137 + 32) = 2080;
          v144 = v157;
          outlined init with copy of UUID?(v143, v157, &demangling cache variable for type metadata for UUID?);
          if (__swift_getEnumTagSinglePayload(v144, 1, v58) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v144, &demangling cache variable for type metadata for UUID?);
            v145 = 0;
            v146 = 0xE000000000000000;
          }
          else
          {
            v145 = UUID.uuidString.getter();
            v146 = v147;
            v142((char *)v144, v58);
          }
          v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v145, v146, v173);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of RRDataSourceMetadataValue?(v143, &demangling cache variable for type metadata for UUID?);
          _os_log_impl(&dword_1C2E0C000, v135, (os_log_type_t)v169, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v137, 0x2Au);
          v148 = v168;
          swift_arrayDestroy();
          MEMORY[0x1C3BCB4A4](v148, -1, -1);
          MEMORY[0x1C3BCB4A4](v137, -1, -1);

        }
        else
        {

          outlined destroy of RRDataSourceMetadataValue?(v65, &demangling cache variable for type metadata for UUID?);
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v171 + 8))(v134, v58);

        }
        return;
      }
      v107 = v171;
      if (one-time initialization token for common != -1)
        swift_once();
      v108 = type metadata accessor for Logger();
      __swift_project_value_buffer(v108, (uint64_t)static Logger.common);
      v109 = v158;
      (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v158, v167, v58);
      v110 = v159;
      outlined init with copy of UUID?((uint64_t)v168, v159, &demangling cache variable for type metadata for UUID?);
      v111 = v169;
      swift_bridgeObjectRetain_n();
      v112 = Logger.logObject.getter();
      v113 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v112, v113))
      {
        v114 = swift_slowAlloc();
        v168 = (os_log_t)swift_slowAlloc();
        v173[0] = (uint64_t)v168;
        *(_DWORD *)v114 = 136315906;
        v172 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted.Type);
        v115 = String.init<A>(describing:)();
        v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, v173);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v114 + 12) = 2080;
        v117 = UUID.uuidString.getter();
        v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v118, v173);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v119 = *(void (**)(char *, uint64_t))(v107 + 8);
        v120 = v159;
        v119(v109, v170);
        *(_WORD *)(v114 + 22) = 2080;
        swift_bridgeObjectRetain();
        v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, v111, v173);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v114 + 32) = 2080;
        v121 = v170;
        v122 = v154;
        outlined init with copy of UUID?(v120, v154, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v122, 1, v121) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v122, &demangling cache variable for type metadata for UUID?);
          v123 = 0;
          v124 = 0xE000000000000000;
        }
        else
        {
          v123 = UUID.uuidString.getter();
          v124 = v151;
          v119((char *)v122, v121);
        }
        v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v124, v173);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v120, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C2E0C000, v112, v113, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v114, 0x2Au);
        v152 = v168;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v152, -1, -1);
        MEMORY[0x1C3BCB4A4](v114, -1, -1);

        return;
      }

      outlined destroy of RRDataSourceMetadataValue?(v110, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v58);
    }
    else
    {
      v88 = v170;
      if (one-time initialization token for common != -1)
        swift_once();
      v89 = type metadata accessor for Logger();
      __swift_project_value_buffer(v89, (uint64_t)static Logger.common);
      v90 = v171;
      (*(void (**)(char *, uint64_t, uint64_t))(v171 + 16))(v46, v167, v88);
      v91 = (uint64_t)v163;
      outlined init with copy of UUID?((uint64_t)v168, (uint64_t)v163, &demangling cache variable for type metadata for UUID?);
      v92 = v169;
      swift_bridgeObjectRetain_n();
      v93 = Logger.logObject.getter();
      v94 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v93, v94))
      {
        v95 = swift_slowAlloc();
        v168 = (os_log_t)swift_slowAlloc();
        v173[0] = (uint64_t)v168;
        *(_DWORD *)v95 = 136315906;
        v172 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted.Type);
        v96 = String.init<A>(describing:)();
        v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v173);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v95 + 12) = 2080;
        v98 = UUID.uuidString.getter();
        v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, v173);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v100 = *(void (**)(char *, uint64_t))(v90 + 8);
        v100(v46, v170);
        *(_WORD *)(v95 + 22) = 2080;
        swift_bridgeObjectRetain();
        v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, v92, v173);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v95 + 32) = 2080;
        v101 = (uint64_t)v163;
        v102 = v170;
        v103 = v155;
        outlined init with copy of UUID?((uint64_t)v163, v155, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v103, 1, v102) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v103, &demangling cache variable for type metadata for UUID?);
          v104 = 0;
          v105 = 0xE000000000000000;
        }
        else
        {
          v104 = UUID.uuidString.getter();
          v105 = v149;
          v100((char *)v103, v102);
        }
        v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v105, v173);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v101, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C2E0C000, v93, v94, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v95, 0x2Au);
        v150 = v168;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v150, -1, -1);
        MEMORY[0x1C3BCB4A4](v95, -1, -1);

        return;
      }

      outlined destroy of RRDataSourceMetadataValue?(v91, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v90 + 8))(v46, v88);
    }

    return;
  }
  v163 = v10;
  v164 = v29;
  if (one-time initialization token for common != -1)
    swift_once();
  v68 = type metadata accessor for Logger();
  __swift_project_value_buffer(v68, (uint64_t)static Logger.common);
  v69 = v170;
  v70 = v171;
  v71 = *(void (**)(char *, uint64_t, uint64_t))(v171 + 16);
  v71(v51, v167, v170);
  v71(v49, v165, v69);
  v72 = (uint64_t)v164;
  outlined init with copy of UUID?((uint64_t)v168, (uint64_t)v164, &demangling cache variable for type metadata for UUID?);
  v73 = v169;
  swift_bridgeObjectRetain_n();
  v74 = Logger.logObject.getter();
  v75 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v74, (os_log_type_t)v75))
  {
    LODWORD(v167) = v75;
    v168 = v74;
    v76 = swift_slowAlloc();
    v165 = swift_slowAlloc();
    v173[0] = v165;
    *(_DWORD *)v76 = 136316162;
    v172 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted.Type);
    v77 = String.init<A>(describing:)();
    v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v76 + 12) = 2080;
    v79 = UUID.uuidString.getter();
    v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v81 = *(void (**)(char *, uint64_t))(v70 + 8);
    v81(v51, v69);
    *(_WORD *)(v76 + 22) = 2080;
    swift_bridgeObjectRetain();
    v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, v73, v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v76 + 32) = 2080;
    v82 = UUID.uuidString.getter();
    v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v81(v49, v69);
    *(_WORD *)(v76 + 42) = 2080;
    v85 = (uint64_t)v163;
    v84 = (uint64_t)v164;
    outlined init with copy of UUID?((uint64_t)v164, (uint64_t)v163, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v85, 1, v69) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v85, &demangling cache variable for type metadata for UUID?);
      v86 = 0;
      v87 = 0xE000000000000000;
    }
    else
    {
      v86 = UUID.uuidString.getter();
      v87 = v127;
      v81((char *)v85, v69);
    }
    v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v84, &demangling cache variable for type metadata for UUID?);
    v74 = v168;
    _os_log_impl(&dword_1C2E0C000, v168, (os_log_type_t)v167, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v76, 0x34u);
    v128 = v165;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v128, -1, -1);
    MEMORY[0x1C3BCB4A4](v76, -1, -1);
  }
  else
  {
    v106 = *(void (**)(char *, uint64_t))(v70 + 8);
    v106(v51, v69);
    swift_bridgeObjectRelease_n();
    v106(v49, v69);
    outlined destroy of RRDataSourceMetadataValue?(v72, &demangling cache variable for type metadata for UUID?);
  }

}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(uint64_t a1, NSObject *a2, uint64_t a3, NSObject *a4, NSObject *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  os_log_t v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  char *v68;
  id v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  int EnumTagSinglePayload;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, os_log_t, uint64_t);
  uint64_t v79;
  os_log_t v80;
  NSObject *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  NSObject *v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  char *v117;
  uint64_t v118;
  NSObject *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  id v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  id v139;
  char *v140;
  uint64_t v141;
  char *v142;
  NSObject *v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  os_log_t v160;
  unint64_t v161;
  char *v162;
  os_log_type_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  NSObject *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  os_log_t v183;
  os_log_t v184;
  uint64_t v185;
  char *v186;
  NSObject *v187;
  uint64_t v188;
  uint64_t v189[2];

  v182 = a6;
  v183 = a2;
  v178 = a5;
  v184 = a4;
  v180 = a3;
  v181 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v169 = (uint64_t)&v165 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v168 = (uint64_t)&v165 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v165 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v165 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v171 = (char *)&v165 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v175 = (uint64_t)&v165 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v173 = (uint64_t)&v165 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v177 = (uint64_t)&v165 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = ((char *)&v165 - v28);
  v30 = type metadata accessor for UUID();
  v185 = *(_QWORD *)(v30 - 8);
  v31 = MEMORY[0x1E0C80A78](v30);
  v176 = (char *)&v165 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31);
  v167 = (char *)&v165 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v170 = (char *)&v165 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v172 = (char *)&v165 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v174 = (char *)&v165 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v43 = (char *)&v165 - v42;
  v44 = MEMORY[0x1E0C80A78](v41);
  v46 = (char *)&v165 - v45;
  MEMORY[0x1E0C80A78](v44);
  v179 = (char *)&v165 - v47;
  v48 = type metadata accessor for RankedAction();
  v49 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v51 = (char *)&v165 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993A0]), sel_init);
  if (!v52)
  {
    v186 = v9;
    v187 = v29;
    if (one-time initialization token for common != -1)
      swift_once();
    v76 = type metadata accessor for Logger();
    __swift_project_value_buffer(v76, (uint64_t)static Logger.common);
    v77 = v185;
    v78 = *(void (**)(char *, os_log_t, uint64_t))(v185 + 16);
    v78(v46, v183, v30);
    v78(v43, v178, v30);
    v79 = (uint64_t)v187;
    outlined init with copy of UUID?(v182, (uint64_t)v187, &demangling cache variable for type metadata for UUID?);
    v80 = v184;
    swift_bridgeObjectRetain_n();
    v81 = Logger.logObject.getter();
    v82 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v81, (os_log_type_t)v82))
    {
      v115 = *(void (**)(char *, uint64_t))(v77 + 8);
      v115(v46, v30);
      swift_bridgeObjectRelease_n();
      v115(v43, v30);
      outlined destroy of RRDataSourceMetadataValue?(v79, &demangling cache variable for type metadata for UUID?);

      return;
    }
    LODWORD(v182) = v82;
    v183 = v81;
    v83 = swift_slowAlloc();
    v181 = swift_slowAlloc();
    v189[0] = v181;
    *(_DWORD *)v83 = 136316162;
    v188 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARResponseGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARResponseGenerated.Type);
    v84 = String.init<A>(describing:)();
    v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v83 + 12) = 2080;
    v86 = UUID.uuidString.getter();
    v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v88 = v30;
    v89 = *(void (**)(char *, uint64_t))(v77 + 8);
    v89(v46, v88);
    *(_WORD *)(v83 + 22) = 2080;
    swift_bridgeObjectRetain();
    v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, (unint64_t)v80, v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v83 + 32) = 2080;
    v90 = UUID.uuidString.getter();
    v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v189);
    v92 = (uint64_t)v187;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v89(v43, v88);
    *(_WORD *)(v83 + 42) = 2080;
    v93 = (uint64_t)v186;
    outlined init with copy of UUID?(v92, (uint64_t)v186, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v93, 1, v88) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v93, &demangling cache variable for type metadata for UUID?);
      v94 = 0;
      v95 = 0xE000000000000000;
    }
    else
    {
      v94 = UUID.uuidString.getter();
      v95 = v134;
      v89((char *)v93, v88);
    }
    v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v92, &demangling cache variable for type metadata for UUID?);
    v56 = v183;
    _os_log_impl(&dword_1C2E0C000, v183, (os_log_type_t)v182, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v83, 0x34u);
    v135 = v181;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v135, -1, -1);
    MEMORY[0x1C3BCB4A4](v83, -1, -1);
    goto LABEL_47;
  }
  v165 = v16;
  v166 = v19;
  v53 = v181;
  v54 = *(_QWORD *)(v181 + 16);
  v55 = v184;
  v56 = v52;
  v187 = v52;
  if (v54)
  {
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    v186 = &v51[*(int *)(v48 + 36)];
    v57 = v53 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    v58 = *(_QWORD *)(v49 + 72);
    swift_bridgeObjectRetain();
    v59 = v185;
    v60 = v179;
    do
    {
      outlined init with copy of RankedAction(v57, (uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v60, v186, v30);
      outlined destroy of CamParse((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      v61 = SISchemaUUID.__allocating_init(nsuuid:)();
      -[NSObject addActionCandidateIds:](v187, sel_addActionCandidateIds_, v61);

      v57 += v58;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
    v56 = v187;
    v55 = v184;
  }
  v62 = static CaarResponseLogger.wrapIntoLogEvent(message:)((uint64_t)v56);
  if (v62)
  {
    v63 = v62;
    v64 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99368]), sel_init);
    v65 = v185;
    v66 = v182;
    if (v64)
    {
      v67 = v64;
      type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
      v68 = v179;
      v186 = *(char **)(v65 + 16);
      ((void (*)(char *, os_log_t, uint64_t))v186)(v179, v183, v30);
      v69 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v67, sel_setCaarId_, v69);

      v70 = (void *)MEMORY[0x1C3BCA844](v180, v55);
      objc_msgSend(v67, sel_setResultCandidateId_, v70);

      objc_msgSend(v67, sel_setRequestId_, 0);
      if ((AFDeviceSupportsSAE() & 1) != 0)
      {
        ((void (*)(char *, NSObject *, uint64_t))v186)(v68, v178, v30);
        v71 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v67, sel_setSubRequestId_, v71);

      }
      v72 = v175;
      outlined init with copy of UUID?(v66, v175, &demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v72, 1, v30) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v72, &demangling cache variable for type metadata for UUID?);
        v73 = (uint64_t)v171;
        UUID.init(uuidString:)();
        EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v73, 1, v30);
        v75 = (uint64_t)v166;
        if (EnumTagSinglePayload == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v73, &demangling cache variable for type metadata for UUID?);
        }
        else
        {
          v136 = v73;
          v137 = v185;
          v138 = v167;
          (*(void (**)(char *, uint64_t, uint64_t))(v185 + 32))(v167, v136, v30);
          ((void (*)(char *, char *, uint64_t))v186)(v179, v138, v30);
          v139 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v67, sel_setTrpId_, v139);

          v140 = v138;
          v66 = v182;
          (*(void (**)(char *, uint64_t))(v137 + 8))(v140, v30);
        }
      }
      else
      {
        v132 = v170;
        (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v170, v72, v30);
        ((void (*)(char *, char *, uint64_t))v186)(v179, v132, v30);
        v133 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v67, sel_setTrpId_, v133);

        (*(void (**)(char *, uint64_t))(v65 + 8))(v132, v30);
        v75 = (uint64_t)v166;
      }
      objc_msgSend(v63, sel_setEventMetadata_, v67, v165);
      objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, v63);
      swift_unknownObjectRelease();
      if (one-time initialization token for common != -1)
        swift_once();
      v141 = type metadata accessor for Logger();
      __swift_project_value_buffer(v141, (uint64_t)static Logger.common);
      v142 = v176;
      ((void (*)(char *, os_log_t, uint64_t))v186)(v176, v183, v30);
      outlined init with copy of UUID?(v66, v75, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRetain_n();
      v143 = Logger.logObject.getter();
      v144 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v143, (os_log_type_t)v144))
      {

        outlined destroy of RRDataSourceMetadataValue?(v75, &demangling cache variable for type metadata for UUID?);
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v185 + 8))(v142, v30);

        return;
      }
      LODWORD(v183) = v144;
      v184 = v143;
      v186 = (char *)v63;
      v145 = (unint64_t)v55;
      v146 = swift_slowAlloc();
      v182 = swift_slowAlloc();
      v189[0] = v182;
      *(_DWORD *)v146 = 136315906;
      v188 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARResponseGenerated.Type);
      v147 = String.init<A>(describing:)();
      v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v147, v148, v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v146 + 12) = 2080;
      v149 = UUID.uuidString.getter();
      v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v150, v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v151 = v30;
      v152 = *(void (**)(char *, uint64_t))(v185 + 8);
      v152(v142, v151);
      *(_WORD *)(v146 + 22) = 2080;
      swift_bridgeObjectRetain();
      v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, v145, v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v146 + 32) = 2080;
      v153 = (uint64_t)v166;
      v154 = (uint64_t)v165;
      outlined init with copy of UUID?((uint64_t)v166, (uint64_t)v165, &demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v154, 1, v151) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v154, &demangling cache variable for type metadata for UUID?);
        v155 = 0;
        v156 = 0xE000000000000000;
      }
      else
      {
        v155 = UUID.uuidString.getter();
        v156 = v157;
        v152((char *)v154, v151);
      }
      v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v156, v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RRDataSourceMetadataValue?(v153, &demangling cache variable for type metadata for UUID?);
      v56 = v184;
      _os_log_impl(&dword_1C2E0C000, v184, (os_log_type_t)v183, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v146, 0x2Au);
      v158 = v182;
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v158, -1, -1);
      MEMORY[0x1C3BCB4A4](v146, -1, -1);

    }
    else
    {
      if (one-time initialization token for common != -1)
        swift_once();
      v116 = type metadata accessor for Logger();
      __swift_project_value_buffer(v116, (uint64_t)static Logger.common);
      v117 = v172;
      (*(void (**)(char *, os_log_t, uint64_t))(v65 + 16))(v172, v183, v30);
      v118 = v173;
      outlined init with copy of UUID?(v66, v173, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRetain_n();
      v119 = Logger.logObject.getter();
      v120 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v119, (os_log_type_t)v120))
      {
        LODWORD(v183) = v120;
        v184 = v119;
        v186 = (char *)v63;
        v121 = swift_slowAlloc();
        v182 = swift_slowAlloc();
        v189[0] = v182;
        *(_DWORD *)v121 = 136315906;
        v188 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARResponseGenerated);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARResponseGenerated.Type);
        v122 = String.init<A>(describing:)();
        v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v121 + 12) = 2080;
        v124 = UUID.uuidString.getter();
        v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v125, v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v126 = v30;
        v127 = *(void (**)(char *, uint64_t))(v65 + 8);
        v128 = v173;
        v127(v117, v126);
        *(_WORD *)(v121 + 22) = 2080;
        swift_bridgeObjectRetain();
        v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, (unint64_t)v55, v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v121 + 32) = 2080;
        v129 = v168;
        outlined init with copy of UUID?(v128, v168, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v129, 1, v126) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v129, &demangling cache variable for type metadata for UUID?);
          v130 = 0;
          v131 = 0xE000000000000000;
        }
        else
        {
          v130 = UUID.uuidString.getter();
          v131 = v161;
          v127((char *)v129, v126);
        }
        v162 = v186;
        v163 = v183;
        v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v131, v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v128, &demangling cache variable for type metadata for UUID?);
        v56 = v184;
        _os_log_impl(&dword_1C2E0C000, v184, v163, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v121, 0x2Au);
        v164 = v182;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v164, -1, -1);
        MEMORY[0x1C3BCB4A4](v121, -1, -1);

      }
      else
      {

        outlined destroy of RRDataSourceMetadataValue?(v118, &demangling cache variable for type metadata for UUID?);
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v65 + 8))(v117, v30);
      }
    }
    goto LABEL_47;
  }
  v96 = v185;
  v97 = v182;
  if (one-time initialization token for common != -1)
    swift_once();
  v98 = type metadata accessor for Logger();
  __swift_project_value_buffer(v98, (uint64_t)static Logger.common);
  v99 = v174;
  (*(void (**)(char *, os_log_t, uint64_t))(v96 + 16))(v174, v183, v30);
  v100 = v177;
  outlined init with copy of UUID?(v97, v177, &demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain_n();
  v101 = Logger.logObject.getter();
  v102 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v101, (os_log_type_t)v102))
  {

    outlined destroy of RRDataSourceMetadataValue?(v100, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v99, v30);
LABEL_47:

    return;
  }
  LODWORD(v186) = v102;
  v103 = (unint64_t)v55;
  v104 = swift_slowAlloc();
  v184 = (os_log_t)swift_slowAlloc();
  v189[0] = (uint64_t)v184;
  *(_DWORD *)v104 = 136315906;
  v188 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARResponseGenerated);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARResponseGenerated.Type);
  v105 = String.init<A>(describing:)();
  v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, v189);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v104 + 12) = 2080;
  v107 = UUID.uuidString.getter();
  v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, v189);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v109 = v30;
  v110 = *(void (**)(char *, uint64_t))(v185 + 8);
  v110(v99, v109);
  *(_WORD *)(v104 + 22) = 2080;
  swift_bridgeObjectRetain();
  v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, v103, v189);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v111 = v177;
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v104 + 32) = 2080;
  v112 = v169;
  outlined init with copy of UUID?(v111, v169, &demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload(v112, 1, v109) == 1)
  {
    outlined destroy of RRDataSourceMetadataValue?(v112, &demangling cache variable for type metadata for UUID?);
    v113 = 0;
    v114 = 0xE000000000000000;
  }
  else
  {
    v113 = UUID.uuidString.getter();
    v114 = v159;
    v110((char *)v112, v109);
  }
  v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, v189);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of RRDataSourceMetadataValue?(v111, &demangling cache variable for type metadata for UUID?);
  _os_log_impl(&dword_1C2E0C000, v101, (os_log_type_t)v186, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v104, 0x2Au);
  v160 = v184;
  swift_arrayDestroy();
  MEMORY[0x1C3BCB4A4](v160, -1, -1);
  MEMORY[0x1C3BCB4A4](v104, -1, -1);

}

void closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a4;
  v8 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v8 - 8);
  v20 = v8;
  MEMORY[0x1E0C80A78](v8);
  v21 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CamParse(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a3[5];
  v14 = a3[6];
  __swift_project_boxed_opaque_existential_1(a3 + 2, v13);
  v15 = type metadata accessor for ActionCandidate();
  v16 = a1 + *(int *)(v15 + 32);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8);
  v23 = a2;
  v17(a2, v16, v13, v14);
  if (!v4)
  {
    outlined init with copy of RankedAction(a1 + *(int *)(v15 + 20), (uint64_t)v12, type metadata accessor for CamParse);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v16, v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    RankedAction.init(flowHandlerId:parse:score:loggingId:features:alternatives:userData:)();
  }
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay7SiriCam15ActionCandidateVGSaySDySSSo14MLFeatureValueCGGG_AH06RankedH0VsAE_pTg503_s7f5Cam15hi10VSDySSSo14jk6CGAA06l5C0Vs5C33_pIgngrzo_AC_AFtAHsAI_pIegnrzr_TRAjnRsAE_pIgngrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v57 = a3;
  v58 = a4;
  v6 = type metadata accessor for RankedAction();
  v55 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v62 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v52 = (uint64_t)&v48 - v9;
  v10 = type metadata accessor for ActionCandidate();
  v59 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v51 = (uint64_t)&v48 - v14;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ActionCandidate, [String : MLFeatureValue]));
  v15 = MEMORY[0x1E0C80A78](v56);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v50 = (uint64_t)&v48 - v19;
  MEMORY[0x1E0C80A78](v18);
  v49 = (uint64_t)&v48 - v20;
  v21 = *(_QWORD *)(a1 + 16);
  v60 = *(_QWORD *)(a2 + 16);
  v61 = v21;
  if (v60 >= v21)
    v22 = v21;
  else
    v22 = v60;
  v64 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
  v54 = v22;
  if (v22)
  {
    v23 = v64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = 0;
    v53 = a1;
    v25 = v61;
    while (v25 != v24)
    {
      outlined init with copy of RankedAction(a1+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v24, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ActionCandidate);
      if (v60 == v24)
        goto LABEL_33;
      v26 = a2;
      v27 = *(_QWORD *)(a2 + 8 * v24 + 32);
      v28 = *(int *)(v56 + 48);
      outlined init with take of CamModelMetadata((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ActionCandidate);
      *(_QWORD *)&v17[v28] = v27;
      swift_bridgeObjectRetain();
      v29 = v63;
      v57(v17, v27);
      if (v29)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v17, &demangling cache variable for type metadata for (ActionCandidate, [String : MLFeatureValue]));
        return;
      }
      v63 = 0;
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v17, &demangling cache variable for type metadata for (ActionCandidate, [String : MLFeatureValue]));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v64;
      }
      v25 = v61;
      v31 = *(_QWORD *)(v23 + 16);
      v30 = *(_QWORD *)(v23 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v25 = v61;
        v23 = v64;
      }
      ++v24;
      *(_QWORD *)(v23 + 16) = v31 + 1;
      outlined init with take of CamModelMetadata(v62, v23+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(_QWORD *)(v55 + 72) * v31, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      a1 = v53;
      a2 = v26;
      if (v54 == v24)
        goto LABEL_16;
    }
    __break(1u);
LABEL_33:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = v61;
LABEL_16:
    v32 = v60;
    v33 = a2;
    if (v25 <= v60)
    {
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v34 = v54;
    v35 = v56;
    while (v34 < v25)
    {
      v36 = v51;
      outlined init with copy of RankedAction(a1+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v34, v51, (uint64_t (*)(_QWORD))type metadata accessor for ActionCandidate);
      if (v32 == v34)
      {
        outlined destroy of CamParse(v36, (uint64_t (*)(_QWORD))type metadata accessor for ActionCandidate);
        goto LABEL_30;
      }
      if (v34 >= v32)
        goto LABEL_35;
      v37 = *(_QWORD *)(v33 + 8 * v34 + 32);
      v38 = *(int *)(v35 + 48);
      v39 = v36;
      v40 = v50;
      outlined init with take of CamModelMetadata(v39, v50, (uint64_t (*)(_QWORD))type metadata accessor for ActionCandidate);
      *(_QWORD *)(v40 + v38) = v37;
      v41 = v49;
      outlined init with take of (UUID, [String : MLFeatureValue])(v40, v49, &demangling cache variable for type metadata for (ActionCandidate, [String : MLFeatureValue]));
      v42 = *(_QWORD *)(v41 + *(int *)(v35 + 48));
      swift_bridgeObjectRetain();
      v43 = v42;
      v44 = v63;
      v57((char *)v41, v43);
      outlined destroy of RRDataSourceMetadataValue?(v41, &demangling cache variable for type metadata for (ActionCandidate, [String : MLFeatureValue]));
      if (v44)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      v63 = 0;
      v45 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1);
        v45 = v64;
      }
      v47 = *(_QWORD *)(v45 + 16);
      v46 = *(_QWORD *)(v45 + 24);
      if (v47 >= v46 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
        v45 = v64;
      }
      ++v34;
      *(_QWORD *)(v45 + 16) = v47 + 1;
      outlined init with take of CamModelMetadata(v52, v45+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(_QWORD *)(v55 + 72) * v47, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      v32 = v60;
      v25 = v61;
      if (v61 == v34)
        goto LABEL_30;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;

  OUTLINED_FUNCTION_3_12();
  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = a2(v4);
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)();
  *a1 = v4;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[2];

  v4 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v4 = v5;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  swift_retain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2 & 1);
  *a1 = v4;
  return swift_release_n();
}

uint64_t closure #3 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, NSObject *a7, uint64_t a8)
{
  uint64_t v14;

  swift_beginAccess();
  v14 = swift_bridgeObjectRetain();
  CodeBasedRankerHandler.postRankLogging(rankedActions:caarId:rcId:requestId:trpId:shadowLog:tieBreakersExecuted:)(v14, a3, a4, a5, a6, a7, 0, a8);
  return swift_bridgeObjectRelease();
}

uint64_t closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, NSObject *a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v17;

  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 16);
  type metadata accessor for SiriSignalsContainer();
  v15 = swift_allocObject();
  type metadata accessor for SignalValue();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v15 + 16) = Dictionary.init(dictionaryLiteral:)();
  SiriSignalsContainer.refreshSignals()();
  swift_retain();
  specialized CodeBasedRankerHandler.extractUserHistoryFeatures(rankedActions:siriSignalsContainer:)(&v17, v15);
  specialized CodeBasedRankerHandler.extractDisambiguationFeatures(rankedActions:siriSignalsContainer:)(&v17, v15);
  swift_release();
  CodeBasedRankerHandler.postRankLogging(rankedActions:caarId:rcId:requestId:trpId:shadowLog:tieBreakersExecuted:)(v17, a3, a4, a5, a6, a7, 0, a8);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v39[7];
  uint64_t v40;

  if (one-time initialization token for ranker != -1)
    swift_once();
  v9 = OUTLINED_FUNCTION_14_1();
  v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.ranker);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1C2E0C000, v11, v12, "Ranking parses in CAAR", v13, 2u);
    OUTLINED_FUNCTION_3();
  }

  MEMORY[0x1E0C80A78](v14);
  v39[2] = a7;
  v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam0E5ParseOG_Sds5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:), (uint64_t)v39, a6);
  swift_bridgeObjectRetain_n();
  v39[5] = v10;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)OUTLINED_FUNCTION_4();
    v19 = OUTLINED_FUNCTION_4();
    v39[4] = a6;
    v40 = v19;
    *(_DWORD *)v18 = 136315138;
    v20 = OUTLINED_FUNCTION_2();
    v21 = MEMORY[0x1C3BCA9B8](v20, MEMORY[0x1E0DEB070]);
    v23 = v22;
    OUTLINED_FUNCTION_1_0();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v40);
    OUTLINED_FUNCTION_71(v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_1_10();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2E0C000, v16, v17, "Ranking generated scores %s", v18, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_1_10();
  swift_getKeyPath();
  OUTLINED_FUNCTION_2();
  swift_retain();
  v25 = specialized _copySequenceToContiguousArray<A>(_:)(v15);
  OUTLINED_FUNCTION_1_0();
  v40 = v25;
  specialized MutableCollection<>.sort(by:)(&v40, 1);
  OUTLINED_FUNCTION_1_0();
  swift_release();
  v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Sd7elementtG_Sis5NeverOTg5231_s7SiriCam22CodeBasedRankerHandlerC4rank9requestId04caarI002rcI003trpI06parses13rankerContextSayAA0B5ParseOG10Foundation4UUIDV_APSSAPSgAmA0eO0VtFS2i6offset_Sd7elementt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960SiAT_SdAUtSiTf3nnnpk_nTf1cn_n(v40);
  swift_release();
  OUTLINED_FUNCTION_36_0();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_7SiriCam0E5ParseOs5NeverOTg503_s7d94Cam22CodeBasedRankerHandlerC4rank9requestId04caarI002rcI003trpI06parses13rankerContextSayAA0B5F49OG10Foundation4UUIDV_APSSAPSgAmA0eO0VtFALSiXEfU0_SayAIGTf1cn_n(v26, a6);
  v28 = v27;
  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRetain_n();
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)OUTLINED_FUNCTION_4();
    v40 = OUTLINED_FUNCTION_4();
    *(_DWORD *)v31 = 136315138;
    v32 = type metadata accessor for CamParse(0);
    v33 = OUTLINED_FUNCTION_11_3();
    v34 = MEMORY[0x1C3BCA9B8](v33, v32);
    v36 = v35;
    swift_bridgeObjectRelease();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v40);
    OUTLINED_FUNCTION_71(v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_1_10();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2E0C000, v29, v30, "Returning ranked parses %s", v31, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_1_10();
  return v28;
}

void closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t (*v18)(_QWORD);
  int EnumCaseMultiPayload;
  void *v20;
  double v21;
  _BOOL4 v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v36 - v10;
  v12 = type metadata accessor for CamUSOParse(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CamParse(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (void **)((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of RankedAction(a1, (uint64_t)v17, v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of CamModelMetadata((uint64_t)v17, (uint64_t)v14, type metadata accessor for CamUSOParse);
    Siri_Nlu_External_UserParse.comparableProbability.getter();
    v24 = v23;
    v25 = a2 + *(int *)(type metadata accessor for RankerContext() + 28);
    if ((*(_BYTE *)(v25 + 8) & 1) != 0 || v24 != *(double *)v25)
    {
      outlined destroy of CamParse((uint64_t)v14, type metadata accessor for CamUSOParse);
      v31 = 0x3FA999999999999ALL;
    }
    else
    {
      outlined init with copy of UUID?((uint64_t)&v14[*(int *)(v12 + 20)], (uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      outlined destroy of CamParse((uint64_t)v14, type metadata accessor for CamUSOParse);
      v26 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v26) == 1)
      {
LABEL_23:
        *a3 = 0x3FE0000000000000;
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        return;
      }
      outlined init with copy of UUID?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      v27 = *(_QWORD *)(v26 - 8);
      v28 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v9, v26);
      if (v28 != *MEMORY[0x1E0D9F138] && v28 != *MEMORY[0x1E0D9F110] && v28 != *MEMORY[0x1E0D9F0F8])
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v26);
        goto LABEL_23;
      }
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      v31 = 0x3FE3333333333333;
    }
    *a3 = v31;
    return;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v20 = *v17;
    dispatch thunk of PommesResponse.primaryQueryConfidence()();
    v22 = v21 >= 0.7;

    *a3 = qword_1C2E95560[v22];
  }
  else
  {
    if (one-time initialization token for ranker != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.ranker);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1C2E0C000, v33, v34, "Received unknown parse case, ranking last!", v35, 2u);
      MEMORY[0x1C3BCB4A4](v35, -1, -1);
    }

    *a3 = 0;
    outlined destroy of CamParse((uint64_t)v17, type metadata accessor for CamParse);
  }
}

void CodeBasedRankerHandler.extractFeatures(actions:rankerContext:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v47[3];
  ValueMetadata *v48;
  _UNKNOWN **v49;

  OUTLINED_FUNCTION_17_3();
  v1 = v0;
  v3 = v2;
  v4 = (int *)type metadata accessor for RankerFeatureExtractor();
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_4_5();
  v8 = v7 - v6;
  v9 = type metadata accessor for RankerContext();
  OUTLINED_FUNCTION_6_1();
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v44 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (uint64_t *)((char *)&v44 - v17);
  if ((CamFeatureFlag.isEnabled.getter(4u) & 1) != 0)
  {
    OUTLINED_FUNCTION_19_4(v1, (uint64_t)v18);
    v19 = (uint64_t *)((char *)v18 + *(int *)(v9 + 24));
    v21 = *v19;
    v20 = v19[1];
    type metadata accessor for ConversationHistoryFeatureExtractor();
    v22 = OUTLINED_FUNCTION_83();
    *(_QWORD *)(v22 + 16) = v21;
    *(_QWORD *)(v22 + 24) = v20;
    OUTLINED_FUNCTION_2();
    v23 = OUTLINED_FUNCTION_11_3();
    v24 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam15ActionCandidateVG_Sis5NeverOTg503_s7d64Cam26DawnRankerFeatureExtractorV7actions13rankerContextACSayAA15fG71VG_AA0dI0VtcfcSiAGcfu_33_8226a15facd6e6e82cd0ea8a8c3738b3AGSiTf3nnnpk_nTf1cn_n(v23);
    OUTLINED_FUNCTION_3_1();
    v25 = specialized Sequence<>.max()(v24);
    v27 = v26;
    swift_bridgeObjectRelease();
    if (v25 > 2 && (v27 & 1) == 0)
      v29 = 3;
    else
      v29 = 2;
    v30 = static DawnRankerFeatureExtractor.extractOnScreenAppBundleIds(rrCandidates:)(*v18);
    OUTLINED_FUNCTION_89((uint64_t)v18);
    v48 = &type metadata for DawnRankerFeatureExtractor;
    v49 = &protocol witness table for DawnRankerFeatureExtractor;
    v47[0] = v22;
    v47[1] = v29;
    v47[2] = v30;
  }
  else
  {
    outlined init with copy of RankedAction(v1, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for RankerContext);
    v48 = (ValueMetadata *)v4;
    v49 = &protocol witness table for RankerFeatureExtractor;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v47);
    v32 = v4[9];
    OUTLINED_FUNCTION_11_3();
    static PommesFeatureExtractor.configuredScoreThreshold()();
    *(_QWORD *)(v8 + v32) = v33;
    OUTLINED_FUNCTION_79((uint64_t)v16, v8);
    OUTLINED_FUNCTION_79((uint64_t)v16, (uint64_t)v13);
    static UserParseFeatureExtractor.extractOnScreenAppBundleIds(from:)(*v13);
    v35 = v34;
    v36 = (char *)v13 + *(int *)(v9 + 28);
    v37 = *(_QWORD *)v36;
    v45 = v9;
    v38 = v36[8];
    outlined destroy of CamParse((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for RankerContext);
    v39 = v8 + v4[5];
    *(_QWORD *)v39 = v35;
    *(_QWORD *)(v39 + 8) = v37;
    *(_BYTE *)(v39 + 16) = v38;
    type metadata accessor for AffinityRankFeatureExtractor();
    OUTLINED_FUNCTION_24_3();
    *(_QWORD *)(v8 + v4[6]) = AffinityRankFeatureExtractor.init(actions:)(v3);
    v40 = &v16[*(int *)(v45 + 24)];
    v42 = *(_QWORD *)v40;
    v41 = *((_QWORD *)v40 + 1);
    OUTLINED_FUNCTION_61();
    outlined destroy of CamParse((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for RankerContext);
    type metadata accessor for ConversationHistoryFeatureExtractor();
    v43 = OUTLINED_FUNCTION_83();
    *(_QWORD *)(v43 + 16) = v42;
    *(_QWORD *)(v43 + 24) = v41;
    *(_QWORD *)(v8 + v4[8]) = v43;
    outlined init with take of CamModelMetadata(v8, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for RankerFeatureExtractor);
  }
  MEMORY[0x1E0C80A78](v31);
  *(&v44 - 2) = (uint64_t)v47;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam15ActionCandidateVG_SDySSSo14MLFeatureValueCGsAE_pTg5((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))partial apply for closure #1 in CodeBasedRankerHandler.extractFeatures(actions:rankerContext:), (uint64_t)(&v44 - 4), v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_4_9();
}

uint64_t closure #1 in CodeBasedRankerHandler.extractFeatures(actions:rankerContext:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = a2[3];
  v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  result = FeatureExtracting.extract(from:)(a1, v8, v9);
  if (v4)
    *a3 = v4;
  else
    *a4 = result;
  return result;
}

void CodeBasedRankerHandler.postRankLogging(rankedActions:caarId:rcId:requestId:trpId:shadowLog:tieBreakersExecuted:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, NSObject *a6, int a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  int64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  Swift::String v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  NSObject *v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  int v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;

  v118 = a8;
  v124 = a5;
  v125 = a6;
  v123 = a4;
  v122 = a3;
  v121 = a2;
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([RankedAction], CamModelMetadata, CAARTrialEnrollment));
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_9_7();
  v117 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_37_3(v14);
  v112 = type metadata accessor for CamModelMetadata();
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_2_12();
  v113 = v16;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v17);
  v126 = (uint64_t)&v111 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]));
  v135 = *(_QWORD *)(v19 - 8);
  v136 = v19;
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_4_5();
  v23 = v22 - v21;
  v137 = type metadata accessor for RankedAction();
  v24 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137);
  OUTLINED_FUNCTION_2_12();
  v134 = v25;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_13_3();
  v130 = v27;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v28);
  v139 = (uint64_t)&v111 - v29;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v30);
  v32 = (uint64_t *)((char *)&v111 - v31);
  v33 = *(_QWORD *)(a1 + 16);
  v34 = &dword_1ED79B000;
  v127 = a1;
  v138 = v23;
  v120 = v33;
  v119 = a7;
  if (v33)
  {
    OUTLINED_FUNCTION_97();
    v36 = *(_QWORD *)(v35 + 416);
    OUTLINED_FUNCTION_2();
    if (v36 != -1)
      swift_once();
    v111 = v24;
    v133 = *(_QWORD *)(v24 + 72);
    v132 = OUTLINED_FUNCTION_14_1();
    *(_QWORD *)&v37 = 136315650;
    v129 = v37;
    v128 = MEMORY[0x1E0DEE9B8] + 8;
    v38 = v120;
    v39 = v130;
    v40 = v139;
    do
    {
      __swift_project_value_buffer(v132, (uint64_t)static Logger.ranker);
      OUTLINED_FUNCTION_94(v8, (uint64_t)v32);
      OUTLINED_FUNCTION_94(v8, v40);
      OUTLINED_FUNCTION_94(v8, v39);
      v41 = Logger.logObject.getter();
      v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = OUTLINED_FUNCTION_4();
        v131 = OUTLINED_FUNCTION_4();
        v140 = v131;
        *(_DWORD *)v43 = v129;
        v44 = *v32;
        v45 = v32[1];
        OUTLINED_FUNCTION_36_0();
        *(_QWORD *)(v43 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v140);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_27_3((uint64_t)v32);
        *(_WORD *)(v43 + 12) = 2080;
        v46 = v137;
        OUTLINED_FUNCTION_1_12();
        lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v47 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)(v43 + 14) = OUTLINED_FUNCTION_96(v47, v48);
        OUTLINED_FUNCTION_12();
        OUTLINED_FUNCTION_27_3(v139);
        *(_WORD *)(v43 + 22) = 2080;
        v49 = *(int *)(v46 + 44);
        v50 = v130;
        v51 = Dictionary<>.debugDescription.getter(*(_QWORD *)(v130 + v49));
        *(_QWORD *)(v43 + 24) = OUTLINED_FUNCTION_96(v51, v52);
        OUTLINED_FUNCTION_12();
        OUTLINED_FUNCTION_27_3(v50);
        _os_log_impl(&dword_1C2E0C000, v41, v42, "Features for %s (%s): \n %s", (uint8_t *)v43, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_27_3(v39);
      OUTLINED_FUNCTION_27_3(v40);
      OUTLINED_FUNCTION_27_3((uint64_t)v32);
      v8 += v133;
      --v38;
    }
    while (v38);
    OUTLINED_FUNCTION_1_0();
    LOBYTE(a7) = v119;
    v24 = v111;
    v34 = &dword_1ED79B000;
  }
  if (*((_QWORD *)v34 + 52) != -1)
    swift_once();
  v53 = OUTLINED_FUNCTION_14_1();
  __swift_project_value_buffer(v53, (uint64_t)static Logger.ranker);
  v54 = Logger.logObject.getter();
  v55 = static os_log_type_t.info.getter();
  v56 = os_log_type_enabled(v54, v55);
  v57 = v120;
  if (v56)
  {
    v58 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v58 = 0;
    _os_log_impl(&dword_1C2E0C000, v54, v55, "Logging CAAR features to SELF.", v58, 2u);
    OUTLINED_FUNCTION_3();
  }

  v59 = MEMORY[0x1E0DEE9D8];
  if (v57)
  {
    v140 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57, 0);
    OUTLINED_FUNCTION_97();
    v60 = *(_QWORD *)(v24 + 72);
    v61 = v134;
    v62 = v137;
    do
    {
      outlined init with copy of RankedAction((uint64_t)v54, v61, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      v63 = *(int *)(v136 + 48);
      v64 = v61 + *(int *)(v62 + 36);
      v65 = OUTLINED_FUNCTION_1_12();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v23, v64, v65);
      *(_QWORD *)(v23 + v63) = *(_QWORD *)(v61 + *(int *)(v62 + 44));
      swift_bridgeObjectRetain();
      outlined destroy of CamParse(v61, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      v59 = v140;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1);
        v59 = v140;
      }
      v67 = *(_QWORD *)(v59 + 16);
      v66 = *(_QWORD *)(v59 + 24);
      if (v67 >= v66 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
        v59 = v140;
      }
      *(_QWORD *)(v59 + 16) = v67 + 1;
      v68 = v59
          + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80))
          + *(_QWORD *)(v135 + 72) * v67;
      v23 = v138;
      outlined init with take of (UUID, [String : MLFeatureValue])(v138, v68, &demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]));
      v54 = ((char *)v54 + v60);
      --v57;
    }
    while (v57);
    LOBYTE(a7) = v119;
  }
  specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(v59, v121, v122, v123, v124, (uint64_t)v125);
  OUTLINED_FUNCTION_12();
  v69 = static TrialProvider.fetchBoolFactorFromTrial(_:)();
  v70 = v115;
  if ((v69 & 1) != 0 && (CamFeatureFlag.isEnabled.getter(5u) & 1) != 0)
  {
    v140 = 0;
    v141 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v72 = *(_QWORD *)(v70 + 56);
    v71 = *(_QWORD *)(v70 + 64);
    OUTLINED_FUNCTION_61();
    swift_bridgeObjectRelease();
    v140 = v72;
    v141 = v71;
    v73._object = (void *)0x80000001C2E9A8B0;
    v73._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v73);
    v74 = v141;
    v139 = v140;
  }
  else
  {
    v74 = *(_QWORD *)(v70 + 64);
    v139 = *(_QWORD *)(v70 + 56);
    OUTLINED_FUNCTION_11_3();
  }
  v75 = *(_QWORD *)(v70 + 72);
  v76 = *(unsigned int *)(v70 + 80);
  v77 = a7 & 1;
  v79 = *(_QWORD *)(v70 + 88);
  v78 = *(_QWORD *)(v70 + 96);
  type metadata accessor for Locale();
  v80 = v114;
  OUTLINED_FUNCTION_50_0(v114);
  v81 = v113;
  v82 = v113 + *(int *)(v112 + 28);
  OUTLINED_FUNCTION_50_0(v82);
  *(_QWORD *)v81 = v139;
  *(_QWORD *)(v81 + 8) = v74;
  *(_QWORD *)(v81 + 16) = v75;
  *(_QWORD *)(v81 + 24) = v76;
  *(_QWORD *)(v81 + 32) = v79;
  *(_QWORD *)(v81 + 40) = v78;
  *(_BYTE *)(v81 + 48) = v77;
  OUTLINED_FUNCTION_61();
  outlined assign with take of Locale?(v80, v82);
  outlined init with take of CamModelMetadata(v81, v126, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
  v83 = one-time initialization token for enrollment;
  swift_bridgeObjectRetain();
  if (v83 != -1)
    swift_once();
  v84 = static TrialProvider.enrollment;
  v86 = qword_1ED79B950;
  v85 = qword_1ED79B958;
  v87 = xmmword_1ED79B960;
  v89 = qword_1ED79B970;
  v88 = qword_1ED79B978;
  v90 = v117;
  v91 = (uint64_t)v117 + *(int *)(v116 + 48);
  v92 = (char *)v117 + *(int *)(v116 + 64);
  v93 = v126;
  *v117 = v127;
  outlined init with copy of RankedAction(v93, v91, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
  *(_OWORD *)v92 = v84;
  *((_QWORD *)v92 + 2) = v86;
  *((_QWORD *)v92 + 3) = v85;
  *((_OWORD *)v92 + 2) = v87;
  *((_QWORD *)v92 + 6) = v89;
  *((_QWORD *)v92 + 7) = v88;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_61();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2();
  v94 = v122;
  v95 = v123;
  specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(v90, v121, v122, v123, v124, v125);
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v90, &demangling cache variable for type metadata for ([RankedAction], CamModelMetadata, CAARTrialEnrollment));
  v96 = UUID.uuidString.getter();
  v97 = v126;
  specialized static CaarFeatureStoreLoggingProtocol.writeData(modelOutput:modelMetadata:requestId:rcId:fsStream:)(v127, v126, v96, v98, v94, v95, 1);
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_46_0();
  specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(v99, v100, v101, v102, v103, v104);
  OUTLINED_FUNCTION_46_0();
  specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(v105, v106, v107, v108, v109, v110);
  outlined destroy of CamParse(v97, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
}

uint64_t specialized static CaarFeatureStoreLoggingProtocol.writeData(modelOutput:modelMetadata:requestId:rcId:fsStream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t inited;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  Swift::Int v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[5];

  v70 = a6;
  v69 = a5;
  v68 = a4;
  v67 = a3;
  v73 = type metadata accessor for RankedAction();
  v10 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v74 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CamModelMetadata();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v59 - v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AnyEncodable)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2E93F60;
  *(_QWORD *)(inited + 32) = 0x7365727574616566;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MLFeatureValue]);
  v20 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v21 = *(_QWORD *)(a1 + 16);
  v71 = a7;
  if (!v21)
  {
LABEL_13:
    v43 = swift_allocObject();
    *(_QWORD *)(v43 + 16) = v20;
    *(_QWORD *)(inited + 48) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
    *(_QWORD *)(inited + 56) = v43;
    *(_QWORD *)(inited + 64) = 0x74757074756FLL;
    *(_QWORD *)(inited + 72) = 0xE600000000000000;
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = a1;
    *(_QWORD *)(inited + 80) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
    *(_QWORD *)(inited + 88) = v44;
    *(_QWORD *)(inited + 96) = 0x617461646174656DLL;
    *(_QWORD *)(inited + 104) = 0xE800000000000000;
    outlined init with copy of RankedAction(a2, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
    outlined init with copy of RankedAction((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
    v45 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v46 = swift_allocObject();
    outlined init with take of CamModelMetadata((uint64_t)v16, v46 + v45, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
    swift_bridgeObjectRetain();
    outlined destroy of CamParse((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
    *(_QWORD *)(inited + 112) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
    *(_QWORD *)(inited + 120) = v46;
    v27 = Dictionary.init(dictionaryLiteral:)();
    if (one-time initialization token for common == -1)
      goto LABEL_14;
    goto LABEL_28;
  }
  v60 = v13;
  v61 = inited;
  v62 = v16;
  v63 = v18;
  v64 = a2;
  v22 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v72 = *(_QWORD *)(v10 + 72);
  v65 = a1;
  swift_bridgeObjectRetain();
  v23 = v74;
  while (1)
  {
    outlined init with copy of RankedAction(v22, v23, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    v24 = v73;
    v25 = UUID.uuidString.getter();
    v27 = v26;
    v28 = *(_QWORD *)(v23 + *(int *)(v24 + 44));
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v76[0] = (uint64_t)v20;
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v27);
    v32 = v20[2];
    v33 = (v31 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      swift_once();
LABEL_14:
      v47 = type metadata accessor for Logger();
      v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.common);
      swift_bridgeObjectRetain_n();
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = swift_slowAlloc();
        v52 = swift_slowAlloc();
        v76[0] = v52;
        *(_DWORD *)v51 = 136315394;
        v74 = v48;
        if ((_BYTE)a7)
        {
          if (a7 == 1)
            v53 = 0x65646F4D72616143;
          else
            v53 = 0x646E65536F747541;
          if (a7 == 1)
            v54 = 0xE90000000000006CLL;
          else
            v54 = 0xED00006C65646F4DLL;
        }
        else
        {
          v54 = 0xE800000000000000;
          v53 = 0x6C65646F4D6D6143;
        }
        v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2080;
        swift_bridgeObjectRetain();
        v55 = Dictionary.description.getter();
        v57 = v56;
        swift_bridgeObjectRelease();
        v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2E0C000, v49, v50, "Writing to Feature Store, streamId=%s, object=%s", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v52, -1, -1);
        MEMORY[0x1C3BCB4A4](v51, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v76[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AnyEncodable]);
      v76[4] = lazy protocol witness table accessor for type [String : AnyEncodable] and conformance <> [A : B]();
      v76[0] = v27;
      specialized static FeatureStoreLoggingProtocol.write(streamId:object:requestId:rcId:)();
    }
    v35 = v30;
    LOBYTE(a7) = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String : MLFeatureValue]>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v34))
      break;
LABEL_7:
    v20 = (_QWORD *)v76[0];
    if ((a7 & 1) != 0)
    {
      v38 = *(_QWORD *)(v76[0] + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v38 + 8 * v35) = v28;
    }
    else
    {
      *(_QWORD *)(v76[0] + 8 * (v35 >> 6) + 64) |= 1 << v35;
      v39 = (uint64_t *)(v20[6] + 16 * v35);
      *v39 = v25;
      v39[1] = v27;
      *(_QWORD *)(v20[7] + 8 * v35) = v28;
      v40 = v20[2];
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_27;
      v20[2] = v42;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v74;
    outlined destroy of CamParse(v74, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    v22 += v72;
    if (!--v21)
    {
      a1 = v65;
      swift_bridgeObjectRelease();
      LOBYTE(a7) = v71;
      a2 = v64;
      v18 = v63;
      v16 = v62;
      inited = v61;
      v13 = v60;
      goto LABEL_13;
    }
  }
  v36 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v27);
  if ((a7 & 1) == (v37 & 1))
  {
    v35 = v36;
    goto LABEL_7;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t CodeBasedRankerHandler.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CodeBasedRankerHandler.__deallocating_deinit()
{
  CodeBasedRankerHandler.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CodeBasedRankerHandler()
{
  return objc_opt_self();
}

uint64_t protocol witness for Caar.rank(requestId:caarId:rcId:trpId:actions:rankerContext:) in conformance CodeBasedRankerHandler(uint64_t a1, NSObject *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), NSObject *a5, uint64_t a6, uint64_t a7)
{
  return CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(a1, a2, a3, a4, a5, a6, a7);
}

void protocol witness for Caar.rank(requestId:caarId:rcId:actions:rankerContext:) in conformance CodeBasedRankerHandler()
{
  CodeBasedRankerHandler.rank(requestId:caarId:rcId:actions:rankerContext:)();
}

uint64_t protocol witness for Caar.rank(requestId:caarId:rcId:trpId:parses:rankerContext:) in conformance CodeBasedRankerHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t specialized static Comparable.> infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v4 = *(int *)(type metadata accessor for RankedAction() + 28);
  v5 = *(double *)((char *)a2 + v4);
  v6 = *(double *)((char *)a1 + v4);
  if (v5 < v6)
    return 1;
  if (v6 < v5)
    return 0;
  v8 = *a2;
  v9 = a2[1];
  if (v8 == 0xD000000000000021 && v9 == 0x80000001C2E99330)
    return 0;
  v10 = OUTLINED_FUNCTION_0_18();
  result = 0;
  if ((v10 & 1) == 0)
  {
    v12 = *a1;
    v11 = a1[1];
    if (v12 == 0xD000000000000021 && v11 == 0x80000001C2E99330 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
      return 1;
    if (v8 == v12 && v9 == v11)
      return 0;
    OUTLINED_FUNCTION_67();
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v14 & 1) == 0)
    {
      OUTLINED_FUNCTION_67();
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

void implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  OUTLINED_FUNCTION_1_5();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  char *v25;
  Swift::Int v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  double v43;
  double v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  unint64_t v59;
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::Int v78;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  char v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  Swift::Int v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  Swift::Int v150;
  uint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  Swift::Int v156;
  uint64_t v157;
  Swift::Int v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  Swift::Int v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;

  OUTLINED_FUNCTION_17_3();
  v2 = v1;
  v168 = OUTLINED_FUNCTION_3_12();
  v162 = *(_QWORD *)(v168 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_2_12();
  v157 = v4;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v5);
  v169 = (uint64_t)&v149 - v6;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_13_3();
  v172 = v8;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_13_3();
  v171 = v10;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_13_3();
  v161 = v12;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_13_3();
  v159 = v14;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_13_3();
  v154 = v16;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v17);
  v153 = (char **)((char *)&v149 - v18);
  v170 = v2;
  v19 = v2[1];
  v20 = _minimumMergeRunLength(_:)(v19);
  if (v20 >= v19)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      if (v19)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)();
      goto LABEL_171;
    }
    goto LABEL_193;
  }
  v21 = v20;
  v163 = v0;
  specialized static Array._allocateUninitialized(_:)(v19 / 2);
  v151 = v22;
  v160 = v23;
  v155 = v19;
  if (v19 <= 0)
  {
    v25 = (char *)MEMORY[0x1E0DEE9D8];
    v83 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_154:
    if (v83 >= 2)
    {
      v140 = *v170;
      while (1)
      {
        v141 = v83 - 2;
        if (v83 < 2)
          break;
        if (!v140)
          goto LABEL_202;
        v142 = v25;
        v143 = *(_QWORD *)&v25[16 * v141 + 32];
        v144 = *(_QWORD *)&v25[16 * v83 + 24];
        v145 = v163;
        specialized _merge<A>(low:mid:high:buffer:by:)();
        v163 = v145;
        if (v145)
          goto LABEL_166;
        if (v144 < v143)
          goto LABEL_188;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v142 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v142);
        if (v141 >= *((_QWORD *)v142 + 2))
          goto LABEL_189;
        v146 = &v142[16 * v141 + 32];
        *(_QWORD *)v146 = v143;
        *((_QWORD *)v146 + 1) = v144;
        v147 = *((_QWORD *)v142 + 2);
        if (v83 > v147)
          goto LABEL_190;
        v25 = v142;
        memmove(&v142[16 * v83 + 16], &v142[16 * v83 + 32], 16 * (v147 - v83));
        *((_QWORD *)v142 + 2) = v147 - 1;
        v83 = v147 - 1;
        v148 = v155;
        if (v147 <= 2)
          goto LABEL_169;
      }
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
      goto LABEL_195;
    }
    v148 = v155;
LABEL_169:
    OUTLINED_FUNCTION_21_2();
    if (v148 >= -1)
      goto LABEL_170;
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
    return;
  }
  v150 = v21;
  v24 = 0;
  v25 = (char *)MEMORY[0x1E0DEE9D8];
  v167 = (unint64_t)"ettingsFlowDelegatePlugin";
  v152 = 0x80000001C2E99330;
  v26 = v19;
  while (2)
  {
    v27 = v24;
    v28 = v24 + 1;
    if (v24 + 1 >= v26)
    {
      ++v24;
      goto LABEL_53;
    }
    v166 = v26;
    v29 = *v170;
    v30 = *(_QWORD *)(v162 + 72);
    v31 = v153;
    OUTLINED_FUNCTION_19_4(*v170 + v30 * v28, (uint64_t)v153);
    v164 = v29;
    v32 = v29 + v30 * v24;
    v33 = v154;
    OUTLINED_FUNCTION_19_4(v32, (uint64_t)v154);
    v34 = *(int *)(v168 + 28);
    v35 = *(double *)((char *)v33 + v34);
    v36 = *(double *)((char *)v31 + v34);
    if (v35 >= v36)
    {
      v26 = v166;
      if (v36 >= v35)
      {
        v37 = *v154;
        v38 = v154[1];
        if (*v154 != 0xD000000000000021 || v38 != (v167 | 0x8000000000000000))
        {
          OUTLINED_FUNCTION_85();
          v135 = OUTLINED_FUNCTION_0_18();
          LODWORD(v165) = 0;
          if ((v135 & 1) != 0)
            goto LABEL_12;
          v136 = *v153;
          v137 = v153[1];
          OUTLINED_FUNCTION_64();
          if (v51 && v137 == (v167 | 0x8000000000000000) || (OUTLINED_FUNCTION_0_18() & 1) != 0)
          {
            LODWORD(v165) = 1;
            goto LABEL_12;
          }
          if (v37 != v136 || v38 != v137)
          {
            OUTLINED_FUNCTION_82();
            v139 = OUTLINED_FUNCTION_7_6();
            LODWORD(v165) = 0;
            if ((v139 & 1) == 0)
            {
              OUTLINED_FUNCTION_82();
              LODWORD(v165) = OUTLINED_FUNCTION_30_4();
            }
            goto LABEL_12;
          }
        }
      }
      LODWORD(v165) = 0;
    }
    else
    {
      LODWORD(v165) = 1;
      v26 = v166;
    }
LABEL_12:
    OUTLINED_FUNCTION_56_0((uint64_t)v154);
    OUTLINED_FUNCTION_56_0((uint64_t)v153);
    v24 = v27 + 2;
    if (v27 + 2 >= v26)
      goto LABEL_36;
    v158 = v27;
    v39 = v30 * v28;
    v40 = v164;
    v41 = v30 * v24;
    while (1)
    {
      v42 = v24;
      OUTLINED_FUNCTION_53_0(v40 + v41, (uint64_t)v159);
      OUTLINED_FUNCTION_53_0(v40 + v39, (uint64_t)v161);
      v43 = OUTLINED_FUNCTION_65();
      if (v45)
      {
LABEL_16:
        v46 = 1;
        goto LABEL_22;
      }
      if (v44 < v43 || (v47 = *v161, v48 = v161[1], OUTLINED_FUNCTION_64(), v51) && v48 == v152)
      {
LABEL_21:
        v46 = 0;
        goto LABEL_22;
      }
      v46 = 0;
      if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
      {
        v49 = *v159;
        if (*v159 == 0xD000000000000021 && v159[1] == (v167 | 0x8000000000000000))
          goto LABEL_16;
        OUTLINED_FUNCTION_85();
        v156 = v50;
        if ((OUTLINED_FUNCTION_0_18() & 1) != 0)
          goto LABEL_16;
        v51 = v47 == v49 && v48 == v156;
        if (v51)
          goto LABEL_21;
        v46 = 0;
        if ((OUTLINED_FUNCTION_7_6() & 1) == 0)
          v46 = OUTLINED_FUNCTION_30_4();
      }
LABEL_22:
      OUTLINED_FUNCTION_56_0((uint64_t)v161);
      OUTLINED_FUNCTION_56_0((uint64_t)v159);
      if (((v165 ^ v46) & 1) != 0)
        break;
      v24 = v42 + 1;
      v40 += v30;
      if (v42 + 1 >= v166)
      {
        v26 = v166;
        v24 = v166;
        v27 = v158;
        goto LABEL_36;
      }
    }
    v24 = v42;
    v27 = v158;
    v26 = v166;
LABEL_36:
    if ((v165 & 1) != 0)
    {
      if (v24 >= v27)
      {
        if (v27 < v24)
        {
          v149 = v25;
          v52 = 0;
          v53 = v30 * (v24 - 1);
          v54 = v24 * v30;
          v55 = v27;
          v158 = v27;
          v56 = v27 * v30;
          do
          {
            if (v55 != v24 + v52 - 1)
            {
              v57 = v164;
              if (!v164)
                goto LABEL_201;
              v58 = v24;
              v59 = v164 + v56;
              v165 = v164 + v53;
              outlined init with take of CamModelMetadata(v164 + v56, v157, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
              if (v56 < v53 || v59 >= v57 + v54)
              {
                v61 = v165;
                OUTLINED_FUNCTION_57_0();
              }
              else
              {
                v61 = v165;
                if (v56 != v53)
                  swift_arrayInitWithTakeBackToFront();
              }
              outlined init with take of CamModelMetadata(v157, v61, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
              v24 = v58;
            }
            ++v55;
            --v52;
            v53 -= v30;
            v54 -= v30;
            v56 += v30;
          }
          while (v55 < v24 + v52);
          v25 = v149;
          v27 = v158;
          v26 = v166;
        }
        goto LABEL_53;
      }
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
      goto LABEL_197;
    }
LABEL_53:
    if (v24 >= v26)
      goto LABEL_88;
    if (__OFSUB__(v24, v27))
      goto LABEL_192;
    v158 = v27;
    if (v24 - v27 >= v150)
      goto LABEL_87;
    if (__OFADD__(v158, v150))
      goto LABEL_196;
    if (v158 + v150 >= v26)
      v62 = v26;
    else
      v62 = v158 + v150;
    if (v62 < v158)
    {
LABEL_197:
      __break(1u);
      goto LABEL_198;
    }
    if (v24 == v62)
      goto LABEL_87;
    v149 = v25;
    v63 = *(_QWORD *)(v162 + 72);
    v64 = v63 * (v24 - 1);
    v164 = v63;
    v65 = v24 * v63;
    v156 = v62;
    while (2)
    {
      v66 = 0;
      v67 = v158;
      v165 = v65;
      v166 = v24;
      while (2)
      {
        v68 = *v170;
        OUTLINED_FUNCTION_53_0(v65 + v66 + *v170, (uint64_t)v171);
        v69 = v64;
        OUTLINED_FUNCTION_53_0(v64 + v66 + v68, (uint64_t)v172);
        v70 = OUTLINED_FUNCTION_65();
        if (v45)
        {
LABEL_72:
          OUTLINED_FUNCTION_29_4((uint64_t)v172);
          OUTLINED_FUNCTION_29_4((uint64_t)v171);
          goto LABEL_73;
        }
        if (v71 >= v70)
        {
          v73 = *v172;
          v72 = v172[1];
          if (*v172 != 0xD000000000000021 || v72 != (v167 | 0x8000000000000000))
          {
            OUTLINED_FUNCTION_85();
            if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
            {
              v74 = *v171;
              v75 = v171[1];
              if (*v171 == 0xD000000000000021 && v75 == (v167 | 0x8000000000000000))
                goto LABEL_72;
              OUTLINED_FUNCTION_85();
              if ((OUTLINED_FUNCTION_0_18() & 1) != 0)
                goto LABEL_72;
              if (v73 == v74 && v72 == v75)
                break;
              OUTLINED_FUNCTION_73();
              if ((OUTLINED_FUNCTION_7_6() & 1) != 0)
                break;
              OUTLINED_FUNCTION_73();
              v80 = OUTLINED_FUNCTION_30_4();
              OUTLINED_FUNCTION_29_4((uint64_t)v172);
              OUTLINED_FUNCTION_29_4((uint64_t)v171);
              if ((v80 & 1) == 0)
                goto LABEL_84;
LABEL_73:
              v76 = *v170;
              if (!*v170)
                goto LABEL_199;
              v64 = v69;
              v65 = v165;
              v77 = v76 + v64 + v66;
              outlined init with take of CamModelMetadata(v76 + v165 + v66, v169, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
              OUTLINED_FUNCTION_57_0();
              outlined init with take of CamModelMetadata(v169, v77, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
              v66 -= v164;
              ++v67;
              v78 = v166;
              if (v166 == v67)
                goto LABEL_85;
              continue;
            }
          }
        }
        break;
      }
      OUTLINED_FUNCTION_29_4((uint64_t)v172);
      OUTLINED_FUNCTION_29_4((uint64_t)v171);
LABEL_84:
      v64 = v69;
      v65 = v165;
      v78 = v166;
LABEL_85:
      v24 = v78 + 1;
      v64 += v164;
      v65 += v164;
      if (v24 != v156)
        continue;
      break;
    }
    v24 = v156;
    v25 = v149;
LABEL_87:
    v27 = v158;
LABEL_88:
    if (v24 < v27)
      goto LABEL_191;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = OUTLINED_FUNCTION_75(0, *((_QWORD *)v25 + 2) + 1);
    v82 = *((_QWORD *)v25 + 2);
    v81 = *((_QWORD *)v25 + 3);
    v83 = v82 + 1;
    if (v82 >= v81 >> 1)
      v25 = OUTLINED_FUNCTION_75((char *)(v81 > 1), v82 + 1);
    *((_QWORD *)v25 + 2) = v83;
    v84 = v25 + 32;
    v85 = &v25[16 * v82 + 32];
    *(_QWORD *)v85 = v27;
    *((_QWORD *)v85 + 1) = v24;
    if (!v82)
    {
      v83 = 1;
LABEL_136:
      v26 = v170[1];
      if (v24 >= v26)
        goto LABEL_154;
      continue;
    }
    break;
  }
  while (1)
  {
    v86 = v83 - 1;
    if (v83 >= 4)
    {
      v91 = &v84[16 * v83];
      v92 = *((_QWORD *)v91 - 8);
      v93 = *((_QWORD *)v91 - 7);
      v97 = __OFSUB__(v93, v92);
      v94 = v93 - v92;
      if (v97)
        goto LABEL_176;
      v96 = *((_QWORD *)v91 - 6);
      v95 = *((_QWORD *)v91 - 5);
      v97 = __OFSUB__(v95, v96);
      v89 = v95 - v96;
      v90 = v97;
      if (v97)
        goto LABEL_177;
      v98 = v83 - 2;
      v99 = &v84[16 * v83 - 32];
      v101 = *(_QWORD *)v99;
      v100 = *((_QWORD *)v99 + 1);
      v97 = __OFSUB__(v100, v101);
      v102 = v100 - v101;
      if (v97)
        goto LABEL_178;
      v97 = __OFADD__(v89, v102);
      v103 = v89 + v102;
      if (v97)
        goto LABEL_180;
      if (v103 >= v94)
      {
        v121 = &v84[16 * v86];
        v123 = *(_QWORD *)v121;
        v122 = *((_QWORD *)v121 + 1);
        v97 = __OFSUB__(v122, v123);
        v124 = v122 - v123;
        if (v97)
          goto LABEL_186;
        v114 = v89 < v124;
        goto LABEL_125;
      }
    }
    else
    {
      if (v83 != 3)
      {
        v115 = *((_QWORD *)v25 + 4);
        v116 = *((_QWORD *)v25 + 5);
        v97 = __OFSUB__(v116, v115);
        v108 = v116 - v115;
        v109 = v97;
        goto LABEL_119;
      }
      v88 = *((_QWORD *)v25 + 4);
      v87 = *((_QWORD *)v25 + 5);
      v97 = __OFSUB__(v87, v88);
      v89 = v87 - v88;
      v90 = v97;
    }
    if ((v90 & 1) != 0)
      goto LABEL_179;
    v98 = v83 - 2;
    v104 = &v84[16 * v83 - 32];
    v106 = *(_QWORD *)v104;
    v105 = *((_QWORD *)v104 + 1);
    v107 = __OFSUB__(v105, v106);
    v108 = v105 - v106;
    v109 = v107;
    if (v107)
      goto LABEL_181;
    v110 = &v84[16 * v86];
    v112 = *(_QWORD *)v110;
    v111 = *((_QWORD *)v110 + 1);
    v97 = __OFSUB__(v111, v112);
    v113 = v111 - v112;
    if (v97)
      goto LABEL_183;
    if (__OFADD__(v108, v113))
      goto LABEL_185;
    if (v108 + v113 >= v89)
    {
      v114 = v89 < v113;
LABEL_125:
      if (v114)
        v86 = v98;
      goto LABEL_127;
    }
LABEL_119:
    if ((v109 & 1) != 0)
      goto LABEL_182;
    v117 = &v84[16 * v86];
    v119 = *(_QWORD *)v117;
    v118 = *((_QWORD *)v117 + 1);
    v97 = __OFSUB__(v118, v119);
    v120 = v118 - v119;
    if (v97)
      goto LABEL_184;
    if (v120 < v108)
      goto LABEL_136;
LABEL_127:
    v125 = v86 - 1;
    if (v86 - 1 >= v83)
    {
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
    if (!*v170)
      goto LABEL_200;
    v126 = v24;
    v127 = v25;
    v128 = &v84[16 * v125];
    v129 = *(_QWORD *)v128;
    v130 = v84;
    v131 = &v84[16 * v86];
    v132 = *((_QWORD *)v131 + 1);
    v133 = v163;
    specialized _merge<A>(low:mid:high:buffer:by:)();
    v163 = v133;
    if (v133)
      break;
    if (v132 < v129)
      goto LABEL_173;
    if (v86 > *((_QWORD *)v127 + 2))
      goto LABEL_174;
    *(_QWORD *)v128 = v129;
    *(_QWORD *)&v130[16 * v125 + 8] = v132;
    v134 = *((_QWORD *)v127 + 2);
    if (v86 >= v134)
      goto LABEL_175;
    v25 = v127;
    v83 = v134 - 1;
    memmove(v131, v131 + 16, 16 * (v134 - 1 - v86));
    v84 = v130;
    *((_QWORD *)v127 + 2) = v134 - 1;
    v24 = v126;
    if (v134 <= 2)
      goto LABEL_136;
  }
LABEL_166:
  swift_bridgeObjectRelease();
  if (v155 < -1)
    goto LABEL_194;
LABEL_170:
  OUTLINED_FUNCTION_92();
LABEL_171:
  OUTLINED_FUNCTION_4_9();
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  Swift::Int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  _QWORD *v28;
  Swift::Int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t result;
  uint64_t v99;
  uint64_t *v100;
  Swift::Int v101;
  uint64_t v102;
  uint64_t v103;
  Swift::Int v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char *v113;
  double v114;
  double v115;

  v3 = v2;
  v6 = a1[1];
  swift_retain_n();
  v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if (v6 < 0)
      goto LABEL_145;
    if (v6)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1, a2 & 1);
    swift_release_n();
    return swift_release();
  }
  v8 = v7;
  specialized static Array._allocateUninitialized(_:)(v6 / 2);
  v102 = v9;
  v103 = v6;
  v105 = v10;
  v111 = a2;
  v100 = a1;
  if (v6 <= 0)
    goto LABEL_107;
  v101 = v8;
  v11 = 0;
  v12 = *a1;
  v99 = *a1 + 40;
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v112 = *a1;
  while (1)
  {
    v14 = v11++;
    if (v11 >= v6)
      goto LABEL_32;
    swift_getAtKeyPath();
    swift_getAtKeyPath();
    if ((a2 & 1) != 0)
      v15 = v114 < v115;
    else
      v15 = v115 < v114;
    v16 = v15;
    v11 = v14 + 2;
    v12 = v112;
    if (v14 + 2 >= v6)
    {
LABEL_22:
      if (!v16)
        goto LABEL_32;
LABEL_25:
      if (v11 < v14)
        goto LABEL_146;
      if (v14 < v11)
      {
        v20 = 16 * v11;
        v21 = 16 * v14;
        v22 = v11;
        v23 = v14;
        do
        {
          if (v23 != --v22)
          {
            if (!v12)
              goto LABEL_152;
            v24 = v12 + v20;
            v25 = *(_QWORD *)(v12 + v21);
            v26 = *(_QWORD *)(v12 + v21 + 8);
            *(_OWORD *)(v12 + v21) = *(_OWORD *)(v12 + v20 - 16);
            *(_QWORD *)(v24 - 16) = v25;
            *(_QWORD *)(v24 - 8) = v26;
          }
          ++v23;
          v20 -= 16;
          v21 += 16;
        }
        while (v23 < v22);
      }
      goto LABEL_32;
    }
    v17 = v99 + 16 * v14;
    while (1)
    {
      swift_getAtKeyPath();
      swift_getAtKeyPath();
      v18 = (a2 & 1) != 0 ? v114 < v115 : v115 < v114;
      v19 = v18;
      v12 = v112;
      if (v16 != v19)
        break;
      v17 += 16;
      if (++v11 >= v103)
      {
        v6 = v103;
        v11 = v103;
        goto LABEL_22;
      }
    }
    v6 = v103;
    if (v16)
      goto LABEL_25;
LABEL_32:
    if (v11 < v6)
    {
      if (__OFSUB__(v11, v14))
        goto LABEL_144;
      if (v11 - v14 < v101)
      {
        if (__OFADD__(v14, v101))
          goto LABEL_147;
        if (v14 + v101 >= v6)
          v27 = v6;
        else
          v27 = v14 + v101;
        if (v27 < v14)
        {
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (v11 != v27)
        {
          v106 = v3;
          v108 = v13;
          v28 = (_QWORD *)(v12 + 16 * v11);
          do
          {
            v29 = v14;
            v30 = v28;
            do
            {
              if ((a2 & 1) != 0)
              {
                swift_getAtKeyPath();
                swift_getAtKeyPath();
                if (v114 >= v115)
                  break;
              }
              else
              {
                swift_getAtKeyPath();
                swift_getAtKeyPath();
                if (v115 >= v114)
                  break;
              }
              if (!v112)
                goto LABEL_150;
              v31 = *v30;
              v32 = v30[1];
              *(_OWORD *)v30 = *((_OWORD *)v30 - 1);
              *(v30 - 1) = v32;
              *(v30 - 2) = v31;
              v30 -= 2;
              ++v29;
            }
            while (v11 != v29);
            ++v11;
            v28 += 2;
          }
          while (v11 != v27);
          v11 = v27;
          v3 = v106;
          v13 = v108;
        }
      }
    }
    if (v11 < v14)
      goto LABEL_143;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v34 = *((_QWORD *)v13 + 2);
    v33 = *((_QWORD *)v13 + 3);
    v35 = v34 + 1;
    v12 = v112;
    if (v34 >= v33 >> 1)
    {
      v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v13);
      v12 = v112;
      v13 = v88;
    }
    *((_QWORD *)v13 + 2) = v35;
    v36 = &v13[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v11;
    if (v34)
      break;
    v35 = 1;
LABEL_100:
    v6 = v103;
    if (v11 >= v103)
      goto LABEL_108;
  }
  v37 = v13 + 32;
  v104 = v11;
  while (1)
  {
    v38 = v35 - 1;
    if (v35 >= 4)
    {
      v43 = &v37[16 * v35];
      v44 = *((_QWORD *)v43 - 8);
      v45 = *((_QWORD *)v43 - 7);
      v49 = __OFSUB__(v45, v44);
      v46 = v45 - v44;
      if (v49)
        goto LABEL_128;
      v48 = *((_QWORD *)v43 - 6);
      v47 = *((_QWORD *)v43 - 5);
      v49 = __OFSUB__(v47, v48);
      v41 = v47 - v48;
      v42 = v49;
      if (v49)
        goto LABEL_129;
      v50 = v35 - 2;
      v51 = &v37[16 * v35 - 32];
      v53 = *(_QWORD *)v51;
      v52 = *((_QWORD *)v51 + 1);
      v49 = __OFSUB__(v52, v53);
      v54 = v52 - v53;
      if (v49)
        goto LABEL_130;
      v49 = __OFADD__(v41, v54);
      v55 = v41 + v54;
      if (v49)
        goto LABEL_132;
      if (v55 >= v46)
      {
        v73 = &v37[16 * v38];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v49 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v49)
          goto LABEL_138;
        v66 = v41 < v76;
        goto LABEL_89;
      }
    }
    else
    {
      if (v35 != 3)
      {
        v67 = *((_QWORD *)v13 + 4);
        v68 = *((_QWORD *)v13 + 5);
        v49 = __OFSUB__(v68, v67);
        v60 = v68 - v67;
        v61 = v49;
        goto LABEL_83;
      }
      v40 = *((_QWORD *)v13 + 4);
      v39 = *((_QWORD *)v13 + 5);
      v49 = __OFSUB__(v39, v40);
      v41 = v39 - v40;
      v42 = v49;
    }
    if ((v42 & 1) != 0)
      goto LABEL_131;
    v50 = v35 - 2;
    v56 = &v37[16 * v35 - 32];
    v58 = *(_QWORD *)v56;
    v57 = *((_QWORD *)v56 + 1);
    v59 = __OFSUB__(v57, v58);
    v60 = v57 - v58;
    v61 = v59;
    if (v59)
      goto LABEL_133;
    v62 = &v37[16 * v38];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v49 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v49)
      goto LABEL_135;
    if (__OFADD__(v60, v65))
      goto LABEL_137;
    if (v60 + v65 >= v41)
    {
      v66 = v41 < v65;
LABEL_89:
      if (v66)
        v38 = v50;
      goto LABEL_91;
    }
LABEL_83:
    if ((v61 & 1) != 0)
      goto LABEL_134;
    v69 = &v37[16 * v38];
    v71 = *(_QWORD *)v69;
    v70 = *((_QWORD *)v69 + 1);
    v49 = __OFSUB__(v70, v71);
    v72 = v70 - v71;
    if (v49)
      goto LABEL_136;
    if (v72 < v60)
      goto LABEL_100;
LABEL_91:
    v77 = v38 - 1;
    if (v38 - 1 >= v35)
    {
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
    if (!v12)
      goto LABEL_151;
    v78 = v3;
    v79 = v37;
    v80 = &v37[16 * v77];
    v81 = *(_QWORD *)v80;
    v82 = v38;
    v83 = &v79[16 * v38];
    v84 = *((_QWORD *)v83 + 1);
    v107 = (char *)(v12 + 16 * *(_QWORD *)v83);
    v109 = (char *)(v12 + 16 * *(_QWORD *)v80);
    v85 = v12 + 16 * v84;
    swift_retain();
    specialized _merge<A>(low:mid:high:buffer:by:)(v109, v107, v85, v105, v111 & 1);
    v3 = v78;
    if (v78)
      break;
    if (v84 < v81)
      goto LABEL_125;
    if (v82 > *((_QWORD *)v13 + 2))
      goto LABEL_126;
    v86 = v82;
    *(_QWORD *)v80 = v81;
    v37 = v13 + 32;
    *(_QWORD *)&v13[16 * v77 + 40] = v84;
    v87 = *((_QWORD *)v13 + 2);
    if (v82 >= v87)
      goto LABEL_127;
    v35 = v87 - 1;
    memmove(v83, v83 + 16, 16 * (v87 - 1 - v86));
    *((_QWORD *)v13 + 2) = v87 - 1;
    a2 = v111;
    v12 = v112;
    v11 = v104;
    if (v87 <= 2)
      goto LABEL_100;
  }
LABEL_105:
  swift_bridgeObjectRelease();
  if (v103 >= -1)
    goto LABEL_122;
  __break(1u);
LABEL_107:
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v35 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_108:
  if (v35 >= 2)
  {
    v89 = *v100;
    v110 = *v100;
    while (1)
    {
      v90 = v35 - 2;
      if (v35 < 2)
        break;
      if (!v89)
        goto LABEL_153;
      v91 = v3;
      v92 = *(_QWORD *)&v13[16 * v90 + 32];
      v93 = *(_QWORD *)&v13[16 * v35 + 24];
      v113 = (char *)(v89 + 16 * v92);
      v94 = (char *)(v89 + 16 * *(_QWORD *)&v13[16 * v35 + 16]);
      v95 = v89 + 16 * v93;
      swift_retain();
      specialized _merge<A>(low:mid:high:buffer:by:)(v113, v94, v95, v105, v111 & 1);
      v3 = v91;
      if (v91)
        goto LABEL_105;
      if (v93 < v92)
        goto LABEL_140;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v13);
      if (v90 >= *((_QWORD *)v13 + 2))
        goto LABEL_141;
      v96 = &v13[16 * v90 + 32];
      *(_QWORD *)v96 = v92;
      *((_QWORD *)v96 + 1) = v93;
      v97 = *((_QWORD *)v13 + 2);
      if (v35 > v97)
        goto LABEL_142;
      memmove(&v13[16 * v35 + 16], &v13[16 * v35 + 32], 16 * (v97 - v35));
      *((_QWORD *)v13 + 2) = v97 - 1;
      v35 = v97 - 1;
      v89 = v110;
      if (v97 <= 2)
        goto LABEL_121;
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
LABEL_121:
  swift_bridgeObjectRelease();
  if (v103 >= -1)
  {
LABEL_122:
    *(_QWORD *)(v102 + 16) = 0;
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_149:
  __break(1u);
LABEL_150:
  swift_release_n();
  __break(1u);
LABEL_151:
  swift_release_n();
  __break(1u);
LABEL_152:
  swift_release_n();
  __break(1u);
LABEL_153:
  result = swift_release_n();
  __break(1u);
  return result;
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)();
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t *v45;

  OUTLINED_FUNCTION_17_3();
  v43 = v0;
  v2 = v1;
  v4 = v3;
  v34 = v5;
  v41 = OUTLINED_FUNCTION_3_12();
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_78();
  v42 = v6;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v7);
  v45 = (uint64_t *)&v32[-v8];
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v9);
  v44 = &v32[-v11];
  v40 = v2;
  v33 = v4;
  if (v2 == v4)
    goto LABEL_25;
  v12 = *(_QWORD *)(v10 + 72);
  v13 = v12 * (v40 - 1);
  v36 = v12;
  v14 = v12 * v40;
  v15 = type metadata accessor for RankedAction;
  v37 = (unint64_t)"ettingsFlowDelegatePlugin";
  v35 = 0x80000001C2E99330;
  while (2)
  {
    v16 = 0;
    v17 = v34;
    v38 = v14;
    v39 = v13;
    while (1)
    {
      v18 = *v43;
      v19 = v14 + v16 + *v43;
      v20 = v44;
      OUTLINED_FUNCTION_19_4(v19, (uint64_t)v44);
      v21 = v15;
      OUTLINED_FUNCTION_19_4(v13 + v16 + v18, (uint64_t)v45);
      v22 = *(int *)(v41 + 28);
      v23 = *(double *)((char *)v45 + v22);
      v24 = *(double *)((char *)v20 + v22);
      if (v23 < v24)
      {
LABEL_12:
        OUTLINED_FUNCTION_23_4();
        OUTLINED_FUNCTION_27_3((uint64_t)v44);
        v14 = v38;
        v13 = v39;
        goto LABEL_13;
      }
      if (v24 < v23)
        break;
      v25 = *v45;
      v15 = (uint64_t (*)())v45[1];
      if (*v45 == 0xD000000000000021 && v15 == (uint64_t (*)())v35)
        break;
      if ((OUTLINED_FUNCTION_0_18() & 1) != 0)
        break;
      v27 = *v44;
      v26 = (uint64_t (*)())v44[1];
      if (*v44 == 0xD000000000000021 && v26 == (uint64_t (*)())(v37 | 0x8000000000000000)
        || (OUTLINED_FUNCTION_0_18() & 1) != 0)
      {
        goto LABEL_12;
      }
      if (v25 == v27 && v15 == v26)
        break;
      OUTLINED_FUNCTION_91();
      if ((OUTLINED_FUNCTION_7_6() & 1) != 0)
        break;
      OUTLINED_FUNCTION_91();
      v31 = OUTLINED_FUNCTION_30_4();
      OUTLINED_FUNCTION_23_4();
      OUTLINED_FUNCTION_27_3((uint64_t)v44);
      v14 = v38;
      v13 = v39;
      if ((v31 & 1) == 0)
        goto LABEL_24;
LABEL_13:
      v28 = *v43;
      if (!*v43)
      {
        __break(1u);
        return;
      }
      v29 = v28 + v13 + v16;
      outlined init with take of CamModelMetadata(v28 + v14 + v16, v42, (uint64_t (*)(_QWORD))v15);
      swift_arrayInitWithTakeFrontToBack();
      v15 = v21;
      outlined init with take of CamModelMetadata(v42, v29, (uint64_t (*)(_QWORD))v21);
      v16 -= v36;
      if (v40 == ++v17)
        goto LABEL_24;
    }
    OUTLINED_FUNCTION_23_4();
    OUTLINED_FUNCTION_27_3((uint64_t)v44);
    v14 = v38;
    v13 = v39;
LABEL_24:
    v13 += v36;
    v14 += v36;
    if (++v40 != v33)
      continue;
    break;
  }
LABEL_25:
  OUTLINED_FUNCTION_4_9();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  double v16;
  double v17;

  if (a3 == a2)
    return swift_release();
  v7 = a3;
  v9 = *a4;
  v10 = *a4 + 16 * a3;
  while (2)
  {
    v11 = a1;
    v12 = (_QWORD *)v10;
    do
    {
      if ((a5 & 1) != 0)
      {
        swift_getAtKeyPath();
        result = swift_getAtKeyPath();
        if (v16 >= v17)
          break;
      }
      else
      {
        swift_getAtKeyPath();
        result = swift_getAtKeyPath();
        if (v17 >= v16)
          break;
      }
      if (!v9)
      {
        __break(1u);
        return result;
      }
      v13 = *v12;
      v14 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v14;
      *(v12 - 2) = v13;
      v12 -= 2;
      ++v11;
    }
    while (v7 != v11);
    ++v7;
    v10 += 16;
    if (v7 != a2)
      continue;
    break;
  }
  return swift_release();
}

void specialized _merge<A>(low:mid:high:buffer:by:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  BOOL v23;
  int64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  BOOL v42;
  char *v43;
  BOOL v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  BOOL v60;
  BOOL v61;
  uint64_t v63;
  uint64_t v64;
  int64_t v66;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  OUTLINED_FUNCTION_17_3();
  v79 = v1;
  v80 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v78 = OUTLINED_FUNCTION_3_12();
  MEMORY[0x1E0C80A78](v78);
  OUTLINED_FUNCTION_78();
  v77 = v11;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v12);
  v76 = (uint64_t *)((char *)&v68 - v13);
  OUTLINED_FUNCTION_3_7();
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v68 - v16);
  MEMORY[0x1E0C80A78](v15);
  v19 = (unint64_t *)((char *)&v68 - v18);
  v21 = *(_QWORD *)(v20 + 72);
  if (!v21)
  {
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  v22 = v8 - v10;
  v23 = v8 - v10 == 0x8000000000000000 && v21 == -1;
  if (v23)
    goto LABEL_112;
  v24 = v6 - v8;
  if (v6 - v8 == 0x8000000000000000 && v21 == -1)
    goto LABEL_113;
  v72 = v0;
  v26 = v22 / v21;
  v27 = v24 / v21;
  v74 = v21;
  if (v22 / v21 >= v24 / v21)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v24 / v21);
    v28 = v4 + v27 * v21;
    if (v27 * v21 < 1 || v10 >= v8)
      goto LABEL_106;
    v46 = -v21;
    v71 = (unint64_t)"ettingsFlowDelegatePlugin";
    v70 = 0x80000001C2E99330;
    v73 = v4;
    while (1)
    {
      v47 = v6;
      v75 = v28;
      v48 = v28 + v46;
      v49 = v76;
      outlined init with copy of RankedAction(v28 + v46, (uint64_t)v76, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      v50 = v8 + v46;
      v51 = v77;
      outlined init with copy of RankedAction(v8 + v46, v77, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      v52 = *(int *)(v78 + 28);
      v53 = *(double *)(v51 + v52);
      v54 = *(double *)((char *)v49 + v52);
      if (v53 < v54)
      {
LABEL_65:
        v55 = 1;
        goto LABEL_70;
      }
      if (v54 < v53)
        break;
      v57 = *(_QWORD *)v77;
      v56 = *(_QWORD *)(v77 + 8);
      if (*(_QWORD *)v77 == 0xD000000000000021 && v56 == v70)
        break;
      OUTLINED_FUNCTION_74();
      v55 = 0;
      if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
      {
        v63 = *v76;
        OUTLINED_FUNCTION_64();
        if (v23 && v64 == (v71 | 0x8000000000000000))
          goto LABEL_65;
        v69 = v64;
        if ((OUTLINED_FUNCTION_0_18() & 1) != 0)
          goto LABEL_65;
        if (v57 == v63 && v56 == v69)
          break;
        OUTLINED_FUNCTION_74();
        v55 = 0;
        if ((OUTLINED_FUNCTION_7_6() & 1) == 0)
        {
          OUTLINED_FUNCTION_74();
          v55 = OUTLINED_FUNCTION_30_4();
        }
      }
LABEL_70:
      v58 = v46;
      v59 = v47 + v46;
      outlined destroy of CamParse(v77, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      outlined destroy of CamParse((uint64_t)v76, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      if ((v55 & 1) != 0)
      {
        v60 = v47 < v8 || v59 >= v8;
        v6 = v59;
        if (!v60)
        {
          v46 = v58;
          if (v47 != v8)
            OUTLINED_FUNCTION_17_4();
          v8 = v50;
          v4 = v73;
          v28 = v75;
          goto LABEL_90;
        }
        OUTLINED_FUNCTION_18_2();
        v8 = v50;
        v4 = v73;
        v28 = v75;
      }
      else
      {
        v61 = v47 < v75 || v59 >= v75;
        v6 = v59;
        if (!v61)
        {
          v46 = v58;
          if (v47 != v75)
            OUTLINED_FUNCTION_17_4();
          v28 = v48;
          v4 = v73;
          goto LABEL_90;
        }
        OUTLINED_FUNCTION_18_2();
        v28 = v48;
        v4 = v73;
      }
      v46 = v58;
LABEL_90:
      if (v28 <= v4 || v8 <= v10)
      {
        v21 = v74;
        goto LABEL_106;
      }
    }
    v55 = 0;
    goto LABEL_70;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v10, v22 / v21);
  v28 = v4 + v26 * v21;
  if (v26 * v21 >= 1 && v8 < v6)
  {
    v77 = (uint64_t)"ettingsFlowDelegatePlugin";
    v76 = (_QWORD *)0x80000001C2E99330;
    do
    {
      v31 = v28;
      OUTLINED_FUNCTION_19_4(v8, (uint64_t)v19);
      v32 = v4;
      OUTLINED_FUNCTION_19_4(v4, (uint64_t)v17);
      v33 = *(int *)(v78 + 28);
      v34 = *(double *)((char *)v17 + v33);
      v35 = *(double *)((char *)v19 + v33);
      if (v34 < v35)
        goto LABEL_24;
      if (v35 < v34
        || (v38 = *v17, v39 = (_QWORD *)v17[1], *v17 == 0xD000000000000021) && v39 == v76
        || (OUTLINED_FUNCTION_0_18() & 1) != 0)
      {
LABEL_35:
        OUTLINED_FUNCTION_89((uint64_t)v17);
        OUTLINED_FUNCTION_89((uint64_t)v19);
LABEL_36:
        v40 = v32;
        v21 = v74;
        v4 = v40 + v74;
        if (v10 < v40 || v10 >= v4)
        {
          OUTLINED_FUNCTION_18_2();
        }
        else if (v10 != v40)
        {
          OUTLINED_FUNCTION_17_4();
        }
        v36 = v8;
        goto LABEL_48;
      }
      if ((v75 = (unint64_t)v39, v43 = (char *)v19[1], *v19 == 0xD000000000000021)
        && v43 == (char *)(v77 | 0x8000000000000000)
        || (v73 = *v19, v71 = (unint64_t)v43, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
LABEL_24:
        OUTLINED_FUNCTION_10_6((uint64_t)v17);
        OUTLINED_FUNCTION_10_6((uint64_t)v19);
      }
      else
      {
        v44 = v38 == v73 && v75 == v71;
        if (v44 || (OUTLINED_FUNCTION_7_6() & 1) != 0)
          goto LABEL_35;
        v45 = OUTLINED_FUNCTION_30_4();
        OUTLINED_FUNCTION_10_6((uint64_t)v17);
        OUTLINED_FUNCTION_10_6((uint64_t)v19);
        if ((v45 & 1) == 0)
          goto LABEL_36;
      }
      v36 = v8 + v74;
      v37 = v10 < v8 || v10 >= v36;
      v4 = v32;
      if (v37)
      {
        OUTLINED_FUNCTION_18_2();
      }
      else if (v10 != v8)
      {
        OUTLINED_FUNCTION_17_4();
      }
      v21 = v74;
LABEL_48:
      v10 += v21;
      v28 = v31;
      v42 = v4 >= v31 || v36 >= v6;
      v8 = v36;
    }
    while (!v42);
  }
LABEL_106:
  v66 = v28 - v4;
  if (v21 != -1 || v66 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, v66 / v21);
    return;
  }
LABEL_114:
  __break(1u);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4, char a5)
{
  char *v5;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v15;
  BOOL v16;
  char *v20;
  char *v21;
  char *v22;
  BOOL v23;
  BOOL v25;
  double v27;
  double v28;

  v5 = a4;
  v7 = a2;
  v8 = a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v13 = &v5[16 * v11];
    if (v8 >= v7 || v10 < 16)
      goto LABEL_27;
    v20 = (char *)(a3 - 16);
    while (1)
    {
      v21 = v20 + 16;
      v22 = v7 - 16;
      if ((a5 & 1) != 0)
      {
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v27 >= v28)
          goto LABEL_30;
      }
      else
      {
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v28 >= v27)
        {
LABEL_30:
          v23 = v21 != v13 || v20 >= v13;
          v22 = v13 - 16;
          v13 -= 16;
          if (!v23)
            goto LABEL_36;
          goto LABEL_35;
        }
      }
      v25 = v21 != v7 || v20 >= v7;
      v7 -= 16;
      if (!v25)
        goto LABEL_36;
LABEL_35:
      *(_OWORD *)v20 = *(_OWORD *)v22;
LABEL_36:
      v20 -= 16;
      if (v7 <= v8 || v13 <= v5)
        goto LABEL_27;
    }
  }
  v12 = a2 - a1;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  v13 = &v5[16 * v9];
  if ((unint64_t)v7 < a3 && v12 >= 16)
  {
    do
    {
      if ((a5 & 1) != 0)
      {
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v27 < v28)
          goto LABEL_19;
      }
      else
      {
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v28 < v27)
        {
LABEL_19:
          v15 = v7;
          v16 = v8 == v7;
          v7 += 16;
          if (v16)
            goto LABEL_12;
LABEL_11:
          *(_OWORD *)v8 = *(_OWORD *)v15;
          goto LABEL_12;
        }
      }
      v15 = v5;
      v16 = v8 == v5;
      v5 += 16;
      if (!v16)
        goto LABEL_11;
LABEL_12:
      v8 += 16;
    }
    while (v5 < v13 && (unint64_t)v7 < a3);
  }
  v7 = v8;
LABEL_27:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5, (v13 - v5) / 16, v7);
  swift_release();
  return 1;
}

void outlined bridged method (mbgnn) of @objc CAARSchemaCAARTieBreakersExecuted.tiebreakers.setter(uint64_t a1, void *a2)
{
  Class isa;

  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARTieBreaker);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, sel_setTiebreakers_, isa);

}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v1 = *(_QWORD *)(result + 16);
  v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v3 = result;
    result = swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v6 = v2 + 4;
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 8 * v5 + 32);
      if (!v4)
      {
        v8 = v2[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Double)>);
        v11 = (_QWORD *)swift_allocObject();
        v12 = (uint64_t)(_swift_stdlib_malloc_size(v11) - 32) / 16;
        v11[2] = v10;
        v11[3] = 2 * v12;
        v13 = (unint64_t)(v11 + 4);
        v14 = v2[3];
        v15 = v14 >> 1;
        if (v2[2])
        {
          if (v11 != v2 || v13 >= (unint64_t)&v2[2 * v15 + 4])
            memmove(v11 + 4, v2 + 4, 16 * v15);
          v2[2] = 0;
        }
        v6 = (_QWORD *)(v13 + 16 * v15);
        v4 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - (v14 >> 1);
        result = swift_release();
        v2 = v11;
      }
      v17 = __OFSUB__(v4--, 1);
      if (v17)
        break;
      *v6 = v5;
      v6[1] = v7;
      v6 += 2;
      if (v1 == ++v5)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v4 = 0;
LABEL_21:
  v18 = v2[3];
  if (v18 < 2)
    return (uint64_t)v2;
  v19 = v18 >> 1;
  v17 = __OFSUB__(v19, v4);
  v20 = v19 - v4;
  if (!v17)
  {
    v2[2] = v20;
    return (uint64_t)v2;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized CodeBasedRankerHandler.extractUserHistoryFeatures(rankedActions:siriSignalsContainer:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26[3];
  uint64_t v27;
  _UNKNOWN **v28;
  _BYTE v29[40];
  _BYTE v30[40];
  _QWORD v31[6];

  v31[3] = type metadata accessor for SiriSignalsContainer();
  v31[4] = &protocol witness table for SiriSignalsContainer;
  v31[0] = a2;
  outlined init with copy of SiriSignalsContaining((uint64_t)v31, (uint64_t)v30);
  outlined init with copy of SiriSignalsContaining((uint64_t)v31, (uint64_t)v29);
  v25 = a1;
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 16);
  swift_retain();
  if (v5)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_14;
    while (1)
    {
      *v25 = v4;
      v6 = type metadata accessor for RankedAction();
      v7 = 0;
      while (1)
      {
        v8 = *v25;
        v27 = v6;
        v28 = &protocol witness table for RankedAction;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
        if (v7 >= *(_QWORD *)(v8 + 16))
          break;
        v10 = *(_QWORD *)(v6 - 8);
        v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        v12 = *(_QWORD *)(v10 + 72) * v7;
        outlined init with copy of RankedAction(v8 + v11 + v12, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v8);
          v8 = v21;
        }
        v4 = v8 + v11 + *(int *)(v6 + 44) + v12;
        v13 = specialized FeatureExtracting.extract(from:)(v26);
        specialized _dictionaryUpCast<A, B, C, D>(_:)(v13);
        v15 = v14;
        swift_bridgeObjectRelease();
        specialized Dictionary.update(other:allowDuplicateKeys:)(v15, 0);
        swift_bridgeObjectRelease();
        *v25 = v8;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
        v16 = *v25;
        v27 = v6;
        v28 = &protocol witness table for RankedAction;
        v17 = __swift_allocate_boxed_opaque_existential_1(v26);
        if (v7 >= *(_QWORD *)(v16 + 16))
          goto LABEL_13;
        outlined init with copy of RankedAction(v16 + v11 + v12, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v16);
          v16 = v22;
        }
        v4 = v16 + v11 + *(int *)(v6 + 44) + v12;
        v18 = specialized FeatureExtracting.extract(from:)(v26);
        specialized _dictionaryUpCast<A, B, C, D>(_:)(v18);
        v20 = v19;
        swift_bridgeObjectRelease();
        specialized Dictionary.update(other:allowDuplicateKeys:)(v20, 0);
        swift_bridgeObjectRelease();
        *v25 = v16;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
        if (v5 == ++v7)
          goto LABEL_11;
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      specialized _ArrayBuffer._consumeAndCreateNew()(v4);
      v4 = v24;
    }
  }
LABEL_11:
  outlined destroy of AppLaunchCountFeatureExtractor((uint64_t)v29);
  outlined destroy of AppLaunchRecencyFeatureExtractor((uint64_t)v30);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
}

uint64_t specialized CodeBasedRankerHandler.extractDisambiguationFeatures(rankedActions:siriSignalsContainer:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _UNKNOWN **v37;
  _QWORD v38[6];
  _QWORD v39[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopTwo?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39[3] = type metadata accessor for SiriSignalsContainer();
  v39[4] = &protocol witness table for SiriSignalsContainer;
  v39[0] = a2;
  Array<A>.topTwo.getter(*a1, (uint64_t)v6);
  v7 = type metadata accessor for TopTwo();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) != 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>);
    v12 = type metadata accessor for RankedAction();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(_QWORD *)(v13 + 72);
    v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1C2E940E0;
    outlined init with copy of RankedAction((uint64_t)v6, v16 + v15, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    v34 = v14;
    outlined init with copy of RankedAction((uint64_t)&v6[*(int *)(v7 + 20)], v16 + v15 + v14, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    swift_retain();
    outlined destroy of CamParse((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TopTwo);
    v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam12RankedActionVG_10Foundation4UUIDVs5NeverOTg503_s7d104Cam22CodeBasedRankerHandlerC29extractDisambiguationFeatures13rankedActions20siriSignalsContainerySayAA12fG97VGz_AA0aM10Containing_ptF10Foundation4UUIDVAHcfu_33_1cb444e52906099451ab9d686f8988b8AhMTf3nnnpk_nTf1cn_n(v16);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    v18 = specialized Set.init<A>(_:)(v17);
    v19 = *a1;
    outlined init with copy of SiriSignalsContaining((uint64_t)v39, (uint64_t)&v35);
    v20 = swift_bridgeObjectRetain();
    DisambiguationFeatureExtractor.init(rankedActions:siriSignalsContainer:)(v20, &v35, v38);
    specialized Sequence.filter(_:)(0, *(_QWORD *)(v19 + 16), v18, a1);
    v22 = v21;
    v32 = *(_QWORD *)(v21 + 16);
    if (!v32)
    {
LABEL_14:
      swift_bridgeObjectRelease();
      outlined destroy of DisambiguationFeatureExtractor((uint64_t)v38);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    }
    swift_bridgeObjectRetain();
    v23 = 0;
    v33 = v22;
    while (1)
    {
      v24 = *(_QWORD *)(v22 + 8 * v23 + 32);
      v25 = *a1;
      v36 = v12;
      v37 = &protocol witness table for RankedAction;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v35);
      if ((v24 & 0x8000000000000000) != 0)
        break;
      if (v24 >= *(_QWORD *)(v25 + 16))
        goto LABEL_17;
      outlined init with copy of RankedAction(v25 + v15 + v24 * v34, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v25);
        v25 = v30;
      }
      v27 = specialized FeatureExtracting.extract(from:)(&v35);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v27);
      v29 = v28;
      swift_bridgeObjectRelease();
      specialized Dictionary.update(other:allowDuplicateKeys:)(v29, 0);
      ++v23;
      swift_bridgeObjectRelease();
      *a1 = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
      v22 = v33;
      if (v32 == v23)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_retain();
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v6, &demangling cache variable for type metadata for TopTwo?);
  if (one-time initialization token for ranker != -1)
LABEL_18:
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.ranker);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1C2E0C000, v9, v10, "Fewer than 2 actions, will not extract disambiguation features.", v11, 2u);
    MEMORY[0x1C3BCB4A4](v11, -1, -1);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

void specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)()
{
  specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

{
  specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

{
  type metadata accessor for RankedAction();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(lazy protocol witness table cache variable for type RankedAction and conformance RankedAction, (void (*)(uint64_t))type metadata accessor for RankedAction);
  Array<A>.encode(to:)();
  OUTLINED_FUNCTION_33_12();
}

{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MLFeatureValue]);
  lazy protocol witness table accessor for type [String : MLFeatureValue] and conformance <> [A : B]();
  Dictionary<>.encode(to:)();
  OUTLINED_FUNCTION_33_12();
}

uint64_t sub_1C2E42334()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)()
{
  specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

{
  specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

uint64_t sub_1C2E42388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for CamModelMetadata();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 40) != 1)
    swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(v1 + 28);
  v5 = type metadata accessor for Locale();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

void partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(_QWORD *a1)
{
  type metadata accessor for CamModelMetadata();
  specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1);
}

{
  specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1);
}

unint64_t lazy protocol witness table accessor for type AnyEncodable and conformance AnyEncodable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable;
  if (!lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for AnyEncodable, &type metadata for AnyEncodable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable);
  }
  return result;
}

uint64_t partial apply for closure #1 in CodeBasedRankerHandler.extractFeatures(actions:rankerContext:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in CodeBasedRankerHandler.extractFeatures(actions:rankerContext:)(a1, *(_QWORD **)(v3 + 16), a2, a3);
}

void partial apply for closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(a1, *(_QWORD *)(v2 + 16), a2);
}

void outlined init with copy of UUID?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_49_0(a1, a2, a3);
  OUTLINED_FUNCTION_14_6(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_1_5();
}

void partial apply for closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;

  closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(a1, a2, v3, a3);
}

uint64_t partial apply for closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)()
{
  return partial apply for closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)((uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _QWORD))closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = OUTLINED_FUNCTION_1_12();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v3;
  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  v8 = (v5 + *(unsigned __int8 *)(v7 + 80) + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_80(v0 + v4);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_80(v0 + v6);
  if (!__swift_getEnumTagSinglePayload(v0 + v8, 1, v1))
    OUTLINED_FUNCTION_80(v0 + v8);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)()
{
  return partial apply for closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)((uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _QWORD))closure #3 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:));
}

uint64_t partial apply for closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t (*a1)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)(OUTLINED_FUNCTION_1_12() - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v3 + v6 + 16) & ~v3;
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  v9 = (v5 + *(unsigned __int8 *)(v8 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v6), *(_QWORD *)(v1 + v6 + 8), v1 + v7, v1 + v9, *(_QWORD *)(v1 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t outlined destroy of DisambiguationFeatureExtractor(uint64_t a1)
{
  destroy for DisambiguationFeatureExtractor(a1);
  return a1;
}

uint64_t outlined destroy of AppLaunchCountFeatureExtractor(uint64_t a1)
{
  destroy for AppLaunchCountFeatureExtractor();
  return a1;
}

uint64_t outlined destroy of AppLaunchRecencyFeatureExtractor(uint64_t a1)
{
  destroy for AppLaunchCountFeatureExtractor();
  return a1;
}

void lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEAF38], v3), a1);
  }
  OUTLINED_FUNCTION_1_5();
}

void outlined init with copy of RankedAction(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_48_0(a1, a2, a3);
  OUTLINED_FUNCTION_14_6(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_1_5();
}

void outlined init with take of CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_48_0(a1, a2, a3);
  OUTLINED_FUNCTION_14_6(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_1_5();
}

void outlined init with copy of SiriSignalsContaining(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  OUTLINED_FUNCTION_1_5();
}

uint64_t OUTLINED_FUNCTION_0_18()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_8_9()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

void OUTLINED_FUNCTION_10_6(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of CamParse(a1, v1);
}

uint64_t OUTLINED_FUNCTION_14_6@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_16_5()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_17_4()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t OUTLINED_FUNCTION_18_2()
{
  return swift_arrayInitWithTakeFrontToBack();
}

void OUTLINED_FUNCTION_19_4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of RankedAction(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_21_4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 424) + 8))(v0, *(_QWORD *)(v1 - 400));
}

void OUTLINED_FUNCTION_23_4()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  outlined destroy of CamParse(*(_QWORD *)(v1 - 72), v0);
}

uint64_t OUTLINED_FUNCTION_24_3()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_27_3(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of CamParse(a1, v1);
}

void OUTLINED_FUNCTION_29_4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of CamParse(a1, v1);
}

uint64_t OUTLINED_FUNCTION_30_4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 408) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_34_2()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_37_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_41_2()
{
  return static TrialProvider.fetchBoolFactorFromTrial(_:)();
}

void OUTLINED_FUNCTION_42_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of UUID?(*(_QWORD *)(v3 - 280), *(_QWORD *)(v3 - 344), a3);
}

uint64_t OUTLINED_FUNCTION_44_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 360);
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_47_1()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_48_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t OUTLINED_FUNCTION_49_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

uint64_t OUTLINED_FUNCTION_50_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

void OUTLINED_FUNCTION_51_0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;

  specialized MutableCollection<>.sort(by:)(v2, a2);
}

void OUTLINED_FUNCTION_53_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of RankedAction(a1, a2, v2);
}

void OUTLINED_FUNCTION_56_0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of CamParse(a1, v1);
}

uint64_t OUTLINED_FUNCTION_57_0()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t OUTLINED_FUNCTION_58(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;

  return v1(a1, *(_QWORD *)(v2 - 264));
}

uint64_t OUTLINED_FUNCTION_61()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_62()
{
  uint64_t v0;

  return v0 - 192;
}

uint64_t OUTLINED_FUNCTION_63()
{
  return static DispatchQoS.unspecified.getter();
}

double OUTLINED_FUNCTION_65()
{
  uint64_t v0;
  uint64_t v1;

  return *(double *)(v0 + *(int *)(*(_QWORD *)(v1 - 120) + 28));
}

uint64_t OUTLINED_FUNCTION_66()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 352);
}

uint64_t OUTLINED_FUNCTION_67()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_69@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD, uint64_t);

  return v3(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t OUTLINED_FUNCTION_70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD, uint64_t);

  return v3(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t OUTLINED_FUNCTION_71(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t OUTLINED_FUNCTION_73()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_74()
{
  uint64_t v0;

  return v0;
}

char *OUTLINED_FUNCTION_75(char *a1, int64_t a2)
{
  char *v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

id OUTLINED_FUNCTION_76()
{
  return (id)static Log.ranker;
}

void OUTLINED_FUNCTION_79(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of RankedAction(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_80(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_81()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_82()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_83()
{
  return swift_allocObject();
}

void *OUTLINED_FUNCTION_84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = a1;
  *(_QWORD *)(v2 - 136) = v1;
  return _Block_copy((const void *)(v2 - 160));
}

uint64_t OUTLINED_FUNCTION_86()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_88(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_89(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of CamParse(a1, v1);
}

uint64_t OUTLINED_FUNCTION_91()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_92()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 - 256) + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_93@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

void OUTLINED_FUNCTION_94(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of RankedAction(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_96(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t ReflectedStringConvertible.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v26;
  uint64_t v27[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Mirror();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v26 - v11;
  v27[3] = a1;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v1, a1);
  Mirror.init(reflecting:)();
  Mirror.subjectType.getter();
  v27[0] = _typeName(_:qualified:)();
  v27[1] = v14;
  v15._countAndFlagsBits = 40;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  Mirror.superclassMirror.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1)
  {
    outlined destroy of Mirror?((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
    Mirror.children.getter();
    v16 = OUTLINED_FUNCTION_0_19();
    v18 = v17;
    swift_release();
    v26._countAndFlagsBits = v16;
    v26._object = v18;
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = 8236;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  Mirror.children.getter();
  v20 = OUTLINED_FUNCTION_0_19();
  v22 = v21;
  swift_release();
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 41;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  return v27[0];
}

uint64_t outlined destroy of Mirror?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ReflectedStringConvertible.printElements(_:)()
{
  char v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  _OWORD v9[3];
  _QWORD v10[2];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v13 = 0;
  v14 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  outlined init with take of (label: String?, value: Any)?((uint64_t)v9, (uint64_t)v10);
  if (v12)
  {
    v0 = 1;
    do
    {
      v2 = v10[0];
      v1 = (void *)v10[1];
      outlined init with take of Any(&v11, v9);
      if (v1)
      {
        if ((v0 & 1) == 0)
        {
          v3._countAndFlagsBits = 8236;
          v3._object = (void *)0xE200000000000000;
          String.append(_:)(v3);
        }
        v4._countAndFlagsBits = v2;
        v4._object = v1;
        String.append(_:)(v4);
        swift_bridgeObjectRelease();
        v5._countAndFlagsBits = 8250;
        v5._object = (void *)0xE200000000000000;
        String.append(_:)(v5);
        _print_unlocked<A, B>(_:_:)();
        v6._countAndFlagsBits = 0;
        v6._object = (void *)0xE000000000000000;
        String.append(_:)(v6);
        swift_bridgeObjectRelease();
        v0 = 0;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      dispatch thunk of _AnyIteratorBoxBase.next()();
      outlined init with take of (label: String?, value: Any)?((uint64_t)v9, (uint64_t)v10);
    }
    while (v12);
    v7 = v13;
  }
  else
  {
    v7 = 0;
  }
  swift_release_n();
  return v7;
}

uint64_t outlined init with take of (label: String?, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String?, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_19()
{
  return ReflectedStringConvertible.printElements(_:)();
}

uint64_t ActionAmbiguityHeuristicHandler.init(forModelWithName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CamModelMetadata();
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v25 - v11;
  v13 = v2 + OBJC_IVAR____TtC7SiriCam31ActionAmbiguityHeuristicHandler_overrideDisambiguateForRankingEvaluationRate;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  CamModelVersion.init(_:)();
  if (v3)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ActionAmbiguityHeuristicHandler();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v18 = v14;
    v19 = v16;
    v25 = v17;
    v26 = v15;
    type metadata accessor for Locale();
    OUTLINED_FUNCTION_1((uint64_t)v6);
    v20 = (uint64_t)&v10[*(int *)(v7 + 28)];
    OUTLINED_FUNCTION_1(v20);
    v21 = v28;
    *(_QWORD *)v10 = v27;
    *((_QWORD *)v10 + 1) = v21;
    v22 = v26;
    *((_QWORD *)v10 + 2) = v18;
    *((_QWORD *)v10 + 3) = v22;
    v23 = v25;
    *((_QWORD *)v10 + 4) = v19;
    *((_QWORD *)v10 + 5) = v23;
    v10[48] = 2;
    outlined assign with take of Locale?((uint64_t)v6, v20);
    outlined init with take of CamModelMetadata((uint64_t)v10, (uint64_t)v12);
    outlined init with take of CamModelMetadata((uint64_t)v12, v2 + OBJC_IVAR____TtC7SiriCam31ActionAmbiguityHeuristicHandler_modelMetadata);
  }
  return v2;
}

uint64_t ActionAmbiguityHeuristicHandler.getMetadata()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CamModelMetadata(v1 + OBJC_IVAR____TtC7SiriCam31ActionAmbiguityHeuristicHandler_modelMetadata, a1);
}

MLDictionaryFeatureProvider __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActionAmbiguityHeuristicHandler.predict(from:)(Swift::OpaquePointer from)
{
  void *v1;
  NSObject *v2;
  uint64_t v3;
  unint64_t v4;
  id v6;
  double v7;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  Swift::Bool v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  int v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;

  v6 = ActionAmbiguityHeuristicHandler.createFeatureProvider(modelScore:modelDecision:)(0, 0.0);
  if (v3)
    return (MLDictionaryFeatureProvider)v1;
  v1 = v6;
  if (!OUTLINED_FUNCTION_12_4(0xD000000000000024, (uint64_t)"top_two_action_confidence_difference"))
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v9 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v9, (uint64_t)static Logger.ambiguityHandling);
    v10 = OUTLINED_FUNCTION_12_1();
    if (!OUTLINED_FUNCTION_1_14(v10))
      goto LABEL_11;
    v11 = (uint8_t *)OUTLINED_FUNCTION_0_20();
    OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_19_5();
    OUTLINED_FUNCTION_10_7(4.8149e-34);
    v13 = v12 + 8;
LABEL_9:
    v14 = v4 | 0x8000000000000000;
    goto LABEL_10;
  }
  v7 = OUTLINED_FUNCTION_16_6();
  OUTLINED_FUNCTION_20_3();
  v4 = (unint64_t)"onfidence_difference";
  if (!specialized Dictionary.subscript.getter(0xD00000000000001CLL, 0x80000001C2E99640, from._rawValue))
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v20 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v20, (uint64_t)static Logger.ambiguityHandling);
    v21 = OUTLINED_FUNCTION_12_1();
    if (!OUTLINED_FUNCTION_1_14(v21))
      goto LABEL_11;
    v11 = (uint8_t *)OUTLINED_FUNCTION_0_20();
    v34 = OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_10_7(4.8149e-34);
    v14 = 0x80000001C2E99640;
    v13 = 0xD00000000000001CLL;
LABEL_10:
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_88(&dword_1C2E0C000, v2, (os_log_type_t)0x1Cu, "[ActionAmbiguityHeuristicHandler] Feature not found: %s. Returning default prediction output", v11);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }
  v15 = OUTLINED_FUNCTION_16_6();
  OUTLINED_FUNCTION_20_3();
  if (!OUTLINED_FUNCTION_12_4(0xD00000000000001DLL, (uint64_t)"top_two_contains_app_shortcut"))
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v22 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v22, (uint64_t)static Logger.ambiguityHandling);
    v23 = OUTLINED_FUNCTION_12_1();
    if (!OUTLINED_FUNCTION_1_14(v23))
      goto LABEL_11;
    v11 = (uint8_t *)OUTLINED_FUNCTION_0_20();
    OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_19_5();
    OUTLINED_FUNCTION_10_7(4.8149e-34);
    v13 = v24 + 1;
    goto LABEL_9;
  }
  v16 = MLMultiArray.toBoolScalar()();
  OUTLINED_FUNCTION_20_3();
  if (v7 < 0.0)
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_14_1();
    v2 = OUTLINED_FUNCTION_8_1(v17, (uint64_t)static Logger.ambiguityHandling);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v18))
    {
      v19 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_DWORD *)v19 = 134217984;
      OUTLINED_FUNCTION_6_8();
      OUTLINED_FUNCTION_88(&dword_1C2E0C000, v2, v18, "[ActionAmbiguityHeuristicHandler] Cannot resolve ambiguity because top ranked confidence difference is %f. Returning default prediction output", v19);
      OUTLINED_FUNCTION_3();
    }
LABEL_11:

    return (MLDictionaryFeatureProvider)v1;
  }
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v25 = OUTLINED_FUNCTION_14_1();
  v26 = OUTLINED_FUNCTION_8_1(v25, (uint64_t)static Logger.ambiguityHandling);
  v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)OUTLINED_FUNCTION_0_20();
    *(_DWORD *)v28 = 134217984;
    OUTLINED_FUNCTION_6_8();
    OUTLINED_FUNCTION_88(&dword_1C2E0C000, v26, v27, "[ActionAmbiguityHeuristicHandler] Top two action confidence difference is %f", v28);
    OUTLINED_FUNCTION_3();
  }

  v29 = ActionAmbiguityHeuristicHandler.denyDisambiguationOverride(secondTopActionConfidence:topTwoContainsAppShortcut:)(v16, v15);
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_1_14(v31))
  {
    v32 = OUTLINED_FUNCTION_4();
    *(_DWORD *)v32 = 67109376;
    OUTLINED_FUNCTION_13_6();
    *(_WORD *)(v32 + 8) = 1024;
    LODWORD(v34) = v29 & 1;
    OUTLINED_FUNCTION_13_6();
    _os_log_impl(&dword_1C2E0C000, v30, (os_log_type_t)v26, "[ActionAmbiguityHeuristicHandler] isTie: %{BOOL}d isDisambiguationDenyOverride: %{BOOL}d", (uint8_t *)v32, 0xEu);
    OUTLINED_FUNCTION_3();
  }

  v33 = ActionAmbiguityHeuristicHandler.createFeatureProvider(modelScore:modelDecision:)((v7 < 0.01) & (v29 ^ 1u), 1.0 - v7);
  return (MLDictionaryFeatureProvider)v33;
}

id ActionAmbiguityHeuristicHandler.createFeatureProvider(modelScore:modelDecision:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t inited;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0xD000000000000025;
  *(_OWORD *)(inited + 16) = xmmword_1C2E93F60;
  *(_QWORD *)(inited + 40) = 0x80000001C2E9A9D0;
  v6 = type metadata accessor for MLMultiArray();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  lazy protocol witness table accessor for type [Double] and conformance [A](&lazy protocol witness table cache variable for type [Double] and conformance [A], &demangling cache variable for type metadata for [Double]);
  v7 = OUTLINED_FUNCTION_7_8();
  if (v2)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 16) = 0;
    swift_setDeallocating();
    return (id)specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    *(_QWORD *)(inited + 80) = 0xD000000000000021;
    *(_QWORD *)(inited + 72) = v6;
    *(_QWORD *)(inited + 48) = v7;
    *(_QWORD *)(inited + 88) = 0x80000001C2E9AA00;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v8 = OUTLINED_FUNCTION_15_3();
    *(_OWORD *)(v8 + 16) = xmmword_1C2E94230;
    *(double *)(v8 + 32) = a2;
    *(_QWORD *)(inited + 96) = OUTLINED_FUNCTION_7_8();
    *(_QWORD *)(inited + 120) = v6;
    *(_QWORD *)(inited + 128) = 0xD000000000000024;
    *(_QWORD *)(inited + 136) = 0x80000001C2E9AA30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v9 = OUTLINED_FUNCTION_15_3();
    *(_OWORD *)(v9 + 16) = xmmword_1C2E94230;
    *(_QWORD *)(v9 + 32) = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Double] and conformance [A](&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type Int and conformance Int();
    v10 = MLMultiArray.init<A>(_:)();
    *(_QWORD *)(inited + 168) = v6;
    *(_QWORD *)(inited + 144) = v10;
    Dictionary.init(dictionaryLiteral:)();
    v12 = objc_allocWithZone(MEMORY[0x1E0C9E8F8]);
    return @nonobjc MLDictionaryFeatureProvider.init(dictionary:)();
  }
}

uint64_t ActionAmbiguityHeuristicHandler.denyDisambiguationOverride(secondTopActionConfidence:topTwoContainsAppShortcut:)(char a1, double a2)
{
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v10;
  os_log_type_t v11;
  char v12;
  uint64_t v13;
  os_log_type_t v14;

  if ((a1 & 1) != 0)
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v5 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v5, (uint64_t)static Logger.ambiguityHandling);
    v6 = OUTLINED_FUNCTION_47();
    if (!OUTLINED_FUNCTION_7_7(v6))
    {
      v12 = 0;
LABEL_21:

      return v12 & 1;
    }
    v7 = (uint8_t *)OUTLINED_FUNCTION_7_4();
    *(_WORD *)v7 = 0;
    v8 = "[ActionAmbiguityHeuristicHandler] disambiguation not denied since it contains an app shortcut";
LABEL_19:
    _os_log_impl(&dword_1C2E0C000, v2, v3, v8, v7, 2u);
    v12 = a1 ^ 1;
    MEMORY[0x1C3BCB4A4](v7, -1, -1);
    goto LABEL_21;
  }
  if ((CamFeatureFlag.isEnabled.getter(6u) & 1) != 0)
  {
    if (ForcedDisambiguation.decision()())
    {
      if (a2 >= 0.5)
      {
        v12 = 0;
        return v12 & 1;
      }
      if (one-time initialization token for ambiguityHandling != -1)
        swift_once();
      v10 = OUTLINED_FUNCTION_14_1();
      OUTLINED_FUNCTION_8_1(v10, (uint64_t)static Logger.ambiguityHandling);
      v11 = OUTLINED_FUNCTION_47();
      if (OUTLINED_FUNCTION_7_7(v11))
      {
        v7 = (uint8_t *)OUTLINED_FUNCTION_7_4();
        *(_WORD *)v7 = 0;
        v8 = "[ActionAmbiguityHeuristicHandler] disambiguation denied since second top does not have enough confidence";
        goto LABEL_19;
      }
    }
    else
    {
      if (one-time initialization token for ambiguityHandling != -1)
        swift_once();
      v13 = OUTLINED_FUNCTION_14_1();
      OUTLINED_FUNCTION_8_1(v13, (uint64_t)static Logger.ambiguityHandling);
      v14 = OUTLINED_FUNCTION_47();
      if (OUTLINED_FUNCTION_7_7(v14))
      {
        v7 = (uint8_t *)OUTLINED_FUNCTION_7_4();
        *(_WORD *)v7 = 0;
        v8 = "[ActionAmbiguityHeuristicHandler] disambiguation denied for disambiguateAllRankingTies rate limiting. ";
        goto LABEL_19;
      }
    }
    v12 = 1;
    goto LABEL_21;
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t ActionAmbiguityHeuristicHandler.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CamModelMetadata(v0 + OBJC_IVAR____TtC7SiriCam31ActionAmbiguityHeuristicHandler_modelMetadata);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ActionAmbiguityHeuristicHandler()
{
  return type metadata accessor for ActionAmbiguityHeuristicHandler();
}

uint64_t type metadata accessor for ActionAmbiguityHeuristicHandler()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ActionAmbiguityHeuristicHandler;
  if (!type metadata singleton initialization cache for ActionAmbiguityHeuristicHandler)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ActionAmbiguityHeuristicHandler()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CamModelMetadata();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t protocol witness for ModelHandler.getMetadata() in conformance ActionAmbiguityHeuristicHandler@<X0>(uint64_t a1@<X8>)
{
  return ActionAmbiguityHeuristicHandler.getMetadata()(a1);
}

MLDictionaryFeatureProvider protocol witness for ModelHandler.predict(from:) in conformance ActionAmbiguityHeuristicHandler(Swift::OpaquePointer a1)
{
  return ActionAmbiguityHeuristicHandler.predict(from:)(a1);
}

uint64_t outlined destroy of (String, Any)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type [Double] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_20()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_1_14(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_7_8()
{
  return MLMultiArray.init<A>(_:)();
}

void OUTLINED_FUNCTION_10_7(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_12_4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000, v2);
}

uint64_t OUTLINED_FUNCTION_13_6()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_15_3()
{
  return swift_allocObject();
}

double OUTLINED_FUNCTION_16_6()
{
  return MLMultiArray.toDoubleScalar()();
}

void OUTLINED_FUNCTION_20_3()
{
  void *v0;

}

void static CaarFeatureLogger.map(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_25_2();
  v6 = v4 - v5;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v27 - v8;
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99370]), sel_init);
  if (v10)
  {
    v11 = v10;
    v12 = MEMORY[0x1E0DEE9D8];
    v30 = MEMORY[0x1E0DEE9D8];
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v28 = v11;
      v29 = a1;
      v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      v15 = *(_QWORD *)(v3 + 72);
      OUTLINED_FUNCTION_61();
      do
      {
        outlined init with copy of (UUID, [String : MLFeatureValue])(v14, (uint64_t)v9);
        v16 = *(int *)(v2 + 48);
        v17 = type metadata accessor for UUID();
        v18 = *(_QWORD *)(v17 - 8);
        (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v6, v9, v17);
        v19 = *(_QWORD *)&v9[v16];
        *(_QWORD *)(v6 + v16) = v19;
        swift_bridgeObjectRetain();
        static CaarFeatureLogger.extractSelfFeatures(actionFeatures:)(v6, v19);
        v21 = v20;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v6, v17);
        v22 = outlined destroy of (UUID, [String : MLFeatureValue])((uint64_t)v9);
        if (v21)
        {
          MEMORY[0x1C3BCA994](v22);
          if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v14 += v15;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
      v12 = v30;
      v11 = v28;
    }
    outlined bridged method (mbnn) of @objc CAARSchemaCAARFeaturesGenerated.actionFeatureSets.setter(v12, v11);
  }
  else
  {
    if (one-time initialization token for ranker != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.ranker);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1C2E0C000, v24, v25, "Failed to create CAARSchemaCAARFeaturesGenerated SELF message.", v26, 2u);
      MEMORY[0x1C3BCB4A4](v26, -1, -1);
    }

  }
  OUTLINED_FUNCTION_0_2();
}

void static CaarFeatureLogger.extractSelfFeatures(actionFeatures:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  double v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_25_2();
  v8 = v6 - v7;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v59 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]));
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_25_2();
  v15 = v13 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v59 - v17;
  OUTLINED_FUNCTION_56_1((uint64_t)&v59 - v17, a1);
  *(_QWORD *)&v18[*(int *)(v12 + 48)] = a2;
  v19 = objc_allocWithZone(MEMORY[0x1E0D99338]);
  OUTLINED_FUNCTION_3_4();
  v20 = objc_msgSend(v19, sel_init);
  if (!v20)
  {
LABEL_29:
    outlined destroy of (UUID, [String : MLFeatureValue])((uint64_t)v18);
    OUTLINED_FUNCTION_0_2();
    return;
  }
  OUTLINED_FUNCTION_56_1(v15, (uint64_t)v18);
  v60 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v11, v15, v4);
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  OUTLINED_FUNCTION_56_1(v8, (uint64_t)v11);
  OUTLINED_FUNCTION_3_4();
  v21 = SISchemaUUID.__allocating_init(nsuuid:)();
  OUTLINED_FUNCTION_36_2((uint64_t)v21, sel_setActionCandidateId_);

  v22 = (void *)OUTLINED_FUNCTION_17_5(0xD000000000000013, (uint64_t)"is_app_foregrounded");
  if (v22)
  {
    OUTLINED_FUNCTION_14_7(v22);
    OUTLINED_FUNCTION_30_5();
    OUTLINED_FUNCTION_28_4(v23, sel_setIsAppInForeground_);

  }
  v24 = (void *)OUTLINED_FUNCTION_17_5(0xD000000000000014, (uint64_t)"plugin_affinity_rank");
  if (v24)
  {
    v25 = OUTLINED_FUNCTION_14_7(v24);
    OUTLINED_FUNCTION_28_4((uint64_t)v25, sel_setIsTopRankedPlugin_);

  }
  v26 = (void *)OUTLINED_FUNCTION_20_4(0x535F5050415F5349, 0xEF54554354524F48);
  if (v26)
  {
    OUTLINED_FUNCTION_14_7(v26);
    OUTLINED_FUNCTION_30_5();
    OUTLINED_FUNCTION_28_4(v27, sel_setIsAutoshortcut_);

  }
  v28 = (void *)OUTLINED_FUNCTION_20_4(0x705F6C6E5F706F74, 0xEC00000065737261);
  if (v28)
  {
    OUTLINED_FUNCTION_14_7(v28);
    OUTLINED_FUNCTION_30_5();
    OUTLINED_FUNCTION_28_4(v29, sel_setIsTopRankedParse_);

  }
  v30 = (void *)OUTLINED_FUNCTION_20_4(0x65737261705F6C6ELL, 0xEE0061626F72705FLL);
  if (v30)
  {
    v21 = v30;
    objc_msgSend(v30, sel_doubleValue);
    *(float *)&v31 = v31;
    objc_msgSend(v20, sel_setNlParseProbability_, v31);

  }
  v32 = (void *)OUTLINED_FUNCTION_17_5(0xD000000000000016, (uint64_t)"pommes_high_confidence");
  if (v32)
  {
    OUTLINED_FUNCTION_14_7(v32);
    OUTLINED_FUNCTION_30_5();
    OUTLINED_FUNCTION_28_4(v33, sel_setIsHighConfidence_);

  }
  v34 = (void *)OUTLINED_FUNCTION_17_5(0xD000000000000018, (uint64_t)"repeated_flow_handler_id");
  if (v34)
  {
    OUTLINED_FUNCTION_14_7(v34);
    OUTLINED_FUNCTION_30_5();
    OUTLINED_FUNCTION_28_4(v35, sel_setIsRepeatedFlowHandlerId_);

  }
  v36 = (void *)0xD00000000000001ELL;
  v37 = (void *)OUTLINED_FUNCTION_20_4(0xD00000000000001ELL, 0x80000001C2E996E0);
  if (v37)
  {
    v38 = v37;
    objc_msgSend(v37, sel_int64Value);
    OUTLINED_FUNCTION_30_5();
    OUTLINED_FUNCTION_28_4(v39, sel_setIsAmbiguousFirstRunPreviouslyShown_);

  }
  v40 = (void *)OUTLINED_FUNCTION_20_4(0xD00000000000001ELL, 0x80000001C2E9AA60);
  if (v40)
  {
    v36 = v40;
    v41 = objc_msgSend(v40, sel_stringValue);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v43;

    outlined bridged method (mbnn) of @objc CAARSchemaCAARActionFeatureSet.actionIdentifier.setter(v42, v44, v20);
  }
  v45 = (void *)OUTLINED_FUNCTION_20_4(0xD000000000000017, 0x80000001C2E996C0);
  if (!v45)
  {
LABEL_24:
    v47 = (void *)OUTLINED_FUNCTION_20_4(0xD000000000000017, 0x80000001C2E996A0);
    if (v47)
    {
      OUTLINED_FUNCTION_14_7(v47);
      OUTLINED_FUNCTION_30_5();
      OUTLINED_FUNCTION_28_4(v48, sel_setIsAutoShortcutEnabled_);

    }
    v49 = (void *)OUTLINED_FUNCTION_17_5(0xD000000000000025, (uint64_t)"is_interpretable_as_universal_command");
    if (v49)
    {
      OUTLINED_FUNCTION_14_7(v49);
      OUTLINED_FUNCTION_30_5();
      OUTLINED_FUNCTION_28_4(v50, sel_setIsInterpretableAsUniversalCommand_);

    }
    static CaarFeatureLogger.extractAppHistorySelfFeatures(_:)(a2);
    v52 = (void *)v51;
    OUTLINED_FUNCTION_36_2(v51, sel_setAppHistoryFeatures_);

    OUTLINED_FUNCTION_38_2();
    v53 = static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(a2, (Class *)0x1E0D99358, &one-time initialization token for APP_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.APP_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumAppDisambiguationsLastTwoMinutes_, (SEL *)&selRef_setNumAppDisambiguationsLastTenMinutes_, (SEL *)&selRef_setNumAppDisambiguationsLastOneHour_, (SEL *)&selRef_setNumAppDisambiguationsLastSixHours_, (SEL *)&selRef_setNumAppDisambiguationsLastOneDay_, (SEL *)&selRef_setNumAppDisambiguationsLastSevenDays_, (SEL *)&selRef_setNumAppDisambiguationsLastTwentyEightDays_, (SEL *)&selRef_setNumAppDisambiguationsLastInfinity_, &one-time initialization token for SELECTED_APP_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.SELECTED_APP_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumSelectedAppDisambiguationsTwoMinutes_, (SEL *)&selRef_setNumSelectedAppDisambiguationsLastTenMinutes_, (SEL *)&selRef_setNumSelectedAppDisambiguationsLastOneHour_, (SEL *)&selRef_setNumSelectedAppDisambiguationsLastSixHours_, (SEL *)&selRef_setNumSelectedAppDisambiguationsLastOneDay_,
            (SEL *)&selRef_setNumSelectedAppDisambiguationsLastSevenDays_,
            (SEL *)&selRef_setNumSelectedAppDisambiguationsLastTwentyEightDays_,
            (SEL *)&selRef_setNumSelectedAppDisambiguationsLastInfinity_,
            v55,
            v57,
            (SEL *)&selRef_setWasAppSelectedInLastDisambiguation_,
            0xD00000000000002ALL,
            0x80000001C2E99510,
            (SEL *)&selRef_setMinutesSinceLastDisambiguationSameApps_,
            (uint64_t)one-time initialization function for APP_DISAMBIGUATION_FREQ,
            (uint64_t)one-time initialization function for SELECTED_APP_DISAMBIGUATION_FREQ);
    OUTLINED_FUNCTION_36_2((uint64_t)v53, sel_setAppLevelDisambiguationHistory_);

    OUTLINED_FUNCTION_38_2();
    static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(a2, (Class *)0x1E0D99340, &one-time initialization token for ACTION_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.ACTION_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumActionDisambiguationsLastTwoMinutes_, (SEL *)&selRef_setNumActionDisambiguationsLasTenMinutes_, (SEL *)&selRef_setNumActionDisambiguationsLastOneHour_, (SEL *)&selRef_setNumActionDisambiguationsLastSixHours_, (SEL *)&selRef_setNumActionDisambiguationsLastOneDay_, (SEL *)&selRef_setNumActionDisambiguationsLastSevenDays_, (SEL *)&selRef_setNumActionDisambiguationsLastTwentyEightDays_, (SEL *)&selRef_setNumActionDisambiguationsLastInfinity_, &one-time initialization token for SELECTED_ACTION_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.SELECTED_ACTION_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumSelectedActionDisambiguationsLastTwoMinutes_, (SEL *)&selRef_setNumSelectedActionDisambiguationsLastTenMinutes_, (SEL *)&selRef_setNumSelectedActionDisambiguationsLastOneHour_, (SEL *)&selRef_setNumSelectedActionDisambiguationsLastSixHours_, (SEL *)&selRef_setNumSelectedActionDisambiguationsLastOneDay_,
      (SEL *)&selRef_setNumSelectedActionDisambiguationsLastSevenDays_,
      (SEL *)&selRef_setNumSelectedActionDisambiguationsLastTwentyEightDays_,
      (SEL *)&selRef_setNumSelectedActionDisambiguationsLastInfinity_,
      v56,
      v58,
      (SEL *)&selRef_setWasActionSelectedInLastDisambiguation_,
      0xD00000000000002DLL,
      0x80000001C2E995A0,
      (SEL *)&selRef_setMinutesSinceLastDisambiguationForSameActions_,
      (uint64_t)one-time initialization function for ACTION_DISAMBIGUATION_FREQ,
      (uint64_t)one-time initialization function for SELECTED_ACTION_DISAMBIGUATION_FREQ);
    v54 = OUTLINED_FUNCTION_4_13();
    OUTLINED_FUNCTION_36_2(v54, sel_setActionLevelDisambiguationHistory_);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v4);
    goto LABEL_29;
  }
  v46 = (uint64_t)OUTLINED_FUNCTION_14_7(v45);
  if (v46 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v46 <= 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_28_4(v46, sel_setDomainProtectionLevel_);

    goto LABEL_24;
  }
  __break(1u);
}

void static CaarFeatureLogger.extractAppHistorySelfFeatures(_:)(uint64_t a1)
{
  void *v1;
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99350]), sel_init);
  if (!v3)
    goto LABEL_67;
  v4 = v3;
  v5 = (void *)specialized Dictionary.subscript.getter(0xD00000000000001ALL, 0x80000001C2E994C0, a1);
  if (v5)
  {
    v6 = OUTLINED_FUNCTION_57_1(v5);
    v7 = static CaarFeatureLogger.roundToMinutes(seconds:)((uint64_t)v6);
    if ((v7 & 0x100000000) == 0)
      objc_msgSend(v4, sel_setNumMinutesSinceAppLastLaunched_, v7);

  }
  v8 = (void *)specialized Dictionary.subscript.getter(0xD00000000000001BLL, 0x80000001C2E9AA80, a1);
  if (v8)
  {
    v9 = OUTLINED_FUNCTION_57_1(v8);
    v10 = static CaarFeatureLogger.roundToMinutes(seconds:)((uint64_t)v9);
    if ((v10 & 0x100000000) == 0)
      objc_msgSend(v4, sel_setNumMinutesSinceAppInstalled_, v10);

  }
  if (one-time initialization token for APP_LAUNCH_COUNT != -1)
    swift_once();
  v36 = v4;
  v11 = &dword_1ED79B000;
  v12 = static CAARFeatures.APP_LAUNCH_COUNT;
  v13 = *(_QWORD *)(static CAARFeatures.APP_LAUNCH_COUNT + 16);
  if (v13)
  {
    OUTLINED_FUNCTION_61();
    lazy protocol witness table accessor for type String and conformance String();
    v14 = v12 + 40;
    v15 = MEMORY[0x1E0DEE9D8];
    do
    {
      OUTLINED_FUNCTION_36_0();
      if ((OUTLINED_FUNCTION_18_3() & 1) != 0)
      {
        if ((OUTLINED_FUNCTION_26() & 1) == 0)
          OUTLINED_FUNCTION_16_7();
        OUTLINED_FUNCTION_49_1();
        if (v16)
          OUTLINED_FUNCTION_16_7();
        OUTLINED_FUNCTION_43_3();
      }
      else
      {
        OUTLINED_FUNCTION_13();
      }
      v14 += 16;
      --v13;
    }
    while (v13);
    OUTLINED_FUNCTION_47_2();
    v11 = &dword_1ED79B000;
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9D8];
  }
  if (*(_QWORD *)(v15 + 16) == 1)
  {
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_37_4();
    v17 = (void *)OUTLINED_FUNCTION_35_3();
    v18 = OUTLINED_FUNCTION_1_0();
    if (v17)
    {
      v19 = (unint64_t)OUTLINED_FUNCTION_12_0(v18, sel_int64Value);
      if ((v19 & 0x8000000000000000) != 0 || HIDWORD(v19))
        goto LABEL_68;
      objc_msgSend(v36, sel_setNumAppLaunchesLastOneDay_, v19);

    }
  }
  else
  {
    OUTLINED_FUNCTION_37_4();
  }
  v20 = *((_QWORD *)v11 + 287);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    OUTLINED_FUNCTION_61();
    lazy protocol witness table accessor for type String and conformance String();
    v22 = v20 + 40;
    v23 = MEMORY[0x1E0DEE9D8];
    do
    {
      OUTLINED_FUNCTION_36_0();
      if ((OUTLINED_FUNCTION_18_3() & 1) != 0)
      {
        if ((OUTLINED_FUNCTION_26() & 1) == 0)
          OUTLINED_FUNCTION_16_7();
        OUTLINED_FUNCTION_49_1();
        if (v16)
          OUTLINED_FUNCTION_16_7();
        OUTLINED_FUNCTION_43_3();
      }
      else
      {
        OUTLINED_FUNCTION_13();
      }
      v22 += 16;
      --v21;
    }
    while (v21);
    OUTLINED_FUNCTION_47_2();
    v11 = &dword_1ED79B000;
  }
  else
  {
    v23 = MEMORY[0x1E0DEE9D8];
  }
  if (*(_QWORD *)(v23 + 16) == 1)
  {
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_37_4();
    v24 = (void *)OUTLINED_FUNCTION_35_3();
    v25 = OUTLINED_FUNCTION_1_0();
    if (v24)
    {
      v26 = (unint64_t)OUTLINED_FUNCTION_12_0(v25, sel_int64Value);
      if ((v26 & 0x8000000000000000) != 0 || HIDWORD(v26))
        goto LABEL_68;
      objc_msgSend(v36, sel_setNumAppLaunchesLastSevenDays_, v26);

    }
  }
  else
  {
    OUTLINED_FUNCTION_37_4();
  }
  v27 = *((_QWORD *)v11 + 287);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    OUTLINED_FUNCTION_11_3();
    lazy protocol witness table accessor for type String and conformance String();
    v29 = (uint64_t *)(v27 + 40);
    v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v31 = *(v29 - 1);
      v32 = *v29;
      OUTLINED_FUNCTION_36_0();
      if ((OUTLINED_FUNCTION_18_3() & 1) != 0)
      {
        if ((OUTLINED_FUNCTION_26() & 1) == 0)
          OUTLINED_FUNCTION_16_7();
        OUTLINED_FUNCTION_49_1();
        if (v16)
          OUTLINED_FUNCTION_16_7();
        v30[2] = 0xE400000000000000;
        v30[3362809040] = v31;
        v30[3362809041] = v32;
      }
      else
      {
        OUTLINED_FUNCTION_13();
      }
      v29 += 2;
      --v28;
    }
    while (v28);
    OUTLINED_FUNCTION_47_2();
  }
  else
  {
    v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (v30[2] != 1)
  {
    OUTLINED_FUNCTION_37_4();
    goto LABEL_67;
  }
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_37_4();
  v33 = (void *)OUTLINED_FUNCTION_35_3();
  v34 = OUTLINED_FUNCTION_1_0();
  if (!v33)
  {
LABEL_67:
    OUTLINED_FUNCTION_55_0();
    return;
  }
  if (((unint64_t)OUTLINED_FUNCTION_12_0(v34, sel_int64Value) & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_15_4();
    if (!v35)
    {
      objc_msgSend(v36, sel_setNumAppLaunchesLastTwentyEightDays_);

      goto LABEL_67;
    }
  }
LABEL_68:
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_53_1();
  __break(1u);
}

void static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_38_2();
  static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(v0, (Class *)0x1E0D99358, &one-time initialization token for APP_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.APP_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumAppDisambiguationsLastTwoMinutes_, (SEL *)&selRef_setNumAppDisambiguationsLastTenMinutes_, (SEL *)&selRef_setNumAppDisambiguationsLastOneHour_, (SEL *)&selRef_setNumAppDisambiguationsLastSixHours_, (SEL *)&selRef_setNumAppDisambiguationsLastOneDay_, (SEL *)&selRef_setNumAppDisambiguationsLastSevenDays_, (SEL *)&selRef_setNumAppDisambiguationsLastTwentyEightDays_, (SEL *)&selRef_setNumAppDisambiguationsLastInfinity_, &one-time initialization token for SELECTED_APP_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.SELECTED_APP_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumSelectedAppDisambiguationsTwoMinutes_, (SEL *)&selRef_setNumSelectedAppDisambiguationsLastTenMinutes_, (SEL *)&selRef_setNumSelectedAppDisambiguationsLastOneHour_, (SEL *)&selRef_setNumSelectedAppDisambiguationsLastSixHours_, (SEL *)&selRef_setNumSelectedAppDisambiguationsLastOneDay_,
    (SEL *)&selRef_setNumSelectedAppDisambiguationsLastSevenDays_,
    (SEL *)&selRef_setNumSelectedAppDisambiguationsLastTwentyEightDays_,
    (SEL *)&selRef_setNumSelectedAppDisambiguationsLastInfinity_,
    v1,
    v2,
    (SEL *)&selRef_setWasAppSelectedInLastDisambiguation_,
    0xD00000000000002ALL,
    0x80000001C2E99510,
    (SEL *)&selRef_setMinutesSinceLastDisambiguationSameApps_,
    (uint64_t)one-time initialization function for APP_DISAMBIGUATION_FREQ,
    (uint64_t)one-time initialization function for SELECTED_APP_DISAMBIGUATION_FREQ);
  OUTLINED_FUNCTION_55_0();
}

void static CaarFeatureLogger.extractActionLevelDisambiguationHistorySelfFeatures(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_38_2();
  static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(v0, (Class *)0x1E0D99340, &one-time initialization token for ACTION_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.ACTION_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumActionDisambiguationsLastTwoMinutes_, (SEL *)&selRef_setNumActionDisambiguationsLasTenMinutes_, (SEL *)&selRef_setNumActionDisambiguationsLastOneHour_, (SEL *)&selRef_setNumActionDisambiguationsLastSixHours_, (SEL *)&selRef_setNumActionDisambiguationsLastOneDay_, (SEL *)&selRef_setNumActionDisambiguationsLastSevenDays_, (SEL *)&selRef_setNumActionDisambiguationsLastTwentyEightDays_, (SEL *)&selRef_setNumActionDisambiguationsLastInfinity_, &one-time initialization token for SELECTED_ACTION_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.SELECTED_ACTION_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumSelectedActionDisambiguationsLastTwoMinutes_, (SEL *)&selRef_setNumSelectedActionDisambiguationsLastTenMinutes_, (SEL *)&selRef_setNumSelectedActionDisambiguationsLastOneHour_, (SEL *)&selRef_setNumSelectedActionDisambiguationsLastSixHours_, (SEL *)&selRef_setNumSelectedActionDisambiguationsLastOneDay_,
    (SEL *)&selRef_setNumSelectedActionDisambiguationsLastSevenDays_,
    (SEL *)&selRef_setNumSelectedActionDisambiguationsLastTwentyEightDays_,
    (SEL *)&selRef_setNumSelectedActionDisambiguationsLastInfinity_,
    v1,
    v2,
    (SEL *)&selRef_setWasActionSelectedInLastDisambiguation_,
    0xD00000000000002DLL,
    0x80000001C2E995A0,
    (SEL *)&selRef_setMinutesSinceLastDisambiguationForSameActions_,
    (uint64_t)one-time initialization function for ACTION_DISAMBIGUATION_FREQ,
    (uint64_t)one-time initialization function for SELECTED_ACTION_DISAMBIGUATION_FREQ);
  OUTLINED_FUNCTION_55_0();
}

id static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(uint64_t a1, Class *a2, _QWORD *a3, uint64_t a4, SEL *a5, SEL *a6, SEL *a7, SEL *a8, SEL *a9, SEL *a10, SEL *a11, SEL *a12, _QWORD *a13, uint64_t a14, SEL *a15, SEL *a16, SEL *a17, SEL *a18, SEL *a19, SEL *a20,SEL *a21,SEL *a22,uint64_t a23,uint64_t a24,SEL *a25,uint64_t a26,uint64_t a27,SEL *a28,uint64_t a29,uint64_t a30)
{
  id result;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  char v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  SEL *v286;
  SEL *v287;
  SEL *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  id v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  _QWORD v296[2];

  v287 = a7;
  v288 = a8;
  v286 = a6;
  v293 = a1;
  result = objc_msgSend(objc_allocWithZone(*a2), sel_init);
  if (!result)
    return result;
  v292 = result;
  if (*a3 != -1)
    swift_once();
  v34 = *(_QWORD *)a4;
  v35 = *(_QWORD *)(*(_QWORD *)a4 + 16);
  v289 = a4;
  if (v35)
  {
    v285 = (uint64_t)a5;
    OUTLINED_FUNCTION_11_3();
    lazy protocol witness table accessor for type String and conformance String();
    v284 = v34;
    v36 = (uint64_t *)(v34 + 40);
    v37 = MEMORY[0x1E0DEE9D8];
    do
    {
      v39 = (_QWORD *)*(v36 - 1);
      v38 = *v36;
      v294 = v39;
      v295 = v38;
      OUTLINED_FUNCTION_3_4();
      if ((OUTLINED_FUNCTION_19_6() & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v296[0] = v37;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          a3 = v296;
          OUTLINED_FUNCTION_16_7();
          v37 = v296[0];
        }
        v41 = *(_QWORD *)(v37 + 16);
        if (v41 >= *(_QWORD *)(v37 + 24) >> 1)
        {
          a3 = v296;
          OUTLINED_FUNCTION_16_7();
          v37 = v296[0];
        }
        *(_QWORD *)(v37 + 16) = v41 + 1;
        v42 = v37 + 16 * v41;
        *(_QWORD *)(v42 + 32) = v39;
        *(_QWORD *)(v42 + 40) = v38;
      }
      else
      {
        OUTLINED_FUNCTION_2_7();
      }
      v36 += 2;
      --v35;
    }
    while (v35);
    OUTLINED_FUNCTION_47_2();
    a5 = (SEL *)v285;
  }
  else
  {
    v37 = MEMORY[0x1E0DEE9D8];
  }
  if (*(_QWORD *)(v37 + 16) == 1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v37);
    OUTLINED_FUNCTION_3_4();
    v43 = swift_release();
    OUTLINED_FUNCTION_1_15(v43, v44, v45, v46, v47, v48, v49, v50, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, a4, (uint64_t)v292,
      v293);
    v51 = OUTLINED_FUNCTION_4_13();
    if (a3)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v51, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v52)
        goto LABEL_283;
      objc_msgSend(v292, *a5);

    }
  }
  else
  {
    swift_release();
  }
  v53 = *(_QWORD *)a4;
  v54 = *(_QWORD *)(*(_QWORD *)a4 + 16);
  if (v54)
  {
    OUTLINED_FUNCTION_11_3();
    lazy protocol witness table accessor for type String and conformance String();
    v285 = v53;
    v55 = (uint64_t *)(v53 + 40);
    v56 = MEMORY[0x1E0DEE9D8];
    do
    {
      v58 = (_QWORD *)*(v55 - 1);
      v57 = *v55;
      v294 = v58;
      v295 = v57;
      OUTLINED_FUNCTION_3_4();
      if ((OUTLINED_FUNCTION_19_6() & 1) != 0)
      {
        v59 = swift_isUniquelyReferenced_nonNull_native();
        v296[0] = v56;
        if ((v59 & 1) == 0)
        {
          a3 = v296;
          OUTLINED_FUNCTION_16_7();
          v56 = v296[0];
        }
        v60 = *(_QWORD *)(v56 + 16);
        if (v60 >= *(_QWORD *)(v56 + 24) >> 1)
        {
          a3 = v296;
          OUTLINED_FUNCTION_16_7();
          v56 = v296[0];
        }
        *(_QWORD *)(v56 + 16) = v60 + 1;
        v61 = v56 + 16 * v60;
        *(_QWORD *)(v61 + 32) = v58;
        *(_QWORD *)(v61 + 40) = v57;
      }
      else
      {
        OUTLINED_FUNCTION_2_7();
      }
      v55 += 2;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
    a4 = v289;
  }
  else
  {
    v56 = MEMORY[0x1E0DEE9D8];
  }
  if (*(_QWORD *)(v56 + 16) == 1)
  {
    OUTLINED_FUNCTION_44_1();
    OUTLINED_FUNCTION_3_4();
    v62 = OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_1_15(v62, v63, v64, v65, v66, v67, v68, v69, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, (uint64_t)v292,
      v293);
    v70 = OUTLINED_FUNCTION_4_13();
    if (a3)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v70, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v71)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(v286, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
  }
  v72 = *(_QWORD *)a4;
  v73 = *(_QWORD *)(*(_QWORD *)a4 + 16);
  v74 = MEMORY[0x1E0DEE9D8];
  if (v73)
  {
    OUTLINED_FUNCTION_11_3();
    lazy protocol witness table accessor for type String and conformance String();
    v286 = (SEL *)v72;
    v75 = (uint64_t *)(v72 + 40);
    v76 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v78 = (_QWORD *)*(v75 - 1);
      v77 = *v75;
      v294 = v78;
      v295 = v77;
      OUTLINED_FUNCTION_3_4();
      if ((OUTLINED_FUNCTION_19_6() & 1) != 0)
      {
        v79 = swift_isUniquelyReferenced_nonNull_native();
        v296[0] = v76;
        if ((v79 & 1) == 0)
        {
          a3 = v296;
          OUTLINED_FUNCTION_16_7();
          v76 = (_QWORD *)v296[0];
        }
        v80 = v76[2];
        if (v80 >= v76[3] >> 1)
        {
          a3 = v296;
          OUTLINED_FUNCTION_16_7();
          v76 = (_QWORD *)v296[0];
        }
        v76[2] = v80 + 1;
        v81 = &v76[2 * v80];
        v81[4] = v78;
        v81[5] = v77;
      }
      else
      {
        OUTLINED_FUNCTION_2_7();
      }
      v75 += 2;
      --v73;
    }
    while (v73);
    swift_bridgeObjectRelease();
    a4 = v289;
    v74 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v76 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (v76[2] == 1)
  {
    OUTLINED_FUNCTION_44_1();
    OUTLINED_FUNCTION_3_4();
    v82 = OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_1_15(v82, v83, v84, v85, v86, v87, v88, v89, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, (uint64_t)v292,
      v293);
    v90 = OUTLINED_FUNCTION_4_13();
    if (a3)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v90, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v91)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(v287, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
  }
  v92 = *(_QWORD *)a4;
  v296[0] = v74;
  v93 = *(_QWORD *)(v92 + 16);
  if (v93)
  {
    OUTLINED_FUNCTION_11_3();
    lazy protocol witness table accessor for type String and conformance String();
    v287 = (SEL *)v92;
    v94 = (uint64_t *)(v92 + 40);
    a4 = 0xE300000000000000;
    do
    {
      v76 = (_QWORD *)*(v94 - 1);
      v95 = *v94;
      v294 = v76;
      v295 = v95;
      OUTLINED_FUNCTION_3_4();
      v96 = &v294;
      if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      {
        v97 = v296[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_16_7();
          v97 = v296[0];
        }
        v98 = *(_QWORD *)(v97 + 16);
        if (v98 >= *(_QWORD *)(v97 + 24) >> 1)
          OUTLINED_FUNCTION_16_7();
        v96 = v296;
        v99 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v98, (uint64_t)v76, v95);
        destructiveProjectEnumData for FeatureDictionaryError(v99);
      }
      else
      {
        OUTLINED_FUNCTION_2_7();
      }
      v94 += 2;
      --v93;
    }
    while (v93);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_31_2();
    v74 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v96 = (_QWORD *)v74;
  }
  if (v96[2] == 1)
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v100 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v100, v101, v102, v103, v104, v105, v106, v107, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, (uint64_t)v292,
      v293);
    v108 = OUTLINED_FUNCTION_4_13();
    if (v96)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v108, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v109)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(v288, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  v110 = *(_QWORD *)a4;
  v296[0] = v74;
  v111 = *(_QWORD *)(v110 + 16);
  if (v111)
  {
    OUTLINED_FUNCTION_50_1();
    lazy protocol witness table accessor for type String and conformance String();
    v112 = (uint64_t *)(v110 + 40);
    a4 = MEMORY[0x1E0DEA968];
    do
    {
      v76 = (_QWORD *)*(v112 - 1);
      v113 = *v112;
      v294 = v76;
      v295 = v113;
      OUTLINED_FUNCTION_36_0();
      if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
      {
        OUTLINED_FUNCTION_21_5();
        OUTLINED_FUNCTION_3_14();
        v114 = OUTLINED_FUNCTION_45_1();
        destructiveProjectEnumData for FeatureDictionaryError(v114);
      }
      else
      {
        OUTLINED_FUNCTION_13();
      }
      v112 += 2;
      --v111;
    }
    while (v111);
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_31_2();
    v74 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v96 = (_QWORD *)v74;
  }
  if (v96[2] == 1)
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v115 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v115, v116, v117, v118, v119, v120, v121, v122, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, (uint64_t)v292,
      v293);
    v123 = OUTLINED_FUNCTION_4_13();
    if (v96)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v123, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v124)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a9, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  v125 = *(_QWORD *)a4;
  v296[0] = v74;
  v126 = *(_QWORD *)(v125 + 16);
  if (v126)
  {
    OUTLINED_FUNCTION_50_1();
    lazy protocol witness table accessor for type String and conformance String();
    v76 = (_QWORD *)(v125 + 40);
    do
    {
      v127 = *v76;
      v294 = (_QWORD *)*(v76 - 1);
      v295 = v127;
      OUTLINED_FUNCTION_13_7();
      if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
      {
        OUTLINED_FUNCTION_21_5();
        OUTLINED_FUNCTION_3_14();
        v128 = OUTLINED_FUNCTION_6_9();
        destructiveProjectEnumData for FeatureDictionaryError(v128);
      }
      else
      {
        OUTLINED_FUNCTION_24();
      }
      v76 += 2;
      --v126;
    }
    while (v126);
    OUTLINED_FUNCTION_5();
    v74 = v296[0];
    a4 = v289;
  }
  if (specialized Array.count.getter(v74) == 1 && specialized Array._getCount()(v74))
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v74);
    OUTLINED_FUNCTION_3_4();
    v129 = swift_release();
    OUTLINED_FUNCTION_1_15(v129, v130, v131, v132, v133, v134, v135, v136, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, (uint64_t)v292,
      v293);
    v137 = OUTLINED_FUNCTION_4_13();
    if (v96)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v137, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v138)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a10, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, v292);

    }
  }
  else
  {
    swift_release();
  }
  v139 = *(_QWORD *)a4;
  v140 = (void *)specialized ContiguousArray.init()();
  v296[0] = v140;
  v141 = specialized Array._getCount()(v139);
  if (v141)
  {
    v142 = v141;
    if (v141 < 1)
    {
      __break(1u);
      goto LABEL_274;
    }
    OUTLINED_FUNCTION_50_1();
    lazy protocol witness table accessor for type String and conformance String();
    v143 = (uint64_t *)(v139 + 40);
    do
    {
      v76 = (_QWORD *)*(v143 - 1);
      v144 = *v143;
      v294 = v76;
      v295 = v144;
      OUTLINED_FUNCTION_36_0();
      if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      {
        OUTLINED_FUNCTION_21_5();
        OUTLINED_FUNCTION_3_14();
        v145 = OUTLINED_FUNCTION_45_1();
        destructiveProjectEnumData for FeatureDictionaryError(v145);
      }
      else
      {
        OUTLINED_FUNCTION_13();
      }
      v143 += 2;
      --v142;
    }
    while (v142);
    OUTLINED_FUNCTION_5();
    v140 = (void *)v296[0];
  }
  v146 = (uint64_t *)v289;
  if (OUTLINED_FUNCTION_27_4() == 1 && OUTLINED_FUNCTION_26_3())
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v147 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v147, v148, v149, v150, v151, v152, v153, v154, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, (uint64_t)v292,
      v293);
    v155 = OUTLINED_FUNCTION_4_13();
    if (v140)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v155, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v156)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a11, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  v157 = *v146;
  v158 = specialized ContiguousArray.init()();
  if (OUTLINED_FUNCTION_7_9(v158))
  {
    OUTLINED_FUNCTION_33_4();
    if (v159 == v160)
    {
      OUTLINED_FUNCTION_2();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_22_2();
      do
      {
        v161 = *v76;
        v294 = (_QWORD *)*(v76 - 1);
        v295 = v161;
        OUTLINED_FUNCTION_13_7();
        if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
        {
          OUTLINED_FUNCTION_21_5();
          OUTLINED_FUNCTION_3_14();
          v162 = OUTLINED_FUNCTION_6_9();
          destructiveProjectEnumData for FeatureDictionaryError(v162);
        }
        else
        {
          OUTLINED_FUNCTION_24();
        }
        OUTLINED_FUNCTION_34_3();
      }
      while (!v163);
      OUTLINED_FUNCTION_1_0();
      v140 = (void *)v296[0];
      goto LABEL_128;
    }
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }
LABEL_128:
  if (OUTLINED_FUNCTION_27_4() == 1 && OUTLINED_FUNCTION_26_3())
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v164 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v164, v165, v166, v167, v168, v169, v170, v171, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v289, (uint64_t)v292,
      v293);
    v172 = OUTLINED_FUNCTION_4_13();
    if (v140)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v172, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v173)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a12, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v290, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  if (*a13 != -1)
    swift_once();
  v174 = OUTLINED_FUNCTION_32_4();
  v291 = a14;
  if (OUTLINED_FUNCTION_7_9(v174))
  {
    OUTLINED_FUNCTION_33_4();
    if (v159 == v160)
    {
      OUTLINED_FUNCTION_2();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_22_2();
      do
      {
        v175 = *v76;
        v294 = (_QWORD *)*(v76 - 1);
        v295 = v175;
        OUTLINED_FUNCTION_13_7();
        if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
        {
          OUTLINED_FUNCTION_21_5();
          OUTLINED_FUNCTION_3_14();
          v176 = OUTLINED_FUNCTION_6_9();
          destructiveProjectEnumData for FeatureDictionaryError(v176);
        }
        else
        {
          OUTLINED_FUNCTION_24();
        }
        OUTLINED_FUNCTION_34_3();
      }
      while (!v163);
      OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_31_2();
      goto LABEL_146;
    }
LABEL_275:
    __break(1u);
    goto LABEL_276;
  }
LABEL_146:
  if (OUTLINED_FUNCTION_27_4() == 1 && OUTLINED_FUNCTION_26_3())
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v177 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v177, v178, v179, v180, v181, v182, v183, v184, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, a14, (uint64_t)v292,
      v293);
    v185 = OUTLINED_FUNCTION_4_13();
    if (v140)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v185, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v186)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a15, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  v187 = OUTLINED_FUNCTION_32_4();
  if (OUTLINED_FUNCTION_7_9(v187))
  {
    OUTLINED_FUNCTION_33_4();
    if (v159 == v160)
    {
      OUTLINED_FUNCTION_2();
      lazy protocol witness table accessor for type String and conformance String();
      v76 = (_QWORD *)(v157 + 40);
      do
      {
        v188 = *v76;
        v294 = *(_QWORD **)(v157 + 32);
        v295 = v188;
        OUTLINED_FUNCTION_13_7();
        if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
        {
          OUTLINED_FUNCTION_21_5();
          OUTLINED_FUNCTION_3_14();
          v189 = OUTLINED_FUNCTION_6_9();
          destructiveProjectEnumData for FeatureDictionaryError(v189);
        }
        else
        {
          OUTLINED_FUNCTION_24();
        }
        OUTLINED_FUNCTION_34_3();
      }
      while (!v163);
      OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_31_2();
      goto LABEL_162;
    }
LABEL_276:
    __break(1u);
    goto LABEL_277;
  }
LABEL_162:
  if (OUTLINED_FUNCTION_27_4() == 1 && OUTLINED_FUNCTION_26_3())
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v190 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v190, v191, v192, v193, v194, v195, v196, v197, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, (uint64_t)v292,
      v293);
    v198 = OUTLINED_FUNCTION_4_13();
    if (v140)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v198, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v199)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a16, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  v200 = OUTLINED_FUNCTION_32_4();
  if (OUTLINED_FUNCTION_7_9(v200))
  {
    OUTLINED_FUNCTION_33_4();
    if (v159 == v160)
    {
      OUTLINED_FUNCTION_2();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_22_2();
      do
      {
        OUTLINED_FUNCTION_58_0();
        OUTLINED_FUNCTION_13_7();
        if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
        {
          OUTLINED_FUNCTION_21_5();
          OUTLINED_FUNCTION_3_14();
          v201 = OUTLINED_FUNCTION_6_9();
          destructiveProjectEnumData for FeatureDictionaryError(v201);
        }
        else
        {
          OUTLINED_FUNCTION_24();
        }
        OUTLINED_FUNCTION_34_3();
      }
      while (!v163);
      OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_31_2();
      goto LABEL_178;
    }
LABEL_277:
    __break(1u);
    goto LABEL_278;
  }
LABEL_178:
  if (OUTLINED_FUNCTION_27_4() == 1 && OUTLINED_FUNCTION_26_3())
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v202 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v202, v203, v204, v205, v206, v207, v208, v209, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, (uint64_t)v292,
      v293);
    v210 = OUTLINED_FUNCTION_4_13();
    if (v140)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v210, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v211)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a17, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  v212 = OUTLINED_FUNCTION_32_4();
  if (OUTLINED_FUNCTION_7_9(v212))
  {
    OUTLINED_FUNCTION_33_4();
    if (v159 == v160)
    {
      OUTLINED_FUNCTION_2();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_22_2();
      do
      {
        OUTLINED_FUNCTION_58_0();
        OUTLINED_FUNCTION_13_7();
        if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
        {
          OUTLINED_FUNCTION_21_5();
          OUTLINED_FUNCTION_3_14();
          v213 = OUTLINED_FUNCTION_6_9();
          destructiveProjectEnumData for FeatureDictionaryError(v213);
        }
        else
        {
          OUTLINED_FUNCTION_24();
        }
        OUTLINED_FUNCTION_34_3();
      }
      while (!v163);
      OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_31_2();
      goto LABEL_194;
    }
LABEL_278:
    __break(1u);
    goto LABEL_279;
  }
LABEL_194:
  if (OUTLINED_FUNCTION_27_4() == 1 && OUTLINED_FUNCTION_26_3())
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v214 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v214, v215, v216, v217, v218, v219, v220, v221, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, (uint64_t)v292,
      v293);
    v222 = OUTLINED_FUNCTION_4_13();
    if (v140)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v222, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v223)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a18, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  v224 = OUTLINED_FUNCTION_32_4();
  if (OUTLINED_FUNCTION_7_9(v224))
  {
    OUTLINED_FUNCTION_33_4();
    if (v159 == v160)
    {
      OUTLINED_FUNCTION_2();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_22_2();
      do
      {
        v225 = *v76;
        v294 = (_QWORD *)*(v76 - 1);
        v295 = v225;
        OUTLINED_FUNCTION_13_7();
        if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
        {
          OUTLINED_FUNCTION_21_5();
          OUTLINED_FUNCTION_3_14();
          v226 = OUTLINED_FUNCTION_6_9();
          destructiveProjectEnumData for FeatureDictionaryError(v226);
        }
        else
        {
          OUTLINED_FUNCTION_24();
        }
        OUTLINED_FUNCTION_34_3();
      }
      while (!v163);
      OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_31_2();
      goto LABEL_210;
    }
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }
LABEL_210:
  if (OUTLINED_FUNCTION_27_4() == 1 && OUTLINED_FUNCTION_26_3())
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v227 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v227, v228, v229, v230, v231, v232, v233, v234, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, (uint64_t)v292,
      v293);
    v235 = OUTLINED_FUNCTION_4_13();
    if (v140)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v235, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v236)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a19, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  v237 = OUTLINED_FUNCTION_32_4();
  if (OUTLINED_FUNCTION_7_9(v237))
  {
    OUTLINED_FUNCTION_33_4();
    if (v159 == v160)
    {
      OUTLINED_FUNCTION_2();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_22_2();
      do
      {
        v238 = *v76;
        v294 = (_QWORD *)*(v76 - 1);
        v295 = v238;
        OUTLINED_FUNCTION_13_7();
        if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
        {
          OUTLINED_FUNCTION_21_5();
          OUTLINED_FUNCTION_3_14();
          v239 = OUTLINED_FUNCTION_6_9();
          destructiveProjectEnumData for FeatureDictionaryError(v239);
        }
        else
        {
          OUTLINED_FUNCTION_24();
        }
        OUTLINED_FUNCTION_34_3();
      }
      while (!v163);
      OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_31_2();
      goto LABEL_226;
    }
LABEL_280:
    __break(1u);
    goto LABEL_281;
  }
LABEL_226:
  if (OUTLINED_FUNCTION_27_4() == 1 && OUTLINED_FUNCTION_26_3())
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v240 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v240, v241, v242, v243, v244, v245, v246, v247, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, (uint64_t)v292,
      v293);
    v248 = OUTLINED_FUNCTION_4_13();
    if (v140)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v248, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v249)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a20, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  v250 = OUTLINED_FUNCTION_32_4();
  if (OUTLINED_FUNCTION_7_9(v250))
  {
    OUTLINED_FUNCTION_33_4();
    if (v159 == v160)
    {
      OUTLINED_FUNCTION_2();
      lazy protocol witness table accessor for type String and conformance String();
      v76 = (_QWORD *)(v157 + 40);
      do
      {
        v251 = *v76;
        v294 = *(_QWORD **)(v157 + 32);
        v295 = v251;
        OUTLINED_FUNCTION_13_7();
        if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
        {
          OUTLINED_FUNCTION_21_5();
          OUTLINED_FUNCTION_3_14();
          v252 = OUTLINED_FUNCTION_6_9();
          destructiveProjectEnumData for FeatureDictionaryError(v252);
        }
        else
        {
          OUTLINED_FUNCTION_24();
        }
        OUTLINED_FUNCTION_34_3();
      }
      while (!v163);
      OUTLINED_FUNCTION_1_0();
      OUTLINED_FUNCTION_31_2();
      goto LABEL_242;
    }
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }
LABEL_242:
  if (OUTLINED_FUNCTION_27_4() == 1 && OUTLINED_FUNCTION_26_3())
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_9_8();
    v253 = OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_1_15(v253, v254, v255, v256, v257, v258, v259, v260, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, (uint64_t)v292,
      v293);
    v261 = OUTLINED_FUNCTION_4_13();
    if (v140)
    {
      if (((unint64_t)OUTLINED_FUNCTION_12_0(v261, sel_int64Value) & 0x8000000000000000) != 0)
        goto LABEL_283;
      OUTLINED_FUNCTION_15_4();
      if (v262)
        goto LABEL_283;
      OUTLINED_FUNCTION_5_9(a21, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, v292);

    }
  }
  else
  {
    OUTLINED_FUNCTION_45();
  }
  v263 = OUTLINED_FUNCTION_32_4();
  if (OUTLINED_FUNCTION_7_9(v263))
  {
    OUTLINED_FUNCTION_33_4();
    if (v159 == v160)
    {
      OUTLINED_FUNCTION_2();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_22_2();
      do
      {
        v264 = *v76;
        v294 = (_QWORD *)*(v76 - 1);
        v295 = v264;
        OUTLINED_FUNCTION_13_7();
        if ((OUTLINED_FUNCTION_0_21() & 1) != 0)
        {
          OUTLINED_FUNCTION_21_5();
          OUTLINED_FUNCTION_3_14();
          v265 = OUTLINED_FUNCTION_6_9();
          destructiveProjectEnumData for FeatureDictionaryError(v265);
        }
        else
        {
          OUTLINED_FUNCTION_24();
        }
        OUTLINED_FUNCTION_34_3();
      }
      while (!v163);
      OUTLINED_FUNCTION_1_0();
      v140 = (void *)v296[0];
      goto LABEL_258;
    }
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }
LABEL_258:
  if (OUTLINED_FUNCTION_27_4() != 1 || !OUTLINED_FUNCTION_26_3())
  {
    OUTLINED_FUNCTION_45();
    goto LABEL_265;
  }
  OUTLINED_FUNCTION_2_18();
  OUTLINED_FUNCTION_9_8();
  v266 = OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_1_15(v266, v267, v268, v269, v270, v271, v272, v273, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, (uint64_t)v292,
    v293);
  v274 = OUTLINED_FUNCTION_4_13();
  if (v140)
  {
    if (((unint64_t)OUTLINED_FUNCTION_12_0(v274, sel_int64Value) & 0x8000000000000000) == 0)
    {
      OUTLINED_FUNCTION_15_4();
      if (!v275)
      {
        OUTLINED_FUNCTION_5_9(a22, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, v292);

        goto LABEL_265;
      }
    }
LABEL_283:
    OUTLINED_FUNCTION_4_1();
    result = (id)OUTLINED_FUNCTION_53_1();
    __break(1u);
    return result;
  }
LABEL_265:
  v276 = (void *)specialized Dictionary.subscript.getter(a23, a24, v293);
  if (v276)
  {
    v277 = v276;
    objc_msgSend(v276, sel_int64Value);
    OUTLINED_FUNCTION_30_5();
    objc_msgSend(v292, *a25);

  }
  v278 = (void *)specialized Dictionary.subscript.getter(a26, a27, v293);
  if (v278)
  {
    v279 = v278;
    if ((static CaarFeatureLogger.roundToMinutes(seconds:)((uint64_t)objc_msgSend(v278, sel_int64Value)) & 0x100000000) == 0)
      OUTLINED_FUNCTION_5_9(a28, v280, v281, v282, v283, v284, v285, (uint64_t)v286, (uint64_t)v287, (uint64_t)v288, v291, v292);

  }
  return v292;
}

uint64_t static CaarFeatureLogger.roundToMinutes(seconds:)(uint64_t result)
{
  double v1;
  uint64_t v2;

  if (result < 0)
  {
    v2 = 0;
    return v2 | ((unint64_t)(result < 0) << 32);
  }
  v1 = floor((double)result / 60.0);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v1 < 4294967300.0)
  {
    v2 = v1;
    return v2 | ((unint64_t)(result < 0) << 32);
  }
LABEL_10:
  __break(1u);
  return result;
}

void outlined bridged method (mbnn) of @objc CAARSchemaCAARFeaturesGenerated.actionFeatureSets.setter(uint64_t a1, void *a2)
{
  Class isa;

  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARActionFeatureSet);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setActionFeatureSets_, isa);

}

void outlined bridged method (mbnn) of @objc CAARSchemaCAARActionFeatureSet.actionIdentifier.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x1C3BCA844]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setActionIdentifier_, v4);

}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_1_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;

  return specialized Dictionary.subscript.getter(v20, v21, a20);
}

unint64_t OUTLINED_FUNCTION_2_18()
{
  uint64_t v0;

  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v0);
}

void OUTLINED_FUNCTION_3_14()
{
  uint64_t v0;

  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(*(_QWORD *)(v0 - 96) + 16));
}

uint64_t OUTLINED_FUNCTION_4_13()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_5_9@<X0>(SEL *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  return objc_msgSend(a12, *a1);
}

uint64_t OUTLINED_FUNCTION_6_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_7_9(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = a1;
  return specialized Array._getCount()(v1);
}

uint64_t OUTLINED_FUNCTION_9_8()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  return swift_bridgeObjectRetain();
}

id OUTLINED_FUNCTION_14_7(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 1480));
}

void OUTLINED_FUNCTION_16_7()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_17_5@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000, v2);
}

uint64_t OUTLINED_FUNCTION_18_3()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_19_6()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_20_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1, a2, v2);
}

void OUTLINED_FUNCTION_21_5()
{
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_26_3()
{
  uint64_t v0;

  return specialized Array._getCount()(v0);
}

uint64_t OUTLINED_FUNCTION_27_4()
{
  uint64_t v0;

  return specialized Array.count.getter(v0);
}

id OUTLINED_FUNCTION_28_4(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_32_4()
{
  return specialized ContiguousArray.init()();
}

uint64_t OUTLINED_FUNCTION_35_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return specialized Dictionary.subscript.getter(v0, v1, v2);
}

id OUTLINED_FUNCTION_36_2(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_37_4()
{
  return swift_release();
}

void OUTLINED_FUNCTION_43_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = v3;
  v5 = v1 + 16 * v0;
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = v2;
}

unint64_t OUTLINED_FUNCTION_44_1()
{
  uint64_t v0;

  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v0);
}

uint64_t OUTLINED_FUNCTION_45_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_47_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_50_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_53_1()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_56_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

id OUTLINED_FUNCTION_57_1(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 1480));
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = OUTLINED_FUNCTION_23_5();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (OUTLINED_FUNCTION_23_5() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

void static AmbiguousFirstRunHelper.recordAmbiguousFirstRunShown(bundleId:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  if (one-time initialization token for common != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.common);
  swift_bridgeObjectRetain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_QWORD *)&v23 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2E0C000, v5, v6, "Storing ambiguous first run shown for %s", v7, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  v8 = swift_bridgeObjectRelease_n();
  OUTLINED_FUNCTION_24_4(v8, 0x80000001C2E9AAA0, v9, v10, v11, v12, v13, v14, v20, v21, v23);
  if (v24)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_21_6())
    {
      v15 = v22;
      goto LABEL_10;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v23);
  }
  v15 = MEMORY[0x1E0DEE9D8];
LABEL_10:
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_29_5();
    v15 = v18;
  }
  v16 = *(_QWORD *)(v15 + 16);
  if (v16 >= *(_QWORD *)(v15 + 24) >> 1)
  {
    OUTLINED_FUNCTION_29_5();
    v15 = v19;
  }
  *(_QWORD *)(v15 + 16) = v16 + 1;
  v17 = v15 + 16 * v16;
  *(_QWORD *)(v17 + 32) = a1;
  *(_QWORD *)(v17 + 40) = a2;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)&v23 = v15;
  static CamUserHistoryDefaultsManager.setValue(key:value:)();
}

uint64_t static AmbiguousFirstRunHelper.ambiguousFirstRunPreviouslyShown(bundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;

  OUTLINED_FUNCTION_24_4(a1, 0x80000001C2E9AAA0, a3, a4, a5, a6, a7, a8, v13, v14, v16);
  if (!v17)
  {
    outlined destroy of Any?((uint64_t)&v16);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!OUTLINED_FUNCTION_21_6())
  {
LABEL_5:
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_6;
  }
  v10 = v15;
LABEL_6:
  v11 = specialized Sequence<>.contains(_:)(a1, a2, v10);
  swift_bridgeObjectRelease();
  return v11 & 1;
}

void specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_4_12();
    __break(1u);
  }
  else
  {
    if (a1)
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = a1;
    OUTLINED_FUNCTION_19_7();
  }
}

{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_4_12();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      type metadata accessor for RankedAction();
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = a1;
    }
    type metadata accessor for RankedAction();
    OUTLINED_FUNCTION_17_6();
    OUTLINED_FUNCTION_19_7();
  }
}

{
  specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for ActionProtocol);
}

{
  specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (offset: Int, element: Double));
}

void specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_4_12();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName(a2);
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = a1;
    }
    OUTLINED_FUNCTION_19_7();
  }
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_20_5();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_38();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  OUTLINED_FUNCTION_10_8();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v5 = (const void *)OUTLINED_FUNCTION_39();
    v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_27_5((uint64_t)(v6 - 32) / 16);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)OUTLINED_FUNCTION_25_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_4_14();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_8_10();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
  OUTLINED_FUNCTION_31();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  size_t v7;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_20_5();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_38();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  OUTLINED_FUNCTION_10_8();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Domain3PProtectionLevel>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_39();
    v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * v7 - 64;
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)OUTLINED_FUNCTION_25_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_4_14();
  }
  else
  {
    v11 = OUTLINED_FUNCTION_8_10();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
  OUTLINED_FUNCTION_31();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_20_5();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_38();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  OUTLINED_FUNCTION_10_8();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v5 = (const void *)OUTLINED_FUNCTION_39();
    v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_27_5((uint64_t)(v6 - 32) / 8);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)OUTLINED_FUNCTION_25_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_4_14();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_8_10();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
  OUTLINED_FUNCTION_31();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_20_5();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_38();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  OUTLINED_FUNCTION_10_8();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
    v5 = (const void *)OUTLINED_FUNCTION_39();
    v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_27_5((uint64_t)(v6 - 32) / 8);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)OUTLINED_FUNCTION_25_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_4_14();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_8_10();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
  OUTLINED_FUNCTION_31();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_20_5();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_38();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  OUTLINED_FUNCTION_10_8();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Int)>);
    v5 = (const void *)OUTLINED_FUNCTION_39();
    v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_27_5((uint64_t)(v6 - 32) / 24);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)OUTLINED_FUNCTION_25_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_4_14();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_8_10();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
  OUTLINED_FUNCTION_32_0();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const void *v12;
  size_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_20_5();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_38();
      if (v5)
      {
        __break(1u);
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  else
  {
    v4 = v2;
  }
  v7 = *(_QWORD *)(v0 + 16);
  if (v4 <= v7)
    v8 = *(_QWORD *)(v0 + 16);
  else
    v8 = v4;
  if (!v8)
    goto LABEL_17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(flowHandlerId: String, parseId: UUID, affinityScore: Int)>);
  v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int))
                 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = (const void *)swift_allocObject();
  v13 = _swift_stdlib_malloc_size(v12);
  if (!v10 || (v13 - v11 == 0x8000000000000000 ? (v14 = v10 == -1) : (v14 = 0), v14))
  {
LABEL_22:
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_33_5();
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_27_5((uint64_t)(v13 - v11) / v10);
LABEL_17:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int));
  OUTLINED_FUNCTION_17_6();
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v0 + v15, v7);
    OUTLINED_FUNCTION_4_14();
  }
  else
  {
    v16 = OUTLINED_FUNCTION_8_10();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v16, v17, v18, v19);
  }
  OUTLINED_FUNCTION_18_4();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SignalProviding>);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Float>, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRDataSourceMetadataValue>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3DC8]);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UncertaintyPromptActionEnforcer>);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ActionHandler>);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AutoConfirmActionEnforcer>);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD, uint64_t, _QWORD *, uint64_t), void (*a7)(uint64_t, uint64_t, _QWORD *))
{
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_38();
      if (v12)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (v15)
  {
    OUTLINED_FUNCTION_36(a1, a2, a3, a4, a5);
    v16 = (_QWORD *)OUTLINED_FUNCTION_39();
    v17 = _swift_stdlib_malloc_size(v16);
    v16[2] = v14;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 4);
  }
  else
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v18 = v16 + 4;
  if ((v10 & 1) != 0)
  {
    a7(a4 + 32, v14, v18);
    OUTLINED_FUNCTION_4_14();
  }
  else
  {
    a6(0, v14, v18, a4);
  }
  OUTLINED_FUNCTION_32_0();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v6 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_38();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  else
  {
    v7 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(a4 + 16);
  else
    v11 = v7;
  if (v11)
  {
    OUTLINED_FUNCTION_36(a1, a2, a3, a4, a5);
    v12 = OUTLINED_FUNCTION_39();
    v13 = _swift_stdlib_malloc_size((const void *)v12);
    *(_QWORD *)(v12 + 16) = v10;
    *(_QWORD *)(v12 + 24) = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  if ((v6 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, (char *)(v12 + 32));
    OUTLINED_FUNCTION_4_14();
  }
  else
  {
    v14 = OUTLINED_FUNCTION_30_6();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v14, v15, v16, v17, v18);
  }
  OUTLINED_FUNCTION_32_0();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);

  v8 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_15_0();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_38();
      if (v10)
      {
        __break(1u);
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_13_0();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (!v13)
    goto LABEL_17;
  OUTLINED_FUNCTION_36(a1, a2, a3, a4, a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = (_QWORD *)swift_allocObject();
  v18 = _swift_stdlib_malloc_size(v17);
  if (!v15 || (v18 - v16 == 0x8000000000000000 ? (v19 = v15 == -1) : (v19 = 0), v19))
  {
LABEL_22:
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_33_5();
    __break(1u);
    return;
  }
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_17:
  a6(0);
  OUTLINED_FUNCTION_17_6();
  if ((v8 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v20, v12);
    OUTLINED_FUNCTION_4_14();
  }
  else
  {
    v21 = OUTLINED_FUNCTION_30_6();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v21, v22, v23, v24, v25);
  }
  OUTLINED_FUNCTION_18_4();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int))
                   - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = &__dst[4 * v4];
    if (v5 >= v6 || &v5[4 * v4] <= __dst)
    {
      memcpy(__dst, v5, 4 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v14;
    }
  }
  OUTLINED_FUNCTION_4_1();
  result = OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      OUTLINED_FUNCTION_36(a1, a2, a3, a4, a5);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  OUTLINED_FUNCTION_4_1();
  result = OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    result = (char *)OUTLINED_FUNCTION_1_16();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_19(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    result = (char *)OUTLINED_FUNCTION_1_16();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_19(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    result = (char *)OUTLINED_FUNCTION_1_16();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_19(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    result = (char *)OUTLINED_FUNCTION_1_16();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_19(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  char v6;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_1_16();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_28_5();
    if (v5 && (__swift_instantiateConcreteTypeFromMangledName(v4), OUTLINED_FUNCTION_31_3(), !v6 & v5))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_26_4();
      }
      else
      {
        OUTLINED_FUNCTION_9_9();
        OUTLINED_FUNCTION_14_8();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(v4);
      OUTLINED_FUNCTION_9_9();
      OUTLINED_FUNCTION_15_5();
    }
  }
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  char v5;
  char v6;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_1_16();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_28_5();
    if (v5 && (v4(0), OUTLINED_FUNCTION_31_3(), !v6 & v5))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_26_4();
      }
      else
      {
        OUTLINED_FUNCTION_9_9();
        OUTLINED_FUNCTION_14_8();
      }
    }
    else
    {
      v4(0);
      OUTLINED_FUNCTION_9_9();
      OUTLINED_FUNCTION_15_5();
    }
  }
}

uint64_t dispatch thunk of static AmbiguousFirstRunHelping.ambiguousFirstRunPreviouslyShown(bundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static AmbiguousFirstRunHelping.recordAmbiguousFirstRunShown(bundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for AmbiguousFirstRunHelper()
{
  return &type metadata for AmbiguousFirstRunHelper;
}

uint64_t OUTLINED_FUNCTION_1_16()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void *OUTLINED_FUNCTION_2_19@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_3_15()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_4_14()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_10()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_9_9()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_14_8()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t OUTLINED_FUNCTION_15_5()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t OUTLINED_FUNCTION_21_6()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_23_5()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_24_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  return static CamUserHistoryDefaultsManager.getValue(key:)(&a11);
}

uint64_t OUTLINED_FUNCTION_25_4()
{
  uint64_t v0;

  return v0 + 32;
}

void OUTLINED_FUNCTION_27_5(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * a1;
}

void OUTLINED_FUNCTION_29_5()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_30_6()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_33_5()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void specialized ActionProtocol.inferBundleId()()
{
  specialized ActionProtocol.inferBundleId()((uint64_t (*)(_QWORD))type metadata accessor for ActionCandidate);
}

void specialized ActionProtocol.inferBundleId()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t (*v37)(_QWORD);
  void *v38;
  uint64_t v39;
  void **v40;
  uint64_t *v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  void *v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  unint64_t v51;
  unint64_t v52;
  uint64_t (*v53)(_QWORD);
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t isa;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  char *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t *v113;
  _QWORD *v114;
  uint64_t (*v115)(_QWORD);
  uint64_t v116;
  _QWORD *v117;

  v5 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_Sash?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_37_5();
  v112 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash();
  v110 = *(_QWORD *)(v112 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v7);
  v109 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v9);
  v111 = (char *)&v104 - v10;
  v115 = a1;
  v11 = a1(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_2_12();
  v113 = (uint64_t *)v13;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_13_3();
  v105 = (uint64_t *)v15;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_13_3();
  v106 = (uint64_t *)v17;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v18);
  v20 = ((char *)&v104 - v19);
  OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_36_3();
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (void **)((char *)&v104 - v24);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v104 - v26;
  v107 = type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v28);
  OUTLINED_FUNCTION_2_12();
  v108 = v29;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v30);
  v32 = (uint64_t *)((char *)&v104 - v31);
  v33 = *(int *)(v11 + 20);
  v114 = (_QWORD *)v5;
  v34 = v5 + v33;
  OUTLINED_FUNCTION_94(v5 + v33, (uint64_t)v27);
  if (OUTLINED_FUNCTION_64_0())
  {
    v35 = type metadata accessor for CamParse;
    v36 = (uint64_t)v27;
  }
  else
  {
    v48 = OUTLINED_FUNCTION_48_2();
    outlined init with take of CamModelMetadata(v48, v49, v50);
    v104 = CamUSOParse.appShortcutInvocation.getter();
    if (v51)
    {
      v52 = v51;
      v113 = v32;
      v53 = v115;
      if (one-time initialization token for common != -1)
        swift_once();
      v54 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v54, (uint64_t)static Logger.common);
      outlined init with copy of RankedAction((uint64_t)v114, (uint64_t)v20, v53);
      OUTLINED_FUNCTION_21_7();
      OUTLINED_FUNCTION_21_7();
      Logger.logObject.getter();
      v55 = OUTLINED_FUNCTION_6_6();
      if (OUTLINED_FUNCTION_24_5(v55))
      {
        v56 = OUTLINED_FUNCTION_4();
        v114 = (_QWORD *)OUTLINED_FUNCTION_4();
        v117 = v114;
        *(_DWORD *)v56 = 136315394;
        isa = (uint64_t)v20->isa;
        OUTLINED_FUNCTION_36_0();
        v116 = OUTLINED_FUNCTION_62_0(isa, v58, (uint64_t *)&v117);
        OUTLINED_FUNCTION_9_10();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_55_1();
        *(_WORD *)(v56 + 12) = 2080;
        swift_bridgeObjectRetain();
        v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v52, (uint64_t *)&v117);
        OUTLINED_FUNCTION_9_10();
        OUTLINED_FUNCTION_1_10();
        OUTLINED_FUNCTION_41_3();
        OUTLINED_FUNCTION_13_8(&dword_1C2E0C000, v59, v60, "Inferring bundle for %s from AS invocation = %s");
        OUTLINED_FUNCTION_14_9();
        OUTLINED_FUNCTION_3();
      }
      OUTLINED_FUNCTION_1_10();
      OUTLINED_FUNCTION_1_10();

      OUTLINED_FUNCTION_55_1();
      outlined destroy of CamParse((uint64_t)v113, type metadata accessor for CamUSOParse);
      OUTLINED_FUNCTION_24();
      goto LABEL_39;
    }
    v35 = type metadata accessor for CamUSOParse;
    v36 = (uint64_t)v32;
  }
  outlined destroy of CamParse(v36, v35);
  v37 = v115;
  outlined init with copy of RankedAction(v34, (uint64_t)v25, type metadata accessor for CamParse);
  if (OUTLINED_FUNCTION_64_0() == 1)
  {
    v38 = *v25;
    PommesResponse.sash()(v2);
    v39 = v112;
    if (__swift_getEnumTagSinglePayload(v2, 1, v112) != 1)
    {
      v88 = v110;
      v87 = v111;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v111, v2, v39);
      if (one-time initialization token for common != -1)
        swift_once();
      v89 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v89, (uint64_t)static Logger.common);
      v90 = v106;
      OUTLINED_FUNCTION_94((uint64_t)v114, (uint64_t)v106);
      v91 = v109;
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v109, v87, v39);
      Logger.logObject.getter();
      v92 = OUTLINED_FUNCTION_42_1();
      if (os_log_type_enabled(v20, v92))
      {
        v93 = OUTLINED_FUNCTION_4();
        v94 = OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_40_1(v94);
        *(_DWORD *)v93 = 136315394;
        v95 = v39;
        v96 = *v90;
        OUTLINED_FUNCTION_36_0();
        v98 = OUTLINED_FUNCTION_62_0(v96, v97, (uint64_t *)&v117);
        OUTLINED_FUNCTION_35_4(v98);
        OUTLINED_FUNCTION_45_2();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_27_3((uint64_t)v90);
        *(_WORD *)(v93 + 12) = 2080;
        v99 = v109;
        v100 = Apple_Parsec_Siri_V2alpha_Sash.appID.getter();
        v116 = OUTLINED_FUNCTION_8_11(v100, v101);
        OUTLINED_FUNCTION_45_2();
        OUTLINED_FUNCTION_12();
        (*(void (**)(char *, uint64_t))(v110 + 8))(v99, v95);
        OUTLINED_FUNCTION_16_8(&dword_1C2E0C000, v20, v92, "Inferring bundle for %s from sash = %s", (uint8_t *)v93);
        OUTLINED_FUNCTION_14_9();
        OUTLINED_FUNCTION_3();
      }
      OUTLINED_FUNCTION_27_3((uint64_t)v90);
      v102 = *(void (**)(char *, uint64_t))(v88 + 8);
      v102(v91, v39);

      v103 = v111;
      Apple_Parsec_Siri_V2alpha_Sash.appID.getter();

      v102(v103, v39);
      goto LABEL_39;
    }

    outlined destroy of RRDataSourceMetadataValue?(v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_Sash?);
  }
  else
  {
    outlined destroy of CamParse((uint64_t)v25, type metadata accessor for CamParse);
  }
  v41 = v113;
  v40 = (void **)v114;
  outlined init with copy of RankedAction(v34, v3, type metadata accessor for CamParse);
  if (OUTLINED_FUNCTION_64_0())
  {
    v42 = type metadata accessor for CamParse;
    v43 = v3;
LABEL_9:
    outlined destroy of CamParse(v43, v42);
    v44 = *v40;
    OUTLINED_FUNCTION_61();
    v45._countAndFlagsBits = OUTLINED_FUNCTION_48_2();
    PluginToBundleMap.init(rawValue:)(v45);
    if (v117 == 32)
    {
      v46 = 0;
      v47 = 0;
    }
    else
    {
      v46 = OUTLINED_FUNCTION_72_0((char)v117);
      v47 = v61;
    }
    if (one-time initialization token for common != -1)
      swift_once();
    v62 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_94((uint64_t)v40, (uint64_t)v41);
    OUTLINED_FUNCTION_21_7();
    Logger.logObject.getter();
    v63 = OUTLINED_FUNCTION_6_6();
    if (OUTLINED_FUNCTION_24_5(v63))
    {
      v64 = OUTLINED_FUNCTION_4();
      v65 = OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_40_1(v65);
      *(_DWORD *)v64 = 136315394;
      v66 = *v41;
      OUTLINED_FUNCTION_10_3();
      v68 = OUTLINED_FUNCTION_68(v66, v67, (uint64_t *)&v117);
      OUTLINED_FUNCTION_35_4(v68);
      OUTLINED_FUNCTION_17_7();
      OUTLINED_FUNCTION_24();
      outlined destroy of CamParse((uint64_t)v41, v37);
      *(_WORD *)(v64 + 12) = 2080;
      if (v47)
        v69 = v46;
      else
        v69 = 7104878;
      OUTLINED_FUNCTION_8_5();
      v116 = OUTLINED_FUNCTION_68(v69, v70, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_1_10();
      OUTLINED_FUNCTION_24();
      OUTLINED_FUNCTION_13_8(&dword_1C2E0C000, v71, v72, "Inferring bundle for %s from plugin mapping = %s");
      OUTLINED_FUNCTION_14_9();
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_27_3((uint64_t)v41);

    OUTLINED_FUNCTION_1_10();
    goto LABEL_39;
  }
  v73 = v108;
  outlined init with take of CamModelMetadata(v3, v108, type metadata accessor for CamUSOParse);
  v74 = (uint64_t *)(v73 + *(int *)(v107 + 24));
  if (!v74[1])
  {
    v42 = type metadata accessor for CamUSOParse;
    v43 = v73;
    goto LABEL_9;
  }
  v75 = *v74;
  v76 = (void *)one-time initialization token for common;
  OUTLINED_FUNCTION_36_0();
  if (v76 != (void *)-1)
    swift_once();
  v77 = OUTLINED_FUNCTION_14_1();
  __swift_project_value_buffer(v77, (uint64_t)static Logger.common);
  v78 = v105;
  OUTLINED_FUNCTION_94((uint64_t)v40, (uint64_t)v105);
  OUTLINED_FUNCTION_21_7();
  Logger.logObject.getter();
  v79 = OUTLINED_FUNCTION_6_6();
  if (OUTLINED_FUNCTION_24_5(v79))
  {
    v80 = OUTLINED_FUNCTION_4();
    v81 = OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_40_1(v81);
    *(_DWORD *)v80 = 136315394;
    v82 = *v78;
    OUTLINED_FUNCTION_10_3();
    v116 = OUTLINED_FUNCTION_68(v82, v83, (uint64_t *)&v117);
    OUTLINED_FUNCTION_9_10();
    OUTLINED_FUNCTION_24();
    OUTLINED_FUNCTION_27_3((uint64_t)v78);
    *(_WORD *)(v80 + 12) = 2080;
    OUTLINED_FUNCTION_36_0();
    v116 = OUTLINED_FUNCTION_62_0(v75, v84, (uint64_t *)&v117);
    OUTLINED_FUNCTION_9_10();
    OUTLINED_FUNCTION_41_3();
    OUTLINED_FUNCTION_13_8(&dword_1C2E0C000, v85, v86, "Inferring bundle for %s from USO parse = %s");
    OUTLINED_FUNCTION_14_9();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_1_10();

  OUTLINED_FUNCTION_27_3((uint64_t)v78);
  outlined destroy of CamParse(v73, type metadata accessor for CamUSOParse);
LABEL_39:
  OUTLINED_FUNCTION_0_2();
}

Swift::String_optional __swiftcall ActionProtocol.inferBundleId()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  Swift::String v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  NSObject *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t);
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  void *v113;
  Swift::String_optional result;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v4 = v1;
  v5 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_Sash?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_4_5();
  v125 = (char *)(v8 - v7);
  v122 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash();
  v120 = *(_QWORD *)(v122 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_2_12();
  v117 = v10;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v11);
  v121 = (char *)&v115 - v12;
  v126 = *(_QWORD *)(v5 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v13);
  v124 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_13_3();
  v123 = v16;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_13_3();
  v116 = v18;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v115 - v20;
  v22 = OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v23);
  OUTLINED_FUNCTION_36_3();
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (void **)((char *)&v115 - v26);
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v115 - v28;
  v118 = type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_2_12();
  v119 = v31;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v115 - v33;
  v35 = *(void (**)(uint64_t, uint64_t))(v4 + 16);
  v130 = v2;
  v127 = v5;
  v128 = v4;
  v35(v5, v4);
  if (OUTLINED_FUNCTION_71_0())
  {
    v36 = type metadata accessor for CamParse;
    v37 = (uint64_t)v29;
  }
  else
  {
    outlined init with take of CamModelMetadata((uint64_t)v29, (uint64_t)v34, type metadata accessor for CamUSOParse);
    v129 = CamUSOParse.appShortcutInvocation.getter();
    if (v53)
    {
      v55 = v54;
      v56 = v53;
      v125 = v34;
      if (one-time initialization token for common != -1)
        swift_once();
      v57 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v57, (uint64_t)static Logger.common);
      v58 = v126;
      v59 = v127;
      (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v21, v130, v127);
      OUTLINED_FUNCTION_21_7();
      OUTLINED_FUNCTION_21_7();
      Logger.logObject.getter();
      v60 = OUTLINED_FUNCTION_42_1();
      v61 = v60;
      if (os_log_type_enabled(v22, v60))
      {
        v62 = OUTLINED_FUNCTION_4();
        v63 = OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_40_1(v63);
        *(_DWORD *)v62 = 136315394;
        v123 = v55;
        v64 = *(uint64_t (**)(uint64_t))(v128 + 8);
        LODWORD(v124) = v61;
        v65 = v64(v59);
        v67 = OUTLINED_FUNCTION_8_11(v65, v66);
        OUTLINED_FUNCTION_35_4(v67);
        v68 = v129;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_12();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v59);
        *(_WORD *)(v62 + 12) = 2080;
        swift_bridgeObjectRetain();
        v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v68, v56, &v132);
        OUTLINED_FUNCTION_61_0(v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_1_10();
        OUTLINED_FUNCTION_41_3();
        OUTLINED_FUNCTION_16_8(&dword_1C2E0C000, v22, (os_log_type_t)v124, "Inferring bundle for %s from AS invocation = %s", (uint8_t *)v62);
        OUTLINED_FUNCTION_14_9();
        OUTLINED_FUNCTION_3();
      }
      OUTLINED_FUNCTION_1_10();
      OUTLINED_FUNCTION_1_10();

      (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v59);
      outlined destroy of CamParse((uint64_t)v125, type metadata accessor for CamUSOParse);
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
    v36 = type metadata accessor for CamUSOParse;
    v37 = (uint64_t)v34;
  }
  outlined destroy of CamParse(v37, v36);
  v39 = v127;
  v38 = v128;
  OUTLINED_FUNCTION_69_0();
  v40 = OUTLINED_FUNCTION_71_0();
  v41 = (uint64_t)v125;
  if (v40 == 1)
  {
    v42 = *v27;
    PommesResponse.sash()((uint64_t)v125);
    v43 = v122;
    if (__swift_getEnumTagSinglePayload(v41, 1, v122) != 1)
    {
      v94 = v120;
      v93 = v121;
      (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))(v121, v41, v43);
      if (one-time initialization token for common != -1)
        swift_once();
      v95 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v95, (uint64_t)static Logger.common);
      v96 = v126;
      v97 = v116;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16))(v116, v130, v39);
      v98 = v117;
      (*(void (**)(uint64_t, char *, uint64_t))(v94 + 16))(v117, v93, v43);
      v99 = Logger.logObject.getter();
      v100 = static os_log_type_t.debug.getter();
      LODWORD(v130) = v100;
      if (os_log_type_enabled(v99, v100))
      {
        v101 = OUTLINED_FUNCTION_4();
        v132 = OUTLINED_FUNCTION_4();
        *(_DWORD *)v101 = 136315394;
        v102 = *(uint64_t (**)(uint64_t))(v38 + 8);
        v129 = v99;
        v103 = v102(v39);
        v105 = OUTLINED_FUNCTION_8_11(v103, v104);
        OUTLINED_FUNCTION_35_4(v105);
        OUTLINED_FUNCTION_17_7();
        OUTLINED_FUNCTION_12();
        v106 = v97;
        v107 = v122;
        OUTLINED_FUNCTION_25_5(v106, *(uint64_t (**)(uint64_t, uint64_t))(v96 + 8));
        *(_WORD *)(v101 + 12) = 2080;
        v108 = Apple_Parsec_Siri_V2alpha_Sash.appID.getter();
        v110 = OUTLINED_FUNCTION_8_11(v108, v109);
        OUTLINED_FUNCTION_61_0(v110);
        OUTLINED_FUNCTION_17_7();
        OUTLINED_FUNCTION_12();
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v98, v107);
        OUTLINED_FUNCTION_16_8(&dword_1C2E0C000, v129, (os_log_type_t)v130, "Inferring bundle for %s from sash = %s", (uint8_t *)v101);
        OUTLINED_FUNCTION_14_9();
        OUTLINED_FUNCTION_3();
      }
      OUTLINED_FUNCTION_25_5(v97, *(uint64_t (**)(uint64_t, uint64_t))(v96 + 8));
      v111 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
      v111(v98, v43);

      v129 = Apple_Parsec_Siri_V2alpha_Sash.appID.getter();
      v111((uint64_t)v93, v43);
      goto LABEL_42;
    }

    outlined destroy of RRDataSourceMetadataValue?(v41, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_Sash?);
  }
  else
  {
    outlined destroy of CamParse((uint64_t)v27, type metadata accessor for CamParse);
  }
  OUTLINED_FUNCTION_69_0();
  v44 = OUTLINED_FUNCTION_71_0();
  v46 = v123;
  v45 = (uint64_t)v124;
  if (v44)
  {
    v47 = type metadata accessor for CamParse;
    v48 = v3;
LABEL_9:
    outlined destroy of CamParse(v48, v47);
    v49 = v126;
    v50 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8);
    v51._countAndFlagsBits = v50(v39, v38);
    PluginToBundleMap.init(rawValue:)(v51);
    if (v132 == 32)
    {
      v129 = 0;
      v52 = 0;
    }
    else
    {
      v129 = OUTLINED_FUNCTION_72_0(v132);
      v52 = v70;
    }
    if (one-time initialization token for common != -1)
      swift_once();
    v71 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v71, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_56_2(v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16));
    OUTLINED_FUNCTION_21_7();
    Logger.logObject.getter();
    v72 = OUTLINED_FUNCTION_42_1();
    if (os_log_type_enabled(v22, v72))
    {
      v73 = OUTLINED_FUNCTION_4();
      v74 = OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_40_1(v74);
      *(_DWORD *)v73 = 136315394;
      v75 = v50(v39, v128);
      v77 = OUTLINED_FUNCTION_8_11(v75, v76);
      OUTLINED_FUNCTION_35_4(v77);
      OUTLINED_FUNCTION_17_7();
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_25_5(v45, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
      *(_WORD *)(v73 + 12) = 2080;
      if (v52)
        v78 = (uint64_t)v129;
      else
        v78 = 7104878;
      if (v52)
        v79 = v52;
      else
        v79 = 0xE300000000000000;
      OUTLINED_FUNCTION_8_5();
      v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_1_10();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_16_8(&dword_1C2E0C000, v22, v72, "Inferring bundle for %s from plugin mapping = %s", (uint8_t *)v73);
      OUTLINED_FUNCTION_14_9();
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_25_5(v45, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));

    OUTLINED_FUNCTION_1_10();
    goto LABEL_42;
  }
  v80 = v119;
  outlined init with take of CamModelMetadata(v3, v119, type metadata accessor for CamUSOParse);
  v81 = v80 + *(int *)(v118 + 24);
  v82 = *(_QWORD *)(v81 + 8);
  if (!v82)
  {
    v47 = type metadata accessor for CamUSOParse;
    v48 = v80;
    goto LABEL_9;
  }
  v129 = *(NSObject **)v81;
  v83 = one-time initialization token for common;
  OUTLINED_FUNCTION_8_5();
  v84 = v126;
  if (v83 != -1)
    swift_once();
  v85 = OUTLINED_FUNCTION_14_1();
  __swift_project_value_buffer(v85, (uint64_t)static Logger.common);
  OUTLINED_FUNCTION_56_2(v46, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 16));
  OUTLINED_FUNCTION_21_7();
  Logger.logObject.getter();
  v86 = OUTLINED_FUNCTION_42_1();
  if (os_log_type_enabled(v22, v86))
  {
    v87 = OUTLINED_FUNCTION_4();
    v88 = OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_40_1(v88);
    *(_DWORD *)v87 = 136315394;
    v89 = (*(uint64_t (**)(uint64_t))(v128 + 8))(v39);
    v91 = OUTLINED_FUNCTION_8_11(v89, v90);
    OUTLINED_FUNCTION_35_4(v91);
    v92 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_25_5(v46, *(uint64_t (**)(uint64_t, uint64_t))(v84 + 8));
    *(_WORD *)(v87 + 12) = 2080;
    OUTLINED_FUNCTION_8_5();
    v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v92, v82, &v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_41_3();
    OUTLINED_FUNCTION_16_8(&dword_1C2E0C000, v22, v86, "Inferring bundle for %s from USO parse = %s", (uint8_t *)v87);
    OUTLINED_FUNCTION_14_9();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_1_10();

  OUTLINED_FUNCTION_25_5(v46, *(uint64_t (**)(uint64_t, uint64_t))(v84 + 8));
  outlined destroy of CamParse(v80, type metadata accessor for CamUSOParse);
LABEL_42:
  OUTLINED_FUNCTION_0_2();
  result.value._object = v113;
  result.value._countAndFlagsBits = v112;
  return result;
}

void RankedAction.init(flowHandlerId:parse:score:loggingId:features:alternatives:userData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_23_6();
  v36 = v1;
  v37 = v2;
  v34 = v3;
  v35 = v4;
  v38 = v6;
  v39 = v5;
  v7 = v3;
  v9 = v8;
  v10 = v1;
  v32 = v11;
  v33 = v12;
  v13 = OUTLINED_FUNCTION_1_12();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_46_1();
  OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_4_5();
  v18 = v17 - v16;
  v19 = (int *)OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_4_5();
  v23 = (_QWORD *)(v22 - v21);
  OUTLINED_FUNCTION_79(v10, v18);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v24(v0, v7, v13);
  v25 = (_QWORD *)((char *)v23 + v19[10]);
  *v23 = v32;
  v23[1] = v33;
  OUTLINED_FUNCTION_79(v18, (uint64_t)v23 + v19[5]);
  *(_QWORD *)((char *)v23 + v19[6]) = v35;
  *(_QWORD *)((char *)v23 + v19[7]) = v9;
  *(_QWORD *)((char *)v23 + v19[8]) = v37;
  v24((uint64_t)v23 + v19[9], v0, v13);
  type metadata accessor for MLFeatureValue();
  *(_QWORD *)((char *)v23 + v19[11]) = Dictionary.init(dictionaryLiteral:)();
  *v25 = 0;
  v25[1] = 0;
  specialized ActionProtocol.inferBundleId()((uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  v27 = v26;
  v29 = v28;
  v30 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v30(v0, v13);
  outlined destroy of CamParse(v18, type metadata accessor for CamParse);
  swift_bridgeObjectRelease();
  *v25 = v27;
  v25[1] = v29;
  v30(v34, v13);
  outlined destroy of CamParse(v36, type metadata accessor for CamParse);
  outlined init with take of CamModelMetadata((uint64_t)v23, v38, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  v31 = v19[11];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v38 + v31) = v39;
  OUTLINED_FUNCTION_2_20();
}

void RankedAction.flowHandlerId.getter()
{
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_48_2();
  OUTLINED_FUNCTION_1_5();
}

void RankedAction.parse.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_3_12();
  outlined init with copy of RankedAction(v1 + *(int *)(v3 + 20), a1, type metadata accessor for CamParse);
}

uint64_t RankedAction.alternatives.getter()
{
  OUTLINED_FUNCTION_3_12();
  return swift_bridgeObjectRetain();
}

double RankedAction.score.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(OUTLINED_FUNCTION_3_12() + 28));
}

uint64_t RankedAction.userData.getter()
{
  OUTLINED_FUNCTION_3_12();
  return swift_bridgeObjectRetain();
}

uint64_t RankedAction.loggingId.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_1_12();
  v0 = OUTLINED_FUNCTION_48_2();
  return v1(v0);
}

void RankedAction.inferredBundleId.getter()
{
  OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_48_2();
  OUTLINED_FUNCTION_1_5();
}

void RankedAction.inferredBundleId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(OUTLINED_FUNCTION_3_12() + 40));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_31();
}

uint64_t (*RankedAction.inferredBundleId.modify())(_QWORD)
{
  OUTLINED_FUNCTION_3_12();
  return destructiveProjectEnumData for FeatureDictionaryError;
}

void RankedAction.init(flowHandlerId:parse:score:alternatives:userData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_23_6();
  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_1_12();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_4_5();
  outlined init with copy of RankedAction(v0, v4 - v3, type metadata accessor for CamParse);
  UUID.init()();
  RankedAction.init(flowHandlerId:parse:score:loggingId:alternatives:userData:)();
  outlined destroy of CamParse(v0, type metadata accessor for CamParse);
  OUTLINED_FUNCTION_2_20();
}

void RankedAction.init(flowHandlerId:parse:score:loggingId:alternatives:userData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_23_6();
  v5 = v4;
  v7 = v6;
  OUTLINED_FUNCTION_67_0();
  v9 = v8;
  v11 = v10;
  v12 = (int *)OUTLINED_FUNCTION_3_12();
  v13 = (_QWORD *)((char *)v11 + v12[10]);
  *v11 = v9;
  v11[1] = v2;
  OUTLINED_FUNCTION_79(v0, (uint64_t)v11 + v12[5]);
  *(_QWORD *)((char *)v11 + v12[6]) = v7;
  *(_QWORD *)((char *)v11 + v12[7]) = v3;
  *(_QWORD *)((char *)v11 + v12[8]) = v5;
  v14 = (char *)v11 + v12[9];
  v15 = OUTLINED_FUNCTION_1_12();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v14, v1, v15);
  type metadata accessor for MLFeatureValue();
  *(_QWORD *)((char *)v11 + v12[11]) = Dictionary.init(dictionaryLiteral:)();
  *v13 = 0;
  v13[1] = 0;
  specialized ActionProtocol.inferBundleId()((uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  v18 = v17;
  v20 = v19;
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v1, v15);
  outlined destroy of CamParse(v0, type metadata accessor for CamParse);
  swift_bridgeObjectRelease();
  *v13 = v18;
  v13[1] = v20;
  OUTLINED_FUNCTION_2_20();
}

uint64_t RankedAction.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  _StringGuts.grow(_:)(100);
  v12._countAndFlagsBits = 0xD000000000000014;
  v12._object = (void *)0x80000001C2E9AC10;
  OUTLINED_FUNCTION_0_6(v12);
  OUTLINED_FUNCTION_3_12();
  Double.write<A>(to:)();
  v13._countAndFlagsBits = 0xD000000000000011;
  v13._object = (void *)0x80000001C2E9AC30;
  OUTLINED_FUNCTION_0_6(v13);
  v1 = *v0;
  v2 = (void *)v0[1];
  OUTLINED_FUNCTION_10_3();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  OUTLINED_FUNCTION_24();
  v4._countAndFlagsBits = 0x614472657375202CLL;
  v4._object = (void *)0xEC000000203A6174;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]?);
  v14._countAndFlagsBits = String.init<A>(describing:)();
  OUTLINED_FUNCTION_0_6(v14);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3A6573726170202CLL;
  v5._object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  v6 = OUTLINED_FUNCTION_20_6();
  _print_unlocked<A, B>(_:_:)();
  v7._object = (void *)0x80000001C2E9AC50;
  v7._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v7);
  v8 = swift_bridgeObjectRetain();
  v15._countAndFlagsBits = MEMORY[0x1C3BCA9B8](v8, v6);
  OUTLINED_FUNCTION_0_6(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x6E6967676F6C202CLL;
  v9._object = (void *)0xED0000203A644967;
  String.append(_:)(v9);
  OUTLINED_FUNCTION_1_12();
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_0_6(v16);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0;
}

unint64_t RankedAction.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RankedAction.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t RankedAction.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t RankedAction.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2E49E54 + 4 * byte_1C2E95768[a1]))(0x646E6148776F6C66, 0xED0000644972656CLL);
}

uint64_t sub_1C2E49E54()
{
  return 0x6174614472657375;
}

uint64_t sub_1C2E49E6C()
{
  return 0x6573726170;
}

uint64_t sub_1C2E49E80()
{
  return 0x74616E7265746C61;
}

uint64_t sub_1C2E49EA0()
{
  return 0x65726F6373;
}

uint64_t RankedAction.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2E49EF4 + 4 * byte_1C2E9576D[a1]))(0x646E6148776F6C66, 0xED0000644972656CLL);
}

uint64_t sub_1C2E49EF4()
{
  return 0x6174614472657375;
}

uint64_t sub_1C2E49F0C()
{
  return 0x6573726170;
}

uint64_t sub_1C2E49F20()
{
  return 0x74616E7265746C61;
}

uint64_t sub_1C2E49F40()
{
  return 0x65726F6373;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance RankedAction.CodingKeys()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance RankedAction.CodingKeys()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance RankedAction.CodingKeys()
{
  specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RankedAction.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance RankedAction.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = RankedAction.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RankedAction.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = RankedAction.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RankedAction.CodingKeys()
{
  unsigned __int8 *v0;

  return RankedAction.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RankedAction.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RankedAction.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RankedAction.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RankedAction.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RankedAction.CodingKeys()
{
  lazy protocol witness table accessor for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RankedAction.CodingKeys()
{
  lazy protocol witness table accessor for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void RankedAction.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RankedAction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_37_5();
  v7 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for RankedAction() + 32));
  if (v7)
    specialized _NativeDictionary.mapValues<A>(_:)(v7);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for CamParse(0);
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type CamParse and conformance CamParse, type metadata accessor for CamParse, (uint64_t)&protocol conformance descriptor for CamParse);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2)
  {
    OUTLINED_FUNCTION_1_11(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    swift_bridgeObjectRelease();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]?);
    lazy protocol witness table accessor for type [String : String]? and conformance <A> A?();
    OUTLINED_FUNCTION_15_6();
    swift_bridgeObjectRelease();
    KeyedEncodingContainer.encode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CamParse]);
    lazy protocol witness table accessor for type [CamParse] and conformance <A> [A]();
    OUTLINED_FUNCTION_15_6();
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_1_11(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }
  OUTLINED_FUNCTION_4_9();
}

void RankedAction.with(score:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_23_6();
  v1 = OUTLINED_FUNCTION_1_12();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_4_5();
  v5 = v4 - v3;
  OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_4_5();
  v9 = v8 - v7;
  v10 = OUTLINED_FUNCTION_3_12();
  outlined init with copy of RankedAction(v0 + *(int *)(v10 + 20), v9, type metadata accessor for CamParse);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v0 + *(int *)(v10 + 36), v1);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_36_0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  RankedAction.init(flowHandlerId:parse:score:loggingId:features:alternatives:userData:)();
  OUTLINED_FUNCTION_2_20();
}

void protocol witness for Encodable.encode(to:) in conformance RankedAction(_QWORD *a1)
{
  RankedAction.encode(to:)(a1);
}

void closure #1 in ActionProtocol.getAssociatedAppMentioned()(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, uint64_t);
  char v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = v2;
  v7 = type metadata accessor for UsoIdentifier();
  v53 = *(_QWORD *)(v7 - 8);
  OUTLINED_FUNCTION_6_1();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v45 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_46_1();
  v15 = *a1;
  if (v15 >> 62)
  {
    OUTLINED_FUNCTION_11_3();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    if (!v17)
      goto LABEL_40;
  }
  else
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    v17 = OUTLINED_FUNCTION_11_3();
    if (!v16)
      goto LABEL_40;
  }
  OUTLINED_FUNCTION_58_1(v17, (v15 & 0xC000000000000001) == 0);
  if ((v15 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_57_2();
  OUTLINED_FUNCTION_53_2();
  OUTLINED_FUNCTION_3_1();
  v18 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v18)
    goto LABEL_41;
  v19 = UsoEntity.attributes.getter();
  swift_release();
  v20 = specialized Dictionary.subscript.getter(1701667182, 0xE400000000000000, v19);
  v21 = OUTLINED_FUNCTION_12();
  if (!v20)
    goto LABEL_41;
  if (!(v20 >> 62))
  {
    if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_8;
LABEL_40:
    OUTLINED_FUNCTION_3_1();
LABEL_41:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_42;
  }
  OUTLINED_FUNCTION_11_3();
  v44 = _CocoaArrayWrapper.endIndex.getter();
  v21 = OUTLINED_FUNCTION_3_1();
  if (!v44)
    goto LABEL_40;
LABEL_8:
  OUTLINED_FUNCTION_58_1(v21, (v20 & 0xC000000000000001) == 0);
  if ((v20 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_57_2();
  v22 = *(_QWORD *)(v20 + 32);
  OUTLINED_FUNCTION_53_2();
  OUTLINED_FUNCTION_3_1();
  if (!v22)
    goto LABEL_41;
  OUTLINED_FUNCTION_53_2();
  v23 = dispatch thunk of UsoValue.getUsoIdentifiers()();
  v49 = v22;
  swift_release();
  v24 = *(_QWORD *)(v23 + 16);
  if (!v24)
  {
    v40 = 1;
    goto LABEL_33;
  }
  v46 = v3;
  v47 = a2;
  v48 = v4;
  v25 = v23 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
  v52 = *MEMORY[0x1E0DA2BF8];
  v26 = *(_QWORD *)(v53 + 72);
  v50 = *MEMORY[0x1E0DA2C90];
  v51 = v26;
  v27 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
  v45 = v23;
  OUTLINED_FUNCTION_11_3();
  while (1)
  {
    v27(v13, v25, v7);
    v28 = UsoIdentifier.appBundleId.getter();
    v30 = v29;
    if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v30 == v31)
    {
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_47_3();
    }
    else
    {
      v33 = OUTLINED_FUNCTION_34_4();
      OUTLINED_FUNCTION_3_1();
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_47_3();
      if ((v33 & 1) == 0)
        goto LABEL_27;
    }
    v34 = UsoIdentifier.namespace.getter();
    v30 = v35;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (!v30)
    {
      OUTLINED_FUNCTION_12();
LABEL_27:
      OUTLINED_FUNCTION_33_6();
      goto LABEL_28;
    }
    if (v34 == v36 && v30 == v37)
      break;
    v39 = OUTLINED_FUNCTION_34_4();
    OUTLINED_FUNCTION_3_1();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_33_6();
    if ((v39 & 1) != 0)
      goto LABEL_32;
LABEL_28:
    v30(v13, v7);
    v25 += v51;
    if (!--v24)
    {
      OUTLINED_FUNCTION_3_1();
      v40 = 1;
      a2 = v47;
      v3 = v46;
      goto LABEL_33;
    }
  }
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_12();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v7);
LABEL_32:
  OUTLINED_FUNCTION_3_1();
  v3 = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v46, v13, v7);
  v40 = 0;
  a2 = v47;
LABEL_33:
  __swift_storeEnumTagSinglePayload(v3, v40, 1, v7);
  OUTLINED_FUNCTION_3_1();
  if (__swift_getEnumTagSinglePayload(v3, 1, v7) == 1)
  {
    swift_release();
    outlined destroy of RRDataSourceMetadataValue?(v3, &demangling cache variable for type metadata for UsoIdentifier?);
    goto LABEL_41;
  }
  v41 = UsoIdentifier.value.getter();
  v43 = v42;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v3, v7);
  *a2 = v41;
  a2[1] = v43;
LABEL_42:
  OUTLINED_FUNCTION_4_9();
}

void sub_1C2E4A7A4()
{
  JUMPOUT(0x1C2E4A504);
}

uint64_t ActionProtocol.actionRepresentation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized static DisambiguationSerialiser.actionToStrRepresentation(action:)(v2, a1, a2);
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = OUTLINED_FUNCTION_12();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x1E0DEE9D8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_6:
  specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t type metadata accessor for RankedAction()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RankedAction;
  if (!type metadata singleton initialization cache for RankedAction)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for RankedAction.CodingKeys, &unk_1E7CC21E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for RankedAction.CodingKeys, &unk_1E7CC21E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for RankedAction.CodingKeys, &unk_1E7CC21E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for RankedAction.CodingKeys, &unk_1E7CC21E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CamParse] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [CamParse] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CamParse] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CamParse]);
    lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type CamParse and conformance CamParse, type metadata accessor for CamParse, (uint64_t)&protocol conformance descriptor for CamParse);
    v3 = v2;
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEAF10], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CamParse] and conformance <A> [A]);
  }
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  char v30[32];
  _BYTE v31[32];
  uint64_t v32;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  result = static _DictionaryStorage.copy(original:)();
  v3 = (_QWORD *)result;
  v4 = 0;
  v32 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v28 = v6;
  v29 = (unint64_t)(v8 + 63) >> 6;
  v11 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    outlined init with copy of Any(*(_QWORD *)(v32 + 56) + 32 * i, (uint64_t)v31);
    outlined init with copy of Any((uint64_t)v31, (uint64_t)v30);
    swift_bridgeObjectRetain();
    v20 = String.init<A>(describing:)();
    v22 = v21;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    *(_QWORD *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v23 = (_QWORD *)(v3[6] + 16 * i);
    *v23 = v18;
    v23[1] = v19;
    v24 = (uint64_t *)(v3[7] + 16 * i);
    *v24 = v20;
    v24[1] = v22;
    v25 = v3[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v27;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v14 >= v29)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v28 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v29)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v28 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v29)
          return (uint64_t)v3;
        v15 = *(_QWORD *)(v28 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v28 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v29)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v28 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLMultiArray>);
  result = static _DictionaryStorage.copy(original:)();
  v4 = (_QWORD *)result;
  v5 = 0;
  v27 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v25 = v7;
  v26 = (unint64_t)(v9 + 63) >> 6;
  v12 = result + 64;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * i);
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    swift_bridgeObjectRetain();
    result = (uint64_t)static MLMultiArray.makeScalar(from:)(v21);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v4;
    }
    *(_QWORD *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v22 = (_QWORD *)(v4[6] + 16 * i);
    *v22 = v19;
    v22[1] = v20;
    *(_QWORD *)(v4[7] + 8 * i) = result;
    v23 = v4[2];
    v15 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v24;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v15 = __OFADD__(v5++, 1);
    if (v15)
      goto LABEL_27;
    if (v5 >= v26)
      return (uint64_t)v4;
    v16 = *(_QWORD *)(v25 + 8 * v5);
    if (!v16)
      break;
LABEL_15:
    v11 = (v16 - 1) & v16;
  }
  v17 = v5 + 1;
  if (v5 + 1 >= v26)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v25 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v5 + 2;
  if (v5 + 2 >= v26)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v25 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v5 + 3;
  if (v5 + 3 >= v26)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v25 + 8 * v17);
  if (v16)
  {
LABEL_14:
    v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v26)
      return (uint64_t)v4;
    v16 = *(_QWORD *)(v25 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLMultiArray>);
  result = static _DictionaryStorage.copy(original:)();
  v4 = (_QWORD *)result;
  v5 = 0;
  v27 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v25 = v7;
  v26 = (unint64_t)(v9 + 63) >> 6;
  v12 = result + 64;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * i);
    type metadata accessor for MLMultiArray();
    swift_bridgeObjectRetain();
    result = (uint64_t)static MLMultiArray.makeScalar(from:)(v21);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v4;
    }
    *(_QWORD *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v22 = (_QWORD *)(v4[6] + 16 * i);
    *v22 = v19;
    v22[1] = v20;
    *(_QWORD *)(v4[7] + 8 * i) = result;
    v23 = v4[2];
    v15 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v24;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v15 = __OFADD__(v5++, 1);
    if (v15)
      goto LABEL_27;
    if (v5 >= v26)
      return (uint64_t)v4;
    v16 = *(_QWORD *)(v25 + 8 * v5);
    if (!v16)
      break;
LABEL_15:
    v11 = (v16 - 1) & v16;
  }
  v17 = v5 + 1;
  if (v5 + 1 >= v26)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v25 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v5 + 2;
  if (v5 + 2 >= v26)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v25 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v5 + 3;
  if (v5 + 3 >= v26)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v25 + 8 * v17);
  if (v16)
  {
LABEL_14:
    v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v26)
      return (uint64_t)v4;
    v16 = *(_QWORD *)(v25 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for RankedAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (void **)((char *)a1 + v8);
    v10 = (void **)((char *)a2 + v8);
    v11 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v21 = *v10;
      *v9 = *v10;
      v22 = v21;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_12:
        v30 = a3[7];
        *(_QWORD *)((char *)v4 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
        *(_QWORD *)((char *)v4 + v30) = *(_QWORD *)((char *)a2 + v30);
        v31 = a3[9];
        *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
        v32 = (char *)v4 + v31;
        v33 = (char *)a2 + v31;
        v34 = type metadata accessor for UUID();
        v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v35(v32, v33, v34);
        v36 = a3[10];
        v37 = a3[11];
        v38 = (_QWORD *)((char *)v4 + v36);
        v39 = (_QWORD *)((char *)a2 + v36);
        v40 = v39[1];
        *v38 = *v39;
        v38[1] = v40;
        *(_QWORD *)((char *)v4 + v37) = *(_QWORD *)((char *)a2 + v37);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return v4;
      }
      v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
      v14 = (int *)type metadata accessor for CamUSOParse(0);
      v15 = v14[5];
      v16 = (char *)v9 + v15;
      v17 = (char *)v10 + v15;
      v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      v23 = v14[6];
      v24 = (void **)((char *)v9 + v23);
      v25 = (void **)((char *)v10 + v23);
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      v27 = v14[7];
      v28 = (char *)v9 + v27;
      v29 = (char *)v10 + v27;
      v28[4] = v29[4];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  v20 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for RankedAction(uint64_t a1, uint64_t a2)
{
  id *v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = (id *)(a1 + *(int *)(a2 + 20));
  type metadata accessor for CamParse(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {

  }
  else if (!EnumCaseMultiPayload)
  {
    v6 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    v7 = (uint64_t)v4 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    v8 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = a1 + *(int *)(a2 + 36);
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for RankedAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (void **)((char *)a1 + v7);
  v9 = (void **)((char *)a2 + v7);
  v10 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v19 = *v9;
    *v8 = *v9;
    v20 = v19;
LABEL_9:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  if (!EnumCaseMultiPayload)
  {
    v12 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
    v13 = (int *)type metadata accessor for CamUSOParse(0);
    v14 = v13[5];
    v15 = (char *)v8 + v14;
    v16 = (char *)v9 + v14;
    v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
    }
    v21 = v13[6];
    v22 = (void **)((char *)v8 + v21);
    v23 = (void **)((char *)v9 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v13[7];
    v26 = (char *)v8 + v25;
    v27 = (char *)v9 + v25;
    v26[4] = v27[4];
    *(_DWORD *)v26 = *(_DWORD *)v27;
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_10:
  v28 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v28) = *(_QWORD *)((char *)a2 + v28);
  v29 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for UUID();
  v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33(v30, v31, v32);
  v34 = a3[10];
  v35 = a3[11];
  v36 = (_QWORD *)((char *)a1 + v34);
  v37 = (_QWORD *)((char *)a2 + v34);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  *(_QWORD *)((char *)a1 + v35) = *(_QWORD *)((char *)a2 + v35);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RankedAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (void **)((char *)a1 + v6);
    v8 = (void **)((char *)a2 + v6);
    outlined destroy of CamParse((uint64_t)a1 + v6, type metadata accessor for CamParse);
    v9 = type metadata accessor for CamParse(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v18 = *v8;
      *v7 = *v8;
      v19 = v18;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      goto LABEL_11;
    }
    if (!EnumCaseMultiPayload)
    {
      v11 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
      v12 = (int *)type metadata accessor for CamUSOParse(0);
      v13 = v12[5];
      v14 = (char *)v7 + v13;
      v15 = (char *)v8 + v13;
      v16 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
        __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      }
      v20 = v12[6];
      v21 = (void **)((char *)v7 + v20);
      v22 = (void **)((char *)v8 + v20);
      *v21 = *v22;
      v21[1] = v22[1];
      v23 = v12[7];
      v24 = (char *)v7 + v23;
      v25 = (char *)v8 + v23;
      v26 = *(_DWORD *)v25;
      v24[4] = v25[4];
      *(_DWORD *)v24 = v26;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
LABEL_11:
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[10];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for RankedAction(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CamParse(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    v11 = (int *)type metadata accessor for CamUSOParse(0);
    v12 = v11[5];
    v13 = &v7[v12];
    v14 = &v8[v12];
    v15 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
    }
    *(_OWORD *)&v7[v11[6]] = *(_OWORD *)&v8[v11[6]];
    v17 = v11[7];
    v18 = &v7[v17];
    v19 = &v8[v17];
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    swift_storeEnumTagMultiPayload();
  }
  v20 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  v21 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  v25 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  return a1;
}

_QWORD *assignWithTake for RankedAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of CamParse((uint64_t)a1 + v7, type metadata accessor for CamParse);
    v10 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      v12 = (int *)type metadata accessor for CamUSOParse(0);
      v13 = v12[5];
      v14 = &v8[v13];
      v15 = &v9[v13];
      v16 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
        __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      }
      *(_OWORD *)&v8[v12[6]] = *(_OWORD *)&v9[v12[6]];
      v18 = v12[7];
      v19 = &v8[v18];
      v20 = &v9[v18];
      v19[4] = v20[4];
      *(_DWORD *)v19 = *(_DWORD *)v20;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  v21 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  swift_bridgeObjectRelease();
  v22 = a3[9];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  v26 = a3[10];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RankedAction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E4BF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_20_6();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v9 = OUTLINED_FUNCTION_1_12();
      v10 = *(int *)(a3 + 36);
    }
    return __swift_getEnumTagSinglePayload(a1 + v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for RankedAction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C2E4BFB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    v8 = OUTLINED_FUNCTION_20_6();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = OUTLINED_FUNCTION_1_12();
      v10 = *(int *)(a4 + 36);
    }
    __swift_storeEnumTagSinglePayload(a1 + v10, a2, a2, v9);
  }
}

uint64_t type metadata completion function for RankedAction()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for CamParse(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of ActionProtocol.flowHandlerId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ActionProtocol.parse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ActionProtocol.userData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ActionProtocol.loggingId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ActionProtocol.inferredBundleId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t storeEnumTagSinglePayload for RankedAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1C2E4C170 + 4 * byte_1C2E95777[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1C2E4C1A4 + 4 * byte_1C2E95772[v4]))();
}

uint64_t sub_1C2E4C1A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E4C1AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E4C1B4);
  return result;
}

uint64_t sub_1C2E4C1C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E4C1C8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1C2E4C1CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E4C1D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for RankedAction.CodingKeys()
{
  return &unk_1E7CC21E8;
}

uint64_t OUTLINED_FUNCTION_8_11(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t OUTLINED_FUNCTION_9_10()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_13_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_14_9()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_15_6()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_16_8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_17_7()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_20_6()
{
  return type metadata accessor for CamParse(0);
}

uint64_t OUTLINED_FUNCTION_21_7()
{
  return swift_bridgeObjectRetain_n();
}

BOOL OUTLINED_FUNCTION_24_5(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_25_5@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_33_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 72) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_34_4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_35_4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_37_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_40_1(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = result;
  *(_QWORD *)(v1 - 88) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_41_3()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_42_1()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_45_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_47_3()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v3, v2, v1);
}

uint64_t OUTLINED_FUNCTION_48_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_53_2()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_55_1()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of CamParse(v0, v1);
}

uint64_t OUTLINED_FUNCTION_56_2@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void OUTLINED_FUNCTION_57_2()
{
  JUMPOUT(0x1C3BCAC88);
}

uint64_t OUTLINED_FUNCTION_58_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, a2, v2);
}

uint64_t OUTLINED_FUNCTION_61_0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t OUTLINED_FUNCTION_62_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_64_0()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_69_0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t OUTLINED_FUNCTION_71_0()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_72_0@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 96) = a1;
  return PluginToBundleMap.associatedAppBundleId.getter();
}

uint64_t specialized OptionSet<>.init()()
{
  return 0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  uint64_t v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v8 = (uint64_t *)(a3 + 56);
  v9 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v10 = *(v8 - 1);
    v11 = *v8;
    v12 = *(v8 - 2);
    v18[0] = *(v8 - 3);
    v18[1] = v12;
    v18[2] = v10;
    v18[3] = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v19, v18);
    if (v4)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v19;
    if (v19 != 4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_18_5();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v9 = v15;
      }
      v14 = *(_QWORD *)(v9 + 16);
      if (v14 >= *(_QWORD *)(v9 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v9 = v16;
      }
      *(_QWORD *)(v9 + 16) = v14 + 1;
      *(_BYTE *)(v9 + v14 + 32) = v13;
    }
    v8 += 4;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return v9;
    }
  }
  OUTLINED_FUNCTION_5();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v14 = *(_QWORD *)(a3 + 16);
  if (!v14)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v18 = *(_BYTE *)(a3 + v5 + 32);
    a1(&v16, &v18);
    if (v3)
      break;
    v7 = v17;
    if (v17)
    {
      v8 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v11;
      }
      v9 = *(_QWORD *)(v6 + 16);
      if (v9 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v12;
      }
      *(_QWORD *)(v6 + 16) = v9 + 1;
      v10 = v6 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v8;
      *(_QWORD *)(v10 + 40) = v7;
    }
    if (v14 == ++v5)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  void (*v30)(_QWORD *);

  v30 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_12_3();
  v28 = type metadata accessor for RankedAction();
  v26 = *(_QWORD *)(v28 - 8);
  v7 = MEMORY[0x1E0C80A78](v28);
  v27 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v25 - v9;
  v11 = *(_QWORD *)(a3 + 16);
  if (!v11)
    return MEMORY[0x1E0DEE9D8];
  OUTLINED_FUNCTION_2();
  v25 = a3;
  v12 = (uint64_t *)(a3 + 56);
  v13 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v14 = *(v12 - 1);
    v15 = *v12;
    v16 = *(v12 - 2);
    v29[0] = *(v12 - 3);
    v29[1] = v16;
    v29[2] = v14;
    v29[3] = v15;
    OUTLINED_FUNCTION_2();
    swift_bridgeObjectRetain();
    v30(v29);
    if (v3)
      break;
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_1_0();
    if (__swift_getEnumTagSinglePayload(v4, 1, v28) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v4, &demangling cache variable for type metadata for RankedAction?);
    }
    else
    {
      outlined init with take of CamUSOParse(v4, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      outlined init with take of CamUSOParse((uint64_t)v10, v27, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v19 = OUTLINED_FUNCTION_18_5();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19, v20, v21, v13);
        v13 = v22;
      }
      v18 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v13);
        v13 = v23;
      }
      *(_QWORD *)(v13 + 16) = v18 + 1;
      outlined init with take of CamUSOParse(v27, v13+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v18, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    }
    v12 += 4;
    if (!--v11)
    {
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_1_0();
  return v13;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = (_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  v3 = MEMORY[0x1E0DEE9D8];
  do
  {
    v4 = v2[3];
    v5 = v2[4];
    __swift_project_boxed_opaque_existential_1(v2, v4);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5);
    if (v7)
    {
      v8 = v6;
      v9 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v3 = v12;
      }
      v10 = *(_QWORD *)(v3 + 16);
      if (v10 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v3 = v13;
      }
      *(_QWORD *)(v3 + 16) = v10 + 1;
      v11 = v3 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v8;
      *(_QWORD *)(v11 + 40) = v9;
    }
    v2 += 5;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  return specialized MutableCollection<>.sort(by:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t DisambiguationSerialiser.init(actions:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  v4 = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v4, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  result = OUTLINED_FUNCTION_12();
  *a2 = v4;
  return result;
}

uint64_t closure #1 in DisambiguationSerialiser.init(actions:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5);
  if (v7)
  {
    v8 = v6;
    v9 = v7;
    v10 = a2[3];
    v11 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v10);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 40))(v10, v11);
    if (!v13)
      goto LABEL_25;
    v14 = v8 == v12 && v9 == v13;
    if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = a1[3];
    v16 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v15);
    v17 = ActionProtocol.actionRepresentation.getter(v15, v16);
    v19 = v18;
    v20 = a2[3];
    v21 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v20);
    v22 = ActionProtocol.actionRepresentation.getter(v20, v21);
    v24 = v23;
    if (v19)
    {
      if (v23)
      {
        if (v17 != v22 || v19 != v23)
        {
LABEL_14:
          v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
LABEL_26:
          swift_bridgeObjectRelease();
          return v26 & 1;
        }
        swift_bridgeObjectRelease();
LABEL_25:
        v26 = 0;
        goto LABEL_26;
      }
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for ranker != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.ranker);
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1C2E0C000, v28, v29, "DisambiguationSerialiser: at least 1 action has nil representation, this should not happen.", v30, 2u);
      MEMORY[0x1C3BCB4A4](v30, -1, -1);
    }

    if (v24)
      goto LABEL_25;
    v26 = 1;
  }
  else
  {
    v26 = 0;
  }
  return v26 & 1;
}

uint64_t DisambiguationSerialiser.indexOfSelectedAction(selected:)(_QWORD *a1)
{
  uint8_t **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v3 = type metadata accessor for UUID();
  v26 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v24 - v7;
  v9 = *((_QWORD *)*v1 + 2);
  if (v9)
  {
    v10 = (uint64_t)(*v1 + 32);
    v25 = *v1;
    swift_bridgeObjectRetain();
    v11 = 0;
    while (1)
    {
      outlined init with copy of SignalProviding(v10, (uint64_t)v29);
      __swift_project_boxed_opaque_existential_1(v29, v30);
      OUTLINED_FUNCTION_27_6();
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      OUTLINED_FUNCTION_27_6();
      v12 = static UUID.== infix(_:_:)();
      v13 = *(void (**)(char *, uint64_t))(v26 + 8);
      v13(v6, v3);
      v13(v8, v3);
      OUTLINED_FUNCTION_31_4();
      if ((v12 & 1) != 0)
        break;
      ++v11;
      v10 += 40;
      if (v9 == v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    if (one-time initialization token for ranker != -1)
      swift_once();
    v14 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.ranker);
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v29);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)OUTLINED_FUNCTION_4();
      v28 = OUTLINED_FUNCTION_4();
      *(_DWORD *)v17 = 136315138;
      v25 = v17 + 4;
      v19 = v30;
      v18 = v31;
      __swift_project_boxed_opaque_existential_1(v29, v30);
      (*(void (**)(uint64_t, uint64_t))(v18 + 32))(v19, v18);
      lazy protocol witness table accessor for type UUID and conformance UUID();
      v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v3);
      v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_31_4();
      _os_log_impl(&dword_1C2E0C000, v15, v16, "Could not find selected action %s in the candidates list", v17, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_31_4();

    return 0;
  }
  return v11;
}

uint64_t DisambiguationSerialiser.serialisedSelectedActionIndex(selected:)(_QWORD *a1)
{
  char v1;

  DisambiguationSerialiser.indexOfSelectedAction(selected:)(a1);
  if ((v1 & 1) != 0)
    return 0;
  else
    return dispatch thunk of CustomStringConvertible.description.getter();
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DisambiguationSerialiser.serialiseActionBundles()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Class isa;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  os_log_type_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  Swift::String_optional result;
  uint64_t v32;
  _BYTE v33[24];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  OUTLINED_FUNCTION_37_6(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_12_3();
  v3 = *v0;
  v4 = OUTLINED_FUNCTION_2();
  v5 = specialized Sequence.compactMap<A>(_:)(v4);
  OUTLINED_FUNCTION_1_0();
  if (*(_QWORD *)(v5 + 16) == *(_QWORD *)(v3 + 16))
  {
    v6 = (void *)objc_opt_self();
    isa = Array._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_5();
    *(_QWORD *)&v36 = 0;
    v8 = objc_msgSend(v6, sel_dataWithJSONObject_options_error_, isa, 0, &v36);

    v9 = (id)v36;
    if (v8)
    {
      v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v11;

      static String.Encoding.utf8.getter();
      String.init(data:encoding:)();
      outlined consume of Data._Representation(v10, v12);
    }
    else
    {
      v28 = v9;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_5();
  v32 = MEMORY[0x1E0DEE9D8];
  v13 = *(_QWORD *)(v3 + 16);
  OUTLINED_FUNCTION_2();
  if (v13)
  {
    v14 = 0;
    v15 = v3 + 32;
    while (v14 < *(_QWORD *)(v3 + 16))
    {
      OUTLINED_FUNCTION_28_6();
      v16 = v37;
      v17 = v38;
      __swift_project_boxed_opaque_existential_1(&v36, v37);
      (*(void (**)(uint64_t, uint64_t))(v17 + 40))(v16, v17);
      v19 = v18;
      swift_bridgeObjectRelease();
      if (v19)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      }
      else
      {
        outlined init with take of AppSelectionSignalComponent(&v36, (uint64_t)v33);
        if ((OUTLINED_FUNCTION_41_4() & 1) == 0)
        {
          OUTLINED_FUNCTION_13_9();
          v19 = v32;
        }
        v20 = *(_QWORD *)(v19 + 16);
        if (v20 >= *(_QWORD *)(v19 + 24) >> 1)
          OUTLINED_FUNCTION_10_9();
        v21 = v34;
        v22 = v35;
        v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v33, v34);
        MEMORY[0x1E0C80A78](v23);
        OUTLINED_FUNCTION_24_6();
        (*(void (**)())(v24 + 16))();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v1, &v32, v21, v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      }
      ++v14;
      v15 += 40;
      if (v13 == v14)
        goto LABEL_15;
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_15:
  OUTLINED_FUNCTION_1_0();
  if (one-time initialization token for ranker != -1)
LABEL_22:
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.ranker);
  OUTLINED_FUNCTION_20_7();
  v26 = (void *)Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_1_14(v27))
  {
    OUTLINED_FUNCTION_38_3();
    *(_QWORD *)&v36 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)v3 = 136315138;
    OUTLINED_FUNCTION_20_7();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProtocol);
    OUTLINED_FUNCTION_35_5();
  }

  OUTLINED_FUNCTION_5_10();
LABEL_20:
  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_4_9();
  result.value._object = v30;
  result.value._countAndFlagsBits = v29;
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DisambiguationSerialiser.serialiseActionRepresentations()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  Class isa;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  os_log_type_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String_optional result;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[24];
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  OUTLINED_FUNCTION_37_6(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_23_7();
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  v48 = v3;
  if (v3)
  {
    v5 = v2 + 32;
    OUTLINED_FUNCTION_2();
    v6 = MEMORY[0x1E0DEE9D8];
    v7 = v3;
    do
    {
      outlined init with copy of SignalProviding(v5, (uint64_t)&v53);
      v8 = v54;
      v9 = v55;
      v10 = __swift_project_boxed_opaque_existential_1(&v53, v54);
      v11 = specialized static DisambiguationSerialiser.actionToStrRepresentation(action:)((uint64_t)v10, v8, v9);
      v13 = v12;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
      if (v13)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_18_5();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v16;
        }
        v14 = *(_QWORD *)(v6 + 16);
        if (v14 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v17;
        }
        *(_QWORD *)(v6 + 16) = v14 + 1;
        v15 = v6 + 16 * v14;
        *(_QWORD *)(v15 + 32) = v11;
        *(_QWORD *)(v15 + 40) = v13;
      }
      v5 += 40;
      --v7;
    }
    while (v7);
    OUTLINED_FUNCTION_1_0();
    v18 = *(_QWORD *)(v2 + 16);
    v3 = v48;
  }
  else
  {
    v18 = 0;
    v6 = MEMORY[0x1E0DEE9D8];
  }
  if (*(_QWORD *)(v6 + 16) == v18)
  {
    v19 = (void *)objc_opt_self();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v53 = 0;
    v21 = objc_msgSend(v19, sel_dataWithJSONObject_options_error_, isa, 0, &v53);

    v22 = (id)v53;
    if (v21)
    {
      v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v25 = v24;

      static String.Encoding.utf8.getter();
      String.init(data:encoding:)();
      outlined consume of Data._Representation(v23, v25);
    }
    else
    {
      v46 = v22;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  v49 = v4;
  OUTLINED_FUNCTION_2();
  if (v3)
  {
    v26 = 0;
    v27 = v2 + 32;
    while (v26 < *(_QWORD *)(v2 + 16))
    {
      OUTLINED_FUNCTION_28_6();
      v28 = v54;
      v29 = v55;
      v30 = __swift_project_boxed_opaque_existential_1(&v53, v54);
      specialized static DisambiguationSerialiser.actionToStrRepresentation(action:)((uint64_t)v30, v28, v29);
      v32 = v31;
      swift_bridgeObjectRelease();
      if (v32)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
      }
      else
      {
        outlined init with take of AppSelectionSignalComponent(&v53, (uint64_t)v50);
        if ((OUTLINED_FUNCTION_41_4() & 1) == 0)
        {
          OUTLINED_FUNCTION_13_9();
          v29 = v49;
        }
        v33 = *(_QWORD *)(v29 + 16);
        if (v33 >= *(_QWORD *)(v29 + 24) >> 1)
          OUTLINED_FUNCTION_10_9();
        v34 = v51;
        v35 = v52;
        v36 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v50, v51);
        MEMORY[0x1E0C80A78](v36);
        OUTLINED_FUNCTION_4_5();
        v39 = v38 - v37;
        (*(void (**)(uint64_t))(v40 + 16))(v38 - v37);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v39, &v49, v34, v35);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
        v3 = v48;
      }
      ++v26;
      v27 += 40;
      if (v3 == v26)
        goto LABEL_26;
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_26:
  OUTLINED_FUNCTION_1_0();
  if (one-time initialization token for ranker != -1)
LABEL_33:
    swift_once();
  v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Logger.ranker);
  OUTLINED_FUNCTION_20_7();
  v42 = (void *)Logger.logObject.getter();
  v43 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_1_14(v43))
  {
    OUTLINED_FUNCTION_38_3();
    *(_QWORD *)&v53 = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)v2 = 136315138;
    OUTLINED_FUNCTION_20_7();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProtocol);
    OUTLINED_FUNCTION_35_5();
  }

  OUTLINED_FUNCTION_5_10();
LABEL_30:
  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_4_9();
  result.value._object = v45;
  result.value._countAndFlagsBits = v44;
  return result;
}

SiriCam::DisambiguationSerialiser::DonationFields_optional __swiftcall DisambiguationSerialiser.DonationFields.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SiriCam::DisambiguationSerialiser::DonationFields_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DisambiguationSerialiser.DonationFields.init(rawValue:), v3);
  result.value = OUTLINED_FUNCTION_3_1();
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

unint64_t DisambiguationSerialiser.DonationFields.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000018;
  if (*v0 == 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance DisambiguationSerialiser.DonationFields()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance DisambiguationSerialiser.DonationFields()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DisambiguationSerialiser.DonationFields(uint64_t a1)
{
  char *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance DisambiguationSerialiser.DonationFields(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::DisambiguationSerialiser::DonationFields_optional protocol witness for RawRepresentable.init(rawValue:) in conformance DisambiguationSerialiser.DonationFields(Swift::String *a1)
{
  return DisambiguationSerialiser.DonationFields.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DisambiguationSerialiser.DonationFields@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = DisambiguationSerialiser.DonationFields.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD v11[6];

  v11[2] = *v2;
  v11[3] = a2;
  v4 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in SiriSignalsQueryManager.serialiseQueryFields(fields:selected:), (uint64_t)v11, a1);
  if (*(_QWORD *)(v4 + 16) == *(_QWORD *)(a1 + 16))
  {
    v11[4] = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v5 = BidirectionalCollection<>.joined(separator:)();
    OUTLINED_FUNCTION_3_1();
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    if (one-time initialization token for ranker != -1)
      swift_once();
    v6 = OUTLINED_FUNCTION_14_1();
    v7 = OUTLINED_FUNCTION_8_1(v6, (uint64_t)static Logger.ranker);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_WORD *)v9 = 0;
      OUTLINED_FUNCTION_33_7(&dword_1C2E0C000, v7, v8, "At least one of the query fields could not be serialised.", v9);
      OUTLINED_FUNCTION_3();
    }

    return 0;
  }
  return v5;
}

void closure #1 in SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v8;
  Swift::String_optional v9;
  Swift::String_optional v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[5];

  if (!*a1)
  {
    v18[0] = a2;
    v10 = DisambiguationSerialiser.serialiseActionBundles()();
    object = v10.value._object;
    countAndFlagsBits = v10.value._countAndFlagsBits;
LABEL_5:
    if (!v8)
    {
      *a4 = countAndFlagsBits;
      a4[1] = (uint64_t)object;
    }
    return;
  }
  if (*a1 == 1)
  {
    v18[0] = a2;
    v9 = DisambiguationSerialiser.serialiseActionRepresentations()();
    object = v9.value._object;
    countAndFlagsBits = v9.value._countAndFlagsBits;
    goto LABEL_5;
  }
  outlined init with copy of ActionProtocol?(a3, (uint64_t)&v16);
  if (v17)
  {
    outlined init with take of AppSelectionSignalComponent(&v16, (uint64_t)v18);
    *(_QWORD *)&v16 = a2;
    swift_bridgeObjectRetain();
    v11 = DisambiguationSerialiser.indexOfSelectedAction(selected:)(v18);
    if ((v12 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v13 = 0;
      v15 = 0;
    }
    else
    {
      *(_QWORD *)&v16 = v11;
      v13 = dispatch thunk of CustomStringConvertible.description.getter();
      v15 = v14;
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    *a4 = v13;
    a4[1] = v15;
  }
  else
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)&v16, &demangling cache variable for type metadata for ActionProtocol?);
    *a4 = 0;
    a4[1] = 0;
  }
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0CB09F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0CB09C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0CB09D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  BOOL v16;
  unint64_t v17;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v37[5];
  _QWORD v38[5];
  unint64_t v39;

  v5 = a4;
  v7 = a2;
  v8 = a1;
  v9 = (uint64_t)(a2 - a1) / 40;
  v10 = a3 - a2;
  v11 = (uint64_t)(a3 - a2) / 40;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - a2) / 40, a4);
    v13 = v5 + 40 * v11;
    if (v8 >= v7 || v10 < 40)
      goto LABEL_41;
    v22 = a3 - 40;
    v39 = v5;
    while (1)
    {
      v23 = v13 - 40;
      outlined init with copy of SignalProviding(v13 - 40, (uint64_t)v38);
      v24 = v7 - 40;
      outlined init with copy of SignalProviding(v7 - 40, (uint64_t)v37);
      v25 = closure #1 in DisambiguationSerialiser.init(actions:)(v38, v37);
      if (v4)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
        goto LABEL_41;
      }
      v26 = v25;
      v27 = v13;
      v28 = v22 + 40;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      if ((v26 & 1) != 0)
      {
        v29 = v28 != v7 || v22 >= v7;
        v7 -= 40;
        v13 = v27;
        if (!v29)
          goto LABEL_36;
      }
      else
      {
        v30 = v28 != v27 || v22 >= v27;
        v24 = v23;
        v13 = v23;
        if (!v30)
          goto LABEL_36;
      }
      v31 = *(_OWORD *)v24;
      v32 = *(_OWORD *)(v24 + 16);
      *(_QWORD *)(v22 + 32) = *(_QWORD *)(v24 + 32);
      *(_OWORD *)v22 = v31;
      *(_OWORD *)(v22 + 16) = v32;
LABEL_36:
      v5 = v39;
      if (v13 > v39)
      {
        v22 -= 40;
        if (v7 > v8)
          continue;
      }
      goto LABEL_41;
    }
  }
  v12 = a2 - a1;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (uint64_t)(a2 - a1) / 40, a4);
  v13 = v5 + 40 * v9;
  if (v7 >= a3 || v12 < 40)
  {
LABEL_19:
    v7 = v8;
LABEL_41:
    v33 = (uint64_t)(v13 - v5) / 40;
    v34 = v5;
    v35 = v7;
    goto LABEL_42;
  }
  while (1)
  {
    outlined init with copy of SignalProviding(v7, (uint64_t)v38);
    outlined init with copy of SignalProviding(v5, (uint64_t)v37);
    v14 = closure #1 in DisambiguationSerialiser.init(actions:)(v38, v37);
    if (v4)
      break;
    v15 = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    if ((v15 & 1) != 0)
    {
      v16 = v8 == v7;
      v17 = v7;
      v7 += 40;
      if (v16 && v8 < v7)
        goto LABEL_17;
    }
    else
    {
      v16 = v8 == v5;
      v17 = v5;
      v5 += 40;
      if (v16 && v8 < v5)
        goto LABEL_17;
    }
    v20 = *(_OWORD *)v17;
    v21 = *(_OWORD *)(v17 + 16);
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(v17 + 32);
    *(_OWORD *)v8 = v20;
    *(_OWORD *)(v8 + 16) = v21;
LABEL_17:
    v8 += 40;
    if (v5 >= v13 || v7 >= a3)
      goto LABEL_19;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  v33 = (uint64_t)(v13 - v5) / 40;
  v34 = v5;
  v35 = v8;
LABEL_42:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v34, v33, v35);
  return 1;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of AppSelectionSignalComponent(&v12, v10 + 40 * a1 + 32);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t specialized static DisambiguationSerialiser.actionToStrRepresentation(action:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void **v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  int EnumTagSinglePayload;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];
  Swift::String v61;
  Swift::String v62;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_4_5();
  v10 = v9 - v8;
  v11 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_4_5();
  v15 = v14 - v13;
  type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_23_7();
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_24_6();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_4_5();
  v21 = v20 - v19;
  v59 = v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v20 - v19, a1, a2);
  v56 = v21;
  v58 = a2;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v24 = *v4;
      v60[0] = dispatch thunk of PommesResponse.primaryCatIds()();
      swift_bridgeObjectRetain();
      specialized MutableCollection<>.sort(by:)(v60, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
      OUTLINED_FUNCTION_12();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v25 = BidirectionalCollection<>.joined(separator:)();
      v27 = v26;
      swift_release();
      strcpy((char *)v60, "pommes:");
      v60[1] = 0xE700000000000000;
      v28._countAndFlagsBits = v25;
      v28._object = v27;
      String.append(_:)(v28);

      swift_bridgeObjectRelease();
      v29 = v60[0];
    }
    else
    {
      if (one-time initialization token for ranker != -1)
        swift_once();
      v37 = OUTLINED_FUNCTION_14_1();
      v38 = OUTLINED_FUNCTION_8_1(v37, (uint64_t)static Logger.ranker);
      v39 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_21_8(v39))
      {
        v40 = (uint8_t *)OUTLINED_FUNCTION_4();
        *(_WORD *)v40 = 0;
        OUTLINED_FUNCTION_33_7(&dword_1C2E0C000, v38, (os_log_type_t)v10, "Couldn't represent action as string, not NLv4 parse & not an app shortcut.", v40);
        OUTLINED_FUNCTION_3();
      }

      outlined destroy of CamParse((uint64_t)v4, type metadata accessor for CamParse);
      v29 = 0;
    }
    goto LABEL_11;
  }
  outlined init with take of CamUSOParse((uint64_t)v4, v3, type metadata accessor for CamUSOParse);
  v30 = CamUSOParse.appShortcutInvocation.getter();
  if (!v33)
  {
    MEMORY[0x1C3BCA37C](v30);
    specialized Collection.first.getter();
    OUTLINED_FUNCTION_12();
    v45 = v11;
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v10, 1, v11);
    v47 = v3;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v10, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      v43 = v21;
      v42 = v58;
LABEL_16:
      if (one-time initialization token for ranker != -1)
        swift_once();
      v49 = OUTLINED_FUNCTION_14_1();
      v50 = OUTLINED_FUNCTION_8_1(v49, (uint64_t)static Logger.ranker);
      v51 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_21_8(v51))
      {
        v52 = (uint8_t *)OUTLINED_FUNCTION_4();
        *(_WORD *)v52 = 0;
        OUTLINED_FUNCTION_33_7(&dword_1C2E0C000, v50, (os_log_type_t)v10, "Couldn't convert UserDialogAct to UsoTask.", v52);
        OUTLINED_FUNCTION_3();
      }

      outlined destroy of CamParse(v47, type metadata accessor for CamUSOParse);
      v29 = 0;
      goto LABEL_21;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v10, v45);
    LOBYTE(v10) = 0;
    v48 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    v53 = v48;
    v43 = v56;
    v42 = v58;
    if ((unint64_t)v48 >> 62)
    {
      if (v48 < 0)
        LOBYTE(v10) = v48;
      else
        LOBYTE(v10) = v48 & 0xF8;
      swift_bridgeObjectRetain();
      v55 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_12();
      if (v55 == 1)
      {
        swift_bridgeObjectRetain();
        v10 = _CocoaArrayWrapper.endIndex.getter();
        OUTLINED_FUNCTION_12();
        if (!v10)
        {
          OUTLINED_FUNCTION_12();
          OUTLINED_FUNCTION_1_17();
          goto LABEL_16;
        }
LABEL_24:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v53 & 0xC000000000000001) == 0, v53);
        if ((v53 & 0xC000000000000001) != 0)
          MEMORY[0x1C3BCAC88](0, v53);
        else
          swift_retain();
        OUTLINED_FUNCTION_12();
        v60[0] = 0x3A34766C6ELL;
        v60[1] = 0xE500000000000000;
        v61._countAndFlagsBits = UsoTask.verbString.getter();
        OUTLINED_FUNCTION_36_4(v61);
        OUTLINED_FUNCTION_13();
        v54._countAndFlagsBits = 14906;
        v54._object = (void *)0xE200000000000000;
        String.append(_:)(v54);
        v62._countAndFlagsBits = UsoTask.baseEntityAsString.getter();
        OUTLINED_FUNCTION_36_4(v62);
        swift_release();
        OUTLINED_FUNCTION_13();
        v29 = 0x3A34766C6ELL;
        OUTLINED_FUNCTION_1_17();
        outlined destroy of CamParse(v47, type metadata accessor for CamUSOParse);
LABEL_21:
        v41 = v59;
        goto LABEL_12;
      }
    }
    else if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
    {
      goto LABEL_24;
    }
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_12();
    goto LABEL_16;
  }
  v34 = v31;
  v35 = v32;
  strcpy((char *)v60, "appshortcuts:");
  HIWORD(v60[1]) = -4864;
  swift_bridgeObjectRetain();
  v36._countAndFlagsBits = v34;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease_n();
  OUTLINED_FUNCTION_13();
  v29 = v60[0];
  outlined destroy of CamParse(v3, type metadata accessor for CamUSOParse);
LABEL_11:
  v42 = a2;
  v41 = v59;
  v43 = v56;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
  return v29;
}

unint64_t lazy protocol witness table accessor for type DisambiguationSerialiser.DonationFields and conformance DisambiguationSerialiser.DonationFields()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisambiguationSerialiser.DonationFields and conformance DisambiguationSerialiser.DonationFields;
  if (!lazy protocol witness table cache variable for type DisambiguationSerialiser.DonationFields and conformance DisambiguationSerialiser.DonationFields)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for DisambiguationSerialiser.DonationFields, &type metadata for DisambiguationSerialiser.DonationFields);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationSerialiser.DonationFields and conformance DisambiguationSerialiser.DonationFields);
  }
  return result;
}

void type metadata accessor for DisambiguationSerialiser()
{
  OUTLINED_FUNCTION_5_8();
}

uint64_t storeEnumTagSinglePayload for DisambiguationSerialiser.DonationFields(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2E4F75C + 4 * byte_1C2E959E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2E4F790 + 4 * byte_1C2E959E0[v4]))();
}

uint64_t sub_1C2E4F790(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E4F798(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E4F7A0);
  return result;
}

uint64_t sub_1C2E4F7AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E4F7B4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2E4F7B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E4F7C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for DisambiguationSerialiser.DonationFields()
{
  OUTLINED_FUNCTION_5_8();
}

void partial apply for closure #1 in SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)(_BYTE *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t outlined init with copy of ActionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void outlined init with take of CamUSOParse(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  OUTLINED_FUNCTION_1_5();
}

void type metadata accessor for SiriSignalsQueryManager()
{
  OUTLINED_FUNCTION_5_8();
}

uint64_t OUTLINED_FUNCTION_1_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void OUTLINED_FUNCTION_4_15()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_5_10()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_10_9()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_13_9()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_16_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_18_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_19_8()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_20_7()
{
  return swift_retain();
}

BOOL OUTLINED_FUNCTION_21_8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_27_6()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_28_6()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of SignalProviding(v0, v1 - 128);
}

id OUTLINED_FUNCTION_29_6()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_31_4()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 - 120);
}

void OUTLINED_FUNCTION_33_7(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

void OUTLINED_FUNCTION_35_5()
{
  JUMPOUT(0x1C3BCA9B8);
}

void OUTLINED_FUNCTION_36_4(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_37_6@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return type metadata accessor for String.Encoding();
}

uint64_t OUTLINED_FUNCTION_38_3()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_40_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_41_4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_43_4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = a1;
  return v1 - 168;
}

_QWORD *initializeBufferWithCopyOfBuffer for UserHistoryTieBreaker(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  void **v10;
  void **v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  void **v46;
  int v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *__dst;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  int *v78;
  uint64_t v79;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = (int *)type metadata accessor for RankedAction();
    v9 = v8[5];
    v10 = (void **)((char *)v4 + v9);
    v11 = (void **)((char *)a2 + v9);
    v12 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v78 = v6;
    v79 = v12;
    if (EnumCaseMultiPayload == 1)
    {
      v22 = *v11;
      *v10 = *v11;
      v23 = v22;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v14 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
      v15 = (int *)type metadata accessor for CamUSOParse(0);
      v16 = v15[5];
      v17 = (char *)v10 + v16;
      v18 = (char *)v11 + v16;
      v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
      }
      v24 = v15[6];
      v25 = (void **)((char *)v10 + v24);
      v26 = (void **)((char *)v11 + v24);
      v27 = v26[1];
      *v25 = *v26;
      v25[1] = v27;
      v28 = v15[7];
      v29 = (char *)v10 + v28;
      v30 = (char *)v11 + v28;
      v29[4] = v30[4];
      *(_DWORD *)v29 = *(_DWORD *)v30;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      v6 = v78;
    }
    *(_QWORD *)((char *)v4 + v8[6]) = *(_QWORD *)((char *)a2 + v8[6]);
    *(_QWORD *)((char *)v4 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
    *(_QWORD *)((char *)v4 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
    v31 = v8[9];
    v32 = (char *)v4 + v31;
    v33 = (char *)a2 + v31;
    v34 = type metadata accessor for UUID();
    v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v76 = v35;
    v77 = v34;
    v35(v32, v33, v34);
    v36 = v8[10];
    v37 = (_QWORD *)((char *)v4 + v36);
    v38 = (_QWORD *)((char *)a2 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    *(_QWORD *)((char *)v4 + v8[11]) = *(_QWORD *)((char *)a2 + v8[11]);
    v40 = v6[5];
    v41 = (_QWORD *)((char *)v4 + v40);
    v42 = (char *)a2 + v40;
    v43 = *(_QWORD *)((char *)a2 + v40 + 8);
    *v41 = *(_QWORD *)((char *)a2 + v40);
    v41[1] = v43;
    v44 = v8[5];
    v45 = (void **)((char *)v41 + v44);
    v46 = (void **)&v42[v44];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v47 = swift_getEnumCaseMultiPayload();
    if (v47 == 1)
    {
      v54 = *v46;
      *v45 = *v46;
      v55 = v54;
    }
    else
    {
      if (v47)
      {
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
LABEL_20:
        *(_QWORD *)((char *)v41 + v8[6]) = *(_QWORD *)&v42[v8[6]];
        *(_QWORD *)((char *)v41 + v8[7]) = *(_QWORD *)&v42[v8[7]];
        *(_QWORD *)((char *)v41 + v8[8]) = *(_QWORD *)&v42[v8[8]];
        v63 = v8[9];
        v64 = (char *)v41 + v63;
        v65 = &v42[v63];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v76(v64, v65, v77);
        v66 = v8[10];
        v67 = (_QWORD *)((char *)v41 + v66);
        v68 = &v42[v66];
        v69 = *((_QWORD *)v68 + 1);
        *v67 = *(_QWORD *)v68;
        v67[1] = v69;
        *(_QWORD *)((char *)v41 + v8[11]) = *(_QWORD *)&v42[v8[11]];
        v70 = v78[7];
        *(_QWORD *)((char *)v4 + v78[6]) = *(_QWORD *)((char *)a2 + v78[6]);
        *(_QWORD *)((char *)v4 + v70) = *(_QWORD *)((char *)a2 + v70);
        v71 = v78[9];
        *(_QWORD *)((char *)v4 + v78[8]) = *(_QWORD *)((char *)a2 + v78[8]);
        *(_QWORD *)((char *)v4 + v71) = *(_QWORD *)((char *)a2 + v71);
        v72 = v78[11];
        *(_QWORD *)((char *)v4 + v78[10]) = *(_QWORD *)((char *)a2 + v78[10]);
        *(_QWORD *)((char *)v4 + v72) = *(_QWORD *)((char *)a2 + v72);
        v73 = v78[13];
        *(_QWORD *)((char *)v4 + v78[12]) = *(_QWORD *)((char *)a2 + v78[12]);
        *(_QWORD *)((char *)v4 + v73) = *(_QWORD *)((char *)a2 + v73);
        *(_QWORD *)((char *)v4 + v78[14]) = *(_QWORD *)((char *)a2 + v78[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return v4;
      }
      v48 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v45, v46, v48);
      v49 = (int *)type metadata accessor for CamUSOParse(0);
      v50 = v49[5];
      __dst = (char *)v45 + v50;
      v51 = (char *)v46 + v50;
      v52 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v51, 1, v52))
      {
        v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(__dst, v51, v52);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v52);
      }
      v56 = v49[6];
      v57 = (void **)((char *)v45 + v56);
      v58 = (void **)((char *)v46 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      v60 = v49[7];
      v61 = (char *)v45 + v60;
      v62 = (char *)v46 + v60;
      v61[4] = v62[4];
      *(_DWORD *)v61 = *(_DWORD *)v62;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  v21 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

_QWORD *initializeWithCopy for UserHistoryTieBreaker(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  void **v44;
  int v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *__dst;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  int *v76;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for RankedAction();
  v8 = v7[5];
  v9 = (void **)((char *)a1 + v8);
  v10 = (void **)((char *)a2 + v8);
  v11 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v76 = a3;
  if (EnumCaseMultiPayload == 1)
  {
    v20 = *v10;
    *v9 = *v10;
    v21 = v20;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      goto LABEL_10;
    }
    v13 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
    v14 = (int *)type metadata accessor for CamUSOParse(0);
    v15 = v14[5];
    v16 = (char *)v9 + v15;
    v17 = (char *)v10 + v15;
    v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
    }
    v22 = v14[6];
    v23 = (void **)((char *)v9 + v22);
    v24 = (void **)((char *)v10 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v14[7];
    v27 = (char *)v9 + v26;
    v28 = (char *)v10 + v26;
    v27[4] = v28[4];
    *(_DWORD *)v27 = *(_DWORD *)v28;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_10:
  *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
  *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
  *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
  v29 = v7[9];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for UUID();
  v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v74 = v33;
  v75 = v32;
  v33(v30, v31, v32);
  v34 = v7[10];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  *(_QWORD *)((char *)a1 + v7[11]) = *(_QWORD *)((char *)a2 + v7[11]);
  v38 = v76[5];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (char *)a2 + v38;
  v41 = *(_QWORD *)((char *)a2 + v38 + 8);
  *v39 = *(_QWORD *)((char *)a2 + v38);
  v39[1] = v41;
  v42 = v7[5];
  v43 = (void **)((char *)v39 + v42);
  v44 = (void **)&v40[v42];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45 = swift_getEnumCaseMultiPayload();
  if (v45 == 1)
  {
    v52 = *v44;
    *v43 = *v44;
    v53 = v52;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    goto LABEL_19;
  }
  if (!v45)
  {
    v46 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v43, v44, v46);
    v47 = (int *)type metadata accessor for CamUSOParse(0);
    v48 = v47[5];
    __dst = (char *)v43 + v48;
    v49 = (char *)v44 + v48;
    v50 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v49, 1, v50))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(__dst, v49, v50);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v50);
    }
    v54 = v47[6];
    v55 = (void **)((char *)v43 + v54);
    v56 = (void **)((char *)v44 + v54);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    v58 = v47[7];
    v59 = (char *)v43 + v58;
    v60 = (char *)v44 + v58;
    v59[4] = v60[4];
    *(_DWORD *)v59 = *(_DWORD *)v60;
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
  memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_19:
  *(_QWORD *)((char *)v39 + v7[6]) = *(_QWORD *)&v40[v7[6]];
  *(_QWORD *)((char *)v39 + v7[7]) = *(_QWORD *)&v40[v7[7]];
  *(_QWORD *)((char *)v39 + v7[8]) = *(_QWORD *)&v40[v7[8]];
  v61 = v7[9];
  v62 = (char *)v39 + v61;
  v63 = &v40[v61];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v74(v62, v63, v75);
  v64 = v7[10];
  v65 = (_QWORD *)((char *)v39 + v64);
  v66 = &v40[v64];
  v67 = *((_QWORD *)v66 + 1);
  *v65 = *(_QWORD *)v66;
  v65[1] = v67;
  *(_QWORD *)((char *)v39 + v7[11]) = *(_QWORD *)&v40[v7[11]];
  v68 = v76[7];
  *(_QWORD *)((char *)a1 + v76[6]) = *(_QWORD *)((char *)a2 + v76[6]);
  *(_QWORD *)((char *)a1 + v68) = *(_QWORD *)((char *)a2 + v68);
  v69 = v76[9];
  *(_QWORD *)((char *)a1 + v76[8]) = *(_QWORD *)((char *)a2 + v76[8]);
  *(_QWORD *)((char *)a1 + v69) = *(_QWORD *)((char *)a2 + v69);
  v70 = v76[11];
  *(_QWORD *)((char *)a1 + v76[10]) = *(_QWORD *)((char *)a2 + v76[10]);
  *(_QWORD *)((char *)a1 + v70) = *(_QWORD *)((char *)a2 + v70);
  v71 = v76[13];
  *(_QWORD *)((char *)a1 + v76[12]) = *(_QWORD *)((char *)a2 + v76[12]);
  *(_QWORD *)((char *)a1 + v71) = *(_QWORD *)((char *)a2 + v71);
  *(_QWORD *)((char *)a1 + v76[14]) = *(_QWORD *)((char *)a2 + v76[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for UserHistoryTieBreaker(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void **v40;
  void **v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int *v63;
  void *__src;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  char *__dst;
  _QWORD *__dsta;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for RankedAction();
  v7 = (int *)v6;
  if (a1 != a2)
  {
    v8 = *(int *)(v6 + 20);
    v9 = (void **)((char *)a1 + v8);
    v10 = (void **)((char *)a2 + v8);
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)a1 + v8, type metadata accessor for CamParse);
    v11 = type metadata accessor for CamParse(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v19 = *v10;
      *v9 = *v10;
      v20 = v19;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        goto LABEL_11;
      }
      v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
      v14 = (int *)type metadata accessor for CamUSOParse(0);
      v15 = v14[5];
      __dst = (char *)v9 + v15;
      v16 = (char *)v10 + v15;
      v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(__dst, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v17);
      }
      v21 = v14[6];
      v22 = (void **)((char *)v9 + v21);
      v23 = (void **)((char *)v10 + v21);
      *v22 = *v23;
      v22[1] = v23[1];
      v24 = v14[7];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      v27 = *(_DWORD *)v26;
      v25[4] = v26[4];
      *(_DWORD *)v25 = v27;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_11:
  *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
  *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = v7[9];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for UUID();
  v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 24);
  v32(v29, v30, v31);
  v33 = v7[10];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  *v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v7[11]) = *(_QWORD *)((char *)a2 + v7[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = a3[5];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  *(_QWORD *)v37 = *(_QWORD *)((char *)a2 + v36);
  *((_QWORD *)v37 + 1) = *(_QWORD *)((char *)a2 + v36 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v39 = v7[5];
    v40 = (void **)&v37[v39];
    v41 = (void **)&v38[v39];
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)&v37[v39], type metadata accessor for CamParse);
    __dsta = (_QWORD *)type metadata accessor for CamParse(0);
    v42 = swift_getEnumCaseMultiPayload();
    if (v42 == 1)
    {
      v50 = *v41;
      *v40 = *v41;
      v51 = v50;
LABEL_20:
      swift_storeEnumTagMultiPayload();
      goto LABEL_21;
    }
    if (!v42)
    {
      v65 = v32;
      v43 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
      v63 = (int *)type metadata accessor for CamUSOParse(0);
      v44 = v63[5];
      v66 = (char *)v40 + v44;
      v45 = (char *)v41 + v44;
      v46 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      __src = v45;
      v47 = (uint64_t)v45;
      v48 = v46;
      if (__swift_getEnumTagSinglePayload(v47, 1, v46))
      {
        v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v66, __src, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v66, __src, v48);
        __swift_storeEnumTagSinglePayload((uint64_t)v66, 0, 1, v48);
      }
      v32 = v65;
      v52 = v63[6];
      v53 = (void **)((char *)v40 + v52);
      v54 = (void **)((char *)v41 + v52);
      *v53 = *v54;
      v53[1] = v54[1];
      v55 = v63[7];
      v56 = (char *)v40 + v55;
      v57 = (char *)v41 + v55;
      v58 = *(_DWORD *)v57;
      v56[4] = v57[4];
      *(_DWORD *)v56 = v58;
      swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    memcpy(v40, v41, *(_QWORD *)(*(__dsta - 1) + 64));
  }
LABEL_21:
  *(_QWORD *)&v37[v7[6]] = *(_QWORD *)&v38[v7[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v37[v7[7]] = *(_QWORD *)&v38[v7[7]];
  *(_QWORD *)&v37[v7[8]] = *(_QWORD *)&v38[v7[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32(&v37[v7[9]], &v38[v7[9]], v31);
  v59 = v7[10];
  v60 = &v37[v59];
  v61 = &v38[v59];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *((_QWORD *)v60 + 1) = *((_QWORD *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v37[v7[11]] = *(_QWORD *)&v38[v7[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  return a1;
}

_OWORD *initializeWithTake for UserHistoryTieBreaker(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = (int *)type metadata accessor for RankedAction();
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for CamParse(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v48 = v10;
    v11 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    v12 = (int *)type metadata accessor for CamUSOParse(0);
    v13 = v12[5];
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    *(_OWORD *)&v8[v12[6]] = *(_OWORD *)&v9[v12[6]];
    v18 = v12[7];
    v19 = &v8[v18];
    v20 = &v9[v18];
    v19[4] = v20[4];
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v10 = v48;
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  v21 = v6[9];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for UUID();
  v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v49(v22, v23, v24);
  *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
  *(_QWORD *)((char *)a1 + v6[11]) = *(_QWORD *)((char *)a2 + v6[11]);
  v25 = a3[5];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_OWORD *)v26 = *(_OWORD *)((char *)a2 + v25);
  v28 = v6[5];
  v29 = &v26[v28];
  v30 = &v27[v28];
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v45 = v24;
    v31 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
    v32 = type metadata accessor for CamUSOParse(0);
    v33 = *(int *)(v32 + 20);
    v46 = &v29[v33];
    v47 = v32;
    v34 = &v30[v33];
    v35 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v46, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v46, v34, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)v46, 0, 1, v35);
    }
    *(_OWORD *)&v29[*(int *)(v47 + 24)] = *(_OWORD *)&v30[*(int *)(v47 + 24)];
    v37 = *(int *)(v47 + 28);
    v38 = &v29[v37];
    v39 = &v30[v37];
    v38[4] = v39[4];
    *(_DWORD *)v38 = *(_DWORD *)v39;
    swift_storeEnumTagMultiPayload();
    v24 = v45;
  }
  *(_QWORD *)&v26[v6[6]] = *(_QWORD *)&v27[v6[6]];
  *(_QWORD *)&v26[v6[7]] = *(_QWORD *)&v27[v6[7]];
  *(_QWORD *)&v26[v6[8]] = *(_QWORD *)&v27[v6[8]];
  v49(&v26[v6[9]], &v27[v6[9]], v24);
  *(_OWORD *)&v26[v6[10]] = *(_OWORD *)&v27[v6[10]];
  *(_QWORD *)&v26[v6[11]] = *(_QWORD *)&v27[v6[11]];
  v40 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v40) = *(_QWORD *)((char *)a2 + v40);
  v41 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v41) = *(_QWORD *)((char *)a2 + v41);
  v42 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v42) = *(_QWORD *)((char *)a2 + v42);
  v43 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v43) = *(_QWORD *)((char *)a2 + v43);
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  return a1;
}

_QWORD *assignWithTake for UserHistoryTieBreaker(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v60;
  char *v61;
  char *v62;
  char *__dst;
  void (*__dsta)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for RankedAction();
  v8 = (int *)v7;
  if (a1 != a2)
  {
    v9 = *(int *)(v7 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)a1 + v9, type metadata accessor for CamParse);
    v12 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      v14 = (int *)type metadata accessor for CamUSOParse(0);
      v15 = v14[5];
      __dst = &v10[v15];
      v16 = &v11[v15];
      v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(__dst, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v17);
      }
      *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
      v19 = v14[7];
      v20 = &v10[v19];
      v21 = &v11[v19];
      v20[4] = v21[4];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)((char *)a1 + v8[6]) = *(_QWORD *)((char *)a2 + v8[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
  *(_QWORD *)((char *)a1 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
  swift_bridgeObjectRelease();
  v22 = v8[9];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for UUID();
  v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40);
  v26(v23, v24, v25);
  v27 = v8[10];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v8[11]) = *(_QWORD *)((char *)a2 + v8[11]);
  swift_bridgeObjectRelease();
  v32 = a3[5];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a2 + v32 + 8);
  *(_QWORD *)v33 = *(_QWORD *)((char *)a2 + v32);
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    __dsta = v26;
    v36 = v8[5];
    v37 = &v33[v36];
    v38 = &v34[v36];
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)&v33[v36], type metadata accessor for CamParse);
    v39 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v40 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v37, v38, v40);
      v60 = (int *)type metadata accessor for CamUSOParse(0);
      v41 = v60[5];
      v62 = &v37[v41];
      v42 = &v38[v41];
      v43 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      v61 = v42;
      v44 = (uint64_t)v42;
      v45 = v43;
      if (__swift_getEnumTagSinglePayload(v44, 1, v43))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v62, v61, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v62, v61, v45);
        __swift_storeEnumTagSinglePayload((uint64_t)v62, 0, 1, v45);
      }
      *(_OWORD *)&v37[v60[6]] = *(_OWORD *)&v38[v60[6]];
      v47 = v60[7];
      v48 = &v37[v47];
      v49 = &v38[v47];
      v48[4] = v49[4];
      *(_DWORD *)v48 = *(_DWORD *)v49;
      swift_storeEnumTagMultiPayload();
    }
    v26 = __dsta;
  }
  *(_QWORD *)&v33[v8[6]] = *(_QWORD *)&v34[v8[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v33[v8[7]] = *(_QWORD *)&v34[v8[7]];
  *(_QWORD *)&v33[v8[8]] = *(_QWORD *)&v34[v8[8]];
  swift_bridgeObjectRelease();
  v26(&v33[v8[9]], &v34[v8[9]], v25);
  v50 = v8[10];
  v51 = &v33[v50];
  v52 = &v34[v50];
  v54 = *(_QWORD *)v52;
  v53 = *((_QWORD *)v52 + 1);
  *(_QWORD *)v51 = v54;
  *((_QWORD *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v33[v8[11]] = *(_QWORD *)&v34[v8[11]];
  swift_bridgeObjectRelease();
  v55 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v55) = *(_QWORD *)((char *)a2 + v55);
  v56 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v56) = *(_QWORD *)((char *)a2 + v56);
  v57 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v57) = *(_QWORD *)((char *)a2 + v57);
  v58 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v58) = *(_QWORD *)((char *)a2 + v58);
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserHistoryTieBreaker()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E5112C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_38_4();
  return __swift_getEnumTagSinglePayload(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for UserHistoryTieBreaker()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E51160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_38_4();
  return __swift_storeEnumTagSinglePayload(v1, v0, v0, v2);
}

uint64_t type metadata accessor for UserHistoryTieBreaker()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UserHistoryTieBreaker;
  if (!type metadata singleton initialization cache for UserHistoryTieBreaker)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for UserHistoryTieBreaker()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RankedAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for mockFeatures()
{
  uint64_t result;

  type metadata accessor for UUID();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MLFeatureValue]);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  result = Dictionary.init(dictionaryLiteral:)();
  static UserHistoryTieBreaker.mockFeatures = result;
  return result;
}

uint64_t UserHistoryTieBreaker.enabled.getter()
{
  OUTLINED_FUNCTION_9_3();
  if ((static TrialProvider.fetchBoolFactorFromTrial(_:)() & 1) != 0)
    return CamFeatureFlag.isEnabled.getter(5u);
  else
    return 0;
}

void UserHistoryTieBreaker.init(tie:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;

  v4 = (int *)OUTLINED_FUNCTION_8_12();
  *(_QWORD *)(a2 + v4[6]) = 0x3FB70A3D70A3D70ALL;
  *(_QWORD *)(a2 + v4[7]) = 3600;
  *(_QWORD *)(a2 + v4[8]) = 600;
  *(_QWORD *)(a2 + v4[9]) = 900;
  *(_QWORD *)(a2 + v4[10]) = 300;
  *(_QWORD *)(a2 + v4[11]) = 4;
  *(_QWORD *)(a2 + v4[12]) = 0x3FECCCCCCCCCCCCDLL;
  *(_QWORD *)(a2 + v4[13]) = 6;
  *(_QWORD *)(a2 + v4[14]) = 0x3FECCCCCCCCCCCCDLL;
  outlined init with take of CamModelMetadata(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  v5 = type metadata accessor for TopTwo();
  outlined init with take of CamModelMetadata(a1 + *(int *)(v5 + 20), a2 + v4[5], (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
}

uint64_t UserHistoryTieBreaker.actionBoost(features:loggingId:)@<X0>(Swift::OpaquePointer a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  _WORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  os_log_type_t v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;

  v5 = v3;
  if (one-time initialization token for mockFeatures != -1)
    swift_once();
  v9 = (void *)static UserHistoryTieBreaker.mockFeatures;
  if (*(_QWORD *)(static UserHistoryTieBreaker.mockFeatures + 16))
  {
    v10 = swift_bridgeObjectRetain();
    a1._rawValue = (void *)Dictionary<>.mock(with:for:)(v10, a2, (uint64_t)a1._rawValue);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_50_1();
  }
  if (UserHistoryTieBreaker.rule_ForegroundedAppShortcut(_:)(a1))
  {
    OUTLINED_FUNCTION_5();
    if (one-time initialization token for ranker != -1)
      swift_once();
    v11 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v11, (uint64_t)static Logger.ranker);
    v12 = OUTLINED_FUNCTION_47();
    if (OUTLINED_FUNCTION_41_0(v12))
    {
      v13 = (_WORD *)OUTLINED_FUNCTION_7_4();
      OUTLINED_FUNCTION_20_8(v13);
      OUTLINED_FUNCTION_1_18(&dword_1C2E0C000, v14, v15, "[UserHistoryHeuristic] ForegroundedAppShortcut rule match.");
      OUTLINED_FUNCTION_4_16();
    }

    v4 = *(_QWORD *)(v5 + *(int *)(OUTLINED_FUNCTION_8_12() + 24));
    type metadata accessor for ScoreBoost();
    v16 = OUTLINED_FUNCTION_1_13();
    result = OUTLINED_FUNCTION_0_17(v16);
    a1._rawValue = (void *)0xD000000000000017;
    v18 = "ForegroundedAppShortcut";
LABEL_24:
    v35 = (unint64_t)(v18 - 32) | 0x8000000000000000;
    goto LABEL_25;
  }
  v19 = OUTLINED_FUNCTION_25_6();
  if (UserHistoryTieBreaker.rule_RecentDisambiguationSameActions(_:)((Swift::OpaquePointer)v19))
  {
    OUTLINED_FUNCTION_5();
    if (one-time initialization token for ranker != -1)
      swift_once();
    v20 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v20, (uint64_t)static Logger.ranker);
    v21 = OUTLINED_FUNCTION_47();
    if (OUTLINED_FUNCTION_41_0(v21))
    {
      v22 = (_WORD *)OUTLINED_FUNCTION_7_4();
      OUTLINED_FUNCTION_20_8(v22);
      OUTLINED_FUNCTION_1_18(&dword_1C2E0C000, v23, v24, "[UserHistoryHeuristic] RecentDisambiguationSameActions rule match.");
      OUTLINED_FUNCTION_4_16();
    }

    v25 = OUTLINED_FUNCTION_8_12();
    OUTLINED_FUNCTION_26_5(v25);
    OUTLINED_FUNCTION_10_10();
    v26 = OUTLINED_FUNCTION_1_13();
    result = OUTLINED_FUNCTION_0_17(v26);
    a1._rawValue = (void *)0xD00000000000001FLL;
    v18 = "RecentDisambiguationSameActions";
    goto LABEL_24;
  }
  v27 = OUTLINED_FUNCTION_25_6();
  if (UserHistoryTieBreaker.rule_RecentDisambiguationSameApps(_:)((Swift::OpaquePointer)v27))
  {
    OUTLINED_FUNCTION_5();
    if (one-time initialization token for ranker != -1)
      swift_once();
    v28 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v28, (uint64_t)static Logger.ranker);
    v29 = OUTLINED_FUNCTION_47();
    if (OUTLINED_FUNCTION_41_0(v29))
    {
      v30 = (_WORD *)OUTLINED_FUNCTION_7_4();
      OUTLINED_FUNCTION_20_8(v30);
      OUTLINED_FUNCTION_1_18(&dword_1C2E0C000, v31, v32, "[UserHistoryHeuristic] RecentDisambiguationSameApps rule match.");
      OUTLINED_FUNCTION_4_16();
    }
    OUTLINED_FUNCTION_42_2();
    v33 = OUTLINED_FUNCTION_8_12();
    OUTLINED_FUNCTION_26_5(v33);
    OUTLINED_FUNCTION_10_10();
    v34 = OUTLINED_FUNCTION_1_13();
    result = OUTLINED_FUNCTION_0_17(v34);
    v18 = "RecentDisambiguationSameApps";
    goto LABEL_24;
  }
  v36 = OUTLINED_FUNCTION_25_6();
  if (UserHistoryTieBreaker.rule_RecentInstall(_:)((Swift::OpaquePointer)v36))
  {
    OUTLINED_FUNCTION_5();
    if (one-time initialization token for ranker != -1)
      swift_once();
    v37 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v37, (uint64_t)static Logger.ranker);
    v38 = OUTLINED_FUNCTION_47();
    if (OUTLINED_FUNCTION_41_0(v38))
    {
      v39 = (_WORD *)OUTLINED_FUNCTION_7_4();
      OUTLINED_FUNCTION_20_8(v39);
      OUTLINED_FUNCTION_1_18(&dword_1C2E0C000, v40, v41, "[UserHistoryHeuristic] RecentInstall rule match.");
      OUTLINED_FUNCTION_4_16();
    }

    v42 = OUTLINED_FUNCTION_8_12();
    OUTLINED_FUNCTION_26_5(v42);
    OUTLINED_FUNCTION_10_10();
    v43 = OUTLINED_FUNCTION_1_13();
    result = OUTLINED_FUNCTION_0_17(v43);
    v35 = 0xED00006C6C617473;
    a1._rawValue = (void *)0x6E49746E65636552;
  }
  else
  {
    v44 = OUTLINED_FUNCTION_25_6();
    if (UserHistoryTieBreaker.rule_RecentLaunch(_:)((Swift::OpaquePointer)v44))
    {
      OUTLINED_FUNCTION_5();
      if (one-time initialization token for ranker != -1)
        swift_once();
      v45 = OUTLINED_FUNCTION_14_1();
      OUTLINED_FUNCTION_8_1(v45, (uint64_t)static Logger.ranker);
      v46 = OUTLINED_FUNCTION_47();
      if (OUTLINED_FUNCTION_41_0(v46))
      {
        v47 = (_WORD *)OUTLINED_FUNCTION_7_4();
        OUTLINED_FUNCTION_20_8(v47);
        OUTLINED_FUNCTION_1_18(&dword_1C2E0C000, v48, v49, "[UserHistoryHeuristic] RecentLaunch rule match.");
        OUTLINED_FUNCTION_4_16();
      }

      v50 = OUTLINED_FUNCTION_8_12();
      OUTLINED_FUNCTION_26_5(v50);
      OUTLINED_FUNCTION_10_10();
      v51 = OUTLINED_FUNCTION_1_13();
      result = OUTLINED_FUNCTION_0_17(v51);
      v35 = 0xEC00000068636E75;
      a1._rawValue = (void *)0x614C746E65636552;
    }
    else
    {
      v52 = OUTLINED_FUNCTION_25_6();
      if (UserHistoryTieBreaker.rule_HistoricalPreferenceSameActions(_:)((Swift::OpaquePointer)v52))
      {
        OUTLINED_FUNCTION_5();
        if (one-time initialization token for ranker != -1)
          swift_once();
        v53 = OUTLINED_FUNCTION_14_1();
        OUTLINED_FUNCTION_8_1(v53, (uint64_t)static Logger.ranker);
        v54 = OUTLINED_FUNCTION_47();
        if (OUTLINED_FUNCTION_41_0(v54))
        {
          v55 = (_WORD *)OUTLINED_FUNCTION_7_4();
          OUTLINED_FUNCTION_20_8(v55);
          OUTLINED_FUNCTION_1_18(&dword_1C2E0C000, v56, v57, "[UserHistoryHeuristic] HistoricalPreferenceSameActions rule match.");
          OUTLINED_FUNCTION_4_16();
        }

        v58 = OUTLINED_FUNCTION_8_12();
        OUTLINED_FUNCTION_26_5(v58);
        OUTLINED_FUNCTION_10_10();
        v59 = OUTLINED_FUNCTION_1_13();
        result = OUTLINED_FUNCTION_0_17(v59);
        a1._rawValue = (void *)0xD00000000000001FLL;
        v18 = "HistoricalPreferenceSameActions";
        goto LABEL_24;
      }
      v60 = OUTLINED_FUNCTION_25_6();
      v61 = UserHistoryTieBreaker.rule_HistoricalPreferenceSameApps(_:)((Swift::OpaquePointer)v60);
      OUTLINED_FUNCTION_5();
      if (v61)
      {
        if (one-time initialization token for ranker != -1)
          swift_once();
        v62 = OUTLINED_FUNCTION_14_1();
        OUTLINED_FUNCTION_8_1(v62, (uint64_t)static Logger.ranker);
        v63 = OUTLINED_FUNCTION_47();
        if (OUTLINED_FUNCTION_41_0(v63))
        {
          v64 = (_WORD *)OUTLINED_FUNCTION_7_4();
          OUTLINED_FUNCTION_20_8(v64);
          OUTLINED_FUNCTION_1_18(&dword_1C2E0C000, v65, v66, "[UserHistoryHeuristic] HistoricalPreferenceSameApps rule match.");
          OUTLINED_FUNCTION_4_16();
        }
        OUTLINED_FUNCTION_42_2();
        v67 = OUTLINED_FUNCTION_8_12();
        OUTLINED_FUNCTION_26_5(v67);
        OUTLINED_FUNCTION_10_10();
        v68 = OUTLINED_FUNCTION_1_13();
        result = OUTLINED_FUNCTION_0_17(v68);
        v18 = "HistoricalPreferenceSameApps";
        goto LABEL_24;
      }
      if (one-time initialization token for ranker != -1)
        swift_once();
      v69 = OUTLINED_FUNCTION_14_1();
      OUTLINED_FUNCTION_8_1(v69, (uint64_t)static Logger.ranker);
      v70 = OUTLINED_FUNCTION_47();
      if (os_log_type_enabled((os_log_t)v61, v70))
      {
        v71 = (uint8_t *)OUTLINED_FUNCTION_7_4();
        *(_WORD *)v71 = 0;
        _os_log_impl(&dword_1C2E0C000, (os_log_t)v61, v70, "[UserHistoryHeuristic] No rule matched.", v71, 2u);
        OUTLINED_FUNCTION_3();
      }

      type metadata accessor for ScoreBoost();
      v72 = OUTLINED_FUNCTION_1_13();
      result = OUTLINED_FUNCTION_0_17(v72);
      v35 = 0xE700000000000000;
      a1._rawValue = (void *)0x686374614D6F4ELL;
      v4 = 0;
    }
  }
LABEL_25:
  *a3 = v4;
  a3[1] = a1._rawValue;
  a3[2] = v35;
  return result;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.supportedTie()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Bool v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v1 = v0;
  v2 = OUTLINED_FUNCTION_8_12();
  OUTLINED_FUNCTION_1_1();
  v4 = MEMORY[0x1E0C80A78](v3);
  v36 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v34 - v7;
  MEMORY[0x1E0C80A78](v6);
  type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_1();
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v34 - v15;
  v17 = type metadata accessor for RankedAction();
  v18 = v1 + *(int *)(v17 + 20);
  outlined init with copy of RankedAction(v18, (uint64_t)v16, type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    v19 = type metadata accessor for CamParse;
    v20 = (uint64_t)v16;
  }
  else
  {
    outlined init with take of CamModelMetadata((uint64_t)v16, (uint64_t)v10, type metadata accessor for CamUSOParse);
    v25 = CamUSOParse.appShortcutInvocation.getter();
    if (v26)
    {
      outlined consume of AppShortcutInvocation?(v25, v26);
      _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v10, type metadata accessor for CamUSOParse);
      OUTLINED_FUNCTION_23_8(v1);
      OUTLINED_FUNCTION_22_4();
      goto LABEL_10;
    }
    v19 = type metadata accessor for CamUSOParse;
    v20 = (uint64_t)v10;
  }
  _s7SiriCam0B5ParseOWOhTm_0(v20, v19);
  OUTLINED_FUNCTION_23_8(v1);
  v21 = CamParse.isAppShortcutParse()();
  OUTLINED_FUNCTION_22_4();
  if ((v21 & 1) == 0)
  {
    if (one-time initialization token for ranker != -1)
      swift_once();
    v22 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v22, (uint64_t)static Logger.ranker);
    v23 = OUTLINED_FUNCTION_47();
    if (os_log_type_enabled((os_log_t)v21, v23))
    {
      v24 = (uint8_t *)OUTLINED_FUNCTION_7_4();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1C2E0C000, (os_log_t)v21, v23, "[UserHistoryHeuristic] Only tie breaking app shortcut ambiguity.", v24, 2u);
      goto LABEL_18;
    }
LABEL_21:
    v27 = 0;
    goto LABEL_22;
  }
LABEL_10:
  outlined init with copy of RankedAction(v18, (uint64_t)v14, type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21 = *v14;
    v27 = 1;
LABEL_22:

    return v27;
  }
  _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v14, type metadata accessor for CamParse);
  if (vabdd_f64(*(double *)(v1 + *(int *)(v17 + 28)), *(double *)(v1 + *(int *)(v17 + 28) + *(int *)(v2 + 20))) >= 0.01)
  {
    if (one-time initialization token for ranker != -1)
      swift_once();
    v28 = OUTLINED_FUNCTION_14_1();
    v21 = __swift_project_value_buffer(v28, (uint64_t)static Logger.ranker);
    v29 = v35;
    outlined init with copy of RankedAction(v1, v35, (uint64_t (*)(_QWORD))type metadata accessor for UserHistoryTieBreaker);
    v30 = (uint64_t)v36;
    OUTLINED_FUNCTION_23_8(v1);
    Logger.logObject.getter();
    v31 = OUTLINED_FUNCTION_47();
    if (OUTLINED_FUNCTION_41_0(v31))
    {
      v32 = swift_slowAlloc();
      *(_DWORD *)v32 = 134218240;
      v37 = *(_QWORD *)(v29 + *(int *)(v17 + 28));
      OUTLINED_FUNCTION_41_5();
      _s7SiriCam0B5ParseOWOhTm_0(v29, (uint64_t (*)(_QWORD))type metadata accessor for UserHistoryTieBreaker);
      *(_WORD *)(v32 + 12) = 2048;
      v37 = *(_QWORD *)(v30 + *(int *)(v2 + 20) + *(int *)(v17 + 28));
      OUTLINED_FUNCTION_41_5();
      _s7SiriCam0B5ParseOWOhTm_0(v30, (uint64_t (*)(_QWORD))type metadata accessor for UserHistoryTieBreaker);
      _os_log_impl(&dword_1C2E0C000, (os_log_t)v21, (os_log_type_t)v1, "[UserHistoryHeuristic] Scores not ambiguous: top = %f, second = %f.", (uint8_t *)v32, 0x16u);
LABEL_18:
      OUTLINED_FUNCTION_3();
    }
    _s7SiriCam0B5ParseOWOhTm_0(v29, (uint64_t (*)(_QWORD))type metadata accessor for UserHistoryTieBreaker);
    OUTLINED_FUNCTION_22_4();
    goto LABEL_21;
  }
  return 1;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_ForegroundedAppShortcut(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::Bool result;

  if (*((_QWORD *)a1._rawValue + 2))
  {
    v2 = OUTLINED_FUNCTION_13_10();
    if ((v3 & 1) != 0)
    {
      if (objc_msgSend(*(id *)(*(_QWORD *)(v1 + 56) + 8 * v2), sel_int64Value))
      {
        OUTLINED_FUNCTION_9_3();
        v5 = (void *)OUTLINED_FUNCTION_17_8(19, v4);
        if (v5)
        {
          v6 = v5;
          objc_msgSend(v5, sel_int64Value);

        }
      }
    }
  }
  OUTLINED_FUNCTION_31();
  return result;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_RecentDisambiguationSameActions(_:)(Swift::OpaquePointer a1)
{
  void *v1;
  unint64_t v2;
  char v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  Swift::Bool result;

  if (*((_QWORD *)a1._rawValue + 2))
  {
    v2 = OUTLINED_FUNCTION_43_5(0xD000000000000031, (uint64_t)"actionRouting.lastActionDisambiguationWasSelected");
    if ((v3 & 1) != 0)
    {
      v4 = OUTLINED_FUNCTION_31_5(v2);
      OUTLINED_FUNCTION_9_3();
      v6 = (void *)OUTLINED_FUNCTION_17_8(45, v5);
      if (v6)
      {
        OUTLINED_FUNCTION_45_3(v6);

        if (v4)
        {
          v7 = OUTLINED_FUNCTION_8_12();
          OUTLINED_FUNCTION_36_5(*(int *)(v7 + 28));
        }
      }
    }
  }
  OUTLINED_FUNCTION_32_0();
  return result;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_RecentDisambiguationSameApps(_:)(Swift::OpaquePointer a1)
{
  void *v1;
  unint64_t v2;
  char v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  Swift::Bool result;

  if (*((_QWORD *)a1._rawValue + 2))
  {
    v2 = OUTLINED_FUNCTION_43_5(0xD00000000000002ELL, (uint64_t)"actionRouting.lastAppDisambiguationWasSelected");
    if ((v3 & 1) != 0)
    {
      v4 = OUTLINED_FUNCTION_31_5(v2);
      OUTLINED_FUNCTION_9_3();
      v6 = (void *)OUTLINED_FUNCTION_17_8(42, v5);
      if (v6)
      {
        OUTLINED_FUNCTION_45_3(v6);

        if (v4)
        {
          v7 = OUTLINED_FUNCTION_8_12();
          OUTLINED_FUNCTION_36_5(*(int *)(v7 + 32));
        }
      }
    }
  }
  OUTLINED_FUNCTION_32_0();
  return result;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_RecentInstall(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  if (!*((_QWORD *)a1._rawValue + 2))
    return 0;
  OUTLINED_FUNCTION_9_3();
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, v2);
  if ((v4 & 1) == 0 || (uint64_t)objc_msgSend(*(id *)(*((_QWORD *)a1._rawValue + 7) + 8 * v3), sel_int64Value) < 1)
    return 0;
  v5 = OUTLINED_FUNCTION_8_12();
  return OUTLINED_FUNCTION_36_5(*(int *)(v5 + 36));
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_RecentLaunch(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  Swift::Bool result;

  if (*((_QWORD *)a1._rawValue + 2))
  {
    v2 = OUTLINED_FUNCTION_13_10();
    if ((v3 & 1) != 0)
    {
      if (objc_msgSend(*(id *)(*(_QWORD *)(v1 + 56) + 8 * v2), sel_int64Value))
      {
        OUTLINED_FUNCTION_9_3();
        v5 = (void *)OUTLINED_FUNCTION_17_8(26, v4);
        if (v5)
        {
          v6 = v5;
          v7 = (uint64_t)objc_msgSend(v5, sel_int64Value);

          if (v7 >= 1)
            OUTLINED_FUNCTION_8_12();
        }
      }
    }
  }
  OUTLINED_FUNCTION_31();
  return result;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_HistoricalPreferenceSameActions(_:)(Swift::OpaquePointer a1)
{
  _QWORD *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  Swift::Bool result;
  uint64_t v19;
  void *v20;
  _QWORD *v21;

  if (one-time initialization token for FRAC_SELECTED_ACTION_DISAMBIGUATION_FREQ != -1)
    swift_once();
  v4 = static CAARFeatures.FRAC_SELECTED_ACTION_DISAMBIGUATION_FREQ;
  v5 = *(_QWORD *)(static CAARFeatures.FRAC_SELECTED_ACTION_DISAMBIGUATION_FREQ + 16);
  if (v5)
  {
    OUTLINED_FUNCTION_21_9();
    v3 = lazy protocol witness table accessor for type String and conformance String();
    v20 = (void *)v4;
    v6 = v4 + 40;
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      OUTLINED_FUNCTION_30_7();
      if ((OUTLINED_FUNCTION_19_9() & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v21 = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          OUTLINED_FUNCTION_9_11();
          v7 = v21;
        }
        v2 = (void *)v7[2];
        if ((unint64_t)v2 >= v7[3] >> 1)
        {
          v1 = &v21;
          OUTLINED_FUNCTION_16_7();
          v7 = v21;
        }
        OUTLINED_FUNCTION_29_7();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (v7[2] != 1)
    goto LABEL_37;
  OUTLINED_FUNCTION_40_3();
  swift_release();
  OUTLINED_FUNCTION_20_4((uint64_t)v1, v3);
  OUTLINED_FUNCTION_44_2();
  if (!v2)
    goto LABEL_38;
  if (one-time initialization token for ACTION_DISAMBIGUATION_FREQ != -1)
    swift_once();
  v9 = static CAARFeatures.ACTION_DISAMBIGUATION_FREQ;
  v10 = *(_QWORD *)(static CAARFeatures.ACTION_DISAMBIGUATION_FREQ + 16);
  if (v10)
  {
    OUTLINED_FUNCTION_27_7();
    lazy protocol witness table accessor for type String and conformance String();
    v11 = v9 + 40;
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      OUTLINED_FUNCTION_24_7();
      if ((OUTLINED_FUNCTION_18_6() & 1) != 0)
      {
        v13 = swift_isUniquelyReferenced_nonNull_native();
        v21 = v12;
        if ((v13 & 1) == 0)
        {
          OUTLINED_FUNCTION_9_11();
          v12 = v21;
        }
        if (v12[2] >= v12[3] >> 1)
        {
          OUTLINED_FUNCTION_16_7();
          v12 = v21;
        }
        OUTLINED_FUNCTION_32_5();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v11 += 16;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v2 = v20;
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (v12[2] != 1)
  {

LABEL_37:
    swift_release();
    goto LABEL_38;
  }
  v14 = v12[4];
  v15 = v12[5];
  OUTLINED_FUNCTION_50_1();
  swift_release();
  v16 = (void *)OUTLINED_FUNCTION_20_4(v14, v15);
  OUTLINED_FUNCTION_5();
  if (v16)
  {
    objc_msgSend(v2, sel_doubleValue);
    if (*(double *)(v19 + *(int *)(OUTLINED_FUNCTION_8_12() + 48)) <= v17)
    {
      objc_msgSend(v16, sel_int64Value);

    }
    else
    {

    }
  }
  else
  {

  }
LABEL_38:
  OUTLINED_FUNCTION_16_10();
  return result;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_HistoricalPreferenceSameApps(_:)(Swift::OpaquePointer a1)
{
  _QWORD *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  Swift::Bool result;
  uint64_t v19;
  void *v20;
  _QWORD *v21;

  if (one-time initialization token for FRAC_SELECTED_APP_DISAMBIGUATION_FREQ != -1)
    swift_once();
  v4 = static CAARFeatures.FRAC_SELECTED_APP_DISAMBIGUATION_FREQ;
  v5 = *(_QWORD *)(static CAARFeatures.FRAC_SELECTED_APP_DISAMBIGUATION_FREQ + 16);
  if (v5)
  {
    OUTLINED_FUNCTION_21_9();
    v3 = lazy protocol witness table accessor for type String and conformance String();
    v20 = (void *)v4;
    v6 = v4 + 40;
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      OUTLINED_FUNCTION_30_7();
      if ((OUTLINED_FUNCTION_19_9() & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v21 = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          OUTLINED_FUNCTION_9_11();
          v7 = v21;
        }
        v2 = (void *)v7[2];
        if ((unint64_t)v2 >= v7[3] >> 1)
        {
          v1 = &v21;
          OUTLINED_FUNCTION_16_7();
          v7 = v21;
        }
        OUTLINED_FUNCTION_29_7();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (v7[2] != 1)
    goto LABEL_37;
  OUTLINED_FUNCTION_40_3();
  swift_release();
  OUTLINED_FUNCTION_20_4((uint64_t)v1, v3);
  OUTLINED_FUNCTION_44_2();
  if (!v2)
    goto LABEL_38;
  if (one-time initialization token for APP_DISAMBIGUATION_FREQ != -1)
    swift_once();
  v9 = static CAARFeatures.APP_DISAMBIGUATION_FREQ;
  v10 = *(_QWORD *)(static CAARFeatures.APP_DISAMBIGUATION_FREQ + 16);
  if (v10)
  {
    OUTLINED_FUNCTION_27_7();
    lazy protocol witness table accessor for type String and conformance String();
    v11 = v9 + 40;
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      OUTLINED_FUNCTION_24_7();
      if ((OUTLINED_FUNCTION_18_6() & 1) != 0)
      {
        v13 = swift_isUniquelyReferenced_nonNull_native();
        v21 = v12;
        if ((v13 & 1) == 0)
        {
          OUTLINED_FUNCTION_9_11();
          v12 = v21;
        }
        if (v12[2] >= v12[3] >> 1)
        {
          OUTLINED_FUNCTION_16_7();
          v12 = v21;
        }
        OUTLINED_FUNCTION_32_5();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v11 += 16;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v2 = v20;
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (v12[2] != 1)
  {

LABEL_37:
    swift_release();
    goto LABEL_38;
  }
  v14 = v12[4];
  v15 = v12[5];
  OUTLINED_FUNCTION_50_1();
  swift_release();
  v16 = (void *)OUTLINED_FUNCTION_20_4(v14, v15);
  OUTLINED_FUNCTION_5();
  if (v16)
  {
    objc_msgSend(v2, sel_doubleValue);
    if (*(double *)(v19 + *(int *)(OUTLINED_FUNCTION_8_12() + 56)) <= v17)
    {
      objc_msgSend(v16, sel_int64Value);

    }
    else
    {

    }
  }
  else
  {

  }
LABEL_38:
  OUTLINED_FUNCTION_16_10();
  return result;
}

uint64_t protocol witness for TieBreaking.enabled.getter in conformance UserHistoryTieBreaker()
{
  return UserHistoryTieBreaker.enabled.getter() & 1;
}

void _s7SiriCam0B5ParseOWOhTm_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_1_5();
}

uint64_t outlined consume of AppShortcutInvocation?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void OUTLINED_FUNCTION_1_18(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_4_16()
{
  JUMPOUT(0x1C3BCB4A4);
}

uint64_t OUTLINED_FUNCTION_8_12()
{
  return type metadata accessor for UserHistoryTieBreaker();
}

void OUTLINED_FUNCTION_9_11()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_10_10()
{
  return type metadata accessor for ScoreBoost();
}

unint64_t OUTLINED_FUNCTION_13_10()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(0x535F5050415F5349, 0xEF54554354524F48);
}

uint64_t OUTLINED_FUNCTION_17_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, v2);
}

uint64_t OUTLINED_FUNCTION_18_6()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_19_9()
{
  return StringProtocol.contains<A>(_:)();
}

_WORD *OUTLINED_FUNCTION_20_8(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_21_9()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_22_4()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  _s7SiriCam0B5ParseOWOhTm_0(v1, v0);
}

void OUTLINED_FUNCTION_23_8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with copy of RankedAction(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_24_7()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_25_6()
{
  uint64_t v0;

  return v0;
}

double OUTLINED_FUNCTION_26_5(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 24));
}

uint64_t OUTLINED_FUNCTION_27_7()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_29_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v4;
  v5 = v2 + 16 * v1;
  *(_QWORD *)(v5 + 32) = v0;
  *(_QWORD *)(v5 + 40) = v3;
}

uint64_t OUTLINED_FUNCTION_30_7()
{
  return swift_bridgeObjectRetain();
}

id OUTLINED_FUNCTION_31_5(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)(v1 + 56) + 8 * a1), sel_int64Value);
}

void OUTLINED_FUNCTION_32_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v4;
  v5 = v2 + 16 * v1;
  *(_QWORD *)(v5 + 32) = v0;
  *(_QWORD *)(v5 + 40) = v3;
}

BOOL OUTLINED_FUNCTION_36_5@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return v2 < *(_QWORD *)(v1 + a1);
}

uint64_t OUTLINED_FUNCTION_38_4()
{
  return type metadata accessor for RankedAction();
}

uint64_t OUTLINED_FUNCTION_40_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_41_5()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_42_2()
{
  void *v0;

}

unint64_t OUTLINED_FUNCTION_43_5@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_44_2()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_45_3(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 1480));
}

ValueMetadata *type metadata accessor for RankedActionFeatureExtractor()
{
  return &type metadata for RankedActionFeatureExtractor;
}

uint64_t *RankedActionFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static RankedActionFeatureExtractor.extractedFeatures;
}

uint64_t RankedActionFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  double *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  if (*(_QWORD *)(a1 + 16) < 2uLL)
  {
    lazy protocol witness table accessor for type CamError and conformance CamError();
    swift_allocError();
    *(_QWORD *)v15 = 0xD000000000000044;
    *(_QWORD *)(v15 + 8) = 0x80000001C2E9AF30;
    *(_BYTE *)(v15 + 16) = 1;
    swift_willThrow();
  }
  else
  {
    v4 = type metadata accessor for RankedAction();
    v5 = *(_QWORD *)(v4 - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = 1.0;
    if (!CamParse.isAppShortcutParse()())
    {
      if (CamParse.isAppShortcutParse()())
        v7 = 1.0;
      else
        v7 = 0.0;
    }
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.ambiguityHandling);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1C2E0C000, v9, v10, "Extracting features from ranked actions", v11, 2u);
      OUTLINED_FUNCTION_3();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2E93F60;
    *(_QWORD *)(inited + 32) = 0xD000000000000024;
    *(_QWORD *)(inited + 40) = 0x80000001C2E99610;
    type metadata accessor for MLMultiArray();
    v12 = (double *)(v6 + *(int *)(v4 + 28));
    v13 = *(double *)((char *)v12 + *(_QWORD *)(v5 + 72));
    v14 = OUTLINED_FUNCTION_2_21(*v12 - v13);
    if (v1)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)(inited + 16) = 0;
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
    }
    else
    {
      *(_QWORD *)(inited + 48) = v14;
      *(_QWORD *)(inited + 56) = 0xD00000000000001CLL;
      *(_QWORD *)(inited + 64) = 0x80000001C2E99640;
      *(_QWORD *)(inited + 72) = OUTLINED_FUNCTION_2_21(v13);
      *(_QWORD *)(inited + 80) = 0xD00000000000001DLL;
      *(_QWORD *)(inited + 88) = 0x80000001C2E99660;
      *(_QWORD *)(inited + 96) = OUTLINED_FUNCTION_2_21(v7);
      inited = Dictionary.init(dictionaryLiteral:)();
      swift_bridgeObjectRetain_n();
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)OUTLINED_FUNCTION_4();
        v23 = OUTLINED_FUNCTION_4();
        *(_DWORD *)v19 = 136315138;
        swift_bridgeObjectRetain();
        v20 = Dictionary.Keys.description.getter();
        v22 = v21;
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_22_0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2E0C000, v17, v18, "Extracted ranked action features: %s", v19, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_22_0();
    }
  }
  return inited;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance RankedActionFeatureExtractor()
{
  RankedActionFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance RankedActionFeatureExtractor(uint64_t *a1)
{
  return RankedActionFeatureExtractor.extractImpl(from:)(*a1);
}

uint64_t OUTLINED_FUNCTION_2_21(double a1)
{
  return static MLMultiArray.makeScalar(from:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for TrialOverridesTieBreaker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  char *__dst;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
    return v3;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(int *)(a3 + 20);
  v6 = (uint64_t *)((char *)a1 + v5);
  v7 = (uint64_t *)((char *)a2 + v5);
  v8 = (int *)type metadata accessor for RankedAction();
  if (!__swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v8))
  {
    v11 = v7[1];
    *v6 = *v7;
    v6[1] = v11;
    v12 = v8[5];
    v13 = (void **)((char *)v6 + v12);
    v14 = (void **)((char *)v7 + v12);
    v15 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v23 = *v14;
      *v13 = *v14;
      v24 = v23;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_14:
        *(_QWORD *)((char *)v6 + v8[6]) = *(_QWORD *)((char *)v7 + v8[6]);
        *(_QWORD *)((char *)v6 + v8[7]) = *(_QWORD *)((char *)v7 + v8[7]);
        *(_QWORD *)((char *)v6 + v8[8]) = *(_QWORD *)((char *)v7 + v8[8]);
        v32 = v8[9];
        v33 = (char *)v6 + v32;
        v34 = (char *)v7 + v32;
        v35 = type metadata accessor for UUID();
        v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v36(v33, v34, v35);
        v37 = v8[10];
        v38 = (_QWORD *)((char *)v6 + v37);
        v39 = (_QWORD *)((char *)v7 + v37);
        v40 = v39[1];
        *v38 = *v39;
        v38[1] = v40;
        *(_QWORD *)((char *)v6 + v8[11]) = *(_QWORD *)((char *)v7 + v8[11]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, (uint64_t)v8);
        return v3;
      }
      v17 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
      v18 = (int *)type metadata accessor for CamUSOParse(0);
      v19 = v18[5];
      __dst = (char *)v13 + v19;
      v20 = (char *)v14 + v19;
      v21 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(__dst, v20, v21);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v21);
      }
      v25 = v18[6];
      v26 = (void **)((char *)v13 + v25);
      v27 = (void **)((char *)v14 + v25);
      v28 = v27[1];
      *v26 = *v27;
      v26[1] = v28;
      v29 = v18[7];
      v30 = (char *)v13 + v29;
      v31 = (char *)v14 + v29;
      v30[4] = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_14;
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  return v3;
}

uint64_t destroy for TrialOverridesTieBreaker(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  id *v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for RankedAction();
  result = __swift_getEnumTagSinglePayload(v2, 1, v3);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v5 = (id *)(v2 + *(int *)(v3 + 20));
    type metadata accessor for CamParse(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {

    }
    else if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
      v8 = (uint64_t)v5 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
      v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (!__swift_getEnumTagSinglePayload(v8, 1, v9))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v2 + *(int *)(v3 + 36);
    v11 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_BYTE *initializeWithCopy for TrialOverridesTieBreaker(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *__dst;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = (int *)type metadata accessor for RankedAction();
  if (!__swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v7))
  {
    v9 = v6[1];
    *v5 = *v6;
    v5[1] = v9;
    v10 = v7[5];
    v11 = (void **)((char *)v5 + v10);
    v12 = (void **)((char *)v6 + v10);
    v13 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v21 = *v12;
      *v11 = *v12;
      v22 = v21;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
LABEL_12:
        *(_QWORD *)((char *)v5 + v7[6]) = *(_QWORD *)((char *)v6 + v7[6]);
        *(_QWORD *)((char *)v5 + v7[7]) = *(_QWORD *)((char *)v6 + v7[7]);
        *(_QWORD *)((char *)v5 + v7[8]) = *(_QWORD *)((char *)v6 + v7[8]);
        v30 = v7[9];
        v31 = (char *)v5 + v30;
        v32 = (char *)v6 + v30;
        v33 = type metadata accessor for UUID();
        v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v34(v31, v32, v33);
        v35 = v7[10];
        v36 = (_QWORD *)((char *)v5 + v35);
        v37 = (_QWORD *)((char *)v6 + v35);
        v38 = v37[1];
        *v36 = *v37;
        v36[1] = v38;
        *(_QWORD *)((char *)v5 + v7[11]) = *(_QWORD *)((char *)v6 + v7[11]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, (uint64_t)v7);
        return a1;
      }
      v15 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
      v16 = (int *)type metadata accessor for CamUSOParse(0);
      v17 = v16[5];
      __dst = (char *)v11 + v17;
      v18 = (char *)v12 + v17;
      v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(__dst, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v19);
      }
      v23 = v16[6];
      v24 = (void **)((char *)v11 + v23);
      v25 = (void **)((char *)v12 + v23);
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      v27 = v16[7];
      v28 = (char *)v11 + v27;
      v29 = (char *)v12 + v27;
      v28[4] = v29[4];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  return a1;
}

_BYTE *assignWithCopy for TrialOverridesTieBreaker(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int *v8;
  int EnumTagSinglePayload;
  int v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void **v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  id v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char *__dst;
  char *__dsta;

  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = (int *)type metadata accessor for RankedAction();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v8);
  v10 = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v8);
  if (!EnumTagSinglePayload)
  {
    if (v10)
    {
      outlined destroy of CamParse((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      goto LABEL_9;
    }
    *v6 = *v7;
    v6[1] = v7[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (a1 != a2)
    {
      v23 = v8[5];
      v24 = (void **)((char *)v6 + v23);
      v25 = (void **)((char *)v7 + v23);
      outlined destroy of CamParse((uint64_t)v6 + v23, type metadata accessor for CamParse);
      v26 = type metadata accessor for CamParse(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        v51 = *v25;
        *v24 = *v25;
        v52 = v51;
LABEL_25:
        swift_storeEnumTagMultiPayload();
        goto LABEL_26;
      }
      if (!EnumCaseMultiPayload)
      {
        v28 = type metadata accessor for Siri_Nlu_External_UserParse();
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v24, v25, v28);
        v29 = (int *)type metadata accessor for CamUSOParse(0);
        v30 = v29[5];
        __dsta = (char *)v24 + v30;
        v31 = (char *)v25 + v30;
        v32 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
        if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
          memcpy(__dsta, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(__dsta, v31, v32);
          __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v32);
        }
        v53 = v29[6];
        v54 = (void **)((char *)v24 + v53);
        v55 = (void **)((char *)v25 + v53);
        *v54 = *v55;
        v54[1] = v55[1];
        v56 = v29[7];
        v57 = (char *)v24 + v56;
        v58 = (char *)v25 + v56;
        v59 = *(_DWORD *)v58;
        v57[4] = v58[4];
        *(_DWORD *)v57 = v59;
        swift_bridgeObjectRetain();
        goto LABEL_25;
      }
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
LABEL_26:
    *(_QWORD *)((char *)v6 + v8[6]) = *(_QWORD *)((char *)v7 + v8[6]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)((char *)v6 + v8[7]) = *(_QWORD *)((char *)v7 + v8[7]);
    *(_QWORD *)((char *)v6 + v8[8]) = *(_QWORD *)((char *)v7 + v8[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v60 = v8[9];
    v61 = (char *)v6 + v60;
    v62 = (char *)v7 + v60;
    v63 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 24))(v61, v62, v63);
    v64 = v8[10];
    v65 = (_QWORD *)((char *)v6 + v64);
    v66 = (_QWORD *)((char *)v7 + v64);
    *v65 = *v66;
    v65[1] = v66[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)((char *)v6 + v8[11]) = *(_QWORD *)((char *)v7 + v8[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (!v10)
  {
    *v6 = *v7;
    v6[1] = v7[1];
    v11 = v8[5];
    v12 = (void **)((char *)v6 + v11);
    v13 = (void **)((char *)v7 + v11);
    v14 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    v15 = swift_getEnumCaseMultiPayload();
    if (v15 == 1)
    {
      v34 = *v13;
      *v12 = *v13;
      v35 = v34;
    }
    else
    {
      if (v15)
      {
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_20:
        *(_QWORD *)((char *)v6 + v8[6]) = *(_QWORD *)((char *)v7 + v8[6]);
        *(_QWORD *)((char *)v6 + v8[7]) = *(_QWORD *)((char *)v7 + v8[7]);
        *(_QWORD *)((char *)v6 + v8[8]) = *(_QWORD *)((char *)v7 + v8[8]);
        v43 = v8[9];
        v44 = (char *)v6 + v43;
        v45 = (char *)v7 + v43;
        v46 = type metadata accessor for UUID();
        v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v47(v44, v45, v46);
        v48 = v8[10];
        v49 = (_QWORD *)((char *)v6 + v48);
        v50 = (_QWORD *)((char *)v7 + v48);
        *v49 = *v50;
        v49[1] = v50[1];
        *(_QWORD *)((char *)v6 + v8[11]) = *(_QWORD *)((char *)v7 + v8[11]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, (uint64_t)v8);
        return a1;
      }
      v16 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, v13, v16);
      v17 = (int *)type metadata accessor for CamUSOParse(0);
      v18 = v17[5];
      __dst = (char *)v12 + v18;
      v19 = (char *)v13 + v18;
      v20 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(__dst, v19, v20);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v20);
      }
      v36 = v17[6];
      v37 = (void **)((char *)v12 + v36);
      v38 = (void **)((char *)v13 + v36);
      *v37 = *v38;
      v37[1] = v38[1];
      v39 = v17[7];
      v40 = (char *)v12 + v39;
      v41 = (char *)v13 + v39;
      v42 = *(_DWORD *)v41;
      v40[4] = v41[4];
      *(_DWORD *)v40 = v42;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
LABEL_9:
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  return a1;
}

_BYTE *initializeWithTake for TrialOverridesTieBreaker(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *__dst;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = (int *)type metadata accessor for RankedAction();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    v9 = v7[5];
    v10 = (char *)v5 + v9;
    v11 = (char *)v6 + v9;
    v12 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      v14 = (int *)type metadata accessor for CamUSOParse(0);
      v15 = v14[5];
      __dst = &v10[v15];
      v16 = &v11[v15];
      v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(__dst, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v17);
      }
      *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
      v19 = v14[7];
      v20 = &v10[v19];
      v21 = &v11[v19];
      v20[4] = v21[4];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      swift_storeEnumTagMultiPayload();
    }
    *(_QWORD *)((char *)v5 + v7[6]) = *(_QWORD *)((char *)v6 + v7[6]);
    *(_QWORD *)((char *)v5 + v7[7]) = *(_QWORD *)((char *)v6 + v7[7]);
    *(_QWORD *)((char *)v5 + v7[8]) = *(_QWORD *)((char *)v6 + v7[8]);
    v22 = v7[9];
    v23 = (char *)v5 + v22;
    v24 = (char *)v6 + v22;
    v25 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
    *(_OWORD *)((char *)v5 + v7[10]) = *(_OWORD *)((char *)v6 + v7[10]);
    *(_QWORD *)((char *)v5 + v7[11]) = *(_QWORD *)((char *)v6 + v7[11]);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, (uint64_t)v7);
  }
  return a1;
}

_BYTE *assignWithTake for TrialOverridesTieBreaker(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int *v8;
  int EnumTagSinglePayload;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *__dst;
  char *__dsta;

  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = (int *)type metadata accessor for RankedAction();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v8);
  v10 = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v8);
  if (EnumTagSinglePayload)
  {
    if (!v10)
    {
      *(_OWORD *)v6 = *(_OWORD *)v7;
      v11 = v8[5];
      v12 = (char *)v6 + v11;
      v13 = (char *)v7 + v11;
      v14 = type metadata accessor for CamParse(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        v21 = type metadata accessor for Siri_Nlu_External_UserParse();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v12, v13, v21);
        v22 = (int *)type metadata accessor for CamUSOParse(0);
        v23 = v22[5];
        __dst = &v12[v23];
        v24 = &v13[v23];
        v25 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
        if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
        {
          v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
          memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(__dst, v24, v25);
          __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v25);
        }
        *(_OWORD *)&v12[v22[6]] = *(_OWORD *)&v13[v22[6]];
        v33 = v22[7];
        v34 = &v12[v33];
        v35 = &v13[v33];
        v34[4] = v35[4];
        *(_DWORD *)v34 = *(_DWORD *)v35;
        swift_storeEnumTagMultiPayload();
      }
      *(_QWORD *)((char *)v6 + v8[6]) = *(_QWORD *)((char *)v7 + v8[6]);
      *(_QWORD *)((char *)v6 + v8[7]) = *(_QWORD *)((char *)v7 + v8[7]);
      *(_QWORD *)((char *)v6 + v8[8]) = *(_QWORD *)((char *)v7 + v8[8]);
      v36 = v8[9];
      v37 = (char *)v6 + v36;
      v38 = (char *)v7 + v36;
      v39 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
      *(_OWORD *)((char *)v6 + v8[10]) = *(_OWORD *)((char *)v7 + v8[10]);
      *(_QWORD *)((char *)v6 + v8[11]) = *(_QWORD *)((char *)v7 + v8[11]);
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, (uint64_t)v8);
      return a1;
    }
LABEL_7:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    outlined destroy of CamParse((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    goto LABEL_7;
  }
  v16 = v7[1];
  *v6 = *v7;
  v6[1] = v16;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v17 = v8[5];
    v18 = (char *)v6 + v17;
    v19 = (char *)v7 + v17;
    outlined destroy of CamParse((uint64_t)v6 + v17, type metadata accessor for CamParse);
    v20 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v27 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v18, v19, v27);
      v28 = (int *)type metadata accessor for CamUSOParse(0);
      v29 = v28[5];
      __dsta = &v18[v29];
      v30 = &v19[v29];
      v31 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, v31))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dsta, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(__dsta, v30, v31);
        __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v31);
      }
      *(_OWORD *)&v18[v28[6]] = *(_OWORD *)&v19[v28[6]];
      v40 = v28[7];
      v41 = &v18[v40];
      v42 = &v19[v40];
      v41[4] = v42[4];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)((char *)v6 + v8[6]) = *(_QWORD *)((char *)v7 + v8[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v6 + v8[7]) = *(_QWORD *)((char *)v7 + v8[7]);
  *(_QWORD *)((char *)v6 + v8[8]) = *(_QWORD *)((char *)v7 + v8[8]);
  swift_bridgeObjectRelease();
  v43 = v8[9];
  v44 = (char *)v6 + v43;
  v45 = (char *)v7 + v43;
  v46 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  v47 = v8[10];
  v48 = (_QWORD *)((char *)v6 + v47);
  v49 = (_QWORD *)((char *)v7 + v47);
  v51 = *v49;
  v50 = v49[1];
  *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v6 + v8[11]) = *(_QWORD *)((char *)v7 + v8[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialOverridesTieBreaker()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C2E54114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 254)
  {
    OUTLINED_FUNCTION_31();
  }
  else
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
    __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for TrialOverridesTieBreaker()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_1C2E54190(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
    return (_BYTE *)__swift_storeEnumTagSinglePayload((uint64_t)&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TrialOverridesTieBreaker()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TrialOverridesTieBreaker;
  if (!type metadata singleton initialization cache for TrialOverridesTieBreaker)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for TrialOverridesTieBreaker()
{
  unint64_t v0;

  type metadata accessor for RankedAction?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for RankedAction?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for RankedAction?)
  {
    type metadata accessor for RankedAction();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RankedAction?);
  }
}

void TrialOverridesTieBreaker.forcedDisambiguation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_4_5();
  v4 = (uint64_t *)(v3 - v2);
  v5 = OUTLINED_FUNCTION_1_19();
  OUTLINED_FUNCTION_8_13(v0 + *(int *)(v5 + 20), (uint64_t)v4);
  v6 = OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_7_10((uint64_t)v4, 1, v6);
  if (v7)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v4, &demangling cache variable for type metadata for RankedAction?);
    goto LABEL_15;
  }
  v9 = *v4;
  v8 = v4[1];
  swift_bridgeObjectRetain();
  outlined destroy of CamParse((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  if (v9 == 0xD000000000000021 && v8 == 0x80000001C2E99330)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    if ((static TrialProvider.fetchBoolFactorFromTrial(_:)() & 1) == 0
      || (CamFeatureFlag.isEnabled.getter(5u) & 1) == 0)
    {
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
    goto LABEL_8;
LABEL_10:
  if (one-time initialization token for ranker != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.ranker);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C2E0C000, v12, v13, "[TrialOverridesTieBreaker] This override will not be forced disambiguated.", v14, 2u);
    MEMORY[0x1C3BCB4A4](v14, -1, -1);
  }

LABEL_15:
  OUTLINED_FUNCTION_31();
}

uint64_t TrialOverridesTieBreaker.init(tie:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_4_5();
  v11 = v10 - v9;
  *a2 = 1;
  v12 = static TrialProvider.tieBreakingOverrides.getter();
  if (v12)
  {
    Array<A>.getFavouredAction(tie:)(a1, v12, (uint64_t)v6);
    swift_bridgeObjectRelease();
    outlined destroy of CamParse(a1, (uint64_t (*)(_QWORD))type metadata accessor for TopTwo);
    OUTLINED_FUNCTION_7_10((uint64_t)v6, 1, v7);
    if (v13)
    {
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v6, &demangling cache variable for type metadata for RankedAction?);
      v17 = (uint64_t)&a2[*(int *)(OUTLINED_FUNCTION_1_19() + 20)];
      v18 = 1;
    }
    else
    {
      outlined init with take of RankedAction((uint64_t)v6, v11);
      v16 = (uint64_t)&a2[*(int *)(OUTLINED_FUNCTION_1_19() + 20)];
      outlined init with take of RankedAction(v11, v16);
      v17 = v16;
      v18 = 0;
    }
    return __swift_storeEnumTagSinglePayload(v17, v18, 1, v7);
  }
  else
  {
    outlined destroy of CamParse(a1, (uint64_t (*)(_QWORD))type metadata accessor for TopTwo);
    v14 = OUTLINED_FUNCTION_1_19();
    return __swift_storeEnumTagSinglePayload((uint64_t)&a2[*(int *)(v14 + 20)], 1, 1, v7);
  }
}

Swift::Bool __swiftcall TrialOverridesTieBreaker.supportedTie()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Bool result;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = OUTLINED_FUNCTION_1_19();
  outlined init with copy of RankedAction?(v0 + *(int *)(v4 + 20), (uint64_t)v3, &demangling cache variable for type metadata for RankedAction?);
  v5 = OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_7_10((uint64_t)v3, 1, v5);
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v3, &demangling cache variable for type metadata for RankedAction?);
  OUTLINED_FUNCTION_31();
  return result;
}

uint64_t TrialOverridesTieBreaker.actionBoost(features:loggingId:)@<X0>(void (*a1)(_QWORD, _QWORD)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD, _QWORD);
  uint64_t *v43;

  v43 = a2;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_4_5();
  v39 = v7 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_4_5();
  v12 = v11 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_1_1();
  v17 = MEMORY[0x1E0C80A78](v16);
  v40 = (uint64_t)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v38 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v38 - v22;
  v41 = v5;
  v42 = a1;
  OUTLINED_FUNCTION_10_11((uint64_t)&v38 - v22, (uint64_t)a1);
  OUTLINED_FUNCTION_9_12((uint64_t)v23, 0);
  v24 = OUTLINED_FUNCTION_1_19();
  outlined init with copy of RankedAction?(v2 + *(int *)(v24 + 20), (uint64_t)v15, &demangling cache variable for type metadata for RankedAction?);
  v25 = OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_7_10((uint64_t)v15, 1, v25);
  if (v29)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v15, &demangling cache variable for type metadata for RankedAction?);
    v26 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_10_11((uint64_t)v21, (uint64_t)&v15[*(int *)(v25 + 36)]);
    outlined destroy of CamParse((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    v26 = 0;
  }
  OUTLINED_FUNCTION_9_12((uint64_t)v21, v26);
  v27 = v12 + *(int *)(v8 + 48);
  OUTLINED_FUNCTION_8_13((uint64_t)v23, v12);
  OUTLINED_FUNCTION_8_13((uint64_t)v21, v27);
  OUTLINED_FUNCTION_7_10(v12, 1, v4);
  if (!v29)
  {
    v28 = v40;
    outlined init with copy of RankedAction?(v12, v40, &demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_7_10(v27, 1, v4);
    if (!v29)
    {
      v30 = v41;
      v31 = v39;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v39, v27, v4);
      lazy protocol witness table accessor for type UUID and conformance UUID();
      v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      a1 = *(void (**)(_QWORD, _QWORD))(v30 + 8);
      a1(v31, v4);
      OUTLINED_FUNCTION_5_11((uint64_t)v21);
      OUTLINED_FUNCTION_5_11((uint64_t)v23);
      a1(v28, v4);
      OUTLINED_FUNCTION_5_11(v12);
      if ((v32 & 1) != 0)
      {
        OUTLINED_FUNCTION_12_5();
        goto LABEL_15;
      }
LABEL_16:
      a1 = (void (*)(_QWORD, _QWORD))0x80000001C2E9AF80;
      v33 = 0xD000000000000011;
      v34 = 0;
      goto LABEL_17;
    }
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v21, &demangling cache variable for type metadata for UUID?);
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v28, v4);
LABEL_12:
    outlined destroy of RRDataSourceMetadataValue?(v12, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_5_11((uint64_t)v21);
  OUTLINED_FUNCTION_5_11((uint64_t)v23);
  OUTLINED_FUNCTION_7_10(v27, 1, v4);
  if (!v29)
    goto LABEL_12;
  OUTLINED_FUNCTION_12_5();
  outlined destroy of RRDataSourceMetadataValue?(v12, &demangling cache variable for type metadata for UUID?);
LABEL_15:
  v33 = 0x646572756F766146;
  v34 = 0x3F947AE147AE147BLL;
LABEL_17:
  v35 = type metadata accessor for ScoreBoost();
  v36 = v43;
  result = OUTLINED_FUNCTION_10_11((uint64_t)v43 + *(int *)(v35 + 24), (uint64_t)v42);
  *v36 = v34;
  v36[1] = v33;
  v36[2] = (uint64_t)a1;
  return result;
}

void outlined init with copy of RankedAction?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  OUTLINED_FUNCTION_1_5();
}

uint64_t OUTLINED_FUNCTION_1_19()
{
  return type metadata accessor for TrialOverridesTieBreaker();
}

void OUTLINED_FUNCTION_5_11(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of RRDataSourceMetadataValue?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_7_10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

void OUTLINED_FUNCTION_8_13(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of RankedAction?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_9_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_10_11(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t dispatch thunk of TopRecognitionExtractor.getTopRecognition(recognition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for TopRecogntionFeatureExtractorError()
{
  return &type metadata for TopRecogntionFeatureExtractorError;
}

uint64_t dispatch thunk of static ModelLoggingProtocol.setAssetInformation(modelMetadata:namespace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

BOOL static MLFeatureValue.MLFeatureValueCodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void MLFeatureValue.MLFeatureValueCodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t MLFeatureValue.MLFeatureValueCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6570795461746164 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t MLFeatureValue.MLFeatureValueCodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int MLFeatureValue.MLFeatureValueCodingKeys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t MLFeatureValue.MLFeatureValueCodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1635017060;
  else
    return 0x6570795461746164;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLFeatureValue.MLFeatureValueCodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static MLFeatureValue.MLFeatureValueCodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLFeatureValue.MLFeatureValueCodingKeys()
{
  char *v0;

  return MLFeatureValue.MLFeatureValueCodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MLFeatureValue.MLFeatureValueCodingKeys(uint64_t a1)
{
  char *v1;

  MLFeatureValue.MLFeatureValueCodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLFeatureValue.MLFeatureValueCodingKeys()
{
  char *v0;

  return MLFeatureValue.MLFeatureValueCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MLFeatureValue.MLFeatureValueCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = MLFeatureValue.MLFeatureValueCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MLFeatureValue.MLFeatureValueCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MLFeatureValue.MLFeatureValueCodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLFeatureValue.MLFeatureValueCodingKeys()
{
  lazy protocol witness table accessor for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLFeatureValue.MLFeatureValueCodingKeys()
{
  lazy protocol witness table accessor for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t MLFeatureValue.encode(to:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  id v9;
  id v10;
  uint64_t v11;
  id v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MLFeatureValue.MLFeatureValueCodingKeys>);
  MEMORY[0x1E0C80A78](v5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys();
  v6 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_28_4(v6, sel_type);
  OUTLINED_FUNCTION_1_20();
  v7 = KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
    return OUTLINED_FUNCTION_2_22();
  v9 = OUTLINED_FUNCTION_28_4(v7, sel_type);
  switch((unint64_t)v9)
  {
    case 1uLL:
      OUTLINED_FUNCTION_28_4((uint64_t)v9, sel_int64Value);
      OUTLINED_FUNCTION_1_20();
      KeyedEncodingContainer.encode(_:forKey:)();
      return OUTLINED_FUNCTION_2_22();
    case 2uLL:
      objc_msgSend(v3, sel_doubleValue);
      OUTLINED_FUNCTION_1_20();
      KeyedEncodingContainer.encode(_:forKey:)();
      return OUTLINED_FUNCTION_2_22();
    case 3uLL:
      v10 = OUTLINED_FUNCTION_28_4((uint64_t)v9, sel_stringValue);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      OUTLINED_FUNCTION_1_20();
      KeyedEncodingContainer.encode(_:forKey:)();
      OUTLINED_FUNCTION_2_22();
      result = swift_bridgeObjectRelease();
      break;
    case 5uLL:
      v12 = OUTLINED_FUNCTION_28_4((uint64_t)v9, sel_multiArrayValue);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLMultiArray?);
      lazy protocol witness table accessor for type MLMultiArray? and conformance <A> A?();
      OUTLINED_FUNCTION_1_20();
      KeyedEncodingContainer.encode<A>(_:forKey:)();

      return OUTLINED_FUNCTION_2_22();
    default:
      lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
      swift_allocError();
      *(_QWORD *)v11 = 0xD000000000000026;
      *(_QWORD *)(v11 + 8) = 0x80000001C2E99F40;
      *(_BYTE *)(v11 + 16) = 0;
      swift_willThrow();
      return OUTLINED_FUNCTION_2_22();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys;
  if (!lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for MLFeatureValue.MLFeatureValueCodingKeys, &unk_1E7CC25D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys;
  if (!lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for MLFeatureValue.MLFeatureValueCodingKeys, &unk_1E7CC25D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys;
  if (!lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for MLFeatureValue.MLFeatureValueCodingKeys, &unk_1E7CC25D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys;
  if (!lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for MLFeatureValue.MLFeatureValueCodingKeys, &unk_1E7CC25D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLMultiArray? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type MLMultiArray? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type MLMultiArray? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for MLMultiArray?);
    v2 = lazy protocol witness table accessor for type MLMultiArray and conformance MLMultiArray();
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLMultiArray and conformance MLMultiArray()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type MLMultiArray and conformance MLMultiArray;
  if (!lazy protocol witness table cache variable for type MLMultiArray and conformance MLMultiArray)
  {
    v1 = type metadata accessor for MLMultiArray();
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for MLMultiArray, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray and conformance MLMultiArray);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLFeatureValue(_QWORD *a1)
{
  return MLFeatureValue.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for MLFeatureValue.MLFeatureValueCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MLFeatureValue.MLFeatureValueCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C2E5524C + 4 * byte_1C2E95CF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C2E55280 + 4 * byte_1C2E95CF0[v4]))();
}

uint64_t sub_1C2E55280(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E55288(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E55290);
  return result;
}

uint64_t sub_1C2E5529C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E552A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C2E552A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E552B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for MLFeatureValue.MLFeatureValueCodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for MLFeatureValue.MLFeatureValueCodingKeys()
{
  return &unk_1E7CC25D8;
}

uint64_t OUTLINED_FUNCTION_2_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t CamUSOParse.appShortcutInvocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v0);
  OUTLINED_FUNCTION_4_5();
  v3 = v2 - v1;
  v4 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_4_5();
  v8 = v7 - v6;
  MEMORY[0x1C3BCA37C]();
  specialized Collection.first.getter();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_12_6(v3);
  if (v9)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v3, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    return 0;
  }
  OUTLINED_FUNCTION_7_11(v8, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
  v10 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v11 = v10;
  if (!(v10 >> 62))
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
    {
LABEL_6:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v11 & 0xC000000000000001) == 0, v11);
      if ((v11 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BCAC88](0, v11);
      else
        swift_retain();
      OUTLINED_FUNCTION_12();
      v12 = UsoTask.appShortcutInvocation.getter();
      OUTLINED_FUNCTION_13_11();
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_61();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  OUTLINED_FUNCTION_12();
  if (v13 != 1)
  {
LABEL_13:
    OUTLINED_FUNCTION_2_23(v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    OUTLINED_FUNCTION_12();
    return 0;
  }
  OUTLINED_FUNCTION_61();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  OUTLINED_FUNCTION_12();
  if (v14)
    goto LABEL_6;
  OUTLINED_FUNCTION_12();
  v12 = 0;
LABEL_9:
  OUTLINED_FUNCTION_2_23(v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  return v12;
}

Swift::Bool __swiftcall CamParse.isAppShortcutParse()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Bool v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_4_5();
  v5 = v4 - v3;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_4_5();
  v9 = v8 - v7;
  outlined init with copy of CamParse(v1, v8 - v7);
  if (swift_getEnumCaseMultiPayload())
  {
    _s7SiriCam0B5ParseOWOhTm_1(v9, type metadata accessor for CamParse);
    return 0;
  }
  else
  {
    outlined init with take of CamUSOParse(v9, v5);
    v11 = CamUSOParse.appShortcutInvocation.getter();
    v10 = v12 != 0;
    if (v12)
      outlined consume of AppShortcutInvocation?(v11, v12);
    _s7SiriCam0B5ParseOWOhTm_1(v5, type metadata accessor for CamUSOParse);
  }
  return v10;
}

uint64_t _s7SiriCam0B5ParseOWOhTm_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  OUTLINED_FUNCTION_18_0(v3);
  return a1;
}

uint64_t UsoTask.appShortcutInvocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int EnumTagSinglePayload;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_9_7();
  v73 = v2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_9_7();
  v72 = v5;
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>);
  v6 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  OUTLINED_FUNCTION_9_7();
  v76 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  OUTLINED_FUNCTION_1_1();
  v9 = MEMORY[0x1E0C80A78](v8);
  v74 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v79 = (uint64_t)&v67 - v11;
  v12 = type metadata accessor for UsoIdentifier();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v67 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v75 = (uint64_t)&v67 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v67 - v21;
  MEMORY[0x1E0C80A78](v20);
  v78 = (uint64_t)&v67 - v23;
  v80 = v0;
  static UsoTask_CodegenConverter.convert(task:)();
  if (v86)
  {
    type metadata accessor for UsoTask_execute_common_VoiceCommand();
    if ((OUTLINED_FUNCTION_6_10() & 1) != 0)
    {
      v71 = v4;
      v24 = v81;
      v25 = swift_retain();
      MEMORY[0x1C3BCA538](&v83, v25);
      OUTLINED_FUNCTION_13_11();
      if (v83)
      {
        v70 = v6;
        v26 = v13;
        v27 = OUTLINED_FUNCTION_11_8();
        swift_release();
        if (v27)
        {
          v28 = v27;
          v68 = v24;
          v69 = v3;
          v29 = *(_QWORD *)(v27 + 16);
          v13 = v26;
          if (v29)
          {
            v30 = v28 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
            v31 = *(_QWORD *)(v26 + 72);
            v32 = v26;
            v33 = *(void (**)(char *, unint64_t, uint64_t))(v26 + 16);
            v67 = v28;
            swift_bridgeObjectRetain();
            while (1)
            {
              v33(v22, v30, v12);
              if ((closure #1 in UsoTask.appShortcutInvocation.getter((uint64_t)v22) & 1) != 0)
                break;
              OUTLINED_FUNCTION_2_23((uint64_t)v22, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
              v30 += v31;
              if (!--v29)
              {
                OUTLINED_FUNCTION_8();
                v34 = 1;
                v13 = v32;
                v6 = v70;
                v35 = v79;
                goto LABEL_16;
              }
            }
            OUTLINED_FUNCTION_8();
            v13 = v32;
            v35 = v79;
            OUTLINED_FUNCTION_7_11(v79, (uint64_t)v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 32));
            v34 = 0;
          }
          else
          {
            v34 = 1;
            v35 = v79;
          }
          v6 = v70;
LABEL_16:
          OUTLINED_FUNCTION_14_10(v35, v34);
          OUTLINED_FUNCTION_8();
          OUTLINED_FUNCTION_12_6(v35);
          v3 = v69;
          v4 = v71;
          if (!v48)
          {
            v58 = v78;
            OUTLINED_FUNCTION_7_11(v78, v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32));
            v83 = UsoIdentifier.value.getter();
            v84 = v59;
            v81 = 95;
            v82 = 0xE100000000000000;
            lazy protocol witness table accessor for type String and conformance String();
            v60 = StringProtocol.components<A>(separatedBy:)();
            swift_bridgeObjectRelease();
            if (!*(_QWORD *)(v60 + 16))
            {
              OUTLINED_FUNCTION_12();
              __break(1u);
              OUTLINED_FUNCTION_2_23((uint64_t)v22, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
              result = swift_bridgeObjectRelease();
              __break(1u);
              return result;
            }
            swift_bridgeObjectRetain();
            OUTLINED_FUNCTION_12();
            v38 = UsoIdentifier.appBundleId.getter();
            OUTLINED_FUNCTION_10_12();
            v61 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
            v62 = v58;
LABEL_45:
            OUTLINED_FUNCTION_2_23(v62, v61);
            return v38;
          }
          OUTLINED_FUNCTION_10_12();
          outlined destroy of Siri_Nlu_External_UserDialogAct?(v35, &demangling cache variable for type metadata for UsoIdentifier?);
        }
        else
        {
          OUTLINED_FUNCTION_13_11();
          v13 = v26;
          v6 = v70;
          v4 = v71;
        }
      }
      else
      {
        OUTLINED_FUNCTION_13_11();
        v4 = v71;
      }
    }
  }
  else
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)&v83, &demangling cache variable for type metadata for Any?);
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v86)
  {
    v55 = &demangling cache variable for type metadata for Any?;
    v56 = &v83;
    goto LABEL_39;
  }
  type metadata accessor for UsoTask_run_common_VoiceCommand();
  if ((OUTLINED_FUNCTION_6_10() & 1) == 0)
    return 0;
  v71 = v4;
  v36 = v81;
  v37 = swift_retain();
  MEMORY[0x1C3BCA514](&v83, v37);
  OUTLINED_FUNCTION_17_9();
  v38 = v83;
  if (!v83 || (v38 = OUTLINED_FUNCTION_11_8(), swift_release(), !v38))
  {
    OUTLINED_FUNCTION_17_9();
    return v38;
  }
  v70 = v6;
  v39 = *(_QWORD *)(v38 + 16);
  v68 = v36;
  if (!v39)
  {
    v52 = 1;
    v54 = v74;
    v53 = v77;
    goto LABEL_48;
  }
  v69 = v3;
  v40 = v38 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v41 = *MEMORY[0x1E0DA2C90];
  v78 = *(_QWORD *)(v13 + 72);
  v79 = v41;
  v80 = v13;
  v42 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
  v67 = v38;
  OUTLINED_FUNCTION_61();
  while (1)
  {
    v42(v17, v40, v12);
    v43 = UsoIdentifier.namespace.getter();
    v45 = v44;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (!v45)
    {
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_3_16();
      goto LABEL_33;
    }
    v48 = v43 == v46 && v45 == v47;
    if (v48)
      break;
    v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_3_16();
    if ((v43 & 1) != 0)
      goto LABEL_35;
LABEL_33:
    OUTLINED_FUNCTION_9_13();
LABEL_36:
    ((void (*)(char *, uint64_t))v43)(v17, v12);
    v40 += v78;
    if (!--v39)
    {
      OUTLINED_FUNCTION_12();
      v52 = 1;
      v13 = v80;
      v53 = v77;
      v3 = v69;
      v54 = v74;
      goto LABEL_48;
    }
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_16();
LABEL_35:
  v49 = UsoIdentifier.value.getter();
  v43 = v50;
  v83 = v49;
  v84 = v50;
  v81 = 0x726F68736F747561;
  v82 = 0xEF2F2F3A74756374;
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  v51 = BidirectionalCollection<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_13();
  if ((v51 & 1) == 0)
    goto LABEL_36;
  OUTLINED_FUNCTION_12();
  v13 = v80;
  v54 = v74;
  OUTLINED_FUNCTION_7_11(v74, (uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 32));
  v52 = 0;
  v53 = v77;
  v3 = v69;
LABEL_48:
  OUTLINED_FUNCTION_14_10(v54, v52);
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_12_6(v54);
  v63 = v70;
  if (v48)
  {
    OUTLINED_FUNCTION_17_9();
    v55 = &demangling cache variable for type metadata for UsoIdentifier?;
    v56 = (uint64_t *)v54;
    goto LABEL_39;
  }
  OUTLINED_FUNCTION_7_11(v75, v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, Substring));
  Regex.init(_regexString:version:)();
  UsoIdentifier.value.getter();
  v64 = v73;
  Regex.firstMatch(in:)();
  swift_bridgeObjectRelease();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v64, 1, v3);
  if (EnumTagSinglePayload != 1)
  {
    (*(void (**)(void))(v71 + 32))();
    swift_getKeyPath();
    Regex.Match.subscript.getter();
    swift_release();
    MEMORY[0x1C3BCA8B0](v83, v84, v85, v86);
    OUTLINED_FUNCTION_12();
    v66 = v75;
    v38 = UsoIdentifier.appBundleId.getter();
    OUTLINED_FUNCTION_10_12();
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v72, v3);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v76, v53);
    v61 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    v62 = v66;
    goto LABEL_45;
  }
  OUTLINED_FUNCTION_10_12();
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v76, v53);
  OUTLINED_FUNCTION_2_23(v75, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  v55 = &demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match?;
  v56 = (uint64_t *)v64;
LABEL_39:
  outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v56, v55);
  return 0;
}

uint64_t closure #1 in UsoTask.appShortcutInvocation.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v2 = type metadata accessor for UsoIdentifier.NluComponent();
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  MEMORY[0x1E0C80A78](v2);
  v31 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  MEMORY[0x1E0C80A78](v32);
  v36 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v35 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v31 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v31 - v11;
  v13 = type metadata accessor for UsoIdentifier();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = UsoIdentifier.namespace.getter();
  v19 = v18;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v19)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
    goto LABEL_9;
  }
  if (v17 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
    goto LABEL_11;
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  if ((v23 & 1) == 0)
  {
LABEL_9:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
LABEL_17:
    v28 = 0;
    return v28 & 1;
  }
LABEL_11:
  UsoIdentifier.sourceComponent.getter();
  v24 = v33;
  v25 = v34;
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v10, *MEMORY[0x1E0DA0618], v34);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v25);
  v26 = v36;
  v27 = v36 + *(int *)(v32 + 48);
  outlined init with copy of UsoIdentifier.NluComponent?((uint64_t)v12, v36);
  outlined init with copy of UsoIdentifier.NluComponent?((uint64_t)v10, v27);
  if (__swift_getEnumTagSinglePayload(v26, 1, v25) != 1)
  {
    outlined init with copy of UsoIdentifier.NluComponent?(v26, (uint64_t)v35);
    if (__swift_getEnumTagSinglePayload(v27, 1, v25) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v31, v27, v25);
      lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent();
      v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      v30 = *(void (**)(char *, uint64_t))(v24 + 8);
      v30(v31, v25);
      outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v10, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v12, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v30(v35, v25);
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v36, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      return v28 & 1;
    }
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v10, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v12, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v35, v25);
    goto LABEL_16;
  }
  outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v10, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v12, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (__swift_getEnumTagSinglePayload(v27, 1, v25) != 1)
  {
LABEL_16:
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v26, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
    goto LABEL_17;
  }
  outlined destroy of Siri_Nlu_External_UserDialogAct?(v26, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v28 = 1;
  return v28 & 1;
}

uint64_t outlined init with copy of UsoIdentifier.NluComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_18_0(v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent;
  if (!lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent)
  {
    v1 = type metadata accessor for UsoIdentifier.NluComponent();
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DA0630], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_23@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_3_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_7_11@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_9_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_10_12()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_11_8()
{
  return dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
}

uint64_t OUTLINED_FUNCTION_12_6(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_13_11()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_14_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_17_9()
{
  return swift_release();
}

uint64_t *AsrSimpleFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static AsrSimpleFeatureExtractor.extractedFeatures;
}

uint64_t AsrSimpleFeatureExtractor.extractImpl(from:)(void *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;

  v2 = outlined bridged method (pb) of @objc SASRecognition.utterances.getter(a1);
  if (v2)
  {
    if (v2 >> 62)
      v3 = _CocoaArrayWrapper.endIndex.getter();
    else
      v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for common != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.common);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      *(_DWORD *)v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000001C2E98710, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2E0C000, v5, v6, "No utterances found. Forcing %s to 0", v7, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    v3 = 0;
  }
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  result = static MLMultiArray.makeScalar(from:)((double)v3);
  v9 = result;
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2E94230;
    *(_QWORD *)(inited + 32) = 0xD00000000000001BLL;
    *(_QWORD *)(inited + 40) = 0x80000001C2E98710;
    *(_QWORD *)(inited + 48) = v9;
    return Dictionary.init(dictionaryLiteral:)();
  }
  return result;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance AsrSimpleFeatureExtractor()
{
  AsrSimpleFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance AsrSimpleFeatureExtractor(void **a1)
{
  return AsrSimpleFeatureExtractor.extractImpl(from:)(*a1);
}

uint64_t outlined bridged method (pb) of @objc SASRecognition.utterances.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_utterances);
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASUtterance);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

ValueMetadata *type metadata accessor for AsrSimpleFeatureExtractor()
{
  return &type metadata for AsrSimpleFeatureExtractor;
}

_QWORD *UncertaintyPromptHandler.init()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _BYTE v15[40];
  uint64_t v16;
  __int128 v17;
  ValueMetadata *v18;
  _UNKNOWN **v19;

  v2 = v0;
  type metadata accessor for LatticePathFeatureExtractor();
  v3 = OUTLINED_FUNCTION_39();
  v0[2] = 0x3FF0000000000000;
  v0[3] = v3;
  v4 = type metadata accessor for CoreMLHandler();
  swift_allocObject();
  v5 = CoreMLHandler.init(forModelWithName:)(0xD000000000000025, 0x80000001C2E997D0);
  if (v1)
  {
    swift_release();
    type metadata accessor for UncertaintyPromptHandler();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v18 = (ValueMetadata *)v4;
    v19 = &protocol witness table for CoreMLHandler;
    *(_QWORD *)&v17 = v5;
    outlined init with take of AppSelectionSignalComponent(&v17, (uint64_t)(v0 + 11));
    v6 = Dictionary.init(dictionaryLiteral:)();
    v0[4] = 0xD000000000000023;
    v0[5] = 0x80000001C2E9B070;
    v0[6] = 0xD000000000000027;
    v0[7] = 0x80000001C2E9B0A0;
    v0[8] = 0xD000000000000026;
    v0[9] = 0x80000001C2E9B0D0;
    v0[10] = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UncertaintyPromptActionEnforcer>);
    v7 = OUTLINED_FUNCTION_39();
    *(_OWORD *)(v7 + 16) = xmmword_1C2E95ED0;
    *(_QWORD *)(v7 + 56) = &type metadata for LongPayloadActionEnforcer;
    *(_QWORD *)(v7 + 64) = &protocol witness table for LongPayloadActionEnforcer;
    *(_QWORD *)(v7 + 96) = &type metadata for UserConfirmationActionEnforcer;
    *(_QWORD *)(v7 + 104) = &protocol witness table for UserConfirmationActionEnforcer;
    *(_QWORD *)(v7 + 136) = &type metadata for SiriVocabActionEnforcer;
    *(_QWORD *)(v7 + 144) = &protocol witness table for SiriVocabActionEnforcer;
    *(_QWORD *)(v7 + 176) = &type metadata for MessageDictationActionEnforcer;
    *(_QWORD *)(v7 + 184) = &protocol witness table for MessageDictationActionEnforcer;
    *(_QWORD *)(v7 + 216) = &type metadata for GiveUpRepeatActionEnforcer;
    *(_QWORD *)(v7 + 224) = &protocol witness table for GiveUpRepeatActionEnforcer;
    *(_QWORD *)(v7 + 256) = &type metadata for ExecuteActionEnforcer;
    *(_QWORD *)(v7 + 264) = &protocol witness table for ExecuteActionEnforcer;
    *(_QWORD *)(v7 + 296) = &type metadata for ShadowLogActionEnforcer;
    *(_QWORD *)(v7 + 304) = &protocol witness table for ShadowLogActionEnforcer;
    *(_QWORD *)(v7 + 336) = &type metadata for ZeroAsrConfidenceActionEnforcer;
    *(_QWORD *)(v7 + 344) = &protocol witness table for ZeroAsrConfidenceActionEnforcer;
    *(_QWORD *)(v7 + 376) = &type metadata for ExactShortcutActionEnforcer;
    *(_QWORD *)(v7 + 384) = &protocol witness table for ExactShortcutActionEnforcer;
    *(_QWORD *)(v7 + 416) = &type metadata for OverrideParseActionEnforcer;
    *(_QWORD *)(v7 + 424) = &protocol witness table for OverrideParseActionEnforcer;
    *(_QWORD *)(v7 + 456) = &type metadata for UserEntityVocabActionEnforcer;
    *(_QWORD *)(v7 + 464) = &protocol witness table for UserEntityVocabActionEnforcer;
    v16 = v7;
    v8 = (void *)MEMORY[0x1C3BCA844](0x6C616E7265746E49, 0xED0000646C697542);
    v9 = MGGetBoolAnswer();

    if (v9)
    {
      if (one-time initialization token for ambiguityHandling != -1)
        swift_once();
      v10 = OUTLINED_FUNCTION_14_1();
      v11 = OUTLINED_FUNCTION_8_1(v10, (uint64_t)static Logger.ambiguityHandling);
      v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)OUTLINED_FUNCTION_4();
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_1C2E0C000, v11, v12, "Detected internal build", v13, 2u);
        OUTLINED_FUNCTION_3();
      }

      v18 = &type metadata for UncertaintyPromptMagicWordsActionEnforcer;
      v19 = &protocol witness table for UncertaintyPromptMagicWordsActionEnforcer;
      outlined init with take of AppSelectionSignalComponent(&v17, (uint64_t)v15);
      specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v15);
      v7 = v16;
    }
    v2[19] = &type metadata for UncertaintyPromptSequentialEnforcer;
    v2[20] = &protocol witness table for UncertaintyPromptSequentialEnforcer;
    v2[16] = v7;
  }
  return v2;
}

uint64_t static UncertaintyPromptHandler.register(camEnabledFeatures:allowDefaultAskRepeatModel:asrOnDevice:)(uint64_t a1, char a2, os_log_type_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _DWORD *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int EnumTagSinglePayload;
  uint64_t v22;
  os_log_type_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v31;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata)?);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_4_5();
  v9 = v8 - v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_10:
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v14 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.ambiguityHandling);
    v15 = OUTLINED_FUNCTION_24_8();
    v16 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_24_5(v16))
    {
      v17 = (_DWORD *)OUTLINED_FUNCTION_4();
      v31 = OUTLINED_FUNCTION_4();
      *v17 = 136315138;
      v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x455045525F4B5341, 0xEA00000000005441, &v31);
      OUTLINED_FUNCTION_4_17(v18);
      v19 = "[UncertaintyPromptHandler] Not registering as %s is disabled";
      goto LABEL_14;
    }
LABEL_27:

    return 0;
  }
  swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    v12 = *(unsigned __int8 *)(a1 + v11 + 32);
    if (v12 != 1)
      break;
    OUTLINED_FUNCTION_18_7();
LABEL_7:
    OUTLINED_FUNCTION_7_12();
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      goto LABEL_16;
    if (v10 == ++v11)
    {
      OUTLINED_FUNCTION_1_0();
      goto LABEL_10;
    }
  }
  if (v12 == 2)
    goto LABEL_7;
  OUTLINED_FUNCTION_1_0();
LABEL_16:
  OUTLINED_FUNCTION_1_0();
  if ((a3 & 1) == 0)
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v26 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.ambiguityHandling);
    v15 = OUTLINED_FUNCTION_24_8();
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v27))
    {
      v28 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1C2E0C000, v15, v27, "[UncertaintyPromptHandler] Not registering as ASR did not run on device", v28, 2u);
      OUTLINED_FUNCTION_3();
    }
    goto LABEL_27;
  }
  if ((a2 & 1) == 0)
  {
    static AssetProvider.fetchModelFromUAF(_:)(0xD000000000000025, 0x80000001C2E997D0, v9);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v9, 1, v20);
    outlined destroy of (CamLogOutput, CamModelMetadata)(v9, &demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata)?);
    if (EnumTagSinglePayload == 1)
    {
      if (one-time initialization token for ambiguityHandling != -1)
        swift_once();
      v22 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.ambiguityHandling);
      v15 = OUTLINED_FUNCTION_24_8();
      v23 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_24_5(v23))
      {
        v24 = (_DWORD *)OUTLINED_FUNCTION_4();
        v31 = OUTLINED_FUNCTION_4();
        *v24 = 136315138;
        v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001C2E997D0, &v31);
        OUTLINED_FUNCTION_4_17(v25);
        v19 = "[UncertaintyPromptHandler] Cannot find %s model";
LABEL_14:
        OUTLINED_FUNCTION_20_9(&dword_1C2E0C000, v15, a3, v19);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
      }
      goto LABEL_27;
    }
  }
  type metadata accessor for UncertaintyPromptHandler();
  v29 = swift_allocObject();
  UncertaintyPromptHandler.init()();
  return v29;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UncertaintyPromptHandler.update()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  v2 = v0[15];
  __swift_project_boxed_opaque_existential_1(v0 + 11, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t UncertaintyPromptHandler.handle(camInput:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t i;
  int v31;
  char v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  const char *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v64)(uint64_t);
  uint64_t v65;
  int v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  unint64_t v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[12];
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t aBlock;
  uint64_t v126;
  uint64_t (*v127)(uint64_t);
  void *v128;
  void (*v129)();
  _QWORD *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_4_5();
  v7 = (unint64_t *)(v6 - v5);
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_4_5();
  v12 = v11 - v10;
  v13 = type metadata accessor for DispatchQoS();
  v122 = *(_QWORD *)(v13 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_9_7();
  v121 = v15;
  OUTLINED_FUNCTION_25_7();
  v16 = type metadata accessor for CamInput();
  v118 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v119 = v17;
  v120 = &v95[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  OUTLINED_FUNCTION_25_7();
  v117 = type metadata accessor for DispatchQoS.QoSClass();
  v116 = *(_QWORD *)(v117 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_9_7();
  v115 = v19;
  OUTLINED_FUNCTION_25_7();
  v113 = type metadata accessor for CamModelMetadata();
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_9_7();
  v114 = (void *)v21;
  OUTLINED_FUNCTION_25_7();
  v22 = type metadata accessor for OSSignpostID();
  v23 = MEMORY[0x1E0C80A78](v22);
  v24 = MEMORY[0x1E0C80A78](v23);
  if (!*(_QWORD *)(a1 + *(int *)(v16 + 32)))
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v38 = OUTLINED_FUNCTION_14_1();
    v34 = OUTLINED_FUNCTION_8_1(v38, (uint64_t)static Logger.ambiguityHandling);
    v39 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_4_8(v39))
    {
      v36 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_WORD *)v36 = 0;
      v37 = "[UncertaintyPromptHandler] Skipping prediction due to missing speech package";
LABEL_19:
      _os_log_impl(&dword_1C2E0C000, v34, (os_log_type_t)v12, v37, v36, 2u);
      OUTLINED_FUNCTION_3();
    }
    goto LABEL_20;
  }
  v109 = v13;
  v110 = v12;
  v12 = *(_QWORD *)(a1 + *(int *)(v16 + 48));
  v28 = *(_QWORD *)(v12 + 16);
  if (!v28)
    goto LABEL_11;
  v101 = v9;
  v102 = v8;
  v106 = v27;
  v103 = v16;
  v107 = v26;
  v112 = &v95[-v25];
  v104 = v3;
  v108 = v24;
  v105 = v7;
  v111 = a1;
  v29 = 0xEA00000000005441;
  swift_bridgeObjectRetain_n();
  for (i = 0; i != v28; ++i)
  {
    v31 = *(unsigned __int8 *)(v12 + i + 32);
    if (v31 == 1)
    {
      OUTLINED_FUNCTION_18_7();
    }
    else if (v31 != 2)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v40 = v111;
      if (one-time initialization token for ambiguityHandling != -1)
        swift_once();
      v41 = (id)static Log.ambiguityHandling;
      OUTLINED_FUNCTION_28_7();
      static os_signpost_type_t.begin.getter();
      OUTLINED_FUNCTION_0_22();
      v42 = v123;
      v43 = *(double *)(v123 + 16);
      v44 = *(_QWORD *)(v123 + 24);
      swift_retain();
      v45 = specialized FeatureExtracting.extract(from:)(v40, v44, v43);
      if (v1)
      {
        swift_release();
        OUTLINED_FUNCTION_13_12();
        OUTLINED_FUNCTION_9_14(v28);
        return v29;
      }
      v46 = v45;
      swift_release();
      v47 = (void *)static Log.ambiguityHandling;
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_0_22();
      v47;
      OUTLINED_FUNCTION_28_7();
      static os_signpost_type_t.begin.getter();
      OUTLINED_FUNCTION_0_22();
      v48 = *(_QWORD *)(v42 + 112);
      v49 = *(_QWORD *)(v42 + 120);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v42 + 88), v48);
      v50 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v46, v48, v49);
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_0_22();
      v51 = *(_OWORD *)(v42 + 48);
      v131 = *(_OWORD *)(v42 + 32);
      v132 = v51;
      v133 = *(_OWORD *)(v42 + 64);
      v134 = *(_QWORD *)(v42 + 80);
      CamOutputProvider.toCamOutput(from:)();
      v29 = v52;
      v100 = v50;
      v113 = swift_allocBox();
      v55 = v54;
      v56 = v46;
      v57 = *(_QWORD *)(v42 + 112);
      v58 = *(_QWORD *)(v42 + 120);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v42 + 88), v57);
      (*(void (**)(uint64_t, uint64_t))(v58 + 24))(v57, v58);
      v59 = *(_QWORD *)(v42 + 152);
      v60 = *(_QWORD *)(v42 + 160);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v42 + 128), v59);
      v123 = v55;
      v61 = v55;
      v62 = (uint64_t)v114;
      outlined init with copy of CamModelMetadata(v61, (uint64_t)v114, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
      v63 = *(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 8);
      v99 = v56;
      v63(&aBlock, v56, v29, v111, v62, v59, v60);
      outlined destroy of CamModelMetadata(v62);
      v64 = v127;
      if (v127)
      {
        v65 = v126;
        v66 = aBlock;
        if (one-time initialization token for ambiguityHandling != -1)
          swift_once();
        v67 = OUTLINED_FUNCTION_14_1();
        __swift_project_value_buffer(v67, (uint64_t)static Logger.ambiguityHandling);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v68 = Logger.logObject.getter();
        v69 = static os_log_type_t.info.getter();
        v70 = v69;
        if (os_log_type_enabled(v68, v69))
        {
          v71 = OUTLINED_FUNCTION_4();
          v97 = OUTLINED_FUNCTION_4();
          aBlock = v97;
          *(_DWORD *)v71 = 136315650;
          LODWORD(v114) = v66;
          LOBYTE(v124) = *(_BYTE *)(v29 + 56);
          v98 = v65;
          v72 = String.init<A>(describing:)();
          v124 = OUTLINED_FUNCTION_21_10(v72, v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_29_8();
          OUTLINED_FUNCTION_13();
          *(_WORD *)(v71 + 12) = 2080;
          LOBYTE(v124) = (_BYTE)v114;
          v96 = v70;
          v74 = String.init<A>(describing:)();
          v124 = OUTLINED_FUNCTION_21_10(v74, v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_13();
          *(_WORD *)(v71 + 22) = 2080;
          v76 = v98;
          swift_bridgeObjectRetain();
          v124 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, (unint64_t)v64, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C2E0C000, v68, (os_log_type_t)v96, "[UncertaintyPromptHandler] Overriding %s with %s due to %s", (uint8_t *)v71, 0x20u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
        }

        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_29_8();
        v77 = v99;
        LOBYTE(aBlock) = v66;
        v78._countAndFlagsBits = v65;
        v78._object = v64;
        CamOutput.overrideAction(action:enforcer:)((SiriCam::CamAction)&aBlock, v78);
        if (v65 == 0xD000000000000017 && v64 == (uint64_t (*)(uint64_t))0x80000001C2E9B050)
        {
          swift_bridgeObjectRelease();
LABEL_39:
          *(_BYTE *)(v123 + 48) = 1;
          goto LABEL_40;
        }
        v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v79 & 1) != 0)
          goto LABEL_39;
      }
      else
      {
        v77 = v99;
      }
LABEL_40:
      v80 = v113;
      type metadata accessor for OS_dispatch_queue();
      v81 = v116;
      v82 = v115;
      v83 = v117;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v116 + 104))(v115, *MEMORY[0x1E0DEF520], v117);
      v114 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v82, v83);
      v84 = v120;
      outlined init with copy of CamModelMetadata(v111, (uint64_t)v120, (uint64_t (*)(_QWORD))type metadata accessor for CamInput);
      v85 = (*(unsigned __int8 *)(v118 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
      v86 = (_QWORD *)swift_allocObject();
      v86[2] = v77;
      v86[3] = v29;
      v86[4] = v80;
      outlined init with take of CamInput((uint64_t)v84, (uint64_t)v86 + v85);
      v129 = partial apply for closure #1 in UncertaintyPromptHandler.handle(camInput:);
      v130 = v86;
      aBlock = MEMORY[0x1E0C809B0];
      v126 = 1107296256;
      v127 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v128 = &block_descriptor_1;
      v87 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      v88 = v121;
      static DispatchQoS.unspecified.getter();
      v124 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      v89 = v110;
      v90 = v102;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v91 = v114;
      MEMORY[0x1C3BCAB44](0, v88, v89, v87);
      _Block_release(v87);

      (*(void (**)(unint64_t, uint64_t))(v101 + 8))(v89, v90);
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v88, v109);
      swift_release();
      v92 = v123;
      swift_beginAccess();
      v93 = (uint64_t)v105;
      v94 = (uint64_t)v105 + *(int *)(v104 + 48);
      *v105 = v29;
      outlined init with copy of CamModelMetadata(v92, v94, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
      swift_retain();
      specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)();

      outlined destroy of (CamLogOutput, CamModelMetadata)(v93, &demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
      OUTLINED_FUNCTION_13_12();
      OUTLINED_FUNCTION_9_14(v106);
      OUTLINED_FUNCTION_9_14((uint64_t)v112);
      swift_release();
      return v29;
    }
    OUTLINED_FUNCTION_7_12();
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_13();
    if ((v32 & 1) != 0)
    {
      v29 = v12;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_11:
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v33 = OUTLINED_FUNCTION_14_1();
  v34 = OUTLINED_FUNCTION_8_1(v33, (uint64_t)static Logger.ambiguityHandling);
  v35 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_4_8(v35))
  {
    v36 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v36 = 0;
    v37 = "[UncertaintyPromptHandler] Skipping prediction due to missing ASK_REPEAT feature flag";
    goto LABEL_19;
  }
LABEL_20:

  type metadata accessor for CamOutput();
  *(_BYTE *)(OUTLINED_FUNCTION_39() + 56) = 1;
  return CamLogOutput.init(prediction:score:threshold:)(0, 0.0, 0.0);
}

void closure #1 in UncertaintyPromptHandler.handle(camInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for CamModelMetadata();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_projectBox();
  swift_beginAccess();
  outlined init with copy of CamModelMetadata(v10, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for CamModelMetadata);
  v11 = UUID.uuidString.getter();
  v13 = v12;
  v14 = type metadata accessor for CamInput();
  specialized static CamFeatureStoreLoggingProtocol.writeData(modelFeatures:modelOutput:modelMetadata:requestId:rcId:fsStream:)(a1, a2, (uint64_t)v9, v11, v13, *(_QWORD *)(a4 + *(int *)(v14 + 24)), *(_QWORD *)(a4 + *(int *)(v14 + 24) + 8), 0);
}

uint64_t sub_1C2E57E28()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return outlined destroy of CamModelMetadata(v0);
}

uint64_t UncertaintyPromptHandler.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);
  return v0;
}

uint64_t UncertaintyPromptHandler.__deallocating_deinit()
{
  UncertaintyPromptHandler.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UncertaintyPromptHandler()
{
  return objc_opt_self();
}

void protocol witness for ActionHandler.update() in conformance UncertaintyPromptHandler()
{
  UncertaintyPromptHandler.update()();
}

uint64_t protocol witness for ActionHandler.handle(camInput:) in conformance UncertaintyPromptHandler(uint64_t a1)
{
  return UncertaintyPromptHandler.handle(camInput:)(a1);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_1C2E57F6C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (int *)type metadata accessor for CamInput();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_30_8(v3);
  OUTLINED_FUNCTION_30_8(v3 + v1[5]);
  swift_bridgeObjectRelease();
  v5 = v3 + v1[7];
  if (!__swift_getEnumTagSinglePayload(v5, 1, v4))
    OUTLINED_FUNCTION_30_8(v5);

  OUTLINED_FUNCTION_22_5();
  OUTLINED_FUNCTION_22_5();
  OUTLINED_FUNCTION_22_5();
  return swift_deallocObject();
}

uint64_t outlined init with take of CamInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CamInput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in UncertaintyPromptHandler.handle(camInput:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CamInput() - 8) + 80);
  closure #1 in UncertaintyPromptHandler.handle(camInput:)(v0[2], v0[3], v0[4], (uint64_t)v0 + ((v1 + 40) & ~v1));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  unint64_t v21;

  if (result < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    v5 = v14;
    *v3 = v14;
  }
  v15 = v5 + 32 + 40 * v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UncertaintyPromptActionEnforcer);
  result = swift_arrayDestroy();
  if (!v9)
  {
LABEL_16:
    v20 = 0;
    v21 = v5 + 40 * v7 - 8;
    while ((v20 & 1) == 0)
    {
      v21 += 40;
      result = outlined init with copy of SignalProviding(a3, v21);
      v20 = 1;
      if (v21 >= v15)
        return outlined destroy of (CamLogOutput, CamModelMetadata)(a3, &demangling cache variable for type metadata for CollectionOfOne<UncertaintyPromptActionEnforcer>);
    }
    __break(1u);
    goto LABEL_21;
  }
  v16 = *(_QWORD *)(v5 + 16);
  if (__OFSUB__(v16, a2))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5 + 32 + 40 * a2, v16 - a2, v15 + 40);
  v17 = *(_QWORD *)(v5 + 16);
  v18 = __OFADD__(v17, v9);
  v19 = v17 + v9;
  if (!v18)
  {
    *(_QWORD *)(v5 + 16) = v19;
    goto LABEL_16;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_4_17(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_14(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_18_7()
{
  return 0x4F5455415F534D53;
}

void OUTLINED_FUNCTION_20_9(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_21_10(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 192));
}

uint64_t OUTLINED_FUNCTION_22_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_24_8()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_25_7()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_28_7()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_29_8()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_30_8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t MixingModelHandler.deinit()
{
  uint64_t v0;

  outlined destroy of MixingModel(v0 + 16);
  swift_bridgeObjectRelease();
  outlined destroy of CamModelMetadata(v0 + OBJC_IVAR____TtC7SiriCam18MixingModelHandler_modelMetadata);
  return v0;
}

uint64_t MixingModelHandler.__deallocating_deinit()
{
  MixingModelHandler.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for MixingModelHandler()
{
  return type metadata accessor for MixingModelHandler();
}

uint64_t type metadata accessor for MixingModelHandler()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MixingModelHandler;
  if (!type metadata singleton initialization cache for MixingModelHandler)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MixingModelHandler()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CamModelMetadata();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t outlined destroy of MixingModel(uint64_t a1)
{
  destroy for MixingModel(a1);
  return a1;
}

uint64_t dispatch thunk of AutoConfirmActionEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

void type metadata accessor for AutoConfirmMagicWordsActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for AutoConfirmSequentialEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for UserDefaultsActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for ForcedConfirmationActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void AutoConfirmSequentialEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  uint64_t v22[2];
  unint64_t v23;

  v6 = *(_QWORD *)(a5 + 16);
  if (v6)
  {
    v21 = a6;
    v11 = (_QWORD *)(a5 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      v12 = v11[3];
      v13 = v11[4];
      __swift_project_boxed_opaque_existential_1(v11, v12);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(v22, a1, a2, a3, a4, v12, v13);
      v14 = v23;
      if (v23)
        break;
      v11 += 5;
      if (!--v6)
      {
        OUTLINED_FUNCTION_5();
        a6 = v21;
        goto LABEL_6;
      }
    }
    v15 = v22[1];
    v16 = LOBYTE(v22[0]);
    OUTLINED_FUNCTION_5();
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_14_1();
    v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.autoSend);
    swift_bridgeObjectRetain_n();
    Logger.logObject.getter();
    v19 = OUTLINED_FUNCTION_47();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)OUTLINED_FUNCTION_4();
      v22[0] = OUTLINED_FUNCTION_4();
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2E0C000, v18, v19, "%s has overridden", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    swift_bridgeObjectRelease_n();
    *v21 = v16;
    v21[1] = v15;
    v21[2] = v14;
  }
  else
  {
LABEL_6:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  OUTLINED_FUNCTION_0_23();
}

void protocol witness for AutoConfirmActionEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:) in conformance AutoConfirmSequentialEnforcer(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;

  AutoConfirmSequentialEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)(a1, a2, a3, a4, *v5, a5);
}

void AutoConfirmMagicWordsActionEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t countAndFlagsBits;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v2 = objc_msgSend(*(id *)(v1 + *(int *)(OUTLINED_FUNCTION_6_11() + 20)), sel_recognition);
  if (!v2)
    goto LABEL_4;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_aceRecognition);
  if (v4)
  {
    v5 = v4;
    specialized TopRecognitionExtractor.getTopRecognition(recognition:)(v4);

    countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
    OUTLINED_FUNCTION_5();
    lazy protocol witness table accessor for type String and conformance String();
    v7 = OUTLINED_FUNCTION_1_21();
    v8 = OUTLINED_FUNCTION_1_21();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoConfirmMagicWordsActionEnforcer.Type);
      OUTLINED_FUNCTION_12_7();
      OUTLINED_FUNCTION_9_15();
      v9 = 1;
LABEL_10:
      *v0 = v9;
      v0[1] = v8;
      v0[2] = countAndFlagsBits;
      goto LABEL_5;
    }
    if ((v8 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoConfirmMagicWordsActionEnforcer.Type);
      OUTLINED_FUNCTION_12_7();
      OUTLINED_FUNCTION_9_15();
      v9 = 2;
      goto LABEL_10;
    }

LABEL_4:
    *v0 = 0;
    v0[1] = 0;
    v0[2] = 0;
LABEL_5:
    OUTLINED_FUNCTION_0_23();
    return;
  }
  __break(1u);
}

void UserDefaultsActionEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v2 = CamStringUserDefaults.value.getter();
  if (v3
    && (static AutoConfirmAction.action(from:)(v2, v3, (char *)&v12), swift_bridgeObjectRelease(), v4 = v12, v12 != 3))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserDefaultsActionEnforcer.Type);
    v10 = String.init<A>(describing:)();
    *a1 = v4;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v5 = OUTLINED_FUNCTION_14_1();
    v6 = (void *)__swift_project_value_buffer(v5, (uint64_t)static Logger.autoSend);
    Logger.logObject.getter();
    v7 = OUTLINED_FUNCTION_47();
    if (OUTLINED_FUNCTION_21_8(v7))
    {
      *(_WORD *)OUTLINED_FUNCTION_4() = 0;
      OUTLINED_FUNCTION_3_17(&dword_1C2E0C000, v8, v9, "No user default override");
      OUTLINED_FUNCTION_3();
    }

    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  OUTLINED_FUNCTION_5_12();
}

void ForcedConfirmationActionEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(v1 + *(int *)(OUTLINED_FUNCTION_6_11() + 28)) & 1) == 0)
  {
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v4 = OUTLINED_FUNCTION_14_1();
    v5 = (void *)__swift_project_value_buffer(v4, (uint64_t)static Logger.autoSend);
    Logger.logObject.getter();
    v6 = OUTLINED_FUNCTION_47();
    if (OUTLINED_FUNCTION_21_8(v6))
    {
      *(_WORD *)OUTLINED_FUNCTION_4() = 0;
      OUTLINED_FUNCTION_3_17(&dword_1C2E0C000, v7, v8, "ForcedConfirmationActionEnforcer: user is not opt in");
      OUTLINED_FUNCTION_3();
    }

    goto LABEL_9;
  }
  if (!ForcedDisambiguation.decision()())
  {
LABEL_9:
    *v0 = 0;
    v0[1] = 0;
    v0[2] = 0;
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForcedConfirmationActionEnforcer.Type);
  v2 = String.init<A>(describing:)();
  *v0 = 1;
  v0[1] = v2;
  v0[2] = v3;
LABEL_10:
  OUTLINED_FUNCTION_5_12();
}

uint64_t OUTLINED_FUNCTION_1_21()
{
  return StringProtocol.contains<A>(_:)();
}

void OUTLINED_FUNCTION_3_17(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_6_11()
{
  return type metadata accessor for AutoSendInput();
}

void OUTLINED_FUNCTION_9_15()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_12_7()
{
  return String.init<A>(describing:)();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSo14MLFeatureValueCG_SS_AGts5NeverOTg508_sSSSo14de36CSSABIgggoo_SS3key_AB5valuetSS_ABts5F11OIegnrzr_TRSSAGSSAGIgggoo_Tf1cn_n(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, id))
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v27 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v27;
  result = specialized Dictionary.startIndex.getter(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v7 = result;
    if (result < 1 << *(_BYTE *)(a1 + 32))
    {
      v8 = a1 + 64;
      while ((*(_QWORD *)(v8 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36))
          goto LABEL_18;
        v24 = v2;
        v25 = v6;
        v9 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v7);
        v10 = v3;
        v11 = *v9;
        v12 = v9[1];
        v13 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v7);
        swift_bridgeObjectRetain();
        v14 = v13;
        v15 = a2(v11, v12, v14);
        v3 = v10;
        v26 = v15;
        v17 = v16;
        v19 = v18;

        result = swift_bridgeObjectRelease();
        v21 = *(_QWORD *)(v3 + 16);
        v20 = *(_QWORD *)(v3 + 24);
        if (v21 >= v20 >> 1)
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        *(_QWORD *)(v3 + 16) = v21 + 1;
        v22 = (_QWORD *)(v3 + 24 * v21);
        v22[4] = v26;
        v22[5] = v17;
        v22[6] = v19;
        if ((uint64_t)v7 >= -(-1 << *(_BYTE *)(a1 + 32)))
          goto LABEL_19;
        v8 = a1 + 64;
        if ((*(_QWORD *)(a1 + 64 + 8 * (v7 >> 6)) & (1 << v7)) == 0)
          goto LABEL_20;
        if (v25 != *(_DWORD *)(a1 + 36))
          goto LABEL_21;
        result = _HashTable.occupiedBucket(after:)();
        v2 = v24 - 1;
        if (v24 == 1)
          return v3;
        v7 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t Dictionary<>.mock(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(), (v5 & 1) != 0))
  {
    MEMORY[0x1E0C80A78](v4);
    swift_bridgeObjectRetain();
    v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSo14MLFeatureValueCG_SS_AGts5NeverOTg508_sSSSo14de36CSSABIgggoo_SS3key_AB5valuetSS_ABts5F11OIegnrzr_TRSSAGSSAGIgggoo_Tf1cn_n(a3, partial apply for closure #1 in Dictionary<>.mock(with:for:));
    swift_bridgeObjectRelease();
    specialized Dictionary.init<A>(uniqueKeysWithValues:)(v6);
    return v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a3;
}

uint64_t closure #1 in Dictionary<>.mock(with:for:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v8;
  char v9;

  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    a3;
    goto LABEL_6;
  }
  *(id *)(*(_QWORD *)(a4 + 56) + 8 * v8);
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in Dictionary<>.mock(with:for:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return closure #1 in Dictionary<>.mock(with:for:)(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t AutoSendHandler.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  v2 = v0;
  v3 = type metadata accessor for OSSignpostID();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_25_8();
  v4 = v0 + OBJC_IVAR____TtC7SiriCam15AutoSendHandler_siriLocale;
  static EnvironmentUtilities.currentSiriLocale.getter();
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v5 = (id)static Log.autoSend;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_33_8();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.autoSend);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v9 = 0;
    OUTLINED_FUNCTION_33_7(&dword_1C2E0C000, v7, v8, "Initialising AutoSend Handler", v9);
    OUTLINED_FUNCTION_3();
  }

  type metadata accessor for AutoSendCoreHandler();
  OUTLINED_FUNCTION_37_7();
  v10 = AutoSendCoreHandler.init()();
  if (v1)
  {
    OUTLINED_FUNCTION_21_11();
    v11 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v4, v11);
    type metadata accessor for AutoSendHandler();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v10;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_WORD *)v14 = 0;
      OUTLINED_FUNCTION_33_7(&dword_1C2E0C000, v12, v13, "AutoSend Handler initialised successfully", v14);
      OUTLINED_FUNCTION_3();
    }

    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_33_8();
    os_signpost(_:dso:log:name:signpostID:)();
    OUTLINED_FUNCTION_21_11();
  }
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AutoSendHandler.update()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v2 = type metadata accessor for Logger();
  v44 = *(_QWORD *)(v2 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v3);
  v43 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale();
  v49 = *(_QWORD *)(v5 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_2_12();
  v47 = v7;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v38 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v38 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v38 - v15;
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v45 = v2;
  v17 = __swift_project_value_buffer(v2, (uint64_t)static Logger.autoSend);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v20 = 0;
    OUTLINED_FUNCTION_33_7(&dword_1C2E0C000, v18, v19, "Updating AutoSendHandler", v20);
    OUTLINED_FUNCTION_3();
  }

  static EnvironmentUtilities.currentSiriLocale.getter();
  v46 = v1;
  v21 = v1 + OBJC_IVAR____TtC7SiriCam15AutoSendHandler_siriLocale;
  swift_beginAccess();
  OUTLINED_FUNCTION_29_9((uint64_t)v14, v21);
  lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E60]);
  v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  OUTLINED_FUNCTION_13_13((uint64_t)v14);
  if ((v22 & 1) == 0)
  {
    v23 = v43;
    v24 = v44;
    v25 = v17;
    v26 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v25, v45);
    OUTLINED_FUNCTION_29_9((uint64_t)v11, v21);
    OUTLINED_FUNCTION_29_9(v47, (uint64_t)v16);
    v27 = v23;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    v42 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      v30 = OUTLINED_FUNCTION_4();
      v41 = OUTLINED_FUNCTION_4();
      v50 = v41;
      *(_DWORD *)v30 = 136315394;
      v39 = v30 + 4;
      lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E70]);
      v40 = v28;
      v31 = OUTLINED_FUNCTION_23_9();
      v51 = OUTLINED_FUNCTION_38_5(v31, v32);
      OUTLINED_FUNCTION_22_6();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_13_13((uint64_t)v11);
      *(_WORD *)(v30 + 12) = 2080;
      v39 = v30 + 14;
      v33 = v47;
      v34 = OUTLINED_FUNCTION_23_9();
      v51 = OUTLINED_FUNCTION_38_5(v34, v35);
      OUTLINED_FUNCTION_22_6();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_13_13(v33);
      _os_log_impl(&dword_1C2E0C000, v40, (os_log_type_t)v42, "Detected locale switch from %s to %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_13_13((uint64_t)v11);
    OUTLINED_FUNCTION_13_13(v47);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v26);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v49 + 24))(v21, v16, v5);
    swift_endAccess();
    type metadata accessor for AutoSendCoreHandler();
    OUTLINED_FUNCTION_37_7();
    v36 = v48;
    v37 = AutoSendCoreHandler.init()();
    if (v36)
    {
      OUTLINED_FUNCTION_13_13((uint64_t)v16);
      return;
    }
    *(_QWORD *)(v46 + 16) = v37;
    swift_release();
  }
  swift_retain();
  AutoSendCoreHandler.update()();
  OUTLINED_FUNCTION_13_13((uint64_t)v16);
  swift_release();
}

void AutoSendHandler.inferConfirmation(for:from:withRequestId:recipientCrrSignals:resultCandidateId:)(void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  AutoSendHandler.inferConfirmationImpl(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(a1, a2, a3, a4, a5, 0, a6);
}

void AutoSendHandler.inferConfirmation(for:from:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W7>, uint64_t a7@<X8>)
{
  AutoSendHandler.inferConfirmationImpl(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(a1, a2, a3, a4, a5, a6, a7);
}

void AutoSendHandler.inferConfirmationImpl(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  unint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  void (*v56)(uint64_t, char *, uint64_t);
  void *v57;
  uint64_t *v58;
  id v59;
  uint64_t (*v60)();
  uint64_t (*v61)();
  NSObject *v62;
  os_log_type_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98[2];
  uint64_t v99[3];
  uint64_t v100;

  LODWORD(v86) = a6;
  v96 = a4;
  v97 = a3;
  v92 = a2;
  v81 = a7;
  v85 = type metadata accessor for AutoSendInput();
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_12_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_5_13();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v78 - v14;
  v16 = OUTLINED_FUNCTION_1_12();
  v95 = *(_QWORD *)(v16 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_5_13();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_5_13();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_5_13();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_5_13();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_13_3();
  v94 = v22;
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v78 - v24;
  v26 = type metadata accessor for OSSignpostID();
  v89 = *(_QWORD *)(v26 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v27);
  OUTLINED_FUNCTION_25_8();
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v88 = v16;
  v28 = (id)static Log.autoSend;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_20_10();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v29 = OUTLINED_FUNCTION_14_1();
  v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.autoSend);
  OUTLINED_FUNCTION_7_5();
  v31 = a1;
  v32 = v97;
  OUTLINED_FUNCTION_8_14();
  v33 = v31;
  v90 = v30;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.default.getter();
  v80 = v35;
  v36 = os_log_type_enabled(v34, v35);
  v82 = v7;
  v83 = v26;
  v93 = v15;
  v91 = v25;
  v84 = v33;
  if (v36)
  {
    v37 = OUTLINED_FUNCTION_4();
    v79 = OUTLINED_FUNCTION_4();
    v99[0] = v79;
    *(_DWORD *)v37 = 136315650;
    v38 = v33;
    v39 = objc_msgSend(v38, sel_description);
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v41;

    v98[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v43 = v96;
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    swift_bridgeObjectRetain();
    v98[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v97, v99);
    OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_41_3();
    *(_WORD *)(v37 + 22) = 2080;
    v98[0] = v43;
    v98[1] = a5;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v44 = String.init<A>(describing:)();
    v98[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v99);
    OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_1_10();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_40_4(&dword_1C2E0C000, v34, (os_log_type_t)v80, "Handling AutoSend request for speechPackage: %s, requestId: %s and rcId: %s", (uint8_t *)v37);
    OUTLINED_FUNCTION_30_9();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_9_16();

  v46 = v88;
  v47 = a5;
  v48 = v92;
  type metadata accessor for AutoSendHandler();
  static AutoSendHandler.validateRequestId(requestId:)(v48, v32, (uint64_t)v25);
  v49 = v94;
  static AutoSendHandler.makeAutoSendIdAndLogRequestLink(requestId:)((uint64_t)v25, v94);
  v50 = v47;
  if (!v47)
  {
    v51 = OUTLINED_FUNCTION_34_5();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      *(_WORD *)OUTLINED_FUNCTION_4() = 0;
      OUTLINED_FUNCTION_31_6(&dword_1C2E0C000, v51, v52, "rcId missing in Siri Signals");
      OUTLINED_FUNCTION_3();
    }

    v50 = 0xE200000000000000;
    v96 = 12589;
    v32 = v97;
  }
  v53 = (uint64_t)v93;
  OUTLINED_FUNCTION_7_13((uint64_t)v93);
  swift_bridgeObjectRetain();
  v54 = v96;
  specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)();
  outlined destroy of UUID?(v53);
  v55 = (int *)v85;
  v56 = *(void (**)(uint64_t, char *, uint64_t))(v95 + 16);
  v56(v8 + *(int *)(v85 + 32), v25, v46);
  v56(v8, (char *)v49, v46);
  v57 = v84;
  *(_QWORD *)(v8 + v55[5]) = v84;
  v58 = (uint64_t *)(v8 + v55[6]);
  *v58 = v54;
  v58[1] = v50;
  *(_BYTE *)(v8 + v55[7]) = v86 & 1;
  v59 = v57;
  v97 = v50;
  swift_bridgeObjectRetain();
  swift_retain();
  v60 = AutoSendCoreHandler.handle(_:)(v8);
  v88 = 0;
  v61 = v60;
  swift_release();
  OUTLINED_FUNCTION_3_18((uint64_t)&v100);
  OUTLINED_FUNCTION_8_14();
  swift_retain_n();
  v62 = OUTLINED_FUNCTION_34_5();
  v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = v32;
    v65 = OUTLINED_FUNCTION_4();
    v90 = OUTLINED_FUNCTION_4();
    v98[0] = v90;
    *(_DWORD *)v65 = 136315650;
    lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v66 = OUTLINED_FUNCTION_42_3();
    v99[0] = OUTLINED_FUNCTION_39_0(v66, v67);
    v87 = v8;
    OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_16_11();
    *(_WORD *)(v65 + 12) = 2080;
    OUTLINED_FUNCTION_45_4();
    v99[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v64, v98);
    OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_41_3();
    *(_WORD *)(v65 + 22) = 2080;
    LOBYTE(v99[0]) = *((_BYTE *)v61 + 57);
    v68 = String.init<A>(describing:)();
    v99[0] = OUTLINED_FUNCTION_39_0(v68, v69);
    OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_36_6();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_40_4(&dword_1C2E0C000, v62, v63, "%s, requestid: %s: Sending successful autoSend response : %s", (uint8_t *)v65);
    OUTLINED_FUNCTION_30_9();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_16_11();

  OUTLINED_FUNCTION_36_6();
  OUTLINED_FUNCTION_9_16();
  v70 = v81;
  v71 = v83;
  v72 = (uint64_t)v93;
  OUTLINED_FUNCTION_7_13((uint64_t)v93);
  swift_retain();
  v73 = v91;
  v74 = v94;
  specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v72);
  swift_release();
  outlined destroy of AutoSendInput(v8);
  MEMORY[0](v74, v46);
  MEMORY[0](v73, v46);
  v75 = *((unsigned __int8 *)v61 + 57);
  swift_release();
  v76 = v82;
  v77 = v88 != 0;
  *(_QWORD *)v70 = v75;
  *(_QWORD *)(v70 + 8) = 0;
  *(_BYTE *)(v70 + 16) = 0;
  *(_BYTE *)(v70 + 17) = v77;
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v76, v71);
  OUTLINED_FUNCTION_0_2();
}

void static AutoSendHandler.validateRequestId(requestId:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _QWORD v19[3];
  uint64_t v20;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v9 = OUTLINED_FUNCTION_14_1();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.autoSend);
  OUTLINED_FUNCTION_8_14();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = OUTLINED_FUNCTION_4();
    v19[1] = a3;
    v13 = (_DWORD *)v12;
    v20 = OUTLINED_FUNCTION_4();
    *v13 = 136315138;
    swift_bridgeObjectRetain();
    v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v20);
    OUTLINED_FUNCTION_6_12(v14);
    OUTLINED_FUNCTION_41_3();
    OUTLINED_FUNCTION_28_8(&dword_1C2E0C000, v10, v15, "Trying to validate requestId: %s");
    OUTLINED_FUNCTION_19_10();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_9_16();
  UUID.init(uuidString:)();
  v16 = OUTLINED_FUNCTION_1_12();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v16) == 1)
  {
    outlined destroy of UUID?((uint64_t)v8);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      *(_WORD *)OUTLINED_FUNCTION_4() = 0;
      OUTLINED_FUNCTION_31_6(&dword_1C2E0C000, v17, v18, "Invalid requestId. Generating an unlinked autoSendId to fulfill the runtime request. Skipping request link event logging and using invalid requestId elsewhere. ");
      OUTLINED_FUNCTION_3();
    }

    UUID.init()();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a3, v8, v16);
  }
  OUTLINED_FUNCTION_0_2();
}

void static AutoSendHandler.makeAutoSendIdAndLogRequestLink(requestId:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  Class isa;
  id v17;
  uint64_t v18;

  v5 = OUTLINED_FUNCTION_1_12();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_12_3();
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v7 = OUTLINED_FUNCTION_14_1();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.autoSend);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, a1, v5);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (_DWORD *)OUTLINED_FUNCTION_4();
    v18 = OUTLINED_FUNCTION_4();
    *v10 = 136315138;
    lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v18);
    OUTLINED_FUNCTION_6_12(v13);
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_26_6();
    OUTLINED_FUNCTION_28_8(&dword_1C2E0C000, v8, v14, "Trying to log request link event for requestId: %s");
    OUTLINED_FUNCTION_19_10();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_26_6();

  v15 = (void *)objc_opt_self();
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v15, sel_derivedIdentifierForComponent_fromSourceIdentifier_, 4, isa);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  static CamRequestLinkLogger.log(requestId:camId:)(a1, a2);
  OUTLINED_FUNCTION_0_2();
}

uint64_t AutoSendHandler.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC7SiriCam15AutoSendHandler_siriLocale;
  v2 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for AutoSendHandler()
{
  return type metadata accessor for AutoSendHandler();
}

uint64_t type metadata accessor for AutoSendHandler()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AutoSendHandler;
  if (!type metadata singleton initialization cache for AutoSendHandler)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AutoSendHandler()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void protocol witness for AutoConfirming.inferConfirmation(for:from:withRequestId:recipientCrrSignals:resultCandidateId:) in conformance AutoSendHandler(void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  AutoSendHandler.inferConfirmation(for:from:withRequestId:recipientCrrSignals:resultCandidateId:)(a1, a2, a3, a4, a5, a6);
}

void protocol witness for AutoConfirming.inferConfirmation(for:from:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:) in conformance AutoSendHandler(void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W7>, uint64_t a7@<X8>)
{
  AutoSendHandler.inferConfirmation(for:from:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for AutoConfirming.inferConfirmation(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:) in conformance AutoSendHandler()
{
  return AutoSendHandler.inferConfirmation(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)();
}

void protocol witness for AutoConfirming.update() in conformance AutoSendHandler()
{
  AutoSendHandler.update()();
}

uint64_t outlined destroy of AutoSendInput(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AutoSendInput();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD, uint64_t, uint64_t);

  return v3(*(_QWORD *)(a1 - 256), v1, v2);
}

void OUTLINED_FUNCTION_5_13()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_6_12(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_7_13(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_8_14()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_9_16()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_10_13()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_12_8()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_13_13(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_16_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_19_10()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_21_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_22_6()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_23_9()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_26_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_27_8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 288);
}

void OUTLINED_FUNCTION_28_8(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_29_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_30_9()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_31_6(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_34_5()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_36_6()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_37_7()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_38_5(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_39_0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 120));
}

void OUTLINED_FUNCTION_40_4(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x20u);
}

uint64_t OUTLINED_FUNCTION_42_3()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_45_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t *initializeBufferWithCopyOfBuffer for AppLaunchTieBreaker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  void **v49;
  int v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t *v80;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    v23 = (uint64_t *)(v22 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
    return v23;
  }
  *(_WORD *)a1 = *(_WORD *)a2;
  v5 = *(int *)(a3 + 24);
  v6 = (uint64_t *)((char *)a1 + v5);
  v7 = (char *)a2 + v5;
  v8 = *(uint64_t *)((char *)a2 + v5 + 8);
  *v6 = *(uint64_t *)((char *)a2 + v5);
  v6[1] = v8;
  v9 = (int *)type metadata accessor for RankedAction();
  v10 = v9[5];
  v11 = (void **)((char *)v6 + v10);
  v12 = (void **)&v7[v10];
  v13 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v80 = a1;
  if (EnumCaseMultiPayload == 1)
  {
    v24 = *v12;
    *v11 = *v12;
    v25 = v24;
    swift_storeEnumTagMultiPayload();
LABEL_9:
    v26 = v13;
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload)
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_9;
  }
  v76 = v13;
  v15 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
  v16 = (int *)type metadata accessor for CamUSOParse(0);
  v17 = v16[5];
  v18 = (char *)v11 + v17;
  v19 = (char *)v12 + v17;
  v20 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
  }
  v27 = v16[6];
  v28 = (void **)((char *)v11 + v27);
  v29 = (void **)((char *)v12 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = v16[7];
  v32 = (char *)v11 + v31;
  v33 = (char *)v12 + v31;
  v32[4] = v33[4];
  *(_DWORD *)v32 = *(_DWORD *)v33;
  swift_bridgeObjectRetain();
  v26 = v76;
  swift_storeEnumTagMultiPayload();
LABEL_12:
  *(_QWORD *)((char *)v6 + v9[6]) = *(_QWORD *)&v7[v9[6]];
  *(_QWORD *)((char *)v6 + v9[7]) = *(_QWORD *)&v7[v9[7]];
  *(_QWORD *)((char *)v6 + v9[8]) = *(_QWORD *)&v7[v9[8]];
  v34 = v9[9];
  v35 = (char *)v6 + v34;
  v36 = &v7[v34];
  v37 = type metadata accessor for UUID();
  v38 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v37 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77 = (void (*)(char *, char *, uint64_t))v38;
  v38(v35, v36, v37);
  v39 = v9[10];
  v40 = (_QWORD *)((char *)v6 + v39);
  v41 = &v7[v39];
  v42 = *((_QWORD *)v41 + 1);
  *v40 = *(_QWORD *)v41;
  v40[1] = v42;
  *(_QWORD *)((char *)v6 + v9[11]) = *(_QWORD *)&v7[v9[11]];
  v43 = *(int *)(a3 + 28);
  v23 = v80;
  v44 = (uint64_t *)((char *)v80 + v43);
  v45 = (char *)a2 + v43;
  v46 = *(uint64_t *)((char *)a2 + v43 + 8);
  *v44 = *(uint64_t *)((char *)a2 + v43);
  v44[1] = v46;
  v47 = v9[5];
  v48 = (void **)((char *)v44 + v47);
  v49 = (void **)&v45[v47];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = swift_getEnumCaseMultiPayload();
  if (v50 == 1)
  {
    v58 = *v49;
    *v48 = *v49;
    v59 = v58;
    swift_storeEnumTagMultiPayload();
  }
  else if (v50)
  {
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v79 = v37;
    v51 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v49, v51);
    v52 = (int *)type metadata accessor for CamUSOParse(0);
    v53 = v52[5];
    v54 = (char *)v48 + v53;
    v55 = (char *)v49 + v53;
    v56 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v55, 1, v56))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
      __swift_storeEnumTagSinglePayload((uint64_t)v54, 0, 1, v56);
    }
    v37 = v79;
    v60 = v52[6];
    v61 = (void **)((char *)v48 + v60);
    v62 = (void **)((char *)v49 + v60);
    v63 = v62[1];
    *v61 = *v62;
    v61[1] = v63;
    v64 = v52[7];
    v65 = (char *)v48 + v64;
    v66 = (char *)v49 + v64;
    v65[4] = v66[4];
    *(_DWORD *)v65 = *(_DWORD *)v66;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    v23 = v80;
  }
  *(_QWORD *)((char *)v44 + v9[6]) = *(_QWORD *)&v45[v9[6]];
  *(_QWORD *)((char *)v44 + v9[7]) = *(_QWORD *)&v45[v9[7]];
  *(_QWORD *)((char *)v44 + v9[8]) = *(_QWORD *)&v45[v9[8]];
  v67 = v9[9];
  v68 = (char *)v44 + v67;
  v69 = &v45[v67];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77(v68, v69, v37);
  v70 = v9[10];
  v71 = (_QWORD *)((char *)v44 + v70);
  v72 = &v45[v70];
  v73 = *((_QWORD *)v72 + 1);
  *v71 = *(_QWORD *)v72;
  v71[1] = v73;
  *(_QWORD *)((char *)v44 + v9[11]) = *(_QWORD *)&v45[v9[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v23;
}

uint64_t destroy for AppLaunchTieBreaker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  id *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for RankedAction();
  v6 = (id *)(v4 + *(int *)(v5 + 20));
  type metadata accessor for CamParse(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {

  }
  else if (!EnumCaseMultiPayload)
  {
    v8 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    v9 = (uint64_t)v6 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v4 + *(int *)(v5 + 36);
  v12 = type metadata accessor for UUID();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease();
  v15 = (id *)(v14 + *(int *)(v5 + 20));
  v16 = swift_getEnumCaseMultiPayload();
  if (v16 == 1)
  {

  }
  else if (!v16)
  {
    v17 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
    v18 = (uint64_t)v15 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v18, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13(v14 + *(int *)(v5 + 36), v12);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_WORD *initializeWithCopy for AppLaunchTieBreaker(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  void **v48;
  int v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;

  *a1 = *a2;
  v5 = *(int *)(a3 + 24);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (char *)a2 + v5;
  v8 = *(_QWORD *)((char *)a2 + v5 + 8);
  *v6 = *(_QWORD *)((char *)a2 + v5);
  v6[1] = v8;
  v9 = (int *)type metadata accessor for RankedAction();
  v10 = v9[5];
  v11 = (void **)((char *)v6 + v10);
  v12 = (void **)&v7[v10];
  v13 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v78 = a3;
  v79 = a1;
  if (EnumCaseMultiPayload == 1)
  {
    v22 = *v12;
    *v11 = *v12;
    v23 = v22;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (!EnumCaseMultiPayload)
    {
      v74 = v13;
      v15 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
      v16 = (int *)type metadata accessor for CamUSOParse(0);
      v17 = v16[5];
      v18 = (char *)v11 + v17;
      v19 = (char *)v12 + v17;
      v20 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
        __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
      }
      v25 = v16[6];
      v26 = (void **)((char *)v11 + v25);
      v27 = (void **)((char *)v12 + v25);
      v28 = v27[1];
      *v26 = *v27;
      v26[1] = v28;
      v29 = v16[7];
      v30 = (char *)v11 + v29;
      v31 = (char *)v12 + v29;
      v30[4] = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      swift_bridgeObjectRetain();
      v24 = v74;
      swift_storeEnumTagMultiPayload();
      goto LABEL_10;
    }
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v24 = v13;
LABEL_10:
  *(_QWORD *)((char *)v6 + v9[6]) = *(_QWORD *)&v7[v9[6]];
  *(_QWORD *)((char *)v6 + v9[7]) = *(_QWORD *)&v7[v9[7]];
  *(_QWORD *)((char *)v6 + v9[8]) = *(_QWORD *)&v7[v9[8]];
  v32 = v9[9];
  v33 = (char *)v6 + v32;
  v34 = &v7[v32];
  v35 = type metadata accessor for UUID();
  v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77 = v35;
  v75 = v36;
  v36(v33, v34, v35);
  v37 = v9[10];
  v38 = (_QWORD *)((char *)v6 + v37);
  v39 = &v7[v37];
  v40 = *((_QWORD *)v39 + 1);
  *v38 = *(_QWORD *)v39;
  v38[1] = v40;
  *(_QWORD *)((char *)v6 + v9[11]) = *(_QWORD *)&v7[v9[11]];
  v41 = v79;
  v42 = *(int *)(v78 + 28);
  v43 = (_QWORD *)((char *)v79 + v42);
  v44 = (char *)a2 + v42;
  v45 = *(_QWORD *)((char *)a2 + v42 + 8);
  *v43 = *(_QWORD *)((char *)a2 + v42);
  v43[1] = v45;
  v46 = v9[5];
  v47 = (void **)((char *)v43 + v46);
  v48 = (void **)&v44[v46];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v49 = swift_getEnumCaseMultiPayload();
  if (v49 == 1)
  {
    v57 = *v48;
    *v47 = *v48;
    v58 = v57;
    swift_storeEnumTagMultiPayload();
  }
  else if (v49)
  {
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v50 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v47, v48, v50);
    v51 = (int *)type metadata accessor for CamUSOParse(0);
    v52 = v51[5];
    v53 = (char *)v47 + v52;
    v54 = (char *)v48 + v52;
    v55 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v54, 1, v55))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      __swift_storeEnumTagSinglePayload((uint64_t)v53, 0, 1, v55);
    }
    v59 = v51[6];
    v60 = (void **)((char *)v47 + v59);
    v61 = (void **)((char *)v48 + v59);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = v51[7];
    v64 = (char *)v47 + v63;
    v65 = (char *)v48 + v63;
    v64[4] = v65[4];
    *(_DWORD *)v64 = *(_DWORD *)v65;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    v41 = v79;
  }
  *(_QWORD *)((char *)v43 + v9[6]) = *(_QWORD *)&v44[v9[6]];
  *(_QWORD *)((char *)v43 + v9[7]) = *(_QWORD *)&v44[v9[7]];
  *(_QWORD *)((char *)v43 + v9[8]) = *(_QWORD *)&v44[v9[8]];
  v66 = v9[9];
  v67 = (char *)v43 + v66;
  v68 = &v44[v66];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75(v67, v68, v77);
  v69 = v9[10];
  v70 = (_QWORD *)((char *)v43 + v69);
  v71 = &v44[v69];
  v72 = *((_QWORD *)v71 + 1);
  *v70 = *(_QWORD *)v71;
  v70[1] = v72;
  *(_QWORD *)((char *)v43 + v9[11]) = *(_QWORD *)&v44[v9[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v41;
}

_BYTE *assignWithCopy for AppLaunchTieBreaker(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  void (*v34)(char *, _BYTE *, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  _BYTE *v40;
  uint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  int *v64;
  int *v65;
  void (*v66)(char *, _BYTE *, uint64_t);
  uint64_t v67;
  char *__dst;
  char *__dsta;

  v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  *v7 = *(_QWORD *)&a2[v6];
  v7[1] = *(_QWORD *)&a2[v6 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for RankedAction();
  v10 = (int *)v9;
  if (a1 != a2)
  {
    v11 = *(int *)(v9 + 20);
    v12 = (void **)((char *)v7 + v11);
    v13 = (void **)&v8[v11];
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v7 + v11, type metadata accessor for CamParse);
    v14 = type metadata accessor for CamParse(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v21 = *v13;
      *v12 = *v13;
      v22 = v21;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v67 = v3;
      v16 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, v13, v16);
      v65 = (int *)type metadata accessor for CamUSOParse(0);
      v17 = v65[5];
      __dst = (char *)v12 + v17;
      v18 = (char *)v13 + v17;
      v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(__dst, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v19);
      }
      v23 = v65[6];
      v24 = (void **)((char *)v12 + v23);
      v25 = (void **)((char *)v13 + v23);
      *v24 = *v25;
      v24[1] = v25[1];
      v26 = v65[7];
      v27 = (char *)v12 + v26;
      v28 = (char *)v13 + v26;
      v29 = *(_DWORD *)v28;
      v27[4] = v28[4];
      *(_DWORD *)v27 = v29;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      v3 = v67;
    }
  }
  *(_QWORD *)((char *)v7 + v10[6]) = *(_QWORD *)&v8[v10[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v7 + v10[7]) = *(_QWORD *)&v8[v10[7]];
  *(_QWORD *)((char *)v7 + v10[8]) = *(_QWORD *)&v8[v10[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v10[9];
  v31 = (char *)v7 + v30;
  v32 = &v8[v30];
  v33 = type metadata accessor for UUID();
  v34 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 24);
  v34(v31, v32, v33);
  v35 = v10[10];
  v36 = (_QWORD *)((char *)v7 + v35);
  v37 = &v8[v35];
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v7 + v10[11]) = *(_QWORD *)&v8[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = *(int *)(v3 + 28);
  v39 = &a1[v38];
  v40 = &a2[v38];
  *(_QWORD *)v39 = *(_QWORD *)&a2[v38];
  *((_QWORD *)v39 + 1) = *(_QWORD *)&a2[v38 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v41 = v10[5];
    v42 = (void **)&v39[v41];
    v43 = (void **)&v40[v41];
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)&v39[v41], type metadata accessor for CamParse);
    v44 = type metadata accessor for CamParse(0);
    v45 = swift_getEnumCaseMultiPayload();
    if (v45 == 1)
    {
      v51 = *v43;
      *v42 = *v43;
      v52 = v51;
LABEL_19:
      swift_storeEnumTagMultiPayload();
      goto LABEL_20;
    }
    if (!v45)
    {
      v66 = v34;
      v46 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v42, v43, v46);
      v64 = (int *)type metadata accessor for CamUSOParse(0);
      v47 = v64[5];
      __dsta = (char *)v42 + v47;
      v48 = (char *)v43 + v47;
      v49 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v48, 1, v49))
      {
        v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dsta, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(__dsta, v48, v49);
        __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v49);
      }
      v34 = v66;
      v53 = v64[6];
      v54 = (void **)((char *)v42 + v53);
      v55 = (void **)((char *)v43 + v53);
      *v54 = *v55;
      v54[1] = v55[1];
      v56 = v64[7];
      v57 = (char *)v42 + v56;
      v58 = (char *)v43 + v56;
      v59 = *(_DWORD *)v58;
      v57[4] = v58[4];
      *(_DWORD *)v57 = v59;
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
LABEL_20:
  *(_QWORD *)&v39[v10[6]] = *(_QWORD *)&v40[v10[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v39[v10[7]] = *(_QWORD *)&v40[v10[7]];
  *(_QWORD *)&v39[v10[8]] = *(_QWORD *)&v40[v10[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34(&v39[v10[9]], &v40[v10[9]], v33);
  v60 = v10[10];
  v61 = &v39[v60];
  v62 = &v40[v60];
  *(_QWORD *)v61 = *v62;
  *((_QWORD *)v61 + 1) = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v39[v10[11]] = *(_QWORD *)&v40[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_WORD *initializeWithTake for AppLaunchTieBreaker(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v3;
  _WORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *__dst;
  char *__dsta;
  _WORD *v49;
  _WORD *v50;

  v3 = a3;
  v5 = a1;
  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for RankedAction();
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for CamParse(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v45 = v3;
    v49 = v5;
    v14 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    v15 = (int *)type metadata accessor for CamUSOParse(0);
    v16 = v15[5];
    __dst = &v11[v16];
    v17 = &v12[v16];
    v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(__dst, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v18);
    }
    *(_OWORD *)&v11[v15[6]] = *(_OWORD *)&v12[v15[6]];
    v20 = v15[7];
    v21 = &v11[v20];
    v22 = &v12[v20];
    v21[4] = v22[4];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    swift_storeEnumTagMultiPayload();
    v5 = v49;
    v3 = v45;
  }
  *(_QWORD *)&v7[v9[6]] = *(_QWORD *)&v8[v9[6]];
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  *(_QWORD *)&v7[v9[8]] = *(_QWORD *)&v8[v9[8]];
  v23 = v9[9];
  v24 = &v7[v23];
  v25 = &v8[v23];
  v26 = type metadata accessor for UUID();
  v27 = v24;
  v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
  v28(v27, v25, v26);
  *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
  *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
  v29 = *(int *)(v3 + 28);
  v30 = (char *)v5 + v29;
  v31 = (char *)a2 + v29;
  *(_OWORD *)v30 = *(_OWORD *)((char *)a2 + v29);
  v32 = v9[5];
  v33 = &v30[v32];
  v34 = &v31[v32];
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v46 = v28;
    v50 = v5;
    v35 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
    v36 = (int *)type metadata accessor for CamUSOParse(0);
    v37 = v36[5];
    __dsta = &v33[v37];
    v38 = &v34[v37];
    v39 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v38, 1, v39))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dsta, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(__dsta, v38, v39);
      __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v39);
    }
    *(_OWORD *)&v33[v36[6]] = *(_OWORD *)&v34[v36[6]];
    v41 = v36[7];
    v42 = &v33[v41];
    v43 = &v34[v41];
    v42[4] = v43[4];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    swift_storeEnumTagMultiPayload();
    v5 = v50;
    v28 = v46;
  }
  *(_QWORD *)&v30[v9[6]] = *(_QWORD *)&v31[v9[6]];
  *(_QWORD *)&v30[v9[7]] = *(_QWORD *)&v31[v9[7]];
  *(_QWORD *)&v30[v9[8]] = *(_QWORD *)&v31[v9[8]];
  v28(&v30[v9[9]], &v31[v9[9]], v26);
  *(_OWORD *)&v30[v9[10]] = *(_OWORD *)&v31[v9[10]];
  *(_QWORD *)&v30[v9[11]] = *(_QWORD *)&v31[v9[11]];
  return v5;
}

_BYTE *assignWithTake for AppLaunchTieBreaker(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  uint64_t v27;
  void (*v28)(char *, _BYTE *, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int *v56;
  int *v57;
  uint64_t v58;
  void (*v59)(char *, _BYTE *, uint64_t);
  char *v60;
  char *v61;

  v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *v7 = *(_QWORD *)&a2[v6];
  v7[1] = v9;
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for RankedAction();
  v11 = (int *)v10;
  if (a1 != a2)
  {
    v12 = *(int *)(v10 + 20);
    v13 = (char *)v7 + v12;
    v14 = &v8[v12];
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v7 + v12, type metadata accessor for CamParse);
    v15 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v58 = v3;
      v16 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      v56 = (int *)type metadata accessor for CamUSOParse(0);
      v17 = v56[5];
      v60 = &v13[v17];
      v18 = &v14[v17];
      v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v60, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v60, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)v60, 0, 1, v19);
      }
      v3 = v58;
      *(_OWORD *)&v13[v56[6]] = *(_OWORD *)&v14[v56[6]];
      v21 = v56[7];
      v22 = &v13[v21];
      v23 = &v14[v21];
      v22[4] = v23[4];
      *(_DWORD *)v22 = *(_DWORD *)v23;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)((char *)v7 + v11[6]) = *(_QWORD *)&v8[v11[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v7 + v11[7]) = *(_QWORD *)&v8[v11[7]];
  *(_QWORD *)((char *)v7 + v11[8]) = *(_QWORD *)&v8[v11[8]];
  swift_bridgeObjectRelease();
  v24 = v11[9];
  v25 = (char *)v7 + v24;
  v26 = &v8[v24];
  v27 = type metadata accessor for UUID();
  v28 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 40);
  v28(v25, v26, v27);
  v29 = v11[10];
  v30 = (_QWORD *)((char *)v7 + v29);
  v31 = (uint64_t *)&v8[v29];
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v7 + v11[11]) = *(_QWORD *)&v8[v11[11]];
  swift_bridgeObjectRelease();
  v34 = *(int *)(v3 + 28);
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = *(_QWORD *)&a2[v34 + 8];
  *(_QWORD *)v35 = *(_QWORD *)&a2[v34];
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v38 = v11[5];
    v39 = &v35[v38];
    v40 = &v36[v38];
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)&v35[v38], type metadata accessor for CamParse);
    v41 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v59 = v28;
      v42 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v39, v40, v42);
      v57 = (int *)type metadata accessor for CamUSOParse(0);
      v43 = v57[5];
      v61 = &v39[v43];
      v44 = &v40[v43];
      v45 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v44, 1, v45))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v61, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v61, v44, v45);
        __swift_storeEnumTagSinglePayload((uint64_t)v61, 0, 1, v45);
      }
      v28 = v59;
      *(_OWORD *)&v39[v57[6]] = *(_OWORD *)&v40[v57[6]];
      v47 = v57[7];
      v48 = &v39[v47];
      v49 = &v40[v47];
      v48[4] = v49[4];
      *(_DWORD *)v48 = *(_DWORD *)v49;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)&v35[v11[6]] = *(_QWORD *)&v36[v11[6]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v35[v11[7]] = *(_QWORD *)&v36[v11[7]];
  *(_QWORD *)&v35[v11[8]] = *(_QWORD *)&v36[v11[8]];
  swift_bridgeObjectRelease();
  v28(&v35[v11[9]], &v36[v11[9]], v27);
  v50 = v11[10];
  v51 = &v35[v50];
  v52 = (uint64_t *)&v36[v50];
  v54 = *v52;
  v53 = v52[1];
  *(_QWORD *)v51 = v54;
  *((_QWORD *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v35[v11[11]] = *(_QWORD *)&v36[v11[11]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppLaunchTieBreaker()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C2E5C1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 254)
  {
    OUTLINED_FUNCTION_31();
  }
  else
  {
    v6 = OUTLINED_FUNCTION_3_12();
    __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 24), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for AppLaunchTieBreaker()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C2E5C244(_BYTE *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 254)
  {
    *a1 = a2 + 1;
    OUTLINED_FUNCTION_31();
  }
  else
  {
    v7 = OUTLINED_FUNCTION_3_12();
    __swift_storeEnumTagSinglePayload((uint64_t)&a1[*(int *)(a4 + 24)], a2, a2, v7);
  }
}

uint64_t type metadata accessor for AppLaunchTieBreaker()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AppLaunchTieBreaker;
  if (!type metadata singleton initialization cache for AppLaunchTieBreaker)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AppLaunchTieBreaker()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RankedAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized ActionProtocol.getAssociatedAppMentioned()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[5];

  v1 = v0;
  v2 = type metadata accessor for CamParse(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CamUSOParse(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RankedAction();
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for common != -1)
LABEL_51:
    swift_once();
  v11 = type metadata accessor for Logger();
  v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.common);
  outlined init with copy of RankedAction(v1, v10, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v52 = (char *)v1;
    v15 = swift_slowAlloc();
    v53 = (char *)v2;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc();
    v55 = (uint64_t)v4;
    v18 = v17;
    v59[0] = v17;
    v51 = v8;
    *(_DWORD *)v16 = 136315138;
    v19 = v7;
    v54 = v12;
    v20 = *(_QWORD *)v10;
    v21 = *(_QWORD *)(v10 + 8);
    swift_bridgeObjectRetain();
    v22 = v20;
    v7 = v19;
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, v59);
    v8 = v51;
    v1 = (uint64_t)v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12 = v54;
    swift_bridgeObjectRelease();
    _s7SiriCam0B5ParseOWOhTm_0(v10, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    _os_log_impl(&dword_1C2E0C000, v13, v14, "Trying to extract app associated with %s", v16, 0xCu);
    swift_arrayDestroy();
    v23 = v18;
    v4 = (char *)v55;
    MEMORY[0x1C3BCB4A4](v23, -1, -1);
    v24 = v16;
    v2 = (unint64_t)v53;
    MEMORY[0x1C3BCB4A4](v24, -1, -1);
  }
  else
  {
    _s7SiriCam0B5ParseOWOhTm_0(v10, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  }

  outlined init with copy of RankedAction(v1 + *(int *)(v8 + 20), (uint64_t)v4, type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    v25 = type metadata accessor for CamParse;
    v26 = (uint64_t)v4;
LABEL_7:
    _s7SiriCam0B5ParseOWOhTm_0(v26, v25);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1C2E0C000, v27, v28, "No USO values found", v29, 2u);
      MEMORY[0x1C3BCB4A4](v29, -1, -1);
    }

    return 0;
  }
  outlined init with take of CamModelMetadata((uint64_t)v4, (uint64_t)v7, type metadata accessor for CamUSOParse);
  if (!CamUSOParse.getFirstUserDialogActAsTask()())
  {
    v25 = type metadata accessor for CamUSOParse;
    v26 = (uint64_t)v7;
    goto LABEL_7;
  }
  v53 = v7;
  v54 = v12;
  v4 = (char *)UsoTask.arguments.getter();
  swift_release();
  specialized _NativeDictionary.makeIterator()(v59, v4);
  v7 = (char *)v59[0];
  v55 = v59[1];
  v10 = v59[3];
  v8 = v59[4];
  v31 = (unint64_t)(v59[2] + 64) >> 6;
  v52 = v4;
  swift_bridgeObjectRetain();
  v32 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (v8)
  {
    v33 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v34 = v33 | (v10 << 6);
LABEL_29:
    v58 = *(_QWORD *)(*((_QWORD *)v7 + 7) + 8 * v34);
    closure #1 in ActionProtocol.getAssociatedAppMentioned()((unint64_t *)&v58, &v56);
    v38 = v57;
    if (v57)
    {
      v1 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v32 = v41;
      }
      v2 = v32[2];
      v4 = (char *)(v2 + 1);
      if (v2 >= v32[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v32 = v42;
      }
      v32[2] = v4;
      v39 = &v32[2 * v2];
      v39[4] = v1;
      v39[5] = v38;
    }
  }
  v35 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_51;
  }
  if (v35 >= v31)
    goto LABEL_41;
  v36 = *(_QWORD *)(v55 + 8 * v35);
  if (v36)
  {
LABEL_28:
    v8 = (v36 - 1) & v36;
    v34 = __clz(__rbit64(v36)) + (v35 << 6);
    v10 = v35;
    goto LABEL_29;
  }
  v37 = v10 + 2;
  if (v10 + 2 >= v31)
    goto LABEL_41;
  v36 = *(_QWORD *)(v55 + 8 * v37);
  if (v36)
    goto LABEL_27;
  v37 = v10 + 3;
  if (v10 + 3 >= v31)
    goto LABEL_41;
  v36 = *(_QWORD *)(v55 + 8 * v37);
  if (v36)
    goto LABEL_27;
  v37 = v10 + 4;
  if (v10 + 4 >= v31)
    goto LABEL_41;
  v36 = *(_QWORD *)(v55 + 8 * v37);
  if (v36)
    goto LABEL_27;
  v37 = v10 + 5;
  if (v10 + 5 >= v31)
    goto LABEL_41;
  v36 = *(_QWORD *)(v55 + 8 * v37);
  if (v36)
    goto LABEL_27;
  v37 = v10 + 6;
  if (v10 + 6 >= v31)
    goto LABEL_41;
  v36 = *(_QWORD *)(v55 + 8 * v37);
  if (v36)
  {
LABEL_27:
    v35 = v37;
    goto LABEL_28;
  }
  v35 = v10 + 7;
  if (v10 + 7 >= v31)
    goto LABEL_41;
  v36 = *(_QWORD *)(v55 + 8 * v35);
  if (v36)
    goto LABEL_28;
  v40 = v10 + 8;
  while (v40 < v31)
  {
    v36 = *(_QWORD *)(v55 + 8 * v40++);
    if (v36)
    {
      v35 = v40 - 1;
      goto LABEL_28;
    }
  }
LABEL_41:
  swift_release();
  if (v32[2])
  {
    v30 = v32[4];
    v43 = v32[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v30 = 0;
    v43 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc();
    v47 = swift_slowAlloc();
    v57 = v43;
    v58 = v47;
    *(_DWORD *)v46 = 136315138;
    v56 = v30;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v48 = String.init<A>(describing:)();
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2E0C000, v44, v45, "Extracted %s", v46, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v47, -1, -1);
    MEMORY[0x1C3BCB4A4](v46, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_bridgeObjectRelease();
  _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v53, type metadata accessor for CamUSOParse);
  return v30;
}

void AppLaunchTieBreaker.init(tie:)(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *a2 = 1025;
  v4 = type metadata accessor for AppLaunchTieBreaker();
  outlined init with take of CamModelMetadata(a1, (uint64_t)a2 + *(int *)(v4 + 24), (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  v5 = type metadata accessor for TopTwo();
  outlined init with take of CamModelMetadata(a1 + *(int *)(v5 + 20), (uint64_t)a2 + *(int *)(v4 + 28), (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  OUTLINED_FUNCTION_31();
}

Swift::Bool __swiftcall AppLaunchTieBreaker.supportedTie()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v38;

  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_1_1();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v38 - v12;
  v14 = type metadata accessor for AppLaunchTieBreaker();
  v15 = v0 + *(int *)(v14 + 24);
  static AppLaunchTieBreaker.isEnabledAppShortcut(_:)(v15);
  v17 = v16;
  v18 = v0 + *(int *)(v14 + 28);
  static AppLaunchTieBreaker.isEnabledAppShortcut(_:)(v18);
  if ((v17 & 1) != 0 || (v19 & 1) != 0)
  {
    v21 = (v17 & 1) == 0;
    if ((v17 & 1) != 0)
      v22 = v18;
    else
      v22 = v15;
    if (v21)
      v23 = v18;
    else
      v23 = v15;
    outlined init with copy of RankedAction(v23, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    outlined init with copy of RankedAction(v22, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    outlined init with copy of RankedAction((uint64_t)&v13[*(int *)(v7 + 20)], (uint64_t)v3, type metadata accessor for CamParse);
    if (swift_getEnumCaseMultiPayload())
    {
      v24 = type metadata accessor for CamParse;
      v25 = (uint64_t)v3;
    }
    else
    {
      outlined init with take of CamModelMetadata((uint64_t)v3, (uint64_t)v6, type metadata accessor for CamUSOParse);
      v30 = CamUSOParse.appShortcutInvocation.getter();
      if (v31)
      {
        v32 = v30;
        v33 = v31;
        swift_bridgeObjectRelease();
        if ((*v11 == 0xD00000000000001ELL && v11[1] == 0x80000001C2E98EE0
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (v34 = specialized ActionProtocol.getAssociatedAppMentioned()(), v35))
        {
          if (v34 == v32 && v35 == v33)
            v20 = 1;
          else
            v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          v20 = 0;
        }
        swift_bridgeObjectRelease();
        _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v6, type metadata accessor for CamUSOParse);
        goto LABEL_32;
      }
      v24 = type metadata accessor for CamUSOParse;
      v25 = (uint64_t)v6;
    }
    _s7SiriCam0B5ParseOWOhTm_0(v25, v24);
    if (one-time initialization token for common != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.common);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1C2E0C000, v27, v28, "Could not extract App Shortcut bundle ID", v29, 2u);
      MEMORY[0x1C3BCB4A4](v29, -1, -1);
    }

    v20 = 0;
LABEL_32:
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    return v20 & 1;
  }
  v20 = 0;
  return v20 & 1;
}

void static AppLaunchTieBreaker.isEnabledAppShortcut(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  char v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(a1 + *(int *)(OUTLINED_FUNCTION_3_12() + 44));
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = OUTLINED_FUNCTION_0_24();
    if ((v3 & 1) != 0)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(v1 + 56) + 8 * v2), sel_int64Value);
      v4 = (void *)specialized Dictionary.subscript.getter(0xD000000000000017, 0x80000001C2E996A0, v1);
      if (v4)
      {
        v5 = v4;
        objc_msgSend(v4, sel_int64Value);

      }
    }
  }
  OUTLINED_FUNCTION_31();
}

void AppLaunchTieBreaker.actionBoost(features:loggingId:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a1 + 16)
    && (v4 = OUTLINED_FUNCTION_0_24(), (v5 & 1) != 0)
    && (v6 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v4),
        v7 = objc_msgSend(v6, sel_int64Value),
        v6,
        v7))
  {
    type metadata accessor for ScoreBoost();
    v8 = OUTLINED_FUNCTION_1_13();
    OUTLINED_FUNCTION_0_17(v8);
    v9 = 0xED00007475637472;
    v10 = 0x6F68537070417349;
    v11 = 0x3F947AE147AE147BLL;
  }
  else
  {
    type metadata accessor for ScoreBoost();
    v12 = OUTLINED_FUNCTION_1_13();
    OUTLINED_FUNCTION_0_17(v12);
    v9 = 0x80000001C2E9B200;
    v10 = 0xD000000000000015;
    v11 = 0;
  }
  *a2 = v11;
  a2[1] = v10;
  a2[2] = v9;
  OUTLINED_FUNCTION_31();
}

void protocol witness for TieBreaking.actionBoost(features:loggingId:) in conformance AppLaunchTieBreaker(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  AppLaunchTieBreaker.actionBoost(features:loggingId:)(a1, a2);
}

unint64_t OUTLINED_FUNCTION_0_24()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(0x535F5050415F5349, 0xEF54554354524F48);
}

void CamResponseStatusCode.init(fromError:)(void *a1@<X0>, char *a2@<X8>)
{
  id v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  id v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  id v247;

  v247 = a1;
  v4 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (OUTLINED_FUNCTION_1_22())
  {
    if ((_BYTE)v246)
    {
      if (v246 == 1)
      {
        v12 = outlined consume of CoreMLError(v244, v245, 1u);
        OUTLINED_FUNCTION_0_25(v12, v13, v14, v15, v16, v17, v18, v19, v214, v229, v244, v245, v246, v247);
        v20 = 3;
      }
      else
      {
        v79 = outlined consume of CoreMLError(v244, v245, 2u);
        OUTLINED_FUNCTION_0_25(v79, v80, v81, v82, v83, v84, v85, v86, v214, v229, v244, v245, v246, v247);
        v20 = 4;
      }
    }
    else
    {
      v71 = outlined consume of CoreMLError(v244, v245, 0);
      OUTLINED_FUNCTION_0_25(v71, v72, v73, v74, v75, v76, v77, v78, v214, v229, v244, v245, v246, v247);
      v20 = 2;
    }
  }
  else
  {
    OUTLINED_FUNCTION_0_25(0, v5, v6, v7, v8, v9, v10, v11, v214, v229, v244, v245, v246, v247);
    OUTLINED_FUNCTION_2_24(v21, v22, v23, v24, v25, v26, v27, v28, v215, v230, v244, v245, v246, (uint64_t)v247);
    v29 = OUTLINED_FUNCTION_1_22();
    if (v29)
    {
      v37 = v244;
      v38 = v245;
      if ((_BYTE)v246)
      {
        if (v246 == 1)
        {
          v39 = outlined consume of ModelError(v244, v245, 1u);
          OUTLINED_FUNCTION_0_25(v39, v40, v41, v42, v43, v44, v45, v46, v216, v231, v244, v245, v246, v247);
          v20 = 8;
        }
        else
        {
          OUTLINED_FUNCTION_0_25(v29, v30, v31, v32, v33, v34, v35, v36, v216, v231, v244, v245, v246, v247);
          if (v37 | v38)
            v20 = 6;
          else
            v20 = 5;
        }
      }
      else
      {
        v110 = outlined consume of ModelError(v244, v245, 0);
        OUTLINED_FUNCTION_0_25(v110, v111, v112, v113, v114, v115, v116, v117, v216, v231, v244, v245, v246, v247);
        v20 = 7;
      }
    }
    else
    {
      OUTLINED_FUNCTION_0_25(0, v30, v31, v32, v33, v34, v35, v36, v216, v231, v244, v245, v246, v247);
      OUTLINED_FUNCTION_2_24(v47, v48, v49, v50, v51, v52, v53, v54, v217, v232, v244, v245, v246, (uint64_t)v247);
      v55 = OUTLINED_FUNCTION_1_22();
      if ((v55 & 1) != 0)
      {
        v63 = swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_0_25(v63, v64, v65, v66, v67, v68, v69, v70, v218, v233, v244, v245, v246, v247);
        v20 = 9;
      }
      else
      {
        OUTLINED_FUNCTION_0_25(v55, v56, v57, v58, v59, v60, v61, v62, v218, v233, v244, v245, v246, v247);
        OUTLINED_FUNCTION_2_24(v87, v88, v89, v90, v91, v92, v93, v94, v219, v234, v244, v245, v246, (uint64_t)v247);
        if (OUTLINED_FUNCTION_1_22())
        {
          if ((_BYTE)v246)
          {
            if (v246 == 1)
            {
              v102 = outlined consume of CoreMLError(v244, v245, 1u);
              OUTLINED_FUNCTION_0_25(v102, v103, v104, v105, v106, v107, v108, v109, v220, v235, v244, v245, v246, v247);
              v20 = 11;
            }
            else
            {
              v176 = outlined consume of CoreMLError(v244, v245, 2u);
              OUTLINED_FUNCTION_0_25(v176, v177, v178, v179, v180, v181, v182, v183, v220, v235, v244, v245, v246, v247);
              v20 = 12;
            }
          }
          else
          {
            v168 = outlined consume of CoreMLError(v244, v245, 0);
            OUTLINED_FUNCTION_0_25(v168, v169, v170, v171, v172, v173, v174, v175, v220, v235, v244, v245, v246, v247);
            v20 = 10;
          }
        }
        else
        {
          OUTLINED_FUNCTION_0_25(0, v95, v96, v97, v98, v99, v100, v101, v220, v235, v244, v245, v246, v247);
          OUTLINED_FUNCTION_2_24(v129, v130, v131, v132, v133, v134, v135, v136, v221, v236, v244, v245, v246, (uint64_t)v247);
          if (OUTLINED_FUNCTION_1_22())
            __asm { BR              X10 }
          OUTLINED_FUNCTION_0_25(0, v137, v138, v139, v140, v141, v142, v143, v222, v237, v244, v245, v246, v247);
          OUTLINED_FUNCTION_2_24(v144, v145, v146, v147, v148, v149, v150, v151, v223, v238, v244, v245, v246, (uint64_t)v247);
          v152 = OUTLINED_FUNCTION_1_22();
          if ((v152 & 1) != 0)
          {
            v160 = swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_0_25(v160, v161, v162, v163, v164, v165, v166, v167, v224, v239, v244, v245, v246, v247);
            v20 = 29;
          }
          else
          {
            OUTLINED_FUNCTION_0_25(v152, v153, v154, v155, v156, v157, v158, v159, v224, v239, v244, v245, v246, v247);
            OUTLINED_FUNCTION_2_24(v184, v185, v186, v187, v188, v189, v190, v191, v225, v240, v244, v245, v246, (uint64_t)v247);
            if (OUTLINED_FUNCTION_1_22())
              __asm { BR              X10 }
            OUTLINED_FUNCTION_0_25(0, v192, v193, v194, v195, v196, v197, v198, v226, v241, v244, v245, v246, v247);
            OUTLINED_FUNCTION_2_24(v199, v200, v201, v202, v203, v204, v205, v206, v227, v242, v244, v245, v246, (uint64_t)v247);
            if (OUTLINED_FUNCTION_1_22())
              __asm { BR              X10 }
            OUTLINED_FUNCTION_0_25(0, v207, v208, v209, v210, v211, v212, v213, v228, v243, v244, v245, v246, v247);
            v20 = 1;
          }
        }
      }
    }
  }
  v118 = dispatch thunk of CustomStringConvertible.description.getter();
  v120 = v119;
  v244 = (uint64_t)a1;
  v121 = a1;
  v122 = String.init<A>(reflecting:)();
  v124 = v123;
  if (one-time initialization token for common != -1)
    swift_once();
  v125 = type metadata accessor for Logger();
  __swift_project_value_buffer(v125, (uint64_t)static Logger.common);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v126 = Logger.logObject.getter();
  v127 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v126, v127))
  {
    v128 = swift_slowAlloc();
    v244 = swift_slowAlloc();
    *(_DWORD *)v128 = 136315394;
    swift_bridgeObjectRetain();
    v247 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v120, &v244);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v128 + 12) = 2080;
    swift_bridgeObjectRetain();
    v247 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v124, &v244);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2E0C000, v126, v127, "CamResponseStatusCode %s used for error %s", (uint8_t *)v128, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  *a2 = v20;
}

uint64_t CamResponseStatusCode.rawValue.getter()
{
  char *v0;

  return qword_1C2E96348[*v0];
}

SiriCam::CamResponseStatusCode_optional __swiftcall CamResponseStatusCode.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 12;
  switch(rawValue)
  {
    case 1000:
      v2 = 2;
      break;
    case 1001:
      v2 = 3;
      break;
    case 1002:
      v2 = 4;
      break;
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
      goto LABEL_7;
    case 1010:
      v2 = 5;
      break;
    case 1011:
      v2 = 6;
      break;
    case 1012:
      v2 = 7;
      break;
    case 1013:
      v2 = 8;
      break;
    case 1020:
      v2 = 9;
      break;
    case 1030:
      v2 = 10;
      break;
    case 1031:
      v2 = 11;
      break;
    case 1032:
      break;
    case 1040:
      v2 = 13;
      break;
    case 1041:
      v2 = 14;
      break;
    case 1042:
      v2 = 15;
      break;
    case 1043:
      v2 = 16;
      break;
    case 1044:
      v2 = 17;
      break;
    case 1045:
      v2 = 18;
      break;
    case 1050:
      v2 = 19;
      break;
    case 1051:
      v2 = 20;
      break;
    case 1052:
      v2 = 21;
      break;
    case 1053:
      v2 = 22;
      break;
    case 1060:
      v2 = 23;
      break;
    case 1061:
      v2 = 24;
      break;
    case 1062:
      v2 = 25;
      break;
    case 1063:
      v2 = 26;
      break;
    case 1064:
      v2 = 27;
      break;
    case 1065:
      v2 = 28;
      break;
    default:
      switch(rawValue)
      {
        case 200:
          v2 = 0;
          break;
        case 1070:
          v2 = 29;
          break;
        case 500:
          v2 = 1;
          break;
        default:
LABEL_7:
          v2 = 30;
          break;
      }
      break;
  }
  *v1 = v2;
  return (SiriCam::CamResponseStatusCode_optional)rawValue;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CamResponseStatusCode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type CamResponseStatusCode and conformance CamResponseStatusCode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamResponseStatusCode and conformance CamResponseStatusCode;
  if (!lazy protocol witness table cache variable for type CamResponseStatusCode and conformance CamResponseStatusCode)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamResponseStatusCode, &type metadata for CamResponseStatusCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamResponseStatusCode and conformance CamResponseStatusCode);
  }
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance CamResponseStatusCode()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CamResponseStatusCode(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CamResponseStatusCode(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::CamResponseStatusCode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CamResponseStatusCode(Swift::Int *a1)
{
  return CamResponseStatusCode.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CamResponseStatusCode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CamResponseStatusCode.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CamResponseStatusCode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE3)
  {
    if (a2 + 29 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 29) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 30;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1E;
  v5 = v6 - 30;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CamResponseStatusCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 29 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 29) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE2)
    return ((uint64_t (*)(void))((char *)&loc_1C2E5D8AC + 4 * byte_1C2E961F6[v4]))();
  *a1 = a2 + 29;
  return ((uint64_t (*)(void))((char *)sub_1C2E5D8E0 + 4 * byte_1C2E961F1[v4]))();
}

uint64_t sub_1C2E5D8E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E5D8E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E5D8F0);
  return result;
}

uint64_t sub_1C2E5D8FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E5D904);
  *(_BYTE *)result = a2 + 29;
  return result;
}

uint64_t sub_1C2E5D908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E5D910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CamResponseStatusCode()
{
  return &type metadata for CamResponseStatusCode;
}

uint64_t outlined consume of AutoConfirmError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 5u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined consume of ModelError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

void OUTLINED_FUNCTION_0_25(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

}

uint64_t OUTLINED_FUNCTION_1_22()
{
  return swift_dynamicCast();
}

id OUTLINED_FUNCTION_2_24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  return v14;
}

uint64_t static EnvironmentUtilities.currentSiriLocale.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Locale();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78]();
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.preferencesLanguageCode.getter();
  v5 = v4;
  swift_release();
  if (!v5)
  {
    static Locale.current.getter();
    Locale.identifier.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return Locale.init(identifier:)();
}

uint64_t RepetitionType.description.getter(int a1)
{
  uint64_t result;

  result = 0x494156415F544F4ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x54455045525F4F4ELL;
      break;
    case 2:
      result = 0x4C414954524150;
      break;
    case 3:
      result = 1280070982;
      break;
    default:
      result = 0x4E574F4E4B4E55;
      break;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RepetitionType()
{
  int *v0;

  return RepetitionType.description.getter(*v0);
}

uint64_t static AssetProvider.fetchModelFromUAF(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(unint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(id, uint64_t);
  unint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(unint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  void *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  int EnumTagSinglePayload;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  int v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(id, char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  os_log_type_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(id, char *, uint64_t);
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(char *, uint64_t);
  uint64_t v159;
  void (*v160)(unint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173[2];

  v167 = a1;
  v163 = a3;
  v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_2_12();
  v153 = v5;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_23_2();
  v147 = v7;
  v152 = type metadata accessor for CamModelMetadata();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_2_12();
  v151 = v9;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_23_2();
  v157 = v11;
  v12 = type metadata accessor for URL();
  v161 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_2_12();
  v150 = v13;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_13_3();
  v146 = v15;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_23_2();
  v164 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_2_12();
  v154 = v19;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_13_3();
  v159 = v21;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_23_2();
  v160 = v23;
  v24 = type metadata accessor for Locale();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v141 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_13_3();
  v155 = (char *)v29;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_13_3();
  v156 = v31;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v32);
  OUTLINED_FUNCTION_13_3();
  v168 = v33;
  OUTLINED_FUNCTION_3_7();
  v35 = MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v141 - v36;
  MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v141 - v38;
  static EnvironmentUtilities.currentSiriLocale.getter();
  v173[0] = Locale.identifier.getter();
  v173[1] = v40;
  v171 = 45;
  v172 = 0xE100000000000000;
  v169 = 95;
  v170 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  Locale.init(identifier:)();
  v41 = *(void (**)(char *, uint64_t))(v25 + 8);
  v41(v37, v24);
  if (one-time initialization token for common != -1)
    swift_once();
  v42 = OUTLINED_FUNCTION_14_1();
  v43 = __swift_project_value_buffer(v42, (uint64_t)static Logger.common);
  v148 = v25;
  v144 = *(void (**)(id, char *, uint64_t))(v25 + 16);
  v144(v168, v39, v24);
  swift_bridgeObjectRetain_n();
  v165 = v43;
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.debug.getter();
  v46 = os_log_type_enabled(v44, v45);
  v47 = a2;
  v162 = v24;
  v145 = v28;
  if (v46)
  {
    v48 = OUTLINED_FUNCTION_4();
    v166 = a2;
    v49 = v48;
    v143 = OUTLINED_FUNCTION_4();
    v173[0] = v143;
    *(_DWORD *)v49 = 136315394;
    swift_bridgeObjectRetain();
    v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v166, v173);
    OUTLINED_FUNCTION_42_4(v50);
    v51 = v24;
    OUTLINED_FUNCTION_17_10();
    OUTLINED_FUNCTION_41_3();
    *(_WORD *)(v49 + 12) = 2080;
    v158 = v41;
    lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E0CB0E70]);
    v52 = v168;
    v53 = dispatch thunk of CustomStringConvertible.description.getter();
    v171 = OUTLINED_FUNCTION_96(v53, v54);
    v55 = (void (*)(id, uint64_t))v158;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_12();
    v55(v52, v51);
    _os_log_impl(&dword_1C2E0C000, v44, v45, "%s: Trying to fetch model for current siri locale : %s", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_22_0();
  v41((char *)v168, v24);

  v56 = v164;
  v57 = static AssetProvider.uafAssetSet.getter();
  if (v57)
  {
    v58 = v57;
    v59 = (void *)MEMORY[0x1C3BCA844](v167, v47);
    v60 = objc_msgSend(v58, sel_assetNamed_, v59);

    if (v60)
    {
      v61 = objc_msgSend(v60, sel_location);
      if (v61)
      {
        v62 = v61;
        v63 = v159;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v64 = 0;
      }
      else
      {
        v64 = 1;
        v63 = v159;
      }
      v65 = (uint64_t)v160;
      __swift_storeEnumTagSinglePayload(v63, v64, 1, v12);
      outlined init with take of URL?(v63, v65);
      if (__swift_getEnumTagSinglePayload(v65, 1, v12) == 1)
      {
        outlined destroy of (CamLogOutput, CamModelMetadata)(v65, &demangling cache variable for type metadata for URL?);
      }
      else
      {
        v66 = v56;
        v56 = v65;
        v67 = URL.path.getter();
        v69 = v68;
        v70 = *(void (**)(unint64_t, uint64_t))(v161 + 8);
        v70(v56, v12);
        v71 = HIBYTE(v69) & 0xF;
        if ((v69 & 0x2000000000000000) == 0)
          v71 = v67 & 0xFFFFFFFFFFFFLL;
        if (v71)
        {
          v142 = v12;
          v141 = v39;
          URL.init(fileURLWithPath:isDirectory:)();
          swift_bridgeObjectRelease();
          v72 = v154;
          static AssetProvider.defaultModelUrl(for:)(v167, v47, v154);
          v158 = v41;
          v83 = v142;
          __swift_storeEnumTagSinglePayload(v72, 0, 1, v142);
          EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v72, 1, v83);
          if (EnumTagSinglePayload == 1)
          {
            outlined destroy of (CamLogOutput, CamModelMetadata)(v72, &demangling cache variable for type metadata for URL?);
          }
          else
          {
            v131 = v146;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v161 + 32))(v146, v72, v83);
            if ((MEMORY[0x1C3BC9FB0](v66, v131) & 1) != 0)
            {
              OUTLINED_FUNCTION_12_9();
              v132 = (void *)OUTLINED_FUNCTION_24_9();
              v133 = static os_log_type_t.default.getter();
              if (OUTLINED_FUNCTION_24_5(v133))
              {
                OUTLINED_FUNCTION_4();
                v173[0] = OUTLINED_FUNCTION_4();
                OUTLINED_FUNCTION_23_10(4.8149e-34);
                v134 = OUTLINED_FUNCTION_49_2();
                v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, v136);
                OUTLINED_FUNCTION_16_12(v137);
                OUTLINED_FUNCTION_41_3();
                OUTLINED_FUNCTION_27_9(&dword_1C2E0C000, v138, v139, "%s: UAF did not deliver a model.");
                OUTLINED_FUNCTION_38_6();
                OUTLINED_FUNCTION_3();
              }

              OUTLINED_FUNCTION_22_0();
              OUTLINED_FUNCTION_26_7(v131);
              OUTLINED_FUNCTION_26_7(v66);
              v41(v141, v162);
              v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
              v80 = v163;
              goto LABEL_21;
            }
            OUTLINED_FUNCTION_26_7(v131);
          }
          v168 = v60;
          v85 = objc_msgSend(v60, sel_metadata);
          v86 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          v87 = v150;
          v88 = v142;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v161 + 16))(v150, v66, v142);
          OUTLINED_FUNCTION_12_9();
          swift_bridgeObjectRetain_n();
          v89 = OUTLINED_FUNCTION_24_9();
          v90 = static os_log_type_t.info.getter();
          v91 = v90;
          v92 = os_log_type_enabled(v89, v90);
          v166 = v47;
          v160 = v70;
          if (v92)
          {
            v93 = OUTLINED_FUNCTION_4();
            v159 = OUTLINED_FUNCTION_4();
            v173[0] = v159;
            *(_DWORD *)v93 = 136315650;
            swift_bridgeObjectRetain();
            v95 = OUTLINED_FUNCTION_40_5(v167, v94, v173);
            OUTLINED_FUNCTION_42_4(v95);
            LODWORD(v154) = v91;
            OUTLINED_FUNCTION_17_10();
            OUTLINED_FUNCTION_41_3();
            *(_WORD *)(v93 + 12) = 2080;
            v96 = URL.absoluteString.getter();
            v171 = OUTLINED_FUNCTION_96(v96, v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_12();
            OUTLINED_FUNCTION_46_2();
            *(_WORD *)(v93 + 22) = 2080;
            swift_bridgeObjectRetain();
            v98 = Dictionary.description.getter();
            swift_bridgeObjectRelease();
            v171 = OUTLINED_FUNCTION_40_5(v98, v99, v173);
            OUTLINED_FUNCTION_17_10();
            OUTLINED_FUNCTION_48_3();
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_40_4(&dword_1C2E0C000, v89, (os_log_type_t)v154, "%s: Model URL from UAF: %s. Model metadata from UAF: %s", (uint8_t *)v93);
            OUTLINED_FUNCTION_21_12();
            OUTLINED_FUNCTION_3();
          }
          OUTLINED_FUNCTION_22_0();
          v70(v87, v88);

          OUTLINED_FUNCTION_48_3();
          v100 = v157;
          v101 = v167;
          type metadata accessor for AssetMetadataProvider();
          static AssetMetadataProvider.parseAssetMetadata(modelName:metadata:)(v101, v47, v86, v100);
          swift_bridgeObjectRelease();
          v102 = v151;
          outlined init with copy of CamModelMetadata(v100, v151);
          OUTLINED_FUNCTION_12_9();
          v103 = OUTLINED_FUNCTION_24_9();
          v104 = static os_log_type_t.info.getter();
          v105 = v104;
          v106 = os_log_type_enabled(v103, v104);
          v107 = v163;
          if (v106)
          {
            v108 = OUTLINED_FUNCTION_4();
            v173[0] = OUTLINED_FUNCTION_4();
            *(_DWORD *)v108 = 136315394;
            swift_bridgeObjectRetain();
            v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v47, v173);
            OUTLINED_FUNCTION_42_4(v109);
            OUTLINED_FUNCTION_17_7();
            OUTLINED_FUNCTION_41_3();
            *(_WORD *)(v108 + 12) = 2080;
            outlined init with copy of Locale?(v102 + *(int *)(v152 + 28), v147);
            v110 = String.init<A>(describing:)();
            v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v173);
            OUTLINED_FUNCTION_17_7();
            swift_bridgeObjectRelease();
            outlined destroy of CamModelMetadata(v102);
            _os_log_impl(&dword_1C2E0C000, v103, (os_log_type_t)v105, "%s: Model locale from asset metadata: %s", (uint8_t *)v108, 0x16u);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3();
          }
          OUTLINED_FUNCTION_22_0();
          outlined destroy of CamModelMetadata(v102);

          OUTLINED_FUNCTION_25_9();
          v112 = v153;
          outlined init with copy of Locale?(v100 + *(int *)(v152 + 28), v153);
          if (__swift_getEnumTagSinglePayload(v112, 1, (uint64_t)v41) == 1)
          {
            outlined destroy of (CamLogOutput, CamModelMetadata)(v112, &demangling cache variable for type metadata for Locale?);
            v113 = OUTLINED_FUNCTION_24_9();
            v114 = static os_log_type_t.error.getter();
            if (OUTLINED_FUNCTION_4_8(v114))
            {
              v115 = (uint8_t *)OUTLINED_FUNCTION_4();
              *(_WORD *)v115 = 0;
              _os_log_impl(&dword_1C2E0C000, v113, (os_log_type_t)v112, "UAF did not have model locale in metadata. Assuming that current model delivered by UAF is good to use", v115, 2u);
              OUTLINED_FUNCTION_3();
            }
            OUTLINED_FUNCTION_37_0();

            v158((char *)v102, (uint64_t)v41);
          }
          else
          {
            (*(void (**)(void (*)(unint64_t, uint64_t), uint64_t, void (*)(char *, uint64_t)))(v148 + 32))(v70, v112, v41);
            lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E0CB0E60]);
            if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
            {
              v118 = v144;
              v144((id)v87, (char *)v102, (uint64_t)v41);
              v119 = (uint64_t)v145;
              v118(v145, (char *)v70, (uint64_t)v41);
              OUTLINED_FUNCTION_12_9();
              v120 = v87;
              v121 = OUTLINED_FUNCTION_24_9();
              v122 = static os_log_type_t.error.getter();
              if (OUTLINED_FUNCTION_4_8(v122))
              {
                v123 = OUTLINED_FUNCTION_4();
                v165 = OUTLINED_FUNCTION_4();
                v173[0] = v165;
                *(_DWORD *)v123 = 136315650;
                LODWORD(v161) = (_DWORD)v118;
                swift_bridgeObjectRetain();
                v125 = OUTLINED_FUNCTION_40_5(v167, v124, v173);
                OUTLINED_FUNCTION_42_4(v125);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                OUTLINED_FUNCTION_41_3();
                *(_WORD *)(v123 + 12) = 2080;
                lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E0CB0E70]);
                v126 = v155;
                OUTLINED_FUNCTION_49_2();
                v127 = dispatch thunk of CustomStringConvertible.description.getter();
                v171 = OUTLINED_FUNCTION_96(v127, v128);
                OUTLINED_FUNCTION_17_7();
                OUTLINED_FUNCTION_12();
                v158(v126, (uint64_t)v41);
                *(_WORD *)(v123 + 22) = 2080;
                OUTLINED_FUNCTION_49_2();
                v129 = dispatch thunk of CustomStringConvertible.description.getter();
                v171 = OUTLINED_FUNCTION_96(v129, v130);
                OUTLINED_FUNCTION_17_7();
                OUTLINED_FUNCTION_12();
                OUTLINED_FUNCTION_50_2(v119);
                OUTLINED_FUNCTION_40_4(&dword_1C2E0C000, v121, (os_log_type_t)v161, "%s: Current Siri Locale %s does not match locale of the model %s delivered by UAF. User possibly switched Siri locale recently. ", (uint8_t *)v123);
                OUTLINED_FUNCTION_21_12();
                OUTLINED_FUNCTION_3();
              }

              OUTLINED_FUNCTION_45_5(v119);
              OUTLINED_FUNCTION_13_13(v120);
              OUTLINED_FUNCTION_37_0();
              OUTLINED_FUNCTION_22_0();
              OUTLINED_FUNCTION_13_13((uint64_t)v70);
              outlined destroy of CamModelMetadata(v100);
              OUTLINED_FUNCTION_46_2();
              OUTLINED_FUNCTION_13_13(v102);
              v140 = v163;
              v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
              v80 = v140;
              goto LABEL_21;
            }
            OUTLINED_FUNCTION_37_0();
            OUTLINED_FUNCTION_45_5((uint64_t)v70);
            OUTLINED_FUNCTION_13_13(v102);
          }
          v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
          v117 = v107 + *(int *)(v116 + 48);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v161 + 32))(v107, v47, v105);
          outlined init with take of CamModelMetadata(v100, v117);
          v80 = v107;
          v81 = 0;
          v79 = v116;
          return __swift_storeEnumTagSinglePayload(v80, v81, 1, v79);
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v60 = 0;
  }
  OUTLINED_FUNCTION_12_9();
  v73 = (void *)OUTLINED_FUNCTION_24_9();
  v74 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_24_5(v74))
  {
    OUTLINED_FUNCTION_4();
    v173[0] = OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_23_10(4.8149e-34);
    v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v56, v173);
    OUTLINED_FUNCTION_16_12(v75);
    OUTLINED_FUNCTION_41_3();
    OUTLINED_FUNCTION_27_9(&dword_1C2E0C000, v76, v77, "%s: UAF did not return a model url");
    OUTLINED_FUNCTION_38_6();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_22_0();
  v41(v39, v162);
  v78 = v163;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
  v80 = v78;
LABEL_21:
  v81 = 1;
  return __swift_storeEnumTagSinglePayload(v80, v81, 1, v79);
}

uint64_t type metadata accessor for DummyClassToIdentifyTheCamFramework()
{
  return objc_opt_self();
}

uint64_t one-time initialization function for savedLocale()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD v7[6];

  v0 = type metadata accessor for Locale();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v2, static AssetProvider.savedLocale);
  __swift_project_value_buffer(v0, (uint64_t)static AssetProvider.savedLocale);
  static EnvironmentUtilities.currentSiriLocale.getter();
  v7[4] = Locale.identifier.getter();
  v7[5] = v5;
  v7[2] = 45;
  v7[3] = 0xE100000000000000;
  v7[0] = 95;
  v7[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  Locale.init(identifier:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void *static AssetProvider.uafAssetSet.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  void (*v8)(_BYTE *, uint64_t);
  uint64_t v9;
  char v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  _BYTE v21[64];
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v0 = type metadata accessor for Locale();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v2);
  v6 = &v21[-v5];
  static EnvironmentUtilities.currentSiriLocale.getter();
  v24 = Locale.identifier.getter();
  v25 = v7;
  v22 = 45;
  v23 = 0xE100000000000000;
  v26 = 95;
  v27 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  Locale.init(identifier:)();
  v8 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
  v8(v4, v0);
  if (one-time initialization token for savedLocale != -1)
    swift_once();
  v9 = __swift_project_value_buffer(v0, (uint64_t)static AssetProvider.savedLocale);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 16))(v4, v9, v0);
  lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E0CB0E60]);
  v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  v8(v4, v0);
  if ((v10 & 1) == 0 || (v11 = (void *)static AssetProvider.savedUafAssetSet) == 0)
  {
    swift_beginAccess();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v1 + 24))(v9, v6, v0);
    swift_endAccess();
    v12 = objc_msgSend((id)objc_opt_self(), sel_sharedManager);
    v13 = (void *)MEMORY[0x1C3BCA844](0xD00000000000001CLL, 0x80000001C2E9B260);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2E94230;
    strcpy((char *)(inited + 32), "cam.language");
    *(_BYTE *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    *(_QWORD *)(inited + 48) = Locale.identifier.getter();
    *(_QWORD *)(inited + 56) = v15;
    v16 = Dictionary.init(dictionaryLiteral:)();
    v17 = outlined bridged method (mnbnn) of @objc UAFAssetSetManager.retrieveAssetSet(_:usages:)((uint64_t)v13, v16, v12);

    v18 = (void *)static AssetProvider.savedUafAssetSet;
    static AssetProvider.savedUafAssetSet = (uint64_t)v17;

    v11 = (void *)static AssetProvider.savedUafAssetSet;
  }
  v19 = v11;
  v8(v6, v0);
  return v11;
}

uint64_t static AssetProvider.fetchModel(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata)?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
  OUTLINED_FUNCTION_1_1();
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v32 - v17;
  static AssetProvider.fetchModelFromUAF(_:)(a3, a4, (uint64_t)v11);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
    outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v11, &demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata)?);
    if (one-time initialization token for common != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.common);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = a1;
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1C2E0C000, v20, v21, "Falling back to default model", v23, 2u);
      v24 = v23;
      a1 = v22;
      MEMORY[0x1C3BCB4A4](v24, -1, -1);
    }

    return static AssetProvider.defaultModel(for:)(a1, a2, a3, a4);
  }
  else
  {
    v26 = *(int *)(v12 + 48);
    v27 = (uint64_t)&v18[v26];
    v28 = (uint64_t)&v11[v26];
    type metadata accessor for URL();
    v34 = v4;
    v33 = a2;
    v29 = OUTLINED_FUNCTION_49_2();
    OUTLINED_FUNCTION_47_4(v29, v30);
    outlined init with take of CamModelMetadata(v28, v27);
    v31 = (uint64_t)&v16[*(int *)(v12 + 48)];
    OUTLINED_FUNCTION_47_4((uint64_t)v16, (uint64_t)v18);
    outlined init with take of CamModelMetadata(v27, v31);
    OUTLINED_FUNCTION_47_4(a1, (uint64_t)v16);
    return outlined init with take of CamModelMetadata(v31, v33);
  }
}

uint64_t static AssetProvider.defaultModel(for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  os_log_type_t type;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  if (one-time initialization token for defaultModelMetadata != -1)
    swift_once();
  v10 = static AssetMetadataProvider.defaultModelMetadata;
  swift_bridgeObjectRetain();
  v11 = specialized Dictionary.subscript.getter(a3, a4, v10);
  swift_bridgeObjectRelease();
  if (!v11)
    v11 = Dictionary.init(dictionaryLiteral:)();
  if (one-time initialization token for common != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.common);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    type = v14;
    v15 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    v26 = v23;
    *(_DWORD *)v15 = 136315394;
    v25 = a2;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    v16 = a3;
    v17 = Dictionary.description.getter();
    v18 = v5;
    v20 = v19;
    swift_bridgeObjectRelease();
    v21 = v17;
    a3 = v16;
    a2 = v25;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v5 = v18;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2E0C000, v13, type, "%s: Using default metadata %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v23, -1, -1);
    MEMORY[0x1C3BCB4A4](v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  static AssetProvider.defaultModelUrl(for:)(a3, a4, a1);
  if (!v5)
  {
    type metadata accessor for AssetMetadataProvider();
    static AssetMetadataProvider.parseAssetMetadata(modelName:metadata:)(a3, a4, v11, a2);
  }
  return swift_bridgeObjectRelease();
}

void static AssetProvider.defaultModelUrl(for:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[4];
  int v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;

  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = &v34[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = &v34[-v13];
  MEMORY[0x1E0C80A78](v12);
  v16 = &v34[-v15];
  static AssetProvider.defaultAssetsUrl()();
  if (!v3)
  {
    URL.appendingPathComponent(_:)();
    v37 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v37((uint64_t)v16, v7);
    if ((URL.hasDirectoryPath.getter() & 1) != 0)
    {
      if (one-time initialization token for common != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.common);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, a3, v7);
      swift_bridgeObjectRetain_n();
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc();
        v36 = swift_slowAlloc();
        v39 = v36;
        *(_DWORD *)v20 = 136315394;
        swift_bridgeObjectRetain();
        v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v20 + 12) = 2080;
        v21 = URL.absoluteString.getter();
        v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v37((uint64_t)v11, v7);
        _os_log_impl(&dword_1C2E0C000, v18, v19, "%s: Default Model url: %s", (uint8_t *)v20, 0x16u);
        v23 = v36;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v23, -1, -1);
        MEMORY[0x1C3BCB4A4](v20, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        v37((uint64_t)v11, v7);
      }

    }
    else
    {
      if (one-time initialization token for common != -1)
        swift_once();
      v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.common);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v14, a3, v7);
      swift_bridgeObjectRetain_n();
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.error.getter();
      v27 = v26;
      if (os_log_type_enabled(v25, v26))
      {
        v28 = swift_slowAlloc();
        v36 = swift_slowAlloc();
        v39 = v36;
        *(_DWORD *)v28 = 136315650;
        v35 = v27;
        swift_bridgeObjectRetain();
        v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v28 + 12) = 2080;
        swift_bridgeObjectRetain();
        v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v28 + 22) = 2080;
        v29 = URL.absoluteString.getter();
        v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v31 = v37;
        v37((uint64_t)v14, v7);
        _os_log_impl(&dword_1C2E0C000, v25, (os_log_type_t)v35, "%s: Default Model for %s not found in %s.", (uint8_t *)v28, 0x20u);
        v32 = v36;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v32, -1, -1);
        MEMORY[0x1C3BCB4A4](v28, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        v31 = v37;
        v37((uint64_t)v14, v7);
      }

      lazy protocol witness table accessor for type ModelError and conformance ModelError();
      swift_allocError();
      *(_OWORD *)v33 = xmmword_1C2E953D0;
      *(_BYTE *)(v33 + 16) = 2;
      swift_willThrow();
      v31(a3, v7);
    }
  }
}

void static AssetProvider.setAssetsProvisional()()
{
  unsigned int v0;
  os_log_type_t v1;
  __int16 v2;
  __int16 v3;
  void *v4;
  void *v5;
  void *v6;
  NSArray v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  id v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_t log;
  os_log_t logb;
  os_log_t logc;
  NSObject *logd;
  NSObject *loga;
  os_log_t loge;
  os_log_t logf;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;

  v4 = static AssetProvider.uafAssetSet.getter();

  if (v4)
  {
    v5 = static AssetProvider.uafAssetSet.getter();
    if (v5)
    {
      v6 = v5;
      v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
      v0 = OUTLINED_FUNCTION_32_6((int)v7.super.isa, sel_markAssetsProvisional_error_, v8, v9, v10, v11, v12, v13, v44, (uint64_t)log, v57, v62, 0);

      if (!v0)
      {
        v36 = v67;
        v37 = (void *)OUTLINED_FUNCTION_41_6();

        swift_willThrow();
        if (one-time initialization token for common != -1)
          swift_once();
        v38 = OUTLINED_FUNCTION_14_1();
        v39 = OUTLINED_FUNCTION_8_1(v38, (uint64_t)static Logger.common);
        v40 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_7_7(v40))
        {
          v41 = OUTLINED_FUNCTION_4();
          OUTLINED_FUNCTION_4();
          v42 = OUTLINED_FUNCTION_30_10(4.8152e-34);
          v65 = OUTLINED_FUNCTION_2_25(v42, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send", v44, (uint64_t)log, v57, v62);
          OUTLINED_FUNCTION_4_18();
          v43 = OUTLINED_FUNCTION_44_3();
          v66 = OUTLINED_FUNCTION_2_25(v43, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send_private", v48, (uint64_t)loge, v60, v65);
          OUTLINED_FUNCTION_4_18();
          *(_WORD *)(v41 + 22) = v3;
          OUTLINED_FUNCTION_3_19((uint64_t)"com.apple.siri.cam.uncertainty_prompt", v49, (uint64_t)logf, v61, v66);
          OUTLINED_FUNCTION_4_18();
          OUTLINED_FUNCTION_40_4(&dword_1C2E0C000, v39, v1, "Failed to set assets %s, %s, %s to provisional", (uint8_t *)v41);
          OUTLINED_FUNCTION_21_12();
          OUTLINED_FUNCTION_3();
        }

        goto LABEL_20;
      }
      v14 = v67;
    }
    if (one-time initialization token for common != -1)
      swift_once();
    v15 = OUTLINED_FUNCTION_14_1();
    v16 = OUTLINED_FUNCTION_8_1(v15, (uint64_t)static Logger.common);
    v17 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_24_5(v17))
    {
      v18 = OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_4();
      v19 = OUTLINED_FUNCTION_29_10(4.8152e-34);
      v63 = OUTLINED_FUNCTION_2_25(v19, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send", v44, (uint64_t)log, v57, v62);
      OUTLINED_FUNCTION_5_14();
      v20 = OUTLINED_FUNCTION_51_1();
      v64 = OUTLINED_FUNCTION_2_25(v20, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send_private", v45, (uint64_t)logb, v58, v63);
      OUTLINED_FUNCTION_5_14();
      *(_WORD *)(v18 + 22) = v2;
      OUTLINED_FUNCTION_3_19((uint64_t)"com.apple.siri.cam.uncertainty_prompt", v46, (uint64_t)logc, v59, v64);
      OUTLINED_FUNCTION_5_14();
      OUTLINED_FUNCTION_40_4(&dword_1C2E0C000, v16, (os_log_type_t)v0, "Set assets %s, %s, %s to provisional", (uint8_t *)v18);
      OUTLINED_FUNCTION_21_12();
      OUTLINED_FUNCTION_3();
    }

LABEL_20:
    OUTLINED_FUNCTION_0_23();
    return;
  }
  if (one-time initialization token for common != -1)
    swift_once();
  v21 = OUTLINED_FUNCTION_14_1();
  logd = OUTLINED_FUNCTION_8_1(v21, (uint64_t)static Logger.common);
  v22 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_39_1(v22, v23, v24, v25, v26, v27, v28, v29, v44, logd))
  {
    *(_WORD *)OUTLINED_FUNCTION_4() = 0;
    OUTLINED_FUNCTION_28_9(&dword_1C2E0C000, v30, v31, "UAF asset set is nil, so marking assets to provisional will fail", v32, v33, v34, v35, v47, loga);
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_9_17(loga);
}

void static AssetProvider.promoteAssets()()
{
  unsigned int v0;
  os_log_type_t v1;
  __int16 v2;
  __int16 v3;
  void *v4;
  void *v5;
  void *v6;
  NSArray v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  id v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_t log;
  os_log_t logb;
  os_log_t logc;
  NSObject *logd;
  NSObject *loga;
  os_log_t loge;
  os_log_t logf;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;

  v4 = static AssetProvider.uafAssetSet.getter();

  if (v4)
  {
    v5 = static AssetProvider.uafAssetSet.getter();
    if (v5)
    {
      v6 = v5;
      v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
      v0 = OUTLINED_FUNCTION_32_6((int)v7.super.isa, sel_markAssetsPromoted_error_, v8, v9, v10, v11, v12, v13, v44, (uint64_t)log, v57, v62, 0);

      if (!v0)
      {
        v36 = v67;
        v37 = (void *)OUTLINED_FUNCTION_41_6();

        swift_willThrow();
        if (one-time initialization token for common != -1)
          swift_once();
        v38 = OUTLINED_FUNCTION_14_1();
        v39 = OUTLINED_FUNCTION_8_1(v38, (uint64_t)static Logger.common);
        v40 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_7_7(v40))
        {
          v41 = OUTLINED_FUNCTION_4();
          OUTLINED_FUNCTION_4();
          v42 = OUTLINED_FUNCTION_30_10(4.8152e-34);
          v65 = OUTLINED_FUNCTION_2_25(v42, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send", v44, (uint64_t)log, v57, v62);
          OUTLINED_FUNCTION_4_18();
          v43 = OUTLINED_FUNCTION_44_3();
          v66 = OUTLINED_FUNCTION_2_25(v43, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send_private", v48, (uint64_t)loge, v60, v65);
          OUTLINED_FUNCTION_4_18();
          *(_WORD *)(v41 + 22) = v3;
          OUTLINED_FUNCTION_3_19((uint64_t)"com.apple.siri.cam.uncertainty_prompt", v49, (uint64_t)logf, v61, v66);
          OUTLINED_FUNCTION_4_18();
          OUTLINED_FUNCTION_40_4(&dword_1C2E0C000, v39, v1, "Promoting %s, %s, %s failed", (uint8_t *)v41);
          OUTLINED_FUNCTION_21_12();
          OUTLINED_FUNCTION_3();
        }

        goto LABEL_20;
      }
      v14 = v67;
    }
    if (one-time initialization token for common != -1)
      swift_once();
    v15 = OUTLINED_FUNCTION_14_1();
    v16 = OUTLINED_FUNCTION_8_1(v15, (uint64_t)static Logger.common);
    v17 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_24_5(v17))
    {
      v18 = OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_4();
      v19 = OUTLINED_FUNCTION_29_10(4.8152e-34);
      v63 = OUTLINED_FUNCTION_2_25(v19, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send", v44, (uint64_t)log, v57, v62);
      OUTLINED_FUNCTION_5_14();
      v20 = OUTLINED_FUNCTION_51_1();
      v64 = OUTLINED_FUNCTION_2_25(v20, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send_private", v45, (uint64_t)logb, v58, v63);
      OUTLINED_FUNCTION_5_14();
      *(_WORD *)(v18 + 22) = v2;
      OUTLINED_FUNCTION_3_19((uint64_t)"com.apple.siri.cam.uncertainty_prompt", v46, (uint64_t)logc, v59, v64);
      OUTLINED_FUNCTION_5_14();
      OUTLINED_FUNCTION_40_4(&dword_1C2E0C000, v16, (os_log_type_t)v0, "Promoted %s, %s, %s", (uint8_t *)v18);
      OUTLINED_FUNCTION_21_12();
      OUTLINED_FUNCTION_3();
    }

LABEL_20:
    OUTLINED_FUNCTION_0_23();
    return;
  }
  if (one-time initialization token for common != -1)
    swift_once();
  v21 = OUTLINED_FUNCTION_14_1();
  logd = OUTLINED_FUNCTION_8_1(v21, (uint64_t)static Logger.common);
  v22 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_39_1(v22, v23, v24, v25, v26, v27, v28, v29, v44, logd))
  {
    *(_WORD *)OUTLINED_FUNCTION_4() = 0;
    OUTLINED_FUNCTION_28_9(&dword_1C2E0C000, v30, v31, "UAF asset set is nil, so promoting assets will fail", v32, v33, v34, v35, v47, loga);
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_9_17(loga);
}

uint64_t static AssetProvider.defaultAssetsUrl()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  id v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD v16[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v16 - v8;
  type metadata accessor for DummyClassToIdentifyTheCamFramework();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v11 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v12 = objc_msgSend(v11, sel_resourceURL);

  if (v12)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v13 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v13(v2, v7, v3);
    __swift_storeEnumTagSinglePayload((uint64_t)v2, 0, 1, v3);
    if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) != 1)
    {
      v13(v9, v2, v3);
      URL.appendingPathComponent(_:isDirectory:)();
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  }
  outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v2, &demangling cache variable for type metadata for URL?);
  lazy protocol witness table accessor for type ModelError and conformance ModelError();
  swift_allocError();
  *(_OWORD *)v15 = xmmword_1C2E953D0;
  *(_BYTE *)(v15 + 16) = 2;
  return swift_willThrow();
}

id outlined bridged method (mnbnn) of @objc UAFAssetSetManager.retrieveAssetSet(_:usages:)(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa;
  id v6;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(a3, sel_retrieveAssetSet_usages_, a1, isa);

  return v6;
}

unint64_t lazy protocol witness table accessor for type ModelError and conformance ModelError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelError and conformance ModelError;
  if (!lazy protocol witness table cache variable for type ModelError and conformance ModelError)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for ModelError, &type metadata for ModelError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelError and conformance ModelError);
  }
  return result;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Locale and conformance Locale(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Locale();
    result = MEMORY[0x1C3BCB3E4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_25@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (a2 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_3_19@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, (a1 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_4_18()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_5_14()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_9_17(id a1)
{

}

uint64_t OUTLINED_FUNCTION_12_9()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_16_12(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_17_10()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_21_12()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_23_10(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_24_9()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_26_7(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_27_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_28_9(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log)
{
  os_log_type_t v10;
  uint8_t *v11;

  _os_log_impl(a1, log, v10, a4, v11, 2u);
}

unint64_t OUTLINED_FUNCTION_29_10(float a1)
{
  float *v1;

  *v1 = a1;
  return 0xD000000000000029;
}

unint64_t OUTLINED_FUNCTION_30_10(float a1)
{
  float *v1;

  *v1 = a1;
  return 0xD000000000000029;
}

id OUTLINED_FUNCTION_32_6(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  uint64_t v14;

  return objc_msgSend(v13, a2, v14, &a13);
}

uint64_t OUTLINED_FUNCTION_38_6()
{
  return swift_arrayDestroy();
}

BOOL OUTLINED_FUNCTION_39_1(os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t oslog)
{
  return os_log_type_enabled(oslog, a1);
}

uint64_t OUTLINED_FUNCTION_40_5(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_41_6()
{
  return _convertNSErrorToError(_:)();
}

uint64_t OUTLINED_FUNCTION_42_4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_44_3()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v0 + 12) = 2080;
  return v1 + 12;
}

uint64_t OUTLINED_FUNCTION_45_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 232))(a1, v1);
}

uint64_t OUTLINED_FUNCTION_46_2()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 216))();
}

uint64_t OUTLINED_FUNCTION_47_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_48_3()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_49_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_50_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_51_1()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v0 + 12) = 2080;
  return v1 + 12;
}

void type metadata accessor for UncertaintyPromptMagicWordsActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for UncertaintyPromptSequentialEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for UserEntityVocabActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for OverrideParseActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for ExactShortcutActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for ZeroAsrConfidenceActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for ShadowLogActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for ExecuteActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for GiveUpRepeatActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for MessageDictationActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for SiriVocabActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for UserConfirmationActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void type metadata accessor for LongPayloadActionEnforcer()
{
  OUTLINED_FUNCTION_5_8();
}

void UncertaintyPromptSequentialEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  uint64_t v22[2];
  unint64_t v23;

  v6 = *(_QWORD *)(a5 + 16);
  if (v6)
  {
    v21 = a6;
    v11 = (_QWORD *)(a5 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      v12 = v11[3];
      v13 = v11[4];
      __swift_project_boxed_opaque_existential_1(v11, v12);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(v22, a1, a2, a3, a4, v12, v13);
      v14 = v23;
      if (v23)
        break;
      v11 += 5;
      if (!--v6)
      {
        OUTLINED_FUNCTION_5();
        a6 = v21;
        goto LABEL_6;
      }
    }
    v15 = v22[1];
    v16 = LOBYTE(v22[0]);
    OUTLINED_FUNCTION_5();
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_14_1();
    v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.ambiguityHandling);
    swift_bridgeObjectRetain_n();
    Logger.logObject.getter();
    v19 = OUTLINED_FUNCTION_12_1();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)OUTLINED_FUNCTION_4();
      v22[0] = OUTLINED_FUNCTION_4();
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_88(&dword_1C2E0C000, v18, v19, "%s has overridden", v20);
      OUTLINED_FUNCTION_13_1();
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_1_10();
    *v21 = v16;
    v21[1] = v15;
    v21[2] = v14;
  }
  else
  {
LABEL_6:
    OUTLINED_FUNCTION_82_0(a6);
  }
  OUTLINED_FUNCTION_0_23();
}

void protocol witness for UncertaintyPromptActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:) in conformance UncertaintyPromptSequentialEnforcer(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;

  UncertaintyPromptSequentialEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(a1, a2, a3, a4, *v5, a5);
}

void GiveUpRepeatActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(_BYTE *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a2 + *(int *)(OUTLINED_FUNCTION_20_11() + 36)) == 2 && a1[56] == 2)
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v5 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v5, (uint64_t)static Logger.ambiguityHandling);
    v6 = OUTLINED_FUNCTION_12_1();
    if (OUTLINED_FUNCTION_7_7(v6))
    {
      OUTLINED_FUNCTION_4();
      v14 = OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_39_2(4.8149e-34);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GiveUpRepeatActionEnforcer.Type);
      v7 = OUTLINED_FUNCTION_69_1();
      OUTLINED_FUNCTION_86_0(v7, v8, v9, &type metadata for GiveUpRepeatActionEnforcer, v14);
      OUTLINED_FUNCTION_29_11();
      OUTLINED_FUNCTION_13();
      OUTLINED_FUNCTION_8_15(&dword_1C2E0C000, v10, v11, "%s detected previous ASK_REPEAT and about to ASK_REPEAT again - overriding to GIVE_UP_REPEAT");
      OUTLINED_FUNCTION_13_1();
      OUTLINED_FUNCTION_3();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GiveUpRepeatActionEnforcer.Type);
    v12 = OUTLINED_FUNCTION_50_3();
    *a3 = 3;
    a3[1] = v12;
    a3[2] = v13;
  }
  else
  {
    OUTLINED_FUNCTION_49_3();
  }
  OUTLINED_FUNCTION_26_8();
}

void ExecuteActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a3 + *(int *)(OUTLINED_FUNCTION_20_11() + 36)) == 3 && a2[56] == 2)
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v4 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v4, (uint64_t)static Logger.ambiguityHandling);
    v5 = OUTLINED_FUNCTION_12_1();
    if (OUTLINED_FUNCTION_7_7(v5))
    {
      OUTLINED_FUNCTION_4();
      v13 = OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_39_2(4.8149e-34);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecuteActionEnforcer.Type);
      v6 = OUTLINED_FUNCTION_69_1();
      OUTLINED_FUNCTION_86_0(v6, v7, v8, &type metadata for ExecuteActionEnforcer, v13);
      OUTLINED_FUNCTION_29_11();
      OUTLINED_FUNCTION_13();
      OUTLINED_FUNCTION_8_15(&dword_1C2E0C000, v9, v10, "%s detected previous GIVE_UP_REPEAT and about to ASK_REPEAT - overriding to EXECUTE_TOP_HYPOTHESIS");
      OUTLINED_FUNCTION_13_1();
      OUTLINED_FUNCTION_3();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecuteActionEnforcer.Type);
    v11 = OUTLINED_FUNCTION_50_3();
    OUTLINED_FUNCTION_64_1(v11, v12);
  }
  else
  {
    OUTLINED_FUNCTION_49_3();
  }
  OUTLINED_FUNCTION_26_8();
}

uint64_t SiriVocabActionEnforcer.getTaskDetailsFromRankedAction(rankedActions:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, unint64_t, uint64_t);
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v2 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier.NluComponent();
  v69 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v68 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v67 = (char *)&v54 - v5;
  v66 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v6 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v65 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v62 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v63 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CamParse(0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CamUSOParse(0);
  MEMORY[0x1E0C80A78](v22);
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v59 = (uint64_t)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for RankedAction();
  v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80);
  outlined init with copy of CamParse(a1 + *(int *)(v24 + 20) + ((v25 + 32) & ~v25), (uint64_t)v21, type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    v26 = type metadata accessor for CamParse;
    v27 = (uint64_t)v21;
LABEL_4:
    outlined destroy of CamParse(v27, v26);
    return 0;
  }
  v30 = v59;
  outlined init with take of RankedAction((uint64_t)v21, v59, type metadata accessor for CamUSOParse);
  MEMORY[0x1C3BCA37C]();
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  v31 = v64;
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v64) == 1)
  {
    outlined destroy of CamParse(v30, type metadata accessor for CamUSOParse);
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v17, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v63, v17, v31);
  v32 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v33 = v32;
  if (v32 >> 62)
  {
    v52 = v32;
    swift_bridgeObjectRetain();
    v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v33 = v52;
    if (v53)
      goto LABEL_11;
LABEL_22:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v31);
    v26 = type metadata accessor for CamUSOParse;
    v27 = v59;
    goto LABEL_4;
  }
  if (!*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_22;
LABEL_11:
  v34 = v33 & 0xC000000000000001;
  v35 = v33;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v33 & 0xC000000000000001) == 0, v33);
  if (v34)
  {
    v28 = MEMORY[0x1C3BCAC88](0, v35);
  }
  else
  {
    v28 = *(_QWORD *)(v35 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v36 = v63;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v37 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v10, v61);
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    v55 = v28;
    v60 = v2;
    v39 = v37 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v58 = *MEMORY[0x1E0D9F848];
    v40 = *(_QWORD *)(v6 + 72);
    v61 = v6;
    v41 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v56 = v40;
    v57 = v41;
    v54 = v37;
    swift_bridgeObjectRetain();
    v42 = v65;
    v43 = v66;
    v45 = v67;
    v44 = v68;
    v46 = v60;
    do
    {
      v57(v42, v39, v43);
      Siri_Nlu_External_UsoEntityIdentifier.sourceComponent.getter();
      v47 = v69;
      (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v44, v58, v46);
      lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoEntityIdentifier.NluComponent and conformance Siri_Nlu_External_UsoEntityIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F850], MEMORY[0x1E0D9F858]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v49 = v70;
      v48 = v71;
      v50 = *(void (**)(char *, uint64_t))(v47 + 8);
      v50(v44, v46);
      v50(v45, v46);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v42, v43);
      if (v48 == v49)
        break;
      v39 += v56;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease_n();
    v36 = v63;
    v31 = v64;
    v51 = v62;
    v28 = v55;
  }
  else
  {
    swift_bridgeObjectRelease();
    v51 = v62;
  }
  (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v31);
  outlined destroy of CamParse(v59, type metadata accessor for CamUSOParse);
  return v28;
}

uint64_t SiriVocabActionEnforcer.getTaskDetailsFromUserParse(topUserParse:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v2 = type metadata accessor for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent();
  v62 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v59 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?, Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?));
  MEMORY[0x1E0C80A78](v60);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v61 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v48 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v48 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamUserParse?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CamUserParse(0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (uint64_t *)((char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v48 - v21;
  outlined init with copy of CamUserParse?(a1, (uint64_t)v16, &demangling cache variable for type metadata for CamUserParse?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17) == 1)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v16, &demangling cache variable for type metadata for CamUserParse?);
    return 0;
  }
  outlined init with take of RankedAction((uint64_t)v16, (uint64_t)v22, type metadata accessor for CamUserParse);
  outlined init with copy of CamParse((uint64_t)v22, (uint64_t)v20, type metadata accessor for CamUserParse);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of CamParse((uint64_t)v22, type metadata accessor for CamUserParse);
    v23 = (uint64_t)v20;
LABEL_10:
    outlined destroy of CamParse(v23, type metadata accessor for CamUserParse);
    return 0;
  }
  v24 = *v20;
  swift_bridgeObjectRelease();
  v25 = objc_msgSend((id)v24, sel_userDialogActs);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v26 >> 62)
    goto LABEL_38;
  if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_39:
    swift_bridgeObjectRelease();
    outlined destroy of CamParse((uint64_t)v22, type metadata accessor for CamUserParse);
    goto LABEL_40;
  }
LABEL_7:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v26 & 0xC000000000000001) == 0, v26);
  if ((v26 & 0xC000000000000001) != 0)
  {
    v27 = MEMORY[0x1C3BCAC88](0, v26);
  }
  else
  {
    v27 = *(_QWORD *)(v26 + 32);
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRelease();
  v28 = static UsoConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v29 = v28;
  v52 = v27;
  if (!(v28 >> 62))
  {
    if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_44;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v47 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v47)
  {
LABEL_13:
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v29 & 0xC000000000000001) == 0, v29);
    if ((v29 & 0xC000000000000001) != 0)
    {
      v50 = MEMORY[0x1C3BCAC88](0, v29);
    }
    else
    {
      v50 = *(_QWORD *)(v29 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    objc_opt_self();
    v30 = swift_dynamicCastObjCClass();
    if (!v30)
    {
      swift_unknownObjectRelease();
      swift_release();

      v23 = (uint64_t)v22;
      goto LABEL_10;
    }
    v31 = (void *)v30;
    swift_unknownObjectRetain();
    v32 = objc_msgSend(v31, sel_task);
    v33 = objc_msgSend(v32, sel_identifiers);

    type metadata accessor for USOSerializedIdentifier();
    v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v49 = (id)v24;
    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      v34 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      v34 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v35 = v60;
    if (!v34)
    {
LABEL_36:

      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      outlined destroy of CamParse((uint64_t)v22, type metadata accessor for CamUserParse);
      return v50;
    }
    v56 = v26 & 0xC000000000000001;
    v55 = *MEMORY[0x1E0DA03C0];
    v24 = 4;
    v53 = v26;
    v54 = v34;
    while (1)
    {
      if (v56)
        v36 = (id)MEMORY[0x1C3BCAC88](v24 - 4, v26);
      else
        v36 = *(id *)(v26 + 8 * v24);
      v37 = v36;
      if (__OFADD__(v24 - 4, 1))
      {
        __break(1u);
LABEL_38:
        swift_bridgeObjectRetain();
        v46 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v46)
          goto LABEL_39;
        goto LABEL_7;
      }
      v57 = v24 - 3;
      v38 = objc_msgSend(v36, sel_sourceComponent);
      v58 = v37;
      if (v38)
      {
        v39 = v38;
        v63 = 0;
        v64 = 1;
        static Int._conditionallyBridgeFromObjectiveC(_:result:)();

      }
      Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent.init(rawValue:)();
      (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v11, v55, v2);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v2);
      v40 = (uint64_t)&v5[*(int *)(v35 + 48)];
      outlined init with copy of CamUserParse?((uint64_t)v13, (uint64_t)v5, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
      outlined init with copy of CamUserParse?((uint64_t)v11, v40, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v2) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
        if (__swift_getEnumTagSinglePayload(v40, 1, v2) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v5, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);

          goto LABEL_36;
        }
      }
      else
      {
        v41 = v61;
        outlined init with copy of CamUserParse?((uint64_t)v5, v61, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
        if (__swift_getEnumTagSinglePayload(v40, 1, v2) != 1)
        {
          v42 = v59;
          (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v59, v40, v2);
          lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent and conformance Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA03D0], MEMORY[0x1E0DA03E0]);
          v51 = dispatch thunk of static Equatable.== infix(_:_:)();
          v43 = *(void (**)(char *, uint64_t))(v62 + 8);
          v44 = v42;
          v35 = v60;
          v43(v44, v2);
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
          v43((char *)v41, v2);
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v5, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);

          v26 = v53;
          if ((v51 & 1) != 0)
            goto LABEL_36;
          goto LABEL_33;
        }
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v41, v2);
        v26 = v53;
      }
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v5, &demangling cache variable for type metadata for (Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?, Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?));

LABEL_33:
      ++v24;
      if (v57 == v54)
        goto LABEL_36;
    }
  }
LABEL_44:
  swift_bridgeObjectRelease();
  outlined destroy of CamParse((uint64_t)v22, type metadata accessor for CamUserParse);
  swift_unknownObjectRelease();
LABEL_40:

  return 0;
}

void SiriVocabActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  NSObject *v14;
  char v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_37_8();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamUserParse?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_16_13();
  v4 = type metadata accessor for CamInput();
  v5 = OUTLINED_FUNCTION_59(v4);
  if (v6)
  {
    if (SiriVocabActionEnforcer.getTaskDetailsFromRankedAction(rankedActions:)(v5))
    {
      v8 = v7;
      goto LABEL_5;
    }
LABEL_46:
    OUTLINED_FUNCTION_49_3();
    goto LABEL_47;
  }
  CamInput.topUserParse.getter(v0);
  v9 = SiriVocabActionEnforcer.getTaskDetailsFromUserParse(topUserParse:)(v0);
  v8 = v10;
  outlined destroy of RRDataSourceMetadataValue?(v0, &demangling cache variable for type metadata for CamUserParse?);
  if (!v9)
    goto LABEL_46;
LABEL_5:
  OUTLINED_FUNCTION_62_1();
  v11 = OUTLINED_FUNCTION_41_7();
  if (v11[2].isa)
  {
    specialized __RawDictionaryStorage.find<A>(_:)(0x746567726174, 0xE600000000000000);
    v13 = v12;
    OUTLINED_FUNCTION_12();
  }
  else
  {
    OUTLINED_FUNCTION_12();
    v13 = 0;
  }
  if (OUTLINED_FUNCTION_57_3() == 1684956531 && v14 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = v14;
    v16 = OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_12();
    if ((v16 & 1) == 0)
      goto LABEL_27;
  }
  if (OUTLINED_FUNCTION_58_2() == 0x4D5F6E6F6D6D6F63 && v17 == 0xEE00656761737365)
  {
    swift_bridgeObjectRelease();
    if ((v13 & v8 & 1) != 0)
    {
LABEL_21:
      if (one-time initialization token for ambiguityHandling != -1)
        swift_once();
      v20 = OUTLINED_FUNCTION_14_1();
      OUTLINED_FUNCTION_8_1(v20, (uint64_t)static Logger.ambiguityHandling);
      v21 = OUTLINED_FUNCTION_12_1();
      if (OUTLINED_FUNCTION_41_0(v21))
      {
        v22 = (uint8_t *)OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_70_0(4.8149e-34);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriVocabActionEnforcer.Type);
        v23 = OUTLINED_FUNCTION_68_0();
        v25 = OUTLINED_FUNCTION_91_0(v23, v24);
        OUTLINED_FUNCTION_40_6(v25);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_88(&dword_1C2E0C000, v11, (os_log_type_t)v13, "%s detected message sending request with contact name", v22);
        OUTLINED_FUNCTION_13_1();
        OUTLINED_FUNCTION_3();
      }
      goto LABEL_44;
    }
  }
  else
  {
    v19 = OUTLINED_FUNCTION_13_14();
    OUTLINED_FUNCTION_12();
    if ((v19 & v13 & 1) != 0 && (v8 & 1) != 0)
      goto LABEL_21;
  }
LABEL_27:
  if (OUTLINED_FUNCTION_57_3() == 1819042147 && v26 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_12();
    if ((v28 & 1) == 0)
    {
LABEL_45:
      OUTLINED_FUNCTION_79_0();
      goto LABEL_46;
    }
  }
  v29 = OUTLINED_FUNCTION_58_2();
  v11 = v30;
  if (v29 == 0xD000000000000010 && v30 == 0x80000001C2E9B280)
  {
    swift_bridgeObjectRelease();
    if ((v13 & v8 & 1) == 0)
      goto LABEL_45;
  }
  else
  {
    v31 = OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_12();
    if ((v31 & v13 & 1) == 0 || (v8 & 1) == 0)
      goto LABEL_45;
  }
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v32 = OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_8_1(v32, (uint64_t)static Logger.ambiguityHandling);
  v33 = OUTLINED_FUNCTION_12_1();
  if (OUTLINED_FUNCTION_41_0(v33))
  {
    v34 = (uint8_t *)OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_70_0(4.8149e-34);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriVocabActionEnforcer.Type);
    v35 = OUTLINED_FUNCTION_68_0();
    v37 = OUTLINED_FUNCTION_91_0(v35, v36);
    OUTLINED_FUNCTION_40_6(v37);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_88(&dword_1C2E0C000, v11, (os_log_type_t)v13, "%s detected phone call request with contact name", v34);
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_3();
  }
LABEL_44:

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriVocabActionEnforcer.Type);
  v38 = OUTLINED_FUNCTION_30_11();
  v40 = v39;
  OUTLINED_FUNCTION_79_0();
  *v2 = 1;
  v2[1] = v38;
  v2[2] = v40;
LABEL_47:
  OUTLINED_FUNCTION_0_2();
}

void MessageDictationActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v33)(_QWORD);
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  OUTLINED_FUNCTION_37_8();
  v54 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamUserParse?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_4_5();
  v6 = v5 - v4;
  v7 = type metadata accessor for CamUserParse(0);
  OUTLINED_FUNCTION_1_1();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (void **)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v48 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_45_6(v15, v48);
  v53 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v50 = *(_QWORD *)(v53 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_9_7();
  v49 = v17;
  OUTLINED_FUNCTION_42_5();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v18);
  v19 = OUTLINED_FUNCTION_16_13();
  type metadata accessor for CamUSOParse(v19);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_43_6(v21, v48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_60();
  v23 = OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_9_7();
  v26 = v25;
  v27 = OUTLINED_FUNCTION_20_11();
  OUTLINED_FUNCTION_59(v27);
  if (!v28)
  {
    CamInput.topUserParse.getter(v6);
    OUTLINED_FUNCTION_7_10(v6, 1, v7);
    if (v29)
    {
      v30 = &demangling cache variable for type metadata for CamUserParse?;
      v31 = v6;
      goto LABEL_15;
    }
    outlined init with take of RankedAction(v6, (uint64_t)v13, type metadata accessor for CamUserParse);
    outlined init with copy of CamParse((uint64_t)v13, (uint64_t)v11, type metadata accessor for CamUserParse);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      OUTLINED_FUNCTION_56_0((uint64_t)v13);
      v34 = (uint64_t)v11;
      v33 = type metadata accessor for CamUserParse;
      goto LABEL_20;
    }
    v39 = *v11;
    swift_bridgeObjectRelease();
    v40 = objc_msgSend(v39, sel_userDialogActs);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
    v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v41 >> 62)
    {
      OUTLINED_FUNCTION_18_8();
      v45 = OUTLINED_FUNCTION_74_0();
      OUTLINED_FUNCTION_3_1();
      if (v45)
        goto LABEL_18;
    }
    else if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_18:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v41 & 0xC000000000000001) == 0, v41);
      if ((v41 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_57_2();
      swift_unknownObjectRetain();
      OUTLINED_FUNCTION_3_1();
      v42 = static UsoConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      if (v42 >> 62)
      {
        OUTLINED_FUNCTION_18_8();
        v46 = OUTLINED_FUNCTION_74_0();
        OUTLINED_FUNCTION_3_1();
        if (v46)
        {
LABEL_24:
          OUTLINED_FUNCTION_53_3();
          OUTLINED_FUNCTION_57_2();
        }
      }
      else if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_24;
      }
      OUTLINED_FUNCTION_3_1();
      outlined destroy of CamParse((uint64_t)v13, type metadata accessor for CamUserParse);
      OUTLINED_FUNCTION_56_3();
LABEL_30:

      goto LABEL_21;
    }
    OUTLINED_FUNCTION_3_1();
    outlined destroy of CamParse((uint64_t)v13, type metadata accessor for CamUserParse);
    goto LABEL_30;
  }
  specialized Collection.first.getter();
  OUTLINED_FUNCTION_7_10(v1, 1, v23);
  if (v29)
  {
    v30 = &demangling cache variable for type metadata for RankedAction?;
    v31 = v1;
  }
  else
  {
    outlined init with take of RankedAction(v1, v26, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    outlined init with copy of CamParse(v26 + *(int *)(v23 + 20), v0, type metadata accessor for CamParse);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of CamParse(v26, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      v33 = type metadata accessor for CamParse;
      v34 = v0;
LABEL_20:
      outlined destroy of CamParse(v34, v33);
      goto LABEL_21;
    }
    outlined init with take of RankedAction(v0, v52, type metadata accessor for CamUSOParse);
    MEMORY[0x1C3BCA37C]();
    v36 = v51;
    specialized Collection.first.getter();
    OUTLINED_FUNCTION_3_1();
    v37 = v53;
    v38 = OUTLINED_FUNCTION_7_10(v36, 1, v53);
    if (!v29)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v49, v36, v37);
      v43 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      if (v43 >> 62)
      {
        OUTLINED_FUNCTION_18_8();
        v47 = OUTLINED_FUNCTION_74_0();
        OUTLINED_FUNCTION_3_1();
        if (v47)
        {
LABEL_27:
          OUTLINED_FUNCTION_53_3();
          OUTLINED_FUNCTION_57_2();
        }
      }
      else if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_27;
      }
      OUTLINED_FUNCTION_3_1();
      v44 = OUTLINED_FUNCTION_67_1();
      OUTLINED_FUNCTION_38_7(v44, type metadata accessor for CamUSOParse);
      v33 = (uint64_t (*)(_QWORD))type metadata accessor for RankedAction;
      v34 = v26;
      goto LABEL_20;
    }
    OUTLINED_FUNCTION_38_7(v38, type metadata accessor for CamUSOParse);
    outlined destroy of CamParse(v26, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    v30 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
    v31 = v36;
  }
LABEL_15:
  outlined destroy of RRDataSourceMetadataValue?(v31, v30);
LABEL_21:
  OUTLINED_FUNCTION_82_0(v54);
  OUTLINED_FUNCTION_0_2();
}

void UserConfirmationActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t EnumCaseMultiPayload;
  uint64_t (*v36)(_QWORD);
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  ValueMetadata *v70;

  OUTLINED_FUNCTION_37_8();
  v69 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamUserParse?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v4);
  v5 = OUTLINED_FUNCTION_46_3();
  v6 = type metadata accessor for CamUserParse(v5);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_48_4();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v63 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_9_7();
  v66 = v12;
  v68 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v64 = *(_QWORD *)(v68 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_2_12();
  v63 = v14;
  MEMORY[0x1E0C80A78](v15);
  v65 = (char *)&v63 - v16;
  OUTLINED_FUNCTION_42_5();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_4_5();
  v20 = v19 - v18;
  type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_44_4(v22, v63);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v23);
  OUTLINED_FUNCTION_47_5();
  v24 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_4_5();
  v28 = v27 - v26;
  v29 = OUTLINED_FUNCTION_20_11();
  OUTLINED_FUNCTION_59(v29);
  if (v30)
  {
    specialized Collection.first.getter();
    OUTLINED_FUNCTION_7_10(v1, 1, v24);
    if (!v31)
    {
      outlined init with take of RankedAction(v1, v28, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      outlined init with copy of CamParse(v28 + *(int *)(v24 + 20), v20, type metadata accessor for CamParse);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v34 = v69;
      if ((_DWORD)EnumCaseMultiPayload)
      {
        OUTLINED_FUNCTION_38_7(EnumCaseMultiPayload, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
        v36 = type metadata accessor for CamParse;
        v37 = v20;
LABEL_12:
        outlined destroy of CamParse(v37, v36);
        goto LABEL_29;
      }
      outlined init with take of RankedAction(v20, v67, type metadata accessor for CamUSOParse);
      MEMORY[0x1C3BCA37C]();
      v39 = v66;
      specialized Collection.first.getter();
      OUTLINED_FUNCTION_3_1();
      v40 = v68;
      v41 = OUTLINED_FUNCTION_7_10(v39, 1, v68);
      if (v31)
      {
        OUTLINED_FUNCTION_32_7(v41, type metadata accessor for CamUSOParse);
        OUTLINED_FUNCTION_38_7(v42, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
        outlined destroy of RRDataSourceMetadataValue?(v39, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        goto LABEL_29;
      }
      v51 = v64;
      v52 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v65, v39, v40);
      v53 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter();
      v54 = v63;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v63, v52, v40);
      if ((v53 & 1) != 0)
      {
        OUTLINED_FUNCTION_55_2(v54);
      }
      else
      {
        v56 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
        OUTLINED_FUNCTION_55_2(v54);
        if ((v56 & 1) == 0)
        {
          v62 = OUTLINED_FUNCTION_55_2(v52);
          OUTLINED_FUNCTION_32_7(v62, type metadata accessor for CamUSOParse);
          v36 = (uint64_t (*)(_QWORD))type metadata accessor for RankedAction;
          v37 = v28;
          goto LABEL_12;
        }
      }
      v70 = &type metadata for UserConfirmationActionEnforcer;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserConfirmationActionEnforcer.Type);
      v57 = OUTLINED_FUNCTION_30_11();
      v59 = v58;
      v60 = OUTLINED_FUNCTION_55_2(v52);
      OUTLINED_FUNCTION_32_7(v60, type metadata accessor for CamUSOParse);
      OUTLINED_FUNCTION_38_7(v61, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      *v34 = 1;
      v34[1] = v57;
      v34[2] = v59;
      goto LABEL_30;
    }
    v32 = &demangling cache variable for type metadata for RankedAction?;
    v33 = v1;
    goto LABEL_8;
  }
  CamInput.topUserParse.getter(v0);
  OUTLINED_FUNCTION_7_10(v0, 1, v6);
  if (v31)
  {
    v32 = &demangling cache variable for type metadata for CamUserParse?;
    v33 = v0;
LABEL_8:
    outlined destroy of RRDataSourceMetadataValue?(v33, v32);
LABEL_9:
    v34 = v69;
LABEL_29:
    *v34 = 0;
    v34[1] = 0;
    v34[2] = 0;
    goto LABEL_30;
  }
  outlined init with take of RankedAction(v0, (uint64_t)v10, type metadata accessor for CamUserParse);
  outlined init with copy of CamParse((uint64_t)v10, (uint64_t)v2, type metadata accessor for CamUserParse);
  v38 = swift_getEnumCaseMultiPayload();
  if (v38 == 1)
  {
    OUTLINED_FUNCTION_56_0((uint64_t)v10);
    OUTLINED_FUNCTION_56_0((uint64_t)v2);
    goto LABEL_9;
  }
  v43 = *v2;
  swift_bridgeObjectRelease();
  v44 = objc_msgSend(v43, sel_userDialogActs);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v45 >> 62)
  {
    swift_bridgeObjectRetain();
    v46 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_2_7();
  }
  else
  {
    v46 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v34 = v69;
  if (!v46)
  {
    v55 = OUTLINED_FUNCTION_2_7();
    OUTLINED_FUNCTION_32_7(v55, type metadata accessor for CamUserParse);

    goto LABEL_29;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v45 & 0xC000000000000001) == 0, v45);
  if ((v45 & 0xC000000000000001) != 0)
    MEMORY[0x1C3BCAC88](0, v45);
  else
    swift_unknownObjectRetain();
  OUTLINED_FUNCTION_2_7();
  objc_opt_self();
  if (!OUTLINED_FUNCTION_89_0())
  {
    objc_opt_self();
    if (!OUTLINED_FUNCTION_89_0())
    {
      OUTLINED_FUNCTION_32_7(0, type metadata accessor for CamUserParse);

      swift_unknownObjectRelease();
      goto LABEL_29;
    }
  }
  v70 = &type metadata for UserConfirmationActionEnforcer;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserConfirmationActionEnforcer.Type);
  v47 = OUTLINED_FUNCTION_30_11();
  v49 = v48;
  swift_unknownObjectRelease();

  OUTLINED_FUNCTION_32_7(v50, type metadata accessor for CamUserParse);
  *v34 = 1;
  v34[1] = v47;
  v34[2] = v49;
LABEL_30:
  OUTLINED_FUNCTION_0_2();
}

void LongPayloadActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  id v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_12;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002BLL, 0x80000001C2E98840);
  if ((v4 & 1) == 0)
    goto LABEL_12;
  v5 = OUTLINED_FUNCTION_76_0(v3);
  v6 = MLMultiArray.toIntScalar()();
  if (v7)
  {
    OUTLINED_FUNCTION_4_15();

LABEL_12:
    OUTLINED_FUNCTION_49_3();
    goto LABEL_13;
  }
  v8 = v6;

  if (v8 < 21 || *(_BYTE *)(a2 + 56) != 2)
    goto LABEL_12;
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v9 = OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_8_1(v9, (uint64_t)static Logger.ambiguityHandling);
  v10 = OUTLINED_FUNCTION_12_1();
  if (OUTLINED_FUNCTION_7_7(v10))
  {
    OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_39_2(4.8149e-34);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LongPayloadActionEnforcer.Type);
    v11 = OUTLINED_FUNCTION_50_3();
    OUTLINED_FUNCTION_87_0(v11, v12, v13, v14);
    OUTLINED_FUNCTION_29_11();
    OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_8_15(&dword_1C2E0C000, v15, v16, "%s detected long utterance");
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_3();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LongPayloadActionEnforcer.Type);
  v17 = OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_64_1(v17, v18);
LABEL_13:
  OUTLINED_FUNCTION_25_10();
}

uint64_t ShadowLogActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  OUTLINED_FUNCTION_20_11();
  v4 = UUID.uuid.getter();
  v5 = 0;
  result = 0;
  v7 = 0;
  if (*(_BYTE *)(a1 + 56) == 2 && v4 <= 0xCu)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShadowLogActionEnforcer.Type);
    result = OUTLINED_FUNCTION_50_3();
    v5 = 1;
  }
  *a2 = v5;
  a2[1] = result;
  a2[2] = v7;
  return result;
}

void UncertaintyPromptMagicWordsActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t countAndFlagsBits;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(void **)(a1 + *(int *)(OUTLINED_FUNCTION_20_11() + 32));
  if (v3)
  {
    v4 = objc_msgSend(v3, sel_recognition);
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, sel_aceRecognition);

      if (v6)
      {
        specialized TopRecognitionExtractor.getTopRecognition(recognition:)(v6);
        countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
        OUTLINED_FUNCTION_12();
        lazy protocol witness table accessor for type String and conformance String();
        v8 = OUTLINED_FUNCTION_27_10();
        v9 = OUTLINED_FUNCTION_27_10();
        OUTLINED_FUNCTION_5();
        if ((v8 & 1) != 0)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UncertaintyPromptMagicWordsActionEnforcer.Type);
          OUTLINED_FUNCTION_12_7();
          OUTLINED_FUNCTION_9_15();
          v10 = 2;
LABEL_11:
          *a2 = v10;
          a2[1] = v9;
          a2[2] = countAndFlagsBits;
          goto LABEL_6;
        }
        if ((v9 & 1) != 0)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UncertaintyPromptMagicWordsActionEnforcer.Type);
          OUTLINED_FUNCTION_12_7();
          OUTLINED_FUNCTION_9_15();
          v10 = 3;
          goto LABEL_11;
        }

      }
    }
  }
  OUTLINED_FUNCTION_49_3();
LABEL_6:
  OUTLINED_FUNCTION_0_23();
}

void ZeroAsrConfidenceActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  char v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_4;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002CLL, 0x80000001C2E98760);
  if ((v4 & 1) == 0)
    goto LABEL_4;
  v5 = OUTLINED_FUNCTION_76_0(v3);
  MLMultiArray.toDoubleArray()();
  v7 = v6;

  v8 = COERCE_DOUBLE(specialized Sequence<>.min()(v7));
  v10 = v9;
  OUTLINED_FUNCTION_5();
  if ((v10 & 1) == 0 && v8 <= 0.01 && *(_BYTE *)(a2 + 56) == 2)
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v11 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v11, (uint64_t)static Logger.ambiguityHandling);
    v12 = OUTLINED_FUNCTION_12_1();
    if (OUTLINED_FUNCTION_7_7(v12))
    {
      OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_39_2(4.8149e-34);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZeroAsrConfidenceActionEnforcer.Type);
      v13 = OUTLINED_FUNCTION_50_3();
      OUTLINED_FUNCTION_87_0(v13, v14, v15, v16);
      OUTLINED_FUNCTION_29_11();
      OUTLINED_FUNCTION_13();
      OUTLINED_FUNCTION_8_15(&dword_1C2E0C000, v17, v18, "%s detected only zero ASR confidence scores - overriding to EXECUTE_TOP_HYPOTHESIS");
      OUTLINED_FUNCTION_13_1();
      OUTLINED_FUNCTION_3();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZeroAsrConfidenceActionEnforcer.Type);
    v19 = OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_64_1(v19, v20);
  }
  else
  {
LABEL_4:
    OUTLINED_FUNCTION_49_3();
  }
  OUTLINED_FUNCTION_25_10();
}

void ExactShortcutActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
  ExactShortcutActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)();
}

{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(uint64_t, NSObject *);
  uint64_t v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t *v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  const char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;

  OUTLINED_FUNCTION_37_8();
  v53 = v2;
  v54 = v1;
  v55 = v3;
  v57 = v4;
  v58 = v5;
  v7 = v6;
  v60 = v8;
  v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  isa = v9[-1].isa;
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_45_6(v11, (uint64_t)v53);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_48_4();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v53 - v18;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_4_5();
  v23 = v22 - v21;
  v24 = type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_44_4(v26, (uint64_t)v53);
  v27 = *(_QWORD *)(v7 + *(int *)(OUTLINED_FUNCTION_20_11() + 44));
  if (!*(_QWORD *)(v27 + 16))
    goto LABEL_22;
  OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_61_1();
  outlined init with copy of CamParse(v27 + v28 + v29, v23, type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    v30 = type metadata accessor for CamParse;
LABEL_21:
    outlined destroy of CamParse(v23, v30);
LABEL_22:
    OUTLINED_FUNCTION_82_0(v60);
    goto LABEL_23;
  }
  v31 = v23;
  v23 = v59;
  outlined init with take of RankedAction(v31, v59, type metadata accessor for CamUSOParse);
  v32 = (uint64_t *)(v23 + *(int *)(v24 + 20));
  (*((void (**)(char *, _QWORD, NSObject *))isa + 13))(v19, *v58, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, (uint64_t)v9);
  v33 = (uint64_t)&v15[*(int *)(v12 + 48)];
  outlined init with copy of CamUserParse?((uint64_t)v32, (uint64_t)v15, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  outlined init with copy of CamUserParse?((uint64_t)v19, v33, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v34 = OUTLINED_FUNCTION_7_10((uint64_t)v15, 1, (uint64_t)v9);
  if (v35)
  {
    OUTLINED_FUNCTION_78_0(v34, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    OUTLINED_FUNCTION_7_10(v33, 1, (uint64_t)v9);
    if (v35)
    {
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v15, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      goto LABEL_14;
    }
LABEL_12:
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
LABEL_20:
    v30 = type metadata accessor for CamUSOParse;
    goto LABEL_21;
  }
  outlined init with copy of CamUserParse?((uint64_t)v15, v0, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v36 = OUTLINED_FUNCTION_7_10(v33, 1, (uint64_t)v9);
  if (v35)
  {
    OUTLINED_FUNCTION_78_0(v36, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    (*((void (**)(uint64_t, NSObject *))isa + 1))(v0, v9);
    goto LABEL_12;
  }
  v37 = v56;
  (*((void (**)(uint64_t, uint64_t, NSObject *))isa + 4))(v56, v33, v9);
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F170]);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  v39 = (void (*)(uint64_t, NSObject *))*((_QWORD *)isa + 1);
  v39(v37, v9);
  v32 = &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?;
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v19, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v39(v0, v9);
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v15, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  if ((v38 & 1) == 0)
    goto LABEL_20;
LABEL_14:
  if (*(_BYTE *)(v57 + 56) != 2)
    goto LABEL_20;
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v40 = OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_8_1(v40, (uint64_t)static Logger.ambiguityHandling);
  v41 = OUTLINED_FUNCTION_12_1();
  v42 = OUTLINED_FUNCTION_7_7(v41);
  v44 = v54;
  v43 = v55;
  if (v42)
  {
    v45 = (uint8_t *)OUTLINED_FUNCTION_4();
    v46 = OUTLINED_FUNCTION_4();
    v61 = v44;
    v62 = v46;
    *(_DWORD *)v45 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(v43);
    v47 = String.init<A>(describing:)();
    v61 = OUTLINED_FUNCTION_91_0(v47, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_88(&dword_1C2E0C000, v9, (os_log_type_t)v32, v53, v45);
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_3();
  }

  v62 = v44;
  __swift_instantiateConcreteTypeFromMangledName(v43);
  v49 = OUTLINED_FUNCTION_30_11();
  v51 = v50;
  outlined destroy of CamParse(v23, type metadata accessor for CamUSOParse);
  v52 = v60;
  *v60 = 1;
  v52[1] = v49;
  v52[2] = v51;
LABEL_23:
  OUTLINED_FUNCTION_0_2();
}

void protocol witness for UncertaintyPromptActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:) in conformance ExactShortcutActionEnforcer()
{
  ExactShortcutActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)();
}

void OverrideParseActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
  ExactShortcutActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)();
}

void protocol witness for UncertaintyPromptActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:) in conformance OverrideParseActionEnforcer()
{
  ExactShortcutActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)();
}

void UserEntityVocabActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, unint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  ValueMetadata *v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  os_log_type_t v72;
  uint8_t *v73;
  ValueMetadata *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83[2];
  uint64_t v84;
  void (*v85)(uint64_t, unint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  ValueMetadata *v100;
  ValueMetadata *v101;

  OUTLINED_FUNCTION_37_8();
  v5 = v4;
  v7 = v6;
  v99 = v8;
  v9 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier.NluComponent();
  v92 = *(_QWORD *)(v9 - 8);
  v93 = v9;
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_2_12();
  v91 = v11;
  MEMORY[0x1E0C80A78](v12);
  v90 = (char *)v83 - v13;
  v89 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v94 = *(_QWORD *)(v89 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_9_7();
  v88 = v15;
  v16 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v87 = *(_QWORD *)(v16 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_16_13();
  v18 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_60();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_46_3();
  v97 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v95 = *(_QWORD *)(v97 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_9_7();
  v96 = v22;
  OUTLINED_FUNCTION_42_5();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v23);
  v24 = OUTLINED_FUNCTION_47_5();
  type metadata accessor for CamUSOParse(v24);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_43_6(v26, v83[0]);
  v27 = *(_QWORD *)(v5 + *(int *)(OUTLINED_FUNCTION_20_11() + 44));
  if (!*(_QWORD *)(v27 + 16))
    goto LABEL_45;
  OUTLINED_FUNCTION_3_12();
  OUTLINED_FUNCTION_61_1();
  outlined init with copy of CamParse(v27 + v28 + v29, v3, type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    v30 = type metadata accessor for CamParse;
    v31 = v3;
LABEL_44:
    outlined destroy of CamParse(v31, v30);
    goto LABEL_45;
  }
  v32 = v98;
  outlined init with take of RankedAction(v3, v98, type metadata accessor for CamUSOParse);
  MEMORY[0x1C3BCA37C]();
  specialized Collection.first.getter();
  OUTLINED_FUNCTION_12();
  v33 = v97;
  OUTLINED_FUNCTION_7_10(v0, 1, v97);
  if (v34)
  {
    outlined destroy of CamParse(v32, type metadata accessor for CamUSOParse);
    OUTLINED_FUNCTION_78_0(v35, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_45:
    OUTLINED_FUNCTION_82_0(v99);
    goto LABEL_46;
  }
  v86 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 32))(v96, v0, v33);
  v36 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v37 = v36;
  if (!(v36 >> 62))
  {
    if (*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_9;
LABEL_41:
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  v81 = v36;
  swift_bridgeObjectRetain();
  v82 = _CocoaArrayWrapper.endIndex.getter();
  OUTLINED_FUNCTION_12();
  v37 = v81;
  if (!v82)
    goto LABEL_41;
LABEL_9:
  v38 = v37 & 0xC000000000000001;
  v39 = v37;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v37 & 0xC000000000000001) == 0, v37);
  if (v38)
    OUTLINED_FUNCTION_47_0();
  v40 = *(_QWORD *)(v39 + 32);
  OUTLINED_FUNCTION_62_1();
  OUTLINED_FUNCTION_12();
  v41 = *(_QWORD *)(OUTLINED_FUNCTION_41_7() + 16);
  swift_bridgeObjectRelease();
  if (v41 != 1)
  {
    OUTLINED_FUNCTION_12_10();
LABEL_42:
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v33);
    goto LABEL_43;
  }
  v42 = OUTLINED_FUNCTION_41_7();
  specialized Collection.first.getter(v42);
  v44 = v43;
  v46 = v45;
  swift_bridgeObjectRelease();
  if (!v44)
    goto LABEL_21;
  OUTLINED_FUNCTION_13();
  if (v46 >> 62)
  {
    swift_bridgeObjectRetain();
    v47 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_12();
  }
  else
  {
    v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v32 = v98;
  if (!v47)
  {
    OUTLINED_FUNCTION_12_10();
    OUTLINED_FUNCTION_12();
    goto LABEL_32;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v46 & 0xC000000000000001) == 0, v46);
  if ((v46 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_47_0();
  swift_retain();
  OUTLINED_FUNCTION_12();
  v48 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v48)
  {
LABEL_21:
    OUTLINED_FUNCTION_12_10();
    v32 = v98;
LABEL_32:
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v97);
LABEL_43:
    v30 = type metadata accessor for CamUSOParse;
    v31 = v32;
    goto LABEL_44;
  }
  v49 = UsoTask.verbString.getter();
  v51 = v50;
  swift_release();
  if (v49 == 0xD000000000000011 && v51 == 0x80000001C2E9B2C0)
  {
    swift_bridgeObjectRelease();
    v32 = v98;
    goto LABEL_24;
  }
  v52 = OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_12();
  v32 = v98;
  if ((v52 & 1) == 0)
  {
    OUTLINED_FUNCTION_12_10();
    goto LABEL_32;
  }
LABEL_24:
  v53 = v96;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v2, v18);
  v54 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v1, v16);
  v55 = *(_QWORD *)(v54 + 16);
  if (!v55)
  {
    OUTLINED_FUNCTION_12_10();
    OUTLINED_FUNCTION_12();
    v67 = v97;
LABEL_30:
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v53, v67);
    goto LABEL_43;
  }
  v83[1] = v40;
  v56 = v54 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
  LODWORD(v87) = *MEMORY[0x1E0D9F848];
  v57 = *(void (**)(uint64_t, unint64_t, uint64_t))(v94 + 16);
  v84 = *(_QWORD *)(v94 + 72);
  v85 = v57;
  v83[0] = v54;
  swift_bridgeObjectRetain();
  v59 = v88;
  v58 = v89;
  v61 = v90;
  v60 = v91;
  v62 = v93;
  while (1)
  {
    v85(v59, v56, v58);
    Siri_Nlu_External_UsoEntityIdentifier.sourceComponent.getter();
    v63 = v92;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v92 + 104))(v60, v87, v62);
    lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoEntityIdentifier.NluComponent and conformance Siri_Nlu_External_UsoEntityIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F850], MEMORY[0x1E0D9F858]);
    OUTLINED_FUNCTION_85_0();
    OUTLINED_FUNCTION_85_0();
    v65 = v100;
    v64 = v101;
    v66 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v66(v60, v62);
    v66((uint64_t)v61, v62);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v59, v58);
    if (v64 == v65)
      break;
    v56 += v84;
    if (!--v55)
    {
      swift_release();
      OUTLINED_FUNCTION_1_10();
      v67 = v97;
      v32 = v98;
      v53 = v96;
      goto LABEL_30;
    }
  }
  OUTLINED_FUNCTION_1_10();
  if (*(_BYTE *)(v86 + 56) != 2)
  {
    OUTLINED_FUNCTION_12_10();
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v97);
    v30 = type metadata accessor for CamUSOParse;
    v31 = v98;
    goto LABEL_44;
  }
  v68 = v97;
  v69 = v98;
  v70 = v95;
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v71 = OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_8_1(v71, (uint64_t)static Logger.ambiguityHandling);
  v72 = OUTLINED_FUNCTION_12_1();
  if (OUTLINED_FUNCTION_41_0(v72))
  {
    v73 = (uint8_t *)OUTLINED_FUNCTION_4();
    v74 = (ValueMetadata *)OUTLINED_FUNCTION_4();
    v100 = &type metadata for UserEntityVocabActionEnforcer;
    v101 = v74;
    OUTLINED_FUNCTION_70_0(4.8149e-34);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserEntityVocabActionEnforcer.Type);
    v75 = String.init<A>(describing:)();
    v100 = (ValueMetadata *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)&v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_88(&dword_1C2E0C000, v64, (os_log_type_t)v58, "%s found UserEntityVocab parse - overriding to EXECUTE_TOP_HYPOTHESIS", v73);
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_3();
  }

  v101 = &type metadata for UserEntityVocabActionEnforcer;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserEntityVocabActionEnforcer.Type);
  v77 = String.init<A>(describing:)();
  v79 = v78;
  OUTLINED_FUNCTION_12_10();
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v96, v68);
  outlined destroy of CamParse(v69, type metadata accessor for CamUSOParse);
  v80 = v99;
  *v99 = 1;
  v80[1] = v77;
  v80[2] = v79;
LABEL_46:
  OUTLINED_FUNCTION_0_2();
}

void outlined init with take of RankedAction(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_48_0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  OUTLINED_FUNCTION_1_5();
}

void outlined init with copy of CamParse(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_48_0(a1, a2, a3);
  OUTLINED_FUNCTION_34_6(v3);
  OUTLINED_FUNCTION_1_5();
}

unint64_t type metadata accessor for USOSerializedIdentifier()
{
  unint64_t result;

  result = lazy cache variable for type metadata for USOSerializedIdentifier;
  if (!lazy cache variable for type metadata for USOSerializedIdentifier)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for USOSerializedIdentifier);
  }
  return result;
}

void outlined init with copy of CamUserParse?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_34_6(v3);
  OUTLINED_FUNCTION_1_5();
}

void OUTLINED_FUNCTION_8_15(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_12_10()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_13_14()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_16_13()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_18_8()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_20_11()
{
  return type metadata accessor for CamInput();
}

uint64_t OUTLINED_FUNCTION_27_10()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_28_10(uint64_t a1)
{
  return specialized Dictionary.subscript.getter(0x746567726174, 0xE600000000000000, a1);
}

uint64_t OUTLINED_FUNCTION_29_11()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_30_11()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_32_7(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of CamParse(v2, a2);
}

uint64_t OUTLINED_FUNCTION_34_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void OUTLINED_FUNCTION_38_7(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of CamParse(v2, a2);
}

void OUTLINED_FUNCTION_39_2(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_40_6(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_41_7()
{
  return UsoTask.arguments.getter();
}

uint64_t OUTLINED_FUNCTION_42_5()
{
  return type metadata accessor for CamParse(0);
}

void OUTLINED_FUNCTION_43_6(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_44_4(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_45_6(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_46_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_47_5()
{
  return 0;
}

void OUTLINED_FUNCTION_49_3()
{
  _QWORD *v0;

  *v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
}

uint64_t OUTLINED_FUNCTION_50_3()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_53_3()
{
  uint64_t v0;

  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t OUTLINED_FUNCTION_55_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_56_3()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_57_3()
{
  return UsoTask.verbString.getter();
}

uint64_t OUTLINED_FUNCTION_58_2()
{
  return UsoTask.baseEntityAsString.getter();
}

uint64_t OUTLINED_FUNCTION_59(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

uint64_t OUTLINED_FUNCTION_62_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_64_1(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = 1;
  v2[1] = result;
  v2[2] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_67_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_68_0()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_69_1()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_70_0(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_72_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  return UsoEntity.attributes.getter();
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

id OUTLINED_FUNCTION_76_0(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 + 56) + 8 * a1);
}

void OUTLINED_FUNCTION_78_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of RRDataSourceMetadataValue?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_79_0()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_82_0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t OUTLINED_FUNCTION_83_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_85_0()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t OUTLINED_FUNCTION_86_0(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_87_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_88_0()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_89_0()
{
  return swift_dynamicCastObjCClass();
}

uint64_t OUTLINED_FUNCTION_91_0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t OUTLINED_FUNCTION_92_0()
{
  return swift_release();
}

void specialized RawRepresentable<>.hashValue.getter(uint64_t a1)
{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

void specialized RawRepresentable<>.hashValue.getter(unsigned __int8 a1)
{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(_QWORD))MEMORY[0x1E0DEDF10]);
}

{
  OUTLINED_FUNCTION_4_19();
  RankedAction.CodingKeys.rawValue.getter(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(_QWORD))MEMORY[0x1E0DEDF30]);
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  specialized RawRepresentable<>._rawHashValue(seed:)(0, a1);
}

{
  OUTLINED_FUNCTION_4_19();
  Hasher._combine(_:)(qword_1C2E96FA8[a1]);
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(0, a1);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(0, a1);
}

void specialized RawRepresentable<>.hashValue.getter(uint64_t a1, void (*a2)(_BYTE *, uint64_t))
{
  _BYTE v4[72];

  OUTLINED_FUNCTION_4_19();
  a2(v4, a1);
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

void specialized RawRepresentable<>.hashValue.getter(unsigned __int8 a1, void (*a2)(_QWORD))
{
  OUTLINED_FUNCTION_4_19();
  a2(a1);
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

void specialized RawRepresentable<>.hashValue.getter()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t CamUSOParse.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  int *v10;
  int v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  Swift::String v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_25_8();
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  v19 = 0xD000000000000017;
  v20 = 0x80000001C2E9B330;
  v3 = (int *)OUTLINED_FUNCTION_16_2();
  v4 = (_QWORD *)(v0 + v3[6]);
  v5 = v4[1];
  v23[0] = *v4;
  v23[1] = v5;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001C2E9B350;
  v7._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v7);
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v0 + v3[5], v1);
  v8._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 11305;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v19 = 0;
  v20 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  strcpy((char *)v23, "groupIndex: ");
  BYTE5(v23[1]) = 0;
  HIWORD(v23[1]) = -5120;
  v10 = (int *)(v0 + v3[7]);
  v11 = *v10;
  LOBYTE(v10) = *((_BYTE *)v10 + 4);
  LODWORD(v19) = v11;
  BYTE4(v19) = (_BYTE)v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  v12._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  OUTLINED_FUNCTION_1_0();
  v13._countAndFlagsBits = 0x615072657375202CLL;
  v13._object = (void *)0xED0000203A657372;
  String.append(_:)(v13);
  type metadata accessor for SiriNLUTypesPrintUtils();
  v14 = OUTLINED_FUNCTION_12_11();
  v21 = v14;
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F340], MEMORY[0x1E0D9F2E0]);
  v22 = v15;
  v16 = __swift_allocate_boxed_opaque_existential_1(&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v16, v0, v14);
  static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  OUTLINED_FUNCTION_25_11();
  OUTLINED_FUNCTION_1_0();
  v17._countAndFlagsBits = 41;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v19 = 0xD000000000000017;
  v20 = 0x80000001C2E9B330;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_25_11();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_0();
  return v19;
}

uint64_t type metadata accessor for CamUSOParse(uint64_t a1)
{
  return type metadata accessor for CamRequest(a1, (uint64_t *)&type metadata singleton initialization cache for CamUSOParse);
}

uint64_t CamUSOParse.init(userParse:parserIdentifier:appBundleId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;

  v10 = (int *)OUTLINED_FUNCTION_16_2();
  outlined init with take of Siri_Nlu_External_Parser.ParserIdentifier?(a2, a5 + v10[5]);
  v11 = OUTLINED_FUNCTION_12_11();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a5, a1, v11);
  v13 = (_QWORD *)(a5 + v10[6]);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5 + v10[7];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  return result;
}

uint64_t outlined init with take of Siri_Nlu_External_Parser.ParserIdentifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t CamUSOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;

  v12 = (int *)OUTLINED_FUNCTION_16_2();
  outlined init with take of Siri_Nlu_External_Parser.ParserIdentifier?(a2, a6 + v12[5]);
  v13 = OUTLINED_FUNCTION_12_11();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a6, a1, v13);
  v15 = (_QWORD *)(a6 + v12[6]);
  *v15 = a3;
  v15[1] = a4;
  v16 = a6 + v12[7];
  *(_DWORD *)v16 = a5;
  *(_BYTE *)(v16 + 4) = BYTE4(a5) & 1;
  return result;
}

uint64_t CamUSOParse.userParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_12_11();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CamUSOParse.parserIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_16_2() + 20);
  return outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v3, a1);
}

uint64_t CamUSOParse.appBundleId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_16_2() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t CamUSOParse.groupIndex.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(OUTLINED_FUNCTION_16_2() + 28));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

unint64_t CamUSOParse.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CamUSOParse.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t CamUSOParse.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2E64A94 + 4 * byte_1C2E967A0[a1]))(0x7372615072657375, 0xE900000000000065);
}

unint64_t sub_1C2E64A94()
{
  return 0xD000000000000010;
}

uint64_t sub_1C2E64AB0()
{
  return 0x6C646E7542707061;
}

uint64_t sub_1C2E64AD0()
{
  return 0x646E4970756F7267;
}

uint64_t CamUSOParse.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2E64B24 + 4 * byte_1C2E967A4[a1]))(0x7372615072657375, 0xE900000000000065);
}

unint64_t sub_1C2E64B24()
{
  return 0xD000000000000010;
}

uint64_t sub_1C2E64B40()
{
  return 0x6C646E7542707061;
}

uint64_t sub_1C2E64B60()
{
  return 0x646E4970756F7267;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance CamUSOParse.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance CamUSOParse.CodingKeys()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0, (void (*)(_BYTE *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

void protocol witness for Hashable.hash(into:) in conformance CamUSOParse.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CamUSOParse.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CamUSOParse.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = CamUSOParse.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CamUSOParse.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = CamUSOParse.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CamUSOParse.CodingKeys()
{
  unsigned __int8 *v0;

  return CamUSOParse.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamUSOParse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CamUSOParse.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamUSOParse.CodingKeys()
{
  lazy protocol witness table accessor for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamUSOParse.CodingKeys()
{
  lazy protocol witness table accessor for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void CamUSOParse.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_9_7();
  v15 = v5;
  v16 = type metadata accessor for JSONEncodingOptions();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_21_13();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamUSOParse.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_6_13();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  JSONEncodingOptions.init()();
  type metadata accessor for Siri_Nlu_External_UserParse();
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F340], MEMORY[0x1E0D9F2E0]);
  Message.jsonString(options:)();
  if (v17)
  {
    OUTLINED_FUNCTION_19_11();
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  }
  else
  {
    v14 = v2;
    OUTLINED_FUNCTION_19_11();
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    v9 = type metadata accessor for CamUSOParse(0);
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v14 + *(int *)(v9 + 20), v15);
    v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload(v15, 1, v10) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v15, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    }
    else
    {
      MEMORY[0x1C3BCA34C]();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v15, v10);
    }
    OUTLINED_FUNCTION_27_0();
    OUTLINED_FUNCTION_18_9(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, v11, MEMORY[0x1E0DEB420]);
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_27_0();
    OUTLINED_FUNCTION_18_9(&lazy protocol witness table cache variable for type String? and conformance <A> A?, v12, MEMORY[0x1E0DEA970]);
    OUTLINED_FUNCTION_0_26();
    OUTLINED_FUNCTION_27_0();
    OUTLINED_FUNCTION_18_9(&lazy protocol witness table cache variable for type UInt32? and conformance <A> A?, v13, MEMORY[0x1E0DEE100]);
    OUTLINED_FUNCTION_0_26();
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  }
  OUTLINED_FUNCTION_1_11(v8);
  OUTLINED_FUNCTION_4_9();
}

unint64_t lazy protocol witness table accessor for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamUSOParse.CodingKeys, &unk_1E7CC2ED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamUSOParse.CodingKeys, &unk_1E7CC2ED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamUSOParse.CodingKeys, &unk_1E7CC2ED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamUSOParse.CodingKeys, &unk_1E7CC2ED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3;
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEE988], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static CamUSOParse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  _DWORD *v40;
  char v41;
  _DWORD *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v5 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_4_5();
  v9 = v8 - v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_6_13();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_1_1();
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v44 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v44 - v19;
  if ((static Siri_Nlu_External_UserParse.== infix(_:_:)() & 1) == 0)
    return 0;
  v21 = OUTLINED_FUNCTION_16_2();
  v45 = a2;
  v22 = v21;
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(a1 + *(int *)(v21 + 20), (uint64_t)v20);
  v44 = v22;
  v23 = *(int *)(v22 + 20);
  v24 = v45;
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v45 + v23, (uint64_t)v18);
  v25 = v2 + *(int *)(v10 + 48);
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?((uint64_t)v20, v2);
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?((uint64_t)v18, v25);
  OUTLINED_FUNCTION_17_11(v2);
  if (v26)
  {
    OUTLINED_FUNCTION_14_11((uint64_t)v18);
    OUTLINED_FUNCTION_14_11((uint64_t)v20);
    OUTLINED_FUNCTION_17_11(v25);
    if (v26)
    {
      outlined destroy of RRDataSourceMetadataValue?(v2, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      goto LABEL_12;
    }
LABEL_10:
    outlined destroy of RRDataSourceMetadataValue?(v2, (uint64_t *)&demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
    return 0;
  }
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v2, (uint64_t)v15);
  OUTLINED_FUNCTION_17_11(v25);
  if (v26)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v18, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v20, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v25, v5);
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F170]);
  v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  v28 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v28(v9, v5);
  OUTLINED_FUNCTION_14_11((uint64_t)v18);
  OUTLINED_FUNCTION_14_11((uint64_t)v20);
  v28((uint64_t)v15, v5);
  OUTLINED_FUNCTION_14_11(v2);
  if ((v27 & 1) == 0)
    return 0;
LABEL_12:
  v29 = v24;
  v30 = v44;
  v31 = *(int *)(v44 + 24);
  v32 = (_QWORD *)(a1 + v31);
  v33 = *(_QWORD *)(a1 + v31 + 8);
  v34 = (_QWORD *)(v29 + v31);
  v35 = v34[1];
  if (!v33)
  {
    if (!v35)
      goto LABEL_21;
    return 0;
  }
  if (!v35)
    return 0;
  v36 = *v32 == *v34 && v33 == v35;
  if (v36 || (v37 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v37 & 1) != 0))
  {
LABEL_21:
    v39 = *(int *)(v30 + 28);
    v40 = (_DWORD *)(a1 + v39);
    v41 = *(_BYTE *)(a1 + v39 + 4);
    v42 = (_DWORD *)(v45 + v39);
    v43 = *(_BYTE *)(v45 + v39 + 4);
    if ((v41 & 1) != 0)
    {
      if ((v43 & 1) == 0)
        return 0;
    }
    else
    {
      if (*v40 != *v42)
        v43 = 1;
      if ((v43 & 1) != 0)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t CamParse.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 7304053 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x655273656D6D6F70 && a2 == 0xEE0065736E6F7073;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x7974706D65 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t CamParse.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 7304053;
  if (a1 == 1)
    return 0x655273656D6D6F70;
  return 0x7974706D65;
}

uint64_t CamParse.EmptyCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t CamParse.EmptyCodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t static CamParse.UsoCodingKeys.== infix(_:_:)()
{
  return 1;
}

void CamParse.UsoCodingKeys.hash(into:)()
{
  Hasher._combine(_:)(0);
}

uint64_t CamParse.PommesResponseCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void CamParse.PommesResponseCodingKeys.hashValue.getter()
{
  OUTLINED_FUNCTION_4_19();
  OUTLINED_FUNCTION_24_10();
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

uint64_t CamParse.UsoCodingKeys.stringValue.getter()
{
  return 12383;
}

void protocol witness for Encodable.encode(to:) in conformance CamUSOParse(_QWORD *a1)
{
  CamUSOParse.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CamParse.CodingKeys()
{
  char *v0;

  return CamParse.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamParse.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CamParse.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamParse.CodingKeys()
{
  lazy protocol witness table accessor for type CamParse.CodingKeys and conformance CamParse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamParse.CodingKeys()
{
  lazy protocol witness table accessor for type CamParse.CodingKeys and conformance CamParse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamParse.EmptyCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CamParse.EmptyCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamParse.EmptyCodingKeys()
{
  lazy protocol witness table accessor for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamParse.EmptyCodingKeys()
{
  lazy protocol witness table accessor for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance CamParse.PommesResponseCodingKeys()
{
  CamParse.PommesResponseCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamParse.PommesResponseCodingKeys()
{
  lazy protocol witness table accessor for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamParse.PommesResponseCodingKeys()
{
  lazy protocol witness table accessor for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CamParse.PommesResponseCodingKeys()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_24_10();
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamParse.UsoCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CamParse.PommesResponseCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CamParse.UsoCodingKeys()
{
  return MLMultiArray.MLMultiArrayCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CamParse.UsoCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static CamParse.UsoCodingKeys.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamParse.UsoCodingKeys()
{
  lazy protocol witness table accessor for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamParse.UsoCodingKeys()
{
  lazy protocol witness table accessor for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys();
  return CodingKey.debugDescription.getter();
}

void CamParse.encode(to:)(_QWORD *a1)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamParse.EmptyCodingKeys>);
  v24 = *(_QWORD *)(v3 - 8);
  v25 = v3;
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_9_7();
  v22 = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamParse.PommesResponseCodingKeys>);
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_9_7();
  v26 = v8;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamParse.UsoCodingKeys>);
  v21 = *(_QWORD *)(v23 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_4_5();
  v12 = v11 - v10;
  type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_4_5();
  v16 = v15 - v14;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_21_13();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamParse.CodingKeys>);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_25_8();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CamParse.CodingKeys and conformance CamParse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of CamParse(v29, (uint64_t)v1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v20 = *v1;
      lazy protocol witness table accessor for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys();
      OUTLINED_FUNCTION_7_14();
      type metadata accessor for PommesResponse();
      lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type PommesResponse and conformance PommesResponse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D98C70], (uint64_t)&protocol conformance descriptor for PommesResponse);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
      OUTLINED_FUNCTION_3_20();

    }
    else
    {
      lazy protocol witness table accessor for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys();
      OUTLINED_FUNCTION_7_14();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v25);
      OUTLINED_FUNCTION_3_20();
    }
  }
  else
  {
    outlined init with take of CamUSOParse((uint64_t)v1, v16);
    lazy protocol witness table accessor for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys();
    OUTLINED_FUNCTION_7_14();
    lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type CamUSOParse and conformance CamUSOParse, type metadata accessor for CamUSOParse, (uint64_t)&protocol conformance descriptor for CamUSOParse);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v12, v23);
    outlined destroy of CamParse(v16, type metadata accessor for CamUSOParse);
    OUTLINED_FUNCTION_3_20();
  }
  OUTLINED_FUNCTION_4_9();
}

uint64_t type metadata accessor for CamParse(uint64_t a1)
{
  return type metadata accessor for CamRequest(a1, (uint64_t *)&type metadata singleton initialization cache for CamParse);
}

unint64_t lazy protocol witness table accessor for type CamParse.CodingKeys and conformance CamParse.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.CodingKeys, &unk_1E7CC2D00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.CodingKeys, &unk_1E7CC2D00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.CodingKeys, &unk_1E7CC2D00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.CodingKeys, &unk_1E7CC2D00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.EmptyCodingKeys, &unk_1E7CC2E40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.EmptyCodingKeys, &unk_1E7CC2E40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.EmptyCodingKeys, &unk_1E7CC2E40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.PommesResponseCodingKeys, &unk_1E7CC2E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.PommesResponseCodingKeys, &unk_1E7CC2E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.PommesResponseCodingKeys, &unk_1E7CC2E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.PommesResponseCodingKeys, &unk_1E7CC2E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.UsoCodingKeys, &unk_1E7CC2D90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.UsoCodingKeys, &unk_1E7CC2D90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.UsoCodingKeys, &unk_1E7CC2D90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamParse.UsoCodingKeys, &unk_1E7CC2D90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys);
  }
  return result;
}

unint64_t PommesResponse.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PommesResponse.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t PommesResponse.CodingKeys.rawValue.getter(char a1)
{
  uint64_t result;

  result = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1)
      return 0x6E6F437972657571;
    else
      return 0xD000000000000012;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance CamParse(_QWORD *a1)
{
  CamParse.encode(to:)(a1);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PommesResponse.CodingKeys()
{
  specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance PommesResponse.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PommesResponse.CodingKeys(uint64_t a1)
{
  char *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PommesResponse.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PommesResponse.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = PommesResponse.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PommesResponse.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = PommesResponse.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PommesResponse.CodingKeys()
{
  char *v0;

  return PommesResponse.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesResponse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = PommesResponse.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesResponse.CodingKeys()
{
  lazy protocol witness table accessor for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesResponse.CodingKeys()
{
  lazy protocol witness table accessor for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PommesResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesResponse.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_6_13();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  dispatch thunk of PommesResponse.primaryPluginIdentifier()();
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_18_9(&lazy protocol witness table cache variable for type String? and conformance <A> A?, v5, MEMORY[0x1E0DEA970]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  OUTLINED_FUNCTION_24();
  if (!v1)
  {
    PommesResponse.metadataDomainName.getter();
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_24();
    dispatch thunk of PommesResponse.primaryQueryConfidence()();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return OUTLINED_FUNCTION_1_11(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
}

unint64_t lazy protocol witness table accessor for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for PommesResponse.CodingKeys, &unk_1E7CC2C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for PommesResponse.CodingKeys, &unk_1E7CC2C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for PommesResponse.CodingKeys, &unk_1E7CC2C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for PommesResponse.CodingKeys, &unk_1E7CC2C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PommesResponse(_QWORD *a1)
{
  return PommesResponse.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for CamUSOParse(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (char *)a1 + v15;
    v20 = (char *)a2 + v15;
    v19[4] = v20[4];
    *(_DWORD *)v19 = *(_DWORD *)v20;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CamUSOParse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (!__swift_getEnumTagSinglePayload(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CamUSOParse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a1 + v13;
  v18 = a2 + v13;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CamUSOParse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;

  v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = a3[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = (int *)(a2 + v18);
  v21 = *v20;
  *(_BYTE *)(v19 + 4) = *((_BYTE *)v20 + 4);
  *(_DWORD *)v19 = v21;
  return a1;
}

uint64_t initializeWithTake for CamUSOParse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  return a1;
}

uint64_t assignWithTake for CamUSOParse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = a3[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CamUSOParse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E66698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  int v12;

  v6 = OUTLINED_FUNCTION_12_11();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v9;
    v8 = a1 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  v12 = v11 - 1;
  if (v12 < 0)
    v12 = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for CamUSOParse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E66754(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = OUTLINED_FUNCTION_12_11();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
    return __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a1 + *(int *)(a4 + 20);
    return __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

void type metadata completion function for CamUSOParse()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Siri_Nlu_External_UserParse();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?)
  {
    type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  }
}

char *initializeBufferWithCopyOfBuffer for CamParse(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v15[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v16 = *a2;
      *(_QWORD *)a1 = *a2;
      v17 = v16;
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v8 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = (int *)type metadata accessor for CamUSOParse(0);
      v10 = v9[5];
      v11 = &a1[v10];
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      }
      v18 = v9[6];
      v19 = &a1[v18];
      v20 = (char **)((char *)a2 + v18);
      v21 = v20[1];
      *(_QWORD *)v19 = *v20;
      *((_QWORD *)v19 + 1) = v21;
      v22 = v9[7];
      v23 = &a1[v22];
      v24 = (char *)a2 + v22;
      v23[4] = v24[4];
      *(_DWORD *)v23 = *(_DWORD *)v24;
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

void destroy for CamParse(id *a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {

  }
  else if (!EnumCaseMultiPayload)
  {
    v3 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = (uint64_t)a1 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    v5 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    swift_bridgeObjectRelease();
  }
}

void **initializeWithCopy for CamParse(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v14 = *a2;
    *a1 = *a2;
    v15 = v14;
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for CamUSOParse(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
    v16 = v8[6];
    v17 = (void **)((char *)a1 + v16);
    v18 = (void **)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = v8[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v21[4] = v22[4];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void **assignWithCopy for CamParse(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;

  if (a1 != a2)
  {
    outlined destroy of CamParse((uint64_t)a1, type metadata accessor for CamParse);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v14 = *a2;
      *a1 = *a2;
      v15 = v14;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = (int *)type metadata accessor for CamUSOParse(0);
      v9 = v8[5];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      }
      v16 = v8[6];
      v17 = (void **)((char *)a1 + v16);
      v18 = (void **)((char *)a2 + v16);
      *v17 = *v18;
      v17[1] = v18[1];
      v19 = v8[7];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = *(_DWORD *)v21;
      v20[4] = v21[4];
      *(_DWORD *)v20 = v22;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for CamParse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = (int *)type metadata accessor for CamUSOParse(0);
    v8 = v7[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
    v13 = v7[7];
    v14 = &a1[v13];
    v15 = &a2[v13];
    v14[4] = v15[4];
    *(_DWORD *)v14 = *(_DWORD *)v15;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for CamParse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  if (a1 != a2)
  {
    outlined destroy of CamParse((uint64_t)a1, type metadata accessor for CamParse);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = (int *)type metadata accessor for CamUSOParse(0);
      v8 = v7[5];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
        __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
      }
      *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
      v13 = v7[7];
      v14 = &a1[v13];
      v15 = &a2[v13];
      v14[4] = v15[4];
      *(_DWORD *)v14 = *(_DWORD *)v15;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for CamParse()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CamUSOParse(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *type metadata accessor for PommesResponse.CodingKeys()
{
  return &unk_1E7CC2C70;
}

uint64_t storeEnumTagSinglePayload for PommesResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2E671D4 + 4 * byte_1C2E967AD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2E67208 + 4 * byte_1C2E967A8[v4]))();
}

uint64_t sub_1C2E67208(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E67210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E67218);
  return result;
}

uint64_t sub_1C2E67224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E6722CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2E67230(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E67238(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CamParse.CodingKeys()
{
  return &unk_1E7CC2D00;
}

void *type metadata accessor for CamParse.UsoCodingKeys()
{
  return &unk_1E7CC2D90;
}

uint64_t getEnumTagSinglePayload for CamParse.UsoCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CamParse.UsoCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C2E67300 + 4 * byte_1C2E967B2[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C2E67320 + 4 * byte_1C2E967B7[v4]))();
}

_BYTE *sub_1C2E67300(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C2E67320(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2E67328(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2E67330(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2E67338(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2E67340(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for CamParse.PommesResponseCodingKeys()
{
  return &unk_1E7CC2E20;
}

void *type metadata accessor for CamParse.EmptyCodingKeys()
{
  return &unk_1E7CC2E40;
}

uint64_t storeEnumTagSinglePayload for CamUSOParse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C2E673B8 + 4 * byte_1C2E967C1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C2E673EC + 4 * byte_1C2E967BC[v4]))();
}

uint64_t sub_1C2E673EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E673F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E673FCLL);
  return result;
}

uint64_t sub_1C2E67408(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E67410);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C2E67414(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E6741C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CamUSOParse.CodingKeys()
{
  return &unk_1E7CC2ED0;
}

uint64_t OUTLINED_FUNCTION_0_26()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_3_20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_4_19()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_7_14()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

Swift::Int OUTLINED_FUNCTION_11_9()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_12_11()
{
  return type metadata accessor for Siri_Nlu_External_UserParse();
}

void OUTLINED_FUNCTION_14_11(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of RRDataSourceMetadataValue?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_17_11(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_18_9(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return lazy protocol witness table accessor for type Int? and conformance <A> A?(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_19_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 112));
}

void OUTLINED_FUNCTION_24_10()
{
  Hasher._combine(_:)(0);
}

void OUTLINED_FUNCTION_25_11()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t UseCloudThreshold.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UseCloudThreshold()
{
  return objc_opt_self();
}

void CamRequestContext.init(siriLocale:renderDeviceIdiom:requestIsDictation:)(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a2;
  v8 = OUTLINED_FUNCTION_20_2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  v9 = type metadata accessor for CamRequestContext();
  *(_BYTE *)(a4 + *(int *)(v9 + 20)) = v7;
  *(_BYTE *)(a4 + *(int *)(v9 + 24)) = a3;
  OUTLINED_FUNCTION_31();
}

uint64_t type metadata accessor for CamRequestContext()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CamRequestContext;
  if (!type metadata singleton initialization cache for CamRequestContext)
    return swift_getSingletonMetadata();
  return result;
}

SiriCam::DeviceIdiom_optional __swiftcall DeviceIdiom.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  char v6;
  SiriCam::DeviceIdiom_optional result;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DeviceIdiom.init(rawValue:), v3);
  swift_bridgeObjectRelease();
  v6 = 9;
  if (v5 < 9)
    v6 = v5;
  *v4 = v6;
  OUTLINED_FUNCTION_31();
  return result;
}

uint64_t DeviceIdiom.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2E67ABC + 4 * byte_1C2E97100[*v0]))(7496035, 0xE300000000000000);
}

uint64_t sub_1C2E67ABC()
{
  return 0x646F70656D6F68;
}

uint64_t sub_1C2E67AD4()
{
  return 6513005;
}

uint64_t sub_1C2E67AE0()
{
  return 6578544;
}

uint64_t sub_1C2E67AEC()
{
  return 6582128;
}

uint64_t sub_1C2E67AFC()
{
  return 0x656E6F6870;
}

uint64_t sub_1C2E67B10()
{
  return 0x6863746177;
}

uint64_t sub_1C2E67B24()
{
  return 30324;
}

uint64_t sub_1C2E67B30()
{
  return 0x6E776F6E6B6E75;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance DeviceIdiom(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t lazy protocol witness table accessor for type DeviceIdiom and conformance DeviceIdiom()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom;
  if (!lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for DeviceIdiom, &type metadata for DeviceIdiom);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom;
  if (!lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom)
  {
    v1 = type metadata accessor for DeviceIdiom();
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DA7CB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom);
  }
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance DeviceIdiom()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance DeviceIdiom(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance DeviceIdiom(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::DeviceIdiom_optional protocol witness for RawRepresentable.init(rawValue:) in conformance DeviceIdiom(Swift::String *a1)
{
  return DeviceIdiom.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DeviceIdiom@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DeviceIdiom.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CamRequestContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Locale();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }
  return a1;
}

uint64_t destroy for CamRequestContext(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for CamRequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithCopy for CamRequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for CamRequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for CamRequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CamRequestContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E67E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v8;

  v6 = OUTLINED_FUNCTION_20_2();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v8 >= 2)
    return ((v8 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CamRequestContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C2E67ED0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_20_2();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
    OUTLINED_FUNCTION_31();
  }
}

uint64_t type metadata completion function for CamRequestContext()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceIdiom(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 8) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v5 = v6 - 9;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceIdiom(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1C2E68088 + 4 * byte_1C2E9710E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1C2E680BC + 4 * byte_1C2E97109[v4]))();
}

uint64_t sub_1C2E680BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E680C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E680CCLL);
  return result;
}

uint64_t sub_1C2E680D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E680E0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1C2E680E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E680EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceIdiom()
{
  return &type metadata for DeviceIdiom;
}

uint64_t dispatch thunk of SiriSignalsContaining.get(from:query:defaultVal:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11SiriSignals15SignalProviding_pG_SSs5NeverOTg503_s7d7Cam0A16e54ContainerC3get4from5query10defaultValSDySSSiGSay0aC015fG74_pG_SSSitKFSSAiJ_pcfu_33_1ec30c1e3c34803c076ffb86173186a4AiJ_pSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v13;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v5);
      v7 = MEMORY[0x1C3BCA190](v5, v6);
      v9 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v10 = *(_QWORD *)(v13 + 16);
      if (v10 >= *(_QWORD *)(v13 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v9;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11SiriSignals15SignalProviding_pG_SSs5NeverOTg503_s7d7Cam0A16e54ContainerC3get4from5query10defaultValSDySSSiGSay0aC015fG75_pG_SSSitKFSSAiJ_pcfu0_33_2f9d014dde3806f51ad5602c3b2cd65fAiJ_pSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v11;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      __swift_project_boxed_opaque_existential_1(v4, v4[3]);
      v5 = dispatch thunk of AppSelectionSignalComponent.name.getter();
      v7 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v8 = *(_QWORD *)(v11 + 16);
      if (v8 >= *(_QWORD *)(v11 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v5;
      *(_QWORD *)(v9 + 40) = v7;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[5];
  int64_t v48;

  v40 = a3;
  v41 = a5;
  v42 = a2;
  v43 = a4;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SignalValue));
  v7 = MEMORY[0x1E0C80A78](v39);
  v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - v10;
  specialized _NativeDictionary.makeIterator()(v47, a1);
  v12 = v47[0];
  v48 = v47[3];
  v13 = v47[4];
  v37 = v47[1];
  v38 = (unint64_t)(v47[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  v36 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v48 << 6);
      goto LABEL_15;
    }
    v16 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v16 >= v38)
      goto LABEL_29;
    v17 = *(_QWORD *)(v37 + 8 * v16);
    if (!v17)
    {
      v18 = v48 + 2;
      if (v48 + 2 >= v38)
        goto LABEL_29;
      v17 = *(_QWORD *)(v37 + 8 * v18);
      if (v17)
        goto LABEL_13;
      v18 = v48 + 3;
      if (v48 + 3 >= v38)
        goto LABEL_29;
      v17 = *(_QWORD *)(v37 + 8 * v18);
      if (v17)
        goto LABEL_13;
      v18 = v48 + 4;
      if (v48 + 4 >= v38)
        goto LABEL_29;
      v17 = *(_QWORD *)(v37 + 8 * v18);
      if (v17)
      {
LABEL_13:
        v16 = v18;
      }
      else
      {
        v16 = v48 + 5;
        if (v48 + 5 >= v38)
          goto LABEL_29;
        v17 = *(_QWORD *)(v37 + 8 * v16);
        if (!v17)
        {
          v31 = v48 + 6;
          while (v31 < v38)
          {
            v17 = *(_QWORD *)(v37 + 8 * v31++);
            if (v17)
            {
              v16 = v31 - 1;
              goto LABEL_14;
            }
          }
LABEL_29:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
LABEL_14:
    v13 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v48 = v16;
LABEL_15:
    v19 = *(_QWORD *)(v12 + 56);
    v20 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v15);
    v22 = *v20;
    v21 = v20[1];
    v23 = type metadata accessor for SignalValue();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(&v11[*(int *)(v39 + 48)], v19 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v15, v23);
    *(_QWORD *)v11 = v22;
    *((_QWORD *)v11 + 1) = v21;
    outlined init with take of (key: String, value: SignalValue)((uint64_t)v11, (uint64_t)v9);
    swift_bridgeObjectRetain();
    closure #1 in SiriSignalsContainer.get(from:query:defaultVal:)(v9, v42, v40, v43, v41, &v44);
    if (v5)
    {
      outlined destroy of (key: String, value: SignalValue)((uint64_t)v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    outlined destroy of (key: String, value: SignalValue)((uint64_t)v9);
    v24 = v45;
    if (v45)
    {
      v25 = v44;
      v26 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v36 = v32;
      }
      v27 = *(_QWORD *)(v36 + 16);
      v28 = v27 + 1;
      if (v27 >= *(_QWORD *)(v36 + 24) >> 1)
      {
        v35 = v27 + 1;
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v28 = v35;
        v36 = v33;
      }
      v29 = v36;
      *(_QWORD *)(v36 + 16) = v28;
      v30 = (_QWORD *)(v29 + 24 * v27);
      v30[4] = v25;
      v30[5] = v24;
      v30[6] = v26;
    }
  }
  __break(1u);
}

void specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, MLFeatureValue>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

void specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    v4 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9E0];
  }
  v6 = v4;
  v5 = swift_bridgeObjectRetain();
  a3(v5, 1, &v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_12();
}

void static ActionRoutingSiriSignals.all()()
{
  static TimeSinceAppLastInstalledSignal.instances()();
  static TimeSinceAppLastLaunchedSignal.instances()();
  OUTLINED_FUNCTION_0_27();
  type metadata accessor for AppLaunchCountSignal();
  MEMORY[0x1C3BCA1D8]();
  OUTLINED_FUNCTION_0_27();
  MEMORY[0x1C3BCA25C]();
  OUTLINED_FUNCTION_0_27();
  MEMORY[0x1C3BCA2A4]();
  OUTLINED_FUNCTION_0_27();
  MEMORY[0x1C3BCA280]();
  OUTLINED_FUNCTION_0_27();
  MEMORY[0x1C3BCA2B0]();
  OUTLINED_FUNCTION_0_27();
  MEMORY[0x1C3BCA274]();
  MEMORY[0x1C3BCA268]();
  OUTLINED_FUNCTION_0_27();
  OUTLINED_FUNCTION_5_15();
  MEMORY[0x1C3BCA298]();
  MEMORY[0x1C3BCA28C]();
  OUTLINED_FUNCTION_0_27();
  OUTLINED_FUNCTION_5_15();
  OUTLINED_FUNCTION_5_12();
}

Swift::Void __swiftcall SiriSignalsContainer.refreshSignals()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  static ActionRoutingSiriSignals.all()();
  v2 = v1;
  v18 = v0;
  v3 = one-time initialization token for ranker;
  OUTLINED_FUNCTION_50_1();
  if (v3 != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.ranker);
  OUTLINED_FUNCTION_50_1();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)OUTLINED_FUNCTION_4();
    v19[0] = OUTLINED_FUNCTION_4();
    *(_DWORD *)v7 = 136315138;
    type metadata accessor for SignalValue();
    OUTLINED_FUNCTION_50_1();
    v8 = Dictionary.description.getter();
    v10 = v9;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_22_0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2E0C000, v5, v6, "SignalContainer.refresh() called %s", v7, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_22_0();
  specialized _arrayForceCast<A, B>(_:)(v2);
  swift_bridgeObjectRelease();
  type metadata accessor for SignalGatherer();
  swift_allocObject();
  SignalGatherer.init(signals:candidateAppBundleIds:)();
  v11 = swift_allocObject();
  type metadata accessor for SignalValue();
  *(_QWORD *)(v11 + 16) = Dictionary.init(dictionaryLiteral:)();
  swift_retain();
  dispatch thunk of SignalGatherer.gatherValuesAndTimings(completion:)();
  swift_release();
  swift_retain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)OUTLINED_FUNCTION_4();
    v19[0] = OUTLINED_FUNCTION_4();
    *(_DWORD *)v14 = 136315138;
    OUTLINED_FUNCTION_2_26();
    OUTLINED_FUNCTION_50_1();
    v15 = Dictionary.description.getter();
    v17 = v16;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_8_16();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2E0C000, v12, v13, "SignalContainer.refresh() finished %s", v14, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  swift_release();
  OUTLINED_FUNCTION_8_16();
  OUTLINED_FUNCTION_2_26();
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in SiriSignalsContainer.refreshSignals()(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  _QWORD v38[2];
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42[3];

  v40 = a2;
  v3 = type metadata accessor for SignalGatherer.ValuesWithTimings();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SignalGathererError();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v39 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v38 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v38 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(a1, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v18, v7);
    if (one-time initialization token for ranker != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.ranker);
    v20 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v20(v13, v15, v7);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v40 = v15;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc();
      v42[0] = v25;
      *(_DWORD *)v24 = 136315138;
      v38[1] = v24 + 4;
      v20(v39, v13, v7);
      v26 = String.init<A>(describing:)();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v28 = *(void (**)(char *, uint64_t))(v8 + 8);
      v28(v13, v7);
      _os_log_impl(&dword_1C2E0C000, v21, v22, "Signal gatherer error, setting signalValues to nil: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v25, -1, -1);
      MEMORY[0x1C3BCB4A4](v24, -1, -1);

      return ((uint64_t (*)(char *, uint64_t))v28)(v40, v7);
    }
    else
    {

      v37 = *(void (**)(char *, uint64_t))(v8 + 8);
      v37(v13, v7);
      return ((uint64_t (*)(char *, uint64_t))v37)(v15, v7);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v18, v3);
    v30 = v3;
    if (one-time initialization token for ranker != -1)
      swift_once();
    v31 = (uint64_t *)(v40 + 16);
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.ranker);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1C2E0C000, v33, v34, "Successfully gathered all signals", v35, 2u);
      MEMORY[0x1C3BCB4A4](v35, -1, -1);
    }

    v36 = SignalGatherer.ValuesWithTimings.values.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v30);
    swift_beginAccess();
    *v31 = v36;
    return swift_bridgeObjectRelease();
  }
}

unint64_t SiriSignalsContainer.get(from:query:defaultVal:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;

  if (!*(_QWORD *)(*(_QWORD *)(v4 + 16) + 16))
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v21 = 0xD000000000000050;
    v20 = 0x80000001C2E9B410;
    goto LABEL_5;
  }
  v10 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11SiriSignals15SignalProviding_pG_SSs5NeverOTg503_s7d7Cam0A16e54ContainerC3get4from5query10defaultValSDySSSiGSay0aC015fG74_pG_SSSitKFSSAiJ_pcfu_33_1ec30c1e3c34803c076ffb86173186a4AiJ_pSSTf3nnnpk_nTf1cn_n(a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  specialized Sequence.compactMap<A>(_:)(v11, v10, a2, a3, a4);
  v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v13, &demangling cache variable for type metadata for _DictionaryStorage<String, Int>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
  v5 = v14;
  if (*(_QWORD *)(v14 + 16) != *(_QWORD *)(a1 + 16))
  {
    v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11SiriSignals15SignalProviding_pG_SSs5NeverOTg503_s7d7Cam0A16e54ContainerC3get4from5query10defaultValSDySSSiGSay0aC015fG75_pG_SSSitKFSSAiJ_pcfu0_33_2f9d014dde3806f51ad5602c3b2cd65fAiJ_pSSTf3nnnpk_nTf1cn_n(a1);
    v16 = specialized Set.init<A>(_:)(v15);
    v17 = specialized Set.init<A>(_:)(v5);
    specialized Set.subtracting(_:)(v17, v16);
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = Set.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 46;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v5 = 0xD000000000000029;
    v20 = 0x80000001C2E9B3E0;
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v21 = 0xD000000000000029;
LABEL_5:
    *(_QWORD *)(v21 + 8) = v20;
    *(_BYTE *)(v21 + 16) = 1;
    swift_willThrow();
  }
  return v5;
}

uint64_t closure #1 in SiriSignalsContainer.get(from:query:defaultVal:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  char *v23;
  _QWORD *v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *, uint64_t);
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t result;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(uint64_t *, char *, uint64_t);
  uint64_t *v62;
  _QWORD *v63;
  uint64_t *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;

  v64 = a6;
  v58 = a5;
  v59 = a3;
  v60 = a4;
  v63 = a2;
  v7 = type metadata accessor for SignalValue();
  v8 = *(_QWORD **)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v62 = (uint64_t *)((char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v67 = (char *)&v58 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SignalValue));
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(int *)(v13 + 48);
  v17 = (char *)v15 + v16;
  v18 = (char *)a1 + v16;
  v20 = *a1;
  v19 = a1[1];
  *v15 = v20;
  v15[1] = v19;
  v21 = (void (*)(char *, char *, uint64_t))v8[2];
  v21((char *)v15 + v16, v18, v7);
  v22 = (void (*)(char *, uint64_t))v8[1];
  swift_bridgeObjectRetain();
  v65 = v22;
  v22(v17, v7);
  v23 = (char *)v15 + *(int *)(v12 + 48);
  v61 = (void (*)(uint64_t *, char *, uint64_t))v21;
  v21(v23, v18, v7);
  v24 = v8;
  v25 = (void (*)(char *, char *, uint64_t))v8[4];
  v26 = v23;
  v27 = v19;
  v66 = v7;
  v25(v67, v26, v7);
  v28 = v20;
  if ((specialized Sequence<>.contains(_:)(v20, v19, v63) & 1) == 0)
  {
    v65(v67, v66);
    result = swift_bridgeObjectRelease();
LABEL_14:
    v49 = v64;
    *v64 = 0;
    v49[1] = 0;
    v49[2] = 0;
    return result;
  }
  v30 = (void (*)(uint64_t *, uint64_t))v65;
  v29 = v66;
  v31 = v62;
  v61(v62, v67, v66);
  if (((unsigned int (*)(uint64_t *, uint64_t))v24[11])(v31, v29) != *MEMORY[0x1E0DA4720])
  {
    swift_bridgeObjectRelease();
    v30(v31, v66);
    if (one-time initialization token for ranker != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.ranker);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_1C2E0C000, v46, v47, "Ignoring bundle-dependent signal; can only use independent signals in this context",
        v48,
        2u);
      MEMORY[0x1C3BCB4A4](v48, -1, -1);
    }

    result = ((uint64_t (*)(char *, uint64_t))v30)(v67, v66);
    goto LABEL_14;
  }
  ((void (*)(uint64_t *, uint64_t))v24[12])(v31, v66);
  v32 = *v31;
  v33 = v60;
  swift_bridgeObjectRetain();
  v34 = specialized Dictionary.subscript.getter(v59, v33, v32);
  v36 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v36 & 1) != 0)
  {
    if (one-time initialization token for ranker != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.ranker);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc();
      v54 = swift_slowAlloc();
      v69 = (_QWORD *)v54;
      *(_DWORD *)v53 = 136315650;
      swift_bridgeObjectRetain();
      v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v53 + 12) = 2080;
      swift_bridgeObjectRetain();
      v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v33, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v53 + 22) = 2048;
      v55 = v58;
      v68 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2E0C000, v51, v52, "No value of %s for include %s. Defaulting to %ld", (uint8_t *)v53, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v54, -1, -1);
      MEMORY[0x1C3BCB4A4](v53, -1, -1);

      result = ((uint64_t (*)(char *, uint64_t))v65)(v67, v66);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      result = ((uint64_t (*)(char *, uint64_t))v65)(v67, v66);
      v55 = v58;
    }
    v57 = v64;
    *v64 = v28;
    v57[1] = v27;
    v57[2] = v55;
  }
  else
  {
    v37 = v28;
    if (one-time initialization token for ranker != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.ranker);
    swift_bridgeObjectRetain_n();
    v39 = v60;
    swift_bridgeObjectRetain_n();
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc();
      v63 = (_QWORD *)swift_slowAlloc();
      v69 = v63;
      *(_DWORD *)v42 = 136315650;
      swift_bridgeObjectRetain();
      v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v42 + 12) = 2080;
      swift_bridgeObjectRetain();
      v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v39, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v42 + 22) = 2048;
      v68 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2E0C000, v40, v41, "Found value of %s for %s: %ld", (uint8_t *)v42, 0x20u);
      v43 = v63;
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v43, -1, -1);
      MEMORY[0x1C3BCB4A4](v42, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    result = ((uint64_t (*)(char *, uint64_t))v65)(v67, v66);
    v56 = v64;
    *v64 = v37;
    v56[1] = v27;
    v56[2] = v34;
  }
  return result;
}

uint64_t type metadata accessor for SiriSignalsContainer()
{
  return objc_opt_self();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  id v23;
  Swift::String v24;
  Swift::String v25;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v5 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  while (1)
  {
    v7 = *(v5 - 2);
    v6 = *(v5 - 1);
    v8 = *v5;
    v9 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    v14 = v10;
    if (v9[3] < v12 + v13)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
      _NativeDictionary.copy()();
      if ((v14 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v17 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v18 = (uint64_t *)(v17[6] + 16 * v11);
    *v18 = v7;
    v18[1] = v6;
    *(_QWORD *)(v17[7] + 8 * v11) = v8;
    v19 = v17[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_18;
    v5 += 3;
    v17[2] = v21;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v14 & 1) != (v16 & 1))
    goto LABEL_19;
  v11 = v15;
  if ((v14 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v22 = (void *)swift_allocError();
  swift_willThrow();
  v23 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v24._object = (void *)0x80000001C2E9B4B0;
  v24._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v24);
  _print_unlocked<A, B>(_:_:)();
  v25._countAndFlagsBits = 39;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v3;
  void **i;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  id v24;
  Swift::String v25;
  Swift::String v26;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  for (i = (void **)(swift_bridgeObjectRetain() + 48); ; i += 3)
  {
    v7 = (uint64_t)*(i - 2);
    v6 = (uint64_t)*(i - 1);
    v8 = *i;
    v9 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    v10 = v8;
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    v13 = v9[2];
    v14 = (v11 & 1) == 0;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    v15 = v11;
    if (v9[3] < v13 + v14)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLFeatureValue>);
      _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v18 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v19 = (uint64_t *)(v18[6] + 16 * v12);
    *v19 = v7;
    v19[1] = v6;
    *(_QWORD *)(v18[7] + 8 * v12) = v10;
    v20 = v18[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_18;
    v18[2] = v22;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v15 & 1) != (v17 & 1))
    goto LABEL_19;
  v12 = v16;
  if ((v15 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v23 = (void *)swift_allocError();
  swift_willThrow();
  v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v25._object = (void *)0x80000001C2E9B4B0;
  v25._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v25);
  _print_unlocked<A, B>(_:_:)();
  v26._countAndFlagsBits = 39;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined init with take of (key: String, value: SignalValue)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SignalValue));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: String, value: SignalValue)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SignalValue));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C2E69F64()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SiriSignalsContainer.refreshSignals()(uint64_t a1)
{
  char *v1;

  return closure #1 in SiriSignalsContainer.refreshSignals()(a1, v1);
}

uint64_t outlined init with copy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_0_27()
{
  specialized Array.append<A>(contentsOf:)();
}

uint64_t OUTLINED_FUNCTION_2_26()
{
  return swift_beginAccess();
}

void OUTLINED_FUNCTION_5_15()
{
  specialized Array.append<A>(contentsOf:)();
}

uint64_t OUTLINED_FUNCTION_8_16()
{
  return swift_release_n();
}

void one-time initialization function for forceEnabled()
{
  static SiriKitRuntimeAmbiguityFeatureFlags.forceEnabled = MEMORY[0x1E0DEE9E0];
}

{
  static CamFeatureFlag.forceEnabled = MEMORY[0x1E0DEE9E0];
}

const char *SiriKitRuntimeAmbiguityFeatureFlags.domain.getter()
{
  return "SiriKitRuntime";
}

const char *SiriKitRuntimeAmbiguityFeatureFlags.feature.getter()
{
  return "input_paraphrasing_flows";
}

uint64_t SiriKitRuntimeAmbiguityFeatureFlags.isEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  _BYTE v5[24];
  ValueMetadata *v6;
  unint64_t v7;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v0 = static SiriKitRuntimeAmbiguityFeatureFlags.forceEnabled;
  if (*(_QWORD *)(static SiriKitRuntimeAmbiguityFeatureFlags.forceEnabled + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    v3 = *(_BYTE *)(*(_QWORD *)(v0 + 56) + v1);
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    v6 = &type metadata for SiriKitRuntimeAmbiguityFeatureFlags;
    v7 = lazy protocol witness table accessor for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags();
    v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return v3 & 1;
}

void SiriKitRuntimeAmbiguityFeatureFlags.hash(into:)()
{
  OUTLINED_FUNCTION_1_23();
}

void SiriKitRuntimeAmbiguityFeatureFlags.hashValue.getter()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_1_23();
  Hasher._finalize()();
  OUTLINED_FUNCTION_19_2();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SiriKitRuntimeAmbiguityFeatureFlags()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_1_23();
  Hasher._finalize()();
  OUTLINED_FUNCTION_19_2();
}

unint64_t lazy protocol witness table accessor for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for SiriKitRuntimeAmbiguityFeatureFlags, &type metadata for SiriKitRuntimeAmbiguityFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for SiriKitRuntimeAmbiguityFeatureFlags, &type metadata for SiriKitRuntimeAmbiguityFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SiriKitRuntimeAmbiguityFeatureFlags(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C2E6A214 + 4 * byte_1C2E972A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C2E6A234 + 4 * byte_1C2E972A5[v4]))();
}

_BYTE *sub_1C2E6A214(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C2E6A234(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2E6A23C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2E6A244(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2E6A24C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2E6A254(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SiriKitRuntimeAmbiguityFeatureFlags()
{
  return &type metadata for SiriKitRuntimeAmbiguityFeatureFlags;
}

void OUTLINED_FUNCTION_1_23()
{
  Hasher._combine(_:)(0);
}

uint64_t ParserPriority.rawValue.getter(unsigned __int8 a1)
{
  return 5 - a1;
}

SiriCam::Domain3PProtectionLevel_optional __swiftcall Domain3PProtectionLevel.init(rawValue:)(Swift::Int64 rawValue)
{
  if ((unint64_t)rawValue >= 4)
    LOBYTE(rawValue) = 4;
  return (SiriCam::Domain3PProtectionLevel_optional)rawValue;
}

uint64_t specialized ScalarFeatureExtracting.extract(from:to:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = a3();
  if (!v3)
  {
    OUTLINED_FUNCTION_30_12(result);
    v6 = v5;
    OUTLINED_FUNCTION_12();
    specialized Dictionary.update(other:allowDuplicateKeys:)(v6, 0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t one-time initialization function for extractedFeatures()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  v0 = static UserParseFeatureExtractor.extractedFeatures;
  type metadata accessor for AffinityRankFeatureExtractor();
  static AffinityRankFeatureExtractor.extractedFeatures.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v0 = v4;
  }
  v1 = *(_QWORD *)(v0 + 16);
  if (v1 >= *(_QWORD *)(v0 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v0 = v5;
  }
  *(_QWORD *)(v0 + 16) = v1 + 1;
  v2 = v0 + 16 * v1;
  *(_QWORD *)(v2 + 32) = 0x535F5050415F5349;
  *(_QWORD *)(v2 + 40) = 0xEF54554354524F48;
  swift_bridgeObjectRelease();
  type metadata accessor for ConversationHistoryFeatureExtractor();
  static ConversationHistoryFeatureExtractor.extractedFeatures.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  result = swift_bridgeObjectRelease();
  static RankerFeatureExtractor.extractedFeatures = v0;
  return result;
}

{
  uint64_t result;
  void *v1;

  type metadata accessor for ConversationHistoryFeatureExtractor();
  v1 = static ConversationHistoryFeatureExtractor.extractedFeatures.getter();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  result = swift_bridgeObjectRelease();
  static DawnRankerFeatureExtractor.extractedFeatures = (uint64_t)v1;
  return result;
}

{
  if (one-time initialization token for CRR_FEATURES != -1)
    swift_once();
  static CRRFeatureExtractor.extractedFeatures = static PersonalInputFeatureNames.CRR_FEATURES;
  return swift_bridgeObjectRetain();
}

uint64_t *RankerFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static RankerFeatureExtractor.extractedFeatures;
}

uint64_t RankerFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v1;
  type metadata accessor for MLFeatureValue();
  v5 = Dictionary.init(dictionaryLiteral:)();
  v27 = v5;
  v6 = type metadata accessor for RankerFeatureExtractor();
  v7 = specialized FeatureExtracting.extract(from:)(a1, *(double *)(v3 + *(int *)(v6 + 36)));
  if (v2)
  {
    OUTLINED_FUNCTION_12();
  }
  else
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v7);
    v9 = v8;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_16_14(v9);
    OUTLINED_FUNCTION_24();
    v10 = (uint64_t *)(v3 + *(int *)(v6 + 20));
    v12 = *v10;
    v11 = v10[1];
    v13 = *((unsigned __int8 *)v10 + 16);
    swift_bridgeObjectRetain();
    v14 = specialized FeatureExtracting.extract(from:)(a1, v12, v11, v13);
    OUTLINED_FUNCTION_30_12(v14);
    v16 = v15;
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_16_14(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = OUTLINED_FUNCTION_27_11();
    OUTLINED_FUNCTION_20_12(v18, v19, (uint64_t (*)(void))specialized FeatureExtracting.extract(from:), v20);
    OUTLINED_FUNCTION_45();
    v21 = specialized FeatureExtracting.extract(from:)(a1);
    OUTLINED_FUNCTION_30_12(v21);
    v23 = v22;
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_16_14(v23);
    OUTLINED_FUNCTION_24();
    v24 = OUTLINED_FUNCTION_27_11();
    OUTLINED_FUNCTION_20_12(v24, v25, (uint64_t (*)(void))specialized FeatureExtracting.extract(from:), v26);
    OUTLINED_FUNCTION_45();
    return v27;
  }
  return v5;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance RankerFeatureExtractor()
{
  RankerFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance RankerFeatureExtractor(uint64_t a1)
{
  return RankerFeatureExtractor.extractImpl(from:)(a1);
}

void ParserPriority.init(parserId:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_4_5();
  v5 = v4 - v3;
  v6 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) != 1)
  {
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(a1, v5);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v5, v6);
    if (v8 != *MEMORY[0x1E0D9F138]
      && v8 != *MEMORY[0x1E0D9F118]
      && v8 != *MEMORY[0x1E0D9F110]
      && v8 != *MEMORY[0x1E0D9F0F8])
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    }
  }
  outlined destroy of RRDataSourceMetadataValue?(a1, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_31();
}

uint64_t Domain3PProtectionLevel.rawValue.getter(uint64_t result)
{
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance Domain3PProtectionLevel()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Domain3PProtectionLevel(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Domain3PProtectionLevel(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::Domain3PProtectionLevel_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Domain3PProtectionLevel@<W0>(Swift::Int64 *a1@<X0>, SiriCam::Domain3PProtectionLevel_optional *a2@<X8>)
{
  SiriCam::Domain3PProtectionLevel_optional result;

  result.value = Domain3PProtectionLevel.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Domain3PProtectionLevel@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = Domain3PProtectionLevel.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t *DawnRankerFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static DawnRankerFeatureExtractor.extractedFeatures;
}

uint64_t static DawnRankerFeatureExtractor.extractOnScreenAppBundleIds(rrCandidates:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  void (*v36)(_QWORD, _QWORD, _QWORD);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = type metadata accessor for RREntity();
  v41 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_4_5();
  v40 = v4 - v3;
  v5 = type metadata accessor for RRCandidate();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v35 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v33 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v33 - v12;
  v14 = MEMORY[0x1E0DEE9D8];
  v42 = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v15)
  {
    v38 = v2;
    v39 = v11;
    v16 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v17 = *(_QWORD *)(v6 + 72);
    v33 = a1;
    v34 = v16;
    v18 = a1 + v16;
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 16);
    v36 = v19;
    v37 = v17;
    while (1)
    {
      v20 = v6;
      v19(v13, v18, v5);
      v21 = v40;
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v21, v38);
      v6 = UsoTask.verbString.getter();
      v23 = v22;
      swift_release();
      if (v6 == 0x415F6E6F6D6D6F63 && v23 == 0xEA00000000007070)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_13_15();
      }
      else
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        OUTLINED_FUNCTION_3_1();
        OUTLINED_FUNCTION_13_15();
        if ((v25 & 1) == 0)
        {
          OUTLINED_FUNCTION_12_12();
          goto LABEL_16;
        }
      }
      v25 = v17;
      v26 = RRCandidate.isOnScreen.getter();
      OUTLINED_FUNCTION_12_12();
      if ((v26 & 1) != 0)
      {
        v27 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v27(v35, v13, v5);
        v28 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
          v28 = v42;
        }
        v30 = *(_QWORD *)(v28 + 16);
        v29 = *(_QWORD *)(v28 + 24);
        if (v30 >= v29 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
          v28 = v42;
        }
        *(_QWORD *)(v28 + 16) = v30 + 1;
        v17 = v37;
        v27((char *)(v28 + v34 + v30 * v37), v35, v5);
        v42 = v28;
        v6 = v20;
        goto LABEL_17;
      }
LABEL_16:
      ((void (*)(char *, uint64_t))v25)(v13, v5);
      v17 = v37;
LABEL_17:
      v18 += v17;
      --v15;
      v19 = v36;
      if (!v15)
      {
        v14 = v42;
        break;
      }
    }
  }
  OUTLINED_FUNCTION_3_1();
  v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg503_s7d78Cam25UserParseFeatureExtractorV27extractOnScreenAppBundleIds4fromShySSGSay0A28efg7Model11I63VG_tFZSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(v14);
  swift_release();
  return specialized Set.init<A>(_:)(v31);
}

uint64_t DawnRankerFeatureExtractor.extractImpl(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_4_5();
  v9 = v8 - v7;
  v10 = type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_4_5();
  v14 = v13 - v12;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_4_5();
  v18 = (void **)(v17 - v16);
  type metadata accessor for MLFeatureValue();
  v73 = Dictionary.init(dictionaryLiteral:)();
  swift_retain();
  specialized ScalarFeatureExtracting.extract(from:to:)(a1, (uint64_t)&v73, (uint64_t (*)(void))specialized FeatureExtracting.extract(from:));
  OUTLINED_FUNCTION_45();
  if (v4)
    return swift_bridgeObjectRelease();
  v20 = (int *)type metadata accessor for ActionCandidate();
  v21 = *(_QWORD *)(a1 + v20[6]);
  if (v21 >= 4)
    v21 = 4;
  if (v21 <= 1)
    v22 = 1;
  else
    v22 = v21;
  outlined init with copy of CamParse(a1 + v20[5], (uint64_t)v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v24 = v22;
      v25 = *v18;
      dispatch thunk of PommesResponse.isPersonalDomainFallback.getter();

      v66 = 0;
      v67 = 0;
      v27 = 0;
    }
    else
    {
      if (one-time initialization token for ranker != -1)
        swift_once();
      v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.ranker);
      v36 = (void *)Logger.logObject.getter();
      v37 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_4_8(v37))
      {
        *(_WORD *)OUTLINED_FUNCTION_7_4() = 0;
        OUTLINED_FUNCTION_3_9(&dword_1C2E0C000, v38, v39, "Unknown parser");
        OUTLINED_FUNCTION_3();
      }
      v24 = v22;

      outlined destroy of CamParse((uint64_t)v18, type metadata accessor for CamParse);
      v66 = 0;
      v67 = 0;
      v27 = 0;
    }
    v40 = a4;
  }
  else
  {
    outlined init with take of CamUSOParse((uint64_t)v18, v14);
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v14 + *(int *)(v10 + 20), v9);
    ParserPriority.init(parserId:)(v9);
    v28 = CamUSOParse.appShortcutInvocation.getter();
    if (v29)
    {
      outlined consume of AppShortcutInvocation?(v28, v29);
      CamUSOParse.appShortcutInvocation.getter();
      v31 = v30;
      v66 = v32;
      v34 = v33;
      outlined destroy of CamParse(v14, type metadata accessor for CamUSOParse);
      if (v31)
      {
        v67 = v34;
        v26 = swift_bridgeObjectRelease();
      }
      else
      {
        v66 = 0;
        v67 = 0;
      }
      v27 = 1;
      v24 = a3;
    }
    else
    {
      v24 = v22;
      outlined destroy of CamParse(v14, type metadata accessor for CamUSOParse);
      v66 = 0;
      v67 = 0;
      v27 = 0;
    }
    v40 = a4;
  }
  v41 = (uint64_t *)(a1 + v20[9]);
  v42 = v41[1];
  v43 = (uint64_t *)MEMORY[0x1E0DEE9B8];
  if (v42)
  {
    specialized Set.contains(_:)(*v41, v42, v40);
    if ((v27 & 1) == 0)
      goto LABEL_39;
  }
  else if (!v27)
  {
    goto LABEL_39;
  }
  v44 = *(_QWORD *)(a1 + v20[7]);
  if (v44)
  {
    OUTLINED_FUNCTION_8_17(v26, v42, v44);
    if (*((_QWORD *)&v72 + 1))
    {
      v26 = OUTLINED_FUNCTION_7_15();
      if ((_DWORD)v26)
        goto LABEL_39;
      goto LABEL_34;
    }
  }
  else
  {
    v71 = 0u;
    v72 = 0u;
  }
  OUTLINED_FUNCTION_26_9(v26, &demangling cache variable for type metadata for Any?);
LABEL_34:
  if (one-time initialization token for ranker != -1)
    swift_once();
  v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Logger.ranker);
  v46 = (void *)Logger.logObject.getter();
  v47 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_4_8(v47))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_4() = 0;
    OUTLINED_FUNCTION_3_9(&dword_1C2E0C000, v48, v49, "App Shortcut enablement status not available in user data. This should not happen.");
    OUTLINED_FUNCTION_3();
  }

  v43 = (uint64_t *)MEMORY[0x1E0DEE9B8];
LABEL_39:
  v50 = *(_QWORD *)(a1 + v20[7]);
  if (v50)
  {
    OUTLINED_FUNCTION_8_17(v26, v42, v50);
    if (*((_QWORD *)&v72 + 1))
    {
      OUTLINED_FUNCTION_7_15();
      goto LABEL_44;
    }
  }
  else
  {
    v71 = 0u;
    v72 = 0u;
  }
  OUTLINED_FUNCTION_26_9(v26, &demangling cache variable for type metadata for Any?);
LABEL_44:
  DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:)(a1);
  v51 = v41[1];
  if (v51)
  {
    v43 = (uint64_t *)*v41;
    OUTLINED_FUNCTION_22_7();
    v52 = static CamUserHistoryDefaultsManager.getValue(key:)(&v71);
    if (*((_QWORD *)&v72 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      if ((OUTLINED_FUNCTION_7_15() & 1) != 0)
      {
        v53 = v70;
LABEL_51:
        v55 = specialized Sequence<>.contains(_:)((uint64_t)v43, v51, v53);
        swift_bridgeObjectRelease();
        v54 = v55 & 1;
        goto LABEL_52;
      }
    }
    else
    {
      OUTLINED_FUNCTION_26_9(v52, &demangling cache variable for type metadata for Any?);
    }
    v53 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_51;
  }
  v54 = 0;
LABEL_52:
  v56 = (void *)objc_opt_self();
  if (objc_msgSend(v56, sel_featureValueWithInt64_, v24))
  {
    OUTLINED_FUNCTION_0_28();
    *(_QWORD *)&v71 = v43;
    OUTLINED_FUNCTION_22_7();
    OUTLINED_FUNCTION_2_27(v57 - 2, (uint64_t)"plugin_affinity_score");
    OUTLINED_FUNCTION_1_24();
  }
  else
  {
    OUTLINED_FUNCTION_22_7();

  }
  if (OUTLINED_FUNCTION_3_21())
  {
    OUTLINED_FUNCTION_0_28();
    v59 = OUTLINED_FUNCTION_9_18();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, 0x705F726573726170, 0xEF797469726F6972);
    OUTLINED_FUNCTION_1_24();
  }
  else
  {
    v43 = &v73;

  }
  if (OUTLINED_FUNCTION_3_21())
  {
    OUTLINED_FUNCTION_0_28();
    v60 = OUTLINED_FUNCTION_9_18();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v60, 0x535F5050415F5349, 0xEF54554354524F48);
    OUTLINED_FUNCTION_1_24();
  }
  else
  {
    v43 = &v73;

  }
  if (OUTLINED_FUNCTION_3_21())
  {
    OUTLINED_FUNCTION_0_28();
    *(_QWORD *)&v71 = v43;
    OUTLINED_FUNCTION_22_7();
    OUTLINED_FUNCTION_2_27(v61 - 4, (uint64_t)"is_app_foregrounded");
    OUTLINED_FUNCTION_1_24();
  }
  else
  {
    OUTLINED_FUNCTION_22_7();

  }
  if (OUTLINED_FUNCTION_3_21())
  {
    OUTLINED_FUNCTION_0_28();
    v63 = OUTLINED_FUNCTION_9_18();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, 0x665F73656D6D6F70, 0xEF6B6361626C6C61);
    OUTLINED_FUNCTION_1_24();
  }
  else
  {
    v43 = &v73;

  }
  if (OUTLINED_FUNCTION_3_21())
  {
    OUTLINED_FUNCTION_0_28();
    *(_QWORD *)&v71 = v43;
    OUTLINED_FUNCTION_6_14((uint64_t)"IS_ENABLED_APP_SHORTCUT");
    OUTLINED_FUNCTION_1_24();
  }
  else
  {

  }
  if (OUTLINED_FUNCTION_3_21())
  {
    OUTLINED_FUNCTION_0_28();
    *(_QWORD *)&v71 = v43;
    OUTLINED_FUNCTION_6_14((uint64_t)"domain_protection_level");
    OUTLINED_FUNCTION_1_24();
  }
  else
  {

  }
  if (objc_msgSend(v56, sel_featureValueWithInt64_, v54, v66))
  {
    OUTLINED_FUNCTION_0_28();
    OUTLINED_FUNCTION_18_10();
    OUTLINED_FUNCTION_2_27(v64, (uint64_t)"ambiguous_first_run_prev_shown");
    OUTLINED_FUNCTION_1_24();
  }
  else
  {

  }
  if (v67)
  {
    if (@nonobjc MLFeatureValue.__allocating_init(string:)())
    {
      OUTLINED_FUNCTION_0_28();
      OUTLINED_FUNCTION_18_10();
      OUTLINED_FUNCTION_2_27(v65, (uint64_t)"app_shortcut_action_identifier");
      OUTLINED_FUNCTION_1_24();
    }
    else
    {

    }
  }
  return v73;
}

void DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  v2 = static TrialProvider.tieBreakingOverrides.getter();
  if (v2)
  {
    v3 = v2;
    MEMORY[0x1E0C80A78](v2);
    v4[2] = a1;
    specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:), (uint64_t)v4, v3);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_1();
  }
  OUTLINED_FUNCTION_31();
}

id @nonobjc MLFeatureValue.__allocating_init(string:)()
{
  void *v0;
  id v1;

  v0 = (void *)MEMORY[0x1C3BCA844]();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_featureValueWithString_, v0);

  return v1;
}

uint64_t closure #1 in DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  BOOL v12;

  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_QWORD *)(result + 24);
  v8 = *a2;
  v9 = a2[1];
  v10 = *(_QWORD *)result == *a2 && v5 == v9;
  if ((v10 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    && (v6 == 0xD000000000000021 && v7 == 0x80000001C2E99330
     || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)))
  {
    v11 = 3;
  }
  else if ((v4 == 0xD000000000000021 && v5 == 0x80000001C2E99330
          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
         && (v6 == v8 ? (v12 = v7 == v9) : (v12 = 0),
             v12 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)))
  {
    v11 = 1;
  }
  else
  {
    v11 = 4;
  }
  *a3 = v11;
  return result;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance DawnRankerFeatureExtractor()
{
  DawnRankerFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance DawnRankerFeatureExtractor(uint64_t a1)
{
  uint64_t *v1;

  return DawnRankerFeatureExtractor.extractImpl(from:)(a1, *v1, v1[1], v1[2]);
}

uint64_t destroy for DawnRankerFeatureExtractor()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

void initializeBufferWithCopyOfBuffer for DawnRankerFeatureExtractor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_1_5();
}

_QWORD *assignWithCopy for DawnRankerFeatureExtractor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for DawnRankerFeatureExtractor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DawnRankerFeatureExtractor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DawnRankerFeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DawnRankerFeatureExtractor()
{
  return &type metadata for DawnRankerFeatureExtractor;
}

uint64_t *initializeBufferWithCopyOfBuffer for RankerFeatureExtractor(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v8 = (int *)type metadata accessor for RankerContext();
    v9 = v8[5];
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for ResponseMode();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = v8[6];
    v15 = (uint64_t *)((char *)v7 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v8[7];
    v19 = (char *)v7 + v18;
    v20 = (char *)a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = a3[5];
    v22 = a3[6];
    v23 = (char *)v7 + v21;
    v24 = (char *)a2 + v21;
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    v23[16] = v24[16];
    *(uint64_t *)((char *)v7 + v22) = *(uint64_t *)((char *)a2 + v22);
    v26 = a3[9];
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v7 + v26) = *(uint64_t *)((char *)a2 + v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t destroy for RankerFeatureExtractor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for RankerContext() + 20);
  v3 = type metadata accessor for ResponseMode();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for RankerFeatureExtractor(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for RankerContext();
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ResponseMode();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = v6[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v6[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = a3[5];
  v20 = a3[6];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  v23 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = v23;
  v21[16] = v22[16];
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  v24 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for RankerFeatureExtractor(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for RankerContext();
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = v6[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v6[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  v15[8] = v16[8];
  *(_QWORD *)v15 = v17;
  v18 = a3[5];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = *((_QWORD *)v20 + 1);
  v19[16] = v20[16];
  *((_QWORD *)v19 + 1) = v21;
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *initializeWithTake for RankerFeatureExtractor(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for RankerContext();
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = a3[5];
  v15 = a3[6];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  v16[16] = v17[16];
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  v18 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  return a1;
}

_QWORD *assignWithTake for RankerFeatureExtractor(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for RankerContext();
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = v6[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v16 = v6[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = a3[5];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_bridgeObjectRelease();
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  v20[16] = v21[16];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_release();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_release();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for RankerFeatureExtractor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C2E6BF44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RankerContext();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    __swift_getEnumTagSinglePayload(a1, a2, v4);
  else
    OUTLINED_FUNCTION_31();
}

uint64_t storeEnumTagSinglePayload for RankerFeatureExtractor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E6BFC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for RankerContext();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RankerFeatureExtractor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RankerFeatureExtractor;
  if (!type metadata singleton initialization cache for RankerFeatureExtractor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for RankerFeatureExtractor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RankerContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:)(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t storeEnumTagSinglePayload for Domain3PProtectionLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C2E6C16C + 4 * byte_1C2E97385[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C2E6C1A0 + 4 * byte_1C2E97380[v4]))();
}

uint64_t sub_1C2E6C1A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E6C1A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E6C1B0);
  return result;
}

uint64_t sub_1C2E6C1BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E6C1C4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C2E6C1C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E6C1D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Domain3PProtectionLevel()
{
  return &type metadata for Domain3PProtectionLevel;
}

unint64_t lazy protocol witness table accessor for type Domain3PProtectionLevel and conformance Domain3PProtectionLevel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Domain3PProtectionLevel and conformance Domain3PProtectionLevel;
  if (!lazy protocol witness table cache variable for type Domain3PProtectionLevel and conformance Domain3PProtectionLevel)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for Domain3PProtectionLevel, &type metadata for Domain3PProtectionLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Domain3PProtectionLevel and conformance Domain3PProtectionLevel);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_28()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_1_24()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 72) = *(_QWORD *)(v0 - 112);
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_2_27(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v2, a1, (a2 - 32) | 0x8000000000000000);
}

id OUTLINED_FUNCTION_3_21()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, (SEL)(v0 + 2592));
}

uint64_t OUTLINED_FUNCTION_4_20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (a2 - 32) | 0x8000000000000000);
}

void OUTLINED_FUNCTION_6_14(uint64_t a1@<X8>)
{
  uint64_t v1;

  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v1, 0xD000000000000017, (a1 - 32) | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_7_15()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_8_17(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  specialized Dictionary.subscript.getter(0xD000000000000014, (v3 - 32) | 0x8000000000000000, a3, (_OWORD *)(v4 - 112));
}

uint64_t OUTLINED_FUNCTION_9_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = v1;
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_14@<X0>(uint64_t a1@<X8>)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000017, (a1 - 32) | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_12_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_13_15()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(*(_QWORD *)(v3 - 128), v2, v0);
}

uint64_t OUTLINED_FUNCTION_16_14(uint64_t a1)
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, 0);
}

void OUTLINED_FUNCTION_18_10()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = v0;
}

uint64_t OUTLINED_FUNCTION_20_12(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  return specialized ScalarFeatureExtracting.extract(from:to:)(v4, (uint64_t)va, a3);
}

void OUTLINED_FUNCTION_26_9(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of RRDataSourceMetadataValue?(v2 - 112, a2);
}

uint64_t OUTLINED_FUNCTION_27_11()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_30_12(uint64_t a1)
{
  specialized _dictionaryUpCast<A, B, C, D>(_:)(a1);
}

id static UncertaintyPromptRequestLogger.map(from:)(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993E0]), sel_init);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for CamRequest(0) + 52));
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      v5 = 0;
      do
      {
        v6 = *(unsigned __int8 *)(v3 + v5++ + 32);
        if (v6 == 1)
          v7 = 0x4F5455415F534D53;
        else
          v7 = 0xD000000000000010;
        v8 = 0xEC000000444E4553;
        if (v6 != 1)
          v8 = 0x80000001C2E99960;
        if (v6)
          v9 = v7;
        else
          v9 = 0x455045525F4B5341;
        if (v6)
          v10 = v8;
        else
          v10 = 0xEA00000000005441;
        v11 = (void *)MEMORY[0x1C3BCA844](v9, v10);
        swift_bridgeObjectRelease();
        objc_msgSend(v2, sel_addFeature_, v11);

      }
      while (v4 != v5);
      swift_bridgeObjectRelease();
    }
  }
  return v2;
}

uint64_t dispatch thunk of static CamFeatureStoreLoggingProtocol.writeData(modelFeatures:modelOutput:modelMetadata:requestId:rcId:fsStream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 16))();
}

ValueMetadata *type metadata accessor for CamFeatureStoreLogger()
{
  return &type metadata for CamFeatureStoreLogger;
}

id static CaarErrorLogger.wrapIntoLogEvent(message:)(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99388]), sel_init);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99360]), sel_init);
  if (v4)
  {
    objc_msgSend(v3, sel_setFailed_, a1);
    objc_msgSend(v4, sel_setCaarRequestContext_, v3);
  }

  return v4;
}

void *one-time initialization function for kCamActionMap()
{
  uint64_t inited;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, CAMSchemaCAMAction)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2E97560;
  lazy protocol witness table accessor for type CamAction and conformance CamAction();
  OUTLINED_FUNCTION_1_25();
  *(_DWORD *)(inited + 72) = 0;
  OUTLINED_FUNCTION_0_29();
  *(_DWORD *)(inited + 120) = 1;
  OUTLINED_FUNCTION_0_29();
  *(_DWORD *)(inited + 168) = 2;
  OUTLINED_FUNCTION_0_29();
  *(_DWORD *)(inited + 216) = 3;
  OUTLINED_FUNCTION_0_29();
  *(_DWORD *)(inited + 264) = 6;
  lazy protocol witness table accessor for type AutoConfirmAction and conformance AutoConfirmAction();
  OUTLINED_FUNCTION_1_25();
  *(_DWORD *)(inited + 312) = 0;
  OUTLINED_FUNCTION_0_29();
  *(_DWORD *)(inited + 360) = 4;
  OUTLINED_FUNCTION_0_29();
  *(_DWORD *)(inited + 408) = 5;
  type metadata accessor for CAMSchemaCAMAction(0);
  result = (void *)Dictionary.init(dictionaryLiteral:)();
  kCamActionMap._rawValue = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoConfirmAction and conformance AutoConfirmAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction;
  if (!lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for AutoConfirmAction, &type metadata for AutoConfirmAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction;
  if (!lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for AutoConfirmAction, &type metadata for AutoConfirmAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_29()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_1_25()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t dispatch thunk of static CaarFeatureStoreLoggingProtocol.writeData(modelOutput:modelMetadata:requestId:rcId:fsStream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 16))();
}

ValueMetadata *type metadata accessor for CaarFeatureStoreLogger()
{
  return &type metadata for CaarFeatureStoreLogger;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam14ActionProtocol_pG_SSSgs5NeverOTg503_s7d81Cam30DisambiguationFeatureExtractorV17actionWasSelected13selectedIndex0F0S2i_AA14fg53_ptKFSSSgAaG_pcfu_33_7add0cbc9e1bf4191ffdfaf15510a374W15G_pAHTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v13;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v5);
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v5, v6);
      v9 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v10 = *(_QWORD *)(v13 + 16);
      if (v10 >= *(_QWORD *)(v13 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v9;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t DisambiguationFeatureExtractor.init(rankedActions:siriSignalsContainer:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopTwo?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Array<A>.topTwo.getter(a1, (uint64_t)v8);
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for TopTwo();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v8, &demangling cache variable for type metadata for TopTwo?);
    v10 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>);
    v11 = *(_QWORD *)(type metadata accessor for RankedAction() - 8);
    v12 = *(_QWORD *)(v11 + 72);
    v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1C2E940E0;
    v14 = v10 + v13;
    outlined init with copy of RankedAction((uint64_t)v8, v14);
    outlined init with copy of RankedAction((uint64_t)&v8[*(int *)(v9 + 20)], v14 + v12);
    outlined destroy of TopTwo((uint64_t)v8);
  }
  specialized _arrayForceCast<A, B>(_:)(v10);
  v16 = v15;
  swift_bridgeObjectRelease();
  v19 = v16;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v19);
  swift_bridgeObjectRelease();
  *a3 = v19;
  return outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)(a3 + 1));
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  int64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  int64_t v22;

  v3 = v2;
  specialized _NativeDictionary.makeIterator()(v21, a1);
  v5 = v21[0];
  v20 = v21[1];
  v6 = v21[3];
  v7 = v21[4];
  v22 = (unint64_t)(v21[2] + 64) >> 6;
  result = swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_3;
LABEL_2:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v10 = v9 | (v6 << 6);
  while (1)
  {
    v14 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v10);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    v18 = v17;
    a2(v16, v15, v18);
    if (v3)
    {
      swift_release();

      return swift_bridgeObjectRelease();
    }

    result = swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_2;
LABEL_3:
    v11 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v11 >= v22)
      return swift_release();
    v12 = *(_QWORD *)(v20 + 8 * v11);
    if (!v12)
    {
      v13 = v6 + 2;
      if (v6 + 2 >= v22)
        return swift_release();
      v12 = *(_QWORD *)(v20 + 8 * v13);
      if (v12)
        goto LABEL_12;
      v13 = v6 + 3;
      if (v6 + 3 >= v22)
        return swift_release();
      v12 = *(_QWORD *)(v20 + 8 * v13);
      if (v12)
        goto LABEL_12;
      v13 = v6 + 4;
      if (v6 + 4 >= v22)
        return swift_release();
      v12 = *(_QWORD *)(v20 + 8 * v13);
      if (v12)
      {
LABEL_12:
        v11 = v13;
      }
      else
      {
        v11 = v6 + 5;
        if (v6 + 5 >= v22)
          return swift_release();
        v12 = *(_QWORD *)(v20 + 8 * v11);
        if (!v12)
        {
          v19 = v6 + 6;
          while (v19 < v22)
          {
            v12 = *(_QWORD *)(v20 + 8 * v19++);
            if (v12)
            {
              v11 = v19 - 1;
              goto LABEL_13;
            }
          }
          return swift_release();
        }
      }
    }
LABEL_13:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    v6 = v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32 * v1);
  swift_bridgeObjectRetain();
  return v2;
}

void *static DisambiguationFeatureExtractor.extractedFeatures.getter()
{
  if (one-time initialization token for ACTION_DISAMBIGUATION_FREQ != -1)
    swift_once();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for APP_DISAMBIGUATION_FREQ != -1)
    swift_once();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for FRAC_SELECTED_APP_DISAMBIGUATION_FREQ != -1)
    swift_once();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for FRAC_SELECTED_ACTION_DISAMBIGUATION_FREQ != -1)
    swift_once();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for SELECTED_APP_DISAMBIGUATION_FREQ != -1)
    swift_once();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_34_0();
  if (one-time initialization token for SELECTED_ACTION_DISAMBIGUATION_FREQ != -1)
    swift_once();
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_34_0();
  return &outlined read-only object #0 of static DisambiguationFeatureExtractor.extractedFeatures.getter;
}

uint64_t DisambiguationFeatureExtractor.extractImpl(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_28_11();
  v6 = Dictionary.init(dictionaryLiteral:)();
  DisambiguationFeatureExtractor.extractAppDisambiguationFeatures(from:)();
  if (v0)
    return OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_16_14(v1);
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_26_10();
  DisambiguationFeatureExtractor.extractActionDisambiguationFeatures(from:)();
  OUTLINED_FUNCTION_16_14(v2);
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_26_10();
  DisambiguationFeatureExtractor.extractLastActionDisambiguationFeatures(from:)();
  OUTLINED_FUNCTION_16_14(v3);
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_26_10();
  DisambiguationFeatureExtractor.extractLastAppDisambiguationFeatures(from:)();
  OUTLINED_FUNCTION_16_14(v4);
  OUTLINED_FUNCTION_1_0();
  return v6;
}

void DisambiguationFeatureExtractor.extractAppDisambiguationFeatures(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  OUTLINED_FUNCTION_4_21();
  v8 = OUTLINED_FUNCTION_12_13((uint64_t)&outlined read-only object #0 of DisambiguationFeatureExtractor.extractAppDisambiguationFeatures(from:), v1, v2, v3, v4, v5, v6, v7, v51);
  v10 = v9;
  OUTLINED_FUNCTION_19_12(v8, &demangling cache variable for type metadata for ActionProtocol?, v11, v12, v13, v14, v15, v16, v52);
  v17 = OUTLINED_FUNCTION_8();
  if (!v10)
    goto LABEL_6;
  OUTLINED_FUNCTION_29_12(v17, v18, v19, v20, v21, v22, v23, v24, v53, v56, v57, v58, v59, v60, v61, v62);
  swift_bridgeObjectRetain();
  v32 = OUTLINED_FUNCTION_12_13((uint64_t)&outlined read-only object #1 of DisambiguationFeatureExtractor.extractAppDisambiguationFeatures(from:), v25, v26, v27, v28, v29, v30, v31, v54);
  v34 = v33;
  OUTLINED_FUNCTION_19_12(v32, &demangling cache variable for type metadata for ActionProtocol?, v35, v36, v37, v38, v39, v40, v55);
  OUTLINED_FUNCTION_8();
  if (!v34)
  {
    OUTLINED_FUNCTION_1_0();
LABEL_6:
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_0_1(v43, 0xD000000000000037);
    goto LABEL_8;
  }
  v41 = OUTLINED_FUNCTION_11_10();
  v42 = MEMORY[0x1C3BCA25C](v41);
  OUTLINED_FUNCTION_9_19(v42, v8, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_21_2();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_7();
    OUTLINED_FUNCTION_1_0();
    v44 = OUTLINED_FUNCTION_15_7();
    OUTLINED_FUNCTION_10_15();
    v45 = OUTLINED_FUNCTION_11_10();
    v46 = MEMORY[0x1C3BCA2A4](v45);
    OUTLINED_FUNCTION_9_19(v46, v32, v34);
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_21_2();
    v47 = OUTLINED_FUNCTION_15_7();
    OUTLINED_FUNCTION_10_15();
    v48 = OUTLINED_FUNCTION_41_8();
    v50 = OUTLINED_FUNCTION_38_8(v48, v49);
    OUTLINED_FUNCTION_28_11();
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_16_14((uint64_t)v44);
    OUTLINED_FUNCTION_72_1();
    OUTLINED_FUNCTION_16_14((uint64_t)v47);
    OUTLINED_FUNCTION_37_4();
    OUTLINED_FUNCTION_16_14(v50);
    OUTLINED_FUNCTION_21_2();
  }
LABEL_8:
  OUTLINED_FUNCTION_14_12();
}

void DisambiguationFeatureExtractor.extractActionDisambiguationFeatures(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  OUTLINED_FUNCTION_4_21();
  v8 = OUTLINED_FUNCTION_12_13((uint64_t)&outlined read-only object #0 of DisambiguationFeatureExtractor.extractActionDisambiguationFeatures(from:), v1, v2, v3, v4, v5, v6, v7, v51);
  v10 = v9;
  OUTLINED_FUNCTION_19_12(v8, &demangling cache variable for type metadata for ActionProtocol?, v11, v12, v13, v14, v15, v16, v52);
  v17 = OUTLINED_FUNCTION_8();
  if (!v10)
    goto LABEL_6;
  OUTLINED_FUNCTION_29_12(v17, v18, v19, v20, v21, v22, v23, v24, v53, v56, v57, v58, v59, v60, v61, v62);
  swift_bridgeObjectRetain();
  v32 = OUTLINED_FUNCTION_12_13((uint64_t)&outlined read-only object #1 of DisambiguationFeatureExtractor.extractActionDisambiguationFeatures(from:), v25, v26, v27, v28, v29, v30, v31, v54);
  v34 = v33;
  OUTLINED_FUNCTION_19_12(v32, &demangling cache variable for type metadata for ActionProtocol?, v35, v36, v37, v38, v39, v40, v55);
  OUTLINED_FUNCTION_8();
  if (!v34)
  {
    OUTLINED_FUNCTION_1_0();
LABEL_6:
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_0_1(v43, 0xD000000000000037);
    goto LABEL_8;
  }
  v41 = OUTLINED_FUNCTION_11_10();
  v42 = MEMORY[0x1C3BCA280](v41);
  OUTLINED_FUNCTION_9_19(v42, v8, v10);
  if (v0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_21_2();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_34_7();
    OUTLINED_FUNCTION_1_0();
    v44 = OUTLINED_FUNCTION_15_7();
    OUTLINED_FUNCTION_10_15();
    v45 = OUTLINED_FUNCTION_11_10();
    v46 = MEMORY[0x1C3BCA2B0](v45);
    OUTLINED_FUNCTION_9_19(v46, v32, v34);
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_21_2();
    v47 = OUTLINED_FUNCTION_15_7();
    OUTLINED_FUNCTION_10_15();
    v48 = OUTLINED_FUNCTION_41_8();
    v50 = OUTLINED_FUNCTION_38_8(v48, v49);
    OUTLINED_FUNCTION_28_11();
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_16_14((uint64_t)v44);
    OUTLINED_FUNCTION_72_1();
    OUTLINED_FUNCTION_16_14((uint64_t)v47);
    OUTLINED_FUNCTION_37_4();
    OUTLINED_FUNCTION_16_14(v50);
    OUTLINED_FUNCTION_21_2();
  }
LABEL_8:
  OUTLINED_FUNCTION_14_12();
}

void DisambiguationFeatureExtractor.extractLastActionDisambiguationFeatures(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_6_15();
  v9 = OUTLINED_FUNCTION_36_7((uint64_t)&outlined read-only object #0 of DisambiguationFeatureExtractor.extractLastActionDisambiguationFeatures(from:), v2, v3, v4, v5, v6, v7, v8, v31);
  v11 = v10;
  OUTLINED_FUNCTION_19_12(v9, &demangling cache variable for type metadata for ActionProtocol?, v12, v13, v14, v15, v16, v17, v32);
  OUTLINED_FUNCTION_13();
  if (!v11)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    v30 = 0xD00000000000003FLL;
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 32));
  MEMORY[0x1C3BCA298]();
  MEMORY[0x1C3BCA28C]();
  OUTLINED_FUNCTION_32_8();
  OUTLINED_FUNCTION_7_16(v18, v19, v20, v21, v22, v23, v24, v25, v33);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_24();
  if (!v0)
  {
    OUTLINED_FUNCTION_31_7();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_43_7(44, v26);
    v28 = v27;
    OUTLINED_FUNCTION_21_2();
    if ((v28 & 1) == 0)
    {
      OUTLINED_FUNCTION_24_11();
      OUTLINED_FUNCTION_39_3();
      OUTLINED_FUNCTION_23_11(49, (uint64_t)"actionRouting.lastActionDisambiguationWasSelected");
      OUTLINED_FUNCTION_37_9();
      OUTLINED_FUNCTION_35_6();
      OUTLINED_FUNCTION_1_0();
      goto LABEL_8;
    }
    OUTLINED_FUNCTION_21_2();
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    v30 = 82;
LABEL_7:
    OUTLINED_FUNCTION_0_1(v29, v30);
  }
LABEL_8:
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_21_14();
}

void DisambiguationFeatureExtractor.extractLastAppDisambiguationFeatures(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_6_15();
  v9 = OUTLINED_FUNCTION_36_7((uint64_t)&outlined read-only object #0 of DisambiguationFeatureExtractor.extractLastAppDisambiguationFeatures(from:), v2, v3, v4, v5, v6, v7, v8, v31);
  v11 = v10;
  OUTLINED_FUNCTION_19_12(v9, &demangling cache variable for type metadata for ActionProtocol?, v12, v13, v14, v15, v16, v17, v32);
  OUTLINED_FUNCTION_13();
  if (!v11)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    v30 = 0xD00000000000003CLL;
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 32));
  MEMORY[0x1C3BCA274]();
  MEMORY[0x1C3BCA268]();
  OUTLINED_FUNCTION_32_8();
  OUTLINED_FUNCTION_7_16(v18, v19, v20, v21, v22, v23, v24, v25, v33);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_24();
  if (!v0)
  {
    OUTLINED_FUNCTION_31_7();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_43_7(41, v26);
    v28 = v27;
    OUTLINED_FUNCTION_21_2();
    if ((v28 & 1) == 0)
    {
      OUTLINED_FUNCTION_24_11();
      OUTLINED_FUNCTION_39_3();
      OUTLINED_FUNCTION_23_11(46, (uint64_t)"actionRouting.lastAppDisambiguationWasSelected");
      OUTLINED_FUNCTION_37_9();
      OUTLINED_FUNCTION_35_6();
      OUTLINED_FUNCTION_1_0();
      goto LABEL_8;
    }
    OUTLINED_FUNCTION_21_2();
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    v30 = 79;
LABEL_7:
    OUTLINED_FUNCTION_0_1(v29, v30);
  }
LABEL_8:
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_21_14();
}

uint64_t static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, id);
  uint64_t v15;

  specialized Collection.first.getter(a1);
  if (v5)
  {

    String.signalPrefix.getter();
    v7 = v6;
    OUTLINED_FUNCTION_24();
    if (v7)
      OUTLINED_FUNCTION_13();
  }
  specialized Collection.first.getter(a2);
  if (!v9 || (v8, String.signalPrefix.getter(), v11 = v10, OUTLINED_FUNCTION_8(), !v11))
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_11();
  v15 = Dictionary.init(dictionaryLiteral:)();
  MEMORY[0x1E0C80A78](v15);
  v12 = OUTLINED_FUNCTION_26_0();
  specialized Sequence.forEach(_:)(v12, v13);
  OUTLINED_FUNCTION_24();
  if (v2)
    swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_26_0();
}

uint64_t DisambiguationFeatureExtractor.actionWasSelected(selectedIndex:action:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t);
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v28 - v11;
  if (a1 == -1)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)v2 + 16) <= a1)
  {
    v28 = 0;
    v29 = 0xE000000000000000;
    _StringGuts.grow(_:)(85);
    OUTLINED_FUNCTION_9_3();
    v15._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v15);
    v31 = a1;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_9_3();
    String.append(_:)(v17);
    v18 = swift_bridgeObjectRetain();
    v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam14ActionProtocol_pG_SSSgs5NeverOTg503_s7d81Cam30DisambiguationFeatureExtractorV17actionWasSelected13selectedIndex0F0S2i_AA14fg53_ptKFSSSgAaG_pcfu_33_7add0cbc9e1bf4191ffdfaf15510a374W15G_pAHTf3nnnpk_nTf1cn_n(v18);
    OUTLINED_FUNCTION_1_0();
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v21 = MEMORY[0x1C3BCA9B8](v19, v20);
    v23 = v22;
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    OUTLINED_FUNCTION_5();
    v25 = v28;
    v26 = v29;
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v27 = v25;
    *(_QWORD *)(v27 + 8) = v26;
    *(_BYTE *)(v27 + 16) = 1;
    return swift_willThrow();
  }
  else if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of SignalProviding(*(_QWORD *)v2 + 40 * a1 + 32, (uint64_t)&v28);
    __swift_project_boxed_opaque_existential_1(&v28, v30);
    OUTLINED_FUNCTION_27_12();
    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    OUTLINED_FUNCTION_27_12();
    v13 = static UUID.== infix(_:_:)();
    v14 = *(void (**)(char *, uint64_t))(v6 + 8);
    v14(v9, v5);
    v14(v12, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    return v13 & 1;
  }
  return result;
}

uint64_t String.signalPrefix.getter()
{
  lazy protocol witness table accessor for type String and conformance String();
  if ((OUTLINED_FUNCTION_30_13() & 1) != 0)
    OUTLINED_FUNCTION_20_13();
  return 0;
}

void closure #1 in static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  id v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD v32[2];

  v15 = String.signalBucket.getter();
  if (!v16)
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v32[0] = 0xD00000000000001ELL;
    v32[1] = 0x80000001C2E9B700;
    v26._countAndFlagsBits = a1;
    v26._object = a2;
    String.append(_:)(v26);
LABEL_7:
    v28 = v32[1];
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(_QWORD *)v29 = v32[0];
    *(_QWORD *)(v29 + 8) = v28;
    *(_BYTE *)(v29 + 16) = 1;
    swift_willThrow();
    return;
  }
  v17 = v15;
  v18 = v16;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 46;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = v17;
  v20._object = v18;
  String.append(_:)(v20);
  v21 = specialized Dictionary.subscript.getter(a4, a5, a6);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v32, "Couldn't find ");
    HIBYTE(v32[1]) = -18;
    v27._countAndFlagsBits = a4;
    v27._object = a5;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v22 = (void *)v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = 46;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = v17;
  v24._object = v18;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithDouble_, (double)(uint64_t)objc_msgSend(a3, sel_int64Value) / (double)(uint64_t)objc_msgSend(v22, sel_int64Value));
  if (v25)
  {
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v25, a7, a8);

    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(a7, a8);

    swift_bridgeObjectRelease();
  }
}

uint64_t String.signalBucket.getter()
{
  lazy protocol witness table accessor for type String and conformance String();
  if ((OUTLINED_FUNCTION_30_13() & 1) != 0)
    OUTLINED_FUNCTION_20_13();
  return 0;
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance DisambiguationFeatureExtractor()
{
  return DisambiguationFeatureExtractor.extractImpl(from:)();
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = specialized Array.index(_:offsetBy:limitedBy:)(0, (v3 - result) & ~((uint64_t)(v3 - result) >> 63), v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

_QWORD *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLFeatureValue>);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)();
  v3 = result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v25 = (unint64_t)(v6 + 63) >> 6;
  v9 = (char *)(result + 8);
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v15;
    v16 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v19 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    result = objc_msgSend(v19, sel_featureValueWithInt64_, v18);
    *(_QWORD *)&v9[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    v20 = (_QWORD *)(v3[6] + 16 * i);
    *v20 = v17;
    v20[1] = v16;
    *(_QWORD *)(v3[7] + 8 * i) = result;
    v21 = v3[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v23;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v25)
      return v3;
    v13 = *(_QWORD *)(v24 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v25)
        return v3;
      v13 = *(_QWORD *)(v24 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v25)
          return v3;
        v13 = *(_QWORD *)(v24 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v25)
    return v3;
  v13 = *(_QWORD *)(v24 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v25)
      return v3;
    v13 = *(_QWORD *)(v24 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

void partial apply for closure #1 in static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  closure #1 in static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Substring>);
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEBF78], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t specialized Array.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

uint64_t outlined destroy of TopTwo(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TopTwo();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for DisambiguationFeatureExtractor(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for DisambiguationFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = a2 + 8;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = v4;
  v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 8, v3, v5);
  return a1;
}

_QWORD *assignWithCopy for DisambiguationFeatureExtractor(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DisambiguationFeatureExtractor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisambiguationFeatureExtractor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisambiguationFeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisambiguationFeatureExtractor()
{
  return &type metadata for DisambiguationFeatureExtractor;
}

uint64_t OUTLINED_FUNCTION_4_21()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_6_15()
{
  return swift_bridgeObjectRetain();
}

unint64_t OUTLINED_FUNCTION_7_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v10;

  return SiriSignalsContainer.get(from:query:defaultVal:)(a9, v9, v10, -1);
}

unint64_t OUTLINED_FUNCTION_9_19(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return SiriSignalsContainer.get(from:query:defaultVal:)(a1, a2, a3, 0);
}

uint64_t OUTLINED_FUNCTION_10_15()
{
  return swift_bridgeObjectRelease();
}

_QWORD *OUTLINED_FUNCTION_11_10()
{
  uint64_t v0;
  _QWORD *v1;

  return __swift_project_boxed_opaque_existential_1(v1, *(_QWORD *)(v0 + 32));
}

uint64_t OUTLINED_FUNCTION_12_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)(a1, (uint64_t)&a9);
}

_QWORD *OUTLINED_FUNCTION_15_7()
{
  uint64_t v0;

  return specialized _NativeDictionary.mapValues<A>(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_19_12(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)&a9, a2);
}

void OUTLINED_FUNCTION_20_13()
{
  JUMPOUT(0x1C3BCABE0);
}

void OUTLINED_FUNCTION_23_11(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v2, a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_24_11()
{
  uint64_t v0;
  _QWORD *v1;

  return DisambiguationFeatureExtractor.actionWasSelected(selectedIndex:action:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_26_10()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_27_12()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

unint64_t OUTLINED_FUNCTION_28_11()
{
  return type metadata accessor for MLFeatureValue();
}

uint64_t OUTLINED_FUNCTION_29_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  a16 = v17;
  return outlined init with copy of SignalProviding(v16, (uint64_t)&a9);
}

uint64_t OUTLINED_FUNCTION_30_13()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_31_7()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_32_8()
{
  specialized Array.append<A>(contentsOf:)();
}

uint64_t OUTLINED_FUNCTION_34_7()
{
  return swift_bridgeObjectRelease();
}

_QWORD *OUTLINED_FUNCTION_35_6()
{
  uint64_t v0;

  return specialized _NativeDictionary.mapValues<A>(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_36_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)(a1, (uint64_t)&a9);
}

uint64_t OUTLINED_FUNCTION_37_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_38_8(uint64_t a1, uint64_t a2)
{
  return static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_39_3()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_41_8()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_43_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, v2);
}

uint64_t static TrialProvider.tieBreakingOverrides.getter()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;

  if ((static TrialProvider.fetchBoolFactorFromTrial(_:)() & 1) != 0)
    CamFeatureFlag.isEnabled.getter(5u);
  if (one-time initialization token for ranker != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_14_1();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.ranker);
  swift_bridgeObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_4();
    *(_DWORD *)v3 = 136315138;
    v4 = OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_10_16(v4);
    OUTLINED_FUNCTION_18_11();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_17_12();
    OUTLINED_FUNCTION_88(&dword_1C2E0C000, v1, v2, "[TrialProvider] Tie breaking overrides using factor = %s", v3);
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_3();
  }

  OUTLINED_FUNCTION_48_3();
  static TrialProvider.fetchStringFactorFromTrial(_:)();
  if (v5)
  {
    swift_bridgeObjectRelease();
    v6 = static TrialProvider.decodeOverrides(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_3_4();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_4();
      *(_DWORD *)v9 = 136315138;
      v10 = OUTLINED_FUNCTION_3_4();
      OUTLINED_FUNCTION_10_16(v10);
      OUTLINED_FUNCTION_18_11();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_17_12();
      OUTLINED_FUNCTION_88(&dword_1C2E0C000, v7, v8, "[TrialProvider] Could not fetch %s from Trial.", v9);
      OUTLINED_FUNCTION_13_1();
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_48_3();
    return 0;
  }
  return v6;
}

void Array<A>.getFavouredAction(tie:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_4_5();
  v9 = v8 - v7;
  v10 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_1();
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (_QWORD *)((char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v29 - v15;
  v31 = a1;
  specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD *))partial apply for closure #1 in Array<A>.getFavouredAction(tie:), (uint64_t)v30, a2);
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v9, 1, v10) == 1)
  {
    outlined destroy of RankedAction?(v9);
    if (one-time initialization token for ranker != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.ranker);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1C2E0C000, v18, v19, "No override matching.", v20, 2u);
      OUTLINED_FUNCTION_3();
    }

    v21 = 1;
  }
  else
  {
    outlined init with take of RankedAction(v9, (uint64_t)v16);
    if (one-time initialization token for ranker != -1)
      swift_once();
    v22 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.ranker);
    outlined init with copy of RankedAction((uint64_t)v16, (uint64_t)v14);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)OUTLINED_FUNCTION_4();
      v26 = OUTLINED_FUNCTION_4();
      v29[1] = a3;
      v33 = v26;
      *(_DWORD *)v25 = 136315138;
      v29[0] = v25 + 4;
      v27 = *v14;
      v28 = v14[1];
      swift_bridgeObjectRetain();
      v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RankedAction((uint64_t)v14);
      OUTLINED_FUNCTION_88(&dword_1C2E0C000, v23, v24, "Found matching override, will favour %s.", v25);
      OUTLINED_FUNCTION_13_1();
      OUTLINED_FUNCTION_3();
    }
    outlined destroy of RankedAction((uint64_t)v14);

    outlined init with take of RankedAction((uint64_t)v16, a3);
    v21 = 0;
  }
  __swift_storeEnumTagSinglePayload(a3, v21, 1, v10);
  OUTLINED_FUNCTION_0_2();
}

void TrialTieBreakingOverride.preference(tie:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  BOOL v24;
  int v25;
  unint64_t v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = a6;
  v45 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_1();
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (uint64_t *)((char *)&v43 - v16);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (uint64_t *)((char *)&v43 - v19);
  MEMORY[0x1E0C80A78](v18);
  v22 = (uint64_t *)((char *)&v43 - v21);
  outlined init with copy of RankedAction(a1, (uint64_t)&v43 - v21);
  v43 = a1 + *(int *)(type metadata accessor for TopTwo() + 20);
  v44 = a1;
  outlined init with copy of RankedAction(v43, (uint64_t)v20);
  v23 = *v22 == a2 && v22[1] == a3;
  if (v23 || (OUTLINED_FUNCTION_7_6() & 1) != 0 || (a2 == 42 ? (v24 = a3 == 0xE100000000000000) : (v24 = 0), v24))
  {
    v25 = 1;
    if (*v20 == a4 && v20[1] == a5)
      goto LABEL_29;
  }
  else
  {
    LOBYTE(v25) = OUTLINED_FUNCTION_1_26();
    if (*v20 == a4 && v20[1] == a5)
    {
LABEL_21:
      v28 = a5;
      if ((v25 & 1) != 0)
      {
        v25 = 1;
LABEL_29:
        v28 = a5;
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  if ((OUTLINED_FUNCTION_7_6() & 1) != 0)
    goto LABEL_21;
  if (a4 == 42 && a5 == 0xE100000000000000)
  {
    v28 = 0xE100000000000000;
    if ((v25 & 1) != 0)
    {
      v25 = 1;
      a4 = 42;
      goto LABEL_33;
    }
  }
  else
  {
    v30 = OUTLINED_FUNCTION_1_26();
    v28 = a5;
    if ((v25 & 1) != 0)
    {
      v25 = v30;
      goto LABEL_29;
    }
  }
LABEL_32:
  v25 = 0;
LABEL_33:
  outlined destroy of RankedAction((uint64_t)v20);
  outlined destroy of RankedAction((uint64_t)v22);
  v31 = v43;
  outlined init with copy of RankedAction(v43, (uint64_t)v17);
  v32 = v44;
  outlined init with copy of RankedAction(v44, (uint64_t)v14);
  v33 = *v17 == a2 && v17[1] == a3;
  if (v33 || (OUTLINED_FUNCTION_7_6() & 1) != 0 || (a2 == 42 ? (v34 = a3 == 0xE100000000000000) : (v34 = 0), v34))
  {
    v35 = 1;
    if (a4 == *v14 && v28 == v14[1])
      goto LABEL_62;
  }
  else
  {
    LOBYTE(v35) = OUTLINED_FUNCTION_1_26();
    if (a4 == *v14 && v28 == v14[1])
      goto LABEL_59;
  }
  if ((OUTLINED_FUNCTION_7_6() & 1) == 0 && (a4 != 42 || v28 != 0xE100000000000000))
  {
    v39 = OUTLINED_FUNCTION_1_26();
    if ((v35 & 1) != 0)
    {
      v35 = v39;
      goto LABEL_62;
    }
    goto LABEL_61;
  }
LABEL_59:
  if ((v35 & 1) != 0)
  {
    v35 = 1;
    goto LABEL_62;
  }
LABEL_61:
  v35 = 0;
LABEL_62:
  outlined destroy of RankedAction((uint64_t)v14);
  outlined destroy of RankedAction((uint64_t)v17);
  if (((v25 | v35) & 1) != 0)
  {
    if ((v25 & 1) != 0)
      v40 = v32;
    else
      v40 = v31;
    v41 = v46;
    outlined init with copy of RankedAction(v40, v46);
    v42 = 0;
  }
  else
  {
    v42 = 1;
    v41 = v46;
  }
  __swift_storeEnumTagSinglePayload(v41, v42, 1, v45);
  OUTLINED_FUNCTION_0_2();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TrialTieBreakingOverride.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;

  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 2113056;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
}

uint64_t static TrialTieBreakingOverride.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12;
  char v13;
  uint64_t result;

  v12 = a1 == a5 && a2 == a6;
  if (v12 || (v13 = OUTLINED_FUNCTION_7_6(), result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

uint64_t TrialTieBreakingOverride.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x72756F766166 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1919252079 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t TrialTieBreakingOverride.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1919252079;
  else
    return 0x72756F766166;
}

uint64_t TrialTieBreakingOverride.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TrialTieBreakingOverride.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_4_5();
  v7 = v6 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_9_20();
  if (!v1)
    OUTLINED_FUNCTION_9_20();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t TrialTieBreakingOverride.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TrialTieBreakingOverride.CodingKeys>);
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_4_5();
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    OUTLINED_FUNCTION_14_13();
  }
  else
  {
    v4 = OUTLINED_FUNCTION_6_16();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_6_16();
    OUTLINED_FUNCTION_4_22();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_14_13();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_21_2();
  }
  return v4;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TrialTieBreakingOverride.CodingKeys()
{
  char *v0;

  return TrialTieBreakingOverride.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TrialTieBreakingOverride.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TrialTieBreakingOverride.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TrialTieBreakingOverride.CodingKeys()
{
  lazy protocol witness table accessor for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrialTieBreakingOverride.CodingKeys()
{
  lazy protocol witness table accessor for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TrialTieBreakingOverride@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = TrialTieBreakingOverride.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TrialTieBreakingOverride(_QWORD *a1)
{
  return TrialTieBreakingOverride.encode(to:)(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrialTieBreakingOverride()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)v0;
  TrialTieBreakingOverride.debugDescription.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TrialTieBreakingOverride(uint64_t *a1, uint64_t *a2)
{
  return static TrialTieBreakingOverride.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t static TrialProvider.decodeOverrides(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v22[3];
  uint64_t v23;

  v0 = type metadata accessor for String.Encoding();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  v4 = String.data(using:allowLossyConversion:)();
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15)
  {
    if (one-time initialization token for ranker != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.ranker);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      MEMORY[0x1C3BCB4A4](v10, -1, -1);
    }

    return 0;
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TrialTieBreakingOverride]);
    lazy protocol witness table accessor for type [TrialTieBreakingOverride] and conformance <A> [A]();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    v11 = v23;
    if (one-time initialization token for ranker != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.ranker);
    swift_bridgeObjectRetain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v23 = v17;
      *(_DWORD *)v16 = 136315138;
      v22[0] = v16 + 4;
      v18 = swift_bridgeObjectRetain();
      v19 = MEMORY[0x1C3BCA9B8](v18, &type metadata for TrialTieBreakingOverride);
      v21 = v20;
      swift_bridgeObjectRelease();
      v22[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2E0C000, v14, v15, "[TrialProvider] Decoded overides: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v17, -1, -1);
      MEMORY[0x1C3BCB4A4](v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    outlined consume of Data?(v4, v6);

  }
  return v11;
}

void closure #1 in Array<A>.getFavouredAction(tie:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  TrialTieBreakingOverride.preference(tie:)(a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a3);
}

unint64_t lazy protocol witness table accessor for type [TrialTieBreakingOverride] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [TrialTieBreakingOverride] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [TrialTieBreakingOverride] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TrialTieBreakingOverride]);
    v2 = lazy protocol witness table accessor for type TrialTieBreakingOverride and conformance TrialTieBreakingOverride();
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TrialTieBreakingOverride] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TrialTieBreakingOverride and conformance TrialTieBreakingOverride()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialTieBreakingOverride and conformance TrialTieBreakingOverride;
  if (!lazy protocol witness table cache variable for type TrialTieBreakingOverride and conformance TrialTieBreakingOverride)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for TrialTieBreakingOverride, &type metadata for TrialTieBreakingOverride);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialTieBreakingOverride and conformance TrialTieBreakingOverride);
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

void partial apply for closure #1 in Array<A>.getFavouredAction(tie:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  closure #1 in Array<A>.getFavouredAction(tie:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t outlined destroy of RankedAction?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for TrialTieBreakingOverride()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TrialTieBreakingOverride(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TrialTieBreakingOverride(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TrialTieBreakingOverride(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialTieBreakingOverride(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrialTieBreakingOverride(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrialTieBreakingOverride()
{
  return &type metadata for TrialTieBreakingOverride;
}

unint64_t lazy protocol witness table accessor for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for TrialTieBreakingOverride.CodingKeys, &unk_1E7CC35D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for TrialTieBreakingOverride.CodingKeys, &unk_1E7CC35D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for TrialTieBreakingOverride.CodingKeys, &unk_1E7CC35D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for TrialTieBreakingOverride.CodingKeys, &unk_1E7CC35D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TrialTieBreakingOverride.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C2E6FB70 + 4 * byte_1C2E97635[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C2E6FBA4 + 4 * byte_1C2E97630[v4]))();
}

uint64_t sub_1C2E6FBA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E6FBAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E6FBB4);
  return result;
}

uint64_t sub_1C2E6FBC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E6FBC8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C2E6FBCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E6FBD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TrialTieBreakingOverride.CodingKeys()
{
  return &unk_1E7CC35D8;
}

uint64_t OUTLINED_FUNCTION_1_26()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_4_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_6_16()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_9_20()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_10_16(uint64_t a1, ...)
{
  uint64_t v1;
  unint64_t v2;
  va_list va;

  va_start(va, a1);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_14_13()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_17_12()
{
  return swift_bridgeObjectRelease_n();
}

void static CamRequestLinkLogger.log(requestId:camId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  unint64_t v50;
  os_log_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v51 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v51 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v55 = (uint64_t)&v51 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v51 - v17;
  v19 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D9A480]));
  v56 = v5;
  if (v19)
  {
    v20 = v19;
    v54 = v14;
    v21 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D9A490]));
    if (v21)
    {
      v22 = v21;
      v23 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D9A490]));
      if (v23)
      {
        v24 = v23;
        type metadata accessor for SISchemaUUID();
        v53 = a2;
        OUTLINED_FUNCTION_4_23((uint64_t)v18, a2);
        v25 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v22, sel_setUuid_, v25);

        objc_msgSend(v22, sel_setComponent_, 4);
        v26 = a1;
        OUTLINED_FUNCTION_4_23((uint64_t)v18, a1);
        v27 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v24, sel_setUuid_, v27);

        if (AFDeviceSupportsSAE())
          v28 = 43;
        else
          v28 = 1;
        objc_msgSend(v24, sel_setComponent_, v28);
        objc_msgSend(v20, sel_setSource_, v22);
        objc_msgSend(v20, sel_setTarget_, v24);
        objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, v20);
        swift_unknownObjectRelease();
        if (one-time initialization token for common != -1)
          swift_once();
        v29 = type metadata accessor for Logger();
        __swift_project_value_buffer(v29, (uint64_t)static Logger.common);
        v30 = v55;
        OUTLINED_FUNCTION_4_23(v55, v53);
        v31 = (uint64_t)v54;
        OUTLINED_FUNCTION_4_23((uint64_t)v54, v26);
        v32 = Logger.logObject.getter();
        v33 = static os_log_type_t.debug.getter();
        v34 = v33;
        if (os_log_type_enabled(v32, v33))
        {
          v35 = OUTLINED_FUNCTION_4();
          v53 = OUTLINED_FUNCTION_4();
          v58 = v53;
          *(_DWORD *)v35 = 136315394;
          v52 = v34;
          v36 = UUID.uuidString.getter();
          v57 = OUTLINED_FUNCTION_8_11(v36, v37);
          v51 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_12();
          v38 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
          v38(v30, v4);
          *(_WORD *)(v35 + 12) = 2080;
          v39 = UUID.uuidString.getter();
          v57 = OUTLINED_FUNCTION_8_11(v39, v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_12();
          v38(v31, v4);
          _os_log_impl(&dword_1C2E0C000, v51, (os_log_type_t)v52, "Successfully emitted requestLink log message for camId : %s and requestId: %s", (uint8_t *)v35, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_3();
        }

        OUTLINED_FUNCTION_3_22(v30);
        OUTLINED_FUNCTION_3_22(v31);

        return;
      }

    }
    else
    {
      v22 = v20;
    }
    v5 = v56;

  }
  if (one-time initialization token for common != -1)
    swift_once();
  v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Logger.common);
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v42(v11, a2, v4);
  v42(v8, a1, v4);
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = OUTLINED_FUNCTION_4();
    v55 = OUTLINED_FUNCTION_4();
    v58 = v55;
    *(_DWORD *)v45 = 136315394;
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v46 = OUTLINED_FUNCTION_7_17();
    v57 = OUTLINED_FUNCTION_8_11(v46, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_12();
    v48 = *(void (**)(char *, uint64_t))(v56 + 8);
    v48(v11, v4);
    *(_WORD *)(v45 + 12) = 2080;
    v49 = OUTLINED_FUNCTION_7_17();
    v57 = OUTLINED_FUNCTION_8_11(v49, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_12();
    v48(v8, v4);
    _os_log_impl(&dword_1C2E0C000, v43, v44, "Error in intialising RequestLink object camId: %s, and requestId: %s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_3_22((uint64_t)v11);
  OUTLINED_FUNCTION_3_22((uint64_t)v8);

}

uint64_t OUTLINED_FUNCTION_3_22(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_4_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

id OUTLINED_FUNCTION_6_17(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 3528));
}

uint64_t OUTLINED_FUNCTION_7_17()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t destroy for CamHandler()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void initializeBufferWithCopyOfBuffer for CamHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_1_5();
}

_QWORD *assignWithCopy for CamHandler(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CamHandler(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CamHandler()
{
  return &type metadata for CamHandler;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = OUTLINED_FUNCTION_110(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  OUTLINED_FUNCTION_61();
  return v6;
}

{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = OUTLINED_FUNCTION_110(a1, a2), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  else
    return 0;
}

void specialized Dictionary.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  char v7;

  if (*(_QWORD *)(a3 + 16) && (v6 = OUTLINED_FUNCTION_110(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    OUTLINED_FUNCTION_1_5();
  }
}

unint64_t specialized Dictionary.subscript.getter(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  char v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    goto LABEL_5;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v5 & 1) == 0)
  {
    v2 = 0;
LABEL_5:
    v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  v6 = 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16) && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(), (v4 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3);
  else
    return 0;
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  id v6;

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = OUTLINED_FUNCTION_110(a1, a2);
    if ((v5 & 1) != 0)
      v6 = *(id *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  }
  OUTLINED_FUNCTION_1_5();
}

{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    OUTLINED_FUNCTION_110(a1, a2);
    if ((v3 & 1) != 0)
      swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_1_5();
}

unint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  char v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    goto LABEL_5;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v5 & 1) == 0)
  {
    v2 = 0;
LABEL_5:
    v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  v6 = 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

unint64_t specialized Dictionary.subscript.getter(char a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  char v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    goto LABEL_5;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v5 & 1) == 0)
  {
    v2 = 0;
LABEL_5:
    v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  v6 = 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

void specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  unint64_t v50;
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  _WORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _WORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  id v108;
  uint64_t v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  NSObject *v140;
  uint64_t v141;
  uint64_t v142[2];

  OUTLINED_FUNCTION_37_8();
  v131 = v5;
  v137 = v7;
  v138 = v6;
  v135 = v8;
  v136 = v9;
  v140 = v10;
  v12 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_25_2();
  v16 = v14 - v15;
  MEMORY[0x1E0C80A78](v17);
  v126 = (char *)&v124 - v18;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v19);
  v125 = (char *)&v124 - v20;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v21);
  v128 = (char *)&v124 - v22;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v23);
  OUTLINED_FUNCTION_87_1();
  MEMORY[0x1E0C80A78](v24);
  v130 = (char *)&v124 - v25;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_13_3();
  v134 = v27;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v124 - v29;
  v139 = OUTLINED_FUNCTION_1_12();
  v31 = *(_QWORD *)(v139 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v32);
  OUTLINED_FUNCTION_2_12();
  v132 = v33;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v34);
  v124 = (char *)&v124 - v35;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v36);
  v127 = (char *)&v124 - v37;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v38);
  OUTLINED_FUNCTION_13_3();
  v129 = v39;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v40);
  OUTLINED_FUNCTION_51_2();
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_53_4();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_52_0();
  MEMORY[0x1E0C80A78](v43);
  OUTLINED_FUNCTION_86_1();
  v44 = *v12;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
  static CamModelLogger.map(from:)(v44, (uint64_t)v12 + *(int *)(v45 + 48));
  if (v46)
  {
    v47 = v46;
    v48 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D993C8]));
    v133 = v47;
    objc_msgSend(v48, sel_setModelExecuted_, v47);
    if (v48)
    {
      v49 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D993D0]));
      v50 = v138;
      if (v49)
      {
        v51 = v49;
        v134 = v48;
        OUTLINED_FUNCTION_29((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        OUTLINED_FUNCTION_39_4(v2, (uint64_t)v140);
        v52 = OUTLINED_FUNCTION_38_9();
        OUTLINED_FUNCTION_7_18((uint64_t)v52, sel_setCamId_);

        v53 = (void *)MEMORY[0x1C3BCA844](v136, v50);
        OUTLINED_FUNCTION_7_18((uint64_t)v53, sel_setResultCandidateId_);

        OUTLINED_FUNCTION_70_1(v54, sel_setRequestId_);
        if ((AFDeviceSupportsSAE() & 1) != 0)
        {
          OUTLINED_FUNCTION_39_4(v2, v135);
          v55 = OUTLINED_FUNCTION_38_9();
          OUTLINED_FUNCTION_7_18((uint64_t)v55, sel_setSubRequestId_);

        }
        if (one-time initialization token for kLoggingFeatureName != -1)
          swift_once();
        v56 = specialized Dictionary.subscript.getter(v131, (uint64_t)kLoggingFeatureName._rawValue);
        v57 = v132;
        if ((v56 & 0x100000000) == 0)
          OUTLINED_FUNCTION_122(v56, sel_setFeature_);
        OUTLINED_FUNCTION_108(v137);
        OUTLINED_FUNCTION_6_18((uint64_t)v0);
        if (v58)
        {
          OUTLINED_FUNCTION_57_4();
          v0 = v128;
          UUID.init(uuidString:)();
          OUTLINED_FUNCTION_6_18((uint64_t)v0);
          if (v58)
          {
            v59 = OUTLINED_FUNCTION_57_4();
LABEL_39:
            OUTLINED_FUNCTION_111(v59, sel_setEventMetadata_);
            v108 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
            OUTLINED_FUNCTION_135(v108, sel_emitMessage_);
            OUTLINED_FUNCTION_131();
            if (one-time initialization token for common != -1)
              swift_once();
            v109 = OUTLINED_FUNCTION_14_1();
            __swift_project_value_buffer(v109, (uint64_t)static Logger.common);
            OUTLINED_FUNCTION_39_4(v57, (uint64_t)v140);
            OUTLINED_FUNCTION_21_7();
            Logger.logObject.getter();
            v110 = OUTLINED_FUNCTION_6_6();
            if (OUTLINED_FUNCTION_5_7(v110))
            {
              OUTLINED_FUNCTION_4();
              v140 = OUTLINED_FUNCTION_4();
              v142[0] = (uint64_t)v140;
              OUTLINED_FUNCTION_56_4(4.8152e-34);
              v141 = OUTLINED_FUNCTION_29(v111, &lazy cache variable for type metadata for CAMSchemaCAMModelExecuted);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMModelExecuted.Type);
              v112 = OUTLINED_FUNCTION_62_2();
              v137 = v31;
              v141 = OUTLINED_FUNCTION_13_16(v112, v113);
              OUTLINED_FUNCTION_4_24();
              OUTLINED_FUNCTION_13();
              v114 = OUTLINED_FUNCTION_27_13();
              v141 = OUTLINED_FUNCTION_12_14(v114, v115);
              OUTLINED_FUNCTION_31_8();
              OUTLINED_FUNCTION_12();
              OUTLINED_FUNCTION_25_5(v57, *(uint64_t (**)(uint64_t, uint64_t))(v137 + 8));
              OUTLINED_FUNCTION_28_12();
              v141 = OUTLINED_FUNCTION_59_0(v136, v116, v142);
              OUTLINED_FUNCTION_4_24();
              OUTLINED_FUNCTION_41_3();
              OUTLINED_FUNCTION_29_13(&dword_1C2E0C000, v117, v118, "Successfully emitted log message : %s for camId : %s, rcId: %s");
              OUTLINED_FUNCTION_79_1();
              OUTLINED_FUNCTION_3();
            }
            OUTLINED_FUNCTION_1_10();

            OUTLINED_FUNCTION_25_5(v57, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
            OUTLINED_FUNCTION_147();

            goto LABEL_46;
          }
          v100 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
          v101 = (uint64_t)v124;
        }
        else
        {
          v100 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
          v101 = (uint64_t)v127;
        }
        OUTLINED_FUNCTION_36_8(v101, (uint64_t)v0, v100);
        OUTLINED_FUNCTION_39_4(v2, v101);
        v107 = OUTLINED_FUNCTION_38_9();
        OUTLINED_FUNCTION_35_7((uint64_t)v107, sel_setTrpId_);

        v59 = OUTLINED_FUNCTION_25_5(v101, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
        goto LABEL_39;
      }
      if (one-time initialization token for common != -1)
        swift_once();
      v86 = OUTLINED_FUNCTION_14_1();
      OUTLINED_FUNCTION_84_0(v86, (uint64_t)static Logger.common);
      v87 = v129;
      OUTLINED_FUNCTION_36_8(v129, (uint64_t)v140, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16));
      v88 = (uint64_t)v130;
      OUTLINED_FUNCTION_97_0(v137);
      OUTLINED_FUNCTION_21_7();
      Logger.logObject.getter();
      v89 = OUTLINED_FUNCTION_58_3();
      if (OUTLINED_FUNCTION_22_8((os_log_type_t)v89))
      {
        LODWORD(v140) = v89;
        v134 = v48;
        v90 = (_WORD *)OUTLINED_FUNCTION_4();
        v137 = OUTLINED_FUNCTION_4();
        v142[0] = v137;
        OUTLINED_FUNCTION_153(4.8153e-34);
        v141 = OUTLINED_FUNCTION_29(v91, &lazy cache variable for type metadata for CAMSchemaCAMModelExecuted);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMModelExecuted.Type);
        v92 = OUTLINED_FUNCTION_62_2();
        v141 = OUTLINED_FUNCTION_13_16(v92, v93);
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_8();
        v90[6] = 2080;
        v94 = OUTLINED_FUNCTION_107();
        v96 = OUTLINED_FUNCTION_12_14(v94, v95);
        OUTLINED_FUNCTION_90(v96);
        OUTLINED_FUNCTION_12();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v87, v139);
        v90[11] = 2080;
        swift_bridgeObjectRetain();
        v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v50, v142);
        OUTLINED_FUNCTION_150(v97);
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_41_3();
        v90[16] = 2080;
        v98 = v139;
        v99 = (uint64_t)v125;
        OUTLINED_FUNCTION_60_0(v88);
        OUTLINED_FUNCTION_7_10(v99, 1, v98);
        if (v58)
        {
          OUTLINED_FUNCTION_46_4();
          OUTLINED_FUNCTION_149();
        }
        else
        {
          OUTLINED_FUNCTION_75_0();
          OUTLINED_FUNCTION_47_6();
        }
        v122 = OUTLINED_FUNCTION_33_9(v87, v121, v142);
        OUTLINED_FUNCTION_18_12(v122);
        OUTLINED_FUNCTION_12();
        OUTLINED_FUNCTION_65_0();
        OUTLINED_FUNCTION_44_5(&dword_1C2E0C000, v123, (os_log_type_t)v140, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s");
        OUTLINED_FUNCTION_30_14();
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_65_0();
      OUTLINED_FUNCTION_1_10();
      v102 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
      v103 = v87;
    }
    else
    {
      v76 = v138;
      if (one-time initialization token for common != -1)
        swift_once();
      v77 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v77, (uint64_t)static Logger.common);
      OUTLINED_FUNCTION_36_8(v4, (uint64_t)v140, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16));
      OUTLINED_FUNCTION_160(v137);
      OUTLINED_FUNCTION_21_7();
      Logger.logObject.getter();
      v78 = OUTLINED_FUNCTION_58_3();
      if (OUTLINED_FUNCTION_22_8((os_log_type_t)v78))
      {
        LODWORD(v140) = v78;
        v79 = (_WORD *)OUTLINED_FUNCTION_4();
        v137 = OUTLINED_FUNCTION_4();
        v142[0] = v137;
        OUTLINED_FUNCTION_56_4(4.8153e-34);
        v141 = OUTLINED_FUNCTION_29(v80, &lazy cache variable for type metadata for CAMSchemaCAMModelExecuted);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMModelExecuted.Type);
        v81 = OUTLINED_FUNCTION_62_2();
        v141 = OUTLINED_FUNCTION_13_16(v81, v82);
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_24();
        v79[6] = 2080;
        v83 = OUTLINED_FUNCTION_78_1();
        v141 = OUTLINED_FUNCTION_12_14(v83, v84);
        OUTLINED_FUNCTION_68_1();
        OUTLINED_FUNCTION_12();
        OUTLINED_FUNCTION_50_2(v4);
        v79[11] = 2080;
        OUTLINED_FUNCTION_77();
        v141 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v76, v142);
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_41_3();
        v79[16] = 2080;
        v85 = (uint64_t)v126;
        OUTLINED_FUNCTION_97_0((uint64_t)v134);
        OUTLINED_FUNCTION_6_18(v85);
        if (v58)
        {
          OUTLINED_FUNCTION_65_0();
          OUTLINED_FUNCTION_154();
        }
        else
        {
          OUTLINED_FUNCTION_50_4();
          OUTLINED_FUNCTION_48_5();
        }
        v141 = OUTLINED_FUNCTION_33_9((uint64_t)v142, v119, v142);
        OUTLINED_FUNCTION_68_1();
        OUTLINED_FUNCTION_12();
        OUTLINED_FUNCTION_82_1();
        OUTLINED_FUNCTION_43_8(&dword_1C2E0C000, v120, (os_log_type_t)v140, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s");
        OUTLINED_FUNCTION_30_14();
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_95_0();
      OUTLINED_FUNCTION_1_10();
      v102 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
      v103 = v4;
    }
    OUTLINED_FUNCTION_25_5(v103, v102);
    OUTLINED_FUNCTION_147();
    goto LABEL_46;
  }
  v133 = v16;
  v134 = v30;
  if (one-time initialization token for common != -1)
    swift_once();
  v60 = OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_84_0(v60, (uint64_t)static Logger.common);
  v61 = *(_QWORD *)(v31 + 16);
  v62 = v139;
  OUTLINED_FUNCTION_120(v3, (uint64_t)v140);
  OUTLINED_FUNCTION_120(v1, v135);
  OUTLINED_FUNCTION_118(v137);
  OUTLINED_FUNCTION_21_7();
  v63 = Logger.logObject.getter();
  v64 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_116(v64))
  {
    LODWORD(v137) = v61;
    v140 = v63;
    v65 = OUTLINED_FUNCTION_4();
    v66 = OUTLINED_FUNCTION_4();
    v135 = v66;
    v142[0] = v66;
    *(_DWORD *)v65 = 136316162;
    v141 = OUTLINED_FUNCTION_29(v66, &lazy cache variable for type metadata for CAMSchemaCAMModelExecuted);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMModelExecuted.Type);
    v67 = OUTLINED_FUNCTION_62_2();
    v141 = OUTLINED_FUNCTION_13_16(v67, v68);
    OUTLINED_FUNCTION_4_24();
    swift_bridgeObjectRelease();
    *(_WORD *)(v65 + 12) = 2080;
    v69 = OUTLINED_FUNCTION_115();
    v71 = OUTLINED_FUNCTION_12_14(v69, v70);
    OUTLINED_FUNCTION_81_0(v71);
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_80_0(v3);
    *(_WORD *)(v65 + 22) = 2080;
    OUTLINED_FUNCTION_63_0();
    v141 = OUTLINED_FUNCTION_59_0(v136, v72, v142);
    OUTLINED_FUNCTION_4_24();
    OUTLINED_FUNCTION_41_3();
    *(_WORD *)(v65 + 32) = 2080;
    v73 = OUTLINED_FUNCTION_134();
    v141 = OUTLINED_FUNCTION_12_14(v73, v74);
    OUTLINED_FUNCTION_31_8();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_80_0(v1);
    *(_WORD *)(v65 + 42) = 2080;
    v75 = v133;
    OUTLINED_FUNCTION_60_0((uint64_t)v134);
    OUTLINED_FUNCTION_7_10(v75, 1, v62);
    if (v58)
    {
      OUTLINED_FUNCTION_46_4();
      v104 = 0;
    }
    else
    {
      v104 = OUTLINED_FUNCTION_75_0();
      OUTLINED_FUNCTION_80_0(v75);
    }
    v106 = OUTLINED_FUNCTION_33_9(v104, v105, v142);
    OUTLINED_FUNCTION_18_12(v106);
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_95_0();
    OUTLINED_FUNCTION_125(&dword_1C2E0C000, v140, (os_log_type_t)v137, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v65);
    OUTLINED_FUNCTION_161();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_114(v3);
  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_114(v1);
  OUTLINED_FUNCTION_156();

LABEL_46:
  OUTLINED_FUNCTION_0_2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  _WORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  _WORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  id v116;
  uint64_t v117;
  os_log_type_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  id v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  NSObject *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150[2];

  OUTLINED_FUNCTION_37_8();
  v137 = v5;
  v144 = v6;
  v145 = v7;
  v142 = v8;
  v143 = v9;
  v146 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_25_2();
  v14 = v12 - v13;
  MEMORY[0x1E0C80A78](v15);
  v134 = (uint64_t)&v132 - v16;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v17);
  v133 = (char *)&v132 - v18;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v19);
  v135 = (char *)&v132 - v20;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_87_1();
  MEMORY[0x1E0C80A78](v22);
  v136 = (uint64_t)&v132 - v23;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_13_3();
  v141 = v25;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v132 - v27;
  v29 = OUTLINED_FUNCTION_1_12();
  v147 = *(_QWORD *)(v29 - 8);
  v148 = v29;
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v30);
  OUTLINED_FUNCTION_2_12();
  v138 = v31;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v32);
  v132 = (uint64_t)&v132 - v33;
  OUTLINED_FUNCTION_3_7();
  v35 = MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v132 - v36;
  v38 = MEMORY[0x1E0C80A78](v35);
  v40 = (char *)&v132 - v39;
  MEMORY[0x1E0C80A78](v38);
  OUTLINED_FUNCTION_51_2();
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_53_4();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_52_0();
  MEMORY[0x1E0C80A78](v43);
  OUTLINED_FUNCTION_86_1();
  v44 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D993E0]));
  if (v44)
  {
    v45 = v44;
    v46 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D993C8]));
    v139 = v45;
    objc_msgSend(v46, sel_setRequestReceived_, v45);
    v140 = v46;
    if (v46)
    {
      v47 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D993D0]));
      v48 = v148;
      v49 = v144;
      if (v47)
      {
        v50 = v47;
        OUTLINED_FUNCTION_29((uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        OUTLINED_FUNCTION_96_0(v2, (uint64_t)v146);
        v51 = OUTLINED_FUNCTION_38_9();
        OUTLINED_FUNCTION_7_18((uint64_t)v51, sel_setCamId_);

        v52 = (void *)MEMORY[0x1C3BCA844](v143, v49);
        OUTLINED_FUNCTION_7_18((uint64_t)v52, sel_setResultCandidateId_);

        OUTLINED_FUNCTION_70_1(v53, sel_setRequestId_);
        if ((AFDeviceSupportsSAE() & 1) != 0)
        {
          OUTLINED_FUNCTION_96_0(v2, v142);
          v54 = OUTLINED_FUNCTION_38_9();
          OUTLINED_FUNCTION_7_18((uint64_t)v54, sel_setSubRequestId_);

        }
        if (one-time initialization token for kLoggingFeatureName != -1)
          swift_once();
        v55 = specialized Dictionary.subscript.getter(v137, (uint64_t)kLoggingFeatureName._rawValue);
        v56 = v138;
        if ((v55 & 0x100000000) == 0)
          OUTLINED_FUNCTION_122(v55, sel_setFeature_);
        OUTLINED_FUNCTION_108(v145);
        OUTLINED_FUNCTION_7_10((uint64_t)v0, 1, v48);
        if (v57)
        {
          OUTLINED_FUNCTION_57_4();
          v58 = (uint64_t)v135;
          UUID.init(uuidString:)();
          OUTLINED_FUNCTION_7_10(v58, 1, v48);
          if (v57)
          {
            v110 = OUTLINED_FUNCTION_57_4();
            v109 = v147;
          }
          else
          {
            v109 = v147;
            v114 = v132;
            OUTLINED_FUNCTION_133(v132, v58, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 32));
            OUTLINED_FUNCTION_96_0(v2, v114);
            v115 = OUTLINED_FUNCTION_38_9();
            OUTLINED_FUNCTION_35_7((uint64_t)v115, sel_setTrpId_);

            v110 = (*(uint64_t (**)(uint64_t, uint64_t))(v109 + 8))(v114, v48);
          }
        }
        else
        {
          v106 = v147;
          OUTLINED_FUNCTION_133((uint64_t)v37, (uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 32));
          OUTLINED_FUNCTION_96_0(v2, (uint64_t)v37);
          v107 = OUTLINED_FUNCTION_38_9();
          OUTLINED_FUNCTION_35_7((uint64_t)v107, sel_setTrpId_);

          v108 = v37;
          v109 = v106;
          v110 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v108, v48);
        }
        OUTLINED_FUNCTION_111(v110, sel_setEventMetadata_);
        v116 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        OUTLINED_FUNCTION_135(v116, sel_emitMessage_);
        OUTLINED_FUNCTION_131();
        if (one-time initialization token for common != -1)
          swift_once();
        v117 = OUTLINED_FUNCTION_14_1();
        __swift_project_value_buffer(v117, (uint64_t)static Logger.common);
        OUTLINED_FUNCTION_96_0(v56, (uint64_t)v146);
        OUTLINED_FUNCTION_21_7();
        Logger.logObject.getter();
        v118 = OUTLINED_FUNCTION_6_6();
        if (OUTLINED_FUNCTION_5_7(v118))
        {
          OUTLINED_FUNCTION_4();
          v147 = OUTLINED_FUNCTION_4();
          v150[0] = v147;
          OUTLINED_FUNCTION_56_4(4.8152e-34);
          v149 = OUTLINED_FUNCTION_29(v119, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
          v120 = OUTLINED_FUNCTION_62_2();
          v149 = OUTLINED_FUNCTION_13_16(v120, v121);
          OUTLINED_FUNCTION_4_24();
          OUTLINED_FUNCTION_13();
          v122 = OUTLINED_FUNCTION_27_13();
          v149 = OUTLINED_FUNCTION_12_14(v122, v123);
          OUTLINED_FUNCTION_31_8();
          OUTLINED_FUNCTION_12();
          (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v56, v148);
          OUTLINED_FUNCTION_28_12();
          v149 = OUTLINED_FUNCTION_59_0(v143, v124, v150);
          OUTLINED_FUNCTION_4_24();
          OUTLINED_FUNCTION_41_3();
          OUTLINED_FUNCTION_29_13(&dword_1C2E0C000, v125, v126, "Successfully emitted log message : %s for camId : %s, rcId: %s");
          OUTLINED_FUNCTION_79_1();
          OUTLINED_FUNCTION_3();
        }
        OUTLINED_FUNCTION_1_10();

        (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v56, v48);
        OUTLINED_FUNCTION_112();

        goto LABEL_45;
      }
      if (one-time initialization token for common != -1)
        swift_once();
      v91 = OUTLINED_FUNCTION_14_1();
      OUTLINED_FUNCTION_84_0(v91, (uint64_t)static Logger.common);
      v92 = v147;
      OUTLINED_FUNCTION_133((uint64_t)v40, (uint64_t)v146, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 16));
      OUTLINED_FUNCTION_136(v145);
      OUTLINED_FUNCTION_21_7();
      Logger.logObject.getter();
      v93 = OUTLINED_FUNCTION_58_3();
      if (OUTLINED_FUNCTION_22_8(v93))
      {
        v94 = (_WORD *)OUTLINED_FUNCTION_4();
        v146 = OUTLINED_FUNCTION_4();
        v150[0] = (uint64_t)v146;
        OUTLINED_FUNCTION_153(4.8153e-34);
        v149 = OUTLINED_FUNCTION_29(v95, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
        v96 = OUTLINED_FUNCTION_62_2();
        v149 = OUTLINED_FUNCTION_13_16(v96, v97);
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_8();
        v94[6] = 2080;
        v98 = OUTLINED_FUNCTION_107();
        v100 = OUTLINED_FUNCTION_12_14(v98, v99);
        OUTLINED_FUNCTION_90(v100);
        OUTLINED_FUNCTION_12();
        v101 = *(void (**)(char *, uint64_t))(v92 + 8);
        v101(v40, v148);
        v94[11] = 2080;
        OUTLINED_FUNCTION_63_0();
        v103 = OUTLINED_FUNCTION_59_0(v143, v102, v150);
        OUTLINED_FUNCTION_150(v103);
        v104 = v148;
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_41_3();
        v94[16] = 2080;
        v105 = (uint64_t)v133;
        OUTLINED_FUNCTION_118(v136);
        OUTLINED_FUNCTION_7_10(v105, 1, v104);
        if (v57)
        {
          OUTLINED_FUNCTION_156();
          OUTLINED_FUNCTION_149();
        }
        else
        {
          v40 = (char *)UUID.uuidString.getter();
          v101((char *)v105, v104);
        }
        v130 = OUTLINED_FUNCTION_33_9((uint64_t)v40, v129, v150);
        OUTLINED_FUNCTION_18_12(v130);
        OUTLINED_FUNCTION_12();
        OUTLINED_FUNCTION_46_4();
        OUTLINED_FUNCTION_44_5(&dword_1C2E0C000, v131, v93, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s");
        OUTLINED_FUNCTION_30_14();
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_82_1();
      OUTLINED_FUNCTION_1_10();
      (*(void (**)(char *, uint64_t))(v92 + 8))(v40, v48);
    }
    else
    {
      v75 = v148;
      v76 = v144;
      if (one-time initialization token for common != -1)
        swift_once();
      v77 = OUTLINED_FUNCTION_14_1();
      OUTLINED_FUNCTION_84_0(v77, (uint64_t)static Logger.common);
      v78 = v147;
      (*(void (**)(uint64_t, NSObject *, uint64_t))(v147 + 16))(v4, v146, v75);
      OUTLINED_FUNCTION_97_0(v145);
      OUTLINED_FUNCTION_21_7();
      Logger.logObject.getter();
      v79 = OUTLINED_FUNCTION_58_3();
      if (OUTLINED_FUNCTION_22_8(v79))
      {
        v80 = (_WORD *)OUTLINED_FUNCTION_4();
        v146 = OUTLINED_FUNCTION_4();
        v150[0] = (uint64_t)v146;
        OUTLINED_FUNCTION_56_4(4.8153e-34);
        v149 = OUTLINED_FUNCTION_29(v81, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
        v82 = OUTLINED_FUNCTION_62_2();
        v149 = OUTLINED_FUNCTION_13_16(v82, v83);
        v84 = v150;
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_24();
        v80[6] = 2080;
        v85 = OUTLINED_FUNCTION_78_1();
        v149 = OUTLINED_FUNCTION_12_14(v85, v86);
        OUTLINED_FUNCTION_68_1();
        OUTLINED_FUNCTION_12();
        v87 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
        v88 = v141;
        v87(v4, v148);
        v80[11] = 2080;
        OUTLINED_FUNCTION_144();
        v149 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v76, v150);
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_41_3();
        v80[16] = 2080;
        v89 = v148;
        v90 = v134;
        outlined init with copy of UUID?(v88, v134);
        OUTLINED_FUNCTION_7_10(v90, 1, v89);
        if (v57)
        {
          outlined destroy of UUID?(v90);
          OUTLINED_FUNCTION_154();
        }
        else
        {
          v84 = (uint64_t *)UUID.uuidString.getter();
          v87(v90, v89);
        }
        v149 = OUTLINED_FUNCTION_33_9((uint64_t)v84, v127, v150);
        OUTLINED_FUNCTION_68_1();
        OUTLINED_FUNCTION_12();
        OUTLINED_FUNCTION_65_0();
        OUTLINED_FUNCTION_43_8(&dword_1C2E0C000, v128, v79, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s");
        OUTLINED_FUNCTION_30_14();
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_65_0();
      OUTLINED_FUNCTION_1_10();
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v4, v75);
    }
    OUTLINED_FUNCTION_112();
    goto LABEL_45;
  }
  v141 = v14;
  if (one-time initialization token for common != -1)
    swift_once();
  v59 = OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_84_0(v59, (uint64_t)static Logger.common);
  v60 = *(_QWORD *)(v147 + 16);
  v61 = v148;
  OUTLINED_FUNCTION_120(v3, (uint64_t)v146);
  OUTLINED_FUNCTION_120(v1, v142);
  OUTLINED_FUNCTION_118(v145);
  OUTLINED_FUNCTION_21_7();
  v62 = Logger.logObject.getter();
  v63 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_116(v63))
  {
    LODWORD(v145) = v60;
    v146 = v62;
    v64 = OUTLINED_FUNCTION_4();
    v65 = OUTLINED_FUNCTION_4();
    v142 = v65;
    v150[0] = v65;
    *(_DWORD *)v64 = 136316162;
    v149 = OUTLINED_FUNCTION_29(v65, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
    v66 = OUTLINED_FUNCTION_62_2();
    v149 = OUTLINED_FUNCTION_13_16(v66, v67);
    OUTLINED_FUNCTION_4_24();
    swift_bridgeObjectRelease();
    *(_WORD *)(v64 + 12) = 2080;
    v68 = OUTLINED_FUNCTION_115();
    v70 = OUTLINED_FUNCTION_12_14(v68, v69);
    OUTLINED_FUNCTION_81_0(v70);
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_80_0(v3);
    *(_WORD *)(v64 + 22) = 2080;
    OUTLINED_FUNCTION_63_0();
    v149 = OUTLINED_FUNCTION_59_0(v143, v71, v150);
    OUTLINED_FUNCTION_4_24();
    OUTLINED_FUNCTION_41_3();
    *(_WORD *)(v64 + 32) = 2080;
    v72 = OUTLINED_FUNCTION_134();
    v149 = OUTLINED_FUNCTION_12_14(v72, v73);
    OUTLINED_FUNCTION_31_8();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_80_0(v1);
    *(_WORD *)(v64 + 42) = 2080;
    v74 = v141;
    OUTLINED_FUNCTION_60_0((uint64_t)v28);
    OUTLINED_FUNCTION_7_10(v74, 1, v61);
    if (v57)
    {
      OUTLINED_FUNCTION_46_4();
      v111 = 0;
    }
    else
    {
      v111 = OUTLINED_FUNCTION_75_0();
      OUTLINED_FUNCTION_80_0(v74);
    }
    v113 = OUTLINED_FUNCTION_33_9(v111, v112, v150);
    OUTLINED_FUNCTION_18_12(v113);
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_95_0();
    OUTLINED_FUNCTION_125(&dword_1C2E0C000, v146, (os_log_type_t)v145, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v64);
    OUTLINED_FUNCTION_161();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_114(v3);
  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_114(v1);
  OUTLINED_FUNCTION_95_0();

LABEL_45:
  OUTLINED_FUNCTION_0_2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  NSObject *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _WORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _WORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  id v114;
  uint64_t v115;
  os_log_type_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  int v138;
  char *v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151[6];

  OUTLINED_FUNCTION_37_8();
  v138 = v4;
  v144 = v5;
  v145 = v6;
  v147 = v7;
  v148 = v8;
  v142 = v9;
  v11 = v10;
  v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_2_12();
  v135 = v15;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v16);
  v132 = (char *)&v129 - v17;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_13_3();
  v131 = v19;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v20);
  v139 = (char *)&v129 - v21;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v22);
  v137 = (char *)&v129 - v23;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v24);
  v136 = (uint64_t)&v129 - v25;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v26);
  v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v129 - v27);
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v28);
  v143 = ((char *)&v129 - v29);
  v146 = OUTLINED_FUNCTION_1_12();
  v30 = *(_QWORD *)(v146 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v31);
  OUTLINED_FUNCTION_2_12();
  v140 = v32;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v33);
  OUTLINED_FUNCTION_13_3();
  v130 = v34;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v35);
  v133 = (uint64_t)&v129 - v36;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v37);
  v134 = (uint64_t)&v129 - v38;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v39);
  OUTLINED_FUNCTION_52_0();
  MEMORY[0x1E0C80A78](v40);
  OUTLINED_FUNCTION_53_4();
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_51_2();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_86_1();
  v43 = one-time initialization token for kCamActionMap;
  swift_retain();
  if (v43 != -1)
    swift_once();
  LOBYTE(v149) = *(_BYTE *)(v13 + 57);
  lazy protocol witness table accessor for type AutoConfirmAction and conformance AutoConfirmAction();
  OUTLINED_FUNCTION_157();
  v44 = OUTLINED_FUNCTION_155();
  outlined destroy of AnyHashable((uint64_t)v151);
  v45 = *(_QWORD *)(v13 + 40);
  v46 = *(_QWORD *)(v13 + 48);
  swift_bridgeObjectRetain();
  v47 = specialized static CamLoggingProtocol<>.map(action:responseStatusCode:enforcer:)(v44 | ((HIDWORD(v44) & 1) << 32), v11, v45, v46);
  OUTLINED_FUNCTION_24();
  swift_release();
  if (!v47)
  {
    if (one-time initialization token for common != -1)
      swift_once();
    v62 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_84_0(v62, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_123(v2, (uint64_t)v147);
    OUTLINED_FUNCTION_123(v1, v142);
    OUTLINED_FUNCTION_108(v145);
    v63 = v148;
    OUTLINED_FUNCTION_21_7();
    v47 = Logger.logObject.getter();
    v64 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_132(v64))
    {
      LODWORD(v145) = v13;
      v147 = v47;
      v65 = OUTLINED_FUNCTION_4();
      v142 = OUTLINED_FUNCTION_4();
      v151[0] = v142;
      OUTLINED_FUNCTION_56_4(4.8154e-34);
      v149 = OUTLINED_FUNCTION_29(v66, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      v67 = OUTLINED_FUNCTION_69_2();
      v149 = OUTLINED_FUNCTION_14_14(v67, v68);
      OUTLINED_FUNCTION_4_24();
      swift_bridgeObjectRelease();
      *(_WORD *)(v65 + 12) = 2080;
      v69 = OUTLINED_FUNCTION_115();
      v71 = OUTLINED_FUNCTION_38_5(v69, v70);
      OUTLINED_FUNCTION_55_3(v71);
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_91_1(v2);
      *(_WORD *)(v65 + 22) = 2080;
      swift_bridgeObjectRetain();
      v149 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v144, v63, v151);
      OUTLINED_FUNCTION_4_24();
      OUTLINED_FUNCTION_41_3();
      *(_WORD *)(v65 + 32) = 2080;
      v72 = OUTLINED_FUNCTION_50_4();
      v74 = OUTLINED_FUNCTION_38_5(v72, v73);
      OUTLINED_FUNCTION_55_3(v74);
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_91_1(v1);
      *(_WORD *)(v65 + 42) = 2080;
      v75 = v135;
      OUTLINED_FUNCTION_60_0((uint64_t)v143);
      OUTLINED_FUNCTION_6_18(v75);
      if (v61)
      {
        OUTLINED_FUNCTION_46_4();
        v109 = 0;
      }
      else
      {
        v109 = OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_91_1(v75);
      }
      v111 = OUTLINED_FUNCTION_33_9(v109, v110, v151);
      OUTLINED_FUNCTION_73_1(v111);
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_82_1();
      OUTLINED_FUNCTION_125(&dword_1C2E0C000, v147, (os_log_type_t)v145, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v65);
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_129(v2);
    OUTLINED_FUNCTION_1_10();
    OUTLINED_FUNCTION_129(v1);
    OUTLINED_FUNCTION_57_4();
    goto LABEL_40;
  }
  v48 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D993C8]));
  -[NSObject setResponseGenerated:](v48, sel_setResponseGenerated_, v47);
  v49 = v146;
  if (!v48)
  {
    if (one-time initialization token for common != -1)
      swift_once();
    v76 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v76, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_36_8(v3, (uint64_t)v147, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
    OUTLINED_FUNCTION_136(v145);
    OUTLINED_FUNCTION_21_7();
    Logger.logObject.getter();
    v77 = OUTLINED_FUNCTION_58_3();
    if (OUTLINED_FUNCTION_22_8((os_log_type_t)v77))
    {
      LODWORD(v147) = v77;
      v143 = v47;
      v78 = (_WORD *)OUTLINED_FUNCTION_4();
      v145 = OUTLINED_FUNCTION_4();
      v151[0] = v145;
      OUTLINED_FUNCTION_56_4(4.8153e-34);
      v149 = OUTLINED_FUNCTION_29(v79, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      v80 = OUTLINED_FUNCTION_69_2();
      v149 = OUTLINED_FUNCTION_14_14(v80, v81);
      OUTLINED_FUNCTION_4_24();
      OUTLINED_FUNCTION_24();
      v78[6] = 2080;
      v82 = OUTLINED_FUNCTION_78_1();
      v149 = OUTLINED_FUNCTION_38_5(v82, v83);
      OUTLINED_FUNCTION_68_1();
      OUTLINED_FUNCTION_12();
      v84 = v141;
      OUTLINED_FUNCTION_50_2(v3);
      v78[11] = 2080;
      OUTLINED_FUNCTION_77();
      v149 = OUTLINED_FUNCTION_76_1();
      OUTLINED_FUNCTION_4_24();
      OUTLINED_FUNCTION_41_3();
      v78[16] = 2080;
      v85 = (uint64_t)v132;
      OUTLINED_FUNCTION_97_0((uint64_t)v84);
      OUTLINED_FUNCTION_6_18(v85);
      if (v61)
      {
        OUTLINED_FUNCTION_65_0();
        OUTLINED_FUNCTION_154();
      }
      else
      {
        OUTLINED_FUNCTION_50_4();
        OUTLINED_FUNCTION_48_5();
      }
      v149 = OUTLINED_FUNCTION_33_9((uint64_t)&v150, v125, v151);
      OUTLINED_FUNCTION_68_1();
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_82_1();
      OUTLINED_FUNCTION_43_8(&dword_1C2E0C000, v126, (os_log_type_t)v147, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s");
      OUTLINED_FUNCTION_30_14();
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_82_1();
    OUTLINED_FUNCTION_1_10();
    v107 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8);
    v108 = v3;
    goto LABEL_39;
  }
  v50 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D993D0]));
  v51 = v30;
  if (!v50)
  {
    if (one-time initialization token for common != -1)
      swift_once();
    v86 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v86, (uint64_t)static Logger.common);
    v87 = v134;
    OUTLINED_FUNCTION_36_8(v134, (uint64_t)v147, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
    v88 = v136;
    OUTLINED_FUNCTION_60_0(v145);
    OUTLINED_FUNCTION_21_7();
    Logger.logObject.getter();
    v89 = OUTLINED_FUNCTION_58_3();
    if (OUTLINED_FUNCTION_22_8((os_log_type_t)v89))
    {
      LODWORD(v145) = v89;
      v147 = v48;
      v143 = v47;
      v90 = (_WORD *)OUTLINED_FUNCTION_4();
      v151[0] = OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_153(4.8153e-34);
      v149 = OUTLINED_FUNCTION_29(v91, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      v92 = OUTLINED_FUNCTION_69_2();
      v149 = OUTLINED_FUNCTION_14_14(v92, v93);
      OUTLINED_FUNCTION_4_24();
      swift_bridgeObjectRelease();
      v90[6] = 2080;
      v94 = OUTLINED_FUNCTION_50_4();
      v96 = OUTLINED_FUNCTION_38_5(v94, v95);
      OUTLINED_FUNCTION_152(v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_12();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v87, v146);
      v90[11] = 2080;
      v97 = v148;
      swift_bridgeObjectRetain();
      v149 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v144, v97, v151);
      OUTLINED_FUNCTION_4_24();
      OUTLINED_FUNCTION_41_3();
      v90[16] = 2080;
      v98 = v146;
      v99 = v88;
      v100 = v131;
      OUTLINED_FUNCTION_60_0(v99);
      OUTLINED_FUNCTION_7_10(v100, 1, v98);
      if (v61)
      {
        OUTLINED_FUNCTION_46_4();
        OUTLINED_FUNCTION_149();
      }
      else
      {
        OUTLINED_FUNCTION_75_0();
        OUTLINED_FUNCTION_47_6();
      }
      v149 = OUTLINED_FUNCTION_33_9(v97, v127, v151);
      OUTLINED_FUNCTION_31_8();
      OUTLINED_FUNCTION_12();
      outlined destroy of UUID?(v136);
      OUTLINED_FUNCTION_44_5(&dword_1C2E0C000, v128, (os_log_type_t)v145, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_46_4();
    OUTLINED_FUNCTION_1_10();
    v107 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8);
    v108 = v87;
LABEL_39:
    OUTLINED_FUNCTION_25_5(v108, v107);
LABEL_40:

    goto LABEL_49;
  }
  v52 = v50;
  v143 = v47;
  OUTLINED_FUNCTION_29((uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  v141 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
  v141(v0, (uint64_t)v147, v49);
  v53 = OUTLINED_FUNCTION_119();
  OUTLINED_FUNCTION_7_18((uint64_t)v53, sel_setCamId_);

  v54 = (void *)MEMORY[0x1C3BCA844](v144, v148);
  OUTLINED_FUNCTION_7_18((uint64_t)v54, sel_setResultCandidateId_);

  OUTLINED_FUNCTION_70_1(v55, sel_setRequestId_);
  if ((AFDeviceSupportsSAE() & 1) != 0)
  {
    OUTLINED_FUNCTION_36_8(v0, v142, v141);
    v56 = OUTLINED_FUNCTION_119();
    OUTLINED_FUNCTION_7_18((uint64_t)v56, sel_setSubRequestId_);

  }
  v57 = (uint64_t)v139;
  if (one-time initialization token for kLoggingFeatureName != -1)
    swift_once();
  v58 = specialized Dictionary.subscript.getter(v138, (uint64_t)kLoggingFeatureName._rawValue);
  v59 = v140;
  if ((v58 & 0x100000000) == 0)
    OUTLINED_FUNCTION_122(v58, sel_setFeature_);
  v60 = (uint64_t)v137;
  OUTLINED_FUNCTION_160(v145);
  OUTLINED_FUNCTION_6_18(v60);
  if (!v61)
  {
    v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
    v102 = v51;
    v103 = v133;
    OUTLINED_FUNCTION_36_8(v133, v60, v101);
    OUTLINED_FUNCTION_103(v0, v103);
    v104 = OUTLINED_FUNCTION_119();
    OUTLINED_FUNCTION_35_7((uint64_t)v104, sel_setTrpId_);

    v105 = *(uint64_t (**)(uint64_t, uint64_t))(v102 + 8);
    v106 = v103;
    v51 = v102;
LABEL_41:
    OUTLINED_FUNCTION_25_5(v106, v105);
    goto LABEL_42;
  }
  OUTLINED_FUNCTION_95_0();
  UUID.init(uuidString:)();
  OUTLINED_FUNCTION_6_18(v57);
  if (!v61)
  {
    v112 = v130;
    OUTLINED_FUNCTION_36_8(v130, v57, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32));
    OUTLINED_FUNCTION_103(v0, v112);
    v113 = OUTLINED_FUNCTION_119();
    OUTLINED_FUNCTION_35_7((uint64_t)v113, sel_setTrpId_);

    v105 = *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8);
    v106 = v112;
    goto LABEL_41;
  }
  OUTLINED_FUNCTION_57_4();
LABEL_42:
  -[NSObject setEventMetadata:](v48, sel_setEventMetadata_, v52);
  v114 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
  objc_msgSend(v114, sel_emitMessage_, v48);
  OUTLINED_FUNCTION_131();
  if (one-time initialization token for common != -1)
    swift_once();
  v115 = OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_84_0(v115, (uint64_t)static Logger.common);
  OUTLINED_FUNCTION_103(v59, (uint64_t)v147);
  OUTLINED_FUNCTION_21_7();
  Logger.logObject.getter();
  v116 = OUTLINED_FUNCTION_6_6();
  if (OUTLINED_FUNCTION_5_7(v116))
  {
    OUTLINED_FUNCTION_4();
    v145 = OUTLINED_FUNCTION_4();
    v151[0] = v145;
    OUTLINED_FUNCTION_56_4(4.8152e-34);
    v149 = OUTLINED_FUNCTION_29(v117, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
    v142 = v51;
    v118 = OUTLINED_FUNCTION_69_2();
    v147 = v48;
    v149 = OUTLINED_FUNCTION_14_14(v118, v119);
    OUTLINED_FUNCTION_4_24();
    OUTLINED_FUNCTION_13();
    v120 = OUTLINED_FUNCTION_27_13();
    v149 = OUTLINED_FUNCTION_38_5(v120, v121);
    OUTLINED_FUNCTION_31_8();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_25_5(v59, *(uint64_t (**)(uint64_t, uint64_t))(v142 + 8));
    OUTLINED_FUNCTION_28_12();
    v149 = OUTLINED_FUNCTION_59_0(v144, v122, v151);
    OUTLINED_FUNCTION_4_24();
    OUTLINED_FUNCTION_41_3();
    OUTLINED_FUNCTION_29_13(&dword_1C2E0C000, v123, v124, "Successfully emitted log message : %s for camId : %s, rcId: %s");
    OUTLINED_FUNCTION_79_1();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_1_10();

  OUTLINED_FUNCTION_25_5(v59, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
  OUTLINED_FUNCTION_85_1();

LABEL_49:
  OUTLINED_FUNCTION_0_2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _WORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  os_log_type_t v85;
  _WORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138[6];

  OUTLINED_FUNCTION_37_8();
  v125 = v5;
  v132 = v7;
  v133 = v6;
  v131 = v8;
  v135 = v9;
  v129 = v10;
  v12 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_2_12();
  v124 = v14;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v15);
  v121 = (char *)&v118 - v16;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v17);
  v120 = (char *)&v118 - v18;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_13_3();
  v122 = v20;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_87_1();
  MEMORY[0x1E0C80A78](v22);
  v127 = (uint64_t)&v118 - v23;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v24);
  v128 = (char *)&v118 - v25;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v26);
  v130 = (char *)&v118 - v27;
  v134 = OUTLINED_FUNCTION_1_12();
  v28 = *(_QWORD *)(v134 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v29);
  OUTLINED_FUNCTION_2_12();
  v126 = v30;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v31);
  v119 = (char *)&v118 - v32;
  OUTLINED_FUNCTION_3_7();
  v34 = MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v118 - v35;
  MEMORY[0x1E0C80A78](v34);
  v123 = (uint64_t)&v118 - v37;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v38);
  OUTLINED_FUNCTION_51_2();
  MEMORY[0x1E0C80A78](v39);
  OUTLINED_FUNCTION_53_4();
  MEMORY[0x1E0C80A78](v40);
  OUTLINED_FUNCTION_52_0();
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_86_1();
  if (one-time initialization token for kCamActionMap != -1)
    swift_once();
  v42 = HIBYTE(v12);
  LOBYTE(v136) = v12;
  lazy protocol witness table accessor for type AutoConfirmAction and conformance AutoConfirmAction();
  OUTLINED_FUNCTION_157();
  v43 = OUTLINED_FUNCTION_155();
  outlined destroy of AnyHashable((uint64_t)v138);
  v44 = (char *)specialized static CamLoggingProtocol<>.map(action:responseStatusCode:enforcer:)(v43 | ((HIDWORD(v43) & 1) << 32), v42, 0, 0);
  if (v44)
  {
    v45 = v44;
    v46 = (char *)OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D993C8]));
    v130 = v45;
    objc_msgSend(v46, sel_setResponseGenerated_, v45);
    if (v46)
    {
      v47 = OUTLINED_FUNCTION_6_17(objc_allocWithZone(MEMORY[0x1E0D993D0]));
      v48 = v133;
      v49 = v28;
      if (v47)
      {
        v50 = v47;
        v128 = v46;
        OUTLINED_FUNCTION_29((uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        OUTLINED_FUNCTION_39_4(v2, (uint64_t)v135);
        v51 = OUTLINED_FUNCTION_38_9();
        OUTLINED_FUNCTION_7_18((uint64_t)v51, sel_setCamId_);

        v52 = (void *)MEMORY[0x1C3BCA844](v131, v48);
        OUTLINED_FUNCTION_7_18((uint64_t)v52, sel_setResultCandidateId_);

        OUTLINED_FUNCTION_70_1(v53, sel_setRequestId_);
        if ((AFDeviceSupportsSAE() & 1) != 0)
        {
          OUTLINED_FUNCTION_39_4(v2, v129);
          v54 = OUTLINED_FUNCTION_38_9();
          OUTLINED_FUNCTION_7_18((uint64_t)v54, sel_setSubRequestId_);

        }
        if (one-time initialization token for kLoggingFeatureName != -1)
          swift_once();
        v55 = specialized Dictionary.subscript.getter(v125, (uint64_t)kLoggingFeatureName._rawValue);
        v56 = v126;
        if ((v55 & 0x100000000) == 0)
          OUTLINED_FUNCTION_122(v55, sel_setFeature_);
        OUTLINED_FUNCTION_108(v132);
        OUTLINED_FUNCTION_6_18((uint64_t)v0);
        if (v57)
        {
          OUTLINED_FUNCTION_57_4();
          v0 = v122;
          UUID.init(uuidString:)();
          OUTLINED_FUNCTION_6_18((uint64_t)v0);
          if (v57)
          {
            v58 = OUTLINED_FUNCTION_57_4();
LABEL_41:
            OUTLINED_FUNCTION_111(v58, sel_setEventMetadata_);
            v103 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
            OUTLINED_FUNCTION_135(v103, sel_emitMessage_);
            OUTLINED_FUNCTION_131();
            if (one-time initialization token for common != -1)
              swift_once();
            v104 = OUTLINED_FUNCTION_14_1();
            __swift_project_value_buffer(v104, (uint64_t)static Logger.common);
            OUTLINED_FUNCTION_39_4(v56, (uint64_t)v135);
            OUTLINED_FUNCTION_21_7();
            Logger.logObject.getter();
            v105 = OUTLINED_FUNCTION_6_6();
            if (OUTLINED_FUNCTION_5_7(v105))
            {
              OUTLINED_FUNCTION_4();
              v135 = OUTLINED_FUNCTION_4();
              v138[0] = (uint64_t)v135;
              OUTLINED_FUNCTION_56_4(4.8152e-34);
              v136 = OUTLINED_FUNCTION_29(v106, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
              v107 = OUTLINED_FUNCTION_69_2();
              v132 = v49;
              v136 = OUTLINED_FUNCTION_14_14(v107, v108);
              OUTLINED_FUNCTION_4_24();
              OUTLINED_FUNCTION_13();
              v109 = OUTLINED_FUNCTION_27_13();
              v136 = OUTLINED_FUNCTION_38_5(v109, v110);
              OUTLINED_FUNCTION_31_8();
              OUTLINED_FUNCTION_12();
              OUTLINED_FUNCTION_25_5(v56, *(uint64_t (**)(uint64_t, uint64_t))(v132 + 8));
              OUTLINED_FUNCTION_28_12();
              v136 = OUTLINED_FUNCTION_59_0(v131, v111, v138);
              OUTLINED_FUNCTION_4_24();
              OUTLINED_FUNCTION_41_3();
              OUTLINED_FUNCTION_29_13(&dword_1C2E0C000, v112, v113, "Successfully emitted log message : %s for camId : %s, rcId: %s");
              OUTLINED_FUNCTION_79_1();
              OUTLINED_FUNCTION_3();
            }
            OUTLINED_FUNCTION_1_10();

            OUTLINED_FUNCTION_25_5(v56, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
            OUTLINED_FUNCTION_85_1();

            goto LABEL_48;
          }
          v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
          v36 = v119;
        }
        else
        {
          v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
        }
        OUTLINED_FUNCTION_36_8((uint64_t)v36, (uint64_t)v0, v96);
        OUTLINED_FUNCTION_39_4(v2, (uint64_t)v36);
        v102 = OUTLINED_FUNCTION_38_9();
        OUTLINED_FUNCTION_35_7((uint64_t)v102, sel_setTrpId_);

        v58 = OUTLINED_FUNCTION_25_5((uint64_t)v36, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
        goto LABEL_41;
      }
      if (one-time initialization token for common != -1)
        swift_once();
      v82 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v82, (uint64_t)static Logger.common);
      v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
      v84 = v123;
      OUTLINED_FUNCTION_36_8(v123, (uint64_t)v135, v83);
      OUTLINED_FUNCTION_118(v132);
      OUTLINED_FUNCTION_21_7();
      Logger.logObject.getter();
      v85 = OUTLINED_FUNCTION_58_3();
      if (OUTLINED_FUNCTION_22_8(v85))
      {
        v128 = v46;
        v86 = (_WORD *)OUTLINED_FUNCTION_4();
        v135 = OUTLINED_FUNCTION_4();
        v138[0] = (uint64_t)v135;
        OUTLINED_FUNCTION_153(4.8153e-34);
        v136 = OUTLINED_FUNCTION_29(v87, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
        v88 = OUTLINED_FUNCTION_69_2();
        v136 = OUTLINED_FUNCTION_14_14(v88, v89);
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_8();
        v86[6] = 2080;
        v90 = OUTLINED_FUNCTION_107();
        v92 = OUTLINED_FUNCTION_38_5(v90, v91);
        OUTLINED_FUNCTION_152(v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_12();
        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v84, v134);
        v86[11] = 2080;
        OUTLINED_FUNCTION_63_0();
        v136 = OUTLINED_FUNCTION_59_0(v131, v93, v138);
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_41_3();
        v86[16] = 2080;
        v94 = v134;
        v95 = (uint64_t)v120;
        OUTLINED_FUNCTION_60_0(v127);
        OUTLINED_FUNCTION_7_10(v95, 1, v94);
        if (v57)
        {
          OUTLINED_FUNCTION_46_4();
          OUTLINED_FUNCTION_149();
        }
        else
        {
          OUTLINED_FUNCTION_75_0();
          OUTLINED_FUNCTION_47_6();
        }
        v136 = OUTLINED_FUNCTION_33_9(v84, v116, v138);
        OUTLINED_FUNCTION_31_8();
        OUTLINED_FUNCTION_12();
        outlined destroy of UUID?(v127);
        OUTLINED_FUNCTION_44_5(&dword_1C2E0C000, v117, v85, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s");
        OUTLINED_FUNCTION_30_14();
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_156();
      OUTLINED_FUNCTION_1_10();
      v97 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8);
      v98 = v84;
    }
    else
    {
      if (one-time initialization token for common != -1)
        swift_once();
      v73 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v73, (uint64_t)static Logger.common);
      OUTLINED_FUNCTION_36_8(v4, (uint64_t)v135, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
      OUTLINED_FUNCTION_160(v132);
      OUTLINED_FUNCTION_21_7();
      Logger.logObject.getter();
      v74 = OUTLINED_FUNCTION_58_3();
      if (OUTLINED_FUNCTION_22_8((os_log_type_t)v74))
      {
        LODWORD(v135) = v74;
        v75 = (_WORD *)OUTLINED_FUNCTION_4();
        v132 = OUTLINED_FUNCTION_4();
        v138[0] = v132;
        OUTLINED_FUNCTION_56_4(4.8153e-34);
        v136 = OUTLINED_FUNCTION_29(v76, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
        v77 = OUTLINED_FUNCTION_69_2();
        v136 = OUTLINED_FUNCTION_14_14(v77, v78);
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_24();
        v75[6] = 2080;
        v79 = OUTLINED_FUNCTION_78_1();
        v136 = OUTLINED_FUNCTION_38_5(v79, v80);
        OUTLINED_FUNCTION_68_1();
        OUTLINED_FUNCTION_12();
        OUTLINED_FUNCTION_50_2(v4);
        v75[11] = 2080;
        OUTLINED_FUNCTION_77();
        v136 = OUTLINED_FUNCTION_76_1();
        OUTLINED_FUNCTION_4_24();
        OUTLINED_FUNCTION_41_3();
        v75[16] = 2080;
        v81 = (uint64_t)v121;
        OUTLINED_FUNCTION_97_0((uint64_t)v128);
        OUTLINED_FUNCTION_6_18(v81);
        if (v57)
        {
          OUTLINED_FUNCTION_65_0();
          OUTLINED_FUNCTION_154();
        }
        else
        {
          OUTLINED_FUNCTION_50_4();
          OUTLINED_FUNCTION_48_5();
        }
        v136 = OUTLINED_FUNCTION_33_9((uint64_t)&v137, v114, v138);
        OUTLINED_FUNCTION_68_1();
        OUTLINED_FUNCTION_12();
        OUTLINED_FUNCTION_82_1();
        OUTLINED_FUNCTION_43_8(&dword_1C2E0C000, v115, (os_log_type_t)v135, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s");
        OUTLINED_FUNCTION_30_14();
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_95_0();
      OUTLINED_FUNCTION_1_10();
      v97 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8);
      v98 = v4;
    }
    OUTLINED_FUNCTION_25_5(v98, v97);
    OUTLINED_FUNCTION_85_1();
    goto LABEL_48;
  }
  if (one-time initialization token for common != -1)
    swift_once();
  v59 = OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_84_0(v59, (uint64_t)static Logger.common);
  OUTLINED_FUNCTION_123(v3, (uint64_t)v135);
  OUTLINED_FUNCTION_123(v1, v129);
  OUTLINED_FUNCTION_108(v132);
  OUTLINED_FUNCTION_21_7();
  v60 = Logger.logObject.getter();
  v61 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_132(v61))
  {
    LODWORD(v132) = v43;
    v135 = v60;
    v62 = OUTLINED_FUNCTION_4();
    v129 = OUTLINED_FUNCTION_4();
    v138[0] = v129;
    OUTLINED_FUNCTION_56_4(4.8154e-34);
    v136 = OUTLINED_FUNCTION_29(v63, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
    v64 = OUTLINED_FUNCTION_69_2();
    v136 = OUTLINED_FUNCTION_14_14(v64, v65);
    OUTLINED_FUNCTION_4_24();
    swift_bridgeObjectRelease();
    *(_WORD *)(v62 + 12) = 2080;
    v66 = OUTLINED_FUNCTION_115();
    v68 = OUTLINED_FUNCTION_38_5(v66, v67);
    OUTLINED_FUNCTION_55_3(v68);
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_91_1(v3);
    *(_WORD *)(v62 + 22) = 2080;
    OUTLINED_FUNCTION_77();
    v136 = OUTLINED_FUNCTION_76_1();
    OUTLINED_FUNCTION_4_24();
    OUTLINED_FUNCTION_41_3();
    *(_WORD *)(v62 + 32) = 2080;
    v69 = OUTLINED_FUNCTION_134();
    v136 = OUTLINED_FUNCTION_38_5(v69, v70);
    v71 = (uint64_t)v130;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_91_1(v1);
    *(_WORD *)(v62 + 42) = 2080;
    v72 = v124;
    OUTLINED_FUNCTION_60_0(v71);
    OUTLINED_FUNCTION_6_18(v72);
    if (v57)
    {
      OUTLINED_FUNCTION_46_4();
      v99 = 0;
    }
    else
    {
      v99 = OUTLINED_FUNCTION_75_0();
      OUTLINED_FUNCTION_91_1(v72);
    }
    v101 = OUTLINED_FUNCTION_33_9(v99, v100, v138);
    OUTLINED_FUNCTION_73_1(v101);
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_65_0();
    OUTLINED_FUNCTION_125(&dword_1C2E0C000, v135, (os_log_type_t)v132, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v62);
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_129(v3);
  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_129(v1);
  OUTLINED_FUNCTION_57_4();

LABEL_48:
  OUTLINED_FUNCTION_0_2();
}

void specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  void (*v56)(char *, os_log_t, uint64_t);
  id v57;
  void *v58;
  id v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, os_log_t, uint64_t);
  uint64_t v67;
  unint64_t v68;
  NSObject *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  id v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  id v122;
  id v123;
  uint64_t v124;
  os_log_type_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  os_log_t v134;
  id v135;
  unint64_t v136;
  os_log_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  int v143;
  char *v144;
  id v145;
  id v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  os_log_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156[2];

  v143 = a7;
  v150 = a5;
  v151 = a6;
  v148 = a2;
  v149 = a4;
  v152 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v140 = (uint64_t)&v138 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v139 = (uint64_t)&v138 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v141 = (char *)&v138 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v138 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v142 = (uint64_t)&v138 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v147 = (char *)&v138 - v24;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v138 - v25;
  v27 = type metadata accessor for UUID();
  v153 = *(_QWORD *)(v27 - 8);
  v154 = v27;
  v28 = MEMORY[0x1E0C80A78](v27);
  v144 = (char *)&v138 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v138 = (char *)&v138 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v138 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v37 = (char *)&v138 - v36;
  v38 = MEMORY[0x1E0C80A78](v35);
  v40 = (char *)&v138 - v39;
  v41 = MEMORY[0x1E0C80A78](v38);
  v43 = (char *)&v138 - v42;
  v44 = MEMORY[0x1E0C80A78](v41);
  v46 = (char *)&v138 - v45;
  MEMORY[0x1E0C80A78](v44);
  v48 = (char *)&v138 - v47;
  v49 = static UncertaintyPromptRequestLogger.map(from:)(a1);
  if (v49)
  {
    v50 = v49;
    v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993C8]), sel_init);
    v145 = v50;
    objc_msgSend(v51, sel_setRequestReceived_, v50);
    v146 = v51;
    if (v51)
    {
      v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993D0]), sel_init);
      v53 = v154;
      v54 = v150;
      if (v52)
      {
        v55 = v52;
        type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        v56 = *(void (**)(char *, os_log_t, uint64_t))(v153 + 16);
        v56(v40, v152, v53);
        v57 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v55, sel_setCamId_, v57);

        v58 = (void *)MEMORY[0x1C3BCA844](v149, v54);
        objc_msgSend(v55, sel_setResultCandidateId_, v58);

        objc_msgSend(v55, sel_setRequestId_, 0);
        if ((AFDeviceSupportsSAE() & 1) != 0)
        {
          v56(v40, (os_log_t)v148, v53);
          v59 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v55, sel_setSubRequestId_, v59);

        }
        if (one-time initialization token for kLoggingFeatureName != -1)
          swift_once();
        v60 = specialized Dictionary.subscript.getter(v143, (uint64_t)kLoggingFeatureName._rawValue);
        v61 = v144;
        if ((v60 & 0x100000000) == 0)
          objc_msgSend(v55, sel_setFeature_, v60);
        outlined init with copy of UUID?(v151, (uint64_t)v20);
        if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v53) == 1)
        {
          outlined destroy of UUID?((uint64_t)v20);
          v62 = (uint64_t)v141;
          UUID.init(uuidString:)();
          if (__swift_getEnumTagSinglePayload(v62, 1, v53) == 1)
          {
            outlined destroy of UUID?(v62);
            v63 = v153;
          }
          else
          {
            v63 = v153;
            v121 = v138;
            (*(void (**)(char *, uint64_t, uint64_t))(v153 + 32))(v138, v62, v53);
            v56(v40, (os_log_t)v121, v53);
            v122 = SISchemaUUID.__allocating_init(nsuuid:)();
            objc_msgSend(v55, sel_setTrpId_, v122);

            (*(void (**)(char *, uint64_t))(v63 + 8))(v121, v53);
          }
        }
        else
        {
          v116 = v153;
          (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v34, v20, v53);
          v56(v40, (os_log_t)v34, v53);
          v117 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v55, sel_setTrpId_, v117);

          v118 = v34;
          v63 = v116;
          (*(void (**)(char *, uint64_t))(v116 + 8))(v118, v53);
        }
        v123 = v146;
        objc_msgSend(v146, sel_setEventMetadata_, v55);
        objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, v123);
        swift_unknownObjectRelease();
        if (one-time initialization token for common != -1)
          swift_once();
        v124 = type metadata accessor for Logger();
        __swift_project_value_buffer(v124, (uint64_t)static Logger.common);
        v56(v61, v152, v53);
        swift_bridgeObjectRetain_n();
        v87 = Logger.logObject.getter();
        v125 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v87, v125))
        {
          swift_bridgeObjectRelease_n();

          (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v53);
          return;
        }
        v126 = v61;
        v127 = swift_slowAlloc();
        v153 = swift_slowAlloc();
        v156[0] = v153;
        *(_DWORD *)v127 = 136315650;
        v155 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
        v128 = String.init<A>(describing:)();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v129, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v127 + 12) = 2080;
        v130 = UUID.uuidString.getter();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v131, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v126, v154);
        *(_WORD *)(v127 + 22) = 2080;
        swift_bridgeObjectRetain();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v54, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2E0C000, v87, v125, "Successfully emitted log message : %s for camId : %s, rcId: %s", (uint8_t *)v127, 0x20u);
        v132 = v153;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v132, -1, -1);
        MEMORY[0x1C3BCB4A4](v127, -1, -1);

        goto LABEL_46;
      }
      if (one-time initialization token for common != -1)
        swift_once();
      v101 = type metadata accessor for Logger();
      __swift_project_value_buffer(v101, (uint64_t)static Logger.common);
      v102 = v153;
      (*(void (**)(char *, os_log_t, uint64_t))(v153 + 16))(v37, v152, v53);
      v103 = v142;
      outlined init with copy of UUID?(v151, v142);
      swift_bridgeObjectRetain_n();
      v87 = Logger.logObject.getter();
      v104 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v104))
      {
        v105 = swift_slowAlloc();
        v152 = (os_log_t)swift_slowAlloc();
        v156[0] = (uint64_t)v152;
        *(_DWORD *)v105 = 136315906;
        v155 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
        v106 = String.init<A>(describing:)();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v105 + 12) = 2080;
        v108 = UUID.uuidString.getter();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v110 = *(void (**)(char *, uint64_t))(v102 + 8);
        v110(v37, v154);
        *(_WORD *)(v105 + 22) = 2080;
        swift_bridgeObjectRetain();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v54, v156);
        v111 = v154;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v105 + 32) = 2080;
        v112 = v142;
        v113 = v139;
        outlined init with copy of UUID?(v142, v139);
        if (__swift_getEnumTagSinglePayload(v113, 1, v111) == 1)
        {
          outlined destroy of UUID?(v113);
          v114 = 0;
          v115 = 0xE000000000000000;
        }
        else
        {
          v114 = UUID.uuidString.getter();
          v115 = v136;
          v110((char *)v113, v111);
        }
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v115, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v112);
        _os_log_impl(&dword_1C2E0C000, v87, v104, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s", (uint8_t *)v105, 0x2Au);
        v137 = v152;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v137, -1, -1);
        MEMORY[0x1C3BCB4A4](v105, -1, -1);

LABEL_46:
        v135 = v146;
LABEL_47:

        return;
      }

      outlined destroy of UUID?(v103);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v102 + 8))(v37, v53);
    }
    else
    {
      v82 = v154;
      v83 = v150;
      if (one-time initialization token for common != -1)
        swift_once();
      v84 = type metadata accessor for Logger();
      __swift_project_value_buffer(v84, (uint64_t)static Logger.common);
      v85 = v153;
      (*(void (**)(char *, os_log_t, uint64_t))(v153 + 16))(v43, v152, v82);
      v86 = (uint64_t)v147;
      outlined init with copy of UUID?(v151, (uint64_t)v147);
      swift_bridgeObjectRetain_n();
      v87 = Logger.logObject.getter();
      v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = swift_slowAlloc();
        v152 = (os_log_t)swift_slowAlloc();
        v156[0] = (uint64_t)v152;
        *(_DWORD *)v89 = 136315906;
        v155 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
        v90 = String.init<A>(describing:)();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v89 + 12) = 2080;
        v92 = UUID.uuidString.getter();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v94 = *(void (**)(char *, uint64_t))(v85 + 8);
        v95 = (uint64_t)v147;
        v94(v43, v154);
        *(_WORD *)(v89 + 22) = 2080;
        swift_bridgeObjectRetain();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v83, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v89 + 32) = 2080;
        v96 = v154;
        v97 = v140;
        outlined init with copy of UUID?(v95, v140);
        if (__swift_getEnumTagSinglePayload(v97, 1, v96) == 1)
        {
          outlined destroy of UUID?(v97);
          v98 = 0;
          v99 = 0xE000000000000000;
        }
        else
        {
          v98 = UUID.uuidString.getter();
          v99 = v133;
          v94((char *)v97, v96);
        }
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v95);
        _os_log_impl(&dword_1C2E0C000, v87, v88, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s", (uint8_t *)v89, 0x2Au);
        v134 = v152;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v134, -1, -1);
        MEMORY[0x1C3BCB4A4](v89, -1, -1);
        v135 = v145;
        goto LABEL_47;
      }

      outlined destroy of UUID?(v86);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v85 + 8))(v43, v82);
    }

    return;
  }
  v147 = v11;
  if (one-time initialization token for common != -1)
    swift_once();
  v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Logger.common);
  v65 = v153;
  v66 = *(void (**)(char *, os_log_t, uint64_t))(v153 + 16);
  v67 = v154;
  v66(v48, v152, v154);
  v66(v46, (os_log_t)v148, v67);
  outlined init with copy of UUID?(v151, (uint64_t)v26);
  v68 = v150;
  swift_bridgeObjectRetain_n();
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v69, (os_log_type_t)v70))
  {
    LODWORD(v151) = v70;
    v152 = v69;
    v71 = swift_slowAlloc();
    v148 = swift_slowAlloc();
    v156[0] = v148;
    *(_DWORD *)v71 = 136316162;
    v155 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
    v72 = String.init<A>(describing:)();
    v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v71 + 12) = 2080;
    v74 = UUID.uuidString.getter();
    v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v76 = *(void (**)(char *, uint64_t))(v65 + 8);
    v76(v48, v67);
    *(_WORD *)(v71 + 22) = 2080;
    swift_bridgeObjectRetain();
    v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v68, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v71 + 32) = 2080;
    v77 = UUID.uuidString.getter();
    v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v76(v46, v67);
    *(_WORD *)(v71 + 42) = 2080;
    v79 = (uint64_t)v147;
    outlined init with copy of UUID?((uint64_t)v26, (uint64_t)v147);
    if (__swift_getEnumTagSinglePayload(v79, 1, v67) == 1)
    {
      outlined destroy of UUID?(v79);
      v80 = 0;
      v81 = 0xE000000000000000;
    }
    else
    {
      v80 = UUID.uuidString.getter();
      v81 = v119;
      v76((char *)v79, v67);
    }
    v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v26);
    v69 = v152;
    _os_log_impl(&dword_1C2E0C000, v152, (os_log_type_t)v151, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v71, 0x34u);
    v120 = v148;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v120, -1, -1);
    MEMORY[0x1C3BCB4A4](v71, -1, -1);
  }
  else
  {
    v100 = *(void (**)(char *, uint64_t))(v65 + 8);
    v100(v48, v67);
    swift_bridgeObjectRelease_n();
    v100(v46, v67);
    outlined destroy of UUID?((uint64_t)v26);
  }

}

void specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)(uint64_t a1, char a2, uint64_t a3, NSObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *rawValue;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  NSObject *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, os_log_t, uint64_t);
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  NSObject *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void (*v94)(char *, uint64_t);
  void (*v95)(_QWORD, _QWORD, _QWORD);
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  char *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void (*v111)(char *, uint64_t);
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  char *v120;
  id v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  id v126;
  uint64_t v127;
  os_log_type_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  os_log_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  char *v150;
  char *v151;
  _QWORD *v152;
  uint64_t v153;
  NSObject *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  os_log_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161[6];

  v149 = a8;
  v155 = a5;
  v156 = a7;
  v158 = a4;
  v159 = a6;
  v153 = a3;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v146 = (uint64_t)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v143 = (uint64_t)&v140 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v142 = (uint64_t)&v140 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v150 = (char *)&v140 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v148 = (uint64_t)&v140 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v147 = (uint64_t)&v140 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v152 = (uint64_t *)((char *)&v140 - v24);
  MEMORY[0x1E0C80A78](v23);
  v154 = ((char *)&v140 - v25);
  v157 = type metadata accessor for UUID();
  v26 = *(_QWORD *)(v157 - 8);
  v27 = MEMORY[0x1E0C80A78](v157);
  v151 = (char *)&v140 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v141 = (char *)&v140 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v144 = (char *)&v140 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v145 = (char *)&v140 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v37 = (char *)&v140 - v36;
  v38 = MEMORY[0x1E0C80A78](v35);
  v40 = (char *)&v140 - v39;
  v41 = MEMORY[0x1E0C80A78](v38);
  v43 = (char *)&v140 - v42;
  MEMORY[0x1E0C80A78](v41);
  v45 = (char *)&v140 - v44;
  v46 = one-time initialization token for kCamActionMap;
  swift_retain();
  if (v46 != -1)
    swift_once();
  rawValue = kCamActionMap._rawValue;
  LOBYTE(v160) = *(_BYTE *)(a1 + 56);
  lazy protocol witness table accessor for type CamAction and conformance CamAction();
  AnyHashable.init<A>(_:)();
  v48 = specialized Dictionary.subscript.getter((uint64_t)v161, (uint64_t)rawValue);
  outlined destroy of AnyHashable((uint64_t)v161);
  v49 = *(_QWORD *)(a1 + 40);
  v50 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  v51 = specialized static CamLoggingProtocol<>.map(action:responseStatusCode:enforcer:)(v48 | ((HIDWORD(v48) & 1) << 32), a2, v49, v50);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v51)
  {
    v64 = v157;
    if (one-time initialization token for common != -1)
      swift_once();
    v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.common);
    v66 = v26;
    v67 = *(void (**)(char *, os_log_t, uint64_t))(v26 + 16);
    v67(v45, v158, v64);
    v67(v43, (os_log_t)v153, v64);
    v68 = (uint64_t)v154;
    outlined init with copy of UUID?(v156, (uint64_t)v154);
    v69 = v159;
    swift_bridgeObjectRetain_n();
    v51 = Logger.logObject.getter();
    v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, (os_log_type_t)v70))
    {
      LODWORD(v156) = v70;
      v158 = v51;
      v71 = swift_slowAlloc();
      v153 = swift_slowAlloc();
      v161[0] = v153;
      *(_DWORD *)v71 = 136316162;
      v160 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      v72 = String.init<A>(describing:)();
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2080;
      v74 = UUID.uuidString.getter();
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v76 = *(void (**)(char *, uint64_t))(v66 + 8);
      v76(v45, v64);
      *(_WORD *)(v71 + 22) = 2080;
      swift_bridgeObjectRetain();
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v69, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v71 + 32) = 2080;
      v77 = UUID.uuidString.getter();
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v76(v43, v64);
      *(_WORD *)(v71 + 42) = 2080;
      v79 = (uint64_t)v154;
      v80 = v146;
      outlined init with copy of UUID?((uint64_t)v154, v146);
      if (__swift_getEnumTagSinglePayload(v80, 1, v64) == 1)
      {
        outlined destroy of UUID?(v80);
        v81 = 0;
        v82 = 0xE000000000000000;
      }
      else
      {
        v81 = UUID.uuidString.getter();
        v82 = v123;
        v76((char *)v80, v64);
      }
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v79);
      v87 = v158;
      _os_log_impl(&dword_1C2E0C000, v158, (os_log_type_t)v156, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v71, 0x34u);
      v124 = v153;
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v124, -1, -1);
      MEMORY[0x1C3BCB4A4](v71, -1, -1);
      goto LABEL_49;
    }
    v99 = *(void (**)(char *, uint64_t))(v66 + 8);
    v99(v45, v64);
    swift_bridgeObjectRelease_n();
    v99(v43, v64);
    outlined destroy of UUID?(v68);
    goto LABEL_36;
  }
  v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993C8]), sel_init);
  -[NSObject setResponseGenerated:](v52, sel_setResponseGenerated_, v51);
  v53 = v157;
  if (!v52)
  {
    v83 = v159;
    v84 = v26;
    if (one-time initialization token for common != -1)
      swift_once();
    v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Logger.common);
    (*(void (**)(char *, os_log_t, uint64_t))(v26 + 16))(v40, v158, v53);
    v86 = (void (*)(_QWORD, _QWORD, _QWORD))v152;
    outlined init with copy of UUID?(v156, (uint64_t)v152);
    swift_bridgeObjectRetain_n();
    v87 = Logger.logObject.getter();
    v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, (os_log_type_t)v88))
    {
      LODWORD(v158) = v88;
      v154 = v51;
      v89 = swift_slowAlloc();
      v156 = swift_slowAlloc();
      v161[0] = v156;
      *(_DWORD *)v89 = 136315906;
      v160 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      v90 = String.init<A>(describing:)();
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v89 + 12) = 2080;
      v92 = UUID.uuidString.getter();
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v94 = *(void (**)(char *, uint64_t))(v84 + 8);
      v95 = (void (*)(_QWORD, _QWORD, _QWORD))v152;
      v94(v40, v53);
      *(_WORD *)(v89 + 22) = 2080;
      swift_bridgeObjectRetain();
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v83, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v89 + 32) = 2080;
      v96 = v143;
      outlined init with copy of UUID?((uint64_t)v95, v143);
      if (__swift_getEnumTagSinglePayload(v96, 1, v53) == 1)
      {
        outlined destroy of UUID?(v96);
        v97 = 0;
        v98 = 0xE000000000000000;
      }
      else
      {
        v97 = UUID.uuidString.getter();
        v98 = v136;
        v94((char *)v96, v53);
      }
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?((uint64_t)v95);
      _os_log_impl(&dword_1C2E0C000, v87, (os_log_type_t)v158, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s", (uint8_t *)v89, 0x2Au);
      v137 = v156;
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v137, -1, -1);
      MEMORY[0x1C3BCB4A4](v89, -1, -1);
      v138 = v154;
      goto LABEL_48;
    }

    outlined destroy of UUID?((uint64_t)v86);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v40, v53);
LABEL_36:

    return;
  }
  v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993D0]), sel_init);
  v55 = v26;
  if (v54)
  {
    v56 = v54;
    v154 = v51;
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    v152 = *(_QWORD **)(v26 + 16);
    ((void (*)(char *, os_log_t, uint64_t))v152)(v37, v158, v53);
    v57 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v56, sel_setCamId_, v57);

    v58 = (void *)MEMORY[0x1C3BCA844](v155, v159);
    objc_msgSend(v56, sel_setResultCandidateId_, v58);

    objc_msgSend(v56, sel_setRequestId_, 0);
    if ((AFDeviceSupportsSAE() & 1) != 0)
    {
      ((void (*)(char *, uint64_t, uint64_t))v152)(v37, v153, v53);
      v59 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v56, sel_setSubRequestId_, v59);

    }
    v60 = (uint64_t)v150;
    if (one-time initialization token for kLoggingFeatureName != -1)
      swift_once();
    v61 = specialized Dictionary.subscript.getter(v149, (uint64_t)kLoggingFeatureName._rawValue);
    v62 = v151;
    if ((v61 & 0x100000000) == 0)
      objc_msgSend(v56, sel_setFeature_, v61);
    v63 = v148;
    outlined init with copy of UUID?(v156, v148);
    if (__swift_getEnumTagSinglePayload(v63, 1, v53) == 1)
    {
      outlined destroy of UUID?(v63);
      UUID.init(uuidString:)();
      if (__swift_getEnumTagSinglePayload(v60, 1, v53) == 1)
      {
        outlined destroy of UUID?(v60);
      }
      else
      {
        v125 = v141;
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v141, v60, v53);
        ((void (*)(char *, char *, uint64_t))v152)(v37, v125, v53);
        v126 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v56, sel_setTrpId_, v126);

        (*(void (**)(char *, uint64_t))(v55 + 8))(v125, v53);
      }
    }
    else
    {
      v118 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 32);
      v119 = v55;
      v120 = v144;
      v118(v144, v63, v53);
      ((void (*)(char *, char *, uint64_t))v152)(v37, v120, v53);
      v121 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v56, sel_setTrpId_, v121);

      v122 = v120;
      v55 = v119;
      (*(void (**)(char *, uint64_t))(v119 + 8))(v122, v53);
    }
    -[NSObject setEventMetadata:](v52, sel_setEventMetadata_, v56);
    objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, v52);
    swift_unknownObjectRelease();
    if (one-time initialization token for common != -1)
      swift_once();
    v127 = type metadata accessor for Logger();
    __swift_project_value_buffer(v127, (uint64_t)static Logger.common);
    ((void (*)(char *, os_log_t, uint64_t))v152)(v62, v158, v53);
    swift_bridgeObjectRetain_n();
    v87 = Logger.logObject.getter();
    v128 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v87, v128))
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v55 + 8))(v62, v53);
      return;
    }
    v129 = swift_slowAlloc();
    v156 = swift_slowAlloc();
    v161[0] = v156;
    *(_DWORD *)v129 = 136315650;
    v160 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
    v153 = v55;
    v130 = String.init<A>(describing:)();
    v158 = v52;
    v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v131, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v132 = v159;
    *(_WORD *)(v129 + 12) = 2080;
    v133 = UUID.uuidString.getter();
    v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v134, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v153 + 8))(v62, v53);
    *(_WORD *)(v129 + 22) = 2080;
    swift_bridgeObjectRetain();
    v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v132, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2E0C000, v87, v128, "Successfully emitted log message : %s for camId : %s, rcId: %s", (uint8_t *)v129, 0x20u);
    v135 = v156;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v135, -1, -1);
    MEMORY[0x1C3BCB4A4](v129, -1, -1);

    goto LABEL_47;
  }
  if (one-time initialization token for common != -1)
    swift_once();
  v100 = type metadata accessor for Logger();
  __swift_project_value_buffer(v100, (uint64_t)static Logger.common);
  v101 = v145;
  (*(void (**)(char *, os_log_t, uint64_t))(v26 + 16))(v145, v158, v53);
  v102 = v147;
  outlined init with copy of UUID?(v156, v147);
  swift_bridgeObjectRetain_n();
  v87 = Logger.logObject.getter();
  v103 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v87, (os_log_type_t)v103))
  {

    outlined destroy of UUID?(v102);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v101, v53);
    goto LABEL_36;
  }
  LODWORD(v156) = v103;
  v158 = v52;
  v154 = v51;
  v104 = swift_slowAlloc();
  v105 = v55;
  v106 = swift_slowAlloc();
  v161[0] = v106;
  *(_DWORD *)v104 = 136315906;
  v160 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
  v107 = String.init<A>(describing:)();
  v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, v161);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v104 + 12) = 2080;
  v109 = UUID.uuidString.getter();
  v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, v161);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v111 = *(void (**)(char *, uint64_t))(v105 + 8);
  v111(v101, v157);
  *(_WORD *)(v104 + 22) = 2080;
  v112 = v159;
  swift_bridgeObjectRetain();
  v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v112, v161);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v104 + 32) = 2080;
  v113 = v157;
  v114 = v102;
  v115 = v142;
  outlined init with copy of UUID?(v114, v142);
  if (__swift_getEnumTagSinglePayload(v115, 1, v113) == 1)
  {
    outlined destroy of UUID?(v115);
    v116 = 0;
    v117 = 0xE000000000000000;
  }
  else
  {
    v116 = UUID.uuidString.getter();
    v117 = v139;
    v111((char *)v115, v113);
  }
  v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, v161);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v147);
  _os_log_impl(&dword_1C2E0C000, v87, (os_log_type_t)v156, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s", (uint8_t *)v104, 0x2Au);
  swift_arrayDestroy();
  MEMORY[0x1C3BCB4A4](v106, -1, -1);
  MEMORY[0x1C3BCB4A4](v104, -1, -1);

LABEL_47:
  v138 = v158;
LABEL_48:

LABEL_49:
}

void specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)(__int16 a1, uint64_t a2, NSObject *a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char v46;
  void *rawValue;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void (*v57)(char *, os_log_t, uint64_t);
  id v58;
  void *v59;
  id v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, os_log_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  NSObject *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  void (*v103)(char *, os_log_t, uint64_t);
  char *v104;
  uint64_t v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  id v119;
  char *v120;
  uint64_t v121;
  os_log_type_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  os_log_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  id v134;
  os_log_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  int v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  os_log_t v153;
  uint64_t v154;
  uint64_t v155[6];

  v143 = a7;
  v150 = a6;
  v151 = a5;
  v149 = a4;
  v153 = a3;
  v147 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v142 = (uint64_t)&v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v139 = (uint64_t)&v136 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v138 = (uint64_t)&v136 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v140 = (char *)&v136 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v136 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v145 = (uint64_t)&v136 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v146 = (char *)&v136 - v23;
  MEMORY[0x1E0C80A78](v22);
  v148 = (char *)&v136 - v24;
  v152 = type metadata accessor for UUID();
  v25 = *(_QWORD *)(v152 - 8);
  v26 = MEMORY[0x1E0C80A78](v152);
  v144 = (char *)&v136 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v137 = (char *)&v136 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v136 - v31;
  v33 = MEMORY[0x1E0C80A78](v30);
  v141 = (char *)&v136 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v37 = (char *)&v136 - v36;
  v38 = MEMORY[0x1E0C80A78](v35);
  v40 = (char *)&v136 - v39;
  v41 = MEMORY[0x1E0C80A78](v38);
  v43 = (char *)&v136 - v42;
  MEMORY[0x1E0C80A78](v41);
  v45 = (char *)&v136 - v44;
  if (one-time initialization token for kCamActionMap != -1)
    swift_once();
  v46 = HIBYTE(a1);
  rawValue = kCamActionMap._rawValue;
  LOBYTE(v154) = a1;
  lazy protocol witness table accessor for type CamAction and conformance CamAction();
  AnyHashable.init<A>(_:)();
  v48 = specialized Dictionary.subscript.getter((uint64_t)v155, (uint64_t)rawValue);
  outlined destroy of AnyHashable((uint64_t)v155);
  v49 = (char *)specialized static CamLoggingProtocol<>.map(action:responseStatusCode:enforcer:)(v48 | ((HIDWORD(v48) & 1) << 32), v46, 0, 0);
  if (!v49)
  {
    if (one-time initialization token for common != -1)
      swift_once();
    v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.common);
    v65 = v25;
    v66 = *(void (**)(char *, os_log_t, uint64_t))(v25 + 16);
    v67 = v152;
    v66(v45, v153, v152);
    v66(v43, (os_log_t)v147, v67);
    v68 = (uint64_t)v148;
    outlined init with copy of UUID?(v150, (uint64_t)v148);
    v69 = v151;
    swift_bridgeObjectRetain_n();
    v70 = Logger.logObject.getter();
    v71 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v70, (os_log_type_t)v71))
    {
      v101 = *(void (**)(char *, uint64_t))(v65 + 8);
      v101(v45, v67);
      swift_bridgeObjectRelease_n();
      v101(v43, v67);
      outlined destroy of UUID?(v68);

      return;
    }
    LODWORD(v150) = v71;
    v153 = v70;
    v72 = swift_slowAlloc();
    v147 = swift_slowAlloc();
    v155[0] = v147;
    *(_DWORD *)v72 = 136316162;
    v154 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
    v73 = String.init<A>(describing:)();
    v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v72 + 12) = 2080;
    v75 = UUID.uuidString.getter();
    v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v77 = *(void (**)(char *, uint64_t))(v65 + 8);
    v77(v45, v67);
    *(_WORD *)(v72 + 22) = 2080;
    swift_bridgeObjectRetain();
    v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v69, v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v72 + 32) = 2080;
    v78 = UUID.uuidString.getter();
    v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v155);
    v80 = (uint64_t)v148;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v77(v43, v67);
    *(_WORD *)(v72 + 42) = 2080;
    v81 = v142;
    outlined init with copy of UUID?(v80, v142);
    if (__swift_getEnumTagSinglePayload(v81, 1, v67) == 1)
    {
      outlined destroy of UUID?(v81);
      v82 = 0;
      v83 = 0xE000000000000000;
    }
    else
    {
      v82 = UUID.uuidString.getter();
      v83 = v117;
      v77((char *)v81, v67);
    }
    v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of UUID?(v80);
    v89 = v153;
    _os_log_impl(&dword_1C2E0C000, v153, (os_log_type_t)v150, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v72, 0x34u);
    v118 = v147;
    swift_arrayDestroy();
    MEMORY[0x1C3BCB4A4](v118, -1, -1);
    MEMORY[0x1C3BCB4A4](v72, -1, -1);
    goto LABEL_50;
  }
  v50 = v49;
  v51 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993C8]), sel_init);
  v148 = v50;
  objc_msgSend(v51, sel_setResponseGenerated_, v50);
  if (!v51)
  {
    v84 = v151;
    v85 = v152;
    v86 = v25;
    if (one-time initialization token for common != -1)
      swift_once();
    v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)static Logger.common);
    (*(void (**)(char *, os_log_t, uint64_t))(v25 + 16))(v40, v153, v85);
    v88 = (uint64_t)v146;
    outlined init with copy of UUID?(v150, (uint64_t)v146);
    swift_bridgeObjectRetain_n();
    v89 = Logger.logObject.getter();
    v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, (os_log_type_t)v90))
    {
      LODWORD(v153) = v90;
      v91 = swift_slowAlloc();
      v150 = swift_slowAlloc();
      v155[0] = v150;
      *(_DWORD *)v91 = 136315906;
      v154 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      v92 = String.init<A>(describing:)();
      v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v91 + 12) = 2080;
      v94 = UUID.uuidString.getter();
      v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v96 = *(void (**)(char *, uint64_t))(v86 + 8);
      v96(v40, v85);
      *(_WORD *)(v91 + 22) = 2080;
      swift_bridgeObjectRetain();
      v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v84, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v91 + 32) = 2080;
      v97 = (uint64_t)v146;
      v98 = v139;
      outlined init with copy of UUID?((uint64_t)v146, v139);
      if (__swift_getEnumTagSinglePayload(v98, 1, v85) == 1)
      {
        outlined destroy of UUID?(v98);
        v99 = 0;
        v100 = 0xE000000000000000;
      }
      else
      {
        v99 = UUID.uuidString.getter();
        v100 = v130;
        v96((char *)v98, v85);
      }
      v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v97);
      _os_log_impl(&dword_1C2E0C000, v89, (os_log_type_t)v153, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s", (uint8_t *)v91, 0x2Au);
      v131 = v150;
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v131, -1, -1);
      MEMORY[0x1C3BCB4A4](v91, -1, -1);
      v132 = v148;
      goto LABEL_49;
    }

    outlined destroy of UUID?(v88);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v40, v85);
LABEL_36:

    return;
  }
  v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993D0]), sel_init);
  v53 = v151;
  v54 = v152;
  v55 = v25;
  if (v52)
  {
    v56 = v52;
    v146 = v51;
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    v57 = *(void (**)(char *, os_log_t, uint64_t))(v25 + 16);
    v57(v37, v153, v54);
    v58 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v56, sel_setCamId_, v58);

    v59 = (void *)MEMORY[0x1C3BCA844](v149, v53);
    objc_msgSend(v56, sel_setResultCandidateId_, v59);

    objc_msgSend(v56, sel_setRequestId_, 0);
    if ((AFDeviceSupportsSAE() & 1) != 0)
    {
      v57(v37, (os_log_t)v147, v54);
      v60 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v56, sel_setSubRequestId_, v60);

    }
    if (one-time initialization token for kLoggingFeatureName != -1)
      swift_once();
    v61 = specialized Dictionary.subscript.getter(v143, (uint64_t)kLoggingFeatureName._rawValue);
    v62 = v144;
    if ((v61 & 0x100000000) == 0)
      objc_msgSend(v56, sel_setFeature_, v61);
    outlined init with copy of UUID?(v150, (uint64_t)v19);
    if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v54) == 1)
    {
      outlined destroy of UUID?((uint64_t)v19);
      v63 = (uint64_t)v140;
      UUID.init(uuidString:)();
      if (__swift_getEnumTagSinglePayload(v63, 1, v54) == 1)
      {
        outlined destroy of UUID?(v63);
LABEL_39:
        v120 = v146;
        objc_msgSend(v146, sel_setEventMetadata_, v56);
        objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, v120);
        swift_unknownObjectRelease();
        if (one-time initialization token for common != -1)
          swift_once();
        v121 = type metadata accessor for Logger();
        __swift_project_value_buffer(v121, (uint64_t)static Logger.common);
        v57(v62, v153, v54);
        swift_bridgeObjectRetain_n();
        v89 = Logger.logObject.getter();
        v122 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v89, v122))
        {
          swift_bridgeObjectRelease_n();

          (*(void (**)(char *, uint64_t))(v55 + 8))(v62, v54);
          return;
        }
        v123 = v62;
        v124 = swift_slowAlloc();
        v153 = (os_log_t)swift_slowAlloc();
        v155[0] = (uint64_t)v153;
        *(_DWORD *)v124 = 136315650;
        v154 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
        v125 = String.init<A>(describing:)();
        v150 = v55;
        v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v125, v126, v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v124 + 12) = 2080;
        v127 = UUID.uuidString.getter();
        v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v127, v128, v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v150 + 8))(v123, v54);
        *(_WORD *)(v124 + 22) = 2080;
        swift_bridgeObjectRetain();
        v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v53, v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2E0C000, v89, v122, "Successfully emitted log message : %s for camId : %s, rcId: %s", (uint8_t *)v124, 0x20u);
        v129 = v153;
        swift_arrayDestroy();
        MEMORY[0x1C3BCB4A4](v129, -1, -1);
        MEMORY[0x1C3BCB4A4](v124, -1, -1);

        goto LABEL_48;
      }
      v32 = v137;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v137, v63, v54);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v32, v19, v54);
    }
    v57(v37, (os_log_t)v32, v54);
    v119 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v56, sel_setTrpId_, v119);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v54);
    goto LABEL_39;
  }
  if (one-time initialization token for common != -1)
    swift_once();
  v102 = type metadata accessor for Logger();
  __swift_project_value_buffer(v102, (uint64_t)static Logger.common);
  v103 = *(void (**)(char *, os_log_t, uint64_t))(v25 + 16);
  v104 = v141;
  v103(v141, v153, v54);
  v105 = v145;
  outlined init with copy of UUID?(v150, v145);
  swift_bridgeObjectRetain_n();
  v89 = Logger.logObject.getter();
  v106 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v89, v106))
  {

    outlined destroy of UUID?(v105);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v104, v54);
    goto LABEL_36;
  }
  v146 = v51;
  v107 = swift_slowAlloc();
  v153 = (os_log_t)swift_slowAlloc();
  v155[0] = (uint64_t)v153;
  *(_DWORD *)v107 = 136315906;
  v154 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
  v108 = String.init<A>(describing:)();
  v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, v155);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v107 + 12) = 2080;
  v110 = UUID.uuidString.getter();
  v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v155);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v112 = *(void (**)(char *, uint64_t))(v55 + 8);
  v112(v104, v152);
  *(_WORD *)(v107 + 22) = 2080;
  swift_bridgeObjectRetain();
  v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v53, v155);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v107 + 32) = 2080;
  v113 = v152;
  v114 = v138;
  outlined init with copy of UUID?(v145, v138);
  if (__swift_getEnumTagSinglePayload(v114, 1, v113) == 1)
  {
    outlined destroy of UUID?(v114);
    v115 = 0;
    v116 = 0xE000000000000000;
  }
  else
  {
    v115 = UUID.uuidString.getter();
    v116 = v133;
    v112((char *)v114, v113);
  }
  v134 = v148;
  v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, v155);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v145);
  _os_log_impl(&dword_1C2E0C000, v89, v106, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s", (uint8_t *)v107, 0x2Au);
  v135 = v153;
  swift_arrayDestroy();
  MEMORY[0x1C3BCB4A4](v135, -1, -1);
  MEMORY[0x1C3BCB4A4](v107, -1, -1);

LABEL_48:
  v132 = v146;
LABEL_49:

LABEL_50:
}

id specialized static CamLoggingProtocol<>.map(action:responseStatusCode:enforcer:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;

  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993F0]), sel_init);
  if (v8)
  {
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993E8]), sel_init);
    v10 = v9;
    if ((a1 & 0x100000000) != 0)
    {
      if (one-time initialization token for common != -1)
        swift_once();
      v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.common);
      v14 = Logger.logObject.getter();
      v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_1C2E0C000, v14, v15, "CAM action for logging is nil", v16, 2u);
        MEMORY[0x1C3BCB4A4](v16, -1, -1);
      }

      if (a4)
      {
LABEL_4:
        if (v10)
        {
          v11 = v10;
          v12 = (void *)MEMORY[0x1C3BCA844](a3, a4);
          objc_msgSend(v11, sel_setEnforcer_, v12);

LABEL_12:
          objc_msgSend(v10, sel_setResponseStatusCode_, dword_1C2E9788C[a2]);
        }
LABEL_13:
        objc_msgSend(v8, sel_setResponse_, v10);

        return v8;
      }
    }
    else
    {
      objc_msgSend(v9, sel_setAction_, a1);
      if (a4)
        goto LABEL_4;
    }
    if (v10)
      goto LABEL_12;
    goto LABEL_13;
  }
  return v8;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void specialized == infix<A>(_:_:)()
{
  unint64_t v0;
  unsigned __int8 v1;
  char v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  OUTLINED_FUNCTION_64_2();
  v4 = v1;
  if (v1)
  {
    if (v1 == 1)
      v5 = v3;
    else
      v5 = v3 + 7;
    if (v4 == 1)
      v6 = 0x80000001C2E99850;
    else
      v6 = 0x80000001C2E99870;
  }
  else
  {
    v5 = 0xD000000000000011;
    v6 = v0;
  }
  if (v2)
  {
    OUTLINED_FUNCTION_138();
    v9 = (v8 - 32) | 0x8000000000000000;
    if (v10 == 1)
    {
      v0 = v7;
    }
    else
    {
      v3 += 7;
      v0 = v9;
    }
  }
  if (v5 == v3 && v6 == v0)
    OUTLINED_FUNCTION_101();
  else
    OUTLINED_FUNCTION_21_15();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_31();
}

{
  OUTLINED_FUNCTION_158();
  __asm { BR              X10 }
}

{
  unint64_t v0;
  unsigned __int8 v1;
  char v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  OUTLINED_FUNCTION_64_2();
  v4 = v1;
  if (v1)
  {
    if (v1 == 1)
      v5 = v3 + 6;
    else
      v5 = v3 + 13;
    if (v4 == 1)
      v6 = 0x80000001C2E9A2A0;
    else
      v6 = 0x80000001C2E9A260;
  }
  else
  {
    v5 = 0xD000000000000026;
    v6 = v0;
  }
  if (v2)
  {
    OUTLINED_FUNCTION_138();
    v12 = (v11 - 32) | 0x8000000000000000;
    if (v9 == 1)
      v3 = v10;
    else
      v3 = v7 + 13;
    if (v9 == 1)
      v0 = v8;
    else
      v0 = v12;
  }
  if (v5 == v3 && v6 == v0)
    OUTLINED_FUNCTION_101();
  else
    OUTLINED_FUNCTION_21_15();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_31();
}

{
  unint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  OUTLINED_FUNCTION_64_2();
  if (v3)
  {
    OUTLINED_FUNCTION_61_2();
    if (v5 == 1)
      v9 = v6;
    else
      v9 = v8;
    if (v5 == 1)
      v10 = v7;
    else
      v10 = (v4 - 32) | 0x8000000000000000;
  }
  else
  {
    v9 = 0xD000000000000010;
    v10 = v0;
  }
  if (v1)
  {
    OUTLINED_FUNCTION_61_2();
    v16 = (v15 - 32) | 0x8000000000000000;
    if (v11 == 1)
      v2 = v12;
    else
      v2 = v14;
    if (v11 == 1)
      v0 = v13;
    else
      v0 = v16;
  }
  if (v9 == v2 && v10 == v0)
    OUTLINED_FUNCTION_101();
  else
    OUTLINED_FUNCTION_21_15();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_31();
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X12 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_1C2E7734C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_1C2E773B0 + 4 * byte_1C2E97824[a2]))(0xD000000000000016);
}

void sub_1C2E773B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_141();
  if (v2 != 0xD000000000000016 || v0 != v1)
    OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_31();
}

uint64_t specialized == infix<A>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = PluginToBundleMap.rawValue.getter();
  v2 = v1;
  if (v0 == PluginToBundleMap.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_12();
  return v5 & 1;
}

uint64_t sub_1C2E77510(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C2E77584 + 4 * byte_1C2E9782D[a2]))(0x6174614472657375);
}

void sub_1C2E77584(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 0x6174614472657375 && v1 == 0xE800000000000000)
    OUTLINED_FUNCTION_101();
  else
    OUTLINED_FUNCTION_21_15();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_31();
}

uint64_t sub_1C2E7764C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C2E776F4 + 4 * byte_1C2E9783B[a2]))(0x646F70656D6F68);
}

void sub_1C2E776F4(uint64_t a1)
{
  uint64_t v1;

  if (a1 != 0x646F70656D6F68 || v1 != 0xE700000000000000)
    OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_31();
}

uint64_t sub_1C2E7781C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_1C2E77884 + 4 * byte_1C2E97848[a2]))(0xD000000000000010);
}

void sub_1C2E77884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_64_2();
  if (v2 == 0xD000000000000010 && v1 == v0)
    OUTLINED_FUNCTION_101();
  else
    OUTLINED_FUNCTION_21_15();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_31();
}

void specialized == infix<A>(_:_:)(char a1, char a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2 = 0xEA00000000005441;
  v3 = 0x455045525F4B5341;
  if (a1)
  {
    OUTLINED_FUNCTION_83_1();
    if (v5 == 1)
      v8 = v6;
    else
      v8 = 0xD000000000000010;
    if (v5 == 1)
      v9 = v7;
    else
      v9 = (v4 - 32) | 0x8000000000000000;
  }
  else
  {
    v8 = 0x455045525F4B5341;
    v9 = 0xEA00000000005441;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_83_1();
    v14 = (v13 - 32) | 0x8000000000000000;
    if (v10 == 1)
      v3 = v11;
    else
      v3 = 0xD000000000000010;
    if (v10 == 1)
      v2 = v12;
    else
      v2 = v14;
  }
  if (v8 == v3 && v9 == v2)
    OUTLINED_FUNCTION_101();
  else
    OUTLINED_FUNCTION_21_15();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_31();
}

BOOL specialized == infix<A>(_:_:)(char a1, char a2)
{
  return qword_1C2E97908[a1] == qword_1C2E97908[a2];
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  if (a2)
    OUTLINED_FUNCTION_138();
  else
    OUTLINED_FUNCTION_64_2();
  OUTLINED_FUNCTION_37_10();
  return OUTLINED_FUNCTION_5_16();
}

{
  if (a2)
  {
    OUTLINED_FUNCTION_89_1();
    OUTLINED_FUNCTION_106();
  }
  else
  {
    OUTLINED_FUNCTION_102();
  }
  OUTLINED_FUNCTION_37_10();
  return OUTLINED_FUNCTION_5_16();
}

{
  if (a2)
    OUTLINED_FUNCTION_88_1();
  else
    OUTLINED_FUNCTION_64_2();
  OUTLINED_FUNCTION_37_10();
  return OUTLINED_FUNCTION_5_16();
}

{
  if (a2)
  {
    OUTLINED_FUNCTION_74_1();
    OUTLINED_FUNCTION_88_1();
  }
  else
  {
    OUTLINED_FUNCTION_64_2();
  }
  OUTLINED_FUNCTION_37_10();
  return OUTLINED_FUNCTION_5_16();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
  OUTLINED_FUNCTION_1_5();
}

{
  Hasher._combine(_:)(a2);
  OUTLINED_FUNCTION_1_5();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  Hasher._combine(_:)(qword_1C2E97908[a2]);
  OUTLINED_FUNCTION_1_5();
}

uint64_t sub_1C2E77C34()
{
  OUTLINED_FUNCTION_64_2();
  OUTLINED_FUNCTION_37_10();
  return OUTLINED_FUNCTION_5_16();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  PluginToBundleMap.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  return String.hash(into:)();
}

void specialized RawRepresentable<>.hash(into:)()
{
  OUTLINED_FUNCTION_158();
  __asm { BR              X10 }
}

uint64_t sub_1C2E77D14()
{
  OUTLINED_FUNCTION_37_10();
  return OUTLINED_FUNCTION_5_16();
}

uint64_t sub_1C2E77DB4()
{
  OUTLINED_FUNCTION_37_10();
  return OUTLINED_FUNCTION_5_16();
}

uint64_t sub_1C2E77E90()
{
  OUTLINED_FUNCTION_64_2();
  OUTLINED_FUNCTION_37_10();
  return OUTLINED_FUNCTION_5_16();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_24_12();
  if (a2)
  {
    OUTLINED_FUNCTION_74_1();
    OUTLINED_FUNCTION_88_1();
  }
  else
  {
    OUTLINED_FUNCTION_141();
  }
  OUTLINED_FUNCTION_72_2();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

{
  OUTLINED_FUNCTION_24_12();
  if (a2)
    OUTLINED_FUNCTION_88_1();
  else
    OUTLINED_FUNCTION_141();
  OUTLINED_FUNCTION_72_2();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

{
  OUTLINED_FUNCTION_24_12();
  Hasher._combine(_:)(qword_1C2E97908[a2]);
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

{
  OUTLINED_FUNCTION_24_12();
  if (a2)
  {
    OUTLINED_FUNCTION_89_1();
    OUTLINED_FUNCTION_106();
  }
  else
  {
    OUTLINED_FUNCTION_102();
  }
  OUTLINED_FUNCTION_37_10();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

{
  OUTLINED_FUNCTION_24_12();
  if (a2)
    OUTLINED_FUNCTION_138();
  else
    OUTLINED_FUNCTION_141();
  OUTLINED_FUNCTION_72_2();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

void specialized RawRepresentable<>._rawHashValue(seed:)()
{
  OUTLINED_FUNCTION_24_12();
  OUTLINED_FUNCTION_40_7();
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

{
  OUTLINED_FUNCTION_24_12();
  PluginToBundleMap.rawValue.getter();
  OUTLINED_FUNCTION_37_10();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, unsigned __int8 a2)
{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(_QWORD))MEMORY[0x1E0DEDF10]);
}

{
  OUTLINED_FUNCTION_24_12();
  RankedAction.CodingKeys.rawValue.getter(a2);
  OUTLINED_FUNCTION_37_10();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(_QWORD))MEMORY[0x1E0DEDF30]);
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2)
{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(_BYTE *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(_BYTE *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(_BYTE *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t))
{
  _BYTE v5[72];

  OUTLINED_FUNCTION_24_12();
  a3(v5, a2);
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, unsigned __int8 a2, void (*a3)(_QWORD))
{
  OUTLINED_FUNCTION_24_12();
  a3(a2);
  OUTLINED_FUNCTION_11_9();
  OUTLINED_FUNCTION_19_2();
}

id SISchemaUUID.__allocating_init(nsuuid:)()
{
  id v0;
  Class isa;
  id v2;
  uint64_t v3;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v2 = objc_msgSend(v0, sel_initWithNSUUID_, isa);

  v3 = OUTLINED_FUNCTION_1_12();
  OUTLINED_FUNCTION_18_0(v3);
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CamHandler.update()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v3 = *(_QWORD *)(v0 + 16);
  if (v3)
  {
    v4 = (_QWORD *)(v0 + 32);
    swift_bridgeObjectRetain();
    v5 = v3 - 1;
    do
    {
      v6 = v5;
      v7 = v4[3];
      v8 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v7);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      if (v2)
        break;
      v5 = v6 - 1;
      v4 += 5;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
}

uint64_t CamHandler.init(camEnabledFeatures:allowDefaultAskRepeatModel:asrOnDevice:)(uint64_t a1, char a2, char a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for OSSignpostID();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_4_5();
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v7 = (id)static Log.ambiguityHandling;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  v8 = MEMORY[0x1E0DEE9D8];
  OUTLINED_FUNCTION_137();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  type metadata accessor for UncertaintyPromptHandler();
  if (static UncertaintyPromptHandler.register(camEnabledFeatures:allowDefaultAskRepeatModel:asrOnDevice:)(a1, a2 & 1, (os_log_type_t)(a3 & 1)))
  {
    swift_retain();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v8 = v9;
    v11 = *(_QWORD *)(v9 + 16);
    v10 = *(_QWORD *)(v9 + 24);
    if (v11 >= v10 >> 1)
    {
      OUTLINED_FUNCTION_99(v10 > 1, v11 + 1);
      v8 = v16;
    }
    *(_QWORD *)(v8 + 16) = v11 + 1;
    OUTLINED_FUNCTION_98();
  }
  type metadata accessor for ActionAmbiguityHandler();
  if (static ActionAmbiguityHandler.register(camEnabledFeatures:)(a1))
  {
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_99(0, *(_QWORD *)(v8 + 16) + 1);
      v8 = v17;
    }
    v13 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    if (v13 >= v12 >> 1)
    {
      OUTLINED_FUNCTION_99(v12 > 1, v13 + 1);
      v8 = v18;
    }
    *(_QWORD *)(v8 + 16) = v13 + 1;
    OUTLINED_FUNCTION_98();
  }
  if (*(_QWORD *)(v8 + 16))
  {
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CamError and conformance CamError();
    swift_allocError();
    *(_QWORD *)v14 = 0xD000000000000020;
    *(_QWORD *)(v14 + 8) = 0x80000001C2E9B7B0;
    *(_BYTE *)(v14 + 16) = 0;
    swift_willThrow();
  }
  OUTLINED_FUNCTION_113();
  return a1;
}

void CamHandler.action(request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL8 v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  NSObject *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint8_t *v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;

  OUTLINED_FUNCTION_37_8();
  v91 = v0;
  v2 = v1;
  v84 = v3;
  v4 = (int *)type metadata accessor for CamInput();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_4_5();
  v8 = v7 - v6;
  v9 = type metadata accessor for CamRequest(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_25_2();
  v13 = v11 - v12;
  MEMORY[0x1E0C80A78](v14);
  v90 = (uint64_t)&v78 - v15;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v78 - v17;
  v83 = type metadata accessor for OSSignpostID();
  v19 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  OUTLINED_FUNCTION_4_5();
  v22 = v21 - v20;
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v88 = (int *)v9;
  v23 = (id)static Log.ambiguityHandling;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_137();
  OUTLINED_FUNCTION_124();
  v85 = v22;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v24 = OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_84_0(v24, (uint64_t)static Logger.ambiguityHandling);
  outlined init with copy of CamRequest(v2, (uint64_t)v18, type metadata accessor for CamRequest);
  v87 = v22;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.default.getter();
  v27 = os_log_type_enabled(v25, v26);
  v82 = v19;
  v89 = v2;
  v86 = v13;
  if (v27)
  {
    v28 = (_DWORD *)OUTLINED_FUNCTION_4();
    v81 = OUTLINED_FUNCTION_4();
    v93 = v81;
    *v28 = 136315138;
    outlined init with copy of CamRequest((uint64_t)v18, v90, type metadata accessor for CamRequest);
    v29 = String.init<A>(describing:)();
    v31 = OUTLINED_FUNCTION_128(v29, v30);
    OUTLINED_FUNCTION_148(v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_1_0();
    outlined destroy of CamParse((uint64_t)v18, type metadata accessor for CamRequest);
    OUTLINED_FUNCTION_20_9(&dword_1C2E0C000, v25, v26, "Handling CAM request : %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_145(v27, type metadata accessor for CamRequest);

  v32 = v88;
  v33 = (v2 + v88[5]);
  v34 = (uint64_t *)(v2 + v88[6]);
  v36 = *v34;
  v35 = v34[1];
  v79 = v34;
  v37 = v2 + v88[7];
  specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)(v2, v2, v33, v36, v35, v37, 2);
  v38 = OUTLINED_FUNCTION_1_12();
  OUTLINED_FUNCTION_39_4(v8, v2);
  v39 = v8 + v4[5];
  v81 = v33;
  v78 = v38;
  OUTLINED_FUNCTION_39_4(v39, (uint64_t)v33);
  v40 = v8 + v4[7];
  v80 = v37;
  outlined init with copy of UUID?(v37, v40);
  v41 = *(void **)(v2 + v32[8]);
  v42 = *(_QWORD *)(v2 + v32[9]);
  v43 = *(_QWORD *)(v2 + v32[10]);
  v44 = *(_QWORD *)(v2 + v32[13]);
  v45 = *(_BYTE *)(v2 + v32[12]);
  v46 = (uint64_t *)(v8 + v4[6]);
  *v46 = v36;
  v46[1] = v35;
  *(_QWORD *)(v8 + v4[8]) = v41;
  *(_QWORD *)(v8 + v4[10]) = v42;
  *(_QWORD *)(v8 + v4[11]) = v43;
  *(_QWORD *)(v8 + v4[12]) = v44;
  v47 = v4[9];
  v90 = v8;
  *(_BYTE *)(v8 + v47) = v45;
  type metadata accessor for CamOutput();
  *(_BYTE *)(swift_initStackObject() + 56) = 1;
  v48 = CamLogOutput.init(prediction:score:threshold:)(0, 0.0, 0.0);
  v49 = *(_QWORD *)(v91 + 16);
  if (v49)
  {
    v32 = (int *)(v91 + 32);
    v50 = v41;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_144();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_61();
    swift_bridgeObjectRetain();
    v51 = v90;
    v52 = v86;
    do
    {
      v53 = *((_QWORD *)v32 + 3);
      v54 = *((_QWORD *)v32 + 4);
      __swift_project_boxed_opaque_existential_1(v32, v53);
      v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v51, v53, v54);
      OUTLINED_FUNCTION_117();
      if (*(_BYTE *)(v35 + 56) != 1)
        break;
      v32 += 10;
      --v49;
    }
    while (v49);
    swift_bridgeObjectRelease();
    v48 = v35;
  }
  else
  {
    v55 = v41;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_144();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v51 = v90;
    v52 = v86;
  }
  OUTLINED_FUNCTION_143();
  v56 = OUTLINED_FUNCTION_6_6();
  v57 = OUTLINED_FUNCTION_71_1(v56);
  v58 = v89;
  if (v57)
  {
    v59 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v59 = 0;
    _os_log_impl(&dword_1C2E0C000, (os_log_t)v35, (os_log_type_t)v32, "Logging successful CAM response", v59, 2u);
    OUTLINED_FUNCTION_3();
  }

  v60 = *(_BYTE *)(v48 + 56);
  v61 = *v79;
  v62 = v79[1];
  v63 = swift_retain();
  specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)(v63, 0, v58, v81, v61, v62, v80, 2);
  OUTLINED_FUNCTION_117();
  outlined init with copy of CamRequest(v58, v52, type metadata accessor for CamRequest);
  swift_retain_n();
  v64 = Logger.logObject.getter();
  v65 = static os_log_type_t.default.getter();
  v66 = OUTLINED_FUNCTION_71_1(v65);
  if (v66)
  {
    v67 = OUTLINED_FUNCTION_4();
    v93 = OUTLINED_FUNCTION_4();
    *(_DWORD *)v67 = 136315394;
    lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v68 = dispatch thunk of CustomStringConvertible.description.getter();
    v70 = OUTLINED_FUNCTION_128(v68, v69);
    OUTLINED_FUNCTION_148(v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v71 = OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_145(v71, type metadata accessor for CamRequest);
    *(_WORD *)(v67 + 12) = 2080;
    LOBYTE(v92) = *(_BYTE *)(v48 + 56);
    v72 = String.init<A>(describing:)();
    v92 = OUTLINED_FUNCTION_128(v72, v73);
    OUTLINED_FUNCTION_4_24();
    OUTLINED_FUNCTION_139();
    OUTLINED_FUNCTION_1_0();
    _os_log_impl(&dword_1C2E0C000, v64, (os_log_type_t)v32, "%s: Returning successful CAM Action: %s", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_145(v66, type metadata accessor for CamRequest);

  OUTLINED_FUNCTION_139();
  v75 = v84;
  v74 = v85;
  v76 = v82;
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_124();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_117();
  v77 = v83;
  outlined destroy of CamParse(v51, (uint64_t (*)(_QWORD))type metadata accessor for CamInput);
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v77);
  *v75 = v60;
  v75[1] = 0;
  OUTLINED_FUNCTION_0_2();
}

void protocol witness for Cam.action(request:) in conformance CamHandler()
{
  CamHandler.action(request:)();
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  OUTLINED_FUNCTION_24_12();
  String.hash(into:)();
  v4 = OUTLINED_FUNCTION_11_9();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Swift::Int v2;

  OUTLINED_FUNCTION_24_12();
  Hasher._combine(_:)(a1);
  v2 = OUTLINED_FUNCTION_11_9();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(_QWORD *a1)
{
  Swift::Int v2;

  OUTLINED_FUNCTION_24_12();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  OUTLINED_FUNCTION_1_0();
  type metadata accessor for AffinityRankKey();
  OUTLINED_FUNCTION_1_12();
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v2 = OUTLINED_FUNCTION_11_9();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  type metadata accessor for DeviceIdiom();
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7CA8], MEMORY[0x1E0DA7CB8]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)();
}

{
  OUTLINED_FUNCTION_1_12();
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  uint64_t v1;
  uint64_t v3;

  specialized RawRepresentable<>._rawHashValue(seed:)(*(_QWORD *)(v1 + 40), a1);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  uint64_t v1;
  uint64_t v3;

  specialized RawRepresentable<>._rawHashValue(seed:)(*(_QWORD *)(v1 + 40), a1);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

void specialized __RawDictionaryStorage.find<A>(_:)()
{
  Swift::Int v0;

  OUTLINED_FUNCTION_24_12();
  OUTLINED_FUNCTION_40_7();
  v0 = OUTLINED_FUNCTION_11_9();
  specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
  OUTLINED_FUNCTION_19_2();
}

{
  Swift::Int v0;

  OUTLINED_FUNCTION_24_12();
  Hasher._combine(_:)(0);
  v0 = OUTLINED_FUNCTION_11_9();
  specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
  OUTLINED_FUNCTION_19_2();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v15;

  v5 = type metadata accessor for AffinityRankKey();
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      outlined init with copy of CamRequest(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AffinityRankKey);
      v13 = *v8 == *a1 && v8[1] == a1[1];
      if ((v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && (static UUID.== infix(_:_:)() & 1) != 0)
        break;
      outlined destroy of CamParse((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AffinityRankKey);
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        return v10;
    }
    outlined destroy of CamParse((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AffinityRankKey);
  }
  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1C3BCAC1C](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v7 = 0x4F5455415F534D53;
          v8 = 0xEC000000444E4553;
        }
        else
        {
          v8 = 0x80000001C2E99960;
          v7 = 0xD000000000000010;
        }
      }
      else
      {
        v7 = 0x455045525F4B5341;
        v8 = 0xEA00000000005441;
      }
      if (a1)
      {
        v9 = a1 == 1 ? 0x4F5455415F534D53 : 0xD000000000000010;
        v10 = a1 == 1 ? 0xEC000000444E4553 : 0x80000001C2E99960;
      }
      else
      {
        v9 = 0x455045525F4B5341;
        v10 = 0xEA00000000005441;
      }
      if (v7 == v9 && v8 == v10)
        break;
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v12;
  uint64_t v14;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v14 = ~v3;
    while (1)
    {
      v5 = 0xD00000000000002CLL;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
      {
        v6 = 0x80000001C2E9A2A0;
      }
      else
      {
        v5 = 0xD000000000000033;
        v6 = 0x80000001C2E9A260;
      }
      v7 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? v5 : 0xD000000000000026;
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? v6 : 0x80000001C2E9A2D0;
      if (a1)
      {
        v9 = a1 == 1 ? 0xD00000000000002CLL : 0xD000000000000033;
        v10 = a1 == 1 ? 0x80000001C2E9A2A0 : 0x80000001C2E9A260;
      }
      else
      {
        v10 = 0x80000001C2E9A2D0;
        v9 = 0xD000000000000026;
      }
      if (v7 == v9 && v8 == v10)
        break;
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v14;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

void outlined init with copy of CamRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  OUTLINED_FUNCTION_1_5();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_37_8();
  v25 = v1;
  v26 = v2;
  v23 = v3;
  v24 = v4;
  v5 = v0;
  v7 = v6;
  v21 = v8;
  v22 = v9;
  v10 = v9(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78]();
  v13 = (char *)&v21 - v12;
  v14 = -1 << *(_BYTE *)(v5 + 32);
  v15 = v7 & ~v14;
  if (((*(_QWORD *)(v5 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v11 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    do
    {
      v18(v13, *(_QWORD *)(v5 + 48) + v17 * v15, v10);
      lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(v23, v22, v24);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if ((v19 & 1) != 0)
        break;
      v15 = (v15 + 1) & v16;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
  }
  return v15;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

uint64_t OUTLINED_FUNCTION_4_24()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_5_16()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_6_18(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

id OUTLINED_FUNCTION_7_18(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_12_14(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_13_16(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_14_14(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_18_12(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_21_15()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL OUTLINED_FUNCTION_22_8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_24_12()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_27_13()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  return UUID.uuidString.getter();
}

uint64_t OUTLINED_FUNCTION_28_12()
{
  uint64_t v0;

  *(_WORD *)(v0 + 22) = 2080;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_29_13(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x20u);
}

uint64_t OUTLINED_FUNCTION_30_14()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_31_8()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_33_9(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

id OUTLINED_FUNCTION_35_7(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_36_8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_37_10()
{
  return String.hash(into:)();
}

id OUTLINED_FUNCTION_38_9()
{
  return SISchemaUUID.__allocating_init(nsuuid:)();
}

uint64_t OUTLINED_FUNCTION_39_4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_40_7()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_43_8(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_impl(a1, v4, a3, a4, v5, 0x2Au);
}

void OUTLINED_FUNCTION_44_5(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_impl(a1, v4, a3, a4, v5, 0x2Au);
}

uint64_t OUTLINED_FUNCTION_46_4()
{
  uint64_t v0;

  return outlined destroy of UUID?(v0);
}

uint64_t OUTLINED_FUNCTION_47_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_48_5()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_50_4()
{
  return UUID.uuidString.getter();
}

uint64_t OUTLINED_FUNCTION_55_3(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_56_4(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_57_4()
{
  uint64_t v0;

  return outlined destroy of UUID?(v0);
}

uint64_t OUTLINED_FUNCTION_58_3()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_59_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_60_0(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of UUID?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_62_2()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_63_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_65_0()
{
  uint64_t v0;

  return outlined destroy of UUID?(v0);
}

uint64_t OUTLINED_FUNCTION_68_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_69_2()
{
  return String.init<A>(describing:)();
}

id OUTLINED_FUNCTION_70_1(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

BOOL OUTLINED_FUNCTION_71_1(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_72_2()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_73_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_75_0()
{
  return UUID.uuidString.getter();
}

uint64_t OUTLINED_FUNCTION_76_1()
{
  unint64_t v0;
  uint64_t v1;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(_QWORD *)(v1 - 184), v0, (uint64_t *)(v1 - 128));
}

uint64_t OUTLINED_FUNCTION_77()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_78_1()
{
  return UUID.uuidString.getter();
}

uint64_t OUTLINED_FUNCTION_79_1()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_80_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_81_0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_82_1()
{
  uint64_t v0;

  return outlined destroy of UUID?(v0);
}

uint64_t OUTLINED_FUNCTION_84_0(uint64_t a1, uint64_t a2)
{
  return __swift_project_value_buffer(a1, a2);
}

void OUTLINED_FUNCTION_85_1()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_90(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_91_1(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_95_0()
{
  uint64_t v0;

  return outlined destroy of UUID?(v0);
}

uint64_t OUTLINED_FUNCTION_96_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_97_0(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of UUID?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with take of AppSelectionSignalComponent((__int128 *)(v2 - 120), v1 + 40 * v0 + 32);
  return swift_release();
}

void OUTLINED_FUNCTION_99(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_103(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 208))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_104()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_107()
{
  return UUID.uuidString.getter();
}

uint64_t OUTLINED_FUNCTION_108(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of UUID?(a1, v1);
}

unint64_t OUTLINED_FUNCTION_110(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
}

id OUTLINED_FUNCTION_111(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

void OUTLINED_FUNCTION_112()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_113()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_114(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_115()
{
  return UUID.uuidString.getter();
}

BOOL OUTLINED_FUNCTION_116(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_117()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_118(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of UUID?(a1, v1);
}

id OUTLINED_FUNCTION_119()
{
  return SISchemaUUID.__allocating_init(nsuuid:)();
}

uint64_t OUTLINED_FUNCTION_120(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

id OUTLINED_FUNCTION_122(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_123(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void OUTLINED_FUNCTION_125(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x34u);
}

uint64_t OUTLINED_FUNCTION_128(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 168));
}

uint64_t OUTLINED_FUNCTION_129(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_131()
{
  return swift_unknownObjectRelease();
}

BOOL OUTLINED_FUNCTION_132(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_133@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_134()
{
  return UUID.uuidString.getter();
}

id OUTLINED_FUNCTION_135(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_136(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of UUID?(a1, *(_QWORD *)(v1 - 208));
}

uint64_t OUTLINED_FUNCTION_139()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_143()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_144()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_145(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of CamParse(v2, a2);
}

void OUTLINED_FUNCTION_147()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_148(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 176) = a1;
  return v1 - 176;
}

uint64_t OUTLINED_FUNCTION_150(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t OUTLINED_FUNCTION_152(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return v1 - 144;
}

void OUTLINED_FUNCTION_153(float a1)
{
  float *v1;

  *v1 = a1;
}

unint64_t OUTLINED_FUNCTION_155()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Dictionary.subscript.getter(v1 - 128, v0);
}

uint64_t OUTLINED_FUNCTION_156()
{
  uint64_t v0;

  return outlined destroy of UUID?(v0);
}

uint64_t OUTLINED_FUNCTION_157()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_160(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of UUID?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_161()
{
  return swift_arrayDestroy();
}

uint64_t static ActionAmbiguityHandler.register(camEnabledFeatures:)(uint64_t a1)
{
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15[5];
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    goto LABEL_13;
  swift_bridgeObjectRetain();
  v4 = 0;
  while (!*(_BYTE *)(a1 + v4 + 32))
  {
    v1 = 65;
LABEL_7:
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      goto LABEL_11;
    if (v2 == ++v4)
    {
      OUTLINED_FUNCTION_3_1();
      goto LABEL_13;
    }
  }
  if (*(_BYTE *)(a1 + v4 + 32) == 1)
  {
    v1 = OS_LOG_TYPE_FAULT|OS_LOG_TYPE_DEBUG|0x40;
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_3_1();
LABEL_11:
  OUTLINED_FUNCTION_3_1();
  v15[3] = (uint64_t)&type metadata for CamFeatureFlag;
  v15[4] = lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag();
  LOBYTE(v15[0]) = 2;
  v6 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v6 & 1) != 0)
  {
    type metadata accessor for ActionAmbiguityHandler();
    v7 = swift_allocObject();
    ActionAmbiguityHandler.init()();
    return v7;
  }
LABEL_13:
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v8 = OUTLINED_FUNCTION_14_1();
  v9 = OUTLINED_FUNCTION_8_1(v8, (uint64_t)static Logger.ambiguityHandling);
  v10 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_24_5(v10))
  {
    v11 = OUTLINED_FUNCTION_4();
    v15[0] = OUTLINED_FUNCTION_4();
    *(_DWORD *)v11 = 136315394;
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x80000001C2E99960, v15);
    OUTLINED_FUNCTION_11_11();
    *(_WORD *)(v11 + 12) = 2080;
    v12 = StaticString.description.getter();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v15);
    OUTLINED_FUNCTION_11_11();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2E0C000, v9, v1, "[ActionAmbiguityHandler] Not registering as %s or %s is disabled", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }

  return 0;
}

uint64_t ActionAmbiguityHandler.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;

  v2 = v0;
  v3 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v0 + 16) = 0xD000000000000021;
  *(_QWORD *)(v0 + 24) = 0x80000001C2E9AA00;
  *(_QWORD *)(v0 + 32) = 0xD000000000000025;
  *(_QWORD *)(v0 + 40) = 0x80000001C2E9A9D0;
  *(_QWORD *)(v0 + 48) = 0xD000000000000024;
  *(_QWORD *)(v0 + 56) = 0x80000001C2E9AA30;
  *(_QWORD *)(v0 + 64) = v3;
  v4 = type metadata accessor for ActionAmbiguityHeuristicHandler();
  swift_allocObject();
  v5 = ActionAmbiguityHeuristicHandler.init(forModelWithName:)(0xD00000000000002DLL, 0x80000001C2E9B850);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for ActionAmbiguityHandler();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v12 = v4;
    v13 = &protocol witness table for ActionAmbiguityHeuristicHandler;
    *(_QWORD *)&v11 = v5;
    outlined init with take of AppSelectionSignalComponent(&v11, v0 + 72);
    if ((CamFeatureFlag.isEnabled.getter(7u) & 1) != 0)
    {
      if (one-time initialization token for ambiguityHandling != -1)
        swift_once();
      v6 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.ambiguityHandling);
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)OUTLINED_FUNCTION_4();
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1C2E0C000, v7, v8, "[ActionAmbiguityHandler] disambiguate_for_ranking_evaluation FF enabled, adding corresponding enforcer", v9, 2u);
        OUTLINED_FUNCTION_3();
      }

      *(_QWORD *)(v2 + 136) = &type metadata for ForcedDisambiguationForRankingEvaluationActionEnforcer;
      *(_QWORD *)(v2 + 144) = &protocol witness table for ForcedDisambiguationForRankingEvaluationActionEnforcer;
    }
    else
    {
      *(_QWORD *)(v0 + 144) = 0;
      *(_OWORD *)(v0 + 112) = 0u;
      *(_OWORD *)(v0 + 128) = 0u;
    }
  }
  return v2;
}

int *ActionAmbiguityHandler.handle(camInput:)(NSObject *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  NSObject *v21;
  os_log_type_t v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  Swift::String v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[4];
  int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  os_log_t v78;
  id v79;
  _QWORD *v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  _QWORD *v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  NSObject *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  void *v95;
  uint64_t v96;
  uint64_t v97[5];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
  MEMORY[0x1E0C80A78](v2);
  v4 = &v73[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for CamModelMetadata();
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = &v73[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v73[-v9];
  v11 = type metadata accessor for OSSignpostID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = &v73[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13);
  v17 = &v73[-v16];
  static ActionAmbiguityHandler.preExecutionOverride(camInput:)(a1);
  v93 = v18;
  if (v18)
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v19 = OUTLINED_FUNCTION_14_1();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.ambiguityHandling);
    v20 = (int *)v93;
    OUTLINED_FUNCTION_20_14();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (_DWORD *)OUTLINED_FUNCTION_4();
      v97[0] = OUTLINED_FUNCTION_4();
      *v23 = 136315138;
      swift_retain();
      v24 = specialized ReflectedStringConvertible.description.getter();
      v26 = v25;
      swift_release();
      v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v97);
      OUTLINED_FUNCTION_27_14(v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_6_19();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_25_12(&dword_1C2E0C000, v21, v22, "[ActionAmbiguityHandler] Using override before executing model %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    OUTLINED_FUNCTION_6_19();
  }
  else
  {
    v84 = v8;
    v88 = v15;
    v90 = a1;
    v85 = v2;
    v87 = v10;
    v89 = v12;
    v86 = v4;
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v20 = &dword_1ED79B000;
    v28 = (id)static Log.ambiguityHandling;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v29 = type metadata accessor for CamInput();
    v30 = swift_bridgeObjectRetain();
    v31 = v92;
    v32 = specialized FeatureExtracting.extract(from:)(v30);
    if (v31)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_9_14((uint64_t)v17);
    }
    else
    {
      v33 = v32;
      v81 = v29;
      v83 = v11;
      swift_bridgeObjectRelease();
      v34 = (void *)static Log.ambiguityHandling;
      static os_signpost_type_t.end.getter();
      v82 = v17;
      os_signpost(_:dso:log:name:signpostID:)();
      v34;
      OSSignpostID.init(log:)();
      static os_signpost_type_t.begin.getter();
      OUTLINED_FUNCTION_8_18();
      v35 = v91;
      v36 = v91[12];
      v37 = v91[13];
      OUTLINED_FUNCTION_18_13(v91 + 9);
      v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v33, v36, v37);
      v80 = v35 + 9;
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_8_18();
      v39 = *((_OWORD *)v35 + 2);
      v98 = *((_OWORD *)v35 + 1);
      v99 = v39;
      v100 = *((_OWORD *)v35 + 3);
      v101 = v35[8];
      CamOutputProvider.toCamOutput(from:)();
      v79 = v38;
      v42 = v40;
      v92 = 0;
      v43 = v35[12];
      v44 = v35[13];
      OUTLINED_FUNCTION_18_13(v80);
      (*(void (**)(uint64_t, uint64_t))(v44 + 24))(v43, v44);
      outlined init with copy of ActionAmbiguityActionEnforcer?((uint64_t)(v35 + 14), (uint64_t)&v94);
      if (v96)
      {
        outlined init with take of AppSelectionSignalComponent(&v94, (uint64_t)v97);
        __swift_project_boxed_opaque_existential_1(v97, v97[3]);
        ForcedDisambiguationForRankingEvaluationActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(&v94);
        OUTLINED_FUNCTION_8();
        v45 = v95;
        v46 = v86;
        if (v95)
        {
          v47 = *((_QWORD *)&v94 + 1);
          v48 = v94;
          if (one-time initialization token for ambiguityHandling != -1)
            swift_once();
          v49 = OUTLINED_FUNCTION_14_1();
          __swift_project_value_buffer(v49, (uint64_t)static Logger.ambiguityHandling);
          v93 = v42;
          OUTLINED_FUNCTION_20_14();
          swift_bridgeObjectRetain_n();
          v50 = Logger.logObject.getter();
          v51 = static os_log_type_t.debug.getter();
          v52 = v51;
          v78 = v50;
          if (os_log_type_enabled(v50, v51))
          {
            v53 = OUTLINED_FUNCTION_4();
            v77 = v47;
            v54 = v53;
            v75 = OUTLINED_FUNCTION_4();
            *(_QWORD *)&v94 = v75;
            *(_DWORD *)v54 = 136315650;
            v74 = v52;
            LOBYTE(v102) = *(_BYTE *)(v93 + 56);
            v55 = OUTLINED_FUNCTION_24_13();
            v76 = (unint64_t)v45;
            v102 = OUTLINED_FUNCTION_23_12(v55, v56);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_6_19();
            OUTLINED_FUNCTION_2_0();
            *(_WORD *)(v54 + 12) = 2080;
            LOBYTE(v102) = v48;
            v57 = OUTLINED_FUNCTION_24_13();
            v102 = OUTLINED_FUNCTION_23_12(v57, v58);
            OUTLINED_FUNCTION_12_15();
            v59 = v76;
            swift_bridgeObjectRelease();
            *(_WORD *)(v54 + 22) = 2080;
            swift_bridgeObjectRetain();
            v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v59, (uint64_t *)&v94);
            OUTLINED_FUNCTION_12_15();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C2E0C000, v78, (os_log_type_t)v74, "[ActionAmbiguityHandler] Overriding %s with %s due to %s", (uint8_t *)v54, 0x20u);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_3();
          }

          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_6_19();
          LOBYTE(v94) = v48;
          v60._countAndFlagsBits = v47;
          v60._object = v45;
          CamOutput.overrideAction(action:enforcer:)((SiriCam::CamAction)&v94, v60);
          OUTLINED_FUNCTION_2_0();
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
      }
      else
      {
        OUTLINED_FUNCTION_8();
        outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)&v94, &demangling cache variable for type metadata for ActionAmbiguityActionEnforcer?);
        v46 = v86;
      }
      if (one-time initialization token for ambiguityHandling != -1)
        swift_once();
      v61 = OUTLINED_FUNCTION_14_1();
      __swift_project_value_buffer(v61, (uint64_t)static Logger.ambiguityHandling);
      OUTLINED_FUNCTION_20_14();
      v62 = Logger.logObject.getter();
      v63 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (_DWORD *)OUTLINED_FUNCTION_4();
        v97[0] = OUTLINED_FUNCTION_4();
        *v64 = 136315138;
        swift_retain();
        v65 = specialized ReflectedStringConvertible.description.getter();
        v67 = v66;
        swift_release();
        v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v67, v97);
        OUTLINED_FUNCTION_27_14(v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_6_19();
        OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_25_12(&dword_1C2E0C000, v62, v63, "[ActionAmbiguityHandler] handle will return output %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_3();
      }

      OUTLINED_FUNCTION_6_19();
      v69 = v91[12];
      v70 = v91[13];
      OUTLINED_FUNCTION_18_13(v80);
      v71 = (uint64_t)v84;
      (*(void (**)(uint64_t, uint64_t))(v70 + 24))(v69, v70);
      v72 = (uint64_t)v46 + *(int *)(v85 + 48);
      *v46 = v42;
      outlined init with take of CamModelMetadata(v71, v72);
      swift_retain();
      specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)();

      outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v46, &demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
      outlined destroy of CamModelMetadata((uint64_t)v87);
      OUTLINED_FUNCTION_9_14((uint64_t)v88);
      OUTLINED_FUNCTION_9_14((uint64_t)v82);
      return (int *)v42;
    }
  }
  return v20;
}

void static ActionAmbiguityHandler.preExecutionOverride(camInput:)(NSObject *a1)
{
  os_log_type_t v1;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  os_log_type_t v14;

  if ((*(_QWORD **)((char *)&a1->isa + *(int *)(type metadata accessor for CamInput() + 44)))[2] < 2uLL)
  {
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v3 = OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_8_1(v3, (uint64_t)static Logger.ambiguityHandling);
    v4 = OUTLINED_FUNCTION_13_17();
    if (OUTLINED_FUNCTION_4_8(v4))
    {
      *(_WORD *)OUTLINED_FUNCTION_4() = 0;
      OUTLINED_FUNCTION_7_19(&dword_1C2E0C000, v5, v6, "[ActionAmbiguityHandler] Skipping due to lack of ranked actions in input");
      OUTLINED_FUNCTION_3();
    }

    goto LABEL_20;
  }
  if ((SiriKitRuntimeAmbiguityFeatureFlags.isEnabled.getter() & 1) == 0)
    goto LABEL_20;
  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v7 = OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_8_1(v7, (uint64_t)static Logger.ambiguityHandling);
  v8 = OUTLINED_FUNCTION_13_17();
  if (OUTLINED_FUNCTION_24_5(v8))
  {
    v9 = (uint8_t *)OUTLINED_FUNCTION_4();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1C2E0C000, a1, v1, "[ActionAmbiguityHandler] input_paraphrasing_flows feature flag is enabled", v9, 2u);
    OUTLINED_FUNCTION_3();
  }

  if ((CamFeatureFlag.isEnabled.getter(6u) & 1) != 0)
  {
    Logger.logObject.getter();
    v10 = OUTLINED_FUNCTION_13_17();
    if (OUTLINED_FUNCTION_4_8(v10))
    {
      *(_WORD *)OUTLINED_FUNCTION_4() = 0;
      v13 = "[ActionAmbiguityHandler] disambiguate_all_ties feature flag is enabled, CAM can return a disambiguate action"
            " without constraints on the type of the action";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if ((CamFeatureFlag.isEnabled.getter(7u) & 1) == 0)
  {
LABEL_20:
    type metadata accessor for CamOutput();
    *(_BYTE *)(swift_allocObject() + 56) = 1;
    CamLogOutput.init(prediction:score:threshold:)(0, 0.0, 0.0);
    goto LABEL_21;
  }
  Logger.logObject.getter();
  v14 = OUTLINED_FUNCTION_13_17();
  if (OUTLINED_FUNCTION_4_8(v14))
  {
    *(_WORD *)OUTLINED_FUNCTION_4() = 0;
    v13 = "[ActionAmbiguityHandler] disambiguate_for_ranking_evaluation feature flag is enabled, CAM can return a disambi"
          "guate action without constraints on the type of the action";
LABEL_18:
    OUTLINED_FUNCTION_7_19(&dword_1C2E0C000, v11, v12, v13);
    OUTLINED_FUNCTION_3();
  }
LABEL_19:

LABEL_21:
  OUTLINED_FUNCTION_31();
}

void ActionAmbiguityHandler.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_1();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  outlined destroy of (CamLogOutput, CamModelMetadata)(v0 + 112, &demangling cache variable for type metadata for ActionAmbiguityActionEnforcer?);
  OUTLINED_FUNCTION_31();
}

uint64_t ActionAmbiguityHandler.__deallocating_deinit()
{
  ActionAmbiguityHandler.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ActionAmbiguityHandler()
{
  return objc_opt_self();
}

int *protocol witness for ActionHandler.handle(camInput:) in conformance ActionAmbiguityHandler(NSObject *a1)
{
  return ActionAmbiguityHandler.handle(camInput:)(a1);
}

uint64_t outlined init with copy of ActionAmbiguityActionEnforcer?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionAmbiguityActionEnforcer?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_6_19()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_7_19(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_8_18()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_11_11()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_12_15()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_13_17()
{
  return static os_log_type_t.info.getter();
}

_QWORD *OUTLINED_FUNCTION_18_13(_QWORD *a1)
{
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_20_14()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_22_9()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_23_12(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 224));
}

uint64_t OUTLINED_FUNCTION_24_13()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_25_12(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_27_14(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 224) = a1;
  return v1 - 224;
}

uint64_t static AutoConfirmAction.action(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v8;

  v4 = result;
  v5 = 0;
  while (1)
  {
    if (v5 > 2)
    {
      v6 = 3;
      goto LABEL_11;
    }
    v6 = v5;
    _print_unlocked<A, B>(_:_:)();
    if (!v4 && a2 == 0xE000000000000000)
      break;
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    ++v5;
    if ((v8 & 1) != 0)
      goto LABEL_11;
  }
  result = swift_bridgeObjectRelease();
LABEL_11:
  *a3 = v6;
  return result;
}

SiriCam::AutoConfirmAction_optional __swiftcall AutoConfirmAction.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (SiriCam::AutoConfirmAction_optional)rawValue;
}

uint64_t AutoConfirmAction.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoConfirmAction(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

SiriCam::AutoConfirmAction_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoConfirmAction(Swift::Int *a1)
{
  return AutoConfirmAction.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AutoConfirmAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AutoConfirmAction.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t dispatch thunk of AutoConfirming.inferConfirmation(for:from:withRequestId:recipientCrrSignals:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 8))();
}

uint64_t dispatch thunk of AutoConfirming.inferConfirmation(for:from:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 16))();
}

uint64_t dispatch thunk of AutoConfirming.inferConfirmation(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 24))();
}

uint64_t dispatch thunk of AutoConfirming.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t storeEnumTagSinglePayload for AutoConfirmAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2E7B9F4 + 4 * byte_1C2E97A65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2E7BA28 + 4 * byte_1C2E97A60[v4]))();
}

uint64_t sub_1C2E7BA28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E7BA30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E7BA38);
  return result;
}

uint64_t sub_1C2E7BA44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E7BA4CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2E7BA50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E7BA58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AutoConfirmAction()
{
  return &type metadata for AutoConfirmAction;
}

uint64_t outlined copy of AutoConfirmError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 5u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for AutoConfirmError(uint64_t a1)
{
  return outlined consume of AutoConfirmError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for AutoConfirmError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AutoConfirmError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AutoConfirmError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AutoConfirmError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of AutoConfirmError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AutoConfirmError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of AutoConfirmError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoConfirmError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 250;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 5)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoConfirmError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoConfirmError()
{
  return &type metadata for AutoConfirmError;
}

void *one-time initialization function for kLoggingFeatureName()
{
  void *result;

  type metadata accessor for CAMSchemaCAMFeature(0);
  lazy protocol witness table accessor for type CamFeature and conformance CamFeature();
  result = (void *)Dictionary.init(dictionaryLiteral:)();
  kLoggingFeatureName._rawValue = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CamFeature and conformance CamFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamFeature and conformance CamFeature;
  if (!lazy protocol witness table cache variable for type CamFeature and conformance CamFeature)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamFeature, &type metadata for CamFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeature and conformance CamFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CamFeature and conformance CamFeature;
  if (!lazy protocol witness table cache variable for type CamFeature and conformance CamFeature)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for CamFeature, &type metadata for CamFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeature and conformance CamFeature);
  }
  return result;
}

uint64_t CamUSOParse.getFirstUserDialogActAsTask()()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  _BYTE v12[16];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v0);
  v2 = &v12[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1C3BCA37C](v5);
  specialized Collection.first.getter();
  OUTLINED_FUNCTION_12();
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 32))(v7, v2, v3);
    v8 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    v11 = v8;
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_12();
      if (v9)
      {
LABEL_7:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v11 & 0xC000000000000001) == 0, v11);
        if ((v11 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x1C3BCAC88](0, v11);
        }
        else
        {
          v9 = *(_QWORD *)(v11 + 32);
          swift_retain();
        }
      }
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9)
        goto LABEL_7;
    }
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_0_30();
    return v9;
  }
  outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v2);
  return 0;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t *CRRFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static CRRFeatureExtractor.extractedFeatures;
}

uint64_t CRRFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  Swift::Int v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  char v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  char isUnique;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  int64_t v56;

  v2 = (_QWORD *)a1;
  v54 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v56 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v6 = 0;
  v7 = v2;
  v53 = v2;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v6 << 6);
      goto LABEL_20;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v56)
      goto LABEL_38;
    v11 = *(_QWORD *)(v54 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v56)
        goto LABEL_38;
      v11 = *(_QWORD *)(v54 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v56)
          goto LABEL_38;
        v11 = *(_QWORD *)(v54 + 8 * v6);
        if (!v11)
          break;
      }
    }
LABEL_19:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_20:
    v13 = (uint64_t *)(v2[6] + 16 * v9);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(_QWORD *)(v2[7] + 8 * v9);
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = 0x47796E4171657266;
    v17._object = (void *)0xEC00000070756F72;
    if (!String.hasPrefix(_:)(v17))
      goto LABEL_24;
    OUTLINED_FUNCTION_1_27();
    lazy protocol witness table accessor for type String and conformance String();
    v1 = v7;
    v18 = OUTLINED_FUNCTION_3_23();
    if (v7[2] && (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) != 0))
    {
      v22 = *(_QWORD *)(v7[7] + 8 * v20);
      swift_bridgeObjectRelease();
      if (__OFSUB__(v16, v22))
        goto LABEL_44;
      v51 = v16 - v22;
      OUTLINED_FUNCTION_1_27();
      v23 = OUTLINED_FUNCTION_3_23();
      v25 = v24;
      isUnique = swift_isUniquelyReferenced_nonNull_native();
      v55 = v1;
      v50 = v23;
      v26 = v23;
      v27 = v1;
      v1 = (_QWORD *)v25;
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
      v30 = v27[2];
      v31 = (v29 & 1) == 0;
      v32 = v30 + v31;
      if (__OFADD__(v30, v31))
        goto LABEL_45;
      v33 = v28;
      v34 = v29;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
      v35 = v1;
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v32))
      {
        v36 = specialized __RawDictionaryStorage.find<A>(_:)(v50, (uint64_t)v1);
        if ((v34 & 1) != (v37 & 1))
          goto LABEL_47;
        v33 = v36;
        v35 = v1;
      }
      if ((v34 & 1) != 0)
      {
        *(_QWORD *)(v55[7] + 8 * v33) = v51;
      }
      else
      {
        v55[(v33 >> 6) + 8] |= 1 << v33;
        v38 = (uint64_t *)(v55[6] + 16 * v33);
        *v38 = v50;
        v38[1] = (uint64_t)v35;
        *(_QWORD *)(v55[7] + 8 * v33) = v51;
        v39 = v55[2];
        v40 = __OFADD__(v39, 1);
        v41 = v39 + 1;
        if (v40)
          goto LABEL_46;
        v55[2] = v41;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
      v43 = v42;
      swift_bridgeObjectRelease();
      if ((v43 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v55[3]);
        v7 = v55;
        swift_bridgeObjectRelease();
        _NativeDictionary._delete(at:)();
        OUTLINED_FUNCTION_2_0();
        swift_bridgeObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_2_0();
        v7 = v55;
      }
      v2 = v53;
    }
    else
    {
      OUTLINED_FUNCTION_2_0();
      v2 = v53;
LABEL_24:
      swift_bridgeObjectRelease();
    }
  }
  v12 = v10 + 3;
  if (v12 < v56)
  {
    v11 = *(_QWORD *)(v54 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        v6 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        if (v6 >= v56)
          goto LABEL_38;
        v11 = *(_QWORD *)(v54 + 8 * v6);
        ++v12;
        if (v11)
          goto LABEL_19;
      }
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v6 = v12;
    goto LABEL_19;
  }
LABEL_38:
  swift_release();
  v45 = swift_bridgeObjectRetain();
  v46 = specialized _NativeDictionary.mapValues<A>(_:)(v45);
  if (v52)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v47 = v46;
    swift_bridgeObjectRelease();
    v1 = specialized _NativeDictionary.filter(_:)(v47);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return (uint64_t)v1;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance CRRFeatureExtractor()
{
  CRRFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance CRRFeatureExtractor(uint64_t *a1)
{
  return CRRFeatureExtractor.extractImpl(from:)(*a1);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v2 = v1;
  OUTLINED_FUNCTION_14_15();
  v4 = OUTLINED_FUNCTION_10_17(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  OUTLINED_FUNCTION_13_18();
  OUTLINED_FUNCTION_5_17();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
  OUTLINED_FUNCTION_8_19(v6, v7, v8, v9, v10, v11, v12, v13, v16, v17);
  OUTLINED_FUNCTION_11_12();
  v14 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v4);
  _NativeDictionary._delete(at:)();
  *v2 = v18;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  v8 = OUTLINED_FUNCTION_13_18();
  v13 = *v3;
  v9 = *v3;
  *v3 = 0x8000000000000000;
  v10 = *(_QWORD *)(v9 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLFeatureValue>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(v8, v10);
  OUTLINED_FUNCTION_11_12();
  v11 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v6);
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLFeatureValue);
  _NativeDictionary._delete(at:)();
  *v3 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v6;
  char v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = v2;
  OUTLINED_FUNCTION_14_15();
  v6 = OUTLINED_FUNCTION_10_17(a1);
  v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    OUTLINED_FUNCTION_13_18();
    OUTLINED_FUNCTION_5_17();
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    OUTLINED_FUNCTION_8_19(v9, v10, v11, v12, v13, v14, v15, v16, v18, v19);
    OUTLINED_FUNCTION_11_12();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v20 + 56) + 32 * v6), a2);
    _NativeDictionary._delete(at:)();
    *v3 = v20;
    OUTLINED_FUNCTION_0_31();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v10;

  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_4_25();
  a4(a1, a2, a3);
  *v4 = v10;
  return OUTLINED_FUNCTION_0_31();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char v7;
  uint64_t v9;

  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_4_25();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, v7);
  *v3 = v9;
  return OUTLINED_FUNCTION_0_31();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v3;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;

  OUTLINED_FUNCTION_9_21(a1, a2, a3);
  OUTLINED_FUNCTION_15_8();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = v7;
  v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
  if (!OUTLINED_FUNCTION_7_20())
    goto LABEL_5;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v10 = v12;
LABEL_5:
  v14 = *v3;
  if ((v11 & 1) != 0)
  {
    *(_QWORD *)(v14[7] + 8 * v10) = a1;
    OUTLINED_FUNCTION_6_20();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a3, a1, v14);
    OUTLINED_FUNCTION_2_28();
  }
}

{
  _QWORD **v3;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;

  OUTLINED_FUNCTION_9_21(a1, a2, a3);
  OUTLINED_FUNCTION_15_8();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = v7;
  v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLFeatureValue>);
  if (!OUTLINED_FUNCTION_7_20())
    goto LABEL_5;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v10 = v12;
LABEL_5:
  v14 = *v3;
  if ((v11 & 1) != 0)
  {
    v15 = v14[7];

    *(_QWORD *)(v15 + 8 * v10) = a1;
    OUTLINED_FUNCTION_6_20();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a3, a1, v14);
    OUTLINED_FUNCTION_2_28();
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = (_OWORD *)(v20[7] + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return outlined init with take of Any(a1, v21);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

_QWORD *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  _QWORD *v2;
  char v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  _QWORD v10[2];

  v2 = (_QWORD *)isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v5 = (_QWORD *)((char *)v10 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    specialized closure #1 in _NativeDictionary.filter(_:)(v5, v4, v2);
    if (v1)
      swift_willThrow();
    else
      return (_QWORD *)v6;
  }
  else
  {
    v7 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v7);
    specialized closure #1 in _NativeDictionary.filter(_:)(v7, v4, v2);
    v2 = v8;
    MEMORY[0x1C3BCB4A4](v7, -1, -1);
  }
  return v2;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  int64_t v37;

  v33 = 0;
  v3 = 0;
  v6 = a3[8];
  v4 = a3 + 8;
  v5 = v6;
  v7 = 1 << *((_BYTE *)v4 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v5;
  v34 = v4;
  v35 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v37 = v3;
      v11 = v10 | (v3 << 6);
      goto LABEL_20;
    }
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_49;
    if (v12 >= v35)
    {
LABEL_47:
      specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v33, (uint64_t)a3);
      return;
    }
    v13 = v34[v12];
    v14 = v3 + 1;
    if (!v13)
    {
      v14 = v3 + 2;
      if (v3 + 2 >= v35)
        goto LABEL_47;
      v13 = v34[v14];
      if (!v13)
      {
        v14 = v3 + 3;
        if (v3 + 3 >= v35)
          goto LABEL_47;
        v13 = v34[v14];
        if (!v13)
          break;
      }
    }
LABEL_19:
    v9 = (v13 - 1) & v13;
    v37 = v14;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_20:
    v16 = (uint64_t *)(a3[6] + 16 * v11);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(void **)(a3[7] + 8 * v11);
    v20 = one-time initialization token for CRR_FEATURES;
    swift_bridgeObjectRetain();
    v21 = v19;
    if (v20 != -1)
      swift_once();
    v22 = static PersonalInputFeatureNames.CRR_FEATURES;
    v23 = *(_QWORD *)(static PersonalInputFeatureNames.CRR_FEATURES + 16);
    if (!v23)
      goto LABEL_43;
    v24 = *(_QWORD *)(static PersonalInputFeatureNames.CRR_FEATURES + 32) == v17
       && *(_QWORD *)(static PersonalInputFeatureNames.CRR_FEATURES + 40) == v18;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_44;
    if (v23 == 1)
      goto LABEL_43;
    v25 = *(_QWORD *)(v22 + 48) == v17 && *(_QWORD *)(v22 + 56) == v18;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_44:
      swift_bridgeObjectRelease();

      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v30 = __OFADD__(v33++, 1);
      v3 = v37;
      if (v30)
        goto LABEL_50;
    }
    else
    {
      if (v23 != 2)
      {
        v26 = (_QWORD *)(v22 + 72);
        v27 = 2;
        while (1)
        {
          v28 = v27 + 1;
          if (__OFADD__(v27, 1))
            break;
          v29 = *(v26 - 1) == v17 && *v26 == v18;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_44;
          v26 += 2;
          ++v27;
          if (v28 == v23)
            goto LABEL_43;
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
LABEL_43:
      swift_bridgeObjectRelease();

      v3 = v37;
    }
  }
  v15 = v3 + 4;
  if (v3 + 4 >= v35)
    goto LABEL_47;
  v13 = v34[v15];
  if (v13)
  {
    v14 = v3 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v35)
      goto LABEL_47;
    v13 = v34[v14];
    ++v15;
    if (v13)
      goto LABEL_19;
  }
LABEL_51:
  __break(1u);
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v33;
  uint64_t v34;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLMultiArray>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v33 = a1;
  v34 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v34)
        return v9;
      v16 = v33[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v34)
          return v9;
        v16 = v33[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v34)
            return v9;
          v16 = v33[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v34)
              return v9;
            v16 = v33[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v34)
                  return v9;
                v16 = v33[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    v22 = v21;
    String.hash(into:)();
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v9 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) == 0)
      break;
    v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    v31 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v26);
    *v31 = v20;
    v31[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v26) = v22;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_39;
    if (!v5)
      return v9;
  }
  v27 = 0;
  v28 = (unint64_t)(63 - v23) >> 6;
  while (++v25 != v28 || (v27 & 1) == 0)
  {
    v29 = v25 == v28;
    if (v25 == v28)
      v25 = 0;
    v27 |= v29;
    v30 = *(_QWORD *)(v12 + 8 * v25);
    if (v30 != -1)
    {
      v26 = __clz(__rbit64(~v30)) + (v25 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for CRRFeatureExtractor()
{
  return &type metadata for CRRFeatureExtractor;
}

uint64_t OUTLINED_FUNCTION_0_31()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_1_27()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = v0;
  *(_QWORD *)(v2 - 88) = v1;
}

uint64_t OUTLINED_FUNCTION_2_28()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_3_23()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

void OUTLINED_FUNCTION_4_25()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

void OUTLINED_FUNCTION_5_17()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

BOOL OUTLINED_FUNCTION_7_20()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

BOOL OUTLINED_FUNCTION_8_19(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

unint64_t OUTLINED_FUNCTION_9_21(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
}

unint64_t OUTLINED_FUNCTION_10_17(uint64_t a1)
{
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_11_12()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_13_18()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_14_15()
{
  return swift_bridgeObjectRetain();
}

void one-time initialization function for CLIENT_TIME_RANGE()
{
  static PersonalInputFeatureNames.CLIENT_TIME_RANGE = (uint64_t)&outlined read-only object #0 of one-time initialization function for CLIENT_TIME_RANGE;
}

void one-time initialization function for CRR_FEATURES()
{
  static PersonalInputFeatureNames.CRR_FEATURES = (uint64_t)&outlined read-only object #0 of one-time initialization function for CRR_FEATURES;
}

uint64_t *ConstantStepFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static ConstantStepFeatureExtractor.extractedFeatures;
}

uint64_t ConstantStepFeatureExtractor.extractImpl(from:)(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t inited;

  type metadata accessor for MLMultiArray();
  result = static MLMultiArray.makeScalar(from:)(a1);
  v4 = result;
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2E94230;
    strcpy((char *)(inited + 32), "constant_step");
    *(_WORD *)(inited + 46) = -4864;
    *(_QWORD *)(inited + 48) = v4;
    return Dictionary.init(dictionaryLiteral:)();
  }
  return result;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance ConstantStepFeatureExtractor()
{
  ConstantStepFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance ConstantStepFeatureExtractor()
{
  double *v0;

  return ConstantStepFeatureExtractor.extractImpl(from:)(*v0);
}

ValueMetadata *type metadata accessor for ConstantStepFeatureExtractor()
{
  return &type metadata for ConstantStepFeatureExtractor;
}

SiriCam::PluginToBundleMap_optional __swiftcall PluginToBundleMap.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  SiriCam::PluginToBundleMap_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 14;
  switch(v3)
  {
    case 0:
      goto LABEL_16;
    case 1:
      v5 = 1;
      goto LABEL_16;
    case 2:
      v5 = 2;
      goto LABEL_16;
    case 3:
      v5 = 3;
      goto LABEL_16;
    case 4:
      v5 = 4;
      goto LABEL_16;
    case 5:
      v5 = 5;
      goto LABEL_16;
    case 6:
      v5 = 6;
      goto LABEL_16;
    case 7:
      v5 = 7;
      goto LABEL_16;
    case 8:
      v5 = 8;
      goto LABEL_16;
    case 9:
      v5 = 9;
      goto LABEL_16;
    case 10:
      v5 = 10;
      goto LABEL_16;
    case 11:
      v5 = 11;
      goto LABEL_16;
    case 12:
      v5 = 12;
      goto LABEL_16;
    case 13:
      v5 = 13;
LABEL_16:
      v6 = v5;
      break;
    case 14:
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    case 22:
      v6 = 22;
      break;
    case 23:
      v6 = 23;
      break;
    case 24:
      v6 = 24;
      break;
    case 25:
      v6 = 25;
      break;
    case 26:
      v6 = 26;
      break;
    case 27:
      v6 = 27;
      break;
    case 28:
      v6 = 28;
      break;
    case 29:
      v6 = 29;
      break;
    case 30:
      v6 = 30;
      break;
    case 31:
      v6 = 31;
      break;
    default:
      v6 = 32;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t PluginToBundleMap.associatedAppBundleId.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(_QWORD, _QWORD))((char *)nullsub_1 + 4 * byte_1C2E97CF0[*v0]))(0, 0);
}

unint64_t sub_1C2E7D83C()
{
  return 0xD000000000000015;
}

void sub_1C2E7D93C()
{
  OUTLINED_FUNCTION_9_3();
}

void sub_1C2E7D954()
{
  OUTLINED_FUNCTION_9_3();
}

void sub_1C2E7D96C()
{
  JUMPOUT(0x1C2E7D980);
}

uint64_t PluginToBundleMap.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1C2E7D9BC + 4 * byte_1C2E97D10[*v0]))(0xD00000000000001ELL, 0x80000001C2E98EC0);
}

void sub_1C2E7D9BC()
{
  OUTLINED_FUNCTION_9_3();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PluginToBundleMap()
{
  return specialized == infix<A>(_:_:)();
}

unint64_t lazy protocol witness table accessor for type PluginToBundleMap and conformance PluginToBundleMap()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginToBundleMap and conformance PluginToBundleMap;
  if (!lazy protocol witness table cache variable for type PluginToBundleMap and conformance PluginToBundleMap)
  {
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for PluginToBundleMap, &type metadata for PluginToBundleMap);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginToBundleMap and conformance PluginToBundleMap);
  }
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance PluginToBundleMap()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PluginToBundleMap()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PluginToBundleMap()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriCam::PluginToBundleMap_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PluginToBundleMap(Swift::String *a1)
{
  return PluginToBundleMap.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PluginToBundleMap@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = PluginToBundleMap.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PluginToBundleMap(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE1)
  {
    if (a2 + 31 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 31) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 32;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x20;
  v5 = v6 - 32;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginToBundleMap(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 31 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 31) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE0)
    return ((uint64_t (*)(void))((char *)&loc_1C2E7DD0C + 4 * byte_1C2E97D35[v4]))();
  *a1 = a2 + 31;
  return ((uint64_t (*)(void))((char *)sub_1C2E7DD40 + 4 * byte_1C2E97D30[v4]))();
}

uint64_t sub_1C2E7DD40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E7DD48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E7DD50);
  return result;
}

uint64_t sub_1C2E7DD5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E7DD64);
  *(_BYTE *)result = a2 + 31;
  return result;
}

uint64_t sub_1C2E7DD68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E7DD70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PluginToBundleMap()
{
  return &type metadata for PluginToBundleMap;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay7SiriCam15ActionCandidateVGG_AH06RankedH0Vs5NeverOTg505_sSi7f5Cam15hi5VAA06j34C0VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_n(uint64_t a1, void (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(_QWORD, char *);
  uint64_t v32;
  uint64_t v33;

  v31 = a2;
  v32 = a3;
  v4 = type metadata accessor for RankedAction();
  v30 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
  v8 = MEMORY[0x1E0C80A78](v7);
  v29 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (_QWORD *)((char *)v25 - v11);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v25 - v13;
  v33 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v15 = v33;
  v16 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v28 = v16;
  v25[1] = a1;
  if (v16)
  {
    v17 = 0;
    v18 = *(_QWORD *)(type metadata accessor for ActionCandidate() - 8);
    v19 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    v26 = *(_QWORD *)(v18 + 72);
    v27 = v6;
    do
    {
      v20 = (uint64_t)&v29[*(int *)(v7 + 48)];
      outlined init with copy of ActionCandidate(v19, v20, (uint64_t (*)(_QWORD))type metadata accessor for ActionCandidate);
      v21 = (uint64_t)v12 + *(int *)(v7 + 48);
      *v12 = v17;
      outlined init with take of ActionCandidate(v20, v21, (uint64_t (*)(_QWORD))type metadata accessor for ActionCandidate);
      outlined init with take of (offset: Int, element: ActionCandidate)((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
      v31(*(_QWORD *)v14, &v14[*(int *)(v7 + 48)]);
      outlined destroy of CaarHandler?((uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v33;
      }
      v23 = *(_QWORD *)(v15 + 16);
      v22 = *(_QWORD *)(v15 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v15 = v33;
      }
      ++v17;
      *(_QWORD *)(v15 + 16) = v23 + 1;
      outlined init with take of ActionCandidate((uint64_t)v27, v15+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v23, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
      v19 += v26;
    }
    while (v28 != v17);
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD v9[4];

  v9[2] = a6;
  swift_bridgeObjectRetain();
  v7 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay7SiriCam15ActionCandidateVGG_AH06RankedH0Vs5NeverOTg505_sSi7f5Cam15hi5VAA06j34C0VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_n(a6, (void (*)(_QWORD, char *))partial apply for closure #1 in FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:), (uint64_t)v9);
  swift_bridgeObjectRelease();
  return v7;
}

void closure #1 in FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = a4;
  v7 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for CamParse(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v15 - v12;
  v14 = type metadata accessor for ActionCandidate();
  outlined init with copy of ActionCandidate(a2 + *(int *)(v14 + 20), (uint64_t)v13, type metadata accessor for CamParse);
  if (__OFSUB__(*(_QWORD *)(a3 + 16), a1))
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of ActionCandidate((uint64_t)v13, (uint64_t)v11, type metadata accessor for CamParse);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    UUID.init()();
    RankedAction.init(flowHandlerId:parse:score:loggingId:alternatives:userData:)();
    outlined destroy of CamParse((uint64_t)v13);
  }
}

uint64_t FallbackRanker.rank(requestId:caarId:rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v9);
  v15 = FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(v10, v11, v12, v13, v14, a5);
  outlined destroy of CaarHandler?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  return v15;
}

uint64_t FallbackRanker.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Caar.rank(requestId:caarId:rcId:trpId:actions:rankerContext:) in conformance FallbackRanker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for Caar.rank(requestId:caarId:rcId:actions:rankerContext:) in conformance FallbackRanker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return FallbackRanker.rank(requestId:caarId:rcId:actions:rankerContext:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Caar.rank(requestId:caarId:rcId:trpId:parses:rankerContext:) in conformance FallbackRanker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  FallbackRanker.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)();
  return a6;
}

uint64_t one-time initialization function for caarProvider()
{
  uint64_t result;

  type metadata accessor for CaarProvider();
  swift_allocObject();
  result = CaarProvider.().init()();
  static CaarProvider.caarProvider = result;
  return result;
}

uint64_t CaarProvider.().init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t *v13;
  _BYTE v15[40];
  _QWORD v16[5];
  _QWORD v17[5];

  v1 = v0;
  if (one-time initialization token for kLogger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)kLogger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2E0C000, v3, v4, "Initialising Caar Provider", v5, 2u);
    MEMORY[0x1C3BCB4A4](v5, -1, -1);
  }

  if ((CamFeatureFlag.isEnabled.getter(4u) & 1) != 0)
  {
    v6 = type metadata accessor for DawnHeuristicScorer();
    v7 = &protocol witness table for DawnHeuristicScorer;
  }
  else
  {
    v6 = type metadata accessor for HeuristicScorer();
    v7 = &protocol witness table for HeuristicScorer;
  }
  v17[3] = v6;
  v17[4] = v7;
  v17[0] = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TieBreaking.Type>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C2E940D0;
  *(_QWORD *)(v8 + 32) = type metadata accessor for AppLaunchTieBreaker();
  *(_QWORD *)(v8 + 40) = &protocol witness table for AppLaunchTieBreaker;
  *(_QWORD *)(v8 + 48) = type metadata accessor for DisabledAppShortcutTieBreaker();
  *(_QWORD *)(v8 + 56) = &protocol witness table for DisabledAppShortcutTieBreaker;
  *(_QWORD *)(v8 + 64) = type metadata accessor for TrialOverridesTieBreaker();
  *(_QWORD *)(v8 + 72) = &protocol witness table for TrialOverridesTieBreaker;
  *(_QWORD *)(v8 + 80) = type metadata accessor for UserHistoryTieBreaker();
  *(_QWORD *)(v8 + 88) = &protocol witness table for UserHistoryTieBreaker;
  outlined init with copy of SignalProviding((uint64_t)v17, (uint64_t)v15);
  v9 = type metadata accessor for CodeBasedRankerHandler();
  swift_allocObject();
  v10 = CodeBasedRankerHandler.init(scorer:tieBreakerChain:)((uint64_t)v15, v8);
  v16[3] = v9;
  v16[4] = &protocol witness table for CodeBasedRankerHandler;
  v16[0] = v10;
  outlined init with take of (offset: Int, element: ActionCandidate)((uint64_t)v16, v1 + 16, (uint64_t *)&demangling cache variable for type metadata for CaarHandler?);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, (os_log_type_t)v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1C2E0C000, v11, (os_log_type_t)v12, "CAAR Handler created successfully", v13, 2u);
    MEMORY[0x1C3BCB4A4](v13, -1, -1);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v1;
}

uint64_t static CaarProvider.caar()@<X0>(uint64_t *a1@<X8>)
{
  return static CaarProvider._caar()(a1);
}

uint64_t static CaarProvider._caar()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  if (one-time initialization token for caarProvider != -1)
    swift_once();
  outlined init with copy of CaarHandler?(static CaarProvider.caarProvider + 16, (uint64_t)&v12);
  if (v13)
  {
    outlined init with take of AppSelectionSignalComponent(&v12, (uint64_t)v14);
    if (one-time initialization token for kLogger != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)kLogger);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1C2E0C000, v3, v4, "Found existing Caar Handler, updating it.", v5, 2u);
      MEMORY[0x1C3BCB4A4](v5, -1, -1);
    }

    v6 = v15;
    v7 = v16;
    v8 = __swift_project_boxed_opaque_existential_1(v14, v15);
    a1[3] = v6;
    a1[4] = *(_QWORD *)(v7 + 8);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(boxed_opaque_existential_1, v8, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    outlined destroy of CaarHandler?((uint64_t)&v12, (uint64_t *)&demangling cache variable for type metadata for CaarHandler?);
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(_QWORD *)v11 = 0xD000000000000019;
    *(_QWORD *)(v11 + 8) = 0x80000001C2E9BA50;
    *(_BYTE *)(v11 + 16) = 0;
    return swift_willThrow();
  }
}

uint64_t type metadata accessor for FallbackRanker()
{
  return objc_opt_self();
}

uint64_t static CaarProvider.getCaar()@<X0>(uint64_t *a1@<X8>)
{
  return static CaarProvider._caar()(a1);
}

uint64_t CaarProvider.deinit()
{
  uint64_t v0;

  outlined destroy of CaarHandler?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for CaarHandler?);
  return v0;
}

uint64_t CaarProvider.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CaarHandler?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for CaarHandler?);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CaarProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for CaarProvider()
{
  return swift_lookUpClassMethod();
}

void partial apply for closure #1 in FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  closure #1 in FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

void outlined destroy of CaarHandler?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_1_5();
}

void outlined init with take of ActionCandidate(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_48_0(a1, a2, a3);
  OUTLINED_FUNCTION_0_32(v3);
  OUTLINED_FUNCTION_1_5();
}

void outlined init with copy of ActionCandidate(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_48_0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  OUTLINED_FUNCTION_1_5();
}

uint64_t outlined init with copy of CaarHandler?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CaarHandler?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void outlined init with take of (offset: Int, element: ActionCandidate)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_0_32(v3);
  OUTLINED_FUNCTION_1_5();
}

uint64_t OUTLINED_FUNCTION_0_32(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

uint64_t dispatch thunk of TieBreaking.forcedDisambiguation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TieBreaking.supportedTie()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TieBreaking.actionBoost(features:loggingId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t specialized MutableCollection.subscript.getter(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    type metadata accessor for RankedAction();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    v10 = MEMORY[0x1E0DEE9D8];
  }
  v11 = *(_QWORD *)(v10 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
    v9 = v8;
    goto LABEL_9;
  }
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v9;
}

uint64_t Array<A>.execute(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopTwo?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TopTwo();
  OUTLINED_FUNCTION_1_1();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v28 - v12;
  Array<A>.topTwo.getter(a1, (uint64_t)v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    outlined destroy of TopTwo?((uint64_t)v6);
    if (one-time initialization token for ranker != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.ranker);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)OUTLINED_FUNCTION_4();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1C2E0C000, v15, v16, "Fewer than 2 actions, won't tie break.", v17, 2u);
      OUTLINED_FUNCTION_3();
    }

    swift_bridgeObjectRetain();
  }
  else
  {
    outlined init with take of CamModelMetadata((uint64_t)v6, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TopTwo);
    Array<A>.tieBreakScores(tie:)((uint64_t)v11, (uint64_t)v13, a2);
    if (*(_QWORD *)(a1 + 16) >= 3uLL)
    {
      v18 = specialized MutableCollection.subscript.getter(2, a1);
      specialized Array.init<A>(_:)(v18, v19, v20, v21);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>);
    v22 = *(_QWORD *)(type metadata accessor for RankedAction() - 8);
    v23 = *(_QWORD *)(v22 + 72);
    v24 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1C2E940E0;
    v26 = v25 + v24;
    outlined init with copy of RankedAction((uint64_t)v11, v26, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    outlined init with copy of RankedAction((uint64_t)&v11[*(int *)(v7 + 20)], v26 + v23, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    v29 = v25;
    specialized Array.append<A>(contentsOf:)();
    a1 = v29;
    OUTLINED_FUNCTION_4_26((uint64_t)v11);
    OUTLINED_FUNCTION_4_26((uint64_t)v13);
  }
  return a1;
}

void ScoreBoost.loggingInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;

  v1 = v0;
  v2 = OUTLINED_FUNCTION_1_12();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993A8]), sel_init);
  if (v6)
  {
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    v7 = type metadata accessor for ScoreBoost();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + *(int *)(v7 + 24), v2);
    v8 = SISchemaUUID.__allocating_init(nsuuid:)();
    OUTLINED_FUNCTION_1_6((uint64_t)v8, sel_setActionCandidateId_);

    v9 = objc_msgSend(v6, sel_setBoost_, *(double *)v1);
    if (*(_QWORD *)(v1 + 16))
    {
      v9 = (id)MEMORY[0x1C3BCA844](*(_QWORD *)(v1 + 8));
      v10 = v9;
    }
    else
    {
      v10 = 0;
    }
    OUTLINED_FUNCTION_1_6((uint64_t)v9, sel_setReason_);

  }
  OUTLINED_FUNCTION_32_0();
}

uint64_t Array<A>.tieBreakScores(tie:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void (*v16)(char *, _QWORD, uint64_t);
  uint64_t v17;
  Swift::Bool v18;
  int v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  void *v57;
  id v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75[3];
  __int128 v76;
  uint64_t v77;

  v6 = type metadata accessor for TopTwo();
  v7 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v60 - v9;
  v11 = MEMORY[0x1E0DEE9D8];
  v77 = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v62 = a1;
    v61 = v8;
    swift_bridgeObjectRetain();
    v13 = 0;
    *(_QWORD *)&v14 = 136315650;
    v64 = v14;
    v63 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v14 = 136315138;
    v67 = v14;
    v65 = a2;
    v66 = a3;
    v68 = v10;
    v69 = v12;
    while (1)
    {
      v70 = *(_OWORD *)(a3 + 16 * v13 + 32);
      outlined init with copy of RankedAction(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TopTwo);
      v15 = *((_QWORD *)&v70 + 1);
      v16 = *(void (**)(char *, _QWORD, uint64_t))(*((_QWORD *)&v70 + 1) + 24);
      v76 = v70;
      __swift_allocate_boxed_opaque_existential_1(v75);
      v17 = v70;
      v16(v10, v70, v15);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v17, v15) & 1) != 0)
      {
        v18 = TieBreaking.shouldForceSkip()();
        v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(v17, v15);
        if (!v18 && (v19 & 1) != 0)
        {
          LODWORD(v70) = v19;
          if (one-time initialization token for ranker != -1)
            swift_once();
          v43 = type metadata accessor for Logger();
          __swift_project_value_buffer(v43, (uint64_t)static Logger.ranker);
          outlined init with copy of SignalProviding((uint64_t)v75, (uint64_t)v73);
          v44 = Logger.logObject.getter();
          v45 = static os_log_type_t.info.getter();
          v46 = os_log_type_enabled(v44, v45);
          v47 = v61;
          if (v46)
          {
            v48 = (uint8_t *)swift_slowAlloc();
            v72 = swift_slowAlloc();
            v49 = v72;
            *(_DWORD *)v48 = v67;
            __swift_project_boxed_opaque_existential_1(v73, v74);
            v50 = TieBreaking.name.getter();
            v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v72);
            a2 = v65;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
            _os_log_impl(&dword_1C2E0C000, v44, v45, "%s supports this tie.", v48, 0xCu);
            swift_arrayDestroy();
            v52 = v49;
            v47 = v61;
            MEMORY[0x1C3BCB4A4](v52, -1, -1);
            MEMORY[0x1C3BCB4A4](v48, -1, -1);
          }
          else
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
          }

          TieBreaking.boostTopTwo(tie:)(v47, a2, v17, v15);
          TieBreaking.executionMetadata(supported:forceSkipped:boostInfo:)(v70 & 1, 0);
          v53 = swift_bridgeObjectRelease();
          MEMORY[0x1C3BCA994](v53);
          if (*(_QWORD *)(v77 + 16) >= *(_QWORD *)(v77 + 24) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          outlined init with copy of RankedAction(v47, v62, (uint64_t (*)(_QWORD))type metadata accessor for TopTwo);
          v54 = v77;
          v73[0] = MEMORY[0x1E0DEE9D8];
          v55 = *(_QWORD *)(v77 + 16);
          if (v55)
          {
            swift_bridgeObjectRetain_n();
            for (i = 0; i != v55; ++i)
            {
              v57 = *(void **)(v54 + 8 * i + 32);
              if (v57)
              {
                v58 = v57;
                MEMORY[0x1C3BCA994]();
                if (*(_QWORD *)((v73[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v73[0] & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
            }
            swift_bridgeObjectRelease();
            v42 = v73[0];
          }
          else
          {
            swift_bridgeObjectRetain();
            v42 = MEMORY[0x1E0DEE9D8];
          }
          swift_bridgeObjectRelease();
          _s7SiriCam0B5ParseOWOhTm_0(v47, (uint64_t (*)(_QWORD))type metadata accessor for TopTwo);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
          return v42;
        }
        v20 = v19;
        if (one-time initialization token for ranker != -1)
          swift_once();
        v21 = type metadata accessor for Logger();
        __swift_project_value_buffer(v21, (uint64_t)static Logger.ranker);
        outlined init with copy of SignalProviding((uint64_t)v75, (uint64_t)v73);
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = swift_slowAlloc();
          v25 = swift_slowAlloc();
          v72 = v25;
          *(_DWORD *)v24 = v64;
          __swift_project_boxed_opaque_existential_1(v73, v74);
          v26 = TieBreaking.name.getter();
          *(_QWORD *)(v24 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v72);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
          *(_WORD *)(v24 + 12) = 1024;
          *(_DWORD *)(v24 + 14) = v20 & 1;
          *(_WORD *)(v24 + 18) = 1024;
          *(_DWORD *)(v24 + 20) = v18;
          _os_log_impl(&dword_1C2E0C000, v22, v23, "Skipping %s (supported=%{BOOL}d, forceSkipped=%{BOOL}d).", (uint8_t *)v24, 0x18u);
          swift_arrayDestroy();
          v28 = v25;
          a2 = v65;
          MEMORY[0x1C3BCB4A4](v28, -1, -1);
          v29 = v24;
          a3 = v66;
          MEMORY[0x1C3BCB4A4](v29, -1, -1);
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
        }

        TieBreaking.executionMetadata(supported:forceSkipped:boostInfo:)(v20 & 1, v18);
        MEMORY[0x1C3BCA994]();
        if (*(_QWORD *)(v77 + 16) >= *(_QWORD *)(v77 + 24) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v10 = v68;
        v12 = v69;
      }
      else
      {
        if (one-time initialization token for ranker != -1)
          swift_once();
        v30 = type metadata accessor for Logger();
        __swift_project_value_buffer(v30, (uint64_t)static Logger.ranker);
        outlined init with copy of SignalProviding((uint64_t)v75, (uint64_t)v73);
        v31 = Logger.logObject.getter();
        v32 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = swift_slowAlloc();
          v34 = swift_slowAlloc();
          v72 = v34;
          *(_DWORD *)v33 = v67;
          __swift_project_boxed_opaque_existential_1(v73, v74);
          v35 = TieBreaking.name.getter();
          *(_QWORD *)(v33 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v72);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
          _os_log_impl(&dword_1C2E0C000, v31, v32, "%s is not enabled.", (uint8_t *)v33, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BCB4A4](v34, -1, -1);
          MEMORY[0x1C3BCB4A4](v33, -1, -1);
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
        }

      }
      ++v13;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
      if (v12 == v13)
      {
        swift_bridgeObjectRelease();
        v37 = v77;
        a1 = v62;
        v11 = MEMORY[0x1E0DEE9D8];
        goto LABEL_23;
      }
    }
  }
  v37 = MEMORY[0x1E0DEE9D8];
LABEL_23:
  outlined init with copy of RankedAction(a2, a1, (uint64_t (*)(_QWORD))type metadata accessor for TopTwo);
  v75[0] = v11;
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    swift_bridgeObjectRetain_n();
    for (j = 0; j != v38; ++j)
    {
      v40 = *(void **)(v37 + 8 * j + 32);
      if (v40)
      {
        v41 = v40;
        MEMORY[0x1C3BCA994]();
        if (*(_QWORD *)((v75[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v75[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v42 = v75[0];
  }
  else
  {
    swift_bridgeObjectRetain();
    v42 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v42;
}

uint64_t TieBreaking.name.getter()
{
  swift_getDynamicType();
  swift_getMetatypeMetadata();
  return String.init<A>(describing:)();
}

Swift::Bool __swiftcall TieBreaking.shouldForceSkip()()
{
  uint64_t v0;

  return (*(unsigned __int8 (**)(void))(v0 + 16))() != 4 && ForcedDisambiguation.decision()();
}

void TieBreaking.executionMetadata(supported:forceSkipped:boostInfo:)(char a1, char a2)
{
  id v4;
  Class isa;
  uint64_t v6;
  void *v7;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D993B0]), sel_init);
  if (v4)
  {
    type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARScoreBoost);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, sel_setActionCandidateBoosts_, isa);

    v6 = TieBreaking.name.getter();
    v7 = (void *)MEMORY[0x1C3BCA844](v6);
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setTieBreakerName_, v7);

    objc_msgSend(v4, sel_setIsTieBreakerSupported_, a1 & 1);
    objc_msgSend(v4, sel_setWasTieBreakerForcedSkipped_, a2 & 1);
  }
  OUTLINED_FUNCTION_32_0();
}

uint64_t TieBreaking.boostTopTwo(tie:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL8 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;

  v87 = a1;
  v8 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_2_12();
  v83 = (uint64_t *)v10;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v11);
  v88 = (char *)&v74 - v12;
  OUTLINED_FUNCTION_3_7();
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)&v74 - v15);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v74 - v17;
  type metadata accessor for ScoreBoost();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_2_12();
  v86 = v20;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v21);
  v82 = (uint64_t *)((char *)&v74 - v22);
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v23);
  v84 = (char *)&v74 - v24;
  OUTLINED_FUNCTION_3_7();
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v74 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = (uint64_t *)((char *)&v74 - v30);
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v74 - v32;
  v34 = *(_QWORD *)(a2 + *(int *)(v8 + 44));
  v35 = a2 + *(int *)(v8 + 36);
  v36 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a4 + 40);
  v79 = a3;
  v80 = v4;
  v81 = a4;
  v77 = v36;
  v36(v34, v35, a3, a4);
  v78 = a2;
  RankedAction.with(score:)();
  if (one-time initialization token for ranker != -1)
    swift_once();
  v37 = type metadata accessor for Logger();
  v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.ranker);
  v85 = v18;
  outlined init with copy of RankedAction((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  OUTLINED_FUNCTION_6_21((uint64_t)v33, (uint64_t)v31);
  v89 = v33;
  OUTLINED_FUNCTION_6_21((uint64_t)v33, (uint64_t)v28);
  v76 = v38;
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.info.getter();
  v41 = os_log_type_enabled(v39, v40);
  if (v41)
  {
    v42 = OUTLINED_FUNCTION_4();
    v75 = OUTLINED_FUNCTION_4();
    v91 = v75;
    *(_DWORD *)v42 = 136315650;
    v44 = *v16;
    v43 = v16[1];
    swift_bridgeObjectRetain();
    v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v43, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v45 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_13(v45, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    *(_WORD *)(v42 + 12) = 2048;
    v90 = *v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for ScoreBoost);
    *(_WORD *)(v42 + 22) = 2080;
    if (*((_QWORD *)v28 + 2))
    {
      v46 = *((_QWORD *)v28 + 1);
      v47 = *((_QWORD *)v28 + 2);
    }
    else
    {
      v46 = 7104878;
      v47 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v91);
    OUTLINED_FUNCTION_10_18(v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for ScoreBoost);
    _os_log_impl(&dword_1C2E0C000, v39, v40, "Boosted %s by %f, reason: %s", (uint8_t *)v42, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }
  OUTLINED_FUNCTION_17_13(v41, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  OUTLINED_FUNCTION_7_21((uint64_t)v31);
  OUTLINED_FUNCTION_7_21((uint64_t)v28);

  v49 = v87;
  v48 = (uint64_t)v88;
  v50 = v86;
  v52 = type metadata accessor for TopTwo();
  v53 = (uint64_t)v84;
  v77(*(_QWORD *)(v78 + *(int *)(v52 + 20) + *(int *)(v8 + 44)), v78 + *(int *)(v52 + 20) + *(int *)(v8 + 36), v79, v81);
  RankedAction.with(score:)();
  v54 = v83;
  outlined init with copy of RankedAction(v48, (uint64_t)v83, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  v55 = v82;
  OUTLINED_FUNCTION_6_21(v53, (uint64_t)v82);
  OUTLINED_FUNCTION_6_21(v53, v50);
  v56 = Logger.logObject.getter();
  v57 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v86 = v52;
    v59 = OUTLINED_FUNCTION_4();
    v81 = OUTLINED_FUNCTION_4();
    v91 = v81;
    *(_DWORD *)v59 = 136315650;
    v60 = (uint64_t)v54;
    v61 = *v54;
    v62 = v54[1];
    swift_bridgeObjectRetain();
    v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7SiriCam0B5ParseOWOhTm_0(v60, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
    *(_WORD *)(v59 + 12) = 2048;
    v90 = *v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for ScoreBoost);
    *(_WORD *)(v59 + 22) = 2080;
    if (*(_QWORD *)(v50 + 16))
    {
      v63 = *(_QWORD *)(v50 + 8);
      v64 = *(_QWORD *)(v50 + 16);
    }
    else
    {
      v63 = 7104878;
      v64 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v91);
    OUTLINED_FUNCTION_10_18(v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v66 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_13(v66, (uint64_t (*)(_QWORD))type metadata accessor for ScoreBoost);
    _os_log_impl(&dword_1C2E0C000, v56, v57, "Boosted %s by %f, reason: %s", (uint8_t *)v59, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_3();
  }
  _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  OUTLINED_FUNCTION_4_26((uint64_t)v55);
  OUTLINED_FUNCTION_4_26(v50);

  ScoreBoost.loggingInfo.getter();
  v68 = v67;
  ScoreBoost.loggingInfo.getter();
  v91 = MEMORY[0x1E0DEE9D8];
  if (v68)
  {
    v70 = v68;
    OUTLINED_FUNCTION_14_16();
  }
  if (v69)
  {
    v71 = v69;
    OUTLINED_FUNCTION_14_16();
  }
  v72 = v91;

  OUTLINED_FUNCTION_7_21(v53);
  OUTLINED_FUNCTION_7_21((uint64_t)v89);
  outlined init with take of CamModelMetadata((uint64_t)v85, v49, (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  outlined init with take of CamModelMetadata(v48, v49 + *(int *)(v52 + 20), (uint64_t (*)(_QWORD))type metadata accessor for RankedAction);
  return v72;
}

uint64_t outlined destroy of TopTwo?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopTwo?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ScoreBoost()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ScoreBoost;
  if (!type metadata singleton initialization cache for ScoreBoost)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ScoreBoost(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UUID();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for ScoreBoost(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ScoreBoost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UUID();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for ScoreBoost(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for ScoreBoost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for ScoreBoost(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScoreBoost()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E80730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = OUTLINED_FUNCTION_1_12();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ScoreBoost()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E807B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 16) = a2;
  }
  else
  {
    v7 = OUTLINED_FUNCTION_1_12();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ScoreBoost()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_29()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_4_26(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  _s7SiriCam0B5ParseOWOhTm_0(a1, v1);
}

void OUTLINED_FUNCTION_6_21(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of RankedAction(a1, a2, v2);
}

void OUTLINED_FUNCTION_7_21(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  _s7SiriCam0B5ParseOWOhTm_0(a1, v1);
}

uint64_t OUTLINED_FUNCTION_10_18(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t OUTLINED_FUNCTION_13_19()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

void OUTLINED_FUNCTION_14_16()
{
  JUMPOUT(0x1C3BCA994);
}

void OUTLINED_FUNCTION_17_13(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  _s7SiriCam0B5ParseOWOhTm_0(v2, a2);
}

uint64_t CamFeatureFlag.isEnabled.getter(unsigned __int8 a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  unsigned __int8 v7[24];
  ValueMetadata *v8;
  unint64_t v9;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v2 = static CamFeatureFlag.forceEnabled;
  if (*(_QWORD *)(static CamFeatureFlag.forceEnabled + 16)
    && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    v5 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v3);
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    v8 = &type metadata for CamFeatureFlag;
    v9 = lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag();
    v7[0] = a1;
    v5 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return v5 & 1;
}

uint64_t CamFeatureFlag.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1C2E80A0C + 4 * byte_1C2E97F10[a1]))("verbose_logging", 15);
}

const char *sub_1C2E80A0C()
{
  return "word_embeddings";
}

const char *CamFeatureFlag.domain.getter()
{
  return "SiriCam";
}

void protocol witness for Hashable.hashValue.getter in conformance CamFeatureFlag()
{
  unsigned __int8 *v0;

  CamLogOutput.CodingKeys.hashValue.getter(*v0);
}

uint64_t protocol witness for FeatureFlagsKey.feature.getter in conformance CamFeatureFlag()
{
  unsigned __int8 *v0;

  return CamFeatureFlag.feature.getter(*v0);
}

uint64_t getEnumTagSinglePayload for CamFeatureFlag(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CamFeatureFlag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1C2E80BA0 + 4 * byte_1C2E97F1D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1C2E80BD4 + 4 * byte_1C2E97F18[v4]))();
}

uint64_t sub_1C2E80BD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E80BDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E80BE4);
  return result;
}

uint64_t sub_1C2E80BF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E80BF8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1C2E80BFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E80C04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CamFeatureFlag()
{
  return &type metadata for CamFeatureFlag;
}

uint64_t static RankedAction.< infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v4 = *(int *)(OUTLINED_FUNCTION_0_4() + 28);
  v5 = *(double *)((char *)v2 + v4);
  v6 = *(double *)((char *)a2 + v4);
  if (v5 < v6)
    return 1;
  if (v6 < v5)
    return 0;
  v8 = *v2;
  v9 = v2[1];
  if (v8 == 0xD000000000000021 && v9 == 0x80000001C2E99330)
    return 0;
  v10 = OUTLINED_FUNCTION_0_18();
  result = 0;
  if ((v10 & 1) == 0)
  {
    v12 = *a2;
    v11 = a2[1];
    if (v12 == 0xD000000000000021 && v11 == 0x80000001C2E99330 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
      return 1;
    if (v8 == v12 && v9 == v11)
      return 0;
    OUTLINED_FUNCTION_67();
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v14 & 1) == 0)
    {
      OUTLINED_FUNCTION_67();
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t static RankedAction.== infix(_:_:)()
{
  OUTLINED_FUNCTION_0_4();
  return static UUID.== infix(_:_:)();
}

unint64_t lazy protocol witness table accessor for type RankedAction and conformance RankedAction()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RankedAction and conformance RankedAction;
  if (!lazy protocol witness table cache variable for type RankedAction and conformance RankedAction)
  {
    v1 = type metadata accessor for RankedAction();
    result = MEMORY[0x1C3BCB3E4](&protocol conformance descriptor for RankedAction, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RankedAction and conformance RankedAction);
  }
  return result;
}

uint64_t specialized static Comparable.<= infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;

  v4 = *(int *)(type metadata accessor for RankedAction() + 28);
  v5 = *(double *)((char *)a2 + v4);
  v6 = *(double *)((char *)a1 + v4);
  if (v5 < v6)
    goto LABEL_2;
  if (v6 < v5
    || (v8 = *a2, v9 = a2[1], v8 == 0xD000000000000021) && v9 == 0x80000001C2E99330
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_7:
    v7 = 1;
    return v7 & 1;
  }
  v11 = *a1;
  v12 = a1[1];
  if (v11 != 0xD000000000000021 || v12 != 0x80000001C2E99330)
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v7 = 0;
    if ((v13 & 1) != 0)
      return v7 & 1;
    v14 = v8 == v11 && v9 == v12;
    if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
      return v7 & 1;
    }
    goto LABEL_7;
  }
LABEL_2:
  v7 = 0;
  return v7 & 1;
}

uint64_t specialized static Comparable.>= infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;

  v4 = *(int *)(type metadata accessor for RankedAction() + 28);
  v5 = *(double *)((char *)a1 + v4);
  v6 = *(double *)((char *)a2 + v4);
  if (v5 < v6)
    goto LABEL_2;
  if (v6 < v5
    || (v8 = *a1, v9 = a1[1], v8 == 0xD000000000000021) && v9 == 0x80000001C2E99330
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_7:
    v7 = 1;
    return v7 & 1;
  }
  v11 = *a2;
  v12 = a2[1];
  if (v11 != 0xD000000000000021 || v12 != 0x80000001C2E99330)
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v7 = 0;
    if ((v13 & 1) != 0)
      return v7 & 1;
    v14 = v8 == v11 && v9 == v12;
    if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
      return v7 & 1;
    }
    goto LABEL_7;
  }
LABEL_2:
  v7 = 0;
  return v7 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t one-time initialization function for dispatchQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v6);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  v8[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type TokenChain and conformance TokenChain(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v5, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static AutoConfirmProvider.dispatchQueue = result;
  return result;
}

void *one-time initialization function for autoConfirmProvider()
{
  void *result;

  type metadata accessor for AutoConfirmProvider();
  swift_allocObject();
  result = (void *)AutoConfirmProvider.().init()();
  static AutoConfirmProvider.autoConfirmProvider = result;
  return result;
}

uint64_t AutoConfirmProvider.autoSendHandler.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t AutoConfirmProvider.().init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v1 = v0;
  *(_QWORD *)(v0 + 16) = 0;
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.autoSend);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2E0C000, v3, v4, "Initialising AutoConfirmProvider", v5, 2u);
    MEMORY[0x1C3BCB4A4](v5, -1, -1);
  }

  type metadata accessor for AutoSendHandler();
  swift_allocObject();
  *(_QWORD *)(v1 + 16) = AutoSendHandler.init()();
  swift_release();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1C2E0C000, v6, v7, "Successfully initialised AutoConfirmProvider", v8, 2u);
    MEMORY[0x1C3BCB4A4](v8, -1, -1);
  }

  return v1;
}

uint64_t static AutoConfirmProvider.autoSendProvider(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint8_t *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for autoSend != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.autoSend);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v30 = v12;
    v17 = v9;
    v18 = v6;
    v19 = a2;
    v20 = v10;
    v21 = a1;
    v22 = v3;
    v23 = v7;
    v24 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C2E0C000, v14, v15, "In AutoSend provider", v16, 2u);
    v25 = v24;
    v7 = v23;
    v3 = v22;
    a1 = v21;
    v10 = v20;
    a2 = v19;
    v6 = v18;
    v9 = v17;
    v12 = v30;
    MEMORY[0x1C3BCB4A4](v25, -1, -1);
  }

  if (one-time initialization token for dispatchQueue != -1)
    swift_once();
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v3;
  v26[3] = a1;
  v26[4] = a2;
  aBlock[4] = partial apply for closure #1 in static AutoConfirmProvider.autoSendProvider(completion:);
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_2;
  v27 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v32 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C3BCAB44](0, v12, v9, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v31);
  return swift_release();
}

uint64_t closure #1 in static AutoConfirmProvider.autoSendProvider(completion:)(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  id v32;
  Swift::String v33;
  void (*v35)(_QWORD);
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _UNKNOWN **v40;
  char v41;

  if (one-time initialization token for autoConfirmProvider != -1)
    swift_once();
  if (!*((_QWORD *)static AutoConfirmProvider.autoConfirmProvider + 2))
  {
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.autoSend);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1C2E0C000, v4, v5, "AutoSend handler is nil. Trying to instantiate again in warmup", v6, 2u);
      MEMORY[0x1C3BCB4A4](v6, -1, -1);
    }

    type metadata accessor for AutoSendHandler();
    swift_allocObject();
    v7 = AutoSendHandler.init()();
    AutoConfirmProvider.autoSendHandler.setter(v7);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1C2E0C000, v8, v9, "Successfully instantiated AutoSendHandler", v10, 2u);
      MEMORY[0x1C3BCB4A4](v10, -1, -1);
    }

  }
  v11 = *((_QWORD *)static AutoConfirmProvider.autoConfirmProvider + 2);
  if (v11)
  {
    swift_retain();
    AutoSendHandler.update()();
    if (v12)
    {
      if (one-time initialization token for autoSend != -1)
        swift_once();
      v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.autoSend);
      v14 = v12;
      v15 = v12;
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        v35 = a2;
        v19 = swift_slowAlloc();
        v36 = v19;
        *(_DWORD *)v18 = 136315138;
        v20 = v12;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v21 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2E0C000, v16, v17, "Autosend handler warmup failed with error: %s", v18, 0xCu);
        swift_arrayDestroy();
        v23 = v19;
        a2 = v35;
        MEMORY[0x1C3BCB4A4](v23, -1, -1);
        MEMORY[0x1C3BCB4A4](v18, -1, -1);
      }
      else
      {

      }
      v36 = 0;
      v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      v36 = 0xD000000000000026;
      v37 = 0x80000001C2E9BBD0;
      v32 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v33._countAndFlagsBits = String.init<A>(reflecting:)();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v38 = 0;
      v41 = 1;
      a2(&v36);
      swift_release();

    }
    else
    {
      if (one-time initialization token for autoSend != -1)
        swift_once();
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.autoSend);
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1C2E0C000, v29, v30, "Successfully warmed up AutoSend handler. Invoking the callback function", v31, 2u);
        MEMORY[0x1C3BCB4A4](v31, -1, -1);
      }

      v39 = type metadata accessor for AutoSendHandler();
      v40 = &protocol witness table for AutoSendHandler;
      v36 = v11;
      v41 = 0;
      swift_retain();
      a2(&v36);
      swift_release();
    }
  }
  else
  {
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.autoSend);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1C2E0C000, v25, v26, "Autosend handler warmup failed: cannot warm up nil currentAutoSendHandler", v27, 2u);
      MEMORY[0x1C3BCB4A4](v27, -1, -1);
    }

    v36 = 0xD000000000000049;
    v37 = 0x80000001C2E9BB80;
    v38 = 0;
    v41 = 1;
    a2(&v36);
  }
  return outlined destroy of Result<AutoConfirming, AutoConfirmError>((uint64_t)&v36);
}

uint64_t sub_1C2E82034()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static AutoConfirmProvider.autoSendProvider(completion:)()
{
  uint64_t v0;

  return closure #1 in static AutoConfirmProvider.autoSendProvider(completion:)(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD))(v0 + 24));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t AutoConfirmProvider.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t AutoConfirmProvider.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AutoConfirmProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for AutoConfirmProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t outlined destroy of Result<AutoConfirming, AutoConfirmError>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AutoConfirming, AutoConfirmError>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3BCB3E4](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *PersonalContextFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static PersonalContextFeatureExtractor.extractedFeatures;
}

uint64_t specialized OptionSet.intersection(_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t specialized OptionSet<>.formIntersection(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL specialized SetAlgebra.isSuperset(of:)(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, char *))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  void (*v24)(uint64_t, uint64_t, char *);
  _QWORD v25[5];
  int64_t v26;

  v24 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SignalValue));
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized _NativeDictionary.makeIterator()(v25, a1);
  v6 = v25[0];
  v26 = v25[3];
  v7 = v25[4];
  v22 = v25[1];
  v23 = (unint64_t)(v25[2] + 64) >> 6;
  result = swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_3;
LABEL_2:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v10 = v9 | (v26 << 6);
  while (1)
  {
    v15 = *(_QWORD *)(v6 + 56);
    v16 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v10);
    v17 = *v16;
    v18 = v16[1];
    v19 = type metadata accessor for SignalValue();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(&v5[*(int *)(v3 + 48)], v15 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v10, v19);
    *(_QWORD *)v5 = v17;
    *((_QWORD *)v5 + 1) = v18;
    v20 = &v5[*(int *)(v3 + 48)];
    swift_bridgeObjectRetain();
    v24(v17, v18, v20);
    result = outlined destroy of (key: String, value: SignalValue)((uint64_t)v5);
    if (v7)
      goto LABEL_2;
LABEL_3:
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v23)
      return swift_release();
    v12 = *(_QWORD *)(v22 + 8 * v11);
    v13 = v26 + 1;
    if (!v12)
    {
      v13 = v26 + 2;
      if (v26 + 2 >= v23)
        return swift_release();
      v12 = *(_QWORD *)(v22 + 8 * v13);
      if (!v12)
      {
        v13 = v26 + 3;
        if (v26 + 3 >= v23)
          return swift_release();
        v12 = *(_QWORD *)(v22 + 8 * v13);
        if (!v12)
        {
          v13 = v26 + 4;
          if (v26 + 4 >= v23)
            return swift_release();
          v12 = *(_QWORD *)(v22 + 8 * v13);
          if (!v12)
          {
            v13 = v26 + 5;
            if (v26 + 5 >= v23)
              return swift_release();
            v12 = *(_QWORD *)(v22 + 8 * v13);
            if (!v12)
            {
              v14 = v26 + 6;
              while (v14 < v23)
              {
                v12 = *(_QWORD *)(v22 + 8 * v14++);
                if (v12)
                {
                  v13 = v14 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v26 = v13;
  }
  __break(1u);
  return result;
}

unint64_t PersonalContextFeatureExtractor.transformCategorical(_:_:)(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  _QWORD *v12;

  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  if ((v7 & 1) == 0)
  {
    OUTLINED_FUNCTION_3_1();
LABEL_5:
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = a1;
    v9._object = a2;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v8 = 0x80000001C2E9BCF0;
    lazy protocol witness table accessor for type CamError and conformance CamError();
    v11 = OUTLINED_FUNCTION_2_1();
    *v12 = 0xD000000000000018;
    v12[1] = 0x80000001C2E9BCF0;
    OUTLINED_FUNCTION_18_14(v11, (uint64_t)v12);
    return v8;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v6);
  OUTLINED_FUNCTION_3_1();
  return v8;
}

uint64_t *PersonalContextFeatureExtractor.transformTimeRange(_:)(unint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;

  if ((a2 & 1) != 0)
  {
    lazy protocol witness table accessor for type CamError and conformance CamError();
    v25 = OUTLINED_FUNCTION_2_1();
    *v26 = 0xD000000000000019;
    v26[1] = 0x80000001C2E9BCD0;
    OUTLINED_FUNCTION_18_14(v25, (uint64_t)v26);
  }
  else
  {
    Dictionary.init(dictionaryLiteral:)();
    swift_isUniquelyReferenced_nonNull_native();
    v4 = OUTLINED_FUNCTION_37_11();
    OUTLINED_FUNCTION_45_7(v4, v5 | 0x7361666B61650000, 0x656D695474);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((a1 >> 2) & 1, 0x6F6F6E7265746661, 0xE90000000000006ELL);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v6 = OUTLINED_FUNCTION_37_11();
    OUTLINED_FUNCTION_34_8(v6, v7 & 0xFFFF00000000FFFFLL | 0x68636E750000);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v8 = OUTLINED_FUNCTION_1_28();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, 1853317476, 0xE400000000000000);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v9 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_25_13(v9, 0x656D6974796164);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v10 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_34_8(v10, 0x72656E6E6964);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v11 = OUTLINED_FUNCTION_1_28();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 1802728804, 0xE400000000000000);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v12 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_25_13(v12, 0x676E696E657665);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v13 = OUTLINED_FUNCTION_1_28();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, 0x6D695468636E756CLL, 0xE900000000000065);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v14 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_25_13(v14, 0x676E696E726F6DLL);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v15 = OUTLINED_FUNCTION_1_28();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, 0x746867696ELL, 0xE500000000000000);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v28 = (uint64_t)&v28;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((a1 >> 12) & 1, 0x756F487970706168, 0xE900000000000072);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v16 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_25_13(v16, 0x656D6954646562);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v17 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_25_13(v17, 0x746867696E6F74);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v18 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_25_13(v18, 0x646E656B656577);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v19 = OUTLINED_FUNCTION_1_28();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0x6B6565776B726F77, 0xE800000000000000);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v20 = OUTLINED_FUNCTION_1_28();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, 0x6E6974617265706FLL, 0xEE007372756F4867);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v21 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_45_7(v21, 0x676E696863746977, 0x7372756F48);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v22 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_23_13(v22, 0x676E69727073);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v23 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_23_13(v23, 0x72656D6D7573);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v24 = OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_23_13(v24, 0x6E6D75747561);
    OUTLINED_FUNCTION_2_30();
    OUTLINED_FUNCTION_37();
    v28 = (uint64_t)&v28;
    v2 = &v28;
    OUTLINED_FUNCTION_23_13((a1 >> 22) & 1, 0x7265746E6977);
    OUTLINED_FUNCTION_2_30();
  }
  return v2;
}

uint64_t PersonalContextFeatureExtractor.gatherCommonSignals()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AppSelectionSignalComponent>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C2E98090;
  v2 = type metadata accessor for DeviceClassSignal();
  v3 = MEMORY[0x1E0DA4860];
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = v3;
  OUTLINED_FUNCTION_53_5();
  DeviceClassSignal.init()();
  v4 = type metadata accessor for ClientHourOfDaySignal();
  v5 = MEMORY[0x1E0DA49B0];
  *(_QWORD *)(v1 + 96) = v4;
  *(_QWORD *)(v1 + 104) = v5;
  OUTLINED_FUNCTION_53_5();
  ClientHourOfDaySignal.init()();
  v6 = type metadata accessor for ClientTimeRangeSignal();
  v7 = MEMORY[0x1E0DA49C8];
  *(_QWORD *)(v1 + 136) = v6;
  *(_QWORD *)(v1 + 144) = v7;
  OUTLINED_FUNCTION_53_5();
  ClientTimeRangeSignal.init()();
  v8 = type metadata accessor for ClientDaylightSignal();
  OUTLINED_FUNCTION_37_7();
  v9 = ClientDaylightSignal.init()();
  v10 = MEMORY[0x1E0DA4918];
  *(_QWORD *)(v1 + 176) = v8;
  *(_QWORD *)(v1 + 184) = v10;
  *(_QWORD *)(v1 + 152) = v9;
  v11 = type metadata accessor for ClientCarplaySignal();
  OUTLINED_FUNCTION_37_7();
  v12 = ClientCarplaySignal.init()();
  v13 = MEMORY[0x1E0DA48D8];
  *(_QWORD *)(v1 + 216) = v11;
  *(_QWORD *)(v1 + 224) = v13;
  *(_QWORD *)(v1 + 192) = v12;
  type metadata accessor for SignalGatherer();
  OUTLINED_FUNCTION_37_7();
  SignalGatherer.init(signals:candidateAppBundleIds:)();
  swift_retain();
  dispatch thunk of SignalGatherer.gatherValuesAndTimings(completion:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  v14 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v14;
}

uint64_t closure #1 in PersonalContextFeatureExtractor.gatherCommonSignals()(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint8_t *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v36 = a2;
  v3 = type metadata accessor for SignalGatherer.ValuesWithTimings();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SignalGathererError();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v35 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v34 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v34 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(a1, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v18, v7);
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.autoSend);
    v20 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v20(v13, v15, v7);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v36 = v15;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc();
      v38 = v25;
      *(_DWORD *)v24 = 136315138;
      v34 = v24 + 4;
      v20(v35, v13, v7);
      v26 = String.init<A>(describing:)();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v28 = *(void (**)(char *, uint64_t))(v8 + 8);
      v28(v13, v7);
      _os_log_impl(&dword_1C2E0C000, v21, v22, "PersonalContextFeatureExtractor: signal gatherer error: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BCB4A4](v25, -1, -1);
      MEMORY[0x1C3BCB4A4](v24, -1, -1);

      return ((uint64_t (*)(char *, uint64_t))v28)(v36, v7);
    }
    else
    {

      v33 = *(void (**)(char *, uint64_t))(v8 + 8);
      v33(v13, v7);
      return ((uint64_t (*)(char *, uint64_t))v33)(v15, v7);
    }
  }
  else
  {
    v30 = (uint8_t *)(v36 + 16);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v18, v3);
    v31 = SignalGatherer.ValuesWithTimings.values.getter();
    v32 = MEMORY[0x1E0C80A78](v31);
    *(&v34 - 2) = v30;
    specialized Sequence.forEach(_:)(v32, (void (*)(uint64_t, uint64_t, char *))partial apply for closure #1 in closure #1 in PersonalContextFeatureExtractor.gatherCommonSignals());
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

void closure #1 in closure #1 in PersonalContextFeatureExtractor.gatherCommonSignals()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v6 = type metadata accessor for SignalValue();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v7 + 88))(v9, v6) == *MEMORY[0x1E0DA4710])
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 96))(v9, v6);
    v10 = *v9;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.setValue(_:forKey:)(v10, a1, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
    if (one-time initialization token for autoSend != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.autoSend);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1C2E0C000, v12, v13, "PersonalContextFeatureExtractor: Ignoring bundle-dependent signal; can only use independent signals in this context",
        v14,
        2u);
      MEMORY[0x1C3BCB4A4](v14, -1, -1);
    }

  }
}

char *PersonalContextFeatureExtractor.extractImpl(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v1 = type metadata accessor for Locale();
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v47 - v6;
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v47 - v8;
  v49 = Dictionary.init(dictionaryLiteral:)();
  static Locale.current.getter();
  v10 = Locale.regionCode.getter();
  v12 = v11;
  OUTLINED_FUNCTION_51_3((uint64_t)v9);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CamError and conformance CamError();
    v18 = OUTLINED_FUNCTION_2_1();
    *(_OWORD *)v19 = xmmword_1C2E980A0;
LABEL_9:
    OUTLINED_FUNCTION_18_14(v18, v19);
    return v9;
  }
  static Locale.current.getter();
  v9 = (char *)Locale.languageCode.getter();
  v14 = v13;
  OUTLINED_FUNCTION_51_3((uint64_t)v7);
  if (!v14)
  {
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_3_1();
    lazy protocol witness table accessor for type CamError and conformance CamError();
    v18 = OUTLINED_FUNCTION_2_1();
    *(_QWORD *)v19 = 0xD000000000000010;
    *(_QWORD *)(v19 + 8) = 0x80000001C2E9BC30;
    goto LABEL_9;
  }
  v47 = v9;
  static Locale.current.getter();
  v15 = Locale.identifier.getter();
  v9 = v16;
  OUTLINED_FUNCTION_51_3((uint64_t)v4);
  if (one-time initialization token for top13LocaleMap != -1)
    swift_once();
  v17 = OUTLINED_FUNCTION_44_6(v15, v9, (uint64_t)top13LocaleMap._rawValue);
  if (v0)
  {
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_12();
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = v17;
    OUTLINED_FUNCTION_12();
    v21 = v49;
    OUTLINED_FUNCTION_37();
    v48 = v21;
    OUTLINED_FUNCTION_23_13(v20, 0x656C61636F6CLL);
    v22 = v48;
    v49 = v48;
    OUTLINED_FUNCTION_4_27();
    if (one-time initialization token for top13RegionMap != -1)
      swift_once();
    v23 = OUTLINED_FUNCTION_44_6(v10, v12, (uint64_t)top13RegionMap._rawValue);
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_37();
    v48 = v22;
    OUTLINED_FUNCTION_23_13(v23, 0x6E6F69676572);
    OUTLINED_FUNCTION_4_27();
    if (one-time initialization token for top13LanguageMap != -1)
      swift_once();
    OUTLINED_FUNCTION_44_6((uint64_t)v47, v14, (uint64_t)top13LanguageMap._rawValue);
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_37();
    v24 = OUTLINED_FUNCTION_50_5();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, 0x65676175676E616CLL, 0xE800000000000000);
    v49 = v48;
    OUTLINED_FUNCTION_4_27();
    PersonalContextFeatureExtractor.gatherCommonSignals()();
    OUTLINED_FUNCTION_32_9(0xD000000000000011, 0x80000001C2E9BC50);
    if ((v25 & 1) != 0)
    {
      v28 = OUTLINED_FUNCTION_24_14();
      specialized Dictionary._Variant.removeValue(forKey:)(v28 & 0xFFFFFFFFFFFFLL | 0x6143000000000000);
    }
    else
    {
      OUTLINED_FUNCTION_37();
      v26 = OUTLINED_FUNCTION_12_16();
      OUTLINED_FUNCTION_45_7(v26, v27 & 0xFFFFFFFFFFFFLL | 0x6143000000000000, 0x79616C7072);
      v49 = v48;
      OUTLINED_FUNCTION_4_27();
    }
    OUTLINED_FUNCTION_32_9(0xD000000000000012, 0x80000001C2E9BC70);
    if ((v29 & 1) != 0)
    {
      v32 = OUTLINED_FUNCTION_24_14();
      specialized Dictionary._Variant.removeValue(forKey:)(v32 & 0xFFFFFFFFFFFFLL | 0x6144000000000000);
    }
    else
    {
      OUTLINED_FUNCTION_37();
      v30 = OUTLINED_FUNCTION_12_16();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v30, v31 & 0xFFFFFFFFFFFFLL | 0x6144000000000000, 0xEE00746867696C79);
      v49 = v48;
      OUTLINED_FUNCTION_4_27();
    }
    OUTLINED_FUNCTION_26_11((uint64_t)"raw.clientHourOfDay");
    if ((v33 & 1) != 0)
    {
      v36 = OUTLINED_FUNCTION_24_14();
      specialized Dictionary._Variant.removeValue(forKey:)(v36 & 0xFFFFFFFFFFFFLL | 0x6F48000000000000);
    }
    else
    {
      OUTLINED_FUNCTION_37();
      v34 = OUTLINED_FUNCTION_12_16();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, v35 & 0xFFFFFFFFFFFFLL | 0x6F48000000000000, 0xEF796144664F7275);
      v49 = v48;
      OUTLINED_FUNCTION_4_27();
    }
    OUTLINED_FUNCTION_32_9(0x697665442E776172, 0xEF7373616C436563);
    if ((v37 & 1) != 0)
    {
      specialized Dictionary._Variant.removeValue(forKey:)(0x6C43656369766564);
    }
    else
    {
      OUTLINED_FUNCTION_37();
      v38 = OUTLINED_FUNCTION_50_5();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v38, 0x6C43656369766564, 0xEB00000000737361);
      v49 = v48;
      OUTLINED_FUNCTION_4_27();
    }
    v39 = OUTLINED_FUNCTION_26_11((uint64_t)"raw.clientTimeRange");
    v41 = v40;
    OUTLINED_FUNCTION_1_0();
    v42 = PersonalContextFeatureExtractor.transformTimeRange(_:)(v39, v41 & 1);
    v43 = v49;
    v45 = (uint64_t)v42;
    swift_bridgeObjectRetain();
    v46 = specialized Dictionary.merging(_:uniquingKeysWith:)(v45, v43);
    OUTLINED_FUNCTION_12();
    v9 = (char *)specialized _NativeDictionary.mapValues<A>(_:)(v46);
    OUTLINED_FUNCTION_1_0();
  }
  return v9;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t type metadata accessor for PersonalContextFeatureExtractor()
{
  return objc_opt_self();
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance PersonalContextFeatureExtractor()
{
  PersonalContextFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

char *protocol witness for FeatureExtracting.extractImpl(from:) in conformance PersonalContextFeatureExtractor()
{
  return PersonalContextFeatureExtractor.extractImpl(from:)();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_8_20();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return swift_arrayInitWithCopy();
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_7_22();
  }
  result = OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  const void *v4;
  void *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_8_20();
  }
  else
  {
    OUTLINED_FUNCTION_40_8();
    if (!v8 && v7)
    {
      v7 = v6 >= v3;
      v8 = v6 == v3;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
      return OUTLINED_FUNCTION_14_17(v5, v4, 8 * v2);
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_7_22();
  }
  result = (void *)OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_8_20();
  }
  else
  {
    OUTLINED_FUNCTION_13_20();
    if (v4 + 16 * v3 <= v2 || v2 + 16 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      OUTLINED_FUNCTION_10_19();
      return OUTLINED_FUNCTION_3_24();
    }
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_7_22();
  }
  result = OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_8_20();
  }
  else
  {
    OUTLINED_FUNCTION_13_20();
    if (v4 + 8 * v3 <= v2 || v2 + 8 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(v5);
      OUTLINED_FUNCTION_10_19();
      return OUTLINED_FUNCTION_3_24();
    }
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_7_22();
  }
  result = OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_8_20();
  }
  else
  {
    OUTLINED_FUNCTION_13_20();
    if (v4 + 40 * v3 <= v2 || v2 + 40 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(v5);
      OUTLINED_FUNCTION_10_19();
      return OUTLINED_FUNCTION_3_24();
    }
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_7_22();
  }
  result = OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_8_20();
  }
  else
  {
    OUTLINED_FUNCTION_13_20();
    if (v4 + 24 * v3 <= v2 || v2 + 24 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MLFeatureValue));
      OUTLINED_FUNCTION_10_19();
      return OUTLINED_FUNCTION_3_24();
    }
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_7_22();
  }
  result = OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_8_20();
  }
  else
  {
    OUTLINED_FUNCTION_13_20();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]));
    OUTLINED_FUNCTION_30_15();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      OUTLINED_FUNCTION_10_19();
      return OUTLINED_FUNCTION_3_24();
    }
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_7_22();
  }
  result = OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  void (*v3)(_QWORD);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_8_20();
  }
  else
  {
    OUTLINED_FUNCTION_13_20();
    v3(0);
    OUTLINED_FUNCTION_30_15();
    if (!v6 & v5)
      v7 = v4 > v2;
    else
      v7 = 0;
    if (!v7)
    {
      OUTLINED_FUNCTION_10_19();
      return OUTLINED_FUNCTION_3_24();
    }
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_7_22();
  }
  result = OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *a1, uint64_t a2, char *a3)
{
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_8_20();
  }
  else
  {
    if (&a3[16 * a2] <= a1 || &a1[16 * a2] <= a3)
      return OUTLINED_FUNCTION_14_17(a3, a1, 16 * a2);
    OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_7_22();
  }
  result = (void *)OUTLINED_FUNCTION_3_15();
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_20_15();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_29_14() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v6;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_55_4();
  if (v8 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v0 + 32, v3, v2 + 16 * v7 + 32);
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_3_1();
    *v1 = v2;
    OUTLINED_FUNCTION_32_0();
    return;
  }
  v9 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v9, v3);
  v10 = v9 + v3;
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_20_15();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = OUTLINED_FUNCTION_29_14();
  if (!(_DWORD)v7 || v5 > *(_QWORD *)(v2 + 24) >> 1)
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v8, 1, v2);
    v2 = v9;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_14;
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_55_4();
  if (v10 != v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v0 + 32, v3);
  if (!v3)
  {
LABEL_14:
    OUTLINED_FUNCTION_3_1();
    *v1 = v2;
    OUTLINED_FUNCTION_32_0();
    return;
  }
  v11 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v11, v3);
  v12 = v11 + v3;
  if (!v6)
  {
    *(_QWORD *)(v2 + 16) = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_20_15();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = OUTLINED_FUNCTION_29_14();
  if (!(_DWORD)v7 || v5 > *(_QWORD *)(v2 + 24) >> 1)
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v8, 1, v2);
    v2 = v9;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_14;
    goto LABEL_16;
  }
  v10 = (*(_QWORD *)(v2 + 24) >> 1) - *(_QWORD *)(v2 + 16);
  v11 = type metadata accessor for RankedAction();
  if (v10 < v3)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80)), v3);
  if (!v3)
  {
LABEL_14:
    OUTLINED_FUNCTION_3_1();
    *v1 = v2;
    OUTLINED_FUNCTION_32_0();
    return;
  }
  v12 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v12, v3);
  v13 = v12 + v3;
  if (!v6)
  {
    *(_QWORD *)(v2 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;

  OUTLINED_FUNCTION_27_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v4 = OUTLINED_FUNCTION_16_15();
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_36;
  OUTLINED_FUNCTION_9_22();
  v5 = 0;
  if (!v2)
    goto LABEL_4;
LABEL_3:
  OUTLINED_FUNCTION_39_5();
  while (1)
  {
    OUTLINED_FUNCTION_36_9();
    if ((v9 & 1) == 0)
      swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_48_6();
    OUTLINED_FUNCTION_35_8();
    Hasher._finalize()();
    OUTLINED_FUNCTION_21_16();
    if (v10)
    {
      OUTLINED_FUNCTION_41_9();
      while (++v13 != v14 || (v12 & 1) == 0)
      {
        v15 = v13 == v14;
        if (v13 == v14)
          v13 = 0;
        v12 |= v15;
        if (*(_QWORD *)(v3 + 8 * v13) != -1)
        {
          OUTLINED_FUNCTION_54_0();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    OUTLINED_FUNCTION_43_9();
LABEL_27:
    OUTLINED_FUNCTION_11_13(v11);
    if (v2)
      goto LABEL_3;
LABEL_4:
    v6 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_38;
    if (v6 >= v20)
    {
      OUTLINED_FUNCTION_12_10();
      v0 = v19;
      v7 = v21;
      goto LABEL_31;
    }
    v7 = v21;
    ++v5;
    if (!v21[v6])
    {
      v5 = v6 + 1;
      if (v6 + 1 >= v20)
        goto LABEL_29;
      if (!v21[v5])
        break;
    }
LABEL_15:
    OUTLINED_FUNCTION_38_10();
  }
  v8 = v6 + 2;
  if (v8 < v20)
  {
    if (!v21[v8])
    {
      while (1)
      {
        v5 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_39;
        if (v5 >= v20)
          goto LABEL_29;
        ++v8;
        if (v21[v5])
          goto LABEL_15;
      }
    }
    v5 = v8;
    goto LABEL_15;
  }
LABEL_29:
  OUTLINED_FUNCTION_12_10();
  v0 = v19;
LABEL_31:
  if ((v22 & 1) != 0)
  {
    OUTLINED_FUNCTION_42_6();
    if (v17 != v18)
      *v7 = -1 << v16;
    else
      OUTLINED_FUNCTION_33_10(v16);
    *(_QWORD *)(v1 + 16) = 0;
  }
LABEL_36:
  OUTLINED_FUNCTION_12_10();
  *v0 = v4;
  OUTLINED_FUNCTION_15_9();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;

  OUTLINED_FUNCTION_27_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLFeatureValue>);
  v4 = OUTLINED_FUNCTION_16_15();
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_36;
  OUTLINED_FUNCTION_9_22();
  v5 = 0;
  if (!v2)
    goto LABEL_4;
LABEL_3:
  OUTLINED_FUNCTION_39_5();
  while (1)
  {
    OUTLINED_FUNCTION_36_9();
    if ((v9 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v10 = v0;
    }
    OUTLINED_FUNCTION_48_6();
    OUTLINED_FUNCTION_35_8();
    Hasher._finalize()();
    OUTLINED_FUNCTION_21_16();
    if (v11)
    {
      OUTLINED_FUNCTION_41_9();
      while (++v14 != v15 || (v13 & 1) == 0)
      {
        v16 = v14 == v15;
        if (v14 == v15)
          v14 = 0;
        v13 |= v16;
        if (*(_QWORD *)(v3 + 8 * v14) != -1)
        {
          OUTLINED_FUNCTION_54_0();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    OUTLINED_FUNCTION_43_9();
LABEL_27:
    OUTLINED_FUNCTION_11_13(v12);
    if (v2)
      goto LABEL_3;
LABEL_4:
    v6 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_38;
    if (v6 >= v21)
    {
      OUTLINED_FUNCTION_12_10();
      v0 = v20;
      v7 = v22;
      goto LABEL_31;
    }
    v7 = v22;
    ++v5;
    if (!v22[v6])
    {
      v5 = v6 + 1;
      if (v6 + 1 >= v21)
        goto LABEL_29;
      if (!v22[v5])
        break;
    }
LABEL_15:
    OUTLINED_FUNCTION_38_10();
  }
  v8 = v6 + 2;
  if (v8 < v21)
  {
    if (!v22[v8])
    {
      while (1)
      {
        v5 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_39;
        if (v5 >= v21)
          goto LABEL_29;
        ++v8;
        if (v22[v5])
          goto LABEL_15;
      }
    }
    v5 = v8;
    goto LABEL_15;
  }
LABEL_29:
  OUTLINED_FUNCTION_12_10();
  v0 = v20;
LABEL_31:
  if ((v23 & 1) != 0)
  {
    OUTLINED_FUNCTION_42_6();
    if (v18 != v19)
      *v7 = -1 << v17;
    else
      OUTLINED_FUNCTION_33_10(v17);
    *(_QWORD *)(v1 + 16) = 0;
  }
LABEL_36:
  OUTLINED_FUNCTION_12_10();
  *v0 = v4;
  OUTLINED_FUNCTION_15_9();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  __int128 v30;

  specialized LazyMapSequence.makeIterator()(a1, a2, a3, &v30);
  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (v8)
  {
    v10 = v7;
    v11 = v8;
    v12 = v9;
    while (1)
    {
      v13 = (_QWORD *)*a5;
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      v16 = v13[2];
      v17 = (v14 & 1) == 0;
      if (__OFADD__(v16, v17))
        break;
      v18 = v14;
      if (v13[3] >= v16 + v17)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_17;
        v15 = v19;
      }
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
      {
        v22 = *(_QWORD *)(v21[7] + 8 * v15);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v21[7] + 8 * v15) = v22;
      }
      else
      {
        v21[(v15 >> 6) + 8] |= 1 << v15;
        v23 = (uint64_t *)(v21[6] + 16 * v15);
        *v23 = v10;
        v23[1] = v11;
        *(_QWORD *)(v21[7] + 8 * v15) = v12;
        v24 = v21[2];
        v25 = __OFADD__(v24, 1);
        v26 = v24 + 1;
        if (v25)
          goto LABEL_16;
        v21[2] = v26;
      }
      v10 = specialized LazyMapSequence.Iterator.next()();
      v11 = v27;
      v12 = v28;
      a4 = 1;
      if (!v27)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : MLFeatureValue].Iterator._Variant();
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(&v6, *a1, a1[1], a1[2]);
  v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v18 < v14)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_1C2E84878()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PersonalContextFeatureExtractor.gatherCommonSignals()(uint64_t a1)
{
  char *v1;

  return closure #1 in PersonalContextFeatureExtractor.gatherCommonSignals()(a1, v1);
}

void partial apply for closure #1 in closure #1 in PersonalContextFeatureExtractor.gatherCommonSignals()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in closure #1 in PersonalContextFeatureExtractor.gatherCommonSignals()(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_1_28()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_2_30()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_3_24()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_4_27()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_9_22()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_10_19()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_11_13(unint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v5 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  v6 = (_QWORD *)(v2[6] + 16 * a1);
  *v6 = v4;
  v6[1] = v3;
  *(_QWORD *)(v2[7] + 8 * a1) = v1;
  ++v2[2];
}

uint64_t OUTLINED_FUNCTION_12_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = v0;
  return v1;
}

void *OUTLINED_FUNCTION_14_17(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t OUTLINED_FUNCTION_16_15()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t OUTLINED_FUNCTION_18_14(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = 1;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_23_13(uint64_t a1, uint64_t a2)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, 0xE600000000000000);
}

uint64_t OUTLINED_FUNCTION_24_14()
{
  return 0x746E65696C63;
}

void OUTLINED_FUNCTION_25_13(uint64_t a1, uint64_t a2)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, 0xE700000000000000);
}

uint64_t OUTLINED_FUNCTION_26_11@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return specialized Dictionary.subscript.getter(0xD000000000000013, (a1 - 32) | 0x8000000000000000, v1);
}

uint64_t OUTLINED_FUNCTION_29_14()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_32_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_33_10@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(a1 + 63) >> 6, v1);
}

void OUTLINED_FUNCTION_34_8(uint64_t a1, uint64_t a2)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2 & 0xFFFFFFFFFFFFLL | 0x6954000000000000, 0xEA0000000000656DLL);
}

uint64_t OUTLINED_FUNCTION_35_8()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_37_11()
{
  uint64_t v0;

  return v0;
}

unint64_t OUTLINED_FUNCTION_44_6(uint64_t a1, void *a2, uint64_t a3)
{
  return PersonalContextFeatureExtractor.transformCategorical(_:_:)(a1, a2, a3);
}

void OUTLINED_FUNCTION_45_7(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xED00000000000000);
}

uint64_t OUTLINED_FUNCTION_48_6()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_50_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = v0;
  return v1;
}

uint64_t OUTLINED_FUNCTION_51_3(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t *OUTLINED_FUNCTION_53_5()
{
  uint64_t *v0;

  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t AffinityRankEnum.rawValue.getter(unsigned __int8 a1)
{
  return 2 - a1;
}

void *static AffinityRankFeatureExtractor.extractedFeatures.getter()
{
  return &outlined read-only object #0 of static AffinityRankFeatureExtractor.extractedFeatures.getter;
}

void AffinityRankKey.hash(into:)()
{
  OUTLINED_FUNCTION_24_15();
  OUTLINED_FUNCTION_22_10();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_14();
  OUTLINED_FUNCTION_1_12();
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  OUTLINED_FUNCTION_31();
}

uint64_t static AffinityRankKey.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
  OUTLINED_FUNCTION_11_14();
  return static UUID.== infix(_:_:)();
}

void AffinityRankKey.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_14();
  OUTLINED_FUNCTION_1_12();
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  OUTLINED_FUNCTION_15_10();
  Hasher._finalize()();
  OUTLINED_FUNCTION_16_16();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AffinityRankKey()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_24_15();
  OUTLINED_FUNCTION_22_10();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_12();
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  OUTLINED_FUNCTION_15_10();
  Hasher._finalize()();
  OUTLINED_FUNCTION_16_16();
}

uint64_t AffinityRankFeatureExtractor.init(actions:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  int64_t v85;
  int64_t v86;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v88;
  char v89;
  uint64_t v90;
  _BOOL8 v91;
  Swift::Int v92;
  unint64_t v93;
  char v94;
  Swift::Bool v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t i;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  _BOOL8 v121;
  Swift::Int v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  char v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t result;
  _QWORD v131[2];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;

  v151 = OUTLINED_FUNCTION_11_14();
  v140 = *(_QWORD *)(v151 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v3);
  v5 = (_QWORD *)((char *)v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v138 = type metadata accessor for Siri_Nlu_External_UUID();
  v137 = *(_QWORD *)(v138 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_9_7();
  v136 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_9_7();
  v135 = v9;
  v10 = OUTLINED_FUNCTION_1_12();
  v159 = *(_QWORD *)(v10 - 8);
  OUTLINED_FUNCTION_6_1();
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_13_3();
  v157 = v15;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_13_3();
  v143 = v17;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_13_3();
  v147 = v19;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v20);
  v22 = OUTLINED_FUNCTION_37_3((uint64_t)v131 - v21);
  type metadata accessor for CamUSOParse(v22);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v23);
  OUTLINED_FUNCTION_9_7();
  v25 = OUTLINED_FUNCTION_37_3(v24);
  v149 = type metadata accessor for CamParse(v25);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)v131 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int)?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v29);
  OUTLINED_FUNCTION_2_12();
  v150 = v30;
  OUTLINED_FUNCTION_3_7();
  v32 = MEMORY[0x1E0C80A78](v31);
  v34 = (_QWORD *)((char *)v131 - v33);
  MEMORY[0x1E0C80A78](v32);
  v36 = (_QWORD *)((char *)v131 - v35);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int));
  v148 = *(_QWORD *)(v37 - 8);
  OUTLINED_FUNCTION_6_1();
  MEMORY[0x1E0C80A78](v38);
  OUTLINED_FUNCTION_2_12();
  v142 = v39;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v40);
  OUTLINED_FUNCTION_13_3();
  v146 = v41;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v42);
  OUTLINED_FUNCTION_13_3();
  v145 = (_QWORD *)v43;
  OUTLINED_FUNCTION_3_7();
  MEMORY[0x1E0C80A78](v44);
  OUTLINED_FUNCTION_37_3((uint64_t)v131 - v45);
  v154 = type metadata accessor for ActionCandidate();
  MEMORY[0x1E0C80A78](v154);
  OUTLINED_FUNCTION_2_31();
  v47 = *(_QWORD *)(a1 + 16);
  v156 = v10;
  v152 = v14;
  v153 = v34;
  v158 = v37;
  if (v47)
  {
    v48 = a1 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    v144 = *(_QWORD *)(v46 + 72);
    v131[1] = a1;
    swift_bridgeObjectRetain();
    v155 = MEMORY[0x1E0DEE9D8];
    v141 = v28;
    do
    {
      _s7SiriCam0B5ParseOWOcTm_0(v48, (uint64_t)v1, (uint64_t (*)(_QWORD))type metadata accessor for ActionCandidate);
      _s7SiriCam0B5ParseOWOcTm_0((uint64_t)v1 + *(int *)(v154 + 20), (uint64_t)v28, type metadata accessor for CamParse);
      if (swift_getEnumCaseMultiPayload())
      {
        OUTLINED_FUNCTION_12_17();
        outlined destroy of CamParse((uint64_t)v28, type metadata accessor for CamParse);
      }
      else
      {
        v49 = v134;
        outlined init with take of CamUSOParse((uint64_t)v28, v134);
        v50 = v136;
        Siri_Nlu_External_UserParse.id.getter();
        v51 = v135;
        static ConversionUtils.convertProtoToUuid(protoUuid:)();
        (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v50, v138);
        outlined destroy of CamParse(v49, type metadata accessor for CamUSOParse);
        v52 = v156;
        if (__swift_getEnumTagSinglePayload(v51, 1, v156) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v51, &demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_12_17();
        }
        else
        {
          v53 = v51;
          v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v159 + 32);
          v55 = v133;
          v54(v133, v53, v52);
          v56 = (char *)v36 + *(int *)(v37 + 48);
          v57 = *(int *)(v37 + 64);
          v58 = v1[1];
          *v36 = *v1;
          v36[1] = v58;
          v54((uint64_t)v56, v55, v52);
          *(_QWORD *)((char *)v36 + v57) = *(_QWORD *)((char *)v1 + *(int *)(v154 + 24));
          v14 = v152;
          __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v158);
          v37 = v158;
          swift_bridgeObjectRetain();
        }
        v34 = v153;
        v28 = v141;
      }
      outlined destroy of CamParse((uint64_t)v1, (uint64_t (*)(_QWORD))type metadata accessor for ActionCandidate);
      if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v37) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v36, &demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int)?);
      }
      else
      {
        v59 = v139;
        outlined init with take of (flowHandlerId: String, parseId: UUID, affinityScore: Int)?((uint64_t)v36, v139, &demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int));
        outlined init with take of (flowHandlerId: String, parseId: UUID, affinityScore: Int)?(v59, (uint64_t)v145, &demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v60 = v155;
        }
        else
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v60 = v65;
        }
        v61 = *(_QWORD *)(v60 + 16);
        if (v61 >= *(_QWORD *)(v60 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v60 = v66;
        }
        *(_QWORD *)(v60 + 16) = v61 + 1;
        OUTLINED_FUNCTION_7_23();
        v155 = v62;
        outlined init with take of (flowHandlerId: String, parseId: UUID, affinityScore: Int)?((uint64_t)v145, v62 + v63 + *(_QWORD *)(v64 + 72) * v61, &demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int));
        v37 = v158;
        v28 = v141;
      }
      v48 += v144;
      --v47;
    }
    while (v47);
    swift_bridgeObjectRelease_n();
    v67 = v155;
  }
  else
  {
    swift_bridgeObjectRelease();
    v67 = MEMORY[0x1E0DEE9D8];
  }
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v68 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v69 = *(_QWORD *)(v67 + 16);
  v155 = v67;
  v149 = v69;
  if (v69)
  {
    OUTLINED_FUNCTION_7_23();
    v71 = v67 + v70;
    v144 = *(_QWORD *)(v72 + 72);
    swift_bridgeObjectRetain();
    v145 = v5;
    v73 = v146;
    v74 = v147;
    while (1)
    {
      v154 = v69;
      outlined init with copy of (flowHandlerId: String, parseId: UUID, affinityScore: Int)(v71, v73);
      v75 = *(int *)(v37 + 48);
      v76 = v142 + v75;
      v77 = v73 + v75;
      v78 = *(int *)(v37 + 64);
      v79 = v73;
      v80 = v159;
      OUTLINED_FUNCTION_13_21(v142 + v75, v77);
      v81 = *(_QWORD *)(v79 + v78);
      OUTLINED_FUNCTION_18_15(v74, v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 32));
      v82 = v143;
      OUTLINED_FUNCTION_13_21(v143, v74);
      if (!v68[2])
        goto LABEL_25;
      v83 = OUTLINED_FUNCTION_17_14();
      if ((v84 & 1) != 0)
        v85 = *(_QWORD *)(v68[7] + 8 * v83);
      else
LABEL_25:
        v85 = 0x8000000000000000;
      OUTLINED_FUNCTION_21_17(v82);
      OUTLINED_FUNCTION_13_21(v157, v74);
      v86 = v81 <= v85 ? v85 : v81;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v160 = v68;
      v88 = OUTLINED_FUNCTION_17_14();
      v90 = v68[2];
      v91 = (v89 & 1) == 0;
      v92 = v90 + v91;
      if (__OFADD__(v90, v91))
        break;
      v93 = v88;
      v94 = v89;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, Int>);
      v95 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v92);
      v37 = v158;
      if (v95)
      {
        v96 = specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v94 & 1) != (v97 & 1))
          goto LABEL_67;
        v93 = v96;
      }
      v68 = v160;
      if ((v94 & 1) != 0)
      {
        *(_QWORD *)(v160[7] + 8 * v93) = v86;
      }
      else
      {
        v160[(v93 >> 6) + 8] |= 1 << v93;
        OUTLINED_FUNCTION_13_21(v68[6] + *(_QWORD *)(v159 + 72) * v93, v157);
        *(_QWORD *)(v68[7] + 8 * v93) = v86;
        v98 = v68[2];
        v99 = __OFADD__(v98, 1);
        v100 = v98 + 1;
        if (v99)
          goto LABEL_66;
        v68[2] = v100;
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_21_17(v157);
      v74 = v147;
      OUTLINED_FUNCTION_21_17(v147);
      v73 = v146;
      outlined destroy of RRDataSourceMetadataValue?(v146, &demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int));
      v5 = v145;
      v71 += v144;
      v69 = v154 - 1;
      if (v154 == 1)
      {
        swift_bridgeObjectRelease();
        v14 = v152;
        v34 = v153;
        v69 = v149;
        goto LABEL_39;
      }
    }
  }
  else
  {
LABEL_39:
    lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type AffinityRankKey and conformance AffinityRankKey, (uint64_t (*)(uint64_t))type metadata accessor for AffinityRankKey, (uint64_t)&protocol conformance descriptor for AffinityRankKey);
    v101 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
    v102 = 0;
    for (i = v150; ; i = v150)
    {
      if (v102 == v69)
      {
        v104 = 1;
        v102 = v69;
      }
      else
      {
        if (v102 >= *(_QWORD *)(v155 + 16))
          goto LABEL_64;
        OUTLINED_FUNCTION_7_23();
        outlined init with copy of (flowHandlerId: String, parseId: UUID, affinityScore: Int)(v106 + v105 + *(_QWORD *)(v107 + 72) * v102, i);
        v104 = 0;
        ++v102;
      }
      v108 = v158;
      __swift_storeEnumTagSinglePayload(i, v104, 1, v158);
      outlined init with take of (flowHandlerId: String, parseId: UUID, affinityScore: Int)?(i, (uint64_t)v34, &demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int)?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v108) == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = v132;
        *(_QWORD *)(v132 + 16) = v101;
        return result;
      }
      v109 = *v34;
      v110 = v34[1];
      v111 = (uint64_t)v34 + *(int *)(v108 + 48);
      v112 = *(_QWORD *)((char *)v34 + *(int *)(v108 + 64));
      OUTLINED_FUNCTION_18_15((uint64_t)v14, v111, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v159 + 32));
      if (!v68[2])
        break;
      v113 = OUTLINED_FUNCTION_17_14();
      if ((v114 & 1) == 0)
        goto LABEL_61;
      v115 = (uint64_t)v14;
      v116 = *(_QWORD *)(v68[7] + 8 * v113);
      OUTLINED_FUNCTION_18_15((uint64_t)v5 + *(int *)(v151 + 20), v115, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v159 + 16));
      *v5 = v109;
      v5[1] = v110;
      v117 = swift_isUniquelyReferenced_nonNull_native();
      v160 = v101;
      v118 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      v120 = v101[2];
      v121 = (v119 & 1) == 0;
      v122 = v120 + v121;
      if (__OFADD__(v120, v121))
        goto LABEL_62;
      v123 = v118;
      v124 = v119;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AffinityRankKey, UInt32>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v117, v122))
      {
        v125 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
        if ((v124 & 1) != (v126 & 1))
          goto LABEL_67;
        v123 = v125;
      }
      if (v112 == v116)
        v127 = 2;
      else
        v127 = 1;
      v101 = v160;
      if ((v124 & 1) != 0)
      {
        *(_DWORD *)(v160[7] + 4 * v123) = v127;
        v14 = v152;
        v34 = v153;
      }
      else
      {
        v160[(v123 >> 6) + 8] |= 1 << v123;
        _s7SiriCam0B5ParseOWOcTm_0((uint64_t)v5, v101[6] + *(_QWORD *)(v140 + 72) * v123, (uint64_t (*)(_QWORD))type metadata accessor for AffinityRankKey);
        *(_DWORD *)(v101[7] + 4 * v123) = v127;
        v128 = v101[2];
        v99 = __OFADD__(v128, 1);
        v129 = v128 + 1;
        v14 = v152;
        v34 = v153;
        if (v99)
          goto LABEL_65;
        v101[2] = v129;
      }
      swift_bridgeObjectRelease();
      outlined destroy of CamParse((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AffinityRankKey);
      (*(void (**)(char *, uint64_t))(v159 + 8))(v14, v156);
      v69 = v149;
    }
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AffinityRankFeatureExtractor.extract(usoParse:flowHandlerId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v21 = a2;
  v22 = a3;
  v5 = OUTLINED_FUNCTION_11_14();
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_37_5();
  v7 = type metadata accessor for Siri_Nlu_External_UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_2_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OUTLINED_FUNCTION_1_12();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.id.getter();
  static ConversionUtils.convertProtoToUuid(protoUuid:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v7);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    v17 = *(_QWORD *)(v20[1] + 16);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(&v4[*(int *)(v5 + 20)], v15, v12);
    v18 = v22;
    *(_QWORD *)v4 = v21;
    *((_QWORD *)v4 + 1) = v18;
    swift_bridgeObjectRetain();
    v19 = specialized Dictionary.subscript.getter(v4, v17);
    outlined destroy of CamParse((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for AffinityRankKey);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((v19 & 0x100000000) != 0)
      return 0;
    else
      return v19;
  }
}

uint64_t AffinityRankFeatureExtractor.extractImpl(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t inited;

  v1 = AffinityRankFeatureExtractor.extractFromAction(from:)(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2E94230;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x80000001C2E98E10;
  *(_QWORD *)(inited + 48) = objc_msgSend((id)objc_opt_self(), sel_featureValueWithInt64_, v1);
  type metadata accessor for MLFeatureValue();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t AffinityRankFeatureExtractor.extractFromAction(from:)(uint64_t *a1)
{
  uint64_t v1;
  id *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;

  type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_2_31();
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_1();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_37_5();
  v6 = type metadata accessor for ActionCandidate();
  _s7SiriCam0B5ParseOWOcTm_0((uint64_t)a1 + *(int *)(v6 + 20), (uint64_t)v2, type metadata accessor for CamParse);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v8 = 0;
    if (EnumCaseMultiPayload == 1)
    {

      return 0;
    }
  }
  else
  {
    outlined init with take of CamUSOParse((uint64_t)v2, v1);
    v8 = AffinityRankFeatureExtractor.extract(usoParse:flowHandlerId:)(v1, *a1, a1[1]);
    outlined destroy of CamParse(v1, type metadata accessor for CamUSOParse);
  }
  return v8;
}

uint64_t type metadata accessor for AffinityRankFeatureExtractor()
{
  return objc_opt_self();
}

uint64_t *initializeBufferWithCopyOfBuffer for AffinityRankKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UUID();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for AffinityRankKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AffinityRankKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for AffinityRankKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for AffinityRankKey(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for AffinityRankKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AffinityRankKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E85EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_1_12();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AffinityRankKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C2E85F70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    v7 = OUTLINED_FUNCTION_1_12();
    __swift_storeEnumTagSinglePayload(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t type metadata accessor for AffinityRankKey()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AffinityRankKey;
  if (!type metadata singleton initialization cache for AffinityRankKey)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AffinityRankKey()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void base witness table accessor for Equatable in AffinityRankKey()
{
  lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type AffinityRankKey and conformance AffinityRankKey, (uint64_t (*)(uint64_t))type metadata accessor for AffinityRankKey, (uint64_t)&protocol conformance descriptor for AffinityRankKey);
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance AffinityRankFeatureExtractor(uint64_t *a1)
{
  return AffinityRankFeatureExtractor.extractImpl(from:)(a1);
}

uint64_t outlined init with copy of (flowHandlerId: String, parseId: UUID, affinityScore: Int)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void _s7SiriCam0B5ParseOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  OUTLINED_FUNCTION_14_6(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_1_5();
}

void outlined init with take of (flowHandlerId: String, parseId: UUID, affinityScore: Int)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_14_6(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_1_5();
}

uint64_t OUTLINED_FUNCTION_11_14()
{
  return type metadata accessor for AffinityRankKey();
}

uint64_t OUTLINED_FUNCTION_12_17()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_13_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_15_10()
{
  return dispatch thunk of Hashable.hash(into:)();
}

unint64_t OUTLINED_FUNCTION_17_14()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_18_15@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_21_17(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_22_10()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_24_15()
{
  return swift_bridgeObjectRetain();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam12CAARFeaturesO13WindowLengthsOG_SSs5NeverOTg503_s7d5Cam12f37O16bucketedFeatures_7bucketsSaySSGSS_o4AC13gH14OGtFZSSAHXEfU_SSTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;

  if (*(_QWORD *)(a1 + 16))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = *(unsigned __int8 *)(a1 + 32);
    swift_bridgeObjectRetain();
    v3._countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    __asm { BR              X8 }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

void *static CAARFeatures.WindowLengths.allCases.getter()
{
  return &outlined read-only object #0 of static CAARFeatures.WindowLengths.allCases.getter;
}

uint64_t CAARFeatures.WindowLengths.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2E86410 + 4 * byte_1C2E981D8[a1]))(7156326, 0xE300000000000000);
}

uint64_t sub_1C2E86410()
{
  return 1831874918;
}

uint64_t sub_1C2E86420()
{
  return 6828390;
}

uint64_t sub_1C2E8642C()
{
  return 6829670;
}

uint64_t sub_1C2E8643C()
{
  return 6566246;
}

uint64_t sub_1C2E86448()
{
  return 6567782;
}

uint64_t sub_1C2E86458()
{
  return 1681404518;
}

uint64_t sub_1C2E86468()
{
  return 6712937;
}

void one-time initialization function for ACTION_DISAMBIGUATION_FREQ()
{
  uint64_t v0;

  OUTLINED_FUNCTION_1_29((uint64_t)&outlined read-only object #0 of static CAARFeatures.WindowLengths.allCases.getter);
  OUTLINED_FUNCTION_2_32();
  static CAARFeatures.ACTION_DISAMBIGUATION_FREQ = v0;
  OUTLINED_FUNCTION_5_12();
}

void one-time initialization function for APP_DISAMBIGUATION_FREQ()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_3_25();
  OUTLINED_FUNCTION_1_29(v1);
  OUTLINED_FUNCTION_2_32();
  static CAARFeatures.APP_DISAMBIGUATION_FREQ = v0;
  OUTLINED_FUNCTION_5_12();
}

void one-time initialization function for FRAC_SELECTED_ACTION_DISAMBIGUATION_FREQ()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_3_25();
  OUTLINED_FUNCTION_1_29(v1);
  OUTLINED_FUNCTION_2_32();
  static CAARFeatures.FRAC_SELECTED_ACTION_DISAMBIGUATION_FREQ = v0;
  OUTLINED_FUNCTION_5_12();
}

void one-time initialization function for FRAC_SELECTED_APP_DISAMBIGUATION_FREQ()
{
  uint64_t v0;

  OUTLINED_FUNCTION_1_29((uint64_t)&outlined read-only object #0 of static CAARFeatures.WindowLengths.allCases.getter);
  OUTLINED_FUNCTION_2_32();
  static CAARFeatures.FRAC_SELECTED_APP_DISAMBIGUATION_FREQ = v0;
  OUTLINED_FUNCTION_5_12();
}

void one-time initialization function for SELECTED_ACTION_DISAMBIGUATION_FREQ()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_3_25();
  OUTLINED_FUNCTION_1_29(v1);
  OUTLINED_FUNCTION_2_32();
  static CAARFeatures.SELECTED_ACTION_DISAMBIGUATION_FREQ = v0;
  OUTLINED_FUNCTION_5_12();
}

void one-time initialization function for SELECTED_APP_DISAMBIGUATION_FREQ()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_3_25();
  OUTLINED_FUNCTION_1_29(v1);
  OUTLINED_FUNCTION_2_32();
  static CAARFeatures.SELECTED_APP_DISAMBIGUATION_FREQ = v0;
  OUTLINED_FUNCTION_5_12();
}

uint64_t one-time initialization function for APP_LAUNCH_COUNT()
{
  uint64_t result;

  result = OUTLINED_FUNCTION_1_29((uint64_t)&outlined read-only object #0 of one-time initialization function for APP_LAUNCH_COUNT);
  static CAARFeatures.APP_LAUNCH_COUNT = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_29(uint64_t a1)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam12CAARFeaturesO13WindowLengthsOG_SSs5NeverOTg503_s7d5Cam12f37O16bucketedFeatures_7bucketsSaySSGSS_o4AC13gH14OGtFZSSAHXEfU_SSTf1cn_n(a1);
}

uint64_t OUTLINED_FUNCTION_2_32()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_3_25()
{
  uint64_t v0;

  return v0;
}

uint64_t destroy for CamOutputProvider()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CamOutputProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CamOutputProvider(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CamOutputProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CamOutputProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CamOutputProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CamOutputProvider()
{
  return &type metadata for CamOutputProvider;
}

void CamOutputProvider.toCamOutput(from:)()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15[6];

  v2 = *v0;
  v1 = (void *)v0[1];
  v3 = MEMORY[0x1C3BCA844](*v0, v1);
  v4 = OUTLINED_FUNCTION_3_26(v3, sel_featureValueForName_);
  OUTLINED_FUNCTION_5_18();
  if (v0 && (v5 = OUTLINED_FUNCTION_0_5(), OUTLINED_FUNCTION_9_23(), v3))
  {
    MLMultiArray.toDoubleScalar()();
    OUTLINED_FUNCTION_7_24();
    if (!v1)
      OUTLINED_FUNCTION_6_22();
  }
  else
  {
    OUTLINED_FUNCTION_2_3();
    _StringGuts.grow(_:)(60);
    OUTLINED_FUNCTION_0_33();
    OUTLINED_FUNCTION_3_2(v6 + 21, (uint64_t)"Unable to retrieve model score from output feature name : ");
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = v2;
    v7._object = v1;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8 = v15[0];
    v9 = v15[1];
    if (one-time initialization token for ambiguityHandling != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.ambiguityHandling);
    swift_bridgeObjectRetain_n();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v15[0] = swift_slowAlloc();
      *(_DWORD *)v13 = 136315138;
      swift_bridgeObjectRetain();
      v15[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2E0C000, v11, v12, "%s", v13, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_3();
    }

    swift_bridgeObjectRelease_n();
    lazy protocol witness table accessor for type CamError and conformance CamError();
    swift_allocError();
    *(_QWORD *)v14 = v15[0];
    *(_QWORD *)(v14 + 8) = v9;
    *(_BYTE *)(v14 + 16) = 3;
    swift_willThrow();
  }
}

id OUTLINED_FUNCTION_3_26(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

void OUTLINED_FUNCTION_5_18()
{
  void *v0;

}

void OUTLINED_FUNCTION_6_22()
{
  JUMPOUT(0x1C3BCA844);
}

void OUTLINED_FUNCTION_7_24()
{
  void *v0;

}

void OUTLINED_FUNCTION_9_23()
{
  void *v0;

}

uint64_t dispatch thunk of ModelHandler.init(forModelWithName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ModelHandler.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t outlined copy of ModelError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for ModelError(uint64_t a1)
{
  return outlined consume of ModelError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for ModelError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ModelError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ModelError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ModelError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ModelError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ModelError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ModelError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTag for ModelError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for ModelError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ModelError()
{
  return &type metadata for ModelError;
}

uint64_t ForcedDisambiguationForRankingEvaluationActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t result;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;

  if (one-time initialization token for ambiguityHandling != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.ambiguityHandling);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)OUTLINED_FUNCTION_7_4();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2E0C000, v3, v4, "[ForcedDisambiguationForRankingEvaluationActionEnforcer] called to see if enforce is needed", v5, 2u);
    OUTLINED_FUNCTION_3();
  }

  result = ForcedDisambiguation.decision()();
  if ((result & 1) != 0)
  {
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)OUTLINED_FUNCTION_7_4();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1C2E0C000, v7, v8, "[ForcedDisambiguationForRankingEvaluationActionEnforcer] Forcing a disambiguation", v9, 2u);
      OUTLINED_FUNCTION_3();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForcedDisambiguationForRankingEvaluationActionEnforcer.Type);
    result = String.init<A>(describing:)();
    *a1 = 4;
    a1[1] = result;
    a1[2] = v10;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ForcedDisambiguationForRankingEvaluationActionEnforcer()
{
  return &type metadata for ForcedDisambiguationForRankingEvaluationActionEnforcer;
}

uint64_t CamFeature.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x4F5455415F534D53;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x455045525F4B5341;
}

SiriCam::CamFeature_optional __swiftcall CamFeature.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SiriCam::CamFeature_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CamFeature.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance CamFeature(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance CamFeature()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CamFeature(uint64_t a1)
{
  char *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CamFeature(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::CamFeature_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CamFeature(Swift::String *a1)
{
  return CamFeature.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CamFeature@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CamFeature.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for CamFeature(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2E87280 + 4 * byte_1C2E982ED[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2E872B4 + 4 * byte_1C2E982E8[v4]))();
}

uint64_t sub_1C2E872B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E872BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2E872C4);
  return result;
}

uint64_t sub_1C2E872D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2E872D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2E872DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2E872E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CamFeature()
{
  return &type metadata for CamFeature;
}

uint64_t *SnrFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static SnrFeatureExtractor.extractedFeatures;
}

uint64_t SnrFeatureExtractor.extractImpl(from:)(void *a1)
{
  uint64_t v1;
  double v3;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;

  type metadata accessor for MLMultiArray();
  objc_msgSend(a1, sel_snr);
  result = static MLMultiArray.makeScalar(from:)(v3);
  v5 = result;
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2E94230;
    *(_QWORD *)(inited + 32) = 0xD000000000000021;
    *(_QWORD *)(inited + 40) = 0x80000001C2E988A0;
    *(_QWORD *)(inited + 48) = v5;
    return Dictionary.init(dictionaryLiteral:)();
  }
  return result;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance SnrFeatureExtractor()
{
  SnrFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance SnrFeatureExtractor(void **a1)
{
  return SnrFeatureExtractor.extractImpl(from:)(*a1);
}

ValueMetadata *type metadata accessor for SnrFeatureExtractor()
{
  return &type metadata for SnrFeatureExtractor;
}

uint64_t *DeviceContextFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1)
    swift_once();
  return &static DeviceContextFeatureExtractor.extractedFeatures;
}

void *one-time initialization function for kDeviceIdiomMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(DeviceIdiom, Int)>);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DeviceIdiom, Int));
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C2E98400;
  v5 = v4 + v3;
  v6 = *(int *)(v0 + 48);
  v7 = *MEMORY[0x1E0DA7C98];
  v8 = type metadata accessor for DeviceIdiom();
  v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104);
  v9(v5, v7, v8);
  *(_QWORD *)(v5 + v6) = 0;
  v10 = *(int *)(v0 + 48);
  v9(v5 + v2, *MEMORY[0x1E0DA7C58], v8);
  *(_QWORD *)(v5 + v2 + v10) = 1;
  v11 = *(int *)(v0 + 48);
  v9(v5 + 2 * v2, *MEMORY[0x1E0DA7C88], v8);
  *(_QWORD *)(v5 + 2 * v2 + v11) = 2;
  v12 = *(int *)(v0 + 48);
  v9(v5 + 3 * v2, *MEMORY[0x1E0DA7C60], v8);
  *(_QWORD *)(v5 + 3 * v2 + v12) = 3;
  v13 = *(int *)(v0 + 48);
  v9(v5 + 4 * v2, *MEMORY[0x1E0DA7C68], v8);
  *(_QWORD *)(v5 + 4 * v2 + v13) = 4;
  v14 = *(int *)(v0 + 48);
  v9(v5 + 5 * v2, *MEMORY[0x1E0DA7C70], v8);
  *(_QWORD *)(v5 + 5 * v2 + v14) = 5;
  v15 = *(int *)(v0 + 48);
  v9(v5 + 6 * v2, *MEMORY[0x1E0DA7C78], v8);
  *(_QWORD *)(v5 + 6 * v2 + v15) = 6;
  v16 = *(int *)(v0 + 48);
  v9(v5 + 7 * v2, *MEMORY[0x1E0DA7C80], v8);
  *(_QWORD *)(v5 + 7 * v2 + v16) = 7;
  v17 = v5 + 8 * v2;
  v18 = *(int *)(v0 + 48);
  v9(v17, *MEMORY[0x1E0DA7C50], v8);
  *(_QWORD *)(v17 + v18) = 8;
  lazy protocol witness table accessor for type DeviceIdiom and conformance DeviceIdiom();
  result = (void *)Dictionary.init(dictionaryLiteral:)();
  kDeviceIdiomMap._rawValue = result;
  return result;
}

uint64_t DeviceContextFeatureExtractor.extractImpl(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t inited;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  type metadata accessor for DeviceIdiom();
  MEMORY[0x1E0C80A78]();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.deviceIdiom.getter();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2E94230;
  strcpy((char *)(inited + 32), "device_idiom");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  if (one-time initialization token for kDeviceIdiomMap != -1)
    swift_once();
  v7 = specialized Dictionary.subscript.getter((uint64_t)v5, (uint64_t)kDeviceIdiomMap._rawValue);
  if ((v8 & 1) == 0)
    a2 = v7;
  type metadata accessor for MLMultiArray();
  v9 = static MLMultiArray.makeScalar(from:)(a2);
  if (v2)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 16) = 0;
    swift_setDeallocating();
    v10 = inited;
    specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for (String, MLMultiArray));
  }
  else
  {
    *(_QWORD *)(inited + 48) = v9;
    v10 = Dictionary.init(dictionaryLiteral:)();
  }
  OUTLINED_FUNCTION_2_2();
  return v10;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance DeviceContextFeatureExtractor()
{
  DeviceContextFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance DeviceContextFeatureExtractor(uint64_t a1)
{
  uint64_t *v1;

  return DeviceContextFeatureExtractor.extractImpl(from:)(a1, *v1);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for (String, MLMultiArray));
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for SignalProviding);
}

{
  type metadata accessor for RankedAction();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for (String, Any));
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for DeviceContextFeatureExtractor()
{
  return &type metadata for DeviceContextFeatureExtractor;
}

void CamInput.topUserParse.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CamUserParse, Float));
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CamInput() + 40));
  if (*(_QWORD *)(v7 + 16))
  {
    outlined init with copy of (CamUserParse, Float)(v7 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
    outlined init with take of CamUserParse((uint64_t)v6, a1);
    v8 = type metadata accessor for CamUserParse(0);
    __swift_storeEnumTagSinglePayload(a1, 0, 1, v8);
    OUTLINED_FUNCTION_31();
  }
  else
  {
    v9 = type metadata accessor for CamUserParse(0);
    OUTLINED_FUNCTION_0_34(a1, 1, 1, v9);
  }
}

Swift::Void __swiftcall CamOutput.overrideAction(action:enforcer:)(SiriCam::CamAction action, Swift::String enforcer)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 56) = *(_BYTE *)action;
  *(Swift::String *)(v2 + 40) = enforcer;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
}

uint64_t CamOutput.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CamOutput()
{
  return objc_opt_self();
}

char *initializeBufferWithCopyOfBuffer for CamInput(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8(&a1[a3[5]], &a2[a3[5]], v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = &a1[v9];
    v12 = &a2[v9];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = &a1[v10];
    v15 = &a2[v10];
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v7))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v8(v14, v15, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v7);
    }
    v18 = a3[8];
    v19 = a3[9];
    v20 = *(void **)&a2[v18];
    *(_QWORD *)&a1[v18] = v20;
    a1[v19] = a2[v19];
    v21 = a3[11];
    *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
    *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
    *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
    v22 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CamInput(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v4 = type metadata accessor for UUID();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease();
  v6 = a1 + a2[7];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v4))
    v5(v6, v4);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for CamInput(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  v13 = &a1[v9];
  v14 = &a2[v9];
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v6))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v7(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  v16 = a3[8];
  v17 = a3[9];
  v18 = *(void **)&a2[v16];
  *(_QWORD *)&a1[v16] = v18;
  a1[v17] = a2[v17];
  v19 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  v20 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for CamInput(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int EnumTagSinglePayload;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v12], 1, v6);
  v16 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v16)
    {
      v8(v13, v14, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
LABEL_7:
  v18 = a3[8];
  v19 = *(void **)&a1[v18];
  v20 = *(void **)&a2[v18];
  *(_QWORD *)&a1[v18] = v20;
  v21 = v20;

  a1[a3[9]] = a2[a3[9]];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for CamInput(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  v8 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[v12] = a2[v12];
  v13 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  return a1;
}

char *assignWithTake for CamInput(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int EnumTagSinglePayload;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v14], 1, v6);
  v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v18)
    {
      v8(v15, v16, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v6);
LABEL_7:
  v20 = a3[8];
  v21 = *(void **)&a1[v20];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];

  v22 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CamInput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2E88328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = OUTLINED_FUNCTION_1_30();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    v8 = v4 + *(int *)(a3 + 28);
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  v9 = *(_QWORD *)(v4 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CamInput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C2E883CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_1_30();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(v5 + *(int *)(a4 + 24) + 8) = (v4 - 1);
      OUTLINED_FUNCTION_31();
      return;
    }
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    v10 = v5 + *(int *)(a4 + 28);
  }
  OUTLINED_FUNCTION_0_34(v10, v4, v4, v9);
}

uint64_t type metadata accessor for CamInput()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CamInput;
  if (!type metadata singleton initialization cache for CamInput)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for CamInput()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t outlined init with copy of (CamUserParse, Float)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CamUserParse, Float));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CamUserParse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CamUserParse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_1_30()
{
  return type metadata accessor for UUID();
}

