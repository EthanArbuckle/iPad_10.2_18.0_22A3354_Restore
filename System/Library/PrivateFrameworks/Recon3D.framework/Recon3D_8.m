void sub_22344F714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, int a11, char a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;

  v62 = (std::__shared_weak_count *)STACK[0x258];
  if (STACK[0x258])
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(p_shared_owners);
    while (__stlxr(v64 - 1, p_shared_owners));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (a61 < 0)
    operator delete(__p);
  if (a15 && a12 < 0)
    operator delete(a10);
  v65 = (std::__shared_weak_count *)a45;
  if (a45)
  {
    v66 = (unint64_t *)(a45 + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  sub_2231874DC((uint64_t)&a31);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

void sub_22344FFF8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t *v11;
  unint64_t v12;
  unsigned __int8 *i;
  unsigned __int8 *v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 *v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char **v36;
  BOOL v37;
  char *v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 *v42;
  __int128 *v43;
  char *v44;
  char *v45;
  char **v46;
  int v47;
  void **v48;
  mach_timebase_info v49;
  _QWORD *v50;
  void ***v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  mach_timebase_info *v58;
  mach_timebase_info v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  __int128 v87;
  _QWORD *v88;
  std::string v89;
  char **v90;
  char *v91[2];
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t *v95;
  __int128 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  char v99;
  void **v100;
  unsigned __int8 *v101;
  _BYTE __p[24];
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  mach_timebase_info info[2];
  __int128 v114;
  _QWORD v115[28];

  v115[26] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v2 = sub_2241471F8();
    v3 = v2[2];
    if (!v3)
    {
      v4 = v2;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = v4[2];
    }
    v5 = *(_QWORD *)(v3 + 64);
    v6 = (std::mutex *)(v5 + 32);
    std::mutex::lock((std::mutex *)(v5 + 32));
    v8 = *(_QWORD *)(v5 + 96);
    v7 = *(_QWORD *)(v5 + 104);
    std::mutex::unlock(v6);
    if (v8 != v7)
    {
      info[0] = (mach_timebase_info)"cv3d.recon.";
      info[1] = (mach_timebase_info)11;
      *(_QWORD *)&v114 = "RoomAssociations.AssociatedPlanes";
      *((_QWORD *)&v114 + 1) = 33;
      sub_2231A9820((uint64_t)info, (uint64_t)v115, 0, 0, &v89);
      sub_2241471F8();
      v9 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
        {
          v10 = *(double *)&qword_255788F20;
          v11 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
          {
            v91[0] = 0;
            v91[1] = 0;
            v90 = v91;
            if (*(_BYTE *)(a1 + 40))
            {
              v12 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4;
              v96 = 0uLL;
              v95 = 0;
              sub_223227F94((char **)&v95, v12);
              v14 = *(unsigned __int8 **)(a1 + 16);
              for (i = *(unsigned __int8 **)(a1 + 24); v14 != i; v14 += 16)
              {
                sub_2245664AC(v14, info);
                v16 = operator new(0x28uLL);
                *(_QWORD *)__p = v16;
                *(_OWORD *)&__p[8] = xmmword_2245C4640;
                v17 = v114;
                *v16 = *(_OWORD *)&info[0].numer;
                v16[1] = v17;
                *((_DWORD *)v16 + 8) = v115[0];
                *((_BYTE *)v16 + 36) = 0;
                v18 = (_OWORD *)v96;
                if ((unint64_t)v96 < *((_QWORD *)&v96 + 1))
                {
                  v15 = *(_OWORD *)__p;
                  *(_QWORD *)(v96 + 16) = *(_QWORD *)&__p[16];
                  *v18 = v15;
                  *(_QWORD *)&v96 = (char *)v18 + 24;
                }
                else
                {
                  *(_QWORD *)&v96 = sub_22319BED8((void **)&v95, (uint64_t)__p);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
              }
              v19 = v95;
              v87 = v96;
              sub_224566698((unsigned __int8 *)a1, (uint64_t)info);
              v20 = sub_223454AA4((uint64_t **)&v90, (const void **)info, (uint64_t)info);
              v21 = v20;
              v22 = v20 + 7;
              v23 = v20[7];
              if (v23)
              {
                v24 = v20[8];
                v25 = v20[7];
                if (v24 != v23)
                {
                  do
                  {
                    if (*((char *)v24 - 1) < 0)
                      operator delete((void *)*(v24 - 3));
                    v24 -= 3;
                  }
                  while (v24 != v23);
                  v25 = *v22;
                }
                v21[8] = v23;
                operator delete(v25);
                *v22 = 0;
                v22[1] = 0;
                v22[2] = 0;
              }
              v21[7] = v19;
              *((_OWORD *)v21 + 4) = v87;
              if (SBYTE7(v114) < 0)
                operator delete(*(void **)info);
            }
            v26 = mach_continuous_time();
            v27 = atomic_load((unsigned __int8 *)&qword_255795560);
            if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
            {
              mach_timebase_info(info);
              LODWORD(v83) = info[0].numer;
              LODWORD(v84) = info[0].denom;
              *(double *)&qword_255795558 = (double)v83 / (double)v84;
              __cxa_guard_release(&qword_255795560);
            }
            *(_QWORD *)__p = llround(*(double *)&qword_255795558 * (double)v26);
            *(_QWORD *)&__p[8] = 2;
            __p[16] = 0;
            v103 = 0;
            v104 = 0;
            v105 = 0;
            v106 = (uint64_t)(v10 * 1000000000.0);
            v107 = 2;
            v108 = 1;
            v109 = 0;
            v110 = 0;
            v111 = 0;
            v112 = 0;
            v28 = (unsigned __int8 *)operator new();
            *(_QWORD *)v28 = 0;
            *((_QWORD *)v28 + 1) = 0;
            v100 = 0;
            v101 = v28;
            v99 = 1;
            v29 = (uint64_t *)v90;
            v30 = operator new(0x18uLL);
            v31 = v30;
            *v30 = 0;
            v30[1] = 0;
            v30[2] = 0;
            if (v29 == (uint64_t *)v91)
            {
              v47 = 0;
            }
            else
            {
              v32 = 0;
              v33 = (char *)v29;
              do
              {
                v34 = v32;
                v35 = (char *)*((_QWORD *)v33 + 1);
                if (v35)
                {
                  do
                  {
                    v36 = (char **)v35;
                    v35 = *(char **)v35;
                  }
                  while (v35);
                }
                else
                {
                  do
                  {
                    v36 = (char **)*((_QWORD *)v33 + 2);
                    v37 = *v36 == v33;
                    v33 = (char *)v36;
                  }
                  while (!v37);
                }
                ++v32;
                v33 = (char *)v36;
              }
              while (v36 != v91);
              v95 = v30;
              LOBYTE(v96) = 0;
              v88 = v30;
              if (v34 >= 0x666666666666666)
                sub_223452694();
              v85 = v9;
              v86 = v11;
              v38 = (char *)operator new(40 * v32);
              v39 = 0;
              *v31 = v38;
              v31[1] = v38;
              v31[2] = &v38[40 * v32];
              v40 = v38;
              do
              {
                if (*((char *)v29 + 55) < 0)
                {
                  sub_223197FA4(v40, (void *)v29[4], v29[5]);
                }
                else
                {
                  v41 = *((_OWORD *)v29 + 2);
                  *((_QWORD *)v40 + 2) = v29[6];
                  *(_OWORD *)v40 = v41;
                }
                *((_QWORD *)v40 + 4) = 0;
                v40[24] = 2;
                v42 = (__int128 *)v29[7];
                v43 = (__int128 *)v29[8];
                v44 = (char *)operator new(0x18uLL);
                *(_QWORD *)v44 = 0;
                *((_QWORD *)v44 + 1) = 0;
                *((_QWORD *)v44 + 2) = 0;
                sub_223453198(v44, v42, v43, 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (char *)v42) >> 3));
                *((_QWORD *)v40 + 4) = v44;
                v45 = (char *)v29[1];
                if (v45)
                {
                  do
                  {
                    v46 = (char **)v45;
                    v45 = *(char **)v45;
                  }
                  while (v45);
                }
                else
                {
                  do
                  {
                    v46 = (char **)v29[2];
                    v37 = *v46 == (char *)v29;
                    v29 = (uint64_t *)v46;
                  }
                  while (!v37);
                }
                v40 += 40;
                v39 += 40;
                v29 = (uint64_t *)v46;
              }
              while (v46 != v91);
              v28 = v101;
              v47 = *v101;
              v11 = v86;
              v31 = v88;
              v88[1] = v40;
              v9 = v85;
            }
            *v28 = 1;
            v99 = v47;
            v48 = (void **)*((_QWORD *)v28 + 1);
            *((_QWORD *)v28 + 1) = v31;
            v100 = v48;
            sub_22345337C(&v100, v47);
            v49 = (mach_timebase_info)operator new();
            sub_2244E334C(*(_QWORD *)&v49, (uint64_t *)&v101);
            v50 = (_QWORD *)operator new();
            *v50 = &off_24EC77120;
            v50[1] = 0;
            v50[2] = 0;
            v50[3] = v49;
            v51 = (void ***)v101;
            v101 = 0;
            if (v51)
            {
              sub_22345337C(v51 + 1, *(unsigned __int8 *)v51);
              MEMORY[0x227684CE8](v51, 0x1022C40B06DCE69);
            }
            info[0] = (mach_timebase_info)&off_24EC20AE0;
            info[1] = v49;
            *(_QWORD *)&v114 = v50;
            v97 = 0;
            v98 = 0;
            sub_2231AB0FC((uint64_t)v115, (uint64_t)__p);
            info[0] = (mach_timebase_info)&off_24EC66920;
            sub_2231ADC74((uint64_t)info, &v92);
            info[0] = (mach_timebase_info)&off_24EC20AE0;
            sub_2231AD66C((uint64_t)v115);
            v52 = (std::__shared_weak_count *)v114;
            if ((_QWORD)v114)
            {
              v53 = (unint64_t *)(v114 + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = v98;
            if (v98)
            {
              p_shared_owners = (unint64_t *)&v98->__shared_owners_;
              do
                v57 = __ldaxr(p_shared_owners);
              while (__stlxr(v57 - 1, p_shared_owners));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            sub_2231AD66C((uint64_t)__p);
            sub_223454BFC((uint64_t)&v90, v91[0]);
            v58 = (mach_timebase_info *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
            v59 = *v58;
            v60 = (std::__shared_weak_count *)v58[1];
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldxr(v61);
              while (__stxr(v62 + 1, v61));
            }
            v64 = v93;
            v63 = v94;
            *(_QWORD *)__p = &off_24EC6A3B8;
            *(_QWORD *)&__p[8] = v93;
            *(_QWORD *)&__p[16] = v94;
            v93 = 0;
            v94 = 0;
            info[0] = v59;
            info[1] = (mach_timebase_info)v60;
            if (v60)
            {
              v65 = (unint64_t *)&v60->__shared_owners_;
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
            }
            *(_QWORD *)&v114 = &off_24EC6A3B8;
            *((_QWORD *)&v114 + 1) = v64;
            v115[0] = v63;
            if (v63)
            {
              v67 = (unint64_t *)&v63->__shared_owners_;
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
            }
            (*(void (**)(uint64_t *, mach_timebase_info *))(*v11 + 16))(v11, info);
            v69 = (std::__shared_weak_count *)v115[0];
            if (v115[0])
            {
              v70 = (unint64_t *)(v115[0] + 8);
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            v72 = (std::__shared_weak_count *)info[1];
            if (info[1])
            {
              v73 = (unint64_t *)(*(_QWORD *)&info[1] + 8);
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            v75 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v76 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
            if (v60)
            {
              v78 = (unint64_t *)&v60->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v80 = v94;
            if (v94)
            {
              v81 = (unint64_t *)&v94->__shared_owners_;
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223450938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25)
{
  __cxa_guard_abort(&qword_255795560);
  sub_223454BFC((uint64_t)&a24, (char *)a25);
  sub_2231874DC((uint64_t)&a13);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223450C60(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  float32x2_t *v26;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t *v34;
  float32x2_t *i;
  float32x2_t *v36;
  float32x2_t *v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  unsigned __int32 v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  const char *v47;
  size_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  void *p_p;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  size_t v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  size_t v64;
  size_t v65;
  _BYTE *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  char *shared_owners;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  const char *v101;
  unsigned __int8 v102;
  const char *v103;
  size_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  size_t v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  void *v151;
  char *v152;
  std::__shared_weak_count_vtbl *v153;
  const char *v154;
  uint64_t v155;
  unsigned __int8 *v156;
  unsigned __int8 **v157;
  int v158;
  void *v159;
  _BYTE v160[15];
  char v161;
  void *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  int v166;
  std::string v167;
  __int128 v168;
  _QWORD v169[3];
  void *v170;
  _BYTE v171[15];
  __int16 v172;
  uint64_t v173[48];
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v180;
  int v181;
  const char *v182;
  int v183;
  const char *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  _QWORD v187[2];
  char __s[8];
  _BYTE object[24];
  unint64_t v190;
  uint64_t v191;
  void *__p;
  size_t v193;
  unint64_t v194;
  char v195;
  float32x2_t *v196;
  float32x2_t *v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  uint64_t v201;

  v201 = *MEMORY[0x24BDAC8D0];
  v162 = operator new(0x20uLL);
  v163 = xmmword_2245C6440;
  strcpy((char *)v162, "RoomAssociations.CurrentRoom");
  v161 = 6;
  strcpy((char *)&v159, "Meshes");
  if (!*(_BYTE *)(a1 + 40))
  {
    sub_22344D4B4((uint64_t)&v162, (uint64_t)&v159);
    goto LABEL_234;
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_234;
  v4 = sub_2241471F8();
  v5 = v4[2];
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = v4[2];
  }
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (std::mutex *)(v6 + 32);
  std::mutex::lock((std::mutex *)(v6 + 32));
  v9 = *(_QWORD *)(v6 + 96);
  v8 = *(_QWORD *)(v6 + 104);
  std::mutex::unlock(v7);
  if (v9 == v8)
  {
LABEL_234:
    if (v161 < 0)
      goto LABEL_238;
LABEL_235:
    if (SHIBYTE(v163) < 0)
      goto LABEL_239;
    return;
  }
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  v10 = HIBYTE(v163);
  v11 = &v162;
  if (v163 < 0)
  {
    v11 = v162;
    v10 = v163;
  }
  *(_QWORD *)&object[16] = v11;
  v190 = v10;
  sub_2231A9820((uint64_t)object, (uint64_t)&v191, 0, 0, &v167);
  sub_2241471F8();
  v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
    goto LABEL_233;
  v164 = 0u;
  v165 = 0u;
  v166 = 728325616;
  kdebug_trace();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
    goto LABEL_232;
  v187[0] = *(_QWORD *)v160;
  *(_QWORD *)((char *)v187 + 7) = *(_QWORD *)&v160[7];
  *(_QWORD *)&v168 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
  *((_QWORD *)&v168 + 1) = 2;
  v13 = sub_2241471F8();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
    goto LABEL_232;
  v150 = v12;
  v151 = v159;
  v149 = v13;
  sub_2241498F4((uint64_t)v173, 0);
  v14 = *(unsigned __int8 **)(a1 + 16);
  v15 = *(unsigned __int8 **)(a1 + 24);
  if (v14 == v15)
    goto LABEL_209;
  v156 = *(unsigned __int8 **)(a1 + 24);
  v157 = a2;
  while (1)
  {
    v17 = *a2;
    v16 = a2[1];
    if (v16 != *a2)
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *a2) >> 6);
      do
      {
        v19 = v18 >> 1;
        v20 = &v17[192 * (v18 >> 1)];
        v21 = *v20;
        v22 = *v14;
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[1];
        v22 = v14[1];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[2];
        v22 = v14[2];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[3];
        v22 = v14[3];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[4];
        v22 = v14[4];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[5];
        v22 = v14[5];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[6];
        v22 = v14[6];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[7];
        v22 = v14[7];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[8];
        v22 = v14[8];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[9];
        v22 = v14[9];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[10];
        v22 = v14[10];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[11];
        v22 = v14[11];
        if (v21 != v22)
          goto LABEL_37;
        v21 = v20[12];
        v22 = v14[12];
        if (v21 != v22
          || (v21 = v20[13], v22 = v14[13], v21 != v22)
          || (v21 = v20[14], v22 = v14[14], v21 != v22)
          || (v21 = v20[15], v22 = v14[15], v21 != v22))
        {
LABEL_37:
          v23 = v20 + 192;
          v24 = v18 + ~v19;
          if (v21 < v22)
          {
            v19 = v24;
            v17 = v23;
          }
        }
        v18 = v19;
      }
      while (v19);
      if (v16 != v17
        && ((char)sub_22319835C(v17, v14) & 0x80000000) == 0
        && ((char)sub_22319835C(v14, v17) & 0x80000000) == 0
        && a2[1] != v17)
      {
        break;
      }
    }
    sub_2234525A0(&v177);
    if (**(int **)(v177 + 56) <= 5)
    {
      v42 = *(unsigned __int8 *)(v177 + 72);
      v43 = sub_22322F254(v177, "OSLogSurrogateAppender", 1, 0);
      v44 = v43;
      if (v42 || v43 != 0)
      {
        v178 = (char *)&v177;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v180 = std::chrono::system_clock::now().__d_.__rep_;
        v181 = 5;
        v182 = "unknown file";
        v183 = 92;
        v184 = "unknown function";
        v185 = 0;
        v186 = 0;
        sub_2245664AC(v14, __s);
        v158 = v42;
        v46 = *(_QWORD *)v178;
        v47 = (const char *)(*(_QWORD *)v178 + 16);
        v154 = v47;
        v155 = *(_QWORD *)v178;
        if (*(char *)(*(_QWORD *)v178 + 39) < 0)
        {
          v47 = *(const char **)(v46 + 16);
          v48 = *(_QWORD *)(v46 + 24);
          v50 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v50 & 1) == 0)
          {
LABEL_135:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v198);
              if (v200)
              {
                xmmword_255788F40 = v198;
                unk_255788F50 = v199;
              }
              else
              {
                byte_255788F57 = 14;
                strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
              }
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v48 = *(unsigned __int8 *)(*(_QWORD *)v178 + 39);
          v49 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v49 & 1) == 0)
            goto LABEL_135;
        }
        if (byte_255788F57 >= 0)
          v51 = (const char *)&xmmword_255788F40;
        else
          v51 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v52 = byte_255788F57;
        else
          v52 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v51, v47);
        if (v52 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v52 >= 0x17)
        {
          v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17)
            v54 = v52 | 7;
          v55 = v54 + 1;
          v53 = operator new(v54 + 1);
          v190 = v55 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v53;
          *(_QWORD *)&object[16] = v52;
        }
        else
        {
          HIBYTE(v190) = v52;
          v53 = &object[8];
          if (!v52)
          {
LABEL_74:
            v53[v52] = 0;
            LOBYTE(v191) = 1;
            if (v48 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v48 >= 0x17)
            {
              v57 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v48 | 7) != 0x17)
                v57 = v48 | 7;
              v58 = v57 + 1;
              p_p = operator new(v57 + 1);
              v194 = v58 | 0x8000000000000000;
              __p = p_p;
              v193 = v48;
            }
            else
            {
              HIBYTE(v194) = v48;
              p_p = &__p;
              if (!v48)
              {
LABEL_82:
                *((_BYTE *)p_p + v48) = 0;
                v195 = 1;
                v59 = *(NSObject **)object;
                if (SHIBYTE(v194) < 0)
                  operator delete(__p);
                v15 = v156;
                a2 = v157;
                if ((_BYTE)v191 && SHIBYTE(v190) < 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v44 && *(_QWORD *)(v44 + 24))
                {
                  v60 = _os_log_pack_size();
                  v61 = (std::__shared_weak_count_vtbl *)operator new(v60, (std::align_val_t)8uLL);
                  v62 = (std::__shared_weak_count *)operator new();
                  v62->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v62->__shared_owners_;
                  v62->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                  v62->__shared_weak_owners_ = 0;
                  v62[1].__vftable = v61;
                  v64 = strlen(__s);
                  if (v64 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v65 = v64;
                  v153 = v61;
                  if (v64 >= 0x17)
                  {
                    v69 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v64 | 7) != 0x17)
                      v69 = v64 | 7;
                    v70 = v69 + 1;
                    v66 = operator new(v69 + 1);
                    *(_QWORD *)&object[16] = v70 | 0x8000000000000000;
                    *(_QWORD *)object = v66;
                    *(_QWORD *)&object[8] = v65;
                  }
                  else
                  {
                    object[23] = v64;
                    v66 = object;
                    if (!v64)
                      goto LABEL_102;
                  }
                  memcpy(v66, __s, v65);
LABEL_102:
                  v66[v65] = 0;
                  v71 = *(_QWORD *)object;
                  *(_QWORD *)&v198 = *(_QWORD *)&object[8];
                  *(_QWORD *)((char *)&v198 + 7) = *(_QWORD *)&object[15];
                  v72 = object[23];
                  v73 = operator new(0x38uLL);
                  v74 = (std::__shared_weak_count *)v73;
                  v73[1] = 0;
                  v75 = v73 + 1;
                  v73[2] = 0;
                  v73[3] = off_24EC1FA48;
                  v152 = (char *)(v73 + 3);
                  v73[4] = v71;
                  shared_owners = (char *)(v73 + 4);
                  *v73 = &off_24EC1F9F8;
                  v73[5] = v198;
                  *(_QWORD *)((char *)v73 + 47) = *(_QWORD *)((char *)&v198 + 7);
                  *((_BYTE *)v73 + 55) = v72;
                  do
                    v77 = __ldxr(p_shared_owners);
                  while (__stxr(v77 + 1, p_shared_owners));
                  a2 = v157;
                  do
                    v78 = __ldxr(v75);
                  while (__stxr(v78 + 1, v75));
                  do
                    v79 = __ldaxr(v75);
                  while (__stlxr(v79 - 1, v75));
                  if (!v79)
                  {
                    (*(void (**)(_QWORD *))(*v73 + 16))(v73);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                  do
                    v80 = __ldaxr(p_shared_owners);
                  while (__stlxr(v80 - 1, p_shared_owners));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                  if (SHIBYTE(v74[2].__vftable) < 0)
                    shared_owners = (char *)v74[1].__shared_owners_;
                  v81 = _os_log_pack_fill();
                  *(_DWORD *)v81 = 136315138;
                  *(_QWORD *)(v81 + 4) = shared_owners;
                  v82 = operator new();
                  v83 = *(unsigned __int8 *)(v155 + 39);
                  v84 = v154;
                  if ((v83 & 0x80u) != 0)
                  {
                    v84 = *(const char **)(v155 + 16);
                    v83 = *(_QWORD *)(v155 + 24);
                  }
                  *(_QWORD *)v82 = v153;
                  *(_QWORD *)(v82 + 8) = v153;
                  *(_QWORD *)(v82 + 16) = v62;
                  *(_QWORD *)(v82 + 24) = v152;
                  *(_QWORD *)(v82 + 32) = v74;
                  *(_QWORD *)(v82 + 40) = v84;
                  *(_QWORD *)(v82 + 48) = v83;
                  *(_BYTE *)(v82 + 56) = 16;
                  *(_QWORD *)object = v82;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v44 + 24) + 40))(*(_QWORD *)(v44 + 24), object);
                  v85 = *(_QWORD *)object;
                  *(_QWORD *)object = 0;
                  v15 = v156;
                  if (v85)
                  {
                    v86 = *(std::__shared_weak_count **)(v85 + 32);
                    if (v86)
                    {
                      v87 = (unint64_t *)&v86->__shared_owners_;
                      do
                        v88 = __ldaxr(v87);
                      while (__stlxr(v88 - 1, v87));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                    v89 = *(std::__shared_weak_count **)(v85 + 16);
                    if (v89)
                    {
                      v90 = (unint64_t *)&v89->__shared_owners_;
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                    MEMORY[0x227684CE8](v85, 0x10F0C40B62ED6C6);
                  }
                }
                else
                {
                  os_log_type_enabled(v59, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)object = 136315138;
                  *(_QWORD *)&object[4] = __s;
                  v67 = (void *)_os_log_send_and_compose_impl();
                  if (v67)
                    free(v67);
                }
                if (v158)
                {
                  sub_2245664AC(v14, object);
                  sub_22322C138((uint64_t)&v178, "Mesh state does not contain mesh %s associated with current room.", object);
                  sub_223182C08((uint64_t)&v178);
                }
                sub_223182C08((uint64_t)&v178);
                v92 = v186;
                if (v186)
                {
                  v93 = (unint64_t *)&v186->__shared_owners_;
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 - 1, v93));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v92);
                  }
                }
                goto LABEL_17;
              }
            }
            memmove(p_p, v47, v48);
            goto LABEL_82;
          }
        }
        memmove(v53, v51, v52);
        goto LABEL_74;
      }
    }
LABEL_17:
    v14 += 16;
    if (v14 == v15)
      goto LABEL_209;
  }
  v25 = sub_22342B690((uint64_t)a2, v14);
  v26 = (float32x2_t *)v25;
  if (!*((_DWORD *)v25 + 8))
  {
    if (v25[104])
    {
      v27 = sub_2234528CC((uint64_t)v25);
      sub_223180698((uint64_t)object, v27);
      v34 = *(float32x2_t **)object;
      for (i = *(float32x2_t **)&object[8]; v34 != i; v34 = (float32x2_t *)((char *)v34 + 12))
      {
        v29.i32[0] = v34[1].i32[0];
        v31.i32[0] = v26[6].i32[0];
        v32.i32[0] = v26[8].i32[0];
        v33.i32[0] = v26[10].i32[0];
        *(float32x2_t *)v30.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v26[5], COERCE_FLOAT(*v34)), v26[7], *v34, 1), v26[9], *(float *)v29.i32);
        v31 = vmla_f32(vmla_lane_f32(vmul_f32(v31, *v34), v32, *v34, 1), *(float32x2_t *)v29.i8, v33);
        v30.u64[1] = (unint64_t)v31;
        *(float32x2_t *)v28.i8 = v26[11];
        v28.i32[2] = v26[12].i32[0];
        v28 = (int8x16_t)vaddq_f32((float32x4_t)v30, (float32x4_t)v28);
        v34[1].i32[0] = v28.i32[2];
        *v34 = *(float32x2_t *)v28.i8;
      }
      v36 = v196;
      v37 = v197;
      if (v196 != v197)
      {
        *(float32x2_t *)v28.i8 = v26[5];
        v28.i32[2] = v26[6].i32[0];
        *(float32x2_t *)v29.i8 = v26[7];
        v29.i32[2] = v26[8].i32[0];
        *(float32x2_t *)v30.i8 = v26[9];
        v30.i32[2] = v26[10].i32[0];
        v38 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
        v39 = (float32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
        v40 = (float32x2_t)vextq_s8(v30, v30, 8uLL).u64[0];
        do
        {
          v33.i32[0] = v36[1].i32[0];
          v41 = vmla_f32(vmla_lane_f32(vmul_f32(v38, *v36), v39, *v36, 1), v33, v40).u32[0];
          *v36 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v28.i8, COERCE_FLOAT(*v36)), *(float32x2_t *)v29.i8, *v36, 1), *(float32x2_t *)v30.i8, v33.f32[0]);
          v36[1].i32[0] = v41;
          v36 = (float32x2_t *)((char *)v36 + 12);
        }
        while (v36 != v37);
      }
      sub_22414E9E0((uint64_t)v173, (uint64_t)object);
      sub_22316F8F4((uint64_t *)object);
    }
    else
    {
      v68 = sub_2234528CC((uint64_t)v25);
      sub_22414E9E0((uint64_t)v173, v68);
    }
    goto LABEL_17;
  }
  sub_2234525A0(__s);
  if (**(int **)(*(_QWORD *)__s + 56) > 5)
    goto LABEL_209;
  v95 = *(unsigned __int8 *)(*(_QWORD *)__s + 72);
  v96 = sub_22322F254(*(uint64_t *)__s, "OSLogSurrogateAppender", 1, 0);
  v97 = v96;
  if (!v95 && !v96)
    goto LABEL_209;
  v178 = __s;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v180 = std::chrono::system_clock::now().__d_.__rep_;
  v181 = 5;
  v182 = "unknown file";
  v183 = 79;
  v186 = 0;
  v184 = "unknown function";
  v185 = 0;
  v98 = *(_QWORD *)v178;
  v99 = *(_QWORD *)v178 + 16;
  if (*(char *)(*(_QWORD *)v178 + 39) < 0)
  {
    v101 = *(const char **)(v98 + 16);
    v100 = *(_QWORD *)(v98 + 24);
  }
  else
  {
    v100 = *(unsigned __int8 *)(*(_QWORD *)v178 + 39);
    v101 = (const char *)(*(_QWORD *)v178 + 16);
  }
  v102 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    if ((_BYTE)v190)
    {
      xmmword_255788F40 = *(_OWORD *)object;
      unk_255788F50 = *(_QWORD *)&object[16];
    }
    else
    {
      byte_255788F57 = 14;
      strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v103 = (const char *)&xmmword_255788F40;
  else
    v103 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v104 = byte_255788F57;
  else
    v104 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v103, v101);
  v105 = &object[8];
  if (v104 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v104 >= 0x17)
  {
    v106 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17)
      v106 = v104 | 7;
    v107 = v106 + 1;
    v105 = operator new(v106 + 1);
    v190 = v107 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v105;
    *(_QWORD *)&object[16] = v104;
    goto LABEL_160;
  }
  HIBYTE(v190) = v104;
  if (v104)
LABEL_160:
    memmove(v105, v103, v104);
  v105[v104] = 0;
  LOBYTE(v191) = 1;
  v108 = &__p;
  if (v100 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v100 >= 0x17)
  {
    v109 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v100 | 7) != 0x17)
      v109 = v100 | 7;
    v110 = v109 + 1;
    v108 = operator new(v109 + 1);
    v194 = v110 | 0x8000000000000000;
    __p = v108;
    v193 = v100;
    goto LABEL_168;
  }
  HIBYTE(v194) = v100;
  if (v100)
LABEL_168:
    memmove(v108, v101, v100);
  *((_BYTE *)v108 + v100) = 0;
  v195 = 1;
  v111 = *(NSObject **)object;
  if (SHIBYTE(v194) < 0)
    operator delete(__p);
  if ((_BYTE)v191 && SHIBYTE(v190) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v97 && *(_QWORD *)(v97 + 24))
  {
    v112 = _os_log_pack_size();
    v113 = (std::__shared_weak_count_vtbl *)operator new(v112, (std::align_val_t)8uLL);
    v114 = (std::__shared_weak_count *)operator new();
    v115 = v114;
    v114->__shared_owners_ = 0;
    v116 = (unint64_t *)&v114->__shared_owners_;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v113;
    do
      v117 = __ldxr(v116);
    while (__stxr(v117 + 1, v116));
    do
      v118 = __ldaxr(v116);
    while (__stlxr(v118 - 1, v116));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v115);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v119 = operator new();
    v120 = *(unsigned __int8 *)(v98 + 39);
    if ((v120 & 0x80u) == 0)
      v121 = v99;
    else
      v121 = *(_QWORD *)(v98 + 16);
    if ((v120 & 0x80u) != 0)
      v120 = *(_QWORD *)(v98 + 24);
    *(_QWORD *)v119 = v113;
    *(_QWORD *)(v119 + 8) = v113;
    *(_QWORD *)(v119 + 16) = v115;
    *(_QWORD *)(v119 + 24) = 0;
    *(_QWORD *)(v119 + 32) = 0;
    *(_QWORD *)(v119 + 40) = v121;
    *(_QWORD *)(v119 + 48) = v120;
    *(_BYTE *)(v119 + 56) = 16;
    *(_QWORD *)object = v119;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v97 + 24) + 40))(*(_QWORD *)(v97 + 24), object);
    v122 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    if (v122)
    {
      v123 = *(std::__shared_weak_count **)(v122 + 32);
      if (v123)
      {
        v124 = (unint64_t *)&v123->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      v126 = *(std::__shared_weak_count **)(v122 + 16);
      if (v126)
      {
        v127 = (unint64_t *)&v126->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      MEMORY[0x227684CE8](v122, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v111, OS_LOG_TYPE_ERROR);
    *(_WORD *)object = 0;
    v129 = (void *)_os_log_send_and_compose_impl();
    if (v129)
      free(v129);
  }
  if (v95)
  {
    sub_22322C138((uint64_t)&v178, "Mesh visualization only implemented for primary session.");
    sub_223182C08((uint64_t)&v178);
  }
  sub_223182C08((uint64_t)&v178);
  v130 = v186;
  if (v186)
  {
    v131 = (unint64_t *)&v186->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
LABEL_209:
  v170 = v151;
  *(_QWORD *)v171 = v187[0];
  *(_QWORD *)&v171[7] = *(_QWORD *)((char *)v187 + 7);
  v172 = 262;
  v187[0] = 0;
  *(_QWORD *)((char *)v187 + 7) = 0;
  sub_22329F414((uint64_t)v173, (__int128 *)&v170, &v168, &v174);
  if (HIBYTE(v172) && (char)v172 < 0)
    operator delete(v170);
  sub_22316F8F4(v173);
  v133 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 56))(v150);
  v134 = *v133;
  v135 = (std::__shared_weak_count *)v133[1];
  if (v135)
  {
    v136 = (unint64_t *)&v135->__shared_owners_;
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
  v138 = v175;
  v139 = v176;
  v169[0] = &off_24EC6A3B8;
  v169[1] = v175;
  v169[2] = v176;
  v176 = 0;
  v175 = 0;
  *(_QWORD *)object = v134;
  *(_QWORD *)&object[8] = v135;
  if (v135)
  {
    v140 = (unint64_t *)&v135->__shared_owners_;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  *(_QWORD *)&object[16] = &off_24EC6A3B8;
  v190 = v138;
  v191 = v139;
  if (v139)
  {
    v142 = (unint64_t *)(v139 + 8);
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  (*(void (**)(uint64_t *, _BYTE *))(*v149 + 16))(v149, object);
  sub_2241231D8((uint64_t)&object[16]);
  v144 = *(std::__shared_weak_count **)&object[8];
  if (*(_QWORD *)&object[8])
  {
    v145 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  sub_2241231D8((uint64_t)v169);
  if (v135)
  {
    v147 = (unint64_t *)&v135->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  sub_2241231D8((uint64_t)&v174);
LABEL_232:
  kdebug_trace();
LABEL_233:
  if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_234;
  operator delete(v167.__r_.__value_.__l.__data_);
  if ((v161 & 0x80000000) == 0)
    goto LABEL_235;
LABEL_238:
  operator delete(v159);
  if (SHIBYTE(v163) < 0)
LABEL_239:
    operator delete(v162);
}

void sub_22345209C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&STACK[0x2F0]);
  v61 = (std::__shared_weak_count *)STACK[0x330];
  if (STACK[0x330])
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  sub_22316F8F4(&a60);
  sub_2231874DC((uint64_t)&a39);
  if (a50 < 0)
  {
    operator delete(__p);
    if (a32 < 0)
    {
LABEL_10:
      operator delete(a27);
      if ((a38 & 0x80000000) == 0)
LABEL_14:
        _Unwind_Resume(a1);
LABEL_13:
      operator delete(a33);
      goto LABEL_14;
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_10;
  }
  if ((a38 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_2234525A0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)qword_2540CACD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_2540CACD0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CACC8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(qword_2540CACD0);
  }
  *a1 = qword_2540CACC8;
}

void sub_22345263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_2540CACD0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_2540CACD0);
  _Unwind_Resume(a1);
}

void sub_223452694()
{
  sub_22316DBD4("vector");
}

void sub_2234526A8(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_223197FA4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v11 = *(_QWORD *)(a4 + 16);
    }
    *(_QWORD *)&v9 = (uint64_t)(*a1 * 1000000000.0);
    *((_QWORD *)&v9 + 1) = 2;
    v8 = sub_2241471F8();
    sub_223452794((uint64_t)v8, a2, a3, (uint64_t)__p, &v9);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
}

void sub_223452778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223452794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_22329F414(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_223452898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2234528CC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_DWORD *)(a1 + 32))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/include/Reconstruction/SceneQuery/SceneQueryState.h", 77, (uint64_t)"HoldsTriMeshData()", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (*(_DWORD *)(a1 + 32))
      sub_22316DD70();
  }
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/include/Reconstruction/SceneQuery/SceneQueryState.h", 79, (uint64_t)"tri_mesh_ptr != nullptr", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!v3)
    return v2;
  v6 = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return v2;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return v2;
}

void sub_2234529E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234529FC(uint64_t a1, void *key, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v12;
  CFMutableArrayRef v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t i;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38[2];
  void *value;
  std::__shared_weak_count *v40;
  CFMutableArrayRef theArray[2];

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return;
  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_224528230((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v13 = theArray[0];
  v12 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v14 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v13)
        goto LABEL_17;
LABEL_36:
      v26 = v38;
      goto LABEL_37;
    }
  }
  if (!v13)
    goto LABEL_36;
LABEL_17:
  for (i = 0; i != 16; ++i)
  {
    sub_224527784((void *)(a3 + 4 * i), (CFNumberRef *)&value);
    v19 = value;
    v18 = v40;
    if (!v40)
      goto LABEL_23;
    v20 = (unint64_t *)&v40->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (v19)
      {
LABEL_24:
        CFArrayAppendValue(theArray[0], value);
        v23 = v40;
        if (!v40)
          goto LABEL_32;
        goto LABEL_28;
      }
    }
    else
    {
LABEL_23:
      if (v19)
        goto LABEL_24;
    }
    v38[0] = 0;
    v38[1] = 0;
    v23 = v40;
    if (!v40)
      goto LABEL_32;
LABEL_28:
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
LABEL_32:
    if (!v19)
      goto LABEL_38;
  }
  *(_OWORD *)v38 = *(_OWORD *)theArray;
  v26 = theArray;
LABEL_37:
  *v26 = 0;
  v26[1] = 0;
LABEL_38:
  v27 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v28 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v31 = v38[0];
  v30 = (std::__shared_weak_count *)v38[1];
  if (!v38[1])
    goto LABEL_48;
  v32 = (unint64_t *)((char *)v38[1] + 8);
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
  do
    v34 = __ldaxr(v32);
  while (__stlxr(v34 - 1, v32));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if (v31)
LABEL_49:
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, v38[0]);
  }
  else
  {
LABEL_48:
    if (v31)
      goto LABEL_49;
  }
  v35 = (std::__shared_weak_count *)v38[1];
  if (v38[1])
  {
    v36 = (unint64_t *)((char *)v38[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223452CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223452CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v17 = (unint64_t *)&a14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223452D78(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22329A3C4();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_223452E9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_223452F08(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  const void *v12;
  int64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  __int128 v24;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22329A3C4();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)&v24 + 1) = v11;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v12 = *(const void **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v13)
  {
    if (v13 < 0)
      sub_22316E078();
    v14 = (char *)operator new(v13);
    *(_QWORD *)v10 = v14;
    *((_QWORD *)v10 + 1) = v14;
    *((_QWORD *)v10 + 2) = &v14[8 * (v13 >> 3)];
    v15 = v13 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v14, v12, v15);
    *((_QWORD *)v10 + 1) = &v14[v15];
  }
  v16 = v10 + 24;
  *(_QWORD *)&v24 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v17 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v18 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v18;
      v10 -= 24;
      *((_QWORD *)v17 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v19 = a1[1];
    *a1 = v10;
    *(_OWORD *)(a1 + 1) = v24;
    v16 = (char *)v24;
    if (v19 != v3)
    {
      v20 = v19;
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 3);
        v20 -= 24;
        v21 = v22;
        if (v22)
        {
          *((_QWORD *)v19 - 2) = v21;
          operator delete(v21);
        }
        v19 = v20;
      }
      while (v20 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v16;
}

void sub_2234530D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_223452E9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void ***sub_2234530F8(void ***result)
{
  void ***v1;
  void **v2;
  void ***v3;
  void ***v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void ***)**result;
    if (v3)
    {
      v4 = (void ***)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          sub_22345337C(v4 - 1, *((unsigned __int8 *)v4 - 16));
          if (*((char *)v4 - 17) < 0)
            operator delete(*(v4 - 5));
          v4 -= 5;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_223453198(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  __int128 v10;
  char *v11;
  char *v12;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_223452694();
    result = (char *)operator new(16 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[16 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v11 = &v8[v9];
        *((_QWORD *)v11 + 1) = 0;
        *v11 = 3;
        result = (char *)operator new(0x18uLL);
        v12 = result;
        if (*((char *)a2 + 23) < 0)
        {
          result = (char *)sub_223197FA4(result, *(void **)a2, *((_QWORD *)a2 + 1));
        }
        else
        {
          v10 = *a2;
          *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
          *(_OWORD *)result = v10;
        }
        *((_QWORD *)v11 + 1) = v12;
        a2 = (__int128 *)((char *)a2 + 24);
        v9 += 16;
      }
      while (a2 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_223453288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2234532E0(&a9);
  _Unwind_Resume(a1);
}

void sub_22345329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  operator delete(v11);
  for (; v12; v12 -= 16)
    sub_22345337C((void ***)(v10 + v12 - 8), *(unsigned __int8 *)(v10 + v12 - 16));
  *(_QWORD *)(v9 + 8) = v10;
  sub_2234532E0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2234532E0(void ***result)
{
  void ***v1;
  void **v2;
  void ***v3;
  void ***v4;
  void *v5;
  void ***v6;
  void ***v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void ***)**result;
    if (v3)
    {
      v4 = (void ***)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 1;
        do
        {
          v7 = v6 - 1;
          sub_22345337C(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_22345337C(void ***a1, int a2)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void **v52;
  void **v53;
  void *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  void *v59;
  char *v60;
  char *v61;
  int v62;
  unsigned __int8 v63;
  uint64_t *v64;
  void *__p;
  char *v66;
  char *v67;

  __p = 0;
  v66 = 0;
  v67 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_2234539AC((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3));
    v7 = (char *)**a1;
    v8 = (char *)(*a1)[1];
    if (v7 != v8)
    {
      v9 = v66;
      v10 = v7 + 24;
      do
      {
        if (v9 < v67)
        {
          *v9 = *v10;
          *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
          *v10 = 0;
          *((_QWORD *)v10 + 1) = 0;
          v9 += 16;
        }
        else
        {
          v9 = sub_223453A90(&__p, v10);
        }
        v66 = v9;
        v11 = v10 + 16;
        v10 += 40;
      }
      while (v11 != v8);
    }
  }
  else if (a2 == 2)
  {
    sub_2234539AC((uint64_t)&__p, ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 4);
    v4 = (char *)**a1;
    v5 = (char *)(*a1)[1];
    if (v4 != v5)
    {
      v6 = v66;
      do
      {
        if (v6 < v67)
        {
          *v6 = *v4;
          *((_QWORD *)v6 + 1) = *((_QWORD *)v4 + 1);
          *v4 = 0;
          *((_QWORD *)v4 + 1) = 0;
          v6 += 16;
        }
        else
        {
          v6 = sub_223453A90(&__p, v4);
        }
        v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  v13 = (char *)__p;
  v12 = v66;
  if (__p != v66)
  {
    v62 = v3;
    while (1)
    {
      v63 = *(v12 - 16);
      v64 = (uint64_t *)*((_QWORD *)v12 - 1);
      *(v12 - 16) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v15 = v66 - 16;
      sub_22345337C(v66 - 8, *(v66 - 16));
      v66 = v15;
      if (v63 != 1)
      {
        if (v63 != 2)
          goto LABEL_19;
        v16 = *v64;
        v17 = v64 + 1;
        v18 = v64[1];
        if (*v64 != v18)
        {
          do
          {
            if (v15 < v67)
            {
              *v15 = *(_BYTE *)v16;
              *((_QWORD *)v15 + 1) = *(_QWORD *)(v16 + 8);
              *(_BYTE *)v16 = 0;
              *(_QWORD *)(v16 + 8) = 0;
              v15 += 16;
            }
            else
            {
              v19 = (char *)__p;
              v20 = (v15 - (_BYTE *)__p) >> 4;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 60)
                goto LABEL_102;
              v22 = v67 - (_BYTE *)__p;
              if ((v67 - (_BYTE *)__p) >> 3 > v21)
                v21 = v22 >> 3;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
                v23 = 0xFFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23 >> 60)
                goto LABEL_103;
              v24 = (char *)operator new(16 * v23);
              v25 = &v24[16 * v20];
              *v25 = *(_BYTE *)v16;
              *((_QWORD *)v25 + 1) = *(_QWORD *)(v16 + 8);
              *(_BYTE *)v16 = 0;
              *(_QWORD *)(v16 + 8) = 0;
              v26 = v66;
              v27 = v25;
              if (v66 != v19)
              {
                do
                {
                  v28 = *(v26 - 16);
                  v26 -= 16;
                  *(v27 - 16) = v28;
                  v27 -= 16;
                  *((_QWORD *)v27 + 1) = *((_QWORD *)v26 + 1);
                  *v26 = 0;
                  *((_QWORD *)v26 + 1) = 0;
                }
                while (v26 != v19);
                v19 = v66;
              }
              v29 = &v24[16 * v23];
              v30 = (char *)__p;
              v15 = v25 + 16;
              __p = v27;
              v66 = v25 + 16;
              v67 = v29;
              if (v19 != v30)
              {
                v31 = v19 - 8;
                do
                {
                  v32 = v31 - 8;
                  sub_22345337C(v31, *(v31 - 8));
                  v31 -= 16;
                }
                while (v32 != v30);
              }
              if (v30)
                operator delete(v30);
            }
            v66 = v15;
            v16 += 16;
          }
          while (v16 != v18);
          v16 = *v64;
          v17 = v64 + 1;
          v47 = v64[1];
          if (v47 == *v64)
          {
            *v17 = v47;
            goto LABEL_19;
          }
          v48 = v47 - 8;
          do
          {
            v49 = v48 - 8;
            sub_22345337C(v48, *(unsigned __int8 *)(v48 - 8));
            v48 -= 16;
          }
          while (v49 != v16);
        }
        *v17 = v16;
        goto LABEL_19;
      }
      v14 = *v64;
      v33 = v64 + 1;
      v34 = v64[1];
      if (*v64 == v34)
        goto LABEL_18;
      do
      {
        if (v15 < v67)
        {
          *v15 = *(_BYTE *)(v14 + 24);
          *((_QWORD *)v15 + 1) = *(_QWORD *)(v14 + 32);
          *(_BYTE *)(v14 + 24) = 0;
          *(_QWORD *)(v14 + 32) = 0;
          v35 = v15 + 16;
          goto LABEL_45;
        }
        v36 = (char *)__p;
        v37 = (v15 - (_BYTE *)__p) >> 4;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60)
LABEL_102:
          sub_223452694();
        v39 = v67 - (_BYTE *)__p;
        if ((v67 - (_BYTE *)__p) >> 3 > v38)
          v38 = v39 >> 3;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40 >> 60)
LABEL_103:
          sub_223174E94();
        v41 = (char *)operator new(16 * v40);
        v42 = &v41[16 * v37];
        *v42 = *(_BYTE *)(v14 + 24);
        *((_QWORD *)v42 + 1) = *(_QWORD *)(v14 + 32);
        *(_BYTE *)(v14 + 24) = 0;
        *(_QWORD *)(v14 + 32) = 0;
        v35 = v42 + 16;
        if (v15 == v36)
        {
          __p = v42;
          v66 = v42 + 16;
          v67 = &v41[16 * v40];
LABEL_62:
          operator delete(v15);
          goto LABEL_45;
        }
        do
        {
          v43 = *(v15 - 16);
          v15 -= 16;
          *(v42 - 16) = v43;
          v42 -= 16;
          *((_QWORD *)v42 + 1) = *((_QWORD *)v15 + 1);
          *v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
        }
        while (v15 != v36);
        v15 = (char *)__p;
        v44 = v66;
        __p = v42;
        v66 = v35;
        v67 = &v41[16 * v40];
        if (v44 != v15)
        {
          v45 = v44 - 8;
          do
          {
            v46 = v45 - 8;
            sub_22345337C(v45, *(v45 - 8));
            v45 -= 16;
          }
          while (v46 != v15);
        }
        if (v15)
          goto LABEL_62;
LABEL_45:
        v66 = v35;
        v14 += 40;
        v15 = v35;
      }
      while (v14 != v34);
      v50 = *v64;
      v33 = v64 + 1;
      v14 = v64[1];
      if (v14 != *v64)
      {
        do
        {
          sub_22345337C(v14 - 8, *(unsigned __int8 *)(v14 - 16));
          if (*(char *)(v14 - 17) < 0)
            operator delete(*(void **)(v14 - 40));
          v14 -= 40;
        }
        while (v14 != v50);
        v14 = v50;
      }
LABEL_18:
      *v33 = v14;
LABEL_19:
      sub_22345337C(&v64, v63);
      v13 = (char *)__p;
      v12 = v66;
      if (__p == v66)
      {
        v3 = v62;
        break;
      }
    }
  }
  switch(v3)
  {
    case 0:
      v51 = *a1;
      v52 = (void **)**a1;
      if (!v52)
        goto LABEL_94;
      v53 = (void **)v51[1];
      v54 = **a1;
      if (v53 != v52)
      {
        do
        {
          sub_22345337C(v53 - 1, *((unsigned __int8 *)v53 - 16));
          if (*((char *)v53 - 17) < 0)
            operator delete(*(v53 - 5));
          v53 -= 5;
        }
        while (v53 != v52);
        v54 = *v51;
      }
      v51[1] = v52;
      break;
    case 1:
      v51 = *a1;
      v55 = (char *)**a1;
      if (!v55)
        goto LABEL_94;
      v56 = (char *)v51[1];
      v54 = **a1;
      if (v56 != v55)
      {
        v57 = v56 - 8;
        do
        {
          v58 = v57 - 8;
          sub_22345337C(v57, *(v57 - 8));
          v57 -= 16;
        }
        while (v58 != v55);
        v54 = *v51;
      }
      v51[1] = v55;
      break;
    case 2:
      v51 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_94;
      v54 = *v51;
      break;
    case 7:
      v51 = *a1;
      v54 = **a1;
      if (!v54)
        goto LABEL_94;
      v51[1] = v54;
      break;
    default:
      goto LABEL_95;
  }
  operator delete(v54);
  v51 = *a1;
LABEL_94:
  operator delete(v51);
  v13 = (char *)__p;
LABEL_95:
  if (v13)
  {
    v59 = v13;
    if (v66 != v13)
    {
      v60 = v66 - 8;
      do
      {
        v61 = v60 - 8;
        sub_22345337C(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v13);
      v59 = __p;
    }
    v66 = v13;
    operator delete(v59);
  }
}

void sub_2234539AC(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_223452694();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *(v4 - 16);
        v4 -= 16;
        *(v9 - 16) = v10;
        v9 -= 16;
        *((_QWORD *)v9 + 1) = *((_QWORD *)v4 + 1);
        *v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11 - 8;
        do
        {
          v13 = v12 - 8;
          sub_22345337C(v12, *(v12 - 8));
          v12 -= 16;
        }
        while (v13 != v2);
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

char *sub_223453A90(void **a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_223452694();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_223174E94();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  *v11 = *a2;
  *((_QWORD *)v11 + 1) = *((_QWORD *)a2 + 1);
  *a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15)
      return v13;
    goto LABEL_13;
  }
  do
  {
    v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = *((_QWORD *)v15 + 1);
    *v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v15 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    v18 = v17 - 8;
    do
    {
      v19 = v18 - 8;
      sub_22345337C(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15)
LABEL_13:
    operator delete(v15);
  return v13;
}

uint64_t *sub_223453BB8(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  const void *v25;
  size_t v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a2 + 55);
  if (v13 >= 0)
    v14 = a2 + 4;
  else
    v14 = (const void *)a2[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 55);
  else
    v15 = a2[5];
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15)
      goto LABEL_19;
LABEL_23:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
    }
    else
    {
      if (v19)
      {
        v20 = (uint64_t *)*a2;
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = (uint64_t *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v23);
      }
      v24 = *((char *)v21 + 55);
      if (v24 >= 0)
        v25 = v21 + 4;
      else
        v25 = (const void *)v21[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v21 + 55);
      else
        v26 = v21[5];
      v27 = *((char *)a5 + 23);
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      if (v29 >= v26)
        v30 = v26;
      else
        v30 = v29;
      v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v26 >= v29)
      {
LABEL_48:
        v32 = *v8;
        if (!*v8)
        {
          v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          v33 = (uint64_t **)v32;
          v36 = (const void *)v32[4];
          v34 = v32 + 4;
          v35 = v36;
          v37 = *((char *)v34 + 23);
          if (v37 >= 0)
            v38 = v34;
          else
            v38 = v35;
          if (v37 >= 0)
            v39 = *((unsigned __int8 *)v34 + 23);
          else
            v39 = v34[1];
          if (v39 >= v29)
            v40 = v29;
          else
            v40 = v39;
          v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0)
              goto LABEL_50;
LABEL_64:
            v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0)
                goto LABEL_69;
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            v8 = v33 + 1;
            v32 = v33[1];
            if (!v32)
              goto LABEL_69;
          }
          else
          {
            if (v29 >= v39)
              goto LABEL_64;
LABEL_50:
            v32 = *v33;
            v8 = v33;
            if (!*v33)
              goto LABEL_69;
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0)
    goto LABEL_23;
LABEL_19:
  v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  v43 = a2[1];
  if (v43)
  {
    v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      v23 = *a4 == v45;
      v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    v46 = *((char *)a4 + 55);
    if (v46 >= 0)
      v47 = (uint64_t *)(a4 + 4);
    else
      v47 = a4[4];
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)a4 + 55);
    else
      v48 = (size_t)a4[5];
    if (v48 >= v12)
      v49 = v12;
    else
      v49 = v48;
    v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          v52 = a3;
          while (1)
          {
            v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            v54 = v51 + 4;
            v55 = v56;
            v57 = *((char *)v54 + 23);
            if (v57 >= 0)
              v58 = v54;
            else
              v58 = v55;
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v54 + 23);
            else
              v59 = v54[1];
            if (v59 >= v12)
              v60 = v12;
            else
              v60 = v59;
            v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0)
                goto LABEL_97;
LABEL_111:
              v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_123;
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              v8 = v53 + 1;
              v51 = v53[1];
              if (!v51)
                goto LABEL_123;
            }
            else
            {
              if (v12 >= v59)
                goto LABEL_111;
LABEL_97:
              v51 = *v53;
              v8 = v53;
              if (!*v53)
                goto LABEL_123;
            }
          }
        }
        v53 = v8;
        v52 = a3;
LABEL_123:
        *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

_QWORD *sub_223453F60(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 *v5;
  __int128 *v6;
  char *v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[4] = 0;
  *((_BYTE *)__dst + 24) = 2;
  v5 = (__int128 *)*((_QWORD *)a2 + 3);
  v6 = (__int128 *)*((_QWORD *)a2 + 4);
  v7 = (char *)operator new(0x18uLL);
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  sub_223454028(v7, v5, v6, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3));
  __dst[4] = v7;
  return __dst;
}

void sub_223453FFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

char *sub_223454028(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  __int128 v10;
  char *v11;
  char *v12;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_223452694();
    result = (char *)operator new(16 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[16 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v11 = &v8[v9];
        *((_QWORD *)v11 + 1) = 0;
        *v11 = 3;
        result = (char *)operator new(0x18uLL);
        v12 = result;
        if (*((char *)a2 + 23) < 0)
        {
          result = (char *)sub_223197FA4(result, *(void **)a2, *((_QWORD *)a2 + 1));
        }
        else
        {
          v10 = *a2;
          *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
          *(_OWORD *)result = v10;
        }
        *((_QWORD *)v11 + 1) = v12;
        a2 = (__int128 *)((char *)a2 + 24);
        v9 += 16;
      }
      while (a2 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_223454118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_223454170(&a9);
  _Unwind_Resume(a1);
}

void sub_22345412C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  operator delete(v11);
  for (; v12; v12 -= 16)
    sub_223454278((uint64_t *)(v10 + v12 - 8), *(unsigned __int8 *)(v10 + v12 - 16));
  *(_QWORD *)(v9 + 8) = v10;
  sub_223454170(&a9);
  _Unwind_Resume(a1);
}

void ***sub_223454170(void ***result)
{
  void ***v1;
  void **v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (uint64_t *)**result;
    if (v3)
    {
      v4 = (uint64_t *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 1;
        do
        {
          v7 = v6 - 1;
          sub_223454278(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_22345420C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_22345420C(a1, *(_QWORD *)a2);
    sub_22345420C(a1, *((_QWORD *)a2 + 1));
    sub_223454278(a2 + 64, a2[56]);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_223454278(uint64_t *a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void **v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  char *v60;
  char *v61;
  int v62;
  unsigned __int8 v63;
  _QWORD *v64;
  void *__p;
  char *v66;
  char *v67;

  __p = 0;
  v66 = 0;
  v67 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_223454898((uint64_t)&__p, *(_QWORD *)(*a1 + 16));
    v7 = *a1 + 8;
    v8 = *(char **)*a1;
    if (v8 != (char *)v7)
    {
      v9 = v66;
      do
      {
        if (v9 >= v67)
        {
          v9 = sub_22345497C(&__p, v8 + 56);
        }
        else
        {
          *v9 = v8[56];
          *((_QWORD *)v9 + 1) = *((_QWORD *)v8 + 8);
          v8[56] = 0;
          *((_QWORD *)v8 + 8) = 0;
          v9 += 16;
        }
        v66 = v9;
        v10 = (char *)*((_QWORD *)v8 + 1);
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = *(char **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (char *)*((_QWORD *)v8 + 2);
            v12 = *(_QWORD *)v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
        v8 = v11;
      }
      while (v11 != (char *)v7);
    }
  }
  else if (a2 == 2)
  {
    sub_223454898((uint64_t)&__p, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4);
    v4 = *(_QWORD *)*a1;
    v5 = *(_QWORD *)(*a1 + 8);
    if (v4 != v5)
    {
      v6 = v66;
      do
      {
        if (v6 < v67)
        {
          *v6 = *(_BYTE *)v4;
          *((_QWORD *)v6 + 1) = *(_QWORD *)(v4 + 8);
          *(_BYTE *)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
          v6 += 16;
        }
        else
        {
          v6 = sub_22345497C(&__p, (char *)v4);
        }
        v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  v14 = (char *)__p;
  v13 = v66;
  if (__p != v66)
  {
    v62 = v3;
    while (1)
    {
      v63 = *(v13 - 16);
      v64 = (_QWORD *)*((_QWORD *)v13 - 1);
      *(v13 - 16) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v15 = v66 - 16;
      sub_223454278(v66 - 8, *(v66 - 16));
      v66 = v15;
      if (v63 == 1)
        break;
      if (v63 == 2)
      {
        v16 = (_QWORD *)*v64;
        v17 = v64 + 1;
        v18 = (_QWORD *)v64[1];
        if ((_QWORD *)*v64 != v18)
        {
          do
          {
            if (v15 < v67)
            {
              *v15 = *(_BYTE *)v16;
              *((_QWORD *)v15 + 1) = v16[1];
              *(_BYTE *)v16 = 0;
              v16[1] = 0;
              v15 += 16;
            }
            else
            {
              v19 = (char *)__p;
              v20 = (v15 - (_BYTE *)__p) >> 4;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 60)
                goto LABEL_105;
              v22 = v67 - (_BYTE *)__p;
              if ((v67 - (_BYTE *)__p) >> 3 > v21)
                v21 = v22 >> 3;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
                v23 = 0xFFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23 >> 60)
                goto LABEL_106;
              v24 = (char *)operator new(16 * v23);
              v25 = &v24[16 * v20];
              *v25 = *(_BYTE *)v16;
              *((_QWORD *)v25 + 1) = v16[1];
              *(_BYTE *)v16 = 0;
              v16[1] = 0;
              v26 = v66;
              v27 = v25;
              if (v66 != v19)
              {
                do
                {
                  v28 = *(v26 - 16);
                  v26 -= 16;
                  *(v27 - 16) = v28;
                  v27 -= 16;
                  *((_QWORD *)v27 + 1) = *((_QWORD *)v26 + 1);
                  *v26 = 0;
                  *((_QWORD *)v26 + 1) = 0;
                }
                while (v26 != v19);
                v19 = v66;
              }
              v29 = &v24[16 * v23];
              v30 = (char *)__p;
              v15 = v25 + 16;
              __p = v27;
              v66 = v25 + 16;
              v67 = v29;
              if (v19 != v30)
              {
                v31 = v19 - 8;
                do
                {
                  v32 = v31 - 8;
                  sub_223454278(v31, *(v31 - 8));
                  v31 -= 16;
                }
                while (v32 != v30);
              }
              if (v30)
                operator delete(v30);
            }
            v66 = v15;
            v16 += 2;
          }
          while (v16 != v18);
          v16 = (_QWORD *)*v64;
          v17 = v64 + 1;
          v50 = v64[1];
          if (v50 == *v64)
          {
            *v17 = v50;
            goto LABEL_24;
          }
          v51 = v50 - 8;
          do
          {
            v52 = (_QWORD *)(v51 - 8);
            sub_223454278(v51, *(unsigned __int8 *)(v51 - 8));
            v51 -= 16;
          }
          while (v52 != v16);
        }
        *v17 = v16;
      }
LABEL_24:
      sub_223454278(&v64, v63);
      v14 = (char *)__p;
      v13 = v66;
      if (__p == v66)
      {
        v3 = v62;
        goto LABEL_83;
      }
    }
    v33 = (uint64_t)v64;
    v34 = v64 + 1;
    v35 = (_QWORD *)*v64;
    if ((_QWORD *)*v64 == v64 + 1)
    {
LABEL_80:
      sub_22345420C(v33, *(char **)(v33 + 8));
      *(_QWORD *)v33 = v33 + 8;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 8) = 0;
      goto LABEL_24;
    }
    while (1)
    {
      if (v15 < v67)
      {
        *v15 = *((_BYTE *)v35 + 56);
        *((_QWORD *)v15 + 1) = v35[8];
        *((_BYTE *)v35 + 56) = 0;
        v35[8] = 0;
        v15 += 16;
        v66 = v15;
        v36 = (_QWORD *)v35[1];
        if (v36)
          goto LABEL_70;
        goto LABEL_72;
      }
      v37 = (char *)__p;
      v38 = (v15 - (_BYTE *)__p) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
LABEL_105:
        sub_223452694();
      v40 = v67 - (_BYTE *)__p;
      if ((v67 - (_BYTE *)__p) >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41 >> 60)
LABEL_106:
        sub_223174E94();
      v42 = (char *)operator new(16 * v41);
      v43 = &v42[16 * v38];
      *v43 = *((_BYTE *)v35 + 56);
      *((_QWORD *)v43 + 1) = v35[8];
      *((_BYTE *)v35 + 56) = 0;
      v35[8] = 0;
      v44 = v43 + 16;
      if (v15 == v37)
      {
        __p = v43;
        v66 = v43 + 16;
        v67 = &v42[16 * v41];
      }
      else
      {
        do
        {
          v45 = *(v15 - 16);
          v15 -= 16;
          *(v43 - 16) = v45;
          v43 -= 16;
          *((_QWORD *)v43 + 1) = *((_QWORD *)v15 + 1);
          *v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
        }
        while (v15 != v37);
        v15 = (char *)__p;
        v46 = v66;
        __p = v43;
        v66 = v44;
        v67 = &v42[16 * v41];
        if (v46 != v15)
        {
          v47 = v46 - 8;
          do
          {
            v48 = v47 - 8;
            sub_223454278(v47, *(v47 - 8));
            v47 -= 16;
          }
          while (v48 != v15);
        }
        if (!v15)
        {
          v15 = v44;
          v66 = v44;
          v36 = (_QWORD *)v35[1];
          if (v36)
            goto LABEL_70;
          goto LABEL_72;
        }
      }
      operator delete(v15);
      v15 = v44;
      v66 = v44;
      v36 = (_QWORD *)v35[1];
      if (v36)
      {
        do
        {
LABEL_70:
          v49 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
        goto LABEL_49;
      }
      do
      {
LABEL_72:
        v49 = (_QWORD *)v35[2];
        v12 = *v49 == (_QWORD)v35;
        v35 = v49;
      }
      while (!v12);
LABEL_49:
      v35 = v49;
      if (v49 == v34)
      {
        v33 = (uint64_t)v64;
        goto LABEL_80;
      }
    }
  }
LABEL_83:
  switch(v3)
  {
    case 0:
      sub_22345420C(*a1, *(char **)(*a1 + 8));
      goto LABEL_96;
    case 1:
      v53 = (void **)*a1;
      v55 = *(void **)*a1;
      if (!v55)
        goto LABEL_97;
      v56 = v53[1];
      v54 = *(void **)*a1;
      if (v56 != v55)
      {
        v57 = (uint64_t)v56 - 8;
        do
        {
          v58 = (void *)(v57 - 8);
          sub_223454278(v57, *(unsigned __int8 *)(v57 - 8));
          v57 -= 16;
        }
        while (v58 != v55);
        v54 = *v53;
      }
      v53[1] = v55;
      break;
    case 2:
      v53 = (void **)*a1;
      if ((*(char *)(*a1 + 23) & 0x80000000) == 0)
        goto LABEL_97;
      v54 = *v53;
      break;
    case 7:
      v53 = (void **)*a1;
      v54 = *(void **)*a1;
      if (!v54)
        goto LABEL_97;
      v53[1] = v54;
      break;
    default:
      goto LABEL_98;
  }
  operator delete(v54);
LABEL_96:
  v53 = (void **)*a1;
LABEL_97:
  operator delete(v53);
  v14 = (char *)__p;
LABEL_98:
  if (v14)
  {
    v59 = v14;
    if (v66 != v14)
    {
      v60 = v66 - 8;
      do
      {
        v61 = v60 - 8;
        sub_223454278(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v14);
      v59 = __p;
    }
    v66 = v14;
    operator delete(v59);
  }
}

void sub_223454898(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_223452694();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *(v4 - 16);
        v4 -= 16;
        *(v9 - 16) = v10;
        v9 -= 16;
        *((_QWORD *)v9 + 1) = *((_QWORD *)v4 + 1);
        *v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11 - 8;
        do
        {
          v13 = v12 - 8;
          sub_223454278(v12, *(v12 - 8));
          v12 -= 16;
        }
        while (v13 != v2);
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

char *sub_22345497C(void **a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_223452694();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_223174E94();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  *v11 = *a2;
  *((_QWORD *)v11 + 1) = *((_QWORD *)a2 + 1);
  *a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15)
      return v13;
    goto LABEL_13;
  }
  do
  {
    v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = *((_QWORD *)v15 + 1);
    *v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v15 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    v18 = v17 - 8;
    do
    {
      v19 = v18 - 8;
      sub_223454278(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15)
LABEL_13:
    operator delete(v15);
  return v13;
}

uint64_t **sub_223454AA4(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    v19 = memcmp(v15, v8, v17);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return v10;
    }
    else if (v16 >= v9)
    {
      return v10;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  v20 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x50uLL);
  *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
  v21 = *(uint64_t **)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v10[6] = v21;
  v10[7] = 0;
  v10[8] = 0;
  v10[9] = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v20;
  *v6 = (uint64_t *)v10;
  v22 = (uint64_t *)**a1;
  v23 = (uint64_t *)v10;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_2231A9A8C(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

void sub_223454BFC(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    sub_223454BFC(a1, *(_QWORD *)a2);
    sub_223454BFC(a1, *((_QWORD *)a2 + 1));
    v4 = *((_QWORD *)a2 + 7);
    if (v4)
    {
      v5 = *((_QWORD *)a2 + 8);
      v6 = (void *)*((_QWORD *)a2 + 7);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0)
            operator delete(*(void **)(v5 - 24));
          v5 -= 24;
        }
        while (v5 != v4);
        v6 = (void *)*((_QWORD *)a2 + 7);
      }
      *((_QWORD *)a2 + 8) = v4;
      operator delete(v6);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_223454CB0(uint64_t a1, uint64_t a2, unsigned __int8 *i)
{
  std::chrono::steady_clock::time_point v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  void **v16;
  void *v17;
  void *v18;
  int v19;
  __n128 *v22;
  void **v23;
  size_t v24;
  float v25;
  unsigned int v26;
  _QWORD *v27;
  __int128 v32;
  std::string::size_type v33;
  char *v34;
  char *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string::size_type v46;
  std::string::size_type size;
  char *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  std::mutex *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  std::string::size_type v60;
  std::string *v61;
  std::string::size_type v62;
  std::string::size_type v63;
  int v64;
  __n128 *v67;
  std::string *v68;
  size_t v69;
  float v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  std::mutex *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  char *v83;
  uint64_t *v84;
  std::string::size_type v85;
  std::string *v86;
  std::string::size_type v87;
  std::string::size_type v88;
  int v89;
  __n128 *v92;
  std::string *v93;
  size_t v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  char *v102;
  char *v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t result;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned __int8 *v126;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v128;
  char *v129;
  char *v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  __int128 v134;
  _QWORD *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  void *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  char *v152;
  char *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  __int128 *v157;
  uint64_t v158;
  __int128 v159;
  unint64_t v160;
  float v161;
  std::string v162;
  void *__p[2];
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  std::string v168;
  __int128 v169;
  __int128 v170;
  _OWORD v171[2];
  _BYTE v172[32];
  __int128 v173;
  _OWORD v174[2];
  __int128 v175;
  __int128 v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  _BYTE v184[20];
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE v189[20];
  int v190;
  uint64_t v191;

  v191 = *MEMORY[0x24BDAC8D0];
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_22346C13C(*i, (uint64_t *)(a1 + 8), &v166);
  *(_QWORD *)&v169 = "cv3d.recon.";
  *((_QWORD *)&v169 + 1) = 11;
  *(_QWORD *)&v170 = "Stats.SceneQuery";
  *((_QWORD *)&v170 + 1) = 16;
  sub_2231A9820((uint64_t)&v169, (uint64_t)v171, 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v7 = sub_2241471F8();
    v8 = v7[2];
    if (!v8)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v8 = v7[2];
    }
    v9 = *(_QWORD *)(v8 + 64);
    v10 = (std::mutex *)(v9 + 32);
    std::mutex::lock((std::mutex *)(v9 + 32));
    v12 = *(_QWORD *)(v9 + 96);
    v11 = *(_QWORD *)(v9 + 104);
    std::mutex::unlock(v10);
    if (v12 != v11)
    {
      sub_2241471F8();
      v13 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
      {
        v169 = 0u;
        v170 = 0u;
        LODWORD(v171[0]) = 728325608;
        kdebug_trace();
        v14 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_) / 1000000.0;
        v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)&v168.__r_.__value_.__l.__data_ = v14;
        sub_223456130((double *)&qword_255788F20, v13, (float *)&v168, "CreateNVSEngine (ms)");
        kdebug_trace();
      }
    }
  }
  v169 = 0u;
  v170 = 0u;
  LODWORD(v171[0]) = 728325624;
  kdebug_trace();
  v15 = BYTE7(v164);
  if (SBYTE7(v164) < 0)
    v15 = (unint64_t)__p[1];
  if (v15 >= 0x11)
  {
    v16 = __p;
    if (SBYTE7(v164) < 0)
      v16 = (void **)__p[0];
    v17 = *v16;
    v18 = v16[1];
    v19 = *((unsigned __int8 *)v16 + 16);
    if (v17 == (void *)0x6365722E64337663 && v18 == (void *)0x73746174532E6E6FLL && v19 == 46)
    {
      v22 = sub_223187510();
      if ((SBYTE7(v164) & 0x80u) == 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      if ((SBYTE7(v164) & 0x80u) == 0)
        v24 = BYTE7(v164);
      else
        v24 = (size_t)__p[1];
      v25 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_) / 1000000.0;
      v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(float *)&v168.__r_.__value_.__l.__data_ = v25;
      sub_2231897A8((uint64_t *)v22, v23, v24, (float *)&v168, (uint64_t)"CreateNVSEngine (ms)", 20);
    }
  }
  kdebug_trace();
  if (SBYTE7(v164) < 0)
    operator delete(__p[0]);
  v164 = 0u;
  v165 = 0u;
  *(_OWORD *)__p = 0u;
  v26 = *i;
  if (v26 > 4)
  {
    sub_223456374((uint64_t)&v169, (char *)i);
    if ((SBYTE7(v170) & 0x80u) == 0)
      v157 = &v169;
    else
      v157 = (__int128 *)v169;
    if ((SBYTE7(v170) & 0x80u) == 0)
      v158 = BYTE7(v170);
    else
      v158 = *((_QWORD *)&v169 + 1);
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneRendering.cpp", 79, (uint64_t)"", 0, (uint64_t)v157, v158, (void (*)(void **))sub_22457406C);
    if (SBYTE7(v170) < 0)
      operator delete((void *)v169);
    goto LABEL_244;
  }
  if (v26 != 2)
  {
    v27 = *(_QWORD **)(a2 + 32);
    if (v27)
      goto LABEL_35;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneRendering.cpp", 48, (uint64_t)"state_snapshot.keyframing_state", 31, (uint64_t)"Keyframe based NVS generation requires Keyframe attribute for SceneQuery", 72, (void (*)(void **))sub_22457406C))
    {
      v27 = *(_QWORD **)(a2 + 32);
LABEL_35:
      v190 = 0;
      v187 = 1;
      *(_OWORD *)v189 = 0u;
      *(_OWORD *)v184 = 0u;
      v185 = 1;
      v182 = 0u;
      v177 = 1;
      v180 = 0;
      v175 = 0u;
      v176 = 0u;
      memset(v174, 0, sizeof(v174));
      *(_OWORD *)&v172[16] = 0u;
      *(_QWORD *)&v173 = 0x3E4CCCCD00000001;
      *(_OWORD *)v172 = 0u;
      v170 = 0u;
      *(_QWORD *)&v171[0] = 65792;
      v169 = 0u;
      LODWORD(v169) = 2;
      HIDWORD(v169) = 2;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)&v170 = _D0;
      DWORD2(v170) = 1065353216;
      BYTE12(v170) = 1;
      *(_OWORD *)((char *)v171 + 8) = xmmword_2245B95E0;
      *((_QWORD *)&v171[1] + 1) = 0x548960000;
      v172[0] = 1;
      *(_DWORD *)&v172[4] = 1077936128;
      *(_OWORD *)&v172[12] = xmmword_2245B95F0;
      v172[28] = 1;
      *((_QWORD *)&v173 + 1) = 0x4000000000000000;
      LOBYTE(v174[0]) = 1;
      *(_WORD *)((char *)v174 + 9) = 257;
      *(_QWORD *)((char *)v174 + 12) = 0x5000002EELL;
      BYTE4(v174[1]) = 1;
      LODWORD(v175) = 10;
      BYTE8(v175) = 2;
      v178 = 0x23E05A8ACLL;
      v181 = 0x43E800000;
      v179 = 1028443341;
      DWORD2(v182) = 1056964608;
      BYTE13(v182) = 1;
      v183 = xmmword_2245B9600;
      *(_DWORD *)v184 = 4;
      *(_QWORD *)&v184[12] = 0x2003E75C28FLL;
      v186 = 0x240A00000;
      v188 = 0x3FE8000000000000;
      *(_QWORD *)v189 = 0x1300000007;
      v189[8] = 24;
      *(_QWORD *)&v189[12] = 0x40A0000040000000;
      sub_22346AE1C(v27, (uint64_t)(i + 4), (float32x2_t *)&v183 + 1, (uint64_t)&v168);
      v32 = *(_OWORD *)&v168.__r_.__value_.__l.__data_;
      v33 = v168.__r_.__value_.__r.__words[2];
      memset(&v168, 0, sizeof(v168));
      v34 = (char *)__p[0];
      if (__p[0])
      {
        v159 = v32;
        v35 = (char *)__p[1];
        v36 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            v37 = (std::__shared_weak_count *)*((_QWORD *)v35 - 9);
            if (v37)
            {
              p_shared_owners = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldaxr(p_shared_owners);
              while (__stlxr(v39 - 1, p_shared_owners));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v35 -= 80;
          }
          while (v35 != v34);
          v36 = __p[0];
        }
        __p[1] = v34;
        operator delete(v36);
        v32 = v159;
      }
      *(_OWORD *)__p = v32;
      *(_QWORD *)&v164 = v33;
      v40 = *((_QWORD *)&v164 + 1);
      if (*((_QWORD *)&v164 + 1))
      {
        v41 = v165;
        v42 = (void *)*((_QWORD *)&v164 + 1);
        if ((_QWORD)v165 != *((_QWORD *)&v164 + 1))
        {
          do
          {
            v43 = *(std::__shared_weak_count **)(v41 - 8);
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v41 -= 16;
          }
          while (v41 != v40);
          v42 = (void *)*((_QWORD *)&v164 + 1);
        }
        *(_QWORD *)&v165 = v40;
        operator delete(v42);
      }
      *((_QWORD *)&v164 + 1) = 0;
      v165 = 0uLL;
      v46 = v168.__r_.__value_.__r.__words[0];
      if (v168.__r_.__value_.__r.__words[0])
      {
        size = v168.__r_.__value_.__l.__size_;
        v48 = (char *)v168.__r_.__value_.__r.__words[0];
        if (v168.__r_.__value_.__l.__size_ != v168.__r_.__value_.__r.__words[0])
        {
          do
          {
            v49 = *(std::__shared_weak_count **)(size - 72);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            size -= 80;
          }
          while (size != v46);
          v48 = (char *)v168.__r_.__value_.__r.__words[0];
        }
        v168.__r_.__value_.__l.__size_ = v46;
LABEL_68:
        operator delete(v48);
        goto LABEL_69;
      }
      goto LABEL_69;
    }
LABEL_244:
    abort();
  }
  v109 = *(uint64_t **)(a2 + 16);
  if (!v109)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneRendering.cpp", 57, (uint64_t)"state_snapshot.mesh_state", 25, (uint64_t)"Mesh-based NVS generation requires Meshes attribute for SceneQuery", 66, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_244;
    }
    v109 = *(uint64_t **)(a2 + 16);
  }
  v111 = *v109;
  v110 = v109[1];
  v169 = 0uLL;
  *(_QWORD *)&v170 = 0;
  v160 = 0xAAAAAAAAAAAAAAABLL * ((v110 - v111) >> 6);
  if (v110 == v111)
  {
    v112 = 0;
LABEL_163:
    v115 = (char *)v112;
    goto LABEL_199;
  }
  if ((0xAAAAAAAAAAAAAAABLL * ((v110 - v111) >> 6)) >> 60)
    sub_22316E078();
  v112 = operator new(0xAAAAAAAAAAAAAAB0 * ((v110 - v111) >> 6));
  *(_QWORD *)&v169 = v112;
  *((_QWORD *)&v169 + 1) = v112;
  *(_QWORD *)&v170 = &v112[0xF555555555555556 * ((v110 - v111) >> 6)];
  v114 = *v109;
  v113 = v109[1];
  if (*v109 == v113)
    goto LABEL_163;
  do
  {
    if (!*(_DWORD *)(v114 + 48))
    {
      v117 = *(_QWORD *)(v114 + 32);
      if ((unint64_t)v112 >= (unint64_t)v170)
      {
        v121 = (_QWORD *)v169;
        v122 = (uint64_t)((uint64_t)v112 - v169) >> 4;
        v123 = v122 + 1;
        if ((unint64_t)(v122 + 1) >> 60)
          sub_22316E078();
        v124 = v170 - v169;
        if ((uint64_t)(v170 - v169) >> 3 > v123)
          v123 = v124 >> 3;
        if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0)
          v125 = 0xFFFFFFFFFFFFFFFLL;
        else
          v125 = v123;
        if (v125 >> 60)
          sub_223174E94();
        v126 = i;
        rep = v6.__d_.__rep_;
        v128 = *(_QWORD *)(v114 + 40);
        v129 = (char *)operator new(16 * v125);
        v130 = &v129[16 * v122];
        *(_QWORD *)v130 = v117;
        *((_QWORD *)v130 + 1) = v128;
        if (v128)
        {
          v131 = (unint64_t *)(v128 + 8);
          do
            v132 = __ldxr(v131);
          while (__stxr(v132 + 1, v131));
        }
        v133 = &v129[16 * v125];
        v116 = v130 + 16;
        if (v112 == v121)
        {
          *(_QWORD *)&v169 = &v129[16 * v122];
          *((_QWORD *)&v169 + 1) = v130 + 16;
          *(_QWORD *)&v170 = v133;
          v6.__d_.__rep_ = rep;
          i = v126;
        }
        else
        {
          v6.__d_.__rep_ = rep;
          do
          {
            v134 = *((_OWORD *)v112 - 1);
            v112 -= 2;
            *((_OWORD *)v130 - 1) = v134;
            v130 -= 16;
            *v112 = 0;
            v112[1] = 0;
          }
          while (v112 != v121);
          v135 = (_QWORD *)*((_QWORD *)&v169 + 1);
          v112 = (_QWORD *)v169;
          *(_QWORD *)&v169 = v130;
          *((_QWORD *)&v169 + 1) = v116;
          *(_QWORD *)&v170 = v133;
          for (i = v126; v135 != v112; v135 -= 2)
          {
            v136 = (std::__shared_weak_count *)*(v135 - 1);
            if (v136)
            {
              v137 = (unint64_t *)&v136->__shared_owners_;
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
          }
        }
        if (v112)
          operator delete(v112);
      }
      else
      {
        *v112 = v117;
        v118 = *(_QWORD *)(v114 + 40);
        v112[1] = v118;
        if (v118)
        {
          v119 = (unint64_t *)(v118 + 8);
          do
            v120 = __ldxr(v119);
          while (__stxr(v120 + 1, v119));
        }
        v116 = v112 + 2;
      }
      *((_QWORD *)&v169 + 1) = v116;
      v112 = v116;
    }
    v114 += 192;
  }
  while (v114 != v113);
  v115 = (char *)v169;
LABEL_199:
  if (v160 != ((char *)v112 - v115) >> 4)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneRendering.cpp", 72, (uint64_t)"", 0, (uint64_t)"NVS generation based on meshes in secondary sessions not implemented", 68, (void (*)(void **))sub_22457406C);
    abort();
  }
  v139 = v170;
  v169 = 0uLL;
  *(_QWORD *)&v170 = 0;
  v140 = (char *)__p[0];
  if (__p[0])
  {
    v141 = (char *)__p[1];
    v142 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v143 = (std::__shared_weak_count *)*((_QWORD *)v141 - 9);
        if (v143)
        {
          v144 = (unint64_t *)&v143->__shared_owners_;
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        v141 -= 80;
      }
      while (v141 != v140);
      v142 = __p[0];
    }
    __p[1] = v140;
    operator delete(v142);
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v164 = 0;
  v146 = *((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v147 = v165;
    v148 = (void *)*((_QWORD *)&v164 + 1);
    if ((_QWORD)v165 != *((_QWORD *)&v164 + 1))
    {
      do
      {
        v149 = *(std::__shared_weak_count **)(v147 - 8);
        if (v149)
        {
          v150 = (unint64_t *)&v149->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        v147 -= 16;
      }
      while (v147 != v146);
      v148 = (void *)*((_QWORD *)&v164 + 1);
    }
    *(_QWORD *)&v165 = v146;
    operator delete(v148);
  }
  *((_QWORD *)&v164 + 1) = v115;
  *(_QWORD *)&v165 = v112;
  *((_QWORD *)&v165 + 1) = v139;
  v152 = (char *)v169;
  if ((_QWORD)v169)
  {
    v153 = (char *)*((_QWORD *)&v169 + 1);
    if (*((_QWORD *)&v169 + 1) != (_QWORD)v169)
    {
      do
      {
        v154 = (std::__shared_weak_count *)*((_QWORD *)v153 - 1);
        if (v154)
        {
          v155 = (unint64_t *)&v154->__shared_owners_;
          do
            v156 = __ldaxr(v155);
          while (__stlxr(v156 - 1, v155));
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
        }
        v153 -= 16;
      }
      while (v153 != v152);
      v152 = (char *)v169;
    }
    v48 = v152;
    goto LABEL_68;
  }
LABEL_69:
  *(_QWORD *)&v169 = "cv3d.recon.";
  *((_QWORD *)&v169 + 1) = 11;
  *(_QWORD *)&v170 = "Stats.SceneQuery";
  *((_QWORD *)&v170 + 1) = 16;
  sub_2231A9820((uint64_t)&v169, (uint64_t)v171, 0, 0, &v168);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v52 = sub_2241471F8();
    v53 = v52[2];
    if (!v53)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v53 = v52[2];
    }
    v54 = *(_QWORD *)(v53 + 64);
    v55 = (std::mutex *)(v54 + 32);
    std::mutex::lock((std::mutex *)(v54 + 32));
    v57 = *(_QWORD *)(v54 + 96);
    v56 = *(_QWORD *)(v54 + 104);
    std::mutex::unlock(v55);
    if (v57 != v56)
    {
      sub_2241471F8();
      v58 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58))
      {
        v169 = 0u;
        v170 = 0u;
        LODWORD(v171[0]) = 728325608;
        kdebug_trace();
        v59 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_) / 1000000.0;
        v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)&v162.__r_.__value_.__l.__data_ = v59;
        sub_223456130((double *)&qword_255788F20, v58, (float *)&v162, "preparing input (ms)");
        kdebug_trace();
      }
    }
  }
  v169 = 0u;
  v170 = 0u;
  LODWORD(v171[0]) = 728325624;
  kdebug_trace();
  v60 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
  if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v60 = v168.__r_.__value_.__l.__size_;
  if (v60 >= 0x11)
  {
    v61 = &v168;
    if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v61 = (std::string *)v168.__r_.__value_.__r.__words[0];
    v62 = v61->__r_.__value_.__r.__words[0];
    v63 = v61->__r_.__value_.__l.__size_;
    v64 = v61->__r_.__value_.__s.__data_[16];
    if (v62 == 0x6365722E64337663 && v63 == 0x73746174532E6E6FLL && v64 == 46)
    {
      v67 = sub_223187510();
      if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = &v168;
      else
        v68 = (std::string *)v168.__r_.__value_.__r.__words[0];
      if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
      else
        v69 = v168.__r_.__value_.__l.__size_;
      v70 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_) / 1000000.0;
      v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(float *)&v162.__r_.__value_.__l.__data_ = v70;
      sub_2231897A8((uint64_t *)v67, v68, v69, (float *)&v162, (uint64_t)"preparing input (ms)", 20);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  v71 = *(_OWORD *)(i + 20);
  v169 = *(_OWORD *)(i + 4);
  v170 = v71;
  v72 = *(_OWORD *)(i + 52);
  v171[0] = *(_OWORD *)(i + 36);
  v171[1] = v72;
  v73 = *(_OWORD *)(i + 104);
  *(_OWORD *)&v172[16] = *(_OWORD *)(i + 88);
  v173 = v73;
  v74 = *(_OWORD *)(i + 136);
  v174[0] = *(_OWORD *)(i + 120);
  v174[1] = v74;
  LODWORD(v175) = *((_DWORD *)i + 38);
  *((_QWORD *)&v175 + 1) = *((_QWORD *)i + 20);
  *(_QWORD *)v172 = &off_24EC207B8;
  *(_QWORD *)&v172[8] = &off_24EC20868;
  LOBYTE(v176) = i[168];
  DWORD1(v176) = 63;
  (*(void (**)(uint64_t, void **, __int128 *))(*(_QWORD *)v166 + 16))(v166, __p, &v169);
  *(_QWORD *)&v169 = "cv3d.recon.";
  *((_QWORD *)&v169 + 1) = 11;
  *(_QWORD *)&v170 = "Stats.SceneQuery";
  *((_QWORD *)&v170 + 1) = 16;
  sub_2231A9820((uint64_t)&v169, (uint64_t)v171, 0, 0, &v162);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v75 = sub_2241471F8();
    v76 = v75[2];
    if (!v76)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v76 = v75[2];
    }
    v77 = *(_QWORD *)(v76 + 64);
    v78 = (std::mutex *)(v77 + 32);
    std::mutex::lock((std::mutex *)(v77 + 32));
    v80 = *(_QWORD *)(v77 + 96);
    v79 = *(_QWORD *)(v77 + 104);
    std::mutex::unlock(v78);
    if (v80 != v79)
    {
      sub_2241471F8();
      v81 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81))
      {
        v169 = 0u;
        v170 = 0u;
        LODWORD(v171[0]) = 728325608;
        kdebug_trace();
        v82 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_) / 1000000.0;
        v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v161 = v82;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81))
        {
          v83 = (char *)operator new(0x20uLL);
          *(_OWORD *)&v168.__r_.__value_.__r.__words[1] = xmmword_2245B8D50;
          strcpy(v83, "nvs_engine GenerateNVS (ms)");
          *(_QWORD *)&v167 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v167 + 1) = 2;
          v168.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
          v84 = sub_2241471F8();
          sub_2231FBBA8((uint64_t)v84, v81, &v161, (uint64_t)&v168, &v167);
          if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v168.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v169 = 0u;
  v170 = 0u;
  LODWORD(v171[0]) = 728325624;
  kdebug_trace();
  v85 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v85 = v162.__r_.__value_.__l.__size_;
  if (v85 >= 0x11)
  {
    v86 = &v162;
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v86 = (std::string *)v162.__r_.__value_.__r.__words[0];
    v87 = v86->__r_.__value_.__r.__words[0];
    v88 = v86->__r_.__value_.__l.__size_;
    v89 = v86->__r_.__value_.__s.__data_[16];
    if (v87 == 0x6365722E64337663 && v88 == 0x73746174532E6E6FLL && v89 == 46)
    {
      v92 = sub_223187510();
      if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v93 = &v162;
      else
        v93 = (std::string *)v162.__r_.__value_.__r.__words[0];
      if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
      else
        v94 = v162.__r_.__value_.__l.__size_;
      v95 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_) / 1000000.0;
      std::chrono::steady_clock::now();
      *(float *)&v168.__r_.__value_.__l.__data_ = v95;
      sub_2231897A8((uint64_t *)v92, v93, v94, (float *)&v168, (uint64_t)"nvs_engine GenerateNVS (ms)", 27);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v96 = *((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v97 = v165;
    v98 = (void *)*((_QWORD *)&v164 + 1);
    if ((_QWORD)v165 != *((_QWORD *)&v164 + 1))
    {
      do
      {
        v99 = *(std::__shared_weak_count **)(v97 - 8);
        if (v99)
        {
          v100 = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v97 -= 16;
      }
      while (v97 != v96);
      v98 = (void *)*((_QWORD *)&v164 + 1);
    }
    *(_QWORD *)&v165 = v96;
    operator delete(v98);
  }
  v102 = (char *)__p[0];
  if (__p[0])
  {
    v103 = (char *)__p[1];
    v104 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v105 = (std::__shared_weak_count *)*((_QWORD *)v103 - 9);
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        v103 -= 80;
      }
      while (v103 != v102);
      v104 = __p[0];
    }
    __p[1] = v102;
    operator delete(v104);
  }
  result = v166;
  v166 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223455FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void **v45;
  uint64_t v47;

  if (a45 < 0)
    operator delete(*v45);
  sub_22345626C(&a20);
  v47 = a30;
  a30 = 0;
  if (!v47)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  _Unwind_Resume(a1);
}

void sub_223456130(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223456250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **sub_22345626C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (char *)a1[3];
  if (v2)
  {
    v3 = (char *)a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (char *)*a1;
  if (*a1)
  {
    v9 = (char *)a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 9);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 80;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_223456374(uint64_t a1, char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_2232CFAFC(v4, "Unsupported rendering method: ");
  sub_22345645C((uint64_t)&v7, (uint64_t)v4, a2);
  if (v5 == -1)
    sub_22316DD70();
  v7 = &v6;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC37218[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC371E8[v5])(&v7, v4);
  return result;
}

void sub_223456420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223456434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223456448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22345645C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_2231813E8((_QWORD *)(v5 + 16), (uint64_t)off_24EC37230[*a3], qword_2245F65F0[*a3]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC37200[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_2234566C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2234566EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223456708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_22345671C(uint64_t **a1, uint64_t a2, float a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  float v7;
  unint64_t *v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  _BOOL8 result;
  char *v16;
  float32x4_t v17;
  char *v18;
  float32x4_t v19;
  float32x2_t v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  BOOL v31;
  BOOL v32;
  BOOL v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x2_t v58;
  int8x16_t v59;

  v7 = a3 * a3;
  v8 = (unint64_t *)*a1;
  a4.i64[0] = **a1;
  a4.i32[2] = *((_DWORD *)*a1 + 2);
  a6.i64[0] = *(_QWORD *)a2;
  a6.i32[2] = *(_DWORD *)(a2 + 8);
  v9 = vsubq_f32(a4, a6);
  v10 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
  v11 = (float32x2_t)a1[2];
  a7.i32[0] = *((_DWORD *)a1 + 6);
  v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1);
  v13 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.f32, v11), v12, *(float32x2_t *)v9.f32, 1), *(float32x2_t *)a7.f32, v10);
  if (vmul_f32(v13, v13).f32[0] > (float)(v7
                                         * vmla_f32(vmla_lane_f32(vmul_f32(v11, v11), v12, v11, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0]))return 0;
  result = 0;
  v16 = (char *)v8 + 12 * *((int *)a1 + 2);
  a5.i64[0] = *(_QWORD *)v16;
  a5.i32[2] = *((_DWORD *)v16 + 2);
  v17 = vsubq_f32(a5, a6);
  v18 = (char *)v8 + 12 * *((int *)a1 + 3);
  a7.i64[0] = *(_QWORD *)v18;
  a7.i32[2] = *((_DWORD *)v18 + 2);
  v19 = vsubq_f32(a7, a6);
  v20 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.f32, 1);
  LODWORD(v21) = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32), v20, v20), v10, v10).u32[0];
  v22 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1);
  v23 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v24 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v17.f32), v20, *(float32x2_t *)v17.f32, 1), v23, v10).f32[0];
  v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1);
  v26 = (float32x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
  LODWORD(v27) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v19.f32), v20, *(float32x2_t *)v19.f32, 1), v26, v10).u32[0];
  v28 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32), v22, *(float32x2_t *)v17.f32, 1), v23, v23).f32[0];
  LODWORD(v29) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v19.f32), v25, *(float32x2_t *)v17.f32, 1), v26, v23).u32[0];
  LODWORD(v30) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), v25, *(float32x2_t *)v19.f32, 1), v26, v26).u32[0];
  v31 = v28 > v7;
  if (v24 <= v28)
    v31 = 0;
  if (v29 <= v28)
    v31 = 0;
  v32 = v30 > v7;
  if (v27 <= v30)
    v32 = 0;
  if (v29 <= v30)
    v32 = 0;
  v34 = v27 <= v21 || v24 <= v21 || v21 <= v7;
  if (v34 && !v31 && !v32)
  {
    v35 = vsubq_f32(v17, v9);
    v36 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v35.f32), v20, *(float32x2_t *)v35.f32, 1);
    v37 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    v38 = vmla_f32(v36, v37, v10);
    v39 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 1), *(float32x2_t *)v35.f32, 1), v37, v37).f32[0];
    v40 = vmlsq_lane_f32(vmulq_n_f32(v9, v39), v35, v38, 0);
    v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1);
    v42 = (float32x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
    if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), v41, *(float32x2_t *)v40.f32, 1), v42, v42).f32[0] <= (float)((float)(v7 * v39) * v39)|| (v43 = (int8x16_t)vmlaq_n_f32(vnegq_f32(v40), v19, v39), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v43.i8), v41, *(float32x2_t *)v43.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), v42).f32[0] <= 0.0))
    {
      v44 = vsubq_f32(v19, v17);
      v45 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v44.f32), v22, *(float32x2_t *)v44.f32, 1);
      v46 = (float32x2_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
      v47 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.f32, 1), *(float32x2_t *)v44.f32, 1), v46, v46).f32[0];
      v48 = vmlsq_lane_f32(vmulq_n_f32(v17, v47), v44, vmla_f32(v45, v46, v23), 0);
      v49 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.f32, 1);
      v50 = (float32x2_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32), v49, *(float32x2_t *)v48.f32, 1), v50, v50).f32[0] <= (float)((float)(v7 * v47) * v47)|| (v51 = (int8x16_t)vmlaq_n_f32(vnegq_f32(v48), v9, v47), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v51.i8), v49, *(float32x2_t *)v51.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), v50).f32[0] <= 0.0))
      {
        v52 = vsubq_f32(v9, v19);
        v53 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v52.f32), v25, *(float32x2_t *)v52.f32, 1);
        v54 = (float32x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
        v55 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1), *(float32x2_t *)v52.f32, 1), v54, v54).f32[0];
        v56 = vmlsq_lane_f32(vmulq_n_f32(v19, v55), v52, vmla_f32(v53, v54, v26), 0);
        v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v56.f32, 1);
        v58 = (float32x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
        if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), v57, *(float32x2_t *)v56.f32, 1), v58, v58).f32[0] <= (float)((float)(v7 * v55) * v55))
        {
          return 1;
        }
        else
        {
          v59 = (int8x16_t)vmlaq_n_f32(vnegq_f32(v56), v17, v55);
          return vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v59.i8), v57, *(float32x2_t *)v59.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL), v58).f32[0] <= 0.0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_2234569C4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2234569EC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223456A10@<X0>(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count_vtbl *v5;
  _OWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  _OWORD v16[16];

  v4 = 0;
  memset(v16, 0, sizeof(v16));
  do
  {
    v5 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(float *)(a1 + 4 * v4));
    sub_22340E890((std::__shared_weak_count_vtbl **)&v15, v5, 0);
    v6 = &v16[v4];
    v7 = v15;
    v15 = 0uLL;
    v8 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
    *v6 = v7;
    if (!v8)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
      if (!*((_QWORD *)&v15 + 1))
        goto LABEL_2;
    }
    else
    {
LABEL_7:
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
      if (!*((_QWORD *)&v15 + 1))
        goto LABEL_2;
    }
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
LABEL_2:
    ++v4;
  }
  while (v4 != 16);
  sub_223456B70(a2, (uint64_t *)v16);
  return sub_223459BF0(v16);
}

void sub_223456B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223459BF0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223456B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223459BF0((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_223456B70(std::__shared_weak_count_vtbl **a1, uint64_t *a2)
{
  xpc_object_t *v4;
  std::__shared_weak_count_vtbl *v5;
  xpc_object_t **v7;
  xpc_object_t *v8;
  xpc_object_t *v9;
  xpc_object_t *v10;

  v8 = (xpc_object_t *)operator new(0x80uLL);
  v9 = v8;
  v10 = v8 + 16;
  v7 = &v8;
  sub_22345A000(a2, (void ***)&v7);
  v4 = v8;
  v5 = (std::__shared_weak_count_vtbl *)xpc_array_create(v8, v9 - v8);
  sub_22456428C(a1, v5, 0);
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_223456BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223456C24(xpc_object_t *a1@<X0>, float *a2@<X8>)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  BOOL v17;
  float value;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;

  v4 = 0;
  *(_OWORD *)a2 = xmmword_2245F6670;
  *((_OWORD *)a2 + 1) = unk_2245F6680;
  *((_OWORD *)a2 + 2) = xmmword_2245F6690;
  *((_OWORD *)a2 + 3) = unk_2245F66A0;
  v5 = MEMORY[0x24BDACFA8];
  v6 = MEMORY[0x24BDACF90];
  v7 = MEMORY[0x24BDACF88];
  v8 = MEMORY[0x24BDACF78];
  v9 = MEMORY[0x24BDACF80];
  do
  {
    if (*a1)
    {
      if (xpc_array_get_count(*a1) > v4)
        goto LABEL_9;
LABEL_8:
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_36:
        abort();
      }
      goto LABEL_9;
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_36;
    }
    if (xpc_array_get_count(*a1) <= v4)
      goto LABEL_8;
LABEL_9:
    sub_224564350(a1, v4, &v22);
    v10 = v22;
    v11 = MEMORY[0x2276858AC](v22);
    v17 = v11 != v5
       || MEMORY[0x24BDACFA0] == v5
       || v11 == MEMORY[0x24BDACF98]
       || v11 == v6
       || v11 == v7
       || v11 == v8
       || v11 == v9;
    if (v17
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    value = xpc_double_get_value(v10);
    a2[v4] = value;
    v19 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    ++v4;
  }
  while (v4 != 16);
}

void sub_223456E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223456E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_223456E4C@<X0>(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  __int128 v5;
  std::__shared_weak_count_vtbl *v6;
  __int128 v7;
  std::__shared_weak_count_vtbl *v8;
  __int128 v9;
  std::__shared_weak_count_vtbl *v10;
  __int128 v11;
  std::__shared_weak_count_vtbl *v12;
  __int128 v13;
  std::__shared_weak_count_vtbl *v14;
  __int128 v15;
  void *v16;
  std::__shared_weak_count_vtbl *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(float *)(a1 + 16));
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v4, 0);
  v5 = v25[0];
  v25[0] = 0uLL;
  v19 = v5;
  v6 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(float *)(a1 + 20));
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v6, 0);
  v7 = v25[0];
  v25[0] = 0uLL;
  v20 = v7;
  v8 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(float *)(a1 + 24));
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v8, 0);
  v9 = v25[0];
  v25[0] = 0uLL;
  v21 = v9;
  v10 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(float *)(a1 + 28));
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v10, 0);
  v11 = v25[0];
  v25[0] = 0uLL;
  v22 = v11;
  v12 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(*(unsigned int *)(a1 + 88));
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v12, 0);
  v13 = v25[0];
  v25[0] = 0uLL;
  v23 = v13;
  v14 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(*(unsigned int *)(a1 + 92));
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v14, 0);
  v15 = v25[0];
  v25[0] = 0uLL;
  v24 = v15;
  sub_22345A16C((uint64_t)v25, (uint64_t *)&v19);
  v16 = *(void **)&v25[0];
  v17 = (std::__shared_weak_count_vtbl *)xpc_array_create(*(xpc_object_t **)&v25[0], (uint64_t)(*((_QWORD *)&v25[0] + 1) - *(_QWORD *)&v25[0]) >> 3);
  sub_22456428C(a2, v17, 0);
  if (v16)
    operator delete(v16);
  return sub_2231F4908(&v19);
}

void sub_223457258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231F4908(&a9);
  _Unwind_Resume(a1);
}

double sub_2234572A4@<D0>(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  double value;
  xpc_object_t v21;
  void *v22;
  uint64_t v23;
  double v24;
  xpc_object_t v25;
  void *v26;
  uint64_t v27;
  double v28;
  xpc_object_t v29;
  void *v30;
  uint64_t v31;
  double v32;
  xpc_object_t v33;
  unsigned int v34;
  xpc_object_t v35;
  unsigned int v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  float64x2_t v55;
  double result;
  __int128 v57;
  float64x2_t v58;
  float64x2_t v59;
  xpc_object_t v60;
  std::__shared_weak_count *v61;
  xpc_object_t v62;
  std::__shared_weak_count *v63;
  void *v64;
  std::__shared_weak_count *v65;
  void *v66;
  std::__shared_weak_count *v67;
  void *v68;
  std::__shared_weak_count *v69;
  void *v70;
  std::__shared_weak_count *v71;
  float32x4_t v72;
  double v73;
  double v74;
  uint64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  __int128 v78;
  __int128 v79;
  int v80;

  v4 = *a1;
  if (v4)
  {
    if (xpc_array_get_count(v4))
      goto LABEL_7;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_113;
    }
    if (xpc_array_get_count(*a1))
      goto LABEL_7;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_113:
    abort();
  }
LABEL_7:
  sub_224564350(a1, 0, &v70);
  v5 = v70;
  v6 = MEMORY[0x2276858AC](v70);
  v7 = MEMORY[0x24BDACFA8];
  v8 = MEMORY[0x24BDACFA0];
  v9 = v6 != MEMORY[0x24BDACFA8] || MEMORY[0x24BDACFA0] == MEMORY[0x24BDACFA8];
  v10 = MEMORY[0x24BDACF98];
  v11 = v9 || v6 == MEMORY[0x24BDACF98];
  v12 = MEMORY[0x24BDACF90];
  v13 = v11 || v6 == MEMORY[0x24BDACF90];
  v14 = MEMORY[0x24BDACF88];
  v15 = v13 || v6 == MEMORY[0x24BDACF88];
  v16 = MEMORY[0x24BDACF78];
  v17 = v15 || v6 == MEMORY[0x24BDACF78];
  v18 = MEMORY[0x24BDACF80];
  v19 = v17 || v6 == MEMORY[0x24BDACF80];
  if (v19
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  value = xpc_double_get_value(v5);
  v21 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_108;
    }
    v21 = *a1;
  }
  if (xpc_array_get_count(v21) <= 1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_108:
    abort();
  }
  sub_224564350(a1, 1uLL, &v68);
  v22 = v68;
  v23 = MEMORY[0x2276858AC](v68);
  if ((v23 != v7 || v8 == v7 || v23 == v10 || v23 == v12 || v23 == v14 || v23 == v16 || v23 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v24 = xpc_double_get_value(v22);
  v25 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_109;
    }
    v25 = *a1;
  }
  if (xpc_array_get_count(v25) <= 2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_109:
    abort();
  }
  sub_224564350(a1, 2uLL, &v66);
  v26 = v66;
  v27 = MEMORY[0x2276858AC](v66);
  if ((v27 != v7 || v8 == v7 || v27 == v10 || v27 == v12 || v27 == v14 || v27 == v16 || v27 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v28 = xpc_double_get_value(v26);
  v29 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_110;
    }
    v29 = *a1;
  }
  if (xpc_array_get_count(v29) <= 3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_110:
    abort();
  }
  sub_224564350(a1, 3uLL, &v64);
  v30 = v64;
  v31 = MEMORY[0x2276858AC](v64);
  if ((v31 != v7 || v8 == v7 || v31 == v10 || v31 == v12 || v31 == v14 || v31 == v16 || v31 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v32 = xpc_double_get_value(v30);
  *(double *)v72.i64 = value;
  *(double *)&v72.i64[1] = v24;
  v73 = v28;
  v74 = v32;
  v33 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_111;
    }
    v33 = *a1;
  }
  if (xpc_array_get_count(v33) <= 4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_111:
    abort();
  }
  sub_224564350(a1, 4uLL, &v62);
  v34 = sub_224565390(&v62);
  v35 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_112;
    }
    v35 = *a1;
  }
  if (xpc_array_get_count(v35) <= 5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_112:
    abort();
  }
  sub_224564350(a1, 5uLL, &v60);
  v36 = sub_224565390(&v60);
  sub_2233B3EE4((uint64_t)&v75, (uint64_t *)&v72);
  v58 = v76;
  v59 = v77;
  v37 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v63;
  if (v63)
  {
    v41 = (unint64_t *)&v63->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v65;
  if (v65)
  {
    v44 = (unint64_t *)&v65->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v67;
  if (v67)
  {
    v47 = (unint64_t *)&v67->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v69;
  if (v69)
  {
    v50 = (unint64_t *)&v69->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v71;
  if (v71)
  {
    v53 = (unint64_t *)&v71->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v72 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), v59);
  sub_223207E58(&v75, (int *)&v72);
  v55 = v77;
  *(float64x2_t *)(a2 + 16) = v76;
  *(float64x2_t *)(a2 + 32) = v55;
  result = *(double *)&v78;
  v57 = v79;
  *(_OWORD *)(a2 + 48) = v78;
  *(_OWORD *)(a2 + 64) = v57;
  *(_DWORD *)(a2 + 80) = v80;
  *(_QWORD *)(a2 + 88) = v34 | ((unint64_t)v36 << 32);
  *(_QWORD *)a2 = &off_24EC207B8;
  *(_QWORD *)(a2 + 8) = &off_24EC20868;
  return result;
}

void sub_223457AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  va_list va3;
  uint64_t v19;
  va_list va4;

  va_start(va4, a7);
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v17 = va_arg(va4, _QWORD);
  v19 = va_arg(va4, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va3);
  sub_223167354((uint64_t)va4);
  _Unwind_Resume(a1);
}

void sub_223457B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223457B68@<X0>(float *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  __int128 v5;
  std::__shared_weak_count_vtbl *v6;
  __int128 v7;
  std::__shared_weak_count_vtbl *v8;
  __int128 v9;
  std::__shared_weak_count_vtbl *v10;
  __int128 v11;
  std::__shared_weak_count_vtbl *v12;
  __int128 v13;
  std::__shared_weak_count_vtbl *v14;
  __int128 v15;
  void *v16;
  std::__shared_weak_count_vtbl *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = (std::__shared_weak_count_vtbl *)xpc_double_create(*a1);
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v4, 0);
  v5 = v25[0];
  v25[0] = 0uLL;
  v19 = v5;
  v6 = (std::__shared_weak_count_vtbl *)xpc_double_create(a1[1]);
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v6, 0);
  v7 = v25[0];
  v25[0] = 0uLL;
  v20 = v7;
  v8 = (std::__shared_weak_count_vtbl *)xpc_double_create(a1[2]);
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v8, 0);
  v9 = v25[0];
  v25[0] = 0uLL;
  v21 = v9;
  v10 = (std::__shared_weak_count_vtbl *)xpc_double_create(a1[3]);
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v10, 0);
  v11 = v25[0];
  v25[0] = 0uLL;
  v22 = v11;
  v12 = (std::__shared_weak_count_vtbl *)xpc_double_create(a1[4]);
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v12, 0);
  v13 = v25[0];
  v25[0] = 0uLL;
  v23 = v13;
  v14 = (std::__shared_weak_count_vtbl *)xpc_double_create(a1[5]);
  sub_22340E890((std::__shared_weak_count_vtbl **)v25, v14, 0);
  v15 = v25[0];
  v25[0] = 0uLL;
  v24 = v15;
  sub_22345A16C((uint64_t)v25, (uint64_t *)&v19);
  v16 = *(void **)&v25[0];
  v17 = (std::__shared_weak_count_vtbl *)xpc_array_create(*(xpc_object_t **)&v25[0], (uint64_t)(*((_QWORD *)&v25[0] + 1) - *(_QWORD *)&v25[0]) >> 3);
  sub_22456428C(a2, v17, 0);
  if (v16)
    operator delete(v16);
  return sub_2231F4908(&v19);
}

void sub_223457F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231F4908(&a9);
  _Unwind_Resume(a1);
}

void sub_223457FC8(xpc_object_t *a1@<X0>, float *a2@<X8>)
{
  xpc_object_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  double value;
  xpc_object_t v21;
  void *v22;
  uint64_t v23;
  double v24;
  xpc_object_t v25;
  void *v26;
  uint64_t v27;
  double v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  xpc_object_t v38;
  void *v39;
  uint64_t v40;
  double v41;
  xpc_object_t v42;
  void *v43;
  uint64_t v44;
  double v45;
  xpc_object_t v46;
  void *v47;
  uint64_t v48;
  double v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  std::__shared_weak_count *v61;
  float v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  void *v67;
  std::__shared_weak_count *v68;
  void *v69;
  std::__shared_weak_count *v70;

  v4 = *a1;
  if (v4)
  {
    if (xpc_array_get_count(v4))
      goto LABEL_7;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_133;
    }
    if (xpc_array_get_count(*a1))
      goto LABEL_7;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_133;
  }
LABEL_7:
  sub_224564350(a1, 0, &v69);
  v5 = v69;
  v6 = MEMORY[0x2276858AC](v69);
  v7 = MEMORY[0x24BDACFA8];
  v8 = MEMORY[0x24BDACFA0];
  v9 = v6 != MEMORY[0x24BDACFA8] || MEMORY[0x24BDACFA0] == MEMORY[0x24BDACFA8];
  v10 = MEMORY[0x24BDACF98];
  v11 = v9 || v6 == MEMORY[0x24BDACF98];
  v12 = MEMORY[0x24BDACF90];
  v13 = v11 || v6 == MEMORY[0x24BDACF90];
  v14 = MEMORY[0x24BDACF88];
  v15 = v13 || v6 == MEMORY[0x24BDACF88];
  v16 = MEMORY[0x24BDACF78];
  v17 = v15 || v6 == MEMORY[0x24BDACF78];
  v18 = MEMORY[0x24BDACF80];
  v19 = v17 || v6 == MEMORY[0x24BDACF80];
  if (v19
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  value = xpc_double_get_value(v5);
  v21 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_134;
    }
    v21 = *a1;
  }
  if (xpc_array_get_count(v21) <= 1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_134:
    abort();
  }
  sub_224564350(a1, 1uLL, &v67);
  v22 = v67;
  v23 = MEMORY[0x2276858AC](v67);
  if ((v23 != v7 || v8 == v7 || v23 == v10 || v23 == v12 || v23 == v14 || v23 == v16 || v23 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v24 = xpc_double_get_value(v22);
  v25 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_135;
    }
    v25 = *a1;
  }
  if (xpc_array_get_count(v25) <= 2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_135:
    abort();
  }
  sub_224564350(a1, 2uLL, &v65);
  v26 = v65;
  v27 = MEMORY[0x2276858AC](v65);
  if ((v27 != v7 || v8 == v7 || v27 == v10 || v27 == v12 || v27 == v14 || v27 == v16 || v27 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v28 = xpc_double_get_value(v26);
  v29 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v68;
  if (!v68)
    goto LABEL_63;
  v33 = (unint64_t *)&v68->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = v70;
    if (!v70)
      goto LABEL_67;
  }
  else
  {
LABEL_63:
    v35 = v70;
    if (!v70)
      goto LABEL_67;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (v37)
  {
LABEL_67:
    v38 = *a1;
    if (*a1)
      goto LABEL_68;
LABEL_73:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_133;
    }
    if (xpc_array_get_count(*a1) > 3)
      goto LABEL_76;
LABEL_75:
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))goto LABEL_76;
LABEL_133:
    abort();
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  v38 = *a1;
  if (!*a1)
    goto LABEL_73;
LABEL_68:
  if (xpc_array_get_count(v38) <= 3)
    goto LABEL_75;
LABEL_76:
  sub_224564350(a1, 3uLL, &v69);
  v39 = v69;
  v40 = MEMORY[0x2276858AC](v69);
  if ((v40 != v7 || v8 == v7 || v40 == v10 || v40 == v12 || v40 == v14 || v40 == v16 || v40 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v41 = xpc_double_get_value(v39);
  v42 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_136;
    }
    v42 = *a1;
  }
  if (xpc_array_get_count(v42) <= 4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_136:
    abort();
  }
  sub_224564350(a1, 4uLL, &v67);
  v43 = v67;
  v44 = MEMORY[0x2276858AC](v67);
  if ((v44 != v7 || v8 == v7 || v44 == v10 || v44 == v12 || v44 == v14 || v44 == v16 || v44 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v45 = xpc_double_get_value(v43);
  v46 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_137;
    }
    v46 = *a1;
  }
  if (xpc_array_get_count(v46) <= 5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_137:
    abort();
  }
  sub_224564350(a1, 5uLL, &v65);
  v47 = v65;
  v48 = MEMORY[0x2276858AC](v65);
  if ((v48 != v7 || v8 == v7 || v48 == v10 || v48 == v12 || v48 == v14 || v48 == v16 || v48 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v49 = xpc_double_get_value(v47);
  v50 = v66;
  if (v66)
  {
    v51 = (unint64_t *)&v66->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v68;
  if (v68)
  {
    v54 = (unint64_t *)&v68->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = value;
  v57 = v24;
  v58 = v28;
  v59 = v41;
  v60 = v45;
  v61 = v70;
  v62 = v49;
  if (!v70)
    goto LABEL_124;
  v63 = (unint64_t *)&v70->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    *a2 = v56;
    a2[1] = v57;
    a2[2] = v58;
    a2[3] = v59;
    a2[4] = v60;
    a2[5] = v62;
    if (v56 > v59)
    {
LABEL_125:
      *a2 = v59;
      a2[3] = v56;
      if (v57 <= v60)
        goto LABEL_126;
      goto LABEL_131;
    }
  }
  else
  {
LABEL_124:
    *a2 = v56;
    a2[1] = v57;
    a2[2] = v58;
    a2[3] = v59;
    a2[4] = v60;
    a2[5] = v62;
    if (v56 > v59)
      goto LABEL_125;
  }
  if (v57 <= v60)
  {
LABEL_126:
    if (v58 <= v62)
      return;
    goto LABEL_127;
  }
LABEL_131:
  a2[1] = v60;
  a2[4] = v57;
  if (v58 > v62)
  {
LABEL_127:
    a2[2] = v62;
    a2[5] = v58;
  }
}

void sub_223458914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223458958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223458970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223458984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2234589A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2234589B4@<X0>(float *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  std::__shared_weak_count_vtbl *v8;
  __int128 v9;
  std::__shared_weak_count_vtbl *v10;
  __int128 v11;
  std::__shared_weak_count_vtbl *v12;
  __int128 v13;
  std::__shared_weak_count_vtbl *v14;
  __int128 v15;
  std::__shared_weak_count_vtbl *v16;
  __int128 v17;
  std::__shared_weak_count_vtbl *v18;
  __int128 v19;
  void *v20;
  std::__shared_weak_count_vtbl *v21;
  _OWORD v23[6];
  _OWORD v24[2];

  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v7 = a1[4];
  v6 = a1[5];
  v8 = (std::__shared_weak_count_vtbl *)xpc_double_create(*a1);
  sub_22340E890((std::__shared_weak_count_vtbl **)v24, v8, 0);
  v9 = v24[0];
  v24[0] = 0uLL;
  v23[0] = v9;
  v10 = (std::__shared_weak_count_vtbl *)xpc_double_create(v3);
  sub_22340E890((std::__shared_weak_count_vtbl **)v24, v10, 0);
  v11 = v24[0];
  v24[0] = 0uLL;
  v23[1] = v11;
  v12 = (std::__shared_weak_count_vtbl *)xpc_double_create(v5);
  sub_22340E890((std::__shared_weak_count_vtbl **)v24, v12, 0);
  v13 = v24[0];
  v24[0] = 0uLL;
  v23[2] = v13;
  v14 = (std::__shared_weak_count_vtbl *)xpc_double_create(v4);
  sub_22340E890((std::__shared_weak_count_vtbl **)v24, v14, 0);
  v15 = v24[0];
  v24[0] = 0uLL;
  v23[3] = v15;
  v16 = (std::__shared_weak_count_vtbl *)xpc_double_create(v7);
  sub_22340E890((std::__shared_weak_count_vtbl **)v24, v16, 0);
  v17 = v24[0];
  v24[0] = 0uLL;
  v23[4] = v17;
  v18 = (std::__shared_weak_count_vtbl *)xpc_double_create(v6);
  sub_22340E890((std::__shared_weak_count_vtbl **)v24, v18, 0);
  v19 = v24[0];
  v24[0] = 0uLL;
  v23[5] = v19;
  sub_22345A16C((uint64_t)v24, (uint64_t *)v23);
  v20 = *(void **)&v24[0];
  v21 = (std::__shared_weak_count_vtbl *)xpc_array_create(*(xpc_object_t **)&v24[0], (uint64_t)(*((_QWORD *)&v24[0] + 1) - *(_QWORD *)&v24[0]) >> 3);
  sub_22456428C(a2, v21, 0);
  if (v20)
    operator delete(v20);
  return sub_2231F4908(v23);
}

void sub_223458DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231F4908(&a9);
  _Unwind_Resume(a1);
}

float sub_223458E14@<S0>(xpc_object_t *a1@<X0>, float *a2@<X8>)
{
  xpc_object_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  double value;
  xpc_object_t v21;
  void *v22;
  uint64_t v23;
  double v24;
  xpc_object_t v25;
  void *v26;
  uint64_t v27;
  double v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  xpc_object_t v38;
  void *v39;
  uint64_t v40;
  double v41;
  xpc_object_t v42;
  void *v43;
  uint64_t v44;
  double v45;
  xpc_object_t v46;
  void *v47;
  uint64_t v48;
  double v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  float result;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  void *v65;
  std::__shared_weak_count *v66;
  void *v67;
  std::__shared_weak_count *v68;
  void *v69;
  std::__shared_weak_count *v70;

  v4 = *a1;
  if (v4)
  {
    if (xpc_array_get_count(v4))
      goto LABEL_7;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_126;
    }
    if (xpc_array_get_count(*a1))
      goto LABEL_7;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_126;
  }
LABEL_7:
  sub_224564350(a1, 0, &v69);
  v5 = v69;
  v6 = MEMORY[0x2276858AC](v69);
  v7 = MEMORY[0x24BDACFA8];
  v8 = MEMORY[0x24BDACFA0];
  v9 = v6 != MEMORY[0x24BDACFA8] || MEMORY[0x24BDACFA0] == MEMORY[0x24BDACFA8];
  v10 = MEMORY[0x24BDACF98];
  v11 = v9 || v6 == MEMORY[0x24BDACF98];
  v12 = MEMORY[0x24BDACF90];
  v13 = v11 || v6 == MEMORY[0x24BDACF90];
  v14 = MEMORY[0x24BDACF88];
  v15 = v13 || v6 == MEMORY[0x24BDACF88];
  v16 = MEMORY[0x24BDACF78];
  v17 = v15 || v6 == MEMORY[0x24BDACF78];
  v18 = MEMORY[0x24BDACF80];
  v19 = v17 || v6 == MEMORY[0x24BDACF80];
  if (v19
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  value = xpc_double_get_value(v5);
  v21 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_127;
    }
    v21 = *a1;
  }
  if (xpc_array_get_count(v21) <= 1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_127:
    abort();
  }
  sub_224564350(a1, 1uLL, &v67);
  v22 = v67;
  v23 = MEMORY[0x2276858AC](v67);
  if ((v23 != v7 || v8 == v7 || v23 == v10 || v23 == v12 || v23 == v14 || v23 == v16 || v23 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v24 = xpc_double_get_value(v22);
  v25 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_128;
    }
    v25 = *a1;
  }
  if (xpc_array_get_count(v25) <= 2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_128:
    abort();
  }
  sub_224564350(a1, 2uLL, &v65);
  v26 = v65;
  v27 = MEMORY[0x2276858AC](v65);
  if ((v27 != v7 || v8 == v7 || v27 == v10 || v27 == v12 || v27 == v14 || v27 == v16 || v27 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v28 = xpc_double_get_value(v26);
  v29 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v68;
  if (!v68)
    goto LABEL_63;
  v33 = (unint64_t *)&v68->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = v70;
    if (!v70)
      goto LABEL_67;
  }
  else
  {
LABEL_63:
    v35 = v70;
    if (!v70)
      goto LABEL_67;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (v37)
  {
LABEL_67:
    v38 = *a1;
    if (*a1)
      goto LABEL_68;
LABEL_73:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_126;
    }
    if (xpc_array_get_count(*a1) > 3)
      goto LABEL_76;
LABEL_75:
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))goto LABEL_76;
LABEL_126:
    abort();
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  v38 = *a1;
  if (!*a1)
    goto LABEL_73;
LABEL_68:
  if (xpc_array_get_count(v38) <= 3)
    goto LABEL_75;
LABEL_76:
  sub_224564350(a1, 3uLL, &v69);
  v39 = v69;
  v40 = MEMORY[0x2276858AC](v69);
  if ((v40 != v7 || v8 == v7 || v40 == v10 || v40 == v12 || v40 == v14 || v40 == v16 || v40 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v41 = xpc_double_get_value(v39);
  v42 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_129;
    }
    v42 = *a1;
  }
  if (xpc_array_get_count(v42) <= 4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_129:
    abort();
  }
  sub_224564350(a1, 4uLL, &v67);
  v43 = v67;
  v44 = MEMORY[0x2276858AC](v67);
  if ((v44 != v7 || v8 == v7 || v44 == v10 || v44 == v12 || v44 == v14 || v44 == v16 || v44 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v45 = xpc_double_get_value(v43);
  v46 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_130;
    }
    v46 = *a1;
  }
  if (xpc_array_get_count(v46) <= 5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 54, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_130:
    abort();
  }
  sub_224564350(a1, 5uLL, &v65);
  v47 = v65;
  v48 = MEMORY[0x2276858AC](v65);
  if ((v48 != v7 || v8 == v7 || v48 == v10 || v48 == v12 || v48 == v14 || v48 == v16 || v48 == v18)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 130, (uint64_t)"IsOfType(Type::Double)", 22, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v49 = xpc_double_get_value(v47);
  v50 = v66;
  if (v66)
  {
    v51 = (unint64_t *)&v66->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v68;
  if (v68)
  {
    v54 = (unint64_t *)&v68->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v70;
  if (v70)
  {
    v57 = (unint64_t *)&v70->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  result = v49;
  v60 = v45;
  v61 = v41;
  v62 = v24;
  v63 = value;
  *a2 = v63;
  a2[1] = v62;
  v64 = v28;
  a2[2] = v64;
  a2[3] = v61;
  a2[4] = v60;
  a2[5] = result;
  return result;
}

void sub_223459700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223459744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22345975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223459770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22345978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2234597A0(const unsigned __int8 **a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count_vtbl *empty;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  xpc_object_t value;
  std::__shared_weak_count *v13;

  empty = (std::__shared_weak_count_vtbl *)xpc_array_create_empty();
  sub_224564184(a2, empty, 0);
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      v7 = (std::__shared_weak_count_vtbl *)xpc_uuid_create(v5);
      sub_22340E890((std::__shared_weak_count_vtbl **)&value, v7, 0);
      v8 = *a2;
      if (!*a2)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 84, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v8 = *a2;
      }
      xpc_array_append_value(v8, value);
      v9 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
}

void sub_2234598C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_223167354((uint64_t)&a9);
  sub_223167354(v9);
  _Unwind_Resume(a1);
}

void sub_2234598E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

double sub_2234598F8@<D0>(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t v4;
  size_t count;
  size_t v6;
  xpc_object_t v7;
  xpc_object_t *v8;
  xpc_object_t v9;
  size_t v10;
  double result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  size_t v23;
  void **v24;
  uint64_t v25;
  size_t v26;
  xpc_object_t v27;
  std::__shared_weak_count *v28;
  char **v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if (!v4)
    goto LABEL_13;
  if (xpc_array_get_count(v4))
  {
    if (!*a1)
      goto LABEL_13;
    xpc_array_get_count(*a1);
  }
  if (!*a1 || !xpc_array_get_count(*a1) || !*a1)
  {
LABEL_13:
    v22 = 0uLL;
    v23 = 0;
    v24 = a1;
    v25 = 0;
    v26 = 0;
    v7 = *a1;
    if (!*a1)
      goto LABEL_18;
    goto LABEL_14;
  }
  count = xpc_array_get_count(*a1);
  v23 = 0;
  v22 = 0uLL;
  if (count)
  {
    v6 = count;
    if (count >> 60)
      sub_22316E078();
    *(_QWORD *)&v22 = operator new(16 * count);
    *((_QWORD *)&v22 + 1) = v22;
    v23 = v22 + 16 * v6;
  }
  v25 = 0;
  v26 = 0;
  v24 = a1;
  v7 = *a1;
  if (!*a1)
  {
LABEL_18:
    v10 = 0;
    v29 = (char **)&v22;
    if (!a1)
      goto LABEL_32;
    goto LABEL_26;
  }
LABEL_14:
  if (xpc_array_get_count(v7))
  {
    if (!*a1)
      goto LABEL_18;
    v26 = xpc_array_get_count(*a1);
    v8 = a1;
    v9 = *a1;
    if (!*a1)
    {
LABEL_25:
      v10 = 0;
      v29 = (char **)&v22;
      if (!v8)
      {
        do
        {
LABEL_32:
          sub_224564620(&v24, &v27);
          *(_QWORD *)&v30 = sub_22456549C(&v27);
          *((_QWORD *)&v30 + 1) = v14;
          sub_2232E9564(&v29, &v30);
          v15 = v28;
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v12 = ++v25;
          if (v24)
            v13 = v12 == v10;
          else
            v13 = 0;
        }
        while (!v13);
        goto LABEL_27;
      }
LABEL_26:
      if (!v10)
        goto LABEL_27;
      goto LABEL_32;
    }
  }
  else
  {
    v8 = 0;
    v24 = 0;
    v9 = *a1;
    if (!*a1)
      goto LABEL_25;
  }
  if (xpc_array_get_count(v9))
  {
    if (*a1)
    {
      v10 = xpc_array_get_count(*a1);
      v29 = (char **)&v22;
      if (!v8)
        goto LABEL_32;
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v29 = (char **)&v22;
  if (v8)
  {
    do
    {
      sub_224564620(&v24, &v27);
      *(_QWORD *)&v30 = sub_22456549C(&v27);
      *((_QWORD *)&v30 + 1) = v18;
      sub_2232E9564(&v29, &v30);
      v19 = v28;
      if (v28)
      {
        v20 = (unint64_t *)&v28->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      ++v25;
    }
    while (v24);
  }
LABEL_27:
  result = *(double *)&v22;
  *(_OWORD *)a2 = v22;
  *(_QWORD *)(a2 + 16) = v23;
  return result;
}

void sub_223459B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223459BF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;

  v2 = (std::__shared_weak_count *)a1[31];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[29];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[29];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[27];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[25];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[25];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[23];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)a1[21];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)a1[21];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)a1[19];
  if (!v20)
    goto LABEL_35;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)a1[17];
    if (!v23)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    v23 = (std::__shared_weak_count *)a1[17];
    if (!v23)
      goto LABEL_41;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_41:
  v26 = (std::__shared_weak_count *)a1[15];
  if (!v26)
    goto LABEL_45;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = (std::__shared_weak_count *)a1[13];
    if (!v29)
      goto LABEL_51;
  }
  else
  {
LABEL_45:
    v29 = (std::__shared_weak_count *)a1[13];
    if (!v29)
      goto LABEL_51;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_51:
  v32 = (std::__shared_weak_count *)a1[11];
  if (!v32)
    goto LABEL_55;
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = (std::__shared_weak_count *)a1[9];
    if (!v35)
      goto LABEL_61;
  }
  else
  {
LABEL_55:
    v35 = (std::__shared_weak_count *)a1[9];
    if (!v35)
      goto LABEL_61;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_61:
  v38 = (std::__shared_weak_count *)a1[7];
  if (!v38)
    goto LABEL_65;
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v41 = (std::__shared_weak_count *)a1[5];
    if (!v41)
      goto LABEL_71;
  }
  else
  {
LABEL_65:
    v41 = (std::__shared_weak_count *)a1[5];
    if (!v41)
      goto LABEL_71;
  }
  v42 = (unint64_t *)&v41->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_71:
  v44 = (std::__shared_weak_count *)a1[3];
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v47 = (std::__shared_weak_count *)a1[1];
      if (v47)
        goto LABEL_76;
      return a1;
    }
  }
  v47 = (std::__shared_weak_count *)a1[1];
  if (!v47)
    return a1;
LABEL_76:
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
    return a1;
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  return a1;
}

void **sub_22345A000(uint64_t *a1, void ***a2)
{
  void **v3;
  uint64_t v5;
  void **v6;

  v3 = *a2;
  v5 = *a1;
  v6 = v3;
  sub_2232EA538(&v6, &v5);
  v5 = a1[2];
  sub_2232EA538(&v6, &v5);
  v5 = a1[4];
  sub_2232EA538(&v6, &v5);
  v5 = a1[6];
  sub_2232EA538(&v6, &v5);
  v5 = a1[8];
  sub_2232EA538(&v6, &v5);
  v5 = a1[10];
  sub_2232EA538(&v6, &v5);
  v5 = a1[12];
  sub_2232EA538(&v6, &v5);
  v5 = a1[14];
  sub_2232EA538(&v6, &v5);
  v5 = a1[16];
  sub_2232EA538(&v6, &v5);
  v5 = a1[18];
  sub_2232EA538(&v6, &v5);
  v5 = a1[20];
  sub_2232EA538(&v6, &v5);
  v5 = a1[22];
  sub_2232EA538(&v6, &v5);
  v5 = a1[24];
  sub_2232EA538(&v6, &v5);
  v5 = a1[26];
  sub_2232EA538(&v6, &v5);
  v5 = a1[28];
  sub_2232EA538(&v6, &v5);
  v5 = a1[30];
  sub_2232EA538(&v6, &v5);
  return v6;
}

double sub_22345A16C(uint64_t a1, uint64_t *a2)
{
  double result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)&v5 = operator new(0x30uLL);
  *((_QWORD *)&v5 + 1) = v5;
  v6 = v5 + 48;
  v8 = (void **)&v5;
  v7 = *a2;
  sub_2232EA538(&v8, &v7);
  v7 = a2[2];
  sub_2232EA538(&v8, &v7);
  v7 = a2[4];
  sub_2232EA538(&v8, &v7);
  v7 = a2[6];
  sub_2232EA538(&v8, &v7);
  v7 = a2[8];
  sub_2232EA538(&v8, &v7);
  v7 = a2[10];
  sub_2232EA538(&v8, &v7);
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

void sub_22345A238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22345A254(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC372E8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22345A2C8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC372E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22345A33C@<X0>(void ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  _WORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _WORD *v79;
  int *v80;
  int v81;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  int16x4_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v107;
  uint64_t *v108;
  void *__p;
  void *v110;
  char *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  _QWORD v117[5];
  _QWORD v118[4];
  uint64_t v119;
  uint64_t (*v120)(uint64_t);
  uint64_t v121;
  uint64_t (*v122)(uint64_t);
  uint64_t v123;
  uint64_t (*v124)(uint64_t);
  uint64_t v125;
  uint64_t (*v126)(uint64_t);
  uint64_t v127;
  uint64_t (*v128)(uint64_t);
  uint64_t v129;
  uint64_t (*v130)(uint64_t);
  uint64_t v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  _WORD *v134;
  unsigned int v135;
  unsigned int v136;
  char v137;
  char v138;
  __int128 v139;
  std::__shared_weak_count *v140;
  int *v141;
  int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  char v146;
  char v147;
  __int128 v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  memset(v117, 0, 24);
  v117[3] = 0x200000001;
  v117[4] = 0x412000003C23D70ALL;
  sub_2232291A8(v118);
  v119 = 0;
  v120 = sub_223CDB7D4;
  v121 = 0;
  v122 = sub_223CDB800;
  v123 = 0;
  v124 = sub_223CDB82C;
  v125 = 0;
  v126 = sub_223CDB858;
  v127 = 0;
  v128 = sub_223CDB884;
  v118[2] = 0;
  v118[3] = 0;
  v129 = 0;
  v130 = sub_223CDB8B0;
  ++a1;
  v116 = *(_QWORD *)(a3 + 152);
  nullsub_30(a1);
  sub_223226DFC(&v114, a1, v8, v9, v10, v11);
  v112 = v114;
  v113 = v115;
  if (v115)
  {
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_223CDB450((uint64_t)v117, (unsigned int *)&v116, &v112);
  v107 = a3;
  v14 = v113;
  if (!v113)
    goto LABEL_8;
  v15 = (unint64_t *)&v113->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v108 = a4;
    __p = 0;
    v110 = 0;
    v111 = 0;
    v17 = *(uint64_t **)(a2 + 24);
    v18 = *(uint64_t **)(a2 + 32);
    if (v17 == v18)
      goto LABEL_27;
  }
  else
  {
LABEL_8:
    v108 = a4;
    __p = 0;
    v110 = 0;
    v111 = 0;
    v17 = *(uint64_t **)(a2 + 24);
    v18 = *(uint64_t **)(a2 + 32);
    if (v17 == v18)
      goto LABEL_27;
  }
  v19 = 0;
  do
  {
    while (1)
    {
      v20 = *v17;
      v139 = 0uLL;
      v132 = 0uLL;
      v148 = 0uLL;
      if (v19 >= v111)
        break;
      *(_QWORD *)v19 = v20;
      *((_DWORD *)v19 + 2) = 1065353216;
      *(_OWORD *)(v19 + 12) = v139;
      *((_DWORD *)v19 + 7) = 1065353216;
      *((_OWORD *)v19 + 2) = v132;
      *((_DWORD *)v19 + 12) = 1065353216;
      *(_OWORD *)(v19 + 52) = v148;
      *((_DWORD *)v19 + 17) = 1065353216;
      v110 = v19 + 72;
      v17 += 2;
      v19 += 72;
      if (v17 == v18)
        goto LABEL_27;
    }
    v21 = (char *)__p;
    v22 = 0x8E38E38E38E38E39 * ((v19 - (_BYTE *)__p) >> 3);
    v23 = v22 + 1;
    if (v22 + 1 > 0x38E38E38E38E38ELL)
      sub_22316E078();
    if (0x1C71C71C71C71C72 * ((v111 - (_BYTE *)__p) >> 3) > v23)
      v23 = 0x1C71C71C71C71C72 * ((v111 - (_BYTE *)__p) >> 3);
    if (0x8E38E38E38E38E39 * ((v111 - (_BYTE *)__p) >> 3) >= 0x1C71C71C71C71C7)
      v24 = 0x38E38E38E38E38ELL;
    else
      v24 = v23;
    if (v24 > 0x38E38E38E38E38ELL)
      sub_223174E94();
    v25 = (char *)operator new(72 * v24);
    v26 = &v25[8 * ((v19 - (_BYTE *)__p) >> 3)];
    *(_QWORD *)v26 = v20;
    *((_DWORD *)v26 + 2) = 1065353216;
    *(_QWORD *)(v26 + 20) = 0;
    *(_QWORD *)(v26 + 12) = 0;
    *((_DWORD *)v26 + 7) = 1065353216;
    *((_QWORD *)v26 + 4) = 0;
    *((_QWORD *)v26 + 5) = 0;
    *((_DWORD *)v26 + 12) = 1065353216;
    *(_QWORD *)(v26 + 60) = 0;
    *(_QWORD *)(v26 + 52) = 0;
    *((_DWORD *)v26 + 17) = 1065353216;
    v27 = &v25[72 * v22];
    if (v19 != v21)
    {
      do
      {
        v28 = *((_QWORD *)v19 - 9);
        v19 -= 72;
        *((_QWORD *)v27 - 9) = v28;
        v27 -= 72;
        v29 = *(_OWORD *)(v19 + 8);
        v30 = *(_OWORD *)(v19 + 24);
        v31 = *(_OWORD *)(v19 + 40);
        *(_OWORD *)(v27 + 56) = *(_OWORD *)(v19 + 56);
        *(_OWORD *)(v27 + 40) = v31;
        *(_OWORD *)(v27 + 24) = v30;
        *(_OWORD *)(v27 + 8) = v29;
      }
      while (v19 != v21);
      v19 = v21;
    }
    v32 = v26 + 72;
    __p = v27;
    v110 = v26 + 72;
    v111 = &v25[72 * v24];
    if (v19)
      operator delete(v19);
    v110 = v32;
    v17 += 2;
    v19 = v32;
  }
  while (v17 != v18);
LABEL_27:
  v33 = *(_BYTE *)(v107 + 160);
  sub_223CDAB6C((uint64_t)v117);
  sub_223CDB8DC(v119, (uint64_t *)&__p, (float32x4_t *)v107, (float32x2_t *)(v107 + 64), 1u, v33, &v139);
  v34 = operator new(0x240uLL);
  v34[1] = 0;
  v34[2] = 0;
  *v34 = &off_24EC20F48;
  v35 = sub_2231CBABC(v34 + 3, v107 + 64, 63);
  *v108 = v35;
  v108[1] = (uint64_t)v34;
  sub_2231CC34C(v35, (uint64_t)&v132);
  v36 = *((_QWORD *)&v139 + 1);
  if (!*((_QWORD *)&v139 + 1))
    goto LABEL_44;
  v37 = v140;
  if (!v140)
    goto LABEL_40;
  v38 = (unint64_t *)&v140->__shared_owners_;
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  do
    v40 = __ldaxr(v38);
  while (__stlxr(v40 - 1, v38));
  if (v40)
  {
    v36 = *((_QWORD *)&v139 + 1);
    v41 = v140;
    if (!v140)
      goto LABEL_40;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    v36 = *((_QWORD *)&v139 + 1);
    v41 = v140;
    if (!v140)
      goto LABEL_40;
  }
  v42 = (unint64_t *)&v41->__shared_owners_;
  do
    v43 = __ldxr(v42);
  while (__stxr(v43 + 1, v42));
  do
    v44 = __ldaxr(v42);
  while (__stlxr(v44 - 1, v42));
  if (v44)
  {
LABEL_40:
    if (v147)
      goto LABEL_41;
LABEL_44:
    *(_QWORD *)&v148 = 0;
    v45 = *((_QWORD *)&v132 + 1);
    if (!*((_QWORD *)&v132 + 1))
      goto LABEL_61;
LABEL_45:
    v46 = v133;
    if (!v133)
      goto LABEL_57;
    v47 = (unint64_t *)&v133->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    do
      v49 = __ldaxr(v47);
    while (__stlxr(v49 - 1, v47));
    if (v49)
    {
      v45 = *((_QWORD *)&v132 + 1);
      v50 = v133;
      if (!v133)
        goto LABEL_57;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v45 = *((_QWORD *)&v132 + 1);
      v50 = v133;
      if (!v133)
        goto LABEL_57;
    }
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    do
      v53 = __ldaxr(v51);
    while (__stlxr(v53 - 1, v51));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
      if (!v138)
        goto LABEL_61;
LABEL_58:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v45 + 96))(&v131, v45, 1);
      v54 = v142;
      if (!v142)
        goto LABEL_92;
      goto LABEL_62;
    }
LABEL_57:
    if (!v138)
      goto LABEL_61;
    goto LABEL_58;
  }
  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
  std::__shared_weak_count::__release_weak(v41);
  if (!v147)
    goto LABEL_44;
LABEL_41:
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v36 + 96))(&v148, v36, 0);
  v45 = *((_QWORD *)&v132 + 1);
  if (*((_QWORD *)&v132 + 1))
    goto LABEL_45;
LABEL_61:
  v131 = 0;
  v54 = v142;
  if (!v142)
    goto LABEL_92;
LABEL_62:
  v55 = v143;
  if (v143)
  {
    v57 = v144;
    v56 = v145;
    v59 = v135;
    v58 = v136;
    v60 = v141;
    if (v146 && v141)
    {
      v61 = *((_QWORD *)&v139 + 1);
      v62 = v140;
      if (v140)
      {
        v63 = (unint64_t *)&v140->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
        do
          v65 = __ldaxr(v63);
        while (__stlxr(v65 - 1, v63));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v61 + 88))(v61, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v60 = v141;
    }
    v66 = v134;
    if (v137 && v134)
    {
      v67 = *((_QWORD *)&v132 + 1);
      v68 = v133;
      if (v133)
      {
        v69 = (unint64_t *)&v133->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
        do
          v71 = __ldaxr(v69);
        while (__stlxr(v71 - 1, v69));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v67 + 88))(v67, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v66 = v134;
    }
    v72 = v54 - 1;
    v73 = 4 * v57;
    v74 = 2 * v59;
    v75 = v55 - 1;
    if (v55 != 1)
    {
      v76 = 4 * v56;
      v77 = 2 * v58;
      if (v54 == 1)
      {
        do
        {
          _S0 = *v60;
          __asm { FCVT            H0, S0 }
          *v66 = _S0;
          v60 = (int *)((char *)v60 + v76);
          v66 = (_WORD *)((char *)v66 + v77);
          --v75;
        }
        while (v75);
      }
      else
      {
        v78 = 0;
        do
        {
          v79 = v66;
          v80 = v60;
          v81 = v54 - 1;
          do
          {
            _S0 = *v80;
            __asm { FCVT            H0, S0 }
            *v79 = _S0;
            v80 = (int *)((char *)v80 + v73);
            v79 = (_WORD *)((char *)v79 + v74);
            --v81;
          }
          while (v81);
          _S0 = *v80;
          __asm { FCVT            H0, S0 }
          *v79 = _S0;
          v60 = (int *)((char *)v60 + v76);
          v66 = (_WORD *)((char *)v66 + v77);
          ++v78;
        }
        while (v78 != v75);
      }
    }
    if (v54 != 1)
    {
      do
      {
        _S0 = *v60;
        __asm { FCVT            H0, S0 }
        *v66 = _S0;
        v60 = (int *)((char *)v60 + v73);
        v66 = (_WORD *)((char *)v66 + v74);
        --v72;
      }
      while (v72);
    }
    _S0 = *v60;
    __asm { FCVT            H0, S0 }
    *v66 = _S0;
  }
LABEL_92:
  v91 = v131;
  v131 = 0;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  v92 = v148;
  *(_QWORD *)&v148 = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = v133;
  if (v133)
  {
    v94 = (unint64_t *)&v133->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  sub_2231CC3F0(*v108, (uint64_t)&v132);
  LODWORD(v148) = 1065353216;
  sub_22320BDC8((uint64_t)&v132, (int *)&v148, v96);
  v97 = v133;
  if (v133)
  {
    v98 = (unint64_t *)&v133->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v140;
  if (v140)
  {
    v101 = (unint64_t *)&v140->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (__p)
  {
    v110 = __p;
    operator delete(__p);
  }
  v103 = v115;
  if (v115)
  {
    v104 = (unint64_t *)&v115->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  return sub_223CDB2E8((uint64_t)v117);
}

void sub_22345ABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v22;

  v22 = *(_QWORD *)(v20 - 112);
  *(_QWORD *)(v20 - 112) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  sub_2231BD974(v20 - 224);
  sub_223167354(a10);
  sub_2231BD9DC(v20 - 168);
  if (__p)
    operator delete(__p);
  sub_223167354((uint64_t)&a16);
  sub_223CDB2E8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_22345ACF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  _QWORD v81[3];
  int v82;
  const char *v83;
  int v84;
  const char *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  void *object;
  void *v90[2];
  __int128 v91;
  void *__p[2];
  unint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;

  *(_QWORD *)a1 = &off_24EC37338;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (uint64_t *)(a1 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (!sub_223CEFC14())
  {
    sub_22345B824(&v88);
    if (**(int **)(v88 + 56) <= 4)
    {
      v8 = *(unsigned __int8 *)(v88 + 72);
      v9 = sub_22322F254(v88, "OSLogSurrogateAppender", 1, 0);
      v10 = v9;
      if (v8 || v9 != 0)
      {
        v79 = v8;
        v81[0] = &v88;
        v81[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v81[2] = std::chrono::system_clock::now().__d_.__rep_;
        v82 = 4;
        v83 = "unknown file";
        v84 = 46;
        v86 = 0;
        v87 = 0;
        v85 = "unknown function";
        v78 = v88;
        if (*(char *)(v88 + 39) < 0)
        {
          v13 = *(const char **)(v88 + 16);
          v12 = *(_QWORD *)(v88 + 24);
          v80 = v10;
          v77 = v88 + 16;
          v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v15 & 1) != 0)
            goto LABEL_14;
        }
        else
        {
          v12 = *(unsigned __int8 *)(v88 + 39);
          v13 = (const char *)(v88 + 16);
          v80 = v10;
          v77 = v88 + 16;
          v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v14 & 1) != 0)
            goto LABEL_14;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&object);
          sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
          if ((_BYTE)v91 && SHIBYTE(v90[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_14:
        if (byte_255788F57 >= 0)
          v16 = (const char *)&xmmword_255788F40;
        else
          v16 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v17 = byte_255788F57;
        else
          v17 = *((_QWORD *)&xmmword_255788F40 + 1);
        object = os_log_create(v16, v13);
        v18 = v90;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v17 >= 0x17)
        {
          v19 = v13;
          v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v20 = v17 | 7;
          v21 = v20 + 1;
          v18 = operator new(v20 + 1);
          v90[1] = (void *)v17;
          *(_QWORD *)&v91 = v21 | 0x8000000000000000;
          v90[0] = v18;
          v13 = v19;
        }
        else
        {
          BYTE7(v91) = v17;
          if (!v17)
          {
LABEL_28:
            *((_BYTE *)v18 + v17) = 0;
            BYTE8(v91) = 1;
            v22 = __p;
            if (v12 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v12 >= 0x17)
            {
              v23 = v13;
              v24 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17)
                v24 = v12 | 7;
              v25 = v24 + 1;
              v22 = operator new(v24 + 1);
              __p[1] = (void *)v12;
              v93 = v25 | 0x8000000000000000;
              __p[0] = v22;
              v13 = v23;
            }
            else
            {
              HIBYTE(v93) = v12;
              if (!v12)
                goto LABEL_36;
            }
            memmove(v22, v13, v12);
LABEL_36:
            *((_BYTE *)v22 + v12) = 0;
            v94 = 1;
            v26 = object;
            if (SHIBYTE(v93) < 0)
              operator delete(__p[0]);
            if (BYTE8(v91) && SBYTE7(v91) < 0)
              operator delete(v90[0]);
            if (object)
              os_release(object);
            if (v80 && *(_QWORD *)(v80 + 24))
            {
              v27 = _os_log_pack_size();
              v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
              v29 = (std::__shared_weak_count *)operator new();
              v30 = v29;
              v29->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v29->__shared_owners_;
              v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v29->__shared_weak_owners_ = 0;
              v29[1].__vftable = v28;
              object = v28;
              v90[0] = v28;
              v90[1] = v29;
              do
                v32 = __ldxr(p_shared_owners);
              while (__stxr(v32 + 1, p_shared_owners));
              v91 = 0uLL;
              __p[0] = 0;
              do
                v33 = __ldaxr(p_shared_owners);
              while (__stlxr(v33 - 1, p_shared_owners));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v30);
              }
              v34 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v35 = operator new();
              v36 = *(unsigned __int8 *)(v78 + 39);
              v37 = v77;
              if ((v36 & 0x80u) != 0)
              {
                v37 = *(_QWORD *)(v78 + 16);
                v36 = *(_QWORD *)(v78 + 24);
              }
              *(_QWORD *)v35 = v34;
              *(_OWORD *)(v35 + 8) = *(_OWORD *)v90;
              v90[0] = 0;
              v90[1] = 0;
              *(_OWORD *)(v35 + 24) = v91;
              v91 = 0uLL;
              *(_QWORD *)(v35 + 40) = v37;
              *(_QWORD *)(v35 + 48) = v36;
              *(_BYTE *)(v35 + 56) = 16;
              v95 = 0;
              v96 = v35;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v80 + 24) + 40))(*(_QWORD *)(v80 + 24), &v96);
              v38 = v96;
              v96 = 0;
              if (v38)
              {
                v39 = *(std::__shared_weak_count **)(v38 + 32);
                if (v39)
                {
                  v40 = (unint64_t *)&v39->__shared_owners_;
                  do
                    v41 = __ldaxr(v40);
                  while (__stlxr(v41 - 1, v40));
                  if (!v41)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                v42 = *(std::__shared_weak_count **)(v38 + 16);
                if (v42)
                {
                  v43 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                }
                MEMORY[0x227684CE8](v38, 0x10F0C40B62ED6C6);
                v45 = v95;
                v95 = 0;
                if (v45)
                {
                  v46 = *(std::__shared_weak_count **)(v45 + 32);
                  if (v46)
                  {
                    v47 = (unint64_t *)&v46->__shared_owners_;
                    do
                      v48 = __ldaxr(v47);
                    while (__stlxr(v48 - 1, v47));
                    if (!v48)
                    {
                      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                      std::__shared_weak_count::__release_weak(v46);
                    }
                  }
                  v49 = *(std::__shared_weak_count **)(v45 + 16);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
                }
              }
              v52 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
              v53 = v79;
              if (*((_QWORD *)&v91 + 1))
              {
                v54 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              v56 = (std::__shared_weak_count *)v90[1];
              if (v90[1])
              {
                v57 = (unint64_t *)((char *)v90[1] + 8);
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
            }
            else
            {
              os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v59 = (void *)_os_log_send_and_compose_impl();
              v53 = v79;
              if (v59)
                free(v59);
            }
            if (v53)
            {
              sub_22322C138((uint64_t)v81, "Gpu device does not support RGBA16U/16f read_write and Apple7 family features. The fused frames will have random values due to undefined behavior. Keyframing should be run on Apple Silicon.");
              sub_223182C08((uint64_t)v81);
            }
            sub_223182C08((uint64_t)v81);
            v60 = v87;
            if (v87)
            {
              v61 = (unint64_t *)&v87->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            goto LABEL_95;
          }
        }
        memmove(v18, v16, v17);
        goto LABEL_28;
      }
    }
  }
LABEL_95:
  v63 = operator new(0x48uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &off_24EC373F8;
  *((_OWORD *)v63 + 2) = xmmword_2245F6700;
  v63[6] = 0x400F1AA000000000;
  v63[7] = 0x3F8000000000003FLL;
  v63[8] = 0;
  v63[3] = &off_24EC5A840;
  v64 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v63 + 3;
  *(_QWORD *)(a1 + 16) = v63;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  sub_223227930((uint64_t *)&object);
  v67 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v67 + 1) = 0;
  *((_QWORD *)v67 + 2) = 0;
  *(_QWORD *)v67 = &off_24EC37448;
  *((_OWORD *)v67 + 2) = 0u;
  *((_OWORD *)v67 + 4) = 0u;
  *((_OWORD *)v67 + 5) = 0u;
  *((_OWORD *)v67 + 6) = 0u;
  *((_OWORD *)v67 + 7) = 0u;
  *((_OWORD *)v67 + 8) = 0u;
  *((_OWORD *)v67 + 9) = 0u;
  *((_OWORD *)v67 + 10) = 0u;
  *((_OWORD *)v67 + 11) = 0u;
  *((_OWORD *)v67 + 3) = 0u;
  *((_QWORD *)v67 + 24) = 0;
  *((_DWORD *)v67 + 10) = 1;
  *((_QWORD *)v67 + 8) = 0;
  *((_QWORD *)v67 + 3) = off_24EC5A720;
  *((_QWORD *)v67 + 7) = 0;
  *((_QWORD *)v67 + 6) = v67 + 56;
  *(_OWORD *)(v67 + 104) = 0u;
  *(_OWORD *)(v67 + 120) = 0u;
  *(_OWORD *)(v67 + 72) = 0u;
  *(_OWORD *)(v67 + 88) = 0u;
  sub_2232291A8((_QWORD *)v67 + 17);
  sub_2232291A8((_QWORD *)v67 + 19);
  *((_QWORD *)v67 + 3) = &off_24EC5A7E0;
  *(_OWORD *)(v67 + 168) = 0u;
  *(_OWORD *)(v67 + 184) = 0u;
  v68 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v67 + 24;
  *(_QWORD *)(a1 + 32) = v67;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  sub_223CE9B34(*v4, (void ***)a2);
  sub_22322797C(&object, v71, v72, v73, v74, v75);
  return a1;
}

void sub_22345B5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  sub_223167354(v38);
  sub_223167354(v37);
  sub_223167354(a16);
  _Unwind_Resume(a1);
}

void sub_22345B824(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CACE8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CACE8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CACE0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CACE8);
  }
  *a1 = qword_2540CACE0;
}

void sub_22345B8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CACE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CACE8);
  _Unwind_Resume(a1);
}

void **sub_22345B918@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  void ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  float32x2_t *v21;
  uint64_t v22;
  float32x2_t *v23;
  _QWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  void *v35;
  const void *v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void ***v58;
  uint64_t **v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  char *v66;
  char *v67;
  void *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  uint64_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x2_t *v75;
  float32x4_t v76;
  void *v77;
  void *v78;
  void **v79;
  void **v80;
  char *v81;
  char *v82;
  void *v83;
  void *v84;
  char *v85;
  char *v86;
  void *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  void *__p;
  char *v121;
  void *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  float32x2_t v125[59];
  std::__shared_weak_count *v126;
  char v127[16];
  std::__shared_weak_count *v128;
  void *v129;
  char v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t *v137;
  int v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t *v141;
  int v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t v145;
  __int128 __src[38];
  char v147[24];
  char *v148;
  float32x4_t v149[8];
  uint64_t v150;
  float32x4_t v151[8];
  uint64_t v152;
  __int128 __dst[38];
  _BYTE v154[304];
  _OWORD v155[19];
  uint64_t v156;

  v156 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a3 + 160) == 1)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/NVS/src/NVSEngineKeyframeBased.cpp", 59, (uint64_t)"", 0, (uint64_t)"Orthographic NVS not supported for KeyframeWarping-based rendering methods", 74, (void (*)(void **))sub_22457406C);
    abort();
  }
  v7 = a1;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32) = *(_DWORD *)(a3 + 164);
  sub_223227930((uint64_t *)&v129);
  v8 = (void ***)(v7 + 40);
  nullsub_30(v7 + 40);
  sub_223226DFC(__dst, (void ***)(v7 + 40), v9, v10, v11, v12);
  v118 = v7;
  sub_223226F40((void ***)__dst, v13, v14, v15, v16, (uint64_t)v127);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (*((_QWORD *)&__dst[0] + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + 32);
  v21 = (float32x2_t *)operator new(0x1E8uLL);
  v22 = a3 + 64;
  v21[1] = 0;
  v21[2] = 0;
  *v21 = (float32x2_t)&off_24EC37498;
  v23 = v21 + 3;
  sub_2231D69A8(&v21[3], v7 + 40, v22, v20);
  v125[58] = (float32x2_t)v23;
  v126 = (std::__shared_weak_count *)v21;
  (*(void (**)(float32x2_t *, uint64_t, char *, uint64_t))(*(_QWORD *)&v21[3] + 16))(v21 + 3, *(unsigned int *)(*(_QWORD *)(v7 + 8) + 32) | 0x100000000, v127, 1);
  v117 = a4;
  v24 = *(_QWORD **)(v7 + 24);
  v25 = sub_2231D020C((uint64_t)v23);
  v26 = sub_2231D0214((uint64_t)v23);
  v27 = sub_2231D020C((uint64_t)v23);
  v28 = sub_2231D0214((uint64_t)v23);
  sub_2237FD3A4(v24, (uint64_t)v127, 43 * v25 * v26, 27 * v27 * v28);
  HIDWORD(v152) = 0xFFFF;
  v29 = *a2;
  v119 = a2[1];
  if (*a2 != v119)
  {
    __asm { FMOV            V9.2S, #1.0 }
    while (!*(_QWORD *)v29)
    {
LABEL_12:
      v29 += 80;
      if (v29 == v119)
        goto LABEL_66;
    }
    sub_2231D70F0(v125, v8, *(_QWORD *)v29);
    v123 = 0;
    v124 = 0;
    if (!sub_2231D01EC((uint64_t)v23)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/NVS/src/NVSEngineKeyframeBased.cpp", 115, (uint64_t)"destination_surface.IsValid()", 29, (uint64_t)"Invalid front buffer!", 21, (void (*)(void **))sub_22457406C))
    {
LABEL_82:
      abort();
    }
    v36 = *(const void **)(v7 + 8);
    if (!v36
      || (v37 = __dynamic_cast(v36, (const struct __class_type_info *)&unk_24EC5A700, (const struct __class_type_info *)&unk_24EC5A850, 0)) == 0)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Gpu/WarpFuseParameters.h", 86, (uint64_t)"warp_fuse_param_gpu", 19, (uint64_t)"Failed to obtain a valid WarpFuseParamGpuWrapper!", 49, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_82;
      }
      v37 = 0;
    }
    *(_QWORD *)&__src[36] = 0x3DCCCCCD40400000;
    LODWORD(v155[16]) = 1077936128;
    LOWORD(v155[18]) = 0;
    sub_223800BB4((uint64_t)v37, __src, (uint64_t)v155, v125, v23, (float32x2_t *)(v29 + 16), flt_2245F6770, 1);
    HIDWORD(v150) = 0xFFFF;
    v38 = sub_2231D020C((uint64_t)v23);
    v39 = sub_2231D0214((uint64_t)v23);
    __dst[0] = v155[4];
    __dst[1] = v155[5];
    __dst[2] = v155[6];
    __dst[3] = v155[7];
    v145 = v38 | (unint64_t)(v39 << 32);
    v40 = *(_QWORD *)sub_2231D050C((uint64_t)v23);
    v41 = (uint64_t *)sub_2231D050C((uint64_t)v125);
    sub_223800A54(v37, (uint64_t)v149, __dst, &v145, v40, *v41);
    v42 = *(_QWORD *)(v7 + 24);
    memcpy(__dst, __src, sizeof(__dst));
    memcpy(v154, v155, sizeof(v154));
    v43 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + 32);
    v143 = v123;
    v144 = v124;
    if (v124)
    {
      p_shared_owners = (unint64_t *)&v124->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
    v140 = 0;
    v139 = 0;
    v141 = &v139;
    v142 = 0;
    v136 = 0;
    v135 = 0;
    v137 = &v135;
    v138 = 0;
    v130 = 0;
    v131 = 0;
    v132 = _D9;
    v133 = 0;
    v134 = 0x80000000ALL;
    sub_2237FE698(v42, v127, (uint64_t)__dst, v149, (uint64_t)v125, (uint64_t)v23, v43, &v143, 63);
    v46 = v136;
    if (!v136)
      goto LABEL_27;
    v47 = (unint64_t *)&v136->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v49 = v140;
      if (v140)
        goto LABEL_28;
    }
    else
    {
LABEL_27:
      v49 = v140;
      if (v140)
      {
LABEL_28:
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
    v52 = v144;
    if (v144)
    {
      v53 = (unint64_t *)&v144->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v151[6] = v149[6];
    v151[7] = v149[7];
    v152 = v150;
    v151[2] = v149[2];
    v151[3] = v149[3];
    v151[4] = v149[4];
    v151[5] = v149[5];
    v151[0] = v149[0];
    v151[1] = v149[1];
    v55 = v124;
    if (v124)
    {
      v56 = (unint64_t *)&v124->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = v8;
    v59 = (uint64_t **)sub_2231D0424((uint64_t)v125);
    sub_22345F4D8(&__p, v59);
    v67 = (char *)__p;
    v66 = v121;
    v68 = __p;
    if (__p != v121)
    {
      do
      {
        v60.i64[0] = *(_QWORD *)v67;
        v61.i32[0] = *((_DWORD *)v67 + 2);
        v70 = (float32x2_t *)*((_QWORD *)v67 + 2);
        v69 = (float32x2_t *)*((_QWORD *)v67 + 3);
        v71 = *((_QWORD *)v67 + 4);
        *((_QWORD *)v67 + 3) = 0;
        *((_QWORD *)v67 + 4) = 0;
        *((_QWORD *)v67 + 2) = 0;
        v62.i32[0] = *(_DWORD *)(v29 + 24);
        v72 = *(float32x2_t *)(v29 + 32);
        v63.i32[0] = *(_DWORD *)(v29 + 40);
        v73 = *(float32x2_t *)(v29 + 48);
        v64.i32[0] = *(_DWORD *)(v29 + 56);
        *(float32x2_t *)v74.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v29 + 16), v60.f32[0]), v72, *(float32x2_t *)v60.f32, 1), v73, v61.f32[0]);
        v62 = vmla_f32(vmla_lane_f32(vmul_f32(v62, *(float32x2_t *)v60.f32), v63, *(float32x2_t *)v60.f32, 1), *(float32x2_t *)v61.f32, v64);
        *(float32x2_t *)&v74.u32[2] = v62;
        v60.i64[0] = *(_QWORD *)(v29 + 64);
        v60.i32[2] = *(_DWORD *)(v29 + 72);
        v60 = vaddq_f32(v74, v60);
        v75 = v70;
        if (v70 == v69)
        {
          *((_DWORD *)v67 + 2) = v60.i32[2];
          *(_QWORD *)v67 = v60.i64[0];
          v69 = v70;
        }
        else
        {
          do
          {
            v74.i32[0] = *(_DWORD *)(v29 + 24);
            v62 = *(float32x2_t *)(v29 + 32);
            v72.i32[0] = *(_DWORD *)(v29 + 40);
            v63 = *(float32x2_t *)(v29 + 48);
            v73.i32[0] = *(_DWORD *)(v29 + 56);
            v64 = *v75;
            v65.i32[0] = v75[1].i32[0];
            *(float32x2_t *)v76.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v29 + 16), COERCE_FLOAT(*v75)), v62, *v75, 1), v63, v65.f32[0]);
            *(float32x2_t *)&v76.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v74.f32, *v75), v72, *v75, 1), v65, v73);
            v74.i64[0] = *(_QWORD *)(v29 + 64);
            v74.i32[2] = *(_DWORD *)(v29 + 72);
            v61 = vaddq_f32(v76, v74);
            v75[1].i32[0] = v61.i32[2];
            *v75 = *(float32x2_t *)v61.f32;
            v75 += 4;
          }
          while (v75 != v69);
          v77 = (void *)*((_QWORD *)v67 + 2);
          *((_DWORD *)v67 + 2) = v60.i32[2];
          *(_QWORD *)v67 = v60.i64[0];
          if (v77)
          {
            *((_QWORD *)v67 + 3) = v77;
            operator delete(v77);
          }
        }
        *((_QWORD *)v67 + 2) = v70;
        *((_QWORD *)v67 + 3) = v69;
        *((_QWORD *)v67 + 4) = v71;
        v67 += 40;
      }
      while (v67 != v66);
      v68 = __p;
      v67 = v121;
    }
    *(_QWORD *)&__dst[0] = v68;
    *((_QWORD *)&__dst[0] + 1) = v67;
    v78 = v122;
    *(_QWORD *)&__dst[1] = v122;
    v121 = 0;
    v122 = 0;
    __p = 0;
    v79 = (void **)sub_2231D0490((uint64_t)v23);
    v80 = v79;
    v81 = (char *)*v79;
    if (*v79)
    {
      v82 = (char *)v79[1];
      v83 = *v79;
      if (v82 != v81)
      {
        do
        {
          v84 = (void *)*((_QWORD *)v82 - 3);
          if (v84)
          {
            *((_QWORD *)v82 - 2) = v84;
            operator delete(v84);
          }
          v82 -= 40;
        }
        while (v82 != v81);
        v83 = *v80;
      }
      v80[1] = v81;
      operator delete(v83);
      *v80 = 0;
      v80[1] = 0;
      v80[2] = 0;
    }
    *v80 = v68;
    v80[1] = v67;
    v80[2] = v78;
    v85 = (char *)__p;
    v8 = v58;
    v7 = v118;
    if (__p)
    {
      v86 = v121;
      v35 = __p;
      if (v121 != __p)
      {
        do
        {
          v87 = (void *)*((_QWORD *)v86 - 3);
          if (v87)
          {
            *((_QWORD *)v86 - 2) = v87;
            operator delete(v87);
          }
          v86 -= 40;
        }
        while (v86 != v85);
        v35 = __p;
      }
      v121 = v85;
      operator delete(v35);
    }
    sub_2231D70F4(v125);
    goto LABEL_12;
  }
LABEL_66:
  sub_2237FF5B4(*(_QWORD *)(v7 + 24), (uint64_t)v127, (uint64_t)v151, (uint64_t)v23);
  v88 = operator new(0x240uLL);
  v88[1] = 0;
  v88[2] = 0;
  *v88 = &off_24EC20F48;
  *v117 = sub_2231D3000((uint64_t)(v88 + 3), (uint64_t)v127, (uint64_t)v23);
  v117[1] = (uint64_t)v88;
  kdebug_trace();
  *(_QWORD *)v147 = &off_24EC374E8;
  v148 = v147;
  sub_2232268C4((uint64_t)v127, v147, v89, v90, v91, v92);
  v98 = v148;
  if (v148 == (_QWORD *)v147)
  {
    v99 = 4;
    v98 = v147;
    goto LABEL_70;
  }
  if (v148)
  {
    v99 = 5;
LABEL_70:
    (*(void (**)(void))(*v98 + 8 * v99))();
  }
  sub_2232267C8((uint64_t)v127, v93, v94, v95, v96, v97);
  sub_223226BB0((uint64_t)v127, v100, v101, v102, v103, v104);
  sub_223CEECA4((uint64_t)v127, "Keyframing.NVSEngineComputePipeline.GenerateNVS", 0x2FuLL);
  v110 = v126;
  if (v126)
  {
    v111 = (unint64_t *)&v126->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v128;
  if (v128)
  {
    v114 = (unint64_t *)&v128->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  return sub_22322797C(&v129, v105, v106, v107, v108, v109);
}

void sub_22345C214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  unint64_t *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v16 = (unint64_t *)STACK[0x568];
  if (STACK[0x568] == v14)
  {
    v17 = 4;
    v16 = &STACK[0x550];
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  sub_223167354(a14);
  sub_223167354((uint64_t)&STACK[0x240]);
  sub_223197300((uint64_t)&STACK[0x250]);
  sub_22322797C((void **)&STACK[0x268], v18, v19, v20, v21, v22);
  _Unwind_Resume(a1);
}

uint64_t sub_22345C394(uint64_t a1)
{
  int32x4_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v2 = vdupq_n_s32(0x7FC00000u);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(int32x4_t *)(a1 + 40) = v2;
  *(int32x4_t *)(a1 + 56) = v2;
  *(int32x4_t *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = 2143289344;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)a1 = &off_24EC37360;
  *(_QWORD *)(a1 + 8) = &off_24EC37688;
  *(_QWORD *)(a1 + 16) = &off_24EC20868;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = &off_24EC20868;
  *(int32x4_t *)(a1 + 136) = v2;
  *(int32x4_t *)(a1 + 152) = v2;
  *(int32x4_t *)(a1 + 168) = v2;
  *(_DWORD *)(a1 + 184) = 2143289344;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 104) = &off_24EC37688;
  *(_QWORD *)(a1 + 208) = 0;
  sub_22345F608(a1 + 224);
  *(_QWORD *)(a1 + 224) = &off_24EC21D68;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  v8 = 0;
  *(_BYTE *)(a1 + 724) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  v11 = 0;
  v12 = 0;
  v9 = 0;
  v10 = 0;
  sub_223208FD4(a1 + 728, (unsigned int *)&v9, &v11, 1, &v8, 1, 0);
  *(_QWORD *)(a1 + 776) = &off_24EC216B8;
  sub_2231C1D58((_WORD *)(a1 + 784));
  *(_QWORD *)(a1 + 216) = &off_24EC5A680;
  *(_QWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 984) = 0x3F0000003F000000;
  *(_BYTE *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_QWORD *)(a1 + 1612) = 0x3DCCCCCD40400000;
  *(_DWORD *)(a1 + 1856) = 1069547520;
  v3 = operator new(0x48uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24EC37568;
  v3[3] = &off_24EC5A6F0;
  *((_OWORD *)v3 + 2) = xmmword_2245F6700;
  v3[6] = 0x400F1AA000000000;
  v3[7] = 0x3F8000000000003FLL;
  v3[8] = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = v3 + 3;
  *(_QWORD *)(a1 + 208) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_22345C5D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_2237F9BE4(v3);
  sub_223167354(v2);
  *(_QWORD *)(v1 + 104) = &off_24EC220E0;
  *(_QWORD *)(v1 + 8) = &off_24EC220E0;
  _Unwind_Resume(a1);
}

void sub_22345C62C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  float32x2_t *v9;
  float32x2_t *v10;
  float32x2_t *v11;
  float32x2_t v12;
  float32x2_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v31;
  float32x2_t *v32;
  float32x2_t v33;
  float32x2_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  int32x4_t *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  BOOL v78;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  BOOL v89;
  int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  BOOL v94;
  int v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  BOOL v99;
  int v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  float32x2_t *v104;
  std::string::size_type v105;
  float32x2_t v106;
  float32x2_t *v107;
  std::string::size_type v108;
  float32x2_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  double v114;
  float32x4_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::chrono::steady_clock::time_point v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  std::mutex *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float v127;
  std::string::size_type v128;
  std::string *v129;
  std::string::size_type v130;
  std::string::size_type v131;
  int v132;
  __n128 *v135;
  std::string *v136;
  size_t v137;
  float v138;
  std::string::size_type v139;
  std::string *v140;
  std::string::size_type v141;
  std::string *v142;
  uint64_t **v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x2_t v149;
  char *v150;
  char *v151;
  void *v152;
  float32x2_t *v153;
  float32x2_t *v154;
  uint64_t v155;
  float32x2_t v156;
  float32x2_t v157;
  float32x4_t v158;
  float32x2_t *v159;
  float32x4_t v160;
  void *v161;
  void *v162;
  void **v163;
  void **v164;
  char *v165;
  float32x2_t *v166;
  char *v167;
  void *v168;
  void *v169;
  char *v170;
  char *v171;
  void *v172;
  void *v173;
  int v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  _QWORD *v181;
  int32x4_t v182;
  uint64_t v183;
  int v184;
  float32x4_t *v185;
  float32x4_t *v186;
  __int128 *v187;
  float32x4_t *v188;
  __int128 v189;
  _OWORD *v190;
  float32x2_t *v191;
  void *v192;
  char *v193;
  void *v194;
  std::string v195;
  float v196;
  std::string v197;
  int v198;
  int v199;
  _BYTE v200[80];
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  int v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  _OWORD v233[12];
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  int v237;
  int v238;
  __int128 __p;
  __int128 v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int v244;
  float32x2_t v245;
  uint64_t (**v246)();
  uint64_t (**v247)(_QWORD);
  __int128 v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int v252;
  float32x2_t v253;
  _BYTE v254[40];
  int32x4_t v255;
  int32x4_t v256;
  int v257;
  uint64_t v258;

  v258 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a3 + 160) == 1)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/NVS/src/NVSEngineKeyframeBased.cpp", 152, (uint64_t)"", 0, (uint64_t)"Orthographic NVS not supported for KeyframeWarping-based rendering methods", 74, (void (*)(void **))sub_22457406C);
    abort();
  }
  v7 = *(unsigned int *)(a3 + 164);
  *(_DWORD *)(*(_QWORD *)(a1 + 200) + 32) = v7;
  v8 = a3 + 64;
  v9 = (float32x2_t *)operator new(0x240uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = (float32x2_t)&off_24EC20F48;
  v10 = v9 + 3;
  sub_2231CBABC(&v9[3], v8, v7);
  *a4 = v9 + 3;
  a4[1] = v9;
  (*(void (**)(float32x2_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)&v9[3] + 16))(v9 + 3, *(unsigned int *)(*(_QWORD *)(a1 + 200) + 32) | 0x100000000, 0, 0);
  v11 = (float32x2_t *)sub_2231D0224((uint64_t)&v9[3]);
  v12 = vadd_f32(v11[3], (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)v254 = v11[2];
  *(float32x2_t *)&v254[8] = v12;
  v13 = v11[11];
  sub_223207E58(v200, (int *)v254);
  *(_OWORD *)&v197.__r_.__value_.__l.__data_ = *(_OWORD *)&v200[24];
  v14 = *(_OWORD *)&v200[24];
  v15 = *(_OWORD *)&v200[40];
  v16 = *(_OWORD *)&v200[56];
  __p = *(_OWORD *)&v200[40];
  v240 = *(_OWORD *)&v200[56];
  v17 = *(_DWORD *)&v200[72];
  v241.i32[0] = *(_DWORD *)&v200[72];
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v200[8];
  *(_OWORD *)(a1 + 136) = v14;
  *(_OWORD *)(a1 + 152) = v15;
  *(_OWORD *)(a1 + 168) = v16;
  *(_DWORD *)(a1 + 184) = v17;
  *(float32x2_t *)(a1 + 192) = v13;
  v13.i32[0] = *(_DWORD *)(sub_2231D0224((uint64_t)&v9[3]) + 88);
  v18 = (*(_DWORD *)(sub_2231D0224((uint64_t)&v9[3]) + 92) * v13.i32[0]);
  v19 = *(char **)(a1 + 1008);
  v20 = *(char **)(a1 + 1000);
  v21 = 0x82FA0BE82FA0BE83 * (v19 - v20);
  v181 = (_QWORD *)(a1 + 1000);
  if (v18 <= v21)
  {
    if (v18 < v21)
    {
      v19 = &v20[43 * v18];
      *(_QWORD *)(a1 + 1008) = v19;
    }
  }
  else
  {
    sub_2237EDFF4((char **)(a1 + 1000), v18 - v21);
    v20 = *(char **)(a1 + 1000);
    v19 = *(char **)(a1 + 1008);
  }
  if (v20 != v19)
    bzero(v20, 43 * ((v19 - v20 - 43) / 0x2BuLL) + 43);
  v22 = *(char **)(a1 + 1032);
  v23 = *(char **)(a1 + 1024);
  v24 = 0x84BDA12F684BDA13 * (v22 - v23);
  if (v18 <= v24)
  {
    if (v18 < v24)
    {
      v22 = &v23[27 * v18];
      *(_QWORD *)(a1 + 1032) = v22;
    }
  }
  else
  {
    sub_2237EE1BC((char **)(a1 + 1024), v18 - v24);
    v23 = *(char **)(a1 + 1024);
    v22 = *(char **)(a1 + 1032);
  }
  if (v23 != v22)
    bzero(v23, 27 * ((v22 - v23 - 27) / 0x1BuLL) + 27);
  v25 = *a2;
  v183 = a2[1];
  if (*a2 != v183)
  {
    v26 = 0;
    v190 = (_OWORD *)(a1 + 1924);
    __asm { FMOV            V0.4S, #1.0 }
    v189 = _Q0;
    v182 = vdupq_n_s32(0x7FC00000u);
    v187 = (__int128 *)(a1 + 1620);
    v188 = (float32x4_t *)(a1 + 1048);
    v185 = (float32x4_t *)(a1 + 1860);
    v186 = (float32x4_t *)(a1 + 1684);
    v191 = (float32x2_t *)(a1 + 224);
    while (!*(_QWORD *)v25)
    {
LABEL_17:
      v25 += 80;
      if (v25 == v183)
        goto LABEL_179;
    }
    std::to_string(&v195, v26);
    v184 = v26;
    v31 = *(_QWORD *)v25;
    v32 = (float32x2_t *)sub_2231D0224(*(_QWORD *)v25);
    v33 = vadd_f32(v32[3], (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v254 = v32[2];
    *(float32x2_t *)&v254[8] = v33;
    v34 = v32[11];
    sub_223207E58(v200, (int *)v254);
    *(_OWORD *)&v197.__r_.__value_.__l.__data_ = *(_OWORD *)&v200[24];
    v35 = *(_OWORD *)&v200[24];
    v37 = *(_OWORD *)&v200[56];
    __p = *(_OWORD *)&v200[40];
    v36 = *(_OWORD *)&v200[40];
    v240 = *(_OWORD *)&v200[56];
    v241.i32[0] = *(_DWORD *)&v200[72];
    v38 = *(_DWORD *)&v200[72];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&v200[8];
    *(_OWORD *)(a1 + 40) = v35;
    *(_OWORD *)(a1 + 56) = v36;
    *(_OWORD *)(a1 + 72) = v37;
    *(_DWORD *)(a1 + 88) = v38;
    *(float32x2_t *)(a1 + 96) = v34;
    sub_2237F9D54(*(_QWORD *)(a1 + 200), v188, (uint64_t)v187, *(float32x2_t **)v25, v10, (float32x2_t *)(v25 + 16), 0);
    v39 = *(int32x4_t **)(a1 + 200);
    *v190 = v189;
    *(_OWORD *)(a1 + 1940) = v189;
    v40 = *(_OWORD *)(a1 + 1700);
    *v185 = *v186;
    *(_OWORD *)(a1 + 1876) = v40;
    v41 = *(_OWORD *)(a1 + 1732);
    *(_OWORD *)(a1 + 1892) = *(_OWORD *)(a1 + 1716);
    *(_OWORD *)(a1 + 1908) = v41;
    *(int32x4_t *)(a1 + 1960) = vrev64q_s32(v39[1]);
    *(_DWORD *)(a1 + 1956) = v39[2].i32[1];
    *(_DWORD *)(a1 + 1976) = 452930346;
    *(_WORD *)(a1 + 1980) = -229;
    *(_DWORD *)(a1 + 1984) = v39[2].i32[0];
    v42 = *(_QWORD *)sub_2231D050C((uint64_t)v10);
    v43 = *(_QWORD *)sub_2231D050C(v31);
    *v190 = v189;
    *(_OWORD *)(a1 + 1940) = v189;
    if ((v42 & 0xFF00000000) != 0 && (v43 & 0xFF00000000) != 0)
    {
      if (*(float *)&v42 <= 0.0
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/WarpFuseParameters.cpp", 110, (uint64_t)"*clipping_point_lux_current > 0.f", 33, (uint64_t)&unk_2245948D3, 0, (void (*)(void **))sub_22457406C)|| *(float *)&v43 <= 0.0&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/src/Core/Cpu/WarpFuseParameters.cpp", 111, (uint64_t)"*clipping_point_lux_candidate > 0.f", 35, (uint64_t)&unk_2245948D3, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v44.i64[0] = *(_QWORD *)(a1 + 1940);
      v44.i32[2] = *(_DWORD *)(a1 + 1948);
      v45 = vmulq_n_f32(v44, *(float *)&v43 / *(float *)&v42);
      *(_DWORD *)(a1 + 1948) = v45.i32[2];
      *(_QWORD *)(a1 + 1940) = v45.i64[0];
    }
    *(_QWORD *)v200 = "FusionEngine(cpu).NVS.keyframe_input ";
    *(_QWORD *)&v200[8] = 37;
    size = HIBYTE(v195.__r_.__value_.__r.__words[2]);
    v47 = &v195;
    if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      size = v195.__r_.__value_.__l.__size_;
      v47 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    *(_QWORD *)&v200[16] = v47;
    *(_QWORD *)&v200[24] = size;
    sub_2231A9820((uint64_t)v200, (uint64_t)&v200[32], 0, 0, (std::string *)&__p);
    sub_2231D7968(v31, (const void **)&__p);
    if (SBYTE7(v240) < 0)
      operator delete((void *)__p);
    v48 = *(_OWORD *)(a1 + 1064);
    *(float32x4_t *)v200 = *v188;
    v49 = *(_OWORD *)(a1 + 1080);
    v50 = *(_OWORD *)(a1 + 1096);
    *(_OWORD *)&v200[16] = v48;
    *(_OWORD *)&v200[32] = v49;
    *(_OWORD *)&v200[48] = v50;
    v51 = *(_OWORD *)(a1 + 1128);
    *(_OWORD *)&v200[64] = *(_OWORD *)(a1 + 1112);
    v201 = v51;
    v52 = *(_OWORD *)(a1 + 1160);
    v202 = *(_OWORD *)(a1 + 1144);
    v203 = v52;
    v53 = *(_OWORD *)(a1 + 1176);
    v54 = *(_OWORD *)(a1 + 1192);
    v55 = *(_OWORD *)(a1 + 1224);
    v206 = *(_OWORD *)(a1 + 1208);
    v207 = v55;
    v204 = v53;
    v205 = v54;
    v56 = *(_OWORD *)(a1 + 1288);
    v210 = *(_OWORD *)(a1 + 1272);
    v211 = v56;
    v57 = *(_OWORD *)(a1 + 1256);
    v208 = *(_OWORD *)(a1 + 1240);
    v209 = v57;
    v58 = *(_OWORD *)(a1 + 1352);
    v214 = *(_OWORD *)(a1 + 1336);
    v215 = v58;
    v59 = *(_OWORD *)(a1 + 1320);
    v212 = *(_OWORD *)(a1 + 1304);
    v213 = v59;
    v60 = *(_OWORD *)(a1 + 1368);
    v61 = *(_OWORD *)(a1 + 1384);
    v62 = *(_OWORD *)(a1 + 1416);
    v218 = *(_OWORD *)(a1 + 1400);
    v219 = v62;
    v216 = v60;
    v217 = v61;
    v63 = *(_OWORD *)(a1 + 1432);
    v64 = *(_OWORD *)(a1 + 1448);
    v65 = *(_OWORD *)(a1 + 1496);
    v223 = *(_OWORD *)(a1 + 1480);
    v224 = v65;
    v66 = *(_OWORD *)(a1 + 1464);
    v221 = v64;
    v222 = v66;
    v220 = v63;
    v67 = *(_OWORD *)(a1 + 1528);
    v225 = *(_OWORD *)(a1 + 1512);
    v226 = v67;
    v227 = *(_DWORD *)(a1 + 1544);
    v228 = *(_OWORD *)(a1 + 1548);
    v229 = *(_OWORD *)(a1 + 1564);
    v230 = *(_OWORD *)(a1 + 1580);
    v231 = *(_OWORD *)(a1 + 1596);
    v232 = *(_QWORD *)(a1 + 1612);
    v68 = *v187;
    v69 = *(_OWORD *)(a1 + 1636);
    v70 = *(_OWORD *)(a1 + 1668);
    v233[2] = *(_OWORD *)(a1 + 1652);
    v233[3] = v70;
    v233[0] = v68;
    v233[1] = v69;
    v71 = *(_OWORD *)(a1 + 1732);
    v233[6] = *(_OWORD *)(a1 + 1716);
    v233[7] = v71;
    v72 = *(_OWORD *)(a1 + 1700);
    v233[4] = *v186;
    v233[5] = v72;
    v73 = *(_OWORD *)(a1 + 1796);
    v233[10] = *(_OWORD *)(a1 + 1780);
    v233[11] = v73;
    v74 = *(_OWORD *)(a1 + 1764);
    v233[8] = *(_OWORD *)(a1 + 1748);
    v233[9] = v74;
    v234 = *(_QWORD *)(a1 + 1812);
    v75 = *(_OWORD *)(a1 + 1820);
    v76 = *(_OWORD *)(a1 + 1836);
    v237 = *(_DWORD *)(a1 + 1852);
    v235 = v75;
    v236 = v76;
    v238 = *(_DWORD *)(a1 + 1856);
    v77 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 32);
    sub_2231D3D90(v31, (uint64_t)v254);
    v78 = 0;
    if (*(_DWORD *)&v254[32] && *(_DWORD *)&v254[36])
    {
      sub_2231D4288(v31, (uint64_t)&v197);
      v78 = 0;
      if (!v198 || !v199)
        goto LABEL_44;
      sub_2231D432C(v31, (uint64_t)&__p);
      _ZF = !v242.i32[2] || v242.i32[3] == 0;
      v78 = !_ZF;
      v80 = (std::__shared_weak_count *)v240;
      if (!(_QWORD)v240)
        goto LABEL_44;
      v81 = (unint64_t *)(v240 + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
        v83 = (std::__shared_weak_count *)v197.__r_.__value_.__r.__words[2];
        if (!v197.__r_.__value_.__r.__words[2])
          goto LABEL_49;
      }
      else
      {
LABEL_44:
        v83 = (std::__shared_weak_count *)v197.__r_.__value_.__r.__words[2];
        if (!v197.__r_.__value_.__r.__words[2])
          goto LABEL_49;
      }
      p_shared_owners = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldaxr(p_shared_owners);
      while (__stlxr(v85 - 1, p_shared_owners));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
LABEL_49:
    v86 = *(std::__shared_weak_count **)&v254[16];
    if (!*(_QWORD *)&v254[16])
      goto LABEL_53;
    v87 = (unint64_t *)(*(_QWORD *)&v254[16] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
      if (v78)
        goto LABEL_55;
    }
    else
    {
LABEL_53:
      if (v78)
        goto LABEL_55;
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 111, (uint64_t)"!input.Depth().Empty() && !input.Confidence().Empty() && !input.NormalRgba16f().Empty()", 87, (uint64_t)"Should provide depth confidence and normals images", 50, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_193;
    }
LABEL_55:
    if ((v77 & 4) == 0)
      goto LABEL_68;
    sub_2231D48A8(v31, (uint64_t)&__p);
    if (v242.i32[2])
      v89 = v242.i32[3] == 0;
    else
      v89 = 1;
    v90 = v89;
    v91 = (std::__shared_weak_count *)v240;
    if (!(_QWORD)v240)
      goto LABEL_66;
    v92 = (unint64_t *)(v240 + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
      if (!v90)
        goto LABEL_68;
    }
    else
    {
LABEL_66:
      if (!v90)
        goto LABEL_68;
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 113, (uint64_t)"!input.ColorRgba16f().Empty()", 29, (uint64_t)"Should provide color images", 27, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_193;
    }
LABEL_68:
    if ((v77 & 8) == 0)
      goto LABEL_81;
    sub_2231D494C(v31, (uint64_t)&__p);
    if (v242.i32[2])
      v94 = v242.i32[3] == 0;
    else
      v94 = 1;
    v95 = v94;
    v96 = (std::__shared_weak_count *)v240;
    if (!(_QWORD)v240)
      goto LABEL_79;
    v97 = (unint64_t *)(v240 + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
      if (!v95)
        goto LABEL_81;
    }
    else
    {
LABEL_79:
      if (!v95)
        goto LABEL_81;
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 116, (uint64_t)"!input.SemanticHistogram().Empty()", 34, (uint64_t)"Should provide semantic images", 30, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_193;
    }
LABEL_81:
    if ((v77 & 0x10) != 0)
    {
      sub_2231D4E60(v31, (uint64_t)&__p);
      if (v242.i32[2])
        v99 = v242.i32[3] == 0;
      else
        v99 = 1;
      v100 = v99;
      v101 = (std::__shared_weak_count *)v240;
      if (!(_QWORD)v240)
        goto LABEL_92;
      v102 = (unint64_t *)(v240 + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
        if (v100)
        {
LABEL_93:
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 119, (uint64_t)"!input.MaterialHistogram().Empty()", 34, (uint64_t)"Should provide material images", 30, (void (*)(void **))sub_22457406C))
          {
LABEL_193:
            abort();
          }
        }
      }
      else
      {
LABEL_92:
        if (v100)
          goto LABEL_93;
      }
    }
    v240 = 0uLL;
    v241 = v182;
    v242 = v182;
    v243 = v182;
    v244 = 2143289344;
    *((_QWORD *)&__p + 1) = &off_24EC20868;
    *(_QWORD *)&__p = &off_24EC37688;
    v247 = &off_24EC20868;
    v248 = 0uLL;
    v249 = v182;
    v250 = v182;
    v251 = v182;
    v252 = 2143289344;
    v253 = 0;
    v245 = 0;
    v246 = &off_24EC37688;
    v104 = (float32x2_t *)sub_2231D0224(v31);
    v105 = (std::string::size_type)vadd_f32(v104[3], (float32x2_t)0x3F0000003F000000);
    v197.__r_.__value_.__l.__data_ = (std::string::pointer)v104[2];
    v197.__r_.__value_.__l.__size_ = v105;
    v106 = v104[11];
    sub_223207E58(v254, (int *)&v197);
    v241 = *(int32x4_t *)&v254[24];
    v242 = v255;
    v243 = v256;
    v244 = v257;
    v240 = *(_OWORD *)&v254[8];
    v245 = v106;
    v107 = (float32x2_t *)sub_2231D0224((uint64_t)v10);
    v108 = (std::string::size_type)vadd_f32(v107[3], (float32x2_t)0x3F0000003F000000);
    v197.__r_.__value_.__l.__data_ = (std::string::pointer)v107[2];
    v197.__r_.__value_.__l.__size_ = v108;
    v109 = v107[11];
    sub_223207E58(v254, (int *)&v197);
    v249 = *(int32x4_t *)&v254[24];
    v250 = v255;
    v251 = v256;
    v252 = v257;
    v248 = *(_OWORD *)&v254[8];
    v253 = v109;
    if (*((_QWORD *)&v231 + 1) != *(_QWORD *)&v109
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 131, (uint64_t)"check_size(cameras.dst.ImageSize(), vs_params.dst_size)", 55, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *(_QWORD *)&v245 != (_QWORD)v231&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 132, (uint64_t)"check_size(cameras.src.ImageSize(), vs_params.src_size)", 55, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| *(_QWORD *)&v253 != v234
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 133, (uint64_t)"check_size(cameras.dst.ImageSize(), fs_params.current_size)", 59, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v110 = sub_2231D0224(v31);
    v111 = sub_2231D0224((uint64_t)v10);
    sub_2237F6E38((uint64_t)v191, v110, v111);
    sub_2231D3D90(v31, (uint64_t)v254);
    sub_2237F7314(v191, (float32x4_t *)v200, (float32x2_t *)&__p, (uint64_t)v254, v112, v113, v114, v115);
    v116 = *(std::__shared_weak_count **)&v254[16];
    if (*(_QWORD *)&v254[16])
    {
      v117 = (unint64_t *)(*(_QWORD *)&v254[16] + 8);
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v119.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    memset(v254, 0, 32);
    *(_DWORD *)&v254[32] = 728307672;
    kdebug_trace();
    sub_2237F7450(v191, v31, (float32x4_t *)v200, (uint64_t)v233);
    kdebug_trace();
    memset(v254, 0, 32);
    *(_DWORD *)&v254[32] = 728307680;
    kdebug_trace();
    sub_22345FB4C((_QWORD *)(a1 + 216), (uint64_t)v200, v185, v31, (uint64_t)v10, v77);
    kdebug_trace();
    *(_QWORD *)v254 = "cv3d.recon.";
    *(_QWORD *)&v254[8] = 11;
    *(_QWORD *)&v254[16] = "Stats.Keyframing.SurfaceWarpFuser";
    *(_QWORD *)&v254[24] = 33;
    sub_2231A9820((uint64_t)v254, (uint64_t)&v254[32], 0, 0, &v197);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v120 = sub_2241471F8();
      v121 = v120[2];
      if (!v121)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v121 = v120[2];
      }
      v122 = *(_QWORD *)(v121 + 64);
      v123 = (std::mutex *)(v122 + 32);
      std::mutex::lock((std::mutex *)(v122 + 32));
      v125 = *(_QWORD *)(v122 + 96);
      v124 = *(_QWORD *)(v122 + 104);
      std::mutex::unlock(v123);
      if (v125 != v124)
      {
        sub_2241471F8();
        v126 = (*(uint64_t (**)(uint64_t *))(qword_2557952E0 + 48))(&qword_2557952E0);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v126 + 24))(v126))
        {
          memset(v254, 0, 32);
          *(_DWORD *)&v254[32] = 728325608;
          kdebug_trace();
          v127 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v119.__d_.__rep_) / 1000000.0;
          v119.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v196 = v127;
          sub_223468AC4((double *)&qword_255788F20, v126, &v196, "WarpAndFuseKeyframe (ms)");
          kdebug_trace();
        }
      }
    }
    memset(v254, 0, 32);
    *(_DWORD *)&v254[32] = 728325624;
    kdebug_trace();
    v128 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
    if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v128 = v197.__r_.__value_.__l.__size_;
    if (v128 >= 0x11)
    {
      v129 = &v197;
      if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v129 = (std::string *)v197.__r_.__value_.__r.__words[0];
      v130 = v129->__r_.__value_.__r.__words[0];
      v131 = v129->__r_.__value_.__l.__size_;
      v132 = v129->__r_.__value_.__s.__data_[16];
      if (v130 == 0x6365722E64337663 && v131 == 0x73746174532E6E6FLL && v132 == 46)
      {
        v135 = sub_223187510();
        if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v136 = &v197;
        else
          v136 = (std::string *)v197.__r_.__value_.__r.__words[0];
        if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v137 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
        else
          v137 = v197.__r_.__value_.__l.__size_;
        v138 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v119.__d_.__rep_) / 1000000.0;
        std::chrono::steady_clock::now();
        v196 = v138;
        sub_2231897A8((uint64_t *)v135, v136, v137, &v196, (uint64_t)"WarpAndFuseKeyframe (ms)", 24);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v197.__r_.__value_.__l.__data_);
    *(_QWORD *)v200 = "FusionEngine(cpu).NVS.keyframe_warped ";
    *(_QWORD *)&v200[8] = 38;
    v139 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
    v140 = &v195;
    if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v139 = v195.__r_.__value_.__l.__size_;
      v140 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    *(_QWORD *)&v200[16] = v140;
    *(_QWORD *)&v200[24] = v139;
    sub_2231A9820((uint64_t)v200, (uint64_t)&v200[32], 0, 0, (std::string *)&__p);
    sub_2231D7968((uint64_t)v191, (const void **)&__p);
    if (SBYTE7(v240) < 0)
      operator delete((void *)__p);
    *(_QWORD *)v200 = "FusionEngine(cpu).NVS.fused NVS ";
    *(_QWORD *)&v200[8] = 32;
    v141 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
    v142 = &v195;
    if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v141 = v195.__r_.__value_.__l.__size_;
      v142 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    *(_QWORD *)&v200[16] = v142;
    *(_QWORD *)&v200[24] = v141;
    sub_2231A9820((uint64_t)v200, (uint64_t)&v200[32], 0, 0, (std::string *)&__p);
    sub_2231D7968((uint64_t)v10, (const void **)&__p);
    if (SBYTE7(v240) < 0)
      operator delete((void *)__p);
    v143 = (uint64_t **)sub_2231D0424(v31);
    sub_22345F4D8(&v192, v143);
    v151 = (char *)v192;
    v150 = v193;
    v152 = v192;
    if (v192 != v193)
    {
      do
      {
        v144.i64[0] = *(_QWORD *)v151;
        v145.i32[0] = *((_DWORD *)v151 + 2);
        v154 = (float32x2_t *)*((_QWORD *)v151 + 2);
        v153 = (float32x2_t *)*((_QWORD *)v151 + 3);
        v155 = *((_QWORD *)v151 + 4);
        *((_QWORD *)v151 + 3) = 0;
        *((_QWORD *)v151 + 4) = 0;
        *((_QWORD *)v151 + 2) = 0;
        v146.i32[0] = *(_DWORD *)(v25 + 24);
        v156 = *(float32x2_t *)(v25 + 32);
        v147.i32[0] = *(_DWORD *)(v25 + 40);
        v157 = *(float32x2_t *)(v25 + 48);
        v148.i32[0] = *(_DWORD *)(v25 + 56);
        *(float32x2_t *)v158.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v25 + 16), v144.f32[0]), v156, *(float32x2_t *)v144.f32, 1), v157, v145.f32[0]);
        v146 = vmla_f32(vmla_lane_f32(vmul_f32(v146, *(float32x2_t *)v144.f32), v147, *(float32x2_t *)v144.f32, 1), *(float32x2_t *)v145.f32, v148);
        *(float32x2_t *)&v158.u32[2] = v146;
        v144.i64[0] = *(_QWORD *)(v25 + 64);
        v144.i32[2] = *(_DWORD *)(v25 + 72);
        v144 = vaddq_f32(v158, v144);
        v159 = v154;
        if (v154 == v153)
        {
          *((_DWORD *)v151 + 2) = v144.i32[2];
          *(_QWORD *)v151 = v144.i64[0];
          v153 = v154;
        }
        else
        {
          do
          {
            v158.i32[0] = *(_DWORD *)(v25 + 24);
            v146 = *(float32x2_t *)(v25 + 32);
            v156.i32[0] = *(_DWORD *)(v25 + 40);
            v147 = *(float32x2_t *)(v25 + 48);
            v157.i32[0] = *(_DWORD *)(v25 + 56);
            v148 = *v159;
            v149.i32[0] = v159[1].i32[0];
            *(float32x2_t *)v160.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v25 + 16), COERCE_FLOAT(*v159)), v146, *v159, 1), v147, v149.f32[0]);
            *(float32x2_t *)&v160.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v158.f32, *v159), v156, *v159, 1), v149, v157);
            v158.i64[0] = *(_QWORD *)(v25 + 64);
            v158.i32[2] = *(_DWORD *)(v25 + 72);
            v145 = vaddq_f32(v160, v158);
            v159[1].i32[0] = v145.i32[2];
            *v159 = *(float32x2_t *)v145.f32;
            v159 += 4;
          }
          while (v159 != v153);
          v161 = (void *)*((_QWORD *)v151 + 2);
          *((_DWORD *)v151 + 2) = v144.i32[2];
          *(_QWORD *)v151 = v144.i64[0];
          if (v161)
          {
            *((_QWORD *)v151 + 3) = v161;
            operator delete(v161);
          }
        }
        *((_QWORD *)v151 + 2) = v154;
        *((_QWORD *)v151 + 3) = v153;
        *((_QWORD *)v151 + 4) = v155;
        v151 += 40;
      }
      while (v151 != v150);
      v152 = v192;
      v151 = v193;
    }
    *(_QWORD *)v200 = v152;
    *(_QWORD *)&v200[8] = v151;
    v162 = v194;
    *(_QWORD *)&v200[16] = v194;
    v193 = 0;
    v194 = 0;
    v192 = 0;
    v163 = (void **)sub_2231D0490((uint64_t)v10);
    v164 = v163;
    v165 = (char *)*v163;
    if (*v163)
    {
      v166 = v10;
      v167 = (char *)v163[1];
      v168 = *v163;
      if (v167 != v165)
      {
        do
        {
          v169 = (void *)*((_QWORD *)v167 - 3);
          if (v169)
          {
            *((_QWORD *)v167 - 2) = v169;
            operator delete(v169);
          }
          v167 -= 40;
        }
        while (v167 != v165);
        v168 = *v164;
      }
      v164[1] = v165;
      operator delete(v168);
      *v164 = 0;
      v164[1] = 0;
      v164[2] = 0;
      v10 = v166;
    }
    *v164 = v152;
    v164[1] = v151;
    v164[2] = v162;
    v170 = (char *)v192;
    if (v192)
    {
      v171 = v193;
      v172 = v192;
      if (v193 != v192)
      {
        do
        {
          v173 = (void *)*((_QWORD *)v171 - 3);
          if (v173)
          {
            *((_QWORD *)v171 - 2) = v173;
            operator delete(v173);
          }
          v171 -= 40;
        }
        while (v171 != v170);
        v172 = v192;
      }
      v193 = v170;
      operator delete(v172);
    }
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v195.__r_.__value_.__l.__data_);
    v26 = v184 + 1;
    goto LABEL_17;
  }
LABEL_179:
  v174 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 32);
  if ((v174 & 8) == 0)
    goto LABEL_184;
  sub_2231CDAE0((uint64_t)v10, (uint64_t)v200);
  sub_2237EC518(v181, (uint64_t)v200);
  v175 = *(std::__shared_weak_count **)&v200[16];
  if (!*(_QWORD *)&v200[16])
    goto LABEL_184;
  v176 = (unint64_t *)(*(_QWORD *)&v200[16] + 8);
  do
    v177 = __ldaxr(v176);
  while (__stlxr(v177 - 1, v176));
  if (!v177)
  {
    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
    std::__shared_weak_count::__release_weak(v175);
    if ((v174 & 0x10) == 0)
      return;
  }
  else
  {
LABEL_184:
    if ((v174 & 0x10) == 0)
      return;
  }
  sub_2231CDCA4((uint64_t)v10, (uint64_t)v200);
  sub_2237ED4A0(v181, (uint64_t)v200);
  v178 = *(std::__shared_weak_count **)&v200[16];
  if (*(_QWORD *)&v200[16])
  {
    v179 = (unint64_t *)(*(_QWORD *)&v200[16] + 8);
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
}

void sub_22345DB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231CDC3C((uint64_t)&STACK[0x240]);
  sub_223167354(a9);
  _Unwind_Resume(a1);
}

void sub_22345DB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354(a9);
  _Unwind_Resume(a1);
}

void sub_22345DB94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_22345DBA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_22345DBC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22345DD34(_QWORD *result)
{
  *result = &off_24EC220E0;
  return result;
}

_QWORD *sub_22345DD44(_QWORD *a1, _QWORD *a2, int a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  *a1 = &off_24EC37388;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *a4;
  *a4 = 0;
  a1[3] = v5;
  v6 = a2[1];
  a1[4] = *a2;
  v7 = (uint64_t)(a1 + 4);
  a1[5] = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (a3)
  {
    v10 = operator new(0x7E0uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_24EC375E8;
    v11 = sub_22345C394((uint64_t)(v10 + 3));
    v12 = (std::__shared_weak_count *)a1[2];
    a1[1] = v11;
    a1[2] = v10;
    if (!v12)
      return a1;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (v14)
      return a1;
  }
  else
  {
    v16 = operator new(0x50uLL);
    v16[1] = 0;
    v16[2] = 0;
    *v16 = &off_24EC37638;
    v17 = sub_22345ACF8((uint64_t)(v16 + 3), v7);
    v12 = (std::__shared_weak_count *)a1[2];
    a1[1] = v17;
    a1[2] = v16;
    if (!v12)
      return a1;
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (v19)
      return a1;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_22345DE80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void *v6;
  uint64_t v7;

  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v6);
  sub_223167354(v3);
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_223167354(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_22345DED0(_QWORD *a1, _QWORD *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;

  v6 = (_QWORD *)operator new();
  v7 = operator new();
  sub_223910808(v7);
  *v6 = &off_24EC5CC40;
  v6[1] = v7;
  v9 = v6;
  sub_22345DD44(a1, a2, a3, (uint64_t *)&v9);
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  return a1;
}

void sub_22345DF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22345DFE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::chrono::steady_clock::time_point v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  std::string::size_type size;
  std::string *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  int v22;
  __n128 *v25;
  std::string *v26;
  size_t v27;
  float v28;
  std::string::size_type v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v56;
  int16x4_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  std::mutex *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  _OWORD v118[2];
  int v119;
  std::string v120;
  std::string v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  char v125;
  char v126;
  void *__p;
  int v128;
  int v129;
  char v130;
  void *v131;
  __int128 v132;
  uint64_t (**v133)();
  uint64_t v134;
  std::__shared_weak_count *v135;
  void *v136;
  _BYTE v137[15];
  __int16 v138;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  _QWORD v142[2];
  _OWORD v143[2];
  _QWORD v144[4];
  unint64_t v145;
  unsigned int v146;
  char v147;
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  std::chrono::steady_clock::now();
  if (*(_BYTE *)(a3 + 160) == 1)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/NVS/src/NVSEngineKeyframeBased.cpp", 373, (uint64_t)"", 0, (uint64_t)"Orthographic NVS not supported for KeyframeWarping-based rendering methods", 74, (void (*)(void **))sub_22457406C);
    abort();
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, a3);
  v8 = *a4;
  DWORD2(v143[1]) = 0;
  sub_2232C8A68(v143, "NVSEngine(NovelViewRender).Input");
  if (DWORD2(v143[1]) == -1)
    sub_22316DD70();
  v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
  ((void (*)(void **__return_ptr, std::string *, _OWORD *))off_24EC375C0[DWORD2(v143[1])])(&__p, &v121, v143);
  if (DWORD2(v143[1]) != -1)
    ((void (*)(std::string *, _OWORD *))off_24EC375A8[DWORD2(v143[1])])(&v121, v143);
  sub_2231D7968(v8, (const void **)&__p);
  if (v130 < 0)
    operator delete(__p);
  std::chrono::steady_clock::now();
  v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(&__p, *(_QWORD *)(a1 + 24), *a4);
  *(_QWORD *)&v143[0] = "cv3d.recon.";
  *((_QWORD *)&v143[0] + 1) = 11;
  *(_QWORD *)&v143[1] = "Stats.NVSEngineWithNovelViewRender";
  *((_QWORD *)&v143[1] + 1) = 34;
  sub_2231A9820((uint64_t)v143, (uint64_t)v144, 0, 0, &v121);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v10 = sub_2241471F8();
    v11 = v10[2];
    if (!v11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v11 = v10[2];
    }
    v12 = *(_QWORD *)(v11 + 64);
    v13 = (std::mutex *)(v12 + 32);
    std::mutex::lock((std::mutex *)(v12 + 32));
    v15 = *(_QWORD *)(v12 + 96);
    v14 = *(_QWORD *)(v12 + 104);
    std::mutex::unlock(v13);
    if (v15 != v14)
    {
      sub_2241471F8();
      v16 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16))
      {
        memset(v143, 0, sizeof(v143));
        LODWORD(v144[0]) = 728325608;
        kdebug_trace();
        v17 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v9.__d_.__rep_) / 1000000.0;
        v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)v118 = v17;
        sub_22345EECC((double *)&qword_255788F20, v16, (float *)v118, "ComputeDepth (ms)");
        kdebug_trace();
      }
    }
  }
  memset(v143, 0, sizeof(v143));
  LODWORD(v144[0]) = 728325624;
  kdebug_trace();
  size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v121.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v19 = &v121;
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v121.__r_.__value_.__r.__words[0];
    v20 = v19->__r_.__value_.__r.__words[0];
    v21 = v19->__r_.__value_.__l.__size_;
    v22 = v19->__r_.__value_.__s.__data_[16];
    if (v20 == 0x6365722E64337663 && v21 == 0x73746174532E6E6FLL && v22 == 46)
    {
      v25 = sub_223187510();
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v121;
      else
        v26 = (std::string *)v121.__r_.__value_.__r.__words[0];
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      else
        v27 = v121.__r_.__value_.__l.__size_;
      v28 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v9.__d_.__rep_) / 1000000.0;
      std::chrono::steady_clock::now();
      *(float *)v118 = v28;
      sub_2231897A8((uint64_t *)v25, v26, v27, (float *)v118, (uint64_t)"ComputeDepth (ms)", 17);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  sub_2231CC34C(*a4, (uint64_t)&v121);
  v29 = v121.__r_.__value_.__l.__size_;
  if (!v121.__r_.__value_.__l.__size_)
    goto LABEL_53;
  v30 = (std::__shared_weak_count *)v121.__r_.__value_.__r.__words[2];
  if (!v121.__r_.__value_.__r.__words[2])
    goto LABEL_49;
  v31 = (unint64_t *)(v121.__r_.__value_.__r.__words[2] + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
  do
    v33 = __ldaxr(v31);
  while (__stlxr(v33 - 1, v31));
  if (v33)
  {
    v34 = (std::__shared_weak_count *)v121.__r_.__value_.__r.__words[2];
    v29 = v121.__r_.__value_.__l.__size_;
    if (!v121.__r_.__value_.__r.__words[2])
      goto LABEL_49;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v34 = (std::__shared_weak_count *)v121.__r_.__value_.__r.__words[2];
    v29 = v121.__r_.__value_.__l.__size_;
    if (!v121.__r_.__value_.__r.__words[2])
      goto LABEL_49;
  }
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldxr(p_shared_owners);
  while (__stxr(v36 + 1, p_shared_owners));
  do
    v37 = __ldaxr(p_shared_owners);
  while (__stlxr(v37 - 1, p_shared_owners));
  if (v37)
  {
LABEL_49:
    if (v126)
      goto LABEL_50;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  if (v126)
  {
LABEL_50:
    (*(void (**)(_OWORD *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v29 + 96))(v143, v29, 1);
    v38 = v122;
    v39 = v123;
    v40 = HIDWORD(v123);
    if (!v125)
      goto LABEL_62;
    goto LABEL_54;
  }
LABEL_53:
  *(_QWORD *)&v143[0] = 0;
  v38 = v122;
  v39 = v123;
  v40 = HIDWORD(v123);
  if (!v125)
    goto LABEL_62;
LABEL_54:
  if (v38)
  {
    v41 = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
    if (v121.__r_.__value_.__r.__words[2])
    {
      v42 = (unint64_t *)(v121.__r_.__value_.__r.__words[2] + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      do
        v44 = __ldaxr(v42);
      while (__stlxr(v44 - 1, v42));
      if (!v44)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v41 + 1) + 16))(*((_QWORD *)&v41 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v41 + 1));
      }
    }
    (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v41 + 88))(v41, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v38 = v122;
    LODWORD(v40) = HIDWORD(v123);
  }
LABEL_62:
  v45 = v124 * v40;
  if (v124 * (_DWORD)v40)
    v46 = v39 == 0;
  else
    v46 = 1;
  if (!v46)
  {
    v47 = 0;
    v48 = 2 * v124;
    v49 = v38 + 2 * v45;
    do
    {
      v50 = 0;
      v51 = 2 * v39;
      do
      {
        _S0 = *((_DWORD *)v131 + (v128 * v50 + v129 * v47));
        __asm { FCVT            H0, S0 }
        *(_WORD *)(v38 + 2 * v50++) = _S0;
        v51 -= 2;
      }
      while (v51);
      v38 += v48;
      ++v47;
    }
    while (v38 != v49);
  }
  v56 = *(_QWORD *)&v143[0];
  *(_QWORD *)&v143[0] = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_2231CC3F0(*a4, (uint64_t)v143);
  LODWORD(v118[0]) = 1065353216;
  sub_22320BDC8((uint64_t)v143, (int *)v118, v57);
  v58 = *(std::__shared_weak_count **)&v143[1];
  if (*(_QWORD *)&v143[1])
  {
    v59 = (unint64_t *)(*(_QWORD *)&v143[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v61 = sub_2241471F8();
    v62 = v61[2];
    if (!v62)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v62 = v61[2];
    }
    v63 = *(_QWORD *)(v62 + 64);
    v64 = (std::mutex *)(v63 + 32);
    std::mutex::lock((std::mutex *)(v63 + 32));
    v66 = *(_QWORD *)(v63 + 96);
    v65 = *(_QWORD *)(v63 + 104);
    std::mutex::unlock(v64);
    if (v66 != v65)
    {
      *(_QWORD *)&v143[0] = "cv3d.recon.";
      *((_QWORD *)&v143[0] + 1) = 11;
      *(_QWORD *)&v143[1] = "Keyframing.NVSEngine(NovelViewRender).Output";
      *((_QWORD *)&v143[1] + 1) = 44;
      sub_2231A9820((uint64_t)v143, (uint64_t)v144, 0, 0, &v120);
      sub_2241471F8();
      v67 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67))
      {
        memset(v118, 0, sizeof(v118));
        v119 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67))
        {
          *(_QWORD *)&v132 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v132 + 1) = 2;
          v68 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67))
          {
            *(_QWORD *)&v143[0] = &off_24EC1FE80;
            sub_2231DB98C(&v123, word_2246C3BE4, (_WORD *)v143 + 4);
            v70 = *((_QWORD *)&v143[0] + 1);
            v69 = *(std::__shared_weak_count **)&v143[1];
            if (*(_QWORD *)&v143[1])
            {
              v71 = (unint64_t *)(*(_QWORD *)&v143[1] + 8);
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 1, v71));
              do
                v73 = __ldaxr(v71);
              while (__stlxr(v73 - 1, v71));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            if (v70 && v148)
              (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)&v143[0] + 1) + 96))(&v136, *((_QWORD *)&v143[0] + 1), 1);
            else
              v136 = 0;
            v74 = v145;
            v75 = v144[0];
            v76 = HIDWORD(v145);
            if (v147 && v144[0])
            {
              (*(void (**)(_QWORD, uint64_t, const char *))(**((_QWORD **)&v143[0] + 1) + 88))(*((_QWORD *)&v143[0] + 1), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
              v75 = v144[0];
              LODWORD(v76) = HIDWORD(v145);
            }
            v77 = v146 * v76;
            if (v146 * (_DWORD)v76)
              v78 = v74 == 0;
            else
              v78 = 1;
            if (!v78)
            {
              v79 = 0;
              v80 = 2 * v146;
              v81 = v75 + 2 * v77;
              do
              {
                v82 = 0;
                v83 = 2 * v74;
                do
                {
                  _S0 = *((_DWORD *)v131 + (v128 * v82 + v129 * v79));
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)(v75 + 2 * v82++) = _S0;
                  v83 -= 2;
                }
                while (v83);
                v75 += v80;
                ++v79;
              }
              while (v75 != v81);
            }
            v85 = v136;
            v136 = 0;
            if (v85)
              (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
            v136 = (void *)0x6874706564;
            *(_QWORD *)v137 = v142[0];
            *(_QWORD *)&v137[7] = *(_QWORD *)((char *)v142 + 7);
            v138 = 261;
            v142[0] = 0;
            *(_QWORD *)((char *)v142 + 7) = 0;
            sub_22346A8B4((uint64_t)v143, (__int128 *)&v136, &v132, &v139);
            if (HIBYTE(v138) && (char)v138 < 0)
              operator delete(v136);
            v86 = *(std::__shared_weak_count **)&v143[1];
            if (*(_QWORD *)&v143[1])
            {
              v87 = (unint64_t *)(*(_QWORD *)&v143[1] + 8);
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
            }
            v89 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 56))(v67);
            v90 = *v89;
            v91 = (std::__shared_weak_count *)v89[1];
            if (v91)
            {
              v92 = (unint64_t *)&v91->__shared_owners_;
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
            }
            v95 = v140;
            v94 = v141;
            v133 = &off_24EC6A3B8;
            v134 = v140;
            v135 = v141;
            v140 = 0;
            v141 = 0;
            *(_QWORD *)&v143[0] = v90;
            *((_QWORD *)&v143[0] + 1) = v91;
            if (v91)
            {
              v96 = (unint64_t *)&v91->__shared_owners_;
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
            }
            *(_QWORD *)&v143[1] = &off_24EC6A3B8;
            *((_QWORD *)&v143[1] + 1) = v95;
            v144[0] = v94;
            if (v94)
            {
              v98 = (unint64_t *)&v94->__shared_owners_;
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
            }
            (*(void (**)(uint64_t *, _OWORD *))(*v68 + 16))(v68, v143);
            v100 = (std::__shared_weak_count *)v144[0];
            if (v144[0])
            {
              v101 = (unint64_t *)(v144[0] + 8);
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            v103 = (std::__shared_weak_count *)*((_QWORD *)&v143[0] + 1);
            if (*((_QWORD *)&v143[0] + 1))
            {
              v104 = (unint64_t *)(*((_QWORD *)&v143[0] + 1) + 8);
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            v106 = v135;
            if (v135)
            {
              v107 = (unint64_t *)&v135->__shared_owners_;
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            if (v91)
            {
              v109 = (unint64_t *)&v91->__shared_owners_;
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v111 = v141;
            if (v141)
            {
              v112 = (unint64_t *)&v141->__shared_owners_;
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
    }
  }
  v114 = *a4;
  *(_QWORD *)&v143[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v143 + 8) = xmmword_2245C43F0;
  strcpy(*(char **)&v143[0], "NVSEngine(NovelViewRender).cpu_kf_ptr_update");
  sub_2231D7968(v114, (const void **)v143);
  if (SBYTE7(v143[1]) < 0)
    operator delete(*(void **)&v143[0]);
  v115 = (std::__shared_weak_count *)v121.__r_.__value_.__r.__words[2];
  if (v121.__r_.__value_.__r.__words[2])
  {
    v116 = (unint64_t *)(v121.__r_.__value_.__r.__words[2] + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  if (v131)
    free(v131);
}

void sub_22345ECA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  uint64_t v53;
  uint64_t v54;

  sub_223167354(v54);
  sub_2231874DC((uint64_t)&a9);
  if (a19 < 0)
    operator delete(__p);
  sub_2231BD974((uint64_t)&a20);
  if (a38)
    free(a38);
  sub_223167354(v53);
  _Unwind_Resume(a1);
}

void sub_22345EECC(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22345EFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22345F008(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_24EC37338;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_22345F0F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_24EC37338;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22345F1E8(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *a1 = &off_24EC37360;
  v2 = (void *)a1[128];
  if (v2)
  {
    a1[129] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[125];
  if (v3)
  {
    a1[126] = v3;
    operator delete(v3);
  }
  sub_2237F9C84(a1 + 28);
  v4 = (std::__shared_weak_count *)a1[26];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[13] = &off_24EC220E0;
  a1[1] = &off_24EC220E0;
  return a1;
}

void sub_22345F284(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *a1 = &off_24EC37360;
  v2 = (void *)a1[128];
  if (v2)
  {
    a1[129] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[125];
  if (v3)
  {
    a1[126] = v3;
    operator delete(v3);
  }
  sub_2237F9C84(a1 + 28);
  v4 = (std::__shared_weak_count *)a1[26];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[13] = &off_24EC220E0;
  a1[1] = &off_24EC220E0;
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22345F330(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24EC37388;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1[3];
      a1[3] = 0;
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    return a1;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22345F404(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24EC37388;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = a1[3];
    a1[3] = 0;
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = a1[3];
    a1[3] = 0;
    if (!v5)
      goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  goto LABEL_7;
}

_QWORD *sub_22345F4D8(_QWORD *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    if (v7 >= 0x666666666666667)
      sub_22316E078();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[40 * v7];
    a1[1] = sub_2231F708C(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_22345F580(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 40;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_22345F5E0(_QWORD *a1)
{
  *a1 = &off_24EC220E0;
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22345F600()
{
  return 1;
}

uint64_t sub_22345F608(uint64_t a1)
{
  int32x4_t v2;
  _QWORD *v3;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;

  *(_QWORD *)a1 = off_24EC21D40;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(a1 + 48) = v2;
  *(int32x4_t *)(a1 + 64) = v2;
  *(int32x4_t *)(a1 + 80) = v2;
  *(_DWORD *)(a1 + 96) = 2143289344;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 16) = &off_24EC207B8;
  *(_QWORD *)(a1 + 24) = &off_24EC20868;
  v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24EC24E18;
  v3[4] = 0;
  v3[5] = 0;
  v3[3] = 0;
  *(_QWORD *)(a1 + 112) = v3 + 3;
  *(_QWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 128) = 0;
  *(int32x2_t *)(a1 + 132) = vdup_n_s32(0xC77FE000);
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 140) = -947920896;
  v17 = 0;
  v16 = 0;
  v18 = 0;
  v5 = vdupq_n_s32(0x3CF83E10u);
  v6 = v5;
  v7 = v5;
  v8 = v5;
  v9 = v5;
  v10 = v5;
  v11 = v5;
  v12 = v5;
  v13 = 1022901776;
  v14 = 32;
  v15 = 0;
  v19 = 0;
  v20 = 1065353216;
  v21 = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  v22 = 0;
  *(_QWORD *)&v23 = 0;
  sub_2232071B8((_QWORD *)(a1 + 176), &v22, (unint64_t *)&v23, 1, (__int128 *)v5.i8, 1, 0);
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 308) = 0;
  v6.i64[0] = 0;
  v5 = (int32x4_t)(unint64_t)&v5.u64[1];
  sub_224530B6C(&v5, &v23);
  *(_OWORD *)(a1 + 312) = v23;
  sub_22323DF84((uint64_t)&v5, (char *)v5.i64[1]);
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 364) = 0;
  return a1;
}

void sub_22345F798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  sub_22323DF84((uint64_t)&a9, a10);
  if (*(_BYTE *)(v10 + 296))
    sub_2231DC94C(v12);
  sub_2231CFA24(v11);
  sub_223167354(v10 + 112);
  *(_QWORD *)(v10 + 16) = &off_24EC20828;
  _Unwind_Resume(a1);
}

void sub_22345F7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = &off_24EC20828;
  _Unwind_Resume(a1);
}

void sub_22345F7F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC373F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22345F804(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC373F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22345F834(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22345F844(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22345F854(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22345F884(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[24];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[22];
      if (v5)
        goto LABEL_6;
      return sub_2237F9FC0(a1 + 3);
    }
  }
  v5 = (std::__shared_weak_count *)a1[22];
  if (!v5)
    return sub_2237F9FC0(a1 + 3);
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return sub_2237F9FC0(a1 + 3);
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return sub_2237F9FC0(a1 + 3);
}

void sub_22345F934(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22345F944(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22345F974(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22345F988()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22345F99C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC374E8;
  return result;
}

void sub_22345F9C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC374E8;
}

uint64_t sub_22345F9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_223226B8C(a2, a2, a3, a4, a5, a6);
  sub_223226B80(a2, v7, v8, v9, v10, v11);
  sub_223226B98(a2, v12, v13, v14, v15, v16);
  sub_223226B8C(a2, v17, v18, v19, v20, v21);
  sub_223226BA4(a2, v22, v23, v24, v25, v26);
  sub_223226B98(a2, v27, v28, v29, v30, v31);
  return kdebug_trace();
}

uint64_t sub_22345FA84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3nvs24NVSEngineComputePipeline11GenerateNVSERKNS1_8NVSSceneERKNS1_10NVSRequestEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3nvs24NVSEngineComputePipeline11GenerateNVSERKNS1_8NVSSceneERKNS1_10NVSRequestEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3nvs24NVSEngineComputePipeline11GenerateNVSERKNS1_8NVSSceneERKNS1_10NVSRequestEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3nvs24NVSEngineComputePipeline11GenerateNVSERKNS1_8NVSSceneERKNS1_10NVSRequestEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22345FAF0()
{
  return &unk_24EC37548;
}

void sub_22345FAFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22345FB0C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22345FB3C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22345FB4C(_QWORD *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  float16x4_t v6;
  float16x4_t v7;
  float16x4_t v8;
  float16x4_t v9;
  float16x4_t v10;
  unint64_t v11;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t v16;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int32x4_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v32;
  float32x4_t v41;
  BOOL v42;
  BOOL v45;
  _BOOL4 v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  __int32 v54;
  uint64_t v55;
  unsigned __int8 v58;
  unsigned __int8 v59;
  float32x4_t v60;
  float v61;
  float32x2_t v64;
  float32x4_t v66;
  float v69;
  float v70;
  int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  int v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  int v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  int v111;
  __int32 v112;
  int v113;
  int v114;
  unint64_t v115;
  uint64_t v116;
  float32x4_t *v117;
  int32x4_t v118;
  int32x2_t v119;
  unint64_t v123;
  unsigned int v124;
  unsigned int v125;
  float v126;
  uint64_t v127;
  float v128;
  float v129;
  float v130;
  uint64_t v131;
  float32x4_t v132;
  float32x4_t v133;
  unsigned int v134;
  int8x16_t v140;
  _BOOL4 v143;
  uint64_t v144;
  float32x4_t v148;
  float v153;
  uint64_t v156;
  uint64_t v157;
  __int32 v159;
  uint64_t v160;
  uint64_t v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  uint64_t v166;
  float32x4_t v168;
  float32x4_t v170;
  float v171;
  float v172;
  float v175;
  float32x2_t v176;
  float32x4_t v178;
  uint64_t v179;
  float v182;
  float v183;
  int v185;
  float v186;
  float v187;
  uint64_t v188;
  float v189;
  int8x16_t *v190;
  char *v191;
  int8x16_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  float v197;
  float v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint32x4_t v203;
  uint64_t v204;
  __int8 *v205;
  float v206;
  float v207;
  float v208;
  float v209;
  int v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  int v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  uint64_t v229;
  uint64_t v230;
  float v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint32x4_t v237;
  uint64_t v238;
  __int8 *v239;
  int v240;
  __int32 v241;
  int v242;
  int v243;
  unint64_t v244;
  uint64_t v245;
  float32x4_t *v246;
  int32x4_t v247;
  int32x2_t v248;
  unint64_t v252;
  unsigned int v253;
  unsigned int v254;
  float v255;
  uint64_t v256;
  float v257;
  float v258;
  float v259;
  uint64_t v260;
  float32x4_t v261;
  float32x4_t v262;
  unsigned int v263;
  int8x16_t v269;
  _BOOL4 v272;
  uint64_t v273;
  float32x4_t v277;
  float v282;
  uint64_t v285;
  uint64_t v286;
  __int32 v288;
  uint64_t v289;
  uint64_t v292;
  unsigned __int8 v293;
  unsigned __int8 v294;
  uint64_t v295;
  float32x4_t v297;
  float32x4_t v299;
  float v300;
  float v301;
  float v304;
  float32x2_t v305;
  float32x4_t v307;
  uint64_t v308;
  float v311;
  float v312;
  int v314;
  float v315;
  float v316;
  uint64_t v317;
  float v318;
  int8x16_t *v319;
  char *v320;
  int8x16_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  float v325;
  float v326;
  float v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint32x4_t v332;
  uint64_t v333;
  __int8 *v334;
  float v335;
  float v336;
  float v337;
  float v338;
  int v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  int v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  uint64_t v358;
  uint64_t v359;
  float v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  uint32x4_t v366;
  uint64_t v367;
  __int8 *v368;
  int v369;
  __int32 v370;
  int v371;
  int v372;
  unint64_t v373;
  unint64_t v374;
  int32x4_t v376;
  float16x4_t v379;
  unsigned int v382;
  unsigned int v383;
  unint64_t v384;
  float v385;
  uint64_t v386;
  float v387;
  float v388;
  float v389;
  uint64_t v390;
  int v393;
  int v394;
  uint64_t v395;
  float v401;
  __int16 v403;
  uint64_t v404;
  int v406;
  int v407;
  uint64_t v408;
  _BOOL4 v409;
  float32x4_t v410;
  float v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v422;
  uint64_t v423;
  __int32 v425;
  uint64_t v426;
  uint64_t v429;
  unsigned __int8 v430;
  unsigned __int8 v431;
  uint64_t v432;
  float32x4_t v435;
  float32x4_t v437;
  float32x4_t v439;
  float v440;
  float v441;
  float v445;
  float32x4_t v447;
  float32x2_t v449;
  uint64_t v451;
  float v453;
  float v454;
  int v457;
  float v458;
  float v459;
  uint64_t v460;
  float32x4_t *v461;
  uint64_t v462;
  int8x16_t *v463;
  int8x16_t *v464;
  int8x16_t *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  float v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  float v474;
  float v475;
  float v476;
  uint64_t *v477;
  uint64_t v478;
  uint64_t v479;
  __int8 *v480;
  float v482;
  float v483;
  int v484;
  float v485;
  float v486;
  float v487;
  float v488;
  float v489;
  uint64_t v490;
  float v491;
  float v492;
  float v493;
  float v494;
  float v495;
  float v496;
  float v497;
  float v498;
  float v499;
  int v500;
  float v501;
  float v502;
  float v503;
  float v504;
  float v505;
  float v506;
  uint64_t v507;
  int8x16_t v508;
  uint64_t v509;
  float v510;
  uint64_t v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  __int8 *v515;
  int v516;
  __int32 v517;
  int v518;
  int v519;
  uint64_t v520;
  float32x4_t v521;
  float32x4_t v523;
  unsigned int v524;
  float v525;
  float v526;
  uint64_t v527;
  int8x16_t v530;
  int8x16_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float v535;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  int v544;
  int v545;
  uint64_t v546;
  char v547;
  float16x4_t *v548;
  float32x4_t v549;
  float32x4_t v550;
  int v557;
  int v558;
  uint64_t v559;
  _BOOL4 v560;
  uint64_t v561;
  int32x4_t v563;
  unsigned int v568;
  float v569;
  float v570;
  float v571;
  float v572;
  uint64_t v573;
  float v578;
  __int16 v580;
  uint64_t v581;
  uint64_t v582;
  int v584;
  int v585;
  uint64_t v586;
  _BOOL4 v587;
  float32x4_t v589;
  float v595;
  uint64_t v597;
  uint64_t v598;
  uint64_t v601;
  __int32 v603;
  uint64_t v604;
  unsigned __int8 v607;
  unsigned __int8 v608;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float v614;
  float v615;
  float v616;
  float32x4_t v620;
  float32x2_t v621;
  float v624;
  float v625;
  int v628;
  float v629;
  float v630;
  float v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int v638;
  int v639;
  uint64_t v640;
  float v642;
  float v643;
  float v644;
  float32x4_t *v646;
  float v647;
  float v648;
  int v649;
  float v650;
  float v651;
  float v652;
  float v653;
  float v654;
  float v655;
  float v656;
  float v657;
  float v658;
  float v659;
  float v660;
  float v661;
  float v662;
  float v663;
  int v664;
  float v665;
  float v666;
  float v667;
  float v668;
  float v669;
  float32x4_t v670;
  int v671;
  __int32 v672;
  int v673;
  int v674;
  unint64_t v675;
  unint64_t v676;
  int32x4_t v678;
  float16x4_t v681;
  unsigned int v684;
  unsigned int v685;
  unint64_t v686;
  float v687;
  uint64_t v688;
  float v689;
  float v690;
  float v691;
  uint64_t v692;
  int v695;
  int v696;
  uint64_t v697;
  float v703;
  __int16 v705;
  uint64_t v706;
  int v708;
  int v709;
  uint64_t v710;
  _BOOL4 v711;
  float32x4_t v712;
  float v718;
  unsigned int v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v724;
  uint64_t v725;
  __int32 v727;
  uint64_t v728;
  uint64_t v731;
  unsigned __int8 v732;
  unsigned __int8 v733;
  uint64_t v734;
  float32x4_t v737;
  float32x4_t v739;
  float32x4_t v741;
  float v742;
  float v743;
  float v747;
  float32x4_t v749;
  float32x2_t v751;
  uint64_t v753;
  int8x16_t *v755;
  int8x16_t *v756;
  int8x16_t *v757;
  float v758;
  float v759;
  int v762;
  float v763;
  float v764;
  uint64_t v765;
  float32x4_t *v766;
  uint64_t v767;
  float v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  float v776;
  float v777;
  float v778;
  uint64_t *v779;
  uint64_t v780;
  uint64_t v781;
  __int8 *v782;
  float v784;
  float v785;
  int v786;
  float v787;
  float v788;
  float v789;
  float v790;
  float v791;
  uint64_t v792;
  float v793;
  float v794;
  float v795;
  float v796;
  float v797;
  float v798;
  float v799;
  float v800;
  float v801;
  int v802;
  float v803;
  float v804;
  float v805;
  float v806;
  float v807;
  float v808;
  uint64_t v809;
  int8x16_t v810;
  uint64_t v811;
  float v812;
  uint64_t v813;
  uint64_t *v814;
  uint64_t v815;
  uint64_t v816;
  __int8 *v817;
  int v818;
  __int32 v819;
  int v820;
  int v821;
  unint64_t v822;
  uint64_t v823;
  float32x4_t *v824;
  int32x2_t v825;
  float32x2_t v826;
  unint64_t v829;
  unsigned int v830;
  unsigned int v831;
  float v832;
  uint64_t v833;
  float v834;
  float v835;
  float v836;
  float v837;
  int8x16_t *v838;
  uint64_t v839;
  float32x4_t v840;
  float32x4_t v841;
  unsigned int v842;
  int8x16_t v847;
  int32x4_t v850;
  _BOOL4 v853;
  uint64_t v854;
  float32x4_t v858;
  float v864;
  uint64_t v865;
  unsigned int v866;
  uint64_t v867;
  uint64_t v868;
  __int32 v871;
  int32x2_t *v872;
  unsigned __int8 v875;
  unsigned __int8 v876;
  uint64_t v877;
  uint64_t v878;
  float32x4_t v880;
  float32x4_t v882;
  float v883;
  float v884;
  float v887;
  float32x2_t v890;
  float32x4_t v892;
  uint64_t v893;
  uint64_t v894;
  float v897;
  float v898;
  float v900;
  int v901;
  float v902;
  float v903;
  float v904;
  uint64_t v905;
  int8x16_t *v906;
  int8x16_t *v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  float v913;
  float v914;
  float v915;
  uint64_t v916;
  uint64_t *v917;
  uint64_t v918;
  uint32x4_t v919;
  uint64_t v920;
  __int8 *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t *v925;
  uint64_t v926;
  uint32x4_t v927;
  uint64_t v928;
  __int8 *v929;
  float v930;
  float v931;
  int v932;
  float v933;
  float v934;
  float v935;
  float v936;
  float v937;
  float v938;
  float v939;
  float v940;
  float v941;
  float v942;
  float v943;
  float v944;
  float v945;
  int v946;
  float v947;
  float v948;
  float v949;
  float v950;
  float v951;
  float v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  float v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t *v959;
  uint64_t v960;
  uint64_t v961;
  __int8 *v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t *v965;
  uint64_t v966;
  uint64_t v967;
  __int8 *v968;
  int v969;
  __int32 v970;
  int v971;
  int v972;
  std::__shared_weak_count *v973;
  unint64_t *v974;
  unint64_t v975;
  std::__shared_weak_count *v976;
  unint64_t *v977;
  unint64_t v978;
  std::__shared_weak_count *v979;
  unint64_t *v980;
  unint64_t v981;
  std::__shared_weak_count *v982;
  unint64_t *v983;
  unint64_t v984;
  std::__shared_weak_count *v985;
  unint64_t *v986;
  unint64_t v987;
  std::__shared_weak_count *v988;
  unint64_t *v989;
  unint64_t v990;
  std::__shared_weak_count *v991;
  unint64_t *v992;
  unint64_t v993;
  std::__shared_weak_count *v994;
  unint64_t *v995;
  unint64_t v996;
  std::__shared_weak_count *v997;
  unint64_t *v998;
  unint64_t v999;
  std::__shared_weak_count *v1000;
  unint64_t *v1001;
  unint64_t v1002;
  std::__shared_weak_count *v1003;
  unint64_t *v1004;
  unint64_t v1005;
  std::__shared_weak_count *v1006;
  unint64_t *v1007;
  unint64_t v1008;
  std::__shared_weak_count *v1009;
  unint64_t *v1010;
  unint64_t v1011;
  std::__shared_weak_count *v1012;
  unint64_t *v1013;
  unint64_t v1014;
  std::__shared_weak_count *v1015;
  unint64_t *v1016;
  unint64_t v1017;
  std::__shared_weak_count *v1018;
  unint64_t *v1019;
  unint64_t v1020;
  std::__shared_weak_count *v1021;
  unint64_t *v1022;
  unint64_t v1023;
  std::__shared_weak_count *v1024;
  unint64_t *v1025;
  unint64_t v1026;
  std::__shared_weak_count *v1027;
  unint64_t *v1028;
  unint64_t v1029;
  std::__shared_weak_count *v1030;
  unint64_t *v1031;
  unint64_t v1032;
  std::__shared_weak_count *v1033;
  unint64_t *v1034;
  unint64_t v1035;
  std::__shared_weak_count *v1036;
  unint64_t *v1037;
  unint64_t v1038;
  std::__shared_weak_count *v1039;
  unint64_t *v1040;
  unint64_t v1041;
  std::__shared_weak_count *v1042;
  unint64_t *v1043;
  unint64_t v1044;
  std::__shared_weak_count *v1045;
  unint64_t *v1046;
  unint64_t v1047;
  std::__shared_weak_count *v1048;
  unint64_t *v1049;
  unint64_t v1050;
  std::__shared_weak_count *v1051;
  unint64_t *v1052;
  unint64_t v1053;
  std::__shared_weak_count *v1054;
  unint64_t *v1055;
  unint64_t v1056;
  std::__shared_weak_count *v1057;
  unint64_t *v1058;
  unint64_t v1059;
  unint64_t *v1060;
  std::__shared_weak_count *v1061;
  unint64_t *p_shared_owners;
  unint64_t v1063;
  std::__shared_weak_count *v1064;
  unint64_t *v1065;
  unint64_t v1066;
  std::__shared_weak_count *v1067;
  unint64_t *v1068;
  unint64_t v1069;
  std::__shared_weak_count *v1070;
  unint64_t *v1071;
  unint64_t v1072;
  std::__shared_weak_count *v1073;
  unint64_t *v1074;
  unint64_t v1075;
  std::__shared_weak_count *v1076;
  unint64_t *v1077;
  unint64_t v1078;
  std::__shared_weak_count *v1079;
  unint64_t *v1080;
  unint64_t v1081;
  std::__shared_weak_count *v1082;
  unint64_t *v1083;
  unint64_t v1084;
  std::__shared_weak_count *v1085;
  unint64_t *v1086;
  unint64_t v1087;
  std::__shared_weak_count *v1088;
  unint64_t *v1089;
  unint64_t v1090;
  std::__shared_weak_count *v1091;
  unint64_t *v1092;
  unint64_t v1093;
  std::__shared_weak_count *v1094;
  unint64_t *v1095;
  unint64_t v1096;
  std::__shared_weak_count *v1097;
  unint64_t *v1098;
  unint64_t v1099;
  std::__shared_weak_count *v1100;
  unint64_t *v1101;
  unint64_t v1102;
  unint64_t *v1103;
  std::__shared_weak_count *v1104;
  unint64_t *v1105;
  unint64_t v1106;
  std::__shared_weak_count *v1107;
  unint64_t *v1108;
  unint64_t v1109;
  std::__shared_weak_count *v1110;
  unint64_t *v1111;
  unint64_t v1112;
  std::__shared_weak_count *v1113;
  unint64_t *v1114;
  unint64_t v1115;
  std::__shared_weak_count *v1116;
  unint64_t *v1117;
  unint64_t v1118;
  std::__shared_weak_count *v1119;
  unint64_t *v1120;
  unint64_t v1121;
  std::__shared_weak_count *v1122;
  unint64_t *v1123;
  unint64_t v1124;
  std::__shared_weak_count *v1125;
  unint64_t *v1126;
  unint64_t v1127;
  std::__shared_weak_count *v1128;
  unint64_t *v1129;
  unint64_t v1130;
  std::__shared_weak_count *v1131;
  unint64_t *v1132;
  unint64_t v1133;
  std::__shared_weak_count *v1134;
  unint64_t *v1135;
  unint64_t v1136;
  std::__shared_weak_count *v1137;
  unint64_t *v1138;
  unint64_t v1139;
  std::__shared_weak_count *v1140;
  unint64_t *v1141;
  unint64_t v1142;
  std::__shared_weak_count *v1143;
  unint64_t *v1144;
  unint64_t v1145;
  unint64_t *v1146;
  std::__shared_weak_count *v1147;
  unint64_t *v1148;
  unint64_t v1149;
  std::__shared_weak_count *v1150;
  unint64_t *v1151;
  unint64_t v1152;
  std::__shared_weak_count *v1153;
  unint64_t *v1154;
  unint64_t v1155;
  std::__shared_weak_count *v1156;
  unint64_t *v1157;
  unint64_t v1158;
  std::__shared_weak_count *v1159;
  unint64_t *v1160;
  unint64_t v1161;
  std::__shared_weak_count *v1162;
  unint64_t *v1163;
  unint64_t v1164;
  std::__shared_weak_count *v1165;
  unint64_t *v1166;
  unint64_t v1167;
  std::__shared_weak_count *v1168;
  unint64_t *v1169;
  unint64_t v1170;
  std::__shared_weak_count *v1171;
  unint64_t *v1172;
  unint64_t v1173;
  std::__shared_weak_count *v1174;
  unint64_t *v1175;
  unint64_t v1176;
  std::__shared_weak_count *v1177;
  unint64_t *v1178;
  unint64_t v1179;
  std::__shared_weak_count *v1180;
  unint64_t *v1181;
  unint64_t v1182;
  std::__shared_weak_count *v1183;
  unint64_t *v1184;
  unint64_t v1185;
  std::__shared_weak_count *v1186;
  unint64_t *v1187;
  unint64_t v1188;
  unint64_t *v1189;
  std::__shared_weak_count *v1190;
  unint64_t *v1191;
  unint64_t v1192;
  std::__shared_weak_count *v1193;
  unint64_t *v1194;
  unint64_t v1195;
  std::__shared_weak_count *v1196;
  unint64_t *v1197;
  unint64_t v1198;
  std::__shared_weak_count *v1199;
  unint64_t *v1200;
  unint64_t v1201;
  std::__shared_weak_count *v1202;
  unint64_t *v1203;
  unint64_t v1204;
  std::__shared_weak_count *v1205;
  unint64_t *v1206;
  unint64_t v1207;
  std::__shared_weak_count *v1208;
  unint64_t *v1209;
  unint64_t v1210;
  std::__shared_weak_count *v1211;
  unint64_t *v1212;
  unint64_t v1213;
  std::__shared_weak_count *v1214;
  unint64_t *v1215;
  unint64_t v1216;
  std::__shared_weak_count *v1217;
  unint64_t *v1218;
  unint64_t v1219;
  std::__shared_weak_count *v1220;
  unint64_t *v1221;
  unint64_t v1222;
  std::__shared_weak_count *v1223;
  unint64_t *v1224;
  unint64_t v1225;
  std::__shared_weak_count *v1226;
  unint64_t *v1227;
  unint64_t v1228;
  std::__shared_weak_count *v1229;
  unint64_t *v1230;
  unint64_t v1231;
  unint64_t *v1232;
  std::__shared_weak_count *v1233;
  unint64_t *v1234;
  unint64_t v1235;
  std::__shared_weak_count *v1236;
  unint64_t *v1237;
  unint64_t v1238;
  std::__shared_weak_count *v1239;
  unint64_t *v1240;
  unint64_t v1241;
  std::__shared_weak_count *v1242;
  unint64_t *v1243;
  unint64_t v1244;
  std::__shared_weak_count *v1245;
  unint64_t *v1246;
  unint64_t v1247;
  std::__shared_weak_count *v1248;
  unint64_t *v1249;
  unint64_t v1250;
  std::__shared_weak_count *v1251;
  unint64_t *v1252;
  unint64_t v1253;
  std::__shared_weak_count *v1254;
  unint64_t *v1255;
  unint64_t v1256;
  std::__shared_weak_count *v1257;
  unint64_t *v1258;
  unint64_t v1259;
  std::__shared_weak_count *v1260;
  unint64_t *v1261;
  unint64_t v1262;
  std::__shared_weak_count *v1263;
  unint64_t *v1264;
  unint64_t v1265;
  std::__shared_weak_count *v1266;
  unint64_t *v1267;
  unint64_t v1268;
  std::__shared_weak_count *v1269;
  unint64_t *v1270;
  unint64_t v1271;
  std::__shared_weak_count *v1272;
  unint64_t *v1273;
  unint64_t v1274;
  unint64_t *v1275;
  std::__shared_weak_count *v1276;
  unint64_t *v1277;
  unint64_t v1278;
  std::__shared_weak_count *v1279;
  unint64_t *v1280;
  unint64_t v1281;
  std::__shared_weak_count *v1282;
  unint64_t *v1283;
  unint64_t v1284;
  std::__shared_weak_count *v1285;
  unint64_t *v1286;
  unint64_t v1287;
  std::__shared_weak_count *v1288;
  unint64_t *v1289;
  unint64_t v1290;
  std::__shared_weak_count *v1291;
  unint64_t *v1292;
  unint64_t v1293;
  std::__shared_weak_count *v1294;
  unint64_t *v1295;
  unint64_t v1296;
  std::__shared_weak_count *v1297;
  unint64_t *v1298;
  unint64_t v1299;
  std::__shared_weak_count *v1300;
  unint64_t *v1301;
  unint64_t v1302;
  std::__shared_weak_count *v1303;
  unint64_t *v1304;
  unint64_t v1305;
  std::__shared_weak_count *v1306;
  unint64_t *v1307;
  unint64_t v1308;
  std::__shared_weak_count *v1309;
  unint64_t *v1310;
  unint64_t v1311;
  std::__shared_weak_count *v1312;
  unint64_t *v1313;
  unint64_t v1314;
  std::__shared_weak_count *v1315;
  unint64_t *v1316;
  unint64_t v1317;
  unint64_t *v1318;
  __int16 v1319;
  __int16 v1320;
  __int16 v1321;
  __int16 v1322;
  __int16 v1323;
  __int16 v1324;
  __int16 v1325;
  __int16 v1326;
  __int16 v1327;
  __int16 v1328;
  __int16 v1329;
  __int16 v1330;
  float16x4_t v1331;
  float16x4_t v1332;
  float16x4_t v1333;
  float16x4_t v1334;
  float16x4_t v1335;
  float16x4_t v1336;
  __int16 v1337;
  __int16 v1338;
  __int16 v1339;
  __int16 v1340;
  __int16 v1341;
  __int16 v1342;
  __int16 v1343;
  __int16 v1344;
  __int16 v1345;
  __int16 v1346;
  __int16 v1347;
  __int16 v1348;
  __int16 v1349;
  __int16 v1350;
  __int16 v1351;
  __int16 v1352;
  __int16 v1353;
  __int16 v1354;
  __int16 v1355;
  __int16 v1356;
  __int16 v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  __int16 v1367;
  __int16 v1368;
  __int16 v1369;
  __int16 v1370;
  __int16 v1371;
  __int16 v1372;
  __int16 v1373;
  __int16 v1374;
  __int16 v1375;
  int v1376;
  __int16 v1377;
  __int16 v1378;
  __int16 v1379;
  int v1380;
  float v1381;
  float v1382;
  float v1383;
  __int16 v1384;
  __int16 v1385;
  __int16 v1386;
  __int16 v1387;
  __int16 v1388;
  __int16 v1389;
  unint64_t v1390;
  __int16 v1391;
  __int16 v1392;
  __int16 v1393;
  unint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  unsigned int v1404;
  unsigned int v1405;
  unsigned int v1406;
  unsigned int v1407;
  unsigned int v1408;
  __int16 v1409;
  __int16 v1410;
  __int16 v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  float32x4_t v1418;
  uint64_t v1419;
  float32x4_t v1420;
  unint64_t v1421;
  unint64_t v1422;
  unint64_t v1423;
  __int16 v1424;
  __int16 v1425;
  __int16 v1426;
  float v1427;
  float v1428;
  float v1429;
  float v1430;
  float v1431;
  float v1432;
  float v1433;
  float32x4_t v1434;
  float v1435;
  float v1436;
  float v1437;
  float v1438;
  float v1439;
  float v1440;
  float v1441;
  float v1442;
  float v1443;
  float v1444;
  float v1445;
  float v1446;
  float v1447;
  float v1448;
  float v1449;
  float v1450;
  float v1451;
  float v1452;
  float v1453;
  float v1454;
  float v1455;
  unsigned int v1456;
  unsigned int v1457;
  unsigned int v1458;
  unsigned int v1459;
  unsigned int v1460;
  unsigned int v1461;
  int v1462;
  int v1463;
  int v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  unint64_t v1468;
  unint64_t v1469;
  unint64_t v1470;
  unint64_t v1471;
  unint64_t v1472;
  unint64_t v1473;
  __int16 v1474;
  int v1475;
  __int16 v1476;
  float32x4_t v1477;
  unint64_t v1478;
  unint64_t v1479;
  unint64_t v1480;
  float v1481;
  float v1482;
  float v1483;
  float v1484;
  float v1485;
  float v1486;
  uint64_t v1487;
  uint64_t v1488;
  __int16 v1489;
  uint64_t v1490;
  float32x4_t v1491;
  float v1492;
  float v1493;
  float v1494;
  int v1495;
  int v1496;
  uint64_t v1497;
  float32x4_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  int v1501;
  __int128 v1502;
  float32x4_t v1503;
  float32x4_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  float32x4_t v1510;
  float32x4_t v1511;
  uint64_t v1512;
  int v1513;
  uint64_t v1514;
  uint64_t v1515;
  int32x2_t *v1516;
  float32x4_t v1517;
  int v1518;
  int v1519;
  __int16 v1520;
  uint64_t v1521;
  __int16 v1522;
  __int16 v1523;
  uint64_t v1524;
  float32x4_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  float32x4_t v1528;
  __int32 v1529;
  __int32 v1530;
  __int32 v1531;
  float v1532;
  float32x4_t v1533;
  float v1534;
  float v1535;
  float v1536;
  float32x4_t v1537;
  __int32 v1538;
  __int32 v1539;
  __int32 v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  float v1545;
  uint64_t v1546;
  __int32 v1547;
  __int32 v1548;
  __int32 v1549;
  float32x4_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  __int32 v1553;
  __int32 v1554;
  __int32 v1555;
  float v1556;
  uint64_t v1557;
  __int32 v1558;
  __int32 v1559;
  __int32 v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  float32x4_t v1565;
  float32x4_t v1566;
  float32x4_t v1567;
  float32x4_t v1568;
  uint64_t v1569;
  float32x4_t v1572;
  float32x4_t v1573;
  float v1574;
  __int32 v1575;
  float v1576[2];
  float32x4_t v1577;
  unint64_t v1578;
  unint64_t v1579;
  float32x4_t v1580;
  _BYTE v1581[16];
  std::__shared_weak_count *v1582;
  uint64_t (**v1583)();
  uint64_t v1584;
  std::__shared_weak_count *v1585;
  uint64_t (**v1586)();
  uint64_t v1587;
  std::__shared_weak_count *v1588;
  uint64_t (**v1589)();
  uint64_t v1590;
  std::__shared_weak_count *v1591;
  _BYTE v1592[16];
  std::__shared_weak_count *v1593;
  uint64_t v1594;
  int v1595;
  int v1596;
  _BYTE v1597[16];
  std::__shared_weak_count *v1598;
  uint64_t v1599;
  int v1600;
  int v1601;
  uint64_t (**v1602)();
  uint64_t v1603;
  std::__shared_weak_count *v1604;
  uint64_t v1605;
  int v1606;
  int v1607;
  uint64_t (**v1608)();
  uint64_t v1609;
  std::__shared_weak_count *v1610;
  uint64_t v1611;
  int v1612;
  int v1613;
  uint64_t (**v1614)();
  uint64_t v1615;
  std::__shared_weak_count *v1616;
  uint64_t v1617;
  int v1618;
  int v1619;
  _BYTE v1620[16];
  std::__shared_weak_count *v1621;
  _BYTE v1622[16];
  std::__shared_weak_count *v1623;
  uint64_t v1624;
  unsigned int v1625;
  unsigned int v1626;
  int v1627;
  int v1628;
  _BYTE v1629[16];
  std::__shared_weak_count *v1630;
  uint64_t v1631;
  int v1632;
  int v1633;
  uint64_t (**v1634)();
  uint64_t v1635;
  std::__shared_weak_count *v1636;
  uint64_t v1637;
  int v1638;
  int v1639;
  _BYTE v1640[16];
  std::__shared_weak_count *v1641;
  uint64_t v1642;
  int v1643;
  int v1644;
  _BYTE v1645[16];
  std::__shared_weak_count *v1646;
  uint64_t v1647;
  int v1648;
  int v1649;
  int8x16x2_t v1650;
  int8x16x2_t v1651;

  HIDWORD(v11) = a6 - 35;
  LODWORD(v11) = a6 - 35;
  v14 = (float32x4_t *)(a2 + 636);
  switch((v11 >> 2))
  {
    case 0u:
      sub_2231CC34C(a5, (uint64_t)v1645);
      sub_2231CC3F0(a5, (uint64_t)v1640);
      v1634 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1635);
      sub_2231CC874(a5, (uint64_t)v1629);
      sub_2231D3D90(a4, (uint64_t)v1622);
      sub_2231D4288(a4, (uint64_t)v1620);
      v1614 = &off_24EC25150;
      sub_223210C10((uint64_t)&v1615);
      v1608 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1609);
      v1602 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1603);
      v1509 = v14[8].u64[0];
      v15 = sub_2231D021C(a4);
      sub_2231CC34C((uint64_t)(a1 + 1), (uint64_t)v1597);
      sub_2231CC3F0((uint64_t)(a1 + 1), (uint64_t)v1592);
      v1589 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1590);
      v1586 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1587);
      v1583 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1584);
      sub_2231CC874((uint64_t)(a1 + 1), (uint64_t)v1581);
      v19 = HIDWORD(v1509);
      if (!HIDWORD(v1509) || !(_DWORD)v1509)
        goto LABEL_1453;
      v20 = 0;
      v21 = 0;
      v22 = (float)v15;
      v23 = (float)HIDWORD(v15);
      v24 = 0.5;
      v25 = 1.0;
      v26 = vdupq_n_s32(0x7FC00000u);
      v1502 = (__int128)v26;
      while (2)
      {
        v27 = 0;
        *(float *)v26.i32 = (float)v21;
        v16.f32[0] = (float)v21 + v24;
        v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 0);
        v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 0);
        v1517 = v28;
        v1525 = v29;
        do
        {
          _H15 = *(_WORD *)(v1599 + 2 * (v1600 * (_DWORD)v27 + v1601 * v21));
          __asm { FCVT            S14, H15 }
          if (_S14 > -65504.0)
          {
            v41 = v14[2];
            v26 = (int32x4_t)vmlaq_n_f32(vaddq_f32(v41, vmlaq_f32(vmulq_n_f32(*v14, (float)v27 + v24), v28, v14[1])), v14[3], v25 / _S14);
            *(float32x2_t *)v26.i8 = vdiv_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_laneq_s32(v26, 2));
            v42 = *(float *)v26.i32 >= 0.0 && *(float *)v26.i32 < v22;
            if (v42 && *(float *)&v26.i32[1] >= 0.0 && *(float *)&v26.i32[1] < v23)
            {
              v1562 = v1648 * (_DWORD)v27 + v1649 * v21;
              v1542 = v1647;
              _H23 = *(_WORD *)(v1647 + 2 * v1562);
              __asm { FCVT            S0, H23 }
              v45 = _S0 <= 0.0 || _S0 <= -65504.0;
              v46 = 0;
              if (!v45)
              {
                v41 = a3[2];
                v16 = vmlaq_n_f32(vaddq_f32(v41, vmlaq_f32(vmulq_n_f32(*a3, (float)v27), v29, a3[1])), a3[3], v25 / _S0);
                _Q2 = vdivq_f32(v16, (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2));
                if (_Q2.f32[3] > 0.0 && _Q2.f32[3] > -65504.0 && _Q2.f32[0] >= 0.0)
                {
                  v46 = 0;
                  if (_Q2.f32[0] < (float)v1625)
                  {
                    _NF = _Q2.f32[1] >= 0.0 && _Q2.f32[1] < (float)v1626;
                    if (_NF)
                    {
                      _H2 = *(_WORD *)(v1624
                                     + 2 * (v1627 * _Q2.f32[0] + v1628 * _Q2.f32[1]));
                      __asm { FCVT            S2, H2 }
                      if (_Q2.f32[0] <= 0.0 || _Q2.f32[0] <= -65504.0)
                      {
                        v46 = 0;
                      }
                      else
                      {
                        v87 = (float)(v25 / _Q2.f32[3]) * 1.05;
                        if (_Q2.f32[0] < 2.0)
                          v87 = (float)(v25 / _Q2.f32[3]) + 0.1;
                        v46 = v87 < _Q2.f32[0];
                      }
                    }
                  }
                }
              }
              _H9 = *(_WORD *)(v1594 + 2 * (v1595 * (_DWORD)v27 + v1596 * v21));
              v48 = v1643 * (_DWORD)v27 + v1644 * v21;
              v49 = v1642;
              _H12 = *(_WORD *)(v1642 + 2 * v48);
              v51 = a1[84] + 8 * *(unsigned int *)(a1[81] + 4 * (v20 + v27));
              _H11 = *(_WORD *)v51;
              _H6 = *(_WORD *)(v51 + 6);
              v54 = *(_DWORD *)(v51 + 2);
              v55 = v1631 + 2 * (v1632 * (_DWORD)v27 + v1633 * v21);
              v6.i32[0] = *(_DWORD *)v55;
              _H13 = *(_WORD *)(v55 + 4);
              _H10 = *(_WORD *)(v55 + 6);
              LOBYTE(v51) = atomic_load((unsigned __int8 *)&qword_2540CACF8);
              if ((v51 & 1) == 0)
              {
                v1492 = _S0;
                v1478 = v19;
                v1465 = v20;
                v1439 = v23;
                v1453 = v22;
                v1424 = *(_WORD *)(v1647 + 2 * v1562);
                v1409 = _H6;
                v111 = __cxa_guard_acquire(&qword_2540CACF8);
                _H6 = v1409;
                _H23 = v1424;
                v28 = v1517;
                v29 = v1525;
                v25 = 1.0;
                v24 = 0.5;
                v23 = v1439;
                v22 = v1453;
                v20 = v1465;
                v19 = v1478;
                _S0 = v1492;
                if (v111)
                {
                  v112 = a3[6].i32[2];
                  dword_2540CACF0 = -947920896;
                  *(_DWORD *)algn_2540CACF4 = v112;
                  __cxa_guard_release(&qword_2540CACF8);
                  _H6 = v1409;
                  _H23 = v1424;
                  v28 = v1517;
                  v29 = v1525;
                  v25 = 1.0;
                  v24 = 0.5;
                  v23 = v1439;
                  v22 = v1453;
                  v20 = v1465;
                  v19 = v1478;
                  _S0 = v1492;
                }
              }
              v58 = atomic_load((unsigned __int8 *)&qword_2540CAD00);
              if ((v58 & 1) == 0)
              {
                v1493 = _S0;
                v1479 = v19;
                v1466 = v20;
                v1440 = v23;
                v1454 = v22;
                v1425 = _H23;
                v1410 = _H6;
                v113 = __cxa_guard_acquire(&qword_2540CAD00);
                _H6 = v1410;
                _H23 = v1425;
                v28 = v1517;
                v29 = v1525;
                v25 = 1.0;
                v24 = 0.5;
                v23 = v1440;
                v22 = v1454;
                v20 = v1466;
                v19 = v1479;
                _S0 = v1493;
                if (v113)
                {
                  qword_2540CADD0 = 0;
                  unk_2540CADD8 = 0;
                  __cxa_guard_release(&qword_2540CAD00);
                  _H6 = v1410;
                  _H23 = v1425;
                  v28 = v1517;
                  v29 = v1525;
                  v25 = 1.0;
                  v24 = 0.5;
                  v23 = v1440;
                  v22 = v1454;
                  v20 = v1466;
                  v19 = v1479;
                  _S0 = v1493;
                }
              }
              v59 = atomic_load((unsigned __int8 *)&qword_2540CAD08);
              if ((v59 & 1) == 0)
              {
                v1494 = _S0;
                v1480 = v19;
                v1467 = v20;
                v1441 = v23;
                v1455 = v22;
                v1426 = _H23;
                v1411 = _H6;
                v114 = __cxa_guard_acquire(&qword_2540CAD08);
                _H6 = v1411;
                _H23 = v1426;
                v28 = v1517;
                v29 = v1525;
                v25 = 1.0;
                v24 = 0.5;
                v23 = v1441;
                v22 = v1455;
                v20 = v1467;
                v19 = v1480;
                _S0 = v1494;
                if (v114)
                {
                  xmmword_2540CADE0 = v1502;
                  __cxa_guard_release(&qword_2540CAD08);
                  _H6 = v1411;
                  _H23 = v1426;
                  v28 = v1517;
                  v29 = v1525;
                  v25 = 1.0;
                  v24 = 0.5;
                  v23 = v1441;
                  v22 = v1455;
                  v20 = v1467;
                  v19 = v1480;
                  _S0 = v1494;
                }
              }
              __asm { FCVT            S3, H12 }
              v60 = vcvtq_f32_f16(v6);
              __asm
              {
                FCVT            S20, H13
                FCVT            S7, H10
              }
              v32 = v60;
              v32.i32[2] = _D20.i32[0];
              v61 = a3[6].f32[2];
              __asm { FCVT            S22, H15 }
              if (_S22 <= 0.0)
                goto LABEL_41;
              __asm { FCVT            S2, H9 }
              if (v61 >= _S2)
              {
LABEL_41:
                if (v46)
                {
                  v73 = a3[6].f32[3];
                  v74 = (float)((float)((float)(v73 * -0.1) + 0.01) / 0.09) + v25;
                  v75 = (float)-v74 / v73;
                  v76 = (float)(v73 * _S3) + v74;
                  if (v75 <= _S3)
                    _S3 = v76;
                  else
                    _S3 = 0.0;
                }
                v77 = v1562;
                v78 = v1542;
                if (_S3 > v61)
                  goto LABEL_8;
LABEL_7:
                _S0 = *(float *)&dword_2540CACF0;
                _S3 = *(float *)algn_2540CACF4;
                v32 = (float32x4_t)xmmword_2540CADE0;
                _S7 = *((float *)&xmmword_2540CADE0 + 3);
LABEL_8:
                __asm { FCVT            H0, S0 }
                *(_WORD *)(v78 + 2 * v77) = _H0;
                __asm { FCVT            H0, S3 }
                *(_WORD *)(v49 + 2 * v48) = _H0;
                v32.f32[3] = _S7;
                *(float16x4_t *)v26.i8 = vcvt_f16_f32(v32);
                *(_QWORD *)v55 = v26.i64[0];
                goto LABEL_9;
              }
              __asm { FCVT            S16, H11 }
              v41.i32[0] = v54;
              v64 = (float32x2_t)vcvtq_f32_f16(*(float16x4_t *)v41.f32).u64[0];
              __asm { FCVT            S18, H6 }
              v66 = _Q16;
              *(float32x2_t *)&v66.i32[1] = v64;
              __asm { FCVT            S23, H23 }
              if (_S23 <= 0.0 || v61 >= _S3)
                goto LABEL_106;
              __asm { FCVT            S6, H9 }
              if (_S6 <= 0.0)
              {
                v70 = 0.01;
                __asm { FCVT            S19, H12 }
                if (_S19 > 0.0)
                  goto LABEL_65;
              }
              else
              {
                if (_S6 < v25)
                {
                  v69 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                  v70 = 0.01;
                  if (v69 <= 0.01)
                    v70 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                  if (v69 < 0.0001)
                    v70 = 0.0001;
                  __asm { FCVT            S19, H12 }
                  if (_S19 <= 0.0)
                    goto LABEL_40;
LABEL_65:
                  if (_S19 < v25)
                  {
                    v84 = (float)((float)(_S3 * -0.09) + 0.1) * (float)((float)(_S3 * -0.09) + 0.1);
                    v85 = 0.01;
                    if (v84 <= 0.01)
                      v85 = (float)((float)(_S3 * -0.09) + 0.1) * (float)((float)(_S3 * -0.09) + 0.1);
                    if (v84 >= 0.0001)
                      v86 = v85;
                    else
                      v86 = 0.0001;
                    goto LABEL_78;
                  }
                  *(float *)&v72 = 0.0001;
LABEL_77:
                  v86 = *(float *)&v72;
LABEL_78:
                  if ((float)((float)((float)(_S14 - _S0) * (float)(_S14 - _S0)) / (float)(v70 + v86)) < 1.1)
                  {
                    v29 = v1525;
                    v77 = v1562;
                    v78 = v1542;
                    if (vmla_lane_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)_Q16.f32), v64, *(float32x2_t *)v60.f32, 1), _D20, v64, 1).f32[0] <= 0.70711)goto LABEL_112;
                    if (_S6 <= 0.0)
                    {
                      v90 = 0.01;
                      if (_S19 > 0.0)
                        goto LABEL_99;
                    }
                    else
                    {
                      if (_S6 < v25)
                      {
                        v88 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                        v89 = 0.01;
                        if (v88 <= 0.01)
                          v89 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                        if (v88 >= 0.0001)
                          v90 = v89;
                        else
                          v90 = 0.0001;
                        if (_S19 <= 0.0)
                          goto LABEL_88;
LABEL_99:
                        if (_S19 < v25)
                        {
                          v99 = (float)((float)(_S3 * -0.09) + 0.1) * (float)((float)(_S3 * -0.09) + 0.1);
                          v100 = 0.01;
                          if (v99 <= 0.01)
                            v100 = (float)((float)(_S3 * -0.09) + 0.1) * (float)((float)(_S3 * -0.09) + 0.1);
                          if (v99 >= 0.0001)
                            v101 = v100;
                          else
                            v101 = 0.0001;
                          goto LABEL_111;
                        }
                        *(float *)&v91 = 0.0001;
LABEL_110:
                        v101 = *(float *)&v91;
LABEL_111:
                        *(float32x2_t *)&_Q16.i32[1] = v64;
                        v64.f32[0] = v90 + v101;
                        v66 = vdivq_f32(vaddq_f32(vmulq_n_f32(v32, v90), vmulq_n_f32(_Q16, v101)), (float32x4_t)vdupq_lane_s32((int32x2_t)v64, 0));
LABEL_112:
                        if (_S19 <= 0.0)
                        {
                          v104 = 0.01;
                          v28 = v1517;
                          if (_S6 > 0.0)
                            goto LABEL_122;
                        }
                        else
                        {
                          if (_S19 < v25)
                          {
                            v102 = (float)((float)(_S3 * -0.09) + 0.1) * (float)((float)(_S3 * -0.09) + 0.1);
                            v103 = 0.01;
                            if (v102 <= 0.01)
                              v103 = v102;
                            if (v102 >= 0.0001)
                              v104 = v103;
                            else
                              v104 = 0.0001;
                            v28 = v1517;
                            if (_S6 <= 0.0)
                              goto LABEL_120;
LABEL_122:
                            if (_S6 < v25)
                            {
                              v106 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                              v107 = 0.01;
                              if (v106 <= 0.01)
                                v107 = v106;
                              if (v106 < 0.0001)
                                v107 = 0.0001;
                              goto LABEL_132;
                            }
                            *(float *)&v105 = 0.0001;
LABEL_131:
                            v107 = *(float *)&v105;
LABEL_132:
                            v108 = (float)(v104 * v107) / (float)(v104 + v107);
                            _S18 = 1.0;
                            _S2 = 1.0;
                            if (v108 > 0.0001)
                            {
                              _S2 = 0.0;
                              if (v108 < 0.01)
                              {
                                v109 = (float)((float)(sqrtf(v108) + -0.01) / -0.09) + v25;
                                if (v109 <= v25)
                                  v110 = v109;
                                else
                                  v110 = v25;
                                if (v109 >= 0.0)
                                  _S2 = v110;
                                else
                                  _S2 = 0.0;
                              }
                            }
                            _S14 = (float)((float)(v104 * _S14) + (float)(v107 * _S0)) / (float)(v104 + v107);
LABEL_141:
                            if (a3[6].f32[1] >= _S2)
                              _S3 = _S2;
                            else
                              _S3 = a3[6].f32[1];
                            _S0 = _S14;
                            _S7 = _S18;
                            v32 = v66;
                            if (_S3 > v61)
                              goto LABEL_8;
                            goto LABEL_7;
                          }
                          v104 = 0.0001;
                          v28 = v1517;
                          if (_S6 > 0.0)
                            goto LABEL_122;
                        }
LABEL_120:
                        *(float *)&v105 = 0.01;
                        goto LABEL_131;
                      }
                      v90 = 0.0001;
                      if (_S19 > 0.0)
                        goto LABEL_99;
                    }
LABEL_88:
                    *(float *)&v91 = 0.01;
                    goto LABEL_110;
                  }
                  v29 = v1525;
                  if (_S22 >= _S23)
                  {
                    v28 = v1517;
                    if (v46)
                    {
                      v96 = a3[6].f32[3];
                      v97 = (float)((float)((float)(v96 * -0.1) + 0.01) / 0.09) + v25;
                      v98 = (float)-v97 / v96;
                      _S2 = (float)(v96 * _S3) + v97;
                      if (v98 > _S3)
                        _S2 = 0.0;
                      _S14 = _S0;
                      _S18 = _S7;
                      v66 = v32;
                    }
                    else
                    {
                      _S14 = _S0;
                      _S18 = _S7;
                      v66 = v32;
                      _S2 = _S3;
                    }
                  }
                  else
                  {
                    v92 = a3[6].f32[3];
                    v93 = (float)((float)((float)(v92 * -0.1) + 0.01) / 0.09) + v25;
                    v94 = (float)-v93 / v92;
                    v95 = (float)(v92 * _S2) + v93;
                    if (v94 <= _S2)
                      _S2 = v95;
                    else
                      _S2 = 0.0;
                    v28 = v1517;
                  }
LABEL_106:
                  v77 = v1562;
                  v78 = v1542;
                  goto LABEL_141;
                }
                v70 = 0.0001;
                __asm { FCVT            S19, H12 }
                if (_S19 > 0.0)
                  goto LABEL_65;
              }
LABEL_40:
              *(float *)&v72 = 0.01;
              goto LABEL_77;
            }
          }
LABEL_9:
          ++v27;
        }
        while (v1509 != v27);
        ++v21;
        v20 += v1509;
        if (v21 != (_DWORD)v19)
          continue;
        break;
      }
LABEL_1453:
      v1061 = v1582;
      if (v1582)
      {
        p_shared_owners = (unint64_t *)&v1582->__shared_owners_;
        do
          v1063 = __ldaxr(p_shared_owners);
        while (__stlxr(v1063 - 1, p_shared_owners));
        if (!v1063)
        {
          ((void (*)(std::__shared_weak_count *))v1061->__on_zero_shared)(v1061);
          std::__shared_weak_count::__release_weak(v1061);
        }
      }
      v1064 = v1585;
      if (v1585)
      {
        v1065 = (unint64_t *)&v1585->__shared_owners_;
        do
          v1066 = __ldaxr(v1065);
        while (__stlxr(v1066 - 1, v1065));
        if (!v1066)
        {
          ((void (*)(std::__shared_weak_count *))v1064->__on_zero_shared)(v1064);
          std::__shared_weak_count::__release_weak(v1064);
        }
      }
      v1067 = v1588;
      if (v1588)
      {
        v1068 = (unint64_t *)&v1588->__shared_owners_;
        do
          v1069 = __ldaxr(v1068);
        while (__stlxr(v1069 - 1, v1068));
        if (!v1069)
        {
          ((void (*)(std::__shared_weak_count *))v1067->__on_zero_shared)(v1067);
          std::__shared_weak_count::__release_weak(v1067);
        }
      }
      v1070 = v1591;
      if (v1591)
      {
        v1071 = (unint64_t *)&v1591->__shared_owners_;
        do
          v1072 = __ldaxr(v1071);
        while (__stlxr(v1072 - 1, v1071));
        if (!v1072)
        {
          ((void (*)(std::__shared_weak_count *))v1070->__on_zero_shared)(v1070);
          std::__shared_weak_count::__release_weak(v1070);
        }
      }
      v1073 = v1593;
      if (v1593)
      {
        v1074 = (unint64_t *)&v1593->__shared_owners_;
        do
          v1075 = __ldaxr(v1074);
        while (__stlxr(v1075 - 1, v1074));
        if (!v1075)
        {
          ((void (*)(std::__shared_weak_count *))v1073->__on_zero_shared)(v1073);
          std::__shared_weak_count::__release_weak(v1073);
        }
      }
      v1076 = v1598;
      if (v1598)
      {
        v1077 = (unint64_t *)&v1598->__shared_owners_;
        do
          v1078 = __ldaxr(v1077);
        while (__stlxr(v1078 - 1, v1077));
        if (!v1078)
        {
          ((void (*)(std::__shared_weak_count *))v1076->__on_zero_shared)(v1076);
          std::__shared_weak_count::__release_weak(v1076);
        }
      }
      v1079 = v1604;
      if (v1604)
      {
        v1080 = (unint64_t *)&v1604->__shared_owners_;
        do
          v1081 = __ldaxr(v1080);
        while (__stlxr(v1081 - 1, v1080));
        if (!v1081)
        {
          ((void (*)(std::__shared_weak_count *))v1079->__on_zero_shared)(v1079);
          std::__shared_weak_count::__release_weak(v1079);
        }
      }
      v1082 = v1610;
      if (v1610)
      {
        v1083 = (unint64_t *)&v1610->__shared_owners_;
        do
          v1084 = __ldaxr(v1083);
        while (__stlxr(v1084 - 1, v1083));
        if (!v1084)
        {
          ((void (*)(std::__shared_weak_count *))v1082->__on_zero_shared)(v1082);
          std::__shared_weak_count::__release_weak(v1082);
        }
      }
      v1085 = v1616;
      if (v1616)
      {
        v1086 = (unint64_t *)&v1616->__shared_owners_;
        do
          v1087 = __ldaxr(v1086);
        while (__stlxr(v1087 - 1, v1086));
        if (!v1087)
        {
          ((void (*)(std::__shared_weak_count *))v1085->__on_zero_shared)(v1085);
          std::__shared_weak_count::__release_weak(v1085);
        }
      }
      v1088 = v1621;
      if (v1621)
      {
        v1089 = (unint64_t *)&v1621->__shared_owners_;
        do
          v1090 = __ldaxr(v1089);
        while (__stlxr(v1090 - 1, v1089));
        if (!v1090)
        {
          ((void (*)(std::__shared_weak_count *))v1088->__on_zero_shared)(v1088);
          std::__shared_weak_count::__release_weak(v1088);
        }
      }
      v1091 = v1623;
      if (v1623)
      {
        v1092 = (unint64_t *)&v1623->__shared_owners_;
        do
          v1093 = __ldaxr(v1092);
        while (__stlxr(v1093 - 1, v1092));
        if (!v1093)
        {
          ((void (*)(std::__shared_weak_count *))v1091->__on_zero_shared)(v1091);
          std::__shared_weak_count::__release_weak(v1091);
        }
      }
      v1094 = v1630;
      if (v1630)
      {
        v1095 = (unint64_t *)&v1630->__shared_owners_;
        do
          v1096 = __ldaxr(v1095);
        while (__stlxr(v1096 - 1, v1095));
        if (!v1096)
        {
          ((void (*)(std::__shared_weak_count *))v1094->__on_zero_shared)(v1094);
          std::__shared_weak_count::__release_weak(v1094);
        }
      }
      v1097 = v1636;
      if (v1636)
      {
        v1098 = (unint64_t *)&v1636->__shared_owners_;
        do
          v1099 = __ldaxr(v1098);
        while (__stlxr(v1099 - 1, v1098));
        if (!v1099)
        {
          ((void (*)(std::__shared_weak_count *))v1097->__on_zero_shared)(v1097);
          std::__shared_weak_count::__release_weak(v1097);
        }
      }
      v1100 = v1641;
      if (v1641)
      {
        v1101 = (unint64_t *)&v1641->__shared_owners_;
        do
          v1102 = __ldaxr(v1101);
        while (__stlxr(v1102 - 1, v1101));
        if (!v1102)
        {
          ((void (*)(std::__shared_weak_count *))v1100->__on_zero_shared)(v1100);
          std::__shared_weak_count::__release_weak(v1100);
        }
      }
      v1015 = v1646;
      if (v1646)
      {
        v1103 = (unint64_t *)&v1646->__shared_owners_;
        do
          v1017 = __ldaxr(v1103);
        while (__stlxr(v1017 - 1, v1103));
        goto LABEL_1896;
      }
      return;
    case 1u:
      sub_2231CC34C(a5, (uint64_t)v1645);
      sub_2231CC3F0(a5, (uint64_t)v1640);
      sub_2231CD8A8(a5, (uint64_t)&v1634);
      sub_2231CC874(a5, (uint64_t)v1629);
      sub_2231D3D90(a4, (uint64_t)v1622);
      sub_2231D4288(a4, (uint64_t)v1620);
      sub_2231D48A8(a4, (uint64_t)&v1614);
      v1608 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1609);
      v1602 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1603);
      v1419 = v14[8].i64[0];
      v561 = sub_2231D021C(a4);
      sub_2231CC34C((uint64_t)(a1 + 1), (uint64_t)v1597);
      sub_2231CC3F0((uint64_t)(a1 + 1), (uint64_t)v1592);
      sub_2231CD8A8((uint64_t)(a1 + 1), (uint64_t)&v1589);
      v1586 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1587);
      v1583 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1584);
      sub_2231CC874((uint64_t)(a1 + 1), (uint64_t)v1581);
      if (!HIDWORD(v1419) || !(_DWORD)v1419)
        goto LABEL_1675;
      v1475 = 0;
      v568 = 0;
      v569 = (float)v561;
      v570 = (float)HIDWORD(v561);
      v571 = 0.5;
      v572 = 1.0;
LABEL_754:
      v573 = 0;
      _Q0.f32[0] = (float)v568;
      *(float *)v563.i32 = (float)v568 + v571;
      v563 = vdupq_lane_s32(*(int32x2_t *)v563.i8, 0);
      v1567 = (float32x4_t)v563;
      _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
      v1434 = _Q0;
      while (1)
      {
        _H13 = *(_WORD *)(v1599 + 2 * (v1600 * (_DWORD)v573 + v1601 * v568));
        __asm { FCVT            S14, H13 }
        if (_S14 > -65504.0)
        {
          _Q3 = v14[1];
          _Q0 = vmlaq_n_f32(vaddq_f32(v14[2], vmlaq_f32(vmulq_n_f32(*v14, (float)v573 + v571), v1567, _Q3)), v14[3], v572 / _S14);
          *(int32x2_t *)v563.i8 = vdup_laneq_s32((int32x4_t)_Q0, 2);
          *(float32x2_t *)_Q0.f32 = vdiv_f32(*(float32x2_t *)_Q0.f32, *(float32x2_t *)v563.i8);
          if (_Q0.f32[0] >= 0.0 && _Q0.f32[0] < v569)
          {
            v578 = _Q0.f32[1];
            if (_Q0.f32[1] >= 0.0 && _Q0.f32[1] < v570)
              break;
          }
        }
LABEL_756:
        if (v1419 == ++v573)
        {
          ++v568;
          v1475 += v1419;
          if (v568 != HIDWORD(v1419))
            goto LABEL_754;
LABEL_1675:
          v1190 = v1582;
          if (v1582)
          {
            v1191 = (unint64_t *)&v1582->__shared_owners_;
            do
              v1192 = __ldaxr(v1191);
            while (__stlxr(v1192 - 1, v1191));
            if (!v1192)
            {
              ((void (*)(std::__shared_weak_count *))v1190->__on_zero_shared)(v1190);
              std::__shared_weak_count::__release_weak(v1190);
            }
          }
          v1193 = v1585;
          if (v1585)
          {
            v1194 = (unint64_t *)&v1585->__shared_owners_;
            do
              v1195 = __ldaxr(v1194);
            while (__stlxr(v1195 - 1, v1194));
            if (!v1195)
            {
              ((void (*)(std::__shared_weak_count *))v1193->__on_zero_shared)(v1193);
              std::__shared_weak_count::__release_weak(v1193);
            }
          }
          v1196 = v1588;
          if (v1588)
          {
            v1197 = (unint64_t *)&v1588->__shared_owners_;
            do
              v1198 = __ldaxr(v1197);
            while (__stlxr(v1198 - 1, v1197));
            if (!v1198)
            {
              ((void (*)(std::__shared_weak_count *))v1196->__on_zero_shared)(v1196);
              std::__shared_weak_count::__release_weak(v1196);
            }
          }
          v1199 = v1591;
          if (v1591)
          {
            v1200 = (unint64_t *)&v1591->__shared_owners_;
            do
              v1201 = __ldaxr(v1200);
            while (__stlxr(v1201 - 1, v1200));
            if (!v1201)
            {
              ((void (*)(std::__shared_weak_count *))v1199->__on_zero_shared)(v1199);
              std::__shared_weak_count::__release_weak(v1199);
            }
          }
          v1202 = v1593;
          if (v1593)
          {
            v1203 = (unint64_t *)&v1593->__shared_owners_;
            do
              v1204 = __ldaxr(v1203);
            while (__stlxr(v1204 - 1, v1203));
            if (!v1204)
            {
              ((void (*)(std::__shared_weak_count *))v1202->__on_zero_shared)(v1202);
              std::__shared_weak_count::__release_weak(v1202);
            }
          }
          v1205 = v1598;
          if (v1598)
          {
            v1206 = (unint64_t *)&v1598->__shared_owners_;
            do
              v1207 = __ldaxr(v1206);
            while (__stlxr(v1207 - 1, v1206));
            if (!v1207)
            {
              ((void (*)(std::__shared_weak_count *))v1205->__on_zero_shared)(v1205);
              std::__shared_weak_count::__release_weak(v1205);
            }
          }
          v1208 = v1604;
          if (v1604)
          {
            v1209 = (unint64_t *)&v1604->__shared_owners_;
            do
              v1210 = __ldaxr(v1209);
            while (__stlxr(v1210 - 1, v1209));
            if (!v1210)
            {
              ((void (*)(std::__shared_weak_count *))v1208->__on_zero_shared)(v1208);
              std::__shared_weak_count::__release_weak(v1208);
            }
          }
          v1211 = v1610;
          if (v1610)
          {
            v1212 = (unint64_t *)&v1610->__shared_owners_;
            do
              v1213 = __ldaxr(v1212);
            while (__stlxr(v1213 - 1, v1212));
            if (!v1213)
            {
              ((void (*)(std::__shared_weak_count *))v1211->__on_zero_shared)(v1211);
              std::__shared_weak_count::__release_weak(v1211);
            }
          }
          v1214 = v1616;
          if (v1616)
          {
            v1215 = (unint64_t *)&v1616->__shared_owners_;
            do
              v1216 = __ldaxr(v1215);
            while (__stlxr(v1216 - 1, v1215));
            if (!v1216)
            {
              ((void (*)(std::__shared_weak_count *))v1214->__on_zero_shared)(v1214);
              std::__shared_weak_count::__release_weak(v1214);
            }
          }
          v1217 = v1621;
          if (v1621)
          {
            v1218 = (unint64_t *)&v1621->__shared_owners_;
            do
              v1219 = __ldaxr(v1218);
            while (__stlxr(v1219 - 1, v1218));
            if (!v1219)
            {
              ((void (*)(std::__shared_weak_count *))v1217->__on_zero_shared)(v1217);
              std::__shared_weak_count::__release_weak(v1217);
            }
          }
          v1220 = v1623;
          if (v1623)
          {
            v1221 = (unint64_t *)&v1623->__shared_owners_;
            do
              v1222 = __ldaxr(v1221);
            while (__stlxr(v1222 - 1, v1221));
            if (!v1222)
            {
              ((void (*)(std::__shared_weak_count *))v1220->__on_zero_shared)(v1220);
              std::__shared_weak_count::__release_weak(v1220);
            }
          }
          v1223 = v1630;
          if (v1630)
          {
            v1224 = (unint64_t *)&v1630->__shared_owners_;
            do
              v1225 = __ldaxr(v1224);
            while (__stlxr(v1225 - 1, v1224));
            if (!v1225)
            {
              ((void (*)(std::__shared_weak_count *))v1223->__on_zero_shared)(v1223);
              std::__shared_weak_count::__release_weak(v1223);
            }
          }
          v1226 = v1636;
          if (v1636)
          {
            v1227 = (unint64_t *)&v1636->__shared_owners_;
            do
              v1228 = __ldaxr(v1227);
            while (__stlxr(v1228 - 1, v1227));
            if (!v1228)
            {
              ((void (*)(std::__shared_weak_count *))v1226->__on_zero_shared)(v1226);
              std::__shared_weak_count::__release_weak(v1226);
            }
          }
          v1229 = v1641;
          if (v1641)
          {
            v1230 = (unint64_t *)&v1641->__shared_owners_;
            do
              v1231 = __ldaxr(v1230);
            while (__stlxr(v1231 - 1, v1230));
            if (!v1231)
            {
              ((void (*)(std::__shared_weak_count *))v1229->__on_zero_shared)(v1229);
              std::__shared_weak_count::__release_weak(v1229);
            }
          }
          v1015 = v1646;
          if (!v1646)
            return;
          v1232 = (unint64_t *)&v1646->__shared_owners_;
          do
            v1017 = __ldaxr(v1232);
          while (__stlxr(v1017 - 1, v1232));
LABEL_1896:
          if (!v1017)
          {
            ((void (*)(std::__shared_weak_count *))v1015->__on_zero_shared)(v1015);
            std::__shared_weak_count::__release_weak(v1015);
          }
          return;
        }
      }
      v1551 = _Q0.i64[0];
      v580 = *(_WORD *)(v1594 + 2 * (v1595 * (_DWORD)v573 + v1596 * v568));
      v581 = v1648 * (_DWORD)v573 + v1649 * v568;
      v582 = v1647;
      _H8 = *(_WORD *)(v1647 + 2 * v581);
      v1514 = v1643 * (_DWORD)v573 + v1644 * v568;
      v1506 = v1642;
      v1522 = *(_WORD *)(v1642 + 2 * v1514);
      v584 = v1618;
      v585 = v1619;
      v586 = v1617;
      if (!v1617
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v1499 = v582;
      v587 = 0;
      __asm
      {
        FCVT            S0, H8
        FCVT            S31, H8
      }
      if (_S31 > 0.0 && _S31 > -65504.0)
      {
        v587 = 0;
        _Q3 = a3[1];
        v589 = vmlaq_n_f32(vaddq_f32(a3[2], vmlaq_f32(vmulq_n_f32(*a3, (float)v573), v1434, _Q3)), a3[3], v572 / _Q0.f32[0]);
        _Q2 = vdivq_f32(v589, (float32x4_t)vdupq_laneq_s32((int32x4_t)v589, 2));
        if (_Q2.f32[3] > 0.0 && _Q2.f32[3] > -65504.0 && _Q2.f32[0] >= 0.0)
        {
          v587 = 0;
          if (_Q2.f32[0] < (float)v1625 && _Q2.f32[1] >= 0.0 && _Q2.f32[1] < (float)v1626)
          {
            _H2 = *(_WORD *)(v1624 + 2 * (v1627 * _Q2.f32[0] + v1628 * _Q2.f32[1]));
            __asm { FCVT            S2, H2 }
            if (_Q2.f32[0] <= 0.0 || _Q2.f32[0] <= -65504.0)
            {
              v587 = 0;
            }
            else
            {
              v595 = (float)(v572 / _Q2.f32[3]) * 1.05;
              if (_Q2.f32[0] < 2.0)
                v595 = (float)(v572 / _Q2.f32[3]) + 0.1;
              v587 = v595 < _Q2.f32[0];
            }
          }
        }
      }
      v1489 = v580;
      HIDWORD(_D1) = HIDWORD(v1551);
      v597 = v586 + 2 * (v584 * *(float *)&v1551 + v585 * v578);
      _Q3.i16[0] = *(_WORD *)(v597 + 4);
      _D18.i16[0] = *(_WORD *)(v597 + 6);
      _Q7.i32[0] = *(_DWORD *)v597;
      v598 = v1637 + 2 * (v1638 * (_DWORD)v573 + v1639 * v568);
      v8.i32[0] = *(_DWORD *)v598;
      _H11 = *(_WORD *)(v598 + 4);
      _H15 = *(_WORD *)(v598 + 6);
      v601 = a1[84] + 8 * *(unsigned int *)(a1[81] + 4 * (v1475 + v573));
      _Q19.i16[0] = *(_WORD *)v601;
      _H23 = *(_WORD *)(v601 + 6);
      v603 = *(_DWORD *)(v601 + 2);
      v604 = v1631 + 2 * (v1632 * (_DWORD)v573 + v1633 * v568);
      v7.i32[0] = *(_DWORD *)v604;
      _H12 = *(_WORD *)(v604 + 4);
      _H8 = *(_WORD *)(v604 + 6);
      LOBYTE(v601) = atomic_load((unsigned __int8 *)&qword_2540CAD18);
      if ((v601 & 1) == 0)
      {
        v1553 = _Q0.i32[0];
        v1534 = _S31;
        v1391 = _Q3.i16[0];
        v1377 = _D18.i16[0];
        v1361 = _Q7.i64[0];
        v1349 = _H23;
        v1340 = _Q19.i16[0];
        v671 = __cxa_guard_acquire(&qword_2540CAD18);
        _Q19.i16[0] = v1340;
        _H23 = v1349;
        _Q7.i64[0] = v1361;
        _D18.i16[0] = v1377;
        _Q3.i16[0] = v1391;
        _S31 = v1534;
        _Q0.i32[0] = v1553;
        if (v671)
        {
          v672 = a3[6].i32[2];
          dword_2540CAD10 = -947920896;
          *(_DWORD *)algn_2540CAD14 = v672;
          __cxa_guard_release(&qword_2540CAD18);
          _Q19.i16[0] = v1340;
          _H23 = v1349;
          _Q7.i64[0] = v1361;
          _D18.i16[0] = v1377;
          _Q3.i16[0] = v1391;
          _S31 = v1534;
          _Q0.i32[0] = v1553;
        }
      }
      v607 = atomic_load((unsigned __int8 *)&qword_2540CAD20);
      if ((v607 & 1) == 0)
      {
        v1554 = _Q0.i32[0];
        v1535 = _S31;
        v1392 = _Q3.i16[0];
        v1378 = _D18.i16[0];
        v1362 = _Q7.i64[0];
        v1350 = _H23;
        v1341 = _Q19.i16[0];
        v673 = __cxa_guard_acquire(&qword_2540CAD20);
        _Q19.i16[0] = v1341;
        _H23 = v1350;
        _Q7.i64[0] = v1362;
        _D18.i16[0] = v1378;
        _Q3.i16[0] = v1392;
        _S31 = v1535;
        _Q0.i32[0] = v1554;
        if (v673)
        {
          xmmword_2540CADF0 = 0uLL;
          __cxa_guard_release(&qword_2540CAD20);
          _Q19.i16[0] = v1341;
          _H23 = v1350;
          _Q7.i64[0] = v1362;
          _D18.i16[0] = v1378;
          _Q3.i16[0] = v1392;
          _S31 = v1535;
          _Q0.i32[0] = v1554;
        }
      }
      v608 = atomic_load((unsigned __int8 *)&qword_2540CAD28);
      if ((v608 & 1) == 0)
      {
        v1555 = _Q0.i32[0];
        v1536 = _S31;
        v1393 = _Q3.i16[0];
        v1379 = _D18.i16[0];
        v1363 = _Q7.i64[0];
        v1351 = _H23;
        v1342 = _Q19.i16[0];
        v674 = __cxa_guard_acquire(&qword_2540CAD28);
        _Q19.i16[0] = v1342;
        _H23 = v1351;
        _Q7.i64[0] = v1363;
        _D18.i16[0] = v1379;
        _Q3.i16[0] = v1393;
        _S31 = v1536;
        _Q0.i32[0] = v1555;
        if (v674)
        {
          unk_2540CAE00 = vdupq_n_s32(0x7FC00000u);
          __cxa_guard_release(&qword_2540CAD28);
          _Q19.i16[0] = v1342;
          _H23 = v1351;
          _Q7.i64[0] = v1363;
          _D18.i16[0] = v1379;
          _Q3.i16[0] = v1393;
          _S31 = v1536;
          _Q0.i32[0] = v1555;
        }
      }
      LOWORD(_D1) = v1522;
      __asm { FCVT            S5, H1 }
      v610 = vcvtq_f32_f16(v8);
      __asm { FCVT            S1, H11 }
      v610.i32[2] = _D1;
      __asm { FCVT            S1, H15 }
      v1533 = v610;
      v1552 = _D1;
      v611 = vcvtq_f32_f16(v7);
      __asm { FCVT            S24, H12 }
      v612 = v611;
      v612.i32[2] = _D24.i32[0];
      __asm { FCVT            S16, H8 }
      v614 = a3[6].f32[2];
      v615 = a3[6].f32[3];
      v616 = v615 * v615;
      __asm { FCVT            S26, H13 }
      _H17 = v1489;
      if (_S26 <= 0.0)
        goto LABEL_807;
      __asm { FCVT            S4, H17 }
      if (v614 >= _S4)
      {
LABEL_807:
        v570 = (float)HIDWORD(v561);
        v569 = (float)v561;
        v571 = 0.5;
        v572 = 1.0;
        if (v587)
        {
          v629 = (float)((float)((float)(v615 * -0.1) + 0.01) / 0.09) + 1.0;
          v630 = (float)-v629 / v615;
          v631 = (float)(v615 * _S5) + v629;
          if (v630 <= _S5)
            _S5 = v631;
          else
            _S5 = 0.0;
          HIDWORD(v632) = HIDWORD(v1552);
          *(float *)&v632 = *(float *)&v1552 / v616;
          v1552 = v632;
        }
        v633 = v1499;
        v634 = v1514;
        v635 = v1506;
        if (_S5 > v614)
          goto LABEL_814;
LABEL_813:
        _Q0.i32[0] = dword_2540CAD10;
        _S5 = *(float *)algn_2540CAD14;
        v612 = (float32x4_t)unk_2540CAE00;
        LODWORD(_D1) = HIDWORD(xmmword_2540CADF0);
        v1533 = (float32x4_t)xmmword_2540CADF0;
        v1552 = _D1;
        _S16 = dword_2540CAE0C;
LABEL_814:
        __asm { FCVT            H0, S0 }
        *(_WORD *)(v633 + 2 * v581) = _H0;
        __asm { FCVT            H0, S5 }
        *(_WORD *)(v635 + 2 * v634) = _H0;
        v612.i32[3] = _S16;
        *(float16x4_t *)v604 = vcvt_f16_f32(v612);
        v638 = v1638;
        v639 = v1639;
        v640 = v1637;
        if (!v1637
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        _Q0 = v1533;
        v563.i32[1] = HIDWORD(v1552);
        _Q0.i32[3] = v1552;
        *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(_Q0);
        *(_QWORD *)(v640 + 2 * (v638 * (_DWORD)v573 + v639 * v568)) = _Q0.i64[0];
        goto LABEL_756;
      }
      v620 = vcvtq_f32_f16(*(float16x4_t *)_Q7.f32);
      __asm
      {
        FCVT            S7, H3
        FCVT            S3, H18
      }
      v620.i32[2] = _Q7.i32[0];
      __asm { FCVT            S19, H19 }
      _Q7.i32[0] = v603;
      v621 = (float32x2_t)vcvtq_f32_f16(*(float16x4_t *)_Q7.f32).u64[0];
      __asm { FCVT            S18, H23 }
      _Q7 = _Q19;
      *(float32x2_t *)&_Q7.i32[1] = v621;
      v570 = (float)HIDWORD(v561);
      v569 = (float)v561;
      v571 = 0.5;
      v572 = 1.0;
      if (_S31 <= 0.0 || v614 >= _S5)
        goto LABEL_859;
      __asm { FCVT            S17, H17 }
      if (_S17 <= 0.0)
      {
        v625 = 0.01;
        _H23 = v1522;
        __asm { FCVT            S23, H23 }
        if (_S23 > 0.0)
          goto LABEL_818;
      }
      else
      {
        if (_S17 < 1.0)
        {
          v624 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
          v625 = 0.01;
          if (v624 <= 0.01)
            v625 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
          if (v624 < 0.0001)
            v625 = 0.0001;
          _H23 = v1522;
          __asm { FCVT            S23, H23 }
          if (_S23 <= 0.0)
            goto LABEL_806;
LABEL_818:
          if (_S23 < 1.0)
          {
            v642 = (float)((float)(_S5 * -0.09) + 0.1) * (float)((float)(_S5 * -0.09) + 0.1);
            v643 = 0.01;
            if (v642 <= 0.01)
              v643 = (float)((float)(_S5 * -0.09) + 0.1) * (float)((float)(_S5 * -0.09) + 0.1);
            if (v642 >= 0.0001)
              v644 = v643;
            else
              v644 = 0.0001;
LABEL_828:
            if ((float)((float)((float)(_S14 - _Q0.f32[0]) * (float)(_S14 - _Q0.f32[0])) / (float)(v625 + v644)) >= 1.1)
            {
              if (_S26 >= _S31)
              {
                if (v587)
                {
                  v655 = (float)((float)((float)(v615 * -0.1) + 0.01) / 0.09) + 1.0;
                  v656 = (float)-v655 / v615;
                  v657 = (float)(v615 * _S5) + v655;
                  if (v656 <= _S5)
                    _S4 = v657;
                  else
                    _S4 = 0.0;
                  _Q3.f32[0] = *(float *)&v1552 / v616;
                  v620 = v1533;
                }
                else
                {
                  v620 = v1533;
                  _Q3.i32[0] = v1552;
                  _S4 = _S5;
                }
                _S14 = _Q0.f32[0];
                _S18 = *(float *)&_S16;
                _Q7 = v612;
              }
              else
              {
                v652 = (float)((float)((float)(v615 * -0.1) + 0.01) / 0.09) + 1.0;
                v653 = (float)-v652 / v615;
                v654 = (float)(v615 * _S4) + v652;
                v42 = v653 <= _S4;
                _S4 = 0.0;
                if (v42)
                  _S4 = v654;
                _Q3.f32[0] = _Q3.f32[0] / v616;
              }
LABEL_859:
              v646 = a3;
              v633 = v1499;
              v634 = v1514;
              v635 = v1506;
LABEL_891:
              if (v646[6].f32[1] >= _S4)
                _S5 = _S4;
              else
                _S5 = v646[6].f32[1];
              if (v646[6].f32[0] >= _Q3.f32[0])
                _Q0.f32[0] = _Q3.f32[0];
              else
                _Q0.i32[0] = v646[6].i32[0];
              v1533 = v620;
              v1552 = _Q0.i64[0];
              _Q0.f32[0] = _S14;
              *(float *)&_S16 = _S18;
              v612 = _Q7;
              if (_S5 > v614)
                goto LABEL_814;
              goto LABEL_813;
            }
            v646 = a3;
            v633 = v1499;
            v634 = v1514;
            v635 = v1506;
            if (vmla_lane_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v611.f32, *(float32x2_t *)_Q19.f32), v621, *(float32x2_t *)v611.f32, 1), _D24, v621, 1).f32[0] <= 0.70711)
            {
LABEL_863:
              if (_S23 <= 0.0)
              {
                v663 = 0.01;
                if (_S17 > 0.0)
                  goto LABEL_873;
              }
              else
              {
                if (_S23 < 1.0)
                {
                  v661 = (float)((float)(_S5 * -0.09) + 0.1) * (float)((float)(_S5 * -0.09) + 0.1);
                  v662 = 0.01;
                  if (v661 <= 0.01)
                    v662 = v661;
                  if (v661 >= 0.0001)
                    v663 = v662;
                  else
                    v663 = 0.0001;
                  if (_S17 <= 0.0)
                    goto LABEL_871;
LABEL_873:
                  if (_S17 < 1.0)
                  {
                    v665 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                    v666 = 0.01;
                    if (v665 <= 0.01)
                      v666 = v665;
                    if (v665 < 0.0001)
                      v666 = 0.0001;
                    goto LABEL_883;
                  }
                  *(float *)&v664 = 0.0001;
LABEL_882:
                  v666 = *(float *)&v664;
LABEL_883:
                  v667 = (float)(v663 * v666) / (float)(v663 + v666);
                  _S18 = 1.0;
                  _S4 = 1.0;
                  if (v667 > 0.0001)
                  {
                    _S4 = 0.0;
                    if (v667 < 0.01)
                    {
                      v668 = (float)((float)(sqrtf(v667) + -0.01) / -0.09) + 1.0;
                      v669 = v668 <= 1.0 ? v668 : 1.0;
                      _NF = v668 < 0.0;
                      _S4 = 0.0;
                      if (!_NF)
                        _S4 = v669;
                    }
                  }
                  _S14 = (float)((float)(v663 * _S14) + (float)(v666 * _Q0.f32[0])) / (float)(v663 + v666);
                  v670 = vmulq_n_f32(v620, _Q3.f32[0]);
                  _Q3.f32[0] = _Q3.f32[0] + *(float *)&v1552;
                  _Q0 = vaddq_f32(v670, vmulq_n_f32(v1533, *(float *)&v1552));
                  v620 = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q3.f32, 0));
                  goto LABEL_891;
                }
                v663 = 0.0001;
                if (_S17 > 0.0)
                  goto LABEL_873;
              }
LABEL_871:
              *(float *)&v664 = 0.01;
              goto LABEL_882;
            }
            if (_S17 <= 0.0)
            {
              *(float *)&v649 = 0.01;
              v647 = 0.01;
              if (_S23 <= 0.0)
                goto LABEL_861;
            }
            else
            {
              v647 = 0.0001;
              v648 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
              *(float *)&v649 = 0.01;
              v650 = 0.01;
              if (v648 <= 0.01)
                v650 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
              if (v648 >= 0.0001)
                v651 = v650;
              else
                v651 = 0.0001;
              if (_S17 < 1.0)
                v647 = v651;
              if (_S23 <= 0.0)
                goto LABEL_861;
            }
            if (_S23 < 1.0)
            {
              v658 = (float)((float)(_S5 * -0.09) + 0.1) * (float)((float)(_S5 * -0.09) + 0.1);
              v659 = 0.01;
              if (v658 <= 0.01)
                v659 = (float)((float)(_S5 * -0.09) + 0.1) * (float)((float)(_S5 * -0.09) + 0.1);
              if (v658 >= 0.0001)
                v660 = v659;
              else
                v660 = 0.0001;
              goto LABEL_862;
            }
            *(float *)&v649 = 0.0001;
LABEL_861:
            v660 = *(float *)&v649;
LABEL_862:
            *(float32x2_t *)&_Q19.i32[1] = v621;
            *(float *)_D18.i32 = v647 + v660;
            _Q7 = vdivq_f32(vaddq_f32(vmulq_n_f32(v612, v647), vmulq_n_f32(_Q19, v660)), (float32x4_t)vdupq_lane_s32(_D18, 0));
            goto LABEL_863;
          }
          *(float *)&v628 = 0.0001;
LABEL_827:
          v644 = *(float *)&v628;
          goto LABEL_828;
        }
        v625 = 0.0001;
        _H23 = v1522;
        __asm { FCVT            S23, H23 }
        if (_S23 > 0.0)
          goto LABEL_818;
      }
LABEL_806:
      *(float *)&v628 = 0.01;
      goto LABEL_827;
    case 2u:
      sub_2231CC34C(a5, (uint64_t)v1645);
      sub_2231CC3F0(a5, (uint64_t)v1640);
      v1634 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1635);
      sub_2231CC874(a5, (uint64_t)v1629);
      sub_2231D3D90(a4, (uint64_t)v1622);
      sub_2231D4288(a4, (uint64_t)v1620);
      v1614 = &off_24EC25150;
      sub_223210C10((uint64_t)&v1615);
      sub_2231D494C(a4, (uint64_t)&v1608);
      v1602 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1603);
      v244 = v14[8].u64[0];
      v245 = sub_2231D021C(a4);
      sub_2231CC34C((uint64_t)(a1 + 1), (uint64_t)v1597);
      sub_2231CC3F0((uint64_t)(a1 + 1), (uint64_t)v1592);
      v1589 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1590);
      sub_2231CDAE0((uint64_t)(a1 + 1), (uint64_t)&v1586);
      v246 = a3;
      v1583 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1584);
      sub_2231CC874((uint64_t)(a1 + 1), (uint64_t)v1581);
      v252 = HIDWORD(v244);
      if (!HIDWORD(v244) || !(_DWORD)v244)
        goto LABEL_1379;
      v253 = 0;
      v254 = 0;
      v255 = (float)v245;
      v256 = v244;
      v257 = (float)HIDWORD(v245);
      v258 = 0.5;
      v259 = 1.0;
      v1496 = v244;
      while (1)
      {
        v260 = 0;
        *(float *)v247.i32 = (float)v254;
        *(float *)v248.i32 = (float)v254 + v258;
        v1519 = v254 * v244;
        v261 = (float32x4_t)vdupq_lane_s32(v248, 0);
        v262 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v247.i8, 0);
        v263 = v253;
        v1504 = v261;
        v1511 = v262;
        do
        {
          _H15 = *(_WORD *)(v1599 + 2 * (v1600 * (_DWORD)v260 + v1601 * v254));
          __asm { FCVT            S14, H15 }
          if (_S14 > -65504.0)
          {
            _Q4 = (int8x16_t)v14[1];
            v269 = (int8x16_t)v14[3];
            v247 = (int32x4_t)vmlaq_n_f32(vaddq_f32(v14[2], vmlaq_f32(vmulq_n_f32(*v14, (float)v260 + v258), v261, (float32x4_t)_Q4)), (float32x4_t)v269, v259 / _S14);
            v248 = (int32x2_t)vdiv_f32(*(float32x2_t *)v247.i8, (float32x2_t)vdup_laneq_s32(v247, 2));
            if (*(float *)v248.i32 >= 0.0
              && *(float *)v248.i32 < v255
              && *(float *)&v248.i32[1] >= 0.0
              && *(float *)&v248.i32[1] < v257)
            {
              v272 = 0;
              v273 = v1648 * (_DWORD)v260 + v1649 * v254;
              v1564 = v1647;
              _H12 = *(_WORD *)(v1647 + 2 * v273);
              __asm { FCVT            S0, H12 }
              if (_S0 > 0.0)
              {
                __asm { FCVT            S4, H12 }
                if (_S4 > -65504.0)
                {
                  v272 = 0;
                  v269 = (int8x16_t)v246[1];
                  _Q7 = (int8x16_t)v246[2];
                  v277 = vmlaq_n_f32(vaddq_f32((float32x4_t)_Q7, vmlaq_f32(vmulq_n_f32(*v246, (float)v260), v262, (float32x4_t)v269)), v246[3], v259 / _S0);
                  _Q4 = (int8x16_t)vdivq_f32(v277, (float32x4_t)vdupq_laneq_s32((int32x4_t)v277, 2));
                  if (*(float *)&_Q4.i32[3] > 0.0 && *(float *)&_Q4.i32[3] > -65504.0 && *(float *)_Q4.i32 >= 0.0)
                  {
                    v272 = 0;
                    if (*(float *)_Q4.i32 < (float)v1625
                      && *(float *)&_Q4.i32[1] >= 0.0
                      && *(float *)&_Q4.i32[1] < (float)v1626)
                    {
                      _H4 = *(_WORD *)(v1624
                                     + 2
                                     * (v1627 * *(float *)_Q4.i32
                                      + v1628 * *(float *)&_Q4.i32[1]));
                      __asm { FCVT            S4, H4 }
                      if (*(float *)_Q4.i32 <= 0.0 || *(float *)_Q4.i32 <= -65504.0)
                      {
                        v272 = 0;
                      }
                      else
                      {
                        v282 = (float)(v259 / *(float *)&_Q4.i32[3]) * 1.05;
                        if (*(float *)_Q4.i32 < 2.0)
                          v282 = (float)(v259 / *(float *)&_Q4.i32[3]) + 0.1;
                        v272 = v282 < *(float *)_Q4.i32;
                      }
                    }
                  }
                }
              }
              _H9 = *(_WORD *)(v1594 + 2 * (v1595 * (_DWORD)v260 + v1596 * v254));
              v1544 = v1643 * (_DWORD)v260 + v1644 * v254;
              v1527 = v1642;
              _H27 = *(_WORD *)(v1642 + 2 * v1544);
              v285 = *(_QWORD *)(v1611
                               + 2
                               * (v1612 * *(float *)v248.i32 + v1613
                                                                           * *(float *)&v248.i32[1]));
              v286 = a1[84] + 8 * *(unsigned int *)(a1[81] + 4 * (v1519 + v260));
              _H11 = *(_WORD *)v286;
              _Q7.i16[0] = *(_WORD *)(v286 + 6);
              v288 = *(_DWORD *)(v286 + 2);
              v289 = v1631 + 2 * (v1632 * (_DWORD)v260 + v1633 * v254);
              v6.i32[0] = *(_DWORD *)v289;
              _H10 = *(_WORD *)(v289 + 4);
              _H13 = *(_WORD *)(v289 + 6);
              v292 = a1[98];
              LOBYTE(v286) = atomic_load((unsigned __int8 *)&qword_2540CAD38);
              if ((v286 & 1) == 0)
              {
                v1484 = _S0;
                v1471 = v252;
                v1459 = v253;
                v1445 = v255;
                v1430 = v257;
                v1401 = a1[98];
                v1415 = v1648 * (_DWORD)v260 + v1649 * v254;
                v1387 = *(_WORD *)(v1642 + 2 * v1544);
                v1373 = _Q7.i16[0];
                v369 = __cxa_guard_acquire(&qword_2540CAD38);
                _Q7.i16[0] = v1373;
                _H27 = v1387;
                v292 = v1401;
                v273 = v1415;
                v261 = v1504;
                v262 = v1511;
                v259 = 1.0;
                v258 = 0.5;
                v257 = v1430;
                v255 = v1445;
                v253 = v1459;
                v252 = v1471;
                _S0 = v1484;
                if (v369)
                {
                  v370 = a3[6].i32[2];
                  dword_2540CAD30 = -947920896;
                  *(_DWORD *)algn_2540CAD34 = v370;
                  __cxa_guard_release(&qword_2540CAD38);
                  _Q7.i16[0] = v1373;
                  _H27 = v1387;
                  v292 = v1401;
                  v273 = v1415;
                  v261 = v1504;
                  v262 = v1511;
                  v259 = 1.0;
                  v258 = 0.5;
                  v257 = v1430;
                  v255 = v1445;
                  v253 = v1459;
                  v252 = v1471;
                  _S0 = v1484;
                }
              }
              v293 = atomic_load((unsigned __int8 *)&qword_2540CAD40);
              if ((v293 & 1) == 0)
              {
                v1485 = _S0;
                v1472 = v252;
                v1460 = v253;
                v1446 = v255;
                v1431 = v257;
                v1402 = v292;
                v1416 = v273;
                v1388 = _H27;
                v1374 = _Q7.i16[0];
                v371 = __cxa_guard_acquire(&qword_2540CAD40);
                _Q7.i16[0] = v1374;
                _H27 = v1388;
                v292 = v1402;
                v273 = v1416;
                v261 = v1504;
                v262 = v1511;
                v259 = 1.0;
                v258 = 0.5;
                v257 = v1431;
                v255 = v1446;
                v253 = v1460;
                v252 = v1472;
                _S0 = v1485;
                if (v371)
                {
                  qword_2540CAE10 = 0;
                  unk_2540CAE18 = 0;
                  __cxa_guard_release(&qword_2540CAD40);
                  _Q7.i16[0] = v1374;
                  _H27 = v1388;
                  v292 = v1402;
                  v273 = v1416;
                  v261 = v1504;
                  v262 = v1511;
                  v259 = 1.0;
                  v258 = 0.5;
                  v257 = v1431;
                  v255 = v1446;
                  v253 = v1460;
                  v252 = v1472;
                  _S0 = v1485;
                }
              }
              v294 = atomic_load((unsigned __int8 *)&qword_2540CAD48);
              if ((v294 & 1) == 0)
              {
                v1486 = _S0;
                v1473 = v252;
                v1461 = v253;
                v1447 = v255;
                v1432 = v257;
                v1403 = v292;
                v1417 = v273;
                v1389 = _H27;
                v1375 = _Q7.i16[0];
                v372 = __cxa_guard_acquire(&qword_2540CAD48);
                _Q7.i16[0] = v1375;
                _H27 = v1389;
                v292 = v1403;
                v273 = v1417;
                v261 = v1504;
                v262 = v1511;
                v259 = 1.0;
                v258 = 0.5;
                v257 = v1432;
                v255 = v1447;
                v253 = v1461;
                v252 = v1473;
                _S0 = v1486;
                if (v372)
                {
                  xmmword_2540CAE20 = (__int128)vdupq_n_s32(0x7FC00000u);
                  __cxa_guard_release(&qword_2540CAD48);
                  _Q7.i16[0] = v1375;
                  _H27 = v1389;
                  v292 = v1403;
                  v273 = v1417;
                  v261 = v1504;
                  v262 = v1511;
                  v259 = 1.0;
                  v258 = 0.5;
                  v257 = v1432;
                  v255 = v1447;
                  v253 = v1461;
                  v252 = v1473;
                  _S0 = v1486;
                }
              }
              v295 = 43 * v263;
              __asm { FCVT            S2, H27 }
              v297 = vcvtq_f32_f16(v6);
              __asm
              {
                FCVT            S21, H10
                FCVT            S5, H13
              }
              v299 = v297;
              v299.i32[2] = _D21.i32[0];
              v300 = a3[6].f32[3];
              v301 = v300 * v300;
              __asm { FCVT            S23, H15 }
              if (_S23 <= 0.0)
                goto LABEL_387;
              __asm { FCVT            S4, H9 }
              v304 = a3[6].f32[2];
              if (v304 >= _S4)
              {
LABEL_387:
                if (v272)
                {
                  v315 = (float)((float)((float)(v300 * -0.1) + 0.01) / 0.09) + v259;
                  *(float *)v269.i32 = (float)-v315 / v300;
                  v316 = (float)(v300 * _S2) + v315;
                  v42 = *(float *)v269.i32 <= _S2;
                  _S2 = 0.0;
                  if (v42)
                    _S2 = v316;
                  v246 = a3;
                  v317 = a3[7].u8[4];
                  if (a3[7].i8[4])
                  {
                    v318 = v259 / v301;
                    v319 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                    v320 = "QueryMeshesENS_9allocatorIS4_EEEE";
                    v321 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                    if (v317 >= 8)
                    {
                      v328 = v273;
                      v322 = v317 & 0xF8;
                      v329 = v292;
                      v330 = (uint64_t *)(v292 + v295);
                      v331 = v322;
                      do
                      {
                        v269.i64[0] = *v330;
                        _Q7 = (int8x16_t)vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v269, (int8x16_t)xmmword_2245F6710)), v318);
                        _Q17 = (float32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v269, (int8x16_t)xmmword_2245F6720)), v318));
                        v332 = vcvtq_u32_f32((float32x4_t)_Q7);
                        v269 = vqtbl2q_s8(*(int8x16x2_t *)(&_Q17 - 1), (int8x16_t)xmmword_2245F6730);
                        *v330++ = v269.i64[0];
                        v331 -= 8;
                      }
                      while (v331);
                      v273 = v328;
                      v292 = v329;
                      if (v322 == v317)
                        goto LABEL_496;
                    }
                    else
                    {
                      v322 = 0;
                    }
                    v333 = v317 - v322;
                    v334 = (__int8 *)(v292 + v322 + v295);
                    do
                    {
                      v269.i8[0] = *v334;
                      *(float *)v269.i32 = v318 * (float)v269.u32[0];
                      *v334++ = (int)*(float *)v269.i32;
                      --v333;
                    }
                    while (v333);
                    goto LABEL_496;
                  }
                }
                else
                {
                  v246 = a3;
                }
                v319 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                   + 62);
                v320 = "NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                     + 62;
                v321 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                   + 62);
                goto LABEL_496;
              }
              __asm { FCVT            S17, H11 }
              v269.i32[0] = v288;
              v305 = (float32x2_t)vcvtq_f32_f16(*(float16x4_t *)v269.i8).u64[0];
              v307 = _Q17;
              v307.i32[1] = v305.i32[0];
              __asm { FCVT            S7, H7 }
              v307.i32[2] = v305.i32[1];
              v308 = v292 + 43 * (v1519 + v260);
              __asm { FCVT            S24, H12 }
              if (_S24 <= 0.0 || v304 >= _S2)
              {
                v323 = v292;
                v324 = a3[7].u8[4];
                if (!(_BYTE)v285)
                  goto LABEL_398;
              }
              else
              {
                __asm { FCVT            S16, H9 }
                if (_S16 <= 0.0)
                {
                  v312 = 0.01;
                  __asm { FCVT            S20, H27 }
                  if (_S20 <= 0.0)
                    goto LABEL_386;
                }
                else if (_S16 >= v259)
                {
                  v312 = 0.0001;
                  __asm { FCVT            S20, H27 }
                  if (_S20 <= 0.0)
                    goto LABEL_386;
                }
                else
                {
                  v311 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                  v312 = 0.01;
                  if (v311 <= 0.01)
                    v312 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                  if (v311 < 0.0001)
                    v312 = 0.0001;
                  __asm { FCVT            S20, H27 }
                  if (_S20 <= 0.0)
                  {
LABEL_386:
                    *(float *)&v314 = 0.01;
                    goto LABEL_420;
                  }
                }
                if (_S20 >= v259)
                {
                  *(float *)&v314 = 0.0001;
LABEL_420:
                  v327 = *(float *)&v314;
                }
                else
                {
                  v325 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                  v326 = 0.01;
                  if (v325 <= 0.01)
                    v326 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                  if (v325 >= 0.0001)
                    v327 = v326;
                  else
                    v327 = 0.0001;
                  v259 = 1.0;
                }
                if ((float)((float)((float)(_S14 - _S0) * (float)(_S14 - _S0)) / (float)(v312 + v327)) < 1.1)
                {
                  v319 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                  v320 = "QueryMeshesENS_9allocatorIS4_EEEE";
                  v321 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                  v262 = v1511;
                  if (vmla_lane_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v297.f32, *(float32x2_t *)_Q17.f32), v305, *(float32x2_t *)v297.f32, 1), _D21, v305, 1).f32[0] > 0.70711)
                  {
                    if (_S16 <= 0.0)
                    {
                      v335 = 0.01;
                      if (_S20 <= 0.0)
                        goto LABEL_432;
                    }
                    else
                    {
                      v335 = 0.0001;
                      v336 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                      v337 = 0.01;
                      if (v336 <= 0.01)
                        v337 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                      if (v336 >= 0.0001)
                        v338 = v337;
                      else
                        v338 = 0.0001;
                      if (_S16 < v259)
                        v335 = v338;
                      if (_S20 <= 0.0)
                      {
LABEL_432:
                        *(float *)&v339 = 0.01;
                        goto LABEL_453;
                      }
                    }
                    if (_S20 >= v259)
                    {
                      *(float *)&v339 = 0.0001;
LABEL_453:
                      v347 = *(float *)&v339;
                    }
                    else
                    {
                      v345 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                      v346 = 0.01;
                      if (v345 <= 0.01)
                        v346 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                      if (v345 >= 0.0001)
                        v347 = v346;
                      else
                        v347 = 0.0001;
                    }
                    *(float32x2_t *)&_Q17.i32[1] = v305;
                    *(float *)_Q7.i32 = v335 + v347;
                    v307 = vdivq_f32(vaddq_f32(vmulq_n_f32(v299, v335), vmulq_n_f32(_Q17, v347)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q7.i8, 0));
                  }
                  if (_S20 <= 0.0)
                  {
                    v350 = 0.01;
                    v261 = v1504;
                    if (_S16 <= 0.0)
                      goto LABEL_463;
                  }
                  else if (_S20 >= v259)
                  {
                    v350 = 0.0001;
                    v261 = v1504;
                    if (_S16 <= 0.0)
                      goto LABEL_463;
                  }
                  else
                  {
                    v348 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                    v349 = 0.01;
                    if (v348 <= 0.01)
                      v349 = v348;
                    if (v348 >= 0.0001)
                      v350 = v349;
                    else
                      v350 = 0.0001;
                    v261 = v1504;
                    if (_S16 <= 0.0)
                    {
LABEL_463:
                      *(float *)&v351 = 0.01;
                      goto LABEL_474;
                    }
                  }
                  if (_S16 >= v259)
                  {
                    *(float *)&v351 = 0.0001;
LABEL_474:
                    v354 = *(float *)&v351;
                  }
                  else
                  {
                    v352 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                    v353 = 0.01;
                    if (v352 <= 0.01)
                      v353 = v352;
                    if (v352 >= 0.0001)
                      v354 = v353;
                    else
                      v354 = 0.0001;
                  }
                  v323 = v292;
                  v355 = (float)(v350 * v354) / (float)(v350 + v354);
                  _S4 = 1.0;
                  if (v355 > 0.0001)
                  {
                    _S4 = 0.0;
                    if (v355 < 0.01)
                    {
                      v356 = (float)((float)(sqrtf(v355) + -0.01) / -0.09) + v259;
                      v357 = v356 <= v259 ? v356 : v259;
                      _NF = v356 < 0.0;
                      _S4 = 0.0;
                      if (!_NF)
                        _S4 = v357;
                    }
                  }
                  v358 = a3[7].u8[4];
                  if ((_BYTE)v285)
                    *(_BYTE *)(v308 + BYTE1(v285)) += v285;
                  if (BYTE2(v285))
                    *(_BYTE *)(v308 + BYTE3(v285)) += BYTE2(v285);
                  if (BYTE4(v285))
                    *(_BYTE *)(v308 + BYTE5(v285)) += BYTE4(v285);
                  _S14 = (float)((float)(v350 * _S14) + (float)(v354 * _S0)) / (float)(v350 + v354);
                  _S7 = 1.0;
                  if (*(unsigned __int8 *)(v308 + v358) < BYTE6(v285))
                    *(_BYTE *)(v308 + v358) = BYTE6(v285);
                  v246 = a3;
LABEL_491:
                  v292 = v323;
LABEL_492:
                  if (v246[6].f32[1] >= _S4)
                    _S2 = _S4;
                  else
                    _S2 = v246[6].f32[1];
                  _S0 = _S14;
                  _S5 = _S7;
                  v299 = v307;
LABEL_496:
                  _Q4.i32[0] = v246[6].i32[2];
                  if (_S2 <= *(float *)_Q4.i32)
                  {
                    _S0 = *(float *)&dword_2540CAD30;
                    _S2 = *(float *)algn_2540CAD34;
                    v299 = (float32x4_t)xmmword_2540CAE20;
                    _S5 = *((float *)&xmmword_2540CAE20 + 3);
                    v359 = v246[7].u8[4];
                    if (v246[7].i8[4])
                    {
                      v360 = v259 / v301;
                      if (v359 < 8)
                      {
                        v361 = 0;
                        goto LABEL_503;
                      }
                      v362 = v273;
                      v361 = v359 & 0xF8;
                      v363 = v292;
                      v364 = (uint64_t *)(v292 + v295);
                      v365 = v361;
                      do
                      {
                        _Q4.i64[0] = *v364;
                        _Q7 = *((int8x16_t *)v320 + 114);
                        _Q17 = (float32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, _Q7)), v360));
                        v366 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, v319[113])), v360));
                        _Q4 = vqtbl2q_s8(*(int8x16x2_t *)(&_Q17 - 1), v321[115]);
                        *v364++ = _Q4.i64[0];
                        v365 -= 8;
                      }
                      while (v365);
                      v273 = v362;
                      v292 = v363;
                      if (v361 != v359)
                      {
LABEL_503:
                        v367 = v359 - v361;
                        v368 = (__int8 *)(v292 + v361 + v295);
                        do
                        {
                          _Q4.i8[0] = *v368;
                          *(float *)_Q4.i32 = v360 * (float)_Q4.u32[0];
                          *v368++ = (int)*(float *)_Q4.i32;
                          --v367;
                        }
                        while (v367);
                      }
                    }
                  }
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)(v1564 + 2 * v273) = _H0;
                  __asm { FCVT            H0, S2 }
                  *(_WORD *)(v1527 + 2 * v1544) = _H0;
                  v299.f32[3] = _S5;
                  *(float16x4_t *)v247.i8 = vcvt_f16_f32(v299);
                  *(_QWORD *)v289 = v247.i64[0];
                  goto LABEL_338;
                }
                v262 = v1511;
                if (_S23 >= _S24)
                {
                  v261 = v1504;
                  if (v272)
                  {
                    v343 = (float)((float)((float)(v300 * -0.1) + 0.01) / 0.09) + v259;
                    v344 = (float)-v343 / v300;
                    _S4 = (float)(v300 * _S2) + v343;
                    if (v344 > _S2)
                      _S4 = 0.0;
                    _S14 = _S0;
                  }
                  else
                  {
                    _S14 = _S0;
                    _S4 = _S2;
                  }
                  _S7 = _S5;
                  v307 = v299;
                  v246 = a3;
                  v319 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  v320 = "NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                       + 62;
                  v321 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  goto LABEL_492;
                }
                v323 = v292;
                v340 = (float)((float)((float)(v300 * -0.1) + 0.01) / 0.09) + v259;
                v341 = (float)-v340 / v300;
                v342 = (float)(v300 * _S4) + v340;
                if (v341 <= _S4)
                  _S4 = v342;
                else
                  _S4 = 0.0;
                v324 = a3[7].u8[4];
                v261 = v1504;
                if (!(_BYTE)v285)
                {
LABEL_398:
                  v319 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  v320 = "NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                       + 62;
                  v321 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  if (BYTE2(v285))
                    *(_BYTE *)(v308 + BYTE3(v285)) = BYTE2(v285);
                  if (BYTE4(v285))
                    *(_BYTE *)(v308 + BYTE5(v285)) = BYTE4(v285);
                  *(_BYTE *)(v308 + v324) = BYTE6(v285);
                  v246 = a3;
                  goto LABEL_491;
                }
              }
              *(_BYTE *)(v308 + BYTE1(v285)) = v285;
              goto LABEL_398;
            }
          }
LABEL_338:
          ++v260;
          ++v263;
        }
        while (v260 != v256);
        ++v254;
        LODWORD(v244) = v1496;
        v253 += v1496;
        if (v254 == (_DWORD)v252)
        {
LABEL_1379:
          v1018 = v1582;
          if (v1582)
          {
            v1019 = (unint64_t *)&v1582->__shared_owners_;
            do
              v1020 = __ldaxr(v1019);
            while (__stlxr(v1020 - 1, v1019));
            if (!v1020)
            {
              ((void (*)(std::__shared_weak_count *))v1018->__on_zero_shared)(v1018);
              std::__shared_weak_count::__release_weak(v1018);
            }
          }
          v1021 = v1585;
          if (v1585)
          {
            v1022 = (unint64_t *)&v1585->__shared_owners_;
            do
              v1023 = __ldaxr(v1022);
            while (__stlxr(v1023 - 1, v1022));
            if (!v1023)
            {
              ((void (*)(std::__shared_weak_count *))v1021->__on_zero_shared)(v1021);
              std::__shared_weak_count::__release_weak(v1021);
            }
          }
          v1024 = v1588;
          if (v1588)
          {
            v1025 = (unint64_t *)&v1588->__shared_owners_;
            do
              v1026 = __ldaxr(v1025);
            while (__stlxr(v1026 - 1, v1025));
            if (!v1026)
            {
              ((void (*)(std::__shared_weak_count *))v1024->__on_zero_shared)(v1024);
              std::__shared_weak_count::__release_weak(v1024);
            }
          }
          v1027 = v1591;
          if (v1591)
          {
            v1028 = (unint64_t *)&v1591->__shared_owners_;
            do
              v1029 = __ldaxr(v1028);
            while (__stlxr(v1029 - 1, v1028));
            if (!v1029)
            {
              ((void (*)(std::__shared_weak_count *))v1027->__on_zero_shared)(v1027);
              std::__shared_weak_count::__release_weak(v1027);
            }
          }
          v1030 = v1593;
          if (v1593)
          {
            v1031 = (unint64_t *)&v1593->__shared_owners_;
            do
              v1032 = __ldaxr(v1031);
            while (__stlxr(v1032 - 1, v1031));
            if (!v1032)
            {
              ((void (*)(std::__shared_weak_count *))v1030->__on_zero_shared)(v1030);
              std::__shared_weak_count::__release_weak(v1030);
            }
          }
          v1033 = v1598;
          if (v1598)
          {
            v1034 = (unint64_t *)&v1598->__shared_owners_;
            do
              v1035 = __ldaxr(v1034);
            while (__stlxr(v1035 - 1, v1034));
            if (!v1035)
            {
              ((void (*)(std::__shared_weak_count *))v1033->__on_zero_shared)(v1033);
              std::__shared_weak_count::__release_weak(v1033);
            }
          }
          v1036 = v1604;
          if (v1604)
          {
            v1037 = (unint64_t *)&v1604->__shared_owners_;
            do
              v1038 = __ldaxr(v1037);
            while (__stlxr(v1038 - 1, v1037));
            if (!v1038)
            {
              ((void (*)(std::__shared_weak_count *))v1036->__on_zero_shared)(v1036);
              std::__shared_weak_count::__release_weak(v1036);
            }
          }
          v1039 = v1610;
          if (v1610)
          {
            v1040 = (unint64_t *)&v1610->__shared_owners_;
            do
              v1041 = __ldaxr(v1040);
            while (__stlxr(v1041 - 1, v1040));
            if (!v1041)
            {
              ((void (*)(std::__shared_weak_count *))v1039->__on_zero_shared)(v1039);
              std::__shared_weak_count::__release_weak(v1039);
            }
          }
          v1042 = v1616;
          if (v1616)
          {
            v1043 = (unint64_t *)&v1616->__shared_owners_;
            do
              v1044 = __ldaxr(v1043);
            while (__stlxr(v1044 - 1, v1043));
            if (!v1044)
            {
              ((void (*)(std::__shared_weak_count *))v1042->__on_zero_shared)(v1042);
              std::__shared_weak_count::__release_weak(v1042);
            }
          }
          v1045 = v1621;
          if (v1621)
          {
            v1046 = (unint64_t *)&v1621->__shared_owners_;
            do
              v1047 = __ldaxr(v1046);
            while (__stlxr(v1047 - 1, v1046));
            if (!v1047)
            {
              ((void (*)(std::__shared_weak_count *))v1045->__on_zero_shared)(v1045);
              std::__shared_weak_count::__release_weak(v1045);
            }
          }
          v1048 = v1623;
          if (v1623)
          {
            v1049 = (unint64_t *)&v1623->__shared_owners_;
            do
              v1050 = __ldaxr(v1049);
            while (__stlxr(v1050 - 1, v1049));
            if (!v1050)
            {
              ((void (*)(std::__shared_weak_count *))v1048->__on_zero_shared)(v1048);
              std::__shared_weak_count::__release_weak(v1048);
            }
          }
          v1051 = v1630;
          if (v1630)
          {
            v1052 = (unint64_t *)&v1630->__shared_owners_;
            do
              v1053 = __ldaxr(v1052);
            while (__stlxr(v1053 - 1, v1052));
            if (!v1053)
            {
              ((void (*)(std::__shared_weak_count *))v1051->__on_zero_shared)(v1051);
              std::__shared_weak_count::__release_weak(v1051);
            }
          }
          v1054 = v1636;
          if (v1636)
          {
            v1055 = (unint64_t *)&v1636->__shared_owners_;
            do
              v1056 = __ldaxr(v1055);
            while (__stlxr(v1056 - 1, v1055));
            if (!v1056)
            {
              ((void (*)(std::__shared_weak_count *))v1054->__on_zero_shared)(v1054);
              std::__shared_weak_count::__release_weak(v1054);
            }
          }
          v1057 = v1641;
          if (v1641)
          {
            v1058 = (unint64_t *)&v1641->__shared_owners_;
            do
              v1059 = __ldaxr(v1058);
            while (__stlxr(v1059 - 1, v1058));
            if (!v1059)
            {
              ((void (*)(std::__shared_weak_count *))v1057->__on_zero_shared)(v1057);
              std::__shared_weak_count::__release_weak(v1057);
            }
          }
          v1015 = v1646;
          if (!v1646)
            return;
          v1060 = (unint64_t *)&v1646->__shared_owners_;
          do
            v1017 = __ldaxr(v1060);
          while (__stlxr(v1017 - 1, v1060));
          goto LABEL_1896;
        }
      }
    case 3u:
      sub_2231CC34C(a5, (uint64_t)v1645);
      sub_2231CC3F0(a5, (uint64_t)v1640);
      sub_2231CD8A8(a5, (uint64_t)&v1634);
      sub_2231CC874(a5, (uint64_t)v1629);
      sub_2231D3D90(a4, (uint64_t)v1622);
      sub_2231D4288(a4, (uint64_t)v1620);
      sub_2231D48A8(a4, (uint64_t)&v1614);
      sub_2231D494C(a4, (uint64_t)&v1608);
      v1602 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1603);
      v373 = v14[8].u64[0];
      v374 = sub_2231D021C(a4);
      sub_2231CC34C((uint64_t)(a1 + 1), (uint64_t)v1597);
      sub_2231CC3F0((uint64_t)(a1 + 1), (uint64_t)v1592);
      sub_2231CD8A8((uint64_t)(a1 + 1), (uint64_t)&v1589);
      sub_2231CDAE0((uint64_t)(a1 + 1), (uint64_t)&v1586);
      v1583 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1584);
      sub_2231CC874((uint64_t)(a1 + 1), (uint64_t)v1581);
      v1390 = HIDWORD(v373);
      if (!HIDWORD(v373) || !(_DWORD)v373)
        goto LABEL_1601;
      v382 = 0;
      v383 = 0;
      v384 = HIDWORD(v374);
      v385 = (float)v374;
      v386 = v373;
      v387 = (float)v384;
      v388 = 0.5;
      v389 = 1.0;
      v1376 = v373;
      v1448 = v385;
      v1433 = (float)v384;
      while (1)
      {
        v390 = 0;
        _Q0.f32[0] = (float)v383;
        *(float *)v376.i32 = (float)v383 + v388;
        v1462 = v383 * v373;
        v376 = vdupq_lane_s32(*(int32x2_t *)v376.i8, 0);
        v1565 = (float32x4_t)v376;
        _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
        v1418 = _Q0;
        v1404 = v382;
        do
        {
          _H12 = *(_WORD *)(v1599 + 2 * (v1600 * (_DWORD)v390 + v1601 * v383));
          __asm { FCVT            S14, H12 }
          if (_S14 <= -65504.0)
            goto LABEL_519;
          _Q4 = v14[2];
          _Q5 = (int8x16_t)v14[3];
          _Q0 = vmlaq_n_f32(vaddq_f32(_Q4, vmlaq_f32(vmulq_n_f32(*v14, (float)v390 + v388), v1565, v14[1])), (float32x4_t)_Q5, v389 / _S14);
          *(int32x2_t *)v376.i8 = vdup_laneq_s32((int32x4_t)_Q0, 2);
          *(float32x2_t *)_Q0.f32 = vdiv_f32(*(float32x2_t *)_Q0.f32, *(float32x2_t *)v376.i8);
          if (_Q0.f32[0] < 0.0 || _Q0.f32[0] >= v385)
            goto LABEL_519;
          v401 = _Q0.f32[1];
          if (_Q0.f32[1] < 0.0 || _Q0.f32[1] >= v387)
            goto LABEL_519;
          v1545 = _Q0.f32[0];
          v403 = *(_WORD *)(v1594 + 2 * (v1595 * (_DWORD)v390 + v1596 * v383));
          v404 = v1648 * (_DWORD)v390 + v1649 * v383;
          v1512 = v1647;
          _H8 = *(_WORD *)(v1647 + 2 * v404);
          v1505 = v1643 * (_DWORD)v390 + v1644 * v383;
          v1497 = v1642;
          v1520 = *(_WORD *)(v1642 + 2 * v1505);
          v406 = v1618;
          v407 = v1619;
          v408 = v1617;
          if (!v1617
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v1487 = v404;
          v409 = 0;
          __asm
          {
            FCVT            S0, H8
            FCVT            S17, H8
          }
          if (*(float *)_Q17.i32 > 0.0 && *(float *)_Q17.i32 > -65504.0)
          {
            v409 = 0;
            _Q4 = a3[2];
            _Q5 = (int8x16_t)a3[3];
            v410 = vmlaq_n_f32(vaddq_f32(_Q4, vmlaq_f32(vmulq_n_f32(*a3, (float)v390), v1418, a3[1])), (float32x4_t)_Q5, v389 / _Q0.f32[0]);
            _Q2 = vdivq_f32(v410, (float32x4_t)vdupq_laneq_s32((int32x4_t)v410, 2));
            if (_Q2.f32[3] > 0.0 && _Q2.f32[3] > -65504.0 && _Q2.f32[0] >= 0.0)
            {
              v409 = 0;
              if (_Q2.f32[0] < (float)v1625 && _Q2.f32[1] >= 0.0 && _Q2.f32[1] < (float)v1626)
              {
                _H2 = *(_WORD *)(v1624 + 2 * (v1627 * _Q2.f32[0] + v1628 * _Q2.f32[1]));
                __asm { FCVT            S2, H2 }
                if (_Q2.f32[0] <= 0.0 || _Q2.f32[0] <= -65504.0)
                {
                  v409 = 0;
                }
                else
                {
                  v416 = (float)(v389 / _Q2.f32[3]) * 1.05;
                  if (_Q2.f32[0] < 2.0)
                    v416 = (float)(v389 / _Q2.f32[3]) + 0.1;
                  v409 = v416 < _Q2.f32[0];
                }
              }
            }
          }
          v1474 = v403;
          v417 = v401;
          v418 = v408 + 2 * (v406 * v1545 + v407 * v401);
          _Q5.i16[0] = *(_WORD *)(v418 + 4);
          _Q16.i16[0] = *(_WORD *)(v418 + 6);
          v379.i32[0] = *(_DWORD *)v418;
          v419 = v1637 + 2 * (v1638 * (_DWORD)v390 + v1639 * v383);
          v10.i32[0] = *(_DWORD *)v419;
          _H9 = *(_WORD *)(v419 + 4);
          _H10 = *(_WORD *)(v419 + 6);
          v422 = *(_QWORD *)(v1611 + 2 * (v1612 * v1545 + v1613 * v417));
          v423 = a1[84] + 8 * *(unsigned int *)(a1[81] + 4 * (v1462 + v390));
          _Q20.i16[0] = *(_WORD *)v423;
          _H27 = *(_WORD *)(v423 + 6);
          v425 = *(_DWORD *)(v423 + 2);
          v426 = v1631 + 2 * (v1632 * (_DWORD)v390 + v1633 * v383);
          v9.i32[0] = *(_DWORD *)v426;
          _H8 = *(_WORD *)(v426 + 4);
          _H13 = *(_WORD *)(v426 + 6);
          v429 = a1[98];
          LOBYTE(v423) = atomic_load((unsigned __int8 *)&qword_2540CAD78);
          if ((v423 & 1) == 0)
          {
            v1547 = _Q0.i32[0];
            v1529 = _Q17.i32[0];
            v1358 = a1[98];
            v1346 = _Q16.i16[0];
            v1337 = _Q5.i16[0];
            v1331 = v379;
            v1325 = _H27;
            v1319 = _Q20.i16[0];
            v516 = __cxa_guard_acquire(&qword_2540CAD78);
            _Q20.i16[0] = v1319;
            _H27 = v1325;
            v379 = v1331;
            _Q5.i16[0] = v1337;
            _Q16.i16[0] = v1346;
            v429 = v1358;
            _Q17.i32[0] = v1529;
            _Q0.i32[0] = v1547;
            if (v516)
            {
              v517 = a3[6].i32[2];
              dword_2540CAD70 = -947920896;
              *(_DWORD *)algn_2540CAD74 = v517;
              __cxa_guard_release(&qword_2540CAD78);
              _Q20.i16[0] = v1319;
              _H27 = v1325;
              v379 = v1331;
              _Q5.i16[0] = v1337;
              _Q16.i16[0] = v1346;
              v429 = v1358;
              _Q17.i32[0] = v1529;
              _Q0.i32[0] = v1547;
            }
          }
          v430 = atomic_load((unsigned __int8 *)&qword_2540CAD80);
          if ((v430 & 1) == 0)
          {
            v1548 = _Q0.i32[0];
            v1530 = _Q17.i32[0];
            v1359 = v429;
            v1347 = _Q16.i16[0];
            v1338 = _Q5.i16[0];
            v1332 = v379;
            v1326 = _H27;
            v1320 = _Q20.i16[0];
            v518 = __cxa_guard_acquire(&qword_2540CAD80);
            _Q20.i16[0] = v1320;
            _H27 = v1326;
            v379 = v1332;
            _Q5.i16[0] = v1338;
            _Q16.i16[0] = v1347;
            v429 = v1359;
            _Q17.i32[0] = v1530;
            _Q0.i32[0] = v1548;
            if (v518)
            {
              xmmword_2540CAE50 = 0uLL;
              __cxa_guard_release(&qword_2540CAD80);
              _Q20.i16[0] = v1320;
              _H27 = v1326;
              v379 = v1332;
              _Q5.i16[0] = v1338;
              _Q16.i16[0] = v1347;
              v429 = v1359;
              _Q17.i32[0] = v1530;
              _Q0.i32[0] = v1548;
            }
          }
          v431 = atomic_load((unsigned __int8 *)&qword_2540CAD88);
          if ((v431 & 1) == 0)
          {
            v1549 = _Q0.i32[0];
            v1531 = _Q17.i32[0];
            v1360 = v429;
            v1348 = _Q16.i16[0];
            v1339 = _Q5.i16[0];
            v1333 = v379;
            v1327 = _H27;
            v1321 = _Q20.i16[0];
            v519 = __cxa_guard_acquire(&qword_2540CAD88);
            _Q20.i16[0] = v1321;
            _H27 = v1327;
            v379 = v1333;
            _Q5.i16[0] = v1339;
            _Q16.i16[0] = v1348;
            v429 = v1360;
            _Q17.i32[0] = v1531;
            _Q0.i32[0] = v1549;
            if (v519)
            {
              xmmword_2540CAE60 = (__int128)vdupq_n_s32(0x7FC00000u);
              __cxa_guard_release(&qword_2540CAD88);
              _Q20.i16[0] = v1321;
              _H27 = v1327;
              v379 = v1333;
              _Q5.i16[0] = v1339;
              _Q16.i16[0] = v1348;
              v429 = v1360;
              _Q17.i32[0] = v1531;
              _Q0.i32[0] = v1549;
            }
          }
          v432 = 43 * v382;
          _H1 = v1520;
          __asm { FCVT            S2, H1 }
          v435 = vcvtq_f32_f16(v10);
          __asm
          {
            FCVT            S1, H9
            FCVT            S4, H10
          }
          v435.i32[2] = _S1;
          v1528 = v435;
          v1546 = _Q4.i64[0];
          v437 = vcvtq_f32_f16(v9);
          __asm
          {
            FCVT            S24, H8
            FCVT            S7, H13
          }
          v439 = v437;
          v439.i32[2] = _D24.i32[0];
          v440 = a3[6].f32[3];
          v441 = v440 * v440;
          __asm { FCVT            S26, H12 }
          _H23 = v1474;
          if (_S26 > 0.0)
          {
            __asm { FCVT            S6, H23 }
            v445 = a3[6].f32[2];
            if (v445 < _S6)
            {
              v447 = vcvtq_f32_f16(v379);
              __asm { FCVT            S5, H5 }
              v447.i32[2] = _S5;
              __asm
              {
                FCVT            S5, H16
                FCVT            S20, H20
              }
              _Q16.i32[0] = v425;
              v449 = (float32x2_t)vcvtq_f32_f16(*(float16x4_t *)_Q16.f32).u64[0];
              __asm { FCVT            S18, H27 }
              _Q16 = _Q20;
              *(float32x2_t *)&_Q16.i32[1] = v449;
              v451 = v429 + 43 * (v1462 + v390);
              v385 = v1448;
              v387 = v1433;
              v388 = 0.5;
              v389 = 1.0;
              if (*(float *)_Q17.i32 > 0.0 && v445 < _S2)
              {
                __asm { FCVT            S19, H23 }
                if (_S19 <= 0.0)
                {
                  v454 = 0.01;
                  _H23 = v1520;
                  __asm { FCVT            S23, H23 }
                  if (_S23 <= 0.0)
                    goto LABEL_571;
                }
                else if (_S19 >= 1.0)
                {
                  v454 = 0.0001;
                  _H23 = v1520;
                  __asm { FCVT            S23, H23 }
                  if (_S23 <= 0.0)
                    goto LABEL_571;
                }
                else
                {
                  v453 = (float)((float)(_S6 * -0.09) + 0.1) * (float)((float)(_S6 * -0.09) + 0.1);
                  v454 = 0.01;
                  if (v453 <= 0.01)
                    v454 = (float)((float)(_S6 * -0.09) + 0.1) * (float)((float)(_S6 * -0.09) + 0.1);
                  if (v453 < 0.0001)
                    v454 = 0.0001;
                  _H23 = v1520;
                  __asm { FCVT            S23, H23 }
                  if (_S23 <= 0.0)
                  {
LABEL_571:
                    *(float *)&v457 = 0.01;
                    goto LABEL_604;
                  }
                }
                if (_S23 >= 1.0)
                {
                  *(float *)&v457 = 0.0001;
LABEL_604:
                  v476 = *(float *)&v457;
                }
                else
                {
                  v474 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                  v475 = 0.01;
                  if (v474 <= 0.01)
                    v475 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                  if (v474 >= 0.0001)
                    v476 = v475;
                  else
                    v476 = 0.0001;
                }
                if ((float)((float)((float)(_S14 - _Q0.f32[0]) * (float)(_S14 - _Q0.f32[0])) / (float)(v454 + v476)) >= 1.1)
                {
                  if (_S26 < *(float *)_Q17.i32)
                  {
                    v487 = (float)((float)((float)(v440 * -0.1) + 0.01) / 0.09) + 1.0;
                    v488 = (float)-v487 / v440;
                    v489 = (float)(v440 * _S6) + v487;
                    if (v488 <= _S6)
                      _S6 = v489;
                    else
                      _S6 = 0.0;
                    v461 = a3;
                    v490 = a3[7].u8[4];
                    if ((_BYTE)v422)
                      *(_BYTE *)(v451 + BYTE1(v422)) = v422;
                    v471 = v1487;
                    if (BYTE2(v422))
                      *(_BYTE *)(v451 + BYTE3(v422)) = BYTE2(v422);
                    if (BYTE4(v422))
                      *(_BYTE *)(v451 + BYTE5(v422)) = BYTE4(v422);
                    *(_BYTE *)(v451 + v490) = BYTE6(v422);
                    _S5 = _S5 / v441;
                    goto LABEL_681;
                  }
                  if (v409)
                  {
                    v491 = (float)((float)((float)(v440 * -0.1) + 0.01) / 0.09) + 1.0;
                    v492 = (float)-v491 / v440;
                    v493 = (float)(v440 * _S2) + v491;
                    if (v492 <= _S2)
                      _S6 = v493;
                    else
                      _S6 = 0.0;
                    v447 = v1528;
                    _S5 = *(float *)&v1546 / v441;
                  }
                  else
                  {
                    v447 = v1528;
                    _S5 = *(float *)&v1546;
                    _S6 = _S2;
                  }
                  _S14 = _Q0.f32[0];
                  _S18 = _S7;
                  _Q16 = v439;
                  v461 = a3;
                  v463 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  v464 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  v465 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  v471 = v1487;
                }
                else
                {
                  v461 = a3;
                  v471 = v1487;
                  if (vmla_lane_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v437.f32, *(float32x2_t *)_Q20.f32), v449, *(float32x2_t *)v437.f32, 1), _D24, v449, 1).f32[0] > 0.70711)
                  {
                    if (_S19 <= 0.0)
                    {
                      *(float *)&v484 = 0.01;
                      v482 = 0.01;
                      if (_S23 <= 0.0)
                        goto LABEL_643;
                    }
                    else
                    {
                      v482 = 0.0001;
                      v483 = (float)((float)(_S6 * -0.09) + 0.1) * (float)((float)(_S6 * -0.09) + 0.1);
                      *(float *)&v484 = 0.01;
                      v485 = 0.01;
                      if (v483 <= 0.01)
                        v485 = (float)((float)(_S6 * -0.09) + 0.1) * (float)((float)(_S6 * -0.09) + 0.1);
                      if (v483 >= 0.0001)
                        v486 = v485;
                      else
                        v486 = 0.0001;
                      if (_S19 < 1.0)
                        v482 = v486;
                      if (_S23 <= 0.0)
                      {
LABEL_643:
                        v496 = *(float *)&v484;
                        goto LABEL_644;
                      }
                    }
                    if (_S23 >= 1.0)
                    {
                      *(float *)&v484 = 0.0001;
                      goto LABEL_643;
                    }
                    v494 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                    v495 = 0.01;
                    if (v494 <= 0.01)
                      v495 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                    if (v494 >= 0.0001)
                      v496 = v495;
                    else
                      v496 = 0.0001;
LABEL_644:
                    *(float32x2_t *)&_Q20.i32[1] = v449;
                    *(float *)_Q17.i32 = v482 + v496;
                    _Q16 = vdivq_f32(vaddq_f32(vmulq_n_f32(v439, v482), vmulq_n_f32(_Q20, v496)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q17.i8, 0));
                  }
                  if (_S23 <= 0.0)
                  {
                    v499 = 0.01;
                    if (_S19 <= 0.0)
                      goto LABEL_653;
                  }
                  else if (_S23 >= 1.0)
                  {
                    v499 = 0.0001;
                    if (_S19 <= 0.0)
                      goto LABEL_653;
                  }
                  else
                  {
                    v497 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                    v498 = 0.01;
                    if (v497 <= 0.01)
                      v498 = v497;
                    if (v497 >= 0.0001)
                      v499 = v498;
                    else
                      v499 = 0.0001;
                    if (_S19 <= 0.0)
                    {
LABEL_653:
                      *(float *)&v500 = 0.01;
                      goto LABEL_664;
                    }
                  }
                  if (_S19 >= 1.0)
                  {
                    *(float *)&v500 = 0.0001;
LABEL_664:
                    v503 = *(float *)&v500;
                  }
                  else
                  {
                    v501 = (float)((float)(_S6 * -0.09) + 0.1) * (float)((float)(_S6 * -0.09) + 0.1);
                    v502 = 0.01;
                    if (v501 <= 0.01)
                      v502 = v501;
                    if (v501 >= 0.0001)
                      v503 = v502;
                    else
                      v503 = 0.0001;
                  }
                  v504 = (float)(v499 * v503) / (float)(v499 + v503);
                  _S6 = 1.0;
                  if (v504 > 0.0001)
                  {
                    _S6 = 0.0;
                    if (v504 < 0.01)
                    {
                      v505 = (float)((float)(sqrtf(v504) + -0.01) / -0.09) + 1.0;
                      v506 = v505 <= 1.0 ? v505 : 1.0;
                      _NF = v505 < 0.0;
                      _S6 = 0.0;
                      if (!_NF)
                        _S6 = v506;
                    }
                  }
                  v507 = a3[7].u8[4];
                  if ((_BYTE)v422)
                    *(_BYTE *)(v451 + BYTE1(v422)) += v422;
                  if (BYTE2(v422))
                    *(_BYTE *)(v451 + BYTE3(v422)) += BYTE2(v422);
                  if (BYTE4(v422))
                    *(_BYTE *)(v451 + BYTE5(v422)) += BYTE4(v422);
                  _S14 = (float)((float)(v499 * _S14) + (float)(v503 * _Q0.f32[0])) / (float)(v499 + v503);
                  _Q0.f32[0] = _S5 + *(float *)&v1546;
                  v447 = vdivq_f32(vaddq_f32(vmulq_n_f32(v447, _S5), vmulq_n_f32(v1528, *(float *)&v1546)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0));
                  _S18 = 1.0;
                  if (*(unsigned __int8 *)(v451 + v507) < BYTE6(v422))
                    *(_BYTE *)(v451 + v507) = BYTE6(v422);
                  _S5 = _S5 + *(float *)&v1546;
LABEL_681:
                  v463 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                  v464 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                  v465 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                }
                v466 = v1512;
                v467 = v1505;
                v468 = v1497;
                if (v461[6].f32[1] >= _S6)
                  _S2 = _S6;
                else
                  _S2 = v461[6].f32[1];
                if (v461[6].f32[0] >= _S5)
                  _Q0.f32[0] = _S5;
                else
                  _Q0.i32[0] = v461[6].i32[0];
                v1528 = v447;
                v1546 = _Q0.i64[0];
                _Q0.f32[0] = _S14;
                _S7 = _S18;
                v439 = _Q16;
                goto LABEL_689;
              }
              v461 = a3;
              v472 = a3[7].u8[4];
              if ((_BYTE)v422)
                *(_BYTE *)(v451 + BYTE1(v422)) = v422;
              v471 = v1487;
              if (BYTE2(v422))
                *(_BYTE *)(v451 + BYTE3(v422)) = BYTE2(v422);
              if (BYTE4(v422))
                *(_BYTE *)(v451 + BYTE5(v422)) = BYTE4(v422);
              *(_BYTE *)(v451 + v472) = BYTE6(v422);
              goto LABEL_681;
            }
          }
          v385 = v1448;
          v387 = v1433;
          v388 = 0.5;
          v389 = 1.0;
          if (!v409)
          {
            v461 = a3;
            v463 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                               + 62);
            v464 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                               + 62);
            v465 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                               + 62);
            v471 = v1487;
            v466 = v1512;
            v467 = v1505;
            v468 = v1497;
            goto LABEL_689;
          }
          v458 = (float)((float)((float)(v440 * -0.1) + 0.01) / 0.09) + 1.0;
          *(float *)_Q5.i32 = (float)-v458 / v440;
          v459 = (float)(v440 * _S2) + v458;
          v42 = *(float *)_Q5.i32 <= _S2;
          _S2 = 0.0;
          if (v42)
            _S2 = v459;
          HIDWORD(v460) = HIDWORD(v1546);
          *(float *)&v460 = *(float *)&v1546 / v441;
          v1546 = v460;
          v461 = a3;
          v462 = a3[7].u8[4];
          v463 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
          v464 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
          v465 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
          v466 = v1512;
          v467 = v1505;
          v468 = v1497;
          if (!a3[7].i8[4])
          {
            v471 = v1487;
            goto LABEL_689;
          }
          v469 = 1.0 / v441;
          if (v462 < 8)
          {
            v470 = 0;
            v471 = v1487;
LABEL_598:
            v479 = v462 - v470;
            v480 = (__int8 *)(v429 + v470 + v432);
            do
            {
              _Q5.i8[0] = *v480;
              *(float *)_Q5.i32 = v469 * (float)_Q5.u32[0];
              *v480++ = (int)*(float *)_Q5.i32;
              --v479;
            }
            while (v479);
            goto LABEL_689;
          }
          v470 = v462 & 0xF8;
          v477 = (uint64_t *)(v429 + v432);
          v478 = v470;
          do
          {
            _Q5.i64[0] = *v477;
            _Q17 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q5, (int8x16_t)xmmword_2245F6720)), v469));
            _Q16 = (float32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q5, (int8x16_t)xmmword_2245F6710)), v469));
            _Q5 = vqtbl2q_s8(*(int8x16x2_t *)_Q16.f32, (int8x16_t)xmmword_2245F6730);
            *v477++ = _Q5.i64[0];
            v478 -= 8;
          }
          while (v478);
          v471 = v1487;
          if (v470 != v462)
            goto LABEL_598;
LABEL_689:
          if (_S2 > v461[6].f32[2])
            goto LABEL_517;
          _Q0.i32[0] = dword_2540CAD70;
          _S2 = *(float *)algn_2540CAD74;
          v508 = (int8x16_t)xmmword_2540CAE50;
          v439.i32[0] = HIDWORD(xmmword_2540CAE50);
          v1528 = (float32x4_t)xmmword_2540CAE50;
          v1546 = v439.i64[0];
          v439 = (float32x4_t)xmmword_2540CAE60;
          _S7 = *((float *)&xmmword_2540CAE60 + 3);
          v509 = v461[7].u8[4];
          if (!v461[7].i8[4])
            goto LABEL_517;
          v510 = v389 / v441;
          if (v509 >= 8)
          {
            v511 = v509 & 0xF8;
            v512 = (uint64_t *)(v429 + v432);
            v513 = v511;
            do
            {
              v508.i64[0] = *v512;
              _Q17 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v508, v464[114])), v510));
              _Q16 = (float32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v508, v463[113])), v510));
              v508 = vqtbl2q_s8(*(int8x16x2_t *)_Q16.f32, v465[115]);
              *v512++ = v508.i64[0];
              v513 -= 8;
            }
            while (v513);
            if (v511 == v509)
              goto LABEL_517;
          }
          else
          {
            v511 = 0;
          }
          v514 = v509 - v511;
          v515 = (__int8 *)(v429 + v511 + v432);
          do
          {
            v508.i8[0] = *v515;
            *(float *)v508.i32 = v510 * (float)v508.u32[0];
            *v515++ = (int)*(float *)v508.i32;
            --v514;
          }
          while (v514);
LABEL_517:
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v466 + 2 * v471) = _H0;
          __asm { FCVT            H0, S2 }
          *(_WORD *)(v468 + 2 * v467) = _H0;
          v439.f32[3] = _S7;
          *(float16x4_t *)v426 = vcvt_f16_f32(v439);
          v393 = v1638;
          v394 = v1639;
          v395 = v1637;
          if (!v1637
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          _Q0 = v1528;
          v376.i32[1] = HIDWORD(v1546);
          _Q0.i32[3] = v1546;
          *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(_Q0);
          *(_QWORD *)(v395 + 2 * (v393 * (_DWORD)v390 + v394 * v383)) = _Q0.i64[0];
LABEL_519:
          ++v390;
          ++v382;
        }
        while (v390 != v386);
        ++v383;
        LODWORD(v373) = v1376;
        v382 = v1404 + v1376;
        if (v383 == (_DWORD)v1390)
        {
LABEL_1601:
          v1147 = v1582;
          if (v1582)
          {
            v1148 = (unint64_t *)&v1582->__shared_owners_;
            do
              v1149 = __ldaxr(v1148);
            while (__stlxr(v1149 - 1, v1148));
            if (!v1149)
            {
              ((void (*)(std::__shared_weak_count *))v1147->__on_zero_shared)(v1147);
              std::__shared_weak_count::__release_weak(v1147);
            }
          }
          v1150 = v1585;
          if (v1585)
          {
            v1151 = (unint64_t *)&v1585->__shared_owners_;
            do
              v1152 = __ldaxr(v1151);
            while (__stlxr(v1152 - 1, v1151));
            if (!v1152)
            {
              ((void (*)(std::__shared_weak_count *))v1150->__on_zero_shared)(v1150);
              std::__shared_weak_count::__release_weak(v1150);
            }
          }
          v1153 = v1588;
          if (v1588)
          {
            v1154 = (unint64_t *)&v1588->__shared_owners_;
            do
              v1155 = __ldaxr(v1154);
            while (__stlxr(v1155 - 1, v1154));
            if (!v1155)
            {
              ((void (*)(std::__shared_weak_count *))v1153->__on_zero_shared)(v1153);
              std::__shared_weak_count::__release_weak(v1153);
            }
          }
          v1156 = v1591;
          if (v1591)
          {
            v1157 = (unint64_t *)&v1591->__shared_owners_;
            do
              v1158 = __ldaxr(v1157);
            while (__stlxr(v1158 - 1, v1157));
            if (!v1158)
            {
              ((void (*)(std::__shared_weak_count *))v1156->__on_zero_shared)(v1156);
              std::__shared_weak_count::__release_weak(v1156);
            }
          }
          v1159 = v1593;
          if (v1593)
          {
            v1160 = (unint64_t *)&v1593->__shared_owners_;
            do
              v1161 = __ldaxr(v1160);
            while (__stlxr(v1161 - 1, v1160));
            if (!v1161)
            {
              ((void (*)(std::__shared_weak_count *))v1159->__on_zero_shared)(v1159);
              std::__shared_weak_count::__release_weak(v1159);
            }
          }
          v1162 = v1598;
          if (v1598)
          {
            v1163 = (unint64_t *)&v1598->__shared_owners_;
            do
              v1164 = __ldaxr(v1163);
            while (__stlxr(v1164 - 1, v1163));
            if (!v1164)
            {
              ((void (*)(std::__shared_weak_count *))v1162->__on_zero_shared)(v1162);
              std::__shared_weak_count::__release_weak(v1162);
            }
          }
          v1165 = v1604;
          if (v1604)
          {
            v1166 = (unint64_t *)&v1604->__shared_owners_;
            do
              v1167 = __ldaxr(v1166);
            while (__stlxr(v1167 - 1, v1166));
            if (!v1167)
            {
              ((void (*)(std::__shared_weak_count *))v1165->__on_zero_shared)(v1165);
              std::__shared_weak_count::__release_weak(v1165);
            }
          }
          v1168 = v1610;
          if (v1610)
          {
            v1169 = (unint64_t *)&v1610->__shared_owners_;
            do
              v1170 = __ldaxr(v1169);
            while (__stlxr(v1170 - 1, v1169));
            if (!v1170)
            {
              ((void (*)(std::__shared_weak_count *))v1168->__on_zero_shared)(v1168);
              std::__shared_weak_count::__release_weak(v1168);
            }
          }
          v1171 = v1616;
          if (v1616)
          {
            v1172 = (unint64_t *)&v1616->__shared_owners_;
            do
              v1173 = __ldaxr(v1172);
            while (__stlxr(v1173 - 1, v1172));
            if (!v1173)
            {
              ((void (*)(std::__shared_weak_count *))v1171->__on_zero_shared)(v1171);
              std::__shared_weak_count::__release_weak(v1171);
            }
          }
          v1174 = v1621;
          if (v1621)
          {
            v1175 = (unint64_t *)&v1621->__shared_owners_;
            do
              v1176 = __ldaxr(v1175);
            while (__stlxr(v1176 - 1, v1175));
            if (!v1176)
            {
              ((void (*)(std::__shared_weak_count *))v1174->__on_zero_shared)(v1174);
              std::__shared_weak_count::__release_weak(v1174);
            }
          }
          v1177 = v1623;
          if (v1623)
          {
            v1178 = (unint64_t *)&v1623->__shared_owners_;
            do
              v1179 = __ldaxr(v1178);
            while (__stlxr(v1179 - 1, v1178));
            if (!v1179)
            {
              ((void (*)(std::__shared_weak_count *))v1177->__on_zero_shared)(v1177);
              std::__shared_weak_count::__release_weak(v1177);
            }
          }
          v1180 = v1630;
          if (v1630)
          {
            v1181 = (unint64_t *)&v1630->__shared_owners_;
            do
              v1182 = __ldaxr(v1181);
            while (__stlxr(v1182 - 1, v1181));
            if (!v1182)
            {
              ((void (*)(std::__shared_weak_count *))v1180->__on_zero_shared)(v1180);
              std::__shared_weak_count::__release_weak(v1180);
            }
          }
          v1183 = v1636;
          if (v1636)
          {
            v1184 = (unint64_t *)&v1636->__shared_owners_;
            do
              v1185 = __ldaxr(v1184);
            while (__stlxr(v1185 - 1, v1184));
            if (!v1185)
            {
              ((void (*)(std::__shared_weak_count *))v1183->__on_zero_shared)(v1183);
              std::__shared_weak_count::__release_weak(v1183);
            }
          }
          v1186 = v1641;
          if (v1641)
          {
            v1187 = (unint64_t *)&v1641->__shared_owners_;
            do
              v1188 = __ldaxr(v1187);
            while (__stlxr(v1188 - 1, v1187));
            if (!v1188)
            {
              ((void (*)(std::__shared_weak_count *))v1186->__on_zero_shared)(v1186);
              std::__shared_weak_count::__release_weak(v1186);
            }
          }
          v1015 = v1646;
          if (!v1646)
            return;
          v1189 = (unint64_t *)&v1646->__shared_owners_;
          do
            v1017 = __ldaxr(v1189);
          while (__stlxr(v1017 - 1, v1189));
          goto LABEL_1896;
        }
      }
    case 4u:
      sub_2231CC34C(a5, (uint64_t)v1645);
      sub_2231CC3F0(a5, (uint64_t)v1640);
      v1634 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1635);
      sub_2231CC874(a5, (uint64_t)v1629);
      sub_2231D3D90(a4, (uint64_t)v1622);
      sub_2231D4288(a4, (uint64_t)v1620);
      v1614 = &off_24EC25150;
      sub_223210C10((uint64_t)&v1615);
      v1608 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1609);
      sub_2231D4E60(a4, (uint64_t)&v1602);
      v115 = v14[8].u64[0];
      v116 = sub_2231D021C(a4);
      sub_2231CC34C((uint64_t)(a1 + 1), (uint64_t)v1597);
      sub_2231CC3F0((uint64_t)(a1 + 1), (uint64_t)v1592);
      v1589 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1590);
      v1586 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1587);
      v117 = a3;
      sub_2231CDCA4((uint64_t)(a1 + 1), (uint64_t)&v1583);
      sub_2231CC874((uint64_t)(a1 + 1), (uint64_t)v1581);
      v123 = HIDWORD(v115);
      if (!HIDWORD(v115) || !(_DWORD)v115)
        goto LABEL_1305;
      v124 = 0;
      v125 = 0;
      v126 = (float)v116;
      v127 = v115;
      v128 = (float)HIDWORD(v116);
      v129 = 0.5;
      v130 = 1.0;
      v1495 = v115;
      while (1)
      {
        v131 = 0;
        *(float *)v118.i32 = (float)v125;
        *(float *)v119.i32 = (float)v125 + v129;
        v1518 = v125 * v115;
        v132 = (float32x4_t)vdupq_lane_s32(v119, 0);
        v133 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v118.i8, 0);
        v134 = v124;
        v1503 = v132;
        v1510 = v133;
        do
        {
          _H15 = *(_WORD *)(v1599 + 2 * (v1600 * (_DWORD)v131 + v1601 * v125));
          __asm { FCVT            S14, H15 }
          if (_S14 > -65504.0)
          {
            _Q4 = (int8x16_t)v14[1];
            v140 = (int8x16_t)v14[3];
            v118 = (int32x4_t)vmlaq_n_f32(vaddq_f32(v14[2], vmlaq_f32(vmulq_n_f32(*v14, (float)v131 + v129), v132, (float32x4_t)_Q4)), (float32x4_t)v140, v130 / _S14);
            v119 = (int32x2_t)vdiv_f32(*(float32x2_t *)v118.i8, (float32x2_t)vdup_laneq_s32(v118, 2));
            if (*(float *)v119.i32 >= 0.0
              && *(float *)v119.i32 < v126
              && *(float *)&v119.i32[1] >= 0.0
              && *(float *)&v119.i32[1] < v128)
            {
              v143 = 0;
              v144 = v1648 * (_DWORD)v131 + v1649 * v125;
              v1563 = v1647;
              _H12 = *(_WORD *)(v1647 + 2 * v144);
              __asm { FCVT            S0, H12 }
              if (_S0 > 0.0)
              {
                __asm { FCVT            S4, H12 }
                if (_S4 > -65504.0)
                {
                  v143 = 0;
                  v140 = (int8x16_t)v117[1];
                  _Q7 = (int8x16_t)v117[2];
                  v148 = vmlaq_n_f32(vaddq_f32((float32x4_t)_Q7, vmlaq_f32(vmulq_n_f32(*v117, (float)v131), v133, (float32x4_t)v140)), v117[3], v130 / _S0);
                  _Q4 = (int8x16_t)vdivq_f32(v148, (float32x4_t)vdupq_laneq_s32((int32x4_t)v148, 2));
                  if (*(float *)&_Q4.i32[3] > 0.0 && *(float *)&_Q4.i32[3] > -65504.0 && *(float *)_Q4.i32 >= 0.0)
                  {
                    v143 = 0;
                    if (*(float *)_Q4.i32 < (float)v1625
                      && *(float *)&_Q4.i32[1] >= 0.0
                      && *(float *)&_Q4.i32[1] < (float)v1626)
                    {
                      _H4 = *(_WORD *)(v1624
                                     + 2
                                     * (v1627 * *(float *)_Q4.i32
                                      + v1628 * *(float *)&_Q4.i32[1]));
                      __asm { FCVT            S4, H4 }
                      if (*(float *)_Q4.i32 <= 0.0 || *(float *)_Q4.i32 <= -65504.0)
                      {
                        v143 = 0;
                      }
                      else
                      {
                        v153 = (float)(v130 / *(float *)&_Q4.i32[3]) * 1.05;
                        if (*(float *)_Q4.i32 < 2.0)
                          v153 = (float)(v130 / *(float *)&_Q4.i32[3]) + 0.1;
                        v143 = v153 < *(float *)_Q4.i32;
                      }
                    }
                  }
                }
              }
              _H9 = *(_WORD *)(v1594 + 2 * (v1595 * (_DWORD)v131 + v1596 * v125));
              v1543 = v1643 * (_DWORD)v131 + v1644 * v125;
              v1526 = v1642;
              _H27 = *(_WORD *)(v1642 + 2 * v1543);
              v156 = *(_QWORD *)(v1605
                               + 2
                               * (v1606 * *(float *)v119.i32 + v1607
                                                                           * *(float *)&v119.i32[1]));
              v157 = a1[84] + 8 * *(unsigned int *)(a1[81] + 4 * (v1518 + v131));
              _H11 = *(_WORD *)v157;
              _Q7.i16[0] = *(_WORD *)(v157 + 6);
              v159 = *(_DWORD *)(v157 + 2);
              v160 = v1631 + 2 * (v1632 * (_DWORD)v131 + v1633 * v125);
              v6.i32[0] = *(_DWORD *)v160;
              _H10 = *(_WORD *)(v160 + 4);
              _H13 = *(_WORD *)(v160 + 6);
              v163 = a1[101];
              LOBYTE(v157) = atomic_load((unsigned __int8 *)&qword_2540CAD58);
              if ((v157 & 1) == 0)
              {
                v1481 = _S0;
                v1468 = v123;
                v1456 = v124;
                v1442 = v126;
                v1427 = v128;
                v1398 = a1[101];
                v1412 = v1648 * (_DWORD)v131 + v1649 * v125;
                v1384 = *(_WORD *)(v1642 + 2 * v1543);
                v1370 = _Q7.i16[0];
                v240 = __cxa_guard_acquire(&qword_2540CAD58);
                _Q7.i16[0] = v1370;
                _H27 = v1384;
                v163 = v1398;
                v144 = v1412;
                v132 = v1503;
                v133 = v1510;
                v130 = 1.0;
                v129 = 0.5;
                v128 = v1427;
                v126 = v1442;
                v124 = v1456;
                v123 = v1468;
                _S0 = v1481;
                if (v240)
                {
                  v241 = a3[6].i32[2];
                  dword_2540CAD50 = -947920896;
                  *(_DWORD *)algn_2540CAD54 = v241;
                  __cxa_guard_release(&qword_2540CAD58);
                  _Q7.i16[0] = v1370;
                  _H27 = v1384;
                  v163 = v1398;
                  v144 = v1412;
                  v132 = v1503;
                  v133 = v1510;
                  v130 = 1.0;
                  v129 = 0.5;
                  v128 = v1427;
                  v126 = v1442;
                  v124 = v1456;
                  v123 = v1468;
                  _S0 = v1481;
                }
              }
              v164 = atomic_load((unsigned __int8 *)&qword_2540CAD60);
              if ((v164 & 1) == 0)
              {
                v1482 = _S0;
                v1469 = v123;
                v1457 = v124;
                v1443 = v126;
                v1428 = v128;
                v1399 = v163;
                v1413 = v144;
                v1385 = _H27;
                v1371 = _Q7.i16[0];
                v242 = __cxa_guard_acquire(&qword_2540CAD60);
                _Q7.i16[0] = v1371;
                _H27 = v1385;
                v163 = v1399;
                v144 = v1413;
                v132 = v1503;
                v133 = v1510;
                v130 = 1.0;
                v129 = 0.5;
                v128 = v1428;
                v126 = v1443;
                v124 = v1457;
                v123 = v1469;
                _S0 = v1482;
                if (v242)
                {
                  qword_2540CAE30 = 0;
                  unk_2540CAE38 = 0;
                  __cxa_guard_release(&qword_2540CAD60);
                  _Q7.i16[0] = v1371;
                  _H27 = v1385;
                  v163 = v1399;
                  v144 = v1413;
                  v132 = v1503;
                  v133 = v1510;
                  v130 = 1.0;
                  v129 = 0.5;
                  v128 = v1428;
                  v126 = v1443;
                  v124 = v1457;
                  v123 = v1469;
                  _S0 = v1482;
                }
              }
              v165 = atomic_load((unsigned __int8 *)&qword_2540CAD68);
              if ((v165 & 1) == 0)
              {
                v1483 = _S0;
                v1470 = v123;
                v1458 = v124;
                v1444 = v126;
                v1429 = v128;
                v1400 = v163;
                v1414 = v144;
                v1386 = _H27;
                v1372 = _Q7.i16[0];
                v243 = __cxa_guard_acquire(&qword_2540CAD68);
                _Q7.i16[0] = v1372;
                _H27 = v1386;
                v163 = v1400;
                v144 = v1414;
                v132 = v1503;
                v133 = v1510;
                v130 = 1.0;
                v129 = 0.5;
                v128 = v1429;
                v126 = v1444;
                v124 = v1458;
                v123 = v1470;
                _S0 = v1483;
                if (v243)
                {
                  xmmword_2540CAE40 = (__int128)vdupq_n_s32(0x7FC00000u);
                  __cxa_guard_release(&qword_2540CAD68);
                  _Q7.i16[0] = v1372;
                  _H27 = v1386;
                  v163 = v1400;
                  v144 = v1414;
                  v132 = v1503;
                  v133 = v1510;
                  v130 = 1.0;
                  v129 = 0.5;
                  v128 = v1429;
                  v126 = v1444;
                  v124 = v1458;
                  v123 = v1470;
                  _S0 = v1483;
                }
              }
              v166 = 27 * v134;
              __asm { FCVT            S2, H27 }
              v168 = vcvtq_f32_f16(v6);
              __asm
              {
                FCVT            S21, H10
                FCVT            S5, H13
              }
              v170 = v168;
              v170.i32[2] = _D21.i32[0];
              v171 = a3[6].f32[3];
              v172 = v171 * v171;
              __asm { FCVT            S23, H15 }
              if (_S23 <= 0.0)
                goto LABEL_207;
              __asm { FCVT            S4, H9 }
              v175 = a3[6].f32[2];
              if (v175 >= _S4)
              {
LABEL_207:
                if (v143)
                {
                  v186 = (float)((float)((float)(v171 * -0.1) + 0.01) / 0.09) + v130;
                  *(float *)v140.i32 = (float)-v186 / v171;
                  v187 = (float)(v171 * _S2) + v186;
                  v42 = *(float *)v140.i32 <= _S2;
                  _S2 = 0.0;
                  if (v42)
                    _S2 = v187;
                  v117 = a3;
                  v188 = a3[7].u8[7];
                  if (a3[7].i8[7])
                  {
                    v189 = v130 / v172;
                    v190 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                    v191 = "QueryMeshesENS_9allocatorIS4_EEEE";
                    v192 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                    if (v188 >= 8)
                    {
                      v199 = v144;
                      v193 = v188 & 0xF8;
                      v200 = v163;
                      v201 = (uint64_t *)(v163 + v166);
                      v202 = v193;
                      do
                      {
                        v140.i64[0] = *v201;
                        _Q7 = (int8x16_t)vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v140, (int8x16_t)xmmword_2245F6710)), v189);
                        _Q17 = (float32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v140, (int8x16_t)xmmword_2245F6720)), v189));
                        v203 = vcvtq_u32_f32((float32x4_t)_Q7);
                        v140 = vqtbl2q_s8(*(int8x16x2_t *)(&_Q17 - 1), (int8x16_t)xmmword_2245F6730);
                        *v201++ = v140.i64[0];
                        v202 -= 8;
                      }
                      while (v202);
                      v144 = v199;
                      v163 = v200;
                      if (v193 == v188)
                        goto LABEL_316;
                    }
                    else
                    {
                      v193 = 0;
                    }
                    v204 = v188 - v193;
                    v205 = (__int8 *)(v163 + v193 + v166);
                    do
                    {
                      v140.i8[0] = *v205;
                      *(float *)v140.i32 = v189 * (float)v140.u32[0];
                      *v205++ = (int)*(float *)v140.i32;
                      --v204;
                    }
                    while (v204);
                    goto LABEL_316;
                  }
                }
                else
                {
                  v117 = a3;
                }
                v190 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                   + 62);
                v191 = "NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                     + 62;
                v192 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                   + 62);
                goto LABEL_316;
              }
              __asm { FCVT            S17, H11 }
              v140.i32[0] = v159;
              v176 = (float32x2_t)vcvtq_f32_f16(*(float16x4_t *)v140.i8).u64[0];
              v178 = _Q17;
              v178.i32[1] = v176.i32[0];
              __asm { FCVT            S7, H7 }
              v178.i32[2] = v176.i32[1];
              v179 = v163 + 27 * (v1518 + v131);
              __asm { FCVT            S24, H12 }
              if (_S24 <= 0.0 || v175 >= _S2)
              {
                v194 = v163;
                v195 = a3[7].u8[7];
                if (!(_BYTE)v156)
                  goto LABEL_218;
              }
              else
              {
                __asm { FCVT            S16, H9 }
                if (_S16 <= 0.0)
                {
                  v183 = 0.01;
                  __asm { FCVT            S20, H27 }
                  if (_S20 <= 0.0)
                    goto LABEL_206;
                }
                else if (_S16 >= v130)
                {
                  v183 = 0.0001;
                  __asm { FCVT            S20, H27 }
                  if (_S20 <= 0.0)
                    goto LABEL_206;
                }
                else
                {
                  v182 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                  v183 = 0.01;
                  if (v182 <= 0.01)
                    v183 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                  if (v182 < 0.0001)
                    v183 = 0.0001;
                  __asm { FCVT            S20, H27 }
                  if (_S20 <= 0.0)
                  {
LABEL_206:
                    *(float *)&v185 = 0.01;
                    goto LABEL_240;
                  }
                }
                if (_S20 >= v130)
                {
                  *(float *)&v185 = 0.0001;
LABEL_240:
                  v198 = *(float *)&v185;
                }
                else
                {
                  v196 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                  v197 = 0.01;
                  if (v196 <= 0.01)
                    v197 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                  if (v196 >= 0.0001)
                    v198 = v197;
                  else
                    v198 = 0.0001;
                  v130 = 1.0;
                }
                if ((float)((float)((float)(_S14 - _S0) * (float)(_S14 - _S0)) / (float)(v183 + v198)) < 1.1)
                {
                  v190 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                  v191 = "QueryMeshesENS_9allocatorIS4_EEEE";
                  v192 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                  v133 = v1510;
                  if (vmla_lane_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)_Q17.f32), v176, *(float32x2_t *)v168.f32, 1), _D21, v176, 1).f32[0] > 0.70711)
                  {
                    if (_S16 <= 0.0)
                    {
                      v206 = 0.01;
                      if (_S20 <= 0.0)
                        goto LABEL_252;
                    }
                    else
                    {
                      v206 = 0.0001;
                      v207 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                      v208 = 0.01;
                      if (v207 <= 0.01)
                        v208 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                      if (v207 >= 0.0001)
                        v209 = v208;
                      else
                        v209 = 0.0001;
                      if (_S16 < v130)
                        v206 = v209;
                      if (_S20 <= 0.0)
                      {
LABEL_252:
                        *(float *)&v210 = 0.01;
                        goto LABEL_273;
                      }
                    }
                    if (_S20 >= v130)
                    {
                      *(float *)&v210 = 0.0001;
LABEL_273:
                      v218 = *(float *)&v210;
                    }
                    else
                    {
                      v216 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                      v217 = 0.01;
                      if (v216 <= 0.01)
                        v217 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                      if (v216 >= 0.0001)
                        v218 = v217;
                      else
                        v218 = 0.0001;
                    }
                    *(float32x2_t *)&_Q17.i32[1] = v176;
                    *(float *)_Q7.i32 = v206 + v218;
                    v178 = vdivq_f32(vaddq_f32(vmulq_n_f32(v170, v206), vmulq_n_f32(_Q17, v218)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q7.i8, 0));
                  }
                  if (_S20 <= 0.0)
                  {
                    v221 = 0.01;
                    v132 = v1503;
                    if (_S16 <= 0.0)
                      goto LABEL_283;
                  }
                  else if (_S20 >= v130)
                  {
                    v221 = 0.0001;
                    v132 = v1503;
                    if (_S16 <= 0.0)
                      goto LABEL_283;
                  }
                  else
                  {
                    v219 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                    v220 = 0.01;
                    if (v219 <= 0.01)
                      v220 = v219;
                    if (v219 >= 0.0001)
                      v221 = v220;
                    else
                      v221 = 0.0001;
                    v132 = v1503;
                    if (_S16 <= 0.0)
                    {
LABEL_283:
                      *(float *)&v222 = 0.01;
                      goto LABEL_294;
                    }
                  }
                  if (_S16 >= v130)
                  {
                    *(float *)&v222 = 0.0001;
LABEL_294:
                    v225 = *(float *)&v222;
                  }
                  else
                  {
                    v223 = (float)((float)(_S4 * -0.09) + 0.1) * (float)((float)(_S4 * -0.09) + 0.1);
                    v224 = 0.01;
                    if (v223 <= 0.01)
                      v224 = v223;
                    if (v223 >= 0.0001)
                      v225 = v224;
                    else
                      v225 = 0.0001;
                  }
                  v194 = v163;
                  v226 = (float)(v221 * v225) / (float)(v221 + v225);
                  _S4 = 1.0;
                  if (v226 > 0.0001)
                  {
                    _S4 = 0.0;
                    if (v226 < 0.01)
                    {
                      v227 = (float)((float)(sqrtf(v226) + -0.01) / -0.09) + v130;
                      v228 = v227 <= v130 ? v227 : v130;
                      _NF = v227 < 0.0;
                      _S4 = 0.0;
                      if (!_NF)
                        _S4 = v228;
                    }
                  }
                  v229 = a3[7].u8[7];
                  if ((_BYTE)v156)
                    *(_BYTE *)(v179 + BYTE1(v156)) += v156;
                  if (BYTE2(v156))
                    *(_BYTE *)(v179 + BYTE3(v156)) += BYTE2(v156);
                  if (BYTE4(v156))
                    *(_BYTE *)(v179 + BYTE5(v156)) += BYTE4(v156);
                  _S14 = (float)((float)(v221 * _S14) + (float)(v225 * _S0)) / (float)(v221 + v225);
                  _S7 = 1.0;
                  if (*(unsigned __int8 *)(v179 + v229) < BYTE6(v156))
                    *(_BYTE *)(v179 + v229) = BYTE6(v156);
                  v117 = a3;
LABEL_311:
                  v163 = v194;
LABEL_312:
                  if (v117[6].f32[1] >= _S4)
                    _S2 = _S4;
                  else
                    _S2 = v117[6].f32[1];
                  _S0 = _S14;
                  _S5 = _S7;
                  v170 = v178;
LABEL_316:
                  _Q4.i32[0] = v117[6].i32[2];
                  if (_S2 <= *(float *)_Q4.i32)
                  {
                    _S0 = *(float *)&dword_2540CAD50;
                    _S2 = *(float *)algn_2540CAD54;
                    v170 = (float32x4_t)xmmword_2540CAE40;
                    _S5 = *((float *)&xmmword_2540CAE40 + 3);
                    v230 = v117[7].u8[7];
                    if (v117[7].i8[7])
                    {
                      v231 = v130 / v172;
                      if (v230 < 8)
                      {
                        v232 = 0;
                        goto LABEL_323;
                      }
                      v233 = v144;
                      v232 = v230 & 0xF8;
                      v234 = v163;
                      v235 = (uint64_t *)(v163 + v166);
                      v236 = v232;
                      do
                      {
                        _Q4.i64[0] = *v235;
                        _Q7 = *((int8x16_t *)v191 + 114);
                        _Q17 = (float32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, _Q7)), v231));
                        v237 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, v190[113])), v231));
                        _Q4 = vqtbl2q_s8(*(int8x16x2_t *)(&_Q17 - 1), v192[115]);
                        *v235++ = _Q4.i64[0];
                        v236 -= 8;
                      }
                      while (v236);
                      v144 = v233;
                      v163 = v234;
                      if (v232 != v230)
                      {
LABEL_323:
                        v238 = v230 - v232;
                        v239 = (__int8 *)(v163 + v232 + v166);
                        do
                        {
                          _Q4.i8[0] = *v239;
                          *(float *)_Q4.i32 = v231 * (float)_Q4.u32[0];
                          *v239++ = (int)*(float *)_Q4.i32;
                          --v238;
                        }
                        while (v238);
                      }
                    }
                  }
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)(v1563 + 2 * v144) = _H0;
                  __asm { FCVT            H0, S2 }
                  *(_WORD *)(v1526 + 2 * v1543) = _H0;
                  v170.f32[3] = _S5;
                  *(float16x4_t *)v118.i8 = vcvt_f16_f32(v170);
                  *(_QWORD *)v160 = v118.i64[0];
                  goto LABEL_158;
                }
                v133 = v1510;
                if (_S23 >= _S24)
                {
                  v132 = v1503;
                  if (v143)
                  {
                    v214 = (float)((float)((float)(v171 * -0.1) + 0.01) / 0.09) + v130;
                    v215 = (float)-v214 / v171;
                    _S4 = (float)(v171 * _S2) + v214;
                    if (v215 > _S2)
                      _S4 = 0.0;
                    _S14 = _S0;
                  }
                  else
                  {
                    _S14 = _S0;
                    _S4 = _S2;
                  }
                  _S7 = _S5;
                  v178 = v170;
                  v117 = a3;
                  v190 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  v191 = "NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                       + 62;
                  v192 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  goto LABEL_312;
                }
                v194 = v163;
                v211 = (float)((float)((float)(v171 * -0.1) + 0.01) / 0.09) + v130;
                v212 = (float)-v211 / v171;
                v213 = (float)(v171 * _S4) + v211;
                if (v212 <= _S4)
                  _S4 = v213;
                else
                  _S4 = 0.0;
                v195 = a3[7].u8[7];
                v132 = v1503;
                if (!(_BYTE)v156)
                {
LABEL_218:
                  v190 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  v191 = "NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                       + 62;
                  v192 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  if (BYTE2(v156))
                    *(_BYTE *)(v179 + BYTE3(v156)) = BYTE2(v156);
                  if (BYTE4(v156))
                    *(_BYTE *)(v179 + BYTE5(v156)) = BYTE4(v156);
                  *(_BYTE *)(v179 + v195) = BYTE6(v156);
                  v117 = a3;
                  goto LABEL_311;
                }
              }
              *(_BYTE *)(v179 + BYTE1(v156)) = v156;
              goto LABEL_218;
            }
          }
LABEL_158:
          ++v131;
          ++v134;
        }
        while (v131 != v127);
        ++v125;
        LODWORD(v115) = v1495;
        v124 += v1495;
        if (v125 == (_DWORD)v123)
        {
LABEL_1305:
          v973 = v1582;
          if (v1582)
          {
            v974 = (unint64_t *)&v1582->__shared_owners_;
            do
              v975 = __ldaxr(v974);
            while (__stlxr(v975 - 1, v974));
            if (!v975)
            {
              ((void (*)(std::__shared_weak_count *))v973->__on_zero_shared)(v973);
              std::__shared_weak_count::__release_weak(v973);
            }
          }
          v976 = v1585;
          if (v1585)
          {
            v977 = (unint64_t *)&v1585->__shared_owners_;
            do
              v978 = __ldaxr(v977);
            while (__stlxr(v978 - 1, v977));
            if (!v978)
            {
              ((void (*)(std::__shared_weak_count *))v976->__on_zero_shared)(v976);
              std::__shared_weak_count::__release_weak(v976);
            }
          }
          v979 = v1588;
          if (v1588)
          {
            v980 = (unint64_t *)&v1588->__shared_owners_;
            do
              v981 = __ldaxr(v980);
            while (__stlxr(v981 - 1, v980));
            if (!v981)
            {
              ((void (*)(std::__shared_weak_count *))v979->__on_zero_shared)(v979);
              std::__shared_weak_count::__release_weak(v979);
            }
          }
          v982 = v1591;
          if (v1591)
          {
            v983 = (unint64_t *)&v1591->__shared_owners_;
            do
              v984 = __ldaxr(v983);
            while (__stlxr(v984 - 1, v983));
            if (!v984)
            {
              ((void (*)(std::__shared_weak_count *))v982->__on_zero_shared)(v982);
              std::__shared_weak_count::__release_weak(v982);
            }
          }
          v985 = v1593;
          if (v1593)
          {
            v986 = (unint64_t *)&v1593->__shared_owners_;
            do
              v987 = __ldaxr(v986);
            while (__stlxr(v987 - 1, v986));
            if (!v987)
            {
              ((void (*)(std::__shared_weak_count *))v985->__on_zero_shared)(v985);
              std::__shared_weak_count::__release_weak(v985);
            }
          }
          v988 = v1598;
          if (v1598)
          {
            v989 = (unint64_t *)&v1598->__shared_owners_;
            do
              v990 = __ldaxr(v989);
            while (__stlxr(v990 - 1, v989));
            if (!v990)
            {
              ((void (*)(std::__shared_weak_count *))v988->__on_zero_shared)(v988);
              std::__shared_weak_count::__release_weak(v988);
            }
          }
          v991 = v1604;
          if (v1604)
          {
            v992 = (unint64_t *)&v1604->__shared_owners_;
            do
              v993 = __ldaxr(v992);
            while (__stlxr(v993 - 1, v992));
            if (!v993)
            {
              ((void (*)(std::__shared_weak_count *))v991->__on_zero_shared)(v991);
              std::__shared_weak_count::__release_weak(v991);
            }
          }
          v994 = v1610;
          if (v1610)
          {
            v995 = (unint64_t *)&v1610->__shared_owners_;
            do
              v996 = __ldaxr(v995);
            while (__stlxr(v996 - 1, v995));
            if (!v996)
            {
              ((void (*)(std::__shared_weak_count *))v994->__on_zero_shared)(v994);
              std::__shared_weak_count::__release_weak(v994);
            }
          }
          v997 = v1616;
          if (v1616)
          {
            v998 = (unint64_t *)&v1616->__shared_owners_;
            do
              v999 = __ldaxr(v998);
            while (__stlxr(v999 - 1, v998));
            if (!v999)
            {
              ((void (*)(std::__shared_weak_count *))v997->__on_zero_shared)(v997);
              std::__shared_weak_count::__release_weak(v997);
            }
          }
          v1000 = v1621;
          if (v1621)
          {
            v1001 = (unint64_t *)&v1621->__shared_owners_;
            do
              v1002 = __ldaxr(v1001);
            while (__stlxr(v1002 - 1, v1001));
            if (!v1002)
            {
              ((void (*)(std::__shared_weak_count *))v1000->__on_zero_shared)(v1000);
              std::__shared_weak_count::__release_weak(v1000);
            }
          }
          v1003 = v1623;
          if (v1623)
          {
            v1004 = (unint64_t *)&v1623->__shared_owners_;
            do
              v1005 = __ldaxr(v1004);
            while (__stlxr(v1005 - 1, v1004));
            if (!v1005)
            {
              ((void (*)(std::__shared_weak_count *))v1003->__on_zero_shared)(v1003);
              std::__shared_weak_count::__release_weak(v1003);
            }
          }
          v1006 = v1630;
          if (v1630)
          {
            v1007 = (unint64_t *)&v1630->__shared_owners_;
            do
              v1008 = __ldaxr(v1007);
            while (__stlxr(v1008 - 1, v1007));
            if (!v1008)
            {
              ((void (*)(std::__shared_weak_count *))v1006->__on_zero_shared)(v1006);
              std::__shared_weak_count::__release_weak(v1006);
            }
          }
          v1009 = v1636;
          if (v1636)
          {
            v1010 = (unint64_t *)&v1636->__shared_owners_;
            do
              v1011 = __ldaxr(v1010);
            while (__stlxr(v1011 - 1, v1010));
            if (!v1011)
            {
              ((void (*)(std::__shared_weak_count *))v1009->__on_zero_shared)(v1009);
              std::__shared_weak_count::__release_weak(v1009);
            }
          }
          v1012 = v1641;
          if (v1641)
          {
            v1013 = (unint64_t *)&v1641->__shared_owners_;
            do
              v1014 = __ldaxr(v1013);
            while (__stlxr(v1014 - 1, v1013));
            if (!v1014)
            {
              ((void (*)(std::__shared_weak_count *))v1012->__on_zero_shared)(v1012);
              std::__shared_weak_count::__release_weak(v1012);
            }
          }
          v1015 = v1646;
          if (!v1646)
            return;
          v1016 = (unint64_t *)&v1646->__shared_owners_;
          do
            v1017 = __ldaxr(v1016);
          while (__stlxr(v1017 - 1, v1016));
          goto LABEL_1896;
        }
      }
    case 5u:
      sub_2231CC34C(a5, (uint64_t)v1645);
      sub_2231CC3F0(a5, (uint64_t)v1640);
      sub_2231CD8A8(a5, (uint64_t)&v1634);
      sub_2231CC874(a5, (uint64_t)v1629);
      sub_2231D3D90(a4, (uint64_t)v1622);
      sub_2231D4288(a4, (uint64_t)v1620);
      sub_2231D48A8(a4, (uint64_t)&v1614);
      v1608 = &off_24EC204C0;
      sub_223212780((uint64_t)&v1609);
      sub_2231D4E60(a4, (uint64_t)&v1602);
      v675 = v14[8].u64[0];
      v676 = sub_2231D021C(a4);
      sub_2231CC34C((uint64_t)(a1 + 1), (uint64_t)v1597);
      sub_2231CC3F0((uint64_t)(a1 + 1), (uint64_t)v1592);
      sub_2231CD8A8((uint64_t)(a1 + 1), (uint64_t)&v1589);
      v1586 = &off_24EC24270;
      sub_22320E108((uint64_t)&v1587);
      sub_2231CDCA4((uint64_t)(a1 + 1), (uint64_t)&v1583);
      sub_2231CC874((uint64_t)(a1 + 1), (uint64_t)v1581);
      v1394 = HIDWORD(v675);
      if (!HIDWORD(v675) || !(_DWORD)v675)
        goto LABEL_1749;
      v684 = 0;
      v685 = 0;
      v686 = HIDWORD(v676);
      v687 = (float)v676;
      v688 = v675;
      v689 = (float)v686;
      v690 = 0.5;
      v691 = 1.0;
      v1380 = v675;
      v1449 = v687;
      v1435 = (float)v686;
      while (1)
      {
        v692 = 0;
        _Q0.f32[0] = (float)v685;
        *(float *)v678.i32 = (float)v685 + v690;
        v1463 = v685 * v675;
        v678 = vdupq_lane_s32(*(int32x2_t *)v678.i8, 0);
        v1568 = (float32x4_t)v678;
        _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
        v1420 = _Q0;
        v1405 = v684;
        do
        {
          _H12 = *(_WORD *)(v1599 + 2 * (v1600 * (_DWORD)v692 + v1601 * v685));
          __asm { FCVT            S14, H12 }
          if (_S14 <= -65504.0)
            goto LABEL_912;
          _Q4 = v14[2];
          _Q5 = (int8x16_t)v14[3];
          _Q0 = vmlaq_n_f32(vaddq_f32(_Q4, vmlaq_f32(vmulq_n_f32(*v14, (float)v692 + v690), v1568, v14[1])), (float32x4_t)_Q5, v691 / _S14);
          *(int32x2_t *)v678.i8 = vdup_laneq_s32((int32x4_t)_Q0, 2);
          *(float32x2_t *)_Q0.f32 = vdiv_f32(*(float32x2_t *)_Q0.f32, *(float32x2_t *)v678.i8);
          if (_Q0.f32[0] < 0.0 || _Q0.f32[0] >= v687)
            goto LABEL_912;
          v703 = _Q0.f32[1];
          if (_Q0.f32[1] < 0.0 || _Q0.f32[1] >= v689)
            goto LABEL_912;
          v1556 = _Q0.f32[0];
          v705 = *(_WORD *)(v1594 + 2 * (v1595 * (_DWORD)v692 + v1596 * v685));
          v706 = v1648 * (_DWORD)v692 + v1649 * v685;
          v1515 = v1647;
          _H8 = *(_WORD *)(v1647 + 2 * v706);
          v1507 = v1643 * (_DWORD)v692 + v1644 * v685;
          v1500 = v1642;
          v1523 = *(_WORD *)(v1642 + 2 * v1507);
          v708 = v1618;
          v709 = v1619;
          v710 = v1617;
          if (!v1617
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v1490 = v706;
          v711 = 0;
          __asm
          {
            FCVT            S0, H8
            FCVT            S17, H8
          }
          if (*(float *)_Q17.i32 > 0.0 && *(float *)_Q17.i32 > -65504.0)
          {
            v711 = 0;
            _Q4 = a3[2];
            _Q5 = (int8x16_t)a3[3];
            v712 = vmlaq_n_f32(vaddq_f32(_Q4, vmlaq_f32(vmulq_n_f32(*a3, (float)v692), v1420, a3[1])), (float32x4_t)_Q5, v691 / _Q0.f32[0]);
            _Q2 = vdivq_f32(v712, (float32x4_t)vdupq_laneq_s32((int32x4_t)v712, 2));
            if (_Q2.f32[3] > 0.0 && _Q2.f32[3] > -65504.0 && _Q2.f32[0] >= 0.0)
            {
              v711 = 0;
              if (_Q2.f32[0] < (float)v1625 && _Q2.f32[1] >= 0.0 && _Q2.f32[1] < (float)v1626)
              {
                _H2 = *(_WORD *)(v1624 + 2 * (v1627 * _Q2.f32[0] + v1628 * _Q2.f32[1]));
                __asm { FCVT            S2, H2 }
                if (_Q2.f32[0] <= 0.0 || _Q2.f32[0] <= -65504.0)
                {
                  v711 = 0;
                }
                else
                {
                  v718 = (float)(v691 / _Q2.f32[3]) * 1.05;
                  if (_Q2.f32[0] < 2.0)
                    v718 = (float)(v691 / _Q2.f32[3]) + 0.1;
                  v711 = v718 < _Q2.f32[0];
                }
              }
            }
          }
          v1476 = v705;
          v719 = v703;
          v720 = v710 + 2 * (v708 * v1556 + v709 * v703);
          _Q5.i16[0] = *(_WORD *)(v720 + 4);
          _Q16.i16[0] = *(_WORD *)(v720 + 6);
          v681.i32[0] = *(_DWORD *)v720;
          v721 = v1637 + 2 * (v1638 * (_DWORD)v692 + v1639 * v685);
          v10.i32[0] = *(_DWORD *)v721;
          _H9 = *(_WORD *)(v721 + 4);
          _H10 = *(_WORD *)(v721 + 6);
          v724 = *(_QWORD *)(v1605 + 2 * (v1606 * v1556 + v1607 * v719));
          v725 = a1[84] + 8 * *(unsigned int *)(a1[81] + 4 * (v1463 + v692));
          _Q20.i16[0] = *(_WORD *)v725;
          _H27 = *(_WORD *)(v725 + 6);
          v727 = *(_DWORD *)(v725 + 2);
          v728 = v1631 + 2 * (v1632 * (_DWORD)v692 + v1633 * v685);
          v9.i32[0] = *(_DWORD *)v728;
          _H8 = *(_WORD *)(v728 + 4);
          _H13 = *(_WORD *)(v728 + 6);
          v731 = a1[101];
          LOBYTE(v725) = atomic_load((unsigned __int8 *)&qword_2540CAD98);
          if ((v725 & 1) == 0)
          {
            v1558 = _Q0.i32[0];
            v1538 = _Q17.i32[0];
            v1364 = a1[101];
            v1352 = _Q16.i16[0];
            v1343 = _Q5.i16[0];
            v1334 = v681;
            v1328 = _H27;
            v1322 = _Q20.i16[0];
            v818 = __cxa_guard_acquire(&qword_2540CAD98);
            _Q20.i16[0] = v1322;
            _H27 = v1328;
            v681 = v1334;
            _Q5.i16[0] = v1343;
            _Q16.i16[0] = v1352;
            v731 = v1364;
            _Q17.i32[0] = v1538;
            _Q0.i32[0] = v1558;
            if (v818)
            {
              v819 = a3[6].i32[2];
              dword_2540CAD90 = -947920896;
              *(_DWORD *)algn_2540CAD94 = v819;
              __cxa_guard_release(&qword_2540CAD98);
              _Q20.i16[0] = v1322;
              _H27 = v1328;
              v681 = v1334;
              _Q5.i16[0] = v1343;
              _Q16.i16[0] = v1352;
              v731 = v1364;
              _Q17.i32[0] = v1538;
              _Q0.i32[0] = v1558;
            }
          }
          v732 = atomic_load((unsigned __int8 *)&qword_2540CADA0);
          if ((v732 & 1) == 0)
          {
            v1559 = _Q0.i32[0];
            v1539 = _Q17.i32[0];
            v1365 = v731;
            v1353 = _Q16.i16[0];
            v1344 = _Q5.i16[0];
            v1335 = v681;
            v1329 = _H27;
            v1323 = _Q20.i16[0];
            v820 = __cxa_guard_acquire(&qword_2540CADA0);
            _Q20.i16[0] = v1323;
            _H27 = v1329;
            v681 = v1335;
            _Q5.i16[0] = v1344;
            _Q16.i16[0] = v1353;
            v731 = v1365;
            _Q17.i32[0] = v1539;
            _Q0.i32[0] = v1559;
            if (v820)
            {
              xmmword_2540CAE70 = 0uLL;
              __cxa_guard_release(&qword_2540CADA0);
              _Q20.i16[0] = v1323;
              _H27 = v1329;
              v681 = v1335;
              _Q5.i16[0] = v1344;
              _Q16.i16[0] = v1353;
              v731 = v1365;
              _Q17.i32[0] = v1539;
              _Q0.i32[0] = v1559;
            }
          }
          v733 = atomic_load((unsigned __int8 *)&qword_2540CADA8);
          if ((v733 & 1) == 0)
          {
            v1560 = _Q0.i32[0];
            v1540 = _Q17.i32[0];
            v1366 = v731;
            v1354 = _Q16.i16[0];
            v1345 = _Q5.i16[0];
            v1336 = v681;
            v1330 = _H27;
            v1324 = _Q20.i16[0];
            v821 = __cxa_guard_acquire(&qword_2540CADA8);
            _Q20.i16[0] = v1324;
            _H27 = v1330;
            v681 = v1336;
            _Q5.i16[0] = v1345;
            _Q16.i16[0] = v1354;
            v731 = v1366;
            _Q17.i32[0] = v1540;
            _Q0.i32[0] = v1560;
            if (v821)
            {
              xmmword_2540CAE80 = (__int128)vdupq_n_s32(0x7FC00000u);
              __cxa_guard_release(&qword_2540CADA8);
              _Q20.i16[0] = v1324;
              _H27 = v1330;
              v681 = v1336;
              _Q5.i16[0] = v1345;
              _Q16.i16[0] = v1354;
              v731 = v1366;
              _Q17.i32[0] = v1540;
              _Q0.i32[0] = v1560;
            }
          }
          v734 = 27 * v684;
          _H1 = v1523;
          __asm { FCVT            S2, H1 }
          v737 = vcvtq_f32_f16(v10);
          __asm
          {
            FCVT            S1, H9
            FCVT            S4, H10
          }
          v737.i32[2] = _S1;
          v1537 = v737;
          v1557 = _Q4.i64[0];
          v739 = vcvtq_f32_f16(v9);
          __asm
          {
            FCVT            S24, H8
            FCVT            S7, H13
          }
          v741 = v739;
          v741.i32[2] = _D24.i32[0];
          v742 = a3[6].f32[3];
          v743 = v742 * v742;
          __asm { FCVT            S26, H12 }
          _H23 = v1476;
          if (_S26 > 0.0)
          {
            __asm { FCVT            S6, H23 }
            v747 = a3[6].f32[2];
            if (v747 < _S6)
            {
              v749 = vcvtq_f32_f16(v681);
              __asm { FCVT            S5, H5 }
              v749.i32[2] = _S5;
              __asm
              {
                FCVT            S5, H16
                FCVT            S20, H20
              }
              _Q16.i32[0] = v727;
              v751 = (float32x2_t)vcvtq_f32_f16(*(float16x4_t *)_Q16.f32).u64[0];
              __asm { FCVT            S18, H27 }
              _Q16 = _Q20;
              *(float32x2_t *)&_Q16.i32[1] = v751;
              v753 = v731 + 27 * (v1463 + v692);
              v687 = v1449;
              v689 = v1435;
              v690 = 0.5;
              v691 = 1.0;
              if (*(float *)_Q17.i32 <= 0.0 || v747 >= _S2)
              {
                v766 = a3;
                v774 = a3[7].u8[7];
                if ((_BYTE)v724)
                  *(_BYTE *)(v753 + BYTE1(v724)) = v724;
                v755 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                   + 62);
                v756 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                   + 62);
                v757 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                   + 62);
                v770 = v1490;
                v771 = v1515;
                v772 = v1507;
                v773 = v1500;
                if (BYTE2(v724))
                  *(_BYTE *)(v753 + BYTE3(v724)) = BYTE2(v724);
                if (BYTE4(v724))
                  *(_BYTE *)(v753 + BYTE5(v724)) = BYTE4(v724);
                *(_BYTE *)(v753 + v774) = BYTE6(v724);
              }
              else
              {
                __asm { FCVT            S19, H23 }
                if (_S19 <= 0.0)
                {
                  v759 = 0.01;
                  v755 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                  v756 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                  v757 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
                  _H23 = v1523;
                  __asm { FCVT            S23, H23 }
                  if (_S23 <= 0.0)
                    goto LABEL_964;
                }
                else
                {
                  v755 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  v756 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  v757 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                     + 62);
                  if (_S19 >= 1.0)
                  {
                    v759 = 0.0001;
                    _H23 = v1523;
                    __asm { FCVT            S23, H23 }
                    if (_S23 <= 0.0)
                      goto LABEL_964;
                  }
                  else
                  {
                    v758 = (float)((float)(_S6 * -0.09) + 0.1) * (float)((float)(_S6 * -0.09) + 0.1);
                    v759 = 0.01;
                    if (v758 <= 0.01)
                      v759 = (float)((float)(_S6 * -0.09) + 0.1) * (float)((float)(_S6 * -0.09) + 0.1);
                    if (v758 < 0.0001)
                      v759 = 0.0001;
                    _H23 = v1523;
                    __asm { FCVT            S23, H23 }
                    if (_S23 <= 0.0)
                    {
LABEL_964:
                      *(float *)&v762 = 0.01;
                      goto LABEL_997;
                    }
                  }
                }
                if (_S23 >= 1.0)
                {
                  *(float *)&v762 = 0.0001;
LABEL_997:
                  v778 = *(float *)&v762;
                }
                else
                {
                  v776 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                  v777 = 0.01;
                  if (v776 <= 0.01)
                    v777 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                  if (v776 >= 0.0001)
                    v778 = v777;
                  else
                    v778 = 0.0001;
                }
                if ((float)((float)((float)(_S14 - _Q0.f32[0]) * (float)(_S14 - _Q0.f32[0])) / (float)(v759 + v778)) >= 1.1)
                {
                  if (_S26 >= *(float *)_Q17.i32)
                  {
                    if (v711)
                    {
                      v793 = (float)((float)((float)(v742 * -0.1) + 0.01) / 0.09) + 1.0;
                      v794 = (float)-v793 / v742;
                      v795 = (float)(v742 * _S2) + v793;
                      if (v794 <= _S2)
                        _S6 = v795;
                      else
                        _S6 = 0.0;
                      v749 = v1537;
                      _S5 = *(float *)&v1557 / v743;
                    }
                    else
                    {
                      v749 = v1537;
                      _S5 = *(float *)&v1557;
                      _S6 = _S2;
                    }
                    _S14 = _Q0.f32[0];
                    _S18 = _S7;
                    _Q16 = v741;
                    v766 = a3;
                    v770 = v1490;
                    v771 = v1515;
                    v772 = v1507;
                    v773 = v1500;
                  }
                  else
                  {
                    v789 = (float)((float)((float)(v742 * -0.1) + 0.01) / 0.09) + 1.0;
                    v790 = (float)-v789 / v742;
                    v791 = (float)(v742 * _S6) + v789;
                    if (v790 <= _S6)
                      _S6 = v791;
                    else
                      _S6 = 0.0;
                    v766 = a3;
                    v792 = a3[7].u8[7];
                    if ((_BYTE)v724)
                      *(_BYTE *)(v753 + BYTE1(v724)) = v724;
                    v770 = v1490;
                    v771 = v1515;
                    v772 = v1507;
                    v773 = v1500;
                    if (BYTE2(v724))
                      *(_BYTE *)(v753 + BYTE3(v724)) = BYTE2(v724);
                    if (BYTE4(v724))
                      *(_BYTE *)(v753 + BYTE5(v724)) = BYTE4(v724);
                    *(_BYTE *)(v753 + v792) = BYTE6(v724);
                    _S5 = _S5 / v743;
                  }
                }
                else
                {
                  v766 = a3;
                  v770 = v1490;
                  v771 = v1515;
                  v772 = v1507;
                  v773 = v1500;
                  if (vmla_lane_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v739.f32, *(float32x2_t *)_Q20.f32), v751, *(float32x2_t *)v739.f32, 1), _D24, v751, 1).f32[0] > 0.70711)
                  {
                    if (_S19 <= 0.0)
                    {
                      *(float *)&v786 = 0.01;
                      v784 = 0.01;
                      if (_S23 <= 0.0)
                        goto LABEL_1036;
                    }
                    else
                    {
                      v784 = 0.0001;
                      v785 = (float)((float)(_S6 * -0.09) + 0.1) * (float)((float)(_S6 * -0.09) + 0.1);
                      *(float *)&v786 = 0.01;
                      v787 = 0.01;
                      if (v785 <= 0.01)
                        v787 = (float)((float)(_S6 * -0.09) + 0.1) * (float)((float)(_S6 * -0.09) + 0.1);
                      if (v785 >= 0.0001)
                        v788 = v787;
                      else
                        v788 = 0.0001;
                      if (_S19 < 1.0)
                        v784 = v788;
                      if (_S23 <= 0.0)
                      {
LABEL_1036:
                        v798 = *(float *)&v786;
                        goto LABEL_1037;
                      }
                    }
                    if (_S23 >= 1.0)
                    {
                      *(float *)&v786 = 0.0001;
                      goto LABEL_1036;
                    }
                    v796 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                    v797 = 0.01;
                    if (v796 <= 0.01)
                      v797 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                    if (v796 >= 0.0001)
                      v798 = v797;
                    else
                      v798 = 0.0001;
LABEL_1037:
                    *(float32x2_t *)&_Q20.i32[1] = v751;
                    *(float *)_Q17.i32 = v784 + v798;
                    _Q16 = vdivq_f32(vaddq_f32(vmulq_n_f32(v741, v784), vmulq_n_f32(_Q20, v798)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q17.i8, 0));
                  }
                  if (_S23 <= 0.0)
                  {
                    v801 = 0.01;
                    if (_S19 <= 0.0)
                      goto LABEL_1046;
                  }
                  else if (_S23 >= 1.0)
                  {
                    v801 = 0.0001;
                    if (_S19 <= 0.0)
                      goto LABEL_1046;
                  }
                  else
                  {
                    v799 = (float)((float)(_S2 * -0.09) + 0.1) * (float)((float)(_S2 * -0.09) + 0.1);
                    v800 = 0.01;
                    if (v799 <= 0.01)
                      v800 = v799;
                    if (v799 >= 0.0001)
                      v801 = v800;
                    else
                      v801 = 0.0001;
                    if (_S19 <= 0.0)
                    {
LABEL_1046:
                      *(float *)&v802 = 0.01;
                      goto LABEL_1057;
                    }
                  }
                  if (_S19 >= 1.0)
                  {
                    *(float *)&v802 = 0.0001;
LABEL_1057:
                    v805 = *(float *)&v802;
                  }
                  else
                  {
                    v803 = (float)((float)(_S6 * -0.09) + 0.1) * (float)((float)(_S6 * -0.09) + 0.1);
                    v804 = 0.01;
                    if (v803 <= 0.01)
                      v804 = v803;
                    if (v803 >= 0.0001)
                      v805 = v804;
                    else
                      v805 = 0.0001;
                  }
                  v806 = (float)(v801 * v805) / (float)(v801 + v805);
                  _S6 = 1.0;
                  if (v806 > 0.0001)
                  {
                    _S6 = 0.0;
                    if (v806 < 0.01)
                    {
                      v807 = (float)((float)(sqrtf(v806) + -0.01) / -0.09) + 1.0;
                      v808 = v807 <= 1.0 ? v807 : 1.0;
                      _NF = v807 < 0.0;
                      _S6 = 0.0;
                      if (!_NF)
                        _S6 = v808;
                    }
                  }
                  v809 = a3[7].u8[7];
                  if ((_BYTE)v724)
                    *(_BYTE *)(v753 + BYTE1(v724)) += v724;
                  if (BYTE2(v724))
                    *(_BYTE *)(v753 + BYTE3(v724)) += BYTE2(v724);
                  if (BYTE4(v724))
                    *(_BYTE *)(v753 + BYTE5(v724)) += BYTE4(v724);
                  _S14 = (float)((float)(v801 * _S14) + (float)(v805 * _Q0.f32[0])) / (float)(v801 + v805);
                  _Q0.f32[0] = _S5 + *(float *)&v1557;
                  v749 = vdivq_f32(vaddq_f32(vmulq_n_f32(v749, _S5), vmulq_n_f32(v1537, *(float *)&v1557)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0));
                  _S18 = 1.0;
                  if (*(unsigned __int8 *)(v753 + v809) < BYTE6(v724))
                    *(_BYTE *)(v753 + v809) = BYTE6(v724);
                  _S5 = _S5 + *(float *)&v1557;
                }
              }
              if (v766[6].f32[1] >= _S6)
                _S2 = _S6;
              else
                _S2 = v766[6].f32[1];
              if (v766[6].f32[0] >= _S5)
                _Q0.f32[0] = _S5;
              else
                _Q0.i32[0] = v766[6].i32[0];
              v1537 = v749;
              v1557 = _Q0.i64[0];
              _Q0.f32[0] = _S14;
              _S7 = _S18;
              v741 = _Q16;
              goto LABEL_1081;
            }
          }
          v687 = v1449;
          v689 = v1435;
          v690 = 0.5;
          v691 = 1.0;
          if (!v711)
          {
            v766 = a3;
            v755 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                               + 62);
            v756 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                               + 62);
            v757 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                               + 62);
LABEL_973:
            v770 = v1490;
            v771 = v1515;
            v772 = v1507;
            v773 = v1500;
            goto LABEL_1081;
          }
          v763 = (float)((float)((float)(v742 * -0.1) + 0.01) / 0.09) + 1.0;
          *(float *)_Q5.i32 = (float)-v763 / v742;
          v764 = (float)(v742 * _S2) + v763;
          v42 = *(float *)_Q5.i32 <= _S2;
          _S2 = 0.0;
          if (v42)
            _S2 = v764;
          HIDWORD(v765) = HIDWORD(v1557);
          *(float *)&v765 = *(float *)&v1557 / v743;
          v1557 = v765;
          v766 = a3;
          v767 = a3[7].u8[7];
          v755 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
          v756 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
          v757 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
          if (!a3[7].i8[7])
            goto LABEL_973;
          v768 = 1.0 / v743;
          if (v767 < 8)
          {
            v769 = 0;
            v770 = v1490;
            v771 = v1515;
            v772 = v1507;
            v773 = v1500;
LABEL_991:
            v781 = v767 - v769;
            v782 = (__int8 *)(v731 + v769 + v734);
            do
            {
              _Q5.i8[0] = *v782;
              *(float *)_Q5.i32 = v768 * (float)_Q5.u32[0];
              *v782++ = (int)*(float *)_Q5.i32;
              --v781;
            }
            while (v781);
            goto LABEL_1081;
          }
          v769 = v767 & 0xF8;
          v779 = (uint64_t *)(v731 + v734);
          v780 = v769;
          do
          {
            _Q5.i64[0] = *v779;
            _Q17 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q5, (int8x16_t)xmmword_2245F6720)), v768));
            _Q16 = (float32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q5, (int8x16_t)xmmword_2245F6710)), v768));
            _Q5 = vqtbl2q_s8(*(int8x16x2_t *)_Q16.f32, (int8x16_t)xmmword_2245F6730);
            *v779++ = _Q5.i64[0];
            v780 -= 8;
          }
          while (v780);
          v770 = v1490;
          v771 = v1515;
          v772 = v1507;
          v773 = v1500;
          if (v769 != v767)
            goto LABEL_991;
LABEL_1081:
          if (_S2 > v766[6].f32[2])
            goto LABEL_910;
          _Q0.i32[0] = dword_2540CAD90;
          _S2 = *(float *)algn_2540CAD94;
          v810 = (int8x16_t)xmmword_2540CAE70;
          v741.i32[0] = HIDWORD(xmmword_2540CAE70);
          v1537 = (float32x4_t)xmmword_2540CAE70;
          v1557 = v741.i64[0];
          v741 = (float32x4_t)xmmword_2540CAE80;
          _S7 = *((float *)&xmmword_2540CAE80 + 3);
          v811 = v766[7].u8[7];
          if (!v766[7].i8[7])
            goto LABEL_910;
          v812 = v691 / v743;
          if (v811 >= 8)
          {
            v813 = v811 & 0xF8;
            v814 = (uint64_t *)(v731 + v734);
            v815 = v813;
            do
            {
              v810.i64[0] = *v814;
              _Q17 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v810, v756[114])), v812));
              _Q16 = (float32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v810, v755[113])), v812));
              v810 = vqtbl2q_s8(*(int8x16x2_t *)_Q16.f32, v757[115]);
              *v814++ = v810.i64[0];
              v815 -= 8;
            }
            while (v815);
            if (v813 == v811)
              goto LABEL_910;
          }
          else
          {
            v813 = 0;
          }
          v816 = v811 - v813;
          v817 = (__int8 *)(v731 + v813 + v734);
          do
          {
            v810.i8[0] = *v817;
            *(float *)v810.i32 = v812 * (float)v810.u32[0];
            *v817++ = (int)*(float *)v810.i32;
            --v816;
          }
          while (v816);
LABEL_910:
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v771 + 2 * v770) = _H0;
          __asm { FCVT            H0, S2 }
          *(_WORD *)(v773 + 2 * v772) = _H0;
          v741.f32[3] = _S7;
          *(float16x4_t *)v728 = vcvt_f16_f32(v741);
          v695 = v1638;
          v696 = v1639;
          v697 = v1637;
          if (!v1637
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          _Q0 = v1537;
          v678.i32[1] = HIDWORD(v1557);
          _Q0.i32[3] = v1557;
          *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(_Q0);
          *(_QWORD *)(v697 + 2 * (v695 * (_DWORD)v692 + v696 * v685)) = _Q0.i64[0];
LABEL_912:
          ++v692;
          ++v684;
        }
        while (v692 != v688);
        ++v685;
        LODWORD(v675) = v1380;
        v684 = v1405 + v1380;
        if (v685 == (_DWORD)v1394)
        {
LABEL_1749:
          v1233 = v1582;
          if (v1582)
          {
            v1234 = (unint64_t *)&v1582->__shared_owners_;
            do
              v1235 = __ldaxr(v1234);
            while (__stlxr(v1235 - 1, v1234));
            if (!v1235)
            {
              ((void (*)(std::__shared_weak_count *))v1233->__on_zero_shared)(v1233);
              std::__shared_weak_count::__release_weak(v1233);
            }
          }
          v1236 = v1585;
          if (v1585)
          {
            v1237 = (unint64_t *)&v1585->__shared_owners_;
            do
              v1238 = __ldaxr(v1237);
            while (__stlxr(v1238 - 1, v1237));
            if (!v1238)
            {
              ((void (*)(std::__shared_weak_count *))v1236->__on_zero_shared)(v1236);
              std::__shared_weak_count::__release_weak(v1236);
            }
          }
          v1239 = v1588;
          if (v1588)
          {
            v1240 = (unint64_t *)&v1588->__shared_owners_;
            do
              v1241 = __ldaxr(v1240);
            while (__stlxr(v1241 - 1, v1240));
            if (!v1241)
            {
              ((void (*)(std::__shared_weak_count *))v1239->__on_zero_shared)(v1239);
              std::__shared_weak_count::__release_weak(v1239);
            }
          }
          v1242 = v1591;
          if (v1591)
          {
            v1243 = (unint64_t *)&v1591->__shared_owners_;
            do
              v1244 = __ldaxr(v1243);
            while (__stlxr(v1244 - 1, v1243));
            if (!v1244)
            {
              ((void (*)(std::__shared_weak_count *))v1242->__on_zero_shared)(v1242);
              std::__shared_weak_count::__release_weak(v1242);
            }
          }
          v1245 = v1593;
          if (v1593)
          {
            v1246 = (unint64_t *)&v1593->__shared_owners_;
            do
              v1247 = __ldaxr(v1246);
            while (__stlxr(v1247 - 1, v1246));
            if (!v1247)
            {
              ((void (*)(std::__shared_weak_count *))v1245->__on_zero_shared)(v1245);
              std::__shared_weak_count::__release_weak(v1245);
            }
          }
          v1248 = v1598;
          if (v1598)
          {
            v1249 = (unint64_t *)&v1598->__shared_owners_;
            do
              v1250 = __ldaxr(v1249);
            while (__stlxr(v1250 - 1, v1249));
            if (!v1250)
            {
              ((void (*)(std::__shared_weak_count *))v1248->__on_zero_shared)(v1248);
              std::__shared_weak_count::__release_weak(v1248);
            }
          }
          v1251 = v1604;
          if (v1604)
          {
            v1252 = (unint64_t *)&v1604->__shared_owners_;
            do
              v1253 = __ldaxr(v1252);
            while (__stlxr(v1253 - 1, v1252));
            if (!v1253)
            {
              ((void (*)(std::__shared_weak_count *))v1251->__on_zero_shared)(v1251);
              std::__shared_weak_count::__release_weak(v1251);
            }
          }
          v1254 = v1610;
          if (v1610)
          {
            v1255 = (unint64_t *)&v1610->__shared_owners_;
            do
              v1256 = __ldaxr(v1255);
            while (__stlxr(v1256 - 1, v1255));
            if (!v1256)
            {
              ((void (*)(std::__shared_weak_count *))v1254->__on_zero_shared)(v1254);
              std::__shared_weak_count::__release_weak(v1254);
            }
          }
          v1257 = v1616;
          if (v1616)
          {
            v1258 = (unint64_t *)&v1616->__shared_owners_;
            do
              v1259 = __ldaxr(v1258);
            while (__stlxr(v1259 - 1, v1258));
            if (!v1259)
            {
              ((void (*)(std::__shared_weak_count *))v1257->__on_zero_shared)(v1257);
              std::__shared_weak_count::__release_weak(v1257);
            }
          }
          v1260 = v1621;
          if (v1621)
          {
            v1261 = (unint64_t *)&v1621->__shared_owners_;
            do
              v1262 = __ldaxr(v1261);
            while (__stlxr(v1262 - 1, v1261));
            if (!v1262)
            {
              ((void (*)(std::__shared_weak_count *))v1260->__on_zero_shared)(v1260);
              std::__shared_weak_count::__release_weak(v1260);
            }
          }
          v1263 = v1623;
          if (v1623)
          {
            v1264 = (unint64_t *)&v1623->__shared_owners_;
            do
              v1265 = __ldaxr(v1264);
            while (__stlxr(v1265 - 1, v1264));
            if (!v1265)
            {
              ((void (*)(std::__shared_weak_count *))v1263->__on_zero_shared)(v1263);
              std::__shared_weak_count::__release_weak(v1263);
            }
          }
          v1266 = v1630;
          if (v1630)
          {
            v1267 = (unint64_t *)&v1630->__shared_owners_;
            do
              v1268 = __ldaxr(v1267);
            while (__stlxr(v1268 - 1, v1267));
            if (!v1268)
            {
              ((void (*)(std::__shared_weak_count *))v1266->__on_zero_shared)(v1266);
              std::__shared_weak_count::__release_weak(v1266);
            }
          }
          v1269 = v1636;
          if (v1636)
          {
            v1270 = (unint64_t *)&v1636->__shared_owners_;
            do
              v1271 = __ldaxr(v1270);
            while (__stlxr(v1271 - 1, v1270));
            if (!v1271)
            {
              ((void (*)(std::__shared_weak_count *))v1269->__on_zero_shared)(v1269);
              std::__shared_weak_count::__release_weak(v1269);
            }
          }
          v1272 = v1641;
          if (v1641)
          {
            v1273 = (unint64_t *)&v1641->__shared_owners_;
            do
              v1274 = __ldaxr(v1273);
            while (__stlxr(v1274 - 1, v1273));
            if (!v1274)
            {
              ((void (*)(std::__shared_weak_count *))v1272->__on_zero_shared)(v1272);
              std::__shared_weak_count::__release_weak(v1272);
            }
          }
          v1015 = v1646;
          if (!v1646)
            return;
          v1275 = (unint64_t *)&v1646->__shared_owners_;
          do
            v1017 = __ldaxr(v1275);
          while (__stlxr(v1017 - 1, v1275));
          goto LABEL_1896;
        }
      }
    case 6u:
      sub_2231CC34C(a5, (uint64_t)v1645);
      sub_2231CC3F0(a5, (uint64_t)v1640);
      v1634 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1635);
      sub_2231CC874(a5, (uint64_t)v1629);
      sub_2231D3D90(a4, (uint64_t)v1622);
      sub_2231D4288(a4, (uint64_t)v1620);
      v1614 = &off_24EC25150;
      sub_223210C10((uint64_t)&v1615);
      sub_2231D494C(a4, (uint64_t)&v1608);
      sub_2231D4E60(a4, (uint64_t)&v1602);
      v822 = v14[8].u64[0];
      v823 = sub_2231D021C(a4);
      sub_2231CC34C((uint64_t)(a1 + 1), (uint64_t)v1597);
      sub_2231CC3F0((uint64_t)(a1 + 1), (uint64_t)v1592);
      v1589 = &off_24EC23CA0;
      sub_22320C75C((uint64_t)&v1590);
      sub_2231CDAE0((uint64_t)(a1 + 1), (uint64_t)&v1586);
      v824 = a3;
      sub_2231CDCA4((uint64_t)(a1 + 1), (uint64_t)&v1583);
      sub_2231CC874((uint64_t)(a1 + 1), (uint64_t)v1581);
      v829 = HIDWORD(v822);
      if (!HIDWORD(v822) || !(_DWORD)v822)
        goto LABEL_1527;
      v830 = 0;
      v831 = 0;
      v832 = (float)v823;
      v833 = v822;
      v834 = (float)HIDWORD(v823);
      v835 = 0.5;
      v836 = 1.0;
      v837 = 2.0;
      v838 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                         + 62);
      v1464 = v822;
      break;
    case 7u:
      sub_2231CC34C(a5, (uint64_t)v1645);
      sub_2231CC3F0(a5, (uint64_t)v1640);
      sub_2231CD8A8(a5, (uint64_t)&v1634);
      sub_2231CC874(a5, (uint64_t)v1629);
      sub_2231D3D90(a4, (uint64_t)v1622);
      sub_2231D4288(a4, (uint64_t)v1620);
      sub_2231D48A8(a4, (uint64_t)&v1614);
      sub_2231D494C(a4, (uint64_t)&v1608);
      sub_2231D4E60(a4, (uint64_t)&v1602);
      v1488 = v14[8].i64[0];
      v520 = sub_2231D021C(a4);
      sub_2231CC34C((uint64_t)(a1 + 1), (uint64_t)v1597);
      sub_2231CC3F0((uint64_t)(a1 + 1), (uint64_t)v1592);
      sub_2231CD8A8((uint64_t)(a1 + 1), (uint64_t)&v1589);
      sub_2231CDAE0((uint64_t)(a1 + 1), (uint64_t)&v1586);
      sub_2231CDCA4((uint64_t)(a1 + 1), (uint64_t)&v1583);
      sub_2231CC874((uint64_t)(a1 + 1), (uint64_t)v1581);
      if (HIDWORD(v1488) && (_DWORD)v1488)
      {
        v1513 = 0;
        v524 = 0;
        v525 = (float)v520;
        v526 = (float)HIDWORD(v520);
        do
        {
          v527 = 0;
          v521.f32[0] = (float)v524;
          _Q1.f32[0] = (float)v524 + 0.5;
          _Q1 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0);
          v1550 = _Q1;
          v521 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v521.f32, 0);
          v1498 = v521;
          do
          {
            _H0 = *(_WORD *)(v1599 + 2 * (v1600 * (_DWORD)v527 + v1601 * v524));
            __asm { FCVT            S0, H0 }
            if (_S0 > -65504.0)
            {
              v530 = (int8x16_t)v14[1];
              v531 = (int8x16_t)v14[2];
              v532 = v14[3];
              v533.i64[0] = v1550.i64[0];
              _Q1 = vmlaq_n_f32(vaddq_f32((float32x4_t)v531, vmlaq_f32(vmulq_n_f32(*v14, (float)v527 + 0.5), v1550, (float32x4_t)v530)), v532, 1.0 / _S0);
              *(int32x2_t *)v523.f32 = vdup_laneq_s32((int32x4_t)_Q1, 2);
              *(float32x2_t *)_Q1.f32 = vdiv_f32(*(float32x2_t *)_Q1.f32, *(float32x2_t *)v523.f32);
              if (_Q1.f32[0] >= 0.0 && _Q1.f32[0] < v525)
              {
                v535 = _Q1.f32[1];
                if (_Q1.f32[1] >= 0.0 && _Q1.f32[1] < v526)
                {
                  v1532 = _Q1.f32[0];
                  _H1 = *(_WORD *)(v1594 + 2 * (v1595 * (_DWORD)v527 + v1596 * v524));
                  __asm { FCVT            S1, H1 }
                  v1576[0] = _S0;
                  v1576[1] = _S1;
                  v539 = v1647;
                  v540 = v1643 * (_DWORD)v527 + v1644 * v524;
                  v541 = v1642;
                  v1521 = v1648 * (_DWORD)v527 + v1649 * v524;
                  _H0 = *(_WORD *)(v1647 + 2 * v1521);
                  __asm { FCVT            S0, H0 }
                  LOWORD(_S1) = *(_WORD *)(v1642 + 2 * v540);
                  __asm { FCVT            S1, H1 }
                  v1574 = _S0;
                  v1575 = _Q1.i32[0];
                  v544 = v1618;
                  v545 = v1619;
                  v546 = v1617;
                  if (!v1617
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v547 = 0;
                  v1580 = vcvtq_f32_f16(*(float16x4_t *)(v546
                                                       + 2 * (v544 * v1532 + v545 * v535)));
                  v1577 = vcvtq_f32_f16(*(float16x4_t *)(v1637 + 2 * (v1638 * (_DWORD)v527 + v1639 * v524)));
                  v1579 = *(_QWORD *)(v1611 + 2 * (v1612 * v1532 + v1613 * v535));
                  v1578 = *(_QWORD *)(v1605 + 2 * (v1606 * v1532 + v1607 * v535));
                  v1573 = vcvtq_f32_f16(*(float16x4_t *)(a1[84]
                                                       + 8
                                                       * *(unsigned int *)(a1[81] + 4 * (v1513 + v527))));
                  v548 = (float16x4_t *)(v1631 + 2 * (v1632 * (_DWORD)v527 + v1633 * v524));
                  v549 = vcvtq_f32_f16(*v548);
                  v1572 = v549;
                  v549.f32[0] = v1574;
                  if (v1574 > 0.0)
                  {
                    _Q1.i32[0] = -947920896;
                    if (v1574 > -65504.0)
                    {
                      v547 = 0;
                      v523 = a3[1];
                      v533 = a3[2];
                      v530 = (int8x16_t)a3[3];
                      v531 = (int8x16_t)v1498;
                      v550 = vmlaq_n_f32(vaddq_f32(v533, vmlaq_f32(vmulq_n_f32(*a3, (float)v527), v1498, v523)), (float32x4_t)v530, 1.0 / v1574);
                      v549 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v550, 2);
                      _Q1 = vdivq_f32(v550, v549);
                      v549.i32[0] = _Q1.i32[3];
                      v523.i32[0] = -947920896;
                      if (_Q1.f32[3] > 0.0 && _Q1.f32[3] > -65504.0 && _Q1.f32[0] >= 0.0)
                      {
                        v547 = 0;
                        v523.f32[0] = (float)v1625;
                        if (_Q1.f32[0] < (float)v1625)
                        {
                          v523.i32[0] = _Q1.i32[1];
                          v533.f32[0] = (float)v1626;
                          if (_Q1.f32[1] >= 0.0 && _Q1.f32[1] < v533.f32[0])
                          {
                            _H1 = *(_WORD *)(v1624
                                           + 2 * (v1627 * _Q1.f32[0] + v1628 * _Q1.f32[1]));
                            __asm { FCVT            S1, H1 }
                            v523.i32[0] = -947920896;
                            if (_Q1.f32[0] <= 0.0 || _Q1.f32[0] <= -65504.0)
                            {
                              v547 = 0;
                            }
                            else
                            {
                              v523.f32[0] = (float)(1.0 / _Q1.f32[3]) + 0.1;
                              v533.i32[0] = 1065772646;
                              v549.f32[0] = (float)(1.0 / _Q1.f32[3]) * 1.05;
                              if (_Q1.f32[0] < 2.0)
                                v549.f32[0] = (float)(1.0 / _Q1.f32[3]) + 0.1;
                              v547 = v549.f32[0] < _Q1.f32[0];
                            }
                          }
                        }
                      }
                    }
                  }
                  sub_223468C00(*(double *)v549.i64, _Q1, v523, *(double *)v533.i64, v530, v531, *(float32x2_t *)v532.f32, (uint64_t)(a1 + 98), (uint64_t)a3, (uint64_t)&v1577, &v1574, (unint64_t *)(a1[98] + 43 * (v1513 + v527)), (unint64_t *)(a1[101] + 27 * (v1513 + v527)), (float32x2_t *)&v1572, (uint64_t)&v1580, v1576, &v1579, &v1578, (float32x2_t *)&v1573,
                    v547);
                  _S0 = v1574;
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)(v539 + 2 * v1521) = LOWORD(_S0);
                  _S0 = v1575;
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)(v541 + 2 * v540) = _S0;
                  *v548 = vcvt_f16_f32(v1572);
                  v521 = v1577;
                  v557 = v1638;
                  v558 = v1639;
                  v559 = v1637;
                  if (!v1637)
                  {
                    v1566 = v1577;
                    v560 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v521 = v1566;
                    if (v560)
                      abort();
                  }
                  *(float16x4_t *)v521.f32 = vcvt_f16_f32(v521);
                  *(_QWORD *)(v559 + 2 * (v557 * (_DWORD)v527 + v558 * v524)) = v521.i64[0];
                }
              }
            }
            ++v527;
          }
          while (v1488 != v527);
          ++v524;
          v1513 += v1488;
        }
        while (v524 != HIDWORD(v1488));
      }
      v1276 = v1582;
      if (v1582)
      {
        v1277 = (unint64_t *)&v1582->__shared_owners_;
        do
          v1278 = __ldaxr(v1277);
        while (__stlxr(v1278 - 1, v1277));
        if (!v1278)
        {
          ((void (*)(std::__shared_weak_count *))v1276->__on_zero_shared)(v1276);
          std::__shared_weak_count::__release_weak(v1276);
        }
      }
      v1279 = v1585;
      if (v1585)
      {
        v1280 = (unint64_t *)&v1585->__shared_owners_;
        do
          v1281 = __ldaxr(v1280);
        while (__stlxr(v1281 - 1, v1280));
        if (!v1281)
        {
          ((void (*)(std::__shared_weak_count *))v1279->__on_zero_shared)(v1279);
          std::__shared_weak_count::__release_weak(v1279);
        }
      }
      v1282 = v1588;
      if (v1588)
      {
        v1283 = (unint64_t *)&v1588->__shared_owners_;
        do
          v1284 = __ldaxr(v1283);
        while (__stlxr(v1284 - 1, v1283));
        if (!v1284)
        {
          ((void (*)(std::__shared_weak_count *))v1282->__on_zero_shared)(v1282);
          std::__shared_weak_count::__release_weak(v1282);
        }
      }
      v1285 = v1591;
      if (v1591)
      {
        v1286 = (unint64_t *)&v1591->__shared_owners_;
        do
          v1287 = __ldaxr(v1286);
        while (__stlxr(v1287 - 1, v1286));
        if (!v1287)
        {
          ((void (*)(std::__shared_weak_count *))v1285->__on_zero_shared)(v1285);
          std::__shared_weak_count::__release_weak(v1285);
        }
      }
      v1288 = v1593;
      if (v1593)
      {
        v1289 = (unint64_t *)&v1593->__shared_owners_;
        do
          v1290 = __ldaxr(v1289);
        while (__stlxr(v1290 - 1, v1289));
        if (!v1290)
        {
          ((void (*)(std::__shared_weak_count *))v1288->__on_zero_shared)(v1288);
          std::__shared_weak_count::__release_weak(v1288);
        }
      }
      v1291 = v1598;
      if (v1598)
      {
        v1292 = (unint64_t *)&v1598->__shared_owners_;
        do
          v1293 = __ldaxr(v1292);
        while (__stlxr(v1293 - 1, v1292));
        if (!v1293)
        {
          ((void (*)(std::__shared_weak_count *))v1291->__on_zero_shared)(v1291);
          std::__shared_weak_count::__release_weak(v1291);
        }
      }
      v1294 = v1604;
      if (v1604)
      {
        v1295 = (unint64_t *)&v1604->__shared_owners_;
        do
          v1296 = __ldaxr(v1295);
        while (__stlxr(v1296 - 1, v1295));
        if (!v1296)
        {
          ((void (*)(std::__shared_weak_count *))v1294->__on_zero_shared)(v1294);
          std::__shared_weak_count::__release_weak(v1294);
        }
      }
      v1297 = v1610;
      if (v1610)
      {
        v1298 = (unint64_t *)&v1610->__shared_owners_;
        do
          v1299 = __ldaxr(v1298);
        while (__stlxr(v1299 - 1, v1298));
        if (!v1299)
        {
          ((void (*)(std::__shared_weak_count *))v1297->__on_zero_shared)(v1297);
          std::__shared_weak_count::__release_weak(v1297);
        }
      }
      v1300 = v1616;
      if (v1616)
      {
        v1301 = (unint64_t *)&v1616->__shared_owners_;
        do
          v1302 = __ldaxr(v1301);
        while (__stlxr(v1302 - 1, v1301));
        if (!v1302)
        {
          ((void (*)(std::__shared_weak_count *))v1300->__on_zero_shared)(v1300);
          std::__shared_weak_count::__release_weak(v1300);
        }
      }
      v1303 = v1621;
      if (v1621)
      {
        v1304 = (unint64_t *)&v1621->__shared_owners_;
        do
          v1305 = __ldaxr(v1304);
        while (__stlxr(v1305 - 1, v1304));
        if (!v1305)
        {
          ((void (*)(std::__shared_weak_count *))v1303->__on_zero_shared)(v1303);
          std::__shared_weak_count::__release_weak(v1303);
        }
      }
      v1306 = v1623;
      if (v1623)
      {
        v1307 = (unint64_t *)&v1623->__shared_owners_;
        do
          v1308 = __ldaxr(v1307);
        while (__stlxr(v1308 - 1, v1307));
        if (!v1308)
        {
          ((void (*)(std::__shared_weak_count *))v1306->__on_zero_shared)(v1306);
          std::__shared_weak_count::__release_weak(v1306);
        }
      }
      v1309 = v1630;
      if (v1630)
      {
        v1310 = (unint64_t *)&v1630->__shared_owners_;
        do
          v1311 = __ldaxr(v1310);
        while (__stlxr(v1311 - 1, v1310));
        if (!v1311)
        {
          ((void (*)(std::__shared_weak_count *))v1309->__on_zero_shared)(v1309);
          std::__shared_weak_count::__release_weak(v1309);
        }
      }
      v1312 = v1636;
      if (v1636)
      {
        v1313 = (unint64_t *)&v1636->__shared_owners_;
        do
          v1314 = __ldaxr(v1313);
        while (__stlxr(v1314 - 1, v1313));
        if (!v1314)
        {
          ((void (*)(std::__shared_weak_count *))v1312->__on_zero_shared)(v1312);
          std::__shared_weak_count::__release_weak(v1312);
        }
      }
      v1315 = v1641;
      if (v1641)
      {
        v1316 = (unint64_t *)&v1641->__shared_owners_;
        do
          v1317 = __ldaxr(v1316);
        while (__stlxr(v1317 - 1, v1316));
        if (!v1317)
        {
          ((void (*)(std::__shared_weak_count *))v1315->__on_zero_shared)(v1315);
          std::__shared_weak_count::__release_weak(v1315);
        }
      }
      v1015 = v1646;
      if (!v1646)
        return;
      v1318 = (unint64_t *)&v1646->__shared_owners_;
      do
        v1017 = __ldaxr(v1318);
      while (__stlxr(v1017 - 1, v1318));
      goto LABEL_1896;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Keyframing/include/Reconstruction/Keyframing/Core/Cpu/Processing.h", 206, (uint64_t)"", 0, (uint64_t)"Case not handled", 16, (void (*)(void **))sub_22457406C);
      abort();
  }
LABEL_1101:
  v839 = 0;
  *(float *)v825.i32 = (float)v831;
  v826.f32[0] = (float)v831 + v835;
  v1501 = v831 * v822;
  v840 = (float32x4_t)vdupq_lane_s32((int32x2_t)v826, 0);
  v841 = (float32x4_t)vdupq_lane_s32(v825, 0);
  v842 = v830;
  v1477 = v840;
  v1491 = v841;
  while (1)
  {
    _H10 = *(_WORD *)(v1599 + 2 * (v1600 * (_DWORD)v839 + v1601 * v831));
    __asm { FCVT            S9, H10 }
    if (_S9 <= -65504.0)
      goto LABEL_1103;
    v847 = (int8x16_t)v14[1];
    _Q19 = (int8x16_t)v14[2];
    _Q20 = v14[3];
    v850 = (int32x4_t)vmlaq_n_f32(vaddq_f32((float32x4_t)_Q19, vmlaq_f32(vmulq_n_f32(*v14, (float)v839 + v835), v840, (float32x4_t)v847)), _Q20, v836 / _S9);
    v826 = (float32x2_t)vdup_laneq_s32(v850, 2);
    v825 = (int32x2_t)vdiv_f32(*(float32x2_t *)v850.i8, v826);
    if (*(float *)v825.i32 < 0.0 || *(float *)v825.i32 >= v832)
      goto LABEL_1103;
    if (*(float *)&v825.i32[1] < 0.0 || *(float *)&v825.i32[1] >= v834)
      goto LABEL_1103;
    v853 = 0;
    v854 = v1648 * (_DWORD)v839 + v1649 * v831;
    v1508 = v1647;
    _H11 = *(_WORD *)(v1647 + 2 * v854);
    __asm { FCVT            S31, H11 }
    if (_S31 > 0.0)
    {
      __asm { FCVT            S17, H11 }
      if (_S17 > -65504.0)
      {
        v853 = 0;
        v847 = *(int8x16_t *)v824;
        _Q19 = (int8x16_t)v824[1];
        _Q20 = v824[2];
        v858 = vmlaq_n_f32(vaddq_f32(_Q20, vmlaq_f32(vmulq_n_f32(*v824, (float)v839), v841, (float32x4_t)_Q19)), v824[3], v836 / _S31);
        _Q17 = vdivq_f32(v858, (float32x4_t)vdupq_laneq_s32((int32x4_t)v858, 2));
        if (_Q17.f32[3] > 0.0 && _Q17.f32[3] > -65504.0 && _Q17.f32[0] >= 0.0)
        {
          v853 = 0;
          if (_Q17.f32[0] < (float)v1625 && _Q17.f32[1] >= 0.0 && _Q17.f32[1] < (float)v1626)
          {
            _H17 = *(_WORD *)(v1624 + 2 * (v1627 * _Q17.f32[0] + v1628 * _Q17.f32[1]));
            __asm { FCVT            S17, H17 }
            if (_Q17.f32[0] <= 0.0 || _Q17.f32[0] <= -65504.0)
            {
              v853 = 0;
            }
            else
            {
              v864 = (float)(v836 / _Q17.f32[3]) * 1.05;
              if (_Q17.f32[0] < v837)
                v864 = (float)(v836 / _Q17.f32[3]) + 0.1;
              v853 = v864 < _Q17.f32[0];
            }
          }
        }
      }
    }
    _Q20.i16[0] = *(_WORD *)(v1594 + 2 * (v1595 * (_DWORD)v839 + v1596 * v831));
    v1541 = v1643 * (_DWORD)v839 + v1644 * v831;
    v1524 = v1642;
    _Q19.i16[0] = *(_WORD *)(v1642 + 2 * v1541);
    v865 = *(_QWORD *)(v1611
                     + 2 * (v1612 * *(float *)v825.i32 + v1613 * *(float *)&v825.i32[1]));
    v866 = v1501 + v839;
    v867 = *(_QWORD *)(v1605
                     + 2 * (v1606 * *(float *)v825.i32 + v1607 * *(float *)&v825.i32[1]));
    v868 = a1[84] + 8 * *(unsigned int *)(a1[81] + 4 * (v1501 + v839));
    _H15 = *(_WORD *)v868;
    _H14 = *(_WORD *)(v868 + 6);
    v871 = *(_DWORD *)(v868 + 2);
    v872 = (int32x2_t *)(v1631 + 2 * (v1632 * (_DWORD)v839 + v1633 * v831));
    v6.i32[0] = v872->i32[0];
    _H12 = v872->i16[2];
    v1516 = v872;
    _H13 = v872->i16[3];
    v1561 = a1[98];
    v1569 = a1[101];
    LOBYTE(v872) = atomic_load((unsigned __int8 *)&qword_2540CADB8);
    if ((v872 & 1) == 0)
    {
      v1450 = v832;
      v1436 = v834;
      v1421 = v829;
      v1406 = v830;
      v1395 = v1648 * (_DWORD)v839 + v1649 * v831;
      v1381 = _S31;
      v1367 = *(_WORD *)(v1642 + 2 * v1541);
      v1355 = *(_WORD *)(v1594 + 2 * (v1595 * (_DWORD)v839 + v1596 * v831));
      v969 = __cxa_guard_acquire(&qword_2540CADB8);
      _Q20.i16[0] = v1355;
      _Q19.i16[0] = v1367;
      _S31 = v1381;
      v854 = v1395;
      v840 = v1477;
      v841 = v1491;
      v838 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                         + 62);
      v830 = v1406;
      v829 = v1421;
      v837 = 2.0;
      v836 = 1.0;
      v835 = 0.5;
      v834 = v1436;
      v832 = v1450;
      if (v969)
      {
        v970 = a3[6].i32[2];
        dword_2540CADB0 = -947920896;
        *(_DWORD *)algn_2540CADB4 = v970;
        __cxa_guard_release(&qword_2540CADB8);
        _Q20.i16[0] = v1355;
        _Q19.i16[0] = v1367;
        _S31 = v1381;
        v854 = v1395;
        v840 = v1477;
        v841 = v1491;
        v838 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                           + 62);
        v830 = v1406;
        v829 = v1421;
        v837 = 2.0;
        v836 = 1.0;
        v835 = 0.5;
        v834 = v1436;
        v832 = v1450;
      }
    }
    v875 = atomic_load((unsigned __int8 *)&qword_2540CADC0);
    if ((v875 & 1) == 0)
    {
      v1451 = v832;
      v1437 = v834;
      v1422 = v829;
      v1407 = v830;
      v1396 = v854;
      v1382 = _S31;
      v1368 = _Q19.i16[0];
      v1356 = _Q20.i16[0];
      v971 = __cxa_guard_acquire(&qword_2540CADC0);
      _Q20.i16[0] = v1356;
      _Q19.i16[0] = v1368;
      _S31 = v1382;
      v854 = v1396;
      v840 = v1477;
      v841 = v1491;
      v838 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                         + 62);
      v830 = v1407;
      v829 = v1422;
      v837 = 2.0;
      v836 = 1.0;
      v835 = 0.5;
      v834 = v1437;
      v832 = v1451;
      if (v971)
      {
        qword_2540CAE90 = 0;
        unk_2540CAE98 = 0;
        __cxa_guard_release(&qword_2540CADC0);
        _Q20.i16[0] = v1356;
        _Q19.i16[0] = v1368;
        _S31 = v1382;
        v854 = v1396;
        v840 = v1477;
        v841 = v1491;
        v838 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                           + 62);
        v830 = v1407;
        v829 = v1422;
        v837 = 2.0;
        v836 = 1.0;
        v835 = 0.5;
        v834 = v1437;
        v832 = v1451;
      }
    }
    v876 = atomic_load((unsigned __int8 *)&qword_2540CADC8);
    if ((v876 & 1) == 0)
    {
      v1452 = v832;
      v1438 = v834;
      v1423 = v829;
      v1408 = v830;
      v1397 = v854;
      v1383 = _S31;
      v1369 = _Q19.i16[0];
      v1357 = _Q20.i16[0];
      v972 = __cxa_guard_acquire(&qword_2540CADC8);
      _Q20.i16[0] = v1357;
      _Q19.i16[0] = v1369;
      _S31 = v1383;
      v854 = v1397;
      v840 = v1477;
      v841 = v1491;
      v838 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                         + 62);
      v830 = v1408;
      v829 = v1423;
      v837 = 2.0;
      v836 = 1.0;
      v835 = 0.5;
      v834 = v1438;
      v832 = v1452;
      if (v972)
      {
        xmmword_2540CAEA0 = (__int128)vdupq_n_s32(0x7FC00000u);
        __cxa_guard_release(&qword_2540CADC8);
        _Q20.i16[0] = v1357;
        _Q19.i16[0] = v1369;
        _S31 = v1383;
        v854 = v1397;
        v840 = v1477;
        v841 = v1491;
        v838 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                           + 62);
        v830 = v1408;
        v829 = v1423;
        v837 = 2.0;
        v836 = 1.0;
        v835 = 0.5;
        v834 = v1438;
        v832 = v1452;
      }
    }
    v877 = 27 * v842;
    v878 = 43 * v842;
    __asm { FCVT            S7, H19 }
    v880 = vcvtq_f32_f16(v6);
    __asm
    {
      FCVT            S26, H12
      FCVT            S17, H13
    }
    v882 = v880;
    v882.i32[2] = _D26.i32[0];
    v883 = a3[6].f32[3];
    v884 = v883 * v883;
    __asm { FCVT            S28, H10 }
    if (_S28 > 0.0)
    {
      __asm { FCVT            S18, H20 }
      v887 = a3[6].f32[2];
      if (v887 < _S18)
      {
        _H8 = _Q20.i16[0];
        _H10 = _Q19.i16[0];
        __asm { FCVT            S22, H15 }
        _Q19.i32[0] = v871;
        v890 = (float32x2_t)vcvtq_f32_f16(*(float16x4_t *)_Q19.i8).u64[0];
        __asm { FCVT            S20, H14 }
        v892 = _Q22;
        *(float32x2_t *)&v892.i32[1] = v890;
        v893 = v1561 + 43 * v866;
        v894 = v1569 + 27 * v866;
        __asm { FCVT            S29, H11 }
        if (_S29 <= 0.0 || v887 >= _S7)
        {
          v910 = v854;
          v911 = a3[7].u8[4];
          if (!(_BYTE)v865)
            goto LABEL_1162;
        }
        else
        {
          __asm { FCVT            S21, H8 }
          if (_S21 <= 0.0)
          {
            v898 = 0.01;
            __asm { FCVT            S25, H10 }
            v900 = _S31;
            if (_S25 <= 0.0)
              goto LABEL_1151;
          }
          else if (_S21 >= v836)
          {
            v898 = 0.0001;
            __asm { FCVT            S25, H10 }
            v900 = _S31;
            if (_S25 <= 0.0)
              goto LABEL_1151;
          }
          else
          {
            v897 = (float)((float)(_S18 * -0.09) + 0.1) * (float)((float)(_S18 * -0.09) + 0.1);
            v898 = 0.01;
            if (v897 <= 0.01)
              v898 = (float)((float)(_S18 * -0.09) + 0.1) * (float)((float)(_S18 * -0.09) + 0.1);
            if (v897 < 0.0001)
              v898 = 0.0001;
            __asm { FCVT            S25, H10 }
            v900 = _S31;
            if (_S25 <= 0.0)
            {
LABEL_1151:
              *(float *)&v901 = 0.01;
              goto LABEL_1197;
            }
          }
          if (_S25 >= v836)
          {
            *(float *)&v901 = 0.0001;
LABEL_1197:
            v915 = *(float *)&v901;
          }
          else
          {
            v913 = (float)((float)(_S7 * -0.09) + 0.1) * (float)((float)(_S7 * -0.09) + 0.1);
            v914 = 0.01;
            if (v913 <= 0.01)
              v914 = (float)((float)(_S7 * -0.09) + 0.1) * (float)((float)(_S7 * -0.09) + 0.1);
            if (v913 >= 0.0001)
              v915 = v914;
            else
              v915 = 0.0001;
          }
          if ((float)((float)((float)(_S9 - v900) * (float)(_S9 - v900)) / (float)(v898 + v915)) < 1.1)
          {
            v841 = v1491;
            v909 = v1508;
            if (vmla_lane_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v880.f32, *(float32x2_t *)_Q22.f32), v890, *(float32x2_t *)v880.f32, 1), _D26, v890, 1).f32[0] > 0.70711)
            {
              if (_S21 <= 0.0)
              {
                *(float *)&v932 = 0.01;
                v930 = 0.01;
                if (_S25 <= 0.0)
                  goto LABEL_1230;
              }
              else
              {
                v930 = 0.0001;
                v931 = (float)((float)(_S18 * -0.09) + 0.1) * (float)((float)(_S18 * -0.09) + 0.1);
                *(float *)&v932 = 0.01;
                v933 = 0.01;
                if (v931 <= 0.01)
                  v933 = (float)((float)(_S18 * -0.09) + 0.1) * (float)((float)(_S18 * -0.09) + 0.1);
                if (v931 >= 0.0001)
                  v934 = v933;
                else
                  v934 = 0.0001;
                if (_S21 < v836)
                  v930 = v934;
                if (_S25 <= 0.0)
                {
LABEL_1230:
                  v942 = *(float *)&v932;
                  goto LABEL_1231;
                }
              }
              if (_S25 >= v836)
              {
                *(float *)&v932 = 0.0001;
                goto LABEL_1230;
              }
              v940 = (float)((float)(_S7 * -0.09) + 0.1) * (float)((float)(_S7 * -0.09) + 0.1);
              v941 = 0.01;
              if (v940 <= 0.01)
                v941 = (float)((float)(_S7 * -0.09) + 0.1) * (float)((float)(_S7 * -0.09) + 0.1);
              if (v940 >= 0.0001)
                v942 = v941;
              else
                v942 = 0.0001;
LABEL_1231:
              *(float32x2_t *)&_Q22.i32[1] = v890;
              _Q20.f32[0] = v930 + v942;
              v892 = vdivq_f32(vaddq_f32(vmulq_n_f32(v882, v930), vmulq_n_f32(_Q22, v942)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q20.f32, 0));
            }
            if (_S25 <= 0.0)
            {
              v945 = 0.01;
              v840 = v1477;
              if (_S21 <= 0.0)
                goto LABEL_1240;
            }
            else if (_S25 >= v836)
            {
              v945 = 0.0001;
              v840 = v1477;
              if (_S21 <= 0.0)
                goto LABEL_1240;
            }
            else
            {
              v943 = (float)((float)(_S7 * -0.09) + 0.1) * (float)((float)(_S7 * -0.09) + 0.1);
              v944 = 0.01;
              if (v943 <= 0.01)
                v944 = v943;
              if (v943 >= 0.0001)
                v945 = v944;
              else
                v945 = 0.0001;
              v840 = v1477;
              if (_S21 <= 0.0)
              {
LABEL_1240:
                *(float *)&v946 = 0.01;
                goto LABEL_1251;
              }
            }
            if (_S21 >= v836)
            {
              *(float *)&v946 = 0.0001;
LABEL_1251:
              v949 = *(float *)&v946;
            }
            else
            {
              v947 = (float)((float)(_S18 * -0.09) + 0.1) * (float)((float)(_S18 * -0.09) + 0.1);
              v948 = 0.01;
              if (v947 <= 0.01)
                v948 = (float)((float)(_S18 * -0.09) + 0.1) * (float)((float)(_S18 * -0.09) + 0.1);
              if (v947 >= 0.0001)
                v949 = v948;
              else
                v949 = 0.0001;
            }
            v910 = v854;
            v950 = (float)(v945 * v949) / (float)(v945 + v949);
            _S18 = 1.0;
            if (v950 > 0.0001)
            {
              _S18 = 0.0;
              if (v950 < 0.01)
              {
                v951 = (float)((float)(sqrtf(v950) + -0.01) / -0.09) + v836;
                if (v951 <= v836)
                  v952 = v951;
                else
                  v952 = v836;
                if (v951 >= 0.0)
                  _S18 = v952;
                else
                  _S18 = 0.0;
              }
            }
            v953 = a3[7].u8[4];
            if ((_BYTE)v865)
              *(_BYTE *)(v893 + BYTE1(v865)) += v865;
            if (BYTE2(v865))
              *(_BYTE *)(v893 + BYTE3(v865)) += BYTE2(v865);
            if (BYTE4(v865))
              *(_BYTE *)(v893 + BYTE5(v865)) += BYTE4(v865);
            if (*(unsigned __int8 *)(v893 + v953) < BYTE6(v865))
              *(_BYTE *)(v893 + v953) = BYTE6(v865);
            v824 = a3;
            v954 = a3[7].u8[7];
            if ((_BYTE)v867)
              *(_BYTE *)(v894 + BYTE1(v867)) += v867;
            if (BYTE2(v867))
              *(_BYTE *)(v894 + BYTE3(v867)) += BYTE2(v867);
            if (BYTE4(v867))
              *(_BYTE *)(v894 + BYTE5(v867)) += BYTE4(v867);
            _S9 = (float)((float)(v945 * _S9) + (float)(v949 * v900)) / (float)(v945 + v949);
            _S20 = 1.0;
            if (*(unsigned __int8 *)(v894 + v954) < BYTE6(v867))
              *(_BYTE *)(v894 + v954) = BYTE6(v867);
            v838 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
LABEL_1277:
            v906 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
            v907 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
            v854 = v910;
LABEL_1278:
            _S7 = v824[6].f32[1];
            if (_S7 >= _S18)
              _S7 = _S18;
            _S31 = _S9;
            _S17 = _S20;
            v882 = v892;
            goto LABEL_1281;
          }
          v841 = v1491;
          if (_S28 >= _S29)
          {
            v840 = v1477;
            if (v853)
            {
              v938 = (float)((float)((float)(v883 * -0.1) + 0.01) / 0.09) + v836;
              v939 = (float)-v938 / v883;
              _S18 = (float)(v883 * _S7) + v938;
              if (v939 > _S7)
                _S18 = 0.0;
              _S9 = v900;
            }
            else
            {
              _S9 = v900;
              _S18 = _S7;
            }
            _S20 = _S17;
            v892 = v882;
            v824 = a3;
            v906 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                               + 62);
            v907 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                               + 62);
            v909 = v1508;
            goto LABEL_1278;
          }
          v910 = v854;
          v935 = (float)((float)((float)(v883 * -0.1) + 0.01) / 0.09) + v836;
          v936 = (float)-v935 / v883;
          v937 = (float)(v883 * _S18) + v935;
          if (v936 <= _S18)
            _S18 = v937;
          else
            _S18 = 0.0;
          v911 = a3[7].u8[4];
          v840 = v1477;
          if (!(_BYTE)v865)
          {
LABEL_1162:
            v909 = v1508;
            if (BYTE2(v865))
            {
              *(_BYTE *)(v893 + BYTE3(v865)) = BYTE2(v865);
              v838 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                 + 62);
            }
            if (BYTE4(v865))
            {
              *(_BYTE *)(v893 + BYTE5(v865)) = BYTE4(v865);
              v838 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                                 + 62);
            }
            *(_BYTE *)(v893 + v911) = BYTE6(v865);
            v824 = a3;
            v912 = a3[7].u8[7];
            if ((_BYTE)v867)
              *(_BYTE *)(v894 + BYTE1(v867)) = v867;
            if (BYTE2(v867))
              *(_BYTE *)(v894 + BYTE3(v867)) = BYTE2(v867);
            if (BYTE4(v867))
              *(_BYTE *)(v894 + BYTE5(v867)) = BYTE4(v867);
            *(_BYTE *)(v894 + v912) = BYTE6(v867);
            goto LABEL_1277;
          }
        }
        *(_BYTE *)(v893 + BYTE1(v865)) = v865;
        goto LABEL_1162;
      }
    }
    if (!v853)
    {
      v824 = a3;
      v906 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                         + 62);
      v907 = (int8x16_t *)("NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE"
                         + 62);
      v909 = v1508;
      goto LABEL_1281;
    }
    v902 = (float)((float)((float)(v883 * -0.1) + 0.01) / 0.09) + v836;
    *(float *)_Q19.i32 = (float)-v902 / v883;
    v903 = (float)(v883 * _S7) + v902;
    if (*(float *)_Q19.i32 <= _S7)
      _S7 = v903;
    else
      _S7 = 0.0;
    v904 = v836 / v884;
    v824 = a3;
    v905 = a3[7].u8[4];
    v906 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
    v907 = (int8x16_t *)"QueryMeshesENS_9allocatorIS4_EEEE";
    if (a3[7].i8[4])
    {
      if (v905 >= 8)
      {
        v916 = v854;
        v908 = v905 & 0xF8;
        v917 = (uint64_t *)(v1561 + v878);
        v918 = v908;
        do
        {
          _Q19.i64[0] = *v917;
          _Q22 = (float32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q19, (int8x16_t)xmmword_2245F6720)), v904));
          v919 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q19, v838[113])), v904));
          _Q19 = vqtbl2q_s8(*(int8x16x2_t *)(&_Q22 - 1), (int8x16_t)xmmword_2245F6730);
          *v917++ = _Q19.i64[0];
          v918 -= 8;
        }
        while (v918);
        v854 = v916;
        if (v908 == v905)
          goto LABEL_1185;
      }
      else
      {
        v908 = 0;
      }
      v920 = v905 - v908;
      v921 = (__int8 *)(v1561 + v908 + v878);
      do
      {
        _Q19.i8[0] = *v921;
        *(float *)_Q19.i32 = v904 * (float)_Q19.u32[0];
        *v921++ = (int)*(float *)_Q19.i32;
        --v920;
      }
      while (v920);
    }
LABEL_1185:
    v922 = a3[7].u8[7];
    v909 = v1508;
    if (!a3[7].i8[7])
      goto LABEL_1281;
    if (v922 < 8)
    {
      v923 = 0;
LABEL_1191:
      v928 = v922 - v923;
      v929 = (__int8 *)(v1569 + v923 + v877);
      do
      {
        _Q19.i8[0] = *v929;
        *(float *)_Q19.i32 = v904 * (float)_Q19.u32[0];
        *v929++ = (int)*(float *)_Q19.i32;
        --v928;
      }
      while (v928);
      goto LABEL_1281;
    }
    v924 = v854;
    v923 = v922 & 0xF8;
    v925 = (uint64_t *)(v1569 + v877);
    v926 = v923;
    do
    {
      _Q19.i64[0] = *v925;
      _Q22 = (float32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q19, (int8x16_t)xmmword_2245F6720)), v904));
      v927 = vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q19, v838[113])), v904));
      _Q19 = vqtbl2q_s8(*(int8x16x2_t *)(&_Q22 - 1), (int8x16_t)xmmword_2245F6730);
      *v925++ = _Q19.i64[0];
      v926 -= 8;
    }
    while (v926);
    v854 = v924;
    if (v923 != v922)
      goto LABEL_1191;
LABEL_1281:
    v847.i32[0] = v824[6].i32[2];
    if (_S7 > *(float *)v847.i32)
      goto LABEL_1102;
    _S31 = *(float *)&dword_2540CADB0;
    _S7 = *(float *)algn_2540CADB4;
    v882 = (float32x4_t)xmmword_2540CAEA0;
    _S17 = *((float *)&xmmword_2540CAEA0 + 3);
    v955 = v824[7].u8[4];
    v956 = v836 / v884;
    if (v824[7].i8[4])
    {
      if (v955 < 8)
      {
        v957 = 0;
LABEL_1288:
        v961 = v955 - v957;
        v962 = (__int8 *)(v1561 + v957 + v878);
        do
        {
          v847.i8[0] = *v962;
          *(float *)v847.i32 = v956 * (float)v847.u32[0];
          *v962++ = (int)*(float *)v847.i32;
          --v961;
        }
        while (v961);
        goto LABEL_1290;
      }
      v958 = v854;
      v957 = v955 & 0xF8;
      v959 = (uint64_t *)(v1561 + v878);
      v960 = v957;
      do
      {
        v847.i64[0] = *v959;
        v1650.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v847, v906[114])), v956));
        v1650.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v847, v838[113])), v956));
        v847 = vqtbl2q_s8(v1650, v907[115]);
        *v959++ = v847.i64[0];
        v960 -= 8;
      }
      while (v960);
      v854 = v958;
      if (v957 != v955)
        goto LABEL_1288;
    }
LABEL_1290:
    v963 = v824[7].u8[7];
    if (v824[7].i8[7])
    {
      if (v963 >= 8)
      {
        v964 = v963 & 0xF8;
        v965 = (uint64_t *)(v1569 + v877);
        v966 = v964;
        do
        {
          v847.i64[0] = *v965;
          v1651.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v847, v906[114])), v956));
          v1651.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v847, v838[113])), v956));
          v847 = vqtbl2q_s8(v1651, v907[115]);
          *v965++ = v847.i64[0];
          v966 -= 8;
        }
        while (v966);
        if (v964 == v963)
          goto LABEL_1102;
      }
      else
      {
        v964 = 0;
      }
      v967 = v963 - v964;
      v968 = (__int8 *)(v1569 + v964 + v877);
      do
      {
        v847.i8[0] = *v968;
        *(float *)v847.i32 = v956 * (float)v847.u32[0];
        *v968++ = (int)*(float *)v847.i32;
        --v967;
      }
      while (v967);
    }
LABEL_1102:
    __asm { FCVT            H6, S31 }
    *(_WORD *)(v909 + 2 * v854) = _H6;
    __asm { FCVT            H6, S7 }
    *(_WORD *)(v1524 + 2 * v1541) = _H6;
    v882.f32[3] = _S17;
    v825 = (int32x2_t)vcvt_f16_f32(v882);
    *v1516 = v825;
LABEL_1103:
    ++v839;
    ++v842;
    if (v839 == v833)
    {
      ++v831;
      LODWORD(v822) = v1464;
      v830 += v1464;
      if (v831 == (_DWORD)v829)
      {
LABEL_1527:
        v1104 = v1582;
        if (v1582)
        {
          v1105 = (unint64_t *)&v1582->__shared_owners_;
          do
            v1106 = __ldaxr(v1105);
          while (__stlxr(v1106 - 1, v1105));
          if (!v1106)
          {
            ((void (*)(std::__shared_weak_count *))v1104->__on_zero_shared)(v1104);
            std::__shared_weak_count::__release_weak(v1104);
          }
        }
        v1107 = v1585;
        if (v1585)
        {
          v1108 = (unint64_t *)&v1585->__shared_owners_;
          do
            v1109 = __ldaxr(v1108);
          while (__stlxr(v1109 - 1, v1108));
          if (!v1109)
          {
            ((void (*)(std::__shared_weak_count *))v1107->__on_zero_shared)(v1107);
            std::__shared_weak_count::__release_weak(v1107);
          }
        }
        v1110 = v1588;
        if (v1588)
        {
          v1111 = (unint64_t *)&v1588->__shared_owners_;
          do
            v1112 = __ldaxr(v1111);
          while (__stlxr(v1112 - 1, v1111));
          if (!v1112)
          {
            ((void (*)(std::__shared_weak_count *))v1110->__on_zero_shared)(v1110);
            std::__shared_weak_count::__release_weak(v1110);
          }
        }
        v1113 = v1591;
        if (v1591)
        {
          v1114 = (unint64_t *)&v1591->__shared_owners_;
          do
            v1115 = __ldaxr(v1114);
          while (__stlxr(v1115 - 1, v1114));
          if (!v1115)
          {
            ((void (*)(std::__shared_weak_count *))v1113->__on_zero_shared)(v1113);
            std::__shared_weak_count::__release_weak(v1113);
          }
        }
        v1116 = v1593;
        if (v1593)
        {
          v1117 = (unint64_t *)&v1593->__shared_owners_;
          do
            v1118 = __ldaxr(v1117);
          while (__stlxr(v1118 - 1, v1117));
          if (!v1118)
          {
            ((void (*)(std::__shared_weak_count *))v1116->__on_zero_shared)(v1116);
            std::__shared_weak_count::__release_weak(v1116);
          }
        }
        v1119 = v1598;
        if (v1598)
        {
          v1120 = (unint64_t *)&v1598->__shared_owners_;
          do
            v1121 = __ldaxr(v1120);
          while (__stlxr(v1121 - 1, v1120));
          if (!v1121)
          {
            ((void (*)(std::__shared_weak_count *))v1119->__on_zero_shared)(v1119);
            std::__shared_weak_count::__release_weak(v1119);
          }
        }
        v1122 = v1604;
        if (v1604)
        {
          v1123 = (unint64_t *)&v1604->__shared_owners_;
          do
            v1124 = __ldaxr(v1123);
          while (__stlxr(v1124 - 1, v1123));
          if (!v1124)
          {
            ((void (*)(std::__shared_weak_count *))v1122->__on_zero_shared)(v1122);
            std::__shared_weak_count::__release_weak(v1122);
          }
        }
        v1125 = v1610;
        if (v1610)
        {
          v1126 = (unint64_t *)&v1610->__shared_owners_;
          do
            v1127 = __ldaxr(v1126);
          while (__stlxr(v1127 - 1, v1126));
          if (!v1127)
          {
            ((void (*)(std::__shared_weak_count *))v1125->__on_zero_shared)(v1125);
            std::__shared_weak_count::__release_weak(v1125);
          }
        }
        v1128 = v1616;
        if (v1616)
        {
          v1129 = (unint64_t *)&v1616->__shared_owners_;
          do
            v1130 = __ldaxr(v1129);
          while (__stlxr(v1130 - 1, v1129));
          if (!v1130)
          {
            ((void (*)(std::__shared_weak_count *))v1128->__on_zero_shared)(v1128);
            std::__shared_weak_count::__release_weak(v1128);
          }
        }
        v1131 = v1621;
        if (v1621)
        {
          v1132 = (unint64_t *)&v1621->__shared_owners_;
          do
            v1133 = __ldaxr(v1132);
          while (__stlxr(v1133 - 1, v1132));
          if (!v1133)
          {
            ((void (*)(std::__shared_weak_count *))v1131->__on_zero_shared)(v1131);
            std::__shared_weak_count::__release_weak(v1131);
          }
        }
        v1134 = v1623;
        if (v1623)
        {
          v1135 = (unint64_t *)&v1623->__shared_owners_;
          do
            v1136 = __ldaxr(v1135);
          while (__stlxr(v1136 - 1, v1135));
          if (!v1136)
          {
            ((void (*)(std::__shared_weak_count *))v1134->__on_zero_shared)(v1134);
            std::__shared_weak_count::__release_weak(v1134);
          }
        }
        v1137 = v1630;
        if (v1630)
        {
          v1138 = (unint64_t *)&v1630->__shared_owners_;
          do
            v1139 = __ldaxr(v1138);
          while (__stlxr(v1139 - 1, v1138));
          if (!v1139)
          {
            ((void (*)(std::__shared_weak_count *))v1137->__on_zero_shared)(v1137);
            std::__shared_weak_count::__release_weak(v1137);
          }
        }
        v1140 = v1636;
        if (v1636)
        {
          v1141 = (unint64_t *)&v1636->__shared_owners_;
          do
            v1142 = __ldaxr(v1141);
          while (__stlxr(v1142 - 1, v1141));
          if (!v1142)
          {
            ((void (*)(std::__shared_weak_count *))v1140->__on_zero_shared)(v1140);
            std::__shared_weak_count::__release_weak(v1140);
          }
        }
        v1143 = v1641;
        if (v1641)
        {
          v1144 = (unint64_t *)&v1641->__shared_owners_;
          do
            v1145 = __ldaxr(v1144);
          while (__stlxr(v1145 - 1, v1144));
          if (!v1145)
          {
            ((void (*)(std::__shared_weak_count *))v1143->__on_zero_shared)(v1143);
            std::__shared_weak_count::__release_weak(v1143);
          }
        }
        v1015 = v1646;
        if (!v1646)
          return;
        v1146 = (unint64_t *)&v1646->__shared_owners_;
        do
          v1017 = __ldaxr(v1146);
        while (__stlxr(v1017 - 1, v1146));
        goto LABEL_1896;
      }
      goto LABEL_1101;
    }
  }
}

void sub_223468604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  uint64_t v70;

  sub_2231CDC3C((uint64_t)&a70);
  sub_2231CDC3C((uint64_t)&STACK[0x238]);
  sub_2231CD9B0((uint64_t)&STACK[0x288]);
  sub_2231BD974((uint64_t)&STACK[0x2D8]);
  sub_2231BD974((uint64_t)&STACK[0x310]);
  sub_22319F500((uint64_t)&STACK[0x348]);
  sub_22319F500((uint64_t)&STACK[0x398]);
  sub_2231D4840((uint64_t)&STACK[0x3E8]);
  sub_22319EF60((uint64_t)&STACK[0x438]);
  sub_22319EF60((uint64_t)&STACK[0x470]);
  sub_2231CD9B0((uint64_t)&STACK[0x4A8]);
  sub_2231CD9B0((uint64_t)&STACK[0x4F8]);
  sub_2231BD974((uint64_t)&STACK[0x548]);
  sub_2231BD974(v70 - 208);
  _Unwind_Resume(a1);
}

void sub_223468AC4(double *a1, uint64_t a2, float *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231FBBA8((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223468BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223468C00(double a1, float32x4_t a2, float32x4_t a3, double a4, int8x16_t a5, int8x16_t a6, float32x2_t a7, uint64_t a8, uint64_t a9, uint64_t a10, float *a11, unint64_t *a12, unint64_t *a13, float32x2_t *a14, uint64_t a15, float *a16, unint64_t *a17, unint64_t *a18, float32x2_t *a19, char a20)
{
  unsigned __int8 v20;
  float *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  int v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  _BYTE *v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  _BYTE *v77;
  float v78;
  float v79;
  float v80;
  int v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  unsigned __int32 v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  BOOL v107;
  float v108;
  float v109;
  float32x4_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  int v118;
  int v119;
  int v120;
  float *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float32x2_t *v128;
  float32x2_t *v129;
  float32x2_t *v130;
  float *v131;
  float *v132;
  float *v133;
  unint64_t *v134;
  unint64_t *v135;
  unint64_t *v136;
  unint64_t *v137;
  unint64_t *v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int8x16x2_t v143;
  int8x16x2_t v144;
  int8x16x2_t v145;
  int8x16x2_t v146;

  v20 = atomic_load((unsigned __int8 *)&qword_25578BB90);
  if ((v20 & 1) == 0)
  {
    v134 = a13;
    v122 = a9;
    v137 = a12;
    v128 = a14;
    v140 = a10;
    v131 = a11;
    v125 = a15;
    v117 = __cxa_guard_acquire(&qword_25578BB90);
    a15 = v125;
    a14 = v128;
    a11 = v131;
    a12 = v137;
    a10 = v140;
    a9 = v122;
    a13 = v134;
    if (v117)
    {
      v118 = *(_DWORD *)(v122 + 104);
      LODWORD(qword_25578BB88) = -947920896;
      HIDWORD(qword_25578BB88) = v118;
      __cxa_guard_release(&qword_25578BB90);
      a15 = v125;
      a14 = v128;
      a11 = v131;
      a12 = v137;
      a10 = v140;
      a9 = v122;
      a13 = v134;
    }
  }
  v21 = a16;
  v22 = atomic_load((unsigned __int8 *)&qword_25578BBA8);
  if ((v22 & 1) == 0)
  {
    v135 = a13;
    v123 = a9;
    v138 = a12;
    v129 = a14;
    v141 = a10;
    v132 = a11;
    v126 = a15;
    v119 = __cxa_guard_acquire(&qword_25578BBA8);
    v21 = a16;
    a9 = v123;
    a15 = v126;
    a14 = v129;
    a11 = v132;
    a12 = v138;
    a10 = v141;
    a13 = v135;
    if (v119)
    {
      xmmword_25578BB98 = 0uLL;
      __cxa_guard_release(&qword_25578BBA8);
      v21 = a16;
      a9 = v123;
      a15 = v126;
      a14 = v129;
      a11 = v132;
      a12 = v138;
      a10 = v141;
      a13 = v135;
    }
  }
  v23 = atomic_load((unsigned __int8 *)&qword_25578BBC0);
  if ((v23 & 1) == 0)
  {
    v136 = a13;
    v124 = a9;
    v139 = a12;
    v130 = a14;
    v142 = a10;
    v133 = a11;
    v127 = a15;
    v121 = v21;
    v120 = __cxa_guard_acquire(&qword_25578BBC0);
    v21 = v121;
    a9 = v124;
    a15 = v127;
    a14 = v130;
    a11 = v133;
    a12 = v139;
    a10 = v142;
    a13 = v136;
    if (v120)
    {
      xmmword_25578BBB0 = (__int128)vdupq_n_s32(0x7FC00000u);
      __cxa_guard_release(&qword_25578BBC0);
      v21 = v121;
      a9 = v124;
      a15 = v127;
      a14 = v130;
      a11 = v133;
      a12 = v139;
      a10 = v142;
      a13 = v136;
    }
  }
  v25 = *(float *)(a9 + 104);
  v24 = *(float *)(a9 + 108);
  v26 = v24 * v24;
  v28 = *v21;
  v27 = v21[1];
  v29 = *v21 <= 0.0 || v27 <= v25;
  if (v29)
  {
    if (!a20)
      goto LABEL_39;
    v30 = a11[1];
    v31 = (float)((float)((float)(v24 * -0.1) + 0.01) / 0.09) + 1.0;
    v32 = (float)-v31 / v24;
    v33 = v31 + (float)(v24 * v30);
    v29 = v32 <= v30;
    v34 = 0.0;
    if (v29)
      v34 = v33;
    a11[1] = v34;
    *(float *)(a10 + 12) = *(float *)(a10 + 12) / v26;
    v35 = 1.0 / v26;
    v36 = *(unsigned __int8 *)(a9 + 116);
    if (*(_BYTE *)(a9 + 116))
    {
      if (v36 < 8)
      {
        v37 = 0;
LABEL_76:
        v70 = v36 - v37;
        v71 = (char *)a12 + v37;
        do
        {
          LOBYTE(v33) = *v71;
          v33 = v35 * (float)LODWORD(v33);
          *v71++ = (int)v33;
          --v70;
        }
        while (v70);
        goto LABEL_78;
      }
      v37 = v36 & 0xF8;
      v33 = NAN;
      a5.i64[1] = -1;
      v68 = v37;
      v69 = a12;
      do
      {
        a6.i64[0] = *v69;
        v145.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a6, (int8x16_t)xmmword_2245F6720)), v35));
        v145.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a6, (int8x16_t)xmmword_2245F6710)), v35));
        a6 = vqtbl2q_s8(v145, (int8x16_t)xmmword_2245F6730);
        *v69++ = a6.i64[0];
        v68 -= 8;
      }
      while (v68);
      if (v37 != v36)
        goto LABEL_76;
    }
LABEL_78:
    v72 = *(unsigned __int8 *)(a9 + 119);
    if (!*(_BYTE *)(a9 + 119))
      goto LABEL_39;
    if (v72 >= 8)
    {
      v73 = v72 & 0xF8;
      v33 = NAN;
      a5.i64[1] = -1;
      v74 = v73;
      v75 = a13;
      do
      {
        a6.i64[0] = *v75;
        v146.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a6, (int8x16_t)xmmword_2245F6720)), v35));
        v146.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a6, (int8x16_t)xmmword_2245F6710)), v35));
        a6 = vqtbl2q_s8(v146, (int8x16_t)xmmword_2245F6730);
        *v75++ = a6.i64[0];
        v74 -= 8;
      }
      while (v74);
      if (v73 == v72)
        goto LABEL_39;
    }
    else
    {
      v73 = 0;
    }
    v76 = v72 - v73;
    v77 = (char *)a13 + v73;
    do
    {
      LOBYTE(v33) = *v77;
      v33 = v35 * (float)LODWORD(v33);
      *v77++ = (int)v33;
      --v76;
    }
    while (v76);
    goto LABEL_39;
  }
  v39 = *a11;
  v38 = a11[1];
  if (*a11 <= 0.0 || v38 <= v25)
  {
    *(_QWORD *)a11 = *(_QWORD *)v21;
    *(_OWORD *)a10 = *(_OWORD *)a15;
    *(_OWORD *)a14->f32 = *(_OWORD *)a19->f32;
    v41 = *a17;
    v42 = *(unsigned __int8 *)(a9 + 116);
    if (!*a17)
    {
LABEL_23:
      if (BYTE2(v41))
        *((_BYTE *)a12 + BYTE3(v41)) = BYTE2(v41);
      if (BYTE4(v41))
        *((_BYTE *)a12 + BYTE5(v41)) = BYTE4(v41);
      *((_BYTE *)a12 + v42) = BYTE6(v41);
      v43 = *a18;
      v44 = *(unsigned __int8 *)(a9 + 119);
      if (*a18)
        *((_BYTE *)a13 + BYTE1(v43)) = v43;
      if (BYTE2(v43))
        *((_BYTE *)a13 + BYTE3(v43)) = BYTE2(v43);
      if (BYTE4(v43))
        *((_BYTE *)a13 + BYTE5(v43)) = BYTE4(v43);
      *((_BYTE *)a13 + v44) = BYTE6(v43);
      goto LABEL_34;
    }
LABEL_22:
    *((_BYTE *)a12 + BYTE1(v41)) = v41;
    goto LABEL_23;
  }
  if (v27 <= 0.0)
  {
    v53 = 0.01;
    if (v38 > 0.0)
      goto LABEL_67;
    goto LABEL_51;
  }
  if (v27 >= 1.0)
  {
    v53 = 0.0001;
    if (v38 > 0.0)
      goto LABEL_67;
LABEL_51:
    v54 = 1008981770;
LABEL_90:
    v67 = *(float *)&v54;
    goto LABEL_91;
  }
  v51 = (float)((float)(v27 * -0.09) + 0.1) * (float)((float)(v27 * -0.09) + 0.1);
  v52 = 0.01;
  if (v51 <= 0.01)
    v52 = (float)((float)(v27 * -0.09) + 0.1) * (float)((float)(v27 * -0.09) + 0.1);
  if (v51 >= 0.0001)
    v53 = v52;
  else
    v53 = 0.0001;
  if (v38 <= 0.0)
    goto LABEL_51;
LABEL_67:
  if (v38 >= 1.0)
  {
    v54 = 953267991;
    goto LABEL_90;
  }
  v65 = (float)((float)(v38 * -0.09) + 0.1) * (float)((float)(v38 * -0.09) + 0.1);
  v66 = 0.01;
  if (v65 <= 0.01)
    v66 = (float)((float)(v38 * -0.09) + 0.1) * (float)((float)(v38 * -0.09) + 0.1);
  if (v65 >= 0.0001)
    v67 = v66;
  else
    v67 = 0.0001;
LABEL_91:
  if ((float)((float)((float)(v28 - v39) * (float)(v28 - v39)) / (float)(v53 + v67)) >= 1.1)
  {
    if (v28 >= v39)
    {
      if (a20)
      {
        v88 = (float)((float)((float)(v24 * -0.1) + 0.01) / 0.09) + 1.0;
        v89 = (float)-v88 / v24;
        v90 = v88 + (float)(v24 * v38);
        v29 = v89 <= v38;
        v91 = 0.0;
        if (v29)
          v91 = v90;
        a11[1] = v91;
        *(float *)(a10 + 12) = *(float *)(a10 + 12) / v26;
      }
      goto LABEL_34;
    }
    *(_QWORD *)a11 = *(_QWORD *)v21;
    *(_OWORD *)a10 = *(_OWORD *)a15;
    *(_OWORD *)a14->f32 = *(_OWORD *)a19->f32;
    v82 = a11[1];
    v83 = *(float *)(a9 + 108);
    v84 = (float)((float)((float)(v83 * -0.1) + 0.01) / 0.09) + 1.0;
    v85 = (float)-v84 / v83;
    v86 = (float)(v82 * v83) + v84;
    v29 = v85 <= v82;
    v87 = 0.0;
    if (v29)
      v87 = v86;
    a11[1] = v87;
    *(float *)(a10 + 12) = *(float *)(a10 + 12) / v26;
    v41 = *a17;
    v42 = *(unsigned __int8 *)(a9 + 116);
    if (!*a17)
      goto LABEL_23;
    goto LABEL_22;
  }
  a7.i32[0] = a14[1].i32[0];
  *(float32x2_t *)a3.f32 = *a19;
  a6.i32[0] = a19[1].i32[0];
  if (vmla_f32(vmla_lane_f32(vmul_f32(*a14, *a19), (float32x2_t)vdup_lane_s32((int32x2_t)*a19, 1), *a14, 1), *(float32x2_t *)a6.i8, a7).f32[0] <= 0.70711)goto LABEL_125;
  if (v27 <= 0.0)
  {
    v80 = 0.01;
    a5.i32[2] = a14[1].i32[0];
    a3.i32[2] = a19[1].i32[0];
    if (v38 > 0.0)
      goto LABEL_114;
LABEL_101:
    v81 = 1008981770;
    goto LABEL_123;
  }
  if (v27 >= 1.0)
  {
    v80 = 0.0001;
    a5.i32[2] = a14[1].i32[0];
    a3.i32[2] = a19[1].i32[0];
    if (v38 > 0.0)
      goto LABEL_114;
    goto LABEL_101;
  }
  v78 = (float)((float)(v27 * -0.09) + 0.1) * (float)((float)(v27 * -0.09) + 0.1);
  v79 = 0.01;
  if (v78 <= 0.01)
    v79 = v78;
  if (v78 >= 0.0001)
    v80 = v79;
  else
    v80 = 0.0001;
  a5.i32[2] = a14[1].i32[0];
  a3.i32[2] = a19[1].i32[0];
  if (v38 <= 0.0)
    goto LABEL_101;
LABEL_114:
  if (v38 < 1.0)
  {
    v92 = (float)((float)(v38 * -0.09) + 0.1) * (float)((float)(v38 * -0.09) + 0.1);
    v93 = 0.01;
    if (v92 <= 0.01)
      v93 = v92;
    if (v92 >= 0.0001)
      v94 = v93;
    else
      v94 = 0.0001;
    goto LABEL_124;
  }
  v81 = 953267991;
LABEL_123:
  v94 = *(float *)&v81;
LABEL_124:
  *(float *)a6.i32 = v80 + v94;
  *(float32x2_t *)a5.i8 = *a14;
  a2 = vmlaq_n_f32(vmulq_n_f32(a3, v94), (float32x4_t)a5, v80);
  a3 = vdivq_f32(a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0));
  a6.i32[0] = a3.i32[2];
LABEL_125:
  *a14 = *(float32x2_t *)a3.f32;
  a14[1].i32[0] = a6.i32[0];
  a14[1].i32[1] = 1065353216;
  v95 = a11[1];
  v96 = v21[1];
  if (v95 <= 0.0)
  {
    a2.i32[0] = 1008981770;
    if (v96 > 0.0)
      goto LABEL_135;
LABEL_133:
    v99 = 1008981770;
    goto LABEL_144;
  }
  if (v95 >= 1.0)
  {
    a2.i32[0] = 953267991;
    if (v96 > 0.0)
      goto LABEL_135;
    goto LABEL_133;
  }
  v97 = (float)((float)(v95 * -0.09) + 0.1) * (float)((float)(v95 * -0.09) + 0.1);
  v98 = 0.01;
  if (v97 <= 0.01)
    v98 = v97;
  if (v97 >= 0.0001)
    a2.f32[0] = v98;
  else
    a2.f32[0] = 0.0001;
  if (v96 <= 0.0)
    goto LABEL_133;
LABEL_135:
  if (v96 < 1.0)
  {
    v100 = (float)((float)(v96 * -0.09) + 0.1) * (float)((float)(v96 * -0.09) + 0.1);
    v101 = 0.01;
    if (v100 <= 0.01)
      v101 = v100;
    if (v100 >= 0.0001)
      a3.f32[0] = v101;
    else
      a3.f32[0] = 0.0001;
    goto LABEL_145;
  }
  v99 = 953267991;
LABEL_144:
  a3.i32[0] = v99;
LABEL_145:
  v102 = (float)(a2.f32[0] * a3.f32[0]) / (float)(a2.f32[0] + a3.f32[0]);
  v103 = 1.0;
  if (v102 > 0.0001)
  {
    v103 = 0.0;
    if (v102 < 0.01)
    {
      v104 = sqrtf(v102);
      v105 = 1.0;
      v106 = (float)((float)(v104 + -0.01) / -0.09) + 1.0;
      if (v106 <= 1.0)
        v105 = v106;
      v107 = v106 < 0.0;
      v103 = 0.0;
      if (!v107)
        v103 = v105;
    }
  }
  *a11 = (float)((float)(*v21 * a2.f32[0]) + (float)(*a11 * a3.f32[0])) / (float)(a2.f32[0] + a3.f32[0]);
  a11[1] = v103;
  a2.i64[0] = *(_QWORD *)a10;
  a2.i32[2] = *(_DWORD *)(a10 + 8);
  a3.i64[0] = *(_QWORD *)a15;
  a3.i32[2] = *(_DWORD *)(a15 + 8);
  v108 = *(float *)(a10 + 12);
  v109 = *(float *)(a15 + 12);
  *(float *)a6.i32 = v108 + v109;
  v110 = vdivq_f32(vaddq_f32(vmulq_n_f32(a2, v108), vmulq_n_f32(a3, v109)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0));
  *(_QWORD *)a10 = v110.i64[0];
  *(_DWORD *)(a10 + 8) = v110.i32[2];
  *(float *)(a10 + 12) = v108 + v109;
  v111 = *a17;
  v112 = *(unsigned __int8 *)(a9 + 116);
  if (*a17)
    *((_BYTE *)a12 + BYTE1(v111)) += v111;
  if (BYTE2(v111))
    *((_BYTE *)a12 + BYTE3(v111)) += BYTE2(v111);
  if (BYTE4(v111))
    *((_BYTE *)a12 + BYTE5(v111)) += BYTE4(v111);
  v113 = HIWORD(v111);
  if (*((unsigned __int8 *)a12 + v112) < v113)
    *((_BYTE *)a12 + v112) = v113;
  v114 = *a18;
  v115 = *(unsigned __int8 *)(a9 + 119);
  if (*a18)
    *((_BYTE *)a13 + BYTE1(v114)) += v114;
  if (BYTE2(v114))
    *((_BYTE *)a13 + BYTE3(v114)) += BYTE2(v114);
  if (BYTE4(v114))
    *((_BYTE *)a13 + BYTE5(v114)) += BYTE4(v114);
  v116 = HIWORD(v114);
  if (*((unsigned __int8 *)a13 + v115) < v116)
    *((_BYTE *)a13 + v115) = v116;
LABEL_34:
  v45 = *(float *)(a9 + 100);
  if (v45 >= a11[1])
    v45 = a11[1];
  a11[1] = v45;
  v46 = *(float *)(a9 + 96);
  if (v46 >= *(float *)(a10 + 12))
    v46 = *(float *)(a10 + 12);
  *(float *)(a10 + 12) = v46;
LABEL_39:
  if (a11[1] > *(float *)(a9 + 104))
    return;
  *(_QWORD *)a11 = qword_25578BB88;
  *(_OWORD *)a10 = xmmword_25578BB98;
  *(_OWORD *)a14->f32 = xmmword_25578BBB0;
  v47 = 1.0;
  v48 = 1.0 / v26;
  v49 = *(unsigned __int8 *)(a9 + 116);
  if (*(_BYTE *)(a9 + 116))
  {
    if (v49 < 8)
    {
      v50 = 0;
LABEL_55:
      v57 = v49 - v50;
      v58 = (char *)a12 + v50;
      do
      {
        LOBYTE(v47) = *v58;
        v47 = v48 * (float)LODWORD(v47);
        *v58++ = (int)v47;
        --v57;
      }
      while (v57);
      goto LABEL_57;
    }
    v50 = v49 & 0xF8;
    v47 = NAN;
    v55 = v50;
    v56 = a12;
    do
    {
      a5.i64[0] = *v56;
      v143.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_2245F6720)), v48));
      v143.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_2245F6710)), v48));
      a5 = vqtbl2q_s8(v143, (int8x16_t)xmmword_2245F6730);
      *v56++ = a5.i64[0];
      v55 -= 8;
    }
    while (v55);
    if (v50 != v49)
      goto LABEL_55;
  }
LABEL_57:
  v59 = *(unsigned __int8 *)(a9 + 119);
  if (!*(_BYTE *)(a9 + 119))
    return;
  if (v59 < 8)
  {
    v60 = 0;
LABEL_63:
    v63 = v59 - v60;
    v64 = (char *)a13 + v60;
    do
    {
      LOBYTE(v47) = *v64;
      v47 = v48 * (float)LODWORD(v47);
      *v64++ = (int)v47;
      --v63;
    }
    while (v63);
    return;
  }
  v60 = v59 & 0xF8;
  v47 = NAN;
  v61 = v60;
  v62 = a13;
  do
  {
    a5.i64[0] = *v62;
    v144.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_2245F6720)), v48));
    v144.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_2245F6710)), v48));
    a5 = vqtbl2q_s8(v144, (int8x16_t)xmmword_2245F6730);
    *v62++ = a5.i64[0];
    v61 -= 8;
  }
  while (v61);
  if (v60 != v59)
    goto LABEL_63;
}

uint64_t sub_22346985C(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  BOOL v29;
  void *v30;
  void *v32[2];
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 4 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    v32[0] = 0;
    v24 = malloc_type_posix_memalign(v32, v23, 4 * v18, 0x1F88E90uLL);
    if (v24)
      sub_2244E2E20(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = v32[0];
    *(void **)(a1 + 8) = v32[0];
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 44) = 4 * v12;
  if (v25 && a6)
  {
    v27 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 24))
      v28 = *(_DWORD *)(a1 + 28) == 0;
    else
      v28 = 1;
    v29 = v28 || v27 == 0;
    v30 = *(void **)(a1 + 24);
    if (v29)
    {
      v30 = 0;
      v27 = 0;
    }
    v32[0] = v25;
    v32[1] = v30;
    v33 = v27;
    v34 = v11 & 0x3FFFFFFF3FFFFFFFLL;
    v35 = v12 & 0x3FFFFFFF;
    if (v27 * (v12 & 0x3FFFFFFF) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v36[0] = (uint64_t)v32;
    v36[1] = a5;
    sub_223469A3C(v36);
  }
  return a1;
}

void sub_223469A20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_223469A3C(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD v12[7];
  char v13;

  v2 = *a1;
  v3 = *(_DWORD *)(v2 + 20);
  if (v3 == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8))
      sub_223469AF0((uint64_t)a1);
    else
      sub_223469EF8(v2, a1[1]);
  }
  else
  {
    v11 = (_DWORD *)a1[1];
    v5 = *(_DWORD *)(v2 + 8);
    v4 = *(_DWORD *)(v2 + 12);
    v6 = *(_DWORD *)(v2 + 16);
    if (v5)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7 && v6 != 0)
    {
      v12[0] = 0;
      v12[1] = v5 - 1;
      v12[2] = v3;
      v12[3] = v4 - 1;
      v9 = *(_DWORD *)(v2 + 28);
      v12[4] = *(_DWORD *)(v2 + 24);
      v12[5] = v6 - 1;
      v12[6] = v9;
      v10 = *(_DWORD **)v2;
      v13 = 0;
      sub_22346A20C(v12, (uint64_t)&v13, &v11, v10);
    }
  }
}

uint64_t sub_223469AF0(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  _DWORD v24[7];
  unint64_t v25[2];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(_DWORD *)(*(_QWORD *)result + 12);
  v5 = *(_DWORD *)(*(_QWORD *)result + 24);
  v4 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v4 == v5 * v3)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v14 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v14 < 0x10)
      goto LABEL_22;
    v15 = 4 * v6;
    if (!(_DWORD)v6)
      v15 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      v16 = (_DWORD *)v7;
LABEL_23:
      v17 = v6 + 1;
      do
      {
        *v16++ = *(_DWORD *)v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    v16 = (_DWORD *)(v7 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF8;
    v18 = vld1q_dup_f32(v2);
    v19 = (float32x4_t *)(v7 + 16);
    v20 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_23;
  }
  else
  {
    v22 = 0;
    v9 = *(_DWORD *)(v1 + 8);
    v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    v23[2] = v2;
    v10 = *(_DWORD *)(v1 + 16);
    if (v3)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      v13 = *(_QWORD *)v1;
      v25[0] = 0;
      v25[1] = 0;
      return sub_223469CA0((_BOOL8)v24, v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_223469CA0(_BOOL8 result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unsigned int *v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(unsigned int *)(result + 8) | ((unint64_t)*(unsigned int *)(result + 16) << 32);
  *a2 = a4;
  a2[1] = v7;
  if (*(_DWORD *)(result + 20))
  {
    v8 = (unsigned int *)result;
    for (i = 0; i < v8[5]; ++i)
    {
      *a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if (result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * v8[6];
    }
  }
  *a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if (result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_223469EF8(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  _DWORD v14[5];
  unsigned int v15;
  unsigned int v16;
  _QWORD v17[2];

  v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  v3 = *(unsigned int *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  v11 = v3;
  v13[2] = a2;
  v4 = *(_DWORD *)(result + 16);
  if ((_DWORD)v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    v14[3] = v2 - 1;
    v8 = *(_DWORD *)(result + 28);
    v9 = *(_QWORD *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    v15 = v4 - 1;
    v16 = v8;
    if (v4 != 1)
    {
      v10 = 0;
      do
      {
        sub_223469FB8((uint64_t)v14, (uint64_t)v17, (uint64_t)v13, v9);
        v9 += 4 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_223469FB8((uint64_t)v14, (uint64_t)v17, (uint64_t)v13, v9);
  }
  return result;
}

uint64_t sub_223469FB8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

float sub_22346A20C(_DWORD *a1, uint64_t a2, _DWORD **a3, _DWORD *a4)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  float result;

  v4 = a1[5];
  v5 = a1[3];
  if (!v4)
  {
    v6 = a1[1];
    if (v5)
      goto LABEL_14;
LABEL_25:
    v7 = *a3;
    if (!v6)
      goto LABEL_33;
    goto LABEL_26;
  }
  v6 = a1[1];
  v7 = *a3;
  v8 = a1[6];
  if (v5)
  {
    v9 = a1[4];
    if (!v6)
    {
      do
      {
        v33 = a4;
        v34 = v5;
        do
        {
          *v33 = *v7;
          v33 += v9;
          --v34;
        }
        while (v34);
        *v33 = *v7;
        a4 += v8;
        ++v6;
      }
      while (v6 != v4);
      do
      {
LABEL_32:
        *a4 = *v7;
        a4 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_33;
    }
    v10 = 0;
    v11 = 4 * v8;
    v12 = v9;
    v13 = 4 * a1[2];
    v14 = &a4[v12];
    do
    {
      v15 = 0;
      v16 = v14;
      v17 = a4;
      do
      {
        v18 = v16;
        v19 = v17;
        v20 = v6;
        do
        {
          *v19 = *v7;
          v19 = (_DWORD *)((char *)v19 + v13);
          --v20;
        }
        while (v20);
        *v19 = *v7;
        v17 = (_DWORD *)((char *)v17 + v12 * 4);
        ++v15;
        v16 = &v18[v12];
      }
      while (v15 != v5);
      v21 = v6;
      do
      {
        *v18 = *v7;
        v18 = (_DWORD *)((char *)v18 + v13);
        --v21;
      }
      while (v21);
      *v18 = *v7;
      a4 = (_DWORD *)((char *)a4 + v11);
      ++v10;
      v14 = (_DWORD *)((char *)v14 + v11);
    }
    while (v10 != v4);
LABEL_14:
    v7 = *a3;
    v9 = a1[4];
    if (v6)
    {
      v22 = 0;
      v23 = 4 * v9;
      v24 = 4 * a1[2];
      do
      {
        v25 = a4;
        v26 = v6;
        do
        {
          *v25 = *v7;
          v25 = (_DWORD *)((char *)v25 + v24);
          --v26;
        }
        while (v26);
        *v25 = *v7;
        a4 = (_DWORD *)((char *)a4 + v23);
        ++v22;
      }
      while (v22 != v5);
LABEL_26:
      v32 = 4 * a1[2];
      do
      {
        *a4 = *v7;
        a4 = (_DWORD *)((char *)a4 + v32);
        --v6;
      }
      while (v6);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v6)
  {
    v27 = 0;
    v28 = 4 * v8;
    v29 = 4 * a1[2];
    do
    {
      v30 = a4;
      v31 = v6;
      do
      {
        *v30 = *v7;
        v30 = (_DWORD *)((char *)v30 + v29);
        --v31;
      }
      while (v31);
      *v30 = *v7;
      a4 = (_DWORD *)((char *)a4 + v28);
      ++v27;
    }
    while (v27 != v4);
    goto LABEL_25;
  }
  do
  {
    *a4 = *v7;
    a4 += v8;
    --v4;
  }
  while (v4);
  v7 = *a3;
LABEL_33:
  result = *(float *)v7;
  *a4 = *v7;
  return result;
}

unint64_t *sub_22346A424(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _DWORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  void *memptr[3];
  _QWORD v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 4 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 4 * v14, 0x1F88E90uLL);
    if (v20)
      sub_2244E2E20(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x3FFFFFFF3FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 30) >> 2) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      v25 = v11 & 0x3FFFFFFF;
      if (v25 == 1)
      {
        sub_22346A684((uint64_t)v36);
        return a1;
      }
      if ((_DWORD)v24 && HIDWORD(v24))
      {
        v26 = (_DWORD)v24 - 1;
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x3FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *v21 = *a5;
            return a1;
          }
          v29 = 0;
          v30 = 4 * v28;
          do
          {
            v31 = v21;
            v32 = (_DWORD)v24 - 1;
            do
            {
              *v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *v31 = *a5;
            v21 = (_DWORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if ((_DWORD)v24 != 1)
        {
          v33 = 4 * v25;
          do
          {
            *v21 = *a5;
            v21 = (_DWORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  }
  return a1;
}

void sub_22346A668(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_22346A684(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 4 * v6;
    if (!(_DWORD)v6)
      v13 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (_DWORD *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *(_DWORD *)v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (_DWORD *)(v7 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF8;
    v16 = vld1q_dup_f32(v2);
    v17 = (float32x4_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_223469FB8((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

void sub_22346A814(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC375E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22346A824(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC375E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22346A854(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22346A864(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22346A874(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22346A8A4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_22346A8B4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info info;
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v13) = info.numer;
    LODWORD(v14) = info.denom;
    *(double *)&qword_255795558 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_255795560);
  }
  v16[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v16[1] = 2;
  LOBYTE(v17) = 0;
  v19 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = 1;
  }
  v20 = 0;
  v21 = 0;
  v22 = *a3;
  v23 = 1;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v10 = operator new();
  sub_22346AAE4(v10, a1, (uint64_t)v16);
  info = 0;
  *a4 = &off_24EC6A3B8;
  a4[1] = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24EC6A4B0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  a4[2] = v11;
  return sub_2231AD66C((uint64_t)v16);
}

void sub_22346AA60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_22346AA78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2231C35FC((_QWORD **)va);
  sub_2231AD66C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22346AAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10F3C4035895BD5);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22346AAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22346AAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  _OWORD v12[2];

  sub_22346AC04(a2, (uint64_t)&v11);
  *(_QWORD *)a1 = &off_24EC21AC8;
  *(_QWORD *)(a1 + 8) = &off_24EC219D8;
  v5 = v11;
  v6 = v12[0];
  v11 = 0uLL;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 46) = *(_OWORD *)((char *)v12 + 14);
  sub_2231AB0FC(a1 + 64, a3);
  *(_QWORD *)a1 = &off_24EC21A48;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_24EC6A528;
  return a1;
}

void sub_22346ABB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_2231C37EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22346AC04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 76);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = 2 * v10;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 3;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a2 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a2 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_22346ADC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_22346AE1C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v7;
  uint64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  float32x2_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  float32x2_t *v26;
  _OWORD *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  std::mutex *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  float32x4_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  __n128 *v54;
  float32x4_t *v55;
  size_t v56;
  __int128 *v57;
  __int128 *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  std::mutex *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  float32x4_t *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  __n128 *v92;
  float32x4_t *v93;
  size_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  std::mutex *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  unint64_t v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  __n128 *v110;
  float32x4_t *v111;
  size_t v112;
  float v113;
  uint64_t v114;
  _QWORD *result;
  uint64_t v116;
  std::chrono::steady_clock::time_point v117;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  uint64_t v127;
  void *v128;
  __int128 *v129;
  void *__p;
  char *v131;
  char *v132;
  _OWORD v133[3];
  float32x2_t v134;
  unsigned __int32 v135;
  int v136;
  uint64_t v137;
  __int128 v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  _QWORD v143[3];
  _QWORD *v144;
  _QWORD v145[3];
  _QWORD *v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  __int128 v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  v117.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v144 = 0;
  v146 = 0;
  v147.i64[0] = (uint64_t)&off_24EC5AEB8;
  v147.i64[1] = (uint64_t)a1;
  v148.i64[1] = (uint64_t)&v147;
  sub_22381A66C(&v147, v143);
  v7 = (__int128 *)v148.i64[1];
  if ((float32x4_t *)v148.i64[1] == &v147)
  {
    v8 = 4;
    v7 = (__int128 *)&v147;
  }
  else
  {
    if (!v148.i64[1])
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_6:
  v147.i64[0] = (uint64_t)&off_24EC5AF48;
  v147.i64[1] = (uint64_t)a1;
  v148.i64[1] = (uint64_t)&v147;
  sub_22381A9E4(&v147, v145);
  v13 = (__int128 *)v148.i64[1];
  if ((float32x4_t *)v148.i64[1] == &v147)
  {
    v14 = 4;
    v13 = (__int128 *)&v147;
  }
  else
  {
    if (!v148.i64[1])
      goto LABEL_11;
    v14 = 5;
  }
  v9 = (int32x4_t)((__n128 (*)(void))*(_QWORD *)(*(_QWORD *)v13 + 8 * v14))();
LABEL_11:
  v9.i64[0] = *(_QWORD *)a2;
  v9.i32[2] = *(_DWORD *)(a2 + 8);
  v10.i64[0] = *(_QWORD *)(a2 + 16);
  v10.i32[2] = *(_DWORD *)(a2 + 24);
  v11.i64[0] = *(_QWORD *)(a2 + 48);
  v11.i32[2] = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v15 = vzip1q_s32(v9, v10).u64[0];
  v16 = (int8x16_t)vnegq_f32(v11);
  v12.i32[0] = *(_DWORD *)(a2 + 40);
  v17 = (int8x16_t)vtrn2q_s32(v9, v10);
  v17.i32[2] = HIDWORD(*(_QWORD *)(a2 + 32));
  v18 = (int8x16_t)vzip2q_s32(v9, v10);
  v19 = (int32x4_t)v18;
  v19.i32[2] = v12.i32[0];
  v20 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v15, *(float *)v16.i32), *(float32x2_t *)v17.i8, *(float32x2_t *)v11.f32, 1), *(float32x2_t *)v18.i8, v11, 2);
  v21 = vmls_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 32), *(float32x2_t *)v16.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 32), 1), *(float32x2_t *)v11.f32, 1);
  v22 = (float32x2_t)vextq_s8(v16, v16, 8uLL).u64[0];
  *((_QWORD *)&v15 + 1) = *(_QWORD *)(a2 + 32);
  v16.i32[3] = 0;
  v16.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v17, 0).i32[3];
  *(uint64_t *)((char *)v16.i64 + 4) = vextq_s8(v17, v18, 4uLL).u64[0];
  v19.i64[1] = vdupq_laneq_s32(v19, 2).u32[0];
  v133[2] = v19;
  v133[0] = v15;
  v133[1] = v16;
  v134 = v20;
  v135 = vmla_f32(v21, v22, v12).u32[0];
  v136 = 1065353216;
  __p = 0;
  v131 = 0;
  v132 = 0;
  v25 = (_QWORD *)*a1;
  v23 = a1 + 1;
  v24 = v25;
  if (v25 != v23)
  {
    while (1)
    {
      v26 = (float32x2_t *)sub_2231D0224(*(_QWORD *)(v24[6] + 16));
      if (sub_223EA55CC(a3, (float32x2_t *)v133, v26, (uint64_t *)a3, v24[6] + 32, (uint64_t)v26))
        break;
LABEL_34:
      v38 = (_QWORD *)v24[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v24[2];
          v52 = *v39 == (_QWORD)v24;
          v24 = v39;
        }
        while (!v52);
      }
      v24 = v39;
      if (v39 == v23)
        goto LABEL_40;
    }
    v27 = v24 + 4;
    v28 = v131;
    if (v131 < v132)
    {
      *(_OWORD *)v131 = *v27;
      v29 = v28 + 16;
LABEL_33:
      v131 = v29;
      goto LABEL_34;
    }
    v30 = (char *)__p;
    v31 = (v131 - (_BYTE *)__p) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      sub_22316E078();
    v33 = v132 - (_BYTE *)__p;
    if ((v132 - (_BYTE *)__p) >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 60)
        sub_223174E94();
      v35 = (char *)operator new(16 * v34);
      v36 = &v35[16 * v31];
      *(_OWORD *)v36 = *v27;
      v37 = v36;
      if (v28 == v30)
      {
LABEL_31:
        v29 = v36 + 16;
        __p = v37;
        v131 = v36 + 16;
        v132 = &v35[16 * v34];
        if (!v28)
          goto LABEL_33;
LABEL_32:
        operator delete(v28);
        goto LABEL_33;
      }
    }
    else
    {
      v35 = 0;
      v36 = (char *)(16 * v31);
      *(_OWORD *)(16 * v31) = *v27;
      v37 = (char *)(16 * v31);
      if (v28 == v30)
        goto LABEL_31;
    }
    do
    {
      *((_OWORD *)v37 - 1) = *((_OWORD *)v28 - 1);
      v37 -= 16;
      v28 -= 16;
    }
    while (v28 != v30);
    v28 = (char *)__p;
    v29 = v36 + 16;
    __p = v37;
    v131 = v36 + 16;
    v132 = &v35[16 * v34];
    if (!v28)
      goto LABEL_33;
    goto LABEL_32;
  }
LABEL_40:
  v147.i64[0] = (uint64_t)"cv3d.recon.";
  v147.i64[1] = 11;
  v148.i64[0] = (uint64_t)"Stats.NVSUtils";
  v148.i64[1] = 14;
  sub_2231A9820((uint64_t)&v147, (uint64_t)&v149, 0, 0, (std::string *)&v139);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v40 = sub_2241471F8();
    v41 = v40[2];
    if (!v41)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v41 = v40[2];
    }
    v42 = *(_QWORD *)(v41 + 64);
    v43 = (std::mutex *)(v42 + 32);
    std::mutex::lock((std::mutex *)(v42 + 32));
    v45 = *(_QWORD *)(v42 + 96);
    v44 = *(_QWORD *)(v42 + 104);
    std::mutex::unlock(v43);
    if (v45 != v44)
    {
      sub_2241471F8();
      v46 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46))
      {
        v147 = 0u;
        v148 = 0u;
        v149.i32[0] = 728325608;
        kdebug_trace();
        v137 = (v131 - (_BYTE *)__p) >> 4;
        sub_22346BDB0((double *)&qword_255788F20, v46, &v137, "# candidate keyframes");
        kdebug_trace();
      }
    }
  }
  v147 = 0u;
  v148 = 0u;
  v149.i32[0] = 728325624;
  kdebug_trace();
  v47 = v140.u8[7];
  if (v140.i8[7] < 0)
    v47 = v139.u64[1];
  if (v47 >= 0x11)
  {
    v48 = &v139;
    if (v140.i8[7] < 0)
      v48 = (float32x4_t *)v139.i64[0];
    v49 = v48->i64[0];
    v50 = v48->i64[1];
    v51 = v48[1].u8[0];
    v52 = v49 == 0x6365722E64337663 && v50 == 0x73746174532E6E6FLL;
    if (v52 && v51 == 46)
    {
      v54 = sub_223187510();
      if (v140.i8[7] >= 0)
        v55 = &v139;
      else
        v55 = (float32x4_t *)v139.i64[0];
      if (v140.i8[7] >= 0)
        v56 = v140.u8[7];
      else
        v56 = v139.u64[1];
      v137 = (v131 - (_BYTE *)__p) >> 4;
      sub_22318760C((uint64_t *)v54, v55, v56, &v137, (uint64_t)"# candidate keyframes", 21);
    }
  }
  kdebug_trace();
  if (v140.i8[7] < 0)
    operator delete((void *)v139.i64[0]);
  sub_22389CA9C((float32x4_t *)a2, (__int128 **)&__p, 4u, (uint64_t)v143, 0x10u, (uint64_t *)&v128);
  v138 = 0uLL;
  v137 = 0;
  sub_22346F77C((uint64_t)&v137, ((char *)v129 - (_BYTE *)v128) >> 4);
  v58 = (__int128 *)v128;
  v57 = v129;
  if (v128 != v129)
  {
    do
    {
      v152 = *v58;
      if (!v146
        || ((*(void (**)(float32x4_t *__return_ptr, _QWORD *, __int128 *))(*v146 + 48))(&v139, v146, &v152),
            !v144))
      {
        sub_223198474();
      }
      v122 = *(float32x4_t *)a2;
      v123 = *(float32x4_t *)(a2 + 16);
      v126 = *(float32x4_t *)(a2 + 48);
      v119 = v139;
      v120 = v140;
      v121 = v141;
      v124 = *(float32x4_t *)(a2 + 32);
      v125 = v142;
      (*(void (**)(float32x4_t *__return_ptr, _QWORD *, __int128 *))(*v144 + 48))(&v139, v144, &v152);
      v62 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v122, v119.f32[0]), v123, *(float32x2_t *)v119.f32, 1), v124, v119, 2), v126, v119, 3);
      v63 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v122, v120.f32[0]), v123, *(float32x2_t *)v120.f32, 1), v124, v120, 2), v126, v120, 3);
      v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v122, v121.f32[0]), v123, *(float32x2_t *)v121.f32, 1), v124, v121, 2), v126, v121, 3);
      v65 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v122, v125.f32[0]), v123, *(float32x2_t *)v125.f32, 1), v124, v125, 2), v126, v125, 3);
      v147 = v139;
      if (v139.i64[1])
      {
        v66 = (unint64_t *)(v139.i64[1] + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        v68 = (std::__shared_weak_count *)v139.i64[1];
        v148 = v62;
        v149 = v63;
        v150 = v64;
        v151 = v65;
        if (v139.i64[1])
        {
          v69 = (unint64_t *)(v139.i64[1] + 8);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
      }
      else
      {
        v148 = v62;
        v149 = v63;
        v150 = v64;
        v151 = v65;
      }
      v71 = (_OWORD *)v138;
      if ((unint64_t)v138 < *((_QWORD *)&v138 + 1))
      {
        *(float32x4_t *)v138 = v147;
        v147 = 0uLL;
        v59 = v151;
        v61 = v148;
        v60 = v149;
        v71[3] = v150;
        v71[4] = v59;
        v71[1] = v61;
        v71[2] = v60;
        *(_QWORD *)&v138 = v71 + 5;
      }
      else
      {
        v72 = sub_22346F8A4((void **)&v137, (__int128 *)&v147);
        v73 = (std::__shared_weak_count *)v147.i64[1];
        *(_QWORD *)&v138 = v72;
        if (v147.i64[1])
        {
          v74 = (unint64_t *)(v147.i64[1] + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
      }
      ++v58;
    }
    while (v58 != v57);
  }
  v76 = v137;
  *(_QWORD *)a4 = v137;
  v127 = v138;
  *(_OWORD *)(a4 + 8) = v138;
  v147.i64[0] = (uint64_t)"cv3d.recon.";
  v147.i64[1] = 11;
  v148.i64[0] = (uint64_t)"Stats.NVSUtils";
  v148.i64[1] = 14;
  sub_2231A9820((uint64_t)&v147, (uint64_t)&v149, 0, 0, (std::string *)&v139);
  sub_224569D7C();
  v77 = v145;
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v78 = sub_2241471F8();
    v79 = v78[2];
    if (!v79)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v79 = v78[2];
    }
    v80 = *(_QWORD *)(v79 + 64);
    v81 = (std::mutex *)(v80 + 32);
    std::mutex::lock((std::mutex *)(v80 + 32));
    v83 = *(_QWORD *)(v80 + 96);
    v82 = *(_QWORD *)(v80 + 104);
    std::mutex::unlock(v81);
    if (v83 != v82)
    {
      sub_2241471F8();
      v84 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84))
      {
        v147 = 0u;
        v148 = 0u;
        v149.i32[0] = 728325608;
        kdebug_trace();
        v137 = 0xCCCCCCCCCCCCCCCDLL * ((v127 - v76) >> 4);
        sub_22346BEEC((double *)&qword_255788F20, v84, &v137, "# input keyframes");
        kdebug_trace();
      }
    }
  }
  v147 = 0u;
  v148 = 0u;
  v149.i32[0] = 728325624;
  kdebug_trace();
  v85 = v140.u8[7];
  if (v140.i8[7] < 0)
    v85 = v139.u64[1];
  if (v85 >= 0x11)
  {
    v86 = &v139;
    if (v140.i8[7] < 0)
      v86 = (float32x4_t *)v139.i64[0];
    v87 = v86->i64[0];
    v88 = v86->i64[1];
    v89 = v86[1].u8[0];
    if (v87 == 0x6365722E64337663 && v88 == 0x73746174532E6E6FLL && v89 == 46)
    {
      v92 = sub_223187510();
      if (v140.i8[7] >= 0)
        v93 = &v139;
      else
        v93 = (float32x4_t *)v139.i64[0];
      if (v140.i8[7] >= 0)
        v94 = v140.u8[7];
      else
        v94 = v139.u64[1];
      v137 = 0xCCCCCCCCCCCCCCCDLL * ((v127 - v76) >> 4);
      sub_22318760C((uint64_t *)v92, v93, v94, &v137, (uint64_t)"# input keyframes", 17);
    }
  }
  kdebug_trace();
  if (v140.i8[7] < 0)
    operator delete((void *)v139.i64[0]);
  v147.i64[0] = (uint64_t)"cv3d.recon.";
  v147.i64[1] = 11;
  v148.i64[0] = (uint64_t)"Stats.NVSUtils.Time";
  v148.i64[1] = 19;
  sub_2231A9820((uint64_t)&v147, (uint64_t)&v149, 0, 0, (std::string *)&v139);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v95 = sub_2241471F8();
    v96 = v95[2];
    if (!v96)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v96 = v95[2];
    }
    v97 = *(_QWORD *)(v96 + 64);
    v98 = (std::mutex *)(v97 + 32);
    std::mutex::lock((std::mutex *)(v97 + 32));
    v100 = *(_QWORD *)(v97 + 96);
    v99 = *(_QWORD *)(v97 + 104);
    std::mutex::unlock(v98);
    if (v100 != v99)
    {
      sub_2241471F8();
      v101 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101))
      {
        v147 = 0u;
        v148 = 0u;
        v149.i32[0] = 728325608;
        kdebug_trace();
        v102 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v117.__d_.__rep_) / 1000000.0;
        v117.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)&v137 = v102;
        sub_22345EECC((double *)&qword_255788F20, v101, (float *)&v137, "kf_selection (ms)");
        kdebug_trace();
      }
    }
  }
  v147 = 0u;
  v148 = 0u;
  v149.i32[0] = 728325624;
  kdebug_trace();
  v103 = v140.u8[7];
  if (v140.i8[7] < 0)
    v103 = v139.u64[1];
  if (v103 >= 0x11)
  {
    v104 = &v139;
    if (v140.i8[7] < 0)
      v104 = (float32x4_t *)v139.i64[0];
    v105 = v104->i64[0];
    v106 = v104->i64[1];
    v107 = v104[1].u8[0];
    if (v105 == 0x6365722E64337663 && v106 == 0x73746174532E6E6FLL && v107 == 46)
    {
      v110 = sub_223187510();
      if (v140.i8[7] >= 0)
        v111 = &v139;
      else
        v111 = (float32x4_t *)v139.i64[0];
      if (v140.i8[7] >= 0)
        v112 = v140.u8[7];
      else
        v112 = v139.u64[1];
      v113 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v117.__d_.__rep_) / 1000000.0;
      std::chrono::steady_clock::now();
      *(float *)&v137 = v113;
      sub_2231897A8((uint64_t *)v110, v111, v112, (float *)&v137, (uint64_t)"kf_selection (ms)", 17);
    }
  }
  kdebug_trace();
  if (v140.i8[7] < 0)
    operator delete((void *)v139.i64[0]);
  if (v128)
  {
    v129 = (__int128 *)v128;
    operator delete(v128);
  }
  if (__p)
  {
    v131 = (char *)__p;
    operator delete(__p);
  }
  if (v146 == v145)
  {
    v114 = 4;
  }
  else
  {
    if (!v146)
      goto LABEL_157;
    v114 = 5;
    v77 = v146;
  }
  (*(void (**)(_QWORD *))(*v77 + 8 * v114))(v77);
LABEL_157:
  result = v144;
  if (v144 == v143)
  {
    v116 = 4;
    result = v143;
  }
  else
  {
    if (!v144)
      return result;
    v116 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v116))();
}

void sub_22346BC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22346BDB0(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22346BED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22346BEEC(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_22346C00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **sub_22346C028(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 9);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_22346C0C0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_22346C13C@<X0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  char v19;

  v19 = a1;
  *a3 = 0;
  switch(a1)
  {
    case 0:
      v5 = (_QWORD *)operator new();
      result = sub_22345ACF8((uint64_t)v5, (uint64_t)a2);
      goto LABEL_16;
    case 1:
      v5 = (_QWORD *)operator new();
      result = sub_22345C394((uint64_t)v5);
      goto LABEL_16;
    case 2:
      v7 = (_QWORD *)operator new();
      v8 = v7;
      v9 = *a2;
      v10 = (std::__shared_weak_count *)a2[1];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        *v7 = &off_24EC372E8;
        v7[1] = v9;
        v7[2] = v10;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        result = *a3;
        *a3 = (uint64_t)v8;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        *v7 = &off_24EC372E8;
        v7[1] = v9;
        v7[2] = 0;
        result = *a3;
        *a3 = (uint64_t)v8;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      return result;
    case 3:
      v5 = (_QWORD *)operator new();
      result = (uint64_t)sub_22345DED0(v5, a2, 1);
      goto LABEL_16;
    case 4:
      v5 = (_QWORD *)operator new();
      result = (uint64_t)sub_22345DED0(v5, a2, 0);
LABEL_16:
      *a3 = (uint64_t)v5;
      return result;
    default:
      sub_22346C458((uint64_t)__p, &v19);
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/NVS/src/NVSUtils.cpp", 112, (uint64_t)"", 0, (uint64_t)v15, v16, (void (*)(void **))sub_22457406C);
      if ((char)v18 < 0)
        operator delete(__p[0]);
      abort();
  }
}

void sub_22346C37C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_22346C384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    *v14 = 0;
    _Unwind_Resume(exception_object);
  }
  *v14 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_22346C458(uint64_t a1, char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_2232C8A68(v4, "Not supported rendering method: ");
  sub_22345645C((uint64_t)&v7, (uint64_t)v4, a2);
  if (v5 == -1)
    sub_22316DD70();
  v7 = &v6;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC376E8[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC376D0[v5])(&v7, v4);
  return result;
}

void sub_22346C504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22346C518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22346C52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22346C540(uint64_t *a1, unsigned __int8 a2, uint64_t a3)
{
  std::chrono::steady_clock::time_point v5;
  uint64_t *v6;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  const char *v31;
  size_t v32;
  unsigned __int8 v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  const char *v39;
  size_t v40;
  unsigned __int8 v41;
  BOOL v42;
  int v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  float32x4_t v92;
  __n128 v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  int v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  const char *v121;
  size_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  void **v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  size_t v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  std::string::size_type v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unsigned __int8 v165;
  const char *v166;
  size_t v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  NSObject *v174;
  size_t v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  std::string::size_type v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  unint64_t *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  __int16 *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  __int16 *v224;
  float32x4_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  int v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  std::mutex *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  std::string::size_type size;
  std::string *v255;
  std::string::size_type v256;
  std::string::size_type v257;
  int v258;
  __n128 *v261;
  std::string *v262;
  size_t v263;
  unsigned __int8 v265;
  std::string::size_type v266;
  const char *v267;
  NSObject *v268;
  unsigned __int8 v269;
  std::string::size_type v270;
  const char *v271;
  NSObject *v272;
  unsigned __int8 v273;
  std::string::size_type v274;
  const char *v275;
  NSObject *v276;
  unsigned __int8 v277;
  std::string::size_type v278;
  const char *v279;
  NSObject *v280;
  const char *v281;
  const char *v282;
  uint64_t v283[3];
  _QWORD v284[2];
  std::__shared_weak_count *v285;
  __int128 __p;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v287;
  __int16 *v288;
  const char *v289;
  int v290;
  int v291;
  const char *v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  float (*v295)@<S0>(float *@<X0>, float *@<X8>);
  char v296;
  int v297;
  _QWORD v298[2];
  std::__shared_weak_count *v299;
  _QWORD v300[2];
  std::__shared_weak_count *v301;
  _QWORD v302[2];
  std::__shared_weak_count *v303;
  _QWORD v304[2];
  std::__shared_weak_count *v305;
  _QWORD v306[2];
  std::__shared_weak_count *v307;
  _QWORD v308[2];
  std::__shared_weak_count *v309;
  unsigned __int8 v310;
  uint64_t v311;
  uint64_t v312;
  std::string v313;
  unint64_t v314;
  int v315;
  unint64_t v316;
  __int128 v317[2];
  _BYTE v318[40];
  void **v319;
  size_t v320;
  unint64_t v321;
  char v322;
  char v323;
  char v324;
  uint64_t v325;

  v325 = *MEMORY[0x24BDAC8D0];
  v310 = a2;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (*a1)
  {
    v6 = *(uint64_t **)(a3 + 8);
    if (v6)
    {
      rep = v5.__d_.__rep_;
      v9 = *v6;
      v8 = (std::__shared_weak_count *)v6[1];
      if (!v8)
        goto LABEL_8;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v9)
        {
LABEL_9:
          switch(v310)
          {
            case 0u:
              sub_2231CC34C(*a1, (uint64_t)v318);
              v14 = *(_QWORD *)(a3 + 8);
              v13 = *(std::__shared_weak_count **)(a3 + 16);
              v308[0] = &off_24EC715B8;
              v308[1] = v14;
              v309 = v13;
              if (v13)
              {
                v15 = (unint64_t *)&v13->__shared_owners_;
                do
                  v16 = __ldxr(v15);
                while (__stxr(v16 + 1, v15));
              }
              sub_223291ECC((uint64_t)v308, &__p);
              sub_22346EBDC((uint64_t)v318, (uint64_t)&__p);
              v17 = (std::__shared_weak_count *)v287;
              if (v287)
              {
                v18 = (unint64_t *)(v287 + 8);
                do
                  v19 = __ldaxr(v18);
                while (__stlxr(v19 - 1, v18));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
              }
              v308[0] = &off_24EC715B8;
              v20 = v309;
              if (v309)
              {
                v21 = (unint64_t *)&v309->__shared_owners_;
                do
                  v22 = __ldaxr(v21);
                while (__stlxr(v22 - 1, v21));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
              v23 = *(std::__shared_weak_count **)&v318[16];
              if (!*(_QWORD *)&v318[16])
                goto LABEL_392;
              v24 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              goto LABEL_157;
            case 1u:
              sub_2231CC3F0(*a1, (uint64_t)v318);
              v104 = *(_QWORD *)(a3 + 8);
              v103 = *(std::__shared_weak_count **)(a3 + 16);
              v306[0] = &off_24EC715B8;
              v306[1] = v104;
              v307 = v103;
              if (v103)
              {
                v105 = (unint64_t *)&v103->__shared_owners_;
                do
                  v106 = __ldxr(v105);
                while (__stxr(v106 + 1, v105));
              }
              sub_223291ECC((uint64_t)v306, &__p);
              sub_22346EBDC((uint64_t)v318, (uint64_t)&__p);
              v107 = (std::__shared_weak_count *)v287;
              if (v287)
              {
                v108 = (unint64_t *)(v287 + 8);
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v107);
                }
              }
              v306[0] = &off_24EC715B8;
              v110 = v307;
              if (v307)
              {
                v111 = (unint64_t *)&v307->__shared_owners_;
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              v23 = *(std::__shared_weak_count **)&v318[16];
              if (*(_QWORD *)&v318[16])
              {
                v113 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
                do
                  v25 = __ldaxr(v113);
                while (__stlxr(v25 - 1, v113));
LABEL_157:
                if (!v25)
                {
                  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                  std::__shared_weak_count::__release_weak(v23);
                }
              }
              goto LABEL_392;
            case 2u:
              sub_2231CDAE0(*a1, (uint64_t)v318);
              if ((_DWORD)v321)
                v64 = HIDWORD(v321) == 0;
              else
                v64 = 1;
              v65 = v64;
              if (!v64)
              {
                v67 = *(_QWORD *)(a3 + 8);
                v66 = *(std::__shared_weak_count **)(a3 + 16);
                v302[0] = &off_24EC715B8;
                v302[1] = v67;
                v303 = v66;
                if (v66)
                {
                  v68 = (unint64_t *)&v66->__shared_owners_;
                  do
                    v69 = __ldxr(v68);
                  while (__stxr(v69 + 1, v68));
                }
                sub_22328CFD4((uint64_t)v302, v304);
                sub_22346EF98((uint64_t)v318, (uint64_t)v304);
                v70 = v305;
                if (v305)
                {
                  v71 = (unint64_t *)&v305->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                v302[0] = &off_24EC715B8;
                v73 = v303;
                if (v303)
                {
                  v74 = (unint64_t *)&v303->__shared_owners_;
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
              }
              v76 = *(std::__shared_weak_count **)&v318[16];
              if (*(_QWORD *)&v318[16])
              {
                v77 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              if (!v65)
                goto LABEL_392;
              sub_22346EAE8(v283);
              if (**(int **)(v283[0] + 56) > 5)
                return 0;
              v79 = *(unsigned __int8 *)(v283[0] + 72);
              v80 = sub_22322F254(v283[0], "OSLogSurrogateAppender", 1, 0);
              v81 = v80 ? v80 + 16 : 0;
              if (!v79 && v80 == 0)
                return 0;
              *(_QWORD *)&__p = v283;
              *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
              v287 = std::chrono::system_clock::now().__d_.__rep_;
              LODWORD(v288) = 5;
              v289 = "unknown file";
              v290 = 206;
              v293 = 0;
              v294 = 0;
              v292 = "unknown function";
              v83 = (uint64_t *)(v283[0] + 16);
              if (*(char *)(v283[0] + 39) < 0)
              {
                v85 = *(_QWORD *)(v283[0] + 16);
                v84 = *(_QWORD *)(v283[0] + 24);
              }
              else
              {
                v84 = *(unsigned __int8 *)(v283[0] + 39);
                v85 = v283[0] + 16;
              }
              *(_QWORD *)&v317[0] = v85;
              *((_QWORD *)&v317[0] + 1) = v84;
              v273 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v273 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v318);
                sub_223199C58("com.apple.cv3d", (unint64_t)v318, &xmmword_255788F40);
                if (v318[24] && (v318[23] & 0x80000000) != 0)
                  operator delete(*(void **)v318);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
              v274 = byte_255788F57;
              if (byte_255788F57 >= 0)
              {
                v275 = (const char *)&xmmword_255788F40;
              }
              else
              {
                v274 = *((_QWORD *)&xmmword_255788F40 + 1);
                v275 = (const char *)xmmword_255788F40;
              }
              v313.__r_.__value_.__r.__words[0] = (std::string::size_type)v275;
              v313.__r_.__value_.__l.__size_ = v274;
              *(_QWORD *)v318 = os_log_create(v275, *(const char **)&v317[0]);
              sub_223199D38(&v318[8], (uint64_t)&v313);
              sub_223199D38(&v319, (uint64_t)v317);
              v276 = *(NSObject **)v318;
              sub_223199BDC((uint64_t)v318);
              sub_22346FA1C(v81, v83, v276, OS_LOG_TYPE_ERROR, &v310);
              if (v79)
                goto LABEL_452;
              goto LABEL_453;
            case 3u:
              sub_2231CD8A8(*a1, (uint64_t)v318);
              if ((_DWORD)v321)
                v86 = HIDWORD(v321) == 0;
              else
                v86 = 1;
              v87 = v86;
              if (!v86)
              {
                v297 = 1056964608;
                v296 = -1;
                v295 = sub_22346F5D8;
                v89 = *(_QWORD *)(a3 + 8);
                v88 = *(std::__shared_weak_count **)(a3 + 16);
                v284[0] = &off_24EC715B8;
                v284[1] = v89;
                v285 = v88;
                if (v88)
                {
                  v90 = (unint64_t *)&v88->__shared_owners_;
                  do
                    v91 = __ldxr(v90);
                  while (__stxr(v91 + 1, v90));
                }
                sub_22328F7C4((uint64_t)v284, &__p);
                v283[0] = (uint64_t)&v295;
                v283[1] = (uint64_t)&v297;
                v283[2] = (uint64_t)&v296;
                v94 = *(_QWORD *)&v318[8];
                if (!*(_QWORD *)&v318[8])
                  goto LABEL_330;
                v95 = *(std::__shared_weak_count **)&v318[16];
                if (*(_QWORD *)&v318[16])
                {
                  v96 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
                  do
                    v97 = __ldxr(v96);
                  while (__stxr(v97 + 1, v96));
                  do
                    v98 = __ldaxr(v96);
                  while (__stlxr(v98 - 1, v96));
                  if (!v98)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                  v94 = *(_QWORD *)&v318[8];
                  v99 = *(std::__shared_weak_count **)&v318[16];
                  if (*(_QWORD *)&v318[16])
                  {
                    v100 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
                    do
                      v101 = __ldxr(v100);
                    while (__stxr(v101 + 1, v100));
                    do
                      v102 = __ldaxr(v100);
                    while (__stlxr(v102 - 1, v100));
                    if (!v102)
                    {
                      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                      std::__shared_weak_count::__release_weak(v99);
                    }
                  }
                }
                if (v324)
                  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v94 + 96))(&v312, v94, 1);
                else
LABEL_330:
                  v312 = 0;
                v208 = *((_QWORD *)&__p + 1);
                if (*((_QWORD *)&__p + 1))
                {
                  v209 = (std::__shared_weak_count *)v287;
                  if (v287)
                  {
                    v210 = (unint64_t *)(v287 + 8);
                    do
                      v211 = __ldxr(v210);
                    while (__stxr(v211 + 1, v210));
                    do
                      v212 = __ldaxr(v210);
                    while (__stlxr(v212 - 1, v210));
                    if (!v212)
                    {
                      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                      std::__shared_weak_count::__release_weak(v209);
                    }
                    v208 = *((_QWORD *)&__p + 1);
                    v213 = (std::__shared_weak_count *)v287;
                    if (v287)
                    {
                      v214 = (unint64_t *)(v287 + 8);
                      do
                        v215 = __ldxr(v214);
                      while (__stxr(v215 + 1, v214));
                      do
                        v216 = __ldaxr(v214);
                      while (__stlxr(v216 - 1, v214));
                      if (!v216)
                      {
                        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                        std::__shared_weak_count::__release_weak(v213);
                      }
                    }
                  }
                  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v208 + 96))(&v311, v208, 1);
                }
                else
                {
                  v311 = 0;
                }
                if (*(_DWORD *)&v318[32] && *(_DWORD *)&v318[36] && (_DWORD)v319)
                {
                  HIDWORD(v313.__r_.__value_.__r.__words[1]) = HIDWORD(v319);
                  LODWORD(v313.__r_.__value_.__r.__words[2]) = v291;
                  v313.__r_.__value_.__r.__words[0] = 0;
                  LODWORD(v313.__r_.__value_.__r.__words[1]) = *(_DWORD *)&v318[32] - 1;
                  HIDWORD(v313.__r_.__value_.__r.__words[2]) = *(_DWORD *)&v318[36] - 1;
                  v314 = v320 | ((unint64_t)v292 << 32);
                  v217 = (_DWORD)v319 - 1;
                  v315 = (_DWORD)v319 - 1;
                  v316 = HIDWORD(v320) | ((unint64_t)HIDWORD(v292) << 32);
                  v218 = *(__int16 **)&v318[24];
                  if (v323 && *(_QWORD *)&v318[24])
                  {
                    v219 = *(_QWORD *)&v318[8];
                    v220 = *(std::__shared_weak_count **)&v318[16];
                    if (*(_QWORD *)&v318[16])
                    {
                      v221 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
                      do
                        v222 = __ldxr(v221);
                      while (__stxr(v222 + 1, v221));
                      do
                        v223 = __ldaxr(v221);
                      while (__stlxr(v223 - 1, v221));
                      if (!v223)
                      {
                        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                        std::__shared_weak_count::__release_weak(v220);
                      }
                    }
                    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v219 + 88))(v219, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                    v218 = *(__int16 **)&v318[24];
                    v217 = v315;
                  }
                  v224 = v288;
                  v225 = 0uLL;
                  memset(v317, 0, sizeof(v317));
                  if (v217)
                  {
                    v226 = HIDWORD(v316);
                    v227 = 2 * v316;
                    do
                    {
                      v225.f32[0] = sub_22347029C(&v313, (__int16 **)v317, (uint64_t)v283, v218, v224, v225, v92, v93);
                      v224 = (__int16 *)((char *)v224 + v226);
                      v218 = (__int16 *)((char *)v218 + v227);
                      --v217;
                    }
                    while (v217);
                  }
                  sub_22347029C(&v313, (__int16 **)v317, (uint64_t)v283, v218, v224, v225, v92, v93);
                }
                v228 = v311;
                v311 = 0;
                if (v228)
                  (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
                v229 = v312;
                v312 = 0;
                if (v229)
                  (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
                v230 = (std::__shared_weak_count *)v287;
                if (v287)
                {
                  v231 = (unint64_t *)(v287 + 8);
                  do
                    v232 = __ldaxr(v231);
                  while (__stlxr(v232 - 1, v231));
                  if (!v232)
                  {
                    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                    std::__shared_weak_count::__release_weak(v230);
                  }
                }
                v284[0] = &off_24EC715B8;
                v233 = v285;
                if (v285)
                {
                  v234 = (unint64_t *)&v285->__shared_owners_;
                  do
                    v235 = __ldaxr(v234);
                  while (__stlxr(v235 - 1, v234));
                  if (!v235)
                  {
                    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                    std::__shared_weak_count::__release_weak(v233);
                  }
                }
              }
              v236 = *(std::__shared_weak_count **)&v318[16];
              if (*(_QWORD *)&v318[16])
              {
                v237 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
                do
                  v238 = __ldaxr(v237);
                while (__stlxr(v238 - 1, v237));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                  std::__shared_weak_count::__release_weak(v236);
                }
              }
              if (!v87)
                goto LABEL_392;
              sub_22346EAE8(v283);
              if (**(int **)(v283[0] + 56) > 5)
                return 0;
              v239 = *(unsigned __int8 *)(v283[0] + 72);
              v240 = sub_22322F254(v283[0], "OSLogSurrogateAppender", 1, 0);
              v241 = v240 ? v240 + 16 : 0;
              if (!v239 && v240 == 0)
                return 0;
              *(_QWORD *)&__p = v283;
              *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
              v287 = std::chrono::system_clock::now().__d_.__rep_;
              LODWORD(v288) = 5;
              v289 = "unknown file";
              v290 = 238;
              v293 = 0;
              v294 = 0;
              v292 = "unknown function";
              v243 = (uint64_t *)(v283[0] + 16);
              if (*(char *)(v283[0] + 39) < 0)
              {
                v245 = *(_QWORD *)(v283[0] + 16);
                v244 = *(_QWORD *)(v283[0] + 24);
              }
              else
              {
                v244 = *(unsigned __int8 *)(v283[0] + 39);
                v245 = v283[0] + 16;
              }
              *(_QWORD *)&v317[0] = v245;
              *((_QWORD *)&v317[0] + 1) = v244;
              v277 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v277 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v318);
                sub_223199C58("com.apple.cv3d", (unint64_t)v318, &xmmword_255788F40);
                if (v318[24] && (v318[23] & 0x80000000) != 0)
                  operator delete(*(void **)v318);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
              v278 = byte_255788F57;
              if (byte_255788F57 >= 0)
              {
                v279 = (const char *)&xmmword_255788F40;
              }
              else
              {
                v278 = *((_QWORD *)&xmmword_255788F40 + 1);
                v279 = (const char *)xmmword_255788F40;
              }
              v313.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
              v313.__r_.__value_.__l.__size_ = v278;
              *(_QWORD *)v318 = os_log_create(v279, *(const char **)&v317[0]);
              sub_223199D38(&v318[8], (uint64_t)&v313);
              sub_223199D38(&v319, (uint64_t)v317);
              v280 = *(NSObject **)v318;
              sub_223199BDC((uint64_t)v318);
              sub_223470674(v241, v243, v280, OS_LOG_TYPE_ERROR, &v310);
              if (v239)
                goto LABEL_452;
              goto LABEL_453;
            case 4u:
              sub_2231CDCA4(*a1, (uint64_t)v318);
              if ((_DWORD)v321)
                v42 = HIDWORD(v321) == 0;
              else
                v42 = 1;
              v43 = v42;
              if (!v42)
              {
                v45 = *(_QWORD *)(a3 + 8);
                v44 = *(std::__shared_weak_count **)(a3 + 16);
                v298[0] = &off_24EC715B8;
                v298[1] = v45;
                v299 = v44;
                if (v44)
                {
                  v46 = (unint64_t *)&v44->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                sub_22328CFD4((uint64_t)v298, v300);
                sub_22346EF98((uint64_t)v318, (uint64_t)v300);
                v48 = v301;
                if (v301)
                {
                  v49 = (unint64_t *)&v301->__shared_owners_;
                  do
                    v50 = __ldaxr(v49);
                  while (__stlxr(v50 - 1, v49));
                  if (!v50)
                  {
                    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                    std::__shared_weak_count::__release_weak(v48);
                  }
                }
                v298[0] = &off_24EC715B8;
                v51 = v299;
                if (v299)
                {
                  v52 = (unint64_t *)&v299->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
              }
              v54 = *(std::__shared_weak_count **)&v318[16];
              if (*(_QWORD *)&v318[16])
              {
                v55 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              if (!v43)
              {
LABEL_392:
                *(_QWORD *)v318 = "cv3d.recon.";
                *(_QWORD *)&v318[8] = 11;
                *(_QWORD *)&v318[16] = "Stats.Keyframing.NVS_Time";
                *(_QWORD *)&v318[24] = 25;
                sub_2231A9820((uint64_t)v318, (uint64_t)&v318[32], 0, 0, &v313);
                sub_224569D7C();
                sub_224569A80();
                if (os_variant_has_internal_diagnostics())
                {
                  v246 = sub_2241471F8();
                  v247 = v246[2];
                  if (!v247)
                  {
                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    v247 = v246[2];
                  }
                  v248 = *(_QWORD *)(v247 + 64);
                  v249 = (std::mutex *)(v248 + 32);
                  std::mutex::lock((std::mutex *)(v248 + 32));
                  v251 = *(_QWORD *)(v248 + 96);
                  v250 = *(_QWORD *)(v248 + 104);
                  std::mutex::unlock(v249);
                  if (v251 != v250)
                  {
                    sub_2241471F8();
                    v252 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v252 + 24))(v252))
                    {
                      memset(v318, 0, 32);
                      *(_DWORD *)&v318[32] = 728325608;
                      kdebug_trace();
                      *(float *)v283 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v252 + 24))(v252))
                      {
                        HIBYTE(v287) = 9;
                        strcpy((char *)&__p, "copy (ms)");
                        *(_QWORD *)&v317[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                        *((_QWORD *)&v317[0] + 1) = 2;
                        v253 = sub_2241471F8();
                        sub_2231FBBA8((uint64_t)v253, v252, (float *)v283, (uint64_t)&__p, v317);
                        if (SHIBYTE(v287) < 0)
                          operator delete((void *)__p);
                      }
                      kdebug_trace();
                    }
                  }
                }
                memset(v318, 0, 32);
                *(_DWORD *)&v318[32] = 728325624;
                kdebug_trace();
                size = HIBYTE(v313.__r_.__value_.__r.__words[2]);
                if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = v313.__r_.__value_.__l.__size_;
                if (size >= 0x11)
                {
                  v255 = &v313;
                  if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v255 = (std::string *)v313.__r_.__value_.__r.__words[0];
                  v256 = v255->__r_.__value_.__r.__words[0];
                  v257 = v255->__r_.__value_.__l.__size_;
                  v258 = v255->__r_.__value_.__s.__data_[16];
                  if (v256 == 0x6365722E64337663 && v257 == 0x73746174532E6E6FLL && v258 == 46)
                  {
                    v261 = sub_223187510();
                    if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v262 = &v313;
                    else
                      v262 = (std::string *)v313.__r_.__value_.__r.__words[0];
                    if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v263 = HIBYTE(v313.__r_.__value_.__r.__words[2]);
                    else
                      v263 = v313.__r_.__value_.__l.__size_;
                    *(float *)&__p = (float)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
                    sub_2231897A8((uint64_t *)v261, v262, v263, (float *)&__p, (uint64_t)"copy (ms)", 9);
                  }
                }
                kdebug_trace();
                if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v313.__r_.__value_.__l.__data_);
                return 1;
              }
              sub_22346EAE8(v283);
              if (**(int **)(v283[0] + 56) <= 5)
              {
                v57 = *(unsigned __int8 *)(v283[0] + 72);
                v58 = sub_22322F254(v283[0], "OSLogSurrogateAppender", 1, 0);
                v59 = v58 ? v58 + 16 : 0;
                if (v57 || v58 != 0)
                {
                  *(_QWORD *)&__p = v283;
                  *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
                  v287 = std::chrono::system_clock::now().__d_.__rep_;
                  LODWORD(v288) = 5;
                  v289 = "unknown file";
                  v290 = 214;
                  v293 = 0;
                  v294 = 0;
                  v292 = "unknown function";
                  v61 = (uint64_t *)(v283[0] + 16);
                  if (*(char *)(v283[0] + 39) < 0)
                  {
                    v63 = *(_QWORD *)(v283[0] + 16);
                    v62 = *(_QWORD *)(v283[0] + 24);
                  }
                  else
                  {
                    v62 = *(unsigned __int8 *)(v283[0] + 39);
                    v63 = v283[0] + 16;
                  }
                  *(_QWORD *)&v317[0] = v63;
                  *((_QWORD *)&v317[0] + 1) = v62;
                  v269 = atomic_load((unsigned __int8 *)&qword_255788F58);
                  if ((v269 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
                  {
                    sub_224568628((uint64_t)v318);
                    sub_223199C58("com.apple.cv3d", (unint64_t)v318, &xmmword_255788F40);
                    if (v318[24] && (v318[23] & 0x80000000) != 0)
                      operator delete(*(void **)v318);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                    __cxa_guard_release(&qword_255788F58);
                  }
                  v270 = byte_255788F57;
                  if (byte_255788F57 >= 0)
                  {
                    v271 = (const char *)&xmmword_255788F40;
                  }
                  else
                  {
                    v270 = *((_QWORD *)&xmmword_255788F40 + 1);
                    v271 = (const char *)xmmword_255788F40;
                  }
                  v313.__r_.__value_.__r.__words[0] = (std::string::size_type)v271;
                  v313.__r_.__value_.__l.__size_ = v270;
                  *(_QWORD *)v318 = os_log_create(v271, *(const char **)&v317[0]);
                  sub_223199D38(&v318[8], (uint64_t)&v313);
                  sub_223199D38(&v319, (uint64_t)v317);
                  v272 = *(NSObject **)v318;
                  sub_223199BDC((uint64_t)v318);
                  sub_22346FE5C(v59, v61, v272, OS_LOG_TYPE_ERROR, &v310);
                  if (v57)
                  {
LABEL_452:
                    sub_22322C138((uint64_t)&__p, "NVS frame buffer type %d not supported by session", v310);
                    sub_223182C08((uint64_t)&__p);
                  }
LABEL_453:
                  sub_223182DAC((uint64_t)&__p);
                }
              }
              break;
            default:
              sub_22346EAE8(v283);
              if (**(int **)(v283[0] + 56) > 5)
                return 0;
              v114 = *(unsigned __int8 *)(v283[0] + 72);
              v115 = sub_22322F254(v283[0], "OSLogSurrogateAppender", 1, 0);
              v116 = v115 ? v115 + 16 : 0;
              if (!v114 && !v115)
                return 0;
              *(_QWORD *)&__p = v283;
              *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
              v287 = std::chrono::system_clock::now().__d_.__rep_;
              LODWORD(v288) = 5;
              v289 = "unknown file";
              v290 = 242;
              v293 = 0;
              v294 = 0;
              v292 = "unknown function";
              v117 = (uint64_t *)(v283[0] + 16);
              if (*(char *)(v283[0] + 39) < 0)
              {
                v119 = *(_QWORD *)(v283[0] + 16);
                v118 = *(_QWORD *)(v283[0] + 24);
              }
              else
              {
                v118 = *(unsigned __int8 *)(v283[0] + 39);
                v119 = v283[0] + 16;
              }
              *(_QWORD *)&v317[0] = v119;
              *((_QWORD *)&v317[0] + 1) = v118;
              v265 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v265 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v318);
                sub_223199C58("com.apple.cv3d", (unint64_t)v318, &xmmword_255788F40);
                if (v318[24] && (v318[23] & 0x80000000) != 0)
                  operator delete(*(void **)v318);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
              v266 = byte_255788F57;
              if (byte_255788F57 >= 0)
              {
                v267 = (const char *)&xmmword_255788F40;
              }
              else
              {
                v266 = *((_QWORD *)&xmmword_255788F40 + 1);
                v267 = (const char *)xmmword_255788F40;
              }
              v313.__r_.__value_.__r.__words[0] = (std::string::size_type)v267;
              v313.__r_.__value_.__l.__size_ = v266;
              *(_QWORD *)v318 = os_log_create(v267, *(const char **)&v317[0]);
              sub_223199D38(&v318[8], (uint64_t)&v313);
              sub_223199D38(&v319, (uint64_t)v317);
              v268 = *(NSObject **)v318;
              sub_223199BDC((uint64_t)v318);
              sub_223470AB4(v116, v117, v268, OS_LOG_TYPE_ERROR, &v310);
              if (v114)
              {
                sub_22322C138((uint64_t)&__p, "NVS frame buffer type %d not supported", v310);
                sub_223182C08((uint64_t)&__p);
              }
              goto LABEL_453;
          }
          return 0;
        }
      }
      else
      {
LABEL_8:
        if (v9)
          goto LABEL_9;
      }
    }
    sub_22346EAE8(v283);
    if (**(int **)(v283[0] + 56) > 5)
      return 0;
    v34 = *(unsigned __int8 *)(v283[0] + 72);
    v35 = sub_22322F254(v283[0], "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (!v34 && v35 == 0)
      return 0;
    *(_QWORD *)&__p = v283;
    *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
    v287 = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v288) = 5;
    v289 = "unknown file";
    v290 = 180;
    v293 = 0;
    v294 = 0;
    v292 = "unknown function";
    v38 = *(_QWORD *)__p;
    v39 = (const char *)(*(_QWORD *)__p + 16);
    v282 = v39;
    if (*(char *)(*(_QWORD *)__p + 39) < 0)
    {
      v39 = *(const char **)(v38 + 16);
      v40 = *(_QWORD *)(v38 + 24);
      v120 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v120 & 1) != 0)
        goto LABEL_168;
    }
    else
    {
      v40 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
      v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v41 & 1) != 0)
        goto LABEL_168;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v318);
      sub_223199C58("com.apple.cv3d", (unint64_t)v318, &xmmword_255788F40);
      if (v318[24] && (v318[23] & 0x80000000) != 0)
        operator delete(*(void **)v318);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_168:
    if (byte_255788F57 >= 0)
      v121 = (const char *)&xmmword_255788F40;
    else
      v121 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v122 = byte_255788F57;
    else
      v122 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v318 = os_log_create(v121, v39);
    v123 = &v318[8];
    if (v122 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v122 >= 0x17)
    {
      v124 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v122 | 7) != 0x17)
        v124 = v122 | 7;
      v125 = v124 + 1;
      v123 = operator new(v124 + 1);
      *(_QWORD *)&v318[16] = v122;
      *(_QWORD *)&v318[24] = v125 | 0x8000000000000000;
      *(_QWORD *)&v318[8] = v123;
    }
    else
    {
      v318[31] = v122;
      if (!v122)
      {
LABEL_182:
        v123[v122] = 0;
        v318[32] = 1;
        v126 = (void **)&v319;
        if (v40 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v40 >= 0x17)
        {
          v127 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17)
            v127 = v40 | 7;
          v128 = v127 + 1;
          v126 = (void **)operator new(v127 + 1);
          v320 = v40;
          v321 = v128 | 0x8000000000000000;
          v319 = v126;
        }
        else
        {
          HIBYTE(v321) = v40;
          if (!v40)
          {
LABEL_190:
            *((_BYTE *)v126 + v40) = 0;
            v322 = 1;
            v129 = *(NSObject **)v318;
            if (SHIBYTE(v321) < 0)
              operator delete(v319);
            if (v318[32] && (v318[31] & 0x80000000) != 0)
              operator delete(*(void **)&v318[8]);
            if (*(_QWORD *)v318)
              os_release(*(void **)v318);
            if (v36 && *(_QWORD *)(v36 + 24))
            {
              v130 = _os_log_pack_size();
              v131 = (std::__shared_weak_count_vtbl *)operator new(v130, (std::align_val_t)8uLL);
              v132 = (std::__shared_weak_count *)operator new();
              v133 = v132;
              v132->__shared_owners_ = 0;
              v134 = (unint64_t *)&v132->__shared_owners_;
              v132->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v132->__shared_weak_owners_ = 0;
              v132[1].__vftable = v131;
              *(_QWORD *)v318 = v131;
              *(_QWORD *)&v318[8] = v131;
              *(_QWORD *)&v318[16] = v132;
              do
                v135 = __ldxr(v134);
              while (__stxr(v135 + 1, v134));
              *(_QWORD *)&v318[24] = 0;
              *(_QWORD *)&v318[32] = 0;
              v319 = 0;
              do
                v136 = __ldaxr(v134);
              while (__stlxr(v136 - 1, v134));
              if (!v136)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v133);
              }
              v137 = *(_QWORD *)v318;
              *(_WORD *)_os_log_pack_fill() = 0;
              v138 = operator new();
              v139 = *(unsigned __int8 *)(v38 + 39);
              v140 = v282;
              if ((v139 & 0x80u) != 0)
              {
                v140 = *(const char **)(v38 + 16);
                v139 = *(_QWORD *)(v38 + 24);
              }
              *(_QWORD *)v138 = v137;
              *(_OWORD *)(v138 + 8) = *(_OWORD *)&v318[8];
              *(_QWORD *)&v318[8] = 0;
              *(_QWORD *)&v318[16] = 0;
              *(_OWORD *)(v138 + 24) = *(_OWORD *)&v318[24];
              *(_QWORD *)&v318[24] = 0;
              *(_QWORD *)&v318[32] = 0;
              *(_QWORD *)(v138 + 40) = v140;
              *(_QWORD *)(v138 + 48) = v139;
              *(_BYTE *)(v138 + 56) = 16;
              *(_QWORD *)&v317[0] = 0;
              v313.__r_.__value_.__r.__words[0] = v138;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), &v313);
              v141 = v313.__r_.__value_.__r.__words[0];
              v313.__r_.__value_.__r.__words[0] = 0;
              if (v141)
              {
                v142 = *(std::__shared_weak_count **)(v141 + 32);
                if (v142)
                {
                  v143 = (unint64_t *)&v142->__shared_owners_;
                  do
                    v144 = __ldaxr(v143);
                  while (__stlxr(v144 - 1, v143));
                  if (!v144)
                  {
                    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                    std::__shared_weak_count::__release_weak(v142);
                  }
                }
                v145 = *(std::__shared_weak_count **)(v141 + 16);
                if (v145)
                {
                  v146 = (unint64_t *)&v145->__shared_owners_;
                  do
                    v147 = __ldaxr(v146);
                  while (__stlxr(v147 - 1, v146));
                  if (!v147)
                  {
                    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                    std::__shared_weak_count::__release_weak(v145);
                  }
                }
                MEMORY[0x227684CE8](v141, 0x10F0C40B62ED6C6);
                v148 = *(_QWORD *)&v317[0];
                *(_QWORD *)&v317[0] = 0;
                if (v148)
                {
                  v149 = *(std::__shared_weak_count **)(v148 + 32);
                  if (v149)
                  {
                    v150 = (unint64_t *)&v149->__shared_owners_;
                    do
                      v151 = __ldaxr(v150);
                    while (__stlxr(v151 - 1, v150));
                    if (!v151)
                    {
                      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                      std::__shared_weak_count::__release_weak(v149);
                    }
                  }
                  v152 = *(std::__shared_weak_count **)(v148 + 16);
                  if (v152)
                  {
                    v153 = (unint64_t *)&v152->__shared_owners_;
                    do
                      v154 = __ldaxr(v153);
                    while (__stlxr(v154 - 1, v153));
                    if (!v154)
                    {
                      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                      std::__shared_weak_count::__release_weak(v152);
                    }
                  }
                  MEMORY[0x227684CE8](v148, 0x10F0C40B62ED6C6);
                }
              }
              v155 = *(std::__shared_weak_count **)&v318[32];
              if (*(_QWORD *)&v318[32])
              {
                v156 = (unint64_t *)(*(_QWORD *)&v318[32] + 8);
                do
                  v157 = __ldaxr(v156);
                while (__stlxr(v157 - 1, v156));
                if (!v157)
                {
                  ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                  std::__shared_weak_count::__release_weak(v155);
                }
              }
              v158 = *(std::__shared_weak_count **)&v318[16];
              if (*(_QWORD *)&v318[16])
              {
                v159 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
                do
                  v160 = __ldaxr(v159);
                while (__stlxr(v160 - 1, v159));
                if (!v160)
                {
                  ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                  std::__shared_weak_count::__release_weak(v158);
                }
              }
            }
            else
            {
              os_log_type_enabled(v129, OS_LOG_TYPE_ERROR);
              *(_WORD *)v318 = 0;
              v161 = (void *)_os_log_send_and_compose_impl();
              if (v161)
                free(v161);
            }
            if (v34)
            {
              sub_22322C138((uint64_t)&__p, "Output NVS frame buffer not valid");
              sub_223182C08((uint64_t)&__p);
            }
            sub_223182C08((uint64_t)&__p);
            v162 = v294;
            if (v294)
            {
              v163 = (unint64_t *)&v294->__shared_owners_;
              do
                v164 = __ldaxr(v163);
              while (__stlxr(v164 - 1, v163));
              goto LABEL_328;
            }
            return 0;
          }
        }
        memmove(v126, v39, v40);
        goto LABEL_190;
      }
    }
    memmove(v123, v121, v122);
    goto LABEL_182;
  }
  sub_22346EAE8(v283);
  if (**(int **)(v283[0] + 56) > 5)
    return 0;
  v26 = *(unsigned __int8 *)(v283[0] + 72);
  v27 = sub_22322F254(v283[0], "OSLogSurrogateAppender", 1, 0);
  v28 = v27;
  if (!v26 && v27 == 0)
    return 0;
  *(_QWORD *)&__p = v283;
  *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
  v287 = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v288) = 5;
  v289 = "unknown file";
  v290 = 176;
  v293 = 0;
  v294 = 0;
  v292 = "unknown function";
  v30 = *(_QWORD *)__p;
  v31 = (const char *)(*(_QWORD *)__p + 16);
  v281 = v31;
  if (*(char *)(*(_QWORD *)__p + 39) < 0)
  {
    v31 = *(const char **)(v30 + 16);
    v32 = *(_QWORD *)(v30 + 24);
    v165 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v165 & 1) != 0)
      goto LABEL_249;
  }
  else
  {
    v32 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
    v33 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v33 & 1) != 0)
      goto LABEL_249;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v318);
    sub_223199C58("com.apple.cv3d", (unint64_t)v318, &xmmword_255788F40);
    if (v318[24] && (v318[23] & 0x80000000) != 0)
      operator delete(*(void **)v318);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_249:
  if (byte_255788F57 >= 0)
    v166 = (const char *)&xmmword_255788F40;
  else
    v166 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v167 = byte_255788F57;
  else
    v167 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v318 = os_log_create(v166, v31);
  v168 = &v318[8];
  if (v167 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v167 >= 0x17)
  {
    v169 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17)
      v169 = v167 | 7;
    v170 = v169 + 1;
    v168 = operator new(v169 + 1);
    *(_QWORD *)&v318[16] = v167;
    *(_QWORD *)&v318[24] = v170 | 0x8000000000000000;
    *(_QWORD *)&v318[8] = v168;
    goto LABEL_262;
  }
  v318[31] = v167;
  if (v167)
LABEL_262:
    memmove(v168, v166, v167);
  v168[v167] = 0;
  v318[32] = 1;
  v171 = (void **)&v319;
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v32 >= 0x17)
  {
    v172 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v172 = v32 | 7;
    v173 = v172 + 1;
    v171 = (void **)operator new(v172 + 1);
    v320 = v32;
    v321 = v173 | 0x8000000000000000;
    v319 = v171;
    goto LABEL_270;
  }
  HIBYTE(v321) = v32;
  if (v32)
LABEL_270:
    memmove(v171, v31, v32);
  *((_BYTE *)v171 + v32) = 0;
  v322 = 1;
  v174 = *(NSObject **)v318;
  if (SHIBYTE(v321) < 0)
    operator delete(v319);
  if (v318[32] && (v318[31] & 0x80000000) != 0)
    operator delete(*(void **)&v318[8]);
  if (*(_QWORD *)v318)
    os_release(*(void **)v318);
  if (v28 && *(_QWORD *)(v28 + 24))
  {
    v175 = _os_log_pack_size();
    v176 = (std::__shared_weak_count_vtbl *)operator new(v175, (std::align_val_t)8uLL);
    v177 = (std::__shared_weak_count *)operator new();
    v178 = v177;
    v177->__shared_owners_ = 0;
    v179 = (unint64_t *)&v177->__shared_owners_;
    v177->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v177->__shared_weak_owners_ = 0;
    v177[1].__vftable = v176;
    *(_QWORD *)v318 = v176;
    *(_QWORD *)&v318[8] = v176;
    *(_QWORD *)&v318[16] = v177;
    do
      v180 = __ldxr(v179);
    while (__stxr(v180 + 1, v179));
    *(_QWORD *)&v318[24] = 0;
    *(_QWORD *)&v318[32] = 0;
    v319 = 0;
    do
      v181 = __ldaxr(v179);
    while (__stlxr(v181 - 1, v179));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v178);
    }
    v182 = *(_QWORD *)v318;
    *(_WORD *)_os_log_pack_fill() = 0;
    v183 = operator new();
    v184 = *(unsigned __int8 *)(v30 + 39);
    v185 = v281;
    if ((v184 & 0x80u) != 0)
    {
      v185 = *(const char **)(v30 + 16);
      v184 = *(_QWORD *)(v30 + 24);
    }
    *(_QWORD *)v183 = v182;
    *(_OWORD *)(v183 + 8) = *(_OWORD *)&v318[8];
    *(_QWORD *)&v318[8] = 0;
    *(_QWORD *)&v318[16] = 0;
    *(_OWORD *)(v183 + 24) = *(_OWORD *)&v318[24];
    *(_QWORD *)&v318[24] = 0;
    *(_QWORD *)&v318[32] = 0;
    *(_QWORD *)(v183 + 40) = v185;
    *(_QWORD *)(v183 + 48) = v184;
    *(_BYTE *)(v183 + 56) = 16;
    *(_QWORD *)&v317[0] = 0;
    v313.__r_.__value_.__r.__words[0] = v183;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), &v313);
    v186 = v313.__r_.__value_.__r.__words[0];
    v313.__r_.__value_.__r.__words[0] = 0;
    if (v186)
    {
      v187 = *(std::__shared_weak_count **)(v186 + 32);
      if (v187)
      {
        v188 = (unint64_t *)&v187->__shared_owners_;
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      v190 = *(std::__shared_weak_count **)(v186 + 16);
      if (v190)
      {
        v191 = (unint64_t *)&v190->__shared_owners_;
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
        }
      }
      MEMORY[0x227684CE8](v186, 0x10F0C40B62ED6C6);
      v193 = *(_QWORD *)&v317[0];
      *(_QWORD *)&v317[0] = 0;
      if (v193)
      {
        v194 = *(std::__shared_weak_count **)(v193 + 32);
        if (v194)
        {
          v195 = (unint64_t *)&v194->__shared_owners_;
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        v197 = *(std::__shared_weak_count **)(v193 + 16);
        if (v197)
        {
          v198 = (unint64_t *)&v197->__shared_owners_;
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        MEMORY[0x227684CE8](v193, 0x10F0C40B62ED6C6);
      }
    }
    v200 = *(std::__shared_weak_count **)&v318[32];
    if (*(_QWORD *)&v318[32])
    {
      v201 = (unint64_t *)(*(_QWORD *)&v318[32] + 8);
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
      }
    }
    v203 = *(std::__shared_weak_count **)&v318[16];
    if (*(_QWORD *)&v318[16])
    {
      v204 = (unint64_t *)(*(_QWORD *)&v318[16] + 8);
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
  }
  else
  {
    os_log_type_enabled(v174, OS_LOG_TYPE_ERROR);
    *(_WORD *)v318 = 0;
    v206 = (void *)_os_log_send_and_compose_impl();
    if (v206)
      free(v206);
  }
  if (v26)
  {
    sub_22322C138((uint64_t)&__p, "Input NVS frame not valid");
    sub_223182C08((uint64_t)&__p);
  }
  sub_223182C08((uint64_t)&__p);
  v162 = v294;
  if (v294)
  {
    v207 = (unint64_t *)&v294->__shared_owners_;
    do
      v164 = __ldaxr(v207);
    while (__stlxr(v164 - 1, v207));
LABEL_328:
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  return 0;
}

void sub_22346E594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  if (*(_BYTE *)(v10 - 168))
  {
    if (*(char *)(v10 - 169) < 0)
      operator delete(*(void **)(v10 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22346E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22346E610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22346E624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22346E638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void *v12;
  va_list __p;

  va_start(__p, a10);
  if (*(_BYTE *)(v10 - 160) && *(char *)(v10 - 161) < 0)
    operator delete(*(void **)(v10 - 184));
  v12 = *(void **)(v10 - 192);
  if (v12)
    os_release(v12);
  sub_223182DAC((uint64_t)__p);
  _Unwind_Resume(a1);
}

void sub_22346EADC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_22346EAE8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAEB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAEB8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAEB0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAEB8);
  }
  *a1 = qword_2540CAEB0;
}

void sub_22346EB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAEB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAEB8);
  _Unwind_Resume(a1);
}

uint64_t sub_22346EBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  _DWORD *v35;
  int v36;
  int v37;
  _DWORD *v38;
  __int16 *v39;
  int v40;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_17;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_59;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_59;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_59:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_17:
    v58 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v58, v4, 1);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_15:
    v57 = 0;
    goto LABEL_31;
  }
LABEL_18:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 96))(&v57, v13, 1);
LABEL_31:
  v22 = *(_DWORD *)(a1 + 32);
  if (v22)
  {
    v23 = *(_DWORD *)(a1 + 36);
    if (v23)
    {
      v24 = *(unsigned int *)(a1 + 40);
      v25 = *(unsigned int *)(a1 + 44);
      v26 = *(unsigned int *)(a2 + 40);
      v27 = *(unsigned int *)(a2 + 44);
      v28 = *(__int16 **)(a1 + 24);
      if (*(_BYTE *)(a1 + 48) && v28)
      {
        v29 = *(_QWORD *)(a1 + 8);
        v30 = *(std::__shared_weak_count **)(a1 + 16);
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          do
            v33 = __ldaxr(v31);
          while (__stlxr(v33 - 1, v31));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v29 + 88))(v29, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v28 = *(__int16 **)(a1 + 24);
      }
      v34 = v22 - 1;
      v35 = *(_DWORD **)(a2 + 24);
      v36 = v23 - 1;
      if (v23 != 1)
      {
        if (v22 == 1)
        {
          do
          {
            _H0 = *v28;
            __asm { FCVT            S0, H0 }
            *v35 = _S0;
            v28 += v25;
            v35 += v27;
            --v36;
          }
          while (v36);
LABEL_52:
          _H0 = *v28;
          __asm { FCVT            S0, H0 }
          *v35 = _S0;
          goto LABEL_53;
        }
        v37 = 0;
        do
        {
          v38 = v35;
          v39 = v28;
          v40 = v22 - 1;
          do
          {
            _H0 = *v39;
            __asm { FCVT            S0, H0 }
            *v38 = _S0;
            v39 += v24;
            v38 += v26;
            --v40;
          }
          while (v40);
          _H0 = *v39;
          __asm { FCVT            S0, H0 }
          *v38 = _S0;
          v28 += v25;
          v35 += v27;
          ++v37;
        }
        while (v37 != v36);
      }
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          __asm { FCVT            S0, H0 }
          *v35 = _S0;
          v28 += v24;
          v35 += v26;
          --v34;
        }
        while (v34);
      }
      goto LABEL_52;
    }
  }
LABEL_53:
  v55 = v57;
  v57 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  result = v58;
  v58 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22346EF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22346EF98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  _BYTE *v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t i;
  unsigned __int8 v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _BYTE *v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_17;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_95;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_95;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_95:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_14;
LABEL_17:
    v64 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v64, v4, 1);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_15:
    v63 = 0;
    goto LABEL_31;
  }
LABEL_18:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 96))(&v63, v13, 1);
LABEL_31:
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_86;
  v22 = *(_DWORD *)(a1 + 36);
  if (!v22)
    goto LABEL_86;
  v23 = *(_DWORD *)(a1 + 40);
  if (!v23)
    goto LABEL_86;
  v24 = *(unsigned int *)(a1 + 48);
  v25 = *(unsigned int *)(a2 + 40);
  v57 = *(unsigned int *)(a1 + 52);
  v58 = *(unsigned int *)(a2 + 44);
  v26 = *(_QWORD **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v26)
  {
    v27 = *(_QWORD *)(a1 + 8);
    v28 = *(std::__shared_weak_count **)(a1 + 16);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v27 + 88))(v27, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v26 = *(_QWORD **)(a1 + 24);
  }
  v32 = v22 - 1;
  v33 = *(_BYTE **)(a2 + 24);
  v34 = v23 - 1;
  if (v23 == 1)
  {
    v37 = *(_BYTE **)(a2 + 24);
  }
  else
  {
    if (!v32)
    {
      v37 = *(_BYTE **)(a2 + 24);
      while (v26)
      {
        v49 = *v26;
        if (*v26 <= BYTE6(*v26))
          v49 = HIWORD(*v26);
        *v37 = BYTE1(v49);
        v37 += v58;
        v26 = (_QWORD *)((char *)v26 + 2 * v57);
        if (!--v34)
          goto LABEL_74;
      }
      goto LABEL_91;
    }
    v35 = 0;
    v36 = (unsigned __int8 *)&qword_255795680;
    v37 = v33;
    v56 = v34;
    v62 = v32;
    do
    {
      v59 = v35;
      v39 = 0;
      v60 = v37;
      v61 = v26;
      do
      {
        if (!v26)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v41 = v24;
          v42 = v25;
          v43 = atomic_load(v36);
          if ((v43 & 1) == 0 && __cxa_guard_acquire((__guard *)v36))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release((__guard *)v36);
          }
          v44 = v36;
          if (byte_255795670)
            v45 = byte_255795678 == 0;
          else
            v45 = 0;
          if (!v45)
          {
            v46 = qword_255795648;
            for (i = qword_255795650; v46 != i; v46 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v46)(*(_QWORD *)(v46 + 8), "ptr != nullptr || size == 0", 27, "", 0);
          }
          v36 = v44;
          v48 = atomic_load(v44);
          if ((v48 & 1) == 0 && __cxa_guard_acquire((__guard *)v44))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release((__guard *)v44);
          }
          v25 = v42;
          v24 = v41;
          v32 = v62;
          if (!byte_255795670)
            goto LABEL_92;
          qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
        }
        v40 = *v26;
        if (*v26 <= BYTE6(*v26))
          v40 = HIWORD(*v26);
        *v37 = BYTE1(v40);
        v26 = (_QWORD *)((char *)v26 + 2 * v24);
        v37 += v25;
        ++v39;
      }
      while (v39 != v32);
      v38 = *v26;
      if (*v26 <= BYTE6(*v26))
        v38 = HIWORD(*v26);
      *v37 = BYTE1(v38);
      v26 = (_QWORD *)((char *)v61 + 2 * v57);
      v37 = &v60[v58];
      v35 = v59 + 1;
    }
    while (v59 + 1 != v56);
  }
LABEL_74:
  v50 = v37;
  if (v32)
  {
    v51 = 2 * v24;
    while (v26
         || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v52 = *v26;
      if (*v26 <= BYTE6(*v26))
        v52 = HIWORD(*v26);
      *v50 = BYTE1(v52);
      v50 += v25;
      v26 = (_QWORD *)((char *)v26 + v51);
      if (!--v32)
        goto LABEL_83;
    }
LABEL_92:
    abort();
  }
  if (!v26)
  {
LABEL_91:
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    goto LABEL_92;
  }
LABEL_83:
  v53 = *v26;
  if (*v26 <= BYTE6(*v26))
    v53 = HIWORD(*v26);
  *v50 = BYTE1(v53);
LABEL_86:
  v54 = v63;
  v63 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  result = v64;
  v64 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22346F568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  _Unwind_Resume(exception_object);
}

float sub_22346F5D8@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float result;

  v4 = *a1;
  if (*a1 > 0.0031308)
  {
    v5 = (float)((float)(powf(v4, 0.41667) * 53805.0) + -2805.0) / 200.0;
    v6 = a1[1];
    if (v6 <= 0.0031308)
      goto LABEL_3;
LABEL_6:
    v7 = (float)((float)(powf(v6, 0.41667) * 53805.0) + -2805.0) / 200.0;
    v8 = a1[2];
    if (v8 <= 0.0031308)
      goto LABEL_4;
    goto LABEL_7;
  }
  v5 = v4 * 3294.6;
  v6 = a1[1];
  if (v6 > 0.0031308)
    goto LABEL_6;
LABEL_3:
  v7 = v6 * 3294.6;
  v8 = a1[2];
  if (v8 <= 0.0031308)
  {
LABEL_4:
    result = v8 * 3294.6;
    *a2 = v5;
    a2[1] = v7;
    a2[2] = result;
    return result;
  }
LABEL_7:
  result = (float)((float)(powf(v8, 0.41667) * 53805.0) + -2805.0) / 200.0;
  *a2 = v5;
  a2[1] = v7;
  a2[2] = result;
  return result;
}

void sub_22346F77C(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 80 * a2;
    v6 = (char *)operator new(80 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 5);
        v4 -= 80;
        *((_OWORD *)v9 - 5) = v10;
        v9 -= 80;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        v11 = *((_OWORD *)v4 + 1);
        v12 = *((_OWORD *)v4 + 2);
        v13 = *((_OWORD *)v4 + 4);
        *((_OWORD *)v9 + 3) = *((_OWORD *)v4 + 3);
        *((_OWORD *)v9 + 4) = v13;
        *((_OWORD *)v9 + 1) = v11;
        *((_OWORD *)v9 + 2) = v12;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v14 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v14 != v2)
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)v14 - 9);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v14 -= 80;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

_OWORD *sub_22346F8A4(void **a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_22316E078();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_223174E94();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *a2;
  v9 = a2[1];
  v10 = &v7[80 * v3];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v11 = &v7[80 * v6];
  *(_OWORD *)v10 = v8;
  *((_OWORD *)v10 + 1) = v9;
  v12 = a2[3];
  *((_OWORD *)v10 + 2) = a2[2];
  *((_OWORD *)v10 + 3) = v12;
  *((_OWORD *)v10 + 4) = a2[4];
  v13 = v10 + 80;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 5);
      v15 -= 80;
      *((_OWORD *)v10 - 5) = v16;
      v10 -= 80;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      v17 = *((_OWORD *)v15 + 1);
      v18 = *((_OWORD *)v15 + 2);
      v19 = *((_OWORD *)v15 + 4);
      *((_OWORD *)v10 + 3) = *((_OWORD *)v15 + 3);
      *((_OWORD *)v10 + 4) = v19;
      *((_OWORD *)v10 + 1) = v17;
      *((_OWORD *)v10 + 2) = v18;
    }
    while (v15 != v14);
    v15 = (char *)*a1;
    v20 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v20 != v15)
    {
      v21 = (std::__shared_weak_count *)*((_QWORD *)v20 - 9);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v20 -= 80;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_22346FA1C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, unsigned __int8 *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x227684CE8](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_22346FE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va1);
  sub_22319A054((uint64_t *)va);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22346FE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22346FE38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_22346FE5C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, unsigned __int8 *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x227684CE8](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_223470240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va1);
  sub_22319A054((uint64_t *)va);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223470264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223470278(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

float32_t sub_22347029C(_DWORD *a1, __int16 **a2, uint64_t a3, __int16 *a4, __int16 *a5, float32x4_t _Q0, float32x4_t a7, __n128 a8)
{
  __int16 *v8;
  __int16 *v9;
  unsigned int i;
  float v14;
  float v15;
  float32x4_t v16;
  const float *v17;
  float32x4_t v25;
  const float *v28;
  float v35;
  float v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32_t result;
  __n128 v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;

  v8 = a5;
  v9 = a4;
  *a2 = a4;
  a2[2] = a5;
  if (a1[5])
  {
    for (i = 0; i < a1[5]; ++i)
    {
      *a2 = v9;
      a2[2] = v8;
      v17 = *(const float **)(a3 + 8);
      _H0 = v9[2];
      __asm { FCVT            S0, H0 }
      _H9 = v9[1];
      _H8 = *v9;
      if (_Q0.f32[0] <= 0.0031308)
      {
        _Q0.f32[0] = _Q0.f32[0] * 3294.6;
        v44 = _Q0;
        __asm { FCVT            S0, H9 }
        if (_S0 <= 0.0031308)
        {
LABEL_7:
          a8.n128_f32[0] = _S0 * 3294.6;
          __asm { FCVT            S0, H8 }
          if (_S0 <= 0.0031308)
            goto LABEL_11;
          goto LABEL_3;
        }
      }
      else
      {
        v25.f32[0] = (float)((float)(powf(_Q0.f32[0], 0.41667) * 53805.0) + -2805.0) / 200.0;
        v44 = v25;
        __asm { FCVT            S0, H9 }
        if (_S0 <= 0.0031308)
          goto LABEL_7;
      }
      a8.n128_f32[0] = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
      __asm { FCVT            S0, H8 }
      if (_S0 <= 0.0031308)
      {
LABEL_11:
        v15 = _S0 * 3294.6;
        goto LABEL_4;
      }
LABEL_3:
      v42 = a8;
      v14 = powf(_S0, 0.41667);
      a8 = v42;
      v15 = (float)((float)(v14 * 53805.0) + -2805.0) / 200.0;
LABEL_4:
      a7 = v44;
      a7.i32[1] = a8.n128_u32[0];
      a7.f32[2] = v15;
      v16 = vld1q_dup_f32(v17);
      _Q0 = vaddq_f32(a7, v16);
      *(_BYTE *)v8 = (int)_Q0.f32[0];
      *((_BYTE *)v8 + 1) = (int)_Q0.f32[1];
      *((_BYTE *)v8 + 2) = (int)_Q0.f32[2];
      *((_BYTE *)a2[2] + 3) = -1;
      v9 += a1[6];
      v8 = (__int16 *)((char *)v8 + a1[7]);
    }
  }
  *a2 = v9;
  a2[2] = v8;
  v28 = *(const float **)(a3 + 8);
  _H0 = v9[2];
  __asm { FCVT            S0, H0 }
  _H1 = v9[1];
  __asm { FCVT            S8, H1 }
  _H9 = *v9;
  if (_S0 <= 0.0031308)
    a7.f32[0] = _S0 * 3294.6;
  else
    a7.f32[0] = (float)((float)(powf(_S0, 0.41667) * 53805.0) + -2805.0) / 200.0;
  __asm { FCVT            S9, H9 }
  v45 = a7;
  if (_S8 <= 0.0031308)
  {
    v35 = _S8 * 3294.6;
    if (_S9 <= 0.0031308)
      goto LABEL_17;
LABEL_19:
    v43 = v35;
    v37 = powf(_S9, 0.41667);
    v35 = v43;
    v36 = (float)((float)(v37 * 53805.0) + -2805.0) / 200.0;
    goto LABEL_20;
  }
  v35 = (float)((float)(powf(_S8, 0.41667) * 53805.0) + -2805.0) / 200.0;
  if (_S9 > 0.0031308)
    goto LABEL_19;
LABEL_17:
  v36 = _S9 * 3294.6;
LABEL_20:
  v38 = v45;
  v38.f32[1] = v35;
  v38.f32[2] = v36;
  v39 = vld1q_dup_f32(v28);
  v40 = vaddq_f32(v38, v39);
  *(_BYTE *)v8 = (int)v40.f32[0];
  *((_BYTE *)v8 + 1) = (int)v40.f32[1];
  result = v40.f32[2];
  *((_BYTE *)v8 + 2) = (int)v40.f32[2];
  *((_BYTE *)a2[2] + 3) = -1;
  return result;
}

void sub_223470674(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, unsigned __int8 *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x227684CE8](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_223470A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va1);
  sub_22319A054((uint64_t *)va);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223470A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223470A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_223470AB4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, unsigned __int8 *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x227684CE8](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_223470E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va1);
  sub_22319A054((uint64_t *)va);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223470EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223470ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_223470EF4(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t *a4)
{
  void **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned __int8 *v23;
  _BYTE *v24;
  void **v25;
  void **v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 v36;
  __int128 v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  int v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _OWORD *v63;
  _BYTE *v64;
  uint64_t **v65;
  _BYTE *v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  char *v73;
  uint64_t *v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned int v94;
  unsigned __int8 **v95;
  unsigned __int8 *v96;
  unsigned __int8 **v97;
  unsigned int v98;
  unsigned int v99;
  _QWORD *v100;
  _BOOL4 v101;
  _BOOL4 v102;
  char v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unsigned __int8 *v109;
  unsigned __int8 v110;
  __int128 v111;
  int v112;
  char *v113;
  char *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unsigned int v118;
  char *v119;
  _BYTE *v120;
  int v121;
  int v122;
  unsigned __int8 *v123;
  char *v124;
  uint64_t *v125;
  uint64_t **v126;
  uint64_t **v127;
  unsigned int v128;
  unsigned int v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t *v135;
  unsigned __int8 *v136;
  unint64_t v137;
  unint64_t v138;
  unsigned __int8 *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  std::mutex *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  std::string::size_type size;
  std::string *v157;
  std::string::size_type v158;
  std::string::size_type v159;
  int v160;
  BOOL v161;
  unsigned __int8 v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  const char *v168;
  uint64_t v169;
  size_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned __int8 v174;
  const char *v175;
  size_t v176;
  _BYTE *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  NSObject *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  size_t v187;
  void *v188;
  _QWORD *v189;
  size_t v190;
  size_t v191;
  _BYTE *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  char v198;
  _QWORD *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  char *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  std::string::size_type v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  const char *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v247;
  const char *v250;
  uint64_t v251;
  _BYTE __p[24];
  int v253;
  const char *v254;
  int v255;
  const char *v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  __int128 v259;
  unsigned __int8 v260;
  _BYTE object[64];
  char v262;
  std::string v263;
  char *v264;
  std::__shared_weak_count *v265;
  _BYTE __dst[24];
  __int128 v267;
  uint64_t v268;

  v4 = (void **)a2;
  v5 = a1;
  v268 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_QWORD *)__p = &__p[8];
    v6 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
    {
      v8 = 0;
      v9 = (_QWORD *)(a1 + 16);
      while (1)
      {
        v11 = (uint64_t *)*v9;
        if (*v9)
        {
          v12 = v9;
          do
          {
            v13 = *((unsigned __int8 *)v11 + 28);
            v14 = *v6;
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 29);
            v14 = v6[1];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 30);
            v14 = v6[2];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 31);
            v14 = v6[3];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 32);
            v14 = v6[4];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 33);
            v14 = v6[5];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 34);
            v14 = v6[6];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 35);
            v14 = v6[7];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 36);
            v14 = v6[8];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 37);
            v14 = v6[9];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 38);
            v14 = v6[10];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 39);
            v14 = v6[11];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 40);
            v14 = v6[12];
            if (v13 != v14)
              goto LABEL_26;
            v13 = *((unsigned __int8 *)v11 + 41);
            v14 = v6[13];
            if (v13 == v14
              && (v13 = *((unsigned __int8 *)v11 + 42), v14 = v6[14], v13 == v14)
              && (v13 = *((unsigned __int8 *)v11 + 43), v14 = v6[15], v13 == v14))
            {
              v12 = v11;
            }
            else
            {
LABEL_26:
              if (v13 < v14)
                ++v11;
              else
                v12 = v11;
            }
            v11 = (uint64_t *)*v11;
          }
          while (v11);
          if (v12 != v9 && ((char)sub_22319835C(v6, (unsigned __int8 *)v12 + 28) & 0x80000000) == 0)
          {
            v15 = (_QWORD *)v12[1];
            v16 = v12;
            if (v15)
            {
              do
              {
                v17 = v15;
                v15 = (_QWORD *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v17 = (_QWORD *)v16[2];
                v161 = *v17 == (_QWORD)v16;
                v16 = v17;
              }
              while (!v161);
            }
            v18 = *((_DWORD *)v12 + 11);
            v19 = (uint64_t *)*((_QWORD *)v6 + 2);
            v20 = *v19;
            v21 = v19[1];
            if (*(_QWORD **)(v5 + 8) == v12)
              *(_QWORD *)(v5 + 8) = v17;
            v22 = *(uint64_t **)(v5 + 16);
            --*(_QWORD *)(v5 + 24);
            sub_2231AFE60(v22, v12);
            operator delete(v12);
            if (!v18 && v20 == v21)
              goto LABEL_6;
            if (v18)
            {
              v23 = v7;
              v24 = *(_BYTE **)&__p[8];
              v25 = (void **)&__p[8];
              v26 = (void **)&__p[8];
              if (!*(_QWORD *)&__p[8])
                goto LABEL_66;
              v25 = (void **)&__p[8];
              while (1)
              {
                while (1)
                {
                  v26 = (void **)v24;
                  v27 = v24 + 28;
                  v28 = v24[28];
                  v29 = *v6;
                  if (v29 == v28)
                  {
                    v29 = v6[1];
                    v28 = *((unsigned __int8 *)v26 + 29);
                    if (v29 == v28)
                    {
                      v29 = v6[2];
                      v28 = *((unsigned __int8 *)v26 + 30);
                      if (v29 == v28)
                      {
                        v29 = v6[3];
                        v28 = *((unsigned __int8 *)v26 + 31);
                        if (v29 == v28)
                        {
                          v29 = v6[4];
                          v28 = *((unsigned __int8 *)v26 + 32);
                          if (v29 == v28)
                          {
                            v29 = v6[5];
                            v28 = *((unsigned __int8 *)v26 + 33);
                            if (v29 == v28)
                            {
                              v29 = v6[6];
                              v28 = *((unsigned __int8 *)v26 + 34);
                              if (v29 == v28)
                              {
                                v29 = v6[7];
                                v28 = *((unsigned __int8 *)v26 + 35);
                                if (v29 == v28)
                                {
                                  v29 = v6[8];
                                  v28 = *((unsigned __int8 *)v26 + 36);
                                  if (v29 == v28)
                                  {
                                    v29 = v6[9];
                                    v28 = *((unsigned __int8 *)v26 + 37);
                                    if (v29 == v28)
                                    {
                                      v29 = v6[10];
                                      v28 = *((unsigned __int8 *)v26 + 38);
                                      if (v29 == v28)
                                      {
                                        v29 = v6[11];
                                        v28 = *((unsigned __int8 *)v26 + 39);
                                        if (v29 == v28)
                                        {
                                          v29 = v6[12];
                                          v28 = *((unsigned __int8 *)v26 + 40);
                                          if (v29 == v28)
                                          {
                                            v29 = v6[13];
                                            v28 = *((unsigned __int8 *)v26 + 41);
                                            if (v29 == v28)
                                            {
                                              v29 = v6[14];
                                              v28 = *((unsigned __int8 *)v26 + 42);
                                              if (v29 == v28)
                                              {
                                                v29 = v6[15];
                                                v28 = *((unsigned __int8 *)v26 + 43);
                                                if (v29 == v28)
                                                  break;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (v29 >= v28)
                    break;
                  v24 = *v26;
                  v25 = v26;
                  if (!*v26)
                    goto LABEL_66;
                }
                if (((char)sub_22319835C(v27, v6) & 0x80000000) == 0)
                  break;
                v25 = v26 + 1;
                v24 = v26[1];
                if (!v24)
                  goto LABEL_66;
              }
              v30 = (char *)*v25;
              if (!*v25)
              {
LABEL_66:
                v30 = (char *)operator new(0x30uLL);
                *(_OWORD *)(v30 + 28) = *(_OWORD *)v6;
                *((_DWORD *)v30 + 11) = 0;
                *(_QWORD *)v30 = 0;
                *((_QWORD *)v30 + 1) = 0;
                *((_QWORD *)v30 + 2) = v26;
                *v25 = v30;
                v31 = (uint64_t *)v30;
                if (**(_QWORD **)__p)
                {
                  *(_QWORD *)__p = **(_QWORD **)__p;
                  v31 = (uint64_t *)*v25;
                }
                sub_2231A9A8C(*(uint64_t **)&__p[8], v31);
                ++*(_QWORD *)&__p[16];
              }
              *((_DWORD *)v30 + 11) = 1;
              v5 = a1;
              v7 = v23;
            }
          }
        }
        *(_OWORD *)&v263.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
        v32 = *((_QWORD *)v6 + 2);
        v33 = *((_QWORD *)v6 + 3);
        if (v33)
        {
          v34 = (unint64_t *)(v33 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        if (v6[96])
        {
          v36 = v6[32];
          *(_OWORD *)object = *(_OWORD *)(v6 + 33);
          v37 = *(_OWORD *)(v6 + 65);
          *(_OWORD *)&object[16] = *(_OWORD *)(v6 + 49);
          *(_OWORD *)&object[32] = v37;
          *(_OWORD *)&object[47] = *((_OWORD *)v6 + 5);
          v38 = 1;
        }
        else
        {
          v36 = 0;
          v38 = 0;
        }
        v39 = *a2;
        v40 = (uint64_t)&(*a2)[120 * v8];
        *(_OWORD *)v40 = *(_OWORD *)&v263.__r_.__value_.__l.__data_;
        v41 = *(std::__shared_weak_count **)(v40 + 24);
        *(_QWORD *)(v40 + 16) = v32;
        *(_QWORD *)(v40 + 24) = v33;
        if (!v41)
          goto LABEL_80;
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
          v44 = v8;
          v50 = &v39[120 * v8];
          v51 = v50[96];
          v46 = v50 + 96;
          v47 = v51;
          v49 = v46 - 64;
          if (v51 == v38)
          {
LABEL_81:
            if (v47)
            {
              *v49 = v36;
              *(_OWORD *)(v49 + 1) = *(_OWORD *)object;
              *(_OWORD *)(v49 + 17) = *(_OWORD *)&object[16];
              *(_OWORD *)(v49 + 33) = *(_OWORD *)&object[32];
              *((_OWORD *)v49 + 3) = *(_OWORD *)&object[47];
            }
            goto LABEL_5;
          }
        }
        else
        {
LABEL_80:
          v44 = v8;
          v45 = &v39[120 * v8];
          v48 = v45[96];
          v46 = v45 + 96;
          v47 = v48;
          v49 = v46 - 64;
          if (v48 == v38)
            goto LABEL_81;
        }
        if (v47)
        {
          *v46 = 0;
        }
        else
        {
          *v49 = v36;
          *(_OWORD *)(v49 + 1) = *(_OWORD *)object;
          *(_OWORD *)(v49 + 17) = *(_OWORD *)&object[16];
          *(_OWORD *)(v49 + 33) = *(_OWORD *)&object[32];
          *((_OWORD *)v49 + 3) = *(_OWORD *)&object[47];
          *v46 = 1;
        }
LABEL_5:
        ++v8;
        v10 = &v39[120 * v44];
        v10[100] = 0;
        *(_QWORD *)(v10 + 101) = *(_QWORD *)__dst;
        *(_QWORD *)(v10 + 108) = *(_QWORD *)&__dst[7];
        v10[116] = 0;
LABEL_6:
        v6 += 120;
        v4 = (void **)a2;
        if (v6 == v7)
        {
          v6 = *a2;
          v52 = a2[1];
          goto LABEL_88;
        }
      }
    }
    v8 = 0;
    v52 = *a2;
LABEL_88:
    v53 = 0xEEEEEEEEEEEEEEEFLL * ((v52 - v6) >> 3);
    v54 = v8 - v53;
    if (v8 <= v53)
    {
      if (v8 < v53)
      {
        v55 = &v6[120 * v8];
        while (v52 != v55)
        {
          v56 = (std::__shared_weak_count *)*((_QWORD *)v52 - 12);
          if (v56)
          {
            v57 = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v56->__on_zero_shared)(v56, v54);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v52 -= 120;
        }
        v4[1] = v55;
      }
    }
    else
    {
      sub_2234731F4(v4, v54);
    }
    v59 = (_QWORD *)(v5 + 8);
    v60 = *(_QWORD **)(v5 + 8);
    v61 = (_QWORD *)(v5 + 16);
    v62 = v5 + 16;
    if (v60 != (_QWORD *)(v5 + 16))
    {
      while (1)
      {
        if (!*((_DWORD *)v60 + 11))
          goto LABEL_155;
        v63 = (_OWORD *)((char *)v60 + 28);
        v64 = *(_BYTE **)&__p[8];
        v65 = (uint64_t **)&__p[8];
        v66 = &__p[8];
        if (*(_QWORD *)&__p[8])
        {
          v67 = *((unsigned __int8 *)v60 + 28);
          while (1)
          {
            v66 = v64;
            v68 = v64[28];
            v69 = v67 >= v68;
            if (v67 != v68)
              break;
            v70 = *((unsigned __int8 *)v60 + 29);
            v68 = v66[29];
            v69 = v70 >= v68;
            if (v70 != v68)
              goto LABEL_136;
            v70 = *((unsigned __int8 *)v60 + 30);
            v68 = v66[30];
            v69 = v70 >= v68;
            if (v70 != v68)
              goto LABEL_136;
            v70 = *((unsigned __int8 *)v60 + 31);
            v68 = v66[31];
            v69 = v70 >= v68;
            if (v70 != v68)
              goto LABEL_136;
            v70 = *((unsigned __int8 *)v60 + 32);
            v68 = v66[32];
            v69 = v70 >= v68;
            if (v70 == v68
              && (v70 = *((unsigned __int8 *)v60 + 33), v68 = v66[33], v69 = v70 >= v68, v70 == v68))
            {
              v71 = *((unsigned __int8 *)v60 + 34);
              v72 = v66[34];
              if (v71 != v72)
                goto LABEL_123;
              v71 = *((unsigned __int8 *)v60 + 35);
              v72 = v66[35];
              if (v71 != v72)
                goto LABEL_123;
              v71 = *((unsigned __int8 *)v60 + 36);
              v72 = v66[36];
              if (v71 != v72)
                goto LABEL_123;
              v71 = *((unsigned __int8 *)v60 + 37);
              v72 = v66[37];
              if (v71 != v72)
                goto LABEL_123;
              v71 = *((unsigned __int8 *)v60 + 38);
              v72 = v66[38];
              if (v71 != v72)
                goto LABEL_123;
              v71 = *((unsigned __int8 *)v60 + 39);
              v72 = v66[39];
              if (v71 != v72)
                goto LABEL_123;
              v71 = *((unsigned __int8 *)v60 + 40);
              v72 = v66[40];
              if (v71 != v72
                || (v71 = *((unsigned __int8 *)v60 + 41), v72 = v66[41], v71 != v72)
                || (v71 = *((unsigned __int8 *)v60 + 42), v72 = v66[42], v71 != v72)
                || (v71 = *((unsigned __int8 *)v60 + 43), v72 = v66[43], v71 != v72))
              {
LABEL_123:
                if (v71 < v72)
                  goto LABEL_106;
              }
              v68 = v66[34];
              v70 = *((unsigned __int8 *)v60 + 34);
              if (v68 == v70)
              {
                v68 = v66[35];
                v70 = *((unsigned __int8 *)v60 + 35);
                if (v68 == v70)
                {
                  v68 = v66[36];
                  v70 = *((unsigned __int8 *)v60 + 36);
                  if (v68 == v70)
                  {
                    v68 = v66[37];
                    v70 = *((unsigned __int8 *)v60 + 37);
                    if (v68 == v70)
                    {
                      v68 = v66[38];
                      v70 = *((unsigned __int8 *)v60 + 38);
                      if (v68 == v70)
                      {
                        v68 = v66[39];
                        v70 = *((unsigned __int8 *)v60 + 39);
                        if (v68 == v70)
                        {
                          v68 = v66[40];
                          v70 = *((unsigned __int8 *)v60 + 40);
                          if (v68 == v70)
                          {
                            v68 = v66[41];
                            v70 = *((unsigned __int8 *)v60 + 41);
                            if (v68 == v70)
                            {
                              v68 = v66[42];
                              v70 = *((unsigned __int8 *)v60 + 42);
                              if (v68 == v70)
                              {
                                v68 = v66[43];
                                v70 = *((unsigned __int8 *)v60 + 43);
                                if (v68 == v70)
                                {
LABEL_144:
                                  v73 = v66;
                                  goto LABEL_145;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_138:
              if (v68 >= v70)
                goto LABEL_144;
              v64 = (_BYTE *)*((_QWORD *)v66 + 1);
              if (!v64)
              {
                v65 = (uint64_t **)(v66 + 8);
                goto LABEL_141;
              }
            }
            else
            {
LABEL_136:
              if (v69)
                goto LABEL_138;
LABEL_106:
              v64 = *(_BYTE **)v66;
              v65 = (uint64_t **)v66;
              if (!*(_QWORD *)v66)
                goto LABEL_141;
            }
          }
          v70 = *((unsigned __int8 *)v60 + 28);
          goto LABEL_136;
        }
LABEL_141:
        v73 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v73 + 28) = *v63;
        *((_DWORD *)v73 + 11) = 0;
        *(_QWORD *)v73 = 0;
        *((_QWORD *)v73 + 1) = 0;
        *((_QWORD *)v73 + 2) = v66;
        *v65 = (uint64_t *)v73;
        v74 = (uint64_t *)v73;
        if (**(_QWORD **)__p)
        {
          *(_QWORD *)__p = **(_QWORD **)__p;
          v74 = *v65;
        }
        sub_2231A9A8C(*(uint64_t **)&__p[8], v74);
        ++*(_QWORD *)&__p[16];
LABEL_145:
        *((_DWORD *)v73 + 11) = 1;
        v75 = operator new(0x198uLL);
        v75[2] = 0;
        *v75 = &off_24EC1F0A0;
        v75[1] = 0;
        *(_QWORD *)object = sub_2241498F4((uint64_t)(v75 + 3), 0);
        *(_QWORD *)&object[8] = v75;
        v76 = (unsigned __int8 *)v4[1];
        if (v76 >= v4[2])
        {
          v80 = sub_22347343C((char **)v4, (_QWORD *)((char *)v60 + 28), object);
        }
        else
        {
          *(_OWORD *)v76 = *v63;
          v77 = *(_QWORD *)&object[8];
          *((_QWORD *)v76 + 2) = *(_QWORD *)object;
          *((_QWORD *)v76 + 3) = v77;
          if (v77)
          {
            v78 = (unint64_t *)(v77 + 8);
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          v76[32] = 0;
          v76[96] = 0;
          v76[100] = 0;
          v80 = (char *)(v76 + 120);
          v76[116] = 0;
        }
        v4[1] = v80;
        v81 = *(std::__shared_weak_count **)&object[8];
        if (!*(_QWORD *)&object[8])
          goto LABEL_155;
        v82 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
          v84 = (_QWORD *)v60[1];
          if (!v84)
          {
            do
            {
LABEL_159:
              v85 = (_QWORD *)v60[2];
              v161 = *v85 == (_QWORD)v60;
              v60 = v85;
            }
            while (!v161);
            goto LABEL_102;
          }
        }
        else
        {
LABEL_155:
          v84 = (_QWORD *)v60[1];
          if (!v84)
            goto LABEL_159;
        }
        do
        {
          v85 = v84;
          v84 = (_QWORD *)*v84;
        }
        while (v84);
LABEL_102:
        v60 = v85;
        if (v85 == v61)
        {
          v59 = (_QWORD *)(v5 + 8);
          v62 = *(_QWORD *)(v5 + 8);
          break;
        }
      }
    }
    v86 = *(_QWORD *)&__p[8];
    v5 = a1;
    v87 = *(_QWORD **)(a1 + 16);
    v88 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)__p;
    *(_QWORD *)(a1 + 16) = v86;
    *(_QWORD *)__p = v62;
    *(_QWORD *)&__p[8] = v87;
    v89 = *(_QWORD *)&__p[16];
    *(_QWORD *)(a1 + 24) = *(_QWORD *)&__p[16];
    *(_QWORD *)&__p[16] = v88;
    if (v89)
      v90 = (_QWORD *)(v86 + 16);
    else
      v90 = v59;
    *v90 = v61;
    v91 = v87 + 2;
    if (!v88)
      v91 = __p;
    *v91 = &__p[8];
    *(_BYTE *)a1 = 0;
    sub_223198030((uint64_t)__p, v87);
  }
  v93 = (unsigned __int8 *)*v4;
  v92 = (unsigned __int8 *)v4[1];
  if (*v4 != v92)
  {
    v94 = 0;
    v95 = (unsigned __int8 **)(v5 + 16);
    while (1)
    {
      v96 = *v95;
      if (!*v95)
        goto LABEL_200;
      v97 = v95;
      do
      {
        v98 = v96[28];
        v99 = *v93;
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[29];
        v99 = v93[1];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[30];
        v99 = v93[2];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[31];
        v99 = v93[3];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[32];
        v99 = v93[4];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[33];
        v99 = v93[5];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[34];
        v99 = v93[6];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[35];
        v99 = v93[7];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[36];
        v99 = v93[8];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[37];
        v99 = v93[9];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[38];
        v99 = v93[10];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[39];
        v99 = v93[11];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[40];
        v99 = v93[12];
        if (v98 != v99)
          goto LABEL_192;
        v98 = v96[41];
        v99 = v93[13];
        if (v98 == v99 && (v98 = v96[42], v99 = v93[14], v98 == v99) && (v98 = v96[43], v99 = v93[15], v98 == v99))
        {
          v97 = (unsigned __int8 **)v96;
        }
        else
        {
LABEL_192:
          if (v98 < v99)
            v96 += 8;
          else
            v97 = (unsigned __int8 **)v96;
        }
        v96 = *(unsigned __int8 **)v96;
      }
      while (v96);
      if (v97 == v95 || (char)sub_22319835C(v93, (unsigned __int8 *)v97 + 28) < 0)
      {
LABEL_200:
        v103 = 0;
        v102 = 0;
        v104 = (_QWORD *)*((_QWORD *)v93 + 2);
        v101 = *v104 == v104[1];
        v97 = v95;
        if (v101 != (v104[14] == v104[15]))
        {
LABEL_201:
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/ChunkManager.cpp", 96, (uint64_t)"(mesh_ptr->faces.empty() == mesh_ptr->vertices.empty())", 55, (uint64_t)"For meshes with zero faces, vertices should be also zero and vice versa", 71, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
      }
      else
      {
        v100 = (_QWORD *)*((_QWORD *)v93 + 2);
        v101 = *v100 == v100[1];
        v102 = *((_DWORD *)v97 + 11) != 0;
        v103 = 1;
        if (v101 != (v100[14] == v100[15]))
          goto LABEL_201;
      }
      if (!v101 || v102)
      {
        v259 = *(_OWORD *)(v93 + 100);
        v260 = v93[116];
        *(_OWORD *)&v263.__r_.__value_.__l.__data_ = *(_OWORD *)v93;
        v105 = *((_QWORD *)v93 + 2);
        v106 = *((_QWORD *)v93 + 3);
        if (v106)
        {
          v107 = (unint64_t *)(v106 + 8);
          do
            v108 = __ldxr(v107);
          while (__stxr(v108 + 1, v107));
        }
        v109 = v92;
        if (v93[96])
        {
          v110 = v93[32];
          *(_OWORD *)object = *(_OWORD *)(v93 + 33);
          v111 = *(_OWORD *)(v93 + 65);
          *(_OWORD *)&object[16] = *(_OWORD *)(v93 + 49);
          *(_OWORD *)&object[32] = v111;
          *(_OWORD *)&object[47] = *((_OWORD *)v93 + 5);
          v112 = 1;
        }
        else
        {
          v110 = 0;
          v112 = 0;
        }
        *(_OWORD *)&__p[3] = v259;
        __p[19] = v260;
        v113 = (char *)*v4;
        v114 = &v113[120 * v94];
        *(_OWORD *)v114 = *(_OWORD *)&v263.__r_.__value_.__l.__data_;
        v115 = (std::__shared_weak_count *)*((_QWORD *)v114 + 3);
        *((_QWORD *)v114 + 2) = v105;
        *((_QWORD *)v114 + 3) = v106;
        if (v115)
        {
          v116 = (unint64_t *)&v115->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        v118 = v94;
        v119 = &v113[120 * v94];
        v122 = v119[96];
        v120 = v119 + 96;
        v121 = v122;
        v123 = v120 - 64;
        if (v122 == v112)
        {
          if (v121)
          {
            *v123 = v110;
            *(_OWORD *)(v120 - 63) = *(_OWORD *)object;
            *(_OWORD *)(v120 - 47) = *(_OWORD *)&object[16];
            *(_OWORD *)(v120 - 31) = *(_OWORD *)&object[32];
            *((_OWORD *)v120 - 1) = *(_OWORD *)&object[47];
          }
        }
        else if (v121)
        {
          *v120 = 0;
        }
        else
        {
          *v123 = v110;
          *(_OWORD *)(v120 - 63) = *(_OWORD *)object;
          *(_OWORD *)(v120 - 47) = *(_OWORD *)&object[16];
          *(_OWORD *)(v120 - 31) = *(_OWORD *)&object[32];
          *((_OWORD *)v120 - 1) = *(_OWORD *)&object[47];
          *v120 = 1;
        }
        ++v94;
        v124 = &v113[120 * v118];
        *(_OWORD *)(v124 + 100) = *(_OWORD *)&__p[3];
        v124[116] = __p[19];
        v4 = (void **)a2;
        v92 = v109;
      }
      if ((v103 & 1) == 0)
      {
        v125 = (uint64_t *)*v95;
        v126 = (uint64_t **)v95;
        v127 = (uint64_t **)v95;
        if (*v95)
        {
          v128 = *v93;
          while (1)
          {
            while (1)
            {
              v127 = (uint64_t **)v125;
              v129 = *((unsigned __int8 *)v125 + 28);
              v130 = v128 >= v129;
              if (v128 == v129)
                break;
              v131 = *v93;
LABEL_258:
              if (v130)
                goto LABEL_260;
LABEL_224:
              v125 = *v127;
              v126 = v127;
              if (!*v127)
                goto LABEL_263;
            }
            v131 = v93[1];
            v129 = *((unsigned __int8 *)v127 + 29);
            v130 = v131 >= v129;
            if (v131 != v129)
              goto LABEL_258;
            v132 = v93[2];
            v133 = *((unsigned __int8 *)v127 + 30);
            if (v132 != v133)
              goto LABEL_241;
            v132 = v93[3];
            v133 = *((unsigned __int8 *)v127 + 31);
            if (v132 != v133)
              goto LABEL_241;
            v132 = v93[4];
            v133 = *((unsigned __int8 *)v127 + 32);
            if (v132 != v133)
              goto LABEL_241;
            v132 = v93[5];
            v133 = *((unsigned __int8 *)v127 + 33);
            if (v132 != v133)
              goto LABEL_241;
            v132 = v93[6];
            v133 = *((unsigned __int8 *)v127 + 34);
            if (v132 != v133)
              goto LABEL_241;
            v132 = v93[7];
            v133 = *((unsigned __int8 *)v127 + 35);
            if (v132 != v133)
              goto LABEL_241;
            v132 = v93[8];
            v133 = *((unsigned __int8 *)v127 + 36);
            if (v132 != v133)
              goto LABEL_241;
            v132 = v93[9];
            v133 = *((unsigned __int8 *)v127 + 37);
            if (v132 != v133)
              goto LABEL_241;
            v132 = v93[10];
            v133 = *((unsigned __int8 *)v127 + 38);
            if (v132 != v133)
              goto LABEL_241;
            v132 = v93[11];
            v133 = *((unsigned __int8 *)v127 + 39);
            if (v132 != v133)
              goto LABEL_241;
            v132 = v93[12];
            v133 = *((unsigned __int8 *)v127 + 40);
            if (v132 != v133
              || (v132 = v93[13], v133 = *((unsigned __int8 *)v127 + 41), v132 != v133)
              || (v132 = v93[14], v133 = *((unsigned __int8 *)v127 + 42), v132 != v133)
              || (v132 = v93[15], v133 = *((unsigned __int8 *)v127 + 43), v132 != v133))
            {
LABEL_241:
              if (v132 < v133)
                goto LABEL_224;
            }
            v129 = *((unsigned __int8 *)v127 + 30);
            v131 = v93[2];
            if (v129 == v131)
            {
              v129 = *((unsigned __int8 *)v127 + 31);
              v131 = v93[3];
              if (v129 == v131)
              {
                v129 = *((unsigned __int8 *)v127 + 32);
                v131 = v93[4];
                if (v129 == v131)
                {
                  v129 = *((unsigned __int8 *)v127 + 33);
                  v131 = v93[5];
                  if (v129 == v131)
                  {
                    v129 = *((unsigned __int8 *)v127 + 34);
                    v131 = v93[6];
                    if (v129 == v131)
                    {
                      v129 = *((unsigned __int8 *)v127 + 35);
                      v131 = v93[7];
                      if (v129 == v131)
                      {
                        v129 = *((unsigned __int8 *)v127 + 36);
                        v131 = v93[8];
                        if (v129 == v131)
                        {
                          v129 = *((unsigned __int8 *)v127 + 37);
                          v131 = v93[9];
                          if (v129 == v131)
                          {
                            v129 = *((unsigned __int8 *)v127 + 38);
                            v131 = v93[10];
                            if (v129 == v131)
                            {
                              v129 = *((unsigned __int8 *)v127 + 39);
                              v131 = v93[11];
                              if (v129 == v131)
                              {
                                v129 = *((unsigned __int8 *)v127 + 40);
                                v131 = v93[12];
                                if (v129 == v131)
                                {
                                  v129 = *((unsigned __int8 *)v127 + 41);
                                  v131 = v93[13];
                                  if (v129 == v131)
                                  {
                                    v129 = *((unsigned __int8 *)v127 + 42);
                                    v131 = v93[14];
                                    if (v129 == v131)
                                    {
                                      v129 = *((unsigned __int8 *)v127 + 43);
                                      v131 = v93[15];
                                      if (v129 == v131)
                                      {
LABEL_265:
                                        v97 = (unsigned __int8 **)v127;
                                        goto LABEL_172;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_260:
            if (v129 >= v131)
              goto LABEL_265;
            v125 = v127[1];
            if (!v125)
            {
              v126 = v127 + 1;
              break;
            }
          }
        }
LABEL_263:
        v97 = (unsigned __int8 **)operator new(0x30uLL);
        *(_OWORD *)((char *)v97 + 28) = *(_OWORD *)v93;
        *((_DWORD *)v97 + 11) = 0;
        *v97 = 0;
        v97[1] = 0;
        v97[2] = (unsigned __int8 *)v127;
        *v126 = (uint64_t *)v97;
        v134 = **(_QWORD **)(a1 + 8);
        v135 = (uint64_t *)v97;
        if (v134)
        {
          *(_QWORD *)(a1 + 8) = v134;
          v135 = *v126;
        }
        sub_2231A9A8C(*(uint64_t **)(a1 + 16), v135);
        ++*(_QWORD *)(a1 + 24);
      }
LABEL_172:
      *((_DWORD *)v97 + 11) = -1431655765 * ((*(_QWORD *)(*((_QWORD *)v93 + 2) + 8) - **((_QWORD **)v93 + 2)) >> 2);
      v93 += 120;
      if (v93 == v92)
      {
        v93 = (unsigned __int8 *)*v4;
        v136 = (unsigned __int8 *)v4[1];
        v5 = a1;
        goto LABEL_268;
      }
    }
  }
  v94 = 0;
  v136 = (unsigned __int8 *)*v4;
LABEL_268:
  v137 = 0xEEEEEEEEEEEEEEEFLL * ((v136 - v93) >> 3);
  v138 = v94 - v137;
  if (v94 <= v137)
  {
    if (v94 < v137)
    {
      v139 = &v93[120 * v94];
      while (v136 != v139)
      {
        v140 = (std::__shared_weak_count *)*((_QWORD *)v136 - 12);
        if (v140)
        {
          v141 = (unint64_t *)&v140->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v140->__on_zero_shared)(v140, v138);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        v136 -= 120;
      }
      v4[1] = v139;
    }
  }
  else
  {
    sub_2234731F4(v4, v138);
    v5 = a1;
  }
  if (*(_BYTE *)(v5 + 56))
  {
    v143 = (unsigned __int8 *)*v4;
    v144 = (unsigned __int8 *)v4[1];
    if (*v4 != v144)
    {
      while (1)
      {
        *(_QWORD *)object = "cv3d.recon.";
        *(_QWORD *)&object[8] = 11;
        v145 = *(unsigned __int8 *)(a1 + 55);
        if ((v145 & 0x80u) == 0)
          v146 = a1 + 32;
        else
          v146 = *(_QWORD *)(a1 + 32);
        if ((v145 & 0x80u) != 0)
          v145 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)&object[16] = v146;
        *(_QWORD *)&object[24] = v145;
        sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v263);
        sub_224569D7C();
        sub_224569A80();
        if (!os_variant_has_internal_diagnostics())
          goto LABEL_303;
        v147 = sub_2241471F8();
        v148 = v147[2];
        if (!v148)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v148 = v147[2];
        }
        v149 = *(_QWORD *)(v148 + 64);
        v150 = (std::mutex *)(v149 + 32);
        std::mutex::lock((std::mutex *)(v149 + 32));
        v152 = *(_QWORD *)(v149 + 96);
        v151 = *(_QWORD *)(v149 + 104);
        std::mutex::unlock(v150);
        if (v152 == v151)
          goto LABEL_303;
        sub_2241471F8();
        v153 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v153 + 24))(v153))
          goto LABEL_303;
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        v154 = *((_QWORD *)v143 + 2);
        v253 = 0;
        sub_22319B83C((uint64_t)&v267, (uint64_t)__p, v143);
        if (v253 == -1)
          sub_22316DD70();
        *(_QWORD *)&v267 = &v251;
        ((void (*)(_BYTE *__return_ptr, __int128 *, _BYTE *))off_24EC37718[v253])(__dst, &v267, __p);
        if (v253 != -1)
          ((void (*)(__int128 *, _BYTE *))off_24EC37700[v253])(&v267, __p);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v153 + 24))(v153))
        {
          *(_OWORD *)__p = *(_OWORD *)__dst;
          *(_QWORD *)&__p[16] = *(_QWORD *)&__dst[16];
          memset(__dst, 0, sizeof(__dst));
          *(_QWORD *)&v267 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v267 + 1) = 2;
          v155 = sub_2241471F8();
          sub_22329D76C((uint64_t)v155, v153, v154, (uint64_t)__p, &v267);
          if ((__p[23] & 0x80000000) != 0)
            break;
        }
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_301;
LABEL_302:
        kdebug_trace();
LABEL_303:
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325624;
        kdebug_trace();
        size = HIBYTE(v263.__r_.__value_.__r.__words[2]);
        if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v263.__r_.__value_.__l.__size_;
        if (size >= 0x11)
        {
          v157 = &v263;
          if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v157 = (std::string *)v263.__r_.__value_.__r.__words[0];
          v158 = v157->__r_.__value_.__r.__words[0];
          v159 = v157->__r_.__value_.__l.__size_;
          v160 = v157->__r_.__value_.__s.__data_[16];
          v161 = v158 == 0x6365722E64337663 && v159 == 0x73746174532E6E6FLL;
          if (v161 && v160 == 46)
          {
            sub_223187510();
            v253 = 0;
            sub_22319B83C((uint64_t)&v267, (uint64_t)__p, v143);
            if (v253 == -1)
              sub_22316DD70();
            *(_QWORD *)&v267 = &v251;
            ((void (*)(_BYTE *__return_ptr, __int128 *, _BYTE *))off_24EC37718[v253])(__dst, &v267, __p);
            if (v253 != -1)
              ((void (*)(__int128 *, _BYTE *))off_24EC37700[v253])(&v267, __p);
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v263.__r_.__value_.__l.__data_);
        v143 += 120;
        if (v143 == v144)
          goto LABEL_325;
      }
      operator delete(*(void **)__p);
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_302;
LABEL_301:
      operator delete(*(void **)__dst);
      goto LABEL_302;
    }
  }
LABEL_325:
  v163 = atomic_load((unsigned __int8 *)&qword_2540CAEC8);
  if ((v163 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAEC8))
  {
    sub_22455F53C(__p);
    sub_223174DE4(object, "cv3d.recon.sng");
    sub_2232300E0((uint64_t **)__p, (uint64_t)object, &qword_2540CAEC0);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(&qword_2540CAEC8);
  }
  v251 = qword_2540CAEC0;
  if (**(int **)(qword_2540CAEC0 + 56) <= 3)
  {
    v164 = *(unsigned __int8 *)(qword_2540CAEC0 + 72);
    v165 = sub_22322F254(qword_2540CAEC0, "OSLogSurrogateAppender", 1, 0);
    v166 = v165;
    if (v164 || v165 != 0)
    {
      *(_QWORD *)__p = &v251;
      *(std::chrono::steady_clock::time_point *)&__p[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&__p[16] = std::chrono::system_clock::now();
      v253 = 3;
      v254 = "unknown file";
      v255 = 120;
      v257 = 0;
      v258 = 0;
      v256 = "unknown function";
      if (*(char *)(a3 + 23) >= 0)
        v168 = (const char *)a3;
      else
        v168 = *(const char **)a3;
      v250 = v168;
      v169 = **(_QWORD **)__p;
      if (*(char *)(**(_QWORD **)__p + 39) < 0)
      {
        v171 = *(const char **)(v169 + 16);
        v170 = *(_QWORD *)(v169 + 24);
      }
      else
      {
        v170 = *(unsigned __int8 *)(**(_QWORD **)__p + 39);
        v171 = (const char *)(**(_QWORD **)__p + 16);
      }
      v244 = **(_QWORD **)__p + 16;
      v172 = *a4;
      v173 = a1;
      v247 = *(_QWORD *)(a1 + 24);
      v174 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        v173 = a1;
      }
      if (byte_255788F57 >= 0)
        v175 = (const char *)&xmmword_255788F40;
      else
        v175 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v176 = byte_255788F57;
      else
        v176 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v175, v171);
      v177 = &object[8];
      if (v176 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v176 >= 0x17)
      {
        v179 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v176 | 7) != 0x17)
          v179 = v176 | 7;
        v180 = v179 + 1;
        v177 = operator new(v179 + 1);
        *(_QWORD *)&object[16] = v176;
        *(_QWORD *)&object[24] = v180 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v177;
        v178 = a1;
      }
      else
      {
        object[31] = v176;
        v178 = v173;
        if (!v176)
        {
LABEL_352:
          v177[v176] = 0;
          object[32] = 1;
          v181 = &object[40];
          if (v170 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v170 >= 0x17)
          {
            v184 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v170 | 7) != 0x17)
              v184 = v170 | 7;
            v185 = v184 + 1;
            v181 = operator new(v184 + 1);
            *(_QWORD *)&object[48] = v170;
            *(_QWORD *)&object[56] = v185 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v181;
          }
          else
          {
            object[63] = v170;
            if (!v170)
            {
              object[40] = 0;
              v262 = 1;
              v182 = *(NSObject **)object;
              if ((object[63] & 0x80000000) == 0)
                goto LABEL_356;
              goto LABEL_362;
            }
          }
          memmove(v181, v171, v170);
          v181[v170] = 0;
          v262 = 1;
          v182 = *(NSObject **)object;
          if ((object[63] & 0x80000000) == 0)
          {
LABEL_356:
            v183 = v250;
            if (!object[32])
              goto LABEL_365;
            goto LABEL_363;
          }
LABEL_362:
          operator delete(*(void **)&object[40]);
          v183 = v250;
          if (!object[32])
            goto LABEL_365;
LABEL_363:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
LABEL_365:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          v186 = (double)v172 / 1000000000.0;
          if (!v166 || !*(_QWORD *)(v166 + 24))
          {
            os_log_type_enabled(v182, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 136315650;
            *(_QWORD *)&object[4] = v183;
            *(_WORD *)&object[12] = 2048;
            *(double *)&object[14] = v186;
            *(_WORD *)&object[22] = 2048;
            *(_QWORD *)&object[24] = v247;
            v193 = (void *)_os_log_send_and_compose_impl();
            if (v193)
              free(v193);
            goto LABEL_438;
          }
          v187 = _os_log_pack_size();
          v188 = operator new(v187, (std::align_val_t)8uLL);
          v189 = (_QWORD *)operator new();
          *v189 = &off_24EC1F7F0;
          v189[1] = 0;
          v189[2] = 0;
          v189[3] = v188;
          v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
          v263.__r_.__value_.__l.__size_ = (std::string::size_type)v188;
          v264 = 0;
          v265 = 0;
          v263.__r_.__value_.__r.__words[2] = (std::string::size_type)v189;
          v190 = strlen(v183);
          if (v190 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v191 = v190;
          if (v190 >= 0x17)
          {
            v194 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v190 | 7) != 0x17)
              v194 = v190 | 7;
            v195 = v194 + 1;
            v192 = operator new(v194 + 1);
            *(_QWORD *)&__dst[8] = v191;
            *(_QWORD *)&__dst[16] = v195 | 0x8000000000000000;
            *(_QWORD *)__dst = v192;
          }
          else
          {
            __dst[23] = v190;
            v192 = __dst;
            if (!v190)
            {
LABEL_379:
              v196 = v164;
              v192[v191] = 0;
              v197 = *(_QWORD *)__dst;
              *(_QWORD *)&v267 = *(_QWORD *)&__dst[8];
              *(_QWORD *)((char *)&v267 + 7) = *(_QWORD *)&__dst[15];
              v198 = __dst[23];
              v199 = operator new(0x40uLL);
              v199[1] = 0;
              v199[2] = 0;
              v199[3] = off_24EC1F890;
              *v199 = &off_24EC1F840;
              v200 = v267;
              v199[4] = v197;
              v199[5] = v200;
              *(_QWORD *)((char *)v199 + 47) = *(_QWORD *)((char *)&v267 + 7);
              *((_BYTE *)v199 + 55) = v198;
              *(_QWORD *)&v267 = 0;
              *(_QWORD *)((char *)&v267 + 7) = 0;
              v201 = v265;
              v264 = (char *)(v199 + 3);
              v265 = (std::__shared_weak_count *)v199;
              if (v201)
              {
                v202 = (unint64_t *)&v201->__shared_owners_;
                do
                  v203 = __ldaxr(v202);
                while (__stlxr(v203 - 1, v202));
                if (!v203)
                {
                  ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                  std::__shared_weak_count::__release_weak(v201);
                }
              }
              *(std::string *)object = v263;
              v204 = v264;
              if (v263.__r_.__value_.__r.__words[2])
              {
                v205 = (unint64_t *)(v263.__r_.__value_.__r.__words[2] + 8);
                do
                  v206 = __ldxr(v205);
                while (__stxr(v206 + 1, v205));
              }
              v207 = v265;
              *(_QWORD *)&object[24] = v204;
              *(_QWORD *)&object[32] = v265;
              if (v265)
              {
                v208 = (unint64_t *)&v265->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
                *(_QWORD *)&object[40] = v204;
                do
                  v210 = __ldaxr(v208);
                while (__stlxr(v210 - 1, v208));
                if (!v210)
                {
                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                  std::__shared_weak_count::__release_weak(v207);
                }
              }
              else
              {
                *(_QWORD *)&object[40] = v204;
              }
              v211 = (std::__shared_weak_count *)v263.__r_.__value_.__r.__words[2];
              if (v263.__r_.__value_.__r.__words[2])
              {
                v212 = (unint64_t *)(v263.__r_.__value_.__r.__words[2] + 8);
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 - 1, v212));
                if (!v213)
                {
                  ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                  std::__shared_weak_count::__release_weak(v211);
                }
              }
              v214 = *(_QWORD *)object;
              if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                v215 = *(_QWORD *)&object[40] + 8;
              else
                v215 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
              v216 = _os_log_pack_fill();
              *(_DWORD *)v216 = 136315650;
              *(_QWORD *)(v216 + 4) = v215;
              *(_WORD *)(v216 + 12) = 2048;
              *(double *)(v216 + 14) = v186;
              *(_WORD *)(v216 + 22) = 2048;
              *(_QWORD *)(v216 + 24) = v247;
              v217 = operator new();
              v218 = *(unsigned __int8 *)(v169 + 39);
              v219 = v244;
              if ((v218 & 0x80u) != 0)
              {
                v219 = *(_QWORD *)(v169 + 16);
                v218 = *(_QWORD *)(v169 + 24);
              }
              *(_QWORD *)v217 = v214;
              *(_OWORD *)(v217 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v217 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v217 + 40) = v219;
              *(_QWORD *)(v217 + 48) = v218;
              *(_BYTE *)(v217 + 56) = 1;
              *(_QWORD *)__dst = 0;
              v263.__r_.__value_.__r.__words[0] = v217;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v166 + 24) + 40))(*(_QWORD *)(v166 + 24), &v263);
              v164 = v196;
              v220 = v263.__r_.__value_.__r.__words[0];
              v263.__r_.__value_.__r.__words[0] = 0;
              if (v220)
              {
                v221 = *(std::__shared_weak_count **)(v220 + 32);
                if (v221)
                {
                  v222 = (unint64_t *)&v221->__shared_owners_;
                  do
                    v223 = __ldaxr(v222);
                  while (__stlxr(v223 - 1, v222));
                  if (!v223)
                  {
                    ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                    std::__shared_weak_count::__release_weak(v221);
                  }
                }
                v224 = *(std::__shared_weak_count **)(v220 + 16);
                if (v224)
                {
                  v225 = (unint64_t *)&v224->__shared_owners_;
                  do
                    v226 = __ldaxr(v225);
                  while (__stlxr(v226 - 1, v225));
                  if (!v226)
                  {
                    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                    std::__shared_weak_count::__release_weak(v224);
                  }
                }
                MEMORY[0x227684CE8](v220, 0x10F0C40B62ED6C6);
                v227 = *(_QWORD *)__dst;
                *(_QWORD *)__dst = 0;
                if (v227)
                {
                  v228 = *(std::__shared_weak_count **)(v227 + 32);
                  if (v228)
                  {
                    v229 = (unint64_t *)&v228->__shared_owners_;
                    do
                      v230 = __ldaxr(v229);
                    while (__stlxr(v230 - 1, v229));
                    if (!v230)
                    {
                      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                      std::__shared_weak_count::__release_weak(v228);
                    }
                  }
                  v231 = *(std::__shared_weak_count **)(v227 + 16);
                  if (v231)
                  {
                    v232 = (unint64_t *)&v231->__shared_owners_;
                    do
                      v233 = __ldaxr(v232);
                    while (__stlxr(v233 - 1, v232));
                    if (!v233)
                    {
                      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                      std::__shared_weak_count::__release_weak(v231);
                    }
                  }
                  MEMORY[0x227684CE8](v227, 0x10F0C40B62ED6C6);
                }
              }
              v234 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v235 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v236 = __ldaxr(v235);
                while (__stlxr(v236 - 1, v235));
                if (!v236)
                {
                  ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                  std::__shared_weak_count::__release_weak(v234);
                }
              }
              v237 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v238 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v239 = __ldaxr(v238);
                while (__stlxr(v239 - 1, v238));
                if (!v239)
                {
                  ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                  std::__shared_weak_count::__release_weak(v237);
                }
              }
LABEL_438:
              if (v164)
              {
                if (*(char *)(a3 + 23) >= 0)
                  v240 = (const char *)a3;
                else
                  v240 = *(const char **)a3;
                sub_22322C138((uint64_t)__p, "VLM:MEM %s %f GCH %ld", v240, (double)*a4 / 1000000000.0, *(_QWORD *)(v178 + 24));
                sub_223182C08((uint64_t)__p);
              }
              sub_223182C08((uint64_t)__p);
              v241 = v258;
              if (v258)
              {
                v242 = (unint64_t *)&v258->__shared_owners_;
                do
                  v243 = __ldaxr(v242);
                while (__stlxr(v243 - 1, v242));
                if (!v243)
                {
                  ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                  std::__shared_weak_count::__release_weak(v241);
                }
              }
              return;
            }
          }
          memcpy(v192, v183, v191);
          goto LABEL_379;
        }
      }
      memmove(v177, v175, v176);
      goto LABEL_352;
    }
  }
}

void sub_223472DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a39)
  {
    if (a38 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_223472E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAEC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAEC8);
  _Unwind_Resume(a1);
}

void sub_223472E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_22319A054((uint64_t *)(v33 - 208));
  sub_22319A054((uint64_t *)(v33 - 160));
  sub_223199DE8((uint64_t)&a33);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_223472EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_223199DE8((uint64_t)&a33);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_223472EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;
  int v20;
  uint64_t v21;

  if (v20 < 0)
  {
    operator delete(v19);
    sub_223199DE8(v21 - 208);
    sub_223182DAC((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_223199DE8(v21 - 208);
  sub_223182DAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_223472F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223472F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223472F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *object,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223473118(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)&v9 = (uint64_t)(*a1 * 1000000000.0);
    *((_QWORD *)&v9 + 1) = 2;
    v8 = sub_2241471F8();
    sub_22329D76C((uint64_t)v8, a2, a3, (uint64_t)__p, &v9);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
}

void sub_2234731D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2234731F4(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  v4 = a1[1];
  v5 = a1[2];
  if (0xEEEEEEEEEEEEEEEFLL * ((v5 - (_BYTE *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[15 * a2];
      v12 = 120 * a2;
      do
      {
        v4[14] = 0;
        *((_OWORD *)v4 + 5) = 0uLL;
        *((_OWORD *)v4 + 6) = 0uLL;
        *((_OWORD *)v4 + 3) = 0uLL;
        *((_OWORD *)v4 + 4) = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *(_OWORD *)v4 = 0uLL;
        v4 += 15;
        v12 -= 120;
      }
      while (v12);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v4 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x222222222222222)
      sub_22316E078();
    v8 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x111111111111111)
      v9 = 0x222222222222222;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x222222222222222)
        sub_223174E94();
      v10 = (char *)operator new(120 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[120 * v6];
    v14 = 120 * a2;
    v15 = &v13[120 * a2];
    v16 = v13;
    do
    {
      *((_QWORD *)v16 + 14) = 0;
      *((_OWORD *)v16 + 5) = 0uLL;
      *((_OWORD *)v16 + 6) = 0uLL;
      *((_OWORD *)v16 + 3) = 0uLL;
      *((_OWORD *)v16 + 4) = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((_OWORD *)v16 + 2) = 0uLL;
      *(_OWORD *)v16 = 0uLL;
      v16 += 120;
      v14 -= 120;
    }
    while (v14);
    v17 = &v10[120 * v9];
    v18 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
    }
    else
    {
      v20 = 0;
      do
      {
        v22 = &v13[v20];
        v23 = &v19[v20];
        *(_OWORD *)(v22 - 120) = *(_OWORD *)&v19[v20 - 120];
        *(_OWORD *)(v22 - 104) = *(_OWORD *)&v19[v20 - 104];
        *((_QWORD *)v23 - 13) = 0;
        *((_QWORD *)v23 - 12) = 0;
        v13[v20 - 88] = 0;
        *(v22 - 24) = 0;
        if (v19[v20 - 24])
        {
          v24 = *(_OWORD *)(v23 - 88);
          v25 = *(_OWORD *)(v23 - 72);
          v26 = *(_OWORD *)(v23 - 40);
          *(_OWORD *)&v13[v20 - 56] = *(_OWORD *)(v23 - 56);
          *(_OWORD *)&v13[v20 - 40] = v26;
          *(_OWORD *)&v13[v20 - 88] = v24;
          *(_OWORD *)&v13[v20 - 72] = v25;
          *(v22 - 24) = 1;
        }
        v21 = *(_OWORD *)(v23 - 20);
        *(v22 - 4) = *(v23 - 4);
        *(_OWORD *)(v22 - 20) = v21;
        v20 -= 120;
      }
      while (&v19[v20] != v18);
      v19 = (char *)*a1;
      v27 = (char *)a1[1];
      *a1 = &v13[v20];
      a1[1] = v15;
      a1[2] = v17;
      while (v27 != v19)
      {
        v28 = (std::__shared_weak_count *)*((_QWORD *)v27 - 12);
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v27 -= 120;
      }
    }
    if (v19)
      operator delete(v19);
  }
}

char *sub_22347343C(char **a1, _OWORD *a2, _QWORD *a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x222222222222222)
    sub_22316E078();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - v4) >> 3) > v7)
    v7 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - v4) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v4) >> 3) >= 0x111111111111111)
    v10 = 0x222222222222222;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0x222222222222222)
      sub_223174E94();
    v11 = (char *)operator new(120 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[120 * v6];
  *(_OWORD *)v12 = *a2;
  v13 = a3[1];
  *((_QWORD *)v12 + 2) = *a3;
  *((_QWORD *)v12 + 3) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v4 = *a1;
    v5 = a1[1];
  }
  v16 = &v11[120 * v6];
  v16[32] = 0;
  v16[96] = 0;
  v17 = &v11[120 * v10];
  v16[100] = 0;
  v16[116] = 0;
  v18 = v12 + 120;
  if (v5 == v4)
  {
    *a1 = v12;
    a1[1] = v18;
    a1[2] = v17;
  }
  else
  {
    v19 = 0;
    do
    {
      v21 = &v12[v19];
      v22 = &v5[v19];
      *(_OWORD *)(v21 - 120) = *(_OWORD *)&v5[v19 - 120];
      *(_OWORD *)(v21 - 104) = *(_OWORD *)&v5[v19 - 104];
      *((_QWORD *)v22 - 13) = 0;
      *((_QWORD *)v22 - 12) = 0;
      v12[v19 - 88] = 0;
      *(v21 - 24) = 0;
      if (v5[v19 - 24])
      {
        v23 = *(_OWORD *)(v22 - 88);
        v24 = *(_OWORD *)(v22 - 72);
        v25 = *(_OWORD *)(v22 - 40);
        *(_OWORD *)&v12[v19 - 56] = *(_OWORD *)(v22 - 56);
        *(_OWORD *)&v12[v19 - 40] = v25;
        *(_OWORD *)&v12[v19 - 88] = v23;
        *(_OWORD *)&v12[v19 - 72] = v24;
        *(v21 - 24) = 1;
      }
      v20 = *(_OWORD *)(v22 - 20);
      *(v21 - 4) = *(v22 - 4);
      *(_OWORD *)(v21 - 20) = v20;
      v19 -= 120;
    }
    while (&v5[v19] != v4);
    v4 = *a1;
    v26 = a1[1];
    *a1 = &v12[v19];
    a1[1] = v18;
    a1[2] = v17;
    while (v26 != v4)
    {
      v27 = (std::__shared_weak_count *)*((_QWORD *)v26 - 12);
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v26 -= 120;
    }
  }
  if (v4)
    operator delete(v4);
  return v18;
}

uint64_t sub_22347364C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24EC37740;
  if (*(_BYTE *)(a1 + 216))
  {
    sub_223198030(a1 + 168, *(_QWORD **)(a1 + 176));
    sub_223475E64(a1 + 144, *(_QWORD **)(a1 + 152));
    sub_223475E64(a1 + 120, *(_QWORD **)(a1 + 128));
    sub_223198030(a1 + 96, *(_QWORD **)(a1 + 104));
    sub_223198030(a1 + 72, *(_QWORD **)(a1 + 80));
  }
  sub_223198030(a1 + 48, *(_QWORD **)(a1 + 56));
  sub_223198030(a1 + 24, *(_QWORD **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

uint64_t sub_2234736F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
    sub_223198030(a1 + 96, *(_QWORD **)(a1 + 104));
    sub_223475E64(a1 + 72, *(_QWORD **)(a1 + 80));
    sub_223475E64(a1 + 48, *(_QWORD **)(a1 + 56));
    sub_223198030(a1 + 24, *(_QWORD **)(a1 + 32));
    sub_223198030(a1, *(_QWORD **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_223473758(uint64_t a1)
{
  sub_223198030(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_223198030(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_223473794(uint64_t a1)
{
  sub_22347364C(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234737B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24EC37740;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  v4 = (uint64_t **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 560)
    && *(_BYTE *)(a2 + 880)
    && *(_BYTE *)(a2 + 976)
    && *(_BYTE *)(a2 + 497)
    && *(_BYTE *)(a2 + 272)
    && *(_BYTE *)(a2 + 524))
  {
    v6 = *a3;
    if (!*a3)
    {
      v10 = operator new();
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = off_24EC63010;
      *(_QWORD *)(v10 + 8) = v10 + 16;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 80) = 0u;
      *(_OWORD *)(v10 + 96) = 0u;
      v11 = *(_QWORD *)(a2 + 524);
      *(_QWORD *)(v10 + 112) = 0;
      *(_QWORD *)(v10 + 120) = v11;
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v10;
      if (!v7)
        goto LABEL_10;
      goto LABEL_9;
    }
    *a3 = 0;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    if (v7)
LABEL_9:
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
LABEL_10:
  v8 = *(_BYTE **)(a1 + 8);
  if (!v8[560] || !v8[880] || !v8[976] || !v8[497] || !v8[272] || !v8[524])
  {
    if (v8[328])
    {
      v12 = xmmword_2245F6D10;
      sub_223C05D34(v4, (unsigned __int8 *)&v12, 0);
    }
  }
  return a1;
}

void sub_223473960(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_2234736F4(v3);
  sub_223473758(v2);
  v5 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  _Unwind_Resume(a1);
}

void sub_223473998(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  char v31;
  void *__p;
  char *v33;
  unint64_t v34;

  sub_223473C18((uint64_t)a1);
  if (*(_BYTE *)(a2 + 2504))
    v6 = *(_BYTE *)(a2 + 2512) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = a2 + 2368;
  if (*(_BYTE *)(a2 + 2512))
    v8 = *(unsigned __int8 *)(a2 + 2504);
  else
    v8 = 0;
  if (!*(_BYTE *)(a2 + 2312)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/ClusterIntegrator.cpp", 68, (uint64_t)"keyframe_engine_result.global_reference_system_result.has_value()", 65, (uint64_t)&unk_22458769B, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  __p = 0;
  v33 = 0;
  v34 = 0;
  v9 = *(_QWORD *)(a2 + 2200);
  v10 = *(_QWORD *)(a2 + 2208);
  while (v9 != v10)
  {
    if (sub_223C8F01C(*(unsigned __int8 *)(v9 + 240)) != 3)
    {
      v12 = v33;
      if ((unint64_t)v33 >= v34)
      {
        v11 = sub_22356EF88((char **)&__p, v9);
      }
      else
      {
        *(_OWORD *)v33 = *(_OWORD *)v9;
        *((_QWORD *)v12 + 2) = *(_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 24);
        *((_QWORD *)v12 + 3) = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = *(_OWORD *)(v9 + 32);
        v17 = *(_OWORD *)(v9 + 48);
        v18 = *(_OWORD *)(v9 + 80);
        *((_OWORD *)v12 + 4) = *(_OWORD *)(v9 + 64);
        *((_OWORD *)v12 + 5) = v18;
        *((_OWORD *)v12 + 2) = v16;
        *((_OWORD *)v12 + 3) = v17;
        *((_OWORD *)v12 + 6) = *(_OWORD *)(v9 + 96);
        v19 = *(_OWORD *)(v9 + 112);
        v20 = *(_OWORD *)(v9 + 128);
        v21 = *(_OWORD *)(v9 + 160);
        *((_OWORD *)v12 + 9) = *(_OWORD *)(v9 + 144);
        *((_OWORD *)v12 + 10) = v21;
        *((_OWORD *)v12 + 7) = v19;
        *((_OWORD *)v12 + 8) = v20;
        v22 = *(_OWORD *)(v9 + 176);
        v23 = *(_OWORD *)(v9 + 192);
        v24 = *(_OWORD *)(v9 + 224);
        *((_OWORD *)v12 + 13) = *(_OWORD *)(v9 + 208);
        *((_OWORD *)v12 + 14) = v24;
        *((_OWORD *)v12 + 11) = v22;
        *((_OWORD *)v12 + 12) = v23;
        *((_WORD *)v12 + 120) = *(_WORD *)(v9 + 240);
        v11 = v12 + 248;
      }
      v33 = v11;
    }
    v9 += 248;
  }
  v31 = *(_BYTE *)(a2 + 2192);
  (*(void (**)(_BYTE *, void **, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 16))(a1, &__p, a2 + 2520, v7, v8, &v31);
  if (!a1[216]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/ClusterIntegrator.cpp", 141, (uint64_t)"latest_cluster_result_.has_value()", 34, (uint64_t)"Cluster not initialized", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223475A00(a3, (uint64_t)(a1 + 72));
  v25 = (char *)__p;
  if (__p)
  {
    v26 = v33;
    v27 = __p;
    if (v33 != __p)
    {
      do
      {
        v28 = (std::__shared_weak_count *)*((_QWORD *)v26 - 28);
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v26 -= 248;
      }
      while (v26 != v25);
      v27 = __p;
    }
    v33 = v25;
    operator delete(v27);
  }
}

void sub_223473BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223473EA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_223473C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223473EA8((void **)va);
  _Unwind_Resume(a1);
}

void sub_223473C18(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 216))
  {
    v2 = (_QWORD *)(a1 + 80);
    sub_223198030(a1 + 72, *(_QWORD **)(a1 + 80));
    *(_QWORD *)(a1 + 72) = v2;
    *(_QWORD *)(a1 + 88) = 0;
    *v2 = 0;
    sub_223198030(a1 + 96, *(_QWORD **)(a1 + 104));
    *(_QWORD *)(a1 + 96) = a1 + 104;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD **)(a1 + 144);
    v4 = (_QWORD *)(a1 + 152);
    v17 = 0;
    v18 = 0;
    v16 = (uint64_t *)&v17;
    if (v3 != (_QWORD *)(a1 + 152))
    {
      do
      {
        v19 = *((_OWORD *)v3 + 2);
        v21 = 0;
        v22 = 0;
        v20 = &v21;
        sub_22347696C(&v16, (uint64_t *)&v17, (unsigned __int8 *)&v19, (uint64_t)&v19);
        sub_223198030((uint64_t)&v20, v21);
        v5 = (_QWORD *)v3[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v3[2];
            v7 = *v6 == (_QWORD)v3;
            v3 = v6;
          }
          while (!v7);
        }
        v3 = v6;
      }
      while (v6 != v4);
    }
    sub_223475E64(a1 + 144, *(_QWORD **)(a1 + 152));
    v8 = v17;
    *(_QWORD *)(a1 + 144) = v16;
    *(_QWORD *)(a1 + 152) = v8;
    v9 = v18;
    *(_QWORD *)(a1 + 160) = v18;
    if (v9)
    {
      v8[2] = v4;
      v16 = (uint64_t *)&v17;
      v17 = 0;
      v18 = 0;
      v8 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 144) = v4;
    }
    sub_223475E64((uint64_t)&v16, v8);
    v10 = *(_QWORD **)(a1 + 120);
    v11 = (_QWORD *)(a1 + 128);
    v17 = 0;
    v18 = 0;
    v16 = (uint64_t *)&v17;
    if (v10 != (_QWORD *)(a1 + 128))
    {
      do
      {
        v19 = *((_OWORD *)v10 + 2);
        v21 = 0;
        v22 = 0;
        v20 = &v21;
        sub_22347696C(&v16, (uint64_t *)&v17, (unsigned __int8 *)&v19, (uint64_t)&v19);
        sub_223198030((uint64_t)&v20, v21);
        v12 = (_QWORD *)v10[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v10[2];
            v7 = *v13 == (_QWORD)v10;
            v10 = v13;
          }
          while (!v7);
        }
        v10 = v13;
      }
      while (v13 != v11);
    }
    sub_223475E64(a1 + 120, *(_QWORD **)(a1 + 128));
    v14 = v17;
    *(_QWORD *)(a1 + 120) = v16;
    *(_QWORD *)(a1 + 128) = v14;
    v15 = v18;
    *(_QWORD *)(a1 + 136) = v18;
    if (v15)
    {
      v14[2] = v11;
      v16 = (uint64_t *)&v17;
      v17 = 0;
      v18 = 0;
      v14 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 120) = v11;
    }
    sub_223475E64((uint64_t)&v16, v14);
  }
}

void sub_223473E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v16;

  sub_223198030(v16, a16);
  sub_223475E64((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void **sub_223473EA8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 28);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 248;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223473F40(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  int v8;
  _BYTE *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  uint64_t *v39;
  unsigned __int8 v40;
  int v41;
  size_t v42;
  void **v43;
  char *v44;
  const void **v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  size_t v51;
  const char *v52;
  unsigned __int8 v53;
  const char *v54;
  size_t v55;
  _BYTE *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  size_t v65;
  std::__shared_weak_count_vtbl *v66;
  int v67;
  std::__shared_weak_count *v68;
  size_t v69;
  size_t v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  void *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  const char *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  _QWORD *v125;
  _QWORD **v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD **v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t **v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD **v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v150;
  int v152;
  char *__sa;
  unint64_t v156;
  _QWORD v157[3];
  int v158;
  const char *v159;
  int v160;
  const char *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void *__dst[2];
  int64_t v165;
  uint64_t v166;
  __int128 v167;
  std::__shared_weak_count *v168;
  char *v169;
  std::__shared_weak_count *v170;
  _QWORD *v171;
  __int128 v172;
  void *v173[2];
  __int128 v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  _QWORD *v181;
  void *__p;
  uint64_t v183;
  _QWORD *v184;
  char *v185;
  int v186;
  uint64_t v187;
  __int128 info;
  uint64_t v189;
  _QWORD **v190;
  _QWORD *v191[2];
  uint64_t *v192;
  _QWORD *v193[2];
  uint64_t *v194;
  _QWORD *v195[2];
  _QWORD **v196;
  _QWORD *v197[2];
  __int128 v198;
  char v199;
  _QWORD **v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD **v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t **v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t **v209;
  uint64_t *v210;
  uint64_t v211;
  _QWORD **v212;
  _QWORD *v213;
  uint64_t v214;
  __int128 v215;
  char v216;
  _BYTE v217[24];
  __int128 v218;
  void *v219[2];
  unint64_t v220;
  char v221;
  _QWORD v222[5];

  v222[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v8 = 0;
  v201 = 0;
  v200 = &v201;
  v205 = 0;
  v204 = 0;
  v202 = 0;
  v203 = &v204;
  v207 = 0;
  v206 = &v207;
  v211 = 0;
  v210 = 0;
  v208 = 0;
  v209 = &v210;
  v214 = 0;
  v213 = 0;
  v212 = &v213;
  LOBYTE(v215) = 0;
  v216 = 0;
  v9 = *(_BYTE **)(a1 + 8);
  if (v9[560])
  {
    if (v9[880])
    {
      if (v9[976])
      {
        v8 = 0;
        if (v9[497])
        {
          if (v9[272])
          {
            if (v9[524])
            {
              if (!v9[416])
                goto LABEL_150;
              v8 = 1;
              goto LABEL_9;
            }
            v8 = 0;
            v10 = *a2;
            v11 = a2[1];
            if (*a2 == v11)
              goto LABEL_149;
            while (1)
            {
LABEL_14:
              if ((sub_223C8F01C(v10[240]) & 6) != 4)
                goto LABEL_82;
              v12 = v207;
              v13 = &v207;
              v14 = &v207;
              if (v207)
                break;
LABEL_78:
              v24 = (char *)operator new(0x48uLL);
              *((_OWORD *)v24 + 2) = xmmword_2245F6D10;
              *((_QWORD *)v24 + 8) = 0;
              *((_QWORD *)v24 + 7) = 0;
              *((_QWORD *)v24 + 6) = v24 + 56;
              *(_QWORD *)v24 = 0;
              *((_QWORD *)v24 + 1) = 0;
              *((_QWORD *)v24 + 2) = v14;
              *v13 = (uint64_t *)v24;
              v25 = (uint64_t *)v24;
              if (*v206)
              {
                v206 = (uint64_t **)*v206;
                v25 = *v13;
              }
              sub_2231A9A8C(v207, v25);
              ++v208;
LABEL_81:
              sub_2231A9984((uint64_t **)v24 + 6, v10, v10);
LABEL_82:
              if (sub_223C8F01C(v10[240]) <= 3)
              {
                v26 = v210;
                v27 = &v210;
                v28 = &v210;
                if (!v210)
                {
LABEL_146:
                  v38 = (char *)operator new(0x48uLL);
                  *((_OWORD *)v38 + 2) = xmmword_2245F6D10;
                  *((_QWORD *)v38 + 8) = 0;
                  *((_QWORD *)v38 + 7) = 0;
                  *((_QWORD *)v38 + 6) = v38 + 56;
                  *(_QWORD *)v38 = 0;
                  *((_QWORD *)v38 + 1) = 0;
                  *((_QWORD *)v38 + 2) = v28;
                  *v27 = (uint64_t *)v38;
                  v39 = (uint64_t *)v38;
                  if (*v209)
                  {
                    v209 = (uint64_t **)*v209;
                    v39 = *v27;
                  }
                  sub_2231A9A8C(v210, v39);
                  ++v211;
LABEL_12:
                  sub_2231A9984((uint64_t **)v38 + 6, v10, v10);
                  goto LABEL_13;
                }
                while (1)
                {
                  v28 = (uint64_t **)v26;
                  v29 = *((unsigned __int8 *)v26 + 32);
                  if (v29 != 37)
                    break;
                  v30 = *((unsigned __int8 *)v28 + 33);
                  v31 = v30 > 0xCC;
                  if (v30 != 204
                    || (v32 = *((unsigned __int8 *)v28 + 34), v31 = v32 > 0x7B, v32 != 123)
                    || (v33 = *((unsigned __int8 *)v28 + 35), v31 = v33 > 0xBD, v33 != 189))
                  {
                    if (!v31)
                      goto LABEL_106;
                    goto LABEL_85;
                  }
                  v34 = *((unsigned __int8 *)v28 + 36);
                  if (v34 == 78)
                  {
                    v34 = *((unsigned __int8 *)v28 + 37);
                    if (v34 == 91)
                    {
                      v34 = *((unsigned __int8 *)v28 + 38);
                      if (v34 == 143)
                      {
                        v34 = *((unsigned __int8 *)v28 + 39);
                        if (v34 == 12)
                        {
                          v34 = *((unsigned __int8 *)v28 + 40);
                          if (v34 == 236)
                          {
                            v34 = *((unsigned __int8 *)v28 + 41);
                            if (v34 == 50)
                            {
                              v34 = *((unsigned __int8 *)v28 + 42);
                              if (v34 == 162)
                              {
                                v34 = *((unsigned __int8 *)v28 + 43);
                                if (v34 == 209)
                                {
                                  v34 = *((unsigned __int8 *)v28 + 44);
                                  if (v34 == 99)
                                  {
                                    v34 = *((unsigned __int8 *)v28 + 45);
                                    if (v34 == 215)
                                    {
                                      v34 = *((unsigned __int8 *)v28 + 46);
                                      if (v34 == 6)
                                      {
                                        v34 = *((unsigned __int8 *)v28 + 47);
                                        if (v34 == 182)
                                          goto LABEL_120;
                                        v35 = 182;
                                      }
                                      else
                                      {
                                        v35 = 6;
                                      }
                                    }
                                    else
                                    {
                                      v35 = 215;
                                    }
                                  }
                                  else
                                  {
                                    v35 = 99;
                                  }
                                }
                                else
                                {
                                  v35 = 209;
                                }
                              }
                              else
                              {
                                v35 = 162;
                              }
                            }
                            else
                            {
                              v35 = 50;
                            }
                          }
                          else
                          {
                            v35 = 236;
                          }
                        }
                        else
                        {
                          v35 = 12;
                        }
                      }
                      else
                      {
                        v35 = 143;
                      }
                    }
                    else
                    {
                      v35 = 91;
                    }
                  }
                  else
                  {
                    v35 = 78;
                  }
                  if (v35 < v34)
                  {
LABEL_85:
                    v26 = *v28;
                    v27 = v28;
                    if (!*v28)
                      goto LABEL_146;
                  }
                  else
                  {
LABEL_120:
                    v36 = *((unsigned __int8 *)v28 + 36);
                    if (v36 == 78)
                    {
                      v36 = *((unsigned __int8 *)v28 + 37);
                      if (v36 == 91)
                      {
                        v36 = *((unsigned __int8 *)v28 + 38);
                        if (v36 == 143)
                        {
                          v36 = *((unsigned __int8 *)v28 + 39);
                          if (v36 == 12)
                          {
                            v36 = *((unsigned __int8 *)v28 + 40);
                            if (v36 == 236)
                            {
                              v36 = *((unsigned __int8 *)v28 + 41);
                              if (v36 == 50)
                              {
                                v36 = *((unsigned __int8 *)v28 + 42);
                                if (v36 == 162)
                                {
                                  v36 = *((unsigned __int8 *)v28 + 43);
                                  if (v36 == 209)
                                  {
                                    v36 = *((unsigned __int8 *)v28 + 44);
                                    if (v36 == 99)
                                    {
                                      v36 = *((unsigned __int8 *)v28 + 45);
                                      if (v36 == 215)
                                      {
                                        v36 = *((unsigned __int8 *)v28 + 46);
                                        if (v36 == 6)
                                        {
                                          v36 = *((unsigned __int8 *)v28 + 47);
                                          if (v36 == 182)
                                            goto LABEL_145;
                                          v37 = 182;
                                        }
                                        else
                                        {
                                          v37 = 6;
                                        }
                                      }
                                      else
                                      {
                                        v37 = 215;
                                      }
                                    }
                                    else
                                    {
                                      v37 = 99;
                                    }
                                  }
                                  else
                                  {
                                    v37 = 209;
                                  }
                                }
                                else
                                {
                                  v37 = 162;
                                }
                              }
                              else
                              {
                                v37 = 50;
                              }
                            }
                            else
                            {
                              v37 = 236;
                            }
                          }
                          else
                          {
                            v37 = 12;
                          }
                        }
                        else
                        {
                          v37 = 143;
                        }
                      }
                      else
                      {
                        v37 = 91;
                      }
                    }
                    else
                    {
                      v37 = 78;
                    }
                    if (v36 >= v37)
                    {
LABEL_145:
                      v38 = (char *)v28;
                      goto LABEL_12;
                    }
LABEL_106:
                    v26 = v28[1];
                    if (!v26)
                    {
                      v27 = v28 + 1;
                      goto LABEL_146;
                    }
                  }
                }
                if (v29 < 0x26)
                  goto LABEL_106;
                goto LABEL_85;
              }
LABEL_13:
              v10 += 248;
              if (v10 == v11)
                goto LABEL_149;
            }
            while (1)
            {
              v14 = (uint64_t **)v12;
              v15 = *((unsigned __int8 *)v12 + 32);
              if (v15 != 37)
                break;
              v16 = *((unsigned __int8 *)v14 + 33);
              v17 = v16 > 0xCC;
              if (v16 != 204
                || (v18 = *((unsigned __int8 *)v14 + 34), v17 = v18 > 0x7B, v18 != 123)
                || (v19 = *((unsigned __int8 *)v14 + 35), v17 = v19 > 0xBD, v19 != 189))
              {
                if (!v17)
                  goto LABEL_38;
                goto LABEL_17;
              }
              v20 = *((unsigned __int8 *)v14 + 36);
              if (v20 == 78)
              {
                v20 = *((unsigned __int8 *)v14 + 37);
                if (v20 == 91)
                {
                  v20 = *((unsigned __int8 *)v14 + 38);
                  if (v20 == 143)
                  {
                    v20 = *((unsigned __int8 *)v14 + 39);
                    if (v20 == 12)
                    {
                      v20 = *((unsigned __int8 *)v14 + 40);
                      if (v20 == 236)
                      {
                        v20 = *((unsigned __int8 *)v14 + 41);
                        if (v20 == 50)
                        {
                          v20 = *((unsigned __int8 *)v14 + 42);
                          if (v20 == 162)
                          {
                            v20 = *((unsigned __int8 *)v14 + 43);
                            if (v20 == 209)
                            {
                              v20 = *((unsigned __int8 *)v14 + 44);
                              if (v20 == 99)
                              {
                                v20 = *((unsigned __int8 *)v14 + 45);
                                if (v20 == 215)
                                {
                                  v20 = *((unsigned __int8 *)v14 + 46);
                                  if (v20 == 6)
                                  {
                                    v20 = *((unsigned __int8 *)v14 + 47);
                                    if (v20 == 182)
                                      goto LABEL_52;
                                    v21 = 182;
                                  }
                                  else
                                  {
                                    v21 = 6;
                                  }
                                }
                                else
                                {
                                  v21 = 215;
                                }
                              }
                              else
                              {
                                v21 = 99;
                              }
                            }
                            else
                            {
                              v21 = 209;
                            }
                          }
                          else
                          {
                            v21 = 162;
                          }
                        }
                        else
                        {
                          v21 = 50;
                        }
                      }
                      else
                      {
                        v21 = 236;
                      }
                    }
                    else
                    {
                      v21 = 12;
                    }
                  }
                  else
                  {
                    v21 = 143;
                  }
                }
                else
                {
                  v21 = 91;
                }
              }
              else
              {
                v21 = 78;
              }
              if (v21 < v20)
              {
LABEL_17:
                v12 = *v14;
                v13 = v14;
                if (!*v14)
                  goto LABEL_78;
              }
              else
              {
LABEL_52:
                v22 = *((unsigned __int8 *)v14 + 36);
                if (v22 == 78)
                {
                  v22 = *((unsigned __int8 *)v14 + 37);
                  if (v22 == 91)
                  {
                    v22 = *((unsigned __int8 *)v14 + 38);
                    if (v22 == 143)
                    {
                      v22 = *((unsigned __int8 *)v14 + 39);
                      if (v22 == 12)
                      {
                        v22 = *((unsigned __int8 *)v14 + 40);
                        if (v22 == 236)
                        {
                          v22 = *((unsigned __int8 *)v14 + 41);
                          if (v22 == 50)
                          {
                            v22 = *((unsigned __int8 *)v14 + 42);
                            if (v22 == 162)
                            {
                              v22 = *((unsigned __int8 *)v14 + 43);
                              if (v22 == 209)
                              {
                                v22 = *((unsigned __int8 *)v14 + 44);
                                if (v22 == 99)
                                {
                                  v22 = *((unsigned __int8 *)v14 + 45);
                                  if (v22 == 215)
                                  {
                                    v22 = *((unsigned __int8 *)v14 + 46);
                                    if (v22 == 6)
                                    {
                                      v22 = *((unsigned __int8 *)v14 + 47);
                                      if (v22 == 182)
                                        goto LABEL_77;
                                      v23 = 182;
                                    }
                                    else
                                    {
                                      v23 = 6;
                                    }
                                  }
                                  else
                                  {
                                    v23 = 215;
                                  }
                                }
                                else
                                {
                                  v23 = 99;
                                }
                              }
                              else
                              {
                                v23 = 209;
                              }
                            }
                            else
                            {
                              v23 = 162;
                            }
                          }
                          else
                          {
                            v23 = 50;
                          }
                        }
                        else
                        {
                          v23 = 236;
                        }
                      }
                      else
                      {
                        v23 = 12;
                      }
                    }
                    else
                    {
                      v23 = 143;
                    }
                  }
                  else
                  {
                    v23 = 91;
                  }
                }
                else
                {
                  v23 = 78;
                }
                if (v22 >= v23)
                {
LABEL_77:
                  v24 = (char *)v14;
                  goto LABEL_81;
                }
LABEL_38:
                v12 = v14[1];
                if (!v12)
                {
                  v13 = v14 + 1;
                  goto LABEL_78;
                }
              }
            }
            if (v15 < 0x26)
              goto LABEL_38;
            goto LABEL_17;
          }
        }
      }
    }
  }
LABEL_9:
  v10 = *a2;
  v11 = a2[1];
  if (*a2 != v11)
    goto LABEL_14;
LABEL_149:
  if (v8)
  {
LABEL_150:
    *((_QWORD *)&info + 1) = 0;
    *(_QWORD *)&info = (char *)&info + 8;
    v191[1] = 0;
    v191[0] = 0;
    v189 = 0;
    v190 = v191;
    v193[0] = 0;
    v192 = (uint64_t *)v193;
    v195[1] = 0;
    v195[0] = 0;
    v193[1] = 0;
    v194 = (uint64_t *)v195;
    v197[1] = 0;
    v197[0] = 0;
    v196 = v197;
    LOBYTE(v198) = 0;
    v199 = 0;
    if ((_BYTE)a5)
    {
      if ((*a6 & 4) != 0)
      {
        (***(void (****)(void **__return_ptr, _QWORD, unsigned __int8 **, uint64_t, uint64_t, uint64_t))(a1 + 16))(v173, *(_QWORD *)(a1 + 16), a2, a3, a4, a5);
        sub_223475808((uint64_t)&info, (uint64_t)v173);
        sub_223198030((uint64_t)&v183, v184);
        sub_223475E64((uint64_t)&v180, v181);
        sub_223475E64((uint64_t)&v177, v178);
        sub_223198030((uint64_t)&v174 + 8, v175);
        sub_223198030((uint64_t)v173, (_QWORD *)v173[1]);
        sub_223671858(a4);
LABEL_296:
        sub_223C1E0DC((uint64_t)&v200, (uint64_t)&info, (uint64_t)v173);
        sub_223475808((uint64_t)&v200, (uint64_t)v173);
        sub_223198030((uint64_t)&v183, v184);
        sub_223475E64((uint64_t)&v180, v181);
        sub_223475E64((uint64_t)&v177, v178);
        sub_223198030((uint64_t)&v174 + 8, v175);
        sub_223198030((uint64_t)v173, (_QWORD *)v173[1]);
        sub_223198030((uint64_t)&v196, v197[0]);
        sub_223475E64((uint64_t)&v194, v195[0]);
        sub_223475E64((uint64_t)&v192, v193[0]);
        sub_223198030((uint64_t)&v190, v191[0]);
        sub_223198030((uint64_t)&info, *((_QWORD **)&info + 1));
        goto LABEL_297;
      }
LABEL_292:
      if (*(_BYTE *)(a1 + 216))
      {
        if (&info != (__int128 *)(a1 + 72))
        {
          sub_223475EB0((uint64_t)&info, *(_QWORD **)(a1 + 72), (_QWORD *)(a1 + 80));
          sub_223475EB0((uint64_t)&v190, *(_QWORD **)(a1 + 96), (_QWORD *)(a1 + 104));
          sub_223476408(&v192, *(uint64_t **)(a1 + 120), (uint64_t *)(a1 + 128));
          sub_223476408(&v194, *(uint64_t **)(a1 + 144), (uint64_t *)(a1 + 152));
          sub_223475EB0((uint64_t)&v196, *(_QWORD **)(a1 + 168), (_QWORD *)(a1 + 176));
        }
        v198 = *(_OWORD *)(a1 + 192);
        v199 = *(_BYTE *)(a1 + 208);
      }
      goto LABEL_296;
    }
    v40 = atomic_load((unsigned __int8 *)&qword_2540CAED8);
    if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAED8))
    {
      sub_22455F53C(v217);
      sub_223174DE4(v173, "cv3d.recon.sng");
      sub_2232300E0((uint64_t **)v217, (uint64_t)v173, &qword_2540CAED0);
      if (SBYTE7(v174) < 0)
        operator delete(v173[0]);
      __cxa_guard_release(&qword_2540CAED8);
    }
    v166 = qword_2540CAED0;
    if (**(int **)(qword_2540CAED0 + 56) > 5)
      goto LABEL_292;
    v41 = *(unsigned __int8 *)(qword_2540CAED0 + 72);
    v156 = sub_22322F254(qword_2540CAED0, "OSLogSurrogateAppender", 1, 0);
    if (!v41 && !v156)
      goto LABEL_292;
    sub_223195210((uint64_t)v173);
    sub_2231813E8(&v174, (uint64_t)"Room boundary result is empty", 29);
    v152 = v41;
    if ((v186 & 0x10) != 0)
    {
      v44 = v185;
      if (v185 < v180)
      {
        v185 = v180;
        v44 = v180;
      }
      v45 = (const void **)&v179;
    }
    else
    {
      if ((v186 & 8) == 0)
      {
        v42 = 0;
        HIBYTE(v165) = 0;
        v43 = __dst;
        goto LABEL_172;
      }
      v45 = (const void **)&v176;
      v44 = v178;
    }
    v46 = *v45;
    v42 = v44 - (_BYTE *)*v45;
    if (v42 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v42 >= 0x17)
    {
      v47 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v47 = v42 | 7;
      v48 = v47 + 1;
      v43 = (void **)operator new(v47 + 1);
      __dst[1] = (void *)v42;
      v165 = v48 | 0x8000000000000000;
      __dst[0] = v43;
    }
    else
    {
      HIBYTE(v165) = (_BYTE)v44 - *(_BYTE *)v45;
      v43 = __dst;
      if (!v42)
      {
LABEL_172:
        *((_BYTE *)v43 + v42) = 0;
        v157[0] = &v166;
        v157[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v157[2] = std::chrono::system_clock::now().__d_.__rep_;
        v158 = 5;
        v159 = "unknown file";
        v160 = 112;
        v162 = 0;
        v163 = 0;
        v161 = "unknown function";
        v49 = __dst;
        if (v165 < 0)
          v49 = (void **)__dst[0];
        __sa = (char *)v49;
        v50 = *(_QWORD *)v157[0];
        if (*(char *)(*(_QWORD *)v157[0] + 39) < 0)
        {
          v52 = *(const char **)(v50 + 16);
          v51 = *(_QWORD *)(v50 + 24);
        }
        else
        {
          v51 = *(unsigned __int8 *)(*(_QWORD *)v157[0] + 39);
          v52 = (const char *)(*(_QWORD *)v157[0] + 16);
        }
        v150 = *(_QWORD *)v157[0] + 16;
        v53 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v217);
          sub_223199C58("com.apple.cv3d", (unint64_t)v217, &xmmword_255788F40);
          if ((_BYTE)v218 && (v217[23] & 0x80000000) != 0)
            operator delete(*(void **)v217);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v54 = (const char *)&xmmword_255788F40;
        else
          v54 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v55 = byte_255788F57;
        else
          v55 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)v217 = os_log_create(v54, v52);
        v56 = &v217[8];
        if (v55 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v148 = v50;
        if (v55 >= 0x17)
        {
          v57 = v52;
          v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v55 | 7) != 0x17)
            v58 = v55 | 7;
          v59 = v58 + 1;
          v56 = operator new(v58 + 1);
          *(_QWORD *)&v217[16] = v55;
          *(_QWORD *)&v218 = v59 | 0x8000000000000000;
          *(_QWORD *)&v217[8] = v56;
          v52 = v57;
        }
        else
        {
          BYTE7(v218) = v55;
          if (!v55)
          {
LABEL_192:
            v56[v55] = 0;
            BYTE8(v218) = 1;
            v60 = v219;
            if (v51 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v51 >= 0x17)
            {
              v62 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v51 | 7) != 0x17)
                v62 = v51 | 7;
              v63 = v62 + 1;
              v60 = (void **)operator new(v62 + 1);
              v219[1] = (void *)v51;
              v220 = v63 | 0x8000000000000000;
              v219[0] = v60;
              v61 = v152;
            }
            else
            {
              HIBYTE(v220) = v51;
              v61 = v152;
              if (!v51)
              {
LABEL_200:
                *((_BYTE *)v60 + v51) = 0;
                v221 = 1;
                v64 = *(NSObject **)v217;
                if (SHIBYTE(v220) < 0)
                  operator delete(v219[0]);
                if (BYTE8(v218) && SBYTE7(v218) < 0)
                  operator delete(*(void **)&v217[8]);
                if (*(_QWORD *)v217)
                  os_release(*(void **)v217);
                if (!v156 || !*(_QWORD *)(v156 + 24))
                {
                  os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v217 = 136315138;
                  *(_QWORD *)&v217[4] = __sa;
                  v72 = (void *)_os_log_send_and_compose_impl();
                  if (v72)
                    free(v72);
                  goto LABEL_278;
                }
                v65 = _os_log_pack_size();
                v66 = (std::__shared_weak_count_vtbl *)operator new(v65, (std::align_val_t)8uLL);
                v67 = v61;
                v68 = (std::__shared_weak_count *)operator new();
                v68->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v68->__shared_owners_ = 0;
                v68->__shared_weak_owners_ = 0;
                v68[1].__vftable = v66;
                *(_QWORD *)&v167 = v66;
                *((_QWORD *)&v167 + 1) = v66;
                v169 = 0;
                v170 = 0;
                v168 = v68;
                v69 = strlen(__sa);
                if (v69 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v70 = v69;
                if (v69 >= 0x17)
                {
                  v73 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v69 | 7) != 0x17)
                    v73 = v69 | 7;
                  v74 = v73 + 1;
                  v71 = operator new(v73 + 1);
                  *(_QWORD *)&v172 = v70;
                  *((_QWORD *)&v172 + 1) = v74 | 0x8000000000000000;
                  v171 = v71;
                }
                else
                {
                  HIBYTE(v172) = v69;
                  v71 = &v171;
                  if (!v69)
                  {
LABEL_219:
                    *((_BYTE *)v71 + v70) = 0;
                    v75 = v171;
                    v222[0] = v172;
                    *(_QWORD *)((char *)v222 + 7) = *(_QWORD *)((char *)&v172 + 7);
                    v76 = HIBYTE(v172);
                    v77 = operator new(0x38uLL);
                    v77[1] = 0;
                    v77[2] = 0;
                    v77[3] = off_24EC1FA48;
                    *v77 = &off_24EC1F9F8;
                    v78 = v222[0];
                    v77[4] = v75;
                    v77[5] = v78;
                    *(_QWORD *)((char *)v77 + 47) = *(_QWORD *)((char *)v222 + 7);
                    *((_BYTE *)v77 + 55) = v76;
                    v222[0] = 0;
                    *(_QWORD *)((char *)v222 + 7) = 0;
                    v79 = v170;
                    v169 = (char *)(v77 + 3);
                    v170 = (std::__shared_weak_count *)v77;
                    if (v79)
                    {
                      p_shared_owners = (unint64_t *)&v79->__shared_owners_;
                      do
                        v81 = __ldaxr(p_shared_owners);
                      while (__stlxr(v81 - 1, p_shared_owners));
                      if (!v81)
                      {
                        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                        std::__shared_weak_count::__release_weak(v79);
                      }
                    }
                    *(_OWORD *)v217 = v167;
                    v82 = v169;
                    *(_QWORD *)&v217[16] = v168;
                    if (v168)
                    {
                      v83 = (unint64_t *)&v168->__shared_owners_;
                      do
                        v84 = __ldxr(v83);
                      while (__stxr(v84 + 1, v83));
                    }
                    v85 = v170;
                    *(_QWORD *)&v218 = v82;
                    *((_QWORD *)&v218 + 1) = v170;
                    if (v170)
                    {
                      v86 = (unint64_t *)&v170->__shared_owners_;
                      do
                        v87 = __ldxr(v86);
                      while (__stxr(v87 + 1, v86));
                      v219[0] = v82;
                      do
                        v88 = __ldaxr(v86);
                      while (__stlxr(v88 - 1, v86));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                        std::__shared_weak_count::__release_weak(v85);
                      }
                    }
                    else
                    {
                      v219[0] = v82;
                    }
                    v89 = v168;
                    if (v168)
                    {
                      v90 = (unint64_t *)&v168->__shared_owners_;
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                    v92 = *(_QWORD *)v217;
                    if (*((char *)v219[0] + 31) >= 0)
                      v93 = (char *)v219[0] + 8;
                    else
                      v93 = (char *)*((_QWORD *)v219[0] + 1);
                    v94 = _os_log_pack_fill();
                    *(_DWORD *)v94 = 136315138;
                    *(_QWORD *)(v94 + 4) = v93;
                    v95 = operator new();
                    v96 = *(unsigned __int8 *)(v148 + 39);
                    v97 = v150;
                    if ((v96 & 0x80u) != 0)
                    {
                      v97 = *(_QWORD *)(v148 + 16);
                      v96 = *(_QWORD *)(v148 + 24);
                    }
                    *(_QWORD *)v95 = v92;
                    *(_OWORD *)(v95 + 8) = *(_OWORD *)&v217[8];
                    *(_QWORD *)&v217[8] = 0;
                    *(_QWORD *)&v217[16] = 0;
                    *(_OWORD *)(v95 + 24) = v218;
                    v218 = 0uLL;
                    *(_QWORD *)(v95 + 40) = v97;
                    *(_QWORD *)(v95 + 48) = v96;
                    *(_BYTE *)(v95 + 56) = 16;
                    v171 = 0;
                    *(_QWORD *)&v167 = v95;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v156 + 24) + 40))(*(_QWORD *)(v156 + 24), &v167);
                    v98 = v167;
                    *(_QWORD *)&v167 = 0;
                    if (v98)
                    {
                      v99 = *(std::__shared_weak_count **)(v98 + 32);
                      if (v99)
                      {
                        v100 = (unint64_t *)&v99->__shared_owners_;
                        do
                          v101 = __ldaxr(v100);
                        while (__stlxr(v101 - 1, v100));
                        if (!v101)
                        {
                          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                          std::__shared_weak_count::__release_weak(v99);
                        }
                      }
                      v102 = *(std::__shared_weak_count **)(v98 + 16);
                      if (v102)
                      {
                        v103 = (unint64_t *)&v102->__shared_owners_;
                        do
                          v104 = __ldaxr(v103);
                        while (__stlxr(v104 - 1, v103));
                        if (!v104)
                        {
                          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                          std::__shared_weak_count::__release_weak(v102);
                        }
                      }
                      MEMORY[0x227684CE8](v98, 0x10F0C40B62ED6C6);
                      v105 = v171;
                      v171 = 0;
                      if (v105)
                      {
                        v106 = (std::__shared_weak_count *)v105[4];
                        if (v106)
                        {
                          v107 = (unint64_t *)&v106->__shared_owners_;
                          do
                            v108 = __ldaxr(v107);
                          while (__stlxr(v108 - 1, v107));
                          if (!v108)
                          {
                            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                            std::__shared_weak_count::__release_weak(v106);
                          }
                        }
                        v109 = (std::__shared_weak_count *)v105[2];
                        if (v109)
                        {
                          v110 = (unint64_t *)&v109->__shared_owners_;
                          do
                            v111 = __ldaxr(v110);
                          while (__stlxr(v111 - 1, v110));
                          if (!v111)
                          {
                            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                            std::__shared_weak_count::__release_weak(v109);
                          }
                        }
                        MEMORY[0x227684CE8](v105, 0x10F0C40B62ED6C6);
                      }
                    }
                    v112 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
                    v61 = v67;
                    if (*((_QWORD *)&v218 + 1))
                    {
                      v113 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
                      do
                        v114 = __ldaxr(v113);
                      while (__stlxr(v114 - 1, v113));
                      if (!v114)
                      {
                        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                        std::__shared_weak_count::__release_weak(v112);
                      }
                    }
                    v115 = *(std::__shared_weak_count **)&v217[16];
                    if (*(_QWORD *)&v217[16])
                    {
                      v116 = (unint64_t *)(*(_QWORD *)&v217[16] + 8);
                      do
                        v117 = __ldaxr(v116);
                      while (__stlxr(v117 - 1, v116));
                      if (!v117)
                      {
                        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                        std::__shared_weak_count::__release_weak(v115);
                      }
                    }
LABEL_278:
                    if (v61)
                    {
                      v118 = (const char *)__dst;
                      if (v165 < 0)
                        v118 = (const char *)__dst[0];
                      sub_22322C138((uint64_t)v157, "%s", v118);
                      sub_223182C08((uint64_t)v157);
                    }
                    sub_223182C08((uint64_t)v157);
                    v119 = v163;
                    if (v163)
                    {
                      v120 = (unint64_t *)&v163->__shared_owners_;
                      do
                        v121 = __ldaxr(v120);
                      while (__stlxr(v121 - 1, v120));
                      if (!v121)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                    }
                    if (SHIBYTE(v165) < 0)
                      operator delete(__dst[0]);
                    v173[0] = *(void **)MEMORY[0x24BEDB7F0];
                    v122 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(void **)((char *)v173 + *((_QWORD *)v173[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&v174 = v122;
                    *((_QWORD *)&v174 + 1) = MEMORY[0x24BEDB848] + 16;
                    if (SHIBYTE(v184) < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v187);
                    goto LABEL_292;
                  }
                }
                memcpy(v71, __sa, v70);
                goto LABEL_219;
              }
            }
            memmove(v60, v52, v51);
            goto LABEL_200;
          }
        }
        memmove(v56, v54, v55);
        goto LABEL_192;
      }
    }
    memmove(v43, v46, v42);
    goto LABEL_172;
  }
LABEL_297:
  v174 = 0u;
  *(_OWORD *)v173 = 0u;
  LODWORD(v175) = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v123 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v123 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&info);
    LODWORD(v147) = DWORD1(info);
    LODWORD(v146) = info;
    *(double *)&qword_255795558 = (double)v146 / (double)v147;
    __cxa_guard_release(&qword_255795560);
  }
  info = v215;
  LOBYTE(v189) = v216;
  v124 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  sub_223476A50((uint64_t)&qword_25578BBD0, &info);
  kdebug_trace();
  v125 = (_QWORD *)(a1 + 72);
  if (*(_BYTE *)(a1 + 216))
  {
    v125 = (_QWORD *)sub_223475808((uint64_t)v125, (uint64_t)&v200);
    if (!*(_BYTE *)(a1 + 216))
      sub_22324A974();
  }
  else
  {
    v126 = v200;
    v127 = v201;
    *(_QWORD *)(a1 + 80) = v201;
    v128 = a1 + 80;
    *(_QWORD *)(a1 + 72) = v126;
    v129 = v202;
    *(_QWORD *)(a1 + 88) = v202;
    if (v129)
    {
      v127[2] = v128;
      v200 = &v201;
      v201 = 0;
      v202 = 0;
    }
    else
    {
      *v125 = v128;
    }
    v130 = v203;
    v131 = v204;
    *(_QWORD *)(a1 + 104) = v204;
    v132 = a1 + 104;
    *(_QWORD *)(a1 + 96) = v130;
    v133 = v205;
    *(_QWORD *)(a1 + 112) = v205;
    if (v133)
    {
      v131[2] = v132;
      v203 = &v204;
      v204 = 0;
      v205 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 96) = v132;
    }
    v134 = v206;
    v135 = v207;
    *(_QWORD *)(a1 + 128) = v207;
    v136 = a1 + 128;
    *(_QWORD *)(a1 + 120) = v134;
    v137 = v208;
    *(_QWORD *)(a1 + 136) = v208;
    if (v137)
    {
      v135[2] = v136;
      v206 = &v207;
      v207 = 0;
      v208 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 120) = v136;
    }
    v138 = v209;
    v139 = v210;
    *(_QWORD *)(a1 + 152) = v210;
    v140 = a1 + 152;
    *(_QWORD *)(a1 + 144) = v138;
    v141 = v211;
    *(_QWORD *)(a1 + 160) = v211;
    if (v141)
    {
      v139[2] = v140;
      v209 = &v210;
      v210 = 0;
      v211 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 144) = v140;
    }
    v142 = v212;
    v143 = v213;
    *(_QWORD *)(a1 + 176) = v213;
    v144 = a1 + 176;
    *(_QWORD *)(a1 + 168) = v142;
    v145 = v214;
    *(_QWORD *)(a1 + 184) = v214;
    if (v145)
    {
      v143[2] = v144;
      v212 = &v213;
      v213 = 0;
      v214 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 168) = v144;
    }
    *(_OWORD *)(a1 + 192) = v215;
    *(_BYTE *)(a1 + 208) = v216;
    *(_BYTE *)(a1 + 216) = 1;
  }
  sub_223C0808C((uint64_t)v125);
  kdebug_trace();
  sub_223198030((uint64_t)&v212, v213);
  sub_223475E64((uint64_t)&v209, v210);
  sub_223475E64((uint64_t)&v206, v207);
  sub_223198030((uint64_t)&v203, v204);
  sub_223198030((uint64_t)&v200, v201);
}

void sub_223475628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  uint64_t v50;

  if (*(_BYTE *)(v50 - 168) && *(char *)(v50 - 169) < 0)
    operator delete(*(void **)(v50 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a26);
  if (a40 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a50);
  sub_2234759A4((_QWORD **)&STACK[0x250]);
  sub_2234759A4((_QWORD **)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

uint64_t sub_223475808(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v4 = (_QWORD *)(a1 + 8);
  sub_223198030(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  *v4 = v6;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)a2 = v5;
    *v5 = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
  v8 = a1 + 32;
  sub_223198030(a1 + 24, *(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = (_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  if (v11)
  {
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(a2 + 24) = v9;
    *v9 = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v8;
  }
  v12 = a1 + 56;
  sub_223475E64(a1 + 48, *(_QWORD **)(a1 + 56));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v13 = (_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v14;
  v15 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  if (v15)
  {
    *(_QWORD *)(v14 + 16) = v12;
    *(_QWORD *)(a2 + 48) = v13;
    *v13 = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v12;
  }
  v16 = a1 + 80;
  sub_223475E64(a1 + 72, *(_QWORD **)(a1 + 80));
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v17 = (_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v18;
  v19 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v19;
  if (v19)
  {
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(a2 + 72) = v17;
    *v17 = 0;
    *(_QWORD *)(a2 + 88) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v16;
  }
  v20 = a1 + 104;
  sub_223198030(a1 + 96, *(_QWORD **)(a1 + 104));
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v21 = (_QWORD *)(a2 + 104);
  v22 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v22;
  v23 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v23;
  if (v23)
  {
    *(_QWORD *)(v22 + 16) = v20;
    *(_QWORD *)(a2 + 96) = v21;
    *v21 = 0;
    *(_QWORD *)(a2 + 112) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = v20;
  }
  v24 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v24;
  return a1;
}

_QWORD **sub_2234759A4(_QWORD **a1)
{
  sub_223198030((uint64_t)(a1 + 12), a1[13]);
  sub_223475E64((uint64_t)(a1 + 9), a1[10]);
  sub_223475E64((uint64_t)(a1 + 6), a1[7]);
  sub_223198030((uint64_t)(a1 + 3), a1[4]);
  sub_223198030((uint64_t)a1, a1[1]);
  return a1;
}

uint64_t sub_223475A00(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  __int128 v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  BOOL v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_223475C18((_QWORD *)a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  sub_223475C18((_QWORD *)(a1 + 24), *(unsigned __int8 **)(a2 + 24), (unsigned __int8 *)(a2 + 32));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = *(unsigned __int8 **)(a2 + 48);
  if (v4 != (unsigned __int8 *)(a2 + 56))
  {
    do
    {
      sub_223475D24((_QWORD **)(a1 + 48), (uint64_t *)(a1 + 56), v4 + 32, (uint64_t)(v4 + 32));
      v8 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(unsigned __int8 **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != (unsigned __int8 *)(a2 + 56));
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  v5 = *(unsigned __int8 **)(a2 + 72);
  if (v5 != (unsigned __int8 *)(a2 + 80))
  {
    do
    {
      sub_223475D24((_QWORD **)(a1 + 72), (uint64_t *)(a1 + 80), v5 + 32, (uint64_t)(v5 + 32));
      v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(unsigned __int8 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
          v10 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v10);
      }
      v5 = v12;
    }
    while (v12 != (unsigned __int8 *)(a2 + 80));
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 112) = 0;
  sub_223475C18((_QWORD *)(a1 + 96), *(unsigned __int8 **)(a2 + 96), (unsigned __int8 *)(a2 + 104));
  v6 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  return a1;
}

void sub_223475BA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;

  sub_223198030(v7, *v9);
  sub_223475E64(v5, *v6);
  sub_223475E64(v3, *v4);
  sub_223198030(v2, *v8);
  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_223475C18(_QWORD *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  _QWORD **v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  uint64_t **v10;
  char *v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_223426D4C(v7, v8, v18, &v17, v6 + 25);
      if (*result)
      {
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v11 + 25) = *(_OWORD *)(v6 + 25);
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t *)v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = sub_2231A9A8C(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

_OWORD *sub_223475D24(_QWORD **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v6;
  _OWORD *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v13;
  unsigned __int8 *v14;

  v6 = sub_22341EF18(a1, a2, &v14, &v13, a3);
  v7 = *(_OWORD **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = v6;
    v7 = operator new(0x48uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 6) = (char *)v7 + 56;
    *((_QWORD *)v7 + 8) = 0;
    sub_223475C18((_QWORD *)v7 + 6, *(unsigned __int8 **)(a4 + 16), (unsigned __int8 *)(a4 + 24));
    v9 = v14;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *(_QWORD *)v8 = v7;
    v10 = (_QWORD *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *(uint64_t **)v8;
    }
    sub_2231A9A8C(a1[1], v11);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_223475DFC(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  sub_223198030(v2, v1[7]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223475E1C(uint64_t a1)
{
  _QWORD **v2;

  v2 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_223198030((uint64_t)(v2 + 6), v2[7]);
    operator delete(v2);
  }
  return a1;
}

void sub_223475E64(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_223475E64(a1, *a2);
    sub_223475E64(a1, a2[1]);
    sub_223198030((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    operator delete(a2);
  }
}

void sub_223475EB0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *i;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v35 = (uint64_t *)v10[1];
            if (!v35)
              break;
            do
            {
              v10 = v35;
              v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          *(_OWORD *)((char *)v12 + 25) = *(_OWORD *)((char *)v13 + 25);
          v14 = *v8;
          v15 = a1 + 8;
          v16 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_34:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = v15;
          *v16 = v12;
          v19 = **(_QWORD **)a1;
          if (v19)
            goto LABEL_35;
LABEL_36:
          sub_2231A9A8C(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v22 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v23 = (uint64_t *)v10[1];
                  if (!v23)
                    break;
                  do
                  {
                    v10 = v23;
                    v23 = (uint64_t *)*v23;
                  }
                  while (v23);
                }
              }
              else
              {
                for (v10[1] = 0; v22; v22 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v20 = (_QWORD *)v13[1];
          if (v20)
          {
            do
            {
              v4 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v21 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v21);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_58;
        }
        do
        {
          while (1)
          {
            v15 = v14;
            v17 = *(unsigned __int8 *)(v14 + 25);
            v18 = *((unsigned __int8 *)v12 + 25);
            if (v18 == v17)
            {
              v18 = *((unsigned __int8 *)v12 + 26);
              v17 = *(unsigned __int8 *)(v15 + 26);
              if (v18 == v17)
              {
                v18 = *((unsigned __int8 *)v12 + 27);
                v17 = *(unsigned __int8 *)(v15 + 27);
                if (v18 == v17)
                {
                  v18 = *((unsigned __int8 *)v12 + 28);
                  v17 = *(unsigned __int8 *)(v15 + 28);
                  if (v18 == v17)
                  {
                    v18 = *((unsigned __int8 *)v12 + 29);
                    v17 = *(unsigned __int8 *)(v15 + 29);
                    if (v18 == v17)
                    {
                      v18 = *((unsigned __int8 *)v12 + 30);
                      v17 = *(unsigned __int8 *)(v15 + 30);
                      if (v18 == v17)
                      {
                        v18 = *((unsigned __int8 *)v12 + 31);
                        v17 = *(unsigned __int8 *)(v15 + 31);
                        if (v18 == v17)
                        {
                          v18 = *((unsigned __int8 *)v12 + 32);
                          v17 = *(unsigned __int8 *)(v15 + 32);
                          if (v18 == v17)
                          {
                            v18 = *((unsigned __int8 *)v12 + 33);
                            v17 = *(unsigned __int8 *)(v15 + 33);
                            if (v18 == v17)
                            {
                              v18 = *((unsigned __int8 *)v12 + 34);
                              v17 = *(unsigned __int8 *)(v15 + 34);
                              if (v18 == v17)
                              {
                                v18 = *((unsigned __int8 *)v12 + 35);
                                v17 = *(unsigned __int8 *)(v15 + 35);
                                if (v18 == v17)
                                {
                                  v18 = *((unsigned __int8 *)v12 + 36);
                                  v17 = *(unsigned __int8 *)(v15 + 36);
                                  if (v18 == v17)
                                  {
                                    v18 = *((unsigned __int8 *)v12 + 37);
                                    v17 = *(unsigned __int8 *)(v15 + 37);
                                    if (v18 == v17)
                                    {
                                      v18 = *((unsigned __int8 *)v12 + 38);
                                      v17 = *(unsigned __int8 *)(v15 + 38);
                                      if (v18 == v17)
                                      {
                                        v18 = *((unsigned __int8 *)v12 + 39);
                                        v17 = *(unsigned __int8 *)(v15 + 39);
                                        if (v18 == v17)
                                        {
                                          v18 = *((unsigned __int8 *)v12 + 40);
                                          v17 = *(unsigned __int8 *)(v15 + 40);
                                          if (v18 == v17)
                                            break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v18 >= v17)
              break;
            v14 = *(_QWORD *)v15;
            v16 = (uint64_t **)v15;
            if (!*(_QWORD *)v15)
              goto LABEL_34;
          }
          v14 = *(_QWORD *)(v15 + 8);
        }
        while (v14);
        v16 = (uint64_t **)(v15 + 8);
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v15;
        *(_QWORD *)(v15 + 8) = v12;
        v19 = **(_QWORD **)a1;
        if (!v19)
          goto LABEL_36;
LABEL_35:
        *(_QWORD *)a1 = v19;
        v12 = *v16;
        goto LABEL_36;
      }
LABEL_58:
      sub_223198030(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        sub_223198030(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v25 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v26 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v26 + 25) = *(_OWORD *)((char *)v4 + 25);
      v27 = *v25;
      v28 = a1 + 8;
      v29 = (char **)(a1 + 8);
      if (*v25)
        break;
LABEL_86:
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = v28;
      *v29 = v26;
      v32 = **(_QWORD **)a1;
      if (v32)
        goto LABEL_87;
LABEL_88:
      sub_2231A9A8C(*(uint64_t **)(a1 + 8), (uint64_t *)v26);
      ++*(_QWORD *)(a1 + 16);
      v33 = (_QWORD *)v4[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v4[2];
          v21 = *v34 == (_QWORD)v4;
          v4 = v34;
        }
        while (!v21);
      }
      v4 = v34;
      if (v34 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v28 = v27;
        v30 = *(unsigned __int8 *)(v27 + 25);
        v31 = v26[25];
        if (v31 == v30)
        {
          v30 = *(unsigned __int8 *)(v28 + 26);
          v31 = v26[26];
          if (v31 == v30)
          {
            v30 = *(unsigned __int8 *)(v28 + 27);
            v31 = v26[27];
            if (v31 == v30)
            {
              v30 = *(unsigned __int8 *)(v28 + 28);
              v31 = v26[28];
              if (v31 == v30)
              {
                v30 = *(unsigned __int8 *)(v28 + 29);
                v31 = v26[29];
                if (v31 == v30)
                {
                  v30 = *(unsigned __int8 *)(v28 + 30);
                  v31 = v26[30];
                  if (v31 == v30)
                  {
                    v30 = *(unsigned __int8 *)(v28 + 31);
                    v31 = v26[31];
                    if (v31 == v30)
                    {
                      v30 = *(unsigned __int8 *)(v28 + 32);
                      v31 = v26[32];
                      if (v31 == v30)
                      {
                        v30 = *(unsigned __int8 *)(v28 + 33);
                        v31 = v26[33];
                        if (v31 == v30)
                        {
                          v30 = *(unsigned __int8 *)(v28 + 34);
                          v31 = v26[34];
                          if (v31 == v30)
                          {
                            v30 = *(unsigned __int8 *)(v28 + 35);
                            v31 = v26[35];
                            if (v31 == v30)
                            {
                              v30 = *(unsigned __int8 *)(v28 + 36);
                              v31 = v26[36];
                              if (v31 == v30)
                              {
                                v30 = *(unsigned __int8 *)(v28 + 37);
                                v31 = v26[37];
                                if (v31 == v30)
                                {
                                  v30 = *(unsigned __int8 *)(v28 + 38);
                                  v31 = v26[38];
                                  if (v31 == v30)
                                  {
                                    v30 = *(unsigned __int8 *)(v28 + 39);
                                    v31 = v26[39];
                                    if (v31 == v30)
                                    {
                                      v30 = *(unsigned __int8 *)(v28 + 40);
                                      v31 = v26[40];
                                      if (v31 == v30)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v31 >= v30)
          break;
        v27 = *(_QWORD *)v28;
        v29 = (char **)v28;
        if (!*(_QWORD *)v28)
          goto LABEL_86;
      }
      v27 = *(_QWORD *)(v28 + 8);
    }
    while (v27);
    v29 = (char **)(v28 + 8);
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = v28;
    *(_QWORD *)(v28 + 8) = v26;
    v32 = **(_QWORD **)a1;
    if (!v32)
      goto LABEL_88;
LABEL_87:
    *(_QWORD *)a1 = v32;
    v26 = *v29;
    goto LABEL_88;
  }
}

void sub_223476408(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *i;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v29;
  uint64_t *v30;

  if (!a1[2])
    goto LABEL_66;
  v6 = *a1;
  v8 = a1 + 1;
  v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  v30 = v9;
  if (!v9)
    goto LABEL_66;
  v10 = (uint64_t *)v9[2];
  if (v10)
  {
    v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *v10 = 0;
      while (1)
      {
        v27 = (uint64_t *)v10[1];
        if (!v27)
          break;
        do
        {
          v10 = v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
    }
    else
    {
      for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
      {
        do
        {
          v10 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  v29 = v10;
  if (a2 == a3)
  {
    v23 = (uint64_t)a1;
    sub_223475E64((uint64_t)a1, v9);
    if (!v10)
      goto LABEL_66;
    goto LABEL_63;
  }
  v12 = a2;
  do
  {
    *((_OWORD *)v9 + 2) = *((_OWORD *)v12 + 2);
    if (v9 != v12)
    {
      sub_223475EB0((uint64_t)(v9 + 6), (_QWORD *)v12[6], v12 + 7);
      v9 = v30;
    }
    v13 = *v8;
    v14 = a1 + 1;
    v15 = a1 + 1;
    if (!*v8)
    {
LABEL_36:
      *v9 = 0;
      v9[1] = 0;
      v9[2] = (uint64_t)v14;
      *v15 = v9;
      v18 = (uint64_t *)**a1;
      if (!v18)
        goto LABEL_38;
LABEL_37:
      *a1 = v18;
      v9 = *v15;
      goto LABEL_38;
    }
    do
    {
      while (1)
      {
        v14 = (uint64_t **)v13;
        v16 = *((unsigned __int8 *)v13 + 32);
        v17 = *((unsigned __int8 *)v9 + 32);
        if (v17 == v16)
        {
          v17 = *((unsigned __int8 *)v9 + 33);
          v16 = *((unsigned __int8 *)v14 + 33);
          if (v17 == v16)
          {
            v17 = *((unsigned __int8 *)v9 + 34);
            v16 = *((unsigned __int8 *)v14 + 34);
            if (v17 == v16)
            {
              v17 = *((unsigned __int8 *)v9 + 35);
              v16 = *((unsigned __int8 *)v14 + 35);
              if (v17 == v16)
              {
                v17 = *((unsigned __int8 *)v9 + 36);
                v16 = *((unsigned __int8 *)v14 + 36);
                if (v17 == v16)
                {
                  v17 = *((unsigned __int8 *)v9 + 37);
                  v16 = *((unsigned __int8 *)v14 + 37);
                  if (v17 == v16)
                  {
                    v17 = *((unsigned __int8 *)v9 + 38);
                    v16 = *((unsigned __int8 *)v14 + 38);
                    if (v17 == v16)
                    {
                      v17 = *((unsigned __int8 *)v9 + 39);
                      v16 = *((unsigned __int8 *)v14 + 39);
                      if (v17 == v16)
                      {
                        v17 = *((unsigned __int8 *)v9 + 40);
                        v16 = *((unsigned __int8 *)v14 + 40);
                        if (v17 == v16)
                        {
                          v17 = *((unsigned __int8 *)v9 + 41);
                          v16 = *((unsigned __int8 *)v14 + 41);
                          if (v17 == v16)
                          {
                            v17 = *((unsigned __int8 *)v9 + 42);
                            v16 = *((unsigned __int8 *)v14 + 42);
                            if (v17 == v16)
                            {
                              v17 = *((unsigned __int8 *)v9 + 43);
                              v16 = *((unsigned __int8 *)v14 + 43);
                              if (v17 == v16)
                              {
                                v17 = *((unsigned __int8 *)v9 + 44);
                                v16 = *((unsigned __int8 *)v14 + 44);
                                if (v17 == v16)
                                {
                                  v17 = *((unsigned __int8 *)v9 + 45);
                                  v16 = *((unsigned __int8 *)v14 + 45);
                                  if (v17 == v16)
                                  {
                                    v17 = *((unsigned __int8 *)v9 + 46);
                                    v16 = *((unsigned __int8 *)v14 + 46);
                                    if (v17 == v16)
                                    {
                                      v17 = *((unsigned __int8 *)v9 + 47);
                                      v16 = *((unsigned __int8 *)v14 + 47);
                                      if (v17 == v16)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v17 >= v16)
          break;
        v13 = *v14;
        v15 = v14;
        if (!*v14)
          goto LABEL_36;
      }
      v13 = v14[1];
    }
    while (v13);
    v15 = v14 + 1;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v14;
    v14[1] = v9;
    v18 = (uint64_t *)**a1;
    if (v18)
      goto LABEL_37;
LABEL_38:
    sub_2231A9A8C(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v9 = v29;
    v30 = v29;
    if (v29)
    {
      v10 = (uint64_t *)v29[2];
      if (v10)
      {
        v19 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v29)
        {
          *v10 = 0;
          while (1)
          {
            v22 = (uint64_t *)v10[1];
            if (!v22)
              break;
            do
            {
              v10 = v22;
              v22 = (uint64_t *)*v22;
            }
            while (v22);
          }
        }
        else
        {
          for (v10[1] = 0; v19; v19 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v19;
              v19 = (uint64_t *)*v19;
            }
            while (v19);
          }
        }
      }
      v29 = v10;
      v20 = (uint64_t *)v12[1];
      if (!v20)
      {
        do
        {
LABEL_49:
          a2 = (uint64_t *)v12[2];
          v21 = *a2 == (_QWORD)v12;
          v12 = a2;
        }
        while (!v21);
        goto LABEL_51;
      }
    }
    else
    {
      v10 = 0;
      v20 = (uint64_t *)v12[1];
      if (!v20)
        goto LABEL_49;
    }
    do
    {
      a2 = v20;
      v20 = (uint64_t *)*v20;
    }
    while (v20);
LABEL_51:
    if (!v9)
      break;
    v12 = a2;
  }
  while (a2 != a3);
  v23 = (uint64_t)a1;
  sub_223475E64((uint64_t)a1, v9);
  if (!v10)
    goto LABEL_66;
LABEL_63:
  for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
    v10 = i;
  sub_223475E64(v23, v10);
LABEL_66:
  if (a2 != a3)
  {
    do
    {
      sub_223476834(a1, (uint64_t)(a2 + 4));
      v25 = (uint64_t *)a2[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (uint64_t *)a2[2];
          v21 = *v26 == (_QWORD)a2;
          a2 = v26;
        }
        while (!v21);
      }
      a2 = v26;
    }
    while (v26 != a3);
  }
}

void sub_2234767CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2234767E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2234767E0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_223475E64(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_223475E64(*(_QWORD *)a1, v2);
  }
  return a1;
}

char *sub_223476834(uint64_t **a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v10;

  v4 = a1 + 1;
  v10 = (char *)operator new(0x48uLL);
  *((_OWORD *)v10 + 2) = *(_OWORD *)a2;
  *((_QWORD *)v10 + 8) = 0;
  *((_QWORD *)v10 + 7) = 0;
  *((_QWORD *)v10 + 6) = v10 + 56;
  sub_223475C18((_QWORD *)v10 + 6, *(unsigned __int8 **)(a2 + 16), (unsigned __int8 *)(a2 + 24));
  v5 = *v4;
  v6 = v4;
  if (*v4)
  {
    do
    {
      while (1)
      {
        v4 = (uint64_t **)v5;
        if (((char)sub_22319835C((unsigned __int8 *)v10 + 32, (unsigned __int8 *)v5 + 32) & 0x80000000) == 0)
          break;
        v5 = *v4;
        v6 = v4;
        if (!*v4)
          goto LABEL_7;
      }
      v5 = v4[1];
    }
    while (v5);
    v6 = v4 + 1;
  }
LABEL_7:
  v7 = (uint64_t *)v10;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = v4;
  *v6 = (uint64_t *)v10;
  v8 = (uint64_t *)**a1;
  if (v8)
  {
    *a1 = v8;
    v7 = *v6;
  }
  sub_2231A9A8C(a1[1], v7);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

void sub_223476938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD **v3;
  va_list va;

  va_start(va, a2);
  sub_223198030(v2, *v3);
  sub_223475E1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223476958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223475E1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_22347696C(_QWORD **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t **result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 *v17;

  result = (uint64_t **)sub_22341EF18(a1, a2, &v17, &v16, a3);
  if (!*result)
  {
    v7 = result;
    v8 = (uint64_t *)operator new(0x48uLL);
    v9 = v8;
    *((_OWORD *)v8 + 2) = *(_OWORD *)a4;
    v10 = (_QWORD *)(a4 + 24);
    v11 = *(_QWORD *)(a4 + 24);
    v8[6] = *(_QWORD *)(a4 + 16);
    v8[7] = v11;
    v12 = (char *)(v8 + 7);
    v13 = *(_QWORD *)(a4 + 32);
    v8[8] = v13;
    if (v13)
    {
      *(_QWORD *)(v11 + 16) = v12;
      *(_QWORD *)(a4 + 16) = v10;
      *v10 = 0;
      *(_QWORD *)(a4 + 32) = 0;
    }
    else
    {
      v8[6] = (uint64_t)v12;
    }
    v14 = v17;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v14;
    *v7 = v8;
    v15 = (_QWORD *)**a1;
    if (v15)
    {
      *a1 = v15;
      v9 = *v7;
    }
    result = (uint64_t **)sub_2231A9A8C(a1[1], v9);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_223476A50(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;
  int v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;

  v4 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  v5 = *((unsigned __int8 *)a2 + 16);
  v6 = (_QWORD *)(a1 + 208);
  v7 = *(unsigned __int8 *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 224))
  {
    v9 = 0;
    if (!*((_BYTE *)a2 + 16))
      goto LABEL_12;
    goto LABEL_10;
  }
  if (*((_BYTE *)a2 + 16))
  {
    v7 = *v6 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 216) != *((_QWORD *)a2 + 1);
LABEL_10:
    v10 = *a2;
    *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 16);
    *(_OWORD *)v6 = v10;
    v9 = v7;
    goto LABEL_12;
  }
  v9 = 0;
LABEL_12:
  std::mutex::lock((std::mutex *)(a1 + 7640));
  if (v5)
    v11 = v9;
  else
    v11 = 1;
  *(_QWORD *)(a1 + 7704) += v11;
  std::mutex::unlock((std::mutex *)(a1 + 7640));
  std::mutex::unlock(v4);
}

void sub_223476B0C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223476B20(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[2];

  *(_QWORD *)(a1 + 64) = 0;
  v2 = a1 + 264;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 72) = 850045863;
  *(_QWORD *)(a1 + 144) = 850045863;
  *(_BYTE *)(a1 + 140) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 193) = 0u;
  *(_DWORD *)(a1 + 232) = 1;
  *(_QWORD *)(a1 + 240) = a1;
  *(_DWORD *)(a1 + 248) = 3;
  *(_QWORD *)(a1 + 256) = a1;
  *(_DWORD *)(a1 + 264) = 4;
  *(_QWORD *)&v5[0] = *(_QWORD *)(a1 + 248);
  *((_QWORD *)&v5[0] + 1) = a1;
  *(_QWORD *)(a1 + 272) = a1;
  *(_QWORD *)(a1 + 280) = off_24EC64EC8;
  *(_QWORD *)(a1 + 288) = "rsl__in__duty_cycle";
  *(_OWORD *)(a1 + 296) = xmmword_2245F6D20;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  sub_22347922C((int *)v5, a1 + 280);
  *(_QWORD *)(a1 + 280) = &off_24EC64F08;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 1;
  v5[0] = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 400) = off_24EC64EC8;
  *(_QWORD *)(a1 + 408) = "general__device_worn__mean";
  *(_OWORD *)(a1 + 416) = xmmword_2245F6D30;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = 0;
  sub_22347922C((int *)v5, a1 + 400);
  *(_QWORD *)(a1 + 400) = &off_24EC64F08;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 512) = 1;
  v5[0] = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 520) = off_24EC64EC8;
  *(_QWORD *)(a1 + 528) = "general__user_motion__sum";
  *(_OWORD *)(v2 + 272) = xmmword_2245F6D40;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 600) = 0;
  sub_22347922C((int *)v5, a1 + 520);
  *(_QWORD *)(a1 + 520) = &off_24EC377A8;
  *(_DWORD *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 612) = 1;
  v5[0] = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 616) = off_24EC64EC8;
  *(_QWORD *)(a1 + 624) = "general__lux_level__mean";
  *(_OWORD *)(v2 + 368) = xmmword_2245F6D50;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_QWORD *)(a1 + 696) = 0;
  sub_22347922C((int *)v5, a1 + 616);
  *(_QWORD *)(a1 + 616) = &off_24EC64F08;
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 728) = 1;
  v5[0] = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 736) = off_24EC64EC8;
  *(_QWORD *)(a1 + 744) = "general__device_orientation__mean";
  *(_OWORD *)(a1 + 752) = xmmword_2245F6D60;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_QWORD *)(a1 + 816) = 0;
  sub_22347922C((int *)v5, a1 + 736);
  *(_QWORD *)(a1 + 736) = &off_24EC64F08;
  *(_BYTE *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 848) = 1;
  v5[0] = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 856) = off_24EC64EC8;
  *(_QWORD *)(a1 + 864) = "general__scene_type__latest";
  *(_OWORD *)(v2 + 608) = xmmword_2245F6D70;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_QWORD *)(a1 + 936) = 0;
  sub_22347922C((int *)v5, a1 + 856);
  *(_QWORD *)(a1 + 856) = &off_24EC377F0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 960) = 1;
  v5[0] = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 968) = off_24EC64EC8;
  *(_QWORD *)(a1 + 976) = "general__memory__latest";
  *(_OWORD *)(v2 + 720) = xmmword_2245F6D80;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_QWORD *)(a1 + 1048) = 0;
  sub_22347922C((int *)v5, a1 + 968);
  *(_QWORD *)(a1 + 968) = &off_24EC37838;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_BYTE *)(a1 + 1072) = 0;
  v5[0] = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 1080) = off_24EC64EC8;
  *(_QWORD *)(a1 + 1088) = "keyframe__count__latest";
  *(_OWORD *)(v2 + 832) = xmmword_2245F6D80;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_QWORD *)(a1 + 1160) = 0;
  sub_22347922C((int *)v5, a1 + 1080);
  *(_QWORD *)(a1 + 1080) = &off_24EC377F0;
  *(_BYTE *)(a1 + 1168) = 0;
  *(_BYTE *)(a1 + 1176) = 0;
  *(_BYTE *)(a1 + 1184) = 0;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 1192) = off_24EC64EC8;
  *(_QWORD *)(a1 + 1200) = "volumetric__recycling__did_occur";
  *(_OWORD *)(v2 + 944) = xmmword_2245F6D90;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_QWORD *)(a1 + 1272) = 0;
  sub_22347922C((int *)v5, a1 + 1192);
  *(_QWORD *)(a1 + 1192) = &off_24EC64F50;
  *(_BYTE *)(a1 + 1280) = 0;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 1288) = off_24EC64EC8;
  *(_QWORD *)(a1 + 1296) = "general__memory__mean";
  *(_OWORD *)(v2 + 1040) = xmmword_2245F6DA0;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_QWORD *)(a1 + 1368) = 0;
  sub_22347922C((int *)v5, a1 + 1288);
  *(_QWORD *)(a1 + 1288) = &off_24EC64F08;
  *(_BYTE *)(a1 + 1376) = 0;
  *(_BYTE *)(a1 + 1384) = 0;
  *(_QWORD *)(a1 + 1392) = 0;
  *(_BYTE *)(a1 + 1400) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 1408) = off_24EC64EC8;
  *(_QWORD *)(a1 + 1416) = "keyframe__localized_count__max";
  *(_OWORD *)(a1 + 1424) = xmmword_2245F6DB0;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_QWORD *)(a1 + 1488) = 0;
  sub_22347922C((int *)v5, a1 + 1408);
  *(_QWORD *)(a1 + 1408) = &off_24EC37880;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_BYTE *)(a1 + 1528) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 1536) = off_24EC64EC8;
  *(_QWORD *)(a1 + 1544) = "keyframe__new_count__latest";
  *(_OWORD *)(a1 + 1552) = xmmword_2245F6D70;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_QWORD *)(a1 + 1616) = 0;
  sub_22347922C((int *)v5, a1 + 1536);
  *(_QWORD *)(a1 + 1536) = &off_24EC377F0;
  *(_BYTE *)(a1 + 1624) = 0;
  *(_BYTE *)(a1 + 1632) = 0;
  *(_BYTE *)(a1 + 1640) = 0;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 1648) = off_24EC64EC8;
  *(_QWORD *)(a1 + 1656) = "keyframe__disk_count__latest";
  *(_OWORD *)(a1 + 1664) = xmmword_2245F6DC0;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_QWORD *)(a1 + 1728) = 0;
  sub_22347922C((int *)v5, a1 + 1648);
  *(_QWORD *)(a1 + 1648) = &off_24EC377F0;
  *(_BYTE *)(a1 + 1736) = 0;
  *(_BYTE *)(a1 + 1744) = 0;
  *(_BYTE *)(a1 + 1752) = 0;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 1760) = off_24EC64EC8;
  *(_QWORD *)(a1 + 1768) = "keyframe__shared_count__latest";
  *(_OWORD *)(a1 + 1776) = xmmword_2245F6DB0;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_QWORD *)(a1 + 1840) = 0;
  sub_22347922C((int *)v5, a1 + 1760);
  *(_QWORD *)(a1 + 1760) = &off_24EC377F0;
  *(_BYTE *)(a1 + 1848) = 0;
  *(_BYTE *)(a1 + 1856) = 0;
  *(_BYTE *)(a1 + 1864) = 0;
  v3 = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 1872) = off_24EC64EC8;
  *(_QWORD *)(a1 + 1880) = "kfp__gp__count__latest";
  v5[0] = v3;
  *(_OWORD *)(a1 + 1888) = xmmword_2245F6DD0;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_QWORD *)(a1 + 1952) = 0;
  sub_22347922C((int *)v5, a1 + 1872);
  *(_QWORD *)(a1 + 1872) = &off_24EC377F0;
  *(_BYTE *)(a1 + 1960) = 0;
  *(_BYTE *)(a1 + 1968) = 0;
  *(_BYTE *)(a1 + 1976) = 0;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 1984) = off_24EC64EC8;
  *(_QWORD *)(a1 + 1992) = "kfp__restored__ratio_mean";
  *(_OWORD *)(a1 + 2000) = xmmword_2245F6D40;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_QWORD *)(a1 + 2064) = 0;
  sub_22347922C((int *)v5, a1 + 1984);
  *(_QWORD *)(a1 + 1984) = &off_24EC64F08;
  *(_BYTE *)(a1 + 2072) = 0;
  *(_BYTE *)(a1 + 2080) = 0;
  *(_QWORD *)(a1 + 2088) = 0;
  *(_BYTE *)(a1 + 2096) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 2104) = off_24EC64EC8;
  *(_QWORD *)(a1 + 2112) = "kfp__removed__count";
  *(_OWORD *)(v2 + 1856) = xmmword_2245F6D20;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_QWORD *)(a1 + 2184) = 0;
  sub_22347922C((int *)v5, a1 + 2104);
  *(_QWORD *)(a1 + 2104) = &off_24EC378C8;
  *(_QWORD *)(a1 + 2192) = 0;
  *(_BYTE *)(a1 + 2200) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 2208) = off_24EC64EC8;
  *(_QWORD *)(a1 + 2216) = "kfp__kfs__count__latest";
  *(_OWORD *)(a1 + 2224) = xmmword_2245F6D80;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_QWORD *)(a1 + 2288) = 0;
  sub_22347922C((int *)v5, a1 + 2208);
  *(_QWORD *)(a1 + 2208) = &off_24EC377F0;
  *(_BYTE *)(a1 + 2296) = 0;
  *(_BYTE *)(a1 + 2304) = 0;
  *(_BYTE *)(a1 + 2312) = 0;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 2320) = off_24EC64EC8;
  *(_QWORD *)(a1 + 2328) = "kfp__links__count__latest";
  *(_OWORD *)(a1 + 2336) = xmmword_2245F6D40;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_QWORD *)(a1 + 2400) = 0;
  sub_22347922C((int *)v5, a1 + 2320);
  *(_QWORD *)(a1 + 2320) = &off_24EC377F0;
  *(_BYTE *)(a1 + 2408) = 0;
  *(_BYTE *)(a1 + 2416) = 0;
  *(_BYTE *)(a1 + 2424) = 0;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 2432) = off_24EC64EC8;
  *(_QWORD *)(a1 + 2440) = "kfp__removed_floor_ceiling__count";
  *(_OWORD *)(a1 + 2448) = xmmword_2245F6D60;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_QWORD *)(a1 + 2512) = 0;
  sub_22347922C((int *)v5, a1 + 2432);
  *(_QWORD *)(a1 + 2432) = &off_24EC378C8;
  *(_QWORD *)(a1 + 2520) = 0;
  *(_BYTE *)(a1 + 2528) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 2536) = off_24EC64EC8;
  *(_QWORD *)(a1 + 2544) = "kfp__time_delay_first_floor_plane__first";
  *(_OWORD *)(v2 + 2288) = xmmword_2245F6DE0;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_QWORD *)(a1 + 2616) = 0;
  sub_22347922C((int *)v5, a1 + 2536);
  *(_QWORD *)(a1 + 2536) = &off_24EC37910;
  *(_BYTE *)(a1 + 2624) = 0;
  *(_BYTE *)(a1 + 2632) = 0;
  *(_BYTE *)(a1 + 2640) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 2648) = off_24EC64EC8;
  *(_QWORD *)(a1 + 2656) = "kfp__time_to_first_global_floor_plane__first";
  *(_OWORD *)(v2 + 2400) = xmmword_2245F6DF0;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_QWORD *)(a1 + 2728) = 0;
  sub_22347922C((int *)v5, a1 + 2648);
  *(_QWORD *)(a1 + 2648) = &off_24EC37910;
  *(_BYTE *)(a1 + 2736) = 0;
  *(_BYTE *)(a1 + 2744) = 0;
  *(_BYTE *)(a1 + 2752) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 2760) = off_24EC64EC8;
  *(_QWORD *)(a1 + 2768) = "kfp__floor_jump__count";
  *(_OWORD *)(v2 + 2512) = xmmword_2245F6DD0;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_QWORD *)(a1 + 2840) = 0;
  sub_22347922C((int *)v5, a1 + 2760);
  *(_QWORD *)(a1 + 2760) = &off_24EC378C8;
  *(_QWORD *)(a1 + 2848) = 0;
  *(_BYTE *)(a1 + 2856) = 1;
  v5[0] = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 2864) = off_24EC64EC8;
  *(_QWORD *)(a1 + 2872) = "monitoring__discover__duty_cycle";
  *(_OWORD *)(a1 + 2880) = xmmword_2245F6D90;
  *(_OWORD *)(a1 + 2896) = 0u;
  *(_OWORD *)(a1 + 2912) = 0u;
  *(_OWORD *)(a1 + 2928) = 0u;
  *(_QWORD *)(a1 + 2944) = 0;
  sub_22347922C((int *)v5, a1 + 2864);
  *(_QWORD *)(a1 + 2864) = &off_24EC64F08;
  *(_BYTE *)(a1 + 2952) = 0;
  *(_BYTE *)(a1 + 2960) = 0;
  *(_QWORD *)(a1 + 2968) = 0;
  *(_BYTE *)(a1 + 2976) = 1;
  v5[0] = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 2984) = off_24EC64EC8;
  *(_QWORD *)(a1 + 2992) = "monitoring__suggestion_mode_mismatch__duty_cycle";
  *(_OWORD *)(v2 + 2736) = xmmword_2245F6E00;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_QWORD *)(a1 + 3064) = 0;
  sub_22347922C((int *)v5, a1 + 2984);
  *(_QWORD *)(a1 + 2984) = &off_24EC64F08;
  *(_BYTE *)(a1 + 3072) = 0;
  *(_BYTE *)(a1 + 3080) = 0;
  *(_QWORD *)(a1 + 3088) = 0;
  *(_BYTE *)(a1 + 3096) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 3104) = off_24EC64EC8;
  *(_QWORD *)(a1 + 3112) = "monitoring__discover__duration__mean";
  *(_OWORD *)(a1 + 3120) = xmmword_2245F6E10;
  *(_OWORD *)(a1 + 3136) = 0u;
  *(_OWORD *)(a1 + 3152) = 0u;
  *(_OWORD *)(a1 + 3168) = 0u;
  *(_QWORD *)(a1 + 3184) = 0;
  sub_22347922C((int *)v5, a1 + 3104);
  *(_QWORD *)(a1 + 3104) = &off_24EC64F08;
  *(_BYTE *)(a1 + 3192) = 0;
  *(_BYTE *)(a1 + 3200) = 0;
  *(_QWORD *)(a1 + 3208) = 0;
  *(_BYTE *)(a1 + 3216) = 0;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 3224) = off_24EC64EC8;
  *(_QWORD *)(a1 + 3232) = "monitoring__monitor__duration__mean";
  *(_OWORD *)(v2 + 2976) = xmmword_2245F6E20;
  *(_OWORD *)(a1 + 3256) = 0u;
  *(_OWORD *)(a1 + 3272) = 0u;
  *(_OWORD *)(a1 + 3288) = 0u;
  *(_QWORD *)(a1 + 3304) = 0;
  sub_22347922C((int *)v5, a1 + 3224);
  *(_QWORD *)(a1 + 3224) = &off_24EC64F08;
  *(_BYTE *)(a1 + 3312) = 0;
  *(_BYTE *)(a1 + 3320) = 0;
  *(_QWORD *)(a1 + 3328) = 0;
  *(_BYTE *)(a1 + 3336) = 0;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 3344) = off_24EC64EC8;
  *(_QWORD *)(a1 + 3352) = "monitoring__discover__duration__min";
  *(_OWORD *)(a1 + 3360) = xmmword_2245F6E20;
  *(_OWORD *)(a1 + 3376) = 0u;
  *(_OWORD *)(a1 + 3392) = 0u;
  *(_OWORD *)(a1 + 3408) = 0u;
  *(_QWORD *)(a1 + 3424) = 0;
  sub_22347922C((int *)v5, a1 + 3344);
  *(_QWORD *)(a1 + 3344) = &off_24EC37958;
  *(_BYTE *)(a1 + 3464) = 0;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3448) = 0u;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 3472) = off_24EC64EC8;
  *(_QWORD *)(a1 + 3480) = "monitoring__mode_change__count";
  *(_OWORD *)(a1 + 3488) = xmmword_2245F6DB0;
  *(_OWORD *)(a1 + 3504) = 0u;
  *(_OWORD *)(a1 + 3520) = 0u;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_QWORD *)(a1 + 3552) = 0;
  sub_22347922C((int *)v5, a1 + 3472);
  *(_QWORD *)(a1 + 3472) = &off_24EC378C8;
  *(_QWORD *)(a1 + 3560) = 0;
  *(_BYTE *)(a1 + 3568) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 3576) = off_24EC64EC8;
  *(_QWORD *)(a1 + 3584) = "volumetric__scheduling_period__max";
  *(_OWORD *)(v2 + 3328) = xmmword_2245F6E30;
  *(_OWORD *)(a1 + 3608) = 0u;
  *(_OWORD *)(a1 + 3624) = 0u;
  *(_OWORD *)(a1 + 3640) = 0u;
  *(_QWORD *)(a1 + 3656) = 0;
  sub_22347922C((int *)v5, a1 + 3576);
  *(_QWORD *)(a1 + 3576) = &off_24EC379A0;
  *(_OWORD *)(a1 + 3664) = 0u;
  *(_OWORD *)(a1 + 3680) = 0u;
  *(_BYTE *)(a1 + 3696) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 3704) = off_24EC64EC8;
  *(_QWORD *)(a1 + 3712) = "general__sink_task_skip_updates__count";
  *(_OWORD *)(v2 + 3456) = xmmword_2245F6E40;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_QWORD *)(a1 + 3784) = 0;
  sub_22347922C((int *)v5, a1 + 3704);
  *(_QWORD *)(a1 + 3704) = &off_24EC378C8;
  *(_QWORD *)(a1 + 3792) = 0;
  *(_BYTE *)(a1 + 3800) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 3808) = off_24EC64EC8;
  *(_QWORD *)(a1 + 3816) = "general__sink_task_skip_many_updates__count";
  *(_OWORD *)(a1 + 3824) = xmmword_2245F6E50;
  *(_OWORD *)(a1 + 3840) = 0u;
  *(_OWORD *)(a1 + 3856) = 0u;
  *(_OWORD *)(a1 + 3872) = 0u;
  *(_QWORD *)(a1 + 3888) = 0;
  sub_22347922C((int *)v5, a1 + 3808);
  *(_QWORD *)(a1 + 3808) = &off_24EC378C8;
  *(_QWORD *)(a1 + 3896) = 0;
  *(_BYTE *)(a1 + 3904) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 3912) = off_24EC64EC8;
  *(_QWORD *)(a1 + 3920) = "general__sink_task_skip_large_updates__count";
  *(_OWORD *)(v2 + 3664) = xmmword_2245F6DF0;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3976) = 0u;
  *(_QWORD *)(a1 + 3992) = 0;
  sub_22347922C((int *)v5, a1 + 3912);
  *(_QWORD *)(a1 + 3912) = &off_24EC378C8;
  *(_QWORD *)(a1 + 4000) = 0;
  *(_BYTE *)(a1 + 4008) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 4016) = off_24EC64EC8;
  *(_QWORD *)(a1 + 4024) = "volumetric__meshing_time_per_block__max";
  *(_OWORD *)(a1 + 4032) = xmmword_2245F6E60;
  *(_OWORD *)(a1 + 4048) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_OWORD *)(a1 + 4080) = 0u;
  *(_QWORD *)(a1 + 4096) = 0;
  sub_22347922C((int *)v5, a1 + 4016);
  *(_QWORD *)(a1 + 4016) = &off_24EC379A0;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_BYTE *)(v2 + 3872) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 4144) = off_24EC64EC8;
  *(_QWORD *)(a1 + 4152) = "volumetric__integration_time_per_block__max";
  *(_OWORD *)(a1 + 4160) = xmmword_2245F6E50;
  *(_OWORD *)(a1 + 4176) = 0u;
  *(_OWORD *)(a1 + 4192) = 0u;
  *(_OWORD *)(a1 + 4208) = 0u;
  *(_QWORD *)(a1 + 4224) = 0;
  sub_22347922C((int *)v5, a1 + 4144);
  *(_QWORD *)(a1 + 4144) = &off_24EC379A0;
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_BYTE *)(v2 + 4000) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 4272) = off_24EC64EC8;
  *(_QWORD *)(a1 + 4280) = "volumetric__allocation_time_per_block__max";
  *(_OWORD *)(a1 + 4288) = xmmword_2245F6E70;
  *(_OWORD *)(a1 + 4304) = 0u;
  *(_OWORD *)(a1 + 4320) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_QWORD *)(a1 + 4352) = 0;
  sub_22347922C((int *)v5, a1 + 4272);
  *(_QWORD *)(a1 + 4272) = &off_24EC379A0;
  *(_OWORD *)(a1 + 4360) = 0u;
  *(_OWORD *)(a1 + 4376) = 0u;
  *(_BYTE *)(a1 + 4392) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 4400) = off_24EC64EC8;
  *(_QWORD *)(a1 + 4408) = "general__time_to_reloc__first";
  *(_OWORD *)(a1 + 4416) = xmmword_2245F6E80;
  *(_OWORD *)(a1 + 4432) = 0u;
  *(_OWORD *)(a1 + 4448) = 0u;
  *(_OWORD *)(a1 + 4464) = 0u;
  *(_QWORD *)(a1 + 4480) = 0;
  sub_22347922C((int *)v5, a1 + 4400);
  *(_QWORD *)(a1 + 4400) = &off_24EC37910;
  *(_BYTE *)(a1 + 4488) = 0;
  *(_BYTE *)(a1 + 4496) = 0;
  *(_BYTE *)(a1 + 4504) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 4512) = off_24EC64EC8;
  *(_QWORD *)(a1 + 4520) = "keyframe__update_count__delete__count";
  *(_OWORD *)(a1 + 4528) = xmmword_2245F6E90;
  *(_OWORD *)(a1 + 4544) = 0u;
  *(_OWORD *)(a1 + 4560) = 0u;
  *(_OWORD *)(a1 + 4576) = 0u;
  *(_QWORD *)(a1 + 4592) = 0;
  sub_22347922C((int *)v5, a1 + 4512);
  *(_QWORD *)(a1 + 4512) = &off_24EC378C8;
  *(_QWORD *)(a1 + 4600) = 0;
  *(_BYTE *)(a1 + 4608) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 4616) = off_24EC64EC8;
  *(_QWORD *)(a1 + 4624) = "keyframe__update_count__pose_update__count";
  *(_OWORD *)(a1 + 4632) = xmmword_2245F6E70;
  *(_OWORD *)(a1 + 4648) = 0u;
  *(_OWORD *)(a1 + 4664) = 0u;
  *(_OWORD *)(a1 + 4680) = 0u;
  *(_QWORD *)(a1 + 4696) = 0;
  sub_22347922C((int *)v5, a1 + 4616);
  *(_QWORD *)(a1 + 4616) = &off_24EC378C8;
  *(_QWORD *)(a1 + 4704) = 0;
  *(_BYTE *)(a1 + 4712) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 4720) = off_24EC64EC8;
  *(_QWORD *)(a1 + 4728) = "volumetric__gref_tracking_status__undefined__count";
  *(_OWORD *)(a1 + 4736) = xmmword_2245F6EA0;
  *(_OWORD *)(a1 + 4752) = 0u;
  *(_OWORD *)(a1 + 4768) = 0u;
  *(_OWORD *)(a1 + 4784) = 0u;
  *(_QWORD *)(a1 + 4800) = 0;
  sub_22347922C((int *)v5, a1 + 4720);
  *(_QWORD *)(a1 + 4720) = &off_24EC378C8;
  *(_QWORD *)(a1 + 4808) = 0;
  *(_BYTE *)(a1 + 4816) = 0;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 4824) = off_24EC64EC8;
  *(_QWORD *)(a1 + 4832) = "volumetric__gref_tracking_status__uninitialized__count";
  *(_OWORD *)(a1 + 4840) = xmmword_2245F6EB0;
  *(_OWORD *)(a1 + 4856) = 0u;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_OWORD *)(a1 + 4888) = 0u;
  *(_QWORD *)(a1 + 4904) = 0;
  sub_22347922C((int *)v5, a1 + 4824);
  *(_QWORD *)(a1 + 4824) = &off_24EC378C8;
  *(_QWORD *)(a1 + 4912) = 0;
  *(_BYTE *)(a1 + 4920) = 0;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 4928) = off_24EC64EC8;
  *(_QWORD *)(a1 + 4936) = "volumetric__gref_tracking_status__reloc_succeeds__count";
  *(_OWORD *)(a1 + 4944) = xmmword_2245F6EC0;
  *(_OWORD *)(a1 + 4960) = 0u;
  *(_OWORD *)(a1 + 4976) = 0u;
  *(_OWORD *)(a1 + 4992) = 0u;
  *(_QWORD *)(a1 + 5008) = 0;
  sub_22347922C((int *)v5, a1 + 4928);
  *(_QWORD *)(a1 + 4928) = &off_24EC378C8;
  *(_QWORD *)(a1 + 5016) = 0;
  *(_BYTE *)(a1 + 5024) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 5032) = off_24EC64EC8;
  *(_QWORD *)(a1 + 5040) = "volumetric__gref_tracking_status__reloc_fails__count";
  *(_OWORD *)(a1 + 5048) = xmmword_2245F6ED0;
  *(_OWORD *)(a1 + 5064) = 0u;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_QWORD *)(a1 + 5112) = 0;
  sub_22347922C((int *)v5, a1 + 5032);
  *(_QWORD *)(a1 + 5032) = &off_24EC378C8;
  *(_QWORD *)(a1 + 5120) = 0;
  *(_BYTE *)(a1 + 5128) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 5136) = off_24EC64EC8;
  *(_QWORD *)(a1 + 5144) = "volumetric__gref_tracking_status__in_track__count";
  *(_OWORD *)(a1 + 5152) = xmmword_2245F6EE0;
  *(_OWORD *)(a1 + 5168) = 0u;
  *(_OWORD *)(a1 + 5184) = 0u;
  *(_OWORD *)(a1 + 5200) = 0u;
  *(_QWORD *)(a1 + 5216) = 0;
  sub_22347922C((int *)v5, a1 + 5136);
  *(_QWORD *)(a1 + 5136) = &off_24EC378C8;
  *(_QWORD *)(a1 + 5224) = 0;
  *(_BYTE *)(a1 + 5232) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 5240) = off_24EC64EC8;
  *(_QWORD *)(a1 + 5248) = "volumetric__gref_tracking_status__is_external__count";
  *(_OWORD *)(a1 + 5256) = xmmword_2245F6ED0;
  *(_OWORD *)(a1 + 5272) = 0u;
  *(_OWORD *)(a1 + 5288) = 0u;
  *(_OWORD *)(a1 + 5304) = 0u;
  *(_QWORD *)(a1 + 5320) = 0;
  sub_22347922C((int *)v5, a1 + 5240);
  *(_QWORD *)(a1 + 5240) = &off_24EC378C8;
  *(_QWORD *)(a1 + 5328) = 0;
  *(_BYTE *)(a1 + 5336) = 1;
  v5[0] = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 5344) = off_24EC64EC8;
  *(_QWORD *)(a1 + 5352) = "volumetric__gref_tracking_status__changes_to_external__count";
  *(_OWORD *)(a1 + 5360) = xmmword_2245F6EF0;
  *(_OWORD *)(a1 + 5376) = 0u;
  *(_OWORD *)(a1 + 5392) = 0u;
  *(_OWORD *)(a1 + 5408) = 0u;
  *(_QWORD *)(a1 + 5424) = 0;
  sub_22347922C((int *)v5, a1 + 5344);
  *(_QWORD *)(a1 + 5344) = &off_24EC378C8;
  *(_QWORD *)(a1 + 5432) = 0;
  *(_BYTE *)(a1 + 5440) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 5448) = off_24EC64EC8;
  *(_QWORD *)(a1 + 5456) = "general__num_error_logs__sum";
  *(_OWORD *)(a1 + 5464) = xmmword_2245F6DC0;
  *(_OWORD *)(a1 + 5480) = 0u;
  *(_OWORD *)(a1 + 5496) = 0u;
  *(_OWORD *)(a1 + 5512) = 0u;
  *(_QWORD *)(a1 + 5528) = 0;
  sub_22347922C((int *)v5, a1 + 5448);
  *(_QWORD *)(a1 + 5448) = &off_24EC378C8;
  *(_QWORD *)(a1 + 5536) = 0;
  *(_BYTE *)(a1 + 5544) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 5552) = off_24EC64EC8;
  *(_QWORD *)(a1 + 5560) = "keyframe__num_metadata_corrupted__latest";
  *(_OWORD *)(a1 + 5568) = xmmword_2245F6DE0;
  *(_OWORD *)(a1 + 5584) = 0u;
  *(_OWORD *)(a1 + 5600) = 0u;
  *(_OWORD *)(a1 + 5616) = 0u;
  *(_QWORD *)(a1 + 5632) = 0;
  sub_22347922C((int *)v5, a1 + 5552);
  *(_QWORD *)(a1 + 5552) = &off_24EC377F0;
  *(_BYTE *)(a1 + 5640) = 0;
  *(_BYTE *)(a1 + 5648) = 0;
  *(_BYTE *)(a1 + 5656) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 5664) = off_24EC64EC8;
  *(_QWORD *)(a1 + 5672) = "keyframe__num_data_corrupted__latest";
  *(_OWORD *)(a1 + 5680) = xmmword_2245F6E10;
  *(_OWORD *)(a1 + 5696) = 0u;
  *(_OWORD *)(a1 + 5712) = 0u;
  *(_OWORD *)(a1 + 5728) = 0u;
  *(_QWORD *)(a1 + 5744) = 0;
  sub_22347922C((int *)v5, a1 + 5664);
  *(_QWORD *)(a1 + 5664) = &off_24EC377F0;
  *(_BYTE *)(a1 + 5752) = 0;
  *(_BYTE *)(a1 + 5760) = 0;
  *(_BYTE *)(a1 + 5768) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 5776) = off_24EC64EC8;
  *(_QWORD *)(a1 + 5784) = "volumetric__num_kf_remesh__count";
  *(_OWORD *)(a1 + 5792) = xmmword_2245F6D90;
  *(_OWORD *)(a1 + 5808) = 0u;
  *(_OWORD *)(a1 + 5824) = 0u;
  *(_OWORD *)(a1 + 5840) = 0u;
  *(_QWORD *)(a1 + 5856) = 0;
  sub_22347922C((int *)v5, a1 + 5776);
  *(_QWORD *)(a1 + 5776) = &off_24EC378C8;
  *(_QWORD *)(a1 + 5864) = 0;
  *(_BYTE *)(a1 + 5872) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 5880) = off_24EC64EC8;
  *(_QWORD *)(a1 + 5888) = "rsl__io_switch__count";
  *(_OWORD *)(a1 + 5896) = xmmword_2245F6DA0;
  *(_OWORD *)(a1 + 5912) = 0u;
  *(_OWORD *)(a1 + 5928) = 0u;
  *(_OWORD *)(a1 + 5944) = 0u;
  *(_QWORD *)(a1 + 5960) = 0;
  sub_22347922C((int *)v5, a1 + 5880);
  *(_QWORD *)(a1 + 5880) = &off_24EC378C8;
  *(_QWORD *)(a1 + 5968) = 0;
  *(_BYTE *)(a1 + 5976) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 5984) = off_24EC64EC8;
  *(_QWORD *)(a1 + 5992) = "rsl__height__min";
  *(_OWORD *)(a1 + 6000) = xmmword_2245F6F00;
  *(_OWORD *)(a1 + 6016) = 0u;
  *(_OWORD *)(a1 + 6032) = 0u;
  *(_OWORD *)(a1 + 6048) = 0u;
  *(_QWORD *)(a1 + 6064) = 0;
  sub_22347922C((int *)v5, a1 + 5984);
  *(_QWORD *)(a1 + 5984) = &off_24EC37958;
  *(_OWORD *)(a1 + 6072) = 0u;
  *(_OWORD *)(a1 + 6088) = 0u;
  *(_BYTE *)(a1 + 6104) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 6112) = off_24EC64EC8;
  *(_QWORD *)(a1 + 6120) = "volumetric__semantics_confusion__mean";
  *(_OWORD *)(a1 + 6128) = xmmword_2245F6E90;
  *(_OWORD *)(a1 + 6144) = 0u;
  *(_OWORD *)(a1 + 6160) = 0u;
  *(_OWORD *)(a1 + 6176) = 0u;
  *(_QWORD *)(a1 + 6192) = 0;
  sub_22347922C((int *)v5, a1 + 6112);
  *(_QWORD *)(a1 + 6112) = &off_24EC64F08;
  *(_BYTE *)(a1 + 6200) = 0;
  *(_BYTE *)(a1 + 6208) = 0;
  *(_QWORD *)(a1 + 6216) = 0;
  *(_BYTE *)(a1 + 6224) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 6232) = off_24EC64EC8;
  *(_QWORD *)(a1 + 6240) = "rsl__semantics_confusion__mean";
  *(_OWORD *)(a1 + 6248) = xmmword_2245F6DB0;
  *(_OWORD *)(a1 + 6264) = 0u;
  *(_OWORD *)(a1 + 6280) = 0u;
  *(_OWORD *)(a1 + 6296) = 0u;
  *(_QWORD *)(a1 + 6312) = 0;
  sub_22347922C((int *)v5, a1 + 6232);
  *(_QWORD *)(a1 + 6232) = &off_24EC64F08;
  *(_BYTE *)(a1 + 6320) = 0;
  *(_BYTE *)(a1 + 6328) = 0;
  *(_QWORD *)(a1 + 6336) = 0;
  *(_BYTE *)(a1 + 6344) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 6352) = off_24EC64EC8;
  *(_QWORD *)(a1 + 6360) = "rb__multifloor__duty_cycle";
  *(_OWORD *)(a1 + 6368) = xmmword_2245F6D30;
  *(_OWORD *)(a1 + 6384) = 0u;
  *(_OWORD *)(a1 + 6400) = 0u;
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_QWORD *)(a1 + 6432) = 0;
  sub_22347922C((int *)v5, a1 + 6352);
  *(_QWORD *)(a1 + 6352) = &off_24EC64F08;
  *(_BYTE *)(a1 + 6440) = 0;
  *(_BYTE *)(a1 + 6448) = 0;
  *(_QWORD *)(a1 + 6456) = 0;
  *(_BYTE *)(a1 + 6464) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 6472) = off_24EC64EC8;
  *(_QWORD *)(a1 + 6480) = "rb__num_floor_change__count";
  *(_OWORD *)(a1 + 6488) = xmmword_2245F6D70;
  *(_OWORD *)(a1 + 6504) = 0u;
  *(_OWORD *)(a1 + 6520) = 0u;
  *(_OWORD *)(a1 + 6536) = 0u;
  *(_QWORD *)(a1 + 6552) = 0;
  sub_22347922C((int *)v5, a1 + 6472);
  *(_QWORD *)(a1 + 6472) = &off_24EC378C8;
  *(_QWORD *)(a1 + 6560) = 0;
  *(_BYTE *)(a1 + 6568) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 6576) = off_24EC64EC8;
  *(_QWORD *)(a1 + 6584) = "rb__volume__mean";
  *(_OWORD *)(a1 + 6592) = xmmword_2245F6F00;
  *(_OWORD *)(a1 + 6608) = 0u;
  *(_OWORD *)(a1 + 6624) = 0u;
  *(_OWORD *)(a1 + 6640) = 0u;
  *(_QWORD *)(a1 + 6656) = 0;
  sub_22347922C((int *)v5, a1 + 6576);
  *(_QWORD *)(a1 + 6576) = &off_24EC64F08;
  *(_BYTE *)(a1 + 6664) = 0;
  *(_BYTE *)(a1 + 6672) = 0;
  *(_QWORD *)(a1 + 6680) = 0;
  *(_BYTE *)(a1 + 6688) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 6696) = off_24EC64EC8;
  *(_QWORD *)(a1 + 6704) = "rb__room_volume_change_indicator__sum";
  *(_OWORD *)(a1 + 6712) = xmmword_2245F6E90;
  *(_OWORD *)(a1 + 6728) = 0u;
  *(_OWORD *)(a1 + 6744) = 0u;
  *(_OWORD *)(a1 + 6760) = 0u;
  *(_QWORD *)(a1 + 6776) = 0;
  sub_22347922C((int *)v5, a1 + 6696);
  *(_QWORD *)(a1 + 6696) = &off_24EC378C8;
  *(_QWORD *)(a1 + 6784) = 0;
  *(_BYTE *)(a1 + 6792) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 6800) = off_24EC64EC8;
  *(_QWORD *)(a1 + 6808) = "rb__room_volume_oscillation_indicator__sum";
  *(_OWORD *)(a1 + 6816) = xmmword_2245F6E70;
  *(_OWORD *)(a1 + 6832) = 0u;
  *(_OWORD *)(a1 + 6848) = 0u;
  *(_OWORD *)(a1 + 6864) = 0u;
  *(_QWORD *)(a1 + 6880) = 0;
  sub_22347922C((int *)v5, a1 + 6800);
  *(_QWORD *)(a1 + 6800) = &off_24EC378C8;
  *(_QWORD *)(a1 + 6888) = 0;
  *(_BYTE *)(a1 + 6896) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 6904) = off_24EC64EC8;
  *(_QWORD *)(a1 + 6912) = "rb__room_area__mean";
  *(_OWORD *)(a1 + 6920) = xmmword_2245F6D20;
  *(_OWORD *)(a1 + 6936) = 0u;
  *(_OWORD *)(a1 + 6952) = 0u;
  *(_OWORD *)(a1 + 6968) = 0u;
  *(_QWORD *)(a1 + 6984) = 0;
  sub_22347922C((int *)v5, a1 + 6904);
  *(_QWORD *)(a1 + 6904) = &off_24EC64F08;
  *(_BYTE *)(a1 + 6992) = 0;
  *(_BYTE *)(a1 + 7000) = 0;
  *(_QWORD *)(a1 + 7008) = 0;
  *(_BYTE *)(a1 + 7016) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 7024) = off_24EC64EC8;
  *(_QWORD *)(a1 + 7032) = "rb__room_completeness__min";
  *(_OWORD *)(a1 + 7040) = xmmword_2245F6D30;
  *(_OWORD *)(a1 + 7056) = 0u;
  *(_OWORD *)(a1 + 7072) = 0u;
  *(_OWORD *)(a1 + 7088) = 0u;
  *(_QWORD *)(a1 + 7104) = 0;
  sub_22347922C((int *)v5, a1 + 7024);
  *(_QWORD *)(a1 + 7024) = &off_24EC379E8;
  *(_QWORD *)(a1 + 7120) = 0;
  *(_QWORD *)(a1 + 7112) = 0;
  *(_BYTE *)(a1 + 7128) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 7136) = off_24EC64EC8;
  *(_QWORD *)(a1 + 7144) = "clr__num_clusters__max";
  *(_OWORD *)(a1 + 7152) = xmmword_2245F6DD0;
  *(_OWORD *)(a1 + 7168) = 0u;
  *(_OWORD *)(a1 + 7184) = 0u;
  *(_OWORD *)(a1 + 7200) = 0u;
  *(_QWORD *)(a1 + 7216) = 0;
  sub_22347922C((int *)v5, a1 + 7136);
  *(_QWORD *)(a1 + 7136) = &off_24EC37880;
  *(_OWORD *)(a1 + 7224) = 0u;
  *(_OWORD *)(a1 + 7240) = 0u;
  *(_BYTE *)(a1 + 7256) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 7264) = off_24EC64EC8;
  *(_QWORD *)(a1 + 7272) = "clr__num_clusters__min";
  *(_OWORD *)(a1 + 7280) = xmmword_2245F6DD0;
  *(_OWORD *)(a1 + 7296) = 0u;
  *(_OWORD *)(a1 + 7312) = 0u;
  *(_OWORD *)(a1 + 7328) = 0u;
  *(_QWORD *)(a1 + 7344) = 0;
  sub_22347922C((int *)v5, a1 + 7264);
  *(_QWORD *)(a1 + 7264) = &off_24EC37A30;
  *(_OWORD *)(a1 + 7352) = 0u;
  *(_OWORD *)(a1 + 7368) = 0u;
  *(_BYTE *)(a1 + 7384) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 7392) = off_24EC64EC8;
  *(_QWORD *)(a1 + 7400) = "clr__cluster_change__sum";
  *(_OWORD *)(a1 + 7408) = xmmword_2245F6D50;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_QWORD *)(a1 + 7472) = 0;
  sub_22347922C((int *)v5, a1 + 7392);
  *(_QWORD *)(a1 + 7392) = &off_24EC378C8;
  *(_QWORD *)(a1 + 7480) = 0;
  *(_BYTE *)(a1 + 7488) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 7496) = off_24EC64EC8;
  *(_QWORD *)(a1 + 7504) = "clr__kf_changes__count";
  *(_OWORD *)(a1 + 7512) = xmmword_2245F6DD0;
  *(_OWORD *)(a1 + 7528) = 0u;
  *(_OWORD *)(a1 + 7544) = 0u;
  *(_OWORD *)(a1 + 7560) = 0u;
  *(_QWORD *)(a1 + 7576) = 0;
  sub_22347922C((int *)v5, a1 + 7496);
  *(_QWORD *)(a1 + 7496) = &off_24EC64F08;
  *(_BYTE *)(a1 + 7584) = 0;
  *(_BYTE *)(a1 + 7592) = 0;
  *(_QWORD *)(a1 + 7600) = 0;
  *(_BYTE *)(a1 + 7608) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 7616) = off_24EC64EC8;
  *(_QWORD *)(a1 + 7624) = "clr__current_room_change__count";
  *(_OWORD *)(a1 + 7632) = xmmword_2245F6F10;
  *(_OWORD *)(a1 + 7648) = 0u;
  *(_OWORD *)(a1 + 7664) = 0u;
  *(_OWORD *)(a1 + 7680) = 0u;
  *(_QWORD *)(a1 + 7696) = 0;
  sub_22347922C((int *)v5, a1 + 7616);
  *(_QWORD *)(a1 + 7616) = &off_24EC378C8;
  *(_QWORD *)(a1 + 7704) = 0;
  *(_BYTE *)(a1 + 7712) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 7720) = off_24EC64EC8;
  *(_QWORD *)(a1 + 7728) = "monitoring__mesh_depth_different__count";
  *(_OWORD *)(a1 + 7736) = xmmword_2245F6E60;
  *(_OWORD *)(a1 + 7752) = 0u;
  *(_OWORD *)(a1 + 7768) = 0u;
  *(_OWORD *)(a1 + 7784) = 0u;
  *(_QWORD *)(a1 + 7800) = 0;
  sub_22347922C((int *)v5, a1 + 7720);
  *(_QWORD *)(a1 + 7720) = &off_24EC378C8;
  *(_QWORD *)(a1 + 7808) = 0;
  *(_BYTE *)(a1 + 7816) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 7824) = off_24EC64EC8;
  *(_QWORD *)(a1 + 7832) = "monitoring__mesh_depth_different__duration__max";
  *(_OWORD *)(a1 + 7840) = xmmword_2245F6F20;
  *(_OWORD *)(a1 + 7856) = 0u;
  *(_OWORD *)(a1 + 7872) = 0u;
  *(_OWORD *)(a1 + 7888) = 0u;
  *(_QWORD *)(a1 + 7904) = 0;
  sub_22347922C((int *)v5, a1 + 7824);
  *(_QWORD *)(a1 + 7824) = &off_24EC379A0;
  *(_OWORD *)(a1 + 7912) = 0u;
  *(_OWORD *)(a1 + 7928) = 0u;
  *(_BYTE *)(a1 + 7944) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 7952) = off_24EC64EC8;
  *(_QWORD *)(a1 + 7960) = "rsl__out_of_bounds__count";
  *(_OWORD *)(a1 + 7968) = xmmword_2245F6D40;
  *(_OWORD *)(a1 + 7984) = 0u;
  *(_OWORD *)(a1 + 8000) = 0u;
  *(_OWORD *)(a1 + 8016) = 0u;
  *(_QWORD *)(a1 + 8032) = 0;
  sub_22347922C((int *)v5, a1 + 7952);
  *(_QWORD *)(a1 + 7952) = &off_24EC378C8;
  *(_QWORD *)(a1 + 8040) = 0;
  *(_BYTE *)(a1 + 8048) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 8056) = off_24EC64EC8;
  *(_QWORD *)(a1 + 8064) = "rsl__out_of_bounds__duration__max";
  *(_OWORD *)(a1 + 8072) = xmmword_2245F6D60;
  *(_OWORD *)(a1 + 8088) = 0u;
  *(_OWORD *)(a1 + 8104) = 0u;
  *(_OWORD *)(a1 + 8120) = 0u;
  *(_QWORD *)(a1 + 8136) = 0;
  sub_22347922C((int *)v5, a1 + 8056);
  *(_QWORD *)(a1 + 8056) = &off_24EC379A0;
  *(_OWORD *)(a1 + 8144) = 0u;
  *(_OWORD *)(a1 + 8160) = 0u;
  *(_BYTE *)(a1 + 8176) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 8184) = off_24EC64EC8;
  *(_QWORD *)(a1 + 0x2000) = "si__ceiling_total_ratio__mean";
  *(_OWORD *)(a1 + 8200) = xmmword_2245F6E80;
  *(_OWORD *)(a1 + 8216) = 0u;
  *(_OWORD *)(a1 + 8232) = 0u;
  *(_OWORD *)(a1 + 8248) = 0u;
  *(_QWORD *)(a1 + 8264) = 0;
  sub_22347922C((int *)v5, a1 + 8184);
  *(_QWORD *)(a1 + 8184) = &off_24EC64F08;
  *(_BYTE *)(a1 + 8272) = 0;
  *(_BYTE *)(a1 + 8280) = 0;
  *(_QWORD *)(a1 + 8288) = 0;
  *(_BYTE *)(a1 + 8296) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 8304) = off_24EC64EC8;
  *(_QWORD *)(a1 + 8312) = "si__wall_total_ratio__mean";
  *(_OWORD *)(a1 + 8320) = xmmword_2245F6D30;
  *(_OWORD *)(a1 + 8336) = 0u;
  *(_OWORD *)(a1 + 8352) = 0u;
  *(_OWORD *)(a1 + 8368) = 0u;
  *(_QWORD *)(a1 + 8384) = 0;
  sub_22347922C((int *)v5, a1 + 8304);
  *(_QWORD *)(a1 + 8304) = &off_24EC64F08;
  *(_BYTE *)(a1 + 8392) = 0;
  *(_BYTE *)(a1 + 8400) = 0;
  *(_QWORD *)(a1 + 8408) = 0;
  *(_BYTE *)(a1 + 8416) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 8424) = off_24EC64EC8;
  *(_QWORD *)(a1 + 8432) = "si__floor_total_ratio__mean";
  *(_OWORD *)(a1 + 8440) = xmmword_2245F6D70;
  *(_OWORD *)(a1 + 8456) = 0u;
  *(_OWORD *)(a1 + 8472) = 0u;
  *(_OWORD *)(a1 + 8488) = 0u;
  *(_QWORD *)(a1 + 8504) = 0;
  sub_22347922C((int *)v5, a1 + 8424);
  *(_QWORD *)(a1 + 8424) = &off_24EC64F08;
  *(_BYTE *)(a1 + 8512) = 0;
  *(_BYTE *)(a1 + 8520) = 0;
  *(_QWORD *)(a1 + 8528) = 0;
  *(_BYTE *)(a1 + 8536) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 8544) = off_24EC64EC8;
  *(_QWORD *)(a1 + 8552) = "si__wall_replace_ratio__mean";
  *(_OWORD *)(a1 + 8560) = xmmword_2245F6DC0;
  *(_OWORD *)(a1 + 8576) = 0u;
  *(_OWORD *)(a1 + 8592) = 0u;
  *(_OWORD *)(a1 + 8608) = 0u;
  *(_QWORD *)(a1 + 8624) = 0;
  sub_22347922C((int *)v5, a1 + 8544);
  *(_QWORD *)(a1 + 8544) = &off_24EC64F08;
  *(_BYTE *)(a1 + 8632) = 0;
  *(_BYTE *)(a1 + 8640) = 0;
  *(_QWORD *)(a1 + 8648) = 0;
  *(_BYTE *)(a1 + 8656) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 8664) = off_24EC64EC8;
  *(_QWORD *)(a1 + 8672) = "si__floor_replace_ratio__mean";
  *(_OWORD *)(a1 + 8680) = xmmword_2245F6E80;
  *(_OWORD *)(a1 + 8696) = 0u;
  *(_OWORD *)(a1 + 8712) = 0u;
  *(_OWORD *)(a1 + 8728) = 0u;
  *(_QWORD *)(a1 + 8744) = 0;
  sub_22347922C((int *)v5, a1 + 8664);
  *(_QWORD *)(a1 + 8664) = &off_24EC64F08;
  *(_BYTE *)(a1 + 8752) = 0;
  *(_BYTE *)(a1 + 8760) = 0;
  *(_QWORD *)(a1 + 8768) = 0;
  *(_BYTE *)(a1 + 8776) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 8784) = off_24EC64EC8;
  *(_QWORD *)(a1 + 8792) = "si__top_k_pairs_semantic_index__latest";
  *(_OWORD *)(a1 + 8800) = xmmword_2245F6E40;
  *(_OWORD *)(a1 + 8816) = 0u;
  *(_OWORD *)(a1 + 8832) = 0u;
  *(_OWORD *)(a1 + 8848) = 0u;
  *(_QWORD *)(a1 + 8864) = 0;
  sub_22347922C((int *)v5, a1 + 8784);
  *(_QWORD *)(a1 + 8784) = &off_24EC377F0;
  *(_BYTE *)(a1 + 8872) = 0;
  *(_BYTE *)(a1 + 8880) = 0;
  *(_BYTE *)(a1 + 8888) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 8896) = off_24EC64EC8;
  *(_QWORD *)(a1 + 8904) = "si__top_k_pairs_material_index__latest";
  *(_OWORD *)(a1 + 8912) = xmmword_2245F6E40;
  *(_OWORD *)(a1 + 8928) = 0u;
  *(_OWORD *)(a1 + 8944) = 0u;
  *(_OWORD *)(a1 + 8960) = 0u;
  *(_QWORD *)(a1 + 8976) = 0;
  sub_22347922C((int *)v5, a1 + 8896);
  *(_QWORD *)(a1 + 8896) = &off_24EC377F0;
  *(_BYTE *)(a1 + 8984) = 0;
  *(_BYTE *)(a1 + 8992) = 0;
  *(_BYTE *)(a1 + 9000) = 1;
  v5[0] = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 9008) = off_24EC64EC8;
  *(_QWORD *)(a1 + 9016) = "si__top_k_pairs_ratio__latest";
  *(_OWORD *)(a1 + 9024) = xmmword_2245F6E80;
  *(_OWORD *)(a1 + 9040) = 0u;
  *(_OWORD *)(a1 + 9056) = 0u;
  *(_OWORD *)(a1 + 9072) = 0u;
  *(_QWORD *)(a1 + 9088) = 0;
  sub_22347922C((int *)v5, a1 + 9008);
  *(_QWORD *)(a1 + 9008) = &off_24EC37A78;
  *(_BYTE *)(a1 + 9096) = 0;
  *(_BYTE *)(a1 + 9100) = 0;
  *(_BYTE *)(a1 + 9104) = 1;
  return a1;
}

void sub_2234787F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,_QWORD *a41,_QWORD *a42,_QWORD *a43,_QWORD *a44,_QWORD *a45,_QWORD *a46,_QWORD *a47,_QWORD *a48,_QWORD *a49,_QWORD *a50,_QWORD *a51,_QWORD *a52,_QWORD *a53,_QWORD *a54,_QWORD *a55,_QWORD *a56,_QWORD *a57,_QWORD *a58,_QWORD *a59,_QWORD *a60,_QWORD *a61,_QWORD *a62,_QWORD *a63)
{
  _QWORD *a64;
  _QWORD *a65;
  _QWORD *a66;
  std::mutex *a67;
  std::mutex *a68;
  _QWORD *a69;
  _QWORD *a71;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;

  std::mutex::~mutex((std::mutex *)(v71 + 9032));
  *(_QWORD *)(v71 + 8896) = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 8920));
  *v72 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 8808));
  *v73 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 8688));
  **(_QWORD **)(v77 - 176) = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 8568));
  *v75 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 8448));
  **(_QWORD **)(v77 - 192) = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 8328));
  *v74 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 8208));
  *a10 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 8080));
  **(_QWORD **)(v77 - 144) = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 7976));
  *a11 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 7848));
  *a69 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 7744));
  *a12 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 7640));
  **(_QWORD **)(v77 - 128) = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 7520));
  *(_QWORD *)STACK[0x220] = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 7416));
  *a13 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 7288));
  *a14 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 7160));
  *a15 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 7048));
  **(_QWORD **)(v77 - 224) = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 6928));
  *(_QWORD *)STACK[0x260] = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 6824));
  *(_QWORD *)STACK[0x250] = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 6720));
  **(_QWORD **)(v77 - 240) = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 6600));
  *a16 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 6496));
  *a17 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 6376));
  **(_QWORD **)(v77 - 160) = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 6256));
  *a18 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 6136));
  *a19 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 6008));
  *(_QWORD *)STACK[0x230] = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 5904));
  *a20 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 5800));
  *(_QWORD *)STACK[0x200] = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 5688));
  *(_QWORD *)STACK[0x210] = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 5576));
  *a21 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 5472));
  *a22 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 5368));
  *a71 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 5264));
  *a23 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 5160));
  *a24 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 5056));
  *a25 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 4952));
  *a26 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 4848));
  *a27 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 4744));
  *a28 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 4640));
  *a29 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 4536));
  *a30 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 4424));
  *a31 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 4296));
  *a32 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 4168));
  *a33 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 4040));
  *a34 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 3936));
  *a35 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 3832));
  *a36 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 3728));
  *a37 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 3600));
  *a38 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 3496));
  *a39 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 3368));
  *a40 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 3248));
  *a41 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 3128));
  *a42 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 3008));
  *a43 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 2888));
  *a44 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 2784));
  *a45 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 2672));
  *a46 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 2560));
  *a47 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 2456));
  *a48 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 2344));
  *a49 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 2232));
  *a50 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 2128));
  *a51 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 2008));
  *a52 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 1896));
  *a53 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 1784));
  *a54 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 1672));
  *a55 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 1560));
  *a56 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 1432));
  *a57 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 1312));
  *a58 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 1216));
  *a59 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 1104));
  *a60 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 992));
  *a61 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 880));
  *a62 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 760));
  *a63 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 640));
  *a64 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 544));
  *a65 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 424));
  *a66 = v76;
  std::mutex::~mutex((std::mutex *)(v71 + 304));
  std::mutex::~mutex(a67);
  std::mutex::~mutex(a68);
  sub_2234791DC(v71);
  _Unwind_Resume(a1);
}

void sub_223478DB4()
{
  JUMPOUT(0x223478874);
}

void sub_223478DBC()
{
  JUMPOUT(0x223478888);
}

void sub_223478DC4()
{
  JUMPOUT(0x223478898);
}

void sub_223478DCC()
{
  JUMPOUT(0x2234788ACLL);
}

void sub_223478DD4()
{
  JUMPOUT(0x2234788C0);
}

void sub_223478DDC()
{
  JUMPOUT(0x2234788D4);
}

void sub_223478DE4()
{
  JUMPOUT(0x2234788E8);
}

void sub_223478DEC()
{
  JUMPOUT(0x2234788FCLL);
}

void sub_223478DF4()
{
  JUMPOUT(0x223478910);
}

void sub_223478DFC()
{
  JUMPOUT(0x223478924);
}

void sub_223478E04()
{
  JUMPOUT(0x223478938);
}

void sub_223478E0C()
{
  JUMPOUT(0x22347894CLL);
}

void sub_223478E14()
{
  JUMPOUT(0x223478960);
}

void sub_223478E1C()
{
  JUMPOUT(0x223478974);
}

void sub_223478E24()
{
  JUMPOUT(0x223478988);
}

void sub_223478E2C()
{
  JUMPOUT(0x22347899CLL);
}

void sub_223478E34()
{
  JUMPOUT(0x2234789B0);
}

void sub_223478E3C()
{
  JUMPOUT(0x2234789C4);
}

void sub_223478E44()
{
  JUMPOUT(0x2234789D8);
}

void sub_223478E4C()
{
  JUMPOUT(0x2234789ECLL);
}

void sub_223478E54()
{
  JUMPOUT(0x223478A00);
}

void sub_223478E5C()
{
  JUMPOUT(0x223478A14);
}

void sub_223478E64()
{
  JUMPOUT(0x223478A28);
}

void sub_223478E6C()
{
  JUMPOUT(0x223478A3CLL);
}

void sub_223478E74()
{
  JUMPOUT(0x223478A50);
}

void sub_223478E7C()
{
  JUMPOUT(0x223478A64);
}

void sub_223478E84()
{
  JUMPOUT(0x223478A78);
}

void sub_223478E8C()
{
  JUMPOUT(0x223478A8CLL);
}

void sub_223478E94()
{
  JUMPOUT(0x223478AA0);
}

void sub_223478E9C()
{
  JUMPOUT(0x223478AB4);
}

void sub_223478EA4()
{
  JUMPOUT(0x223478AC8);
}

void sub_223478EAC()
{
  JUMPOUT(0x223478ADCLL);
}

void sub_223478EB4()
{
  JUMPOUT(0x223478AF0);
}

void sub_223478EBC()
{
  JUMPOUT(0x223478B04);
}

void sub_223478EC4()
{
  JUMPOUT(0x223478B18);
}

void sub_223478ECC()
{
  JUMPOUT(0x223478B2CLL);
}

void sub_223478ED4()
{
  JUMPOUT(0x223478B40);
}

void sub_223478EDC()
{
  JUMPOUT(0x223478B54);
}

void sub_223478EE4()
{
  JUMPOUT(0x223478B68);
}

void sub_223478EEC()
{
  JUMPOUT(0x223478B7CLL);
}

void sub_223478EF4()
{
  JUMPOUT(0x223478B8CLL);
}

void sub_223478EFC()
{
  JUMPOUT(0x223478B9CLL);
}

void sub_223478F04()
{
  JUMPOUT(0x223478BACLL);
}

void sub_223478F0C()
{
  JUMPOUT(0x223478BBCLL);
}

void sub_223478F14()
{
  JUMPOUT(0x223478BCCLL);
}

void sub_223478F1C()
{
  JUMPOUT(0x223478BDCLL);
}

void sub_223478F24()
{
  JUMPOUT(0x223478BECLL);
}

void sub_223478F2C()
{
  JUMPOUT(0x223478BFCLL);
}

void sub_223478F34()
{
  JUMPOUT(0x223478C0CLL);
}

void sub_223478F3C()
{
  JUMPOUT(0x223478C1CLL);
}

void sub_223478F44()
{
  JUMPOUT(0x223478C2CLL);
}

void sub_223478F4C()
{
  JUMPOUT(0x223478C3CLL);
}

void sub_223478F54()
{
  JUMPOUT(0x223478C4CLL);
}

void sub_223478F5C()
{
  JUMPOUT(0x223478C5CLL);
}

void sub_223478F64()
{
  JUMPOUT(0x223478C6CLL);
}

void sub_223478F6C()
{
  JUMPOUT(0x223478C7CLL);
}

void sub_223478F74()
{
  JUMPOUT(0x223478C8CLL);
}

void sub_223478F7C()
{
  JUMPOUT(0x223478C9CLL);
}

void sub_223478F84()
{
  JUMPOUT(0x223478CACLL);
}

void sub_223478F8C()
{
  JUMPOUT(0x223478CBCLL);
}

void sub_223478F94()
{
  JUMPOUT(0x223478CCCLL);
}

void sub_223478F9C()
{
  JUMPOUT(0x223478CDCLL);
}

void sub_223478FA4()
{
  JUMPOUT(0x223478CECLL);
}

void sub_223478FAC()
{
  JUMPOUT(0x223478CFCLL);
}

void sub_223478FB4()
{
  JUMPOUT(0x223478D0CLL);
}

void sub_223478FBC()
{
  JUMPOUT(0x223478D1CLL);
}

void sub_223478FC4()
{
  JUMPOUT(0x223478D2CLL);
}

void sub_223478FCC()
{
  JUMPOUT(0x223478D3CLL);
}

void sub_223478FD4()
{
  JUMPOUT(0x223478D4CLL);
}

void sub_223478FDC()
{
  JUMPOUT(0x223478D5CLL);
}

void sub_223478FE4()
{
  JUMPOUT(0x223478D6CLL);
}

void sub_223478FEC()
{
  JUMPOUT(0x223478D7CLL);
}

void sub_223478FF4()
{
  JUMPOUT(0x223478D8CLL);
}

uint64_t sub_223478FFC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_22347902C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_22347905C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_22347908C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_2234790BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_2234790EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_22347911C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_22347914C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_22347917C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_2234791AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_2234791DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_22347922C(int *a1, uint64_t a2)
{
  int v4;
  char **v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;

  v4 = *a1;
  if ((*a1 & 1) != 0)
  {
    v5 = (char **)*((_QWORD *)a1 + 1);
    v7 = v5[1];
    v6 = (unint64_t)v5[2];
    if ((unint64_t)v7 < v6)
    {
      *(_QWORD *)v7 = a2;
      v8 = (uint64_t)(v7 + 8);
LABEL_24:
      v5[1] = (char *)v8;
      goto LABEL_25;
    }
    v9 = *v5;
    v10 = v7 - *v5;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      goto LABEL_74;
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        goto LABEL_75;
      v15 = operator new(8 * v14);
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *(_QWORD *)v16 = a2;
      v8 = (uint64_t)(v16 + 8);
      v18 = (char *)(v7 - v9);
      if (v7 == v9)
        goto LABEL_22;
    }
    else
    {
      v15 = 0;
      v16 = (char *)(8 * v11);
      v17 = 0;
      *(_QWORD *)(8 * v11) = a2;
      v8 = 8 * v11 + 8;
      v18 = (char *)(v7 - v9);
      if (v7 == v9)
      {
LABEL_22:
        *v5 = v16;
        v5[1] = (char *)v8;
        v5[2] = v17;
        if (v7)
        {
          operator delete(v7);
          v4 = *a1;
        }
        goto LABEL_24;
      }
    }
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_78;
    if ((unint64_t)(v7 - v15 - v10) < 0x20)
      goto LABEL_78;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v7[-v21];
    v16 -= v21;
    v23 = &v15[8 * v11 - 16];
    v24 = v7 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v7 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_78:
      do
      {
        v27 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v16 - 1) = v27;
        v16 -= 8;
      }
      while (v7 != v9);
    }
    v7 = *v5;
    goto LABEL_22;
  }
LABEL_25:
  if ((v4 & 2) == 0)
    goto LABEL_49;
  v28 = (_QWORD *)*((_QWORD *)a1 + 1);
  v30 = (char *)v28[4];
  v29 = v28[5];
  if ((unint64_t)v30 >= v29)
  {
    v32 = (char *)v28[3];
    v33 = (v30 - v32) >> 3;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61)
      goto LABEL_74;
    v35 = v29 - (_QWORD)v32;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        goto LABEL_75;
      v37 = (char *)operator new(8 * v36);
      v38 = &v37[8 * v33];
      v39 = &v37[8 * v36];
      *(_QWORD *)v38 = a2;
      v31 = (uint64_t)(v38 + 8);
      v40 = (char *)(v30 - v32);
      if (v30 == v32)
        goto LABEL_46;
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v33);
      v39 = 0;
      *(_QWORD *)(8 * v33) = a2;
      v31 = 8 * v33 + 8;
      v40 = (char *)(v30 - v32);
      if (v30 == v32)
      {
LABEL_46:
        v28[3] = v38;
        v28[4] = v31;
        v28[5] = v39;
        if (v30)
        {
          operator delete(v30);
          v4 = *a1;
        }
        goto LABEL_48;
      }
    }
    v41 = (unint64_t)(v40 - 8);
    if (v41 < 0x58)
      goto LABEL_79;
    if ((unint64_t)(v32 - v37) < 0x20)
      goto LABEL_79;
    v42 = (v41 >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v44 = &v30[-v43];
    v38 -= v43;
    v45 = &v37[8 * v33 - 16];
    v46 = v30 - 16;
    v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *(_OWORD *)v46;
      *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
      *(_OWORD *)v45 = v48;
      v45 -= 32;
      v46 -= 32;
      v47 -= 4;
    }
    while (v47);
    v30 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_79:
      do
      {
        v49 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *((_QWORD *)v38 - 1) = v49;
        v38 -= 8;
      }
      while (v30 != v32);
    }
    v30 = (char *)v28[3];
    goto LABEL_46;
  }
  *(_QWORD *)v30 = a2;
  v31 = (uint64_t)(v30 + 8);
LABEL_48:
  v28[4] = v31;
LABEL_49:
  if ((v4 & 4) == 0)
    return;
  v50 = (_QWORD *)*((_QWORD *)a1 + 1);
  v52 = (char *)v50[7];
  v51 = v50[8];
  if ((unint64_t)v52 >= v51)
  {
    v54 = (char *)v50[6];
    v55 = (v52 - v54) >> 3;
    v56 = v55 + 1;
    if (!((unint64_t)(v55 + 1) >> 61))
    {
      v57 = v51 - (_QWORD)v54;
      if (v57 >> 2 > v56)
        v56 = v57 >> 2;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
        v58 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (!v58)
      {
        v59 = 0;
        v60 = (char *)(8 * v55);
        v61 = 0;
        *(_QWORD *)(8 * v55) = a2;
        v53 = 8 * v55 + 8;
        v62 = (char *)(v52 - v54);
        if (v52 == v54)
          goto LABEL_70;
        goto LABEL_63;
      }
      if (!(v58 >> 61))
      {
        v59 = (char *)operator new(8 * v58);
        v60 = &v59[8 * v55];
        v61 = &v59[8 * v58];
        *(_QWORD *)v60 = a2;
        v53 = (uint64_t)(v60 + 8);
        v62 = (char *)(v52 - v54);
        if (v52 == v54)
        {
LABEL_70:
          v50[6] = v60;
          v50[7] = v53;
          v50[8] = v61;
          if (v52)
            operator delete(v52);
          goto LABEL_72;
        }
LABEL_63:
        v63 = (unint64_t)(v62 - 8);
        if (v63 < 0x58)
          goto LABEL_80;
        if ((unint64_t)(v54 - v59) < 0x20)
          goto LABEL_80;
        v64 = (v63 >> 3) + 1;
        v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
        v66 = &v52[-v65];
        v60 -= v65;
        v67 = &v59[8 * v55 - 16];
        v68 = v52 - 16;
        v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v70 = *(_OWORD *)v68;
          *((_OWORD *)v67 - 1) = *((_OWORD *)v68 - 1);
          *(_OWORD *)v67 = v70;
          v67 -= 32;
          v68 -= 32;
          v69 -= 4;
        }
        while (v69);
        v52 = v66;
        if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_80:
          do
          {
            v71 = *((_QWORD *)v52 - 1);
            v52 -= 8;
            *((_QWORD *)v60 - 1) = v71;
            v60 -= 8;
          }
          while (v52 != v54);
        }
        v52 = (char *)v50[6];
        goto LABEL_70;
      }
LABEL_75:
      sub_223174E94();
    }
LABEL_74:
    sub_22316E078();
  }
  *(_QWORD *)v52 = a2;
  v53 = (uint64_t)(v52 + 8);
LABEL_72:
  v50[7] = v53;
}

void sub_223479634(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_223479674(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(float *)(a1 + 88));
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_2234796C8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2234796DC(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 92))
    *(_DWORD *)(a1 + 88) = 0;
  std::mutex::unlock(v2);
}

void sub_223479714(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_223479754(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 96))
    v5 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(*(_QWORD *)(a1 + 88));
  else
    v5 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_2234797B8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2234797CC(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 104) && *(_BYTE *)(a1 + 96))
    *(_BYTE *)(a1 + 96) = 0;
  std::mutex::unlock(v2);
}

void sub_22347980C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_22347984C(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 96))
    v5 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a1 + 88));
  else
    v5 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_2234798B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2234798C4(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 104) && *(_BYTE *)(a1 + 96))
    *(_BYTE *)(a1 + 96) = 0;
  std::mutex::unlock(v2);
}

void sub_223479904(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_223479944(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 96))
    v5 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(*(_QWORD *)(a1 + 88));
  else
    v5 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_2234799A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2234799BC(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 120))
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 104);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a1 + 112);
  }
  std::mutex::unlock(v2);
}

void sub_223479A00(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_223479A40(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(*(_QWORD *)(a1 + 88));
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_223479A90(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_223479AA4(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 96))
    *(_QWORD *)(a1 + 88) = 0;
  std::mutex::unlock(v2);
}

void sub_223479ADC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_223479B1C(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 96))
    v5 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a1 + 88));
  else
    v5 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_223479B80(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_223479B94(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 104) && *(_BYTE *)(a1 + 96))
    *(_BYTE *)(a1 + 96) = 0;
  std::mutex::unlock(v2);
}

void sub_223479BD4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_223479C14(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 112))
    v5 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a1 + 104));
  else
    v5 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_223479C78(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_223479C8C(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 120))
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 88);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a1 + 96);
  }
  std::mutex::unlock(v2);
}

void sub_223479CD0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_223479D10(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 96))
    v5 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(double *)(a1 + 88));
  else
    v5 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_223479D74(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_223479D88(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 120))
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 104);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a1 + 112);
  }
  std::mutex::unlock(v2);
}

void sub_223479DCC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_223479E0C(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 100))
    v5 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(float *)(a1 + 96));
  else
    v5 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_223479E74(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_223479E88(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 104))
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 88);
    *(_BYTE *)(a1 + 100) = *(_BYTE *)(a1 + 92);
  }
  std::mutex::unlock(v2);
}

void sub_223479ECC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_223479F0C(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 112))
    v5 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(*(_QWORD *)(a1 + 104));
  else
    v5 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_223479F70(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_223479F84(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 120))
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 88);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a1 + 96);
  }
  std::mutex::unlock(v2);
}

uint64_t sub_223479FC8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_223479FF8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24EC64EC8;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  JUMPOUT(0x227684CE8);
}

void sub_22347A038(uint64_t a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::mutex *v4;
  std::__shared_weak_count_vtbl *v5;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 92))
    v5 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(float *)(a1 + 88));
  else
    v5 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  sub_22340E890(a2, v5, 0);
  std::mutex::unlock(v4);
}

void sub_22347A0A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22347A0B4(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 96) && *(_BYTE *)(a1 + 92))
    *(_BYTE *)(a1 + 92) = 0;
  std::mutex::unlock(v2);
}

void sub_22347A0F4(uint64_t a1)
{
  BOOL v1;
  uint64_t v4;
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  _BYTE v25[20];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29[2];
  void *__p[2];
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t (**v55)();
  uint64_t v56[10];
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 616))
    v1 = *(_BYTE *)(a1 + 936) == 0;
  else
    v1 = 1;
  if (!v1 && *(_BYTE *)(a1 + 1032))
  {
    v61 = xmmword_2245F6D10;
    if (!*(_BYTE *)(a1 + 553) || *(_BYTE *)(a1 + 328) == 0)
    {
      v4 = 0;
    }
    else
    {
      v4 = operator new();
      *(_QWORD *)v25 = 0;
      v60 = 0;
      sub_223CA4C1C(v4, a1 + 56, (uint64_t *)v25, &v60);
      if (v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
      if (*(_QWORD *)v25)
        (*(void (**)(_QWORD))(**(_QWORD **)v25 + 8))(*(_QWORD *)v25);
    }
    v59 = v4;
    sub_223484B74((uint64_t **)(a1 + 8), (unsigned __int8 *)&v61, &v61, &v59);
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    *(_OWORD *)&v25[4] = xmmword_2245F7194;
    v26 = *(_OWORD *)algn_2245F71A4;
    v27 = xmmword_2245F71B4;
    *(_WORD *)v25 = 0;
    v28 = unk_2245F71C4;
    v33 = 0u;
    *(_OWORD *)v29 = 0u;
    *(_OWORD *)__p = 0u;
    v31 = 0u;
    v32 = &v33;
    v35 = 0u;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v43 = 0u;
    v42 = 0u;
    v34 = &v35;
    v37 = 0;
    v36 = 0u;
    v38 = 0;
    v44 = 1065353216;
    v46 = 0;
    v45 = 0u;
    v47 = 2;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = &off_24EC24788;
    sub_223484C70(v56);
    v57 = 0;
    v58 = 0;
    sub_223484EE0((uint64_t **)(a1 + 32), (unsigned __int8 *)&v61, &v61, (uint64_t)v25);
    sub_223480A2C((char **)&v36);
    sub_223198030((uint64_t)&v34, (_QWORD *)v35);
    sub_223198030((uint64_t)&v32, (_QWORD *)v33);
    if (__p[1])
    {
      *(void **)&v31 = __p[1];
      operator delete(__p[1]);
    }
    v5 = (char *)v29[0];
    if (v29[0])
    {
      v6 = (char *)v29[1];
      v7 = v29[0];
      if (v29[1] != v29[0])
      {
        do
        {
          v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 28);
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          v6 -= 248;
        }
        while (v6 != v5);
        v7 = v29[0];
      }
      v29[1] = v5;
      operator delete(v7);
    }
    if (*(_BYTE *)(a1 + 616)
      && *(_BYTE *)(a1 + 936)
      && *(_BYTE *)(a1 + 1032)
      && *(_BYTE *)(a1 + 553)
      && *(_BYTE *)(a1 + 328))
    {
      v11 = *(uint64_t ***)(a1 + 16);
      if (!v11)
LABEL_78:
        sub_223198218("map::at:  key not found");
      v12 = *(uint64_t ***)(a1 + 16);
      while (1)
      {
        v13 = *((unsigned __int8 *)v12 + 32);
        if (v61 != v13)
          break;
        v13 = *((unsigned __int8 *)v12 + 33);
        if (BYTE1(v61) != v13)
        {
          v16 = BYTE1(v61);
          if (BYTE1(v61) >= v13)
            goto LABEL_76;
          goto LABEL_38;
        }
        v13 = *((unsigned __int8 *)v12 + 34);
        if (BYTE2(v61) != v13)
        {
          v16 = BYTE2(v61);
          if (BYTE2(v61) >= v13)
            goto LABEL_76;
          goto LABEL_38;
        }
        v13 = *((unsigned __int8 *)v12 + 35);
        if (BYTE3(v61) == v13)
        {
          v14 = *((unsigned __int8 *)v12 + 36);
          v15 = BYTE4(v61);
          if (BYTE4(v61) != v14)
            goto LABEL_55;
          v14 = *((unsigned __int8 *)v12 + 37);
          v15 = BYTE5(v61);
          if (BYTE5(v61) != v14)
            goto LABEL_55;
          v14 = *((unsigned __int8 *)v12 + 38);
          v15 = BYTE6(v61);
          if (BYTE6(v61) != v14)
            goto LABEL_55;
          v14 = *((unsigned __int8 *)v12 + 39);
          v15 = BYTE7(v61);
          if (BYTE7(v61) != v14)
            goto LABEL_55;
          v14 = *((unsigned __int8 *)v12 + 40);
          v15 = BYTE8(v61);
          if (BYTE8(v61) != v14)
            goto LABEL_55;
          v14 = *((unsigned __int8 *)v12 + 41);
          v15 = BYTE9(v61);
          if (BYTE9(v61) != v14)
            goto LABEL_55;
          v14 = *((unsigned __int8 *)v12 + 42);
          v15 = BYTE10(v61);
          if (BYTE10(v61) != v14)
            goto LABEL_55;
          v14 = *((unsigned __int8 *)v12 + 43);
          v15 = BYTE11(v61);
          if (BYTE11(v61) != v14)
            goto LABEL_55;
          v14 = *((unsigned __int8 *)v12 + 44);
          v15 = BYTE12(v61);
          if (BYTE12(v61) != v14
            || (v14 = *((unsigned __int8 *)v12 + 45), v15 = BYTE13(v61), BYTE13(v61) != v14)
            || (v14 = *((unsigned __int8 *)v12 + 46), v15 = BYTE14(v61), BYTE14(v61) != v14)
            || (v14 = *((unsigned __int8 *)v12 + 47), v15 = HIBYTE(v61), HIBYTE(v61) != v14))
          {
LABEL_55:
            if (v15 < v14)
              goto LABEL_38;
          }
          v13 = *((unsigned __int8 *)v12 + 36);
          v16 = BYTE4(v61);
          if (v13 == BYTE4(v61))
          {
            v13 = *((unsigned __int8 *)v12 + 37);
            v16 = BYTE5(v61);
            if (v13 == BYTE5(v61))
            {
              v13 = *((unsigned __int8 *)v12 + 38);
              v16 = BYTE6(v61);
              if (v13 == BYTE6(v61))
              {
                v13 = *((unsigned __int8 *)v12 + 39);
                v16 = BYTE7(v61);
                if (v13 == BYTE7(v61))
                {
                  v13 = *((unsigned __int8 *)v12 + 40);
                  v16 = BYTE8(v61);
                  if (v13 == BYTE8(v61))
                  {
                    v13 = *((unsigned __int8 *)v12 + 41);
                    v16 = BYTE9(v61);
                    if (v13 == BYTE9(v61))
                    {
                      v13 = *((unsigned __int8 *)v12 + 42);
                      v16 = BYTE10(v61);
                      if (v13 == BYTE10(v61))
                      {
                        v13 = *((unsigned __int8 *)v12 + 43);
                        v16 = BYTE11(v61);
                        if (v13 == BYTE11(v61))
                        {
                          v13 = *((unsigned __int8 *)v12 + 44);
                          v16 = BYTE12(v61);
                          if (v13 == BYTE12(v61))
                          {
                            v13 = *((unsigned __int8 *)v12 + 45);
                            v16 = BYTE13(v61);
                            if (v13 == BYTE13(v61))
                            {
                              v13 = *((unsigned __int8 *)v12 + 46);
                              v16 = BYTE14(v61);
                              if (v13 == BYTE14(v61))
                              {
                                v13 = *((unsigned __int8 *)v12 + 47);
                                v16 = HIBYTE(v61);
                                if (v13 == HIBYTE(v61))
                                {
LABEL_79:
                                  if (!v12[6])
                                  {
                                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/CoordinateSystemContainer.cpp", 149, (uint64_t)"coordinate_system_store_.at(cid) != nullptr", 43, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                                    {
                                      abort();
                                    }
                                    v11 = *(uint64_t ***)(a1 + 16);
                                  }
                                  if (!v11)
LABEL_124:
                                    sub_223198218("map::at:  key not found");
                                  while (1)
                                  {
                                    v17 = *((unsigned __int8 *)v11 + 32);
                                    if (v61 == v17)
                                    {
                                      v17 = *((unsigned __int8 *)v11 + 33);
                                      if (BYTE1(v61) == v17)
                                      {
                                        v17 = *((unsigned __int8 *)v11 + 34);
                                        if (BYTE2(v61) == v17)
                                        {
                                          v17 = *((unsigned __int8 *)v11 + 35);
                                          if (BYTE3(v61) == v17)
                                          {
                                            v18 = *((unsigned __int8 *)v11 + 36);
                                            v19 = BYTE4(v61);
                                            if (BYTE4(v61) != v18)
                                              goto LABEL_101;
                                            v18 = *((unsigned __int8 *)v11 + 37);
                                            v19 = BYTE5(v61);
                                            if (BYTE5(v61) != v18)
                                              goto LABEL_101;
                                            v18 = *((unsigned __int8 *)v11 + 38);
                                            v19 = BYTE6(v61);
                                            if (BYTE6(v61) != v18)
                                              goto LABEL_101;
                                            v18 = *((unsigned __int8 *)v11 + 39);
                                            v19 = BYTE7(v61);
                                            if (BYTE7(v61) != v18)
                                              goto LABEL_101;
                                            v18 = *((unsigned __int8 *)v11 + 40);
                                            v19 = BYTE8(v61);
                                            if (BYTE8(v61) != v18)
                                              goto LABEL_101;
                                            v18 = *((unsigned __int8 *)v11 + 41);
                                            v19 = BYTE9(v61);
                                            if (BYTE9(v61) != v18)
                                              goto LABEL_101;
                                            v18 = *((unsigned __int8 *)v11 + 42);
                                            v19 = BYTE10(v61);
                                            if (BYTE10(v61) != v18)
                                              goto LABEL_101;
                                            v18 = *((unsigned __int8 *)v11 + 43);
                                            v19 = BYTE11(v61);
                                            if (BYTE11(v61) != v18)
                                              goto LABEL_101;
                                            v18 = *((unsigned __int8 *)v11 + 44);
                                            v19 = BYTE12(v61);
                                            if (BYTE12(v61) != v18
                                              || (v18 = *((unsigned __int8 *)v11 + 45),
                                                  v19 = BYTE13(v61),
                                                  BYTE13(v61) != v18)
                                              || (v18 = *((unsigned __int8 *)v11 + 46),
                                                  v19 = BYTE14(v61),
                                                  BYTE14(v61) != v18)
                                              || (v18 = *((unsigned __int8 *)v11 + 47),
                                                  v19 = HIBYTE(v61),
                                                  HIBYTE(v61) != v18))
                                            {
LABEL_101:
                                              if (v19 < v18)
                                              {
LABEL_84:
                                                v11 = (uint64_t **)*v11;
                                                if (!v11)
                                                  goto LABEL_124;
                                                continue;
                                              }
                                            }
                                            v17 = *((unsigned __int8 *)v11 + 36);
                                            v20 = BYTE4(v61);
                                            if (v17 == BYTE4(v61))
                                            {
                                              v17 = *((unsigned __int8 *)v11 + 37);
                                              v20 = BYTE5(v61);
                                              if (v17 == BYTE5(v61))
                                              {
                                                v17 = *((unsigned __int8 *)v11 + 38);
                                                v20 = BYTE6(v61);
                                                if (v17 == BYTE6(v61))
                                                {
                                                  v17 = *((unsigned __int8 *)v11 + 39);
                                                  v20 = BYTE7(v61);
                                                  if (v17 == BYTE7(v61))
                                                  {
                                                    v17 = *((unsigned __int8 *)v11 + 40);
                                                    v20 = BYTE8(v61);
                                                    if (v17 == BYTE8(v61))
                                                    {
                                                      v17 = *((unsigned __int8 *)v11 + 41);
                                                      v20 = BYTE9(v61);
                                                      if (v17 == BYTE9(v61))
                                                      {
                                                        v17 = *((unsigned __int8 *)v11 + 42);
                                                        v20 = BYTE10(v61);
                                                        if (v17 == BYTE10(v61))
                                                        {
                                                          v17 = *((unsigned __int8 *)v11 + 43);
                                                          v20 = BYTE11(v61);
                                                          if (v17 == BYTE11(v61))
                                                          {
                                                            v17 = *((unsigned __int8 *)v11 + 44);
                                                            v20 = BYTE12(v61);
                                                            if (v17 == BYTE12(v61))
                                                            {
                                                              v17 = *((unsigned __int8 *)v11 + 45);
                                                              v20 = BYTE13(v61);
                                                              if (v17 == BYTE13(v61))
                                                              {
                                                                v17 = *((unsigned __int8 *)v11 + 46);
                                                                v20 = BYTE14(v61);
                                                                if (v17 == BYTE14(v61))
                                                                {
                                                                  v17 = *((unsigned __int8 *)v11 + 47);
                                                                  v20 = HIBYTE(v61);
                                                                  if (v17 == HIBYTE(v61))
                                                                  {
LABEL_125:
                                                                    v21 = v11[6];
                                                                    v22 = *((unsigned __int8 *)v21 + 104);
                                                                    *(_OWORD *)(v21 + 11) = v61;
                                                                    if (!v22)
                                                                      *((_BYTE *)v21 + 104) = 1;
                                                                    v23 = v21[10];
                                                                    v24 = *(unsigned __int8 *)(v23 + 224);
                                                                    *(_OWORD *)(v23 + 208) = v61;
                                                                    if (!v24)
                                                                      *(_BYTE *)(v23 + 224) = 1;
                                                                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v23 + 200) + 32))(*(_QWORD *)(v23 + 200), &v61);
                                                                    return;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          else
                                          {
                                            v20 = BYTE3(v61);
                                            if (BYTE3(v61) < v17)
                                              goto LABEL_84;
                                          }
                                        }
                                        else
                                        {
                                          v20 = BYTE2(v61);
                                          if (BYTE2(v61) < v17)
                                            goto LABEL_84;
                                        }
                                      }
                                      else
                                      {
                                        v20 = BYTE1(v61);
                                        if (BYTE1(v61) < v17)
                                          goto LABEL_84;
                                      }
                                    }
                                    else
                                    {
                                      v20 = v61;
                                      if (v61 < v17)
                                        goto LABEL_84;
                                    }
                                    if (v17 >= v20)
                                      goto LABEL_125;
                                    v11 = (uint64_t **)v11[1];
                                    if (!v11)
                                      goto LABEL_124;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_76:
          if (v13 >= v16)
            goto LABEL_79;
          v12 = (uint64_t **)v12[1];
          if (!v12)
            goto LABEL_78;
        }
        else
        {
          v16 = BYTE3(v61);
          if (BYTE3(v61) >= v13)
            goto LABEL_76;
LABEL_38:
          v12 = (uint64_t **)*v12;
          if (!v12)
            goto LABEL_78;
        }
      }
      v16 = v61;
      if (v61 >= v13)
        goto LABEL_76;
      goto LABEL_38;
    }
  }
}

void sub_22347A944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = *(_QWORD *)(v10 - 136);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  MEMORY[0x227684CE8](v9, 0x10A1C40D25A436CLL);
  _Unwind_Resume(a1);
}

void sub_22347A990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22347D81C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22347A9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,_QWORD *a28)
{
  uint64_t v28;
  uint64_t v29;
  void **v30;
  void **v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  void **v35;
  void **v36;
  void *v38;
  void *v39;
  void *v40;

  v38 = (void *)STACK[0x8A0];
  if (STACK[0x8A0])
  {
    STACK[0x8A8] = (unint64_t)v38;
    operator delete(v38);
    v39 = (void *)STACK[0x888];
    if (!STACK[0x888])
    {
LABEL_3:
      sub_22319A750(v36);
      sub_223248E48(v35);
      v40 = (void *)STACK[0x830];
      if (!STACK[0x830])
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v39 = (void *)STACK[0x888];
    if (!STACK[0x888])
      goto LABEL_3;
  }
  STACK[0x890] = (unint64_t)v39;
  operator delete(v39);
  sub_22319A750(v36);
  sub_223248E48(v35);
  v40 = (void *)STACK[0x830];
  if (!STACK[0x830])
  {
LABEL_4:
    sub_223481664(v34);
    sub_22347D6FC(v33);
    if (!LOBYTE(STACK[0x7E0]))
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  STACK[0x838] = (unint64_t)v40;
  operator delete(v40);
  sub_223481664(v34);
  sub_22347D6FC(v33);
  if (!LOBYTE(STACK[0x7E0]))
  {
LABEL_6:
    sub_223473EA8(v31);
    sub_223198030(v29, a28);
    sub_223198030(v28, a25);
    sub_22347D774(v30);
    _Unwind_Resume(a1);
  }
LABEL_5:
  sub_2232555B8(v32);
  goto LABEL_6;
}

void sub_22347AA74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 144);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22347AAA0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC37AC0;
  sub_223223FC0(a1 + 56);
  sub_223484A4C(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_2234849F4(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_22347AAE8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC37AC0;
  sub_223223FC0(a1 + 56);
  sub_223484A4C(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_2234849F4(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22347AB40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  unsigned int v20;
  int v22;

  v4 = a1 + 8;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_13;
  v6 = a1 + 8;
  do
  {
    v7 = sub_22319835C((unsigned __int8 *)(v5 + 25), (unsigned __int8 *)a2);
    if (v7 >= 0)
      v8 = (uint64_t *)v5;
    else
      v8 = (uint64_t *)(v5 + 8);
    if (v7 >= 0)
      v6 = v5;
    v5 = *v8;
  }
  while (*v8);
  if (v6 == v4 || (sub_22319835C((unsigned __int8 *)a2, (unsigned __int8 *)(v6 + 25)) & 0x80) != 0)
  {
LABEL_13:
    v12 = a1 + 32;
    v13 = *(_QWORD *)(a1 + 32);
    if (!v13)
      goto LABEL_23;
    v14 = a1 + 32;
    do
    {
      v15 = sub_22319835C((unsigned __int8 *)(v13 + 25), (unsigned __int8 *)a2);
      if (v15 >= 0)
        v16 = (uint64_t *)v13;
      else
        v16 = (uint64_t *)(v13 + 8);
      if (v15 >= 0)
        v14 = v13;
      v13 = *v16;
    }
    while (*v16);
    if (v14 == v12 || (sub_22319835C((unsigned __int8 *)a2, (unsigned __int8 *)(v14 + 25)) & 0x80) != 0)
LABEL_23:
      v14 = a1 + 32;
    v9 = (v14 != v12) << 8;
    v10 = a1 + 56;
    v11 = *(_QWORD *)(a1 + 56);
    if (!v11)
      goto LABEL_34;
  }
  else
  {
    v9 = 256;
    v10 = a1 + 56;
    v11 = *(_QWORD *)(a1 + 56);
    if (!v11)
    {
LABEL_34:
      v17 = v10;
      goto LABEL_35;
    }
  }
  v17 = v10;
  do
  {
    v18 = sub_22319835C((unsigned __int8 *)(v11 + 25), (unsigned __int8 *)a2);
    if (v18 >= 0)
      v19 = (uint64_t *)v11;
    else
      v19 = (uint64_t *)(v11 + 8);
    if (v18 >= 0)
      v17 = v11;
    v11 = *v19;
  }
  while (*v19);
  if (v17 == v10 || (sub_22319835C((unsigned __int8 *)a2, (unsigned __int8 *)(v17 + 25)) & 0x80) != 0)
    goto LABEL_34;
LABEL_35:
  v20 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
  {
    v22 = *(_QWORD *)(a1 + 72) == *(_QWORD *)a2 && *(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 8);
    v20 = v22 << 16;
  }
  return v9 | (v17 != v10) | v20;
}

void sub_22347ACB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t **a6@<X8>)
{
  unsigned __int8 *v7;
  uint64_t **v8;
  uint64_t ***v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t **v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t *v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unsigned __int8 *v91;
  uint64_t **v92;
  unsigned __int8 *v93;
  uint64_t **v94;
  unsigned int v95;
  unsigned int v96;
  BOOL v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t *v102;
  unsigned int v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  __int128 v108;
  void **v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void **v116;
  char *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  char *v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  _QWORD *v127;
  uint64_t *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t *v140;
  unsigned int v141;
  unsigned int v142;
  BOOL v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  char v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  __int128 *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  double v173;
  float32x2_t v174;
  double v175;
  float32x4_t v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t **v180;
  uint64_t **v181;
  unsigned int v182;
  unsigned int v183;
  BOOL v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  _OWORD *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t *v191;
  _QWORD *v192;
  uint64_t *v193;
  unsigned int v194;
  unsigned int v195;
  BOOL v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  _OWORD *v200;
  uint64_t *v201;
  char *v202;
  char *v203;
  void *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unsigned __int8 *v208;
  unsigned __int8 *v209;
  uint64_t *v210;
  char *v211;
  char *v212;
  void *v213;
  unsigned __int8 *v214;
  uint64_t *v215;
  char *v216;
  unsigned __int8 *v217;
  uint64_t *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  char *v222;
  char *v223;
  void *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 **v238;
  std::__shared_weak_count *v240;
  void *v241;
  char *v242;
  void *v243;
  char *v244;
  unint64_t v245;
  uint64_t v246;
  void *v247;
  char *v248;
  void *v249;
  void *v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  _BYTE v255[36];
  __int128 v256;
  __int128 v257;
  __int128 v258;
  _QWORD v259[4];
  _QWORD **v260;
  _QWORD *v261;
  uint64_t v262;
  _QWORD **v263;
  _QWORD *v264;
  uint64_t v265;
  char *v266[3];
  char v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  char v272;
  char v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  char *v277[11];
  char v278;
  char v279;
  char v280;
  __int128 v281;
  __int128 v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  uint64_t (**v295)();
  uint64_t v296[10];
  int v297;
  unsigned __int8 *v298[4];
  int v299;
  _BYTE v300[20];
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  void *v310[7];

  v310[4] = *(void **)MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v7 = (unsigned __int8 *)a5[3];
  v230 = a5;
  if (v7 != (unsigned __int8 *)(a5 + 4))
  {
    v8 = (uint64_t **)(a1 + 16);
    v9 = (uint64_t ***)(a1 + 40);
    do
    {
      v10 = (unsigned __int8 *)*v8;
      if (!*v8)
        goto LABEL_685;
      v11 = (unsigned __int8 *)(a1 + 16);
      do
      {
        v12 = v10[32];
        v13 = v7[25];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[33];
        v13 = v7[26];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[34];
        v13 = v7[27];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[35];
        v13 = v7[28];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[36];
        v13 = v7[29];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[37];
        v13 = v7[30];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[38];
        v13 = v7[31];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[39];
        v13 = v7[32];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[40];
        v13 = v7[33];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[41];
        v13 = v7[34];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[42];
        v13 = v7[35];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[43];
        v13 = v7[36];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[44];
        v13 = v7[37];
        if (v12 != v13)
          goto LABEL_23;
        v12 = v10[45];
        v13 = v7[38];
        if (v12 == v13 && (v12 = v10[46], v13 = v7[39], v12 == v13) && (v12 = v10[47], v13 = v7[40], v12 == v13))
        {
          v11 = v10;
        }
        else
        {
LABEL_23:
          if (v12 < v13)
            v10 += 8;
          else
            v11 = v10;
        }
        v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
      if (v11 == (unsigned __int8 *)v8 || (sub_22319835C(v7 + 25, v11 + 32) & 0x80) != 0)
      {
LABEL_685:
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/CoordinateSystemContainer.cpp", 59, (uint64_t)"coordinate_system_store_.contains(cid) && \"Cluster not found!\"", 62, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
      }
      v14 = *v8;
      if (*v8)
      {
        v15 = (uint64_t *)(a1 + 16);
        do
        {
          v16 = *((unsigned __int8 *)v14 + 32);
          v17 = v7[25];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 33);
          v17 = v7[26];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 34);
          v17 = v7[27];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 35);
          v17 = v7[28];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 36);
          v17 = v7[29];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 37);
          v17 = v7[30];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 38);
          v17 = v7[31];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 39);
          v17 = v7[32];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 40);
          v17 = v7[33];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 41);
          v17 = v7[34];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 42);
          v17 = v7[35];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 43);
          v17 = v7[36];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 44);
          v17 = v7[37];
          if (v16 != v17)
            goto LABEL_49;
          v16 = *((unsigned __int8 *)v14 + 45);
          v17 = v7[38];
          if (v16 == v17
            && (v16 = *((unsigned __int8 *)v14 + 46), v17 = v7[39], v16 == v17)
            && (v16 = *((unsigned __int8 *)v14 + 47), v17 = v7[40], v16 == v17))
          {
            v15 = v14;
          }
          else
          {
LABEL_49:
            if (v16 < v17)
              ++v14;
            else
              v15 = v14;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
        if (v15 != (uint64_t *)v8 && (sub_22319835C(v7 + 25, (unsigned __int8 *)v15 + 32) & 0x80) == 0)
        {
          v18 = (uint64_t *)v15[1];
          v19 = v15;
          if (v18)
          {
            do
            {
              v20 = v18;
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v20 = (uint64_t *)v19[2];
              v41 = *v20 == (_QWORD)v19;
              v19 = v20;
            }
            while (!v41);
          }
          if (*(uint64_t **)(a1 + 8) == v15)
            *(_QWORD *)(a1 + 8) = v20;
          v21 = *(uint64_t **)(a1 + 16);
          --*(_QWORD *)(a1 + 24);
          sub_2231AFE60(v21, v15);
          v22 = v15[6];
          v15[6] = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          operator delete(v15);
        }
      }
      v23 = *v9;
      if (*v9)
      {
        v24 = (uint64_t *)(a1 + 40);
        do
        {
          v25 = *((unsigned __int8 *)v23 + 32);
          v26 = v7[25];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 33);
          v26 = v7[26];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 34);
          v26 = v7[27];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 35);
          v26 = v7[28];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 36);
          v26 = v7[29];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 37);
          v26 = v7[30];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 38);
          v26 = v7[31];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 39);
          v26 = v7[32];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 40);
          v26 = v7[33];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 41);
          v26 = v7[34];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 42);
          v26 = v7[35];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 43);
          v26 = v7[36];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 44);
          v26 = v7[37];
          if (v25 != v26)
            goto LABEL_84;
          v25 = *((unsigned __int8 *)v23 + 45);
          v26 = v7[38];
          if (v25 == v26
            && (v25 = *((unsigned __int8 *)v23 + 46), v26 = v7[39], v25 == v26)
            && (v25 = *((unsigned __int8 *)v23 + 47), v26 = v7[40], v25 == v26))
          {
            v24 = (uint64_t *)v23;
          }
          else
          {
LABEL_84:
            if (v25 < v26)
              ++v23;
            else
              v24 = (uint64_t *)v23;
          }
          v23 = (uint64_t **)*v23;
        }
        while (v23);
        if (v24 != (uint64_t *)v9 && (sub_22319835C(v7 + 25, (unsigned __int8 *)v24 + 32) & 0x80) == 0)
        {
          v27 = (uint64_t *)v24[1];
          v28 = v24;
          if (v27)
          {
            do
            {
              v29 = v27;
              v27 = (uint64_t *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v29 = (uint64_t *)v28[2];
              v41 = *v29 == (_QWORD)v28;
              v28 = v29;
            }
            while (!v41);
          }
          if (*(uint64_t **)(a1 + 32) == v24)
            *(_QWORD *)(a1 + 32) = v29;
          v30 = *(uint64_t **)(a1 + 40);
          --*(_QWORD *)(a1 + 48);
          sub_2231AFE60(v30, v24);
          sub_223484A94((uint64_t)(v24 + 4));
          operator delete(v24);
        }
      }
      v31 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = *(unsigned __int8 **)v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
          v41 = *(_QWORD *)v32 == (_QWORD)v7;
          v7 = v32;
        }
        while (!v41);
      }
      v7 = v32;
    }
    while (v32 != (unsigned __int8 *)(a5 + 4));
  }
  v33 = (_QWORD *)*a5;
  v34 = a1;
  if ((_QWORD *)*a5 != a5 + 1)
  {
    v35 = (uint64_t **)(a1 + 16);
    do
    {
      v36 = (unsigned __int8 *)v33 + 25;
      v37 = (unsigned __int8 *)*v35;
      if (*v35)
      {
        v38 = (unsigned __int8 *)(a1 + 16);
        do
        {
          v39 = v37[32];
          v40 = *((unsigned __int8 *)v33 + 25);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[33];
          v40 = *((unsigned __int8 *)v33 + 26);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[34];
          v40 = *((unsigned __int8 *)v33 + 27);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[35];
          v40 = *((unsigned __int8 *)v33 + 28);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[36];
          v40 = *((unsigned __int8 *)v33 + 29);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[37];
          v40 = *((unsigned __int8 *)v33 + 30);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[38];
          v40 = *((unsigned __int8 *)v33 + 31);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[39];
          v40 = *((unsigned __int8 *)v33 + 32);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[40];
          v40 = *((unsigned __int8 *)v33 + 33);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[41];
          v40 = *((unsigned __int8 *)v33 + 34);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[42];
          v40 = *((unsigned __int8 *)v33 + 35);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[43];
          v40 = *((unsigned __int8 *)v33 + 36);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[44];
          v40 = *((unsigned __int8 *)v33 + 37);
          if (v39 != v40)
            goto LABEL_126;
          v39 = v37[45];
          v40 = *((unsigned __int8 *)v33 + 38);
          if (v39 == v40
            && (v39 = v37[46], v40 = *((unsigned __int8 *)v33 + 39), v39 == v40)
            && (v39 = v37[47], v40 = *((unsigned __int8 *)v33 + 40), v39 == v40))
          {
            v38 = v37;
          }
          else
          {
LABEL_126:
            if (v39 < v40)
              v37 += 8;
            else
              v38 = v37;
          }
          v37 = *(unsigned __int8 **)v37;
        }
        while (v37);
        if (v38 != (unsigned __int8 *)v35
          && ((char)sub_22319835C((unsigned __int8 *)v33 + 25, v38 + 32) & 0x80000000) == 0
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/CoordinateSystemContainer.cpp", 65, (uint64_t)"!coordinate_system_store_.contains(cid) && \"Cluster already exist!\"", 67, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
      }
      if (*(_BYTE *)(v34 + 616))
        v41 = *(_BYTE *)(v34 + 936) == 0;
      else
        v41 = 1;
      v42 = v41 || *(_BYTE *)(v34 + 1032) == 0;
      if (v42 || (*(_BYTE *)(v34 + 553) ? (v43 = *(_BYTE *)(v34 + 328) == 0) : (v43 = 1), v43))
      {
        v71 = 0;
      }
      else
      {
        v71 = operator new();
        *(_QWORD *)v255 = 0;
        *(_QWORD *)v300 = 0;
        sub_223CA4C1C(v71, a1 + 56, (uint64_t *)v255, (uint64_t *)v300);
        if (*(_QWORD *)v300)
          (*(void (**)(_QWORD))(**(_QWORD **)v300 + 8))(*(_QWORD *)v300);
        if (*(_QWORD *)v255)
          (*(void (**)(_QWORD))(**(_QWORD **)v255 + 8))(*(_QWORD *)v255);
      }
      v246 = v71;
      sub_223484B74((uint64_t **)(a1 + 8), (unsigned __int8 *)v33 + 25, (_QWORD *)((char *)v33 + 25), &v246);
      if (v246)
        (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
      *(_WORD *)v255 = 0;
      *(_OWORD *)&v255[4] = xmmword_2245F7194;
      *(_OWORD *)&v255[20] = *(_OWORD *)algn_2245F71A4;
      v256 = xmmword_2245F71B4;
      v257 = unk_2245F71C4;
      v261 = 0;
      v262 = 0;
      v258 = 0u;
      memset(v259, 0, sizeof(v259));
      v264 = 0;
      v265 = 0;
      v260 = &v261;
      v263 = &v264;
      v278 = 0;
      v279 = 0;
      v280 = 0;
      v281 = 0u;
      v282 = 0u;
      memset(v266, 0, sizeof(v266));
      v267 = 0;
      v283 = 1065353216;
      v285 = 0;
      v286 = 0;
      v284 = 0;
      v287 = 2;
      v288 = 0u;
      v289 = 0u;
      v290 = 0u;
      v291 = 0u;
      v292 = 0u;
      v293 = 0u;
      v294 = 0u;
      v295 = &off_24EC24788;
      sub_223484C70(&v296);
      LOBYTE(v297) = 0;
      HIBYTE(v297) = 0;
      sub_223484EE0((uint64_t **)(a1 + 32), (unsigned __int8 *)v33 + 25, (_QWORD *)((char *)v33 + 25), (uint64_t)v255);
      sub_223480A2C(v266);
      sub_223198030((uint64_t)&v263, v264);
      sub_223198030((uint64_t)&v260, v261);
      if (v259[1])
      {
        v259[2] = v259[1];
        operator delete((void *)v259[1]);
      }
      v44 = v258;
      if ((_QWORD)v258)
      {
        v45 = *((_QWORD *)&v258 + 1);
        v46 = (void *)v258;
        if (*((_QWORD *)&v258 + 1) != (_QWORD)v258)
        {
          do
          {
            v47 = *(std::__shared_weak_count **)(v45 - 224);
            if (v47)
            {
              p_shared_owners = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(p_shared_owners);
              while (__stlxr(v49 - 1, p_shared_owners));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v45 -= 248;
          }
          while (v45 != v44);
          v46 = (void *)v258;
        }
        *((_QWORD *)&v258 + 1) = v44;
        operator delete(v46);
      }
      v50 = *v35;
      v34 = a1;
      if (!*v35)
LABEL_674:
        sub_223198218("map::at:  key not found");
      v51 = *((unsigned __int8 *)v33 + 25);
      v52 = *v35;
      while (1)
      {
        v53 = *((unsigned __int8 *)v52 + 32);
        v54 = v51 >= v53;
        if (v51 == v53)
          break;
        v55 = *((unsigned __int8 *)v33 + 25);
LABEL_195:
        if (v54)
        {
LABEL_197:
          if (v53 >= v55)
            goto LABEL_200;
          v52 = (uint64_t *)v52[1];
          if (!v52)
            goto LABEL_674;
        }
        else
        {
LABEL_163:
          v52 = (uint64_t *)*v52;
          if (!v52)
            goto LABEL_674;
        }
      }
      v55 = *((unsigned __int8 *)v33 + 26);
      v53 = *((unsigned __int8 *)v52 + 33);
      v54 = v55 >= v53;
      if (v55 != v53)
        goto LABEL_195;
      v55 = *((unsigned __int8 *)v33 + 27);
      v53 = *((unsigned __int8 *)v52 + 34);
      v54 = v55 >= v53;
      if (v55 != v53)
        goto LABEL_195;
      v55 = *((unsigned __int8 *)v33 + 28);
      v53 = *((unsigned __int8 *)v52 + 35);
      v54 = v55 >= v53;
      if (v55 != v53)
        goto LABEL_195;
      v56 = *((unsigned __int8 *)v33 + 29);
      v57 = *((unsigned __int8 *)v52 + 36);
      if (v56 != v57)
        goto LABEL_180;
      v56 = *((unsigned __int8 *)v33 + 30);
      v57 = *((unsigned __int8 *)v52 + 37);
      if (v56 != v57)
        goto LABEL_180;
      v56 = *((unsigned __int8 *)v33 + 31);
      v57 = *((unsigned __int8 *)v52 + 38);
      if (v56 != v57)
        goto LABEL_180;
      v56 = *((unsigned __int8 *)v33 + 32);
      v57 = *((unsigned __int8 *)v52 + 39);
      if (v56 != v57)
        goto LABEL_180;
      v56 = *((unsigned __int8 *)v33 + 33);
      v57 = *((unsigned __int8 *)v52 + 40);
      if (v56 != v57)
        goto LABEL_180;
      v56 = *((unsigned __int8 *)v33 + 34);
      v57 = *((unsigned __int8 *)v52 + 41);
      if (v56 != v57)
        goto LABEL_180;
      v56 = *((unsigned __int8 *)v33 + 35);
      v57 = *((unsigned __int8 *)v52 + 42);
      if (v56 != v57)
        goto LABEL_180;
      v56 = *((unsigned __int8 *)v33 + 36);
      v57 = *((unsigned __int8 *)v52 + 43);
      if (v56 != v57)
        goto LABEL_180;
      v56 = *((unsigned __int8 *)v33 + 37);
      v57 = *((unsigned __int8 *)v52 + 44);
      if (v56 != v57
        || (v56 = *((unsigned __int8 *)v33 + 38), v57 = *((unsigned __int8 *)v52 + 45), v56 != v57)
        || (v56 = *((unsigned __int8 *)v33 + 39), v57 = *((unsigned __int8 *)v52 + 46), v56 != v57)
        || (v56 = *((unsigned __int8 *)v33 + 40), v57 = *((unsigned __int8 *)v52 + 47), v56 != v57))
      {
LABEL_180:
        if (v56 < v57)
          goto LABEL_163;
      }
      v53 = *((unsigned __int8 *)v52 + 36);
      v55 = *((unsigned __int8 *)v33 + 29);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 37);
      v55 = *((unsigned __int8 *)v33 + 30);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 38);
      v55 = *((unsigned __int8 *)v33 + 31);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 39);
      v55 = *((unsigned __int8 *)v33 + 32);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 40);
      v55 = *((unsigned __int8 *)v33 + 33);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 41);
      v55 = *((unsigned __int8 *)v33 + 34);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 42);
      v55 = *((unsigned __int8 *)v33 + 35);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 43);
      v55 = *((unsigned __int8 *)v33 + 36);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 44);
      v55 = *((unsigned __int8 *)v33 + 37);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 45);
      v55 = *((unsigned __int8 *)v33 + 38);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 46);
      v55 = *((unsigned __int8 *)v33 + 39);
      if (v53 != v55)
        goto LABEL_197;
      v53 = *((unsigned __int8 *)v52 + 47);
      v55 = *((unsigned __int8 *)v33 + 40);
      if (v53 != v55)
        goto LABEL_197;
LABEL_200:
      if (!v52[6])
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/CoordinateSystemContainer.cpp", 68, (uint64_t)"coordinate_system_store_.at(cid) != nullptr", 43, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v50 = *v35;
      }
      if (!v50)
LABEL_675:
        sub_223198218("map::at:  key not found");
      v58 = *v36;
      while (2)
      {
        while (2)
        {
          v59 = *((unsigned __int8 *)v50 + 32);
          v60 = v58 >= v59;
          if (v58 != v59)
          {
            v61 = *v36;
LABEL_237:
            if (!v60)
              goto LABEL_205;
LABEL_239:
            if (v59 >= v61)
              goto LABEL_242;
            v50 = (uint64_t *)v50[1];
            if (!v50)
              goto LABEL_675;
            continue;
          }
          break;
        }
        v61 = *((unsigned __int8 *)v33 + 26);
        v59 = *((unsigned __int8 *)v50 + 33);
        v60 = v61 >= v59;
        if (v61 != v59)
          goto LABEL_237;
        v61 = *((unsigned __int8 *)v33 + 27);
        v59 = *((unsigned __int8 *)v50 + 34);
        v60 = v61 >= v59;
        if (v61 != v59)
          goto LABEL_237;
        v61 = *((unsigned __int8 *)v33 + 28);
        v59 = *((unsigned __int8 *)v50 + 35);
        v60 = v61 >= v59;
        if (v61 != v59)
          goto LABEL_237;
        v62 = *((unsigned __int8 *)v33 + 29);
        v63 = *((unsigned __int8 *)v50 + 36);
        if (v62 != v63)
          goto LABEL_222;
        v62 = *((unsigned __int8 *)v33 + 30);
        v63 = *((unsigned __int8 *)v50 + 37);
        if (v62 != v63)
          goto LABEL_222;
        v62 = *((unsigned __int8 *)v33 + 31);
        v63 = *((unsigned __int8 *)v50 + 38);
        if (v62 != v63)
          goto LABEL_222;
        v62 = *((unsigned __int8 *)v33 + 32);
        v63 = *((unsigned __int8 *)v50 + 39);
        if (v62 != v63)
          goto LABEL_222;
        v62 = *((unsigned __int8 *)v33 + 33);
        v63 = *((unsigned __int8 *)v50 + 40);
        if (v62 != v63)
          goto LABEL_222;
        v62 = *((unsigned __int8 *)v33 + 34);
        v63 = *((unsigned __int8 *)v50 + 41);
        if (v62 != v63)
          goto LABEL_222;
        v62 = *((unsigned __int8 *)v33 + 35);
        v63 = *((unsigned __int8 *)v50 + 42);
        if (v62 != v63)
          goto LABEL_222;
        v62 = *((unsigned __int8 *)v33 + 36);
        v63 = *((unsigned __int8 *)v50 + 43);
        if (v62 != v63)
          goto LABEL_222;
        v62 = *((unsigned __int8 *)v33 + 37);
        v63 = *((unsigned __int8 *)v50 + 44);
        if (v62 != v63
          || (v62 = *((unsigned __int8 *)v33 + 38), v63 = *((unsigned __int8 *)v50 + 45), v62 != v63)
          || (v62 = *((unsigned __int8 *)v33 + 39), v63 = *((unsigned __int8 *)v50 + 46), v62 != v63)
          || (v62 = *((unsigned __int8 *)v33 + 40), v63 = *((unsigned __int8 *)v50 + 47), v62 != v63))
        {
LABEL_222:
          if (v62 < v63)
          {
LABEL_205:
            v50 = (uint64_t *)*v50;
            if (!v50)
              goto LABEL_675;
            continue;
          }
        }
        break;
      }
      v59 = *((unsigned __int8 *)v50 + 36);
      v61 = *((unsigned __int8 *)v33 + 29);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 37);
      v61 = *((unsigned __int8 *)v33 + 30);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 38);
      v61 = *((unsigned __int8 *)v33 + 31);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 39);
      v61 = *((unsigned __int8 *)v33 + 32);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 40);
      v61 = *((unsigned __int8 *)v33 + 33);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 41);
      v61 = *((unsigned __int8 *)v33 + 34);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 42);
      v61 = *((unsigned __int8 *)v33 + 35);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 43);
      v61 = *((unsigned __int8 *)v33 + 36);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 44);
      v61 = *((unsigned __int8 *)v33 + 37);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 45);
      v61 = *((unsigned __int8 *)v33 + 38);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 46);
      v61 = *((unsigned __int8 *)v33 + 39);
      if (v59 != v61)
        goto LABEL_239;
      v59 = *((unsigned __int8 *)v50 + 47);
      v61 = *((unsigned __int8 *)v33 + 40);
      if (v59 != v61)
        goto LABEL_239;
LABEL_242:
      v64 = v50[6];
      v65 = *(unsigned __int8 *)(v64 + 104);
      *(_OWORD *)(v64 + 88) = *(_OWORD *)v36;
      if (v65)
      {
        v66 = *(_QWORD *)(v64 + 80);
        v67 = *(unsigned __int8 *)(v66 + 224);
        *(_OWORD *)(v66 + 208) = *(_OWORD *)v36;
        if (v67)
          goto LABEL_244;
LABEL_251:
        *(_BYTE *)(v66 + 224) = 1;
      }
      else
      {
        *(_BYTE *)(v64 + 104) = 1;
        v66 = *(_QWORD *)(v64 + 80);
        v70 = *(unsigned __int8 *)(v66 + 224);
        *(_OWORD *)(v66 + 208) = *(_OWORD *)v36;
        if (!v70)
          goto LABEL_251;
      }
LABEL_244:
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v66 + 200) + 32))(*(_QWORD *)(v66 + 200), (uint64_t)v33 + 25);
      v68 = (_QWORD *)v33[1];
      if (v68)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v33[2];
          v41 = *v69 == (_QWORD)v33;
          v33 = v69;
        }
        while (!v41);
      }
      v33 = v69;
    }
    while (v69 != a5 + 1);
  }
  if (!*(_BYTE *)(a2 + 2312))
    sub_22324A974();
  LOBYTE(v246) = *(_BYTE *)(a2 + 2192);
  sub_22347F1D8(&v247, (uint64_t *)(a2 + 2200));
  v251 = *(_OWORD *)(a2 + 2248);
  v252 = *(_OWORD *)(a2 + 2264);
  v253 = *(_OWORD *)(a2 + 2280);
  v254 = *(_OWORD *)(a2 + 2296);
  if (*(_BYTE *)(a2 + 1832))
  {
    if (*(_BYTE *)(a2 + 1616))
      v72 = a2 + 1416;
    else
      v72 = 0;
    v233 = a2 + 1344;
    v234 = *(unsigned __int8 *)(a2 + 1616);
    v232 = 1;
  }
  else
  {
    v232 = 0;
    v233 = 0;
    v72 = 0;
    v234 = 0;
  }
  v73 = (uint64_t)a5;
  a6[1] = 0;
  v74 = (uint64_t *)(a6 + 1);
  a6[2] = 0;
  *a6 = (uint64_t *)(a6 + 1);
  v243 = 0;
  v244 = 0;
  v245 = 0;
  v75 = *(_QWORD *)(a2 + 2200);
  v76 = *(_QWORD *)(a2 + 2208);
  while (v75 != v76)
  {
    if (sub_223C8F01C(*(unsigned __int8 *)(v75 + 240)) != 3)
    {
      v78 = v244;
      if ((unint64_t)v244 >= v245)
      {
        v77 = sub_22356EF88((char **)&v243, v75);
      }
      else
      {
        *(_OWORD *)v244 = *(_OWORD *)v75;
        *((_QWORD *)v78 + 2) = *(_QWORD *)(v75 + 16);
        v79 = *(_QWORD *)(v75 + 24);
        *((_QWORD *)v78 + 3) = v79;
        if (v79)
        {
          v80 = (unint64_t *)(v79 + 8);
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        v82 = *(_OWORD *)(v75 + 32);
        v83 = *(_OWORD *)(v75 + 48);
        v84 = *(_OWORD *)(v75 + 80);
        *((_OWORD *)v78 + 4) = *(_OWORD *)(v75 + 64);
        *((_OWORD *)v78 + 5) = v84;
        *((_OWORD *)v78 + 2) = v82;
        *((_OWORD *)v78 + 3) = v83;
        *((_OWORD *)v78 + 6) = *(_OWORD *)(v75 + 96);
        v85 = *(_OWORD *)(v75 + 112);
        v86 = *(_OWORD *)(v75 + 128);
        v87 = *(_OWORD *)(v75 + 160);
        *((_OWORD *)v78 + 9) = *(_OWORD *)(v75 + 144);
        *((_OWORD *)v78 + 10) = v87;
        *((_OWORD *)v78 + 7) = v85;
        *((_OWORD *)v78 + 8) = v86;
        v88 = *(_OWORD *)(v75 + 176);
        v89 = *(_OWORD *)(v75 + 192);
        v90 = *(_OWORD *)(v75 + 224);
        *((_OWORD *)v78 + 13) = *(_OWORD *)(v75 + 208);
        *((_OWORD *)v78 + 14) = v90;
        *((_OWORD *)v78 + 11) = v88;
        *((_OWORD *)v78 + 12) = v89;
        *((_WORD *)v78 + 120) = *(_WORD *)(v75 + 240);
        v77 = v78 + 248;
      }
      v244 = v77;
    }
    v75 += 248;
  }
  v229 = v72;
  v91 = *(unsigned __int8 **)(v34 + 32);
  v92 = (uint64_t **)(v34 + 40);
  if (v91 != (unsigned __int8 *)(v34 + 40))
  {
    v238 = (unsigned __int8 **)(a2 + 2520);
    v228 = v72 + 24;
    do
    {
      v93 = v91 + 32;
      sub_223568E6C((unsigned __int8 **)&v243, v238, v73, v91 + 32, (uint64_t)&v241);
      v94 = *(uint64_t ***)(v34 + 16);
      if (!v94)
LABEL_673:
        sub_223198218("map::at:  key not found");
      v95 = v91[32];
      while (1)
      {
        v96 = *((unsigned __int8 *)v94 + 32);
        v97 = v95 >= v96;
        if (v95 == v96)
          break;
        v98 = v91[32];
LABEL_311:
        if (v97)
        {
LABEL_313:
          if (v96 >= v98)
            goto LABEL_316;
          v94 = (uint64_t **)v94[1];
          if (!v94)
            goto LABEL_673;
        }
        else
        {
LABEL_279:
          v94 = (uint64_t **)*v94;
          if (!v94)
            goto LABEL_673;
        }
      }
      v98 = v91[33];
      v96 = *((unsigned __int8 *)v94 + 33);
      v97 = v98 >= v96;
      if (v98 != v96)
        goto LABEL_311;
      v98 = v91[34];
      v96 = *((unsigned __int8 *)v94 + 34);
      v97 = v98 >= v96;
      if (v98 != v96)
        goto LABEL_311;
      v98 = v91[35];
      v96 = *((unsigned __int8 *)v94 + 35);
      v97 = v98 >= v96;
      if (v98 != v96)
        goto LABEL_311;
      v99 = v91[36];
      v100 = *((unsigned __int8 *)v94 + 36);
      if (v99 != v100)
        goto LABEL_296;
      v99 = v91[37];
      v100 = *((unsigned __int8 *)v94 + 37);
      if (v99 != v100)
        goto LABEL_296;
      v99 = v91[38];
      v100 = *((unsigned __int8 *)v94 + 38);
      if (v99 != v100)
        goto LABEL_296;
      v99 = v91[39];
      v100 = *((unsigned __int8 *)v94 + 39);
      if (v99 != v100)
        goto LABEL_296;
      v99 = v91[40];
      v100 = *((unsigned __int8 *)v94 + 40);
      if (v99 != v100)
        goto LABEL_296;
      v99 = v91[41];
      v100 = *((unsigned __int8 *)v94 + 41);
      if (v99 != v100)
        goto LABEL_296;
      v99 = v91[42];
      v100 = *((unsigned __int8 *)v94 + 42);
      if (v99 != v100)
        goto LABEL_296;
      v99 = v91[43];
      v100 = *((unsigned __int8 *)v94 + 43);
      if (v99 != v100)
        goto LABEL_296;
      v99 = v91[44];
      v100 = *((unsigned __int8 *)v94 + 44);
      if (v99 != v100
        || (v99 = v91[45], v100 = *((unsigned __int8 *)v94 + 45), v99 != v100)
        || (v99 = v91[46], v100 = *((unsigned __int8 *)v94 + 46), v99 != v100)
        || (v99 = v91[47], v100 = *((unsigned __int8 *)v94 + 47), v99 != v100))
      {
LABEL_296:
        if (v99 < v100)
          goto LABEL_279;
      }
      v96 = *((unsigned __int8 *)v94 + 36);
      v98 = v91[36];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 37);
      v98 = v91[37];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 38);
      v98 = v91[38];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 39);
      v98 = v91[39];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 40);
      v98 = v91[40];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 41);
      v98 = v91[41];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 42);
      v98 = v91[42];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 43);
      v98 = v91[43];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 44);
      v98 = v91[44];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 45);
      v98 = v91[45];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 46);
      v98 = v91[46];
      if (v96 != v98)
        goto LABEL_313;
      v96 = *((unsigned __int8 *)v94 + 47);
      v98 = v91[47];
      if (v96 != v98)
        goto LABEL_313;
LABEL_316:
      v101 = *v92;
      if (!*v92)
        goto LABEL_673;
      v102 = v94[6];
      while (2)
      {
        while (2)
        {
          v103 = *((unsigned __int8 *)v101 + 32);
          v104 = v95 >= v103;
          if (v95 != v103)
          {
            v105 = v91[32];
LABEL_350:
            if (!v104)
              goto LABEL_318;
LABEL_352:
            if (v103 >= v105)
              goto LABEL_355;
            v101 = (uint64_t *)v101[1];
            if (!v101)
              goto LABEL_673;
            continue;
          }
          break;
        }
        v105 = v91[33];
        v103 = *((unsigned __int8 *)v101 + 33);
        v104 = v105 >= v103;
        if (v105 != v103)
          goto LABEL_350;
        v105 = v91[34];
        v103 = *((unsigned __int8 *)v101 + 34);
        v104 = v105 >= v103;
        if (v105 != v103)
          goto LABEL_350;
        v105 = v91[35];
        v103 = *((unsigned __int8 *)v101 + 35);
        v104 = v105 >= v103;
        if (v105 != v103)
          goto LABEL_350;
        v106 = v91[36];
        v107 = *((unsigned __int8 *)v101 + 36);
        if (v106 != v107)
          goto LABEL_335;
        v106 = v91[37];
        v107 = *((unsigned __int8 *)v101 + 37);
        if (v106 != v107)
          goto LABEL_335;
        v106 = v91[38];
        v107 = *((unsigned __int8 *)v101 + 38);
        if (v106 != v107)
          goto LABEL_335;
        v106 = v91[39];
        v107 = *((unsigned __int8 *)v101 + 39);
        if (v106 != v107)
          goto LABEL_335;
        v106 = v91[40];
        v107 = *((unsigned __int8 *)v101 + 40);
        if (v106 != v107)
          goto LABEL_335;
        v106 = v91[41];
        v107 = *((unsigned __int8 *)v101 + 41);
        if (v106 != v107)
          goto LABEL_335;
        v106 = v91[42];
        v107 = *((unsigned __int8 *)v101 + 42);
        if (v106 != v107)
          goto LABEL_335;
        v106 = v91[43];
        v107 = *((unsigned __int8 *)v101 + 43);
        if (v106 != v107)
          goto LABEL_335;
        v106 = v91[44];
        v107 = *((unsigned __int8 *)v101 + 44);
        if (v106 != v107
          || (v106 = v91[45], v107 = *((unsigned __int8 *)v101 + 45), v106 != v107)
          || (v106 = v91[46], v107 = *((unsigned __int8 *)v101 + 46), v106 != v107)
          || (v106 = v91[47], v107 = *((unsigned __int8 *)v101 + 47), v106 != v107))
        {
LABEL_335:
          if (v106 < v107)
          {
LABEL_318:
            v101 = (uint64_t *)*v101;
            if (!v101)
              goto LABEL_673;
            continue;
          }
        }
        break;
      }
      v103 = *((unsigned __int8 *)v101 + 36);
      v105 = v91[36];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 37);
      v105 = v91[37];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 38);
      v105 = v91[38];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 39);
      v105 = v91[39];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 40);
      v105 = v91[40];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 41);
      v105 = v91[41];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 42);
      v105 = v91[42];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 43);
      v105 = v91[43];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 44);
      v105 = v91[44];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 45);
      v105 = v91[45];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 46);
      v105 = v91[46];
      if (v103 != v105)
        goto LABEL_352;
      v103 = *((unsigned __int8 *)v101 + 47);
      v105 = v91[47];
      if (v103 != v105)
        goto LABEL_352;
LABEL_355:
      memset(v298, 0, sizeof(v298));
      v299 = 728333608;
      kdebug_trace();
      if ((v246 & 0x40) != 0)
      {
        *((_BYTE *)v101 + 49) = v246;
        (*(void (**)(_BYTE *__return_ptr, uint64_t *, void **, unsigned __int8 **))(*v102 + 24))(v255, v102, &v241, v238);
        v109 = (void **)(v101 + 15);
        v110 = v101[15];
        if (v110)
        {
          v111 = v101[16];
          v112 = (void *)v101[15];
          if (v111 != v110)
          {
            do
            {
              v113 = *(std::__shared_weak_count **)(v111 - 224);
              if (v113)
              {
                v114 = (unint64_t *)&v113->__shared_owners_;
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              v111 -= 248;
            }
            while (v111 != v110);
            v112 = *v109;
          }
          v101[16] = v110;
          operator delete(v112);
          *v109 = 0;
          v101[16] = 0;
          v101[17] = 0;
          v73 = (uint64_t)v230;
        }
        *(_OWORD *)(v101 + 15) = *(_OWORD *)v255;
        v101[17] = *(_QWORD *)&v255[16];
      }
      else
      {
        if (v234)
        {
          v108 = *(_OWORD *)v229;
          *(_DWORD *)&v300[16] = *(_DWORD *)(v229 + 16);
          *(_OWORD *)v300 = v108;
          sub_223258368(&v301, v228);
          LOBYTE(v310[3]) = *(_BYTE *)(v229 + 192);
        }
        else
        {
          *(_WORD *)v300 = 256;
          v300[2] = 0;
          *(_OWORD *)&v300[4] = 0uLL;
          v301 = 0u;
          v302 = 0u;
          v303 = 0u;
          v304 = 0u;
          v305 = 0u;
          v306 = 0u;
          v307 = 0u;
          v308 = 0u;
          v309 = 0u;
          memset(v310, 0, 25);
        }
        (*(void (**)(_BYTE *__return_ptr, uint64_t *, void **, unsigned __int8 **, _BYTE *, uint64_t *, uint64_t, uint64_t))(*v102 + 16))(v255, v102, &v241, v238, v300, &v246, v233, v232);
        v116 = (void **)(v101 + 15);
        v117 = (char *)v101[15];
        *((_WORD *)v101 + 24) = *(_WORD *)v255;
        v118 = *(_OWORD *)&v255[4];
        *(_OWORD *)((char *)v101 + 68) = *(_OWORD *)&v255[20];
        v120 = v256;
        v119 = v257;
        *(_OWORD *)((char *)v101 + 52) = v118;
        *(_OWORD *)((char *)v101 + 84) = v120;
        *(_OWORD *)((char *)v101 + 100) = v119;
        if (v117)
        {
          v121 = (char *)v101[16];
          v122 = v117;
          if (v121 != v117)
          {
            do
            {
              v123 = (std::__shared_weak_count *)*((_QWORD *)v121 - 28);
              if (v123)
              {
                v124 = (unint64_t *)&v123->__shared_owners_;
                do
                  v125 = __ldaxr(v124);
                while (__stlxr(v125 - 1, v124));
                if (!v125)
                {
                  ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                  std::__shared_weak_count::__release_weak(v123);
                }
              }
              v121 -= 248;
            }
            while (v121 != v117);
            v122 = *v116;
          }
          v101[16] = (uint64_t)v117;
          operator delete(v122);
          *v116 = 0;
          v101[16] = 0;
          v101[17] = 0;
          v73 = (uint64_t)v230;
        }
        v126 = (void *)v101[18];
        *(_OWORD *)(v101 + 15) = v258;
        v101[17] = v259[0];
        v259[0] = 0;
        v258 = 0uLL;
        if (v126)
        {
          v101[19] = (uint64_t)v126;
          operator delete(v126);
          v101[18] = 0;
          v101[19] = 0;
          v101[20] = 0;
        }
        v128 = v101 + 22;
        v127 = (_QWORD *)v101[22];
        *((_OWORD *)v101 + 9) = *(_OWORD *)&v259[1];
        v101[20] = v259[3];
        memset(&v259[1], 0, 24);
        sub_223198030((uint64_t)(v101 + 21), v127);
        v129 = v261;
        v101[21] = (uint64_t)v260;
        v101[22] = (uint64_t)v129;
        v130 = v262;
        v101[23] = v262;
        if (v130)
        {
          v129[2] = v128;
          v260 = &v261;
          v261 = 0;
          v262 = 0;
        }
        else
        {
          v101[21] = (uint64_t)v128;
        }
        v131 = v101 + 25;
        sub_223198030((uint64_t)(v101 + 24), (_QWORD *)v101[25]);
        v132 = v264;
        v101[24] = (uint64_t)v263;
        v101[25] = (uint64_t)v132;
        v133 = v265;
        v101[26] = v265;
        if (v133)
        {
          v132[2] = v131;
          v263 = &v264;
          v264 = 0;
          v265 = 0;
        }
        else
        {
          v101[24] = (uint64_t)v131;
        }
        sub_22347D8E4((char **)v101 + 27, (uint64_t)v266);
        *((_DWORD *)v101 + 594) = v297;
        sub_223480A2C(v266);
        sub_223198030((uint64_t)&v263, v264);
        sub_223198030((uint64_t)&v260, v261);
        if (v259[1])
        {
          v259[2] = v259[1];
          operator delete((void *)v259[1]);
        }
        v134 = v258;
        if ((_QWORD)v258)
        {
          v135 = *((_QWORD *)&v258 + 1);
          v136 = (void *)v258;
          if (*((_QWORD *)&v258 + 1) != (_QWORD)v258)
          {
            do
            {
              v137 = *(std::__shared_weak_count **)(v135 - 224);
              if (v137)
              {
                v138 = (unint64_t *)&v137->__shared_owners_;
                do
                  v139 = __ldaxr(v138);
                while (__stlxr(v139 - 1, v138));
                if (!v139)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
              }
              v135 -= 248;
            }
            while (v135 != v134);
            v136 = (void *)v258;
          }
          *((_QWORD *)&v258 + 1) = v134;
          operator delete(v136);
        }
        if (v310[0])
        {
          v310[1] = v310[0];
          operator delete(v310[0]);
        }
        if (*((_QWORD *)&v308 + 1))
        {
          *(_QWORD *)&v309 = *((_QWORD *)&v308 + 1);
          operator delete(*((void **)&v308 + 1));
        }
        if ((_QWORD)v307)
        {
          *((_QWORD *)&v307 + 1) = v307;
          operator delete((void *)v307);
        }
        if (*((_QWORD *)&v305 + 1))
        {
          *(_QWORD *)&v306 = *((_QWORD *)&v305 + 1);
          operator delete(*((void **)&v305 + 1));
        }
        if ((_QWORD)v304)
        {
          *((_QWORD *)&v304 + 1) = v304;
          operator delete((void *)v304);
        }
        if (*((_QWORD *)&v302 + 1))
        {
          *(_QWORD *)&v303 = *((_QWORD *)&v302 + 1);
          operator delete(*((void **)&v302 + 1));
        }
        if ((_QWORD)v301)
        {
          *((_QWORD *)&v301 + 1) = v301;
          operator delete((void *)v301);
        }
      }
      kdebug_trace();
      v140 = *v92;
      if (!*v92)
LABEL_676:
        sub_223198218("map::at:  key not found");
      v141 = *v93;
      while (2)
      {
        while (2)
        {
          v142 = *((unsigned __int8 *)v140 + 32);
          v143 = v141 >= v142;
          if (v141 != v142)
          {
            v144 = *v93;
LABEL_451:
            if (!v143)
              goto LABEL_419;
LABEL_453:
            if (v142 >= v144)
              goto LABEL_456;
            v140 = (uint64_t *)v140[1];
            if (!v140)
              goto LABEL_676;
            continue;
          }
          break;
        }
        v144 = v91[33];
        v142 = *((unsigned __int8 *)v140 + 33);
        v143 = v144 >= v142;
        if (v144 != v142)
          goto LABEL_451;
        v144 = v91[34];
        v142 = *((unsigned __int8 *)v140 + 34);
        v143 = v144 >= v142;
        if (v144 != v142)
          goto LABEL_451;
        v144 = v91[35];
        v142 = *((unsigned __int8 *)v140 + 35);
        v143 = v144 >= v142;
        if (v144 != v142)
          goto LABEL_451;
        v145 = v91[36];
        v146 = *((unsigned __int8 *)v140 + 36);
        if (v145 != v146)
          goto LABEL_436;
        v145 = v91[37];
        v146 = *((unsigned __int8 *)v140 + 37);
        if (v145 != v146)
          goto LABEL_436;
        v145 = v91[38];
        v146 = *((unsigned __int8 *)v140 + 38);
        if (v145 != v146)
          goto LABEL_436;
        v145 = v91[39];
        v146 = *((unsigned __int8 *)v140 + 39);
        if (v145 != v146)
          goto LABEL_436;
        v145 = v91[40];
        v146 = *((unsigned __int8 *)v140 + 40);
        if (v145 != v146)
          goto LABEL_436;
        v145 = v91[41];
        v146 = *((unsigned __int8 *)v140 + 41);
        if (v145 != v146)
          goto LABEL_436;
        v145 = v91[42];
        v146 = *((unsigned __int8 *)v140 + 42);
        if (v145 != v146)
          goto LABEL_436;
        v145 = v91[43];
        v146 = *((unsigned __int8 *)v140 + 43);
        if (v145 != v146)
          goto LABEL_436;
        v145 = v91[44];
        v146 = *((unsigned __int8 *)v140 + 44);
        if (v145 != v146
          || (v145 = v91[45], v146 = *((unsigned __int8 *)v140 + 45), v145 != v146)
          || (v145 = v91[46], v146 = *((unsigned __int8 *)v140 + 46), v145 != v146)
          || (v145 = v91[47], v146 = *((unsigned __int8 *)v140 + 47), v145 != v146))
        {
LABEL_436:
          if (v145 < v146)
          {
LABEL_419:
            v140 = (uint64_t *)*v140;
            if (!v140)
              goto LABEL_676;
            continue;
          }
        }
        break;
      }
      v142 = *((unsigned __int8 *)v140 + 36);
      v144 = v91[36];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 37);
      v144 = v91[37];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 38);
      v144 = v91[38];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 39);
      v144 = v91[39];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 40);
      v144 = v91[40];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 41);
      v144 = v91[41];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 42);
      v144 = v91[42];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 43);
      v144 = v91[43];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 44);
      v144 = v91[44];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 45);
      v144 = v91[45];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 46);
      v144 = v91[46];
      if (v142 != v144)
        goto LABEL_453;
      v142 = *((unsigned __int8 *)v140 + 47);
      v144 = v91[47];
      if (v142 != v144)
        goto LABEL_453;
LABEL_456:
      v147 = *a3;
      v148 = (std::__shared_weak_count *)a3[1];
      v240 = v148;
      if (v148)
      {
        v149 = (unint64_t *)&v148->__shared_owners_;
        do
          v150 = __ldxr(v149);
        while (__stxr(v150 + 1, v149));
        v151 = *((_BYTE *)v140 + 49);
        *(_QWORD *)v300 = v147;
        *(_QWORD *)&v300[8] = v148;
        do
          v152 = __ldxr(v149);
        while (__stxr(v152 + 1, v149));
      }
      else
      {
        v151 = *((_BYTE *)v140 + 49);
        *(_QWORD *)v300 = *a3;
        *(_QWORD *)&v300[8] = 0;
      }
      sub_2235684AC(a2, (uint64_t *)v300, a4, (uint64_t)v255);
      v153 = *(std::__shared_weak_count **)&v300[8];
      if (!*(_QWORD *)&v300[8])
        goto LABEL_467;
      v154 = (unint64_t *)(*(_QWORD *)&v300[8] + 8);
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
        if (v255 != (_BYTE *)(v140 + 15))
LABEL_468:
          sub_223484290((void **)v255, v140[15], v140[16], 0xEF7BDEF7BDEF7BDFLL * ((v140[16] - v140[15]) >> 3));
      }
      else
      {
LABEL_467:
        if (v255 != (_BYTE *)(v140 + 15))
          goto LABEL_468;
      }
      if (v277 != (char **)(v140 + 18))
        sub_223484748(v277, (__int128 *)v140[18], (__int128 *)v140[19], 0xCF3CF3CF3CF3CF3DLL * ((v140[19] - v140[18]) >> 2));
      v156 = (__int128 *)((char *)v140 + 52);
      if (v273)
      {
        if (!v272
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/CoordinateSystemContainer.cpp", 184, (uint64_t)"cluster_keyframe_list.input_frame->coord_transformer.has_value()", 64, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v157 = *v156;
        v158 = *(_OWORD *)((char *)v140 + 68);
        v159 = *(_OWORD *)((char *)v140 + 100);
        v270 = *(_OWORD *)((char *)v140 + 84);
        v271 = v159;
        v268 = v157;
        v269 = v158;
      }
      if ((v151 & 8) != 0 && v276)
      {
        v160 = v275;
        v161 = v274;
        while (v160 != v161)
        {
          v162 = *(void **)(v160 - 24);
          if (v162)
          {
            *(_QWORD *)(v160 - 16) = v162;
            operator delete(v162);
          }
          v160 -= 40;
        }
        v275 = v161;
      }
      v163 = *v92;
      if (!*v92)
LABEL_677:
        sub_223198218("map::at:  key not found");
      v164 = *v93;
      while (2)
      {
        while (2)
        {
          v165 = *((unsigned __int8 *)v163 + 32);
          v166 = v164 >= v165;
          if (v164 != v165)
          {
            v167 = *v93;
LABEL_517:
            if (!v166)
              goto LABEL_485;
LABEL_519:
            if (v165 >= v167)
              goto LABEL_522;
            v163 = (uint64_t *)v163[1];
            if (!v163)
              goto LABEL_677;
            continue;
          }
          break;
        }
        v167 = v91[33];
        v165 = *((unsigned __int8 *)v163 + 33);
        v166 = v167 >= v165;
        if (v167 != v165)
          goto LABEL_517;
        v167 = v91[34];
        v165 = *((unsigned __int8 *)v163 + 34);
        v166 = v167 >= v165;
        if (v167 != v165)
          goto LABEL_517;
        v167 = v91[35];
        v165 = *((unsigned __int8 *)v163 + 35);
        v166 = v167 >= v165;
        if (v167 != v165)
          goto LABEL_517;
        v168 = v91[36];
        v169 = *((unsigned __int8 *)v163 + 36);
        if (v168 != v169)
          goto LABEL_502;
        v168 = v91[37];
        v169 = *((unsigned __int8 *)v163 + 37);
        if (v168 != v169)
          goto LABEL_502;
        v168 = v91[38];
        v169 = *((unsigned __int8 *)v163 + 38);
        if (v168 != v169)
          goto LABEL_502;
        v168 = v91[39];
        v169 = *((unsigned __int8 *)v163 + 39);
        if (v168 != v169)
          goto LABEL_502;
        v168 = v91[40];
        v169 = *((unsigned __int8 *)v163 + 40);
        if (v168 != v169)
          goto LABEL_502;
        v168 = v91[41];
        v169 = *((unsigned __int8 *)v163 + 41);
        if (v168 != v169)
          goto LABEL_502;
        v168 = v91[42];
        v169 = *((unsigned __int8 *)v163 + 42);
        if (v168 != v169)
          goto LABEL_502;
        v168 = v91[43];
        v169 = *((unsigned __int8 *)v163 + 43);
        if (v168 != v169)
          goto LABEL_502;
        v168 = v91[44];
        v169 = *((unsigned __int8 *)v163 + 44);
        if (v168 != v169
          || (v168 = v91[45], v169 = *((unsigned __int8 *)v163 + 45), v168 != v169)
          || (v168 = v91[46], v169 = *((unsigned __int8 *)v163 + 46), v168 != v169)
          || (v168 = v91[47], v169 = *((unsigned __int8 *)v163 + 47), v168 != v169))
        {
LABEL_502:
          if (v168 < v169)
          {
LABEL_485:
            v163 = (uint64_t *)*v163;
            if (!v163)
              goto LABEL_677;
            continue;
          }
        }
        break;
      }
      v165 = *((unsigned __int8 *)v163 + 36);
      v167 = v91[36];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 37);
      v167 = v91[37];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 38);
      v167 = v91[38];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 39);
      v167 = v91[39];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 40);
      v167 = v91[40];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 41);
      v167 = v91[41];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 42);
      v167 = v91[42];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 43);
      v167 = v91[43];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 44);
      v167 = v91[44];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 45);
      v167 = v91[45];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 46);
      v167 = v91[46];
      if (v165 != v167)
        goto LABEL_519;
      v165 = *((unsigned __int8 *)v163 + 47);
      v167 = v91[47];
      if (v165 != v167)
        goto LABEL_519;
LABEL_522:
      sub_22347D8E4((char **)v163 + 27, (uint64_t)v255);
      sub_223480A2C((char **)v255);
      if (v240)
      {
        v177 = (unint64_t *)&v240->__shared_owners_;
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
      sub_22347DD4C((uint64_t)v156, (_QWORD *)v91 + 27, v170, v171, v172, v173, v174, v175, v176);
      v179 = *v92;
      v180 = v92;
      v181 = v92;
      if (!*v92)
        goto LABEL_568;
      v182 = *v93;
      while (2)
      {
        while (2)
        {
          v181 = (uint64_t **)v179;
          v183 = *((unsigned __int8 *)v179 + 32);
          v184 = v182 >= v183;
          if (v182 != v183)
          {
            v185 = *v93;
LABEL_563:
            if (!v184)
              goto LABEL_529;
LABEL_565:
            if (v183 >= v185)
              goto LABEL_574;
            v179 = v181[1];
            if (!v179)
            {
              v180 = v181 + 1;
LABEL_568:
              v188 = operator new(0x950uLL);
              v188[2] = *(_OWORD *)v93;
              bzero(v188 + 3, 0x920uLL);
              sub_223485264((uint64_t)(v188 + 3));
              *(_QWORD *)v188 = 0;
              *((_QWORD *)v188 + 1) = 0;
              *((_QWORD *)v188 + 2) = v181;
              *v180 = (uint64_t *)v188;
              v189 = **(_QWORD **)(a1 + 32);
              v190 = (uint64_t *)v188;
              if (v189)
              {
                *(_QWORD *)(a1 + 32) = v189;
                v190 = *v180;
              }
              sub_2231A9A8C(*(uint64_t **)(a1 + 40), v190);
              ++*(_QWORD *)(a1 + 48);
              v191 = (uint64_t *)*v74;
              v192 = a6 + 1;
              v193 = (uint64_t *)(a6 + 1);
              if (!*v74)
                goto LABEL_615;
LABEL_575:
              v194 = *v93;
              while (2)
              {
                while (2)
                {
                  v193 = v191;
                  v195 = *((unsigned __int8 *)v191 + 32);
                  v196 = v194 >= v195;
                  if (v194 == v195)
                  {
                    v197 = v91[33];
                    v195 = *((unsigned __int8 *)v193 + 33);
                    v196 = v197 >= v195;
                    if (v197 == v195)
                    {
                      v198 = v91[34];
                      v199 = *((unsigned __int8 *)v193 + 34);
                      if (v198 != v199)
                        goto LABEL_593;
                      v198 = v91[35];
                      v199 = *((unsigned __int8 *)v193 + 35);
                      if (v198 != v199)
                        goto LABEL_593;
                      v198 = v91[36];
                      v199 = *((unsigned __int8 *)v193 + 36);
                      if (v198 != v199)
                        goto LABEL_593;
                      v198 = v91[37];
                      v199 = *((unsigned __int8 *)v193 + 37);
                      if (v198 != v199)
                        goto LABEL_593;
                      v198 = v91[38];
                      v199 = *((unsigned __int8 *)v193 + 38);
                      if (v198 != v199)
                        goto LABEL_593;
                      v198 = v91[39];
                      v199 = *((unsigned __int8 *)v193 + 39);
                      if (v198 != v199)
                        goto LABEL_593;
                      v198 = v91[40];
                      v199 = *((unsigned __int8 *)v193 + 40);
                      if (v198 != v199)
                        goto LABEL_593;
                      v198 = v91[41];
                      v199 = *((unsigned __int8 *)v193 + 41);
                      if (v198 != v199)
                        goto LABEL_593;
                      v198 = v91[42];
                      v199 = *((unsigned __int8 *)v193 + 42);
                      if (v198 != v199)
                        goto LABEL_593;
                      v198 = v91[43];
                      v199 = *((unsigned __int8 *)v193 + 43);
                      if (v198 != v199)
                        goto LABEL_593;
                      v198 = v91[44];
                      v199 = *((unsigned __int8 *)v193 + 44);
                      if (v198 != v199
                        || (v198 = v91[45], v199 = *((unsigned __int8 *)v193 + 45), v198 != v199)
                        || (v198 = v91[46], v199 = *((unsigned __int8 *)v193 + 46), v198 != v199)
                        || (v198 = v91[47], v199 = *((unsigned __int8 *)v193 + 47), v198 != v199))
                      {
LABEL_593:
                        if (v198 < v199)
                        {
LABEL_576:
                          v191 = (uint64_t *)*v193;
                          v192 = v193;
                          if (!*v193)
                            goto LABEL_615;
                          continue;
                        }
                      }
                      v195 = *((unsigned __int8 *)v193 + 34);
                      v197 = v91[34];
                      if (v195 == v197)
                      {
                        v195 = *((unsigned __int8 *)v193 + 35);
                        v197 = v91[35];
                        if (v195 == v197)
                        {
                          v195 = *((unsigned __int8 *)v193 + 36);
                          v197 = v91[36];
                          if (v195 == v197)
                          {
                            v195 = *((unsigned __int8 *)v193 + 37);
                            v197 = v91[37];
                            if (v195 == v197)
                            {
                              v195 = *((unsigned __int8 *)v193 + 38);
                              v197 = v91[38];
                              if (v195 == v197)
                              {
                                v195 = *((unsigned __int8 *)v193 + 39);
                                v197 = v91[39];
                                if (v195 == v197)
                                {
                                  v195 = *((unsigned __int8 *)v193 + 40);
                                  v197 = v91[40];
                                  if (v195 == v197)
                                  {
                                    v195 = *((unsigned __int8 *)v193 + 41);
                                    v197 = v91[41];
                                    if (v195 == v197)
                                    {
                                      v195 = *((unsigned __int8 *)v193 + 42);
                                      v197 = v91[42];
                                      if (v195 == v197)
                                      {
                                        v195 = *((unsigned __int8 *)v193 + 43);
                                        v197 = v91[43];
                                        if (v195 == v197)
                                        {
                                          v195 = *((unsigned __int8 *)v193 + 44);
                                          v197 = v91[44];
                                          if (v195 == v197)
                                          {
                                            v195 = *((unsigned __int8 *)v193 + 45);
                                            v197 = v91[45];
                                            if (v195 == v197)
                                            {
                                              v195 = *((unsigned __int8 *)v193 + 46);
                                              v197 = v91[46];
                                              if (v195 == v197)
                                              {
                                                v195 = *((unsigned __int8 *)v193 + 47);
                                                v197 = v91[47];
                                                if (v195 == v197)
                                                  goto LABEL_618;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      goto LABEL_612;
                    }
                  }
                  else
                  {
                    v197 = *v93;
                  }
                  break;
                }
                if (!v196)
                  goto LABEL_576;
LABEL_612:
                if (v195 >= v197)
                  goto LABEL_618;
                v191 = (uint64_t *)v193[1];
                if (!v191)
                {
                  v192 = v193 + 1;
                  goto LABEL_615;
                }
                continue;
              }
            }
            continue;
          }
          break;
        }
        v185 = v91[33];
        v183 = *((unsigned __int8 *)v181 + 33);
        v184 = v185 >= v183;
        if (v185 != v183)
          goto LABEL_563;
        v186 = v91[34];
        v187 = *((unsigned __int8 *)v181 + 34);
        if (v186 != v187)
          goto LABEL_546;
        v186 = v91[35];
        v187 = *((unsigned __int8 *)v181 + 35);
        if (v186 != v187)
          goto LABEL_546;
        v186 = v91[36];
        v187 = *((unsigned __int8 *)v181 + 36);
        if (v186 != v187)
          goto LABEL_546;
        v186 = v91[37];
        v187 = *((unsigned __int8 *)v181 + 37);
        if (v186 != v187)
          goto LABEL_546;
        v186 = v91[38];
        v187 = *((unsigned __int8 *)v181 + 38);
        if (v186 != v187)
          goto LABEL_546;
        v186 = v91[39];
        v187 = *((unsigned __int8 *)v181 + 39);
        if (v186 != v187)
          goto LABEL_546;
        v186 = v91[40];
        v187 = *((unsigned __int8 *)v181 + 40);
        if (v186 != v187)
          goto LABEL_546;
        v186 = v91[41];
        v187 = *((unsigned __int8 *)v181 + 41);
        if (v186 != v187)
          goto LABEL_546;
        v186 = v91[42];
        v187 = *((unsigned __int8 *)v181 + 42);
        if (v186 != v187)
          goto LABEL_546;
        v186 = v91[43];
        v187 = *((unsigned __int8 *)v181 + 43);
        if (v186 != v187)
          goto LABEL_546;
        v186 = v91[44];
        v187 = *((unsigned __int8 *)v181 + 44);
        if (v186 != v187
          || (v186 = v91[45], v187 = *((unsigned __int8 *)v181 + 45), v186 != v187)
          || (v186 = v91[46], v187 = *((unsigned __int8 *)v181 + 46), v186 != v187)
          || (v186 = v91[47], v187 = *((unsigned __int8 *)v181 + 47), v186 != v187))
        {
LABEL_546:
          if (v186 < v187)
          {
LABEL_529:
            v179 = *v181;
            v180 = v181;
            if (!*v181)
              goto LABEL_568;
            continue;
          }
        }
        break;
      }
      v183 = *((unsigned __int8 *)v181 + 34);
      v185 = v91[34];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 35);
      v185 = v91[35];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 36);
      v185 = v91[36];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 37);
      v185 = v91[37];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 38);
      v185 = v91[38];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 39);
      v185 = v91[39];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 40);
      v185 = v91[40];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 41);
      v185 = v91[41];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 42);
      v185 = v91[42];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 43);
      v185 = v91[43];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 44);
      v185 = v91[44];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 45);
      v185 = v91[45];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 46);
      v185 = v91[46];
      if (v183 != v185)
        goto LABEL_565;
      v183 = *((unsigned __int8 *)v181 + 47);
      v185 = v91[47];
      if (v183 != v185)
        goto LABEL_565;
LABEL_574:
      v188 = v181;
      v191 = (uint64_t *)*v74;
      v192 = a6 + 1;
      v193 = (uint64_t *)(a6 + 1);
      if (*v74)
        goto LABEL_575;
LABEL_615:
      v200 = operator new(0x38uLL);
      v200[2] = *(_OWORD *)v93;
      *((_QWORD *)v200 + 6) = v188 + 3;
      *(_QWORD *)v200 = 0;
      *((_QWORD *)v200 + 1) = 0;
      *((_QWORD *)v200 + 2) = v193;
      *v192 = v200;
      v201 = (uint64_t *)**a6;
      if (v201)
      {
        *a6 = v201;
        v200 = (_OWORD *)*v192;
      }
      sub_2231A9A8C(a6[1], (uint64_t *)v200);
      a6[2] = (uint64_t *)((char *)a6[2] + 1);
LABEL_618:
      v202 = (char *)v241;
      if (v241)
      {
        v203 = v242;
        v204 = v241;
        if (v242 != v241)
        {
          do
          {
            v205 = (std::__shared_weak_count *)*((_QWORD *)v203 - 28);
            if (v205)
            {
              v206 = (unint64_t *)&v205->__shared_owners_;
              do
                v207 = __ldaxr(v206);
              while (__stlxr(v207 - 1, v206));
              if (!v207)
              {
                ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                std::__shared_weak_count::__release_weak(v205);
              }
            }
            v203 -= 248;
          }
          while (v203 != v202);
          v204 = v241;
        }
        v242 = v202;
        operator delete(v204);
      }
      v208 = (unsigned __int8 *)*((_QWORD *)v91 + 1);
      if (v208)
      {
        do
        {
          v209 = v208;
          v208 = *(unsigned __int8 **)v208;
        }
        while (v208);
      }
      else
      {
        do
        {
          v209 = (unsigned __int8 *)*((_QWORD *)v91 + 2);
          v41 = *(_QWORD *)v209 == (_QWORD)v91;
          v91 = v209;
        }
        while (!v41);
      }
      v91 = v209;
      v34 = a1;
    }
    while (v209 != (unsigned __int8 *)v92);
  }
  v210 = *a6;
  *(_QWORD *)&v255[8] = 0;
  *(_QWORD *)&v255[16] = 0;
  *(_QWORD *)v255 = &v255[8];
  if (v210 != v74)
  {
    do
    {
      *(_OWORD *)v300 = *((_OWORD *)v210 + 2);
      v214 = sub_223426D4C(v255, (uint64_t *)&v255[8], v298, (uint64_t *)&v241, v300);
      if (*(_QWORD *)v214)
      {
        v215 = (uint64_t *)v210[1];
        if (v215)
          goto LABEL_646;
      }
      else
      {
        v216 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v216 + 25) = *(_OWORD *)v300;
        v217 = v298[0];
        *(_QWORD *)v216 = 0;
        *((_QWORD *)v216 + 1) = 0;
        *((_QWORD *)v216 + 2) = v217;
        *(_QWORD *)v214 = v216;
        if (**(_QWORD **)v255)
        {
          *(_QWORD *)v255 = **(_QWORD **)v255;
          v216 = *(char **)v214;
        }
        sub_2231A9A8C(*(uint64_t **)&v255[8], (uint64_t *)v216);
        ++*(_QWORD *)&v255[16];
        v215 = (uint64_t *)v210[1];
        if (v215)
        {
          do
          {
LABEL_646:
            v218 = v215;
            v215 = (uint64_t *)*v215;
          }
          while (v215);
          goto LABEL_639;
        }
      }
      do
      {
        v218 = (uint64_t *)v210[2];
        v41 = *v218 == (_QWORD)v210;
        v210 = v218;
      }
      while (!v41);
LABEL_639:
      v210 = v218;
    }
    while (v218 != v74);
  }
  sub_22356A2B0((_BYTE *)(a1 + 56), v255);
  sub_223198030((uint64_t)v255, *(_QWORD **)&v255[8]);
  kdebug_trace();
  v211 = (char *)v243;
  if (v243)
  {
    v212 = v244;
    v213 = v243;
    if (v244 != v243)
    {
      do
      {
        v219 = (std::__shared_weak_count *)*((_QWORD *)v212 - 28);
        if (v219)
        {
          v220 = (unint64_t *)&v219->__shared_owners_;
          do
            v221 = __ldaxr(v220);
          while (__stlxr(v221 - 1, v220));
          if (!v221)
          {
            ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
            std::__shared_weak_count::__release_weak(v219);
          }
        }
        v212 -= 248;
      }
      while (v212 != v211);
      v213 = v243;
    }
    v244 = v211;
    operator delete(v213);
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  v222 = (char *)v247;
  if (v247)
  {
    v223 = v248;
    v224 = v247;
    if (v248 != v247)
    {
      do
      {
        v225 = (std::__shared_weak_count *)*((_QWORD *)v223 - 28);
        if (v225)
        {
          v226 = (unint64_t *)&v225->__shared_owners_;
          do
            v227 = __ldaxr(v226);
          while (__stlxr(v227 - 1, v226));
          if (!v227)
          {
            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
            std::__shared_weak_count::__release_weak(v225);
          }
        }
        v223 -= 248;
      }
      while (v223 != v222);
      v224 = v247;
    }
    v248 = v222;
    operator delete(v224);
  }
}

void sub_22347D4AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

char **sub_22347D6FC(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (void *)*((_QWORD *)v3 - 3);
          if (v5)
          {
            *((_QWORD *)v3 - 2) = v5;
            operator delete(v5);
          }
          v3 -= 40;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void **sub_22347D774(void **a1)
{
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (char *)*a1;
  if (*a1)
  {
    v4 = (char *)a1[1];
    v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 28);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 248;
      }
      while (v4 != v3);
      v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_22347D81C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  sub_223480A2C((char **)(a1 + 168));
  sub_223198030(a1 + 144, *(_QWORD **)(a1 + 152));
  sub_223198030(a1 + 120, *(_QWORD **)(a1 + 128));
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 72);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 80);
    v5 = *(void **)(a1 + 72);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 224);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 248;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v5);
  }
  return a1;
}

char **sub_22347D8E4(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  char *i;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  void **v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void **v32;
  char *v33;
  char *v34;
  void *v35;
  char *v36;
  char *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v4 = *a1;
  if (*a1)
  {
    v5 = a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 28);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 248;
      }
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = (uint64_t)(a1 + 3);
  v11 = a2 + 24;
  if (*((unsigned __int8 *)a1 + 1848) == *(unsigned __int8 *)(a2 + 1848))
  {
    if (*((_BYTE *)a1 + 1848))
      sub_22347F36C(v10, v11);
  }
  else if (*((_BYTE *)a1 + 1848))
  {
    sub_2232555B8(v10);
    *((_BYTE *)a1 + 1848) = 0;
  }
  else
  {
    sub_2232568B4(v10, v11);
    *((_BYTE *)a1 + 1848) = 1;
  }
  sub_2234808F0(a1 + 232, a2 + 1856);
  if (a1[239])
  {
    v12 = a1[238];
    while (v12)
    {
      v13 = v12;
      v12 = *(char **)v12;
      v14 = (void *)*((_QWORD *)v13 + 27);
      if (v14)
      {
        *((_QWORD *)v13 + 28) = v14;
        operator delete(v14);
      }
      *((_QWORD *)v13 + 7) = &off_24EC20828;
      *((_QWORD *)v13 + 4) = &off_24EC715B8;
      v15 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      operator delete(v13);
    }
    a1[238] = 0;
    v18 = a1[237];
    if (v18)
    {
      for (i = 0; i != v18; ++i)
        *(_QWORD *)&a1[236][8 * (_QWORD)i] = 0;
    }
    a1[239] = 0;
  }
  v20 = *(char **)(a2 + 1888);
  *(_QWORD *)(a2 + 1888) = 0;
  v21 = a1[236];
  a1[236] = v20;
  if (v21)
    operator delete(v21);
  a1[237] = *(char **)(a2 + 1896);
  *(_QWORD *)(a2 + 1896) = 0;
  v22 = *(char **)(a2 + 1912);
  a1[239] = v22;
  *((_DWORD *)a1 + 480) = *(_DWORD *)(a2 + 1920);
  v23 = *(_QWORD *)(a2 + 1904);
  a1[238] = (char *)v23;
  if (v22)
  {
    v24 = *(_QWORD *)(v23 + 8);
    v25 = (unint64_t)a1[237];
    if ((v25 & (v25 - 1)) != 0)
    {
      if (v24 >= v25)
        v24 %= v25;
    }
    else
    {
      v24 &= v25 - 1;
    }
    *(_QWORD *)&a1[236][8 * v24] = a1 + 238;
    *(_QWORD *)(a2 + 1904) = 0;
    *(_QWORD *)(a2 + 1912) = 0;
  }
  v26 = a1[241];
  if (v26)
  {
    a1[242] = v26;
    operator delete(v26);
    a1[241] = 0;
    a1[242] = 0;
    a1[243] = 0;
  }
  a1[241] = *(char **)(a2 + 1928);
  a1[242] = *(char **)(a2 + 1936);
  a1[243] = *(char **)(a2 + 1944);
  *(_QWORD *)(a2 + 1936) = 0;
  *(_QWORD *)(a2 + 1944) = 0;
  *(_QWORD *)(a2 + 1928) = 0;
  *((_BYTE *)a1 + 1952) = *(_BYTE *)(a2 + 1952);
  v27 = a1[245];
  if (v27)
  {
    v28 = (void **)(a1 + 245);
    v29 = (uint64_t)a1[246];
    v30 = a1[245];
    if ((char *)v29 != v27)
    {
      do
      {
        v29 -= 464;
        sub_22324A5A0(v29);
      }
      while ((char *)v29 != v27);
      v30 = (char *)*v28;
    }
    a1[246] = v27;
    operator delete(v30);
    *v28 = 0;
    a1[246] = 0;
    a1[247] = 0;
  }
  a1[245] = *(char **)(a2 + 1960);
  a1[246] = *(char **)(a2 + 1968);
  a1[247] = *(char **)(a2 + 1976);
  *(_QWORD *)(a2 + 1960) = 0;
  *(_QWORD *)(a2 + 1968) = 0;
  *(_QWORD *)(a2 + 1976) = 0;
  v31 = a1[248];
  if (v31)
  {
    v32 = (void **)(a1 + 248);
    v33 = a1[249];
    v34 = a1[248];
    if (v33 != v31)
    {
      do
      {
        v35 = (void *)*((_QWORD *)v33 - 3);
        if (v35)
        {
          *((_QWORD *)v33 - 2) = v35;
          operator delete(v35);
        }
        v33 -= 40;
      }
      while (v33 != v31);
      v34 = (char *)*v32;
    }
    a1[249] = v31;
    operator delete(v34);
    *v32 = 0;
    a1[249] = 0;
    a1[250] = 0;
  }
  *((_OWORD *)a1 + 124) = *(_OWORD *)(a2 + 1984);
  a1[250] = *(char **)(a2 + 2000);
  *(_QWORD *)(a2 + 1992) = 0;
  *(_QWORD *)(a2 + 2000) = 0;
  *(_QWORD *)(a2 + 1984) = 0;
  *((_BYTE *)a1 + 2008) = *(_BYTE *)(a2 + 2008);
  v36 = a1[252];
  if (v36)
  {
    a1[253] = v36;
    operator delete(v36);
    a1[252] = 0;
    a1[253] = 0;
    a1[254] = 0;
  }
  *((_OWORD *)a1 + 126) = *(_OWORD *)(a2 + 2016);
  a1[254] = *(char **)(a2 + 2032);
  *(_QWORD *)(a2 + 2016) = 0;
  *(_QWORD *)(a2 + 2024) = 0;
  *(_QWORD *)(a2 + 2032) = 0;
  v37 = a1[255];
  if (v37)
  {
    a1[256] = v37;
    operator delete(v37);
    a1[255] = 0;
    a1[256] = 0;
    a1[257] = 0;
  }
  a1[255] = *(char **)(a2 + 2040);
  a1[256] = *(char **)(a2 + 2048);
  a1[257] = *(char **)(a2 + 2056);
  *(_QWORD *)(a2 + 2040) = 0;
  *(_QWORD *)(a2 + 2048) = 0;
  *(_QWORD *)(a2 + 2056) = 0;
  *((_BYTE *)a1 + 2064) = *(_BYTE *)(a2 + 2064);
  v38 = *(_OWORD *)(a2 + 2080);
  *(_QWORD *)(a2 + 2088) = 0;
  *(_QWORD *)(a2 + 2080) = 0;
  v39 = (std::__shared_weak_count *)a1[261];
  *((_OWORD *)a1 + 130) = v38;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = *(_OWORD *)(a2 + 2096);
  v43 = *(_OWORD *)(a2 + 2112);
  v44 = *(_OWORD *)(a2 + 2128);
  a1[268] = *(char **)(a2 + 2144);
  *((_OWORD *)a1 + 133) = v44;
  *((_OWORD *)a1 + 132) = v43;
  *((_OWORD *)a1 + 131) = v42;
  *((_WORD *)a1 + 1076) = *(_WORD *)(a2 + 2152);
  return a1;
}

uint64_t sub_22347DD4C(uint64_t result, _QWORD *a2, int32x4_t a3, int32x4_t a4, int32x4_t a5, double a6, float32x2_t a7, double a8, float32x4_t a9)
{
  float32x2_t *v10;
  float32x2_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  int32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x2_t v49;
  int32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x2_t v57;
  uint64_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x2_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t i;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x4_t v77;
  uint64_t v78;
  float32x2_t v79;

  v10 = (float32x2_t *)result;
  a3.i64[0] = *(_QWORD *)result;
  a5.i64[0] = *(_QWORD *)(result + 16);
  v11 = (float32x2_t)vzip1q_s32(a3, a5).u64[0];
  v12 = a3;
  v12.i32[2] = *(_DWORD *)(result + 8);
  a5.i32[2] = *(_DWORD *)(result + 24);
  a7.i32[0] = *(_DWORD *)(result + 40);
  a4.i64[0] = *(_QWORD *)(result + 32);
  v13 = (int8x16_t)a4;
  v13.i32[2] = a7.i32[0];
  v14 = (int8x16_t)vzip1q_s32(v12, a5);
  v15 = (int8x16_t)vtrn2q_s32(v12, a5);
  a9.i64[0] = *(_QWORD *)(result + 48);
  a9.i32[2] = *(_DWORD *)(result + 56);
  v16 = (int8x16_t)vnegq_f32(a9);
  v15.i32[2] = a4.i32[1];
  v17 = vzip2q_s32(v12, a5);
  *(float32x2_t *)v20.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v14.i8, *(float *)v16.i32), *(float32x2_t *)v15.i8, *(float32x2_t *)a9.f32, 1), *(float32x2_t *)v17.i8, a9, 2);
  v19 = (float32x4_t)v17;
  v19.i32[2] = a7.i32[0];
  v18.i32[3] = 0;
  v18.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v15, 0).i32[3];
  *(uint64_t *)((char *)v18.i64 + 4) = vextq_s8(v15, v14, 4uLL).u64[0];
  v19.i64[1] = vdupq_laneq_s32((int32x4_t)v19, 2).u32[0];
  v20.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)a4.i8, *(float32x2_t *)v16.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4.i8, 1), *(float32x2_t *)a9.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), a7).u32[0]);
  v21 = a2[245];
  v22 = a2[246];
  v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4.i8, 1);
  v24 = (float32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
  if (v21 != v22)
  {
    v14.i64[1] = a4.u32[0];
    do
    {
      v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v14, COERCE_FLOAT(*(_OWORD *)(v21 + 56))), v18, *(float32x2_t *)(v21 + 56), 1), v19, *(float32x4_t *)(v21 + 56), 2), v20, *(float32x4_t *)(v21 + 56), 3);
      v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v14, COERCE_FLOAT(*(_OWORD *)(v21 + 72))), v18, *(float32x2_t *)(v21 + 72), 1), v19, *(float32x4_t *)(v21 + 72), 2), v20, *(float32x4_t *)(v21 + 72), 3);
      v27 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v14, COERCE_FLOAT(*(_OWORD *)(v21 + 88))), v18, *(float32x2_t *)(v21 + 88), 1), v19, *(float32x4_t *)(v21 + 88), 2), v20, *(float32x4_t *)(v21 + 88), 3);
      *(float32x4_t *)(v21 + 40) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v14, COERCE_FLOAT(*(_OWORD *)(v21 + 40))), v18, *(float32x2_t *)(v21 + 40), 1), v19, *(float32x4_t *)(v21 + 40), 2), v20, *(float32x4_t *)(v21 + 40), 3);
      *(float32x4_t *)(v21 + 56) = v25;
      *(float32x4_t *)(v21 + 72) = v26;
      *(float32x4_t *)(v21 + 88) = v27;
      v25.i64[0] = *(_QWORD *)(v21 + 16);
      v26.i32[0] = *(_DWORD *)(v21 + 24);
      *(float32x2_t *)v27.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v11, v25.f32[0]), *(float32x2_t *)v18.f32, *(float32x2_t *)v25.f32, 1), *(float32x2_t *)v19.f32, v26.f32[0]);
      *(float32x2_t *)&v27.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v25.f32), v23, *(float32x2_t *)v25.f32, 1), *(float32x2_t *)v26.f32, v24);
      a4 = (int32x4_t)vaddq_f32(v27, v20);
      v26.i64[0] = *(_QWORD *)(v21 + 28);
      v27.i32[0] = *(_DWORD *)(v21 + 36);
      *(_DWORD *)(v21 + 24) = a4.i32[2];
      *(_QWORD *)(v21 + 16) = a4.i64[0];
      *(float32x2_t *)(v21 + 28) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v11, v26.f32[0]), *(float32x2_t *)v18.f32, *(float32x2_t *)v26.f32, 1), *(float32x2_t *)v19.f32, v27.f32[0]);
      *(_DWORD *)(v21 + 36) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v26.f32), v23, *(float32x2_t *)v26.f32, 1), *(float32x2_t *)v27.f32, v24).u32[0];
      v21 += 464;
    }
    while (v21 != v22);
  }
  v78 = v13.i64[0];
  v79 = v11;
  v76 = v19.i64[0];
  v77 = v20;
  v74 = v24;
  v75 = v18.i64[0];
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[249] - a2[248]) >> 3) != a2[239])
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/CoordinateSystemContainer.cpp", 205, (uint64_t)"kf_list.plane_segment_map.size() == kf_list.planes.size()", 57, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v24 = v74;
    v18.i64[0] = v75;
    v19.i64[0] = v76;
    v20 = v77;
    v13.i64[0] = v78;
    v11 = v79;
    if ((_DWORD)result)
LABEL_59:
      abort();
  }
  v28 = (uint64_t *)a2[238];
  if (v28)
  {
    while (1)
    {
      v29 = *(float32x4_t *)(v28 + 19);
      v30 = *(float32x4_t *)(v28 + 21);
      v31 = *(float32x4_t *)(v28 + 23);
      v32 = *(float32x4_t *)(v28 + 25);
      v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)v10->f32)), v30, *v10, 1), v31, *(float32x4_t *)v10->f32, 2), v32, *(float32x4_t *)v10->f32, 3);
      v34 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)v10[2].f32)), v30, v10[2], 1), v31, *(float32x4_t *)v10[2].f32, 2), v32, *(float32x4_t *)v10[2].f32, 3);
      v35 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)v10[4].f32)), v30, v10[4], 1), v31, *(float32x4_t *)v10[4].f32, 2), v32, *(float32x4_t *)v10[4].f32, 3);
      v36 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)v10[6].f32)), v30, v10[6], 1), v31, *(float32x4_t *)v10[6].f32, 2), v32, *(float32x4_t *)v10[6].f32, 3);
      *(float32x4_t *)(v28 + 19) = v33;
      *(float32x4_t *)(v28 + 21) = v34;
      *(float32x4_t *)(v28 + 23) = v35;
      *(float32x4_t *)(v28 + 25) = v36;
      v37 = (unsigned __int8 *)a2[248];
      v38 = (unsigned __int8 *)a2[249];
      if (v38 == v37)
        break;
      v39 = 0xCCCCCCCCCCCCCCCDLL * ((v38 - v37) >> 3);
      do
      {
        v40 = v39 >> 1;
        v41 = &v37[40 * (v39 >> 1)];
        v42 = *v41;
        v43 = *((unsigned __int8 *)v28 + 16);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[1];
        v43 = *((unsigned __int8 *)v28 + 17);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[2];
        v43 = *((unsigned __int8 *)v28 + 18);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[3];
        v43 = *((unsigned __int8 *)v28 + 19);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[4];
        v43 = *((unsigned __int8 *)v28 + 20);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[5];
        v43 = *((unsigned __int8 *)v28 + 21);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[6];
        v43 = *((unsigned __int8 *)v28 + 22);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[7];
        v43 = *((unsigned __int8 *)v28 + 23);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[8];
        v43 = *((unsigned __int8 *)v28 + 24);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[9];
        v43 = *((unsigned __int8 *)v28 + 25);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[10];
        v43 = *((unsigned __int8 *)v28 + 26);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[11];
        v43 = *((unsigned __int8 *)v28 + 27);
        if (v42 != v43)
          goto LABEL_28;
        v42 = v41[12];
        v43 = *((unsigned __int8 *)v28 + 28);
        if (v42 != v43
          || (v42 = v41[13], v43 = *((unsigned __int8 *)v28 + 29), v42 != v43)
          || (v42 = v41[14], v43 = *((unsigned __int8 *)v28 + 30), v42 != v43)
          || (v42 = v41[15], v43 = *((unsigned __int8 *)v28 + 31), v42 != v43))
        {
LABEL_28:
          if (v42 < v43)
          {
            v40 = v39 + ~v40;
            v37 = v41 + 40;
          }
        }
        v39 = v40;
      }
      while (v40);
      if (v38 == v37)
        goto LABEL_38;
      if ((sub_22319835C(v37, (unsigned __int8 *)v28 + 16) & 0x80) != 0)
      {
        v38 = (unsigned __int8 *)a2[249];
LABEL_38:
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/CoordinateSystemContainer.cpp", 211, (uint64_t)"it != kf_list.plane_segment_map.end()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v37 = v38;
        if ((_DWORD)result)
          goto LABEL_59;
        goto LABEL_39;
      }
      result = sub_22319835C((unsigned __int8 *)v28 + 16, v37);
      v38 = (unsigned __int8 *)a2[249];
      if ((result & 0x80) != 0)
        goto LABEL_38;
      v65 = v37 == v38;
      v38 = v37;
      if (v65)
        goto LABEL_38;
LABEL_39:
      v46 = v28[27];
      v47 = v28[28];
      if (0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3) != (uint64_t)(*((_QWORD *)v37 + 3) - *((_QWORD *)v37 + 2)) >> 4)
      {
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/CoordinateSystemContainer.cpp", 213, (uint64_t)"plane_data.local_plane_params.size() == local_to_global_planes.size()", 69, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        if ((result & 1) != 0)
          goto LABEL_59;
        v46 = v28[27];
        v47 = v28[28];
      }
      v13.i64[0] = v78;
      v11 = v79;
      v19.i64[0] = v76;
      v20 = v77;
      v24 = v74;
      v18.i64[0] = v75;
      if (v46 != v47)
      {
        v48 = 0;
        do
        {
          while (1)
          {
            v62 = a2[245];
            v63 = a2[246];
            if (v62 != v63)
            {
              v64 = (_QWORD *)(*((_QWORD *)v37 + 2) + 16 * v48);
              while (1)
              {
                v65 = *(_QWORD *)v62 == *v64 && *(_QWORD *)(v62 + 8) == v64[1];
                if (v65)
                  break;
                v62 += 464;
                if (v62 == v63)
                {
                  v66 = v28[27];
                  goto LABEL_44;
                }
              }
            }
            v66 = v28[27];
            if (v62 != v63)
              break;
LABEL_44:
            v44.i64[0] = v28[19];
            a4.i64[0] = v28[21];
            v49 = (float32x2_t)vzip1_s32(*(int32x2_t *)v44.i8, *(int32x2_t *)a4.i8);
            v50 = v44;
            v50.i32[2] = *((_DWORD *)v28 + 40);
            a4.i32[2] = *((_DWORD *)v28 + 44);
            v51 = (float32x2_t)v28[23];
            v44.i32[0] = *((_DWORD *)v28 + 48);
            v52 = (float32x2_t)vtrn2q_s32(v50, a4).u64[0];
            a4 = vzip2q_s32(v50, a4);
            v53 = (int8x16_t)vdupq_lane_s32((int32x2_t)v52, 1);
            v54 = (int8x16_t)vdupq_lane_s32((int32x2_t)v52, 0);
            v45.i64[0] = v28[25];
            v45.i32[2] = *((_DWORD *)v28 + 52);
            v55 = (int8x16_t)vnegq_f32(v45);
            *(float32x2_t *)v56.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v49, *(float *)v55.i32), v52, *(float32x2_t *)v45.f32, 1), *(float32x2_t *)a4.i8, v45, 2);
            v57 = vmla_f32(vmls_lane_f32(vmul_f32(v51, *(float32x2_t *)v55.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v51, 1), *(float32x2_t *)v45.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), *(float32x2_t *)v44.i8);
            v53.i64[0] = vextq_s8(v54, v53, 0xCuLL).u64[0];
            *(float32x2_t *)&v56.u32[2] = v57;
            v58 = v66 + 24 * v48;
            v57.i32[0] = *(_DWORD *)(v58 + 8);
            v59 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v49, COERCE_FLOAT(*(_QWORD *)v58)), *(float32x2_t *)v53.i8, *(float32x2_t *)v58, 1), *(float32x2_t *)a4.i8, v57.f32[0]);
            *(int32x2_t *)v54.i8 = vdup_lane_s32(*(int32x2_t *)v58, 1);
            *(float32x2_t *)&v45.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v51, *(float32x2_t *)v58), *(float32x2_t *)v54.i8, v51, 1), v57, *(float32x2_t *)v44.i8);
            v60 = vaddq_f32(v45, v56);
            v54.i32[0] = *(_DWORD *)(v58 + 20);
            v45.i64[0] = *(_QWORD *)(v58 + 12);
            v61 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v49, v45.f32[0]), *(float32x2_t *)v53.i8, *(float32x2_t *)v45.f32, 1), *(float32x2_t *)a4.i8, *(float *)v54.i32);
            *(_DWORD *)(v58 + 8) = v60.i32[2];
            *(_QWORD *)v58 = v60.i64[0];
            *(float32x2_t *)a4.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v51, *(float32x2_t *)v45.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.f32, 1), v51, 1), *(float32x2_t *)v54.i8, *(float32x2_t *)v44.i8);
            *(float32x2_t *)(v58 + 12) = v61;
            *(_DWORD *)(v58 + 20) = a4.i32[0];
            v46 += 24;
            ++v48;
            if (v46 == v47)
              goto LABEL_8;
          }
          v67 = v66 + 24 * v48;
          v68 = *(_QWORD *)(v62 + 16);
          *(_DWORD *)(v67 + 8) = *(_DWORD *)(v62 + 24);
          *(_QWORD *)v67 = v68;
          v69 = *(_QWORD *)(v62 + 28);
          *(_DWORD *)(v67 + 20) = *(_DWORD *)(v62 + 36);
          *(_QWORD *)(v67 + 12) = v69;
          v46 += 24;
          ++v48;
        }
        while (v46 != v47);
      }
LABEL_8:
      v28 = (uint64_t *)*v28;
      if (!v28)
        goto LABEL_56;
    }
    v38 = (unsigned __int8 *)a2[248];
    goto LABEL_38;
  }
LABEL_56:
  v70 = a2[252];
  for (i = a2[253]; v70 != i; v70 += 24)
  {
    a4.i32[0] = *(_DWORD *)(v70 + 8);
    *(float32x2_t *)v72.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v11, COERCE_FLOAT(*(_QWORD *)v70)), *(float32x2_t *)v18.f32, *(float32x2_t *)v70, 1), *(float32x2_t *)v19.f32, *(float *)a4.i32);
    *(float32x2_t *)&v72.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v70), v23, *(float32x2_t *)v70, 1), *(float32x2_t *)a4.i8, v24);
    v73 = vaddq_f32(v20, v72);
    a4.i64[0] = *(_QWORD *)(v70 + 12);
    v72.i32[0] = *(_DWORD *)(v70 + 20);
    *(_DWORD *)(v70 + 8) = v73.i32[2];
    *(_QWORD *)v70 = v73.i64[0];
    *(float32x2_t *)(v70 + 12) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v11, *(float *)a4.i32), *(float32x2_t *)v18.f32, *(float32x2_t *)a4.i8, 1), *(float32x2_t *)v19.f32, v72.f32[0]);
    *(_DWORD *)(v70 + 20) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)a4.i8), v23, *(float32x2_t *)a4.i8, 1), *(float32x2_t *)v72.f32, v24).u32[0];
  }
  return result;
}

_QWORD *sub_22347E468(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = a1[1];
  if (v3)
  {
    v4 = a1[2];
    v5 = (void *)a1[1];
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 224);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 248;
      }
      while (v4 != v3);
      v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_22347E510(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;

  v3 = (_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_24;
  v5 = a1 + 16;
  do
  {
    v6 = sub_22319835C((unsigned __int8 *)(v4 + 32), a2);
    if (v6 >= 0)
      v7 = (uint64_t *)v4;
    else
      v7 = (uint64_t *)(v4 + 8);
    if (v6 >= 0)
      v5 = v4;
    v4 = *v7;
  }
  while (*v7);
  if ((_QWORD *)v5 == v3 || (sub_22319835C(a2, (unsigned __int8 *)(v5 + 32)) & 0x80) != 0)
  {
LABEL_24:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/CoordinateSystemContainer.cpp", 128, (uint64_t)"coordinate_system_store_.contains(cid)", 38, (uint64_t)"Cluster not found!", 18, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  v8 = *v3;
  if (!*v3)
    goto LABEL_18;
  while (1)
  {
    while (1)
    {
      v9 = (_QWORD *)v8;
      v10 = (unsigned __int8 *)(v8 + 32);
      if ((sub_22319835C(a2, (unsigned __int8 *)(v8 + 32)) & 0x80) == 0)
        break;
      v8 = *v9;
      v3 = v9;
      if (!*v9)
        goto LABEL_18;
    }
    if ((sub_22319835C(v10, a2) & 0x80) == 0)
      break;
    v8 = v9[1];
    v3 = v9 + 1;
    if (!v8)
      goto LABEL_18;
  }
  if (!*v3)
LABEL_18:
    sub_223198218("map::at:  key not found");
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(*v3 + 48) + 112) + 72))(*(_QWORD *)(*(_QWORD *)(*v3 + 48) + 112));
}

uint64_t sub_22347E62C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  unsigned __int8 *i;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 *v7;

  v3 = (uint64_t *)(a1 + 40);
  for (i = *(unsigned __int8 **)(a1 + 40); i; i = *(unsigned __int8 **)i)
  {
    if ((sub_22319835C(a2, i + 32) & 0x80) == 0)
    {
      if ((sub_22319835C(i + 32, a2) & 0x80) == 0)
        goto LABEL_3;
      i += 8;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SessionNodeGroup/src/CoordinateSystemContainer.cpp", 134, (uint64_t)"result_store_.count(cid)", 24, (uint64_t)"Cluster not found!", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_3:
  v5 = *v3;
  if (!*v3)
    goto LABEL_9;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v5;
      v7 = (unsigned __int8 *)(v5 + 32);
      if ((sub_22319835C(a2, (unsigned __int8 *)(v5 + 32)) & 0x80) == 0)
        break;
      v5 = *v6;
      v3 = v6;
      if (!*v6)
        goto LABEL_9;
    }
    if ((sub_22319835C(v7, a2) & 0x80) == 0)
      break;
    v5 = v6[1];
    v3 = v6 + 1;
    if (!v5)
      goto LABEL_9;
  }
  if (!*v3)
LABEL_9:
    sub_223198218("map::at:  key not found");
  return *v3 + 48;
}

uint64_t sub_22347E72C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t i;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t result;
  _QWORD *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;

  v2 = *(uint64_t **)(a1 + 40);
  if (!v2)
LABEL_123:
    sub_223198218("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v4 = *((unsigned __int8 *)v2 + 32);
      if (v4 != 37)
      {
        if (v4 < 0x26)
          goto LABEL_24;
        goto LABEL_3;
      }
      v5 = *((unsigned __int8 *)v2 + 33);
      v6 = v5 > 0xCC;
      if (v5 != 204
        || (v7 = *((unsigned __int8 *)v2 + 34), v6 = v7 > 0x7B, v7 != 123)
        || (v8 = *((unsigned __int8 *)v2 + 35), v6 = v8 > 0xBD, v8 != 189))
      {
        if (!v6)
          goto LABEL_24;
        goto LABEL_3;
      }
      v9 = *((unsigned __int8 *)v2 + 36);
      if (v9 != 78)
        break;
      v10 = *((unsigned __int8 *)v2 + 37);
      if (v10 != 91)
      {
        if (v10 > 0x5B)
          goto LABEL_3;
        goto LABEL_47;
      }
      v11 = *((unsigned __int8 *)v2 + 38);
      if (v11 != 143)
      {
        if (v11 > 0x8F)
          goto LABEL_3;
        goto LABEL_47;
      }
      v12 = *((unsigned __int8 *)v2 + 39);
      if (v12 != 12)
      {
        if (v12 > 0xC)
          goto LABEL_3;
        goto LABEL_47;
      }
      v13 = *((unsigned __int8 *)v2 + 40);
      if (v13 != 236)
      {
        if (v13 > 0xEC)
          goto LABEL_3;
        goto LABEL_47;
      }
      v14 = *((unsigned __int8 *)v2 + 41);
      if (v14 != 50)
      {
        if (v14 > 0x32)
          goto LABEL_3;
        goto LABEL_47;
      }
      v15 = *((unsigned __int8 *)v2 + 42);
      if (v15 != 162)
      {
        if (v15 > 0xA2)
          goto LABEL_3;
        goto LABEL_47;
      }
      v16 = *((unsigned __int8 *)v2 + 43);
      if (v16 != 209)
      {
        if (v16 > 0xD1)
          goto LABEL_3;
        goto LABEL_47;
      }
      v17 = *((unsigned __int8 *)v2 + 44);
      if (v17 != 99)
      {
        if (v17 > 0x63)
          goto LABEL_3;
        goto LABEL_47;
      }
      v18 = *((unsigned __int8 *)v2 + 45);
      if (v18 != 215)
      {
        if (v18 > 0xD7)
          goto LABEL_3;
        goto LABEL_47;
      }
      v19 = *((unsigned __int8 *)v2 + 46);
      if (v19 == 6)
      {
        if (*((unsigned __int8 *)v2 + 47) <= 0xB6u)
          goto LABEL_47;
      }
      else if (v19 <= 6)
      {
        goto LABEL_47;
      }
LABEL_3:
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_123;
    }
    if (v9 > 0x4E)
      goto LABEL_3;
LABEL_47:
    v20 = *((unsigned __int8 *)v2 + 36);
    if (v20 != 78)
    {
      if (v20 >= 0x4E)
        goto LABEL_81;
      goto LABEL_24;
    }
    v21 = *((unsigned __int8 *)v2 + 37);
    if (v21 != 91)
    {
      if (v21 >= 0x5B)
        goto LABEL_81;
      goto LABEL_24;
    }
    v22 = *((unsigned __int8 *)v2 + 38);
    if (v22 != 143)
    {
      if (v22 >= 0x8F)
        goto LABEL_81;
      goto LABEL_24;
    }
    v23 = *((unsigned __int8 *)v2 + 39);
    if (v23 != 12)
    {
      if (v23 >= 0xC)
        goto LABEL_81;
      goto LABEL_24;
    }
    v24 = *((unsigned __int8 *)v2 + 40);
    if (v24 != 236)
    {
      if (v24 >= 0xEC)
        goto LABEL_81;
      goto LABEL_24;
    }
    v25 = *((unsigned __int8 *)v2 + 41);
    if (v25 != 50)
    {
      if (v25 >= 0x32)
        goto LABEL_81;
      goto LABEL_24;
    }
    v26 = *((unsigned __int8 *)v2 + 42);
    if (v26 != 162)
    {
      if (v26 >= 0xA2)
        goto LABEL_81;
      goto LABEL_24;
    }
    v27 = *((unsigned __int8 *)v2 + 43);
    if (v27 != 209)
    {
      if (v27 >= 0xD1)
        goto LABEL_81;
      goto LABEL_24;
    }
    v28 = *((unsigned __int8 *)v2 + 44);
    if (v28 != 99)
    {
      if (v28 >= 0x63)
        goto LABEL_81;
      goto LABEL_24;
    }
    v29 = *((unsigned __int8 *)v2 + 45);
    if (v29 == 215)
      break;
    if (v29 >= 0xD7)
      goto LABEL_81;
LABEL_24:
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_123;
  }
  v30 = *((unsigned __int8 *)v2 + 46);
  if (v30 == 6)
  {
    if (*((unsigned __int8 *)v2 + 47) >= 0xB6u)
      goto LABEL_81;
    goto LABEL_24;
  }
  if (v30 < 6)
    goto LABEL_24;
LABEL_81:
  *((_WORD *)v2 + 24) = *(_WORD *)a2;
  v31 = *(_OWORD *)(a2 + 4);
  v32 = *(_OWORD *)(a2 + 20);
  v33 = *(_OWORD *)(a2 + 36);
  *(_OWORD *)((char *)v2 + 100) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)((char *)v2 + 84) = v33;
  *(_OWORD *)((char *)v2 + 68) = v32;
  *(_OWORD *)((char *)v2 + 52) = v31;
  if (v2 + 6 != (uint64_t *)a2)
  {
    sub_223484290((void **)v2 + 15, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
    sub_223484748((char **)v2 + 18, *(__int128 **)(a2 + 96), *(__int128 **)(a2 + 104), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2));
    sub_223481728((uint64_t **)v2 + 21, *(_QWORD **)(a2 + 120), (_QWORD *)(a2 + 128));
    sub_223475EB0((uint64_t)(v2 + 24), *(_QWORD **)(a2 + 144), (_QWORD *)(a2 + 152));
  }
  v34 = v2 + 27;
  if (v2 + 6 != (uint64_t *)a2)
    sub_223484290((void **)v2 + 27, *(_QWORD *)(a2 + 168), *(_QWORD *)(a2 + 176), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3));
  v35 = (uint64_t *)(a2 + 168);
  v36 = (uint64_t)(v2 + 30);
  v37 = a2 + 192;
  if (*((unsigned __int8 *)v2 + 2064) != *(unsigned __int8 *)(a2 + 2016))
  {
    if (!*((_BYTE *)v2 + 2064))
    {
      sub_223257000(v36, v37);
      *((_BYTE *)v2 + 2064) = 1;
      sub_2234837DC((uint64_t)(v2 + 259), a2 + 2024);
      if (v34 == v35)
        goto LABEL_111;
      goto LABEL_92;
    }
    sub_2232555B8(v36);
    *((_BYTE *)v2 + 2064) = 0;
    goto LABEL_91;
  }
  if (!*((_BYTE *)v2 + 2064))
  {
LABEL_91:
    sub_2234837DC((uint64_t)(v2 + 259), a2 + 2024);
    if (v34 != v35)
      goto LABEL_92;
    goto LABEL_111;
  }
  sub_223481BB8(v36, v37);
  sub_2234837DC((uint64_t)(v2 + 259), a2 + 2024);
  if (v34 == v35)
    goto LABEL_111;
LABEL_92:
  *((_DWORD *)v2 + 534) = *(_DWORD *)(a2 + 2088);
  v38 = *(uint64_t **)(a2 + 2072);
  v39 = v2[264];
  if (!v39)
    goto LABEL_108;
  for (i = 0; i != v39; ++i)
    *(_QWORD *)(v2[263] + 8 * i) = 0;
  v41 = (uint64_t *)v2[265];
  v2[266] = 0;
  v2[265] = 0;
  if (v41)
  {
    while (v38)
    {
      *((_OWORD *)v41 + 1) = *((_OWORD *)v38 + 1);
      v43 = v38[5];
      v42 = v38[6];
      if (v42)
      {
        v44 = (unint64_t *)(v42 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v46 = (std::__shared_weak_count *)v41[6];
      v41[5] = v43;
      v41[6] = v42;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(p_shared_owners);
        while (__stlxr(v48 - 1, p_shared_owners));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v41[9] = v38[9];
      v41[10] = v38[10];
      *(_OWORD *)(v41 + 11) = *(_OWORD *)(v38 + 11);
      v49 = *(_OWORD *)(v38 + 13);
      v50 = *(_OWORD *)(v38 + 15);
      *((_DWORD *)v41 + 34) = *((_DWORD *)v38 + 34);
      *(_OWORD *)(v41 + 15) = v50;
      *(_OWORD *)(v41 + 13) = v49;
      v41[18] = v38[18];
      v51 = *(_OWORD *)(v38 + 19);
      v52 = *(_OWORD *)(v38 + 21);
      v53 = *(_OWORD *)(v38 + 23);
      *(_OWORD *)(v41 + 25) = *(_OWORD *)(v38 + 25);
      *(_OWORD *)(v41 + 23) = v53;
      *(_OWORD *)(v41 + 21) = v52;
      *(_OWORD *)(v41 + 19) = v51;
      if (v41 != v38)
        sub_223483E38((char **)v41 + 27, (uint64_t *)v38[27], (uint64_t *)v38[28], 0xAAAAAAAAAAAAAAABLL * ((v38[28] - v38[27]) >> 3));
      v54 = (uint64_t *)*v41;
      sub_2234838BC((uint64_t)(v2 + 263), v41);
      v38 = (uint64_t *)*v38;
      v41 = v54;
      if (!v54)
        goto LABEL_108;
    }
    do
    {
      v57 = v41;
      v41 = (uint64_t *)*v41;
      v58 = (void *)v57[27];
      if (v58)
      {
        v57[28] = v58;
        operator delete(v58);
      }
      v57[7] = &off_24EC20828;
      v57[4] = &off_24EC715B8;
      v59 = (std::__shared_weak_count *)v57[6];
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      operator delete(v57);
    }
    while (v41);
  }
  else
  {
LABEL_108:
    while (v38)
    {
      v55 = operator new(0xF0uLL);
      *v55 = 0;
      v55[1] = 0;
      *((_OWORD *)v55 + 1) = *((_OWORD *)v38 + 1);
      sub_2234814D0((uint64_t)(v55 + 4), (uint64_t)(v38 + 4));
      v55[1] = sub_22456636C((unsigned __int8 *)v55 + 16);
      sub_2234838BC((uint64_t)(v2 + 263), v55);
      v38 = (uint64_t *)*v38;
    }
  }
  sub_223484748((char **)v2 + 268, *(__int128 **)(a2 + 2096), *(__int128 **)(a2 + 2104), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 2104) - *(_QWORD *)(a2 + 2096)) >> 2));
  *((_BYTE *)v2 + 2168) = *(_BYTE *)(a2 + 2120);
  sub_223331ABC(v2 + 272, *(_QWORD *)(a2 + 2128), *(_QWORD *)(a2 + 2136), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 2136) - *(_QWORD *)(a2 + 2128)) >> 4));
  sub_22342D57C(v2 + 275, *(_QWORD *)(a2 + 2152), *(_QWORD *)(a2 + 2160), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 2160) - *(_QWORD *)(a2 + 2152)) >> 3));
  *((_BYTE *)v2 + 2224) = *(_BYTE *)(a2 + 2176);
  sub_223483E38((char **)v2 + 279, *(uint64_t **)(a2 + 2184), *(uint64_t **)(a2 + 2192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 2192) - *(_QWORD *)(a2 + 2184)) >> 3));
  sub_223484084((char **)v2 + 282, *(_QWORD *)(a2 + 2208), *(_QWORD *)(a2 + 2216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 2216) - *(_QWORD *)(a2 + 2208)) >> 3));
LABEL_111:
  *((_BYTE *)v2 + 2280) = *(_BYTE *)(a2 + 2232);
  result = sub_22449B750(v2 + 287, a2 + 2248);
  *((_WORD *)v2 + 1184) = *(_WORD *)(a2 + 2320);
  *((_DWORD *)v2 + 594) = *(_DWORD *)(a2 + 2328);
  return result;
}

void sub_22347EF40(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_22347EF54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22347EF68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = (void *)v1[27];
  if (v3)
  {
    v1[28] = v3;
    operator delete(v3);
  }
  v1[7] = &off_24EC20828;
  v1[4] = &off_24EC715B8;
  v4 = (std::__shared_weak_count *)v1[6];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_22347F028@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  BOOL v4;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)result + 616))
    v3 = *((_BYTE *)result + 936) == 0;
  else
    v3 = 1;
  v4 = v3 || *((_BYTE *)result + 1032) == 0;
  if (v4
    || (*((_BYTE *)result + 553) ? (v5 = *((_BYTE *)result + 328) == 0) : (v5 = 1), v5 || !*((_BYTE *)result + 580)))
  {
    v11 = xmmword_2245F6D10;
    return (uint64_t *)sub_223485538((_QWORD **)a2, (unsigned __int8 *)&v11, 1);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = a2 + 8;
    v6 = (unsigned __int8 *)result[4];
    v7 = result + 5;
    if (v6 != (unsigned __int8 *)(result + 5))
    {
      do
      {
        v11 = xmmword_2245F6D10;
        v8 = *((_QWORD *)v6 + 4) == 0xC8F5B4EBD7BCC25 && *((_QWORD *)v6 + 5) == 0xB606D763D1A232ECLL;
        if (!v8
          && ((v6[48] & 0x10) != 0
           || v6[49] != 4
           || *((_QWORD *)v6 + 27) != *((_QWORD *)v6 + 28)
           || *((_QWORD *)v6 + 268) != *((_QWORD *)v6 + 269)
           || v6[2379] && v6[2376] | v6[2377]))
        {
          result = sub_2231A9984((uint64_t **)a2, v6 + 32, (_OWORD *)v6 + 2);
        }
        v9 = (uint64_t *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (uint64_t *)*((_QWORD *)v6 + 2);
            v3 = *v10 == (_QWORD)v6;
            v6 = (unsigned __int8 *)v10;
          }
          while (!v3);
        }
        v6 = (unsigned __int8 *)v10;
      }
      while (v10 != v7);
    }
  }
  return result;
}

void sub_22347F1C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_22347F1D8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = sub_223260C0C(a1, a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  v6 = a2[3];
  v5 = a2[4];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    v8 = 0xCF3CF3CF3CF3CF3DLL * (v7 >> 2);
    if (v8 >= 0x30C30C30C30C30DLL)
      sub_22316E078();
    v9 = (char *)operator new(v7);
    v10 = 0;
    a1[3] = v9;
    a1[4] = v9;
    a1[5] = &v9[84 * v8];
    do
    {
      v11 = v6 + v10;
      v12 = &v9[v10];
      v13 = *(_OWORD *)(v6 + v10);
      v12[16] = *(_BYTE *)(v6 + v10 + 16);
      *(_OWORD *)v12 = v13;
      v14 = *(_OWORD *)(v6 + v10 + 20);
      v15 = *(_OWORD *)(v6 + v10 + 36);
      v16 = *(_OWORD *)(v6 + v10 + 52);
      *(_OWORD *)(v12 + 68) = *(_OWORD *)(v6 + v10 + 68);
      *(_OWORD *)(v12 + 52) = v16;
      *(_OWORD *)(v12 + 36) = v15;
      *(_OWORD *)(v12 + 20) = v14;
      v10 += 84;
    }
    while (v11 + 84 != v5);
    a1[4] = &v9[v10];
  }
  return a1;
}

void sub_22347F2CC(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v2;
  void **v3;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    v1[4] = v5;
    operator delete(v5);
    v6 = (char *)*v1;
    if (!*v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = (char *)*v1;
    if (!*v1)
      goto LABEL_3;
  }
  v7 = (char *)v1[1];
  v8 = v6;
  if (v7 != v6)
  {
    do
    {
      v9 = (std::__shared_weak_count *)*((_QWORD *)v7 - 28);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v7 -= 248;
    }
    while (v7 != v6);
    v8 = *v1;
  }
  v1[1] = v6;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22347F36C(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  __int128 *v64;
  int v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  int v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD *v108;
  __int128 *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  std::__shared_weak_count *v117;
  __int128 v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  void **v129;
  uint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;

  v4 = *(unsigned __int8 *)(a1 + 56);
  if (v4 == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v5 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v6 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v5;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
      *(_OWORD *)(a1 + 24) = v9;
      v10 = *(unsigned __int8 *)(a1 + 120);
      if (v10 != *(unsigned __int8 *)(a2 + 120))
        goto LABEL_27;
LABEL_18:
      if (!v10)
        goto LABEL_34;
      v14 = *(_OWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      v15 = *(std::__shared_weak_count **)(a1 + 80);
      *(_OWORD *)(a1 + 72) = v14;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 98) = *(_OWORD *)(a2 + 98);
      *(_OWORD *)(a1 + 88) = v18;
      v19 = *(unsigned __int8 *)(a1 + 208);
      if (v19 != *(unsigned __int8 *)(a2 + 208))
        goto LABEL_44;
      goto LABEL_35;
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC21328;
    if (!v4)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v20 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
      *(_OWORD *)(a1 + 24) = v20;
      *(_BYTE *)(a1 + 56) = 1;
      v10 = *(unsigned __int8 *)(a1 + 120);
      if (v10 == *(unsigned __int8 *)(a2 + 120))
        goto LABEL_18;
      goto LABEL_27;
    }
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *(_BYTE *)(a1 + 56) = 0;
  }
  v10 = *(unsigned __int8 *)(a1 + 120);
  if (v10 == *(unsigned __int8 *)(a2 + 120))
    goto LABEL_18;
LABEL_27:
  *(_QWORD *)(a1 + 64) = &off_24EC21328;
  if (v10)
  {
    v21 = *(std::__shared_weak_count **)(a1 + 80);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    *(_BYTE *)(a1 + 120) = 0;
LABEL_34:
    v19 = *(unsigned __int8 *)(a1 + 208);
    if (v19 == *(unsigned __int8 *)(a2 + 208))
      goto LABEL_35;
LABEL_44:
    *(_QWORD *)(a1 + 128) = &off_24EC26FA8;
    if (!v19)
    {
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
      v40 = *(_OWORD *)(a2 + 152);
      v41 = *(_OWORD *)(a2 + 168);
      v42 = *(_OWORD *)(a2 + 184);
      *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = v42;
      *(_OWORD *)(a1 + 168) = v41;
      *(_OWORD *)(a1 + 152) = v40;
      *(_BYTE *)(a1 + 208) = 1;
      v43 = *(_OWORD *)(a2 + 216);
      *(_QWORD *)(a2 + 216) = 0;
      *(_QWORD *)(a2 + 224) = 0;
      v32 = *(std::__shared_weak_count **)(a1 + 224);
      *(_OWORD *)(a1 + 216) = v43;
      if (!v32)
        goto LABEL_57;
      goto LABEL_52;
    }
    v34 = *(std::__shared_weak_count **)(a1 + 144);
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    *(_BYTE *)(a1 + 208) = 0;
    goto LABEL_51;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v33 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 98) = *(_OWORD *)(a2 + 98);
  *(_OWORD *)(a1 + 88) = v33;
  *(_BYTE *)(a1 + 120) = 1;
  v19 = *(unsigned __int8 *)(a1 + 208);
  if (v19 != *(unsigned __int8 *)(a2 + 208))
    goto LABEL_44;
LABEL_35:
  if (!v19)
  {
LABEL_51:
    v37 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a2 + 216) = 0;
    *(_QWORD *)(a2 + 224) = 0;
    v32 = *(std::__shared_weak_count **)(a1 + 224);
    *(_OWORD *)(a1 + 216) = v37;
    if (!v32)
      goto LABEL_57;
    goto LABEL_52;
  }
  v24 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  v25 = *(std::__shared_weak_count **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(_OWORD *)(a2 + 152);
  v29 = *(_OWORD *)(a2 + 168);
  v30 = *(_OWORD *)(a2 + 184);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v30;
  *(_OWORD *)(a1 + 168) = v29;
  *(_OWORD *)(a1 + 152) = v28;
  v31 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  v32 = *(std::__shared_weak_count **)(a1 + 224);
  *(_OWORD *)(a1 + 216) = v31;
  if (v32)
  {
LABEL_52:
    v38 = (unint64_t *)&v32->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
LABEL_57:
  v44 = *(unsigned __int8 *)(a1 + 288);
  if (v44 != *(unsigned __int8 *)(a2 + 288))
  {
    *(_QWORD *)(a1 + 232) = &off_24EC270A0;
    if (!v44)
    {
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(a2 + 240) = 0;
      *(_QWORD *)(a2 + 248) = 0;
      v59 = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 266) = *(_OWORD *)(a2 + 266);
      *(_OWORD *)(a1 + 256) = v59;
      *(_BYTE *)(a1 + 288) = 1;
      v50 = *(unsigned __int8 *)(a1 + 352);
      if (v50 == *(unsigned __int8 *)(a2 + 352))
        goto LABEL_74;
LABEL_82:
      *(_QWORD *)(a1 + 296) = &off_24EC21328;
      if (v50)
      {
        v60 = *(std::__shared_weak_count **)(a1 + 312);
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        *(_BYTE *)(a1 + 352) = 0;
      }
      else
      {
        *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
        *(_QWORD *)(a2 + 304) = 0;
        *(_QWORD *)(a2 + 312) = 0;
        v63 = *(_OWORD *)(a2 + 320);
        *(_OWORD *)(a1 + 330) = *(_OWORD *)(a2 + 330);
        *(_OWORD *)(a1 + 320) = v63;
        *(_BYTE *)(a1 + 352) = 1;
      }
      goto LABEL_90;
    }
    v51 = *(std::__shared_weak_count **)(a1 + 248);
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    *(_BYTE *)(a1 + 288) = 0;
LABEL_73:
    v50 = *(unsigned __int8 *)(a1 + 352);
    if (v50 == *(unsigned __int8 *)(a2 + 352))
      goto LABEL_74;
    goto LABEL_82;
  }
  if (!*(_BYTE *)(a1 + 288))
    goto LABEL_73;
  v45 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  v46 = *(std::__shared_weak_count **)(a1 + 248);
  *(_OWORD *)(a1 + 240) = v45;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 266) = *(_OWORD *)(a2 + 266);
  *(_OWORD *)(a1 + 256) = v49;
  v50 = *(unsigned __int8 *)(a1 + 352);
  if (v50 != *(unsigned __int8 *)(a2 + 352))
    goto LABEL_82;
LABEL_74:
  if (v50)
  {
    v54 = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 312) = 0;
    v55 = *(std::__shared_weak_count **)(a1 + 312);
    *(_OWORD *)(a1 + 304) = v54;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 330) = *(_OWORD *)(a2 + 330);
    *(_OWORD *)(a1 + 320) = v58;
  }
LABEL_90:
  v64 = (__int128 *)(a2 + 984);
  sub_22347FED4(a1 + 360, a2 + 360);
  sub_223480184(a1 + 568, a2 + 568);
  v65 = *(unsigned __int8 *)(a1 + 1032);
  if (v65 != *(unsigned __int8 *)(a2 + 1032))
  {
    *(_QWORD *)(a1 + 976) = &off_24EC270A0;
    if (!v65)
    {
      *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
      *(_QWORD *)(a1 + 992) = *(_QWORD *)(a2 + 992);
      *(_QWORD *)(a2 + 992) = 0;
      *(_QWORD *)(a2 + 984) = 0;
      v83 = *(_OWORD *)(a2 + 1000);
      *(_OWORD *)(a1 + 1010) = *(_OWORD *)(a2 + 1010);
      *(_OWORD *)(a1 + 1000) = v83;
      *(_BYTE *)(a1 + 1032) = 1;
      v71 = *(unsigned __int8 *)(a1 + 1120);
      if (v71 != *(unsigned __int8 *)(a2 + 1120))
        goto LABEL_116;
LABEL_107:
      if (v71)
      {
        v75 = *(_OWORD *)(a2 + 1048);
        *(_QWORD *)(a2 + 1048) = 0;
        *(_QWORD *)(a2 + 1056) = 0;
        v76 = *(std::__shared_weak_count **)(a1 + 1056);
        *(_OWORD *)(a1 + 1048) = v75;
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v79 = *(_OWORD *)(a2 + 1064);
        v80 = *(_OWORD *)(a2 + 1080);
        v81 = *(_OWORD *)(a2 + 1096);
        *(_WORD *)(a1 + 1112) = *(_WORD *)(a2 + 1112);
        *(_OWORD *)(a1 + 1096) = v81;
        *(_OWORD *)(a1 + 1080) = v80;
        *(_OWORD *)(a1 + 1064) = v79;
        v82 = *(unsigned __int8 *)(a1 + 1208);
        if (v82 == *(unsigned __int8 *)(a2 + 1208))
          goto LABEL_124;
        goto LABEL_132;
      }
      goto LABEL_123;
    }
    v72 = *(std::__shared_weak_count **)(a1 + 992);
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    *(_BYTE *)(a1 + 1032) = 0;
LABEL_106:
    v71 = *(unsigned __int8 *)(a1 + 1120);
    if (v71 != *(unsigned __int8 *)(a2 + 1120))
      goto LABEL_116;
    goto LABEL_107;
  }
  if (!*(_BYTE *)(a1 + 1032))
    goto LABEL_106;
  v66 = *v64;
  *(_QWORD *)v64 = 0;
  *(_QWORD *)(a2 + 992) = 0;
  v67 = *(std::__shared_weak_count **)(a1 + 992);
  *(_OWORD *)(a1 + 984) = v66;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *(_OWORD *)(a2 + 1000);
  *(_OWORD *)(a1 + 1010) = *(_OWORD *)(a2 + 1010);
  *(_OWORD *)(a1 + 1000) = v70;
  v71 = *(unsigned __int8 *)(a1 + 1120);
  if (v71 == *(unsigned __int8 *)(a2 + 1120))
    goto LABEL_107;
LABEL_116:
  *(_QWORD *)(a1 + 1040) = &off_24EC27290;
  if (v71)
  {
    v84 = *(std::__shared_weak_count **)(a1 + 1056);
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    *(_BYTE *)(a1 + 1120) = 0;
LABEL_123:
    v82 = *(unsigned __int8 *)(a1 + 1208);
    if (v82 == *(unsigned __int8 *)(a2 + 1208))
      goto LABEL_124;
    goto LABEL_132;
  }
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a2 + 1056) = 0;
  *(_QWORD *)(a2 + 1048) = 0;
  v94 = *(_OWORD *)(a2 + 1064);
  v95 = *(_OWORD *)(a2 + 1080);
  v96 = *(_OWORD *)(a2 + 1096);
  *(_WORD *)(a1 + 1112) = *(_WORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1096) = v96;
  *(_OWORD *)(a1 + 1080) = v95;
  *(_OWORD *)(a1 + 1064) = v94;
  *(_BYTE *)(a1 + 1120) = 1;
  v82 = *(unsigned __int8 *)(a1 + 1208);
  if (v82 == *(unsigned __int8 *)(a2 + 1208))
  {
LABEL_124:
    if (v82)
    {
      v87 = *(_OWORD *)(a2 + 1136);
      *(_QWORD *)(a2 + 1144) = 0;
      *(_QWORD *)(a2 + 1136) = 0;
      v88 = *(std::__shared_weak_count **)(a1 + 1144);
      *(_OWORD *)(a1 + 1136) = v87;
      if (v88)
      {
        v89 = (unint64_t *)&v88->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v91 = *(_OWORD *)(a2 + 1152);
      v92 = *(_OWORD *)(a2 + 1168);
      v93 = *(_OWORD *)(a2 + 1184);
      *(_WORD *)(a1 + 1200) = *(_WORD *)(a2 + 1200);
      *(_OWORD *)(a1 + 1184) = v93;
      *(_OWORD *)(a1 + 1168) = v92;
      *(_OWORD *)(a1 + 1152) = v91;
    }
    goto LABEL_140;
  }
LABEL_132:
  *(_QWORD *)(a1 + 1128) = &off_24EC26EB0;
  if (v82)
  {
    v97 = *(std::__shared_weak_count **)(a1 + 1144);
    if (v97)
    {
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    *(_BYTE *)(a1 + 1208) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a2 + 1136);
    *(_QWORD *)(a2 + 1144) = 0;
    *(_QWORD *)(a2 + 1136) = 0;
    v100 = *(_OWORD *)(a2 + 1152);
    v101 = *(_OWORD *)(a2 + 1168);
    v102 = *(_OWORD *)(a2 + 1184);
    *(_WORD *)(a1 + 1200) = *(_WORD *)(a2 + 1200);
    *(_OWORD *)(a1 + 1184) = v102;
    *(_OWORD *)(a1 + 1168) = v101;
    *(_OWORD *)(a1 + 1152) = v100;
    *(_BYTE *)(a1 + 1208) = 1;
  }
LABEL_140:
  *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a2 + 1216);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(a2 + 1264);
  *(_OWORD *)(a1 + 1272) = *(_OWORD *)(a2 + 1272);
  v103 = *(_OWORD *)(a2 + 1288);
  v104 = *(_OWORD *)(a2 + 1304);
  *(_DWORD *)(a1 + 1320) = *(_DWORD *)(a2 + 1320);
  *(_OWORD *)(a1 + 1288) = v103;
  *(_OWORD *)(a1 + 1304) = v104;
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
  v105 = *(_OWORD *)(a2 + 1336);
  v106 = *(_OWORD *)(a2 + 1352);
  v107 = *(_OWORD *)(a2 + 1384);
  *(_OWORD *)(a1 + 1368) = *(_OWORD *)(a2 + 1368);
  *(_OWORD *)(a1 + 1384) = v107;
  *(_OWORD *)(a1 + 1336) = v105;
  *(_OWORD *)(a1 + 1352) = v106;
  *(_BYTE *)(a1 + 1400) = *(_BYTE *)(a2 + 1400);
  sub_223480770(a1 + 1408, (__int128 *)(a2 + 1408));
  v108 = (_OWORD *)(a1 + 1616);
  v109 = (__int128 *)(a2 + 1616);
  if (*(unsigned __int8 *)(a1 + 1744) == *(unsigned __int8 *)(a2 + 1744))
  {
    if (*(_BYTE *)(a1 + 1744))
    {
      v110 = *v109;
      v111 = *(_OWORD *)(a2 + 1632);
      v112 = *(_OWORD *)(a2 + 1664);
      *(_OWORD *)(a1 + 1648) = *(_OWORD *)(a2 + 1648);
      *(_OWORD *)(a1 + 1664) = v112;
      *v108 = v110;
      *(_OWORD *)(a1 + 1632) = v111;
      v113 = *(_OWORD *)(a2 + 1680);
      v114 = *(_OWORD *)(a2 + 1696);
      v115 = *(_OWORD *)(a2 + 1712);
      *(_OWORD *)(a1 + 1728) = *(_OWORD *)(a2 + 1728);
      *(_OWORD *)(a1 + 1712) = v115;
      *(_OWORD *)(a1 + 1696) = v114;
      *(_OWORD *)(a1 + 1680) = v113;
      v116 = *(_OWORD *)(a2 + 1760);
      *(_QWORD *)(a2 + 1768) = 0;
      *(_QWORD *)(a2 + 1760) = 0;
      v117 = *(std::__shared_weak_count **)(a1 + 1768);
      *(_OWORD *)(a1 + 1760) = v116;
      if (!v117)
        goto LABEL_152;
      goto LABEL_147;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1744))
    {
      v121 = *v109;
      v122 = *(_OWORD *)(a2 + 1632);
      v123 = *(_OWORD *)(a2 + 1664);
      *(_OWORD *)(a1 + 1648) = *(_OWORD *)(a2 + 1648);
      *(_OWORD *)(a1 + 1664) = v123;
      *v108 = v121;
      *(_OWORD *)(a1 + 1632) = v122;
      v124 = *(_OWORD *)(a2 + 1680);
      v125 = *(_OWORD *)(a2 + 1696);
      v126 = *(_OWORD *)(a2 + 1712);
      *(_OWORD *)(a1 + 1728) = *(_OWORD *)(a2 + 1728);
      *(_OWORD *)(a1 + 1712) = v126;
      *(_OWORD *)(a1 + 1696) = v125;
      *(_OWORD *)(a1 + 1680) = v124;
      *(_BYTE *)(a1 + 1744) = 1;
      v127 = *(_OWORD *)(a2 + 1760);
      *(_QWORD *)(a2 + 1768) = 0;
      *(_QWORD *)(a2 + 1760) = 0;
      v117 = *(std::__shared_weak_count **)(a1 + 1768);
      *(_OWORD *)(a1 + 1760) = v127;
      if (!v117)
        goto LABEL_152;
      goto LABEL_147;
    }
    *(_BYTE *)(a1 + 1744) = 0;
  }
  v118 = *(_OWORD *)(a2 + 1760);
  *(_QWORD *)(a2 + 1768) = 0;
  *(_QWORD *)(a2 + 1760) = 0;
  v117 = *(std::__shared_weak_count **)(a1 + 1768);
  *(_OWORD *)(a1 + 1760) = v118;
  if (!v117)
    goto LABEL_152;
LABEL_147:
  v119 = (unint64_t *)&v117->__shared_owners_;
  do
    v120 = __ldaxr(v119);
  while (__stlxr(v120 - 1, v119));
  if (!v120)
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
LABEL_152:
  v128 = *(_QWORD *)(a1 + 1776);
  if (v128)
  {
    v129 = (void **)(a1 + 1776);
    v130 = *(_QWORD *)(a1 + 1784);
    v131 = *(void **)(a1 + 1776);
    if (v130 != v128)
    {
      do
      {
        v132 = *(std::__shared_weak_count **)(v130 - 144);
        if (v132)
        {
          v133 = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        v130 -= 224;
      }
      while (v130 != v128);
      v131 = *v129;
    }
    *(_QWORD *)(a1 + 1784) = v128;
    operator delete(v131);
    *v129 = 0;
    *(_QWORD *)(a1 + 1784) = 0;
    *(_QWORD *)(a1 + 1792) = 0;
  }
  *(_OWORD *)(a1 + 1776) = *(_OWORD *)(a2 + 1776);
  *(_QWORD *)(a1 + 1792) = *(_QWORD *)(a2 + 1792);
  *(_QWORD *)(a2 + 1792) = 0;
  *(_OWORD *)(a2 + 1776) = 0u;
  *(_WORD *)(a1 + 1800) = *(_WORD *)(a2 + 1800);
  v135 = *(_OWORD *)(a2 + 1808);
  *(_OWORD *)(a2 + 1808) = 0u;
  v136 = *(std::__shared_weak_count **)(a1 + 1816);
  *(_OWORD *)(a1 + 1808) = v135;
  if (v136)
  {
    v137 = (unint64_t *)&v136->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  return a1;
}

uint64_t sub_22347FED4(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 *v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v34;
  __int128 v35;

  v4 = *(unsigned __int8 *)(a1 + 80);
  if (v4 == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v5 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v6 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v5;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v9 = *(_OWORD *)(a2 + 24);
      v10 = *(_OWORD *)(a2 + 40);
      v11 = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = v11;
      *(_OWORD *)(a1 + 40) = v10;
      *(_OWORD *)(a1 + 24) = v9;
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC26EB0;
    if (v4)
    {
      v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *(_BYTE *)(a1 + 80) = 0;
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v15 = *(_OWORD *)(a2 + 24);
      v16 = *(_OWORD *)(a2 + 40);
      v17 = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = v17;
      *(_OWORD *)(a1 + 40) = v16;
      *(_OWORD *)(a1 + 24) = v15;
      *(_BYTE *)(a1 + 80) = 1;
    }
  }
  v18 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 93) = *(_QWORD *)(a2 + 93);
  *(_QWORD *)(a1 + 88) = v18;
  v19 = (void **)(a1 + 104);
  v20 = (_QWORD *)(a2 + 104);
  if (*(unsigned __int8 *)(a1 + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (*(_BYTE *)(a1 + 128))
    {
      v21 = *v19;
      if (*v19)
      {
        *(_QWORD *)(a1 + 112) = v21;
        operator delete(v21);
        *v19 = 0;
        *(_QWORD *)(a1 + 112) = 0;
        *(_QWORD *)(a1 + 120) = 0;
      }
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *v20 = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 128))
  {
    v22 = *v19;
    if (*v19)
    {
      *(_QWORD *)(a1 + 112) = v22;
      operator delete(v22);
    }
    *(_BYTE *)(a1 + 128) = 0;
  }
  else
  {
    *v19 = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *v20 = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    *(_BYTE *)(a1 + 128) = 1;
  }
  v23 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 141) = *(_QWORD *)(a2 + 141);
  *(_QWORD *)(a1 + 136) = v23;
  v24 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v25 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v24;
  if (!v25)
    goto LABEL_31;
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v28 = a1 + 168;
    v29 = (__int128 *)(a2 + 168);
    v30 = *(unsigned __int8 *)(a1 + 204);
    if (v30 == *(unsigned __int8 *)(a2 + 204))
      goto LABEL_32;
  }
  else
  {
LABEL_31:
    v28 = a1 + 168;
    v29 = (__int128 *)(a2 + 168);
    v30 = *(unsigned __int8 *)(a1 + 204);
    if (v30 == *(unsigned __int8 *)(a2 + 204))
    {
LABEL_32:
      if (v30)
      {
        v31 = *v29;
        v32 = v29[1];
        *(_DWORD *)(v28 + 32) = *((_DWORD *)v29 + 8);
        *(_OWORD *)v28 = v31;
        *(_OWORD *)(v28 + 16) = v32;
      }
      return a1;
    }
  }
  if (v30)
  {
    *(_BYTE *)(a1 + 204) = 0;
  }
  else
  {
    v34 = *v29;
    v35 = v29[1];
    *(_DWORD *)(v28 + 32) = *((_DWORD *)v29 + 8);
    *(_OWORD *)v28 = v34;
    *(_OWORD *)(v28 + 16) = v35;
    *(_BYTE *)(a1 + 204) = 1;
  }
  return a1;
}

uint64_t sub_223480184(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v4 = *(unsigned __int8 *)(a1 + 56);
  if (v4 != *(unsigned __int8 *)(a2 + 56))
  {
    *(_QWORD *)a1 = &off_24EC21328;
    if (!v4)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v21 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
      *(_OWORD *)(a1 + 24) = v21;
      *(_BYTE *)(a1 + 56) = 1;
      v10 = *(unsigned __int8 *)(a1 + 120);
      if (v10 == *(unsigned __int8 *)(a2 + 120))
        goto LABEL_18;
LABEL_27:
      *(_QWORD *)(a1 + 64) = &off_24EC27198;
      if (!v10)
      {
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_QWORD *)(a2 + 72) = 0;
        *(_QWORD *)(a2 + 80) = 0;
        v28 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 98) = *(_OWORD *)(a2 + 98);
        *(_OWORD *)(a1 + 88) = v28;
        *(_BYTE *)(a1 + 120) = 1;
        v29 = *(_OWORD *)(a2 + 128);
        *(_QWORD *)(a2 + 128) = 0;
        *(_QWORD *)(a2 + 136) = 0;
        v20 = *(std::__shared_weak_count **)(a1 + 136);
        *(_OWORD *)(a1 + 128) = v29;
        if (!v20)
          goto LABEL_40;
        goto LABEL_35;
      }
      v22 = *(std::__shared_weak_count **)(a1 + 80);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      *(_BYTE *)(a1 + 120) = 0;
      goto LABEL_34;
    }
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *(_BYTE *)(a1 + 56) = 0;
LABEL_17:
    v10 = *(unsigned __int8 *)(a1 + 120);
    if (v10 == *(unsigned __int8 *)(a2 + 120))
      goto LABEL_18;
    goto LABEL_27;
  }
  if (!*(_BYTE *)(a1 + 56))
    goto LABEL_17;
  v5 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v5;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
  *(_OWORD *)(a1 + 24) = v9;
  v10 = *(unsigned __int8 *)(a1 + 120);
  if (v10 != *(unsigned __int8 *)(a2 + 120))
    goto LABEL_27;
LABEL_18:
  if (!v10)
  {
LABEL_34:
    v25 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    v20 = *(std::__shared_weak_count **)(a1 + 136);
    *(_OWORD *)(a1 + 128) = v25;
    if (!v20)
      goto LABEL_40;
    goto LABEL_35;
  }
  v14 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v15 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 98) = *(_OWORD *)(a2 + 98);
  *(_OWORD *)(a1 + 88) = v18;
  v19 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v20 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v19;
  if (v20)
  {
LABEL_35:
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_40:
  v30 = *(unsigned __int8 *)(a1 + 224);
  if (v30 != *(unsigned __int8 *)(a2 + 224))
  {
    *(_QWORD *)(a1 + 144) = &off_24EC21518;
    if (!v30)
    {
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_QWORD *)(a2 + 152) = 0;
      *(_QWORD *)(a2 + 160) = 0;
      v50 = *(_OWORD *)(a2 + 168);
      v51 = *(_OWORD *)(a2 + 184);
      v52 = *(_OWORD *)(a2 + 200);
      *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
      *(_OWORD *)(a1 + 200) = v52;
      *(_OWORD *)(a1 + 184) = v51;
      *(_OWORD *)(a1 + 168) = v50;
      *(_BYTE *)(a1 + 224) = 1;
      v38 = *(unsigned __int8 *)(a1 + 312);
      if (v38 != *(unsigned __int8 *)(a2 + 312))
        goto LABEL_66;
LABEL_57:
      if (!v38)
        goto LABEL_73;
      v42 = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(a2 + 240) = 0;
      *(_QWORD *)(a2 + 248) = 0;
      v43 = *(std::__shared_weak_count **)(a1 + 248);
      *(_OWORD *)(a1 + 240) = v42;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = *(_OWORD *)(a2 + 256);
      v47 = *(_OWORD *)(a2 + 272);
      v48 = *(_OWORD *)(a2 + 288);
      *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
      *(_OWORD *)(a1 + 272) = v47;
      *(_OWORD *)(a1 + 288) = v48;
      *(_OWORD *)(a1 + 256) = v46;
      v49 = *(unsigned __int8 *)(a1 + 400);
      if (v49 == *(unsigned __int8 *)(a2 + 400))
        goto LABEL_74;
LABEL_83:
      *(_QWORD *)(a1 + 320) = &off_24EC21518;
      if (v49)
      {
        v67 = *(std::__shared_weak_count **)(a1 + 336);
        if (!v67)
          goto LABEL_88;
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
          *(_BYTE *)(a1 + 400) = 0;
          return a1;
        }
        else
        {
LABEL_88:
          *(_BYTE *)(a1 + 400) = 0;
          return a1;
        }
      }
      else
      {
        v70 = *(_QWORD *)(a2 + 336);
        *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
        *(_QWORD *)(a1 + 336) = v70;
        *(_QWORD *)(a2 + 328) = 0;
        *(_QWORD *)(a2 + 336) = 0;
        v71 = *(_OWORD *)(a2 + 344);
        v72 = *(_OWORD *)(a2 + 360);
        v73 = *(_OWORD *)(a2 + 376);
        *(_WORD *)(a1 + 392) = *(_WORD *)(a2 + 392);
        *(_OWORD *)(a1 + 376) = v73;
        *(_OWORD *)(a1 + 360) = v72;
        *(_OWORD *)(a1 + 344) = v71;
        *(_BYTE *)(a1 + 400) = 1;
        return a1;
      }
    }
    v39 = *(std::__shared_weak_count **)(a1 + 160);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    *(_BYTE *)(a1 + 224) = 0;
LABEL_56:
    v38 = *(unsigned __int8 *)(a1 + 312);
    if (v38 != *(unsigned __int8 *)(a2 + 312))
      goto LABEL_66;
    goto LABEL_57;
  }
  if (!*(_BYTE *)(a1 + 224))
    goto LABEL_56;
  v31 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v32 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *(_OWORD *)(a2 + 168);
  v36 = *(_OWORD *)(a2 + 184);
  v37 = *(_OWORD *)(a2 + 200);
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v37;
  *(_OWORD *)(a1 + 184) = v36;
  *(_OWORD *)(a1 + 168) = v35;
  v38 = *(unsigned __int8 *)(a1 + 312);
  if (v38 == *(unsigned __int8 *)(a2 + 312))
    goto LABEL_57;
LABEL_66:
  *(_QWORD *)(a1 + 232) = &off_24EC21518;
  if (!v38)
  {
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    v64 = *(_OWORD *)(a2 + 256);
    v65 = *(_OWORD *)(a2 + 272);
    v66 = *(_OWORD *)(a2 + 288);
    *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
    *(_OWORD *)(a1 + 272) = v65;
    *(_OWORD *)(a1 + 288) = v66;
    *(_OWORD *)(a1 + 256) = v64;
    *(_BYTE *)(a1 + 312) = 1;
    v49 = *(unsigned __int8 *)(a1 + 400);
    if (v49 == *(unsigned __int8 *)(a2 + 400))
      goto LABEL_74;
    goto LABEL_83;
  }
  v53 = *(std::__shared_weak_count **)(a1 + 248);
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  *(_BYTE *)(a1 + 312) = 0;
LABEL_73:
  v49 = *(unsigned __int8 *)(a1 + 400);
  if (v49 != *(unsigned __int8 *)(a2 + 400))
    goto LABEL_83;
LABEL_74:
  if (v49)
  {
    v56 = *(_OWORD *)(a2 + 328);
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 336) = 0;
    v57 = *(std::__shared_weak_count **)(a1 + 336);
    *(_OWORD *)(a1 + 328) = v56;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = *(_OWORD *)(a2 + 344);
    v61 = *(_OWORD *)(a2 + 360);
    v62 = *(_OWORD *)(a2 + 376);
    *(_WORD *)(a1 + 392) = *(_WORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = v62;
    *(_OWORD *)(a1 + 360) = v61;
    *(_OWORD *)(a1 + 344) = v60;
  }
  return a1;
}

__n128 sub_223480770(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __n128 result;
  __int128 v6;

  if (*(unsigned __int8 *)(a1 + 200) == *((unsigned __int8 *)a2 + 200))
  {
    if (*(_BYTE *)(a1 + 200))
    {
      v4 = *a2;
      *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)a1 = v4;
      sub_2232C7B28(a1 + 24, (uint64_t)a2 + 24);
      *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
    }
  }
  else if (*(_BYTE *)(a1 + 200))
  {
    sub_223255CAC(a1 + 24);
    *(_BYTE *)(a1 + 200) = 0;
  }
  else
  {
    v6 = *a2;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 48) = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)a2 + 16) = 0;
    *((_QWORD *)a2 + 17) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 144) = a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 19) = 0;
    *((_QWORD *)a2 + 20) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    result = *(__n128 *)((char *)a2 + 168);
    *(__n128 *)(a1 + 168) = result;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 23) = 0;
    *((_QWORD *)a2 + 21) = 0;
    *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
    *(_BYTE *)(a1 + 200) = 1;
  }
  return result;
}

void sub_2234808F0(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;

  if (*((unsigned __int8 *)a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*((_BYTE *)a1 + 24))
    {
      v4 = *a1;
      if (*a1)
      {
        v5 = a1[1];
        v6 = *a1;
        if (v5 != v4)
        {
          do
          {
            v7 = (void *)*((_QWORD *)v5 - 3);
            if (v7)
            {
              *((_QWORD *)v5 - 2) = v7;
              operator delete(v7);
            }
            v5 -= 40;
          }
          while (v5 != v4);
          v6 = *a1;
        }
        a1[1] = v4;
        operator delete(v6);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = *(char **)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*((_BYTE *)a1 + 24))
  {
    v8 = *a1;
    if (*a1)
    {
      v9 = a1[1];
      v10 = *a1;
      if (v9 != v8)
      {
        do
        {
          v11 = (void *)*((_QWORD *)v9 - 3);
          if (v11)
          {
            *((_QWORD *)v9 - 2) = v11;
            operator delete(v11);
          }
          v9 -= 40;
        }
        while (v9 != v8);
        v10 = *a1;
      }
      a1[1] = v8;
      operator delete(v10);
    }
    *((_BYTE *)a1 + 24) = 0;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(char **)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_BYTE *)a1 + 24) = 1;
  }
}

char **sub_223480A2C(char **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  v2 = (std::__shared_weak_count *)a1[261];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1[255];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1[255];
  if (v5)
  {
LABEL_6:
    a1[256] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = a1[252];
  if (v6)
  {
    a1[253] = v6;
    operator delete(v6);
  }
  v7 = a1[248];
  if (v7)
  {
    v8 = a1[249];
    v9 = a1[248];
    if (v8 != v7)
    {
      do
      {
        v10 = (void *)*((_QWORD *)v8 - 3);
        if (v10)
        {
          *((_QWORD *)v8 - 2) = v10;
          operator delete(v10);
        }
        v8 -= 40;
      }
      while (v8 != v7);
      v9 = a1[248];
    }
    a1[249] = v7;
    operator delete(v9);
  }
  v11 = a1[245];
  if (v11)
  {
    v12 = (uint64_t)a1[246];
    v13 = a1[245];
    if ((char *)v12 != v11)
    {
      do
      {
        v12 -= 464;
        sub_22324A5A0(v12);
      }
      while ((char *)v12 != v11);
      v13 = a1[245];
    }
    a1[246] = v11;
    operator delete(v13);
  }
  v14 = a1[241];
  if (v14)
  {
    a1[242] = v14;
    operator delete(v14);
  }
  v15 = a1[238];
  while (v15)
  {
    v16 = v15;
    v15 = *(char **)v15;
    v17 = (void *)*((_QWORD *)v16 + 27);
    if (v17)
    {
      *((_QWORD *)v16 + 28) = v17;
      operator delete(v17);
    }
    *((_QWORD *)v16 + 7) = &off_24EC20828;
    *((_QWORD *)v16 + 4) = &off_24EC715B8;
    v18 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    operator delete(v16);
  }
  v21 = a1[236];
  a1[236] = 0;
  if (v21)
    operator delete(v21);
  if (*((_BYTE *)a1 + 1880))
  {
    v22 = a1[232];
    if (v22)
    {
      v23 = a1[233];
      v24 = a1[232];
      if (v23 != v22)
      {
        do
        {
          v25 = (void *)*((_QWORD *)v23 - 3);
          if (v25)
          {
            *((_QWORD *)v23 - 2) = v25;
            operator delete(v25);
          }
          v23 -= 40;
        }
        while (v23 != v22);
        v24 = a1[232];
      }
      a1[233] = v22;
      operator delete(v24);
    }
  }
  if (*((_BYTE *)a1 + 1848))
    sub_2232555B8((uint64_t)(a1 + 3));
  v26 = *a1;
  if (*a1)
  {
    v27 = a1[1];
    v28 = *a1;
    if (v27 != v26)
    {
      do
      {
        v29 = (std::__shared_weak_count *)*((_QWORD *)v27 - 28);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v27 -= 248;
      }
      while (v27 != v26);
      v28 = *a1;
    }
    a1[1] = v26;
    operator delete(v28);
  }
  return a1;
}

uint64_t sub_223480CB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = sub_223260C0C((_QWORD *)a1, (uint64_t *)a2);
  *((_BYTE *)v4 + 24) = 0;
  *((_BYTE *)v4 + 1848) = 0;
  if (*(_BYTE *)(a2 + 1848))
  {
    sub_223257000((uint64_t)(v4 + 3), a2 + 24);
    *(_BYTE *)(a1 + 1848) = 1;
  }
  *(_BYTE *)(a1 + 1856) = 0;
  *(_BYTE *)(a1 + 1880) = 0;
  if (*(_BYTE *)(a2 + 1880))
  {
    sub_22345F4D8((_QWORD *)(a1 + 1856), (uint64_t **)(a2 + 1856));
    *(_BYTE *)(a1 + 1880) = 1;
  }
  sub_223480F5C(a1 + 1888, a2 + 1888);
  *(_QWORD *)(a1 + 1944) = 0;
  *(_OWORD *)(a1 + 1928) = 0u;
  v5 = *(_QWORD *)(a2 + 1928);
  v6 = *(_QWORD *)(a2 + 1936);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    v8 = 0xCF3CF3CF3CF3CF3DLL * (v7 >> 2);
    if (v8 >= 0x30C30C30C30C30DLL)
      sub_22316E078();
    v9 = (char *)operator new(v7);
    v10 = 0;
    *(_QWORD *)(a1 + 1928) = v9;
    *(_QWORD *)(a1 + 1936) = v9;
    *(_QWORD *)(a1 + 1944) = &v9[84 * v8];
    do
    {
      v11 = v5 + v10;
      v12 = &v9[v10];
      v13 = *(_OWORD *)(v5 + v10);
      v12[16] = *(_BYTE *)(v5 + v10 + 16);
      *(_OWORD *)v12 = v13;
      v14 = *(_OWORD *)(v5 + v10 + 20);
      v15 = *(_OWORD *)(v5 + v10 + 36);
      v16 = *(_OWORD *)(v5 + v10 + 52);
      *(_OWORD *)(v12 + 68) = *(_OWORD *)(v5 + v10 + 68);
      *(_OWORD *)(v12 + 52) = v16;
      *(_OWORD *)(v12 + 36) = v15;
      *(_OWORD *)(v12 + 20) = v14;
      v10 += 84;
    }
    while (v11 + 84 != v6);
    *(_QWORD *)(a1 + 1936) = &v9[v10];
  }
  *(_BYTE *)(a1 + 1952) = *(_BYTE *)(a2 + 1952);
  *(_QWORD *)(a1 + 1960) = 0;
  *(_QWORD *)(a1 + 1976) = 0;
  *(_QWORD *)(a1 + 1968) = 0;
  sub_22324A664(a1 + 1960, *(_QWORD *)(a2 + 1960), *(_QWORD *)(a2 + 1968), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 1968) - *(_QWORD *)(a2 + 1960)) >> 4));
  sub_2232619D8((_QWORD *)(a1 + 1984), (uint64_t *)(a2 + 1984));
  *(_BYTE *)(a1 + 2008) = *(_BYTE *)(a2 + 2008);
  sub_223261BD8(a1 + 2016, (uint64_t *)(a2 + 2016));
  return a1;
}

void sub_223480E8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  char *v5;
  char *v6;
  void *v7;
  void *v8;

  if (*(_BYTE *)(v1 + 1880))
  {
    v5 = (char *)*v3;
    if (*v3)
    {
      v6 = *(char **)(v1 + 1864);
      v7 = *v3;
      if (v6 != v5)
      {
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          if (v8)
          {
            *((_QWORD *)v6 - 2) = v8;
            operator delete(v8);
          }
          v6 -= 40;
        }
        while (v6 != v5);
        v7 = *v3;
      }
      *(_QWORD *)(v1 + 1864) = v5;
      operator delete(v7);
    }
  }
  if (*(_BYTE *)(v1 + 1848))
    sub_2232555B8(v2);
  sub_223473EA8((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223480F5C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2231B0668(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    sub_22348109C(a1, (uint64_t)(i + 2), (_OWORD *)i + 1);
  return a1;
}

void sub_223481074(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223481664(v1);
  _Unwind_Resume(a1);
}

void sub_223481088(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223481664(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22348109C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *result;
  unint64_t v13;
  uint64_t v15;
  float v17;
  float v18;
  _QWORD *v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;

  v7 = sub_22456636C((unsigned __int8 *)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      result = (_QWORD *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = result[1];
            if (v15 == v8)
            {
              if (result[2] == *(_QWORD *)a2 && result[3] == *(_QWORD *)(a2 + 8))
                return result;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = result[1];
          if (v13 == v8)
          {
            if (result[2] == *(_QWORD *)a2 && result[3] == *(_QWORD *)(a2 + 8))
              return result;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_31:
  v31 = operator new(0xF0uLL);
  *v31 = 0;
  v31[1] = v8;
  *((_OWORD *)v31 + 1) = *a3;
  sub_2234814D0((uint64_t)(v31 + 4), (uint64_t)(a3 + 1));
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v25)
      goto LABEL_45;
    if (prime < *(_QWORD *)&v25)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v25 < 3uLL || (v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < *(_QWORD *)&v25)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v29 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        v20 = v31;
        if (v19)
          goto LABEL_34;
      }
      else
      {
        v3 = v8;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        v20 = v31;
        if (v19)
          goto LABEL_34;
      }
    }
    else
    {
      v3 = v29 & v8;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v8));
      v20 = v31;
      if (v19)
        goto LABEL_34;
    }
LABEL_58:
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v31;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v31)
    {
      v30 = *(_QWORD *)(*v31 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v30 >= v9)
          v30 %= v9;
      }
      else
      {
        v30 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v31;
    }
    goto LABEL_69;
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v20 = v31;
  if (!v19)
    goto LABEL_58;
LABEL_34:
  *v20 = *v19;
  *v19 = v31;
LABEL_69:
  result = v31;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_223481404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22348142C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223481418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22348142C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22348142C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[27];
      if (v3)
      {
        v2[28] = v3;
        operator delete(v3);
      }
      v2[7] = &off_24EC20828;
      v2[4] = &off_24EC715B8;
      v4 = (std::__shared_weak_count *)v2[6];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2234814D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = &off_24EC715B8;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = &off_24EC20828;
  *(_QWORD *)(a1 + 32) = &off_24EC20868;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 24) = &off_24EC207B8;
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  v12 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 136) = v10;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v13 = *(_QWORD *)(a2 + 184);
  v14 = *(_QWORD *)(a2 + 192);
  v15 = v14 - v13;
  if (v14 != v13)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
    if (v16 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v17 = (char *)operator new(v15);
    v18 = 0;
    *(_QWORD *)(a1 + 184) = v17;
    *(_QWORD *)(a1 + 192) = v17;
    *(_QWORD *)(a1 + 200) = &v17[24 * v16];
    do
    {
      v19 = v13 + v18;
      v20 = &v17[v18];
      v21 = *(_QWORD *)(v13 + v18);
      *((_DWORD *)v20 + 2) = *(_DWORD *)(v13 + v18 + 8);
      *(_QWORD *)v20 = v21;
      v22 = *(_QWORD *)(v13 + v18 + 12);
      *((_DWORD *)v20 + 5) = *(_DWORD *)(v13 + v18 + 20);
      *(_QWORD *)(v20 + 12) = v22;
      v18 += 24;
    }
    while (v19 + 24 != v14);
    *(_QWORD *)(a1 + 192) = &v17[v18];
  }
  return a1;
}

void sub_22348163C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;
  void *v5;

  v5 = *v2;
  if (*v2)
  {
    v1[24] = v5;
    operator delete(v5);
  }
  v1[3] = v3;
  sub_2242A8F3C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223481664(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    v4 = (void *)v3[27];
    if (v4)
    {
      v3[28] = v4;
      operator delete(v4);
    }
    v3[7] = &off_24EC20828;
    v3[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)v3[6];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v3);
  }
  v8 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

void sub_223481728(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *i;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;

  v4 = a2;
  if (a1[2])
  {
    v6 = *a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v30 = (uint64_t *)v10[1];
            if (!v30)
              break;
            do
            {
              v10 = v30;
              v30 = (uint64_t *)*v30;
            }
            while (v30);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          *(_OWORD *)((char *)v12 + 28) = *(_OWORD *)((char *)v13 + 28);
          v14 = *(_OWORD *)((char *)v13 + 44);
          v15 = *(_OWORD *)((char *)v13 + 60);
          v16 = *(_OWORD *)((char *)v13 + 76);
          *(_OWORD *)((char *)v12 + 92) = *(_OWORD *)((char *)v13 + 92);
          *(_OWORD *)((char *)v12 + 76) = v16;
          *(_OWORD *)((char *)v12 + 60) = v15;
          *(_OWORD *)((char *)v12 + 44) = v14;
          v17 = *v8;
          v18 = a1 + 1;
          v19 = a1 + 1;
          if (*v8)
            break;
LABEL_34:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v18;
          *v19 = v12;
          v22 = (uint64_t *)**a1;
          if (v22)
            goto LABEL_35;
LABEL_36:
          sub_2231A9A8C(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v25 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v26 = (uint64_t *)v10[1];
                  if (!v26)
                    break;
                  do
                  {
                    v10 = v26;
                    v26 = (uint64_t *)*v26;
                  }
                  while (v26);
                }
              }
              else
              {
                for (v10[1] = 0; v25; v25 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v25;
                    v25 = (uint64_t *)*v25;
                  }
                  while (v25);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v23 = (_QWORD *)v13[1];
          if (v23)
          {
            do
            {
              v4 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v24 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v24);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_58;
        }
        do
        {
          while (1)
          {
            v18 = (uint64_t **)v17;
            v20 = *((unsigned __int8 *)v17 + 28);
            v21 = *((unsigned __int8 *)v12 + 28);
            if (v21 == v20)
            {
              v21 = *((unsigned __int8 *)v12 + 29);
              v20 = *((unsigned __int8 *)v18 + 29);
              if (v21 == v20)
              {
                v21 = *((unsigned __int8 *)v12 + 30);
                v20 = *((unsigned __int8 *)v18 + 30);
                if (v21 == v20)
                {
                  v21 = *((unsigned __int8 *)v12 + 31);
                  v20 = *((unsigned __int8 *)v18 + 31);
                  if (v21 == v20)
                  {
                    v21 = *((unsigned __int8 *)v12 + 32);
                    v20 = *((unsigned __int8 *)v18 + 32);
                    if (v21 == v20)
                    {
                      v21 = *((unsigned __int8 *)v12 + 33);
                      v20 = *((unsigned __int8 *)v18 + 33);
                      if (v21 == v20)
                      {
                        v21 = *((unsigned __int8 *)v12 + 34);
                        v20 = *((unsigned __int8 *)v18 + 34);
                        if (v21 == v20)
                        {
                          v21 = *((unsigned __int8 *)v12 + 35);
                          v20 = *((unsigned __int8 *)v18 + 35);
                          if (v21 == v20)
                          {
                            v21 = *((unsigned __int8 *)v12 + 36);
                            v20 = *((unsigned __int8 *)v18 + 36);
                            if (v21 == v20)
                            {
                              v21 = *((unsigned __int8 *)v12 + 37);
                              v20 = *((unsigned __int8 *)v18 + 37);
                              if (v21 == v20)
                              {
                                v21 = *((unsigned __int8 *)v12 + 38);
                                v20 = *((unsigned __int8 *)v18 + 38);
                                if (v21 == v20)
                                {
                                  v21 = *((unsigned __int8 *)v12 + 39);
                                  v20 = *((unsigned __int8 *)v18 + 39);
                                  if (v21 == v20)
                                  {
                                    v21 = *((unsigned __int8 *)v12 + 40);
                                    v20 = *((unsigned __int8 *)v18 + 40);
                                    if (v21 == v20)
                                    {
                                      v21 = *((unsigned __int8 *)v12 + 41);
                                      v20 = *((unsigned __int8 *)v18 + 41);
                                      if (v21 == v20)
                                      {
                                        v21 = *((unsigned __int8 *)v12 + 42);
                                        v20 = *((unsigned __int8 *)v18 + 42);
                                        if (v21 == v20)
                                        {
                                          v21 = *((unsigned __int8 *)v12 + 43);
                                          v20 = *((unsigned __int8 *)v18 + 43);
                                          if (v21 == v20)
                                            break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v21 >= v20)
              break;
            v17 = *v18;
            v19 = v18;
            if (!*v18)
              goto LABEL_34;
          }
          v17 = v18[1];
        }
        while (v17);
        v19 = v18 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v18;
        v18[1] = v12;
        v22 = (uint64_t *)**a1;
        if (!v22)
          goto LABEL_36;
LABEL_35:
        *a1 = v22;
        v12 = *v19;
        goto LABEL_36;
      }
LABEL_58:
      sub_223198030((uint64_t)a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        sub_223198030((uint64_t)a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    do
    {
      sub_223481AC8(a1, (_QWORD *)((char *)v4 + 28));
      v28 = (_QWORD *)v4[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v4[2];
          v24 = *v29 == (_QWORD)v4;
          v4 = v29;
        }
        while (!v24);
      }
      v4 = v29;
    }
    while (v29 != a3);
  }
}

char *sub_223481AC8(uint64_t **a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = (char *)operator new(0x70uLL);
  v5 = a2[1];
  *(_OWORD *)(v4 + 28) = *a2;
  *(_OWORD *)(v4 + 44) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 60) = a2[2];
  *(_OWORD *)(v4 + 76) = v6;
  *(_OWORD *)(v4 + 92) = a2[4];
  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v8 = (uint64_t **)v7;
        if (((char)sub_22319835C((unsigned __int8 *)v4 + 28, (unsigned __int8 *)v7 + 28) & 0x80000000) == 0)
          break;
        v7 = *v8;
        v9 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      v7 = v8[1];
    }
    while (v7);
    v9 = v8 + 1;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_8:
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v8;
  *v9 = (uint64_t *)v4;
  v10 = (uint64_t *)**a1;
  v11 = (uint64_t *)v4;
  if (v10)
  {
    *a1 = v10;
    v11 = *v9;
  }
  sub_2231A9A8C(a1[1], v11);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v4;
}

void sub_223481BA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223481BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 *v24;
  __int128 v25;
  _OWORD *v26;
  __int128 *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  sub_2231BEC8C(a1, a2);
  sub_2231BEC8C(a1 + 64, a2 + 64);
  sub_2234821D0(a1 + 128, a2 + 128);
  v5 = *(_QWORD *)(a2 + 216);
  v4 = *(_QWORD *)(a2 + 224);
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = v5;
  *(_QWORD *)(a1 + 224) = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_223482AC8(a1 + 232, a2 + 232);
  sub_2231BEC8C(a1 + 296, a2 + 296);
  sub_22348205C(a1 + 360, a2 + 360);
  sub_2231BEC8C(a1 + 568, a2 + 568);
  sub_223482894(a1 + 632, a2 + 632);
  v11 = *(_QWORD *)(a2 + 696);
  v12 = *(_QWORD *)(a2 + 704);
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 696) = v11;
  v15 = *(std::__shared_weak_count **)(a1 + 704);
  *(_QWORD *)(a1 + 704) = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_2231BF3A0(a1 + 712, a2 + 712);
  sub_2231BF3A0(a1 + 800, a2 + 800);
  sub_2231BF3A0(a1 + 888, a2 + 888);
  sub_223482AC8(a1 + 976, a2 + 976);
  sub_223482CFC(a1 + 1040, a2 + 1040);
  sub_223482418(a1 + 1128, a2 + 1128);
  *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a2 + 1216);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1264) = *(_QWORD *)(a2 + 1264);
  *(_OWORD *)(a1 + 1272) = *(_OWORD *)(a2 + 1272);
  v18 = *(_OWORD *)(a2 + 1288);
  v19 = *(_OWORD *)(a2 + 1304);
  *(_DWORD *)(a1 + 1320) = *(_DWORD *)(a2 + 1320);
  *(_OWORD *)(a1 + 1288) = v18;
  *(_OWORD *)(a1 + 1304) = v19;
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a2 + 1328);
  v20 = *(_OWORD *)(a2 + 1336);
  v21 = *(_OWORD *)(a2 + 1352);
  v22 = *(_OWORD *)(a2 + 1384);
  *(_OWORD *)(a1 + 1368) = *(_OWORD *)(a2 + 1368);
  *(_OWORD *)(a1 + 1384) = v22;
  *(_OWORD *)(a1 + 1336) = v20;
  *(_OWORD *)(a1 + 1352) = v21;
  *(_BYTE *)(a1 + 1400) = *(_BYTE *)(a2 + 1400);
  v23 = (_OWORD *)(a1 + 1408);
  v24 = (__int128 *)(a2 + 1408);
  if (*(unsigned __int8 *)(a1 + 1608) == *(unsigned __int8 *)(a2 + 1608))
  {
    if (*(_BYTE *)(a1 + 1608))
    {
      v25 = *v24;
      *(_DWORD *)(a1 + 1424) = *(_DWORD *)(a2 + 1424);
      *v23 = v25;
      sub_223482F44((char **)(a1 + 1432), (char **)(a2 + 1432));
      *(_BYTE *)(a1 + 1600) = *(_BYTE *)(a2 + 1600);
      v26 = (_OWORD *)(a1 + 1616);
      v27 = (__int128 *)(a2 + 1616);
      v28 = *(unsigned __int8 *)(a1 + 1744);
      if (v28 != *(unsigned __int8 *)(a2 + 1744))
        goto LABEL_28;
LABEL_24:
      if (!v28)
        goto LABEL_30;
      v29 = *v27;
      v30 = v27[1];
      v31 = v27[3];
      v26[2] = v27[2];
      v26[3] = v31;
      *v26 = v29;
      v26[1] = v30;
      v32 = *(_OWORD *)(a2 + 1680);
      v33 = *(_OWORD *)(a2 + 1696);
      v34 = *(_OWORD *)(a2 + 1712);
      *(_OWORD *)(a1 + 1728) = *(_OWORD *)(a2 + 1728);
      *(_OWORD *)(a1 + 1712) = v34;
      *(_OWORD *)(a1 + 1696) = v33;
      *(_OWORD *)(a1 + 1680) = v32;
      v35 = *(_QWORD *)(a2 + 1760);
      v36 = *(_QWORD *)(a2 + 1768);
      if (!v36)
        goto LABEL_33;
      goto LABEL_31;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1608))
    {
      v37 = *v24;
      *(_DWORD *)(a1 + 1424) = *(_DWORD *)(a2 + 1424);
      *v23 = v37;
      sub_223258368((_QWORD *)(a1 + 1432), a2 + 1432);
      *(_BYTE *)(a1 + 1600) = *(_BYTE *)(a2 + 1600);
      *(_BYTE *)(a1 + 1608) = 1;
      v26 = (_OWORD *)(a1 + 1616);
      v27 = (__int128 *)(a2 + 1616);
      v28 = *(unsigned __int8 *)(a1 + 1744);
      if (v28 == *(unsigned __int8 *)(a2 + 1744))
        goto LABEL_24;
      goto LABEL_28;
    }
    sub_223255CAC(a1 + 1432);
    *(_BYTE *)(a1 + 1608) = 0;
  }
  v26 = (_OWORD *)(a1 + 1616);
  v27 = (__int128 *)(a2 + 1616);
  v28 = *(unsigned __int8 *)(a1 + 1744);
  if (v28 == *(unsigned __int8 *)(a2 + 1744))
    goto LABEL_24;
LABEL_28:
  if (v28)
  {
    *(_BYTE *)(a1 + 1744) = 0;
LABEL_30:
    v35 = *(_QWORD *)(a2 + 1760);
    v36 = *(_QWORD *)(a2 + 1768);
    if (!v36)
      goto LABEL_33;
    goto LABEL_31;
  }
  v51 = *v27;
  v52 = v27[1];
  v53 = v27[3];
  v26[2] = v27[2];
  v26[3] = v53;
  *v26 = v51;
  v26[1] = v52;
  v54 = *(_OWORD *)(a2 + 1680);
  v55 = *(_OWORD *)(a2 + 1696);
  v56 = *(_OWORD *)(a2 + 1712);
  *(_OWORD *)(a1 + 1728) = *(_OWORD *)(a2 + 1728);
  *(_OWORD *)(a1 + 1712) = v56;
  *(_OWORD *)(a1 + 1696) = v55;
  *(_OWORD *)(a1 + 1680) = v54;
  *(_BYTE *)(a1 + 1744) = 1;
  v35 = *(_QWORD *)(a2 + 1760);
  v36 = *(_QWORD *)(a2 + 1768);
  if (!v36)
    goto LABEL_33;
LABEL_31:
  v38 = (unint64_t *)(v36 + 8);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
LABEL_33:
  *(_QWORD *)(a1 + 1760) = v35;
  v40 = *(std::__shared_weak_count **)(a1 + 1768);
  *(_QWORD *)(a1 + 1768) = v36;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      if (a1 == a2)
        goto LABEL_39;
      goto LABEL_38;
    }
  }
  if (a1 != a2)
LABEL_38:
    sub_2234831B0((void **)(a1 + 1776), *(_QWORD *)(a2 + 1776), *(_QWORD *)(a2 + 1784), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 1784) - *(_QWORD *)(a2 + 1776)) >> 5));
LABEL_39:
  *(_WORD *)(a1 + 1800) = *(_WORD *)(a2 + 1800);
  sub_2231DD328(&v57, a2 + 1808);
  v43 = v57;
  v57 = 0uLL;
  v44 = *(std::__shared_weak_count **)(a1 + 1816);
  *(_OWORD *)(a1 + 1808) = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
      if (*((_QWORD *)&v57 + 1))
        goto LABEL_44;
      return a1;
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (!*((_QWORD *)&v57 + 1))
    return a1;
LABEL_44:
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
    return a1;
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  return a1;
}

uint64_t sub_22348205C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  sub_223482418(a1, a2);
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 93) = *(_QWORD *)(a2 + 93);
  *(_QWORD *)(a1 + 88) = v4;
  sub_223482660(a1 + 104, a2 + 104);
  v5 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 141) = *(_QWORD *)(a2 + 141);
  *(_QWORD *)(a1 + 136) = v5;
  sub_2231DD328(&v20, a2 + 152);
  v6 = v20;
  v20 = 0uLL;
  v7 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v6;
  if (!v7)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_11;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_11:
  v13 = (_OWORD *)(a1 + 168);
  v14 = (__int128 *)(a2 + 168);
  if (*(unsigned __int8 *)(a1 + 204) == *(unsigned __int8 *)(a2 + 204))
  {
    if (*(_BYTE *)(a1 + 204))
    {
      v15 = *v14;
      v16 = *(_OWORD *)(a2 + 184);
      *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
      *v13 = v15;
      *(_OWORD *)(a1 + 184) = v16;
    }
    return a1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 204))
    {
      *(_BYTE *)(a1 + 204) = 0;
    }
    else
    {
      v18 = *v14;
      v19 = *(_OWORD *)(a2 + 184);
      *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
      *v13 = v18;
      *(_OWORD *)(a1 + 184) = v19;
      *(_BYTE *)(a1 + 204) = 1;
    }
    return a1;
  }
}

void sub_2234821D0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;

  v4 = *(unsigned __int8 *)(a1 + 80);
  if (v4 == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v6 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 16);
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v5;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = *(_OWORD *)(a2 + 24);
      v13 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v13;
      *(_OWORD *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC26FA8;
    if (v4)
    {
      v14 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v14)
        goto LABEL_18;
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        *(_BYTE *)(a1 + 80) = 0;
      }
      else
      {
LABEL_18:
        *(_BYTE *)(a1 + 80) = 0;
      }
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v21 = *(_WORD *)(a2 + 72);
        do
          v22 = __ldxr(v19);
        while (__stxr(v22 + 1, v19));
        v23 = *(_OWORD *)(a2 + 24);
        v24 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v24;
        *(_OWORD *)(a1 + 24) = v23;
        do
          v25 = __ldxr(v19);
        while (__stxr(v25 + 1, v19));
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v18;
        *(_WORD *)(a1 + 72) = v21;
        do
          v26 = __ldaxr(v19);
        while (__stlxr(v26 - 1, v19));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        do
          v27 = __ldaxr(v19);
        while (__stlxr(v27 - 1, v19));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        *(_BYTE *)(a1 + 80) = 1;
      }
      else
      {
        v28 = *(_WORD *)(a2 + 72);
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = 0;
        v29 = *(_OWORD *)(a2 + 24);
        v30 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v30;
        *(_OWORD *)(a1 + 24) = v29;
        *(_WORD *)(a1 + 72) = v28;
        *(_BYTE *)(a1 + 80) = 1;
      }
    }
  }
}

void sub_223482418(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;

  v4 = *(unsigned __int8 *)(a1 + 80);
  if (v4 == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v6 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 16);
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v5;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = *(_OWORD *)(a2 + 24);
      v13 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v13;
      *(_OWORD *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC26EB0;
    if (v4)
    {
      v14 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v14)
        goto LABEL_18;
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        *(_BYTE *)(a1 + 80) = 0;
      }
      else
      {
LABEL_18:
        *(_BYTE *)(a1 + 80) = 0;
      }
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v21 = *(_WORD *)(a2 + 72);
        do
          v22 = __ldxr(v19);
        while (__stxr(v22 + 1, v19));
        v23 = *(_OWORD *)(a2 + 24);
        v24 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v24;
        *(_OWORD *)(a1 + 24) = v23;
        do
          v25 = __ldxr(v19);
        while (__stxr(v25 + 1, v19));
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v18;
        *(_WORD *)(a1 + 72) = v21;
        do
          v26 = __ldaxr(v19);
        while (__stlxr(v26 - 1, v19));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        do
          v27 = __ldaxr(v19);
        while (__stlxr(v27 - 1, v19));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        *(_BYTE *)(a1 + 80) = 1;
      }
      else
      {
        v28 = *(_WORD *)(a2 + 72);
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = 0;
        v29 = *(_OWORD *)(a2 + 24);
        v30 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v30;
        *(_OWORD *)(a1 + 24) = v29;
        *(_WORD *)(a1 + 72) = v28;
        *(_BYTE *)(a1 + 80) = 1;
      }
    }
  }
}

void sub_223482660(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  char *v7;
  char *v8;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_22348275C((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(char **)a2;
    v4 = *(_QWORD *)(a2 + 8);
    v6 = v4 - *(_QWORD *)a2;
    if (v4 != *(_QWORD *)a2)
    {
      if (v6 < 0)
        sub_223257BE4();
      v7 = (char *)operator new(v4 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = &v7[2 * (v6 >> 1)];
      *(_QWORD *)(a1 + 16) = v8;
      memcpy(v7, v5, v6);
      *(_QWORD *)(a1 + 8) = v8;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_223482740(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22348275C(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  size_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (uint64_t)(v8 - *result) >> 1)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_23;
    if (v8 <= __sz)
      v10 = __sz;
    else
      v10 = v8;
    v11 = v8 >= 0x7FFFFFFFFFFFFFFELL;
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 < 0)
LABEL_23:
      sub_223257BE4();
    v13 = 2 * v12;
    result = operator new(2 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 1;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v14);
    goto LABEL_22;
  }
  v18 = &__src[2 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_223482894(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  __int128 v27;

  v4 = *(unsigned __int8 *)(a1 + 56);
  if (v4 == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v6 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 16);
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v5;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC27198;
    if (v4)
    {
      v13 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v13)
        goto LABEL_18;
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        *(_BYTE *)(a1 + 56) = 0;
      }
      else
      {
LABEL_18:
        *(_BYTE *)(a1 + 56) = 0;
      }
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        v20 = *(_WORD *)(a2 + 48);
        do
          v21 = __ldxr(v18);
        while (__stxr(v21 + 1, v18));
        v22 = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = v22;
        do
          v23 = __ldxr(v18);
        while (__stxr(v23 + 1, v18));
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = v17;
        *(_WORD *)(a1 + 48) = v20;
        do
          v24 = __ldaxr(v18);
        while (__stlxr(v24 - 1, v18));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        do
          v25 = __ldaxr(v18);
        while (__stlxr(v25 - 1, v18));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        *(_BYTE *)(a1 + 56) = 1;
      }
      else
      {
        v26 = *(_WORD *)(a2 + 48);
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = 0;
        v27 = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = v27;
        *(_WORD *)(a1 + 48) = v26;
        *(_BYTE *)(a1 + 56) = 1;
      }
    }
  }
}

void sub_223482AC8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  __int128 v27;

  v4 = *(unsigned __int8 *)(a1 + 56);
  if (v4 == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v6 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 16);
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v5;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC270A0;
    if (v4)
    {
      v13 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v13)
        goto LABEL_18;
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        *(_BYTE *)(a1 + 56) = 0;
      }
      else
      {
LABEL_18:
        *(_BYTE *)(a1 + 56) = 0;
      }
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        v20 = *(_WORD *)(a2 + 48);
        do
          v21 = __ldxr(v18);
        while (__stxr(v21 + 1, v18));
        v22 = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = v22;
        do
          v23 = __ldxr(v18);
        while (__stxr(v23 + 1, v18));
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = v17;
        *(_WORD *)(a1 + 48) = v20;
        do
          v24 = __ldaxr(v18);
        while (__stlxr(v24 - 1, v18));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        do
          v25 = __ldaxr(v18);
        while (__stlxr(v25 - 1, v18));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        *(_BYTE *)(a1 + 56) = 1;
      }
      else
      {
        v26 = *(_WORD *)(a2 + 48);
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = 0;
        v27 = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = v27;
        *(_WORD *)(a1 + 48) = v26;
        *(_BYTE *)(a1 + 56) = 1;
      }
    }
  }
}

void sub_223482CFC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;

  v4 = *(unsigned __int8 *)(a1 + 80);
  if (v4 == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v6 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 16);
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v5;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = *(_OWORD *)(a2 + 24);
      v13 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v13;
      *(_OWORD *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24EC27290;
    if (v4)
    {
      v14 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v14)
        goto LABEL_18;
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        *(_BYTE *)(a1 + 80) = 0;
      }
      else
      {
LABEL_18:
        *(_BYTE *)(a1 + 80) = 0;
      }
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v21 = *(_WORD *)(a2 + 72);
        do
          v22 = __ldxr(v19);
        while (__stxr(v22 + 1, v19));
        v23 = *(_OWORD *)(a2 + 24);
        v24 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v24;
        *(_OWORD *)(a1 + 24) = v23;
        do
          v25 = __ldxr(v19);
        while (__stxr(v25 + 1, v19));
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v18;
        *(_WORD *)(a1 + 72) = v21;
        do
          v26 = __ldaxr(v19);
        while (__stlxr(v26 - 1, v19));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        do
          v27 = __ldaxr(v19);
        while (__stlxr(v27 - 1, v19));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        *(_BYTE *)(a1 + 80) = 1;
      }
      else
      {
        v28 = *(_WORD *)(a2 + 72);
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = 0;
        v29 = *(_OWORD *)(a2 + 24);
        v30 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v30;
        *(_OWORD *)(a1 + 24) = v29;
        *(_WORD *)(a1 + 72) = v28;
        *(_BYTE *)(a1 + 80) = 1;
      }
    }
  }
}

char **sub_223482F44(char **a1, char **a2)
{
  if (a1 != a2)
  {
    sub_2231984D0(a1, *a2, a2[1], (a2[1] - *a2) >> 4);
    sub_223483000(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 6);
    sub_2231984D0(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 4);
    sub_223483000(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 6);
    sub_2231984D0(a1 + 12, a2[12], a2[13], (a2[13] - a2[12]) >> 4);
    sub_2231984D0(a1 + 15, a2[15], a2[16], (a2[16] - a2[15]) >> 4);
    sub_2231984D0(a1 + 18, a2[18], a2[19], (a2[19] - a2[18]) >> 4);
  }
  return a1;
}

_QWORD *sub_223483000(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 6)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 6;
    if (v18 >= __sz)
    {
      v29 = *result;
      if (a2 != a3)
      {
        v30 = (_OWORD *)*result;
        do
        {
          v31 = *(_OWORD *)v6;
          v32 = *((_OWORD *)v6 + 1);
          v33 = *((_OWORD *)v6 + 3);
          v30[2] = *((_OWORD *)v6 + 2);
          v30[3] = v33;
          *v30 = v31;
          v30[1] = v32;
          v30 += 4;
          v6 += 64;
          v29 += 64;
        }
        while (v6 != a3);
      }
      v15 = v29 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[64 * v18];
      if (v17 != v9)
      {
        v20 = v18 << 6;
        do
        {
          v21 = *(_OWORD *)v6;
          v22 = *((_OWORD *)v6 + 1);
          v23 = *((_OWORD *)v6 + 3);
          *((_OWORD *)v9 + 2) = *((_OWORD *)v6 + 2);
          *((_OWORD *)v9 + 3) = v23;
          *(_OWORD *)v9 = v21;
          *((_OWORD *)v9 + 1) = v22;
          v9 += 64;
          v6 += 64;
          v20 -= 64;
        }
        while (v20);
        v9 = *v16;
      }
      v24 = v9;
      if (v19 != a3)
      {
        v24 = v9;
        v25 = v9;
        do
        {
          v26 = *(_OWORD *)v19;
          v27 = *((_OWORD *)v19 + 1);
          v28 = *((_OWORD *)v19 + 3);
          *((_OWORD *)v25 + 2) = *((_OWORD *)v19 + 2);
          *((_OWORD *)v25 + 3) = v28;
          *(_OWORD *)v25 = v26;
          *((_OWORD *)v25 + 1) = v27;
          v25 += 64;
          v19 += 64;
          v24 += 64;
        }
        while (v19 != a3);
      }
      v15 = v24 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 58)
      goto LABEL_27;
    v10 = v8 >> 5;
    if (v8 >> 5 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 58)
LABEL_27:
      sub_223257BE4();
    v13 = v12 << 6;
    result = operator new(v12 << 6);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFC0);
      v14 = &v9[(a3 - v6) & 0xFFFFFFFFFFFFFFC0];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

void sub_2234831B0(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  int v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (char *)*a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)*a1) >> 5) < a4)
  {
    if (v9)
    {
      v10 = (char *)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 18);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 224;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x124924924924924)
      goto LABEL_83;
    v67 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 5);
    v68 = 2 * v67;
    if (2 * v67 <= a4)
      v68 = a4;
    v69 = v67 >= 0x92492492492492 ? 0x124924924924924 : v68;
    if (v69 > 0x124924924924924)
LABEL_83:
      sub_223257BE4();
    v70 = 224 * v69;
    v71 = (char *)operator new(224 * v69);
    *a1 = v71;
    a1[1] = v71;
    for (a1[2] = &v71[v70]; v6 != a3; v71 += 224)
    {
      *(_QWORD *)v71 = *(_QWORD *)v6;
      *(_OWORD *)(v71 + 8) = *(_OWORD *)(v6 + 8);
      *(_OWORD *)(v71 + 24) = *(_OWORD *)(v6 + 24);
      *(_OWORD *)(v71 + 40) = *(_OWORD *)(v6 + 40);
      *(_OWORD *)(v71 + 56) = *(_OWORD *)(v6 + 56);
      v72 = *(_QWORD *)(v6 + 80);
      *((_QWORD *)v71 + 9) = *(_QWORD *)(v6 + 72);
      *((_QWORD *)v71 + 10) = v72;
      if (v72)
      {
        v73 = (unint64_t *)(v72 + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      v71[88] = 0;
      v71[216] = 0;
      if (*(_BYTE *)(v6 + 216))
      {
        v75 = *(_OWORD *)(v6 + 104);
        *(_OWORD *)(v71 + 88) = *(_OWORD *)(v6 + 88);
        *(_OWORD *)(v71 + 104) = v75;
        v76 = *(_OWORD *)(v6 + 136);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(v6 + 120);
        *(_OWORD *)(v71 + 136) = v76;
        *(_OWORD *)(v71 + 152) = *(_OWORD *)(v6 + 152);
        *(_OWORD *)(v71 + 168) = *(_OWORD *)(v6 + 168);
        *(_OWORD *)(v71 + 184) = *(_OWORD *)(v6 + 184);
        *(_OWORD *)(v71 + 200) = *(_OWORD *)(v6 + 200);
        v71[216] = 1;
      }
      v6 += 224;
    }
    a1[1] = v71;
    return;
  }
  v15 = (char *)a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 5) >= a4)
  {
    if (a2 == a3)
    {
LABEL_76:
      while (v15 != v9)
      {
        v90 = (std::__shared_weak_count *)*((_QWORD *)v15 - 18);
        if (v90)
        {
          v91 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v15 -= 224;
      }
      a1[1] = v9;
      return;
    }
    while (1)
    {
      *(_QWORD *)v9 = *(_QWORD *)v6;
      v48 = *(_OWORD *)(v6 + 8);
      v49 = *(_OWORD *)(v6 + 24);
      v50 = *(_OWORD *)(v6 + 40);
      *(_OWORD *)(v9 + 56) = *(_OWORD *)(v6 + 56);
      *(_OWORD *)(v9 + 40) = v50;
      *(_OWORD *)(v9 + 24) = v49;
      *(_OWORD *)(v9 + 8) = v48;
      v52 = *(_QWORD *)(v6 + 72);
      v51 = *(_QWORD *)(v6 + 80);
      if (v51)
      {
        v53 = (unint64_t *)(v51 + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = (std::__shared_weak_count *)*((_QWORD *)v9 + 10);
      *((_QWORD *)v9 + 9) = v52;
      *((_QWORD *)v9 + 10) = v51;
      if (!v55)
        goto LABEL_40;
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
        v58 = v9 + 88;
        v59 = (__int128 *)(v6 + 88);
        v60 = v9[216];
        if (v60 == *(unsigned __int8 *)(v6 + 216))
        {
LABEL_41:
          if (v60)
          {
            v61 = *v59;
            v62 = v59[1];
            v63 = v59[3];
            v58[2] = v59[2];
            v58[3] = v63;
            *v58 = v61;
            v58[1] = v62;
            v64 = *(_OWORD *)(v6 + 152);
            v65 = *(_OWORD *)(v6 + 168);
            v66 = *(_OWORD *)(v6 + 184);
            *(_OWORD *)(v9 + 200) = *(_OWORD *)(v6 + 200);
            *(_OWORD *)(v9 + 184) = v66;
            *(_OWORD *)(v9 + 168) = v65;
            *(_OWORD *)(v9 + 152) = v64;
          }
          goto LABEL_32;
        }
      }
      else
      {
LABEL_40:
        v58 = v9 + 88;
        v59 = (__int128 *)(v6 + 88);
        v60 = v9[216];
        if (v60 == *(unsigned __int8 *)(v6 + 216))
          goto LABEL_41;
      }
      if (v60)
      {
        v9[216] = 0;
      }
      else
      {
        v42 = *v59;
        v43 = v59[1];
        v44 = v59[3];
        v58[2] = v59[2];
        v58[3] = v44;
        *v58 = v42;
        v58[1] = v43;
        v45 = *(_OWORD *)(v6 + 152);
        v46 = *(_OWORD *)(v6 + 168);
        v47 = *(_OWORD *)(v6 + 184);
        *(_OWORD *)(v9 + 200) = *(_OWORD *)(v6 + 200);
        *(_OWORD *)(v9 + 184) = v47;
        *(_OWORD *)(v9 + 168) = v46;
        *(_OWORD *)(v9 + 152) = v45;
        v9[216] = 1;
      }
LABEL_32:
      v6 += 224;
      v9 += 224;
      if (v6 == a3)
      {
        v15 = (char *)a1[1];
        goto LABEL_76;
      }
    }
  }
  v16 = a2 + 32 * ((v15 - v9) >> 5);
  if (v15 == v9)
    goto LABEL_65;
  do
  {
    *(_QWORD *)v9 = *(_QWORD *)v6;
    v23 = *(_OWORD *)(v6 + 8);
    v24 = *(_OWORD *)(v6 + 24);
    v25 = *(_OWORD *)(v6 + 40);
    *(_OWORD *)(v9 + 56) = *(_OWORD *)(v6 + 56);
    *(_OWORD *)(v9 + 40) = v25;
    *(_OWORD *)(v9 + 24) = v24;
    *(_OWORD *)(v9 + 8) = v23;
    v27 = *(_QWORD *)(v6 + 72);
    v26 = *(_QWORD *)(v6 + 80);
    if (v26)
    {
      v28 = (unint64_t *)(v26 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 10);
    *((_QWORD *)v9 + 9) = v27;
    *((_QWORD *)v9 + 10) = v26;
    if (!v30)
      goto LABEL_23;
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v33 = v9 + 88;
      v34 = (__int128 *)(v6 + 88);
      v35 = v9[216];
      if (v35 != *(unsigned __int8 *)(v6 + 216))
      {
LABEL_27:
        if (v35)
        {
          v9[216] = 0;
        }
        else
        {
          v17 = *v34;
          v18 = v34[1];
          v19 = v34[3];
          v33[2] = v34[2];
          v33[3] = v19;
          *v33 = v17;
          v33[1] = v18;
          v20 = *(_OWORD *)(v6 + 152);
          v21 = *(_OWORD *)(v6 + 168);
          v22 = *(_OWORD *)(v6 + 184);
          *(_OWORD *)(v9 + 200) = *(_OWORD *)(v6 + 200);
          *(_OWORD *)(v9 + 184) = v22;
          *(_OWORD *)(v9 + 168) = v21;
          *(_OWORD *)(v9 + 152) = v20;
          v9[216] = 1;
        }
        goto LABEL_15;
      }
    }
    else
    {
LABEL_23:
      v33 = v9 + 88;
      v34 = (__int128 *)(v6 + 88);
      v35 = v9[216];
      if (v35 != *(unsigned __int8 *)(v6 + 216))
        goto LABEL_27;
    }
    if (v35)
    {
      v36 = *v34;
      v37 = v34[1];
      v38 = v34[3];
      v33[2] = v34[2];
      v33[3] = v38;
      *v33 = v36;
      v33[1] = v37;
      v39 = *(_OWORD *)(v6 + 152);
      v40 = *(_OWORD *)(v6 + 168);
      v41 = *(_OWORD *)(v6 + 184);
      *(_OWORD *)(v9 + 200) = *(_OWORD *)(v6 + 200);
      *(_OWORD *)(v9 + 184) = v41;
      *(_OWORD *)(v9 + 168) = v40;
      *(_OWORD *)(v9 + 152) = v39;
    }
LABEL_15:
    v6 += 224;
    v9 += 224;
  }
  while (v6 != v16);
  v9 = (char *)a1[1];
LABEL_65:
  v77 = v9;
  if (v16 != a3)
  {
    v77 = v9;
    do
    {
      *(_QWORD *)v77 = *(_QWORD *)v16;
      v78 = *(_OWORD *)(v16 + 8);
      v79 = *(_OWORD *)(v16 + 24);
      v80 = *(_OWORD *)(v16 + 40);
      *(_OWORD *)(v77 + 56) = *(_OWORD *)(v16 + 56);
      *(_OWORD *)(v77 + 40) = v80;
      *(_OWORD *)(v77 + 24) = v79;
      *(_OWORD *)(v77 + 8) = v78;
      v81 = *(_QWORD *)(v16 + 80);
      *((_QWORD *)v77 + 9) = *(_QWORD *)(v16 + 72);
      *((_QWORD *)v77 + 10) = v81;
      if (v81)
      {
        v82 = (unint64_t *)(v81 + 8);
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v77[88] = 0;
      v77[216] = 0;
      if (*(_BYTE *)(v16 + 216))
      {
        v84 = *(_OWORD *)(v16 + 88);
        v85 = *(_OWORD *)(v16 + 104);
        v86 = *(_OWORD *)(v16 + 136);
        *(_OWORD *)(v77 + 120) = *(_OWORD *)(v16 + 120);
        *(_OWORD *)(v77 + 136) = v86;
        *(_OWORD *)(v77 + 88) = v84;
        *(_OWORD *)(v77 + 104) = v85;
        v87 = *(_OWORD *)(v16 + 152);
        v88 = *(_OWORD *)(v16 + 168);
        v89 = *(_OWORD *)(v16 + 184);
        *(_OWORD *)(v77 + 200) = *(_OWORD *)(v16 + 200);
        *(_OWORD *)(v77 + 184) = v89;
        *(_OWORD *)(v77 + 168) = v88;
        *(_OWORD *)(v77 + 152) = v87;
        v77[216] = 1;
      }
      v16 += 224;
      v77 += 224;
    }
    while (v16 != a3);
  }
  a1[1] = v77;
}

void sub_2234837DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_2231F6E10((uint64_t *)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(void **)a1;
      if (v4 != v3)
      {
        do
        {
          v6 = *(void **)(v4 - 24);
          if (v6)
          {
            *(_QWORD *)(v4 - 16) = v6;
            operator delete(v6);
          }
          v4 -= 40;
        }
        while (v4 != v3);
        v5 = *(void **)a1;
      }
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v5);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    sub_22345F4D8((_QWORD *)a1, (uint64_t **)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_2234838BC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v26;
  size_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  _QWORD *i;
  uint8x8_t v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  _BOOL4 v38;
  int v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v47;
  unint64_t v48;
  size_t v49;
  void *v50;
  uint8x8_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  BOOL v57;
  char v58;
  uint64_t v59;
  unint64_t v60;

  v4 = a2 + 2;
  v5 = sub_22456636C((unsigned __int8 *)a2 + 16);
  a2[1] = v5;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
    goto LABEL_88;
  v9 = 1;
  if (v6 >= 3)
    v9 = (v6 & (v6 - 1)) != 0;
  v10 = v9 | (2 * v6);
  v11 = vcvtps_u32_f32(v7 / v8);
  if (v10 <= v11)
    prime = (int8x8_t)v11;
  else
    prime = (int8x8_t)v10;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v6)
  {
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_88;
    v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v49 = std::__next_prime(v27);
      if (*(_QWORD *)&prime <= v49)
        prime = (int8x8_t)v49;
      if (*(_QWORD *)&prime >= v6)
      {
LABEL_41:
        v6 = *(_QWORD *)(a1 + 8);
        v30 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v30.i16[0] = vaddlv_u8(v30);
        v31 = v30.u32[0];
        if (v30.u32[0] >= 2uLL)
          goto LABEL_47;
        goto LABEL_89;
      }
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v6)
        goto LABEL_41;
    }
    if (!*(_QWORD *)&prime)
    {
      v50 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v50)
        operator delete(v50);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v51 = (uint8x8_t)vcnt_s8(0);
      v51.i16[0] = vaddlv_u8(v51);
      v31 = v51.u32[0];
      if (v51.u32[0] >= 2uLL)
        goto LABEL_47;
      goto LABEL_89;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_223174E94();
  v13 = operator new(8 * *(_QWORD *)&prime);
  v14 = *(void **)a1;
  *(_QWORD *)a1 = v13;
  if (v14)
    operator delete(v14);
  v15 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
  while (*(_QWORD *)&prime != v15);
  v17 = a1 + 16;
  v16 = *(_QWORD **)(a1 + 16);
  if (v16)
  {
    v18 = v16[1];
    v19 = *(_QWORD *)&prime - 1;
    if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
    {
      v20 = v18 & v19;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v17;
      v21 = (_QWORD *)*v16;
      if (!*v16)
        goto LABEL_46;
      do
      {
        v22 = v21[1] & v19;
        if (v22 == v20)
        {
          v16 = v21;
        }
        else
        {
          v23 = v21;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v22))
          {
            do
            {
              v24 = v23;
              v23 = (_QWORD *)*v23;
              if (!v23)
                break;
            }
            while (v21[2] == v23[2] && v21[3] == v23[3]);
            *v16 = v23;
            v26 = 8 * v22;
            *v24 = **(_QWORD **)(*(_QWORD *)a1 + v26);
            **(_QWORD **)(*(_QWORD *)a1 + v26) = v21;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v16;
            v16 = v21;
            v20 = v22;
          }
        }
        v21 = (_QWORD *)*v16;
      }
      while (*v16);
      v6 = (unint64_t)prime;
LABEL_88:
      v52 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v52.i16[0] = vaddlv_u8(v52);
      v31 = v52.u32[0];
      if (v52.u32[0] >= 2uLL)
        goto LABEL_47;
      goto LABEL_89;
    }
    if (v18 >= *(_QWORD *)&prime)
      v18 %= *(_QWORD *)&prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v17;
    for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
    {
      v43 = i[1];
      if (v43 >= *(_QWORD *)&prime)
        v43 %= *(_QWORD *)&prime;
      if (v43 == v18)
      {
        v16 = i;
      }
      else
      {
        v44 = i;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v43))
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
            if (!v44)
              break;
          }
          while (i[2] == v44[2] && i[3] == v44[3]);
          *v16 = v44;
          v47 = 8 * v43;
          *v45 = **(_QWORD **)(*(_QWORD *)a1 + v47);
          **(_QWORD **)(*(_QWORD *)a1 + v47) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v16;
          v16 = i;
          v18 = v43;
        }
      }
    }
  }
LABEL_46:
  v6 = (unint64_t)prime;
  v33 = (uint8x8_t)vcnt_s8(prime);
  v33.i16[0] = vaddlv_u8(v33);
  v31 = v33.u32[0];
  if (v33.u32[0] >= 2uLL)
  {
LABEL_47:
    v34 = v5;
    if (v6 <= v5)
      v34 = v5 % v6;
    v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
    if (!v35)
    {
      v40 = 0;
      v48 = a2[1];
      goto LABEL_103;
    }
    v36 = 0;
    while (1)
    {
      v40 = v35;
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_102;
      v41 = v35[1];
      v42 = v41;
      if (v41 >= v6)
        v42 = v41 % v6;
      if (v42 != v34)
        goto LABEL_102;
      if (v41 == v5)
      {
        v38 = v35[2] == *v4 && v35[3] == v4[1];
        v39 = v36 & !v38;
        v36 |= v38;
        if (v39 == 1)
          goto LABEL_102;
      }
      else if ((v36 & 1) == 1)
      {
        goto LABEL_102;
      }
    }
  }
LABEL_89:
  v53 = (v6 - 1) & v5;
  v54 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v53);
  if (!v54)
  {
    v40 = 0;
    v48 = a2[1];
LABEL_114:
    v48 &= v6 - 1;
    if (v40)
      goto LABEL_106;
LABEL_115:
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v48) = a1 + 16;
    if (!*a2)
      goto LABEL_121;
    v60 = *(_QWORD *)(*a2 + 8);
    if (v31 > 1)
    {
      if (v60 >= v6)
        v60 %= v6;
    }
    else
    {
      v60 &= v6 - 1;
    }
LABEL_120:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v60) = a2;
    goto LABEL_121;
  }
  v55 = 0;
  while (1)
  {
    v40 = v54;
    v54 = (_QWORD *)*v54;
    if (!v54)
      break;
    v59 = v54[1];
    if ((v59 & (v6 - 1)) != v53)
      break;
    if (v59 == v5)
    {
      v57 = v54[2] == *v4 && v54[3] == v4[1];
      v58 = v55 & !v57;
      v55 |= v57;
      if ((v58 & 1) != 0)
        break;
    }
    else if ((v55 & 1) != 0)
    {
      break;
    }
  }
LABEL_102:
  v48 = a2[1];
  if (v31 <= 1)
    goto LABEL_114;
LABEL_103:
  if (v48 >= v6)
    v48 %= v6;
  if (!v40)
    goto LABEL_115;
LABEL_106:
  *a2 = *v40;
  *v40 = a2;
  if (*a2)
  {
    v60 = *(_QWORD *)(*a2 + 8);
    if (v31 > 1)
    {
      if (v60 >= v6)
        v60 %= v6;
    }
    else
    {
      v60 &= v6 - 1;
    }
    if (v60 != v48)
      goto LABEL_120;
  }
LABEL_121:
  ++*(_QWORD *)(a1 + 24);
}

char *sub_223483E38(char **a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - result) >> 3);
    if (v18 >= __sz)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          *((_DWORD *)v27 + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v27 = v28;
          v29 = *(uint64_t *)((char *)v6 + 12);
          *((_DWORD *)v27 + 5) = *((_DWORD *)v6 + 5);
          *(_QWORD *)(v27 + 12) = v29;
          v26 += 24;
          v6 += 3;
          v27 += 24;
        }
        while (v6 != a3);
      }
      *v16 = v26;
    }
    else
    {
      v19 = &a2[3 * v18];
      if (v15 != result)
      {
        do
        {
          v20 = *v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)result = v20;
          v21 = *(uint64_t *)((char *)v6 + 12);
          *((_DWORD *)result + 5) = *((_DWORD *)v6 + 5);
          *(_QWORD *)(result + 12) = v21;
          v6 += 3;
          result += 24;
        }
        while (v6 != v19);
        result = *v16;
      }
      v22 = result;
      if (v19 != a3)
      {
        v22 = result;
        v23 = result;
        do
        {
          v24 = *v19;
          *((_DWORD *)v23 + 2) = *((_DWORD *)v19 + 2);
          *(_QWORD *)v23 = v24;
          v25 = *(uint64_t *)((char *)v19 + 12);
          *((_DWORD *)v23 + 5) = *((_DWORD *)v19 + 5);
          *(_QWORD *)(v23 + 12) = v25;
          v22 += 24;
          v19 += 3;
          v23 += 24;
        }
        while (v19 != a3);
      }
      *v16 = v22;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_27;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_27:
      sub_22316E078();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_QWORD *)v14 = *v6;
        *((_DWORD *)v14 + 2) = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v14 + 12) = *(uint64_t *)((char *)v6 + 12);
        *((_DWORD *)v14 + 5) = *((_DWORD *)v6 + 5);
        v14 += 24;
        v6 += 3;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

char *sub_223484084(char **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - result) >> 3);
    if (v18 >= __sz)
    {
      v22 = result;
      if (a2 != a3)
      {
        v23 = result;
        do
        {
          *(_QWORD *)v23 = *(_QWORD *)v6;
          *(_OWORD *)(v23 + 8) = *(_OWORD *)(v6 + 8);
          v22 += 24;
          v6 += 24;
          v23 += 24;
        }
        while (v6 != a3);
      }
      *v16 = v22;
    }
    else
    {
      v19 = a2 + 24 * v18;
      if (v15 != result)
      {
        do
        {
          *(_QWORD *)result = *(_QWORD *)v6;
          *(_OWORD *)(result + 8) = *(_OWORD *)(v6 + 8);
          v6 += 24;
          result += 24;
        }
        while (v6 != v19);
        result = *v16;
      }
      v20 = result;
      if (v19 != a3)
      {
        v20 = result;
        v21 = result;
        do
        {
          *(_QWORD *)v21 = *(_QWORD *)v19;
          *(_OWORD *)(v21 + 8) = *(_OWORD *)(v19 + 8);
          v20 += 24;
          v19 += 24;
          v21 += 24;
        }
        while (v19 != a3);
      }
      *v16 = v20;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_27;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_27:
      sub_22316E078();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_QWORD *)v14 = *(_QWORD *)v6;
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(v6 + 8);
        v14 += 24;
        v6 += 24;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

void sub_223484290(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  std::__shared_weak_count **v9;
  std::__shared_weak_count **v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count **v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int16 v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (std::__shared_weak_count **)*a1;
  if (0xEF7BDEF7BDEF7BDFLL * ((v8 - (uint64_t)*a1) >> 3) < a4)
  {
    if (v9)
    {
      v10 = (std::__shared_weak_count **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          v12 = *(v10 - 28);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 31;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x108421084210842)
      goto LABEL_69;
    v50 = 0xEF7BDEF7BDEF7BDFLL * (v8 >> 3);
    v51 = 2 * v50;
    if (2 * v50 <= a4)
      v51 = a4;
    v52 = v50 >= 0x84210842108421 ? 0x108421084210842 : v51;
    if (v52 > 0x108421084210842)
LABEL_69:
      sub_22316E078();
    v53 = 31 * v52;
    v54 = operator new(248 * v52);
    *a1 = v54;
    a1[1] = v54;
    a1[2] = &v54[v53];
    while (v6 != a3)
    {
      *(_OWORD *)v54 = *(_OWORD *)v6;
      v63 = *(_QWORD *)(v6 + 24);
      v54[2] = *(_QWORD *)(v6 + 16);
      v54[3] = v63;
      if (v63)
      {
        v64 = (unint64_t *)(v63 + 8);
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      v55 = *(_OWORD *)(v6 + 48);
      *((_OWORD *)v54 + 2) = *(_OWORD *)(v6 + 32);
      *((_OWORD *)v54 + 3) = v55;
      v56 = *(_OWORD *)(v6 + 80);
      *((_OWORD *)v54 + 4) = *(_OWORD *)(v6 + 64);
      *((_OWORD *)v54 + 5) = v56;
      v57 = *(_OWORD *)(v6 + 112);
      *((_OWORD *)v54 + 6) = *(_OWORD *)(v6 + 96);
      *((_OWORD *)v54 + 7) = v57;
      v58 = *(_OWORD *)(v6 + 144);
      *((_OWORD *)v54 + 8) = *(_OWORD *)(v6 + 128);
      *((_OWORD *)v54 + 9) = v58;
      v59 = *(_OWORD *)(v6 + 176);
      *((_OWORD *)v54 + 10) = *(_OWORD *)(v6 + 160);
      *((_OWORD *)v54 + 11) = v59;
      v60 = *(_OWORD *)(v6 + 208);
      *((_OWORD *)v54 + 12) = *(_OWORD *)(v6 + 192);
      *((_OWORD *)v54 + 13) = v60;
      v61 = *(_OWORD *)(v6 + 224);
      v62 = *(_WORD *)(v6 + 240);
      v6 += 248;
      *((_OWORD *)v54 + 14) = v61;
      *((_WORD *)v54 + 120) = v62;
      v54 += 31;
    }
    a1[1] = v54;
    return;
  }
  v15 = (std::__shared_weak_count **)a1[1];
  if (0xEF7BDEF7BDEF7BDFLL * (v15 - v9) < a4)
  {
    v16 = a2 + 8 * (v15 - v9);
    if (v15 == v9)
    {
      v17 = *a1;
      if (v16 == a3)
      {
LABEL_59:
        a1[1] = v17;
        return;
      }
    }
    else
    {
      do
      {
        *(_OWORD *)v9 = *(_OWORD *)v6;
        v28 = *(std::__shared_weak_count **)(v6 + 16);
        v27 = *(std::__shared_weak_count **)(v6 + 24);
        if (v27)
        {
          v29 = (unint64_t *)&v27->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = v9[3];
        v9[2] = v28;
        v9[3] = v27;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v18 = *(_OWORD *)(v6 + 32);
        v19 = *(_OWORD *)(v6 + 48);
        v20 = *(_OWORD *)(v6 + 80);
        *((_OWORD *)v9 + 4) = *(_OWORD *)(v6 + 64);
        *((_OWORD *)v9 + 5) = v20;
        *((_OWORD *)v9 + 2) = v18;
        *((_OWORD *)v9 + 3) = v19;
        *((_OWORD *)v9 + 6) = *(_OWORD *)(v6 + 96);
        v21 = *(_OWORD *)(v6 + 112);
        v22 = *(_OWORD *)(v6 + 128);
        v23 = *(_OWORD *)(v6 + 160);
        *((_OWORD *)v9 + 9) = *(_OWORD *)(v6 + 144);
        *((_OWORD *)v9 + 10) = v23;
        *((_OWORD *)v9 + 7) = v21;
        *((_OWORD *)v9 + 8) = v22;
        v24 = *(_OWORD *)(v6 + 176);
        v25 = *(_OWORD *)(v6 + 192);
        v26 = *(_OWORD *)(v6 + 224);
        *((_OWORD *)v9 + 13) = *(_OWORD *)(v6 + 208);
        *((_OWORD *)v9 + 14) = v26;
        *((_OWORD *)v9 + 11) = v24;
        *((_OWORD *)v9 + 12) = v25;
        *((_WORD *)v9 + 120) = *(_WORD *)(v6 + 240);
        v6 += 248;
        v9 += 31;
      }
      while (v6 != v16);
      v9 = (std::__shared_weak_count **)a1[1];
      v17 = v9;
      if (v16 == a3)
        goto LABEL_59;
    }
    v17 = v9;
    do
    {
      *v17 = *(_OWORD *)v16;
      v75 = *(_QWORD *)(v16 + 24);
      *((_QWORD *)v17 + 2) = *(_QWORD *)(v16 + 16);
      *((_QWORD *)v17 + 3) = v75;
      if (v75)
      {
        v76 = (unint64_t *)(v75 + 8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      v66 = *(_OWORD *)(v16 + 32);
      v67 = *(_OWORD *)(v16 + 48);
      v68 = *(_OWORD *)(v16 + 80);
      v17[4] = *(_OWORD *)(v16 + 64);
      v17[5] = v68;
      v17[2] = v66;
      v17[3] = v67;
      v17[6] = *(_OWORD *)(v16 + 96);
      v69 = *(_OWORD *)(v16 + 112);
      v70 = *(_OWORD *)(v16 + 128);
      v71 = *(_OWORD *)(v16 + 160);
      v17[9] = *(_OWORD *)(v16 + 144);
      v17[10] = v71;
      v17[7] = v69;
      v17[8] = v70;
      v72 = *(_OWORD *)(v16 + 176);
      v73 = *(_OWORD *)(v16 + 192);
      v74 = *(_OWORD *)(v16 + 224);
      v17[13] = *(_OWORD *)(v16 + 208);
      v17[14] = v74;
      v17[11] = v72;
      v17[12] = v73;
      *((_WORD *)v17 + 120) = *(_WORD *)(v16 + 240);
      v16 += 248;
      v17 = (_OWORD *)((char *)v17 + 248);
    }
    while (v16 != a3);
    goto LABEL_59;
  }
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)v9 = *(_OWORD *)v6;
      v44 = *(std::__shared_weak_count **)(v6 + 16);
      v43 = *(std::__shared_weak_count **)(v6 + 24);
      if (v43)
      {
        v45 = (unint64_t *)&v43->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = v9[3];
      v9[2] = v44;
      v9[3] = v43;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v34 = *(_OWORD *)(v6 + 32);
      v35 = *(_OWORD *)(v6 + 48);
      v36 = *(_OWORD *)(v6 + 80);
      *((_OWORD *)v9 + 4) = *(_OWORD *)(v6 + 64);
      *((_OWORD *)v9 + 5) = v36;
      *((_OWORD *)v9 + 2) = v34;
      *((_OWORD *)v9 + 3) = v35;
      *((_OWORD *)v9 + 6) = *(_OWORD *)(v6 + 96);
      v37 = *(_OWORD *)(v6 + 112);
      v38 = *(_OWORD *)(v6 + 128);
      v39 = *(_OWORD *)(v6 + 160);
      *((_OWORD *)v9 + 9) = *(_OWORD *)(v6 + 144);
      *((_OWORD *)v9 + 10) = v39;
      *((_OWORD *)v9 + 7) = v37;
      *((_OWORD *)v9 + 8) = v38;
      v40 = *(_OWORD *)(v6 + 176);
      v41 = *(_OWORD *)(v6 + 192);
      v42 = *(_OWORD *)(v6 + 224);
      *((_OWORD *)v9 + 13) = *(_OWORD *)(v6 + 208);
      *((_OWORD *)v9 + 14) = v42;
      *((_OWORD *)v9 + 11) = v40;
      *((_OWORD *)v9 + 12) = v41;
      *((_WORD *)v9 + 120) = *(_WORD *)(v6 + 240);
      v6 += 248;
      v9 += 31;
    }
    while (v6 != a3);
    v15 = (std::__shared_weak_count **)a1[1];
  }
  while (v15 != v9)
  {
    v78 = *(v15 - 28);
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v15 -= 31;
  }
  a1[1] = v9;
}

char *sub_223484748(char **a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - (uint64_t)result) >> 2) >= a4)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = 0xCF3CF3CF3CF3CF3DLL * ((v17 - result) >> 2);
    if (v18 >= a4)
    {
      v30 = result;
      if (a2 != a3)
      {
        v31 = result;
        do
        {
          v32 = *v6;
          v31[16] = *((_BYTE *)v6 + 16);
          *(_OWORD *)v31 = v32;
          v33 = *(__int128 *)((char *)v6 + 20);
          v34 = *(__int128 *)((char *)v6 + 36);
          v35 = *(__int128 *)((char *)v6 + 52);
          *(_OWORD *)(v31 + 68) = *(__int128 *)((char *)v6 + 68);
          *(_OWORD *)(v31 + 52) = v35;
          *(_OWORD *)(v31 + 36) = v34;
          *(_OWORD *)(v31 + 20) = v33;
          v30 += 84;
          v6 = (__int128 *)((char *)v6 + 84);
          v31 += 84;
        }
        while (v6 != a3);
      }
      *v16 = v30;
    }
    else
    {
      v19 = (__int128 *)((char *)a2 + 84 * v18);
      if (v15 != result)
      {
        do
        {
          v20 = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          *(_OWORD *)result = v20;
          v21 = *(__int128 *)((char *)v6 + 20);
          v22 = *(__int128 *)((char *)v6 + 36);
          v23 = *(__int128 *)((char *)v6 + 52);
          *(_OWORD *)(result + 68) = *(__int128 *)((char *)v6 + 68);
          *(_OWORD *)(result + 52) = v23;
          *(_OWORD *)(result + 36) = v22;
          *(_OWORD *)(result + 20) = v21;
          v6 = (__int128 *)((char *)v6 + 84);
          result += 84;
        }
        while (v6 != v19);
        result = *v16;
      }
      v24 = result;
      if (v19 != a3)
      {
        v24 = result;
        v25 = result;
        do
        {
          v26 = *v19;
          v25[16] = *((_BYTE *)v19 + 16);
          *(_OWORD *)v25 = v26;
          v27 = *(__int128 *)((char *)v19 + 20);
          v28 = *(__int128 *)((char *)v19 + 36);
          v29 = *(__int128 *)((char *)v19 + 52);
          *(_OWORD *)(v25 + 68) = *(__int128 *)((char *)v19 + 68);
          *(_OWORD *)(v25 + 52) = v29;
          *(_OWORD *)(v25 + 36) = v28;
          *(_OWORD *)(v25 + 20) = v27;
          v24 += 84;
          v19 = (__int128 *)((char *)v19 + 84);
          v25 += 84;
        }
        while (v19 != a3);
      }
      *v16 = v24;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x30C30C30C30C30CLL)
      goto LABEL_27;
    v10 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x186186186186186 ? 0x30C30C30C30C30CLL : v11;
    if (v12 > 0x30C30C30C30C30CLL)
LABEL_27:
      sub_22316E078();
    v13 = 84 * v12;
    result = (char *)operator new(84 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_OWORD *)v14 = *v6;
        v14[16] = *((_BYTE *)v6 + 16);
        *(_OWORD *)(v14 + 20) = *(__int128 *)((char *)v6 + 20);
        *(_OWORD *)(v14 + 36) = *(__int128 *)((char *)v6 + 36);
        *(_OWORD *)(v14 + 52) = *(__int128 *)((char *)v6 + 52);
        *(_OWORD *)(v14 + 68) = *(__int128 *)((char *)v6 + 68);
        v14 += 84;
        v6 = (__int128 *)((char *)v6 + 84);
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

void sub_2234849F4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    sub_2234849F4(a1, *a2);
    sub_2234849F4(a1, a2[1]);
    v4 = a2[6];
    a2[6] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    operator delete(a2);
  }
}

void sub_223484A4C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_223484A4C(a1, *a2);
    sub_223484A4C(a1, a2[1]);
    sub_223484A94((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_223484A94(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  sub_223480A2C((char **)(a1 + 184));
  sub_223198030(a1 + 160, *(_QWORD **)(a1 + 168));
  sub_223198030(a1 + 136, *(_QWORD **)(a1 + 144));
  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 88);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 96);
    v5 = *(void **)(a1 + 88);
    if (v4 == v3)
    {
      *(_QWORD *)(a1 + 96) = v3;
      operator delete(v5);
    }
    else
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 224);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 248;
      }
      while (v4 != v3);
      v9 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 96) = v3;
      operator delete(v9);
    }
  }
}

uint64_t sub_223484B74(uint64_t **a1, unsigned __int8 *a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v10;
  unsigned __int8 *v11;
  uint64_t result;
  _OWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;

  v8 = a1 + 1;
  v7 = a1[1];
  if (!v7)
  {
    v10 = a1 + 1;
LABEL_9:
    v13 = operator new(0x38uLL);
    v13[2] = *a3;
    v14 = *a4;
    *a4 = 0;
    *((_QWORD *)v13 + 6) = v14;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v10;
    *v8 = (uint64_t *)v13;
    v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      v16 = *v8;
    }
    else
    {
      v16 = (uint64_t *)v13;
    }
    result = (uint64_t)sub_2231A9A8C(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v10 = (uint64_t **)v7;
      v11 = (unsigned __int8 *)(v7 + 4);
      if ((sub_22319835C(a2, (unsigned __int8 *)v7 + 32) & 0x80) == 0)
        break;
      v7 = *v10;
      v8 = v10;
      if (!*v10)
        goto LABEL_9;
    }
    result = sub_22319835C(v11, a2);
    if ((result & 0x80) == 0)
      break;
    v8 = v10 + 1;
    v7 = v10[1];
    if (!v7)
      goto LABEL_9;
  }
  if (!*v8)
    goto LABEL_9;
  return result;
}

void sub_223484C70(uint64_t *a1@<X8>)
{
  size_t v2;
  size_t v3;
  size_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  __int128 v14;
  _BYTE v15[28];
  _BYTE v16[28];
  size_t v17[3];
  __int128 v18;
  char v19;
  uint64_t v20;
  void *v21;

  v19 = 0;
  v16[24] = 0;
  memset(v16, 0, 17);
  v20 = 0;
  v21 = 0;
  sub_223316930(v17, &v20, &v21, 1, (void **)&v19, 1, 0);
  *(_OWORD *)v15 = 0uLL;
  *(_OWORD *)&v15[12] = *(_OWORD *)&v16[12];
  v3 = v17[0];
  v2 = v17[1];
  v4 = v17[2];
  v14 = v18;
  v5 = operator new();
  *(_QWORD *)v5 = &off_24EC20D50;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)v15;
  *(_OWORD *)(v5 + 20) = *(_OWORD *)&v15[12];
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 64) = v14;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24880;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *a1 = v5;
  a1[1] = (uint64_t)v6;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v16, v5, 1);
  v9 = *(_QWORD *)(*(_QWORD *)v16 + 16);
  *(_OWORD *)(a1 + 3) = **(_OWORD **)v16;
  a1[5] = v9;
  *(_QWORD *)v16 = 0;
  MEMORY[0x227684CE8]();
  a1[6] = a1[3];
  *(_OWORD *)(a1 + 7) = *((_OWORD *)a1 + 2);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a1 + 36) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_223484E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_223167354(v2);
  sub_223167354((uint64_t)va1);
  sub_2231F9050((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223484EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231F9050((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223484EC4(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223484EE0(uint64_t **a1, unsigned __int8 *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v10;
  unsigned __int8 *v11;
  uint64_t result;
  _OWORD *v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t *v37;

  v8 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
  {
    v10 = (uint64_t *)(a1 + 1);
LABEL_9:
    v13 = operator new(0x950uLL);
    v14 = v13;
    v13[2] = *a3;
    *((_WORD *)v13 + 24) = *(_WORD *)a4;
    *(_OWORD *)((char *)v13 + 52) = *(_OWORD *)(a4 + 4);
    *(_OWORD *)((char *)v13 + 68) = *(_OWORD *)(a4 + 20);
    *(_OWORD *)((char *)v13 + 84) = *(_OWORD *)(a4 + 36);
    *(_OWORD *)((char *)v13 + 100) = *(_OWORD *)(a4 + 52);
    *(_OWORD *)((char *)v13 + 120) = *(_OWORD *)(a4 + 72);
    *((_QWORD *)v13 + 17) = *(_QWORD *)(a4 + 88);
    *(_QWORD *)(a4 + 80) = 0;
    *(_QWORD *)(a4 + 88) = 0;
    *(_QWORD *)(a4 + 72) = 0;
    v15 = (_QWORD *)(a4 + 128);
    v16 = *(_QWORD *)(a4 + 128);
    v13[9] = *(_OWORD *)(a4 + 96);
    v17 = *(_QWORD *)(a4 + 112);
    v18 = *(_QWORD *)(a4 + 120);
    *(_QWORD *)(a4 + 104) = 0;
    *(_QWORD *)(a4 + 112) = 0;
    *(_QWORD *)(a4 + 96) = 0;
    *((_QWORD *)v13 + 20) = v17;
    *((_QWORD *)v13 + 21) = v18;
    *((_QWORD *)v13 + 22) = v16;
    v19 = (char *)(v13 + 11);
    v20 = *(_QWORD *)(a4 + 136);
    *((_QWORD *)v13 + 23) = v20;
    if (v20)
    {
      *(_QWORD *)(v16 + 16) = v19;
      *(_QWORD *)(a4 + 120) = v15;
      *v15 = 0;
      *(_QWORD *)(a4 + 136) = 0;
    }
    else
    {
      *((_QWORD *)v13 + 21) = v19;
    }
    v21 = (_QWORD *)(a4 + 152);
    v22 = *(_QWORD *)(a4 + 152);
    v23 = *(_QWORD *)(a4 + 144);
    *((_QWORD *)v13 + 25) = v22;
    v24 = (char *)v13 + 200;
    *((_QWORD *)v13 + 24) = v23;
    v25 = *(_QWORD *)(a4 + 160);
    *((_QWORD *)v13 + 26) = v25;
    if (v25)
    {
      *(_QWORD *)(v22 + 16) = v24;
      *(_QWORD *)(a4 + 144) = v21;
      *v21 = 0;
      *(_QWORD *)(a4 + 160) = 0;
    }
    else
    {
      *((_QWORD *)v13 + 24) = v24;
    }
    v26 = *(_OWORD *)(a4 + 168);
    *((_BYTE *)v13 + 240) = 0;
    v27 = (uint64_t)(v13 + 15);
    *(_OWORD *)((char *)v14 + 216) = v26;
    *((_QWORD *)v14 + 29) = *(_QWORD *)(a4 + 184);
    *(_QWORD *)(a4 + 176) = 0;
    *(_QWORD *)(a4 + 184) = 0;
    *(_QWORD *)(a4 + 168) = 0;
    *((_BYTE *)v14 + 2064) = 0;
    if (*(_BYTE *)(a4 + 2016))
    {
      sub_2232568B4(v27, a4 + 192);
      *((_BYTE *)v14 + 2064) = 1;
    }
    *((_BYTE *)v14 + 2072) = 0;
    *((_BYTE *)v14 + 2096) = 0;
    if (*(_BYTE *)(a4 + 2048))
    {
      *((_QWORD *)v14 + 259) = *(_QWORD *)(a4 + 2024);
      v14[130] = *(_OWORD *)(a4 + 2032);
      *(_QWORD *)(a4 + 2032) = 0;
      *(_QWORD *)(a4 + 2040) = 0;
      *(_QWORD *)(a4 + 2024) = 0;
      *((_BYTE *)v14 + 2096) = 1;
    }
    v28 = *(_QWORD *)(a4 + 2056);
    v29 = *(_QWORD *)(a4 + 2064);
    *(_OWORD *)(a4 + 2056) = 0u;
    *((_QWORD *)v14 + 263) = v28;
    *((_QWORD *)v14 + 264) = v29;
    v30 = *(_QWORD *)(a4 + 2072);
    *((_QWORD *)v14 + 265) = v30;
    v31 = *(_QWORD *)(a4 + 2080);
    *((_QWORD *)v14 + 266) = v31;
    *((_DWORD *)v14 + 534) = *(_DWORD *)(a4 + 2088);
    if (v31)
    {
      v32 = *(_QWORD *)(v30 + 8);
      if ((v29 & (v29 - 1)) != 0)
      {
        if (v32 >= v29)
          v32 %= v29;
      }
      else
      {
        v32 &= v29 - 1;
      }
      *(_QWORD *)(v28 + 8 * v32) = (char *)v14 + 2120;
      *(_QWORD *)(a4 + 2072) = 0;
      *(_QWORD *)(a4 + 2080) = 0;
    }
    v14[134] = *(_OWORD *)(a4 + 2096);
    *((_QWORD *)v14 + 270) = *(_QWORD *)(a4 + 2112);
    *(_QWORD *)(a4 + 2112) = 0;
    *(_OWORD *)(a4 + 2096) = 0uLL;
    *((_BYTE *)v14 + 2168) = *(_BYTE *)(a4 + 2120);
    v14[136] = *(_OWORD *)(a4 + 2128);
    *((_QWORD *)v14 + 274) = *(_QWORD *)(a4 + 2144);
    *(_OWORD *)(a4 + 2128) = 0uLL;
    v33 = *(_QWORD *)(a4 + 2152);
    *(_OWORD *)(a4 + 2144) = 0uLL;
    *((_QWORD *)v14 + 275) = v33;
    v14[138] = *(_OWORD *)(a4 + 2160);
    *(_QWORD *)(a4 + 2168) = 0;
    *(_QWORD *)(a4 + 2160) = 0;
    *((_BYTE *)v14 + 2224) = *(_BYTE *)(a4 + 2176);
    *((_QWORD *)v14 + 279) = *(_QWORD *)(a4 + 2184);
    v14[140] = *(_OWORD *)(a4 + 2192);
    *(_QWORD *)(a4 + 2184) = 0;
    *(_QWORD *)(a4 + 2200) = 0;
    *(_QWORD *)(a4 + 2192) = 0;
    v14[141] = *(_OWORD *)(a4 + 2208);
    *((_QWORD *)v14 + 284) = *(_QWORD *)(a4 + 2224);
    *(_QWORD *)(a4 + 2216) = 0;
    *(_QWORD *)(a4 + 2208) = 0;
    *(_QWORD *)(a4 + 2224) = 0;
    *((_BYTE *)v14 + 2280) = *(_BYTE *)(a4 + 2232);
    *((_QWORD *)v14 + 286) = &off_24EC24788;
    *((_QWORD *)v14 + 287) = *(_QWORD *)(a4 + 2248);
    *((_QWORD *)v14 + 288) = *(_QWORD *)(a4 + 2256);
    *(_QWORD *)(a4 + 2248) = 0;
    *(_QWORD *)(a4 + 2256) = 0;
    v34 = *(_OWORD *)(a4 + 2264);
    v35 = *(_OWORD *)(a4 + 2280);
    v36 = *(_OWORD *)(a4 + 2296);
    *((_QWORD *)v14 + 295) = *(_QWORD *)(a4 + 2312);
    *(_OWORD *)((char *)v14 + 2344) = v36;
    *(_OWORD *)((char *)v14 + 2328) = v35;
    *(_OWORD *)((char *)v14 + 2312) = v34;
    *((_WORD *)v14 + 1184) = *(_WORD *)(a4 + 2320);
    *((_DWORD *)v14 + 594) = *(_DWORD *)(a4 + 2328);
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v10;
    *v8 = (uint64_t)v14;
    v37 = (uint64_t *)**a1;
    if (v37)
    {
      *a1 = v37;
      v14 = (_OWORD *)*v8;
    }
    result = (uint64_t)sub_2231A9A8C(a1[1], (uint64_t *)v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v10 = v7;
      v11 = (unsigned __int8 *)(v7 + 4);
      if ((sub_22319835C(a2, (unsigned __int8 *)v7 + 32) & 0x80) == 0)
        break;
      v7 = (uint64_t *)*v10;
      v8 = v10;
      if (!*v10)
        goto LABEL_9;
    }
    result = sub_22319835C(v11, a2);
    if ((result & 0x80) == 0)
      break;
    v8 = v10 + 1;
    v7 = (uint64_t *)v10[1];
    if (!v7)
      goto LABEL_9;
  }
  if (!*v8)
    goto LABEL_9;
  return result;
}

uint64_t sub_223485264(uint64_t a1)
{
  *(_OWORD *)(a1 + 4) = xmmword_2245F7194;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)algn_2245F71A4;
  *(_OWORD *)(a1 + 36) = xmmword_2245F71B4;
  *(_OWORD *)(a1 + 52) = unk_2245F71C4;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_QWORD *)(a1 + 160) = 0;
  sub_2234853B8(a1 + 168);
  *(_BYTE *)(a1 + 2328) = 0;
  *(_BYTE *)(a1 + 2331) = 0;
  return a1;
}

void sub_223485304(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;
  char *v7;
  char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  sub_223198030(v2, *(_QWORD **)(v1 + 152));
  sub_223198030(v3, *(_QWORD **)(v1 + 128));
  v6 = *(void **)(v1 + 96);
  if (v6)
  {
    *(_QWORD *)(v1 + 104) = v6;
    operator delete(v6);
    v7 = (char *)*v4;
    if (!*v4)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v7 = (char *)*v4;
    if (!*v4)
      goto LABEL_3;
  }
  v8 = *(char **)(v1 + 80);
  v9 = v7;
  if (v8 != v7)
  {
    do
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)v8 - 28);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v8 -= 248;
    }
    while (v8 != v7);
    v9 = *v4;
  }
  *(_QWORD *)(v1 + 80) = v7;
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234853B8(uint64_t a1)
{
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 1848) = 0;
  *(_BYTE *)(a1 + 1856) = 0;
  *(_BYTE *)(a1 + 1880) = 0;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 1920) = 1065353216;
  *(_QWORD *)(a1 + 1928) = 0;
  *(_QWORD *)(a1 + 1944) = 0;
  *(_QWORD *)(a1 + 1936) = 0;
  *(_BYTE *)(a1 + 1952) = 2;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_QWORD *)(a1 + 2072) = &off_24EC24788;
  *(_OWORD *)(a1 + 1960) = 0u;
  sub_223484C70((uint64_t *)(a1 + 2080));
  return a1;
}

void sub_22348547C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char **v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;

  v10 = *(void **)(v1 + 2040);
  if (v10)
  {
    *(_QWORD *)(v1 + 2048) = v10;
    operator delete(v10);
    v11 = *v8;
    if (!*v8)
    {
LABEL_3:
      sub_22319A750(v6);
      sub_223248E48(v5);
      v12 = *v7;
      if (!*v7)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v11 = *v8;
    if (!*v8)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 2024) = v11;
  operator delete(v11);
  sub_22319A750(v6);
  sub_223248E48(v5);
  v12 = *v7;
  if (!*v7)
  {
LABEL_4:
    sub_223481664(v4);
    sub_22347D6FC(v3);
    if (!*(_BYTE *)(v1 + 1848))
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  *(_QWORD *)(v1 + 1936) = v12;
  operator delete(v12);
  sub_223481664(v4);
  sub_22347D6FC(v3);
  if (!*(_BYTE *)(v1 + 1848))
  {
LABEL_5:
    sub_223473EA8((void **)v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  sub_2232555B8(v2);
  sub_223473EA8((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD **sub_223485538(_QWORD **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  unsigned __int8 *v7;
  char *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t v12;
  unsigned __int8 *v13;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      v7 = sub_223426D4C(a1, v4, &v13, &v12, a2);
      if (!*(_QWORD *)v7)
      {
        v8 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v8 + 25) = *(_OWORD *)a2;
        v9 = v13;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v9;
        *(_QWORD *)v7 = v8;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v8 = *(char **)v7;
        }
        sub_2231A9A8C(a1[1], (uint64_t *)v8);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_223485610(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223485628(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;

  v6 = operator new();
  v7 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v14 = *a2;
  v15 = v7;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_223485754(v6, (uint64_t)&v15, (uint64_t *)&v14);
  *a3 = v6;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_223485720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  MEMORY[0x227684CE8](v11, 0x10B3C404AE8992ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_223485754(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)a1 = &off_24EC37B08;
  v6 = *a3;
  if (*(char *)(*a3 + 1143) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 8), *(void **)(v6 + 1120), *(_QWORD *)(v6 + 1128));
    v9 = a1 + 32;
    v10 = *a3;
    if ((*(char *)(*a3 + 1167) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = (__int128 *)(v6 + 1120);
    v8 = *v7;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)v7 + 2);
    *(_OWORD *)(a1 + 8) = v8;
    v9 = a1 + 32;
    v10 = *a3;
    if ((*(char *)(*a3 + 1167) & 0x80000000) == 0)
    {
LABEL_3:
      v11 = (__int128 *)(v10 + 1144);
      v12 = *v11;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v9 = v12;
      goto LABEL_6;
    }
  }
  sub_223197FA4((_BYTE *)v9, *(void **)(v10 + 1144), *(_QWORD *)(v10 + 1152));
LABEL_6:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(std::__shared_weak_count **)(a1 + 64);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_2234858EC();
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_223485890(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_2234858EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  void *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v27;
  unint64_t v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  void *v40;
  void *v41;
  char *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  unint64_t *v73;
  unint64_t v74;
  void *v75;
  char v76;
  unint64_t *v77;
  unint64_t v78;
  char *v79;
  __int128 v80;
  void *v81;
  _QWORD *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 v97;
  void *v98;
  void *v99;
  char *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  void *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  __int128 v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  char v134;
  unint64_t *v135;
  unint64_t v136;
  char *v137;
  __int128 v138;
  void *v139;
  _QWORD *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  std::__shared_weak_count *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  __int128 v155;
  void *v156;
  void *v157;
  char *v158;
  unint64_t *v159;
  unint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  void *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  __int128 v189;
  unint64_t *v190;
  unint64_t v191;
  void *v192;
  char v193;
  unint64_t *v194;
  unint64_t v195;
  char *v196;
  __int128 v197;
  void *v198;
  _QWORD *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  std::__shared_weak_count *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  __int128 v215;
  void *v216;
  void *v217;
  char *v218;
  unint64_t *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  uint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  void *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t *v252;
  uint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  __int128 v256;
  unint64_t *v257;
  unint64_t v258;
  void *v259;
  char v260;
  unint64_t *v261;
  unint64_t v262;
  char *v263;
  __int128 v264;
  void *v265;
  _QWORD *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  std::__shared_weak_count *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  __int128 v283;
  void *v284;
  void *v285;
  char *v286;
  unint64_t *v287;
  unint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t *v308;
  void *v309;
  unint64_t *v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t *v313;
  uint64_t v314;
  unint64_t *v315;
  unint64_t v316;
  __int128 v317;
  unint64_t *v318;
  unint64_t v319;
  void *v320;
  char v321;
  unint64_t *v322;
  unint64_t v323;
  char *v324;
  __int128 v325;
  void *v326;
  _QWORD *v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  std::__shared_weak_count *v330;
  unint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  __int128 v344;
  void *v345;
  void *v346;
  char *v347;
  unint64_t *v348;
  unint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  void *v370;
  unint64_t *v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t *v374;
  uint64_t v375;
  unint64_t *v376;
  unint64_t v377;
  __int128 v378;
  unint64_t *v379;
  unint64_t v380;
  void *v381;
  char v382;
  unint64_t *v383;
  unint64_t v384;
  char *v385;
  __int128 v386;
  void *v387;
  _QWORD *v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  std::__shared_weak_count *v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t *v396;
  unint64_t v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  __int128 v405;
  void *v406;
  void *v407;
  char *v408;
  unint64_t *v409;
  unint64_t v410;
  _QWORD *v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t *v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  uint64_t v434;
  unint64_t *v435;
  unint64_t v436;
  unint64_t *v437;
  void *v438;
  unint64_t *v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t *v442;
  uint64_t v443;
  unint64_t *v444;
  unint64_t v445;
  __int128 v446;
  unint64_t *v447;
  unint64_t v448;
  void *v449;
  char v450;
  unint64_t *v451;
  unint64_t v452;
  char *v453;
  __int128 v454;
  void *v455;
  _QWORD *v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  std::__shared_weak_count *v459;
  unint64_t v460;
  unint64_t *v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t *v464;
  unint64_t v465;
  unint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  __int128 v473;
  void *v474;
  void *v475;
  char *v476;
  unint64_t *v477;
  unint64_t v478;
  _QWORD *v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t *v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  unint64_t *v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t *v489;
  unint64_t v490;
  uint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  unint64_t *v498;
  void *v499;
  unint64_t *v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t *v503;
  uint64_t v504;
  unint64_t *v505;
  unint64_t v506;
  __int128 v507;
  unint64_t *v508;
  unint64_t v509;
  void *v510;
  char v511;
  unint64_t *v512;
  unint64_t v513;
  char *v514;
  __int128 v515;
  void *v516;
  _QWORD *v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  std::__shared_weak_count *v520;
  unint64_t v521;
  unint64_t *v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t *v525;
  unint64_t v526;
  unint64_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  std::__shared_weak_count *v531;
  unint64_t *v532;
  unint64_t v533;
  __int128 v534;
  void *v535;
  void *v536;
  char *v537;
  unint64_t *v538;
  unint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t *v547;
  unint64_t v548;
  uint64_t v549;
  unint64_t *v550;
  unint64_t v551;
  uint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t *v559;
  void *v560;
  unint64_t *v561;
  unint64_t v562;
  uint64_t v563;
  unint64_t *v564;
  uint64_t v565;
  unint64_t *v566;
  unint64_t v567;
  __int128 v568;
  unint64_t *v569;
  unint64_t v570;
  void *v571;
  char v572;
  unint64_t *v573;
  unint64_t v574;
  char *v575;
  __int128 v576;
  void *v577;
  _QWORD *v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  std::__shared_weak_count *v581;
  unint64_t v582;
  unint64_t *v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t *v586;
  unint64_t v587;
  unint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  __int128 v595;
  void *v596;
  void *v597;
  char *v598;
  unint64_t *v599;
  unint64_t v600;
  _QWORD *v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t *v604;
  unint64_t v605;
  uint64_t v606;
  unint64_t v607;
  unint64_t *v608;
  unint64_t v609;
  uint64_t v610;
  unint64_t *v611;
  unint64_t v612;
  uint64_t v613;
  std::__shared_weak_count *v614;
  unint64_t *v615;
  unint64_t v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  unint64_t *v620;
  void *v621;
  unint64_t *v622;
  unint64_t v623;
  uint64_t v624;
  unint64_t *v625;
  uint64_t v626;
  unint64_t *v627;
  unint64_t v628;
  __int128 v629;
  unint64_t *v630;
  unint64_t v631;
  void *v632;
  char v633;
  unint64_t *v634;
  unint64_t v635;
  char *v636;
  __int128 v637;
  void *v638;
  _QWORD *v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  std::__shared_weak_count *v642;
  unint64_t v643;
  unint64_t *v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t *v647;
  unint64_t v648;
  unint64_t v649;
  std::__shared_weak_count *v650;
  unint64_t *v651;
  unint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  __int128 v656;
  void *v657;
  void *v658;
  char *v659;
  unint64_t *v660;
  unint64_t v661;
  _QWORD *v662;
  uint64_t v663;
  uint64_t v664;
  unint64_t *v665;
  unint64_t v666;
  uint64_t v667;
  unint64_t v668;
  unint64_t *v669;
  unint64_t v670;
  uint64_t v671;
  unint64_t *v672;
  unint64_t v673;
  uint64_t v674;
  std::__shared_weak_count *v675;
  unint64_t *v676;
  unint64_t v677;
  std::__shared_weak_count *v678;
  unint64_t *v679;
  unint64_t v680;
  unint64_t *v681;
  void *v682;
  unint64_t *v683;
  unint64_t v684;
  uint64_t v685;
  unint64_t *v686;
  uint64_t v687;
  unint64_t *v688;
  unint64_t v689;
  __int128 v690;
  unint64_t *v691;
  unint64_t v692;
  void *v693;
  void *v694;
  char v695;
  unint64_t *v696;
  unint64_t v697;
  char *v698;
  __int128 v699;
  void *v700;
  _QWORD *v701;
  std::__shared_weak_count *v702;
  unint64_t *v703;
  std::__shared_weak_count *v704;
  unint64_t v705;
  unint64_t *v706;
  unint64_t v707;
  unint64_t v708;
  unint64_t *v709;
  unint64_t v710;
  unint64_t v711;
  std::__shared_weak_count *v712;
  unint64_t *v713;
  unint64_t v714;
  std::__shared_weak_count *v715;
  unint64_t *v716;
  unint64_t v717;
  __int128 v718;
  void *v719;
  void *v720;
  char *v721;
  unint64_t *v722;
  unint64_t v723;
  _QWORD *v724;
  uint64_t v725;
  uint64_t v726;
  unint64_t *v727;
  unint64_t v728;
  uint64_t v729;
  unint64_t v730;
  unint64_t *v731;
  unint64_t v732;
  uint64_t v733;
  unint64_t *v734;
  unint64_t v735;
  uint64_t v736;
  std::__shared_weak_count *v737;
  unint64_t *v738;
  unint64_t v739;
  std::__shared_weak_count *v740;
  unint64_t *v741;
  unint64_t v742;
  unint64_t *v743;
  void *v744;
  unint64_t *v745;
  unint64_t v746;
  uint64_t v747;
  unint64_t *v748;
  uint64_t v749;
  unint64_t *v750;
  unint64_t v751;
  __int128 v752;
  unint64_t *v753;
  unint64_t v754;
  void *v755;
  void *v756;
  char v757;
  unint64_t *v758;
  unint64_t v759;
  char *v760;
  __int128 v761;
  void *v762;
  _QWORD *v763;
  std::__shared_weak_count *v764;
  unint64_t *v765;
  std::__shared_weak_count *v766;
  unint64_t v767;
  unint64_t *v768;
  unint64_t v769;
  unint64_t v770;
  unint64_t *v771;
  unint64_t v772;
  unint64_t v773;
  std::__shared_weak_count *v774;
  unint64_t *v775;
  unint64_t v776;
  std::__shared_weak_count *v777;
  unint64_t *v778;
  unint64_t v779;
  __int128 v780;
  void *v781;
  void *v782;
  char *v783;
  unint64_t *v784;
  unint64_t v785;
  _QWORD *v786;
  uint64_t v787;
  uint64_t v788;
  unint64_t *v789;
  unint64_t v790;
  uint64_t v791;
  unint64_t v792;
  unint64_t *v793;
  unint64_t v794;
  uint64_t v795;
  unint64_t *v796;
  unint64_t v797;
  uint64_t v798;
  std::__shared_weak_count *v799;
  unint64_t *v800;
  unint64_t v801;
  std::__shared_weak_count *v802;
  unint64_t *v803;
  unint64_t v804;
  unint64_t *v805;
  void *v806;
  unint64_t *v807;
  unint64_t v808;
  uint64_t v809;
  unint64_t *v810;
  uint64_t v811;
  unint64_t *v812;
  unint64_t v813;
  __int128 v814;
  unint64_t *v815;
  unint64_t v816;
  void *v817;
  char v818;
  unint64_t *v819;
  unint64_t v820;
  char *v821;
  __int128 v822;
  uint64_t v823;
  _QWORD *v824;
  std::__shared_weak_count *v825;
  unint64_t *v826;
  std::__shared_weak_count *v827;
  unint64_t v828;
  unint64_t *v829;
  unint64_t v830;
  unint64_t v831;
  unint64_t *v832;
  unint64_t v833;
  unint64_t v834;
  std::__shared_weak_count *v835;
  unint64_t *v836;
  unint64_t v837;
  std::__shared_weak_count *v838;
  unint64_t *v839;
  unint64_t v840;
  __int128 v841;
  void *v842;
  void *v843;
  char *v844;
  unint64_t *v845;
  unint64_t v846;
  _QWORD *v847;
  uint64_t v848;
  uint64_t v849;
  unint64_t *v850;
  unint64_t v851;
  uint64_t v852;
  unint64_t v853;
  unint64_t *v854;
  unint64_t v855;
  uint64_t v856;
  unint64_t *v857;
  unint64_t v858;
  uint64_t v859;
  std::__shared_weak_count *v860;
  unint64_t *v861;
  unint64_t v862;
  std::__shared_weak_count *v863;
  unint64_t *v864;
  unint64_t v865;
  unint64_t *v866;
  void *v867;
  unint64_t *v868;
  unint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t *v873;
  unint64_t v874;
  __int128 v875;
  unint64_t *v876;
  unint64_t v877;
  void *v878;
  char v879;
  unint64_t *v880;
  unint64_t v881;
  char *v882;
  __int128 v883;
  uint64_t v884;
  _QWORD *v885;
  std::__shared_weak_count *v886;
  unint64_t *v887;
  std::__shared_weak_count *v888;
  unint64_t v889;
  unint64_t *v890;
  unint64_t v891;
  unint64_t v892;
  unint64_t *v893;
  unint64_t v894;
  unint64_t v895;
  std::__shared_weak_count *v896;
  unint64_t *v897;
  unint64_t v898;
  std::__shared_weak_count *v899;
  unint64_t *v900;
  unint64_t v901;
  __int128 v902;
  void *v903;
  void *v904;
  char *v905;
  unint64_t *v906;
  unint64_t v907;
  _QWORD *v908;
  uint64_t v909;
  uint64_t v910;
  unint64_t *v911;
  unint64_t v912;
  uint64_t v913;
  unint64_t v914;
  unint64_t *v915;
  unint64_t v916;
  uint64_t v917;
  unint64_t *v918;
  unint64_t v919;
  uint64_t v920;
  std::__shared_weak_count *v921;
  unint64_t *v922;
  unint64_t v923;
  std::__shared_weak_count *v924;
  unint64_t *v925;
  unint64_t v926;
  unint64_t *v927;
  void *v928;
  unint64_t *v929;
  unint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  unint64_t *v934;
  unint64_t v935;
  __int128 v936;
  unint64_t *v937;
  unint64_t v938;
  void *v939;
  void *v940;
  char v941;
  unint64_t *v942;
  unint64_t v943;
  char *v944;
  __int128 v945;
  uint64_t v946;
  _QWORD *v947;
  std::__shared_weak_count *v948;
  unint64_t *v949;
  std::__shared_weak_count *v950;
  unint64_t v951;
  unint64_t *v952;
  unint64_t v953;
  unint64_t v954;
  unint64_t *v955;
  unint64_t v956;
  unint64_t v957;
  std::__shared_weak_count *v958;
  unint64_t *v959;
  unint64_t v960;
  std::__shared_weak_count *v961;
  unint64_t *v962;
  unint64_t v963;
  __int128 v964;
  void *v965;
  void *v966;
  char *v967;
  unint64_t *v968;
  unint64_t v969;
  _QWORD *v970;
  uint64_t v971;
  uint64_t v972;
  unint64_t *v973;
  unint64_t v974;
  uint64_t v975;
  unint64_t v976;
  unint64_t *v977;
  unint64_t v978;
  uint64_t v979;
  unint64_t *v980;
  unint64_t v981;
  uint64_t v982;
  std::__shared_weak_count *v983;
  unint64_t *v984;
  unint64_t v985;
  std::__shared_weak_count *v986;
  unint64_t *v987;
  unint64_t v988;
  uint64_t v989;
  void *v990;
  unint64_t *v991;
  unint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  unint64_t *v996;
  unint64_t v997;
  __int128 v998;
  unint64_t *v999;
  unint64_t v1000;
  void *v1001;
  void *v1002;
  char v1003;
  unint64_t *v1004;
  unint64_t v1005;
  char *v1006;
  __int128 v1007;
  uint64_t v1008;
  _QWORD *v1009;
  std::__shared_weak_count *v1010;
  unint64_t *v1011;
  std::__shared_weak_count *v1012;
  unint64_t v1013;
  unint64_t *v1014;
  unint64_t v1015;
  unint64_t v1016;
  unint64_t *v1017;
  unint64_t v1018;
  unint64_t v1019;
  std::__shared_weak_count *v1020;
  unint64_t *v1021;
  unint64_t v1022;
  std::__shared_weak_count *v1023;
  unint64_t *v1024;
  unint64_t v1025;
  __int128 v1026;
  void *v1027;
  void *v1028;
  char *v1029;
  unint64_t *v1030;
  unint64_t v1031;
  _QWORD *v1032;
  uint64_t v1033;
  uint64_t v1034;
  unint64_t *v1035;
  unint64_t v1036;
  uint64_t v1037;
  unint64_t v1038;
  unint64_t *v1039;
  unint64_t v1040;
  uint64_t v1041;
  unint64_t *v1042;
  unint64_t v1043;
  uint64_t v1044;
  std::__shared_weak_count *v1045;
  unint64_t *v1046;
  unint64_t v1047;
  std::__shared_weak_count *v1048;
  unint64_t *v1049;
  unint64_t v1050;
  uint64_t v1051;
  void *v1052;
  unint64_t *v1053;
  unint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  unint64_t *v1058;
  unint64_t v1059;
  __int128 v1060;
  unint64_t *v1061;
  unint64_t v1062;
  void *v1063;
  void *v1064;
  char v1065;
  unint64_t *v1066;
  unint64_t v1067;
  uint64_t v1068;
  __int128 v1069;
  uint64_t v1070;
  _QWORD *v1071;
  std::__shared_weak_count *v1072;
  unint64_t *v1073;
  std::__shared_weak_count *v1074;
  unint64_t v1075;
  unint64_t *v1076;
  unint64_t v1077;
  unint64_t v1078;
  unint64_t *v1079;
  unint64_t v1080;
  unint64_t v1081;
  std::__shared_weak_count *v1082;
  unint64_t *v1083;
  unint64_t v1084;
  std::__shared_weak_count *v1085;
  unint64_t *v1086;
  unint64_t v1087;
  __int128 v1088;
  void *v1089;
  __int128 v1090;
  unint64_t *v1091;
  unint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  unint64_t *v1096;
  unint64_t v1097;
  uint64_t v1098;
  unint64_t v1099;
  unint64_t *v1100;
  unint64_t v1101;
  uint64_t v1102;
  unint64_t *v1103;
  unint64_t v1104;
  uint64_t v1105;
  std::__shared_weak_count *v1106;
  unint64_t *v1107;
  unint64_t v1108;
  std::__shared_weak_count *v1109;
  unint64_t *v1110;
  unint64_t v1111;
  uint64_t v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  uint64_t v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  uint64_t v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  uint64_t v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  __int128 v1182;
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  unint64_t *v1199;
  unint64_t v1200;
  unint64_t *v1201;
  unint64_t v1202;
  unint64_t *v1203;
  unint64_t v1204;
  unint64_t *v1205;
  unint64_t v1206;
  unint64_t *v1207;
  unint64_t v1208;
  unint64_t *v1209;
  unint64_t v1210;
  unint64_t *v1211;
  unint64_t v1212;
  unint64_t *v1213;
  unint64_t v1214;
  unint64_t *v1215;
  unint64_t v1216;
  unint64_t *v1217;
  unint64_t v1218;
  unint64_t *v1219;
  unint64_t v1220;
  std::__shared_weak_count *v1221;
  unint64_t *v1222;
  unint64_t v1223;
  std::__shared_weak_count *v1224;
  unint64_t *v1225;
  unint64_t v1226;
  std::__shared_weak_count *v1227;
  unint64_t *v1228;
  unint64_t v1229;
  std::__shared_weak_count *v1230;
  unint64_t *v1231;
  unint64_t v1232;
  std::__shared_weak_count *v1233;
  unint64_t *v1234;
  unint64_t v1235;
  std::__shared_weak_count *v1236;
  unint64_t *v1237;
  unint64_t v1238;
  std::__shared_weak_count *v1239;
  unint64_t *v1240;
  unint64_t v1241;
  std::__shared_weak_count *v1242;
  unint64_t *v1243;
  unint64_t v1244;
  std::__shared_weak_count *v1245;
  unint64_t *v1246;
  unint64_t v1247;
  std::__shared_weak_count *v1248;
  unint64_t *v1249;
  unint64_t v1250;
  std::__shared_weak_count *v1251;
  unint64_t *v1252;
  unint64_t v1253;
  std::__shared_weak_count *v1254;
  unint64_t *v1255;
  unint64_t v1256;
  std::__shared_weak_count *v1257;
  unint64_t *v1258;
  unint64_t v1259;
  std::__shared_weak_count *v1260;
  unint64_t *v1261;
  unint64_t v1262;
  std::__shared_weak_count *v1263;
  unint64_t *v1264;
  unint64_t v1265;
  std::__shared_weak_count *v1266;
  unint64_t *v1267;
  unint64_t v1268;
  std::__shared_weak_count *v1269;
  unint64_t *v1270;
  unint64_t v1271;
  std::__shared_weak_count *v1272;
  unint64_t *v1273;
  unint64_t v1274;
  __int128 v1275;
  __int128 v1276;
  uint64_t v1277;
  std::__shared_weak_count *v1278;
  uint64_t v1279;
  std::__shared_weak_count *v1280;
  std::__shared_weak_count *v1281;
  std::__shared_weak_count *v1282;
  std::__shared_weak_count *v1283;
  std::__shared_weak_count *v1284;
  std::__shared_weak_count *v1285;
  std::__shared_weak_count *v1286;
  std::__shared_weak_count *v1287;
  std::__shared_weak_count *v1288;
  std::__shared_weak_count *v1289;
  uint64_t v1290;
  std::__shared_weak_count *v1291;
  __int128 v1292;
  void *v1293[3];
  uint64_t v1294;
  __int128 v1295;
  uint64_t v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  uint64_t v1300;
  __int128 v1301;
  __int128 v1302;
  uint64_t v1303;
  std::__shared_weak_count *v1304;
  void *v1305;
  std::__shared_weak_count *v1306;
  void *v1307[3];
  void *v1308;
  __int128 v1309;
  void *v1310;
  __int128 v1311;
  __int128 v1312;
  uint64_t (**v1313)();
  __int128 v1314;
  uint64_t v1315;
  uint64_t (**v1316)();
  __int128 v1317;
  uint64_t (**v1318)();
  __int128 v1319;
  uint64_t v1320;
  std::__shared_weak_count *v1321;
  void *v1322;
  std::__shared_weak_count *v1323;
  void *v1324[3];
  void *v1325;
  __int128 v1326;
  void *v1327;
  __int128 v1328;
  __int128 v1329;
  uint64_t (**v1330)();
  __int128 v1331;
  uint64_t v1332;
  uint64_t (**v1333)();
  __int128 v1334;
  uint64_t (**v1335)();
  __int128 v1336;
  uint64_t v1337;
  std::__shared_weak_count *v1338;
  void *v1339;
  std::__shared_weak_count *v1340;
  void *v1341[3];
  void *v1342;
  __int128 v1343;
  void *v1344;
  __int128 v1345;
  __int128 v1346;
  uint64_t (**v1347)();
  __int128 v1348;
  uint64_t v1349;
  uint64_t (**v1350)();
  __int128 v1351;
  uint64_t (**v1352)();
  __int128 v1353;
  uint64_t v1354;
  std::__shared_weak_count *v1355;
  __int128 v1356;
  void *__src[3];
  uint64_t v1358;
  __int128 v1359;
  uint64_t v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  uint64_t v1364;
  __int128 v1365;
  __int128 v1366;
  uint64_t v1367;
  std::__shared_weak_count *v1368;
  void *v1369;
  std::__shared_weak_count *v1370;
  void *__dst[3];
  void *v1372;
  __int128 v1373;
  void *v1374;
  __int128 v1375;
  __int128 v1376;
  uint64_t (**v1377)();
  __int128 v1378;
  uint64_t v1379;
  uint64_t (**v1380)();
  __int128 v1381;
  uint64_t (**v1382)();
  __int128 v1383;
  uint64_t v1384;
  std::__shared_weak_count *v1385;
  void *v1386;
  std::__shared_weak_count *v1387;
  void *__p[3];
  void *v1389;
  __int128 v1390;
  void *v1391;
  __int128 v1392;
  __int128 v1393;
  uint64_t (**v1394)();
  __int128 v1395;
  uint64_t v1396;
  uint64_t (**v1397)();
  __int128 v1398;
  uint64_t (**v1399)();
  __int128 v1400;
  uint64_t v1401;
  std::__shared_weak_count *v1402;
  void *v1403;
  std::__shared_weak_count *v1404;
  void *v1405[3];
  void *v1406;
  __int128 v1407;
  void *v1408;
  __int128 v1409;
  __int128 v1410;
  uint64_t (**v1411)();
  __int128 v1412;
  uint64_t v1413;
  uint64_t (**v1414)();
  __int128 v1415;
  uint64_t (**v1416)();
  __int128 v1417;
  uint64_t v1418;
  std::__shared_weak_count *v1419;
  void *v1420;
  std::__shared_weak_count *v1421;
  uint64_t (**v1422)();
  __int128 v1423;
  void *v1424;
  __int128 v1425;
  void *v1426;
  __int128 v1427;
  __int128 v1428;
  uint64_t (**v1429)();
  __int128 v1430;
  uint64_t v1431;
  uint64_t (**v1432)();
  __int128 v1433;
  uint64_t (**v1434)();
  __int128 v1435;
  void *v1436[3];
  void *v1437;
  __int128 v1438;
  void *v1439;
  __int128 v1440;
  __int128 v1441;
  uint64_t (**v1442)();
  __int128 v1443;
  uint64_t v1444;
  uint64_t (**v1445)();
  __int128 v1446;
  uint64_t (**v1447)();
  __int128 v1448;
  void *v1449[3];
  void *v1450;
  __int128 v1451;
  void *v1452;
  __int128 v1453;
  __int128 v1454;
  uint64_t (**v1455)();
  __int128 v1456;
  uint64_t v1457;
  uint64_t (**v1458)();
  __int128 v1459;
  uint64_t (**v1460)();
  __int128 v1461;
  void *v1462[3];
  void *v1463;
  __int128 v1464;
  void *v1465;
  __int128 v1466;
  __int128 v1467;
  uint64_t (**v1468)();
  __int128 v1469;
  uint64_t v1470;
  uint64_t (**v1471)();
  __int128 v1472;
  uint64_t (**v1473)();
  __int128 v1474;
  void *v1475[3];
  void *v1476;
  __int128 v1477;
  void *v1478;
  __int128 v1479;
  __int128 v1480;
  uint64_t (**v1481)();
  __int128 v1482;
  uint64_t v1483;
  uint64_t (**v1484)();
  __int128 v1485;
  uint64_t (**v1486)();
  __int128 v1487;
  void *v1488[3];
  void *v1489;
  __int128 v1490;
  void *v1491;
  __int128 v1492;
  __int128 v1493;
  uint64_t (**v1494)();
  __int128 v1495;
  uint64_t v1496;
  uint64_t (**v1497)();
  __int128 v1498;
  uint64_t (**v1499)();
  __int128 v1500;
  void *v1501[3];
  void *v1502;
  __int128 v1503;
  void *v1504;
  __int128 v1505;
  __int128 v1506;
  uint64_t (**v1507)();
  __int128 v1508;
  uint64_t v1509;
  uint64_t (**v1510)();
  __int128 v1511;
  uint64_t (**v1512)();
  __int128 v1513;
  void *v1514[3];
  void *v1515;
  __int128 v1516;
  void *v1517;
  __int128 v1518;
  __int128 v1519;
  uint64_t (**v1520)();
  __int128 v1521;
  uint64_t v1522;
  uint64_t (**v1523)();
  __int128 v1524;
  uint64_t (**v1525)();
  __int128 v1526;
  void *v1527[3];
  void *v1528;
  __int128 v1529;
  void *v1530;
  __int128 v1531;
  __int128 v1532;
  uint64_t (**v1533)();
  __int128 v1534;
  uint64_t v1535;
  uint64_t (**v1536)();
  __int128 v1537;
  uint64_t (**v1538)();
  __int128 v1539;
  void *v1540[3];
  void *v1541;
  __int128 v1542;
  void *v1543;
  __int128 v1544;
  __int128 v1545;
  uint64_t (**v1546)();
  __int128 v1547;
  uint64_t v1548;
  uint64_t (**v1549)();
  __int128 v1550;
  uint64_t (**v1551)();
  __int128 v1552;
  void *v1553[3];
  void *v1554;
  __int128 v1555;
  void *v1556;
  __int128 v1557;
  __int128 v1558;
  uint64_t (**v1559)();
  __int128 v1560;
  uint64_t v1561;
  uint64_t (**v1562)();
  __int128 v1563;
  uint64_t (**v1564)();
  __int128 v1565;
  void *v1566[3];
  void *v1567;
  __int128 v1568;
  void *v1569;
  __int128 v1570;
  __int128 v1571;
  uint64_t (**v1572)();
  __int128 v1573;
  uint64_t v1574;
  uint64_t (**v1575)();
  __int128 v1576;
  uint64_t (**v1577)();
  __int128 v1578;
  __int128 v1579;
  __int128 v1580;
  void *v1581[2];
  void *v1582;
  void *v1583[4];
  _QWORD v1584[2];
  void *v1585[4];
  void *v1586[4];
  __int128 v1587;
  _QWORD v1588[2];
  __int128 v1589;
  _QWORD v1590[5];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = (_QWORD *)v0;
  v1590[2] = *MEMORY[0x24BDAC8D0];
  v7 = *(void **)v3;
  v6 = *(unint64_t **)(v3 + 8);
  v1420 = *(void **)v3;
  v1421 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v8 = v6 + 1;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *v1;
  v11 = (unint64_t *)v1[1];
  v1418 = *v1;
  v1419 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = v11 + 1;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(char *)(v10 + 31) < 0)
  {
    sub_223197FA4(__dst, *(void **)(v10 + 8), *(_QWORD *)(v10 + 16));
  }
  else
  {
    v14 = *(_OWORD *)(v10 + 8);
    __dst[2] = *(void **)(v10 + 24);
    *(_OWORD *)__dst = v14;
  }
  if (*(char *)(v10 + 55) < 0)
  {
    sub_223197FA4(__src, *(void **)(v10 + 32), *(_QWORD *)(v10 + 40));
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)(v10 + 32);
    __src[2] = *(void **)(v10 + 48);
  }
  v1307[0] = v7;
  v1307[1] = v6;
  v1421 = 0;
  v1420 = 0;
  v1293[0] = (void *)v10;
  v1293[1] = v11;
  if (v11)
  {
    v15 = v11 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (SHIBYTE(__dst[2]) < 0)
  {
    sub_223197FA4(v1405, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v1405 = *(_OWORD *)__dst;
    v1405[2] = __dst[2];
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_223197FA4(__p, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__src;
    __p[2] = __src[2];
  }
  *(void **)((char *)v1540 + 7) = *(void **)((char *)&__dst[1] + 7);
  v17 = __dst[0];
  v1540[0] = __dst[1];
  v18 = HIBYTE(__dst[2]);
  memset(__dst, 0, sizeof(__dst));
  v1553[0] = v1540[0];
  *(void **)((char *)v1553 + 7) = *(void **)((char *)v1540 + 7);
  *(void **)((char *)v1540 + 7) = 0;
  v1540[0] = 0;
  v1324[0] = v7;
  v1324[1] = v6;
  if (v6)
  {
    v19 = v6 + 1;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (char *)operator new();
  v1566[0] = v1553[0];
  *(void **)((char *)v1566 + 7) = *(void **)((char *)v1553 + 7);
  v1553[0] = 0;
  *(void **)((char *)v1553 + 7) = 0;
  v22 = *(_OWORD *)v1324;
  v1324[0] = 0;
  v1324[1] = 0;
  v21[8] = 1;
  *((_QWORD *)v21 + 4) = 0;
  *((_QWORD *)v21 + 5) = 0;
  *(_QWORD *)v21 = &off_24EC38550;
  *((_QWORD *)v21 + 2) = &unk_24EC385C8;
  *((_QWORD *)v21 + 3) = &unk_24EC38608;
  v23 = v1566[0];
  *(void **)(v21 + 63) = *(void **)((char *)v1566 + 7);
  *((_QWORD *)v21 + 6) = v17;
  *((_QWORD *)v21 + 7) = v23;
  v21[71] = v18;
  v1566[0] = 0;
  *(void **)((char *)v1566 + 7) = 0;
  *(_OWORD *)(v21 + 72) = v22;
  v1341[1] = 0;
  v1341[0] = 0;
  v24 = (_QWORD *)operator new();
  *v24 = &off_24EC38700;
  v24[1] = v10;
  v24[2] = v11;
  v1293[1] = 0;
  v1293[0] = 0;
  *((_QWORD *)v21 + 18) = 0;
  *((_QWORD *)v21 + 11) = v24;
  *((_QWORD *)v21 + 12) = v21 + 96;
  *((_QWORD *)v21 + 13) = v21 + 96;
  *((_QWORD *)v21 + 14) = 0;
  *((_QWORD *)v21 + 15) = v21 + 120;
  *((_QWORD *)v21 + 16) = v21 + 120;
  *((_QWORD *)v21 + 17) = 0;
  if (!*((_QWORD *)v21 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v25 = (std::__shared_weak_count *)operator new();
  v25->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38BF0;
  v25->__shared_weak_owners_ = 0;
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)v21;
  v27 = (std::__shared_weak_count *)*((_QWORD *)v21 + 5);
  if (v27)
  {
    if (v27->__shared_owners_ != -1)
      goto LABEL_40;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
    *((_QWORD *)v21 + 4) = v21;
    *((_QWORD *)v21 + 5) = v25;
    std::__shared_weak_count::__release_weak(v27);
  }
  else
  {
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    v32 = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    *((_QWORD *)v21 + 4) = v21;
    *((_QWORD *)v21 + 5) = v25;
  }
  do
    v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_40:
  if (v1341[1])
  {
    v35 = (unint64_t *)((char *)v1341[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      (*(void (**)(void *))(*(_QWORD *)v1341[1] + 16))(v1341[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1341[1]);
    }
  }
  v1341[0] = v21;
  v1341[1] = v25;
  if (v1324[1])
  {
    v37 = (unint64_t *)((char *)v1324[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      (*(void (**)(void *))(*(_QWORD *)v1324[1] + 16))(v1324[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1324[1]);
    }
  }
  v39 = *(_OWORD *)v1307;
  v1307[0] = 0;
  v1307[1] = 0;
  v1423 = *(_OWORD *)v1405;
  v1422 = &off_24EC37B38;
  v1424 = v1405[2];
  memset(v1405, 0, sizeof(v1405));
  v1425 = *(_OWORD *)__p;
  v40 = __p[2];
  memset(__p, 0, sizeof(__p));
  v1427 = v39;
  v1324[1] = 0;
  v1324[0] = 0;
  v41 = v1341[0];
  v42 = (char *)v1341[1];
  v1426 = v40;
  v1428 = *(_OWORD *)v1341;
  v1341[0] = 0;
  v1341[1] = 0;
  if (*((_QWORD *)&v1428 + 1))
  {
    v43 = (unint64_t *)(v42 + 16);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v1429 = &off_24EC37B68;
  v45 = (_QWORD *)operator new();
  *v45 = &off_24EC38C40;
  v45[1] = v41;
  v45[2] = v42;
  *(_QWORD *)&v1430 = v45;
  v47 = *((_QWORD *)&v1428 + 1);
  v46 = v1428;
  if (!*((_QWORD *)&v1428 + 1))
  {
    *((_QWORD *)&v1430 + 1) = v1428;
    v1431 = 0;
    if ((_QWORD)v1428)
      v51 = v1428 + 16;
    else
      v51 = 0;
    goto LABEL_70;
  }
  v48 = (unint64_t *)(*((_QWORD *)&v1428 + 1) + 16);
  do
    v49 = __ldxr(v48);
  while (__stxr(v49 + 1, v48));
  v50 = *((_QWORD *)&v1428 + 1);
  *((_QWORD *)&v1430 + 1) = v46;
  v1431 = v47;
  if ((_QWORD)v1428)
    v51 = v1428 + 16;
  else
    v51 = 0;
  if (!*((_QWORD *)&v1428 + 1))
  {
    v46 = v1428;
LABEL_70:
    v54 = 0;
    v1432 = &off_24EC37BA0;
    v1433 = v51;
    goto LABEL_71;
  }
  v52 = (unint64_t *)(*((_QWORD *)&v1428 + 1) + 16);
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  v54 = *((_QWORD *)&v1428 + 1);
  v46 = v1428;
  v1432 = &off_24EC37BA0;
  *(_QWORD *)&v1433 = v51;
  *((_QWORD *)&v1433 + 1) = v50;
  if (*((_QWORD *)&v1428 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v1428 + 1) + 16);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
LABEL_71:
  if (v46)
    v57 = v46 + 24;
  else
    v57 = 0;
  v1434 = &off_24EC2E850;
  *(_QWORD *)&v1435 = v57;
  *((_QWORD *)&v1435 + 1) = v54;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1405[2]) & 0x80000000) == 0)
      goto LABEL_76;
LABEL_79:
    operator delete(v1405[0]);
    v58 = (std::__shared_weak_count *)v1293[1];
    if (!v1293[1])
      goto LABEL_84;
    goto LABEL_80;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v1405[2]) < 0)
    goto LABEL_79;
LABEL_76:
  v58 = (std::__shared_weak_count *)v1293[1];
  if (!v1293[1])
    goto LABEL_84;
LABEL_80:
  v59 = (unint64_t *)&v58->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  if (!v1307[1])
    goto LABEL_88;
LABEL_84:
  v61 = (unint64_t *)((char *)v1307[1] + 8);
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    (*(void (**)(void *))(*(_QWORD *)v1307[1] + 16))(v1307[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1307[1]);
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        goto LABEL_90;
LABEL_94:
      operator delete(__dst[0]);
      if (v1418)
        goto LABEL_96;
      goto LABEL_95;
    }
  }
  else
  {
LABEL_88:
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_89;
  }
  operator delete(__src[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_94;
LABEL_90:
  if (v1418)
    goto LABEL_96;
LABEL_95:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_96:
  v64 = *(void **)v4;
  v63 = *(unint64_t **)(v4 + 8);
  v1403 = *(void **)v4;
  v1404 = (std::__shared_weak_count *)v63;
  if (v63)
  {
    v65 = v63 + 1;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = *v2;
  v68 = (unint64_t *)v2[1];
  if (*v2)
    v69 = *v2 + 56;
  else
    v69 = 0;
  v1401 = v69;
  v1402 = (std::__shared_weak_count *)v68;
  if (v68)
  {
    v70 = v68 + 1;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  if (*(char *)(v69 + 31) < 0)
  {
    sub_223197FA4(__src, *(void **)(v69 + 8), *(_QWORD *)(v69 + 16));
  }
  else
  {
    v72 = *(_OWORD *)(v69 + 8);
    __src[2] = *(void **)(v69 + 24);
    *(_OWORD *)__src = v72;
  }
  if (*(char *)(v67 + 111) < 0)
  {
    sub_223197FA4(v1341, *(void **)(v67 + 88), *(_QWORD *)(v67 + 96));
  }
  else
  {
    *(_OWORD *)v1341 = *(_OWORD *)(v67 + 88);
    v1341[2] = *(void **)(v67 + 104);
  }
  v1293[0] = v64;
  v1293[1] = v63;
  v1404 = 0;
  v1403 = 0;
  v1566[0] = (void *)v69;
  v1566[1] = v68;
  if (v68)
  {
    v73 = v68 + 1;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_223197FA4(__p, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__src;
    __p[2] = __src[2];
  }
  if (SHIBYTE(v1341[2]) < 0)
  {
    sub_223197FA4(__dst, v1341[0], (unint64_t)v1341[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v1341;
    __dst[2] = v1341[2];
  }
  *(void **)((char *)v1527 + 7) = *(void **)((char *)&__src[1] + 7);
  v75 = __src[0];
  v1527[0] = __src[1];
  v76 = HIBYTE(__src[2]);
  memset(__src, 0, sizeof(__src));
  v1540[0] = v1527[0];
  *(void **)((char *)v1540 + 7) = *(void **)((char *)v1527 + 7);
  *(void **)((char *)v1527 + 7) = 0;
  v1527[0] = 0;
  v1307[0] = v64;
  v1307[1] = v63;
  if (v63)
  {
    v77 = v63 + 1;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v79 = (char *)operator new();
  v1553[0] = v1540[0];
  *(void **)((char *)v1553 + 7) = *(void **)((char *)v1540 + 7);
  v1540[0] = 0;
  *(void **)((char *)v1540 + 7) = 0;
  v80 = *(_OWORD *)v1307;
  v1307[0] = 0;
  v1307[1] = 0;
  v79[8] = 1;
  *((_QWORD *)v79 + 4) = 0;
  *((_QWORD *)v79 + 5) = 0;
  *(_QWORD *)v79 = &off_24EC38CB8;
  *((_QWORD *)v79 + 2) = &unk_24EC38D30;
  *((_QWORD *)v79 + 3) = &unk_24EC38D70;
  v81 = v1553[0];
  *(void **)(v79 + 63) = *(void **)((char *)v1553 + 7);
  *((_QWORD *)v79 + 6) = v75;
  *((_QWORD *)v79 + 7) = v81;
  v79[71] = v76;
  v1553[0] = 0;
  *(void **)((char *)v1553 + 7) = 0;
  *(_OWORD *)(v79 + 72) = v80;
  v1324[1] = 0;
  v1324[0] = 0;
  v82 = (_QWORD *)operator new();
  *v82 = &off_24EC38E58;
  v82[1] = v69;
  v82[2] = v68;
  v1566[1] = 0;
  v1566[0] = 0;
  *((_QWORD *)v79 + 18) = 0;
  *((_QWORD *)v79 + 11) = v82;
  *((_QWORD *)v79 + 12) = v79 + 96;
  *((_QWORD *)v79 + 13) = v79 + 96;
  *((_QWORD *)v79 + 14) = 0;
  *((_QWORD *)v79 + 15) = v79 + 120;
  *((_QWORD *)v79 + 16) = v79 + 120;
  *((_QWORD *)v79 + 17) = 0;
  if (!*((_QWORD *)v79 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v83 = (std::__shared_weak_count *)operator new();
  v83->__shared_owners_ = 0;
  v84 = (unint64_t *)&v83->__shared_owners_;
  v83->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC392F8;
  v83->__shared_weak_owners_ = 0;
  v83[1].__vftable = (std::__shared_weak_count_vtbl *)v79;
  v85 = (std::__shared_weak_count *)*((_QWORD *)v79 + 5);
  if (v85)
  {
    if (v85->__shared_owners_ != -1)
      goto LABEL_138;
    do
      v86 = __ldxr(v84);
    while (__stxr(v86 + 1, v84));
    v87 = (unint64_t *)&v83->__shared_weak_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
    *((_QWORD *)v79 + 4) = v79;
    *((_QWORD *)v79 + 5) = v83;
    std::__shared_weak_count::__release_weak(v85);
  }
  else
  {
    do
      v89 = __ldxr(v84);
    while (__stxr(v89 + 1, v84));
    v90 = (unint64_t *)&v83->__shared_weak_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    *((_QWORD *)v79 + 4) = v79;
    *((_QWORD *)v79 + 5) = v83;
  }
  do
    v92 = __ldaxr(v84);
  while (__stlxr(v92 - 1, v84));
  if (!v92)
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
  }
LABEL_138:
  if (v1324[1])
  {
    v93 = (unint64_t *)((char *)v1324[1] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      (*(void (**)(void *))(*(_QWORD *)v1324[1] + 16))(v1324[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1324[1]);
    }
  }
  v1324[0] = v79;
  v1324[1] = v83;
  if (v1307[1])
  {
    v95 = (unint64_t *)((char *)v1307[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      (*(void (**)(void *))(*(_QWORD *)v1307[1] + 16))(v1307[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1307[1]);
    }
  }
  v97 = *(_OWORD *)v1293;
  v1293[0] = 0;
  v1293[1] = 0;
  *(_OWORD *)&v1405[1] = *(_OWORD *)__p;
  v1405[0] = &off_24EC37BD8;
  v1406 = __p[2];
  memset(__p, 0, sizeof(__p));
  v1407 = *(_OWORD *)__dst;
  v98 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v1409 = v97;
  v1307[1] = 0;
  v1307[0] = 0;
  v99 = v1324[0];
  v100 = (char *)v1324[1];
  v1408 = v98;
  v1410 = *(_OWORD *)v1324;
  v1324[0] = 0;
  v1324[1] = 0;
  if (*((_QWORD *)&v1410 + 1))
  {
    v101 = (unint64_t *)(v100 + 16);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  v1411 = &off_24EC37C08;
  v103 = (_QWORD *)operator new();
  *v103 = &off_24EC39348;
  v103[1] = v99;
  v103[2] = v100;
  *(_QWORD *)&v1412 = v103;
  v105 = *((_QWORD *)&v1410 + 1);
  v104 = v1410;
  if (!*((_QWORD *)&v1410 + 1))
  {
    *((_QWORD *)&v1412 + 1) = v1410;
    v1413 = 0;
    if ((_QWORD)v1410)
      v109 = v1410 + 16;
    else
      v109 = 0;
    goto LABEL_168;
  }
  v106 = (unint64_t *)(*((_QWORD *)&v1410 + 1) + 16);
  do
    v107 = __ldxr(v106);
  while (__stxr(v107 + 1, v106));
  v108 = *((_QWORD *)&v1410 + 1);
  *((_QWORD *)&v1412 + 1) = v104;
  v1413 = v105;
  if ((_QWORD)v1410)
    v109 = v1410 + 16;
  else
    v109 = 0;
  if (!*((_QWORD *)&v1410 + 1))
  {
    v104 = v1410;
LABEL_168:
    v112 = 0;
    v1414 = &off_24EC37BA0;
    v1415 = v109;
    goto LABEL_169;
  }
  v110 = (unint64_t *)(*((_QWORD *)&v1410 + 1) + 16);
  do
    v111 = __ldxr(v110);
  while (__stxr(v111 + 1, v110));
  v112 = *((_QWORD *)&v1410 + 1);
  v104 = v1410;
  v1414 = &off_24EC37BA0;
  *(_QWORD *)&v1415 = v109;
  *((_QWORD *)&v1415 + 1) = v108;
  if (*((_QWORD *)&v1410 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v1410 + 1) + 16);
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
LABEL_169:
  if (v104)
    v115 = v104 + 24;
  else
    v115 = 0;
  v1416 = &off_24EC2E850;
  *(_QWORD *)&v1417 = v115;
  *((_QWORD *)&v1417 + 1) = v112;
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_174;
LABEL_177:
    operator delete(__p[0]);
    v116 = (std::__shared_weak_count *)v1566[1];
    if (!v1566[1])
      goto LABEL_182;
    goto LABEL_178;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_177;
LABEL_174:
  v116 = (std::__shared_weak_count *)v1566[1];
  if (!v1566[1])
    goto LABEL_182;
LABEL_178:
  v117 = (unint64_t *)&v116->__shared_owners_;
  do
    v118 = __ldaxr(v117);
  while (__stlxr(v118 - 1, v117));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
  if (!v1293[1])
    goto LABEL_186;
LABEL_182:
  v119 = (unint64_t *)((char *)v1293[1] + 8);
  do
    v120 = __ldaxr(v119);
  while (__stlxr(v120 - 1, v119));
  if (!v120)
  {
    (*(void (**)(void *))(*(_QWORD *)v1293[1] + 16))(v1293[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1293[1]);
    if ((SHIBYTE(v1341[2]) & 0x80000000) == 0)
    {
LABEL_187:
      if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
        goto LABEL_188;
LABEL_192:
      operator delete(__src[0]);
      if (v1401)
        goto LABEL_194;
      goto LABEL_193;
    }
  }
  else
  {
LABEL_186:
    if ((SHIBYTE(v1341[2]) & 0x80000000) == 0)
      goto LABEL_187;
  }
  operator delete(v1341[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_192;
LABEL_188:
  if (v1401)
    goto LABEL_194;
LABEL_193:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_194:
  v122 = *(void **)v4;
  v121 = *(unint64_t **)(v4 + 8);
  v1386 = *(void **)v4;
  v1387 = (std::__shared_weak_count *)v121;
  if (v121)
  {
    v123 = v121 + 1;
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  v125 = *v2;
  v126 = (unint64_t *)v2[1];
  if (*v2)
    v127 = *v2 + 112;
  else
    v127 = 0;
  v1384 = v127;
  v1385 = (std::__shared_weak_count *)v126;
  if (v126)
  {
    v128 = v126 + 1;
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
  }
  if (*(char *)(v127 + 31) < 0)
  {
    sub_223197FA4(v1341, *(void **)(v127 + 8), *(_QWORD *)(v127 + 16));
  }
  else
  {
    v130 = *(_OWORD *)(v127 + 8);
    v1341[2] = *(void **)(v127 + 24);
    *(_OWORD *)v1341 = v130;
  }
  if (*(char *)(v125 + 167) < 0)
  {
    sub_223197FA4(v1324, *(void **)(v125 + 144), *(_QWORD *)(v125 + 152));
  }
  else
  {
    *(_OWORD *)v1324 = *(_OWORD *)(v125 + 144);
    v1324[2] = *(void **)(v125 + 160);
  }
  v1566[0] = v122;
  v1566[1] = v121;
  v1387 = 0;
  v1386 = 0;
  v1553[0] = (void *)v127;
  v1553[1] = v126;
  if (v126)
  {
    v131 = v126 + 1;
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  if (SHIBYTE(v1341[2]) < 0)
  {
    sub_223197FA4(__dst, v1341[0], (unint64_t)v1341[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v1341;
    __dst[2] = v1341[2];
  }
  if (SHIBYTE(v1324[2]) < 0)
  {
    sub_223197FA4(__src, v1324[0], (unint64_t)v1324[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v1324;
    __src[2] = v1324[2];
  }
  *(void **)((char *)v1514 + 7) = *(void **)((char *)&v1341[1] + 7);
  v133 = v1341[0];
  v1514[0] = v1341[1];
  v134 = HIBYTE(v1341[2]);
  memset(v1341, 0, sizeof(v1341));
  v1527[0] = v1514[0];
  *(void **)((char *)v1527 + 7) = *(void **)((char *)v1514 + 7);
  *(void **)((char *)v1514 + 7) = 0;
  v1514[0] = 0;
  v1293[0] = v122;
  v1293[1] = v121;
  if (v121)
  {
    v135 = v121 + 1;
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
  }
  v137 = (char *)operator new();
  v1540[0] = v1527[0];
  *(void **)((char *)v1540 + 7) = *(void **)((char *)v1527 + 7);
  v1527[0] = 0;
  *(void **)((char *)v1527 + 7) = 0;
  v138 = *(_OWORD *)v1293;
  v1293[0] = 0;
  v1293[1] = 0;
  v137[8] = 1;
  *((_QWORD *)v137 + 4) = 0;
  *((_QWORD *)v137 + 5) = 0;
  *(_QWORD *)v137 = &off_24EC393C0;
  *((_QWORD *)v137 + 2) = &unk_24EC39438;
  *((_QWORD *)v137 + 3) = &unk_24EC39478;
  v139 = v1540[0];
  *(void **)(v137 + 63) = *(void **)((char *)v1540 + 7);
  *((_QWORD *)v137 + 6) = v133;
  *((_QWORD *)v137 + 7) = v139;
  v137[71] = v134;
  v1540[0] = 0;
  *(void **)((char *)v1540 + 7) = 0;
  *(_OWORD *)(v137 + 72) = v138;
  v1307[1] = 0;
  v1307[0] = 0;
  v140 = (_QWORD *)operator new();
  *v140 = &off_24EC39560;
  v140[1] = v127;
  v140[2] = v126;
  v1553[1] = 0;
  v1553[0] = 0;
  *((_QWORD *)v137 + 18) = 0;
  *((_QWORD *)v137 + 11) = v140;
  *((_QWORD *)v137 + 12) = v137 + 96;
  *((_QWORD *)v137 + 13) = v137 + 96;
  *((_QWORD *)v137 + 14) = 0;
  *((_QWORD *)v137 + 15) = v137 + 120;
  *((_QWORD *)v137 + 16) = v137 + 120;
  *((_QWORD *)v137 + 17) = 0;
  if (!*((_QWORD *)v137 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v141 = (std::__shared_weak_count *)operator new();
  v141->__shared_owners_ = 0;
  v142 = (unint64_t *)&v141->__shared_owners_;
  v141->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC39A00;
  v141->__shared_weak_owners_ = 0;
  v141[1].__vftable = (std::__shared_weak_count_vtbl *)v137;
  v143 = (std::__shared_weak_count *)*((_QWORD *)v137 + 5);
  if (v143)
  {
    if (v143->__shared_owners_ != -1)
      goto LABEL_236;
    do
      v144 = __ldxr(v142);
    while (__stxr(v144 + 1, v142));
    v145 = (unint64_t *)&v141->__shared_weak_owners_;
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
    *((_QWORD *)v137 + 4) = v137;
    *((_QWORD *)v137 + 5) = v141;
    std::__shared_weak_count::__release_weak(v143);
  }
  else
  {
    do
      v147 = __ldxr(v142);
    while (__stxr(v147 + 1, v142));
    v148 = (unint64_t *)&v141->__shared_weak_owners_;
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
    *((_QWORD *)v137 + 4) = v137;
    *((_QWORD *)v137 + 5) = v141;
  }
  do
    v150 = __ldaxr(v142);
  while (__stlxr(v150 - 1, v142));
  if (!v150)
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
  }
LABEL_236:
  if (v1307[1])
  {
    v151 = (unint64_t *)((char *)v1307[1] + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      (*(void (**)(void *))(*(_QWORD *)v1307[1] + 16))(v1307[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1307[1]);
    }
  }
  v1307[0] = v137;
  v1307[1] = v141;
  if (v1293[1])
  {
    v153 = (unint64_t *)((char *)v1293[1] + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      (*(void (**)(void *))(*(_QWORD *)v1293[1] + 16))(v1293[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1293[1]);
    }
  }
  v155 = *(_OWORD *)v1566;
  v1566[0] = 0;
  v1566[1] = 0;
  *(_OWORD *)&__p[1] = *(_OWORD *)__dst;
  __p[0] = &off_24EC37C40;
  v1389 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v1390 = *(_OWORD *)__src;
  v156 = __src[2];
  memset(__src, 0, sizeof(__src));
  v1392 = v155;
  v1293[1] = 0;
  v1293[0] = 0;
  v157 = v1307[0];
  v158 = (char *)v1307[1];
  v1391 = v156;
  v1393 = *(_OWORD *)v1307;
  v1307[0] = 0;
  v1307[1] = 0;
  if (*((_QWORD *)&v1393 + 1))
  {
    v159 = (unint64_t *)(v158 + 16);
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 1, v159));
  }
  v1394 = &off_24EC37C70;
  v161 = (_QWORD *)operator new();
  *v161 = &off_24EC39A50;
  v161[1] = v157;
  v161[2] = v158;
  *(_QWORD *)&v1395 = v161;
  v163 = *((_QWORD *)&v1393 + 1);
  v162 = v1393;
  if (!*((_QWORD *)&v1393 + 1))
  {
    *((_QWORD *)&v1395 + 1) = v1393;
    v1396 = 0;
    if ((_QWORD)v1393)
      v167 = v1393 + 16;
    else
      v167 = 0;
    goto LABEL_266;
  }
  v164 = (unint64_t *)(*((_QWORD *)&v1393 + 1) + 16);
  do
    v165 = __ldxr(v164);
  while (__stxr(v165 + 1, v164));
  v166 = *((_QWORD *)&v1393 + 1);
  *((_QWORD *)&v1395 + 1) = v162;
  v1396 = v163;
  if ((_QWORD)v1393)
    v167 = v1393 + 16;
  else
    v167 = 0;
  if (!*((_QWORD *)&v1393 + 1))
  {
    v162 = v1393;
LABEL_266:
    v170 = 0;
    v1397 = &off_24EC2E888;
    v1398 = v167;
    goto LABEL_267;
  }
  v168 = (unint64_t *)(*((_QWORD *)&v1393 + 1) + 16);
  do
    v169 = __ldxr(v168);
  while (__stxr(v169 + 1, v168));
  v170 = *((_QWORD *)&v1393 + 1);
  v162 = v1393;
  v1397 = &off_24EC2E888;
  *(_QWORD *)&v1398 = v167;
  *((_QWORD *)&v1398 + 1) = v166;
  if (*((_QWORD *)&v1393 + 1))
  {
    v171 = (unint64_t *)(*((_QWORD *)&v1393 + 1) + 16);
    do
      v172 = __ldxr(v171);
    while (__stxr(v172 + 1, v171));
  }
LABEL_267:
  if (v162)
    v173 = v162 + 24;
  else
    v173 = 0;
  v1399 = &off_24EC2E850;
  *(_QWORD *)&v1400 = v173;
  *((_QWORD *)&v1400 + 1) = v170;
  if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_272;
LABEL_275:
    operator delete(__dst[0]);
    v174 = (std::__shared_weak_count *)v1553[1];
    if (!v1553[1])
      goto LABEL_280;
    goto LABEL_276;
  }
  operator delete(__src[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_275;
LABEL_272:
  v174 = (std::__shared_weak_count *)v1553[1];
  if (!v1553[1])
    goto LABEL_280;
LABEL_276:
  v175 = (unint64_t *)&v174->__shared_owners_;
  do
    v176 = __ldaxr(v175);
  while (__stlxr(v176 - 1, v175));
  if (!v176)
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
  }
LABEL_280:
  v177 = (std::__shared_weak_count *)v1566[1];
  if (!v1566[1])
    goto LABEL_284;
  v178 = (unint64_t *)((char *)v1566[1] + 8);
  do
    v179 = __ldaxr(v178);
  while (__stlxr(v179 - 1, v178));
  if (!v179)
  {
    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
    std::__shared_weak_count::__release_weak(v177);
    if ((SHIBYTE(v1324[2]) & 0x80000000) == 0)
    {
LABEL_285:
      if ((SHIBYTE(v1341[2]) & 0x80000000) == 0)
        goto LABEL_286;
LABEL_290:
      operator delete(v1341[0]);
      if (v1384)
        goto LABEL_292;
      goto LABEL_291;
    }
  }
  else
  {
LABEL_284:
    if ((SHIBYTE(v1324[2]) & 0x80000000) == 0)
      goto LABEL_285;
  }
  operator delete(v1324[0]);
  if (SHIBYTE(v1341[2]) < 0)
    goto LABEL_290;
LABEL_286:
  if (v1384)
    goto LABEL_292;
LABEL_291:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_292:
  v181 = *(void **)v4;
  v180 = *(unint64_t **)(v4 + 8);
  v1369 = *(void **)v4;
  v1370 = (std::__shared_weak_count *)v180;
  if (v180)
  {
    v182 = v180 + 1;
    do
      v183 = __ldxr(v182);
    while (__stxr(v183 + 1, v182));
  }
  v184 = *v2;
  v185 = (unint64_t *)v2[1];
  if (*v2)
    v186 = *v2 + 168;
  else
    v186 = 0;
  v1367 = v186;
  v1368 = (std::__shared_weak_count *)v185;
  if (v185)
  {
    v187 = v185 + 1;
    do
      v188 = __ldxr(v187);
    while (__stxr(v188 + 1, v187));
  }
  if (*(char *)(v186 + 31) < 0)
  {
    sub_223197FA4(v1324, *(void **)(v186 + 8), *(_QWORD *)(v186 + 16));
  }
  else
  {
    v189 = *(_OWORD *)(v186 + 8);
    v1324[2] = *(void **)(v186 + 24);
    *(_OWORD *)v1324 = v189;
  }
  if (*(char *)(v184 + 223) < 0)
  {
    sub_223197FA4(v1307, *(void **)(v184 + 200), *(_QWORD *)(v184 + 208));
  }
  else
  {
    *(_OWORD *)v1307 = *(_OWORD *)(v184 + 200);
    v1307[2] = *(void **)(v184 + 216);
  }
  v1553[0] = v181;
  v1553[1] = v180;
  v1370 = 0;
  v1369 = 0;
  v1540[0] = (void *)v186;
  v1540[1] = v185;
  if (v185)
  {
    v190 = v185 + 1;
    do
      v191 = __ldxr(v190);
    while (__stxr(v191 + 1, v190));
  }
  if (SHIBYTE(v1324[2]) < 0)
  {
    sub_223197FA4(__src, v1324[0], (unint64_t)v1324[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v1324;
    __src[2] = v1324[2];
  }
  if (SHIBYTE(v1307[2]) < 0)
  {
    sub_223197FA4(v1341, v1307[0], (unint64_t)v1307[1]);
  }
  else
  {
    *(_OWORD *)v1341 = *(_OWORD *)v1307;
    v1341[2] = v1307[2];
  }
  *(void **)((char *)v1501 + 7) = *(void **)((char *)&v1324[1] + 7);
  v192 = v1324[0];
  v1501[0] = v1324[1];
  v193 = HIBYTE(v1324[2]);
  memset(v1324, 0, sizeof(v1324));
  v1514[0] = v1501[0];
  *(void **)((char *)v1514 + 7) = *(void **)((char *)v1501 + 7);
  *(void **)((char *)v1501 + 7) = 0;
  v1501[0] = 0;
  v1566[0] = v181;
  v1566[1] = v180;
  if (v180)
  {
    v194 = v180 + 1;
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
  }
  v196 = (char *)operator new();
  v1527[0] = v1514[0];
  *(void **)((char *)v1527 + 7) = *(void **)((char *)v1514 + 7);
  v1514[0] = 0;
  *(void **)((char *)v1514 + 7) = 0;
  v197 = *(_OWORD *)v1566;
  v1566[0] = 0;
  v1566[1] = 0;
  v196[8] = 1;
  *((_QWORD *)v196 + 4) = 0;
  *((_QWORD *)v196 + 5) = 0;
  *(_QWORD *)v196 = &off_24EC39AC8;
  *((_QWORD *)v196 + 2) = &unk_24EC39B40;
  *((_QWORD *)v196 + 3) = &unk_24EC39B80;
  v198 = v1527[0];
  *(void **)(v196 + 63) = *(void **)((char *)v1527 + 7);
  *((_QWORD *)v196 + 6) = v192;
  *((_QWORD *)v196 + 7) = v198;
  v196[71] = v193;
  v1527[0] = 0;
  *(void **)((char *)v1527 + 7) = 0;
  *(_OWORD *)(v196 + 72) = v197;
  v1293[1] = 0;
  v1293[0] = 0;
  v199 = (_QWORD *)operator new();
  *v199 = &off_24EC39C68;
  v199[1] = v186;
  v199[2] = v185;
  v1540[1] = 0;
  v1540[0] = 0;
  *((_QWORD *)v196 + 18) = 0;
  *((_QWORD *)v196 + 11) = v199;
  *((_QWORD *)v196 + 12) = v196 + 96;
  *((_QWORD *)v196 + 13) = v196 + 96;
  *((_QWORD *)v196 + 14) = 0;
  *((_QWORD *)v196 + 15) = v196 + 120;
  *((_QWORD *)v196 + 16) = v196 + 120;
  *((_QWORD *)v196 + 17) = 0;
  if (!*((_QWORD *)v196 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v200 = (std::__shared_weak_count *)operator new();
  v200->__shared_owners_ = 0;
  v201 = (unint64_t *)&v200->__shared_owners_;
  v200->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3A108;
  v200->__shared_weak_owners_ = 0;
  v200[1].__vftable = (std::__shared_weak_count_vtbl *)v196;
  v202 = (std::__shared_weak_count *)*((_QWORD *)v196 + 5);
  if (v202)
  {
    if (v202->__shared_owners_ != -1)
      goto LABEL_334;
    do
      v203 = __ldxr(v201);
    while (__stxr(v203 + 1, v201));
    v204 = (unint64_t *)&v200->__shared_weak_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
    *((_QWORD *)v196 + 4) = v196;
    *((_QWORD *)v196 + 5) = v200;
    std::__shared_weak_count::__release_weak(v202);
  }
  else
  {
    do
      v206 = __ldxr(v201);
    while (__stxr(v206 + 1, v201));
    v207 = (unint64_t *)&v200->__shared_weak_owners_;
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 1, v207));
    *((_QWORD *)v196 + 4) = v196;
    *((_QWORD *)v196 + 5) = v200;
  }
  do
    v209 = __ldaxr(v201);
  while (__stlxr(v209 - 1, v201));
  if (!v209)
  {
    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
    std::__shared_weak_count::__release_weak(v200);
  }
LABEL_334:
  if (v1293[1])
  {
    v210 = (unint64_t *)((char *)v1293[1] + 8);
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      (*(void (**)(void *))(*(_QWORD *)v1293[1] + 16))(v1293[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1293[1]);
    }
  }
  v1293[0] = v196;
  v1293[1] = v200;
  v212 = (std::__shared_weak_count *)v1566[1];
  if (v1566[1])
  {
    v213 = (unint64_t *)((char *)v1566[1] + 8);
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = *(_OWORD *)v1553;
  v1553[0] = 0;
  v1553[1] = 0;
  *(_OWORD *)&__dst[1] = *(_OWORD *)__src;
  __dst[0] = &off_24EC37CA8;
  v1372 = __src[2];
  memset(__src, 0, sizeof(__src));
  v1373 = *(_OWORD *)v1341;
  v216 = v1341[2];
  memset(v1341, 0, sizeof(v1341));
  v1375 = v215;
  v1566[1] = 0;
  v1566[0] = 0;
  v217 = v1293[0];
  v218 = (char *)v1293[1];
  v1374 = v216;
  v1376 = *(_OWORD *)v1293;
  v1293[0] = 0;
  v1293[1] = 0;
  if (*((_QWORD *)&v1376 + 1))
  {
    v219 = (unint64_t *)(v218 + 16);
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 1, v219));
  }
  v1377 = &off_24EC37CD8;
  v221 = (_QWORD *)operator new();
  *v221 = &off_24EC3A158;
  v221[1] = v217;
  v221[2] = v218;
  *(_QWORD *)&v1378 = v221;
  v223 = *((_QWORD *)&v1376 + 1);
  v222 = v1376;
  if (!*((_QWORD *)&v1376 + 1))
  {
    *((_QWORD *)&v1378 + 1) = v1376;
    v1379 = 0;
    if ((_QWORD)v1376)
      v227 = v1376 + 16;
    else
      v227 = 0;
    goto LABEL_364;
  }
  v224 = (unint64_t *)(*((_QWORD *)&v1376 + 1) + 16);
  do
    v225 = __ldxr(v224);
  while (__stxr(v225 + 1, v224));
  v226 = *((_QWORD *)&v1376 + 1);
  *((_QWORD *)&v1378 + 1) = v222;
  v1379 = v223;
  if ((_QWORD)v1376)
    v227 = v1376 + 16;
  else
    v227 = 0;
  if (!*((_QWORD *)&v1376 + 1))
  {
    v222 = v1376;
LABEL_364:
    v230 = 0;
    v1380 = &off_24EC2E888;
    v1381 = v227;
    goto LABEL_365;
  }
  v228 = (unint64_t *)(*((_QWORD *)&v1376 + 1) + 16);
  do
    v229 = __ldxr(v228);
  while (__stxr(v229 + 1, v228));
  v230 = *((_QWORD *)&v1376 + 1);
  v222 = v1376;
  v1380 = &off_24EC2E888;
  *(_QWORD *)&v1381 = v227;
  *((_QWORD *)&v1381 + 1) = v226;
  if (*((_QWORD *)&v1376 + 1))
  {
    v231 = (unint64_t *)(*((_QWORD *)&v1376 + 1) + 16);
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
  }
LABEL_365:
  if (v222)
    v233 = v222 + 24;
  else
    v233 = 0;
  v1382 = &off_24EC2E850;
  *(_QWORD *)&v1383 = v233;
  *((_QWORD *)&v1383 + 1) = v230;
  if ((SHIBYTE(v1341[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_370;
LABEL_373:
    operator delete(__src[0]);
    v234 = (std::__shared_weak_count *)v1540[1];
    if (!v1540[1])
      goto LABEL_378;
    goto LABEL_374;
  }
  operator delete(v1341[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_373;
LABEL_370:
  v234 = (std::__shared_weak_count *)v1540[1];
  if (!v1540[1])
    goto LABEL_378;
LABEL_374:
  v235 = (unint64_t *)&v234->__shared_owners_;
  do
    v236 = __ldaxr(v235);
  while (__stlxr(v236 - 1, v235));
  if (!v236)
  {
    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
    std::__shared_weak_count::__release_weak(v234);
  }
LABEL_378:
  v237 = (std::__shared_weak_count *)v1553[1];
  if (!v1553[1])
    goto LABEL_382;
  v238 = (unint64_t *)((char *)v1553[1] + 8);
  do
    v239 = __ldaxr(v238);
  while (__stlxr(v239 - 1, v238));
  if (!v239)
  {
    ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
    std::__shared_weak_count::__release_weak(v237);
    if ((SHIBYTE(v1307[2]) & 0x80000000) == 0)
    {
LABEL_383:
      if ((SHIBYTE(v1324[2]) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_388:
      operator delete(v1324[0]);
      if (v1367)
        goto LABEL_390;
      goto LABEL_389;
    }
  }
  else
  {
LABEL_382:
    if ((SHIBYTE(v1307[2]) & 0x80000000) == 0)
      goto LABEL_383;
  }
  operator delete(v1307[0]);
  if (SHIBYTE(v1324[2]) < 0)
    goto LABEL_388;
LABEL_384:
  if (v1367)
    goto LABEL_390;
LABEL_389:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_390:
  v240 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)&v1356 = *(_QWORD *)v4;
  *((_QWORD *)&v1356 + 1) = v240;
  if (v240)
  {
    v241 = (unint64_t *)(v240 + 8);
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  v243 = (std::__shared_weak_count *)v2[1];
  if (*v2)
    v244 = *v2 + 224;
  else
    v244 = 0;
  v1354 = v244;
  v1355 = v243;
  if (v243)
  {
    v245 = (unint64_t *)&v243->__shared_owners_;
    do
      v246 = __ldxr(v245);
    while (__stxr(v246 + 1, v245));
  }
  sub_223491334((uint64_t)__src, &v1356, &v1354);
  v248 = *(void **)v4;
  v247 = *(unint64_t **)(v4 + 8);
  v1339 = *(void **)v4;
  v1340 = (std::__shared_weak_count *)v247;
  if (v247)
  {
    v249 = v247 + 1;
    do
      v250 = __ldxr(v249);
    while (__stxr(v250 + 1, v249));
  }
  v251 = *v2;
  v252 = (unint64_t *)v2[1];
  if (*v2)
    v253 = *v2 + 280;
  else
    v253 = 0;
  v1337 = v253;
  v1338 = (std::__shared_weak_count *)v252;
  if (v252)
  {
    v254 = v252 + 1;
    do
      v255 = __ldxr(v254);
    while (__stxr(v255 + 1, v254));
  }
  if (*(char *)(v253 + 31) < 0)
  {
    sub_223197FA4(v1293, *(void **)(v253 + 8), *(_QWORD *)(v253 + 16));
  }
  else
  {
    v256 = *(_OWORD *)(v253 + 8);
    v1293[2] = *(void **)(v253 + 24);
    *(_OWORD *)v1293 = v256;
  }
  if (*(char *)(v251 + 335) < 0)
  {
    sub_223197FA4(v1566, *(void **)(v251 + 312), *(_QWORD *)(v251 + 320));
  }
  else
  {
    *(_OWORD *)v1566 = *(_OWORD *)(v251 + 312);
    v1566[2] = *(void **)(v251 + 328);
  }
  v1527[0] = v248;
  v1527[1] = v247;
  v1340 = 0;
  v1339 = 0;
  v1514[0] = (void *)v253;
  v1514[1] = v252;
  if (v252)
  {
    v257 = v252 + 1;
    do
      v258 = __ldxr(v257);
    while (__stxr(v258 + 1, v257));
  }
  if (SHIBYTE(v1293[2]) < 0)
  {
    sub_223197FA4(v1324, v1293[0], (unint64_t)v1293[1]);
  }
  else
  {
    *(_OWORD *)v1324 = *(_OWORD *)v1293;
    v1324[2] = v1293[2];
  }
  if (SHIBYTE(v1566[2]) < 0)
  {
    sub_223197FA4(v1307, v1566[0], (unint64_t)v1566[1]);
  }
  else
  {
    *(_OWORD *)v1307 = *(_OWORD *)v1566;
    v1307[2] = v1566[2];
  }
  *(void **)((char *)v1475 + 7) = *(void **)((char *)&v1293[1] + 7);
  v259 = v1293[0];
  v1475[0] = v1293[1];
  v260 = HIBYTE(v1293[2]);
  memset(v1293, 0, sizeof(v1293));
  v1488[0] = v1475[0];
  *(void **)((char *)v1488 + 7) = *(void **)((char *)v1475 + 7);
  *(void **)((char *)v1475 + 7) = 0;
  v1475[0] = 0;
  v1540[0] = v248;
  v1540[1] = v247;
  if (v247)
  {
    v261 = v247 + 1;
    do
      v262 = __ldxr(v261);
    while (__stxr(v262 + 1, v261));
  }
  v263 = (char *)operator new();
  v1501[0] = v1488[0];
  *(void **)((char *)v1501 + 7) = *(void **)((char *)v1488 + 7);
  v1488[0] = 0;
  *(void **)((char *)v1488 + 7) = 0;
  v264 = *(_OWORD *)v1540;
  v1540[0] = 0;
  v1540[1] = 0;
  v263[8] = 1;
  *((_QWORD *)v263 + 4) = 0;
  *((_QWORD *)v263 + 5) = 0;
  *(_QWORD *)v263 = &off_24EC3A8D8;
  *((_QWORD *)v263 + 2) = &unk_24EC3A950;
  *((_QWORD *)v263 + 3) = &unk_24EC3A990;
  v265 = v1501[0];
  *(void **)(v263 + 63) = *(void **)((char *)v1501 + 7);
  *((_QWORD *)v263 + 6) = v259;
  *((_QWORD *)v263 + 7) = v265;
  v263[71] = v260;
  v1501[0] = 0;
  *(void **)((char *)v1501 + 7) = 0;
  *(_OWORD *)(v263 + 72) = v264;
  v1553[1] = 0;
  v1553[0] = 0;
  v266 = (_QWORD *)operator new();
  *v266 = &off_24EC3AA88;
  v266[1] = v253;
  v266[2] = v252;
  v1514[1] = 0;
  v1514[0] = 0;
  *((_QWORD *)v263 + 18) = 0;
  *((_QWORD *)v263 + 11) = v266;
  *((_QWORD *)v263 + 12) = v263 + 96;
  *((_QWORD *)v263 + 13) = v263 + 96;
  *((_QWORD *)v263 + 14) = 0;
  *((_QWORD *)v263 + 15) = v263 + 120;
  *((_QWORD *)v263 + 16) = v263 + 120;
  *((_QWORD *)v263 + 17) = 0;
  if (!*((_QWORD *)v263 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v267 = (std::__shared_weak_count *)operator new();
  v267->__shared_owners_ = 0;
  v268 = (unint64_t *)&v267->__shared_owners_;
  v267->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3AF78;
  v267->__shared_weak_owners_ = 0;
  v267[1].__vftable = (std::__shared_weak_count_vtbl *)v263;
  v269 = (std::__shared_weak_count *)*((_QWORD *)v263 + 5);
  if (v269)
  {
    if (v269->__shared_owners_ != -1)
      goto LABEL_441;
    do
      v270 = __ldxr(v268);
    while (__stxr(v270 + 1, v268));
    v271 = (unint64_t *)&v267->__shared_weak_owners_;
    do
      v272 = __ldxr(v271);
    while (__stxr(v272 + 1, v271));
    *((_QWORD *)v263 + 4) = v263;
    *((_QWORD *)v263 + 5) = v267;
    std::__shared_weak_count::__release_weak(v269);
  }
  else
  {
    do
      v273 = __ldxr(v268);
    while (__stxr(v273 + 1, v268));
    v274 = (unint64_t *)&v267->__shared_weak_owners_;
    do
      v275 = __ldxr(v274);
    while (__stxr(v275 + 1, v274));
    *((_QWORD *)v263 + 4) = v263;
    *((_QWORD *)v263 + 5) = v267;
  }
  do
    v276 = __ldaxr(v268);
  while (__stlxr(v276 - 1, v268));
  if (!v276)
  {
    ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
    std::__shared_weak_count::__release_weak(v267);
  }
LABEL_441:
  v277 = (std::__shared_weak_count *)v1553[1];
  if (v1553[1])
  {
    v278 = (unint64_t *)((char *)v1553[1] + 8);
    do
      v279 = __ldaxr(v278);
    while (__stlxr(v279 - 1, v278));
    if (!v279)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  v1553[0] = v263;
  v1553[1] = v267;
  v280 = (std::__shared_weak_count *)v1540[1];
  if (v1540[1])
  {
    v281 = (unint64_t *)((char *)v1540[1] + 8);
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  v283 = *(_OWORD *)v1527;
  v1527[0] = 0;
  v1527[1] = 0;
  *(_OWORD *)&v1341[1] = *(_OWORD *)v1324;
  v1341[0] = &off_24EC37D78;
  v1342 = v1324[2];
  memset(v1324, 0, sizeof(v1324));
  v1343 = *(_OWORD *)v1307;
  v284 = v1307[2];
  memset(v1307, 0, sizeof(v1307));
  v1345 = v283;
  v1540[1] = 0;
  v1540[0] = 0;
  v285 = v1553[0];
  v286 = (char *)v1553[1];
  v1344 = v284;
  v1346 = *(_OWORD *)v1553;
  v1553[0] = 0;
  v1553[1] = 0;
  if (*((_QWORD *)&v1346 + 1))
  {
    v287 = (unint64_t *)(v286 + 16);
    do
      v288 = __ldxr(v287);
    while (__stxr(v288 + 1, v287));
  }
  v1347 = &off_24EC37DA8;
  v289 = (_QWORD *)operator new();
  *v289 = &off_24EC3AFC8;
  v289[1] = v285;
  v289[2] = v286;
  *(_QWORD *)&v1348 = v289;
  v291 = *((_QWORD *)&v1346 + 1);
  v290 = v1346;
  if (!*((_QWORD *)&v1346 + 1))
  {
    *((_QWORD *)&v1348 + 1) = v1346;
    v1349 = 0;
    if ((_QWORD)v1346)
      v295 = v1346 + 16;
    else
      v295 = 0;
    goto LABEL_471;
  }
  v292 = (unint64_t *)(*((_QWORD *)&v1346 + 1) + 16);
  do
    v293 = __ldxr(v292);
  while (__stxr(v293 + 1, v292));
  v294 = *((_QWORD *)&v1346 + 1);
  *((_QWORD *)&v1348 + 1) = v290;
  v1349 = v291;
  if ((_QWORD)v1346)
    v295 = v1346 + 16;
  else
    v295 = 0;
  if (!*((_QWORD *)&v1346 + 1))
  {
    v290 = v1346;
LABEL_471:
    v298 = 0;
    v1350 = &off_24EC37DE0;
    v1351 = v295;
    goto LABEL_472;
  }
  v296 = (unint64_t *)(*((_QWORD *)&v1346 + 1) + 16);
  do
    v297 = __ldxr(v296);
  while (__stxr(v297 + 1, v296));
  v298 = *((_QWORD *)&v1346 + 1);
  v290 = v1346;
  v1350 = &off_24EC37DE0;
  *(_QWORD *)&v1351 = v295;
  *((_QWORD *)&v1351 + 1) = v294;
  if (*((_QWORD *)&v1346 + 1))
  {
    v299 = (unint64_t *)(*((_QWORD *)&v1346 + 1) + 16);
    do
      v300 = __ldxr(v299);
    while (__stxr(v300 + 1, v299));
  }
LABEL_472:
  if (v290)
    v301 = v290 + 24;
  else
    v301 = 0;
  v1352 = &off_24EC2E850;
  *(_QWORD *)&v1353 = v301;
  *((_QWORD *)&v1353 + 1) = v298;
  if ((SHIBYTE(v1307[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1324[2]) & 0x80000000) == 0)
      goto LABEL_477;
LABEL_480:
    operator delete(v1324[0]);
    v302 = (std::__shared_weak_count *)v1514[1];
    if (!v1514[1])
      goto LABEL_485;
    goto LABEL_481;
  }
  operator delete(v1307[0]);
  if (SHIBYTE(v1324[2]) < 0)
    goto LABEL_480;
LABEL_477:
  v302 = (std::__shared_weak_count *)v1514[1];
  if (!v1514[1])
    goto LABEL_485;
LABEL_481:
  v303 = (unint64_t *)&v302->__shared_owners_;
  do
    v304 = __ldaxr(v303);
  while (__stlxr(v304 - 1, v303));
  if (!v304)
  {
    ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
    std::__shared_weak_count::__release_weak(v302);
  }
LABEL_485:
  v305 = (std::__shared_weak_count *)v1527[1];
  if (!v1527[1])
    goto LABEL_489;
  v306 = (unint64_t *)((char *)v1527[1] + 8);
  do
    v307 = __ldaxr(v306);
  while (__stlxr(v307 - 1, v306));
  if (!v307)
  {
    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
    std::__shared_weak_count::__release_weak(v305);
    if ((SHIBYTE(v1566[2]) & 0x80000000) == 0)
    {
LABEL_490:
      if ((SHIBYTE(v1293[2]) & 0x80000000) == 0)
        goto LABEL_491;
LABEL_495:
      operator delete(v1293[0]);
      if (v1337)
        goto LABEL_497;
      goto LABEL_496;
    }
  }
  else
  {
LABEL_489:
    if ((SHIBYTE(v1566[2]) & 0x80000000) == 0)
      goto LABEL_490;
  }
  operator delete(v1566[0]);
  if (SHIBYTE(v1293[2]) < 0)
    goto LABEL_495;
LABEL_491:
  if (v1337)
    goto LABEL_497;
LABEL_496:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_497:
  v309 = *(void **)v4;
  v308 = *(unint64_t **)(v4 + 8);
  v1322 = *(void **)v4;
  v1323 = (std::__shared_weak_count *)v308;
  if (v308)
  {
    v310 = v308 + 1;
    do
      v311 = __ldxr(v310);
    while (__stxr(v311 + 1, v310));
  }
  v312 = *v2;
  v313 = (unint64_t *)v2[1];
  if (*v2)
    v314 = *v2 + 336;
  else
    v314 = 0;
  v1320 = v314;
  v1321 = (std::__shared_weak_count *)v313;
  if (v313)
  {
    v315 = v313 + 1;
    do
      v316 = __ldxr(v315);
    while (__stxr(v316 + 1, v315));
  }
  if (*(char *)(v314 + 31) < 0)
  {
    sub_223197FA4(v1566, *(void **)(v314 + 8), *(_QWORD *)(v314 + 16));
  }
  else
  {
    v317 = *(_OWORD *)(v314 + 8);
    v1566[2] = *(void **)(v314 + 24);
    *(_OWORD *)v1566 = v317;
  }
  if (*(char *)(v312 + 391) < 0)
  {
    sub_223197FA4(v1553, *(void **)(v312 + 368), *(_QWORD *)(v312 + 376));
  }
  else
  {
    *(_OWORD *)v1553 = *(_OWORD *)(v312 + 368);
    v1553[2] = *(void **)(v312 + 384);
  }
  v1514[0] = v309;
  v1514[1] = v308;
  v1323 = 0;
  v1322 = 0;
  v1501[0] = (void *)v314;
  v1501[1] = v313;
  if (v313)
  {
    v318 = v313 + 1;
    do
      v319 = __ldxr(v318);
    while (__stxr(v319 + 1, v318));
  }
  if (SHIBYTE(v1566[2]) < 0)
  {
    sub_223197FA4(v1307, v1566[0], (unint64_t)v1566[1]);
  }
  else
  {
    *(_OWORD *)v1307 = *(_OWORD *)v1566;
    v1307[2] = v1566[2];
  }
  if (SHIBYTE(v1553[2]) < 0)
  {
    sub_223197FA4(v1293, v1553[0], (unint64_t)v1553[1]);
  }
  else
  {
    *(_OWORD *)v1293 = *(_OWORD *)v1553;
    v1293[2] = v1553[2];
  }
  *(void **)((char *)v1462 + 7) = *(void **)((char *)&v1566[1] + 7);
  v320 = v1566[0];
  v1462[0] = v1566[1];
  v321 = HIBYTE(v1566[2]);
  memset(v1566, 0, sizeof(v1566));
  v1475[0] = v1462[0];
  *(void **)((char *)v1475 + 7) = *(void **)((char *)v1462 + 7);
  *(void **)((char *)v1462 + 7) = 0;
  v1462[0] = 0;
  v1527[0] = v309;
  v1527[1] = v308;
  if (v308)
  {
    v322 = v308 + 1;
    do
      v323 = __ldxr(v322);
    while (__stxr(v323 + 1, v322));
  }
  v324 = (char *)operator new();
  v1488[0] = v1475[0];
  *(void **)((char *)v1488 + 7) = *(void **)((char *)v1475 + 7);
  v1475[0] = 0;
  *(void **)((char *)v1475 + 7) = 0;
  v325 = *(_OWORD *)v1527;
  v1527[0] = 0;
  v1527[1] = 0;
  v324[8] = 1;
  *((_QWORD *)v324 + 4) = 0;
  *((_QWORD *)v324 + 5) = 0;
  *(_QWORD *)v324 = &off_24EC3B040;
  *((_QWORD *)v324 + 2) = &unk_24EC3B0B8;
  *((_QWORD *)v324 + 3) = &unk_24EC3B0F8;
  v326 = v1488[0];
  *(void **)(v324 + 63) = *(void **)((char *)v1488 + 7);
  *((_QWORD *)v324 + 6) = v320;
  *((_QWORD *)v324 + 7) = v326;
  v324[71] = v321;
  v1488[0] = 0;
  *(void **)((char *)v1488 + 7) = 0;
  *(_OWORD *)(v324 + 72) = v325;
  v1540[1] = 0;
  v1540[0] = 0;
  v327 = (_QWORD *)operator new();
  *v327 = &off_24EC3B1E0;
  v327[1] = v314;
  v327[2] = v313;
  v1501[1] = 0;
  v1501[0] = 0;
  *((_QWORD *)v324 + 18) = 0;
  *((_QWORD *)v324 + 11) = v327;
  *((_QWORD *)v324 + 12) = v324 + 96;
  *((_QWORD *)v324 + 13) = v324 + 96;
  *((_QWORD *)v324 + 14) = 0;
  *((_QWORD *)v324 + 15) = v324 + 120;
  *((_QWORD *)v324 + 16) = v324 + 120;
  *((_QWORD *)v324 + 17) = 0;
  if (!*((_QWORD *)v324 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v328 = (std::__shared_weak_count *)operator new();
  v328->__shared_owners_ = 0;
  v329 = (unint64_t *)&v328->__shared_owners_;
  v328->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3B680;
  v328->__shared_weak_owners_ = 0;
  v328[1].__vftable = (std::__shared_weak_count_vtbl *)v324;
  v330 = (std::__shared_weak_count *)*((_QWORD *)v324 + 5);
  if (v330)
  {
    if (v330->__shared_owners_ != -1)
      goto LABEL_539;
    do
      v331 = __ldxr(v329);
    while (__stxr(v331 + 1, v329));
    v332 = (unint64_t *)&v328->__shared_weak_owners_;
    do
      v333 = __ldxr(v332);
    while (__stxr(v333 + 1, v332));
    *((_QWORD *)v324 + 4) = v324;
    *((_QWORD *)v324 + 5) = v328;
    std::__shared_weak_count::__release_weak(v330);
  }
  else
  {
    do
      v334 = __ldxr(v329);
    while (__stxr(v334 + 1, v329));
    v335 = (unint64_t *)&v328->__shared_weak_owners_;
    do
      v336 = __ldxr(v335);
    while (__stxr(v336 + 1, v335));
    *((_QWORD *)v324 + 4) = v324;
    *((_QWORD *)v324 + 5) = v328;
  }
  do
    v337 = __ldaxr(v329);
  while (__stlxr(v337 - 1, v329));
  if (!v337)
  {
    ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
    std::__shared_weak_count::__release_weak(v328);
  }
LABEL_539:
  v338 = (std::__shared_weak_count *)v1540[1];
  if (v1540[1])
  {
    v339 = (unint64_t *)((char *)v1540[1] + 8);
    do
      v340 = __ldaxr(v339);
    while (__stlxr(v340 - 1, v339));
    if (!v340)
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
    }
  }
  v1540[0] = v324;
  v1540[1] = v328;
  v341 = (std::__shared_weak_count *)v1527[1];
  if (v1527[1])
  {
    v342 = (unint64_t *)((char *)v1527[1] + 8);
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
  v344 = *(_OWORD *)v1514;
  v1514[0] = 0;
  v1514[1] = 0;
  *(_OWORD *)&v1324[1] = *(_OWORD *)v1307;
  v1324[0] = &off_24EC37E18;
  v1325 = v1307[2];
  memset(v1307, 0, sizeof(v1307));
  v1326 = *(_OWORD *)v1293;
  v345 = v1293[2];
  memset(v1293, 0, sizeof(v1293));
  v1328 = v344;
  v1527[1] = 0;
  v1527[0] = 0;
  v346 = v1540[0];
  v347 = (char *)v1540[1];
  v1327 = v345;
  v1329 = *(_OWORD *)v1540;
  v1540[0] = 0;
  v1540[1] = 0;
  if (*((_QWORD *)&v1329 + 1))
  {
    v348 = (unint64_t *)(v347 + 16);
    do
      v349 = __ldxr(v348);
    while (__stxr(v349 + 1, v348));
  }
  v1330 = &off_24EC37E48;
  v350 = (_QWORD *)operator new();
  *v350 = &off_24EC3B6D0;
  v350[1] = v346;
  v350[2] = v347;
  *(_QWORD *)&v1331 = v350;
  v352 = *((_QWORD *)&v1329 + 1);
  v351 = v1329;
  if (!*((_QWORD *)&v1329 + 1))
  {
    *((_QWORD *)&v1331 + 1) = v1329;
    v1332 = 0;
    if ((_QWORD)v1329)
      v356 = v1329 + 16;
    else
      v356 = 0;
    goto LABEL_569;
  }
  v353 = (unint64_t *)(*((_QWORD *)&v1329 + 1) + 16);
  do
    v354 = __ldxr(v353);
  while (__stxr(v354 + 1, v353));
  v355 = *((_QWORD *)&v1329 + 1);
  *((_QWORD *)&v1331 + 1) = v351;
  v1332 = v352;
  if ((_QWORD)v1329)
    v356 = v1329 + 16;
  else
    v356 = 0;
  if (!*((_QWORD *)&v1329 + 1))
  {
    v351 = v1329;
LABEL_569:
    v359 = 0;
    v1333 = &off_24EC37DE0;
    v1334 = v356;
    goto LABEL_570;
  }
  v357 = (unint64_t *)(*((_QWORD *)&v1329 + 1) + 16);
  do
    v358 = __ldxr(v357);
  while (__stxr(v358 + 1, v357));
  v359 = *((_QWORD *)&v1329 + 1);
  v351 = v1329;
  v1333 = &off_24EC37DE0;
  *(_QWORD *)&v1334 = v356;
  *((_QWORD *)&v1334 + 1) = v355;
  if (*((_QWORD *)&v1329 + 1))
  {
    v360 = (unint64_t *)(*((_QWORD *)&v1329 + 1) + 16);
    do
      v361 = __ldxr(v360);
    while (__stxr(v361 + 1, v360));
  }
LABEL_570:
  if (v351)
    v362 = v351 + 24;
  else
    v362 = 0;
  v1335 = &off_24EC2E850;
  *(_QWORD *)&v1336 = v362;
  *((_QWORD *)&v1336 + 1) = v359;
  if ((SHIBYTE(v1293[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1307[2]) & 0x80000000) == 0)
      goto LABEL_575;
LABEL_578:
    operator delete(v1307[0]);
    v363 = (std::__shared_weak_count *)v1501[1];
    if (!v1501[1])
      goto LABEL_583;
    goto LABEL_579;
  }
  operator delete(v1293[0]);
  if (SHIBYTE(v1307[2]) < 0)
    goto LABEL_578;
LABEL_575:
  v363 = (std::__shared_weak_count *)v1501[1];
  if (!v1501[1])
    goto LABEL_583;
LABEL_579:
  v364 = (unint64_t *)&v363->__shared_owners_;
  do
    v365 = __ldaxr(v364);
  while (__stlxr(v365 - 1, v364));
  if (!v365)
  {
    ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
    std::__shared_weak_count::__release_weak(v363);
  }
LABEL_583:
  v366 = (std::__shared_weak_count *)v1514[1];
  if (!v1514[1])
    goto LABEL_587;
  v367 = (unint64_t *)((char *)v1514[1] + 8);
  do
    v368 = __ldaxr(v367);
  while (__stlxr(v368 - 1, v367));
  if (!v368)
  {
    ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
    std::__shared_weak_count::__release_weak(v366);
    if ((SHIBYTE(v1553[2]) & 0x80000000) == 0)
    {
LABEL_588:
      if ((SHIBYTE(v1566[2]) & 0x80000000) == 0)
        goto LABEL_589;
LABEL_593:
      operator delete(v1566[0]);
      if (v1320)
        goto LABEL_595;
      goto LABEL_594;
    }
  }
  else
  {
LABEL_587:
    if ((SHIBYTE(v1553[2]) & 0x80000000) == 0)
      goto LABEL_588;
  }
  operator delete(v1553[0]);
  if (SHIBYTE(v1566[2]) < 0)
    goto LABEL_593;
LABEL_589:
  if (v1320)
    goto LABEL_595;
LABEL_594:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_595:
  v370 = *(void **)v4;
  v369 = *(unint64_t **)(v4 + 8);
  v1305 = *(void **)v4;
  v1306 = (std::__shared_weak_count *)v369;
  if (v369)
  {
    v371 = v369 + 1;
    do
      v372 = __ldxr(v371);
    while (__stxr(v372 + 1, v371));
  }
  v373 = *v2;
  v374 = (unint64_t *)v2[1];
  if (*v2)
    v375 = *v2 + 392;
  else
    v375 = 0;
  v1303 = v375;
  v1304 = (std::__shared_weak_count *)v374;
  if (v374)
  {
    v376 = v374 + 1;
    do
      v377 = __ldxr(v376);
    while (__stxr(v377 + 1, v376));
  }
  if (*(char *)(v375 + 31) < 0)
  {
    sub_223197FA4(v1553, *(void **)(v375 + 8), *(_QWORD *)(v375 + 16));
  }
  else
  {
    v378 = *(_OWORD *)(v375 + 8);
    v1553[2] = *(void **)(v375 + 24);
    *(_OWORD *)v1553 = v378;
  }
  if (*(char *)(v373 + 447) < 0)
  {
    sub_223197FA4(v1540, *(void **)(v373 + 424), *(_QWORD *)(v373 + 432));
  }
  else
  {
    *(_OWORD *)v1540 = *(_OWORD *)(v373 + 424);
    v1540[2] = *(void **)(v373 + 440);
  }
  v1501[0] = v370;
  v1501[1] = v369;
  v1306 = 0;
  v1305 = 0;
  v1488[0] = (void *)v375;
  v1488[1] = v374;
  if (v374)
  {
    v379 = v374 + 1;
    do
      v380 = __ldxr(v379);
    while (__stxr(v380 + 1, v379));
  }
  if (SHIBYTE(v1553[2]) < 0)
  {
    sub_223197FA4(v1293, v1553[0], (unint64_t)v1553[1]);
  }
  else
  {
    *(_OWORD *)v1293 = *(_OWORD *)v1553;
    v1293[2] = v1553[2];
  }
  if (SHIBYTE(v1540[2]) < 0)
  {
    sub_223197FA4(v1566, v1540[0], (unint64_t)v1540[1]);
  }
  else
  {
    *(_OWORD *)v1566 = *(_OWORD *)v1540;
    v1566[2] = v1540[2];
  }
  *(void **)((char *)v1449 + 7) = *(void **)((char *)&v1553[1] + 7);
  v381 = v1553[0];
  v1449[0] = v1553[1];
  v382 = HIBYTE(v1553[2]);
  memset(v1553, 0, sizeof(v1553));
  v1462[0] = v1449[0];
  *(void **)((char *)v1462 + 7) = *(void **)((char *)v1449 + 7);
  *(void **)((char *)v1449 + 7) = 0;
  v1449[0] = 0;
  v1514[0] = v370;
  v1514[1] = v369;
  if (v369)
  {
    v383 = v369 + 1;
    do
      v384 = __ldxr(v383);
    while (__stxr(v384 + 1, v383));
  }
  v385 = (char *)operator new();
  v1475[0] = v1462[0];
  *(void **)((char *)v1475 + 7) = *(void **)((char *)v1462 + 7);
  v1462[0] = 0;
  *(void **)((char *)v1462 + 7) = 0;
  v386 = *(_OWORD *)v1514;
  v1514[0] = 0;
  v1514[1] = 0;
  v385[8] = 1;
  *((_QWORD *)v385 + 4) = 0;
  *((_QWORD *)v385 + 5) = 0;
  *(_QWORD *)v385 = &off_24EC3B748;
  *((_QWORD *)v385 + 2) = &unk_24EC3B7C0;
  *((_QWORD *)v385 + 3) = &unk_24EC3B800;
  v387 = v1475[0];
  *(void **)(v385 + 63) = *(void **)((char *)v1475 + 7);
  *((_QWORD *)v385 + 6) = v381;
  *((_QWORD *)v385 + 7) = v387;
  v385[71] = v382;
  v1475[0] = 0;
  *(void **)((char *)v1475 + 7) = 0;
  *(_OWORD *)(v385 + 72) = v386;
  v1527[1] = 0;
  v1527[0] = 0;
  v388 = (_QWORD *)operator new();
  *v388 = &off_24EC3B8F8;
  v388[1] = v375;
  v388[2] = v374;
  v1488[1] = 0;
  v1488[0] = 0;
  *((_QWORD *)v385 + 18) = 0;
  *((_QWORD *)v385 + 11) = v388;
  *((_QWORD *)v385 + 12) = v385 + 96;
  *((_QWORD *)v385 + 13) = v385 + 96;
  *((_QWORD *)v385 + 14) = 0;
  *((_QWORD *)v385 + 15) = v385 + 120;
  *((_QWORD *)v385 + 16) = v385 + 120;
  *((_QWORD *)v385 + 17) = 0;
  if (!*((_QWORD *)v385 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v389 = (std::__shared_weak_count *)operator new();
  v389->__shared_owners_ = 0;
  v390 = (unint64_t *)&v389->__shared_owners_;
  v389->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3BDE8;
  v389->__shared_weak_owners_ = 0;
  v389[1].__vftable = (std::__shared_weak_count_vtbl *)v385;
  v391 = (std::__shared_weak_count *)*((_QWORD *)v385 + 5);
  if (v391)
  {
    if (v391->__shared_owners_ != -1)
      goto LABEL_637;
    do
      v392 = __ldxr(v390);
    while (__stxr(v392 + 1, v390));
    v393 = (unint64_t *)&v389->__shared_weak_owners_;
    do
      v394 = __ldxr(v393);
    while (__stxr(v394 + 1, v393));
    *((_QWORD *)v385 + 4) = v385;
    *((_QWORD *)v385 + 5) = v389;
    std::__shared_weak_count::__release_weak(v391);
  }
  else
  {
    do
      v395 = __ldxr(v390);
    while (__stxr(v395 + 1, v390));
    v396 = (unint64_t *)&v389->__shared_weak_owners_;
    do
      v397 = __ldxr(v396);
    while (__stxr(v397 + 1, v396));
    *((_QWORD *)v385 + 4) = v385;
    *((_QWORD *)v385 + 5) = v389;
  }
  do
    v398 = __ldaxr(v390);
  while (__stlxr(v398 - 1, v390));
  if (!v398)
  {
    ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
    std::__shared_weak_count::__release_weak(v389);
  }
LABEL_637:
  v399 = (std::__shared_weak_count *)v1527[1];
  if (v1527[1])
  {
    v400 = (unint64_t *)((char *)v1527[1] + 8);
    do
      v401 = __ldaxr(v400);
    while (__stlxr(v401 - 1, v400));
    if (!v401)
    {
      ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
      std::__shared_weak_count::__release_weak(v399);
    }
  }
  v1527[0] = v385;
  v1527[1] = v389;
  v402 = (std::__shared_weak_count *)v1514[1];
  if (v1514[1])
  {
    v403 = (unint64_t *)((char *)v1514[1] + 8);
    do
      v404 = __ldaxr(v403);
    while (__stlxr(v404 - 1, v403));
    if (!v404)
    {
      ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
      std::__shared_weak_count::__release_weak(v402);
    }
  }
  v405 = *(_OWORD *)v1501;
  v1501[0] = 0;
  v1501[1] = 0;
  *(_OWORD *)&v1307[1] = *(_OWORD *)v1293;
  v1307[0] = &off_24EC37E80;
  v1308 = v1293[2];
  memset(v1293, 0, sizeof(v1293));
  v1309 = *(_OWORD *)v1566;
  v406 = v1566[2];
  memset(v1566, 0, sizeof(v1566));
  v1311 = v405;
  v1514[1] = 0;
  v1514[0] = 0;
  v407 = v1527[0];
  v408 = (char *)v1527[1];
  v1310 = v406;
  v1312 = *(_OWORD *)v1527;
  v1527[0] = 0;
  v1527[1] = 0;
  if (*((_QWORD *)&v1312 + 1))
  {
    v409 = (unint64_t *)(v408 + 16);
    do
      v410 = __ldxr(v409);
    while (__stxr(v410 + 1, v409));
  }
  v1313 = &off_24EC37EB0;
  v411 = (_QWORD *)operator new();
  *v411 = &off_24EC3BE38;
  v411[1] = v407;
  v411[2] = v408;
  *(_QWORD *)&v1314 = v411;
  v413 = *((_QWORD *)&v1312 + 1);
  v412 = v1312;
  if (!*((_QWORD *)&v1312 + 1))
  {
    *((_QWORD *)&v1314 + 1) = v1312;
    v1315 = 0;
    if ((_QWORD)v1312)
      v417 = v1312 + 16;
    else
      v417 = 0;
    goto LABEL_667;
  }
  v414 = (unint64_t *)(*((_QWORD *)&v1312 + 1) + 16);
  do
    v415 = __ldxr(v414);
  while (__stxr(v415 + 1, v414));
  v416 = *((_QWORD *)&v1312 + 1);
  *((_QWORD *)&v1314 + 1) = v412;
  v1315 = v413;
  if ((_QWORD)v1312)
    v417 = v1312 + 16;
  else
    v417 = 0;
  if (!*((_QWORD *)&v1312 + 1))
  {
    v412 = v1312;
LABEL_667:
    v420 = 0;
    v1316 = &off_24EC37EE8;
    v1317 = v417;
    goto LABEL_668;
  }
  v418 = (unint64_t *)(*((_QWORD *)&v1312 + 1) + 16);
  do
    v419 = __ldxr(v418);
  while (__stxr(v419 + 1, v418));
  v420 = *((_QWORD *)&v1312 + 1);
  v412 = v1312;
  v1316 = &off_24EC37EE8;
  *(_QWORD *)&v1317 = v417;
  *((_QWORD *)&v1317 + 1) = v416;
  if (*((_QWORD *)&v1312 + 1))
  {
    v421 = (unint64_t *)(*((_QWORD *)&v1312 + 1) + 16);
    do
      v422 = __ldxr(v421);
    while (__stxr(v422 + 1, v421));
  }
LABEL_668:
  if (v412)
    v423 = v412 + 24;
  else
    v423 = 0;
  v1318 = &off_24EC2E850;
  *(_QWORD *)&v1319 = v423;
  *((_QWORD *)&v1319 + 1) = v420;
  if ((SHIBYTE(v1566[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1293[2]) & 0x80000000) == 0)
      goto LABEL_673;
LABEL_676:
    operator delete(v1293[0]);
    v424 = (std::__shared_weak_count *)v1488[1];
    if (!v1488[1])
      goto LABEL_681;
    goto LABEL_677;
  }
  operator delete(v1566[0]);
  if (SHIBYTE(v1293[2]) < 0)
    goto LABEL_676;
LABEL_673:
  v424 = (std::__shared_weak_count *)v1488[1];
  if (!v1488[1])
    goto LABEL_681;
LABEL_677:
  v425 = (unint64_t *)&v424->__shared_owners_;
  do
    v426 = __ldaxr(v425);
  while (__stlxr(v426 - 1, v425));
  if (!v426)
  {
    ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
    std::__shared_weak_count::__release_weak(v424);
  }
LABEL_681:
  v427 = (std::__shared_weak_count *)v1501[1];
  if (!v1501[1])
    goto LABEL_685;
  v428 = (unint64_t *)((char *)v1501[1] + 8);
  do
    v429 = __ldaxr(v428);
  while (__stlxr(v429 - 1, v428));
  if (!v429)
  {
    ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
    std::__shared_weak_count::__release_weak(v427);
    if ((SHIBYTE(v1540[2]) & 0x80000000) == 0)
    {
LABEL_686:
      if ((SHIBYTE(v1553[2]) & 0x80000000) == 0)
        goto LABEL_687;
LABEL_691:
      operator delete(v1553[0]);
      if (v1303)
        goto LABEL_693;
      goto LABEL_692;
    }
  }
  else
  {
LABEL_685:
    if ((SHIBYTE(v1540[2]) & 0x80000000) == 0)
      goto LABEL_686;
  }
  operator delete(v1540[0]);
  if (SHIBYTE(v1553[2]) < 0)
    goto LABEL_691;
LABEL_687:
  if (v1303)
    goto LABEL_693;
LABEL_692:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_693:
  v430 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)&v1292 = *(_QWORD *)v4;
  *((_QWORD *)&v1292 + 1) = v430;
  if (v430)
  {
    v431 = (unint64_t *)(v430 + 8);
    do
      v432 = __ldxr(v431);
    while (__stxr(v432 + 1, v431));
  }
  v433 = (std::__shared_weak_count *)v2[1];
  if (*v2)
    v434 = *v2 + 448;
  else
    v434 = 0;
  v1290 = v434;
  v1291 = v433;
  if (v433)
  {
    v435 = (unint64_t *)&v433->__shared_owners_;
    do
      v436 = __ldxr(v435);
    while (__stxr(v436 + 1, v435));
  }
  sub_223491564((uint64_t)v1293, &v1292, &v1290);
  v438 = *(void **)v4;
  v437 = *(unint64_t **)(v4 + 8);
  if (v437)
  {
    v439 = v437 + 1;
    do
      v440 = __ldxr(v439);
    while (__stxr(v440 + 1, v439));
  }
  v441 = *v2;
  v442 = (unint64_t *)v2[1];
  if (*v2)
    v443 = *v2 + 504;
  else
    v443 = 0;
  v1289 = (std::__shared_weak_count *)v2[1];
  if (v442)
  {
    v444 = v442 + 1;
    do
      v445 = __ldxr(v444);
    while (__stxr(v445 + 1, v444));
  }
  if (*(char *)(v443 + 31) < 0)
  {
    sub_223197FA4(v1527, *(void **)(v443 + 8), *(_QWORD *)(v443 + 16));
  }
  else
  {
    v446 = *(_OWORD *)(v443 + 8);
    v1527[2] = *(void **)(v443 + 24);
    *(_OWORD *)v1527 = v446;
  }
  if (*(char *)(v441 + 559) < 0)
  {
    sub_223197FA4(v1514, *(void **)(v441 + 536), *(_QWORD *)(v441 + 544));
  }
  else
  {
    *(_OWORD *)v1514 = *(_OWORD *)(v441 + 536);
    v1514[2] = *(void **)(v441 + 552);
  }
  v1475[0] = v438;
  v1475[1] = v437;
  v1462[0] = (void *)v443;
  v1462[1] = v442;
  if (v442)
  {
    v447 = v442 + 1;
    do
      v448 = __ldxr(v447);
    while (__stxr(v448 + 1, v447));
  }
  if (SHIBYTE(v1527[2]) < 0)
  {
    sub_223197FA4(v1553, v1527[0], (unint64_t)v1527[1]);
  }
  else
  {
    *(_OWORD *)v1553 = *(_OWORD *)v1527;
    v1553[2] = v1527[2];
  }
  if (SHIBYTE(v1514[2]) < 0)
  {
    sub_223197FA4(v1540, v1514[0], (unint64_t)v1514[1]);
  }
  else
  {
    *(_OWORD *)v1540 = *(_OWORD *)v1514;
    v1540[2] = v1514[2];
  }
  *(void **)((char *)v1586 + 7) = *(void **)((char *)&v1527[1] + 7);
  v449 = v1527[0];
  v1586[0] = v1527[1];
  v450 = HIBYTE(v1527[2]);
  memset(v1527, 0, sizeof(v1527));
  v1436[0] = v1586[0];
  *(void **)((char *)v1436 + 7) = *(void **)((char *)v1586 + 7);
  *(void **)((char *)v1586 + 7) = 0;
  v1586[0] = 0;
  v1488[0] = v438;
  v1488[1] = v437;
  if (v437)
  {
    v451 = v437 + 1;
    do
      v452 = __ldxr(v451);
    while (__stxr(v452 + 1, v451));
  }
  v453 = (char *)operator new();
  v1449[0] = v1436[0];
  *(void **)((char *)v1449 + 7) = *(void **)((char *)v1436 + 7);
  v1436[0] = 0;
  *(void **)((char *)v1436 + 7) = 0;
  v454 = *(_OWORD *)v1488;
  v1488[0] = 0;
  v1488[1] = 0;
  v453[8] = 1;
  *((_QWORD *)v453 + 4) = 0;
  *((_QWORD *)v453 + 5) = 0;
  *(_QWORD *)v453 = &off_24EC3C5B8;
  *((_QWORD *)v453 + 2) = &unk_24EC3C630;
  *((_QWORD *)v453 + 3) = &unk_24EC3C670;
  v455 = v1449[0];
  *(void **)(v453 + 63) = *(void **)((char *)v1449 + 7);
  *((_QWORD *)v453 + 6) = v449;
  *((_QWORD *)v453 + 7) = v455;
  v453[71] = v450;
  v1449[0] = 0;
  *(void **)((char *)v1449 + 7) = 0;
  *(_OWORD *)(v453 + 72) = v454;
  v1501[1] = 0;
  v1501[0] = 0;
  v456 = (_QWORD *)operator new();
  *v456 = &off_24EC3C758;
  v456[1] = v443;
  v456[2] = v442;
  v1462[1] = 0;
  v1462[0] = 0;
  *((_QWORD *)v453 + 18) = 0;
  *((_QWORD *)v453 + 11) = v456;
  *((_QWORD *)v453 + 12) = v453 + 96;
  *((_QWORD *)v453 + 13) = v453 + 96;
  *((_QWORD *)v453 + 14) = 0;
  *((_QWORD *)v453 + 15) = v453 + 120;
  *((_QWORD *)v453 + 16) = v453 + 120;
  *((_QWORD *)v453 + 17) = 0;
  if (!*((_QWORD *)v453 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v457 = (std::__shared_weak_count *)operator new();
  v457->__shared_owners_ = 0;
  v458 = (unint64_t *)&v457->__shared_owners_;
  v457->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3CBF8;
  v457->__shared_weak_owners_ = 0;
  v457[1].__vftable = (std::__shared_weak_count_vtbl *)v453;
  v459 = (std::__shared_weak_count *)*((_QWORD *)v453 + 5);
  if (v459)
  {
    if (v459->__shared_owners_ != -1)
      goto LABEL_744;
    do
      v460 = __ldxr(v458);
    while (__stxr(v460 + 1, v458));
    v461 = (unint64_t *)&v457->__shared_weak_owners_;
    do
      v462 = __ldxr(v461);
    while (__stxr(v462 + 1, v461));
    *((_QWORD *)v453 + 4) = v453;
    *((_QWORD *)v453 + 5) = v457;
    std::__shared_weak_count::__release_weak(v459);
  }
  else
  {
    do
      v463 = __ldxr(v458);
    while (__stxr(v463 + 1, v458));
    v464 = (unint64_t *)&v457->__shared_weak_owners_;
    do
      v465 = __ldxr(v464);
    while (__stxr(v465 + 1, v464));
    *((_QWORD *)v453 + 4) = v453;
    *((_QWORD *)v453 + 5) = v457;
  }
  do
    v466 = __ldaxr(v458);
  while (__stlxr(v466 - 1, v458));
  if (!v466)
  {
    ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
    std::__shared_weak_count::__release_weak(v457);
  }
LABEL_744:
  v467 = (std::__shared_weak_count *)v1501[1];
  if (v1501[1])
  {
    v468 = (unint64_t *)((char *)v1501[1] + 8);
    do
      v469 = __ldaxr(v468);
    while (__stlxr(v469 - 1, v468));
    if (!v469)
    {
      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
      std::__shared_weak_count::__release_weak(v467);
    }
  }
  v1501[0] = v453;
  v1501[1] = v457;
  v470 = (std::__shared_weak_count *)v1488[1];
  if (v1488[1])
  {
    v471 = (unint64_t *)((char *)v1488[1] + 8);
    do
      v472 = __ldaxr(v471);
    while (__stlxr(v472 - 1, v471));
    if (!v472)
    {
      ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
      std::__shared_weak_count::__release_weak(v470);
    }
  }
  v473 = *(_OWORD *)v1475;
  v1475[0] = 0;
  v1475[1] = 0;
  *(_OWORD *)&v1566[1] = *(_OWORD *)v1553;
  v1566[0] = &off_24EC37FC0;
  v1567 = v1553[2];
  memset(v1553, 0, sizeof(v1553));
  v1568 = *(_OWORD *)v1540;
  v474 = v1540[2];
  memset(v1540, 0, sizeof(v1540));
  v1570 = v473;
  v1488[1] = 0;
  v1488[0] = 0;
  v475 = v1501[0];
  v476 = (char *)v1501[1];
  v1569 = v474;
  v1571 = *(_OWORD *)v1501;
  v1501[0] = 0;
  v1501[1] = 0;
  if (*((_QWORD *)&v1571 + 1))
  {
    v477 = (unint64_t *)(v476 + 16);
    do
      v478 = __ldxr(v477);
    while (__stxr(v478 + 1, v477));
  }
  v1572 = &off_24EC37FF0;
  v479 = (_QWORD *)operator new();
  *v479 = &off_24EC3CC48;
  v479[1] = v475;
  v479[2] = v476;
  *(_QWORD *)&v1573 = v479;
  v481 = *((_QWORD *)&v1571 + 1);
  v480 = v1571;
  if (!*((_QWORD *)&v1571 + 1))
  {
    *((_QWORD *)&v1573 + 1) = v1571;
    v1574 = 0;
    if ((_QWORD)v1571)
      v485 = v1571 + 16;
    else
      v485 = 0;
    goto LABEL_774;
  }
  v482 = (unint64_t *)(*((_QWORD *)&v1571 + 1) + 16);
  do
    v483 = __ldxr(v482);
  while (__stxr(v483 + 1, v482));
  v484 = *((_QWORD *)&v1571 + 1);
  *((_QWORD *)&v1573 + 1) = v480;
  v1574 = v481;
  if ((_QWORD)v1571)
    v485 = v1571 + 16;
  else
    v485 = 0;
  if (!*((_QWORD *)&v1571 + 1))
  {
    v480 = v1571;
LABEL_774:
    v488 = 0;
    v1575 = &off_24EC37DE0;
    v1576 = v485;
    goto LABEL_775;
  }
  v486 = (unint64_t *)(*((_QWORD *)&v1571 + 1) + 16);
  do
    v487 = __ldxr(v486);
  while (__stxr(v487 + 1, v486));
  v488 = *((_QWORD *)&v1571 + 1);
  v480 = v1571;
  v1575 = &off_24EC37DE0;
  *(_QWORD *)&v1576 = v485;
  *((_QWORD *)&v1576 + 1) = v484;
  if (*((_QWORD *)&v1571 + 1))
  {
    v489 = (unint64_t *)(*((_QWORD *)&v1571 + 1) + 16);
    do
      v490 = __ldxr(v489);
    while (__stxr(v490 + 1, v489));
  }
LABEL_775:
  if (v480)
    v491 = v480 + 24;
  else
    v491 = 0;
  v1577 = &off_24EC2E850;
  *(_QWORD *)&v1578 = v491;
  *((_QWORD *)&v1578 + 1) = v488;
  if ((SHIBYTE(v1540[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1553[2]) & 0x80000000) == 0)
      goto LABEL_780;
LABEL_783:
    operator delete(v1553[0]);
    v492 = (std::__shared_weak_count *)v1462[1];
    if (!v1462[1])
      goto LABEL_788;
    goto LABEL_784;
  }
  operator delete(v1540[0]);
  if (SHIBYTE(v1553[2]) < 0)
    goto LABEL_783;
LABEL_780:
  v492 = (std::__shared_weak_count *)v1462[1];
  if (!v1462[1])
    goto LABEL_788;
LABEL_784:
  v493 = (unint64_t *)&v492->__shared_owners_;
  do
    v494 = __ldaxr(v493);
  while (__stlxr(v494 - 1, v493));
  if (!v494)
  {
    ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
    std::__shared_weak_count::__release_weak(v492);
  }
LABEL_788:
  v495 = (std::__shared_weak_count *)v1475[1];
  if (!v1475[1])
    goto LABEL_792;
  v496 = (unint64_t *)((char *)v1475[1] + 8);
  do
    v497 = __ldaxr(v496);
  while (__stlxr(v497 - 1, v496));
  if (!v497)
  {
    ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
    std::__shared_weak_count::__release_weak(v495);
    if ((SHIBYTE(v1514[2]) & 0x80000000) == 0)
    {
LABEL_793:
      if ((SHIBYTE(v1527[2]) & 0x80000000) == 0)
        goto LABEL_794;
LABEL_798:
      operator delete(v1527[0]);
      if (v443)
        goto LABEL_800;
      goto LABEL_799;
    }
  }
  else
  {
LABEL_792:
    if ((SHIBYTE(v1514[2]) & 0x80000000) == 0)
      goto LABEL_793;
  }
  operator delete(v1514[0]);
  if (SHIBYTE(v1527[2]) < 0)
    goto LABEL_798;
LABEL_794:
  if (v443)
    goto LABEL_800;
LABEL_799:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_800:
  v499 = *(void **)v4;
  v498 = *(unint64_t **)(v4 + 8);
  if (v498)
  {
    v500 = v498 + 1;
    do
      v501 = __ldxr(v500);
    while (__stxr(v501 + 1, v500));
  }
  v502 = *v2;
  v503 = (unint64_t *)v2[1];
  if (*v2)
    v504 = *v2 + 560;
  else
    v504 = 0;
  v1288 = (std::__shared_weak_count *)v2[1];
  if (v503)
  {
    v505 = v503 + 1;
    do
      v506 = __ldxr(v505);
    while (__stxr(v506 + 1, v505));
  }
  if (*(char *)(v504 + 31) < 0)
  {
    sub_223197FA4(v1514, *(void **)(v504 + 8), *(_QWORD *)(v504 + 16));
  }
  else
  {
    v507 = *(_OWORD *)(v504 + 8);
    v1514[2] = *(void **)(v504 + 24);
    *(_OWORD *)v1514 = v507;
  }
  if (*(char *)(v502 + 615) < 0)
  {
    sub_223197FA4(v1501, *(void **)(v502 + 592), *(_QWORD *)(v502 + 600));
  }
  else
  {
    *(_OWORD *)v1501 = *(_OWORD *)(v502 + 592);
    v1501[2] = *(void **)(v502 + 608);
  }
  v1462[0] = v499;
  v1462[1] = v498;
  v1449[0] = (void *)v504;
  v1449[1] = v503;
  if (v503)
  {
    v508 = v503 + 1;
    do
      v509 = __ldxr(v508);
    while (__stxr(v509 + 1, v508));
  }
  if (SHIBYTE(v1514[2]) < 0)
  {
    sub_223197FA4(v1540, v1514[0], (unint64_t)v1514[1]);
  }
  else
  {
    *(_OWORD *)v1540 = *(_OWORD *)v1514;
    v1540[2] = v1514[2];
  }
  if (SHIBYTE(v1501[2]) < 0)
  {
    sub_223197FA4(v1527, v1501[0], (unint64_t)v1501[1]);
  }
  else
  {
    *(_OWORD *)v1527 = *(_OWORD *)v1501;
    v1527[2] = v1501[2];
  }
  *(void **)((char *)v1585 + 7) = *(void **)((char *)&v1514[1] + 7);
  v510 = v1514[0];
  v1585[0] = v1514[1];
  v511 = HIBYTE(v1514[2]);
  memset(v1514, 0, sizeof(v1514));
  v1586[0] = v1585[0];
  *(void **)((char *)v1586 + 7) = *(void **)((char *)v1585 + 7);
  *(void **)((char *)v1585 + 7) = 0;
  v1585[0] = 0;
  v1475[0] = v499;
  v1475[1] = v498;
  if (v498)
  {
    v512 = v498 + 1;
    do
      v513 = __ldxr(v512);
    while (__stxr(v513 + 1, v512));
  }
  v514 = (char *)operator new();
  v1436[0] = v1586[0];
  *(void **)((char *)v1436 + 7) = *(void **)((char *)v1586 + 7);
  v1586[0] = 0;
  *(void **)((char *)v1586 + 7) = 0;
  v515 = *(_OWORD *)v1475;
  v1475[0] = 0;
  v1475[1] = 0;
  v514[8] = 1;
  *((_QWORD *)v514 + 4) = 0;
  *((_QWORD *)v514 + 5) = 0;
  *(_QWORD *)v514 = &off_24EC3CCC0;
  *((_QWORD *)v514 + 2) = &unk_24EC3CD38;
  *((_QWORD *)v514 + 3) = &unk_24EC3CD78;
  v516 = v1436[0];
  *(void **)(v514 + 63) = *(void **)((char *)v1436 + 7);
  *((_QWORD *)v514 + 6) = v510;
  *((_QWORD *)v514 + 7) = v516;
  v514[71] = v511;
  v1436[0] = 0;
  *(void **)((char *)v1436 + 7) = 0;
  *(_OWORD *)(v514 + 72) = v515;
  v1488[1] = 0;
  v1488[0] = 0;
  v517 = (_QWORD *)operator new();
  *v517 = &off_24EC3CE60;
  v517[1] = v504;
  v517[2] = v503;
  v1449[1] = 0;
  v1449[0] = 0;
  *((_QWORD *)v514 + 18) = 0;
  *((_QWORD *)v514 + 11) = v517;
  *((_QWORD *)v514 + 12) = v514 + 96;
  *((_QWORD *)v514 + 13) = v514 + 96;
  *((_QWORD *)v514 + 14) = 0;
  *((_QWORD *)v514 + 15) = v514 + 120;
  *((_QWORD *)v514 + 16) = v514 + 120;
  *((_QWORD *)v514 + 17) = 0;
  if (!*((_QWORD *)v514 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v518 = (std::__shared_weak_count *)operator new();
  v518->__shared_owners_ = 0;
  v519 = (unint64_t *)&v518->__shared_owners_;
  v518->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3D300;
  v518->__shared_weak_owners_ = 0;
  v518[1].__vftable = (std::__shared_weak_count_vtbl *)v514;
  v520 = (std::__shared_weak_count *)*((_QWORD *)v514 + 5);
  if (v520)
  {
    if (v520->__shared_owners_ != -1)
      goto LABEL_842;
    do
      v521 = __ldxr(v519);
    while (__stxr(v521 + 1, v519));
    v522 = (unint64_t *)&v518->__shared_weak_owners_;
    do
      v523 = __ldxr(v522);
    while (__stxr(v523 + 1, v522));
    *((_QWORD *)v514 + 4) = v514;
    *((_QWORD *)v514 + 5) = v518;
    std::__shared_weak_count::__release_weak(v520);
  }
  else
  {
    do
      v524 = __ldxr(v519);
    while (__stxr(v524 + 1, v519));
    v525 = (unint64_t *)&v518->__shared_weak_owners_;
    do
      v526 = __ldxr(v525);
    while (__stxr(v526 + 1, v525));
    *((_QWORD *)v514 + 4) = v514;
    *((_QWORD *)v514 + 5) = v518;
  }
  do
    v527 = __ldaxr(v519);
  while (__stlxr(v527 - 1, v519));
  if (!v527)
  {
    ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
    std::__shared_weak_count::__release_weak(v518);
  }
LABEL_842:
  v528 = (std::__shared_weak_count *)v1488[1];
  if (v1488[1])
  {
    v529 = (unint64_t *)((char *)v1488[1] + 8);
    do
      v530 = __ldaxr(v529);
    while (__stlxr(v530 - 1, v529));
    if (!v530)
    {
      ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
      std::__shared_weak_count::__release_weak(v528);
    }
  }
  v1488[0] = v514;
  v1488[1] = v518;
  v531 = (std::__shared_weak_count *)v1475[1];
  if (v1475[1])
  {
    v532 = (unint64_t *)((char *)v1475[1] + 8);
    do
      v533 = __ldaxr(v532);
    while (__stlxr(v533 - 1, v532));
    if (!v533)
    {
      ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
      std::__shared_weak_count::__release_weak(v531);
    }
  }
  v534 = *(_OWORD *)v1462;
  v1462[0] = 0;
  v1462[1] = 0;
  *(_OWORD *)&v1553[1] = *(_OWORD *)v1540;
  v1553[0] = &off_24EC38028;
  v1554 = v1540[2];
  memset(v1540, 0, sizeof(v1540));
  v1555 = *(_OWORD *)v1527;
  v535 = v1527[2];
  memset(v1527, 0, sizeof(v1527));
  v1557 = v534;
  v1475[1] = 0;
  v1475[0] = 0;
  v536 = v1488[0];
  v537 = (char *)v1488[1];
  v1556 = v535;
  v1558 = *(_OWORD *)v1488;
  v1488[0] = 0;
  v1488[1] = 0;
  if (*((_QWORD *)&v1558 + 1))
  {
    v538 = (unint64_t *)(v537 + 16);
    do
      v539 = __ldxr(v538);
    while (__stxr(v539 + 1, v538));
  }
  v1559 = &off_24EC38058;
  v540 = (_QWORD *)operator new();
  *v540 = &off_24EC3D350;
  v540[1] = v536;
  v540[2] = v537;
  *(_QWORD *)&v1560 = v540;
  v542 = *((_QWORD *)&v1558 + 1);
  v541 = v1558;
  if (!*((_QWORD *)&v1558 + 1))
  {
    *((_QWORD *)&v1560 + 1) = v1558;
    v1561 = 0;
    if ((_QWORD)v1558)
      v546 = v1558 + 16;
    else
      v546 = 0;
    goto LABEL_872;
  }
  v543 = (unint64_t *)(*((_QWORD *)&v1558 + 1) + 16);
  do
    v544 = __ldxr(v543);
  while (__stxr(v544 + 1, v543));
  v545 = *((_QWORD *)&v1558 + 1);
  *((_QWORD *)&v1560 + 1) = v541;
  v1561 = v542;
  if ((_QWORD)v1558)
    v546 = v1558 + 16;
  else
    v546 = 0;
  if (!*((_QWORD *)&v1558 + 1))
  {
    v541 = v1558;
LABEL_872:
    v549 = 0;
    v1562 = &off_24EC37DE0;
    v1563 = v546;
    goto LABEL_873;
  }
  v547 = (unint64_t *)(*((_QWORD *)&v1558 + 1) + 16);
  do
    v548 = __ldxr(v547);
  while (__stxr(v548 + 1, v547));
  v549 = *((_QWORD *)&v1558 + 1);
  v541 = v1558;
  v1562 = &off_24EC37DE0;
  *(_QWORD *)&v1563 = v546;
  *((_QWORD *)&v1563 + 1) = v545;
  if (*((_QWORD *)&v1558 + 1))
  {
    v550 = (unint64_t *)(*((_QWORD *)&v1558 + 1) + 16);
    do
      v551 = __ldxr(v550);
    while (__stxr(v551 + 1, v550));
  }
LABEL_873:
  if (v541)
    v552 = v541 + 24;
  else
    v552 = 0;
  v1564 = &off_24EC2E850;
  *(_QWORD *)&v1565 = v552;
  *((_QWORD *)&v1565 + 1) = v549;
  if ((SHIBYTE(v1527[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1540[2]) & 0x80000000) == 0)
      goto LABEL_878;
LABEL_881:
    operator delete(v1540[0]);
    v553 = (std::__shared_weak_count *)v1449[1];
    if (!v1449[1])
      goto LABEL_886;
    goto LABEL_882;
  }
  operator delete(v1527[0]);
  if (SHIBYTE(v1540[2]) < 0)
    goto LABEL_881;
LABEL_878:
  v553 = (std::__shared_weak_count *)v1449[1];
  if (!v1449[1])
    goto LABEL_886;
LABEL_882:
  v554 = (unint64_t *)&v553->__shared_owners_;
  do
    v555 = __ldaxr(v554);
  while (__stlxr(v555 - 1, v554));
  if (!v555)
  {
    ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
    std::__shared_weak_count::__release_weak(v553);
  }
LABEL_886:
  v556 = (std::__shared_weak_count *)v1462[1];
  if (!v1462[1])
    goto LABEL_890;
  v557 = (unint64_t *)((char *)v1462[1] + 8);
  do
    v558 = __ldaxr(v557);
  while (__stlxr(v558 - 1, v557));
  if (!v558)
  {
    ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
    std::__shared_weak_count::__release_weak(v556);
    if ((SHIBYTE(v1501[2]) & 0x80000000) == 0)
    {
LABEL_891:
      if ((SHIBYTE(v1514[2]) & 0x80000000) == 0)
        goto LABEL_892;
LABEL_896:
      operator delete(v1514[0]);
      if (v504)
        goto LABEL_898;
      goto LABEL_897;
    }
  }
  else
  {
LABEL_890:
    if ((SHIBYTE(v1501[2]) & 0x80000000) == 0)
      goto LABEL_891;
  }
  operator delete(v1501[0]);
  if (SHIBYTE(v1514[2]) < 0)
    goto LABEL_896;
LABEL_892:
  if (v504)
    goto LABEL_898;
LABEL_897:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_898:
  v560 = *(void **)v4;
  v559 = *(unint64_t **)(v4 + 8);
  if (v559)
  {
    v561 = v559 + 1;
    do
      v562 = __ldxr(v561);
    while (__stxr(v562 + 1, v561));
  }
  v563 = *v2;
  v564 = (unint64_t *)v2[1];
  if (*v2)
    v565 = *v2 + 616;
  else
    v565 = 0;
  v1287 = (std::__shared_weak_count *)v2[1];
  if (v564)
  {
    v566 = v564 + 1;
    do
      v567 = __ldxr(v566);
    while (__stxr(v567 + 1, v566));
  }
  if (*(char *)(v565 + 31) < 0)
  {
    sub_223197FA4(v1501, *(void **)(v565 + 8), *(_QWORD *)(v565 + 16));
  }
  else
  {
    v568 = *(_OWORD *)(v565 + 8);
    v1501[2] = *(void **)(v565 + 24);
    *(_OWORD *)v1501 = v568;
  }
  if (*(char *)(v563 + 671) < 0)
  {
    sub_223197FA4(v1488, *(void **)(v563 + 648), *(_QWORD *)(v563 + 656));
  }
  else
  {
    *(_OWORD *)v1488 = *(_OWORD *)(v563 + 648);
    v1488[2] = *(void **)(v563 + 664);
  }
  v1449[0] = v560;
  v1449[1] = v559;
  v1436[0] = (void *)v565;
  v1436[1] = v564;
  if (v564)
  {
    v569 = v564 + 1;
    do
      v570 = __ldxr(v569);
    while (__stxr(v570 + 1, v569));
  }
  if (SHIBYTE(v1501[2]) < 0)
  {
    sub_223197FA4(v1527, v1501[0], (unint64_t)v1501[1]);
  }
  else
  {
    *(_OWORD *)v1527 = *(_OWORD *)v1501;
    v1527[2] = v1501[2];
  }
  if (SHIBYTE(v1488[2]) < 0)
  {
    sub_223197FA4(v1514, v1488[0], (unint64_t)v1488[1]);
  }
  else
  {
    *(_OWORD *)v1514 = *(_OWORD *)v1488;
    v1514[2] = v1488[2];
  }
  *(void **)((char *)v1583 + 7) = *(void **)((char *)&v1501[1] + 7);
  v571 = v1501[0];
  v1583[0] = v1501[1];
  v572 = HIBYTE(v1501[2]);
  memset(v1501, 0, sizeof(v1501));
  v1585[0] = v1583[0];
  *(void **)((char *)v1585 + 7) = *(void **)((char *)v1583 + 7);
  *(void **)((char *)v1583 + 7) = 0;
  v1583[0] = 0;
  v1462[0] = v560;
  v1462[1] = v559;
  if (v559)
  {
    v573 = v559 + 1;
    do
      v574 = __ldxr(v573);
    while (__stxr(v574 + 1, v573));
  }
  v575 = (char *)operator new();
  v1586[0] = v1585[0];
  *(void **)((char *)v1586 + 7) = *(void **)((char *)v1585 + 7);
  v1585[0] = 0;
  *(void **)((char *)v1585 + 7) = 0;
  v576 = *(_OWORD *)v1462;
  v1462[0] = 0;
  v1462[1] = 0;
  v575[8] = 1;
  *((_QWORD *)v575 + 4) = 0;
  *((_QWORD *)v575 + 5) = 0;
  *(_QWORD *)v575 = &off_24EC3D3C8;
  *((_QWORD *)v575 + 2) = &unk_24EC3D440;
  *((_QWORD *)v575 + 3) = &unk_24EC3D480;
  v577 = v1586[0];
  *(void **)(v575 + 63) = *(void **)((char *)v1586 + 7);
  *((_QWORD *)v575 + 6) = v571;
  *((_QWORD *)v575 + 7) = v577;
  v575[71] = v572;
  v1586[0] = 0;
  *(void **)((char *)v1586 + 7) = 0;
  *(_OWORD *)(v575 + 72) = v576;
  v1475[1] = 0;
  v1475[0] = 0;
  v578 = (_QWORD *)operator new();
  *v578 = &off_24EC3D578;
  v578[1] = v565;
  v578[2] = v564;
  v1436[1] = 0;
  v1436[0] = 0;
  *((_QWORD *)v575 + 18) = 0;
  *((_QWORD *)v575 + 11) = v578;
  *((_QWORD *)v575 + 12) = v575 + 96;
  *((_QWORD *)v575 + 13) = v575 + 96;
  *((_QWORD *)v575 + 14) = 0;
  *((_QWORD *)v575 + 15) = v575 + 120;
  *((_QWORD *)v575 + 16) = v575 + 120;
  *((_QWORD *)v575 + 17) = 0;
  if (!*((_QWORD *)v575 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v579 = (std::__shared_weak_count *)operator new();
  v579->__shared_owners_ = 0;
  v580 = (unint64_t *)&v579->__shared_owners_;
  v579->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3DA68;
  v579->__shared_weak_owners_ = 0;
  v579[1].__vftable = (std::__shared_weak_count_vtbl *)v575;
  v581 = (std::__shared_weak_count *)*((_QWORD *)v575 + 5);
  if (v581)
  {
    if (v581->__shared_owners_ != -1)
      goto LABEL_940;
    do
      v582 = __ldxr(v580);
    while (__stxr(v582 + 1, v580));
    v583 = (unint64_t *)&v579->__shared_weak_owners_;
    do
      v584 = __ldxr(v583);
    while (__stxr(v584 + 1, v583));
    *((_QWORD *)v575 + 4) = v575;
    *((_QWORD *)v575 + 5) = v579;
    std::__shared_weak_count::__release_weak(v581);
  }
  else
  {
    do
      v585 = __ldxr(v580);
    while (__stxr(v585 + 1, v580));
    v586 = (unint64_t *)&v579->__shared_weak_owners_;
    do
      v587 = __ldxr(v586);
    while (__stxr(v587 + 1, v586));
    *((_QWORD *)v575 + 4) = v575;
    *((_QWORD *)v575 + 5) = v579;
  }
  do
    v588 = __ldaxr(v580);
  while (__stlxr(v588 - 1, v580));
  if (!v588)
  {
    ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
    std::__shared_weak_count::__release_weak(v579);
  }
LABEL_940:
  v589 = (std::__shared_weak_count *)v1475[1];
  if (v1475[1])
  {
    v590 = (unint64_t *)((char *)v1475[1] + 8);
    do
      v591 = __ldaxr(v590);
    while (__stlxr(v591 - 1, v590));
    if (!v591)
    {
      ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
      std::__shared_weak_count::__release_weak(v589);
    }
  }
  v1475[0] = v575;
  v1475[1] = v579;
  v592 = (std::__shared_weak_count *)v1462[1];
  if (v1462[1])
  {
    v593 = (unint64_t *)((char *)v1462[1] + 8);
    do
      v594 = __ldaxr(v593);
    while (__stlxr(v594 - 1, v593));
    if (!v594)
    {
      ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
      std::__shared_weak_count::__release_weak(v592);
    }
  }
  v595 = *(_OWORD *)v1449;
  v1449[0] = 0;
  v1449[1] = 0;
  *(_OWORD *)&v1540[1] = *(_OWORD *)v1527;
  v1540[0] = &off_24EC38090;
  v1541 = v1527[2];
  memset(v1527, 0, sizeof(v1527));
  v1542 = *(_OWORD *)v1514;
  v596 = v1514[2];
  memset(v1514, 0, sizeof(v1514));
  v1544 = v595;
  v1462[1] = 0;
  v1462[0] = 0;
  v597 = v1475[0];
  v598 = (char *)v1475[1];
  v1543 = v596;
  v1545 = *(_OWORD *)v1475;
  v1475[0] = 0;
  v1475[1] = 0;
  if (*((_QWORD *)&v1545 + 1))
  {
    v599 = (unint64_t *)(v598 + 16);
    do
      v600 = __ldxr(v599);
    while (__stxr(v600 + 1, v599));
  }
  v1546 = &off_24EC380C0;
  v601 = (_QWORD *)operator new();
  *v601 = &off_24EC3DAB8;
  v601[1] = v597;
  v601[2] = v598;
  *(_QWORD *)&v1547 = v601;
  v603 = *((_QWORD *)&v1545 + 1);
  v602 = v1545;
  if (!*((_QWORD *)&v1545 + 1))
  {
    *((_QWORD *)&v1547 + 1) = v1545;
    v1548 = 0;
    if ((_QWORD)v1545)
      v607 = v1545 + 16;
    else
      v607 = 0;
    goto LABEL_970;
  }
  v604 = (unint64_t *)(*((_QWORD *)&v1545 + 1) + 16);
  do
    v605 = __ldxr(v604);
  while (__stxr(v605 + 1, v604));
  v606 = *((_QWORD *)&v1545 + 1);
  *((_QWORD *)&v1547 + 1) = v602;
  v1548 = v603;
  if ((_QWORD)v1545)
    v607 = v1545 + 16;
  else
    v607 = 0;
  if (!*((_QWORD *)&v1545 + 1))
  {
    v602 = v1545;
LABEL_970:
    v610 = 0;
    v1549 = &off_24EC380F8;
    v1550 = v607;
    goto LABEL_971;
  }
  v608 = (unint64_t *)(*((_QWORD *)&v1545 + 1) + 16);
  do
    v609 = __ldxr(v608);
  while (__stxr(v609 + 1, v608));
  v610 = *((_QWORD *)&v1545 + 1);
  v602 = v1545;
  v1549 = &off_24EC380F8;
  *(_QWORD *)&v1550 = v607;
  *((_QWORD *)&v1550 + 1) = v606;
  if (*((_QWORD *)&v1545 + 1))
  {
    v611 = (unint64_t *)(*((_QWORD *)&v1545 + 1) + 16);
    do
      v612 = __ldxr(v611);
    while (__stxr(v612 + 1, v611));
  }
LABEL_971:
  if (v602)
    v613 = v602 + 24;
  else
    v613 = 0;
  v1551 = &off_24EC2E850;
  *(_QWORD *)&v1552 = v613;
  *((_QWORD *)&v1552 + 1) = v610;
  if ((SHIBYTE(v1514[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1527[2]) & 0x80000000) == 0)
      goto LABEL_976;
LABEL_979:
    operator delete(v1527[0]);
    v614 = (std::__shared_weak_count *)v1436[1];
    if (!v1436[1])
      goto LABEL_984;
    goto LABEL_980;
  }
  operator delete(v1514[0]);
  if (SHIBYTE(v1527[2]) < 0)
    goto LABEL_979;
LABEL_976:
  v614 = (std::__shared_weak_count *)v1436[1];
  if (!v1436[1])
    goto LABEL_984;
LABEL_980:
  v615 = (unint64_t *)&v614->__shared_owners_;
  do
    v616 = __ldaxr(v615);
  while (__stlxr(v616 - 1, v615));
  if (!v616)
  {
    ((void (*)(std::__shared_weak_count *))v614->__on_zero_shared)(v614);
    std::__shared_weak_count::__release_weak(v614);
  }
LABEL_984:
  v617 = (std::__shared_weak_count *)v1449[1];
  if (!v1449[1])
    goto LABEL_988;
  v618 = (unint64_t *)((char *)v1449[1] + 8);
  do
    v619 = __ldaxr(v618);
  while (__stlxr(v619 - 1, v618));
  if (!v619)
  {
    ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
    std::__shared_weak_count::__release_weak(v617);
    if ((SHIBYTE(v1488[2]) & 0x80000000) == 0)
    {
LABEL_989:
      if ((SHIBYTE(v1501[2]) & 0x80000000) == 0)
        goto LABEL_990;
LABEL_994:
      operator delete(v1501[0]);
      if (v565)
        goto LABEL_996;
      goto LABEL_995;
    }
  }
  else
  {
LABEL_988:
    if ((SHIBYTE(v1488[2]) & 0x80000000) == 0)
      goto LABEL_989;
  }
  operator delete(v1488[0]);
  if (SHIBYTE(v1501[2]) < 0)
    goto LABEL_994;
LABEL_990:
  if (v565)
    goto LABEL_996;
LABEL_995:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_996:
  v621 = *(void **)v4;
  v620 = *(unint64_t **)(v4 + 8);
  if (v620)
  {
    v622 = v620 + 1;
    do
      v623 = __ldxr(v622);
    while (__stxr(v623 + 1, v622));
  }
  v624 = *v2;
  v625 = (unint64_t *)v2[1];
  if (*v2)
    v626 = *v2 + 672;
  else
    v626 = 0;
  v1286 = (std::__shared_weak_count *)v2[1];
  if (v625)
  {
    v627 = v625 + 1;
    do
      v628 = __ldxr(v627);
    while (__stxr(v628 + 1, v627));
  }
  if (*(char *)(v626 + 31) < 0)
  {
    sub_223197FA4(v1488, *(void **)(v626 + 8), *(_QWORD *)(v626 + 16));
  }
  else
  {
    v629 = *(_OWORD *)(v626 + 8);
    v1488[2] = *(void **)(v626 + 24);
    *(_OWORD *)v1488 = v629;
  }
  if (*(char *)(v624 + 727) < 0)
  {
    sub_223197FA4(v1475, *(void **)(v624 + 704), *(_QWORD *)(v624 + 712));
  }
  else
  {
    *(_OWORD *)v1475 = *(_OWORD *)(v624 + 704);
    v1475[2] = *(void **)(v624 + 720);
  }
  v1436[0] = v621;
  v1436[1] = v620;
  v1586[0] = (void *)v626;
  v1586[1] = v625;
  if (v625)
  {
    v630 = v625 + 1;
    do
      v631 = __ldxr(v630);
    while (__stxr(v631 + 1, v630));
  }
  if (SHIBYTE(v1488[2]) < 0)
  {
    sub_223197FA4(v1514, v1488[0], (unint64_t)v1488[1]);
  }
  else
  {
    *(_OWORD *)v1514 = *(_OWORD *)v1488;
    v1514[2] = v1488[2];
  }
  if (SHIBYTE(v1475[2]) < 0)
  {
    sub_223197FA4(v1501, v1475[0], (unint64_t)v1475[1]);
  }
  else
  {
    *(_OWORD *)v1501 = *(_OWORD *)v1475;
    v1501[2] = v1475[2];
  }
  *(void **)((char *)v1581 + 7) = *(void **)((char *)&v1488[1] + 7);
  v632 = v1488[0];
  v1581[0] = v1488[1];
  v633 = HIBYTE(v1488[2]);
  memset(v1488, 0, sizeof(v1488));
  v1583[0] = v1581[0];
  *(void **)((char *)v1583 + 7) = *(void **)((char *)v1581 + 7);
  *(void **)((char *)v1581 + 7) = 0;
  v1581[0] = 0;
  v1449[0] = v621;
  v1449[1] = v620;
  if (v620)
  {
    v634 = v620 + 1;
    do
      v635 = __ldxr(v634);
    while (__stxr(v635 + 1, v634));
  }
  v636 = (char *)operator new();
  v1585[0] = v1583[0];
  *(void **)((char *)v1585 + 7) = *(void **)((char *)v1583 + 7);
  v1583[0] = 0;
  *(void **)((char *)v1583 + 7) = 0;
  v637 = *(_OWORD *)v1449;
  v1449[0] = 0;
  v1449[1] = 0;
  v636[8] = 1;
  *((_QWORD *)v636 + 4) = 0;
  *((_QWORD *)v636 + 5) = 0;
  *(_QWORD *)v636 = &off_24EC3DB30;
  *((_QWORD *)v636 + 2) = &unk_24EC3DBA8;
  *((_QWORD *)v636 + 3) = &unk_24EC3DBE8;
  v638 = v1585[0];
  *(void **)(v636 + 63) = *(void **)((char *)v1585 + 7);
  *((_QWORD *)v636 + 6) = v632;
  *((_QWORD *)v636 + 7) = v638;
  v636[71] = v633;
  v1585[0] = 0;
  *(void **)((char *)v1585 + 7) = 0;
  *(_OWORD *)(v636 + 72) = v637;
  v1462[1] = 0;
  v1462[0] = 0;
  v639 = (_QWORD *)operator new();
  *v639 = &off_24EC3DCD0;
  v639[1] = v626;
  v639[2] = v625;
  v1586[1] = 0;
  v1586[0] = 0;
  *((_QWORD *)v636 + 18) = 0;
  *((_QWORD *)v636 + 11) = v639;
  *((_QWORD *)v636 + 12) = v636 + 96;
  *((_QWORD *)v636 + 13) = v636 + 96;
  *((_QWORD *)v636 + 14) = 0;
  *((_QWORD *)v636 + 15) = v636 + 120;
  *((_QWORD *)v636 + 16) = v636 + 120;
  *((_QWORD *)v636 + 17) = 0;
  if (!*((_QWORD *)v636 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v640 = (std::__shared_weak_count *)operator new();
  v640->__shared_owners_ = 0;
  v641 = (unint64_t *)&v640->__shared_owners_;
  v640->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3E170;
  v640->__shared_weak_owners_ = 0;
  v640[1].__vftable = (std::__shared_weak_count_vtbl *)v636;
  v642 = (std::__shared_weak_count *)*((_QWORD *)v636 + 5);
  if (v642)
  {
    if (v642->__shared_owners_ != -1)
      goto LABEL_1038;
    do
      v643 = __ldxr(v641);
    while (__stxr(v643 + 1, v641));
    v644 = (unint64_t *)&v640->__shared_weak_owners_;
    do
      v645 = __ldxr(v644);
    while (__stxr(v645 + 1, v644));
    *((_QWORD *)v636 + 4) = v636;
    *((_QWORD *)v636 + 5) = v640;
    std::__shared_weak_count::__release_weak(v642);
  }
  else
  {
    do
      v646 = __ldxr(v641);
    while (__stxr(v646 + 1, v641));
    v647 = (unint64_t *)&v640->__shared_weak_owners_;
    do
      v648 = __ldxr(v647);
    while (__stxr(v648 + 1, v647));
    *((_QWORD *)v636 + 4) = v636;
    *((_QWORD *)v636 + 5) = v640;
  }
  do
    v649 = __ldaxr(v641);
  while (__stlxr(v649 - 1, v641));
  if (!v649)
  {
    ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
    std::__shared_weak_count::__release_weak(v640);
  }
LABEL_1038:
  v650 = (std::__shared_weak_count *)v1462[1];
  if (v1462[1])
  {
    v651 = (unint64_t *)((char *)v1462[1] + 8);
    do
      v652 = __ldaxr(v651);
    while (__stlxr(v652 - 1, v651));
    if (!v652)
    {
      ((void (*)(std::__shared_weak_count *))v650->__on_zero_shared)(v650);
      std::__shared_weak_count::__release_weak(v650);
    }
  }
  v1462[0] = v636;
  v1462[1] = v640;
  v653 = (std::__shared_weak_count *)v1449[1];
  if (v1449[1])
  {
    v654 = (unint64_t *)((char *)v1449[1] + 8);
    do
      v655 = __ldaxr(v654);
    while (__stlxr(v655 - 1, v654));
    if (!v655)
    {
      ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
      std::__shared_weak_count::__release_weak(v653);
    }
  }
  v656 = *(_OWORD *)v1436;
  v1436[0] = 0;
  v1436[1] = 0;
  *(_OWORD *)&v1527[1] = *(_OWORD *)v1514;
  v1527[0] = &off_24EC38168;
  v1528 = v1514[2];
  memset(v1514, 0, sizeof(v1514));
  v1529 = *(_OWORD *)v1501;
  v657 = v1501[2];
  memset(v1501, 0, sizeof(v1501));
  v1531 = v656;
  v1449[1] = 0;
  v1449[0] = 0;
  v658 = v1462[0];
  v659 = (char *)v1462[1];
  v1530 = v657;
  v1532 = *(_OWORD *)v1462;
  v1462[0] = 0;
  v1462[1] = 0;
  if (*((_QWORD *)&v1532 + 1))
  {
    v660 = (unint64_t *)(v659 + 16);
    do
      v661 = __ldxr(v660);
    while (__stxr(v661 + 1, v660));
  }
  v1533 = &off_24EC38198;
  v662 = (_QWORD *)operator new();
  *v662 = &off_24EC3E1C0;
  v662[1] = v658;
  v662[2] = v659;
  *(_QWORD *)&v1534 = v662;
  v664 = *((_QWORD *)&v1532 + 1);
  v663 = v1532;
  if (!*((_QWORD *)&v1532 + 1))
  {
    *((_QWORD *)&v1534 + 1) = v1532;
    v1535 = 0;
    if ((_QWORD)v1532)
      v668 = v1532 + 16;
    else
      v668 = 0;
    goto LABEL_1068;
  }
  v665 = (unint64_t *)(*((_QWORD *)&v1532 + 1) + 16);
  do
    v666 = __ldxr(v665);
  while (__stxr(v666 + 1, v665));
  v667 = *((_QWORD *)&v1532 + 1);
  *((_QWORD *)&v1534 + 1) = v663;
  v1535 = v664;
  if ((_QWORD)v1532)
    v668 = v1532 + 16;
  else
    v668 = 0;
  if (!*((_QWORD *)&v1532 + 1))
  {
    v663 = v1532;
LABEL_1068:
    v671 = 0;
    v1536 = &off_24EC380F8;
    v1537 = v668;
    goto LABEL_1069;
  }
  v669 = (unint64_t *)(*((_QWORD *)&v1532 + 1) + 16);
  do
    v670 = __ldxr(v669);
  while (__stxr(v670 + 1, v669));
  v671 = *((_QWORD *)&v1532 + 1);
  v663 = v1532;
  v1536 = &off_24EC380F8;
  *(_QWORD *)&v1537 = v668;
  *((_QWORD *)&v1537 + 1) = v667;
  if (*((_QWORD *)&v1532 + 1))
  {
    v672 = (unint64_t *)(*((_QWORD *)&v1532 + 1) + 16);
    do
      v673 = __ldxr(v672);
    while (__stxr(v673 + 1, v672));
  }
LABEL_1069:
  if (v663)
    v674 = v663 + 24;
  else
    v674 = 0;
  v1538 = &off_24EC2E850;
  *(_QWORD *)&v1539 = v674;
  *((_QWORD *)&v1539 + 1) = v671;
  if ((SHIBYTE(v1501[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1514[2]) & 0x80000000) == 0)
      goto LABEL_1074;
LABEL_1077:
    operator delete(v1514[0]);
    v675 = (std::__shared_weak_count *)v1586[1];
    if (!v1586[1])
      goto LABEL_1082;
    goto LABEL_1078;
  }
  operator delete(v1501[0]);
  if (SHIBYTE(v1514[2]) < 0)
    goto LABEL_1077;
LABEL_1074:
  v675 = (std::__shared_weak_count *)v1586[1];
  if (!v1586[1])
    goto LABEL_1082;
LABEL_1078:
  v676 = (unint64_t *)&v675->__shared_owners_;
  do
    v677 = __ldaxr(v676);
  while (__stlxr(v677 - 1, v676));
  if (!v677)
  {
    ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
    std::__shared_weak_count::__release_weak(v675);
  }
LABEL_1082:
  v678 = (std::__shared_weak_count *)v1436[1];
  if (!v1436[1])
    goto LABEL_1086;
  v679 = (unint64_t *)((char *)v1436[1] + 8);
  do
    v680 = __ldaxr(v679);
  while (__stlxr(v680 - 1, v679));
  if (!v680)
  {
    ((void (*)(std::__shared_weak_count *))v678->__on_zero_shared)(v678);
    std::__shared_weak_count::__release_weak(v678);
    if ((SHIBYTE(v1475[2]) & 0x80000000) == 0)
    {
LABEL_1087:
      if ((SHIBYTE(v1488[2]) & 0x80000000) == 0)
        goto LABEL_1088;
LABEL_1092:
      operator delete(v1488[0]);
      if (v626)
        goto LABEL_1094;
      goto LABEL_1093;
    }
  }
  else
  {
LABEL_1086:
    if ((SHIBYTE(v1475[2]) & 0x80000000) == 0)
      goto LABEL_1087;
  }
  operator delete(v1475[0]);
  if (SHIBYTE(v1488[2]) < 0)
    goto LABEL_1092;
LABEL_1088:
  if (v626)
    goto LABEL_1094;
LABEL_1093:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_1094:
  v682 = *(void **)v4;
  v681 = *(unint64_t **)(v4 + 8);
  if (v681)
  {
    v683 = v681 + 1;
    do
      v684 = __ldxr(v683);
    while (__stxr(v684 + 1, v683));
  }
  v685 = *v2;
  v686 = (unint64_t *)v2[1];
  if (*v2)
    v687 = *v2 + 728;
  else
    v687 = 0;
  v1285 = (std::__shared_weak_count *)v2[1];
  if (v686)
  {
    v688 = v686 + 1;
    do
      v689 = __ldxr(v688);
    while (__stxr(v689 + 1, v688));
  }
  if (*(char *)(v687 + 31) < 0)
  {
    sub_223197FA4(v1475, *(void **)(v687 + 8), *(_QWORD *)(v687 + 16));
  }
  else
  {
    v690 = *(_OWORD *)(v687 + 8);
    v1475[2] = *(void **)(v687 + 24);
    *(_OWORD *)v1475 = v690;
  }
  if (*(char *)(v685 + 783) < 0)
  {
    sub_223197FA4(v1462, *(void **)(v685 + 760), *(_QWORD *)(v685 + 768));
  }
  else
  {
    *(_OWORD *)v1462 = *(_OWORD *)(v685 + 760);
    v1462[2] = *(void **)(v685 + 776);
  }
  v1586[0] = v682;
  v1586[1] = v681;
  v1585[0] = (void *)v687;
  v1585[1] = v686;
  if (v686)
  {
    v691 = v686 + 1;
    do
      v692 = __ldxr(v691);
    while (__stxr(v692 + 1, v691));
  }
  if (SHIBYTE(v1475[2]) < 0)
  {
    sub_223197FA4(v1501, v1475[0], (unint64_t)v1475[1]);
  }
  else
  {
    *(_OWORD *)v1501 = *(_OWORD *)v1475;
    v1501[2] = v1475[2];
  }
  if (SHIBYTE(v1462[2]) < 0)
  {
    sub_223197FA4(v1488, v1462[0], (unint64_t)v1462[1]);
  }
  else
  {
    *(_OWORD *)v1488 = *(_OWORD *)v1462;
    v1488[2] = v1462[2];
  }
  *(void **)((char *)&v1589 + 7) = *(void **)((char *)&v1475[1] + 7);
  v693 = v1475[0];
  v694 = v1475[1];
  BYTE7(v1589) = HIBYTE(v1475[1]);
  v695 = HIBYTE(v1475[2]);
  memset(v1475, 0, sizeof(v1475));
  v1581[0] = v694;
  *(void **)((char *)v1581 + 7) = *(void **)((char *)&v1589 + 7);
  *(_QWORD *)((char *)&v1589 + 7) = 0;
  *(_QWORD *)&v1589 = 0;
  v1436[0] = v682;
  v1436[1] = v681;
  if (v681)
  {
    v696 = v681 + 1;
    do
      v697 = __ldxr(v696);
    while (__stxr(v697 + 1, v696));
  }
  v698 = (char *)operator new();
  v1583[0] = v1581[0];
  *(void **)((char *)v1583 + 7) = *(void **)((char *)v1581 + 7);
  v1581[0] = 0;
  *(void **)((char *)v1581 + 7) = 0;
  v699 = *(_OWORD *)v1436;
  v1436[0] = 0;
  v1436[1] = 0;
  v698[8] = 1;
  *((_QWORD *)v698 + 4) = 0;
  *((_QWORD *)v698 + 5) = 0;
  *(_QWORD *)v698 = &off_24EC3E238;
  *((_QWORD *)v698 + 2) = &unk_24EC3E2B0;
  *((_QWORD *)v698 + 3) = &unk_24EC3E2F0;
  v700 = v1583[0];
  *(void **)(v698 + 63) = *(void **)((char *)v1583 + 7);
  *((_QWORD *)v698 + 6) = v693;
  *((_QWORD *)v698 + 7) = v700;
  v698[71] = v695;
  v1583[0] = 0;
  *(void **)((char *)v1583 + 7) = 0;
  *(_OWORD *)(v698 + 72) = v699;
  v1449[1] = 0;
  v1449[0] = 0;
  v701 = (_QWORD *)operator new();
  *v701 = &off_24EC3E3D8;
  v701[1] = v687;
  v701[2] = v686;
  v1585[1] = 0;
  v1585[0] = 0;
  *((_QWORD *)v698 + 18) = 0;
  *((_QWORD *)v698 + 11) = v701;
  *((_QWORD *)v698 + 12) = v698 + 96;
  *((_QWORD *)v698 + 13) = v698 + 96;
  *((_QWORD *)v698 + 14) = 0;
  *((_QWORD *)v698 + 15) = v698 + 120;
  *((_QWORD *)v698 + 16) = v698 + 120;
  *((_QWORD *)v698 + 17) = 0;
  if (!*((_QWORD *)v698 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v702 = (std::__shared_weak_count *)operator new();
  v702->__shared_owners_ = 0;
  v703 = (unint64_t *)&v702->__shared_owners_;
  v702->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3E878;
  v702->__shared_weak_owners_ = 0;
  v702[1].__vftable = (std::__shared_weak_count_vtbl *)v698;
  v704 = (std::__shared_weak_count *)*((_QWORD *)v698 + 5);
  if (v704)
  {
    if (v704->__shared_owners_ != -1)
      goto LABEL_1136;
    do
      v705 = __ldxr(v703);
    while (__stxr(v705 + 1, v703));
    v706 = (unint64_t *)&v702->__shared_weak_owners_;
    do
      v707 = __ldxr(v706);
    while (__stxr(v707 + 1, v706));
    *((_QWORD *)v698 + 4) = v698;
    *((_QWORD *)v698 + 5) = v702;
    std::__shared_weak_count::__release_weak(v704);
  }
  else
  {
    do
      v708 = __ldxr(v703);
    while (__stxr(v708 + 1, v703));
    v709 = (unint64_t *)&v702->__shared_weak_owners_;
    do
      v710 = __ldxr(v709);
    while (__stxr(v710 + 1, v709));
    *((_QWORD *)v698 + 4) = v698;
    *((_QWORD *)v698 + 5) = v702;
  }
  do
    v711 = __ldaxr(v703);
  while (__stlxr(v711 - 1, v703));
  if (!v711)
  {
    ((void (*)(std::__shared_weak_count *))v702->__on_zero_shared)(v702);
    std::__shared_weak_count::__release_weak(v702);
  }
LABEL_1136:
  v712 = (std::__shared_weak_count *)v1449[1];
  if (v1449[1])
  {
    v713 = (unint64_t *)((char *)v1449[1] + 8);
    do
      v714 = __ldaxr(v713);
    while (__stlxr(v714 - 1, v713));
    if (!v714)
    {
      ((void (*)(std::__shared_weak_count *))v712->__on_zero_shared)(v712);
      std::__shared_weak_count::__release_weak(v712);
    }
  }
  v1449[0] = v698;
  v1449[1] = v702;
  v715 = (std::__shared_weak_count *)v1436[1];
  if (v1436[1])
  {
    v716 = (unint64_t *)((char *)v1436[1] + 8);
    do
      v717 = __ldaxr(v716);
    while (__stlxr(v717 - 1, v716));
    if (!v717)
    {
      ((void (*)(std::__shared_weak_count *))v715->__on_zero_shared)(v715);
      std::__shared_weak_count::__release_weak(v715);
    }
  }
  v718 = *(_OWORD *)v1586;
  v1586[0] = 0;
  v1586[1] = 0;
  *(_OWORD *)&v1514[1] = *(_OWORD *)v1501;
  v1514[0] = &off_24EC381D0;
  v1515 = v1501[2];
  memset(v1501, 0, sizeof(v1501));
  v1516 = *(_OWORD *)v1488;
  v719 = v1488[2];
  memset(v1488, 0, sizeof(v1488));
  v1518 = v718;
  v1436[1] = 0;
  v1436[0] = 0;
  v720 = v1449[0];
  v721 = (char *)v1449[1];
  v1517 = v719;
  v1519 = *(_OWORD *)v1449;
  v1449[0] = 0;
  v1449[1] = 0;
  if (*((_QWORD *)&v1519 + 1))
  {
    v722 = (unint64_t *)(v721 + 16);
    do
      v723 = __ldxr(v722);
    while (__stxr(v723 + 1, v722));
  }
  v1520 = &off_24EC38200;
  v724 = (_QWORD *)operator new();
  *v724 = &off_24EC3E8C8;
  v724[1] = v720;
  v724[2] = v721;
  *(_QWORD *)&v1521 = v724;
  v726 = *((_QWORD *)&v1519 + 1);
  v725 = v1519;
  if (!*((_QWORD *)&v1519 + 1))
  {
    *((_QWORD *)&v1521 + 1) = v1519;
    v1522 = 0;
    if ((_QWORD)v1519)
      v730 = v1519 + 16;
    else
      v730 = 0;
    goto LABEL_1166;
  }
  v727 = (unint64_t *)(*((_QWORD *)&v1519 + 1) + 16);
  do
    v728 = __ldxr(v727);
  while (__stxr(v728 + 1, v727));
  v729 = *((_QWORD *)&v1519 + 1);
  *((_QWORD *)&v1521 + 1) = v725;
  v1522 = v726;
  if ((_QWORD)v1519)
    v730 = v1519 + 16;
  else
    v730 = 0;
  if (!*((_QWORD *)&v1519 + 1))
  {
    v725 = v1519;
LABEL_1166:
    v733 = 0;
    v1523 = &off_24EC380F8;
    v1524 = v730;
    goto LABEL_1167;
  }
  v731 = (unint64_t *)(*((_QWORD *)&v1519 + 1) + 16);
  do
    v732 = __ldxr(v731);
  while (__stxr(v732 + 1, v731));
  v733 = *((_QWORD *)&v1519 + 1);
  v725 = v1519;
  v1523 = &off_24EC380F8;
  *(_QWORD *)&v1524 = v730;
  *((_QWORD *)&v1524 + 1) = v729;
  if (*((_QWORD *)&v1519 + 1))
  {
    v734 = (unint64_t *)(*((_QWORD *)&v1519 + 1) + 16);
    do
      v735 = __ldxr(v734);
    while (__stxr(v735 + 1, v734));
  }
LABEL_1167:
  if (v725)
    v736 = v725 + 24;
  else
    v736 = 0;
  v1525 = &off_24EC2E850;
  *(_QWORD *)&v1526 = v736;
  *((_QWORD *)&v1526 + 1) = v733;
  if ((SHIBYTE(v1488[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1501[2]) & 0x80000000) == 0)
      goto LABEL_1172;
LABEL_1175:
    operator delete(v1501[0]);
    v737 = (std::__shared_weak_count *)v1585[1];
    if (!v1585[1])
      goto LABEL_1180;
    goto LABEL_1176;
  }
  operator delete(v1488[0]);
  if (SHIBYTE(v1501[2]) < 0)
    goto LABEL_1175;
LABEL_1172:
  v737 = (std::__shared_weak_count *)v1585[1];
  if (!v1585[1])
    goto LABEL_1180;
LABEL_1176:
  v738 = (unint64_t *)&v737->__shared_owners_;
  do
    v739 = __ldaxr(v738);
  while (__stlxr(v739 - 1, v738));
  if (!v739)
  {
    ((void (*)(std::__shared_weak_count *))v737->__on_zero_shared)(v737);
    std::__shared_weak_count::__release_weak(v737);
  }
LABEL_1180:
  v740 = (std::__shared_weak_count *)v1586[1];
  if (!v1586[1])
    goto LABEL_1184;
  v741 = (unint64_t *)((char *)v1586[1] + 8);
  do
    v742 = __ldaxr(v741);
  while (__stlxr(v742 - 1, v741));
  if (!v742)
  {
    ((void (*)(std::__shared_weak_count *))v740->__on_zero_shared)(v740);
    std::__shared_weak_count::__release_weak(v740);
    if ((SHIBYTE(v1462[2]) & 0x80000000) == 0)
    {
LABEL_1185:
      if ((SHIBYTE(v1475[2]) & 0x80000000) == 0)
        goto LABEL_1186;
LABEL_1190:
      operator delete(v1475[0]);
      if (v687)
        goto LABEL_1192;
      goto LABEL_1191;
    }
  }
  else
  {
LABEL_1184:
    if ((SHIBYTE(v1462[2]) & 0x80000000) == 0)
      goto LABEL_1185;
  }
  operator delete(v1462[0]);
  if (SHIBYTE(v1475[2]) < 0)
    goto LABEL_1190;
LABEL_1186:
  if (v687)
    goto LABEL_1192;
LABEL_1191:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_1192:
  v744 = *(void **)v4;
  v743 = *(unint64_t **)(v4 + 8);
  if (v743)
  {
    v745 = v743 + 1;
    do
      v746 = __ldxr(v745);
    while (__stxr(v746 + 1, v745));
  }
  v747 = *v2;
  v748 = (unint64_t *)v2[1];
  if (*v2)
    v749 = *v2 + 784;
  else
    v749 = 0;
  v1284 = (std::__shared_weak_count *)v2[1];
  if (v748)
  {
    v750 = v748 + 1;
    do
      v751 = __ldxr(v750);
    while (__stxr(v751 + 1, v750));
  }
  if (*(char *)(v749 + 31) < 0)
  {
    sub_223197FA4(v1462, *(void **)(v749 + 8), *(_QWORD *)(v749 + 16));
  }
  else
  {
    v752 = *(_OWORD *)(v749 + 8);
    v1462[2] = *(void **)(v749 + 24);
    *(_OWORD *)v1462 = v752;
  }
  if (*(char *)(v747 + 839) < 0)
  {
    sub_223197FA4(v1449, *(void **)(v747 + 816), *(_QWORD *)(v747 + 824));
  }
  else
  {
    *(_OWORD *)v1449 = *(_OWORD *)(v747 + 816);
    v1449[2] = *(void **)(v747 + 832);
  }
  v1585[0] = v744;
  v1585[1] = v743;
  v1583[0] = (void *)v749;
  v1583[1] = v748;
  if (v748)
  {
    v753 = v748 + 1;
    do
      v754 = __ldxr(v753);
    while (__stxr(v754 + 1, v753));
  }
  if (SHIBYTE(v1462[2]) < 0)
  {
    sub_223197FA4(v1488, v1462[0], (unint64_t)v1462[1]);
  }
  else
  {
    *(_OWORD *)v1488 = *(_OWORD *)v1462;
    v1488[2] = v1462[2];
  }
  if (SHIBYTE(v1449[2]) < 0)
  {
    sub_223197FA4(v1475, v1449[0], (unint64_t)v1449[1]);
  }
  else
  {
    *(_OWORD *)v1475 = *(_OWORD *)v1449;
    v1475[2] = v1449[2];
  }
  *(void **)((char *)&v1587 + 7) = *(void **)((char *)&v1462[1] + 7);
  v755 = v1462[0];
  v756 = v1462[1];
  BYTE7(v1587) = HIBYTE(v1462[1]);
  v757 = HIBYTE(v1462[2]);
  memset(v1462, 0, sizeof(v1462));
  *(_QWORD *)&v1589 = v756;
  *(_QWORD *)((char *)&v1589 + 7) = *(_QWORD *)((char *)&v1587 + 7);
  *(_QWORD *)((char *)&v1587 + 7) = 0;
  *(_QWORD *)&v1587 = 0;
  v1586[0] = v744;
  v1586[1] = v743;
  if (v743)
  {
    v758 = v743 + 1;
    do
      v759 = __ldxr(v758);
    while (__stxr(v759 + 1, v758));
  }
  v760 = (char *)operator new();
  v1581[0] = (void *)v1589;
  *(void **)((char *)v1581 + 7) = *(void **)((char *)&v1589 + 7);
  *(_QWORD *)&v1589 = 0;
  *(_QWORD *)((char *)&v1589 + 7) = 0;
  v761 = *(_OWORD *)v1586;
  v1586[0] = 0;
  v1586[1] = 0;
  v760[8] = 1;
  *((_QWORD *)v760 + 4) = 0;
  *((_QWORD *)v760 + 5) = 0;
  *(_QWORD *)v760 = &off_24EC3E940;
  *((_QWORD *)v760 + 2) = &unk_24EC3E9B8;
  *((_QWORD *)v760 + 3) = &unk_24EC3E9F8;
  v762 = v1581[0];
  *(void **)(v760 + 63) = *(void **)((char *)v1581 + 7);
  *((_QWORD *)v760 + 6) = v755;
  *((_QWORD *)v760 + 7) = v762;
  v760[71] = v757;
  v1581[0] = 0;
  *(void **)((char *)v1581 + 7) = 0;
  *(_OWORD *)(v760 + 72) = v761;
  v1436[1] = 0;
  v1436[0] = 0;
  v763 = (_QWORD *)operator new();
  *v763 = &off_24EC3EAE0;
  v763[1] = v749;
  v763[2] = v748;
  v1583[1] = 0;
  v1583[0] = 0;
  *((_QWORD *)v760 + 18) = 0;
  *((_QWORD *)v760 + 11) = v763;
  *((_QWORD *)v760 + 12) = v760 + 96;
  *((_QWORD *)v760 + 13) = v760 + 96;
  *((_QWORD *)v760 + 14) = 0;
  *((_QWORD *)v760 + 15) = v760 + 120;
  *((_QWORD *)v760 + 16) = v760 + 120;
  *((_QWORD *)v760 + 17) = 0;
  if (!*((_QWORD *)v760 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v764 = (std::__shared_weak_count *)operator new();
  v764->__shared_owners_ = 0;
  v765 = (unint64_t *)&v764->__shared_owners_;
  v764->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3EF80;
  v764->__shared_weak_owners_ = 0;
  v764[1].__vftable = (std::__shared_weak_count_vtbl *)v760;
  v766 = (std::__shared_weak_count *)*((_QWORD *)v760 + 5);
  if (v766)
  {
    if (v766->__shared_owners_ != -1)
      goto LABEL_1234;
    do
      v767 = __ldxr(v765);
    while (__stxr(v767 + 1, v765));
    v768 = (unint64_t *)&v764->__shared_weak_owners_;
    do
      v769 = __ldxr(v768);
    while (__stxr(v769 + 1, v768));
    *((_QWORD *)v760 + 4) = v760;
    *((_QWORD *)v760 + 5) = v764;
    std::__shared_weak_count::__release_weak(v766);
  }
  else
  {
    do
      v770 = __ldxr(v765);
    while (__stxr(v770 + 1, v765));
    v771 = (unint64_t *)&v764->__shared_weak_owners_;
    do
      v772 = __ldxr(v771);
    while (__stxr(v772 + 1, v771));
    *((_QWORD *)v760 + 4) = v760;
    *((_QWORD *)v760 + 5) = v764;
  }
  do
    v773 = __ldaxr(v765);
  while (__stlxr(v773 - 1, v765));
  if (!v773)
  {
    ((void (*)(std::__shared_weak_count *))v764->__on_zero_shared)(v764);
    std::__shared_weak_count::__release_weak(v764);
  }
LABEL_1234:
  v774 = (std::__shared_weak_count *)v1436[1];
  if (v1436[1])
  {
    v775 = (unint64_t *)((char *)v1436[1] + 8);
    do
      v776 = __ldaxr(v775);
    while (__stlxr(v776 - 1, v775));
    if (!v776)
    {
      ((void (*)(std::__shared_weak_count *))v774->__on_zero_shared)(v774);
      std::__shared_weak_count::__release_weak(v774);
    }
  }
  v1436[0] = v760;
  v1436[1] = v764;
  v777 = (std::__shared_weak_count *)v1586[1];
  if (v1586[1])
  {
    v778 = (unint64_t *)((char *)v1586[1] + 8);
    do
      v779 = __ldaxr(v778);
    while (__stlxr(v779 - 1, v778));
    if (!v779)
    {
      ((void (*)(std::__shared_weak_count *))v777->__on_zero_shared)(v777);
      std::__shared_weak_count::__release_weak(v777);
    }
  }
  v780 = *(_OWORD *)v1585;
  v1585[0] = 0;
  v1585[1] = 0;
  *(_OWORD *)&v1501[1] = *(_OWORD *)v1488;
  v1501[0] = &off_24EC38238;
  v1502 = v1488[2];
  memset(v1488, 0, sizeof(v1488));
  v1503 = *(_OWORD *)v1475;
  v781 = v1475[2];
  memset(v1475, 0, sizeof(v1475));
  v1505 = v780;
  v1586[1] = 0;
  v1586[0] = 0;
  v782 = v1436[0];
  v783 = (char *)v1436[1];
  v1504 = v781;
  v1506 = *(_OWORD *)v1436;
  v1436[0] = 0;
  v1436[1] = 0;
  if (*((_QWORD *)&v1506 + 1))
  {
    v784 = (unint64_t *)(v783 + 16);
    do
      v785 = __ldxr(v784);
    while (__stxr(v785 + 1, v784));
  }
  v1507 = &off_24EC38268;
  v786 = (_QWORD *)operator new();
  *v786 = &off_24EC3EFD0;
  v786[1] = v782;
  v786[2] = v783;
  *(_QWORD *)&v1508 = v786;
  v788 = *((_QWORD *)&v1506 + 1);
  v787 = v1506;
  if (!*((_QWORD *)&v1506 + 1))
  {
    *((_QWORD *)&v1508 + 1) = v1506;
    v1509 = 0;
    if ((_QWORD)v1506)
      v792 = v1506 + 16;
    else
      v792 = 0;
    goto LABEL_1264;
  }
  v789 = (unint64_t *)(*((_QWORD *)&v1506 + 1) + 16);
  do
    v790 = __ldxr(v789);
  while (__stxr(v790 + 1, v789));
  v791 = *((_QWORD *)&v1506 + 1);
  *((_QWORD *)&v1508 + 1) = v787;
  v1509 = v788;
  if ((_QWORD)v1506)
    v792 = v1506 + 16;
  else
    v792 = 0;
  if (!*((_QWORD *)&v1506 + 1))
  {
    v787 = v1506;
LABEL_1264:
    v795 = 0;
    v1510 = &off_24EC380F8;
    v1511 = v792;
    goto LABEL_1265;
  }
  v793 = (unint64_t *)(*((_QWORD *)&v1506 + 1) + 16);
  do
    v794 = __ldxr(v793);
  while (__stxr(v794 + 1, v793));
  v795 = *((_QWORD *)&v1506 + 1);
  v787 = v1506;
  v1510 = &off_24EC380F8;
  *(_QWORD *)&v1511 = v792;
  *((_QWORD *)&v1511 + 1) = v791;
  if (*((_QWORD *)&v1506 + 1))
  {
    v796 = (unint64_t *)(*((_QWORD *)&v1506 + 1) + 16);
    do
      v797 = __ldxr(v796);
    while (__stxr(v797 + 1, v796));
  }
LABEL_1265:
  if (v787)
    v798 = v787 + 24;
  else
    v798 = 0;
  v1512 = &off_24EC2E850;
  *(_QWORD *)&v1513 = v798;
  *((_QWORD *)&v1513 + 1) = v795;
  if ((SHIBYTE(v1475[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1488[2]) & 0x80000000) == 0)
      goto LABEL_1270;
LABEL_1273:
    operator delete(v1488[0]);
    v799 = (std::__shared_weak_count *)v1583[1];
    if (!v1583[1])
      goto LABEL_1278;
    goto LABEL_1274;
  }
  operator delete(v1475[0]);
  if (SHIBYTE(v1488[2]) < 0)
    goto LABEL_1273;
LABEL_1270:
  v799 = (std::__shared_weak_count *)v1583[1];
  if (!v1583[1])
    goto LABEL_1278;
LABEL_1274:
  v800 = (unint64_t *)&v799->__shared_owners_;
  do
    v801 = __ldaxr(v800);
  while (__stlxr(v801 - 1, v800));
  if (!v801)
  {
    ((void (*)(std::__shared_weak_count *))v799->__on_zero_shared)(v799);
    std::__shared_weak_count::__release_weak(v799);
  }
LABEL_1278:
  v802 = (std::__shared_weak_count *)v1585[1];
  if (!v1585[1])
    goto LABEL_1282;
  v803 = (unint64_t *)((char *)v1585[1] + 8);
  do
    v804 = __ldaxr(v803);
  while (__stlxr(v804 - 1, v803));
  if (!v804)
  {
    ((void (*)(std::__shared_weak_count *))v802->__on_zero_shared)(v802);
    std::__shared_weak_count::__release_weak(v802);
    if ((SHIBYTE(v1449[2]) & 0x80000000) == 0)
    {
LABEL_1283:
      if ((SHIBYTE(v1462[2]) & 0x80000000) == 0)
        goto LABEL_1284;
LABEL_1288:
      operator delete(v1462[0]);
      if (v749)
        goto LABEL_1290;
      goto LABEL_1289;
    }
  }
  else
  {
LABEL_1282:
    if ((SHIBYTE(v1449[2]) & 0x80000000) == 0)
      goto LABEL_1283;
  }
  operator delete(v1449[0]);
  if (SHIBYTE(v1462[2]) < 0)
    goto LABEL_1288;
LABEL_1284:
  if (v749)
    goto LABEL_1290;
LABEL_1289:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_1290:
  v806 = *(void **)v4;
  v805 = *(unint64_t **)(v4 + 8);
  if (v805)
  {
    v807 = v805 + 1;
    do
      v808 = __ldxr(v807);
    while (__stxr(v808 + 1, v807));
  }
  v809 = *v2;
  v810 = (unint64_t *)v2[1];
  if (*v2)
    v811 = *v2 + 840;
  else
    v811 = 0;
  v1283 = (std::__shared_weak_count *)v2[1];
  if (v810)
  {
    v812 = v810 + 1;
    do
      v813 = __ldxr(v812);
    while (__stxr(v813 + 1, v812));
  }
  if (*(char *)(v811 + 31) < 0)
  {
    sub_223197FA4(v1449, *(void **)(v811 + 8), *(_QWORD *)(v811 + 16));
  }
  else
  {
    v814 = *(_OWORD *)(v811 + 8);
    v1449[2] = *(void **)(v811 + 24);
    *(_OWORD *)v1449 = v814;
  }
  if (*(char *)(v809 + 895) < 0)
  {
    sub_223197FA4(v1436, *(void **)(v809 + 872), *(_QWORD *)(v809 + 880));
  }
  else
  {
    *(_OWORD *)v1436 = *(_OWORD *)(v809 + 872);
    v1436[2] = *(void **)(v809 + 888);
  }
  v1583[0] = v806;
  v1583[1] = v805;
  v1581[0] = (void *)v811;
  v1581[1] = v810;
  if (v810)
  {
    v815 = v810 + 1;
    do
      v816 = __ldxr(v815);
    while (__stxr(v816 + 1, v815));
  }
  if (SHIBYTE(v1449[2]) < 0)
  {
    sub_223197FA4(v1475, v1449[0], (unint64_t)v1449[1]);
  }
  else
  {
    *(_OWORD *)v1475 = *(_OWORD *)v1449;
    v1475[2] = v1449[2];
  }
  if (SHIBYTE(v1436[2]) < 0)
  {
    sub_223197FA4(v1462, v1436[0], (unint64_t)v1436[1]);
  }
  else
  {
    *(_OWORD *)v1462 = *(_OWORD *)v1436;
    v1462[2] = v1436[2];
  }
  *(void **)((char *)&v1580 + 7) = *(void **)((char *)&v1449[1] + 7);
  v817 = v1449[0];
  *(void **)&v1580 = v1449[1];
  v818 = HIBYTE(v1449[2]);
  memset(v1449, 0, sizeof(v1449));
  *(_QWORD *)&v1587 = v1580;
  *(_QWORD *)((char *)&v1587 + 7) = *(_QWORD *)((char *)&v1580 + 7);
  *(_QWORD *)((char *)&v1580 + 7) = 0;
  *(_QWORD *)&v1580 = 0;
  v1585[0] = v806;
  v1585[1] = v805;
  if (v805)
  {
    v819 = v805 + 1;
    do
      v820 = __ldxr(v819);
    while (__stxr(v820 + 1, v819));
  }
  v821 = (char *)operator new();
  *(_QWORD *)&v1589 = v1587;
  *(_QWORD *)((char *)&v1589 + 7) = *(_QWORD *)((char *)&v1587 + 7);
  *(_QWORD *)&v1587 = 0;
  *(_QWORD *)((char *)&v1587 + 7) = 0;
  v822 = *(_OWORD *)v1585;
  v1585[0] = 0;
  v1585[1] = 0;
  v821[8] = 1;
  *((_QWORD *)v821 + 4) = 0;
  *((_QWORD *)v821 + 5) = 0;
  *(_QWORD *)v821 = &off_24EC3F048;
  *((_QWORD *)v821 + 2) = &unk_24EC3F0C0;
  *((_QWORD *)v821 + 3) = &unk_24EC3F100;
  v823 = v1589;
  *(_QWORD *)(v821 + 63) = *(_QWORD *)((char *)&v1589 + 7);
  *((_QWORD *)v821 + 6) = v817;
  *((_QWORD *)v821 + 7) = v823;
  v821[71] = v818;
  *(_QWORD *)&v1589 = 0;
  *(_QWORD *)((char *)&v1589 + 7) = 0;
  *(_OWORD *)(v821 + 72) = v822;
  v1586[1] = 0;
  v1586[0] = 0;
  v824 = (_QWORD *)operator new();
  *v824 = &off_24EC3F1E8;
  v824[1] = v811;
  v824[2] = v810;
  v1581[1] = 0;
  v1581[0] = 0;
  *((_QWORD *)v821 + 18) = 0;
  *((_QWORD *)v821 + 11) = v824;
  *((_QWORD *)v821 + 12) = v821 + 96;
  *((_QWORD *)v821 + 13) = v821 + 96;
  *((_QWORD *)v821 + 14) = 0;
  *((_QWORD *)v821 + 15) = v821 + 120;
  *((_QWORD *)v821 + 16) = v821 + 120;
  *((_QWORD *)v821 + 17) = 0;
  if (!*((_QWORD *)v821 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v825 = (std::__shared_weak_count *)operator new();
  v825->__shared_owners_ = 0;
  v826 = (unint64_t *)&v825->__shared_owners_;
  v825->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3F688;
  v825->__shared_weak_owners_ = 0;
  v825[1].__vftable = (std::__shared_weak_count_vtbl *)v821;
  v827 = (std::__shared_weak_count *)*((_QWORD *)v821 + 5);
  if (v827)
  {
    if (v827->__shared_owners_ != -1)
      goto LABEL_1332;
    do
      v828 = __ldxr(v826);
    while (__stxr(v828 + 1, v826));
    v829 = (unint64_t *)&v825->__shared_weak_owners_;
    do
      v830 = __ldxr(v829);
    while (__stxr(v830 + 1, v829));
    *((_QWORD *)v821 + 4) = v821;
    *((_QWORD *)v821 + 5) = v825;
    std::__shared_weak_count::__release_weak(v827);
  }
  else
  {
    do
      v831 = __ldxr(v826);
    while (__stxr(v831 + 1, v826));
    v832 = (unint64_t *)&v825->__shared_weak_owners_;
    do
      v833 = __ldxr(v832);
    while (__stxr(v833 + 1, v832));
    *((_QWORD *)v821 + 4) = v821;
    *((_QWORD *)v821 + 5) = v825;
  }
  do
    v834 = __ldaxr(v826);
  while (__stlxr(v834 - 1, v826));
  if (!v834)
  {
    ((void (*)(std::__shared_weak_count *))v825->__on_zero_shared)(v825);
    std::__shared_weak_count::__release_weak(v825);
  }
LABEL_1332:
  v835 = (std::__shared_weak_count *)v1586[1];
  if (v1586[1])
  {
    v836 = (unint64_t *)((char *)v1586[1] + 8);
    do
      v837 = __ldaxr(v836);
    while (__stlxr(v837 - 1, v836));
    if (!v837)
    {
      ((void (*)(std::__shared_weak_count *))v835->__on_zero_shared)(v835);
      std::__shared_weak_count::__release_weak(v835);
    }
  }
  v1586[0] = v821;
  v1586[1] = v825;
  v838 = (std::__shared_weak_count *)v1585[1];
  if (v1585[1])
  {
    v839 = (unint64_t *)((char *)v1585[1] + 8);
    do
      v840 = __ldaxr(v839);
    while (__stlxr(v840 - 1, v839));
    if (!v840)
    {
      ((void (*)(std::__shared_weak_count *))v838->__on_zero_shared)(v838);
      std::__shared_weak_count::__release_weak(v838);
    }
  }
  v841 = *(_OWORD *)v1583;
  v1583[0] = 0;
  v1583[1] = 0;
  *(_OWORD *)&v1488[1] = *(_OWORD *)v1475;
  v1488[0] = &off_24EC382A0;
  v1489 = v1475[2];
  memset(v1475, 0, sizeof(v1475));
  v1490 = *(_OWORD *)v1462;
  v842 = v1462[2];
  memset(v1462, 0, sizeof(v1462));
  v1492 = v841;
  v1585[1] = 0;
  v1585[0] = 0;
  v843 = v1586[0];
  v844 = (char *)v1586[1];
  v1491 = v842;
  v1493 = *(_OWORD *)v1586;
  v1586[0] = 0;
  v1586[1] = 0;
  if (*((_QWORD *)&v1493 + 1))
  {
    v845 = (unint64_t *)(v844 + 16);
    do
      v846 = __ldxr(v845);
    while (__stxr(v846 + 1, v845));
  }
  v1494 = &off_24EC382D0;
  v847 = (_QWORD *)operator new();
  *v847 = &off_24EC3F6D8;
  v847[1] = v843;
  v847[2] = v844;
  *(_QWORD *)&v1495 = v847;
  v849 = *((_QWORD *)&v1493 + 1);
  v848 = v1493;
  if (!*((_QWORD *)&v1493 + 1))
  {
    *((_QWORD *)&v1495 + 1) = v1493;
    v1496 = 0;
    if ((_QWORD)v1493)
      v853 = v1493 + 16;
    else
      v853 = 0;
    goto LABEL_1362;
  }
  v850 = (unint64_t *)(*((_QWORD *)&v1493 + 1) + 16);
  do
    v851 = __ldxr(v850);
  while (__stxr(v851 + 1, v850));
  v852 = *((_QWORD *)&v1493 + 1);
  *((_QWORD *)&v1495 + 1) = v848;
  v1496 = v849;
  if ((_QWORD)v1493)
    v853 = v1493 + 16;
  else
    v853 = 0;
  if (!*((_QWORD *)&v1493 + 1))
  {
    v848 = v1493;
LABEL_1362:
    v856 = 0;
    v1497 = &off_24EC380F8;
    v1498 = v853;
    goto LABEL_1363;
  }
  v854 = (unint64_t *)(*((_QWORD *)&v1493 + 1) + 16);
  do
    v855 = __ldxr(v854);
  while (__stxr(v855 + 1, v854));
  v856 = *((_QWORD *)&v1493 + 1);
  v848 = v1493;
  v1497 = &off_24EC380F8;
  *(_QWORD *)&v1498 = v853;
  *((_QWORD *)&v1498 + 1) = v852;
  if (*((_QWORD *)&v1493 + 1))
  {
    v857 = (unint64_t *)(*((_QWORD *)&v1493 + 1) + 16);
    do
      v858 = __ldxr(v857);
    while (__stxr(v858 + 1, v857));
  }
LABEL_1363:
  if (v848)
    v859 = v848 + 24;
  else
    v859 = 0;
  v1499 = &off_24EC2E850;
  *(_QWORD *)&v1500 = v859;
  *((_QWORD *)&v1500 + 1) = v856;
  if ((SHIBYTE(v1462[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1475[2]) & 0x80000000) == 0)
      goto LABEL_1368;
LABEL_1371:
    operator delete(v1475[0]);
    v860 = (std::__shared_weak_count *)v1581[1];
    if (!v1581[1])
      goto LABEL_1376;
    goto LABEL_1372;
  }
  operator delete(v1462[0]);
  if (SHIBYTE(v1475[2]) < 0)
    goto LABEL_1371;
LABEL_1368:
  v860 = (std::__shared_weak_count *)v1581[1];
  if (!v1581[1])
    goto LABEL_1376;
LABEL_1372:
  v861 = (unint64_t *)&v860->__shared_owners_;
  do
    v862 = __ldaxr(v861);
  while (__stlxr(v862 - 1, v861));
  if (!v862)
  {
    ((void (*)(std::__shared_weak_count *))v860->__on_zero_shared)(v860);
    std::__shared_weak_count::__release_weak(v860);
  }
LABEL_1376:
  v863 = (std::__shared_weak_count *)v1583[1];
  if (!v1583[1])
    goto LABEL_1380;
  v864 = (unint64_t *)((char *)v1583[1] + 8);
  do
    v865 = __ldaxr(v864);
  while (__stlxr(v865 - 1, v864));
  if (!v865)
  {
    ((void (*)(std::__shared_weak_count *))v863->__on_zero_shared)(v863);
    std::__shared_weak_count::__release_weak(v863);
    if ((SHIBYTE(v1436[2]) & 0x80000000) == 0)
    {
LABEL_1381:
      if ((SHIBYTE(v1449[2]) & 0x80000000) == 0)
        goto LABEL_1382;
LABEL_1386:
      operator delete(v1449[0]);
      if (v811)
        goto LABEL_1388;
      goto LABEL_1387;
    }
  }
  else
  {
LABEL_1380:
    if ((SHIBYTE(v1436[2]) & 0x80000000) == 0)
      goto LABEL_1381;
  }
  operator delete(v1436[0]);
  if (SHIBYTE(v1449[2]) < 0)
    goto LABEL_1386;
LABEL_1382:
  if (v811)
    goto LABEL_1388;
LABEL_1387:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_1388:
  v867 = *(void **)v4;
  v866 = *(unint64_t **)(v4 + 8);
  if (v866)
  {
    v868 = v866 + 1;
    do
      v869 = __ldxr(v868);
    while (__stxr(v869 + 1, v868));
  }
  v870 = *v2;
  v871 = v2[1];
  if (*v2)
    v872 = *v2 + 896;
  else
    v872 = 0;
  v1282 = (std::__shared_weak_count *)v2[1];
  if (v871)
  {
    v873 = (unint64_t *)(v871 + 8);
    do
      v874 = __ldxr(v873);
    while (__stxr(v874 + 1, v873));
  }
  if (*(char *)(v872 + 31) < 0)
  {
    sub_223197FA4(v1436, *(void **)(v872 + 8), *(_QWORD *)(v872 + 16));
  }
  else
  {
    v875 = *(_OWORD *)(v872 + 8);
    v1436[2] = *(void **)(v872 + 24);
    *(_OWORD *)v1436 = v875;
  }
  if (*(char *)(v870 + 951) < 0)
  {
    sub_223197FA4(v1586, *(void **)(v870 + 928), *(_QWORD *)(v870 + 936));
  }
  else
  {
    *(_OWORD *)v1586 = *(_OWORD *)(v870 + 928);
    v1586[2] = *(void **)(v870 + 944);
  }
  v1581[0] = v867;
  v1581[1] = v866;
  *(_QWORD *)&v1589 = v872;
  *((_QWORD *)&v1589 + 1) = v871;
  if (v871)
  {
    v876 = (unint64_t *)(v871 + 8);
    do
      v877 = __ldxr(v876);
    while (__stxr(v877 + 1, v876));
  }
  if (SHIBYTE(v1436[2]) < 0)
  {
    sub_223197FA4(v1462, v1436[0], (unint64_t)v1436[1]);
  }
  else
  {
    *(_OWORD *)v1462 = *(_OWORD *)v1436;
    v1462[2] = v1436[2];
  }
  if (SHIBYTE(v1586[2]) < 0)
  {
    sub_223197FA4(v1449, v1586[0], (unint64_t)v1586[1]);
  }
  else
  {
    *(_OWORD *)v1449 = *(_OWORD *)v1586;
    v1449[2] = v1586[2];
  }
  *(void **)((char *)&v1579 + 7) = *(void **)((char *)&v1436[1] + 7);
  v878 = v1436[0];
  *(void **)&v1579 = v1436[1];
  v879 = HIBYTE(v1436[2]);
  memset(v1436, 0, sizeof(v1436));
  *(_QWORD *)&v1580 = v1579;
  *(_QWORD *)((char *)&v1580 + 7) = *(_QWORD *)((char *)&v1579 + 7);
  *(_QWORD *)((char *)&v1579 + 7) = 0;
  *(_QWORD *)&v1579 = 0;
  v1583[0] = v867;
  v1583[1] = v866;
  if (v866)
  {
    v880 = v866 + 1;
    do
      v881 = __ldxr(v880);
    while (__stxr(v881 + 1, v880));
  }
  v882 = (char *)operator new();
  *(_QWORD *)&v1587 = v1580;
  *(_QWORD *)((char *)&v1587 + 7) = *(_QWORD *)((char *)&v1580 + 7);
  *(_QWORD *)&v1580 = 0;
  *(_QWORD *)((char *)&v1580 + 7) = 0;
  v883 = *(_OWORD *)v1583;
  v1583[0] = 0;
  v1583[1] = 0;
  v882[8] = 1;
  *((_QWORD *)v882 + 4) = 0;
  *((_QWORD *)v882 + 5) = 0;
  *(_QWORD *)v882 = &off_24EC3F750;
  *((_QWORD *)v882 + 2) = &unk_24EC3F7C8;
  *((_QWORD *)v882 + 3) = &unk_24EC3F808;
  v884 = v1587;
  *(_QWORD *)(v882 + 63) = *(_QWORD *)((char *)&v1587 + 7);
  *((_QWORD *)v882 + 6) = v878;
  *((_QWORD *)v882 + 7) = v884;
  v882[71] = v879;
  *(_QWORD *)&v1587 = 0;
  *(_QWORD *)((char *)&v1587 + 7) = 0;
  *(_OWORD *)(v882 + 72) = v883;
  v1585[1] = 0;
  v1585[0] = 0;
  v885 = (_QWORD *)operator new();
  *v885 = &off_24EC3F900;
  v885[1] = v872;
  v885[2] = v871;
  v1589 = 0uLL;
  *((_QWORD *)v882 + 18) = 0;
  *((_QWORD *)v882 + 11) = v885;
  *((_QWORD *)v882 + 12) = v882 + 96;
  *((_QWORD *)v882 + 13) = v882 + 96;
  *((_QWORD *)v882 + 14) = 0;
  *((_QWORD *)v882 + 15) = v882 + 120;
  *((_QWORD *)v882 + 16) = v882 + 120;
  *((_QWORD *)v882 + 17) = 0;
  if (!*((_QWORD *)v882 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v886 = (std::__shared_weak_count *)operator new();
  v886->__shared_owners_ = 0;
  v887 = (unint64_t *)&v886->__shared_owners_;
  v886->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3FDF0;
  v886->__shared_weak_owners_ = 0;
  v886[1].__vftable = (std::__shared_weak_count_vtbl *)v882;
  v888 = (std::__shared_weak_count *)*((_QWORD *)v882 + 5);
  if (v888)
  {
    if (v888->__shared_owners_ != -1)
      goto LABEL_1430;
    do
      v889 = __ldxr(v887);
    while (__stxr(v889 + 1, v887));
    v890 = (unint64_t *)&v886->__shared_weak_owners_;
    do
      v891 = __ldxr(v890);
    while (__stxr(v891 + 1, v890));
    *((_QWORD *)v882 + 4) = v882;
    *((_QWORD *)v882 + 5) = v886;
    std::__shared_weak_count::__release_weak(v888);
  }
  else
  {
    do
      v892 = __ldxr(v887);
    while (__stxr(v892 + 1, v887));
    v893 = (unint64_t *)&v886->__shared_weak_owners_;
    do
      v894 = __ldxr(v893);
    while (__stxr(v894 + 1, v893));
    *((_QWORD *)v882 + 4) = v882;
    *((_QWORD *)v882 + 5) = v886;
  }
  do
    v895 = __ldaxr(v887);
  while (__stlxr(v895 - 1, v887));
  if (!v895)
  {
    ((void (*)(std::__shared_weak_count *))v886->__on_zero_shared)(v886);
    std::__shared_weak_count::__release_weak(v886);
  }
LABEL_1430:
  v896 = (std::__shared_weak_count *)v1585[1];
  if (v1585[1])
  {
    v897 = (unint64_t *)((char *)v1585[1] + 8);
    do
      v898 = __ldaxr(v897);
    while (__stlxr(v898 - 1, v897));
    if (!v898)
    {
      ((void (*)(std::__shared_weak_count *))v896->__on_zero_shared)(v896);
      std::__shared_weak_count::__release_weak(v896);
    }
  }
  v1585[0] = v882;
  v1585[1] = v886;
  v899 = (std::__shared_weak_count *)v1583[1];
  if (v1583[1])
  {
    v900 = (unint64_t *)((char *)v1583[1] + 8);
    do
      v901 = __ldaxr(v900);
    while (__stlxr(v901 - 1, v900));
    if (!v901)
    {
      ((void (*)(std::__shared_weak_count *))v899->__on_zero_shared)(v899);
      std::__shared_weak_count::__release_weak(v899);
    }
  }
  v902 = *(_OWORD *)v1581;
  v1581[0] = 0;
  v1581[1] = 0;
  *(_OWORD *)&v1475[1] = *(_OWORD *)v1462;
  v1475[0] = &off_24EC38308;
  v1476 = v1462[2];
  memset(v1462, 0, sizeof(v1462));
  v1477 = *(_OWORD *)v1449;
  v903 = v1449[2];
  memset(v1449, 0, sizeof(v1449));
  v1479 = v902;
  v1583[1] = 0;
  v1583[0] = 0;
  v904 = v1585[0];
  v905 = (char *)v1585[1];
  v1478 = v903;
  v1480 = *(_OWORD *)v1585;
  v1585[0] = 0;
  v1585[1] = 0;
  if (*((_QWORD *)&v1480 + 1))
  {
    v906 = (unint64_t *)(v905 + 16);
    do
      v907 = __ldxr(v906);
    while (__stxr(v907 + 1, v906));
  }
  v1481 = &off_24EC38338;
  v908 = (_QWORD *)operator new();
  *v908 = &off_24EC3FE40;
  v908[1] = v904;
  v908[2] = v905;
  *(_QWORD *)&v1482 = v908;
  v910 = *((_QWORD *)&v1480 + 1);
  v909 = v1480;
  if (!*((_QWORD *)&v1480 + 1))
  {
    *((_QWORD *)&v1482 + 1) = v1480;
    v1483 = 0;
    if ((_QWORD)v1480)
      v914 = v1480 + 16;
    else
      v914 = 0;
    goto LABEL_1460;
  }
  v911 = (unint64_t *)(*((_QWORD *)&v1480 + 1) + 16);
  do
    v912 = __ldxr(v911);
  while (__stxr(v912 + 1, v911));
  v913 = *((_QWORD *)&v1480 + 1);
  *((_QWORD *)&v1482 + 1) = v909;
  v1483 = v910;
  if ((_QWORD)v1480)
    v914 = v1480 + 16;
  else
    v914 = 0;
  if (!*((_QWORD *)&v1480 + 1))
  {
    v909 = v1480;
LABEL_1460:
    v917 = 0;
    v1484 = &off_24EC38370;
    v1485 = v914;
    goto LABEL_1461;
  }
  v915 = (unint64_t *)(*((_QWORD *)&v1480 + 1) + 16);
  do
    v916 = __ldxr(v915);
  while (__stxr(v916 + 1, v915));
  v917 = *((_QWORD *)&v1480 + 1);
  v909 = v1480;
  v1484 = &off_24EC38370;
  *(_QWORD *)&v1485 = v914;
  *((_QWORD *)&v1485 + 1) = v913;
  if (*((_QWORD *)&v1480 + 1))
  {
    v918 = (unint64_t *)(*((_QWORD *)&v1480 + 1) + 16);
    do
      v919 = __ldxr(v918);
    while (__stxr(v919 + 1, v918));
  }
LABEL_1461:
  if (v909)
    v920 = v909 + 24;
  else
    v920 = 0;
  v1486 = &off_24EC2E850;
  *(_QWORD *)&v1487 = v920;
  *((_QWORD *)&v1487 + 1) = v917;
  if ((SHIBYTE(v1449[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1462[2]) & 0x80000000) == 0)
      goto LABEL_1466;
LABEL_1469:
    operator delete(v1462[0]);
    v921 = (std::__shared_weak_count *)*((_QWORD *)&v1589 + 1);
    if (!*((_QWORD *)&v1589 + 1))
      goto LABEL_1474;
    goto LABEL_1470;
  }
  operator delete(v1449[0]);
  if (SHIBYTE(v1462[2]) < 0)
    goto LABEL_1469;
LABEL_1466:
  v921 = (std::__shared_weak_count *)*((_QWORD *)&v1589 + 1);
  if (!*((_QWORD *)&v1589 + 1))
    goto LABEL_1474;
LABEL_1470:
  v922 = (unint64_t *)&v921->__shared_owners_;
  do
    v923 = __ldaxr(v922);
  while (__stlxr(v923 - 1, v922));
  if (!v923)
  {
    ((void (*)(std::__shared_weak_count *))v921->__on_zero_shared)(v921);
    std::__shared_weak_count::__release_weak(v921);
  }
LABEL_1474:
  v924 = (std::__shared_weak_count *)v1581[1];
  if (!v1581[1])
    goto LABEL_1478;
  v925 = (unint64_t *)((char *)v1581[1] + 8);
  do
    v926 = __ldaxr(v925);
  while (__stlxr(v926 - 1, v925));
  if (!v926)
  {
    ((void (*)(std::__shared_weak_count *))v924->__on_zero_shared)(v924);
    std::__shared_weak_count::__release_weak(v924);
    if ((SHIBYTE(v1586[2]) & 0x80000000) == 0)
    {
LABEL_1479:
      if ((SHIBYTE(v1436[2]) & 0x80000000) == 0)
        goto LABEL_1480;
LABEL_1484:
      operator delete(v1436[0]);
      if (v872)
        goto LABEL_1486;
      goto LABEL_1485;
    }
  }
  else
  {
LABEL_1478:
    if ((SHIBYTE(v1586[2]) & 0x80000000) == 0)
      goto LABEL_1479;
  }
  operator delete(v1586[0]);
  if (SHIBYTE(v1436[2]) < 0)
    goto LABEL_1484;
LABEL_1480:
  if (v872)
    goto LABEL_1486;
LABEL_1485:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_1486:
  v928 = *(void **)v4;
  v927 = *(unint64_t **)(v4 + 8);
  if (v927)
  {
    v929 = v927 + 1;
    do
      v930 = __ldxr(v929);
    while (__stxr(v930 + 1, v929));
  }
  v931 = *v2;
  v932 = v2[1];
  if (*v2)
    v933 = *v2 + 952;
  else
    v933 = 0;
  v1281 = (std::__shared_weak_count *)v2[1];
  if (v932)
  {
    v934 = (unint64_t *)(v932 + 8);
    do
      v935 = __ldxr(v934);
    while (__stxr(v935 + 1, v934));
  }
  if (*(char *)(v933 + 31) < 0)
  {
    sub_223197FA4(v1586, *(void **)(v933 + 8), *(_QWORD *)(v933 + 16));
  }
  else
  {
    v936 = *(_OWORD *)(v933 + 8);
    v1586[2] = *(void **)(v933 + 24);
    *(_OWORD *)v1586 = v936;
  }
  if (*(char *)(v931 + 1007) < 0)
  {
    sub_223197FA4(v1585, *(void **)(v931 + 984), *(_QWORD *)(v931 + 992));
  }
  else
  {
    *(_OWORD *)v1585 = *(_OWORD *)(v931 + 984);
    v1585[2] = *(void **)(v931 + 1000);
  }
  *(_QWORD *)&v1589 = v928;
  *((_QWORD *)&v1589 + 1) = v927;
  *(_QWORD *)&v1587 = v933;
  *((_QWORD *)&v1587 + 1) = v932;
  if (v932)
  {
    v937 = (unint64_t *)(v932 + 8);
    do
      v938 = __ldxr(v937);
    while (__stxr(v938 + 1, v937));
  }
  if (SHIBYTE(v1586[2]) < 0)
  {
    sub_223197FA4(v1449, v1586[0], (unint64_t)v1586[1]);
  }
  else
  {
    *(_OWORD *)v1449 = *(_OWORD *)v1586;
    v1449[2] = v1586[2];
  }
  if (SHIBYTE(v1585[2]) < 0)
  {
    sub_223197FA4(v1436, v1585[0], (unint64_t)v1585[1]);
  }
  else
  {
    *(_OWORD *)v1436 = *(_OWORD *)v1585;
    v1436[2] = v1585[2];
  }
  *(void **)((char *)v1590 + 7) = *(void **)((char *)&v1586[1] + 7);
  v939 = v1586[0];
  v940 = v1586[1];
  HIBYTE(v1590[0]) = HIBYTE(v1586[1]);
  v941 = HIBYTE(v1586[2]);
  memset(v1586, 0, 24);
  *(_QWORD *)&v1579 = v940;
  *(_QWORD *)((char *)&v1579 + 7) = *(_QWORD *)((char *)v1590 + 7);
  *(_QWORD *)((char *)v1590 + 7) = 0;
  v1590[0] = 0;
  v1581[0] = v928;
  v1581[1] = v927;
  if (v927)
  {
    v942 = v927 + 1;
    do
      v943 = __ldxr(v942);
    while (__stxr(v943 + 1, v942));
  }
  v944 = (char *)operator new();
  *(_QWORD *)&v1580 = v1579;
  *(_QWORD *)((char *)&v1580 + 7) = *(_QWORD *)((char *)&v1579 + 7);
  *(_QWORD *)&v1579 = 0;
  *(_QWORD *)((char *)&v1579 + 7) = 0;
  v945 = *(_OWORD *)v1581;
  v1581[0] = 0;
  v1581[1] = 0;
  v944[8] = 1;
  *((_QWORD *)v944 + 4) = 0;
  *((_QWORD *)v944 + 5) = 0;
  *(_QWORD *)v944 = &off_24EC3FEB8;
  *((_QWORD *)v944 + 2) = &unk_24EC3FF30;
  *((_QWORD *)v944 + 3) = &unk_24EC3FF70;
  v946 = v1580;
  *(_QWORD *)(v944 + 63) = *(_QWORD *)((char *)&v1580 + 7);
  *((_QWORD *)v944 + 6) = v939;
  *((_QWORD *)v944 + 7) = v946;
  v944[71] = v941;
  *(_QWORD *)&v1580 = 0;
  *(_QWORD *)((char *)&v1580 + 7) = 0;
  *(_OWORD *)(v944 + 72) = v945;
  v1583[1] = 0;
  v1583[0] = 0;
  v947 = (_QWORD *)operator new();
  *v947 = &off_24EC40058;
  v947[1] = v933;
  v947[2] = v932;
  v1587 = 0uLL;
  *((_QWORD *)v944 + 18) = 0;
  *((_QWORD *)v944 + 11) = v947;
  *((_QWORD *)v944 + 12) = v944 + 96;
  *((_QWORD *)v944 + 13) = v944 + 96;
  *((_QWORD *)v944 + 14) = 0;
  *((_QWORD *)v944 + 15) = v944 + 120;
  *((_QWORD *)v944 + 16) = v944 + 120;
  *((_QWORD *)v944 + 17) = 0;
  if (!*((_QWORD *)v944 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v948 = (std::__shared_weak_count *)operator new();
  v948->__shared_owners_ = 0;
  v949 = (unint64_t *)&v948->__shared_owners_;
  v948->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC404F8;
  v948->__shared_weak_owners_ = 0;
  v948[1].__vftable = (std::__shared_weak_count_vtbl *)v944;
  v950 = (std::__shared_weak_count *)*((_QWORD *)v944 + 5);
  if (v950)
  {
    if (v950->__shared_owners_ != -1)
      goto LABEL_1528;
    do
      v951 = __ldxr(v949);
    while (__stxr(v951 + 1, v949));
    v952 = (unint64_t *)&v948->__shared_weak_owners_;
    do
      v953 = __ldxr(v952);
    while (__stxr(v953 + 1, v952));
    *((_QWORD *)v944 + 4) = v944;
    *((_QWORD *)v944 + 5) = v948;
    std::__shared_weak_count::__release_weak(v950);
  }
  else
  {
    do
      v954 = __ldxr(v949);
    while (__stxr(v954 + 1, v949));
    v955 = (unint64_t *)&v948->__shared_weak_owners_;
    do
      v956 = __ldxr(v955);
    while (__stxr(v956 + 1, v955));
    *((_QWORD *)v944 + 4) = v944;
    *((_QWORD *)v944 + 5) = v948;
  }
  do
    v957 = __ldaxr(v949);
  while (__stlxr(v957 - 1, v949));
  if (!v957)
  {
    ((void (*)(std::__shared_weak_count *))v948->__on_zero_shared)(v948);
    std::__shared_weak_count::__release_weak(v948);
  }
LABEL_1528:
  v958 = (std::__shared_weak_count *)v1583[1];
  if (v1583[1])
  {
    v959 = (unint64_t *)((char *)v1583[1] + 8);
    do
      v960 = __ldaxr(v959);
    while (__stlxr(v960 - 1, v959));
    if (!v960)
    {
      ((void (*)(std::__shared_weak_count *))v958->__on_zero_shared)(v958);
      std::__shared_weak_count::__release_weak(v958);
    }
  }
  v1583[0] = v944;
  v1583[1] = v948;
  v961 = (std::__shared_weak_count *)v1581[1];
  if (v1581[1])
  {
    v962 = (unint64_t *)((char *)v1581[1] + 8);
    do
      v963 = __ldaxr(v962);
    while (__stlxr(v963 - 1, v962));
    if (!v963)
    {
      ((void (*)(std::__shared_weak_count *))v961->__on_zero_shared)(v961);
      std::__shared_weak_count::__release_weak(v961);
    }
  }
  v964 = v1589;
  v1589 = 0uLL;
  *(_OWORD *)&v1462[1] = *(_OWORD *)v1449;
  v1462[0] = &off_24EC383A8;
  v1463 = v1449[2];
  memset(v1449, 0, sizeof(v1449));
  v1464 = *(_OWORD *)v1436;
  v965 = v1436[2];
  memset(v1436, 0, sizeof(v1436));
  v1466 = v964;
  v1581[1] = 0;
  v1581[0] = 0;
  v966 = v1583[0];
  v967 = (char *)v1583[1];
  v1465 = v965;
  v1467 = *(_OWORD *)v1583;
  v1583[0] = 0;
  v1583[1] = 0;
  if (*((_QWORD *)&v1467 + 1))
  {
    v968 = (unint64_t *)(v967 + 16);
    do
      v969 = __ldxr(v968);
    while (__stxr(v969 + 1, v968));
  }
  v1468 = &off_24EC383D8;
  v970 = (_QWORD *)operator new();
  *v970 = &off_24EC40548;
  v970[1] = v966;
  v970[2] = v967;
  *(_QWORD *)&v1469 = v970;
  v972 = *((_QWORD *)&v1467 + 1);
  v971 = v1467;
  if (!*((_QWORD *)&v1467 + 1))
  {
    *((_QWORD *)&v1469 + 1) = v1467;
    v1470 = 0;
    if ((_QWORD)v1467)
      v976 = v1467 + 16;
    else
      v976 = 0;
    goto LABEL_1558;
  }
  v973 = (unint64_t *)(*((_QWORD *)&v1467 + 1) + 16);
  do
    v974 = __ldxr(v973);
  while (__stxr(v974 + 1, v973));
  v975 = *((_QWORD *)&v1467 + 1);
  *((_QWORD *)&v1469 + 1) = v971;
  v1470 = v972;
  if ((_QWORD)v1467)
    v976 = v1467 + 16;
  else
    v976 = 0;
  if (!*((_QWORD *)&v1467 + 1))
  {
    v971 = v1467;
LABEL_1558:
    v979 = 0;
    v1471 = &off_24EC38370;
    v1472 = v976;
    goto LABEL_1559;
  }
  v977 = (unint64_t *)(*((_QWORD *)&v1467 + 1) + 16);
  do
    v978 = __ldxr(v977);
  while (__stxr(v978 + 1, v977));
  v979 = *((_QWORD *)&v1467 + 1);
  v971 = v1467;
  v1471 = &off_24EC38370;
  *(_QWORD *)&v1472 = v976;
  *((_QWORD *)&v1472 + 1) = v975;
  if (*((_QWORD *)&v1467 + 1))
  {
    v980 = (unint64_t *)(*((_QWORD *)&v1467 + 1) + 16);
    do
      v981 = __ldxr(v980);
    while (__stxr(v981 + 1, v980));
  }
LABEL_1559:
  if (v971)
    v982 = v971 + 24;
  else
    v982 = 0;
  v1473 = &off_24EC2E850;
  *(_QWORD *)&v1474 = v982;
  *((_QWORD *)&v1474 + 1) = v979;
  if ((SHIBYTE(v1436[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1449[2]) & 0x80000000) == 0)
      goto LABEL_1564;
LABEL_1567:
    operator delete(v1449[0]);
    v983 = (std::__shared_weak_count *)*((_QWORD *)&v1587 + 1);
    if (!*((_QWORD *)&v1587 + 1))
      goto LABEL_1572;
    goto LABEL_1568;
  }
  operator delete(v1436[0]);
  if (SHIBYTE(v1449[2]) < 0)
    goto LABEL_1567;
LABEL_1564:
  v983 = (std::__shared_weak_count *)*((_QWORD *)&v1587 + 1);
  if (!*((_QWORD *)&v1587 + 1))
    goto LABEL_1572;
LABEL_1568:
  v984 = (unint64_t *)&v983->__shared_owners_;
  do
    v985 = __ldaxr(v984);
  while (__stlxr(v985 - 1, v984));
  if (!v985)
  {
    ((void (*)(std::__shared_weak_count *))v983->__on_zero_shared)(v983);
    std::__shared_weak_count::__release_weak(v983);
  }
LABEL_1572:
  v986 = (std::__shared_weak_count *)*((_QWORD *)&v1589 + 1);
  if (!*((_QWORD *)&v1589 + 1))
    goto LABEL_1576;
  v987 = (unint64_t *)(*((_QWORD *)&v1589 + 1) + 8);
  do
    v988 = __ldaxr(v987);
  while (__stlxr(v988 - 1, v987));
  if (!v988)
  {
    ((void (*)(std::__shared_weak_count *))v986->__on_zero_shared)(v986);
    std::__shared_weak_count::__release_weak(v986);
    if ((SHIBYTE(v1585[2]) & 0x80000000) == 0)
    {
LABEL_1577:
      if ((SHIBYTE(v1586[2]) & 0x80000000) == 0)
        goto LABEL_1578;
LABEL_1582:
      operator delete(v1586[0]);
      if (v933)
        goto LABEL_1584;
      goto LABEL_1583;
    }
  }
  else
  {
LABEL_1576:
    if ((SHIBYTE(v1585[2]) & 0x80000000) == 0)
      goto LABEL_1577;
  }
  operator delete(v1585[0]);
  if (SHIBYTE(v1586[2]) < 0)
    goto LABEL_1582;
LABEL_1578:
  if (v933)
    goto LABEL_1584;
LABEL_1583:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_1584:
  v990 = *(void **)v4;
  v989 = *(_QWORD *)(v4 + 8);
  if (v989)
  {
    v991 = (unint64_t *)(v989 + 8);
    do
      v992 = __ldxr(v991);
    while (__stxr(v992 + 1, v991));
  }
  v994 = *v2;
  v993 = v2[1];
  if (*v2)
    v995 = *v2 + 1008;
  else
    v995 = 0;
  v1279 = v995;
  v1280 = (std::__shared_weak_count *)v2[1];
  if (v993)
  {
    v996 = (unint64_t *)(v993 + 8);
    do
      v997 = __ldxr(v996);
    while (__stxr(v997 + 1, v996));
  }
  if (*(char *)(v995 + 31) < 0)
  {
    sub_223197FA4(v1585, *(void **)(v995 + 8), *(_QWORD *)(v995 + 16));
  }
  else
  {
    v998 = *(_OWORD *)(v995 + 8);
    v1585[2] = *(void **)(v995 + 24);
    *(_OWORD *)v1585 = v998;
  }
  if (*(char *)(v994 + 1063) < 0)
  {
    sub_223197FA4(v1583, *(void **)(v994 + 1040), *(_QWORD *)(v994 + 1048));
  }
  else
  {
    *(_OWORD *)v1583 = *(_OWORD *)(v994 + 1040);
    v1583[2] = *(void **)(v994 + 1056);
  }
  *(_QWORD *)&v1587 = v990;
  *((_QWORD *)&v1587 + 1) = v989;
  *(_QWORD *)&v1580 = v995;
  *((_QWORD *)&v1580 + 1) = v993;
  if (v993)
  {
    v999 = (unint64_t *)(v993 + 8);
    do
      v1000 = __ldxr(v999);
    while (__stxr(v1000 + 1, v999));
  }
  if (SHIBYTE(v1585[2]) < 0)
  {
    sub_223197FA4(v1436, v1585[0], (unint64_t)v1585[1]);
  }
  else
  {
    *(_OWORD *)v1436 = *(_OWORD *)v1585;
    v1436[2] = v1585[2];
  }
  if (SHIBYTE(v1583[2]) < 0)
  {
    sub_223197FA4(v1586, v1583[0], (unint64_t)v1583[1]);
  }
  else
  {
    *(_OWORD *)v1586 = *(_OWORD *)v1583;
    v1586[2] = v1583[2];
  }
  *(void **)((char *)v1588 + 7) = *(void **)((char *)&v1585[1] + 7);
  v1001 = v1585[0];
  v1002 = v1585[1];
  HIBYTE(v1588[0]) = HIBYTE(v1585[1]);
  v1003 = HIBYTE(v1585[2]);
  memset(v1585, 0, 24);
  v1590[0] = v1002;
  *(_QWORD *)((char *)v1590 + 7) = *(_QWORD *)((char *)v1588 + 7);
  *(_QWORD *)((char *)v1588 + 7) = 0;
  v1588[0] = 0;
  *(_QWORD *)&v1589 = v990;
  *((_QWORD *)&v1589 + 1) = v989;
  if (v989)
  {
    v1004 = (unint64_t *)(v989 + 8);
    do
      v1005 = __ldxr(v1004);
    while (__stxr(v1005 + 1, v1004));
  }
  v1006 = (char *)operator new();
  *(_QWORD *)&v1579 = v1590[0];
  *(_QWORD *)((char *)&v1579 + 7) = *(_QWORD *)((char *)v1590 + 7);
  v1590[0] = 0;
  *(_QWORD *)((char *)v1590 + 7) = 0;
  v1007 = v1589;
  v1589 = 0uLL;
  v1006[8] = 1;
  *((_QWORD *)v1006 + 4) = 0;
  *((_QWORD *)v1006 + 5) = 0;
  *(_QWORD *)v1006 = &off_24EC405C0;
  *((_QWORD *)v1006 + 2) = &unk_24EC40638;
  *((_QWORD *)v1006 + 3) = &unk_24EC40678;
  v1008 = v1579;
  *(_QWORD *)(v1006 + 63) = *(_QWORD *)((char *)&v1579 + 7);
  *((_QWORD *)v1006 + 6) = v1001;
  *((_QWORD *)v1006 + 7) = v1008;
  v1006[71] = v1003;
  *(_QWORD *)&v1579 = 0;
  *(_QWORD *)((char *)&v1579 + 7) = 0;
  *(_OWORD *)(v1006 + 72) = v1007;
  v1581[1] = 0;
  v1581[0] = 0;
  v1009 = (_QWORD *)operator new();
  *v1009 = &off_24EC40770;
  v1009[1] = v995;
  v1009[2] = v993;
  v1580 = 0uLL;
  *((_QWORD *)v1006 + 18) = 0;
  *((_QWORD *)v1006 + 11) = v1009;
  *((_QWORD *)v1006 + 12) = v1006 + 96;
  *((_QWORD *)v1006 + 13) = v1006 + 96;
  *((_QWORD *)v1006 + 14) = 0;
  *((_QWORD *)v1006 + 15) = v1006 + 120;
  *((_QWORD *)v1006 + 16) = v1006 + 120;
  *((_QWORD *)v1006 + 17) = 0;
  if (!*((_QWORD *)v1006 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v1010 = (std::__shared_weak_count *)operator new();
  v1010->__shared_owners_ = 0;
  v1011 = (unint64_t *)&v1010->__shared_owners_;
  v1010->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC40C60;
  v1010->__shared_weak_owners_ = 0;
  v1010[1].__vftable = (std::__shared_weak_count_vtbl *)v1006;
  v1012 = (std::__shared_weak_count *)*((_QWORD *)v1006 + 5);
  if (v1012)
  {
    if (v1012->__shared_owners_ != -1)
      goto LABEL_1626;
    do
      v1013 = __ldxr(v1011);
    while (__stxr(v1013 + 1, v1011));
    v1014 = (unint64_t *)&v1010->__shared_weak_owners_;
    do
      v1015 = __ldxr(v1014);
    while (__stxr(v1015 + 1, v1014));
    *((_QWORD *)v1006 + 4) = v1006;
    *((_QWORD *)v1006 + 5) = v1010;
    std::__shared_weak_count::__release_weak(v1012);
  }
  else
  {
    do
      v1016 = __ldxr(v1011);
    while (__stxr(v1016 + 1, v1011));
    v1017 = (unint64_t *)&v1010->__shared_weak_owners_;
    do
      v1018 = __ldxr(v1017);
    while (__stxr(v1018 + 1, v1017));
    *((_QWORD *)v1006 + 4) = v1006;
    *((_QWORD *)v1006 + 5) = v1010;
  }
  do
    v1019 = __ldaxr(v1011);
  while (__stlxr(v1019 - 1, v1011));
  if (!v1019)
  {
    ((void (*)(std::__shared_weak_count *))v1010->__on_zero_shared)(v1010);
    std::__shared_weak_count::__release_weak(v1010);
  }
LABEL_1626:
  v1020 = (std::__shared_weak_count *)v1581[1];
  if (v1581[1])
  {
    v1021 = (unint64_t *)((char *)v1581[1] + 8);
    do
      v1022 = __ldaxr(v1021);
    while (__stlxr(v1022 - 1, v1021));
    if (!v1022)
    {
      ((void (*)(std::__shared_weak_count *))v1020->__on_zero_shared)(v1020);
      std::__shared_weak_count::__release_weak(v1020);
    }
  }
  v1581[0] = v1006;
  v1581[1] = v1010;
  v1023 = (std::__shared_weak_count *)*((_QWORD *)&v1589 + 1);
  if (*((_QWORD *)&v1589 + 1))
  {
    v1024 = (unint64_t *)(*((_QWORD *)&v1589 + 1) + 8);
    do
      v1025 = __ldaxr(v1024);
    while (__stlxr(v1025 - 1, v1024));
    if (!v1025)
    {
      ((void (*)(std::__shared_weak_count *))v1023->__on_zero_shared)(v1023);
      std::__shared_weak_count::__release_weak(v1023);
    }
  }
  v1026 = v1587;
  v1587 = 0uLL;
  *(_OWORD *)&v1449[1] = *(_OWORD *)v1436;
  v1449[0] = &off_24EC38410;
  v1450 = v1436[2];
  memset(v1436, 0, sizeof(v1436));
  v1451 = *(_OWORD *)v1586;
  v1027 = v1586[2];
  memset(v1586, 0, 24);
  v1453 = v1026;
  v1589 = 0uLL;
  v1028 = v1581[0];
  v1029 = (char *)v1581[1];
  v1452 = v1027;
  v1454 = *(_OWORD *)v1581;
  v1581[0] = 0;
  v1581[1] = 0;
  if (*((_QWORD *)&v1454 + 1))
  {
    v1030 = (unint64_t *)(v1029 + 16);
    do
      v1031 = __ldxr(v1030);
    while (__stxr(v1031 + 1, v1030));
  }
  v1455 = &off_24EC38440;
  v1032 = (_QWORD *)operator new();
  *v1032 = &off_24EC40CB0;
  v1032[1] = v1028;
  v1032[2] = v1029;
  *(_QWORD *)&v1456 = v1032;
  v1034 = *((_QWORD *)&v1454 + 1);
  v1033 = v1454;
  if (!*((_QWORD *)&v1454 + 1))
  {
    *((_QWORD *)&v1456 + 1) = v1454;
    v1457 = 0;
    if ((_QWORD)v1454)
      v1038 = v1454 + 16;
    else
      v1038 = 0;
    goto LABEL_1656;
  }
  v1035 = (unint64_t *)(*((_QWORD *)&v1454 + 1) + 16);
  do
    v1036 = __ldxr(v1035);
  while (__stxr(v1036 + 1, v1035));
  v1037 = *((_QWORD *)&v1454 + 1);
  *((_QWORD *)&v1456 + 1) = v1033;
  v1457 = v1034;
  if ((_QWORD)v1454)
    v1038 = v1454 + 16;
  else
    v1038 = 0;
  if (!*((_QWORD *)&v1454 + 1))
  {
    v1033 = v1454;
LABEL_1656:
    v1041 = 0;
    v1458 = &off_24EC38478;
    v1459 = v1038;
    goto LABEL_1657;
  }
  v1039 = (unint64_t *)(*((_QWORD *)&v1454 + 1) + 16);
  do
    v1040 = __ldxr(v1039);
  while (__stxr(v1040 + 1, v1039));
  v1041 = *((_QWORD *)&v1454 + 1);
  v1033 = v1454;
  v1458 = &off_24EC38478;
  *(_QWORD *)&v1459 = v1038;
  *((_QWORD *)&v1459 + 1) = v1037;
  if (*((_QWORD *)&v1454 + 1))
  {
    v1042 = (unint64_t *)(*((_QWORD *)&v1454 + 1) + 16);
    do
      v1043 = __ldxr(v1042);
    while (__stxr(v1043 + 1, v1042));
  }
LABEL_1657:
  if (v1033)
    v1044 = v1033 + 24;
  else
    v1044 = 0;
  v1460 = &off_24EC2E850;
  *(_QWORD *)&v1461 = v1044;
  *((_QWORD *)&v1461 + 1) = v1041;
  if ((SHIBYTE(v1586[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1436[2]) & 0x80000000) == 0)
      goto LABEL_1662;
LABEL_1665:
    operator delete(v1436[0]);
    v1045 = (std::__shared_weak_count *)*((_QWORD *)&v1580 + 1);
    if (!*((_QWORD *)&v1580 + 1))
      goto LABEL_1670;
    goto LABEL_1666;
  }
  operator delete(v1586[0]);
  if (SHIBYTE(v1436[2]) < 0)
    goto LABEL_1665;
LABEL_1662:
  v1045 = (std::__shared_weak_count *)*((_QWORD *)&v1580 + 1);
  if (!*((_QWORD *)&v1580 + 1))
    goto LABEL_1670;
LABEL_1666:
  v1046 = (unint64_t *)&v1045->__shared_owners_;
  do
    v1047 = __ldaxr(v1046);
  while (__stlxr(v1047 - 1, v1046));
  if (!v1047)
  {
    ((void (*)(std::__shared_weak_count *))v1045->__on_zero_shared)(v1045);
    std::__shared_weak_count::__release_weak(v1045);
  }
LABEL_1670:
  v1048 = (std::__shared_weak_count *)*((_QWORD *)&v1587 + 1);
  if (!*((_QWORD *)&v1587 + 1))
    goto LABEL_1674;
  v1049 = (unint64_t *)(*((_QWORD *)&v1587 + 1) + 8);
  do
    v1050 = __ldaxr(v1049);
  while (__stlxr(v1050 - 1, v1049));
  if (!v1050)
  {
    ((void (*)(std::__shared_weak_count *))v1048->__on_zero_shared)(v1048);
    std::__shared_weak_count::__release_weak(v1048);
    if ((SHIBYTE(v1583[2]) & 0x80000000) == 0)
    {
LABEL_1675:
      if ((SHIBYTE(v1585[2]) & 0x80000000) == 0)
        goto LABEL_1676;
LABEL_1680:
      operator delete(v1585[0]);
      if (v1279)
        goto LABEL_1682;
      goto LABEL_1681;
    }
  }
  else
  {
LABEL_1674:
    if ((SHIBYTE(v1583[2]) & 0x80000000) == 0)
      goto LABEL_1675;
  }
  operator delete(v1583[0]);
  if (SHIBYTE(v1585[2]) < 0)
    goto LABEL_1680;
LABEL_1676:
  if (v1279)
    goto LABEL_1682;
LABEL_1681:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_1682:
  v1052 = *(void **)v4;
  v1051 = *(_QWORD *)(v4 + 8);
  if (v1051)
  {
    v1053 = (unint64_t *)(v1051 + 8);
    do
      v1054 = __ldxr(v1053);
    while (__stxr(v1054 + 1, v1053));
  }
  v1056 = *v2;
  v1055 = v2[1];
  if (*v2)
    v1057 = *v2 + 1064;
  else
    v1057 = 0;
  v1277 = v1057;
  v1278 = (std::__shared_weak_count *)v2[1];
  if (v1055)
  {
    v1058 = (unint64_t *)(v1055 + 8);
    do
      v1059 = __ldxr(v1058);
    while (__stxr(v1059 + 1, v1058));
  }
  if (*(char *)(v1057 + 31) < 0)
  {
    sub_223197FA4(v1583, *(void **)(v1057 + 8), *(_QWORD *)(v1057 + 16));
  }
  else
  {
    v1060 = *(_OWORD *)(v1057 + 8);
    v1583[2] = *(void **)(v1057 + 24);
    *(_OWORD *)v1583 = v1060;
  }
  if (*(char *)(v1056 + 1119) < 0)
  {
    sub_223197FA4(v1581, *(void **)(v1056 + 1096), *(_QWORD *)(v1056 + 1104));
  }
  else
  {
    *(_OWORD *)v1581 = *(_OWORD *)(v1056 + 1096);
    v1582 = *(void **)(v1056 + 1112);
  }
  *(_QWORD *)&v1580 = v1052;
  *((_QWORD *)&v1580 + 1) = v1051;
  *(_QWORD *)&v1579 = v1057;
  *((_QWORD *)&v1579 + 1) = v1055;
  if (v1055)
  {
    v1061 = (unint64_t *)(v1055 + 8);
    do
      v1062 = __ldxr(v1061);
    while (__stxr(v1062 + 1, v1061));
  }
  if (SHIBYTE(v1583[2]) < 0)
  {
    sub_223197FA4(v1586, v1583[0], (unint64_t)v1583[1]);
  }
  else
  {
    *(_OWORD *)v1586 = *(_OWORD *)v1583;
    v1586[2] = v1583[2];
  }
  if (SHIBYTE(v1582) < 0)
  {
    sub_223197FA4(v1585, v1581[0], (unint64_t)v1581[1]);
  }
  else
  {
    *(_OWORD *)v1585 = *(_OWORD *)v1581;
    v1585[2] = v1582;
  }
  *(void **)((char *)v1584 + 7) = *(void **)((char *)&v1583[1] + 7);
  v1063 = v1583[0];
  v1064 = v1583[1];
  HIBYTE(v1584[0]) = HIBYTE(v1583[1]);
  v1065 = HIBYTE(v1583[2]);
  memset(v1583, 0, 24);
  *((_QWORD *)&v1587 + 1) = v1051;
  v1588[0] = v1064;
  *(_QWORD *)((char *)v1588 + 7) = *(_QWORD *)((char *)v1584 + 7);
  *(_QWORD *)((char *)v1584 + 7) = 0;
  v1584[0] = 0;
  *(_QWORD *)&v1587 = v1052;
  if (v1051)
  {
    v1066 = (unint64_t *)(v1051 + 8);
    do
      v1067 = __ldxr(v1066);
    while (__stxr(v1067 + 1, v1066));
  }
  v1068 = operator new();
  v1590[0] = v1588[0];
  *(_QWORD *)((char *)v1590 + 7) = *(_QWORD *)((char *)v1588 + 7);
  v1588[0] = 0;
  *(_QWORD *)((char *)v1588 + 7) = 0;
  v1069 = v1587;
  v1587 = 0uLL;
  *(_BYTE *)(v1068 + 8) = 1;
  *(_QWORD *)(v1068 + 32) = 0;
  *(_QWORD *)(v1068 + 40) = 0;
  *(_QWORD *)v1068 = &off_24EC40D28;
  *(_QWORD *)(v1068 + 16) = &unk_24EC40DA0;
  *(_QWORD *)(v1068 + 24) = &unk_24EC40DE0;
  v1070 = v1590[0];
  *(_QWORD *)(v1068 + 63) = *(_QWORD *)((char *)v1590 + 7);
  *(_QWORD *)(v1068 + 48) = v1063;
  *(_QWORD *)(v1068 + 56) = v1070;
  *(_BYTE *)(v1068 + 71) = v1065;
  v1590[0] = 0;
  *(_QWORD *)((char *)v1590 + 7) = 0;
  *(_OWORD *)(v1068 + 72) = v1069;
  v1589 = 0uLL;
  v1071 = (_QWORD *)operator new();
  *v1071 = &off_24EC40EC8;
  v1071[1] = v1057;
  v1071[2] = v1055;
  v1579 = 0uLL;
  *(_QWORD *)(v1068 + 144) = 0;
  *(_QWORD *)(v1068 + 88) = v1071;
  *(_QWORD *)(v1068 + 96) = v1068 + 96;
  *(_QWORD *)(v1068 + 104) = v1068 + 96;
  *(_QWORD *)(v1068 + 112) = 0;
  *(_QWORD *)(v1068 + 120) = v1068 + 120;
  *(_QWORD *)(v1068 + 128) = v1068 + 120;
  *(_QWORD *)(v1068 + 136) = 0;
  if (!*(_QWORD *)(v1068 + 72)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v1072 = (std::__shared_weak_count *)operator new();
  v1072->__shared_owners_ = 0;
  v1073 = (unint64_t *)&v1072->__shared_owners_;
  v1072->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC41368;
  v1072->__shared_weak_owners_ = 0;
  v1072[1].__vftable = (std::__shared_weak_count_vtbl *)v1068;
  v1074 = *(std::__shared_weak_count **)(v1068 + 40);
  if (v1074)
  {
    if (v1074->__shared_owners_ != -1)
      goto LABEL_1724;
    do
      v1075 = __ldxr(v1073);
    while (__stxr(v1075 + 1, v1073));
    v1076 = (unint64_t *)&v1072->__shared_weak_owners_;
    do
      v1077 = __ldxr(v1076);
    while (__stxr(v1077 + 1, v1076));
    *(_QWORD *)(v1068 + 32) = v1068;
    *(_QWORD *)(v1068 + 40) = v1072;
    std::__shared_weak_count::__release_weak(v1074);
  }
  else
  {
    do
      v1078 = __ldxr(v1073);
    while (__stxr(v1078 + 1, v1073));
    v1079 = (unint64_t *)&v1072->__shared_weak_owners_;
    do
      v1080 = __ldxr(v1079);
    while (__stxr(v1080 + 1, v1079));
    *(_QWORD *)(v1068 + 32) = v1068;
    *(_QWORD *)(v1068 + 40) = v1072;
  }
  do
    v1081 = __ldaxr(v1073);
  while (__stlxr(v1081 - 1, v1073));
  if (!v1081)
  {
    ((void (*)(std::__shared_weak_count *))v1072->__on_zero_shared)(v1072);
    std::__shared_weak_count::__release_weak(v1072);
  }
LABEL_1724:
  v1082 = (std::__shared_weak_count *)*((_QWORD *)&v1589 + 1);
  if (*((_QWORD *)&v1589 + 1))
  {
    v1083 = (unint64_t *)(*((_QWORD *)&v1589 + 1) + 8);
    do
      v1084 = __ldaxr(v1083);
    while (__stlxr(v1084 - 1, v1083));
    if (!v1084)
    {
      ((void (*)(std::__shared_weak_count *))v1082->__on_zero_shared)(v1082);
      std::__shared_weak_count::__release_weak(v1082);
    }
  }
  *(_QWORD *)&v1589 = v1068;
  *((_QWORD *)&v1589 + 1) = v1072;
  v1085 = (std::__shared_weak_count *)*((_QWORD *)&v1587 + 1);
  if (*((_QWORD *)&v1587 + 1))
  {
    v1086 = (unint64_t *)(*((_QWORD *)&v1587 + 1) + 8);
    do
      v1087 = __ldaxr(v1086);
    while (__stlxr(v1087 - 1, v1086));
    if (!v1087)
    {
      ((void (*)(std::__shared_weak_count *))v1085->__on_zero_shared)(v1085);
      std::__shared_weak_count::__release_weak(v1085);
    }
  }
  v1088 = v1580;
  v1580 = 0uLL;
  *(_OWORD *)&v1436[1] = *(_OWORD *)v1586;
  v1436[0] = &off_24EC384E8;
  v1437 = v1586[2];
  memset(v1586, 0, 24);
  v1438 = *(_OWORD *)v1585;
  v1089 = v1585[2];
  memset(v1585, 0, 24);
  v1440 = v1088;
  v1587 = 0uLL;
  v1090 = v1589;
  v1439 = v1089;
  v1441 = v1589;
  v1589 = 0uLL;
  if (*((_QWORD *)&v1441 + 1))
  {
    v1091 = (unint64_t *)(*((_QWORD *)&v1090 + 1) + 16);
    do
      v1092 = __ldxr(v1091);
    while (__stxr(v1092 + 1, v1091));
  }
  v1442 = &off_24EC38518;
  v1093 = operator new();
  *(_QWORD *)v1093 = &off_24EC413B8;
  *(_OWORD *)(v1093 + 8) = v1090;
  *(_QWORD *)&v1443 = v1093;
  v1095 = *((_QWORD *)&v1441 + 1);
  v1094 = v1441;
  if (!*((_QWORD *)&v1441 + 1))
  {
    *((_QWORD *)&v1443 + 1) = v1441;
    v1444 = 0;
    if ((_QWORD)v1441)
      v1099 = v1441 + 16;
    else
      v1099 = 0;
    goto LABEL_1754;
  }
  v1096 = (unint64_t *)(*((_QWORD *)&v1441 + 1) + 16);
  do
    v1097 = __ldxr(v1096);
  while (__stxr(v1097 + 1, v1096));
  v1098 = *((_QWORD *)&v1441 + 1);
  *((_QWORD *)&v1443 + 1) = v1094;
  v1444 = v1095;
  if ((_QWORD)v1441)
    v1099 = v1441 + 16;
  else
    v1099 = 0;
  if (!*((_QWORD *)&v1441 + 1))
  {
    v1094 = v1441;
LABEL_1754:
    v1102 = 0;
    v1445 = &off_24EC37DE0;
    v1446 = v1099;
    goto LABEL_1755;
  }
  v1100 = (unint64_t *)(*((_QWORD *)&v1441 + 1) + 16);
  do
    v1101 = __ldxr(v1100);
  while (__stxr(v1101 + 1, v1100));
  v1102 = *((_QWORD *)&v1441 + 1);
  v1094 = v1441;
  v1445 = &off_24EC37DE0;
  *(_QWORD *)&v1446 = v1099;
  *((_QWORD *)&v1446 + 1) = v1098;
  if (*((_QWORD *)&v1441 + 1))
  {
    v1103 = (unint64_t *)(*((_QWORD *)&v1441 + 1) + 16);
    do
      v1104 = __ldxr(v1103);
    while (__stxr(v1104 + 1, v1103));
  }
LABEL_1755:
  if (v1094)
    v1105 = v1094 + 24;
  else
    v1105 = 0;
  v1447 = &off_24EC2E850;
  *(_QWORD *)&v1448 = v1105;
  *((_QWORD *)&v1448 + 1) = v1102;
  if ((SHIBYTE(v1585[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v1586[2]) & 0x80000000) == 0)
      goto LABEL_1760;
LABEL_1763:
    operator delete(v1586[0]);
    v1106 = (std::__shared_weak_count *)*((_QWORD *)&v1579 + 1);
    if (!*((_QWORD *)&v1579 + 1))
      goto LABEL_1768;
    goto LABEL_1764;
  }
  operator delete(v1585[0]);
  if (SHIBYTE(v1586[2]) < 0)
    goto LABEL_1763;
LABEL_1760:
  v1106 = (std::__shared_weak_count *)*((_QWORD *)&v1579 + 1);
  if (!*((_QWORD *)&v1579 + 1))
    goto LABEL_1768;
LABEL_1764:
  v1107 = (unint64_t *)&v1106->__shared_owners_;
  do
    v1108 = __ldaxr(v1107);
  while (__stlxr(v1108 - 1, v1107));
  if (!v1108)
  {
    ((void (*)(std::__shared_weak_count *))v1106->__on_zero_shared)(v1106);
    std::__shared_weak_count::__release_weak(v1106);
  }
LABEL_1768:
  v1109 = (std::__shared_weak_count *)*((_QWORD *)&v1580 + 1);
  if (!*((_QWORD *)&v1580 + 1))
    goto LABEL_1772;
  v1110 = (unint64_t *)(*((_QWORD *)&v1580 + 1) + 8);
  do
    v1111 = __ldaxr(v1110);
  while (__stlxr(v1111 - 1, v1110));
  if (!v1111)
  {
    ((void (*)(std::__shared_weak_count *))v1109->__on_zero_shared)(v1109);
    std::__shared_weak_count::__release_weak(v1109);
    if ((SHIBYTE(v1582) & 0x80000000) == 0)
    {
LABEL_1773:
      if ((SHIBYTE(v1583[2]) & 0x80000000) == 0)
        goto LABEL_1774;
      goto LABEL_1778;
    }
  }
  else
  {
LABEL_1772:
    if ((SHIBYTE(v1582) & 0x80000000) == 0)
      goto LABEL_1773;
  }
  operator delete(v1581[0]);
  if ((SHIBYTE(v1583[2]) & 0x80000000) == 0)
  {
LABEL_1774:
    if (v1277)
      goto LABEL_1780;
    goto LABEL_1779;
  }
LABEL_1778:
  operator delete(v1583[0]);
  if (v1277)
    goto LABEL_1780;
LABEL_1779:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_1780:
  v1112 = operator new();
  *(_QWORD *)v1112 = &off_24EC37B38;
  *(_QWORD *)(v1112 + 88) = &off_24EC37B68;
  *(_QWORD *)(v1112 + 168) = &off_24EC37BD8;
  *(_QWORD *)(v1112 + 256) = &off_24EC37C08;
  *(_QWORD *)(v1112 + 336) = &off_24EC37C40;
  *(_QWORD *)(v1112 + 424) = &off_24EC37C70;
  *(_QWORD *)(v1112 + 504) = &off_24EC37CA8;
  *(_QWORD *)(v1112 + 592) = &off_24EC37CD8;
  *(_QWORD *)(v1112 + 840) = &off_24EC37D78;
  *(_QWORD *)(v1112 + 928) = &off_24EC37DA8;
  *(_QWORD *)(v1112 + 1008) = &off_24EC37E18;
  *(_QWORD *)(v1112 + 1096) = &off_24EC37E48;
  *(_QWORD *)(v1112 + 1176) = &off_24EC37E80;
  *(_QWORD *)(v1112 + 1264) = &off_24EC37EB0;
  *(_QWORD *)(v1112 + 1296) = &off_24EC37EE8;
  *(_QWORD *)(v1112 + 1512) = &off_24EC37FC0;
  *(_QWORD *)(v1112 + 1600) = &off_24EC37FF0;
  v1275 = v1578;
  *(_QWORD *)(v1112 + 1680) = &off_24EC38028;
  *(_QWORD *)(v1112 + 1768) = &off_24EC38058;
  *(_QWORD *)(v1112 + 1848) = &off_24EC38090;
  *(_QWORD *)(v1112 + 1936) = &off_24EC380C0;
  *(_QWORD *)(v1112 + 2016) = &off_24EC38168;
  *(_QWORD *)(v1112 + 2104) = &off_24EC38198;
  *(_QWORD *)(v1112 + 2184) = &off_24EC381D0;
  *(_QWORD *)(v1112 + 2272) = &off_24EC38200;
  *(_QWORD *)(v1112 + 2352) = &off_24EC38238;
  *(_QWORD *)(v1112 + 2440) = &off_24EC38268;
  *(_QWORD *)(v1112 + 2520) = &off_24EC382A0;
  *(_QWORD *)(v1112 + 2608) = &off_24EC382D0;
  *(_QWORD *)(v1112 + 2688) = &off_24EC38308;
  *(_QWORD *)(v1112 + 3024) = &off_24EC38410;
  *(_QWORD *)(v1112 + 3112) = &off_24EC38440;
  *(_QWORD *)(v1112 + 3144) = &off_24EC38478;
  *(_QWORD *)(v1112 + 3192) = &off_24EC384E8;
  *(_QWORD *)(v1112 + 3280) = &off_24EC38518;
  *(_QWORD *)(v1112 + 2856) = &off_24EC383A8;
  *(_QWORD *)(v1112 + 2944) = &off_24EC383D8;
  *v5 = v1112;
  *(_QWORD *)(v1112 + 24) = v1424;
  v1113 = v1423;
  v1423 = 0uLL;
  v1424 = 0;
  *(_QWORD *)(v1112 + 48) = v1426;
  v1114 = v1425;
  v1425 = 0uLL;
  v1426 = 0;
  v1115 = v1427;
  v1427 = 0uLL;
  v1116 = v1428;
  v1428 = 0uLL;
  v1117 = v1430;
  v1118 = v1431;
  *((_QWORD *)&v1430 + 1) = 0;
  v1431 = 0;
  v1119 = v1435;
  v1435 = 0uLL;
  *(_QWORD *)(v1112 + 192) = v1406;
  v1120 = *(_OWORD *)&v1405[1];
  v1405[1] = 0;
  v1405[2] = 0;
  v1406 = 0;
  *(_QWORD *)(v1112 + 216) = v1408;
  v1121 = v1407;
  v1407 = 0uLL;
  v1408 = 0;
  v1122 = v1409;
  v1409 = 0uLL;
  v1123 = v1410;
  v1410 = 0uLL;
  v1124 = v1413;
  v1125 = v1412;
  *((_QWORD *)&v1412 + 1) = 0;
  v1413 = 0;
  *(_QWORD *)(v1112 + 112) = v1118;
  *(_QWORD *)(v1112 + 120) = &off_24EC37BA0;
  *(_QWORD *)(v1112 + 280) = v1124;
  *(_QWORD *)(v1112 + 288) = &off_24EC37BA0;
  v1126 = v1417;
  v1417 = 0uLL;
  *(_QWORD *)(v1112 + 360) = v1389;
  *(_OWORD *)(v1112 + 344) = *(_OWORD *)&__p[1];
  __p[1] = 0;
  __p[2] = 0;
  v1389 = 0;
  *(_QWORD *)(v1112 + 384) = v1391;
  v1127 = v1390;
  v1390 = 0uLL;
  v1391 = 0;
  v1128 = v1392;
  v1392 = 0uLL;
  v1129 = v1393;
  v1393 = 0uLL;
  v1130 = v1395;
  v1131 = v1396;
  *((_QWORD *)&v1395 + 1) = 0;
  v1396 = 0;
  v1132 = v1400;
  v1400 = 0uLL;
  *(_QWORD *)(v1112 + 528) = v1372;
  v1133 = *(_OWORD *)&__dst[1];
  __dst[1] = 0;
  __dst[2] = 0;
  v1372 = 0;
  *(_QWORD *)(v1112 + 552) = v1374;
  *(_OWORD *)(v1112 + 536) = v1373;
  v1373 = 0uLL;
  v1374 = 0;
  v1134 = v1375;
  v1375 = 0uLL;
  v1135 = v1376;
  v1376 = 0uLL;
  *(_QWORD *)(v1112 + 616) = v1379;
  v1136 = v1378;
  *((_QWORD *)&v1378 + 1) = 0;
  v1379 = 0;
  v1137 = v1383;
  v1383 = 0uLL;
  *(_QWORD *)(v1112 + 672) = &off_24EC37D10;
  *(_QWORD *)(v1112 + 696) = v1358;
  *(_OWORD *)(v1112 + 680) = *(_OWORD *)&__src[1];
  *(_QWORD *)(v1112 + 720) = v1360;
  *(_QWORD *)(v1112 + 760) = &off_24EC37D40;
  *(_QWORD *)(v1112 + 784) = v1364;
  *(_QWORD *)(v1112 + 448) = v1131;
  *(_QWORD *)(v1112 + 456) = &off_24EC2E888;
  *(_QWORD *)(v1112 + 624) = &off_24EC2E888;
  *(_QWORD *)(v1112 + 792) = &off_24EC2E888;
  v1138 = v1361;
  v1139 = v1362;
  v1140 = v1366;
  *(_QWORD *)(v1112 + 864) = v1342;
  v1141 = *(_OWORD *)&v1341[1];
  v1341[1] = 0;
  v1341[2] = 0;
  v1342 = 0;
  *(_QWORD *)(v1112 + 888) = v1344;
  *(_OWORD *)(v1112 + 872) = v1343;
  v1343 = 0uLL;
  v1344 = 0;
  v1142 = v1345;
  v1345 = 0uLL;
  v1143 = v1346;
  v1346 = 0uLL;
  *(_QWORD *)(v1112 + 952) = v1349;
  v1144 = v1348;
  *((_QWORD *)&v1348 + 1) = 0;
  v1349 = 0;
  v1276 = v1353;
  v1353 = 0uLL;
  *(_QWORD *)(v1112 + 1032) = v1325;
  *(_OWORD *)(v1112 + 1016) = *(_OWORD *)&v1324[1];
  v1324[1] = 0;
  v1324[2] = 0;
  v1325 = 0;
  *(_QWORD *)(v1112 + 1056) = v1327;
  *(_OWORD *)(v1112 + 1208) = v1309;
  *(_OWORD *)(v1112 + 1352) = *(_OWORD *)&v1293[1];
  *(_OWORD *)(v1112 + 1544) = v1568;
  *(_OWORD *)(v1112 + 1688) = *(_OWORD *)&v1553[1];
  *(_OWORD *)(v1112 + 1880) = v1542;
  *(_OWORD *)(v1112 + 2024) = *(_OWORD *)&v1527[1];
  *(_OWORD *)(v1112 + 2216) = v1516;
  *(_OWORD *)(v1112 + 2360) = *(_OWORD *)&v1501[1];
  *(_OWORD *)(v1112 + 2552) = v1490;
  *(_OWORD *)(v1112 + 2696) = *(_OWORD *)&v1475[1];
  *(_OWORD *)(v1112 + 2888) = v1464;
  *(_OWORD *)(v1112 + 3032) = *(_OWORD *)&v1449[1];
  *(_OWORD *)(v1112 + 3224) = v1438;
  v1145 = v1326;
  v1326 = 0uLL;
  v1327 = 0;
  *(_OWORD *)(v1112 + 8) = v1113;
  v1146 = v1328;
  v1328 = 0uLL;
  *(_OWORD *)(v1112 + 32) = v1114;
  v1147 = v1329;
  v1329 = 0uLL;
  *(_QWORD *)(v1112 + 1120) = v1332;
  *(_OWORD *)(v1112 + 56) = v1115;
  v1148 = v1331;
  *((_QWORD *)&v1331 + 1) = 0;
  v1332 = 0;
  *(_OWORD *)(v1112 + 72) = v1116;
  v1149 = v1336;
  v1336 = 0uLL;
  *(_QWORD *)(v1112 + 1200) = v1308;
  *(_OWORD *)(v1112 + 96) = v1117;
  *(_OWORD *)(v1112 + 128) = v1433;
  v1150 = *(_OWORD *)&v1307[1];
  v1307[1] = 0;
  v1307[2] = 0;
  v1308 = 0;
  *(_QWORD *)(v1112 + 1224) = v1310;
  v1309 = 0uLL;
  v1310 = 0;
  *(_OWORD *)(v1112 + 152) = v1119;
  v1151 = v1311;
  v1311 = 0uLL;
  *(_OWORD *)(v1112 + 176) = v1120;
  v1152 = v1312;
  v1312 = 0uLL;
  *(_QWORD *)(v1112 + 1288) = v1315;
  *(_OWORD *)(v1112 + 200) = v1121;
  v1153 = v1314;
  *((_QWORD *)&v1314 + 1) = 0;
  v1315 = 0;
  *(_OWORD *)(v1112 + 224) = v1122;
  *(_OWORD *)(v1112 + 240) = v1123;
  v1154 = v1319;
  v1319 = 0uLL;
  *(_QWORD *)(v1112 + 1344) = &off_24EC37F58;
  *(_QWORD *)(v1112 + 1368) = v1294;
  *(_QWORD *)(v1112 + 1392) = v1296;
  *(_QWORD *)(v1112 + 1432) = &off_24EC37F88;
  *(_QWORD *)(v1112 + 1456) = v1300;
  *(_OWORD *)(v1112 + 264) = v1125;
  *(_OWORD *)(v1112 + 296) = v1415;
  *(_OWORD *)(v1112 + 320) = v1126;
  v1155 = v1297;
  v1156 = v1298;
  v1157 = v1302;
  *(_QWORD *)(v1112 + 1536) = v1567;
  *(_OWORD *)(v1112 + 368) = v1127;
  v1158 = *(_OWORD *)&v1566[1];
  v1566[1] = 0;
  v1566[2] = 0;
  v1567 = 0;
  *(_QWORD *)(v1112 + 1560) = v1569;
  v1568 = 0uLL;
  v1569 = 0;
  *(_OWORD *)(v1112 + 392) = v1128;
  *(_OWORD *)(v1112 + 408) = v1129;
  v1159 = v1570;
  v1570 = 0uLL;
  v1160 = v1571;
  v1571 = 0uLL;
  *(_QWORD *)(v1112 + 1624) = v1574;
  *(_OWORD *)(v1112 + 432) = v1130;
  *(_OWORD *)(v1112 + 464) = v1398;
  v1161 = v1573;
  *((_QWORD *)&v1573 + 1) = 0;
  v1574 = 0;
  v1578 = 0uLL;
  *(_QWORD *)(v1112 + 1704) = v1554;
  v1553[1] = 0;
  v1553[2] = 0;
  v1554 = 0;
  *(_QWORD *)(v1112 + 1728) = v1556;
  *(_OWORD *)(v1112 + 488) = v1132;
  v1162 = v1555;
  v1555 = 0uLL;
  v1556 = 0;
  *(_OWORD *)(v1112 + 512) = v1133;
  v1163 = v1557;
  v1557 = 0uLL;
  *(_OWORD *)(v1112 + 560) = v1134;
  *(_OWORD *)(v1112 + 576) = v1135;
  v1164 = v1558;
  v1558 = 0uLL;
  *(_QWORD *)(v1112 + 1792) = v1561;
  v1165 = v1560;
  *((_QWORD *)&v1560 + 1) = 0;
  v1561 = 0;
  *(_OWORD *)(v1112 + 600) = v1136;
  *(_OWORD *)(v1112 + 632) = v1381;
  v1166 = v1565;
  v1565 = 0uLL;
  *(_QWORD *)(v1112 + 1872) = v1541;
  *(_OWORD *)(v1112 + 656) = v1137;
  *(_OWORD *)(v1112 + 704) = v1359;
  v1167 = *(_OWORD *)&v1540[1];
  v1540[1] = 0;
  v1540[2] = 0;
  v1541 = 0;
  *(_QWORD *)(v1112 + 1896) = v1543;
  v1542 = 0uLL;
  v1543 = 0;
  *(_OWORD *)(v1112 + 728) = v1138;
  *(_OWORD *)(v1112 + 744) = v1139;
  v1168 = v1544;
  v1544 = 0uLL;
  *(_OWORD *)(v1112 + 768) = v1363;
  *(_OWORD *)(v1112 + 800) = v1365;
  v1169 = v1545;
  v1545 = 0uLL;
  *(_QWORD *)(v1112 + 1960) = v1548;
  *(_OWORD *)(v1112 + 824) = v1140;
  v1170 = v1547;
  *((_QWORD *)&v1547 + 1) = 0;
  v1548 = 0;
  *(_OWORD *)(v1112 + 848) = v1141;
  v1171 = v1552;
  v1552 = 0uLL;
  *(_QWORD *)(v1112 + 2040) = v1528;
  v1527[1] = 0;
  v1527[2] = 0;
  v1528 = 0;
  *(_QWORD *)(v1112 + 2064) = v1530;
  *(_OWORD *)(v1112 + 896) = v1142;
  *(_OWORD *)(v1112 + 912) = v1143;
  v1172 = v1529;
  v1529 = 0uLL;
  v1530 = 0;
  v1173 = v1531;
  v1531 = 0uLL;
  *(_OWORD *)(v1112 + 1944) = v1170;
  v1174 = v1532;
  v1532 = 0uLL;
  *(_QWORD *)(v1112 + 2128) = v1535;
  *(_OWORD *)(v1112 + 936) = v1144;
  *(_OWORD *)(v1112 + 1712) = v1162;
  v1175 = v1550;
  *(_QWORD *)&v1547 = 0;
  v1176 = v1534;
  *((_QWORD *)&v1534 + 1) = 0;
  v1535 = 0;
  *(_OWORD *)(v1112 + 1920) = v1169;
  v1177 = v1539;
  v1539 = 0uLL;
  *(_QWORD *)(v1112 + 2208) = v1515;
  *(_OWORD *)(v1112 + 1904) = v1168;
  *(_OWORD *)(v1112 + 1808) = v1563;
  v1178 = *(_OWORD *)&v1514[1];
  v1514[1] = 0;
  v1514[2] = 0;
  v1515 = 0;
  *(_QWORD *)(v1112 + 2232) = v1517;
  v1516 = 0uLL;
  v1517 = 0;
  *(_OWORD *)(v1112 + 1856) = v1167;
  v1179 = v1518;
  v1518 = 0uLL;
  *(_QWORD *)&v1563 = 0;
  *(_QWORD *)(v1112 + 1824) = &off_24EC2E850;
  *(_OWORD *)(v1112 + 1832) = v1166;
  v1180 = v1519;
  v1519 = 0uLL;
  *(_QWORD *)(v1112 + 1800) = &off_24EC37DE0;
  *((_QWORD *)&v1563 + 1) = 0;
  *(_QWORD *)(v1112 + 2296) = v1522;
  *(_QWORD *)&v1560 = 0;
  *(_OWORD *)(v1112 + 1776) = v1165;
  v1181 = v1521;
  *((_QWORD *)&v1521 + 1) = 0;
  v1522 = 0;
  *(_OWORD *)(v1112 + 1752) = v1164;
  v1182 = v1526;
  *(_QWORD *)&v1430 = 0;
  v1526 = 0uLL;
  *(_QWORD *)(v1112 + 2376) = v1502;
  v1501[1] = 0;
  v1501[2] = 0;
  v1502 = 0;
  *(_QWORD *)(v1112 + 2400) = v1504;
  *(_OWORD *)(v1112 + 1736) = v1163;
  *(_OWORD *)(v1112 + 968) = v1351;
  v1183 = v1513;
  *(_OWORD *)(v1112 + 992) = v1276;
  *(_OWORD *)(v1112 + 1040) = v1145;
  v1184 = v1505;
  v1185 = v1506;
  *(_OWORD *)(v1112 + 1064) = v1146;
  *(_OWORD *)(v1112 + 1080) = v1147;
  v1186 = v1500;
  *(_QWORD *)(v1112 + 1656) = &off_24EC2E850;
  *(_OWORD *)(v1112 + 1664) = v1275;
  *(_OWORD *)(v1112 + 1104) = v1148;
  *(_QWORD *)(v1112 + 1632) = &off_24EC37DE0;
  *(_OWORD *)(v1112 + 1640) = v1576;
  v1576 = 0uLL;
  v1187 = v1492;
  v1188 = v1493;
  v1189 = v1487;
  *(_QWORD *)&v1573 = 0;
  *(_OWORD *)(v1112 + 1608) = v1161;
  *(_OWORD *)(v1112 + 1136) = v1334;
  *(_OWORD *)(v1112 + 1568) = v1159;
  *(_OWORD *)(v1112 + 1584) = v1160;
  v1190 = v1479;
  v1191 = v1480;
  v1192 = v1474;
  *(_OWORD *)(v1112 + 1160) = v1149;
  *(_OWORD *)(v1112 + 1184) = v1150;
  *(_OWORD *)(v1112 + 1232) = v1151;
  v1193 = v1466;
  v1194 = v1467;
  v1195 = v1461;
  *(_OWORD *)(v1112 + 1248) = v1152;
  *(_OWORD *)(v1112 + 1496) = v1157;
  v1197 = v1440;
  v1196 = v1441;
  *(_OWORD *)(v1112 + 1520) = v1158;
  v1198 = v1301;
  v1300 = 0;
  *(_QWORD *)&v1301 = 0;
  *(_QWORD *)(v1112 + 1488) = &off_24EC2E850;
  *((_QWORD *)&v1301 + 1) = 0;
  v1302 = 0uLL;
  *(_OWORD *)(v1112 + 1272) = v1153;
  *(_OWORD *)(v1112 + 1304) = v1317;
  *(_OWORD *)(v1112 + 1328) = v1154;
  *(_QWORD *)(v1112 + 1464) = &off_24EC37DE0;
  *(_OWORD *)(v1112 + 1472) = v1198;
  *(_OWORD *)(v1112 + 1376) = v1295;
  *(_OWORD *)(v1112 + 1440) = v1299;
  v1299 = 0uLL;
  *(_OWORD *)(v1112 + 1400) = v1155;
  *(_OWORD *)(v1112 + 1416) = v1156;
  v1297 = 0uLL;
  v1298 = 0uLL;
  *(_OWORD *)(v1112 + 1976) = v1175;
  *(_OWORD *)(v1112 + 2000) = v1171;
  v1294 = 0;
  v1295 = 0uLL;
  v1296 = 0;
  *(_OWORD *)(v1112 + 2048) = v1172;
  *(_OWORD *)(v1112 + 2072) = v1173;
  *(_OWORD *)(v1112 + 2088) = v1174;
  v1293[2] = 0;
  v1293[1] = 0;
  *(_OWORD *)(v1112 + 2112) = v1176;
  *(_OWORD *)(v1112 + 2144) = v1537;
  *(_OWORD *)(v1112 + 2168) = v1177;
  *(_QWORD *)&v1314 = 0;
  *(_QWORD *)&v1317 = 0;
  *(_QWORD *)(v1112 + 1320) = &off_24EC2E850;
  *(_OWORD *)(v1112 + 2192) = v1178;
  *(_OWORD *)(v1112 + 2240) = v1179;
  *(_OWORD *)(v1112 + 2256) = v1180;
  *((_QWORD *)&v1317 + 1) = 0;
  *(_OWORD *)(v1112 + 2280) = v1181;
  *(_OWORD *)(v1112 + 2312) = v1524;
  *(_OWORD *)(v1112 + 2336) = v1182;
  *(_OWORD *)(v1112 + 2384) = v1503;
  *(_OWORD *)(v1112 + 2408) = v1184;
  *(_OWORD *)(v1112 + 2424) = v1185;
  *(_OWORD *)(v1112 + 2448) = v1508;
  *(_OWORD *)(v1112 + 2480) = v1511;
  *(_OWORD *)(v1112 + 2504) = v1183;
  *(_OWORD *)(v1112 + 2528) = *(_OWORD *)&v1488[1];
  *(_OWORD *)(v1112 + 2576) = v1187;
  *(_OWORD *)(v1112 + 2592) = v1188;
  *(_OWORD *)(v1112 + 2616) = v1495;
  *(_OWORD *)(v1112 + 2648) = v1498;
  *(_OWORD *)(v1112 + 2672) = v1186;
  *(_OWORD *)(v1112 + 2720) = v1477;
  *(_OWORD *)(v1112 + 2744) = v1190;
  *(_OWORD *)(v1112 + 2760) = v1191;
  *(_OWORD *)(v1112 + 2784) = v1482;
  *(_OWORD *)(v1112 + 2816) = v1485;
  *(_OWORD *)(v1112 + 2840) = v1189;
  *(_OWORD *)(v1112 + 2864) = *(_OWORD *)&v1462[1];
  *(_OWORD *)(v1112 + 2912) = v1193;
  *(_OWORD *)(v1112 + 2928) = v1194;
  *(_OWORD *)(v1112 + 2952) = v1469;
  *(_OWORD *)(v1112 + 2984) = v1472;
  *(_OWORD *)(v1112 + 3008) = v1192;
  *(_OWORD *)(v1112 + 3056) = v1451;
  *(_OWORD *)(v1112 + 3080) = v1453;
  *(_OWORD *)(v1112 + 3096) = v1454;
  *(_OWORD *)(v1112 + 3120) = v1456;
  *(_OWORD *)(v1112 + 3152) = v1459;
  *(_OWORD *)(v1112 + 3176) = v1195;
  *(_OWORD *)(v1112 + 3200) = *(_OWORD *)&v1436[1];
  *(_OWORD *)(v1112 + 3248) = v1197;
  v1503 = 0uLL;
  v1504 = 0;
  *(_QWORD *)&v1331 = 0;
  v1334 = 0uLL;
  *(_QWORD *)(v1112 + 1152) = &off_24EC2E850;
  v1505 = 0uLL;
  *(_QWORD *)(v1112 + 1128) = &off_24EC37DE0;
  v1506 = 0uLL;
  *(_QWORD *)(v1112 + 2464) = v1509;
  *((_QWORD *)&v1508 + 1) = 0;
  v1509 = 0;
  v1513 = 0uLL;
  *(_QWORD *)(v1112 + 2544) = v1489;
  v1488[1] = 0;
  v1488[2] = 0;
  v1489 = 0;
  *(_QWORD *)(v1112 + 2568) = v1491;
  v1490 = 0uLL;
  v1491 = 0;
  v1492 = 0uLL;
  v1493 = 0uLL;
  *(_QWORD *)(v1112 + 2632) = v1496;
  *(_QWORD *)(v1112 + 960) = &off_24EC37DE0;
  *(_QWORD *)&v1348 = 0;
  v1351 = 0uLL;
  *(_QWORD *)(v1112 + 984) = &off_24EC2E850;
  *((_QWORD *)&v1495 + 1) = 0;
  v1496 = 0;
  *(_QWORD *)(v1112 + 1968) = &off_24EC380F8;
  *(_QWORD *)(v1112 + 2136) = &off_24EC380F8;
  *(_QWORD *)(v1112 + 2304) = &off_24EC380F8;
  *(_QWORD *)(v1112 + 2472) = &off_24EC380F8;
  *(_QWORD *)(v1112 + 2640) = &off_24EC380F8;
  v1500 = 0uLL;
  *(_QWORD *)(v1112 + 2712) = v1476;
  v1433 = 0uLL;
  *(_QWORD *)(v1112 + 144) = &off_24EC2E850;
  *(_QWORD *)&v1412 = 0;
  v1415 = 0uLL;
  *(_QWORD *)(v1112 + 312) = &off_24EC2E850;
  *(_QWORD *)&v1395 = 0;
  v1398 = 0uLL;
  *((_QWORD *)&v1365 + 1) = 0;
  v1366 = 0uLL;
  *(_QWORD *)(v1112 + 480) = &off_24EC2E850;
  *((_QWORD *)&v1381 + 1) = 0;
  v1364 = 0;
  *(_QWORD *)&v1365 = 0;
  *(_QWORD *)(v1112 + 816) = &off_24EC2E850;
  *(_QWORD *)&v1378 = 0;
  *(_QWORD *)&v1381 = 0;
  *(_QWORD *)(v1112 + 648) = &off_24EC2E850;
  __src[2] = 0;
  __src[1] = 0;
  v1363 = 0uLL;
  v1358 = 0;
  v1359 = 0uLL;
  v1361 = 0uLL;
  v1362 = 0uLL;
  v1360 = 0;
  v1550 = 0uLL;
  *(_QWORD *)(v1112 + 1992) = &off_24EC2E850;
  *(_QWORD *)&v1534 = 0;
  v1537 = 0uLL;
  *(_QWORD *)(v1112 + 2160) = &off_24EC2E850;
  *(_QWORD *)&v1521 = 0;
  v1524 = 0uLL;
  *(_QWORD *)(v1112 + 2328) = &off_24EC2E850;
  *(_QWORD *)&v1508 = 0;
  v1511 = 0uLL;
  *(_QWORD *)(v1112 + 2496) = &off_24EC2E850;
  *(_QWORD *)&v1495 = 0;
  v1498 = 0uLL;
  *(_QWORD *)(v1112 + 2664) = &off_24EC2E850;
  v1475[1] = 0;
  v1475[2] = 0;
  v1476 = 0;
  *(_QWORD *)(v1112 + 2736) = v1478;
  v1477 = 0uLL;
  v1478 = 0;
  v1479 = 0uLL;
  v1480 = 0uLL;
  *(_QWORD *)(v1112 + 2776) = &off_24EC38338;
  *(_QWORD *)(v1112 + 2800) = v1483;
  *((_QWORD *)&v1482 + 1) = 0;
  v1483 = 0;
  *(_QWORD *)(v1112 + 2808) = &off_24EC38370;
  *(_QWORD *)&v1482 = 0;
  v1485 = 0uLL;
  *(_QWORD *)(v1112 + 2832) = &off_24EC2E850;
  v1487 = 0uLL;
  *(_QWORD *)(v1112 + 2880) = v1463;
  v1462[1] = 0;
  v1462[2] = 0;
  v1463 = 0;
  *(_QWORD *)(v1112 + 2904) = v1465;
  v1464 = 0uLL;
  v1465 = 0;
  v1466 = 0uLL;
  v1467 = 0uLL;
  *(_QWORD *)(v1112 + 2968) = v1470;
  *((_QWORD *)&v1469 + 1) = 0;
  v1470 = 0;
  *(_QWORD *)(v1112 + 2976) = &off_24EC38370;
  *(_QWORD *)&v1469 = 0;
  v1472 = 0uLL;
  *(_QWORD *)(v1112 + 3000) = &off_24EC2E850;
  v1474 = 0uLL;
  *(_QWORD *)(v1112 + 3048) = v1450;
  v1449[1] = 0;
  v1449[2] = 0;
  v1450 = 0;
  *(_QWORD *)(v1112 + 3072) = v1452;
  v1451 = 0uLL;
  v1452 = 0;
  v1453 = 0uLL;
  v1454 = 0uLL;
  *(_QWORD *)(v1112 + 3136) = v1457;
  v1457 = 0;
  v1456 = 0uLL;
  v1459 = 0uLL;
  *(_QWORD *)(v1112 + 3168) = &off_24EC2E850;
  v1461 = 0uLL;
  *(_QWORD *)(v1112 + 3216) = v1437;
  v1436[1] = 0;
  v1436[2] = 0;
  v1437 = 0;
  *(_QWORD *)(v1112 + 3240) = v1439;
  v1438 = 0uLL;
  v1439 = 0;
  v1440 = 0uLL;
  *(_OWORD *)(v1112 + 3264) = v1196;
  v1441 = 0uLL;
  *(_OWORD *)(v1112 + 3288) = v1443;
  *(_QWORD *)(v1112 + 3304) = v1444;
  *((_QWORD *)&v1443 + 1) = 0;
  v1444 = 0;
  *(_QWORD *)(v1112 + 3312) = &off_24EC37DE0;
  *(_OWORD *)(v1112 + 3320) = v1446;
  *(_QWORD *)&v1443 = 0;
  v1446 = 0uLL;
  *(_QWORD *)(v1112 + 3336) = &off_24EC2E850;
  *(_OWORD *)(v1112 + 3344) = v1448;
  v1448 = 0uLL;
  sub_2234ED49C((uint64_t)v1436);
  if (v1278)
  {
    v1199 = (unint64_t *)&v1278->__shared_owners_;
    do
      v1200 = __ldaxr(v1199);
    while (__stlxr(v1200 - 1, v1199));
    if (!v1200)
    {
      ((void (*)(std::__shared_weak_count *))v1278->__on_zero_shared)(v1278);
      std::__shared_weak_count::__release_weak(v1278);
    }
  }
  sub_2234ED680((uint64_t)v1449);
  if (v1280)
  {
    v1201 = (unint64_t *)&v1280->__shared_owners_;
    do
      v1202 = __ldaxr(v1201);
    while (__stlxr(v1202 - 1, v1201));
    if (!v1202)
    {
      ((void (*)(std::__shared_weak_count *))v1280->__on_zero_shared)(v1280);
      std::__shared_weak_count::__release_weak(v1280);
    }
  }
  sub_2234ED864((uint64_t)v1462);
  if (v1281)
  {
    v1203 = (unint64_t *)&v1281->__shared_owners_;
    do
      v1204 = __ldaxr(v1203);
    while (__stlxr(v1204 - 1, v1203));
    if (!v1204)
    {
      ((void (*)(std::__shared_weak_count *))v1281->__on_zero_shared)(v1281);
      std::__shared_weak_count::__release_weak(v1281);
    }
  }
  sub_2234EDA48((uint64_t)v1475);
  if (v1282)
  {
    v1205 = (unint64_t *)&v1282->__shared_owners_;
    do
      v1206 = __ldaxr(v1205);
    while (__stlxr(v1206 - 1, v1205));
    if (!v1206)
    {
      ((void (*)(std::__shared_weak_count *))v1282->__on_zero_shared)(v1282);
      std::__shared_weak_count::__release_weak(v1282);
    }
  }
  sub_2234EDC2C((uint64_t)v1488);
  if (v1283)
  {
    v1207 = (unint64_t *)&v1283->__shared_owners_;
    do
      v1208 = __ldaxr(v1207);
    while (__stlxr(v1208 - 1, v1207));
    if (!v1208)
    {
      ((void (*)(std::__shared_weak_count *))v1283->__on_zero_shared)(v1283);
      std::__shared_weak_count::__release_weak(v1283);
    }
  }
  sub_2234EDE10((uint64_t)v1501);
  if (v1284)
  {
    v1209 = (unint64_t *)&v1284->__shared_owners_;
    do
      v1210 = __ldaxr(v1209);
    while (__stlxr(v1210 - 1, v1209));
    if (!v1210)
    {
      ((void (*)(std::__shared_weak_count *))v1284->__on_zero_shared)(v1284);
      std::__shared_weak_count::__release_weak(v1284);
    }
  }
  sub_2234EDFF4((uint64_t)v1514);
  if (v1285)
  {
    v1211 = (unint64_t *)&v1285->__shared_owners_;
    do
      v1212 = __ldaxr(v1211);
    while (__stlxr(v1212 - 1, v1211));
    if (!v1212)
    {
      ((void (*)(std::__shared_weak_count *))v1285->__on_zero_shared)(v1285);
      std::__shared_weak_count::__release_weak(v1285);
    }
  }
  sub_2234EE1D8((uint64_t)v1527);
  if (v1286)
  {
    v1213 = (unint64_t *)&v1286->__shared_owners_;
    do
      v1214 = __ldaxr(v1213);
    while (__stlxr(v1214 - 1, v1213));
    if (!v1214)
    {
      ((void (*)(std::__shared_weak_count *))v1286->__on_zero_shared)(v1286);
      std::__shared_weak_count::__release_weak(v1286);
    }
  }
  sub_2234EE3BC((uint64_t)v1540);
  if (v1287)
  {
    v1215 = (unint64_t *)&v1287->__shared_owners_;
    do
      v1216 = __ldaxr(v1215);
    while (__stlxr(v1216 - 1, v1215));
    if (!v1216)
    {
      ((void (*)(std::__shared_weak_count *))v1287->__on_zero_shared)(v1287);
      std::__shared_weak_count::__release_weak(v1287);
    }
  }
  sub_2234EE5A0((uint64_t)v1553);
  if (v1288)
  {
    v1217 = (unint64_t *)&v1288->__shared_owners_;
    do
      v1218 = __ldaxr(v1217);
    while (__stlxr(v1218 - 1, v1217));
    if (!v1218)
    {
      ((void (*)(std::__shared_weak_count *))v1288->__on_zero_shared)(v1288);
      std::__shared_weak_count::__release_weak(v1288);
    }
  }
  sub_2234EE784((uint64_t)v1566);
  if (v1289)
  {
    v1219 = (unint64_t *)&v1289->__shared_owners_;
    do
      v1220 = __ldaxr(v1219);
    while (__stlxr(v1220 - 1, v1219));
    if (!v1220)
    {
      ((void (*)(std::__shared_weak_count *))v1289->__on_zero_shared)(v1289);
      std::__shared_weak_count::__release_weak(v1289);
    }
  }
  sub_2234EE968((uint64_t)v1293);
  v1221 = v1291;
  if (v1291)
  {
    v1222 = (unint64_t *)&v1291->__shared_owners_;
    do
      v1223 = __ldaxr(v1222);
    while (__stlxr(v1223 - 1, v1222));
    if (!v1223)
    {
      ((void (*)(std::__shared_weak_count *))v1221->__on_zero_shared)(v1221);
      std::__shared_weak_count::__release_weak(v1221);
    }
  }
  v1224 = (std::__shared_weak_count *)*((_QWORD *)&v1292 + 1);
  if (*((_QWORD *)&v1292 + 1))
  {
    v1225 = (unint64_t *)(*((_QWORD *)&v1292 + 1) + 8);
    do
      v1226 = __ldaxr(v1225);
    while (__stlxr(v1226 - 1, v1225));
    if (!v1226)
    {
      ((void (*)(std::__shared_weak_count *))v1224->__on_zero_shared)(v1224);
      std::__shared_weak_count::__release_weak(v1224);
    }
  }
  sub_2234EEB4C((uint64_t)v1307);
  v1227 = v1304;
  if (v1304)
  {
    v1228 = (unint64_t *)&v1304->__shared_owners_;
    do
      v1229 = __ldaxr(v1228);
    while (__stlxr(v1229 - 1, v1228));
    if (!v1229)
    {
      ((void (*)(std::__shared_weak_count *))v1227->__on_zero_shared)(v1227);
      std::__shared_weak_count::__release_weak(v1227);
    }
  }
  v1230 = v1306;
  if (v1306)
  {
    v1231 = (unint64_t *)&v1306->__shared_owners_;
    do
      v1232 = __ldaxr(v1231);
    while (__stlxr(v1232 - 1, v1231));
    if (!v1232)
    {
      ((void (*)(std::__shared_weak_count *))v1230->__on_zero_shared)(v1230);
      std::__shared_weak_count::__release_weak(v1230);
    }
  }
  sub_2234EED30((uint64_t)v1324);
  v1233 = v1321;
  if (v1321)
  {
    v1234 = (unint64_t *)&v1321->__shared_owners_;
    do
      v1235 = __ldaxr(v1234);
    while (__stlxr(v1235 - 1, v1234));
    if (!v1235)
    {
      ((void (*)(std::__shared_weak_count *))v1233->__on_zero_shared)(v1233);
      std::__shared_weak_count::__release_weak(v1233);
    }
  }
  v1236 = v1323;
  if (v1323)
  {
    v1237 = (unint64_t *)&v1323->__shared_owners_;
    do
      v1238 = __ldaxr(v1237);
    while (__stlxr(v1238 - 1, v1237));
    if (!v1238)
    {
      ((void (*)(std::__shared_weak_count *))v1236->__on_zero_shared)(v1236);
      std::__shared_weak_count::__release_weak(v1236);
    }
  }
  sub_2234EEF14((uint64_t)v1341);
  v1239 = v1338;
  if (v1338)
  {
    v1240 = (unint64_t *)&v1338->__shared_owners_;
    do
      v1241 = __ldaxr(v1240);
    while (__stlxr(v1241 - 1, v1240));
    if (!v1241)
    {
      ((void (*)(std::__shared_weak_count *))v1239->__on_zero_shared)(v1239);
      std::__shared_weak_count::__release_weak(v1239);
    }
  }
  v1242 = v1340;
  if (v1340)
  {
    v1243 = (unint64_t *)&v1340->__shared_owners_;
    do
      v1244 = __ldaxr(v1243);
    while (__stlxr(v1244 - 1, v1243));
    if (!v1244)
    {
      ((void (*)(std::__shared_weak_count *))v1242->__on_zero_shared)(v1242);
      std::__shared_weak_count::__release_weak(v1242);
    }
  }
  sub_2234EF0F8((uint64_t)__src);
  v1245 = v1355;
  if (v1355)
  {
    v1246 = (unint64_t *)&v1355->__shared_owners_;
    do
      v1247 = __ldaxr(v1246);
    while (__stlxr(v1247 - 1, v1246));
    if (!v1247)
    {
      ((void (*)(std::__shared_weak_count *))v1245->__on_zero_shared)(v1245);
      std::__shared_weak_count::__release_weak(v1245);
    }
  }
  v1248 = (std::__shared_weak_count *)*((_QWORD *)&v1356 + 1);
  if (*((_QWORD *)&v1356 + 1))
  {
    v1249 = (unint64_t *)(*((_QWORD *)&v1356 + 1) + 8);
    do
      v1250 = __ldaxr(v1249);
    while (__stlxr(v1250 - 1, v1249));
    if (!v1250)
    {
      ((void (*)(std::__shared_weak_count *))v1248->__on_zero_shared)(v1248);
      std::__shared_weak_count::__release_weak(v1248);
    }
  }
  sub_2234EF2DC((uint64_t)__dst);
  v1251 = v1368;
  if (v1368)
  {
    v1252 = (unint64_t *)&v1368->__shared_owners_;
    do
      v1253 = __ldaxr(v1252);
    while (__stlxr(v1253 - 1, v1252));
    if (!v1253)
    {
      ((void (*)(std::__shared_weak_count *))v1251->__on_zero_shared)(v1251);
      std::__shared_weak_count::__release_weak(v1251);
    }
  }
  v1254 = v1370;
  if (v1370)
  {
    v1255 = (unint64_t *)&v1370->__shared_owners_;
    do
      v1256 = __ldaxr(v1255);
    while (__stlxr(v1256 - 1, v1255));
    if (!v1256)
    {
      ((void (*)(std::__shared_weak_count *))v1254->__on_zero_shared)(v1254);
      std::__shared_weak_count::__release_weak(v1254);
    }
  }
  sub_2234EF4C0((uint64_t)__p);
  v1257 = v1385;
  if (v1385)
  {
    v1258 = (unint64_t *)&v1385->__shared_owners_;
    do
      v1259 = __ldaxr(v1258);
    while (__stlxr(v1259 - 1, v1258));
    if (!v1259)
    {
      ((void (*)(std::__shared_weak_count *))v1257->__on_zero_shared)(v1257);
      std::__shared_weak_count::__release_weak(v1257);
    }
  }
  v1260 = v1387;
  if (v1387)
  {
    v1261 = (unint64_t *)&v1387->__shared_owners_;
    do
      v1262 = __ldaxr(v1261);
    while (__stlxr(v1262 - 1, v1261));
    if (!v1262)
    {
      ((void (*)(std::__shared_weak_count *))v1260->__on_zero_shared)(v1260);
      std::__shared_weak_count::__release_weak(v1260);
    }
  }
  sub_2234EF6A4((uint64_t)v1405);
  v1263 = v1402;
  if (v1402)
  {
    v1264 = (unint64_t *)&v1402->__shared_owners_;
    do
      v1265 = __ldaxr(v1264);
    while (__stlxr(v1265 - 1, v1264));
    if (!v1265)
    {
      ((void (*)(std::__shared_weak_count *))v1263->__on_zero_shared)(v1263);
      std::__shared_weak_count::__release_weak(v1263);
    }
  }
  v1266 = v1404;
  if (v1404)
  {
    v1267 = (unint64_t *)&v1404->__shared_owners_;
    do
      v1268 = __ldaxr(v1267);
    while (__stlxr(v1268 - 1, v1267));
    if (!v1268)
    {
      ((void (*)(std::__shared_weak_count *))v1266->__on_zero_shared)(v1266);
      std::__shared_weak_count::__release_weak(v1266);
    }
  }
  sub_2234EF888((uint64_t)&v1422);
  v1269 = v1419;
  if (v1419)
  {
    v1270 = (unint64_t *)&v1419->__shared_owners_;
    do
      v1271 = __ldaxr(v1270);
    while (__stlxr(v1271 - 1, v1270));
    if (!v1271)
    {
      ((void (*)(std::__shared_weak_count *))v1269->__on_zero_shared)(v1269);
      std::__shared_weak_count::__release_weak(v1269);
    }
  }
  v1272 = v1421;
  if (v1421)
  {
    v1273 = (unint64_t *)&v1421->__shared_owners_;
    do
      v1274 = __ldaxr(v1273);
    while (__stlxr(v1274 - 1, v1273));
    if (!v1274)
    {
      ((void (*)(std::__shared_weak_count *))v1272->__on_zero_shared)(v1272);
      std::__shared_weak_count::__release_weak(v1272);
    }
  }
}

void sub_22348EF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,char a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  char a65;
  char a67;
  char a69;
  char a71;
  uint64_t v71;
  uint64_t v72;

  if (*(char *)(v71 + 71) < 0)
    operator delete((void *)STACK[0x1200]);
  sub_223167354((uint64_t)&STACK[0x1170]);
  sub_223167354((uint64_t)&STACK[0x1180]);
  if (*(char *)(v72 + 231) < 0)
    operator delete((void *)STACK[0x1190]);
  if (*(char *)(v72 + 263) < 0)
    operator delete((void *)STACK[0x11B0]);
  sub_223167354((uint64_t)&a49);
  sub_223167354((uint64_t)&a51);
  sub_2234ED680((uint64_t)&STACK[0xA90]);
  sub_223167354((uint64_t)&a53);
  sub_223167354((uint64_t)&a55);
  sub_2234ED864((uint64_t)&STACK[0xB40]);
  sub_223167354((uint64_t)&a57);
  sub_223167354((uint64_t)&a59);
  sub_2234EDA48((uint64_t)&STACK[0xBF0]);
  sub_223167354((uint64_t)&a61);
  sub_223167354((uint64_t)&a63);
  sub_2234EDC2C((uint64_t)&STACK[0xCA0]);
  sub_223167354((uint64_t)&a65);
  sub_223167354((uint64_t)&a67);
  sub_2234EDE10((uint64_t)&STACK[0xD50]);
  sub_223167354((uint64_t)&a69);
  sub_223167354((uint64_t)&a71);
  sub_2234EDFF4((uint64_t)&STACK[0xE00]);
  sub_223167354((uint64_t)&STACK[0x200]);
  sub_223167354((uint64_t)&STACK[0x210]);
  sub_2234EE1D8((uint64_t)&STACK[0xEB0]);
  sub_223167354((uint64_t)&STACK[0x220]);
  sub_223167354((uint64_t)&STACK[0x230]);
  sub_2234EE3BC((uint64_t)&STACK[0xF60]);
  sub_223167354((uint64_t)&STACK[0x240]);
  sub_223167354((uint64_t)&STACK[0x250]);
  sub_2234EE5A0((uint64_t)&STACK[0x1010]);
  sub_223167354((uint64_t)&STACK[0x260]);
  sub_223167354((uint64_t)&STACK[0x270]);
  sub_2234EE784((uint64_t)&STACK[0x10C0]);
  sub_223167354((uint64_t)&STACK[0x280]);
  sub_223167354((uint64_t)&STACK[0x290]);
  sub_2234EE968((uint64_t)&STACK[0x2C0]);
  sub_223167354((uint64_t)&STACK[0x2A0]);
  sub_223167354((uint64_t)&STACK[0x2B0]);
  sub_2234EEB4C((uint64_t)&STACK[0x390]);
  sub_223167354((uint64_t)&STACK[0x370]);
  sub_223167354((uint64_t)&STACK[0x380]);
  sub_2234EED30((uint64_t)&STACK[0x460]);
  sub_223167354((uint64_t)&STACK[0x440]);
  sub_223167354((uint64_t)&STACK[0x450]);
  sub_2234EEF14((uint64_t)&STACK[0x530]);
  sub_223167354((uint64_t)&STACK[0x510]);
  sub_223167354((uint64_t)&STACK[0x520]);
  sub_2234EF0F8((uint64_t)&STACK[0x600]);
  sub_223167354((uint64_t)&STACK[0x5E0]);
  sub_223167354((uint64_t)&STACK[0x5F0]);
  sub_2234EF2DC((uint64_t)&STACK[0x6D0]);
  sub_223167354((uint64_t)&STACK[0x6B0]);
  sub_223167354((uint64_t)&STACK[0x6C0]);
  sub_2234EF4C0((uint64_t)&STACK[0x7A0]);
  sub_223167354((uint64_t)&STACK[0x780]);
  sub_223167354((uint64_t)&STACK[0x790]);
  sub_2234EF6A4((uint64_t)&STACK[0x870]);
  sub_223167354((uint64_t)&STACK[0x850]);
  sub_223167354((uint64_t)&STACK[0x860]);
  sub_2234EF888((uint64_t)&STACK[0x938]);
  sub_223167354((uint64_t)&STACK[0x918]);
  sub_223167354((uint64_t)&STACK[0x928]);
  _Unwind_Resume(a1);
}

void sub_22348FA60()
{
  void *v0;
  int v1;
  uint64_t v2;

  sub_223167354(v2 - 208);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22348F82CLL);
}

void sub_22348FA7C()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xB77]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xB5F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0x1190]);
        sub_223167354((uint64_t)&STACK[0x11B0]);
        JUMPOUT(0x22348FB7CLL);
      }
LABEL_4:
      operator delete((void *)STACK[0xB48]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xB77]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xB60]);
  if ((SLOBYTE(STACK[0xB5F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_22348FB00()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x11B0]);
  JUMPOUT(0x22348FB70);
}

void sub_22348FBFC()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0x1190]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22348FB7CLL);
}

void sub_22348FC1C()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xC27]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xC0F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0x11B0]);
        sub_223167354((uint64_t)&STACK[0x11E0]);
        JUMPOUT(0x22348FD1CLL);
      }
LABEL_4:
      operator delete((void *)STACK[0xBF8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xC27]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xC10]);
  if ((SLOBYTE(STACK[0xC0F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_22348FCA0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x11E0]);
  JUMPOUT(0x22348FD10);
}

void sub_22348FD80()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0x11B0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22348FD1CLL);
}

void sub_22348FDA0()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xCD7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xCBF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0x11E0]);
        sub_223167354((uint64_t)&STACK[0x1200]);
        JUMPOUT(0x22348FEA0);
      }
LABEL_4:
      operator delete((void *)STACK[0xCA8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xCD7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xCC0]);
  if ((SLOBYTE(STACK[0xCBF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_22348FE24()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x1200]);
  JUMPOUT(0x22348FE94);
}

void sub_22348FF08()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0x11E0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22348FEA0);
}

void sub_22348FF28()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xD87]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xD6F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0x1200]);
        sub_223167354((uint64_t)&STACK[0x9E0]);
        JUMPOUT(0x22349001CLL);
      }
LABEL_4:
      operator delete((void *)STACK[0xD58]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xD87]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xD70]);
  if ((SLOBYTE(STACK[0xD6F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_22348FFA8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x9E0]);
  JUMPOUT(0x223490010);
}

void sub_223490084()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0x1200]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22349001CLL);
}

void sub_2234900A4()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xE37]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xE1F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0x9E0]);
        sub_223167354((uint64_t)&STACK[0xA90]);
        JUMPOUT(0x223490190);
      }
LABEL_4:
      operator delete((void *)STACK[0xE08]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xE37]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xE20]);
  if ((SLOBYTE(STACK[0xE1F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_223490120()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xA90]);
  JUMPOUT(0x223490188);
}

void sub_2234901F8()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0x9E0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x223490190);
}

void sub_223490214()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xEE7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xECF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0xA90]);
        sub_223167354((uint64_t)&STACK[0xB40]);
        JUMPOUT(0x223490300);
      }
LABEL_4:
      operator delete((void *)STACK[0xEB8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xEE7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xED0]);
  if ((SLOBYTE(STACK[0xECF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_223490290()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xB40]);
  JUMPOUT(0x2234902F8);
}

void sub_223490364()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0xA90]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x223490300);
}

void sub_223490380()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xF97]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xF7F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0xB40]);
        sub_223167354((uint64_t)&STACK[0xBF0]);
        JUMPOUT(0x22349046CLL);
      }
LABEL_4:
      operator delete((void *)STACK[0xF68]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0xF97]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xF80]);
  if ((SLOBYTE(STACK[0xF7F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_2234903FC()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xBF0]);
  JUMPOUT(0x223490464);
}

void sub_2234904EC()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0xB40]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22349046CLL);
}

void sub_223490508()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
    std::__shared_weak_count::__release_weak(v0);
  sub_223167354(v1);
  sub_223167354(v2);
  if (SLOBYTE(STACK[0x1047]) < 0)
    operator delete((void *)STACK[0x1030]);
  if (SLOBYTE(STACK[0x102F]) < 0)
    operator delete((void *)STACK[0x1018]);
  sub_223167354((uint64_t)&STACK[0xBF0]);
  sub_223167354((uint64_t)&STACK[0xCA0]);
  JUMPOUT(0x2234905D8);
}

void sub_223490568()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xCA0]);
  JUMPOUT(0x2234905D0);
}

void sub_223490658()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0xBF0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x2234905D8);
}

void sub_223490674()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x10F7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x10DF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0xCA0]);
        sub_223167354((uint64_t)&STACK[0xD50]);
        JUMPOUT(0x22349076CLL);
      }
LABEL_4:
      operator delete((void *)STACK[0x10C8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x10F7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x10E0]);
  if ((SLOBYTE(STACK[0x10DF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_2234906FC()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xD50]);
  JUMPOUT(0x223490764);
}

void sub_2234907F4()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0xCA0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22349076CLL);
}

void sub_223490810()
{
  JUMPOUT(0x22348F970);
}

void sub_223490818()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x3C7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x3AF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0xE00]);
        sub_223167354((uint64_t)&STACK[0xEB0]);
        JUMPOUT(0x223490920);
      }
LABEL_4:
      operator delete((void *)STACK[0x398]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x3C7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x3B0]);
  if ((SLOBYTE(STACK[0x3AF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_2234908A0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xEB0]);
  JUMPOUT(0x223490918);
}

void sub_2234908C8()
{
  JUMPOUT(0x2234908D4);
}

void sub_2234909A8()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0xE00]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x223490920);
}

void sub_2234909CC()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x497]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x47F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0xEB0]);
        sub_223167354((uint64_t)&STACK[0xF60]);
        JUMPOUT(0x223490AD0);
      }
LABEL_4:
      operator delete((void *)STACK[0x468]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x497]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x480]);
  if ((SLOBYTE(STACK[0x47F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_223490A50()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xF60]);
  JUMPOUT(0x223490AC8);
}

void sub_223490A78()
{
  JUMPOUT(0x223490A84);
}

void sub_223490B34()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0xEB0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x223490AD0);
}

void sub_223490B58()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x567]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x54F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0xF60]);
        sub_223167354((uint64_t)&STACK[0x1010]);
        JUMPOUT(0x223490C68);
      }
LABEL_4:
      operator delete((void *)STACK[0x538]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x567]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x550]);
  if ((SLOBYTE(STACK[0x54F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_223490BE0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x1010]);
  JUMPOUT(0x223490C60);
}

void sub_223490C0C()
{
  JUMPOUT(0x223490C18);
}

void sub_223490CE8()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0xF60]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x223490C68);
}

void sub_223490D0C()
{
  JUMPOUT(0x22348F9D0);
}

void sub_223490D14()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if ((SLOBYTE(STACK[0x707]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x6EF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0x10C0]);
        sub_223167354((uint64_t)&STACK[0x2C0]);
        JUMPOUT(0x223490E0CLL);
      }
LABEL_4:
      operator delete((void *)STACK[0x6D8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if ((SLOBYTE(STACK[0x707]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x6F0]);
  if ((SLOBYTE(STACK[0x6EF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_223490D98()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x2C0]);
  JUMPOUT(0x223490E00);
}

void sub_223490E70()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0x10C0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x223490E0CLL);
}

void sub_223490E90()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if ((SLOBYTE(STACK[0x7D7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0x2C0]);
        sub_223167354((uint64_t)&STACK[0x390]);
        JUMPOUT(0x223490F80);
      }
LABEL_4:
      operator delete((void *)STACK[0x7A8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if ((SLOBYTE(STACK[0x7D7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x7C0]);
  if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_223490F10()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x390]);
  JUMPOUT(0x223490F78);
}

void sub_223490FE8()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0x2C0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x223490F80);
}

void sub_223491004()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x8A7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x88F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0x390]);
        sub_223167354((uint64_t)&STACK[0x460]);
        JUMPOUT(0x2234910F0);
      }
LABEL_4:
      operator delete((void *)STACK[0x878]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x8A7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x890]);
  if ((SLOBYTE(STACK[0x88F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_223491080()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x460]);
  JUMPOUT(0x2234910E8);
}

void sub_223491154()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0x390]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x2234910F0);
}

void sub_223491170()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x96F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x957]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_223167354((uint64_t)&STACK[0x460]);
        sub_223167354((uint64_t)&STACK[0x530]);
        JUMPOUT(0x22349125CLL);
      }
LABEL_4:
      operator delete((void *)STACK[0x940]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if ((SLOBYTE(STACK[0x96F]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x958]);
  if ((SLOBYTE(STACK[0x957]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_2234911EC()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x530]);
  JUMPOUT(0x223491254);
}

void sub_2234912F0()
{
  void *v0;
  int v1;

  sub_223167354((uint64_t)&STACK[0x460]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22349125CLL);
}

void sub_223491310(uint64_t a1)
{
  sub_2234EFA6C(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223491334(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  void *__p[2];
  uint64_t v22;
  void *__dst[2];
  uint64_t v24;

  v6 = *a3;
  if (*(char *)(*a3 + 31) < 0)
  {
    sub_223197FA4(__dst, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
    v6 = *a3;
    if ((*(char *)(*a3 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 8);
    v24 = *(_QWORD *)(v6 + 24);
    *(_OWORD *)__dst = v7;
    if ((*(char *)(v6 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
      v22 = *(_QWORD *)(v6 + 48);
      goto LABEL_6;
    }
  }
  sub_223197FA4(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
LABEL_6:
  v20 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v8 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_2234A42C8(a1, (uint64_t)__dst, (uint64_t)__p, &v20, (uint64_t)&v18);
  v11 = v19;
  if (!v19)
    goto LABEL_13;
  v12 = (unint64_t *)&v19->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_17:
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(__p[0]);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_19:
    if (*a3)
      return a1;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(__dst[0]);
  if (*a3)
    return a1;
LABEL_26:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1;
}

void sub_22349150C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223491564(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  void *__p[2];
  uint64_t v22;
  void *__dst[2];
  uint64_t v24;

  v6 = *a3;
  if (*(char *)(*a3 + 31) < 0)
  {
    sub_223197FA4(__dst, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
    v6 = *a3;
    if ((*(char *)(*a3 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 8);
    v24 = *(_QWORD *)(v6 + 24);
    *(_OWORD *)__dst = v7;
    if ((*(char *)(v6 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
      v22 = *(_QWORD *)(v6 + 48);
      goto LABEL_6;
    }
  }
  sub_223197FA4(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
LABEL_6:
  v20 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v8 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_2234B64A4(a1, (uint64_t)__dst, (uint64_t)__p, &v20, (uint64_t)&v18);
  v11 = v19;
  if (!v19)
    goto LABEL_13;
  v12 = (unint64_t *)&v19->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_17;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_17:
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(__p[0]);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_19:
    if (*a3)
      return a1;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(__dst[0]);
  if (*a3)
    return a1;
LABEL_26:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1;
}

void sub_22349173C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2234917E4(uint64_t a1)
{
  sub_2234EF888(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223491808(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37B68;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223491848(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37B68;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223491898(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_2234918A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC37BA0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234918E0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC37BA0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_223491928(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2B348;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2B348;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2234919FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223491A28(uint64_t a1)
{
  sub_2234EF6A4(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223491A4C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37C08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223491A8C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37C08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223491ADC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223491AEC(uint64_t a1)
{
  sub_2234EF4C0(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223491B10(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37C70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223491B50(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37C70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223491BA0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223491BB0(uint64_t a1)
{
  sub_2234EF2DC(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223491BD4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37CD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223491C14(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37CD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223491C64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223491C74(uint64_t a1)
{
  sub_2234EF0F8(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223491C98(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37D40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223491CD8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37D40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223491D28(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223491D38(uint64_t a1)
{
  sub_2234EEF14(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223491D5C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37DA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223491D9C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37DA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223491DEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_223491DFC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC37DE0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223491E34(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC37DE0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_223491E7C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2DF48;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2DF48;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223491F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223491F7C(uint64_t a1)
{
  sub_2234EED30(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223491FA0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37E48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223491FE0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37E48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492030(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223492040(uint64_t a1)
{
  sub_2234EEB4C(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223492064(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37EB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2234920A4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37EB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234920F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_223492104(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC37EE8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349213C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC37EE8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_223492184(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC37F20;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC37F20;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223492258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223492284(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37F20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2234922C4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37F20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492314(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223492324(uint64_t a1)
{
  sub_2234EE968(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223492348(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37F88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223492388(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37F88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234923D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2234923E8(uint64_t a1)
{
  sub_2234EE784(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349240C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37FF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22349244C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC37FF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22349249C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2234924AC(uint64_t a1)
{
  sub_2234EE5A0(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234924D0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38058;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223492510(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38058;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492560(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223492570(uint64_t a1)
{
  sub_2234EE3BC(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223492594(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC380C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2234925D4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC380C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492624(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_223492634(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC380F8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349266C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC380F8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2234926B4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC38130;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC38130;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223492788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2234927B4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38130;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2234927F4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38130;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492844(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223492854(uint64_t a1)
{
  sub_2234EE1D8(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223492878(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38198;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2234928B8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38198;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492908(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223492918(uint64_t a1)
{
  sub_2234EDFF4(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349293C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38200;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22349297C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38200;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234929CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2234929DC(uint64_t a1)
{
  sub_2234EDE10(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223492A00(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38268;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223492A40(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38268;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492A90(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223492AA0(uint64_t a1)
{
  sub_2234EDC2C(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223492AC4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC382D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223492B04(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC382D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492B54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223492B64(uint64_t a1)
{
  sub_2234EDA48(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223492B88(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38338;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223492BC8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38338;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492C18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_223492C28(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC38370;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223492C60(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC38370;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_223492CA8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2E4A8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2E4A8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223492D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223492DA8(uint64_t a1)
{
  sub_2234ED864(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223492DCC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC383D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223492E0C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC383D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492E5C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223492E6C(uint64_t a1)
{
  sub_2234ED680(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223492E90(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38440;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223492ED0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38440;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223492F20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_223492F30(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC38478;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223492F68(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC38478;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_223492FB0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC384B0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC384B0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223493084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2234930B0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC384B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2234930F0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC384B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223493140(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223493150(uint64_t a1)
{
  sub_2234ED49C(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223493174(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38518;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2234931B4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC38518;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223493204(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

char ***sub_223493214(char ***a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  return a1;
}

uint64_t *sub_2234932E8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (a1[6])
  {
    v2 = a1 + 4;
    v4 = a1[4];
    v3 = (uint64_t *)a1[5];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    a1[6] = 0;
    if (v3 != a1 + 4)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (a1[3])
  {
    v7 = a1[1];
    v8 = (uint64_t *)a1[2];
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    a1[3] = 0;
    if (v8 != a1 + 1)
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != a1 + 1);
    }
  }
  v11 = *a1;
  *a1 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_2234933C8(uint64_t a1)
{
  sub_223494D34(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2234933EC(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51[2];
  _QWORD v52[229];
  std::__shared_weak_count *v53;
  __int128 v54;
  uint64_t v55;
  __int128 *v56;
  _BYTE v57[24];
  _BYTE *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v51 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v51[0] = v29;
        v51[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v51 = 0uLL;
      }
    }
    sub_223257000((uint64_t)v52, a2);
    v56 = 0;
    v48 = (__int128 *)operator new(0x738uLL);
    *(_QWORD *)v48 = &off_24EC38820;
    *(__int128 *)((char *)v48 + 8) = *(_OWORD *)v51;
    sub_2232568B4((uint64_t)v48 + 24, (uint64_t)v52);
    v56 = v48;
    sub_2245022E4(*v25, (uint64_t)&v54);
    v49 = v56;
    if (v56 == &v54)
    {
      v50 = 4;
      v49 = &v54;
    }
    else
    {
      if (!v56)
      {
LABEL_58:
        sub_2232555B8((uint64_t)v52);
        return;
      }
      v50 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v49 + 8 * v50))(v49);
    goto LABEL_58;
  }
  v4 = (std::__shared_weak_count *)operator new(0x738uLL);
  v4->__shared_owners_ = 0;
  v5 = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38750;
  v6 = v4 + 1;
  sub_223257000((uint64_t)&v4[1], a2);
  v52[228] = v4 + 1;
  v53 = v4;
  v7 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v54 = v10;
  *((_QWORD *)&v54 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_22324A974();
  v11 = v9[4];
  v12 = *v9;
  v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v6;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v54;
    if (!(_QWORD)v54)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v54;
  if ((_QWORD)v54)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v54 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v54 = v38;
      *((_QWORD *)&v54 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v54 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24EC387A0;
  *(_OWORD *)(v43 + 8) = v54;
  v54 = 0uLL;
  *((_QWORD *)v43 + 3) = v6;
  *((_QWORD *)v43 + 4) = v4;
  v55 = 0;
  v56 = 0;
  v58 = v43;
  sub_2245022E4(*v34, (uint64_t)v57);
  v44 = v58;
  if (v58 == v57)
  {
    v45 = 4;
    v44 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v53)
  {
    v46 = &v53->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_223493844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 120);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 144);
  }
  else
  {
    if (!v12)
    {
      sub_223494F34((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223494F34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223493898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223493990(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2234939A0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2234939AC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2234939BC(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 *v69;
  std::string *v70;
  std::runtime_error *exception;
  std::runtime_error *v72;
  std::__shared_weak_count *v73[2];
  _BYTE v74[1824];
  __int128 v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::runtime_error v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  _QWORD *v84;
  __int128 *v85;
  _QWORD v86[3];
  std::string v87;
  std::string *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v83 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v83 + 1) = 45;
    v68 = (_QWORD *)a1[6];
    v67 = a1 + 6;
    v66 = v68;
    v69 = (__int128 *)*((unsigned __int8 *)v67 + 23);
    if ((char)v69 < 0)
      v69 = (__int128 *)v67[1];
    else
      v66 = v67;
    v84 = v66;
    v85 = v69;
    sub_2231A9820((uint64_t)&v83, (uint64_t)v86, 0, 0, &v87);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v87;
    else
      v70 = (std::string *)v87.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v80, (const char *)v70);
    v80.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v72 = std::runtime_error::runtime_error(exception, &v80);
    v72->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v72, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC388A0;
    v6[1].__vftable = *a3;
    v78 = v6 + 1;
    v79 = v6;
    v76 = v6 + 1;
    v77 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x738uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38750;
    v11 = v9 + 1;
    sub_223257000((uint64_t)&v9[1], a2);
    v81 = v9 + 1;
    v82 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v83 = v15;
    *((_QWORD *)&v83 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v83;
      if (!(_QWORD)v83)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v83 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v83 = v43;
            *((_QWORD *)&v83 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v83 = 0uLL;
          }
        }
        v48 = v76;
        v49 = v77;
        v76 = 0;
        v77 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24EC388F0;
        *(_OWORD *)(v50 + 8) = v83;
        v83 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v84 = 0;
        v85 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v86[0] = 0;
        v86[1] = 0;
        v88 = (std::string *)v50;
        sub_2245022E4(*v39, (uint64_t)&v87);
        v51 = v88;
        if (v88 == &v87)
        {
          v52 = 4;
          v51 = &v87;
        }
        else
        {
          if (!v88)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v82)
        {
          v53 = &v82->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        if (v77)
        {
          v55 = &v77->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v79)
        {
          v57 = &v79->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v83;
      if (!(_QWORD)v83)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v73 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v73[0] = v34;
      v73[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v73 = 0uLL;
    }
  }
  sub_223257000((uint64_t)v74, a2);
  v59 = operator new(0x20uLL);
  v59[1] = 0;
  v59[2] = 0;
  *v59 = &off_24EC388A0;
  v59[3] = *a3;
  *a3 = 0;
  *(_QWORD *)&v75 = v59 + 3;
  *((_QWORD *)&v75 + 1) = v59;
  v85 = 0;
  v60 = (__int128 *)operator new(0x748uLL);
  *(_QWORD *)v60 = &off_24EC38970;
  *(__int128 *)((char *)v60 + 8) = *(_OWORD *)v73;
  sub_2232568B4((uint64_t)v60 + 24, (uint64_t)v74);
  *(__int128 *)((char *)v60 + 1848) = v75;
  v75 = 0uLL;
  v85 = v60;
  sub_2245022E4(*v30, (uint64_t)&v83);
  v61 = v85;
  if (v85 == &v83)
  {
    v62 = 4;
    v61 = &v83;
  }
  else
  {
    if (!v85)
      goto LABEL_72;
    v62 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v61 + 8 * v62))(v61);
LABEL_72:
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  sub_2232555B8((uint64_t)v74);
}

void sub_223494044(_Unwind_Exception *exception_object, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (*v2)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 160), (const std::exception_ptr *)(v3 - 184));
      v5.__ptr_ = (void *)(v3 - 160);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 160));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 184));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 200));
      if (*(char *)(v3 - 81) < 0)
        operator delete(*(void **)(v3 - 104));
      JUMPOUT(0x223493F58);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2234940B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 184));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 200));
  if (*(char *)(v1 - 81) < 0)
  {
    operator delete(*(void **)(v1 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22349410C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_223495C88((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223495C88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223494160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_2232555B8(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223494194(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_22332429C((_QWORD *)(v2 - 160));
  sub_223167354(v2 - 176);
  sub_223167354(v2 - 232);
  sub_223167354(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_223494234(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  sub_223167354(v2 - 232);
  sub_223167354(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_22349425C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 232);
  sub_223167354(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_223494278(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2234942EC(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC389F0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2B348;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_22349441C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223494490(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC38A70;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2234945A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223494604@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC38AF0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22349481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2234948E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC38B70;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223494AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223494BC4(uint64_t a1)
{
  return sub_223494D34(a1 - 16);
}

void sub_223494BCC(uint64_t a1)
{
  sub_223494D34(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223494BF4(uint64_t a1, uint64_t a2)
{
  return sub_2234942EC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223494BFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223494604((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223494C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2234948E4((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_223494C0C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_223494C14(uint64_t a1)
{
  return sub_223494D34(a1 - 24);
}

void sub_223494C1C(uint64_t a1)
{
  sub_223494D34(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223494C44(uint64_t a1)
{
  return sub_223494490((_QWORD *)(a1 - 24));
}

uint64_t sub_223494C4C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_223494C54(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223494CBC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223494D24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_223494D34(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC38550;
  *(_QWORD *)(a1 + 16) = &unk_24EC385C8;
  *(_QWORD *)(a1 + 24) = &unk_24EC38608;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_223494F34(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_2232555B8(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223494F68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223494F78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223494FA8(uint64_t a1)
{
  return sub_2232555B8(a1 + 24);
}

_QWORD *sub_223494FB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC387A0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223494FF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC387A0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349504C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC387A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2234950BC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC387A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22349510C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223495148(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223495180(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_2234954A4((uint64_t *)(v8 + 88), v5, (uint64_t)&v20);
      if (v21)
        sub_22349580C(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223495348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_22349580C(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349542C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedI"
                     "NSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndDis"
                     "patchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimenta"
                                "l8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE"
                                "25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223495498()
{
  return &unk_24EC38800;
}

void sub_2234954A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  char v22;
  char v23;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v12, v6, a2);
  v7 = a1 + 1;
  for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, uint64_t *))(i[2] + 16))(i + 2, &v12);
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_2233236D4(3u);
    sub_223495728(*(_QWORD *)a3, (uint64_t)&v12);
  }
  if (v23)
  {
    v9 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else if (v22)
  {
    if (v21)
    {
      if (v20 < 0)
        operator delete(__p);
      if (v18 < 0)
        operator delete(v17);
    }
    if (v16 && v15 < 0)
      operator delete(v14);
  }
}

void sub_223495638(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  uint64_t *v5;
  uint64_t v6;
  va_list v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;
  va_list v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, va_list);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  sub_2231A8D08((uint64_t)va3);
  if (a2 == 1)
  {
    v5 = (uint64_t *)__cxa_begin_catch(a1);
    v6 = *v5;
    v11 = *(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    v9 = (*(uint64_t (**)(void))(v6 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", va1, "\n", "message: ", va, "\n");
    if (v16 >= 0)
      va_copy(v7, va2);
    else
      v7 = v13;
    if (v16 >= 0)
      v8 = HIBYTE(v16);
    else
      v8 = v15;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v7, v8, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_2234956FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22349571CLL);
}

void sub_223495728(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::exception_ptr v10;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v10.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v10), v5))
  {
    sub_2233236D4(2u);
  }
  *(_BYTE *)(a1 + 144) = 0;
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 264) = v6;
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 152) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
    sub_22319FFBC((_BYTE *)(a1 + 160), (__int128 *)(a2 + 16));
  }
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_2234957F8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_22349580C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_2234958F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x223495854);
}

_QWORD *sub_223495934(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC38820;
  sub_2232555B8((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223495970(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC38820;
  sub_2232555B8((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234959BC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x738uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC38820;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_223257000((uint64_t)(v2 + 3), a1 + 24);
  return v3;
}

void sub_223495A20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223495A40(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC38820;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_223257000((uint64_t)(a2 + 3), a1 + 24);
}

void sub_223495A98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223495AB0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_2232555B8(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_223495AE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  sub_2232555B8((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(a1);
}

void sub_223495B1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_2234954A4((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)&v8);
        if (v9)
          sub_22349580C(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223495BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_22349580C(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223495C10(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedI"
                     "NSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimenta"
                                "l8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE"
                                "4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223495C7C()
{
  return &unk_24EC38880;
}

uint64_t sub_223495C88(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 1848);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_2232555B8(a1 + 16);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_2232555B8(a1 + 16);
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_223495D08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC388A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223495D18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC388A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_223495D48(uint64_t a1)
{
  return sub_22349580C((uint64_t *)(a1 + 24));
}

_QWORD *sub_223495D54(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC388F0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223495DDC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC388F0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223495E74(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC388F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_223495F04(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC388F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223495F74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223495FF4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223496070(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2234954A4(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_22349580C((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22349634C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223496378(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x223496184);
    JUMPOUT(0x223496154);
  }
  sub_2233236D4(3u);
}

void sub_2234963D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223496400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_22349580C(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2234964EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedI"
                     "NSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndDis"
                     "patchIZNKSH_7ProcessERKS6_NS9_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimenta"
                                "l8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE"
                                "25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS9_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS9_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS9_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223496558()
{
  return &unk_24EC38950;
}

_QWORD *sub_223496564(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC38970;
  v2 = (std::__shared_weak_count *)a1[232];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_2232555B8((uint64_t)(a1 + 3));
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_2232555B8((uint64_t)(a1 + 3));
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2234965F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC38970;
  v2 = (std::__shared_weak_count *)a1[232];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_2232555B8((uint64_t)(a1 + 3));
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    sub_2232555B8((uint64_t)(a1 + 3));
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349668C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x748uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC38970;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_223257000((uint64_t)(v2 + 3), (uint64_t)(a1 + 3));
  v3[231] = a1[231];
  v8 = a1[232];
  v3[232] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_223496718(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223496738(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24EC38970;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_223257000((uint64_t)(a2 + 3), (uint64_t)(a1 + 3));
  a2[231] = a1[231];
  v9 = a1[232];
  a2[232] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2234967B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2234967D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 1856);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    sub_2232555B8(a1 + 24);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  sub_2232555B8(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_223496850(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[232];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_2232555B8((uint64_t)(a1 + 3));
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  sub_2232555B8((uint64_t)(a1 + 3));
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(a1);
}

void sub_2234968D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[231];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2234954A4((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_22349580C((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2234969E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_223496A58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x223496A8CLL);
  JUMPOUT(0x223496ABCLL);
}

uint64_t sub_223496AC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedI"
                     "NSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE7ProcessERKS6_NS9_7pro"
                     "miseISG_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimenta"
                                "l8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE"
                                "7ProcessERKS6_NS9_7promiseISG_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE7ProcessERKS6_NS9_7promiseISG_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE7ProcessERKS6_NS9_7promiseISG_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223496B30()
{
  return &unk_24EC389D0;
}

_QWORD *sub_223496B3C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC389F0;
  v2 = a1[4];
  a1[3] = &off_24EC2B348;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223496B94(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC389F0;
  v2 = a1[4];
  a1[3] = &off_24EC2B348;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223496BFC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC389F0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2B348;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_223496C74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223496C94(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC389F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2B348;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_223496CFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223496D14(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2B348;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223496D64(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2B348;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223496DB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2B348;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223496E64(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223496EA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedIN"
                     "St3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE9SubscribeENS1_12Channe"
                     "lInputISG_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental"
                                "8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE9"
                                "SubscribeENS1_12ChannelInputISG_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISG_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISG_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223496F0C()
{
  return &unk_24EC38A50;
}

_QWORD *sub_223496F18(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC38A70;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223496F50(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC38A70;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223496F98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC38A70;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223496FE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC38A70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223497018(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223497028(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223497054(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234970E8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223497124(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedIN"
                     "St3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15AddErrorHandlerENS1_1"
                     "2ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental"
                                "8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE1"
                                "5AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223497190()
{
  return &unk_24EC38AD0;
}

_QWORD *sub_22349719C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC38AF0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234971D4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC38AF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349721C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC38AF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223497274(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC38AF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2234972AC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234972BC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234972E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_223497464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234974D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedI"
                     "NSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimenta"
                                "l8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE"
                                "16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223497540()
{
  return &unk_24EC38B50;
}

_QWORD *sub_22349754C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC38B70;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223497584(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC38B70;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234975CC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC38B70;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223497624(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC38B70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22349765C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22349766C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223497698(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223497750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349779C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedI"
                     "NSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimenta"
                                "l8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE"
                                "15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon5frame11FrameBundleENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223497808()
{
  return &unk_24EC38BD0;
}

void sub_223497818(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22349783C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223497854(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame11FrameBundleENSt12exp"
                     "erimental8expectedINS0_INS6_2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEEvSG_Lb0EEEE27__shared_ptr_"
                     "default_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame11FrameBund"
                                "leENSt12experimental8expectedINS0_INS6_2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEEvSG_"
                                "Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame11FrameBundleENSt12experimental8expectedINS0_INS6_2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon5frame11FrameBundleENSt12experimental8expectedINS0_INS6_2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2234978C4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234978F0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349792C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC38C40;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_223497994(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223497A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223497A38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223497AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223497ADC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223497BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223497BB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223497C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223497C8C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223497D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223497D48(uint64_t a1)
{
  sub_2234996B4(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223497D6C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51[2];
  _QWORD v52[229];
  std::__shared_weak_count *v53;
  __int128 v54;
  uint64_t v55;
  __int128 *v56;
  _BYTE v57[24];
  _BYTE *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v51 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v51[0] = v29;
        v51[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v51 = 0uLL;
      }
    }
    sub_223257000((uint64_t)v52, a2);
    v56 = 0;
    v48 = (__int128 *)operator new(0x738uLL);
    *(_QWORD *)v48 = &off_24EC38F78;
    *(__int128 *)((char *)v48 + 8) = *(_OWORD *)v51;
    sub_2232568B4((uint64_t)v48 + 24, (uint64_t)v52);
    v56 = v48;
    sub_2245022E4(*v25, (uint64_t)&v54);
    v49 = v56;
    if (v56 == &v54)
    {
      v50 = 4;
      v49 = &v54;
    }
    else
    {
      if (!v56)
      {
LABEL_58:
        sub_2232555B8((uint64_t)v52);
        return;
      }
      v50 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v49 + 8 * v50))(v49);
    goto LABEL_58;
  }
  v4 = (std::__shared_weak_count *)operator new(0x738uLL);
  v4->__shared_owners_ = 0;
  v5 = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38EA8;
  v6 = v4 + 1;
  sub_223257000((uint64_t)&v4[1], a2);
  v52[228] = v4 + 1;
  v53 = v4;
  v7 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v54 = v10;
  *((_QWORD *)&v54 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_22324A974();
  v11 = v9[4];
  v12 = *v9;
  v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v6;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v54;
    if (!(_QWORD)v54)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v54;
  if ((_QWORD)v54)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v54 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v54 = v38;
      *((_QWORD *)&v54 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v54 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24EC38EF8;
  *(_OWORD *)(v43 + 8) = v54;
  v54 = 0uLL;
  *((_QWORD *)v43 + 3) = v6;
  *((_QWORD *)v43 + 4) = v4;
  v55 = 0;
  v56 = 0;
  v58 = v43;
  sub_2245022E4(*v34, (uint64_t)v57);
  v44 = v58;
  if (v58 == v57)
  {
    v45 = 4;
    v44 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v53)
  {
    v46 = &v53->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_2234981C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 120);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 144);
  }
  else
  {
    if (!v12)
    {
      sub_223494F34((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223494F34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223498218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223498310(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223498320(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22349832C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_22349833C(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 *v69;
  std::string *v70;
  std::runtime_error *exception;
  std::runtime_error *v72;
  std::__shared_weak_count *v73[2];
  _BYTE v74[1824];
  __int128 v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::runtime_error v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  _QWORD *v84;
  __int128 *v85;
  _QWORD v86[3];
  std::string v87;
  std::string *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v83 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v83 + 1) = 45;
    v68 = (_QWORD *)a1[6];
    v67 = a1 + 6;
    v66 = v68;
    v69 = (__int128 *)*((unsigned __int8 *)v67 + 23);
    if ((char)v69 < 0)
      v69 = (__int128 *)v67[1];
    else
      v66 = v67;
    v84 = v66;
    v85 = v69;
    sub_2231A9820((uint64_t)&v83, (uint64_t)v86, 0, 0, &v87);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v87;
    else
      v70 = (std::string *)v87.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v80, (const char *)v70);
    v80.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v72 = std::runtime_error::runtime_error(exception, &v80);
    v72->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v72, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC388A0;
    v6[1].__vftable = *a3;
    v78 = v6 + 1;
    v79 = v6;
    v76 = v6 + 1;
    v77 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x738uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38EA8;
    v11 = v9 + 1;
    sub_223257000((uint64_t)&v9[1], a2);
    v81 = v9 + 1;
    v82 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v83 = v15;
    *((_QWORD *)&v83 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v83;
      if (!(_QWORD)v83)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v83 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v83 = v43;
            *((_QWORD *)&v83 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v83 = 0uLL;
          }
        }
        v48 = v76;
        v49 = v77;
        v76 = 0;
        v77 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24EC38FF8;
        *(_OWORD *)(v50 + 8) = v83;
        v83 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v84 = 0;
        v85 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v86[0] = 0;
        v86[1] = 0;
        v88 = (std::string *)v50;
        sub_2245022E4(*v39, (uint64_t)&v87);
        v51 = v88;
        if (v88 == &v87)
        {
          v52 = 4;
          v51 = &v87;
        }
        else
        {
          if (!v88)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v82)
        {
          v53 = &v82->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        if (v77)
        {
          v55 = &v77->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v79)
        {
          v57 = &v79->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v83;
      if (!(_QWORD)v83)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v73 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v73[0] = v34;
      v73[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v73 = 0uLL;
    }
  }
  sub_223257000((uint64_t)v74, a2);
  v59 = operator new(0x20uLL);
  v59[1] = 0;
  v59[2] = 0;
  *v59 = &off_24EC388A0;
  v59[3] = *a3;
  *a3 = 0;
  *(_QWORD *)&v75 = v59 + 3;
  *((_QWORD *)&v75 + 1) = v59;
  v85 = 0;
  v60 = (__int128 *)operator new(0x748uLL);
  *(_QWORD *)v60 = &off_24EC39078;
  *(__int128 *)((char *)v60 + 8) = *(_OWORD *)v73;
  sub_2232568B4((uint64_t)v60 + 24, (uint64_t)v74);
  *(__int128 *)((char *)v60 + 1848) = v75;
  v75 = 0uLL;
  v85 = v60;
  sub_2245022E4(*v30, (uint64_t)&v83);
  v61 = v85;
  if (v85 == &v83)
  {
    v62 = 4;
    v61 = &v83;
  }
  else
  {
    if (!v85)
      goto LABEL_72;
    v62 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v61 + 8 * v62))(v61);
LABEL_72:
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  sub_2232555B8((uint64_t)v74);
}

void sub_2234989C4(_Unwind_Exception *exception_object, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (*v2)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 160), (const std::exception_ptr *)(v3 - 184));
      v5.__ptr_ = (void *)(v3 - 160);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 160));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 184));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 200));
      if (*(char *)(v3 - 81) < 0)
        operator delete(*(void **)(v3 - 104));
      JUMPOUT(0x2234988D8);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_223498A38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 184));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 200));
  if (*(char *)(v1 - 81) < 0)
  {
    operator delete(*(void **)(v1 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223498A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_223495C88((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223495C88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223498AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_2232555B8(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223498B14(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_22332429C((_QWORD *)(v2 - 160));
  sub_223167354(v2 - 176);
  sub_223167354(v2 - 232);
  sub_223167354(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_223498BB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  sub_223167354(v2 - 232);
  sub_223167354(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_223498BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 232);
  sub_223167354(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_223498BF8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223498C6C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC390F8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2B348;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_223498D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223498E10(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC39178;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223498F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223498F84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC391F8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22349919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223499264@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC39278;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22349947C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223499544(uint64_t a1)
{
  return sub_2234996B4(a1 - 16);
}

void sub_22349954C(uint64_t a1)
{
  sub_2234996B4(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223499574(uint64_t a1, uint64_t a2)
{
  return sub_223498C6C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22349957C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223498F84((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223499584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223499264((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22349958C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_223499594(uint64_t a1)
{
  return sub_2234996B4(a1 - 24);
}

void sub_22349959C(uint64_t a1)
{
  sub_2234996B4(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234995C4(uint64_t a1)
{
  return sub_223498E10((_QWORD *)(a1 - 24));
}

uint64_t sub_2234995CC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2234995D4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22349963C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234996A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2234996B4(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC38CB8;
  *(_QWORD *)(a1 + 16) = &unk_24EC38D30;
  *(_QWORD *)(a1 + 24) = &unk_24EC38D70;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2234998B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2234998C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC38EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234998F4(uint64_t a1)
{
  return sub_2232555B8(a1 + 24);
}

_QWORD *sub_223499900(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC38EF8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223499944(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC38EF8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223499998(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC38EF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_223499A08(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC38EF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223499A58(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223499A94(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223499ACC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_223499DF0((uint64_t *)(v8 + 88), v5, (uint64_t)&v20);
      if (v21)
        sub_22349580C(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223499C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_22349580C(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223499D78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expecte"
                     "dINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndD"
                     "ispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimen"
                                "tal8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0"
                                "EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223499DE4()
{
  return &unk_24EC38F58;
}

void sub_223499DF0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  char v21;
  char v22;
  char v23;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v12, v6, a2);
  v7 = a1 + 1;
  for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, uint64_t *))(i[2] + 16))(i + 2, &v12);
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_2233236D4(3u);
    sub_223495728(*(_QWORD *)a3, (uint64_t)&v12);
  }
  if (v23)
  {
    v9 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else if (v22)
  {
    if (v21)
    {
      if (v20 < 0)
        operator delete(__p);
      if (v18 < 0)
        operator delete(v17);
    }
    if (v16 && v15 < 0)
      operator delete(v14);
  }
}

void sub_223499F84(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  uint64_t *v5;
  uint64_t v6;
  va_list v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;
  va_list v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, va_list);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  sub_2231A8D08((uint64_t)va3);
  if (a2 == 1)
  {
    v5 = (uint64_t *)__cxa_begin_catch(a1);
    v6 = *v5;
    v11 = *(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    v9 = (*(uint64_t (**)(void))(v6 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", va1, "\n", "message: ", va, "\n");
    if (v16 >= 0)
      va_copy(v7, va2);
    else
      v7 = v13;
    if (v16 >= 0)
      v8 = HIBYTE(v16);
    else
      v8 = v15;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v7, v8, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_22349A048(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22349A068);
}

_QWORD *sub_22349A074(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC38F78;
  sub_2232555B8((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349A0B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC38F78;
  sub_2232555B8((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349A0FC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x738uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC38F78;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_223257000((uint64_t)(v2 + 3), a1 + 24);
  return v3;
}

void sub_22349A160(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22349A180(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC38F78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_223257000((uint64_t)(a2 + 3), a1 + 24);
}

void sub_22349A1D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22349A1F0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_2232555B8(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_22349A228(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  sub_2232555B8((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(a1);
}

void sub_22349A25C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_223499DF0((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)&v8);
        if (v9)
          sub_22349580C(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349A304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_22349580C(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349A350(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expecte"
                     "dINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimen"
                                "tal8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0"
                                "EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349A3BC()
{
  return &unk_24EC38FD8;
}

_QWORD *sub_22349A3C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC38FF8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22349A450(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC38FF8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22349A4E8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC38FF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22349A578(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC38FF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22349A5E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_22349A668(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_22349A6E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223499DF0(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_22349580C((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22349A9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22349A9EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x22349A7F8);
    JUMPOUT(0x22349A7C8);
  }
  sub_2233236D4(3u);
}

void sub_22349AA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22349AA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_22349580C(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22349AB60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expecte"
                     "dINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndD"
                     "ispatchIZNKSH_7ProcessERKS6_NS9_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimen"
                                "tal8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0"
                                "EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS9_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS9_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS9_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349ABCC()
{
  return &unk_24EC39058;
}

_QWORD *sub_22349ABD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC39078;
  v2 = (std::__shared_weak_count *)a1[232];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_2232555B8((uint64_t)(a1 + 3));
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_2232555B8((uint64_t)(a1 + 3));
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22349AC64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC39078;
  v2 = (std::__shared_weak_count *)a1[232];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_2232555B8((uint64_t)(a1 + 3));
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    sub_2232555B8((uint64_t)(a1 + 3));
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349AD00(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x748uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC39078;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_223257000((uint64_t)(v2 + 3), (uint64_t)(a1 + 3));
  v3[231] = a1[231];
  v8 = a1[232];
  v3[232] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_22349AD8C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22349ADAC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24EC39078;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_223257000((uint64_t)(a2 + 3), (uint64_t)(a1 + 3));
  a2[231] = a1[231];
  v9 = a1[232];
  a2[232] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22349AE2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22349AE44(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 1856);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    sub_2232555B8(a1 + 24);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  sub_2232555B8(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_22349AEC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[232];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_2232555B8((uint64_t)(a1 + 3));
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  sub_2232555B8((uint64_t)(a1 + 3));
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(a1);
}

void sub_22349AF44(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[231];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223499DF0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_22349580C((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22349B054(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_22349B0CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x22349B100);
  JUMPOUT(0x22349B130);
}

uint64_t sub_22349B138(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expecte"
                     "dINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE7ProcessERKS6_NS9_7p"
                     "romiseISG_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimen"
                                "tal8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0"
                                "EE7ProcessERKS6_NS9_7promiseISG_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE7ProcessERKS6_NS9_7promiseISG_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE7ProcessERKS6_NS9_7promiseISG_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349B1A4()
{
  return &unk_24EC390D8;
}

_QWORD *sub_22349B1B0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC390F8;
  v2 = a1[4];
  a1[3] = &off_24EC2B348;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22349B208(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC390F8;
  v2 = a1[4];
  a1[3] = &off_24EC2B348;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349B270(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC390F8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2B348;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_22349B2E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22349B308(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC390F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2B348;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_22349B370(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22349B388(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2B348;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22349B3D8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2B348;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22349B424(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2B348;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349B4D8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349B514(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expected"
                     "INSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE9SubscribeENS1_12Chan"
                     "nelInputISG_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experiment"
                                "al8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0E"
                                "E9SubscribeENS1_12ChannelInputISG_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISG_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE9SubscribeENS1_12ChannelInputISG_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349B580()
{
  return &unk_24EC39158;
}

_QWORD *sub_22349B58C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC39178;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349B5C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC39178;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349B60C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC39178;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22349B65C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC39178;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22349B68C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22349B69C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22349B6C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349B75C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349B798(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expected"
                     "INSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15AddErrorHandlerENS1"
                     "_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experiment"
                                "al8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0E"
                                "E15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349B804()
{
  return &unk_24EC391D8;
}

_QWORD *sub_22349B810(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC391F8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349B848(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC391F8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349B890(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC391F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22349B8E8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC391F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22349B920(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22349B930(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22349B95C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_22349BAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349BB48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expecte"
                     "dINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimen"
                                "tal8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0"
                                "EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349BBB4()
{
  return &unk_24EC39258;
}

_QWORD *sub_22349BBC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC39278;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349BBF8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC39278;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349BC40(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC39278;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22349BC98(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC39278;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22349BCD0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22349BCE0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22349BD0C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349BDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349BE10(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expecte"
                     "dINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimen"
                                "tal8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0"
                                "EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng15FrameBundleSyncENSt12experimental8expectedINSt3__110shared_ptrINS4_2kf20KeyframeEngineResultEEENS_3esn5ErrorEEEvSG_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349BE7C()
{
  return &unk_24EC392D8;
}

void sub_22349BE8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22349BEB0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22349BEC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng15FrameBundleSyncENSt12e"
                     "xperimental8expectedINS0_INS6_2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEEvSG_Lb0EEEE27__shared_pt"
                     "r_default_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng15FrameBundle"
                                "SyncENSt12experimental8expectedINS0_INS6_2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEEvS"
                                "G_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng15FrameBundleSyncENSt12experimental8expectedINS0_INS6_2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng15FrameBundleSyncENSt12experimental8expectedINS0_INS6_2kf20KeyframeEngineResultEEENS1_3esn5ErrorEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22349BF38(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349BF64(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349BFA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC39348;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_22349C008(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349C098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22349C0AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349C13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22349C150(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22349C214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22349C228(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22349C2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22349C300(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22349C3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22349C3B8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (a1[6])
  {
    v2 = a1 + 4;
    v4 = a1[4];
    v3 = (uint64_t *)a1[5];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    a1[6] = 0;
    if (v3 != a1 + 4)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (a1[3])
  {
    v8 = a1[1];
    v7 = (uint64_t *)a1[2];
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    a1[3] = 0;
    if (v7 != a1 + 1)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != a1 + 1);
    }
  }
  v11 = *a1;
  *a1 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_22349C484(uint64_t a1)
{
  sub_22349DC24(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22349C4A8(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count **v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::mutex **v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t **v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v2 = (uint64_t *)a1[18];
  if (v2)
  {
    v3 = (std::__shared_weak_count *)operator new(0x20uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC395B0;
    v6 = v3 + 1;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = (_QWORD *)operator new();
    *v8 = v2 + 7;
    std::mutex::lock((std::mutex *)(v2 + 7));
    *(_QWORD *)&v49 = v8;
    *((_QWORD *)&v49 + 1) = v2;
    if (!*((_BYTE *)v2 + 48))
      sub_22324A974();
    v9 = v2[4];
    v10 = *v2;
    v11 = (std::__shared_weak_count **)(*v2 + 16 * v9);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *v11 = v6;
    v13 = v10 + 16 * v9;
    v14 = *(std::__shared_weak_count **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v3;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (v2[1] - *v2) >> 4;
    v18 = v2[5];
    v19 = v2[4] + 1;
    if (v19 >= v17)
      v20 = (v2[1] - *v2) >> 4;
    else
      v20 = 0;
    v2[4] = v19 - v20;
    if (v18 == v17)
    {
      v21 = v2[3] + 1;
      if (v21 < v17)
        v17 = 0;
      v2[3] = v21 - v17;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
      {
LABEL_33:
        v32 = (uint64_t **)a1[9];
        v49 = 0uLL;
        v33 = (std::__shared_weak_count *)a1[5];
        if (v33)
        {
          v34 = std::__shared_weak_count::lock(v33);
          if (v34)
          {
            v35 = v34;
            v36 = a1[4];
            v37 = (unint64_t *)&v34->__shared_weak_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
            *(_QWORD *)&v49 = v36;
            *((_QWORD *)&v49 + 1) = v34;
            v39 = (unint64_t *)&v34->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          else
          {
            v49 = 0uLL;
          }
        }
        v41 = (char *)operator new(0x30uLL);
        *(_QWORD *)v41 = &off_24EC39600;
        *(_OWORD *)(v41 + 8) = v49;
        v49 = 0uLL;
        *((_QWORD *)v41 + 3) = v6;
        *((_QWORD *)v41 + 4) = v3;
        v50 = 0;
        v51 = 0;
        v53 = v41;
        sub_2245022E4(*v32, (uint64_t)v52);
        v42 = v53;
        if (v53 == v52)
        {
          v43 = 4;
          v42 = v52;
        }
        else
        {
          if (!v53)
            goto LABEL_47;
          v43 = 5;
        }
        (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
LABEL_47:
        if (v3)
        {
          v44 = (unint64_t *)&v3->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        return;
      }
    }
    else
    {
      v2[5] = v18 + 1;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
        goto LABEL_33;
    }
    std::mutex::unlock(*v22);
    MEMORY[0x227684CE8](v22, 0x20C4093837F09);
    goto LABEL_33;
  }
  v23 = (uint64_t **)a1[9];
  v24 = (std::__shared_weak_count *)a1[5];
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v26 = v25;
    if (v25)
    {
      v27 = a1[4];
      v28 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v46 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v46 = &off_24EC39680;
  *((_QWORD *)v46 + 1) = v27;
  *((_QWORD *)v46 + 2) = v26;
  v51 = v46;
  sub_2245022E4(*v23, (uint64_t)&v49);
  v47 = v51;
  if (v51 == &v49)
  {
    v48 = 4;
    v47 = &v49;
  }
  else
  {
    if (!v51)
      return;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
}

void sub_22349C8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349C99C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22349C9AC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22349C9B8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_22349C9C8(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count **v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  __int128 *v62;
  std::string *v63;
  std::runtime_error *exception;
  std::runtime_error *v65;
  __int128 v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::runtime_error v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  _QWORD *v74;
  __int128 *v75;
  _QWORD v76[3];
  std::string v77;
  std::string *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v73 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v73 + 1) = 45;
    v61 = (_QWORD *)a1[6];
    v60 = a1 + 6;
    v59 = v61;
    v62 = (__int128 *)*((unsigned __int8 *)v60 + 23);
    if ((char)v62 < 0)
      v62 = (__int128 *)v60[1];
    else
      v59 = v60;
    v74 = v59;
    v75 = v62;
    sub_2231A9820((uint64_t)&v73, (uint64_t)v76, 0, 0, &v77);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v77;
    else
      v63 = (std::string *)v77.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v70, (const char *)v63);
    v70.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v65 = std::runtime_error::runtime_error(exception, &v70);
    v65->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v65, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v5[1].__vftable = *a3;
    v69 = v5;
    v67 = &v5[1].__vftable;
    v68 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    *a3 = 0;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v9 = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC395B0;
    v11 = v8 + 1;
    v71 = v8 + 1;
    v72 = v8;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v13 = (uint64_t *)a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 7;
    std::mutex::lock((std::mutex *)(v13 + 7));
    *(_QWORD *)&v73 = v14;
    *((_QWORD *)&v73 + 1) = v13;
    if (!*((_BYTE *)v13 + 48))
      sub_22324A974();
    v15 = v13[4];
    v16 = *v13;
    v17 = (std::__shared_weak_count **)(*v13 + 16 * v15);
    do
      v18 = __ldxr(v9);
    while (__stxr(v18 + 1, v9));
    *v17 = v11;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v8;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v13[1] - *v13) >> 4;
    v24 = v13[5];
    v25 = v13[4] + 1;
    if (v25 >= v23)
      v26 = (v13[1] - *v13) >> 4;
    else
      v26 = 0;
    v13[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v13[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v13[3] = v27 - v23;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v73 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v73 = v42;
            *((_QWORD *)&v73 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v73 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x38uLL);
        *(_QWORD *)v47 = &off_24EC39700;
        *(_OWORD *)(v47 + 8) = v73;
        v73 = 0uLL;
        *((_QWORD *)v47 + 3) = v11;
        *((_QWORD *)v47 + 4) = v8;
        v74 = 0;
        v75 = 0;
        *((_QWORD *)v47 + 5) = v67;
        *((_QWORD *)v47 + 6) = v68;
        v76[0] = 0;
        v76[1] = 0;
        v78 = (std::string *)v47;
        sub_2245022E4(*v38, (uint64_t)&v77);
        v48 = v78;
        if (v78 == &v77)
        {
          v49 = 4;
          v48 = &v77;
        }
        else
        {
          if (!v78)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(v48->__r_.__value_.__r.__words[0] + 8 * v49))();
LABEL_51:
        if (v72)
        {
          v50 = &v72->__shared_owners_;
          do
            v51 = __ldaxr((unint64_t *)v50);
          while (__stlxr(v51 - 1, (unint64_t *)v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v69)
        {
          v52 = (unint64_t *)&v69->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        return;
      }
    }
    else
    {
      v13[5] = v24 + 1;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x227684CE8](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v66 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v66 = v33;
      *((_QWORD *)&v66 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v66 = 0uLL;
    }
  }
  v54 = operator new(0x20uLL);
  v54[1] = 0;
  v54[2] = 0;
  *v54 = &unk_24EC2F420;
  v54[3] = *a3;
  *a3 = 0;
  v55 = (char *)operator new(0x30uLL);
  *(_QWORD *)v55 = &off_24EC39780;
  *(_OWORD *)(v55 + 8) = v66;
  *((_QWORD *)v55 + 4) = v54 + 3;
  *((_QWORD *)v55 + 5) = v54;
  v75 = (__int128 *)v55;
  sub_2245022E4(*v29, (uint64_t)&v73);
  v57 = v75;
  if (v75 == &v73)
  {
    v58 = 4;
    v57 = &v73;
  }
  else
  {
    if (!v75)
      return;
    v58 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v57 + 8 * v58))(v57, v56);
}

void sub_22349CFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x22349CEE8);
  }
  _Unwind_Resume(exception_object);
}

void sub_22349D0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22349D17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22349D198(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22349D20C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC39800;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22349D31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22349D380(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC39880;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22349D490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22349D4F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC39900;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22349D70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22349D7D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC39980;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22349D9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22349DAB4(uint64_t a1)
{
  return sub_22349DC24(a1 - 16);
}

void sub_22349DABC(uint64_t a1)
{
  sub_22349DC24(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349DAE4(uint64_t a1)
{
  return sub_22349D20C((_QWORD *)(a1 - 16));
}

uint64_t *sub_22349DAEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22349D4F4((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22349DAF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22349D7D4((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22349DAFC(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22349DB04(uint64_t a1)
{
  return sub_22349DC24(a1 - 24);
}

void sub_22349DB0C(uint64_t a1)
{
  sub_22349DC24(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349DB34(uint64_t a1)
{
  return sub_22349D380((_QWORD *)(a1 - 24));
}

uint64_t sub_22349DB3C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22349DB44(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22349DBAC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22349DC14(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22349DC24(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC393C0;
  *(_QWORD *)(a1 + 16) = &unk_24EC39438;
  *(_QWORD *)(a1 + 24) = &unk_24EC39478;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_22349DE10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC395B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22349DE20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC395B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349DE58(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC39600;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22349DE9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC39600;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349DEF0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC39600;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22349DF60(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC39600;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22349DFB0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22349DFEC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22349E024(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_22349E348((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22349E1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349E2D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE25Enqueu"
                     "eMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb"
                                "0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349E33C()
{
  return &unk_24EC39660;
}

void sub_22349E348(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_22349E3E0()
{
  __break(1u);
}

void sub_22349E48C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22349E4ACLL);
}

_QWORD *sub_22349E4B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC39680;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349E4F0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC39680;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349E538(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC39680;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22349E588(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC39680;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22349E5B8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22349E5C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22349E5F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_22349E348((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349E69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349E6E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb"
                                "0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349E754()
{
  return &unk_24EC396E0;
}

_QWORD *sub_22349E760(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC39700;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22349E7E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC39700;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22349E880(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC39700;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22349E910(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC39700;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22349E980(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_22349EA00(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_22349EA7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22349E348(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22349ED30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22349EE88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE25Enqueu"
                     "eMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb"
                                "0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349EEF4()
{
  return &unk_24EC39760;
}

_QWORD *sub_22349EF00(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC39780;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22349EF7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC39780;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349F008(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC39780;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[5];
  result[4] = a1[4];
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22349F078(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC39780;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22349F0C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_22349F138(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_22349F1A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22349E348((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22349F2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349F364(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE7Process"
                     "ERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb"
                                "0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349F3D0()
{
  return &unk_24EC397E0;
}

_QWORD *sub_22349F3DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC39800;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349F414(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC39800;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349F45C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC39800;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22349F4AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC39800;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22349F4DC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22349F4EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22349F518(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349F5AC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349F5E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE9Subscrib"
                     "eENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0"
                                "EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349F654()
{
  return &unk_24EC39860;
}

_QWORD *sub_22349F660(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC39880;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349F698(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC39880;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349F6E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC39880;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22349F730(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC39880;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22349F760(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22349F770(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22349F79C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349F830(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349F86C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE15AddErro"
                     "rHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0"
                                "EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349F8D8()
{
  return &unk_24EC398E0;
}

_QWORD *sub_22349F8E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC39900;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349F91C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC39900;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349F964(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC39900;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22349F9BC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC39900;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22349F9F4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22349FA04(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22349FA30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349FAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349FB34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE16Output"
                     "HandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb"
                                "0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349FBA0()
{
  return &unk_24EC39960;
}

_QWORD *sub_22349FBAC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC39980;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349FBE4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC39980;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349FC2C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC39980;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22349FC84(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC39980;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22349FCBC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22349FCCC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22349FCF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22349FDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22349FDFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE15ErrorH"
                     "andlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb"
                                "0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng24KeyframeNodeResetRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22349FE68()
{
  return &unk_24EC399E0;
}

void sub_22349FE78(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22349FE9C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22349FEB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng24KeyframeNodeResetReque"
                     "stEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng24KeyframeNod"
                                "eResetRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng24KeyframeNodeResetRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng24KeyframeNodeResetRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22349FF24(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22349FF50(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22349FF8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC39A50;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_22349FFF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A0084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234A0098(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A0128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A013C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2234A0200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A0214(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2234A02D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234A02EC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2234A0390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234A03A8(uint64_t a1)
{
  sub_2234A1B48(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2234A03CC(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count **v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::mutex **v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t **v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v2 = (uint64_t *)a1[18];
  if (v2)
  {
    v3 = (std::__shared_weak_count *)operator new(0x20uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC39CB8;
    v6 = v3 + 1;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = (_QWORD *)operator new();
    *v8 = v2 + 7;
    std::mutex::lock((std::mutex *)(v2 + 7));
    *(_QWORD *)&v49 = v8;
    *((_QWORD *)&v49 + 1) = v2;
    if (!*((_BYTE *)v2 + 48))
      sub_22324A974();
    v9 = v2[4];
    v10 = *v2;
    v11 = (std::__shared_weak_count **)(*v2 + 16 * v9);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *v11 = v6;
    v13 = v10 + 16 * v9;
    v14 = *(std::__shared_weak_count **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v3;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (v2[1] - *v2) >> 4;
    v18 = v2[5];
    v19 = v2[4] + 1;
    if (v19 >= v17)
      v20 = (v2[1] - *v2) >> 4;
    else
      v20 = 0;
    v2[4] = v19 - v20;
    if (v18 == v17)
    {
      v21 = v2[3] + 1;
      if (v21 < v17)
        v17 = 0;
      v2[3] = v21 - v17;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
      {
LABEL_33:
        v32 = (uint64_t **)a1[9];
        v49 = 0uLL;
        v33 = (std::__shared_weak_count *)a1[5];
        if (v33)
        {
          v34 = std::__shared_weak_count::lock(v33);
          if (v34)
          {
            v35 = v34;
            v36 = a1[4];
            v37 = (unint64_t *)&v34->__shared_weak_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
            *(_QWORD *)&v49 = v36;
            *((_QWORD *)&v49 + 1) = v34;
            v39 = (unint64_t *)&v34->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          else
          {
            v49 = 0uLL;
          }
        }
        v41 = (char *)operator new(0x30uLL);
        *(_QWORD *)v41 = &off_24EC39D08;
        *(_OWORD *)(v41 + 8) = v49;
        v49 = 0uLL;
        *((_QWORD *)v41 + 3) = v6;
        *((_QWORD *)v41 + 4) = v3;
        v50 = 0;
        v51 = 0;
        v53 = v41;
        sub_2245022E4(*v32, (uint64_t)v52);
        v42 = v53;
        if (v53 == v52)
        {
          v43 = 4;
          v42 = v52;
        }
        else
        {
          if (!v53)
            goto LABEL_47;
          v43 = 5;
        }
        (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
LABEL_47:
        if (v3)
        {
          v44 = (unint64_t *)&v3->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        return;
      }
    }
    else
    {
      v2[5] = v18 + 1;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
        goto LABEL_33;
    }
    std::mutex::unlock(*v22);
    MEMORY[0x227684CE8](v22, 0x20C4093837F09);
    goto LABEL_33;
  }
  v23 = (uint64_t **)a1[9];
  v24 = (std::__shared_weak_count *)a1[5];
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v26 = v25;
    if (v25)
    {
      v27 = a1[4];
      v28 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v46 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v46 = &off_24EC39D88;
  *((_QWORD *)v46 + 1) = v27;
  *((_QWORD *)v46 + 2) = v26;
  v51 = v46;
  sub_2245022E4(*v23, (uint64_t)&v49);
  v47 = v51;
  if (v51 == &v49)
  {
    v48 = 4;
    v47 = &v49;
  }
  else
  {
    if (!v51)
      return;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
}

void sub_2234A07CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A08C0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2234A08D0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2234A08DC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2234A08EC(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count **v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  __int128 *v62;
  std::string *v63;
  std::runtime_error *exception;
  std::runtime_error *v65;
  __int128 v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::runtime_error v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  _QWORD *v74;
  __int128 *v75;
  _QWORD v76[3];
  std::string v77;
  std::string *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v73 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v73 + 1) = 45;
    v61 = (_QWORD *)a1[6];
    v60 = a1 + 6;
    v59 = v61;
    v62 = (__int128 *)*((unsigned __int8 *)v60 + 23);
    if ((char)v62 < 0)
      v62 = (__int128 *)v60[1];
    else
      v59 = v60;
    v74 = v59;
    v75 = v62;
    sub_2231A9820((uint64_t)&v73, (uint64_t)v76, 0, 0, &v77);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v77;
    else
      v63 = (std::string *)v77.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v70, (const char *)v63);
    v70.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v65 = std::runtime_error::runtime_error(exception, &v70);
    v65->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v65, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v5[1].__vftable = *a3;
    v69 = v5;
    v67 = &v5[1].__vftable;
    v68 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    *a3 = 0;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v9 = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC39CB8;
    v11 = v8 + 1;
    v71 = v8 + 1;
    v72 = v8;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v13 = (uint64_t *)a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 7;
    std::mutex::lock((std::mutex *)(v13 + 7));
    *(_QWORD *)&v73 = v14;
    *((_QWORD *)&v73 + 1) = v13;
    if (!*((_BYTE *)v13 + 48))
      sub_22324A974();
    v15 = v13[4];
    v16 = *v13;
    v17 = (std::__shared_weak_count **)(*v13 + 16 * v15);
    do
      v18 = __ldxr(v9);
    while (__stxr(v18 + 1, v9));
    *v17 = v11;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v8;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v13[1] - *v13) >> 4;
    v24 = v13[5];
    v25 = v13[4] + 1;
    if (v25 >= v23)
      v26 = (v13[1] - *v13) >> 4;
    else
      v26 = 0;
    v13[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v13[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v13[3] = v27 - v23;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v73 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v73 = v42;
            *((_QWORD *)&v73 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v73 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x38uLL);
        *(_QWORD *)v47 = &off_24EC39E08;
        *(_OWORD *)(v47 + 8) = v73;
        v73 = 0uLL;
        *((_QWORD *)v47 + 3) = v11;
        *((_QWORD *)v47 + 4) = v8;
        v74 = 0;
        v75 = 0;
        *((_QWORD *)v47 + 5) = v67;
        *((_QWORD *)v47 + 6) = v68;
        v76[0] = 0;
        v76[1] = 0;
        v78 = (std::string *)v47;
        sub_2245022E4(*v38, (uint64_t)&v77);
        v48 = v78;
        if (v78 == &v77)
        {
          v49 = 4;
          v48 = &v77;
        }
        else
        {
          if (!v78)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(v48->__r_.__value_.__r.__words[0] + 8 * v49))();
LABEL_51:
        if (v72)
        {
          v50 = &v72->__shared_owners_;
          do
            v51 = __ldaxr((unint64_t *)v50);
          while (__stlxr(v51 - 1, (unint64_t *)v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v69)
        {
          v52 = (unint64_t *)&v69->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        return;
      }
    }
    else
    {
      v13[5] = v24 + 1;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x227684CE8](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v66 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v66 = v33;
      *((_QWORD *)&v66 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v66 = 0uLL;
    }
  }
  v54 = operator new(0x20uLL);
  v54[1] = 0;
  v54[2] = 0;
  *v54 = &unk_24EC2F420;
  v54[3] = *a3;
  *a3 = 0;
  v55 = (char *)operator new(0x30uLL);
  *(_QWORD *)v55 = &off_24EC39E88;
  *(_OWORD *)(v55 + 8) = v66;
  *((_QWORD *)v55 + 4) = v54 + 3;
  *((_QWORD *)v55 + 5) = v54;
  v75 = (__int128 *)v55;
  sub_2245022E4(*v29, (uint64_t)&v73);
  v57 = v75;
  if (v75 == &v73)
  {
    v58 = 4;
    v57 = &v73;
  }
  else
  {
    if (!v75)
      return;
    v58 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v57 + 8 * v58))(v57, v56);
}

void sub_2234A0EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x2234A0E0CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_2234A1000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2234A10A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2234A10BC(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2234A1130(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC39F08;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2234A1240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2234A12A4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC39F88;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2234A13B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2234A1418@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC3A008;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2234A1630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2234A16F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC3A088;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2234A1910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A19D8(uint64_t a1)
{
  return sub_2234A1B48(a1 - 16);
}

void sub_2234A19E0(uint64_t a1)
{
  sub_2234A1B48(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A1A08(uint64_t a1)
{
  return sub_2234A1130((_QWORD *)(a1 - 16));
}

uint64_t *sub_2234A1A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2234A1418((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2234A1A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2234A16F8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2234A1A20(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2234A1A28(uint64_t a1)
{
  return sub_2234A1B48(a1 - 24);
}

void sub_2234A1A30(uint64_t a1)
{
  sub_2234A1B48(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A1A58(uint64_t a1)
{
  return sub_2234A12A4((_QWORD *)(a1 - 24));
}

uint64_t sub_2234A1A60(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2234A1A68(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2234A1AD0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234A1B38(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2234A1B48(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC39AC8;
  *(_QWORD *)(a1 + 16) = &unk_24EC39B40;
  *(_QWORD *)(a1 + 24) = &unk_24EC39B80;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2234A1D34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC39CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2234A1D44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC39CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A1D7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC39D08;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2234A1DC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC39D08;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A1E14(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC39D08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2234A1E84(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC39D08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2234A1ED4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2234A1F10(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2234A1F48(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_2234A226C((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2234A2110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A21F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE25Enqueue"
                     "MessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0"
                                "EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A2260()
{
  return &unk_24EC39D68;
}

void sub_2234A226C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_2234A2304()
{
  __break(1u);
}

void sub_2234A23B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2234A23D0);
}

_QWORD *sub_2234A23DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC39D88;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A2414(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC39D88;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A245C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC39D88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2234A24AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC39D88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2234A24DC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234A24EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234A2518(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_2234A226C((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A25C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A260C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0"
                                "EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A2678()
{
  return &unk_24EC39DE8;
}

_QWORD *sub_2234A2684(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC39E08;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2234A270C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC39E08;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2234A27A4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC39E08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2234A2834(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC39E08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2234A28A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2234A2924(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2234A29A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2234A226C(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2234A2C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2234A2DAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE25Enqueue"
                     "MessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0"
                                "EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A2E18()
{
  return &unk_24EC39E68;
}

_QWORD *sub_2234A2E24(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC39E88;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2234A2EA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC39E88;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A2F2C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC39E88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[5];
  result[4] = a1[4];
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2234A2F9C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC39E88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2234A2FEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2234A305C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2234A30CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2234A226C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2234A31E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A3288(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE7ProcessE"
                     "RKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0"
                                "EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A32F4()
{
  return &unk_24EC39EE8;
}

_QWORD *sub_2234A3300(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC39F08;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A3338(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC39F08;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A3380(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC39F08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2234A33D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC39F08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2234A3400(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234A3410(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234A343C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A34D0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A350C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE9Subscribe"
                     "ENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0E"
                                "E9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A3578()
{
  return &unk_24EC39F68;
}

_QWORD *sub_2234A3584(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC39F88;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A35BC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC39F88;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A3604(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC39F88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2234A3654(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC39F88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2234A3684(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234A3694(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234A36C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A3754(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A3790(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE15AddError"
                     "HandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0E"
                                "E15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A37FC()
{
  return &unk_24EC39FE8;
}

_QWORD *sub_2234A3808(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3A008;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A3840(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3A008;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A3888(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3A008;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2234A38E0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3A008;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2234A3918(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234A3928(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234A3954(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A3A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A3A58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE16OutputH"
                     "andlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0"
                                "EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A3AC4()
{
  return &unk_24EC3A068;
}

_QWORD *sub_2234A3AD0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3A088;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A3B08(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3A088;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A3B50(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3A088;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2234A3BA8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3A088;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2234A3BE0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234A3BF0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234A3C1C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A3CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A3D20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE15ErrorHa"
                     "ndlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0"
                                "EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A3D8C()
{
  return &unk_24EC3A0E8;
}

void sub_2234A3D9C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234A3DC0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2234A3DD8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng23KeyframeNodeWaitReques"
                     "tEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng23KeyframeNod"
                                "eWaitRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng23KeyframeNodeWaitRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2234A3E48(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A3E74(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A3EB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC3A158;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2234A3F18(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A3FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234A3FBC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A404C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A4060(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2234A4124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A4138(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2234A41FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234A4210(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2234A42B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A42C8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  void *__p[2];
  uint64_t v19;
  __int128 v20;
  void *v21[2];
  uint64_t v22;
  __int128 __dst;
  uint64_t v24;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    sub_223197FA4(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
    goto LABEL_6;
  }
  __dst = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (*(char *)(a3 + 23) < 0)
    goto LABEL_5;
LABEL_3:
  *(_OWORD *)v21 = *(_OWORD *)a3;
  v22 = *(_QWORD *)(a3 + 16);
LABEL_6:
  *(_OWORD *)__p = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_2234A44EC((uint64_t)__p, a4, a5, &v20);
  v17 = *(_OWORD *)a4;
  *a4 = 0;
  a4[1] = 0;
  sub_2234A86B8(a1, &__dst, (__int128 *)v21, (uint64_t)&v20, (uint64_t)&v17);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (!*((_QWORD *)&v20 + 1))
    goto LABEL_15;
  v14 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_17;
LABEL_21:
      operator delete(v21[0]);
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        return a1;
LABEL_22:
      operator delete((void *)__dst);
      return a1;
    }
  }
  else
  {
LABEL_15:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_16;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v22) < 0)
    goto LABEL_21;
LABEL_17:
  if (SHIBYTE(v24) < 0)
    goto LABEL_22;
  return a1;
}

void sub_2234A4470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if ((*(char *)(v25 - 57) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)(v25 - 80));
  _Unwind_Resume(exception_object);
}

void sub_2234A44EC(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  void *__p[2];
  uint64_t v13;
  __int128 v14;

  *(_OWORD *)__p = *(_OWORD *)a1;
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v5 = a2[1];
  *(_QWORD *)&v11 = *a2;
  *((_QWORD *)&v11 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2234A45EC((__int128 *)__p, &v11, a3, 0, (uint64_t *)&v14);
  *a4 = v14;
  v14 = 0uLL;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (!*((_QWORD *)&v11 + 1))
    goto LABEL_8;
  v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_8:
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (SHIBYTE(v13) < 0)
    goto LABEL_11;
}

void sub_2234A45C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_223167354((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2234A45EC(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  void *__p[2];
  uint64_t v27;

  v10 = operator new();
  v11 = *a1;
  v27 = *((_QWORD *)a1 + 2);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v25 = *a2;
  *(_OWORD *)__p = v11;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2234A4828(v10, (__int128 *)__p, (uint64_t)&v25, a3, a4);
  *a5 = v10;
  v12 = (std::__shared_weak_count *)operator new();
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3A810;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  a5[1] = (uint64_t)v12;
  v14 = *(std::__shared_weak_count **)(v10 + 40);
  if (v14)
  {
    if (v14->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    *(_QWORD *)(v10 + 32) = v10;
    *(_QWORD *)(v10 + 40) = v12;
    std::__shared_weak_count::__release_weak(v14);
  }
  else
  {
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v19 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)(v10 + 32) = v10;
    *(_QWORD *)(v10 + 40) = v12;
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_14:
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_18;
  v23 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_18:
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (SHIBYTE(v27) < 0)
    goto LABEL_21;
}

void sub_2234A47BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_223167354((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A4828(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24EC3A1D0;
  *(_QWORD *)(a1 + 16) = &unk_24EC3A248;
  *(_QWORD *)(a1 + 24) = &unk_24EC3A288;
  v8 = *a2;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v8;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  v9 = (_QWORD *)(a1 + 72);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v10 = operator new();
  *(_QWORD *)v10 = &off_24EC3A370;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = a1 + 96;
  *(_QWORD *)(a1 + 104) = a1 + 96;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  v11 = (uint64_t *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = 0;
  if (a5)
  {
    v12 = operator new();
    sub_2234A5B98(&v14, a5);
    *(_OWORD *)v12 = v14;
    *(_QWORD *)(v12 + 16) = v15;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0;
    *(_BYTE *)(v12 + 48) = 1;
    *(_QWORD *)(v12 + 56) = 850045863;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_QWORD *)(v12 + 112) = 0;
    *v11 = v12;
    if (*v9)
      return a1;
  }
  else
  {
    *v11 = 0;
    if (*v9)
      return a1;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1;
}

void sub_2234A49C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;

  MEMORY[0x227684CE8](v3, 0x1022C400958DFA3);
  sub_22349C3B8((uint64_t *)(v2 + 16));
  sub_223167354(v2);
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*(void **)(v1 + 48));
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 40);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void sub_2234A4A48(uint64_t a1)
{
  sub_2234A5C94(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2234A4A6C(_QWORD *a1)
{
  uint64_t **v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
  {
    if (!a1[9]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (a1[18])
    {
      sub_2234A5E80(a1);
      return;
    }
    v2 = (uint64_t **)a1[9];
    v3 = (std::__shared_weak_count *)a1[5];
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      v5 = v4;
      if (v4)
      {
        v6 = a1[4];
        p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
        do
          v8 = __ldxr(p_shared_weak_owners);
        while (__stxr(v8 + 1, p_shared_weak_owners));
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v11 = operator new(0x20uLL);
    *v11 = &off_24EC3A490;
    v11[1] = v6;
    v11[2] = v5;
    v15 = v11;
    sub_2245022E4(*v2, (uint64_t)v14);
    v12 = v15;
    if (v15 == v14)
    {
      v13 = 4;
      v12 = v14;
    }
    else
    {
      if (!v15)
        return;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
}

void sub_2234A4C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A4C84(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2234A4C94(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2234A4CA0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2234A4CB0(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t **v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  const char **v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  const char **v32;
  std::string *v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  __int128 v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  std::string v39;
  std::runtime_error v40;
  const char *v41;
  uint64_t v42;
  _QWORD *v43;
  const char **v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    v41 = "Invalid operation. Interface is disabled for ";
    v42 = 45;
    v31 = (_QWORD *)a1[6];
    v30 = a1 + 6;
    v29 = v31;
    v32 = (const char **)*((unsigned __int8 *)v30 + 23);
    if ((char)v32 < 0)
      v32 = (const char **)v30[1];
    else
      v29 = v30;
    v43 = v29;
    v44 = v32;
    sub_2231A9820((uint64_t)&v41, (uint64_t)&v45, 0, 0, &v39);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v39;
    else
      v33 = (std::string *)v39.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v40, (const char *)v33);
    v40.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v35 = std::runtime_error::runtime_error(exception, &v40);
    v35->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v35, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = operator new(0x20uLL);
    v6[2] = 0;
    *v6 = &unk_24EC2F420;
    v6[3] = *a3;
    v41 = (const char *)(v6 + 3);
    v42 = (uint64_t)v6;
    v37 = v6 + 3;
    v38 = (std::__shared_weak_count *)v6;
    v6[1] = 0;
    v7 = v6 + 1;
    *a3 = 0;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    sub_2234A6B2C(a1, a2, (uint64_t *)&v37);
    v9 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)v42;
    if (v42)
    {
      v13 = (unint64_t *)(v42 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    v15 = (uint64_t **)a1[9];
    v36 = 0uLL;
    v16 = (std::__shared_weak_count *)a1[5];
    if (v16)
    {
      v17 = std::__shared_weak_count::lock(v16);
      if (v17)
      {
        v18 = v17;
        v19 = a1[4];
        p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
        do
          v21 = __ldxr(p_shared_weak_owners);
        while (__stxr(v21 + 1, p_shared_weak_owners));
        *(_QWORD *)&v36 = v19;
        *((_QWORD *)&v36 + 1) = v17;
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v36 = 0uLL;
      }
    }
    v24 = operator new(0x20uLL);
    v24[1] = 0;
    v24[2] = 0;
    *v24 = &unk_24EC2F420;
    v24[3] = *a3;
    *a3 = 0;
    v25 = (char *)operator new(0x30uLL);
    *(_QWORD *)v25 = &off_24EC3A590;
    *(_OWORD *)(v25 + 8) = v36;
    *((_QWORD *)v25 + 4) = v24 + 3;
    *((_QWORD *)v25 + 5) = v24;
    v44 = (const char **)v25;
    sub_2245022E4(*v15, (uint64_t)&v41);
    v27 = v44;
    if (v44 == &v41)
    {
      v28 = 4;
      v27 = &v41;
    }
    else
    {
      if (!v44)
        return;
      v28 = 5;
    }
    (*(void (**)(const char **, uint64_t))&(*v27)[8 * v28])(v27, v26);
  }
}

void sub_2234A4FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22)
{
  std::promise<void> *v22;
  uint64_t v23;
  std::exception_ptr v24;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24.__ptr_ = (void *)(v23 - 80);
    std::promise<void>::set_exception(v22, v24);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v23 - 80));
    std::runtime_error::~runtime_error(&a22);
    if (a21 < 0)
      operator delete(__p);
    JUMPOUT(0x2234A4F14);
  }
  _Unwind_Resume(exception_object);
}

void sub_2234A50F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_223167354((uint64_t)va);
  sub_223167354(v6 - 72);
  _Unwind_Resume(a1);
}

void sub_2234A510C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2234A5180(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC3A610;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2234A5290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2234A52F4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC3A690;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2234A5404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2234A5468@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC3A710;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2234A5680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2234A5748@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC3A790;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2234A5960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A5A28(uint64_t a1)
{
  return sub_2234A5C94(a1 - 16);
}

void sub_2234A5A30(uint64_t a1)
{
  sub_2234A5C94(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A5A58(uint64_t a1)
{
  return sub_2234A5180((_QWORD *)(a1 - 16));
}

uint64_t *sub_2234A5A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2234A5468((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2234A5A68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2234A5748((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2234A5A70(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2234A5A78(uint64_t a1)
{
  return sub_2234A5C94(a1 - 24);
}

void sub_2234A5A80(uint64_t a1)
{
  sub_2234A5C94(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A5AA8(uint64_t a1)
{
  return sub_2234A52F4((_QWORD *)(a1 - 24));
}

uint64_t sub_2234A5AB0(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2234A5AB8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2234A5B20(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234A5B88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_2234A5B98(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_22316E078();
    v4 = 16 * a2;
    v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * a2];
    bzero(v5, 16 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_2234A5C18(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A5C94(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC3A1D0;
  *(_QWORD *)(a1 + 16) = &unk_24EC3A248;
  *(_QWORD *)(a1 + 24) = &unk_24EC3A288;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2234A5E80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count **v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::mutex **v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!a1[18]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3A3C0;
  v5 = v2 + 1;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  v7 = (uint64_t *)a1[18];
  v8 = (_QWORD *)operator new();
  *v8 = v7 + 7;
  std::mutex::lock((std::mutex *)(v7 + 7));
  v41[0] = v8;
  v41[1] = v7;
  if (!*((_BYTE *)v7 + 48))
    sub_22324A974();
  v9 = v7[4];
  v10 = *v7;
  v11 = (std::__shared_weak_count **)(*v7 + 16 * v9);
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  *v11 = v5;
  v13 = v10 + 16 * v9;
  v14 = *(std::__shared_weak_count **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v2;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (v7[1] - *v7) >> 4;
  v18 = v7[5];
  v19 = v7[4] + 1;
  if (v19 >= v17)
    v20 = (v7[1] - *v7) >> 4;
  else
    v20 = 0;
  v7[4] = v19 - v20;
  if (v18 != v17)
  {
    v7[5] = v18 + 1;
    v22 = (std::mutex **)v41[0];
    if (!v41[0])
      goto LABEL_23;
    goto LABEL_22;
  }
  v21 = v7[3] + 1;
  if (v21 < v17)
    v17 = 0;
  v7[3] = v21 - v17;
  v22 = (std::mutex **)v41[0];
  if (v41[0])
  {
LABEL_22:
    std::mutex::unlock(*v22);
    MEMORY[0x227684CE8](v22, 0x20C4093837F09);
  }
LABEL_23:
  v23 = (uint64_t **)a1[9];
  v40 = 0uLL;
  v24 = (std::__shared_weak_count *)a1[5];
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    if (v25)
    {
      v26 = v25;
      v27 = a1[4];
      v28 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      *(_QWORD *)&v40 = v27;
      *((_QWORD *)&v40 + 1) = v25;
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      v40 = 0uLL;
    }
  }
  v32 = (char *)operator new(0x30uLL);
  *(_QWORD *)v32 = &off_24EC3A410;
  *(_OWORD *)(v32 + 8) = v40;
  *((_QWORD *)v32 + 3) = v5;
  *((_QWORD *)v32 + 4) = v2;
  v42 = v32;
  sub_2245022E4(*v23, (uint64_t)v41);
  v36 = v42;
  if (v42 == v41)
  {
    v37 = 4;
    v36 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_37;
    v37 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v36 + 8 * v37))(v36, v33, v34, v35);
LABEL_37:
  if (v2)
  {
    v38 = (unint64_t *)&v2->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2234A619C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_223322894((uint64_t)&a9);
  sub_223167354((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_2234A61EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  std::__shared_weak_count *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_223322848((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v6);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2234A6210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  MEMORY[0x227684CE8](v7, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v6);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2234A6244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  std::__shared_weak_count::__release_weak(v14);
  sub_223167354((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_2234A6260(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3A3C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2234A6270(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3A3C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A62A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC3A410;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2234A62EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC3A410;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A6340(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3A410;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2234A63B0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3A410;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2234A6400(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2234A643C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2234A6474(uint64_t a1)
{
  sub_2234A64F4((uint64_t *)(a1 + 8));
}

uint64_t sub_2234A647C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE25"
                     "EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequest"
                                "EvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A64E8()
{
  return &unk_24EC3A470;
}

void sub_2234A64F4(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  _BYTE v25[8];
  char v26;

  v24 = 0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
  {
    v3 = 0;
LABEL_6:
    v5 = 0;
    v23 = 0;
    v4 = (std::__shared_weak_count *)a1[1];
    if (!v4)
      goto LABEL_12;
    goto LABEL_7;
  }
  v3 = std::__shared_weak_count::lock(v2);
  v24 = v3;
  if (!v3)
    goto LABEL_6;
  v4 = (std::__shared_weak_count *)a1[1];
  v5 = a1[2];
  v23 = 0;
  if (!v4)
  {
LABEL_12:
    v7 = 0;
    v22 = 0;
    v21 = v3;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_7:
  v6 = std::__shared_weak_count::lock(v4);
  v23 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = *a1;
  v22 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v21 = v3;
  if (v3)
  {
LABEL_13:
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
LABEL_15:
  if (v7)
  {
    if (v5)
    {
      v25[0] = 0;
      v26 = 0;
      sub_2234A672C((uint64_t *)(v7 + 88), v5, (uint64_t)v25);
      if (v26)
        MEMORY[0x227684B68](v25);
    }
  }
  if (v21)
  {
    v12 = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (!v23)
    goto LABEL_33;
  v16 = (unint64_t *)&v23->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v18 = v24;
    if (!v24)
      return;
  }
  else
  {
LABEL_33:
    v18 = v24;
    if (!v24)
      return;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_2234A66F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  if (*(_BYTE *)(v15 - 40))
    MEMORY[0x227684B68](v15 - 48);
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a13);
  sub_223167354((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2234A672C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_2234A67C4()
{
  __break(1u);
}

void sub_2234A6870(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2234A6890);
}

_QWORD *sub_2234A689C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3A490;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A68D4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3A490;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A691C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC3A490;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2234A696C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC3A490;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2234A699C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234A69AC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234A69D8(uint64_t a1)
{
  sub_2234A6A58((uint64_t *)(a1 + 8));
}

uint64_t sub_2234A69E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequest"
                                "EvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A6A4C()
{
  return &unk_24EC3A4F0;
}

void sub_2234A6A58(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v11 = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *a1;
      v10 = v5;
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_2234A672C((uint64_t *)(v5 + 88), (uint64_t)(a1 + 2), (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A6B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12)
{
  if (a10)
    MEMORY[0x227684B68](&a9);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_2234A6B2C(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count **v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::mutex **v25;
  uint64_t **v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!a1[18]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3A3C0;
  v8 = v5 + 1;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  v10 = (uint64_t *)a1[18];
  v11 = (_QWORD *)operator new();
  *v11 = v10 + 7;
  std::mutex::lock((std::mutex *)(v10 + 7));
  v48[0] = v11;
  v48[1] = v10;
  if (!*((_BYTE *)v10 + 48))
    sub_22324A974();
  v12 = v10[4];
  v13 = *v10;
  v14 = (std::__shared_weak_count **)(*v10 + 16 * v12);
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  *v14 = v8;
  v16 = v13 + 16 * v12;
  v17 = *(std::__shared_weak_count **)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v5;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (v10[1] - *v10) >> 4;
  v21 = v10[5];
  v22 = v10[4] + 1;
  if (v22 >= v20)
    v23 = (v10[1] - *v10) >> 4;
  else
    v23 = 0;
  v10[4] = v22 - v23;
  if (v21 != v20)
  {
    v10[5] = v21 + 1;
    v25 = (std::mutex **)v48[0];
    if (!v48[0])
      goto LABEL_23;
    goto LABEL_22;
  }
  v24 = v10[3] + 1;
  if (v24 < v20)
    v20 = 0;
  v10[3] = v24 - v20;
  v25 = (std::mutex **)v48[0];
  if (v48[0])
  {
LABEL_22:
    std::mutex::unlock(*v25);
    MEMORY[0x227684CE8](v25, 0x20C4093837F09);
  }
LABEL_23:
  v26 = (uint64_t **)a1[9];
  v47 = 0uLL;
  v27 = (std::__shared_weak_count *)a1[5];
  if (v27)
  {
    v28 = std::__shared_weak_count::lock(v27);
    if (v28)
    {
      v29 = v28;
      v30 = a1[4];
      v31 = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      *(_QWORD *)&v47 = v30;
      *((_QWORD *)&v47 + 1) = v28;
      v33 = (unint64_t *)&v28->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      v47 = 0uLL;
    }
  }
  v35 = *a3;
  v36 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v37 = (char *)operator new(0x38uLL);
  *(_QWORD *)v37 = &off_24EC3A510;
  *(_OWORD *)(v37 + 8) = v47;
  *((_QWORD *)v37 + 3) = v8;
  *((_QWORD *)v37 + 4) = v5;
  *((_QWORD *)v37 + 5) = v35;
  *((_QWORD *)v37 + 6) = v36;
  v49 = v37;
  sub_2245022E4(*v26, (uint64_t)v48);
  v43 = v49;
  if (v49 == v48)
  {
    v44 = 4;
    v43 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_37;
    v44 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v43 + 8 * v44))(v43, v38, v39, v40, v41, v42);
LABEL_37:
  if (v5)
  {
    v45 = (unint64_t *)&v5->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2234A6E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  sub_22332429C(&a9);
  sub_223167354((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2234A6EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  std::__shared_weak_count *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_223322848((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2234A6EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  MEMORY[0x227684CE8](v9, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2234A6F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::__shared_weak_count *v16;

  std::__shared_weak_count::__release_weak(v16);
  sub_223167354((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_2234A6F30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC3A510;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2234A6FB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC3A510;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2234A7050(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3A510;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2234A70E0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3A510;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2234A7150(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2234A71D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2234A724C(uint64_t a1)
{
  sub_2234A72CC((_QWORD *)(a1 + 8));
}

uint64_t sub_2234A7254(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE25"
                     "EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequest"
                                "EvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A72C0()
{
  return &unk_24EC3A570;
}

void sub_2234A72CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t **v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v31 = 0;
  v32 = 0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
  {
    v3 = 0;
LABEL_6:
    v5 = 0;
    v29 = 0;
    v30 = 0;
    v4 = (std::__shared_weak_count *)a1[1];
    if (!v4)
      goto LABEL_12;
    goto LABEL_7;
  }
  v3 = std::__shared_weak_count::lock(v2);
  v32 = v3;
  if (!v3)
    goto LABEL_6;
  v4 = (std::__shared_weak_count *)a1[1];
  v5 = a1[2];
  v31 = v5;
  v29 = 0;
  v30 = 0;
  if (!v4)
  {
LABEL_12:
    v27 = 0;
    v28 = 0;
    v10 = (uint64_t **)(a1 + 4);
    v25 = v5;
    v26 = v3;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_7:
  v6 = std::__shared_weak_count::lock(v4);
  v30 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = *a1;
  v28 = v6;
  v29 = v7;
  v27 = v7;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (uint64_t **)(a1 + 4);
  v25 = v5;
  v26 = v3;
  if (v3)
  {
LABEL_13:
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
LABEL_15:
  sub_2234A74D4(v10, &v27, &v25);
  v13 = v26;
  if (v26)
  {
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v30;
  if (!v30)
    goto LABEL_29;
  v20 = (unint64_t *)&v30->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = v32;
    if (!v32)
      return;
  }
  else
  {
LABEL_29:
    v22 = v32;
    if (!v32)
      return;
  }
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_2234A74A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a13);
  sub_223167354((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2234A74D4(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  std::runtime_error *exception;
  std::runtime_error *v8;
  std::runtime_error *v9;
  std::runtime_error *v10;
  uint64_t v11;
  char v12;
  std::runtime_error v13;
  std::runtime_error v14;

  if (!*a2)
  {
    std::runtime_error::runtime_error(&v14, "Processor is no longer available.");
    v14.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v8 = std::runtime_error::runtime_error(exception, &v14);
    v8->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v8, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v4 = *a3;
  if (!*a3)
  {
    std::runtime_error::runtime_error(&v13, "Message was dropped.");
    v13.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v10 = std::runtime_error::runtime_error(v9, &v13);
    v10->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v10, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (uint64_t *)(*a2 + 88);
  v6 = *a1;
  v11 = **a1;
  *v6 = 0;
  v12 = 1;
  sub_2234A672C(v5, v4, (uint64_t)&v11);
  if (v12)
    MEMORY[0x227684B68](&v11);
}

void sub_2234A7644(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 24));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_2234A7664(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::promise<void> *v23;
  uint64_t v24;
  std::exception_ptr v25;
  std::runtime_error v26;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v25.__ptr_ = (void *)(v24 - 48);
  std::promise<void>::set_exception(v23, v25);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v24 - 48));
  std::runtime_error::~runtime_error(&v26);
}

void sub_2234A76A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15)
{
  uint64_t v15;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v15 - 48));
  std::runtime_error::~runtime_error(&a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_2234A76C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC3A590;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2234A773C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC3A590;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A77C8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3A590;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[5];
  result[4] = a1[4];
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2234A7838(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3A590;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2234A7888(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2234A78F8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2234A7968(uint64_t a1)
{
  sub_2234A79E8((uint64_t *)(a1 + 8));
}

uint64_t sub_2234A7970(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE7P"
                     "rocessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequest"
                                "EvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A79DC()
{
  return &unk_24EC3A5F0;
}

void sub_2234A79E8(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::runtime_error *exception;
  std::runtime_error *v10;
  std::runtime_error v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v14 = 0;
  v15 = 0;
  v2 = (std::__shared_weak_count *)a1[1];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2), (v15 = v3) == 0) || (v14 = *a1, (v4 = v14) == 0))
  {
    std::runtime_error::runtime_error(&v11, "Invalid operation. Processor is released.");
    v11.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v10 = std::runtime_error::runtime_error(exception, &v11);
    v10->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v10, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = v3;
  v6 = (uint64_t *)a1[3];
  v12 = *v6;
  *v6 = 0;
  v13 = 1;
  sub_2234A672C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 2), (uint64_t)&v12);
  if (v13)
    MEMORY[0x227684B68](&v12);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_2234A7AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if ((_BYTE)a14)
  {
    MEMORY[0x227684B68](&a12);
    sub_223167354(v16 - 32);
    _Unwind_Resume(a1);
  }
  sub_223167354(v16 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_2234A7B90(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3A610;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A7BC8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3A610;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A7C10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC3A610;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2234A7C60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC3A610;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2234A7C90(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234A7CA0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234A7CCC(uint64_t a1)
{
  sub_2234A7D4C((uint64_t *)(a1 + 8));
}

uint64_t sub_2234A7CD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE9Su"
                     "bscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestE"
                                "vvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A7D40()
{
  return &unk_24EC3A670;
}

void sub_2234A7D4C(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *a1;
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A7DE0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2234A7E1C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3A690;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A7E54(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3A690;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A7E9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC3A690;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2234A7EEC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC3A690;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2234A7F1C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234A7F2C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234A7F58(uint64_t a1)
{
  sub_2234A7FD8((uint64_t *)(a1 + 8));
}

uint64_t sub_2234A7F60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE15A"
                     "ddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestE"
                                "vvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A7FCC()
{
  return &unk_24EC3A6F0;
}

void sub_2234A7FD8(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *a1;
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A806C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2234A80A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3A710;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A80E0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3A710;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A8128(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3A710;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2234A8180(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3A710;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2234A81B8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234A81C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234A81F4(uint64_t a1)
{
  sub_2234A8274((_QWORD *)(a1 + 8));
}

uint64_t sub_2234A81FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE16"
                     "OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequest"
                                "EvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A8268()
{
  return &unk_24EC3A770;
}

void sub_2234A8274(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v12;

  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v12 = v3;
    if (v3)
    {
      v4 = v3;
      if (*a1)
      {
        v5 = (uint64_t *)a1[2];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A8334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_2234A8358(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3A790;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A8390(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3A790;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A83D8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3A790;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2234A8430(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3A790;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2234A8468(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234A8478(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234A84A4(uint64_t a1)
{
  sub_2234A8524((_QWORD *)(a1 + 8));
}

uint64_t sub_2234A84AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE15"
                     "ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequest"
                                "EvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234A8518()
{
  return &unk_24EC3A7F0;
}

void sub_2234A8524(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v12;

  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v12 = v3;
    if (v3)
    {
      v4 = v3;
      if (*a1)
      {
        v5 = (uint64_t *)a1[2];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A85E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2234A860C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234A8630(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2234A8648(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng30FilesystemAccessGrante"
                     "dRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng30FilesystemA"
                                "ccessGrantedRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng30FilesystemAccessGrantedRequestEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2234A86B8(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24EC37D10;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24EC37D40;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24EC3A860;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24EC2E888;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24EC2E888;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_2234A8868(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_223167354(v3);
    sub_223167354(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v3);
    sub_223167354(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A88D8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234A8904(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234A8940@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC3A860;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2234A89A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A8A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234A8A4C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234A8ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A8AF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2234A8BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234A8BC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2234A8C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234A8CA0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2234A8D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234A8D5C(uint64_t a1)
{
  sub_2234AA590(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2234A8D80(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3AAD8;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC3AB28;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24EC3ABA8;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_2234A9194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234A9288(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2234A9298(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2234A92A4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2234A92B4(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v69, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC3AC28;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3AAD8;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC3AC78;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24EC3AC28;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24EC3ACF8;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_2234A98D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x2234A97ECLL);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2234A994C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2234A99A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_22334FD8C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_22334FD8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234A99F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2234A9A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2234A9AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2234A9AD4(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2234A9B48(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC3AD78;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2DF48;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2234A9C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2234A9CEC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC3ADF8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2234A9DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2234A9E60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC3AE78;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2234AA078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2234AA140@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC3AEF8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2234AA358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234AA420(uint64_t a1)
{
  return sub_2234AA590(a1 - 16);
}

void sub_2234AA428(uint64_t a1)
{
  sub_2234AA590(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234AA450(uint64_t a1, uint64_t a2)
{
  return sub_2234A9B48((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2234AA458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2234A9E60((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2234AA460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2234AA140((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2234AA468(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2234AA470(uint64_t a1)
{
  return sub_2234AA590(a1 - 24);
}

void sub_2234AA478(uint64_t a1)
{
  sub_2234AA590(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234AA4A0(uint64_t a1)
{
  return sub_2234A9CEC((_QWORD *)(a1 - 24));
}

uint64_t sub_2234AA4A8(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2234AA4B0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2234AA518(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234AA580(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2234AA590(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC3A8D8;
  *(_QWORD *)(a1 + 16) = &unk_24EC3A950;
  *(_QWORD *)(a1 + 24) = &unk_24EC3A990;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2234AA790(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3AAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2234AA7A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3AAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234AA7D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC3AB28;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2234AA81C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC3AB28;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234AA870(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3AB28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2234AA8E0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3AB28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2234AA930(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2234AA96C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2234AA9A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_2234AACC8((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_2234AB028(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2234AAB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_2234AB028(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234AAC50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE"
                     "25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesReque"
                                "stEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234AACBC()
{
  return &unk_24EC3AB88;
}

void sub_2234AACC8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_2234AAF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_2234AAFFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2234AB01CLL);
}

uint64_t *sub_2234AB028(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_2234AB114(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x2234AB070);
}

_QWORD *sub_2234AB150(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3ABA8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234AB188(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3ABA8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234AB1D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC3ABA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_2234AB228(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC3ABA8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_2234AB260(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234AB270(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234AB29C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_2234AACC8((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_2234AB028(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234AB344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_2234AB028(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234AB390(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE"
                     "4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesReque"
                                "stEbvbLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234AB3FC()
{
  return &unk_24EC3AC08;
}

void sub_2234AB408(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC3AC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2234AB41C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC3AC28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_2234AB450(uint64_t a1)
{
  return sub_2234AB028((uint64_t *)(a1 + 24));
}

_QWORD *sub_2234AB45C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC3AC78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2234AB4E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC3AC78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2234AB57C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3AC78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2234AB60C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3AC78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2234AB67C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2234AB6FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2234AB778(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2234AACC8(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_2234AB028((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2234ABA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2234ABA80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x2234AB88CLL);
    JUMPOUT(0x2234AB85CLL);
  }
  sub_2233236D4(3u);
}

void sub_2234ABADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2234ABB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_2234AB028(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2234ABBF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE"
                     "25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesReque"
                                "stEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIbEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234ABC60()
{
  return &unk_24EC3ACD8;
}

_QWORD *sub_2234ABC6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC3ACF8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2234ABCE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC3ACF8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234ABD74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC3ACF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_2234ABDEC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC3ACF8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2234ABE44(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2234ABEB4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2234ABF24(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2234AACC8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_2234AB028((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2234AC034(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_2234AC0AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x2234AC0E0);
  JUMPOUT(0x2234AC110);
}

uint64_t sub_2234AC118(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE"
                     "7ProcessERKS6_NSt3__17promiseIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesReque"
                                "stEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE7ProcessERKS6_NSt3__17promiseIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234AC184()
{
  return &unk_24EC3AD58;
}

_QWORD *sub_2234AC190(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC3AD78;
  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2234AC1E8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC3AD78;
  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234AC250(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC3AD78;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2DF48;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_2234AC2C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2234AC2E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC3AD78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2DF48;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_2234AC350(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2234AC368(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2DF48;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2234AC3B8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2DF48;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2234AC404(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2DF48;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234AC4B8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234AC4F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE9"
                     "SubscribeENS1_12ChannelInputIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesReques"
                                "tEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234AC560()
{
  return &unk_24EC3ADD8;
}

_QWORD *sub_2234AC56C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3ADF8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234AC5A4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3ADF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234AC5EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC3ADF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2234AC63C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC3ADF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2234AC66C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234AC67C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234AC6A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234AC73C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234AC778(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE1"
                     "5AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesReques"
                                "tEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234AC7E4()
{
  return &unk_24EC3AE58;
}

_QWORD *sub_2234AC7F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3AE78;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234AC828(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3AE78;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234AC870(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3AE78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2234AC8C8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3AE78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2234AC900(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234AC910(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234AC93C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2234ACAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234ACB28(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE"
                     "16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesReque"
                                "stEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234ACB94()
{
  return &unk_24EC3AED8;
}

_QWORD *sub_2234ACBA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC3AEF8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234ACBD8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC3AEF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234ACC20(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC3AEF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2234ACC78(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC3AEF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2234ACCB0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2234ACCC0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2234ACCEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234ACDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234ACDF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE"
                     "15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesReque"
                                "stEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2234ACE5C()
{
  return &unk_24EC3AF58;
}

void sub_2234ACE6C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234ACE90(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2234ACEA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng32LocalizeRestoredKeyfra"
                     "mesRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng32LocalizeRes"
                                "toredKeyframesRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_5recon3sng32LocalizeRestoredKeyframesRequestEbvbLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2234ACF18(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2234ACF44(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2234ACF80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC3AFC8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2234ACFE8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234AD078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234AD08C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2234AD11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234AD130(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2234AD1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234AD208(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2234AD2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234AD2E0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2234AD384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234AD39C(uint64_t a1)
{
  sub_2234AEBD0(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2234AD3C0(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3B230;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC3B280;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24EC3B300;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_2234AD7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234AD8C8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2234AD8D8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2234AD8E4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2234AD8F4(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v69, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC3AC28;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC3B230;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC3B380;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24EC3AC28;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24EC3B400;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_2234ADF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x2234ADE2CLL);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2234ADF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2234ADFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_22334FD8C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_22334FD8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234AE034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2234AE058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2234AE0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2234AE114(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2234AE188(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC3B480;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2DF48;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2234AE2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2234AE32C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC3B500;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2234AE43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2234AE4A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC3B580;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2234AE6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2234AE780@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC3B600;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2234AE998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234AEA60(uint64_t a1)
{
  return sub_2234AEBD0(a1 - 16);
}

