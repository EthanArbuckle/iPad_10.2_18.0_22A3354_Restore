void sub_22368C534(char **a1, uint64_t a2, int a3, uint64_t *a4, int *a5)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[44];

  v8 = *a5;
  v9 = *a4;
  *(_OWORD *)&v26[4] = *(_OWORD *)(a5 + 2);
  *(_OWORD *)&v26[20] = *(_OWORD *)(a5 + 6);
  *(_QWORD *)&v26[36] = *((_QWORD *)a5 + 5);
  v11 = a1[1];
  v10 = (unint64_t)a1[2];
  if ((unint64_t)v11 >= v10)
  {
    v13 = *a1;
    v14 = 0x4EC4EC4EC4EC4EC5 * ((v11 - *a1) >> 3);
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x276276276276276)
      sub_22367C394();
    v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v10 - (_QWORD)v13) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x13B13B13B13B13BLL)
      v17 = 0x276276276276276;
    else
      v17 = v15;
    if (v17 > 0x276276276276276)
      sub_223174E94();
    v18 = 104 * v17;
    v19 = (char *)operator new(104 * v17);
    v20 = &v19[104 * v14];
    *(_OWORD *)(v20 + 8) = xmmword_2245F53E0;
    *(_OWORD *)(v20 + 60) = *(_OWORD *)v26;
    *(_QWORD *)v20 = v9;
    *((_QWORD *)v20 + 3) = a2;
    *((_DWORD *)v20 + 8) = a3;
    *((_DWORD *)v20 + 9) = 1;
    *((_QWORD *)v20 + 5) = 0;
    *((_QWORD *)v20 + 6) = 0;
    *((_DWORD *)v20 + 14) = v8;
    *(_OWORD *)(v20 + 76) = *(_OWORD *)&v26[16];
    v12 = v20 + 104;
    *(_OWORD *)(v20 + 88) = *(_OWORD *)&v26[28];
    if (v11 != v13)
    {
      do
      {
        v21 = *((_QWORD *)v11 - 13);
        v11 -= 104;
        *((_QWORD *)v20 - 13) = v21;
        v20 -= 104;
        v22 = *(_OWORD *)(v11 + 8);
        *(_OWORD *)(v20 + 24) = *(_OWORD *)(v11 + 24);
        *(_OWORD *)(v20 + 8) = v22;
        v23 = *(_OWORD *)(v11 + 40);
        v24 = *(_OWORD *)(v11 + 56);
        v25 = *(_OWORD *)(v11 + 72);
        *(_OWORD *)(v20 + 88) = *(_OWORD *)(v11 + 88);
        *(_OWORD *)(v20 + 72) = v25;
        *(_OWORD *)(v20 + 56) = v24;
        *(_OWORD *)(v20 + 40) = v23;
      }
      while (v11 != v13);
      v11 = *a1;
    }
    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v19[v18];
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_OWORD *)(v11 + 8) = xmmword_2245F53E0;
    *(_OWORD *)(v11 + 60) = *(_OWORD *)v26;
    *(_QWORD *)v11 = v9;
    *((_QWORD *)v11 + 3) = a2;
    *((_DWORD *)v11 + 8) = a3;
    *((_DWORD *)v11 + 9) = 1;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_DWORD *)v11 + 14) = v8;
    *(_OWORD *)(v11 + 76) = *(_OWORD *)&v26[16];
    v12 = v11 + 104;
    *(_OWORD *)(v11 + 88) = *(_OWORD *)&v26[28];
  }
  a1[1] = v12;
}

uint64_t sub_22368C754(float **a1, float *a2, float *a3)
{
  float *v6;
  float *v7;
  double v8;
  int v9;
  double v10;
  float *v11;
  float *v12;
  double v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  double v21;
  int v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t result;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  BOOL v41;
  float v42;
  float v43;
  float v44;
  int v45;
  float v46;
  float v47;
  float *v48;
  double v49;
  double v50;
  int v51;
  float *v52;
  double v53;
  int v54;
  double v55;
  double v57;

  v6 = *a1;
  v7 = a1[1];
  v57 = 1.0;
  v8 = sub_2233DB7C4(v6, v7, a2, &v57);
  if (v8 == 0.0)
  {
LABEL_2:
    v9 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
  }
  else
  {
    v10 = fabs(v8);
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
    if (v10 <= v57 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v11 = *a1;
  v12 = a1[1];
  v57 = 1.0;
  v13 = sub_2233DB7C4(v11, v12, a3, &v57);
  if (v13 == 0.0)
    goto LABEL_13;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v13 > 0.0)
      v20 = 1;
    else
      v20 = -1;
    if (v9)
      goto LABEL_87;
    goto LABEL_32;
  }
  v21 = fabs(v13);
  if (v13 > 0.0)
    v20 = 1;
  else
    v20 = -1;
  if (v21 > v57 * 2.22044605e-16)
  {
    if (v9)
      goto LABEL_87;
LABEL_32:
    v23 = a1[1];
    v24 = v23[1];
    v25 = (*a1)[1] - v24;
    v26 = *v23 - **a1;
    if (v26 != 0.0)
    {
      if (COERCE_UNSIGNED_INT(fabs(*v23 - **a1)) > 0x7F7FFFFF)
        goto LABEL_85;
      v46 = fabsf(v26);
      v47 = 0.00000011921;
      if (v46 >= 1.0)
        v47 = v46 * 0.00000011921;
      if (v46 > v47)
        goto LABEL_85;
    }
    if (v25 != 0.0)
    {
      if (COERCE_UNSIGNED_INT(fabs((*a1)[1] - v24)) > 0x7F7FFFFF)
        goto LABEL_85;
      v27 = fabsf(-v25);
      v28 = 0.00000011921;
      if (v27 >= 1.0)
        v28 = v27 * 0.00000011921;
      if (v27 > v28)
      {
LABEL_85:
        if ((float)((float)((float)(v24 * v25) - (float)(*v23 * v26))
                   + (float)((float)(v26 * *a2) - (float)(v25 * a2[1]))) < 0.0)
          return 1;
      }
    }
    goto LABEL_87;
  }
LABEL_13:
  v14 = a1[1];
  v15 = v14[1];
  v16 = (*a1)[1] - v15;
  v17 = *v14 - **a1;
  v18 = -v16;
  v19 = (float)(v15 * v16) - (float)(*v14 * v17);
  if (v9)
  {
    if (v17 != 0.0)
    {
      if (COERCE_UNSIGNED_INT(fabs(*v14 - **a1)) > 0x7F7FFFFF)
        goto LABEL_48;
      v29 = fabsf(v17);
      v30 = 0.00000011921;
      if (v29 >= 1.0)
        v30 = v29 * 0.00000011921;
      if (v29 > v30)
        goto LABEL_48;
    }
    if (v16 == 0.0)
      goto LABEL_16;
    if ((LODWORD(v16) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_48;
    v31 = fabsf(v18);
    v32 = 0.00000011921;
    if (v31 >= 1.0)
      v32 = v31 * 0.00000011921;
    if (v31 <= v32)
    {
LABEL_16:
      v20 = 0;
    }
    else
    {
LABEL_48:
      v20 = 0;
      result = 0;
      if ((float)(v19 + (float)((float)(v17 * *a3) - (float)(v16 * a3[1]))) < 0.0)
        return result;
    }
LABEL_87:
    v41 = v9 < v20;
    if (v9 == v20)
    {
      v48 = a1[1];
      v57 = 1.0;
      v49 = sub_2233DB7C4(v48, a2, a3, &v57);
      if (v49 == 0.0)
        return 0;
      if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v49 > 0.0)
          v51 = 1;
        else
          v51 = -1;
      }
      else
      {
        v50 = fabs(v49);
        if (v49 > 0.0)
          v51 = 1;
        else
          v51 = -1;
        if (v50 <= v57 * 2.22044605e-16)
          return 0;
      }
      v52 = a1[1];
      v57 = 1.0;
      v53 = sub_2233DB7C4(v52, a3, a2, &v57);
      if (v53 != 0.0)
      {
        if ((*(_QWORD *)&v53 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v53 > 0.0)
            v54 = 1;
          else
            v54 = -1;
          return !(v51 + v54) && v54 < v51;
        }
        v55 = fabs(v53);
        if (v53 > 0.0)
          v54 = 1;
        else
          v54 = -1;
        if (v55 > v57 * 2.22044605e-16)
          return !(v51 + v54) && v54 < v51;
      }
      v54 = 0;
      return !(v51 + v54) && v54 < v51;
    }
    return v41;
  }
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT(fabs(*v14 - **a1)) > 0x7F7FFFFF)
      goto LABEL_59;
    v34 = fabsf(v17);
    v35 = 0.00000011921;
    if (v34 >= 1.0)
      v35 = v34 * 0.00000011921;
    if (v34 > v35)
      goto LABEL_59;
  }
  if (v16 == 0.0)
    goto LABEL_26;
  if ((LODWORD(v16) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_59;
  v36 = fabsf(v18);
  v37 = 0.00000011921;
  if (v36 >= 1.0)
    v37 = v36 * 0.00000011921;
  if (v36 <= v37)
  {
LABEL_26:
    v22 = 0;
    if (v17 != 0.0)
      goto LABEL_65;
  }
  else
  {
LABEL_59:
    v38 = v19 + (float)((float)(v17 * *a2) - (float)(v16 * a2[1]));
    if (v38 > 0.0)
      v22 = 1;
    else
      v22 = -1;
    if (v38 == 0.0)
      v22 = 0;
    if (v17 != 0.0)
    {
LABEL_65:
      if (COERCE_UNSIGNED_INT(fabs(*v14 - **a1)) > 0x7F7FFFFF)
        goto LABEL_75;
      v39 = fabsf(v17);
      v40 = 0.00000011921;
      if (v39 >= 1.0)
        v40 = v39 * 0.00000011921;
      if (v39 > v40)
        goto LABEL_75;
    }
  }
  if (v16 == 0.0)
    return v22 < 0;
  if ((LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v42 = fabsf(v18);
    v43 = 0.00000011921;
    if (v42 >= 1.0)
      v43 = v42 * 0.00000011921;
    if (v42 <= v43)
      return v22 < 0;
  }
LABEL_75:
  v44 = v19 + (float)((float)(v17 * *a3) - (float)(v16 * a3[1]));
  if (v44 > 0.0)
    v45 = 1;
  else
    v45 = -1;
  if (v44 == 0.0)
    v45 = 0;
  return v22 < v45;
}

void sub_22368CCE8(_OWORD *a1, unint64_t a2, float **a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v84[104];

uint64_t sub_22368D350(float **a1, uint64_t a2, uint64_t a3)
{
  float *v6;
  float *v7;
  double v8;
  int v9;
  double v10;
  float *v11;
  float *v12;
  double v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  double v21;
  int v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t result;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  BOOL v41;
  float v42;
  float v43;
  float v44;
  int v45;
  float v46;
  float v47;
  float *v48;
  double v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  int v63;
  float *v64;
  double v65;
  int v66;
  double v67;
  double v68;

  v6 = *a1;
  v7 = a1[1];
  v68 = 1.0;
  v8 = sub_2233DB7C4(v6, v7, (float *)a2, &v68);
  if (v8 == 0.0)
  {
LABEL_2:
    v9 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
  }
  else
  {
    v10 = fabs(v8);
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
    if (v10 <= v68 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v11 = *a1;
  v12 = a1[1];
  v68 = 1.0;
  v13 = sub_2233DB7C4(v11, v12, (float *)a3, &v68);
  if (v13 == 0.0)
    goto LABEL_13;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v13 > 0.0)
      v20 = 1;
    else
      v20 = -1;
    if (v9)
      goto LABEL_89;
    goto LABEL_32;
  }
  v21 = fabs(v13);
  if (v13 > 0.0)
    v20 = 1;
  else
    v20 = -1;
  if (v21 > v68 * 2.22044605e-16)
  {
    if (v9)
      goto LABEL_89;
LABEL_32:
    v23 = a1[1];
    v24 = v23[1];
    v25 = (*a1)[1] - v24;
    v26 = *v23 - **a1;
    if (v26 != 0.0)
    {
      if (COERCE_UNSIGNED_INT(fabs(*v23 - **a1)) > 0x7F7FFFFF)
        goto LABEL_87;
      v46 = fabsf(v26);
      v47 = 0.00000011921;
      if (v46 >= 1.0)
        v47 = v46 * 0.00000011921;
      if (v46 > v47)
        goto LABEL_87;
    }
    if (v25 != 0.0)
    {
      if (COERCE_UNSIGNED_INT(fabs((*a1)[1] - v24)) > 0x7F7FFFFF)
        goto LABEL_87;
      v27 = fabsf(-v25);
      v28 = 0.00000011921;
      if (v27 >= 1.0)
        v28 = v27 * 0.00000011921;
      if (v27 > v28)
      {
LABEL_87:
        if ((float)((float)((float)(v24 * v25) - (float)(*v23 * v26))
                   + (float)((float)(v26 * *(float *)a2) - (float)(v25 * *(float *)(a2 + 4)))) < 0.0)
          return 1;
      }
    }
    goto LABEL_89;
  }
LABEL_13:
  v14 = a1[1];
  v15 = v14[1];
  v16 = (*a1)[1] - v15;
  v17 = *v14 - **a1;
  v18 = -v16;
  v19 = (float)(v15 * v16) - (float)(*v14 * v17);
  if (!v9)
  {
    if (v17 != 0.0)
    {
      if (COERCE_UNSIGNED_INT(fabs(*v14 - **a1)) > 0x7F7FFFFF)
        goto LABEL_59;
      v34 = fabsf(v17);
      v35 = 0.00000011921;
      if (v34 >= 1.0)
        v35 = v34 * 0.00000011921;
      if (v34 > v35)
        goto LABEL_59;
    }
    if (v16 == 0.0)
      goto LABEL_26;
    if ((LODWORD(v16) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_59;
    v36 = fabsf(v18);
    v37 = 0.00000011921;
    if (v36 >= 1.0)
      v37 = v36 * 0.00000011921;
    if (v36 <= v37)
    {
LABEL_26:
      v22 = 0;
      if (v17 == 0.0)
        goto LABEL_69;
    }
    else
    {
LABEL_59:
      v38 = v19 + (float)((float)(v17 * *(float *)a2) - (float)(v16 * *(float *)(a2 + 4)));
      if (v38 > 0.0)
        v22 = 1;
      else
        v22 = -1;
      if (v38 == 0.0)
        v22 = 0;
      if (v17 == 0.0)
        goto LABEL_69;
    }
    if (COERCE_UNSIGNED_INT(fabs(*v14 - **a1)) > 0x7F7FFFFF)
      goto LABEL_76;
    v39 = fabsf(v17);
    v40 = 0.00000011921;
    if (v39 >= 1.0)
      v40 = v39 * 0.00000011921;
    if (v39 > v40)
    {
LABEL_76:
      v44 = v19 + (float)((float)(v17 * *(float *)a3) - (float)(v16 * *(float *)(a3 + 4)));
      if (v44 > 0.0)
        v45 = 1;
      else
        v45 = -1;
      if (v44 == 0.0)
        v45 = 0;
      v41 = v22 < v45;
      if (v22 == v45)
      {
LABEL_91:
        v50 = *(_DWORD *)(a2 + 36);
        v51 = *(_DWORD *)(a3 + 36);
        v41 = v50 < v51;
        if (v50 == v51)
        {
          v52 = *(_QWORD *)(a2 + 24);
          v53 = *(_QWORD *)(a3 + 24);
          v41 = v52 < v53;
          if (v52 == v53)
          {
            v54 = *(_QWORD *)(a2 + 64);
            v55 = *(_QWORD *)(a3 + 64);
            v41 = v54 < v55;
            if (v54 == v55)
            {
              v56 = *(_QWORD *)(a2 + 72);
              v57 = *(_QWORD *)(a3 + 72);
              v41 = v56 < v57;
              if (v56 == v57)
              {
                v58 = *(_QWORD *)(a2 + 80);
                v59 = *(_QWORD *)(a3 + 80);
                v41 = v58 < v59;
                if (v58 == v59)
                {
                  v60 = *(_QWORD *)(a2 + 96);
                  v61 = *(_QWORD *)(a3 + 96);
                  v41 = v60 < v61;
                  if (v60 == v61)
                    return *(_QWORD *)(a2 + 88) < *(_QWORD *)(a3 + 88);
                }
              }
            }
          }
        }
        return v41;
      }
      return v41;
    }
LABEL_69:
    if (v16 == 0.0)
      goto LABEL_70;
    if ((LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v42 = fabsf(v18);
      v43 = 0.00000011921;
      if (v42 >= 1.0)
        v43 = v42 * 0.00000011921;
      if (v42 <= v43)
      {
LABEL_70:
        v41 = v22 < 0;
        if (!v22)
          goto LABEL_91;
        return v41;
      }
    }
    goto LABEL_76;
  }
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT(fabs(*v14 - **a1)) > 0x7F7FFFFF)
      goto LABEL_48;
    v29 = fabsf(v17);
    v30 = 0.00000011921;
    if (v29 >= 1.0)
      v30 = v29 * 0.00000011921;
    if (v29 > v30)
      goto LABEL_48;
  }
  if (v16 == 0.0)
    goto LABEL_16;
  if ((LODWORD(v16) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_48;
  v31 = fabsf(v18);
  v32 = 0.00000011921;
  if (v31 >= 1.0)
    v32 = v31 * 0.00000011921;
  if (v31 <= v32)
  {
LABEL_16:
    v20 = 0;
  }
  else
  {
LABEL_48:
    v20 = 0;
    result = 0;
    if ((float)(v19 + (float)((float)(v17 * *(float *)a3) - (float)(v16 * *(float *)(a3 + 4)))) < 0.0)
      return result;
  }
LABEL_89:
  v41 = v9 < v20;
  if (v9 == v20)
  {
    v48 = a1[1];
    v68 = 1.0;
    v49 = sub_2233DB7C4(v48, (float *)a2, (float *)a3, &v68);
    if (v49 == 0.0)
      goto LABEL_91;
    if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v49 > 0.0)
        v63 = 1;
      else
        v63 = -1;
    }
    else
    {
      v62 = fabs(v49);
      if (v49 > 0.0)
        v63 = 1;
      else
        v63 = -1;
      if (v62 <= v68 * 2.22044605e-16)
        goto LABEL_91;
    }
    v64 = a1[1];
    v68 = 1.0;
    v65 = sub_2233DB7C4(v64, (float *)a3, (float *)a2, &v68);
    if (v65 == 0.0)
      goto LABEL_111;
    if ((*(_QWORD *)&v65 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v65 > 0.0)
        v66 = 1;
      else
        v66 = -1;
    }
    else
    {
      v67 = fabs(v65);
      if (v65 > 0.0)
        v66 = 1;
      else
        v66 = -1;
      if (v67 <= v68 * 2.22044605e-16)
LABEL_111:
        v66 = 0;
    }
    if (!(v63 + v66))
      return v66 < v63;
    goto LABEL_91;
  }
  return v41;
}

uint64_t sub_22368D928(uint64_t a1, uint64_t a2, uint64_t a3, float **a4)
{
  char v8;
  uint64_t result;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v8 = sub_22368D350(a4, a2, a1);
  result = sub_22368D350(a4, a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = (__int128 *)(a1 + 8);
    if ((_DWORD)result)
    {
      v11 = *(_QWORD *)a1;
      v47 = *(_OWORD *)(a1 + 40);
      v52 = *(_OWORD *)(a1 + 56);
      v57 = *(_OWORD *)(a1 + 72);
      v62 = *(_OWORD *)(a1 + 88);
      v37 = *v10;
      v42 = *(_OWORD *)(a1 + 24);
      *(_QWORD *)a1 = *(_QWORD *)a3;
      v12 = *(_OWORD *)(a3 + 40);
      v13 = *(_OWORD *)(a3 + 56);
      v14 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a1 + 88) = v14;
      *(_OWORD *)(a1 + 40) = v12;
      *(_OWORD *)(a1 + 56) = v13;
      v15 = *(_OWORD *)(a3 + 24);
      *v10 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a1 + 24) = v15;
      *(_QWORD *)a3 = v11;
      *(_OWORD *)(a3 + 40) = v47;
      *(_OWORD *)(a3 + 56) = v52;
      *(_OWORD *)(a3 + 72) = v57;
      *(_OWORD *)(a3 + 88) = v62;
      v16 = v42;
      *(_OWORD *)(a3 + 8) = v37;
      result = 1;
LABEL_10:
      *(_OWORD *)(a3 + 24) = v16;
      return result;
    }
    v27 = *(_QWORD *)a1;
    v50 = *(_OWORD *)(a1 + 40);
    v55 = *(_OWORD *)(a1 + 56);
    v60 = *(_OWORD *)(a1 + 72);
    v65 = *(_OWORD *)(a1 + 88);
    v40 = *v10;
    v45 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v28 = *(_OWORD *)(a2 + 40);
    v29 = *(_OWORD *)(a2 + 56);
    v30 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v30;
    *(_OWORD *)(a1 + 40) = v28;
    *(_OWORD *)(a1 + 56) = v29;
    v31 = *(_OWORD *)(a2 + 24);
    *v10 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v31;
    *(_QWORD *)a2 = v27;
    *(_OWORD *)(a2 + 40) = v50;
    *(_OWORD *)(a2 + 56) = v55;
    *(_OWORD *)(a2 + 72) = v60;
    *(_OWORD *)(a2 + 88) = v65;
    *(_OWORD *)(a2 + 8) = v40;
    *(_OWORD *)(a2 + 24) = v45;
    if (sub_22368D350(a4, a3, a2))
    {
      v32 = *(_QWORD *)a2;
      v51 = *(_OWORD *)(a2 + 40);
      v56 = *(_OWORD *)(a2 + 56);
      v61 = *(_OWORD *)(a2 + 72);
      v66 = *(_OWORD *)(a2 + 88);
      v41 = *(_OWORD *)(a2 + 8);
      v46 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v33 = *(_OWORD *)(a3 + 40);
      v34 = *(_OWORD *)(a3 + 56);
      v35 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 88) = v35;
      *(_OWORD *)(a2 + 40) = v33;
      *(_OWORD *)(a2 + 56) = v34;
      v36 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = v36;
      *(_QWORD *)a3 = v32;
      *(_OWORD *)(a3 + 40) = v51;
      *(_OWORD *)(a3 + 56) = v56;
      *(_OWORD *)(a3 + 72) = v61;
      *(_OWORD *)(a3 + 88) = v66;
      v16 = v46;
      *(_OWORD *)(a3 + 8) = v41;
      result = 2;
      goto LABEL_10;
    }
    return 1;
  }
  if ((_DWORD)result)
  {
    v17 = *(_QWORD *)a2;
    v48 = *(_OWORD *)(a2 + 40);
    v53 = *(_OWORD *)(a2 + 56);
    v58 = *(_OWORD *)(a2 + 72);
    v63 = *(_OWORD *)(a2 + 88);
    v38 = *(_OWORD *)(a2 + 8);
    v43 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)a2 = *(_QWORD *)a3;
    v18 = *(_OWORD *)(a3 + 40);
    v19 = *(_OWORD *)(a3 + 56);
    v20 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
    *(_OWORD *)(a2 + 72) = v20;
    *(_OWORD *)(a2 + 56) = v19;
    *(_OWORD *)(a2 + 40) = v18;
    v21 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = v21;
    *(_QWORD *)a3 = v17;
    *(_OWORD *)(a3 + 40) = v48;
    *(_OWORD *)(a3 + 56) = v53;
    *(_OWORD *)(a3 + 72) = v58;
    *(_OWORD *)(a3 + 88) = v63;
    *(_OWORD *)(a3 + 8) = v38;
    *(_OWORD *)(a3 + 24) = v43;
    if (!sub_22368D350(a4, a2, a1))
      return 1;
    v22 = *(_QWORD *)a1;
    v49 = *(_OWORD *)(a1 + 40);
    v54 = *(_OWORD *)(a1 + 56);
    v59 = *(_OWORD *)(a1 + 72);
    v64 = *(_OWORD *)(a1 + 88);
    v39 = *(_OWORD *)(a1 + 8);
    v44 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v23 = *(_OWORD *)(a2 + 40);
    v24 = *(_OWORD *)(a2 + 56);
    v25 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v25;
    *(_OWORD *)(a1 + 56) = v24;
    *(_OWORD *)(a1 + 40) = v23;
    v26 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v26;
    *(_QWORD *)a2 = v22;
    *(_OWORD *)(a2 + 40) = v49;
    *(_OWORD *)(a2 + 56) = v54;
    *(_OWORD *)(a2 + 72) = v59;
    *(_OWORD *)(a2 + 88) = v64;
    result = 2;
    *(_OWORD *)(a2 + 8) = v39;
    *(_OWORD *)(a2 + 24) = v44;
  }
  return result;
}

unint64_t sub_22368DC50(unint64_t a1, unint64_t a2, float **a3)
{
  unint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v4 = a2;
  v34 = *(_QWORD *)a1;
  v6 = *(_OWORD *)(a1 + 56);
  v37 = *(_OWORD *)(a1 + 40);
  v38 = v6;
  v7 = *(_OWORD *)(a1 + 88);
  v39 = *(_OWORD *)(a1 + 72);
  v40 = v7;
  v8 = *(_OWORD *)(a1 + 24);
  v35 = *(_OWORD *)(a1 + 8);
  v36 = v8;
  if ((sub_22368D350(a3, (uint64_t)&v34, a2 - 104) & 1) != 0)
  {
    v9 = a1;
    do
      v9 += 104;
    while ((sub_22368D350(a3, (uint64_t)&v34, v9) & 1) == 0);
  }
  else
  {
    v10 = a1 + 104;
    do
    {
      v9 = v10;
      if (v10 >= v4)
        break;
      v11 = sub_22368D350(a3, (uint64_t)&v34, v10);
      v10 = v9 + 104;
    }
    while (!v11);
  }
  if (v9 < v4)
  {
    do
      v4 -= 104;
    while ((sub_22368D350(a3, (uint64_t)&v34, v4) & 1) != 0);
  }
  while (v9 < v4)
  {
    v12 = *(_QWORD *)v9;
    v13 = *(_OWORD *)(v9 + 24);
    v41 = *(_OWORD *)(v9 + 8);
    v42 = v13;
    v14 = *(_OWORD *)(v9 + 40);
    v15 = *(_OWORD *)(v9 + 56);
    v16 = *(_OWORD *)(v9 + 88);
    v45 = *(_OWORD *)(v9 + 72);
    v46 = v16;
    v43 = v14;
    v44 = v15;
    *(_QWORD *)v9 = *(_QWORD *)v4;
    v17 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v4 + 24);
    *(_OWORD *)(v9 + 8) = v17;
    v18 = *(_OWORD *)(v4 + 40);
    v19 = *(_OWORD *)(v4 + 56);
    v20 = *(_OWORD *)(v4 + 72);
    *(_OWORD *)(v9 + 88) = *(_OWORD *)(v4 + 88);
    *(_OWORD *)(v9 + 72) = v20;
    *(_OWORD *)(v9 + 56) = v19;
    *(_OWORD *)(v9 + 40) = v18;
    *(_QWORD *)v4 = v12;
    v21 = v41;
    *(_OWORD *)(v4 + 24) = v42;
    *(_OWORD *)(v4 + 8) = v21;
    v22 = v43;
    v23 = v44;
    v24 = v45;
    *(_OWORD *)(v4 + 88) = v46;
    *(_OWORD *)(v4 + 72) = v24;
    *(_OWORD *)(v4 + 56) = v23;
    *(_OWORD *)(v4 + 40) = v22;
    do
      v9 += 104;
    while (!sub_22368D350(a3, (uint64_t)&v34, v9));
    do
      v4 -= 104;
    while ((sub_22368D350(a3, (uint64_t)&v34, v4) & 1) != 0);
  }
  if (v9 - 104 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v9 - 104);
    v25 = *(_OWORD *)(v9 - 80);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 96);
    *(_OWORD *)(a1 + 24) = v25;
    v26 = *(_OWORD *)(v9 - 64);
    v27 = *(_OWORD *)(v9 - 48);
    v28 = *(_OWORD *)(v9 - 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v9 - 32);
    *(_OWORD *)(a1 + 88) = v28;
    *(_OWORD *)(a1 + 40) = v26;
    *(_OWORD *)(a1 + 56) = v27;
  }
  *(_QWORD *)(v9 - 104) = v34;
  v29 = v36;
  *(_OWORD *)(v9 - 96) = v35;
  *(_OWORD *)(v9 - 80) = v29;
  v30 = v37;
  v31 = v38;
  v32 = v40;
  *(_OWORD *)(v9 - 32) = v39;
  *(_OWORD *)(v9 - 16) = v32;
  *(_OWORD *)(v9 - 64) = v30;
  *(_OWORD *)(v9 - 48) = v31;
  return v9;
}

__n128 sub_22368DE64(uint64_t *a1, unint64_t a2, float **a3)
{
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 result;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v6 = 0;
  v35 = *a1;
  v7 = a1 + 1;
  v8 = *(_OWORD *)(a1 + 7);
  v38 = *(__n128 *)(a1 + 5);
  v39 = v8;
  v9 = *(_OWORD *)(a1 + 11);
  v40 = *(_OWORD *)(a1 + 9);
  v41 = v9;
  v10 = *(_OWORD *)(a1 + 3);
  v36 = *(_OWORD *)(a1 + 1);
  v37 = v10;
  do
    v6 += 13;
  while ((sub_22368D350(a3, (uint64_t)&a1[v6], (uint64_t)&v35) & 1) != 0);
  v11 = (unint64_t)&a1[v6];
  if (v6 == 13)
  {
    do
    {
      if (v11 >= a2)
        break;
      a2 -= 104;
    }
    while ((sub_22368D350(a3, a2, (uint64_t)&v35) & 1) == 0);
  }
  else
  {
    do
      a2 -= 104;
    while (!sub_22368D350(a3, a2, (uint64_t)&v35));
  }
  v12 = (unint64_t)&a1[v6];
  if (v11 < a2)
  {
    v13 = a2;
    do
    {
      v14 = *(_QWORD *)v12;
      v15 = *(_OWORD *)(v12 + 24);
      v42 = *(_OWORD *)(v12 + 8);
      v43 = v15;
      v16 = *(_OWORD *)(v12 + 56);
      v17 = *(_OWORD *)(v12 + 88);
      v18 = *(_OWORD *)(v12 + 40);
      v46 = *(_OWORD *)(v12 + 72);
      v47 = v17;
      v44 = v18;
      v45 = v16;
      *(_QWORD *)v12 = *(_QWORD *)v13;
      v19 = *(_OWORD *)(v13 + 8);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
      *(_OWORD *)(v12 + 8) = v19;
      v20 = *(_OWORD *)(v13 + 40);
      v21 = *(_OWORD *)(v13 + 56);
      v22 = *(_OWORD *)(v13 + 72);
      *(_OWORD *)(v12 + 88) = *(_OWORD *)(v13 + 88);
      *(_OWORD *)(v12 + 72) = v22;
      *(_OWORD *)(v12 + 56) = v21;
      *(_OWORD *)(v12 + 40) = v20;
      *(_QWORD *)v13 = v14;
      v23 = v42;
      *(_OWORD *)(v13 + 24) = v43;
      *(_OWORD *)(v13 + 8) = v23;
      v24 = v44;
      v25 = v45;
      v26 = v46;
      *(_OWORD *)(v13 + 88) = v47;
      *(_OWORD *)(v13 + 72) = v26;
      *(_OWORD *)(v13 + 56) = v25;
      *(_OWORD *)(v13 + 40) = v24;
      do
        v12 += 104;
      while ((sub_22368D350(a3, v12, (uint64_t)&v35) & 1) != 0);
      do
        v13 -= 104;
      while (!sub_22368D350(a3, v13, (uint64_t)&v35));
    }
    while (v12 < v13);
  }
  if ((uint64_t *)(v12 - 104) != a1)
  {
    *a1 = *(_QWORD *)(v12 - 104);
    v27 = *(_OWORD *)(v12 - 80);
    *v7 = *(_OWORD *)(v12 - 96);
    v7[1] = v27;
    v28 = *(_OWORD *)(v12 - 64);
    v29 = *(_OWORD *)(v12 - 48);
    v30 = *(_OWORD *)(v12 - 16);
    v7[4] = *(_OWORD *)(v12 - 32);
    v7[5] = v30;
    v7[2] = v28;
    v7[3] = v29;
  }
  *(_QWORD *)(v12 - 104) = v35;
  v31 = v37;
  *(_OWORD *)(v12 - 96) = v36;
  *(_OWORD *)(v12 - 80) = v31;
  result = v38;
  v33 = v39;
  v34 = v41;
  *(_OWORD *)(v12 - 32) = v40;
  *(_OWORD *)(v12 - 16) = v34;
  *(__n128 *)(v12 - 64) = result;
  *(_OWORD *)(v12 - 48) = v33;
  return result;
}

BOOL sub_22368E074(uint64_t a1, uint64_t a2, float **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[104];

  v6 = 0x4EC4EC4EC4EC4EC5 * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (!sub_22368D350(a3, a2 - 104, a1))
        return 1;
      v8 = *(_QWORD *)a1;
      v9 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)&v38[32] = *(_OWORD *)(a1 + 40);
      *(_OWORD *)&v38[48] = v9;
      v10 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)&v38[64] = *(_OWORD *)(a1 + 72);
      *(_OWORD *)&v38[80] = v10;
      v11 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v38 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)&v38[16] = v11;
      *(_QWORD *)a1 = *(_QWORD *)(a2 - 104);
      v12 = *(_OWORD *)(a2 - 64);
      v13 = *(_OWORD *)(a2 - 48);
      v14 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a1 + 72) = v14;
      *(_OWORD *)(a1 + 56) = v13;
      *(_OWORD *)(a1 + 40) = v12;
      v15 = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a2 - 104) = v8;
      v16 = *(_OWORD *)&v38[48];
      *(_OWORD *)(a2 - 64) = *(_OWORD *)&v38[32];
      *(_OWORD *)(a2 - 48) = v16;
      v17 = *(_OWORD *)&v38[80];
      *(_OWORD *)(a2 - 32) = *(_OWORD *)&v38[64];
      *(_OWORD *)(a2 - 16) = v17;
      v18 = *(_OWORD *)&v38[16];
      result = 1;
      *(_OWORD *)(a2 - 96) = *(_OWORD *)v38;
      *(_OWORD *)(a2 - 80) = v18;
      return result;
    case 3:
      sub_22368D928(a1, a1 + 104, a2 - 104, a3);
      return 1;
    case 4:
      sub_22368E318(a1, a1 + 104, a1 + 208, a2 - 104, a3);
      return 1;
    case 5:
      sub_22368E510(a1, a1 + 104, a1 + 208, a1 + 312, a2 - 104, a3);
      return 1;
    default:
      v19 = a1 + 208;
      sub_22368D928(a1, a1 + 104, a1 + 208, a3);
      v20 = a1 + 312;
      if (a1 + 312 == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (1)
  {
    if (sub_22368D350(a3, v20, v19))
    {
      *(_QWORD *)v38 = *(_QWORD *)v20;
      v27 = *(_OWORD *)(v20 + 56);
      *(_OWORD *)&v38[40] = *(_OWORD *)(v20 + 40);
      *(_OWORD *)&v38[56] = v27;
      v28 = *(_OWORD *)(v20 + 88);
      *(_OWORD *)&v38[72] = *(_OWORD *)(v20 + 72);
      *(_OWORD *)&v38[88] = v28;
      v29 = *(_OWORD *)(v20 + 24);
      v30 = v21;
      *(_OWORD *)&v38[8] = *(_OWORD *)(v20 + 8);
      *(_OWORD *)&v38[24] = v29;
      do
      {
        v31 = a1 + v30;
        *(_QWORD *)(v31 + 312) = *(_QWORD *)(a1 + v30 + 208);
        v32 = (_OWORD *)(a1 + v30 + 216);
        v33 = *(_OWORD *)(a1 + v30 + 248);
        v34 = *(_OWORD *)(a1 + v30 + 232);
        *(_OWORD *)(v31 + 320) = *v32;
        *(_OWORD *)(v31 + 336) = v34;
        v35 = *(_OWORD *)(a1 + v30 + 264);
        v36 = *(_OWORD *)(a1 + v30 + 280);
        *(_OWORD *)(v31 + 352) = v33;
        *(_OWORD *)(v31 + 368) = v35;
        v37 = *(_OWORD *)(a1 + v30 + 296);
        *(_OWORD *)(v31 + 384) = v36;
        *(_OWORD *)(v31 + 400) = v37;
        if (v30 == -208)
        {
          v23 = (_QWORD *)a1;
          goto LABEL_7;
        }
        v30 -= 104;
      }
      while ((sub_22368D350(a3, (uint64_t)v38, v31 + 104) & 1) != 0);
      v23 = (_QWORD *)(a1 + v30 + 312);
LABEL_7:
      *v23 = *(_QWORD *)v38;
      v24 = *(_OWORD *)&v38[24];
      *(_OWORD *)(v31 + 216) = *(_OWORD *)&v38[8];
      v25 = *(_OWORD *)&v38[56];
      *(_OWORD *)(v31 + 248) = *(_OWORD *)&v38[40];
      *(_OWORD *)(v31 + 232) = v24;
      v26 = *(_OWORD *)&v38[88];
      v32[4] = *(_OWORD *)&v38[72];
      v32[5] = v26;
      ++v22;
      v32[3] = v25;
      if (v22 == 8)
        return v20 + 104 == a2;
    }
    v19 = v20;
    v21 += 104;
    v20 += 104;
    if (v20 == a2)
      return 1;
  }
}

__n128 sub_22368E318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float **a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  sub_22368D928(a1, a2, a3, a5);
  if (sub_22368D350(a5, a4, a3))
  {
    v11 = *(_QWORD *)a3;
    v32 = *(_OWORD *)(a3 + 40);
    v35 = *(_OWORD *)(a3 + 56);
    v38 = *(_OWORD *)(a3 + 72);
    v41 = *(_OWORD *)(a3 + 88);
    v26 = *(_OWORD *)(a3 + 8);
    v29 = *(_OWORD *)(a3 + 24);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    v12 = *(_OWORD *)(a4 + 40);
    v13 = *(_OWORD *)(a4 + 56);
    v14 = *(_OWORD *)(a4 + 72);
    *(_OWORD *)(a3 + 88) = *(_OWORD *)(a4 + 88);
    *(_OWORD *)(a3 + 72) = v14;
    *(_OWORD *)(a3 + 56) = v13;
    *(_OWORD *)(a3 + 40) = v12;
    v15 = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = v15;
    *(_QWORD *)a4 = v11;
    *(_OWORD *)(a4 + 40) = v32;
    *(_OWORD *)(a4 + 56) = v35;
    *(_OWORD *)(a4 + 72) = v38;
    *(_OWORD *)(a4 + 88) = v41;
    *(_OWORD *)(a4 + 8) = v26;
    *(_OWORD *)(a4 + 24) = v29;
    if (sub_22368D350(a5, a3, a2))
    {
      v16 = *(_QWORD *)a2;
      v33 = *(_OWORD *)(a2 + 40);
      v36 = *(_OWORD *)(a2 + 56);
      v39 = *(_OWORD *)(a2 + 72);
      v42 = *(_OWORD *)(a2 + 88);
      v27 = *(_OWORD *)(a2 + 8);
      v30 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v17 = *(_OWORD *)(a3 + 40);
      v18 = *(_OWORD *)(a3 + 56);
      v19 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = v19;
      *(_OWORD *)(a2 + 56) = v18;
      *(_OWORD *)(a2 + 40) = v17;
      v20 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v20;
      *(_QWORD *)a3 = v16;
      *(_OWORD *)(a3 + 40) = v33;
      *(_OWORD *)(a3 + 56) = v36;
      *(_OWORD *)(a3 + 72) = v39;
      *(_OWORD *)(a3 + 88) = v42;
      *(_OWORD *)(a3 + 8) = v27;
      *(_OWORD *)(a3 + 24) = v30;
      if (sub_22368D350(a5, a2, a1))
      {
        v21 = *(_QWORD *)a1;
        v34 = *(_OWORD *)(a1 + 40);
        v37 = *(_OWORD *)(a1 + 56);
        v40 = *(_OWORD *)(a1 + 72);
        v43 = *(_OWORD *)(a1 + 88);
        v28 = *(__n128 *)(a1 + 8);
        v31 = *(_OWORD *)(a1 + 24);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v22 = *(_OWORD *)(a2 + 40);
        v23 = *(_OWORD *)(a2 + 56);
        v24 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = v24;
        *(_OWORD *)(a1 + 56) = v23;
        *(_OWORD *)(a1 + 40) = v22;
        v25 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = v25;
        *(_QWORD *)a2 = v21;
        *(_OWORD *)(a2 + 40) = v34;
        *(_OWORD *)(a2 + 56) = v37;
        *(_OWORD *)(a2 + 72) = v40;
        *(_OWORD *)(a2 + 88) = v43;
        result = v28;
        *(__n128 *)(a2 + 8) = v28;
        *(_OWORD *)(a2 + 24) = v31;
      }
    }
  }
  return result;
}

__n128 sub_22368E510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float **a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __n128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  sub_22368E318(a1, a2, a3, a4, a6);
  if (sub_22368D350(a6, a5, a4))
  {
    v13 = *(_QWORD *)a4;
    v41 = *(_OWORD *)(a4 + 40);
    v45 = *(_OWORD *)(a4 + 56);
    v49 = *(_OWORD *)(a4 + 72);
    v53 = *(_OWORD *)(a4 + 88);
    v33 = *(_OWORD *)(a4 + 8);
    v37 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    v14 = *(_OWORD *)(a5 + 40);
    v15 = *(_OWORD *)(a5 + 56);
    v16 = *(_OWORD *)(a5 + 72);
    *(_OWORD *)(a4 + 88) = *(_OWORD *)(a5 + 88);
    *(_OWORD *)(a4 + 72) = v16;
    *(_OWORD *)(a4 + 56) = v15;
    *(_OWORD *)(a4 + 40) = v14;
    v17 = *(_OWORD *)(a5 + 8);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(_OWORD *)(a4 + 8) = v17;
    *(_QWORD *)a5 = v13;
    *(_OWORD *)(a5 + 40) = v41;
    *(_OWORD *)(a5 + 56) = v45;
    *(_OWORD *)(a5 + 72) = v49;
    *(_OWORD *)(a5 + 88) = v53;
    *(_OWORD *)(a5 + 8) = v33;
    *(_OWORD *)(a5 + 24) = v37;
    if (sub_22368D350(a6, a4, a3))
    {
      v18 = *(_QWORD *)a3;
      v42 = *(_OWORD *)(a3 + 40);
      v46 = *(_OWORD *)(a3 + 56);
      v50 = *(_OWORD *)(a3 + 72);
      v54 = *(_OWORD *)(a3 + 88);
      v34 = *(_OWORD *)(a3 + 8);
      v38 = *(_OWORD *)(a3 + 24);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      v19 = *(_OWORD *)(a4 + 40);
      v20 = *(_OWORD *)(a4 + 56);
      v21 = *(_OWORD *)(a4 + 72);
      *(_OWORD *)(a3 + 88) = *(_OWORD *)(a4 + 88);
      *(_OWORD *)(a3 + 72) = v21;
      *(_OWORD *)(a3 + 56) = v20;
      *(_OWORD *)(a3 + 40) = v19;
      v22 = *(_OWORD *)(a4 + 8);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(_OWORD *)(a3 + 8) = v22;
      *(_QWORD *)a4 = v18;
      *(_OWORD *)(a4 + 40) = v42;
      *(_OWORD *)(a4 + 56) = v46;
      *(_OWORD *)(a4 + 72) = v50;
      *(_OWORD *)(a4 + 88) = v54;
      *(_OWORD *)(a4 + 8) = v34;
      *(_OWORD *)(a4 + 24) = v38;
      if (sub_22368D350(a6, a3, a2))
      {
        v23 = *(_QWORD *)a2;
        v43 = *(_OWORD *)(a2 + 40);
        v47 = *(_OWORD *)(a2 + 56);
        v51 = *(_OWORD *)(a2 + 72);
        v55 = *(_OWORD *)(a2 + 88);
        v35 = *(_OWORD *)(a2 + 8);
        v39 = *(_OWORD *)(a2 + 24);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v24 = *(_OWORD *)(a3 + 40);
        v25 = *(_OWORD *)(a3 + 56);
        v26 = *(_OWORD *)(a3 + 72);
        *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
        *(_OWORD *)(a2 + 72) = v26;
        *(_OWORD *)(a2 + 56) = v25;
        *(_OWORD *)(a2 + 40) = v24;
        v27 = *(_OWORD *)(a3 + 8);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = v27;
        *(_QWORD *)a3 = v23;
        *(_OWORD *)(a3 + 40) = v43;
        *(_OWORD *)(a3 + 56) = v47;
        *(_OWORD *)(a3 + 72) = v51;
        *(_OWORD *)(a3 + 88) = v55;
        *(_OWORD *)(a3 + 8) = v35;
        *(_OWORD *)(a3 + 24) = v39;
        if (sub_22368D350(a6, a2, a1))
        {
          v28 = *(_QWORD *)a1;
          v44 = *(_OWORD *)(a1 + 40);
          v48 = *(_OWORD *)(a1 + 56);
          v52 = *(_OWORD *)(a1 + 72);
          v56 = *(_OWORD *)(a1 + 88);
          v36 = *(__n128 *)(a1 + 8);
          v40 = *(_OWORD *)(a1 + 24);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v29 = *(_OWORD *)(a2 + 40);
          v30 = *(_OWORD *)(a2 + 56);
          v31 = *(_OWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(a1 + 72) = v31;
          *(_OWORD *)(a1 + 56) = v30;
          *(_OWORD *)(a1 + 40) = v29;
          v32 = *(_OWORD *)(a2 + 8);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 8) = v32;
          *(_QWORD *)a2 = v28;
          *(_OWORD *)(a2 + 40) = v44;
          *(_OWORD *)(a2 + 56) = v48;
          *(_OWORD *)(a2 + 72) = v52;
          *(_OWORD *)(a2 + 88) = v56;
          result = v36;
          *(__n128 *)(a2 + 8) = v36;
          *(_OWORD *)(a2 + 24) = v40;
        }
      }
    }
  }
  return result;
}

__n128 sub_22368E794(uint64_t a1, float **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v9;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v36 = v4;
    v37 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x4EC4EC4EC4EC4EC5 * ((a4 - a1) >> 3))
    {
      v12 = (0x9D89D89D89D89D8ALL * ((a4 - a1) >> 3)) | 1;
      v13 = a1 + 104 * v12;
      v14 = 0x9D89D89D89D89D8ALL * ((a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_22368D350(a2, a1 + 104 * v12, v13 + 104))
      {
        v13 += 104;
        v12 = v14;
      }
      if ((sub_22368D350(a2, v13, v7) & 1) == 0)
      {
        v29 = *(_QWORD *)v7;
        v16 = *(_OWORD *)(v7 + 56);
        v32 = *(__n128 *)(v7 + 40);
        v33 = v16;
        v17 = *(_OWORD *)(v7 + 88);
        v34 = *(_OWORD *)(v7 + 72);
        v35 = v17;
        v18 = *(_OWORD *)(v7 + 24);
        v30 = *(_OWORD *)(v7 + 8);
        v31 = v18;
        do
        {
          v19 = v13;
          *(_QWORD *)v7 = *(_QWORD *)v13;
          v20 = *(_OWORD *)(v13 + 8);
          *(_OWORD *)(v7 + 24) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v7 + 8) = v20;
          v21 = *(_OWORD *)(v13 + 40);
          v22 = *(_OWORD *)(v13 + 56);
          v23 = *(_OWORD *)(v13 + 72);
          *(_OWORD *)(v7 + 88) = *(_OWORD *)(v13 + 88);
          *(_OWORD *)(v7 + 72) = v23;
          *(_OWORD *)(v7 + 56) = v22;
          *(_OWORD *)(v7 + 40) = v21;
          if (v9 < v12)
            break;
          v24 = (2 * v12) | 1;
          v13 = a1 + 104 * v24;
          v25 = 2 * v12 + 2;
          if (v25 < a3)
          {
            if (sub_22368D350(a2, a1 + 104 * v24, v13 + 104))
            {
              v13 += 104;
              v24 = v25;
            }
          }
          v7 = v19;
          v12 = v24;
        }
        while (!sub_22368D350(a2, v13, (uint64_t)&v29));
        *(_QWORD *)v19 = v29;
        v26 = v31;
        *(_OWORD *)(v19 + 8) = v30;
        *(_OWORD *)(v19 + 24) = v26;
        result = v32;
        v27 = v33;
        v28 = v35;
        *(_OWORD *)(v19 + 72) = v34;
        *(_OWORD *)(v19 + 88) = v28;
        *(__n128 *)(v19 + 40) = result;
        *(_OWORD *)(v19 + 56) = v27;
      }
    }
  }
  return result;
}

__n128 sub_22368E96C(uint64_t a1, uint64_t a2, float **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 result;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  __n128 v41;
  __int128 v42;
  __n128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __n128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  if (a4 >= 2)
  {
    v54 = v4;
    v55 = v5;
    v9 = 0;
    v40 = *(_QWORD *)a1;
    v43 = *(__n128 *)(a1 + 40);
    v44 = *(_OWORD *)(a1 + 56);
    v45 = *(_OWORD *)(a1 + 72);
    v46 = *(_OWORD *)(a1 + 88);
    v10 = (unint64_t)(a4 - 2) >> 1;
    v11 = a1;
    v41 = *(__n128 *)(a1 + 8);
    v42 = *(_OWORD *)(a1 + 24);
    do
    {
      v16 = v11 + 104 * v9 + 104;
      v17 = (2 * v9) | 1;
      v18 = 2 * v9 + 2;
      if (v18 < a4 && sub_22368D350(a3, v11 + 104 * v9 + 104, v11 + 104 * v9 + 208))
      {
        v16 += 104;
        v17 = v18;
      }
      *(_QWORD *)v11 = *(_QWORD *)v16;
      v12 = *(_OWORD *)(v16 + 8);
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v16 + 24);
      *(_OWORD *)(v11 + 8) = v12;
      v13 = *(_OWORD *)(v16 + 40);
      v14 = *(_OWORD *)(v16 + 56);
      v15 = *(_OWORD *)(v16 + 72);
      *(_OWORD *)(v11 + 88) = *(_OWORD *)(v16 + 88);
      *(_OWORD *)(v11 + 72) = v15;
      *(_OWORD *)(v11 + 56) = v14;
      *(_OWORD *)(v11 + 40) = v13;
      v11 = v16;
      v9 = v17;
    }
    while (v17 <= v10);
    v19 = (__n128 *)(v16 + 8);
    if (v16 == a2 - 104)
    {
      *(_QWORD *)v16 = v40;
      *v19 = v41;
      *(_OWORD *)(v16 + 24) = v42;
      result = v43;
      *(_OWORD *)(v16 + 72) = v45;
      *(_OWORD *)(v16 + 88) = v46;
      *(__n128 *)(v16 + 40) = v43;
      *(_OWORD *)(v16 + 56) = v44;
    }
    else
    {
      *(_QWORD *)v16 = *(_QWORD *)(a2 - 104);
      v20 = *(_OWORD *)(a2 - 80);
      *v19 = *(__n128 *)(a2 - 96);
      *(_OWORD *)(v16 + 24) = v20;
      v21 = *(_OWORD *)(a2 - 64);
      v22 = *(_OWORD *)(a2 - 48);
      v23 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(v16 + 72) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(v16 + 88) = v23;
      *(_OWORD *)(v16 + 40) = v21;
      *(_OWORD *)(v16 + 56) = v22;
      *(_QWORD *)(a2 - 104) = v40;
      *(__n128 *)(a2 - 64) = v43;
      *(_OWORD *)(a2 - 48) = v44;
      *(_OWORD *)(a2 - 32) = v45;
      *(_OWORD *)(a2 - 16) = v46;
      result = v41;
      *(__n128 *)(a2 - 96) = v41;
      *(_OWORD *)(a2 - 80) = v42;
      v25 = v16 - a1 + 104;
      if (v25 >= 105)
      {
        v26 = (v25 / 0x68uLL - 2) >> 1;
        v27 = a1 + 104 * v26;
        if (sub_22368D350(a3, v27, v16))
        {
          v47 = *(_QWORD *)v16;
          v28 = *v19;
          v49 = *(_OWORD *)(v16 + 24);
          v48 = v28;
          v29 = *(_OWORD *)(v16 + 40);
          v30 = *(_OWORD *)(v16 + 56);
          v31 = *(_OWORD *)(v16 + 72);
          v53 = *(_OWORD *)(v16 + 88);
          v52 = v31;
          v51 = v30;
          v50 = v29;
          do
          {
            v32 = v27;
            *(_QWORD *)v16 = *(_QWORD *)v27;
            v33 = *(_OWORD *)(v27 + 8);
            *(_OWORD *)(v16 + 24) = *(_OWORD *)(v27 + 24);
            *(_OWORD *)(v16 + 8) = v33;
            result = *(__n128 *)(v27 + 40);
            v34 = *(_OWORD *)(v27 + 56);
            v35 = *(_OWORD *)(v27 + 72);
            *(_OWORD *)(v16 + 88) = *(_OWORD *)(v27 + 88);
            *(_OWORD *)(v16 + 72) = v35;
            *(_OWORD *)(v16 + 56) = v34;
            *(__n128 *)(v16 + 40) = result;
            if (!v26)
              break;
            v26 = (v26 - 1) >> 1;
            v27 = a1 + 104 * v26;
            v16 = v32;
          }
          while ((sub_22368D350(a3, v27, (uint64_t)&v47) & 1) != 0);
          *(_QWORD *)v32 = v47;
          v36 = v51;
          *(_OWORD *)(v32 + 40) = v50;
          *(_OWORD *)(v32 + 56) = v36;
          v37 = v53;
          *(_OWORD *)(v32 + 72) = v52;
          *(_OWORD *)(v32 + 88) = v37;
          result.n128_u64[0] = v48.n128_u64[0];
          v38 = v49;
          *(__n128 *)(v32 + 8) = v48;
          *(_OWORD *)(v32 + 24) = v38;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22368EC10(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v27;
  _QWORD *v28;

  v3 = *result;
  v4 = result[1];
  v5 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *result) >> 3);
  if (a3 + 1 < v5)
    v6 = a3 + 1;
  else
    v6 = 0;
  while (*(_QWORD *)(v3 + 104 * v6 + 64) != a2)
  {
    if (v6 + 1 < v5)
      ++v6;
    else
      v6 = 0;
  }
  if (v5 <= 1)
    v7 = 1;
  else
    v7 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *result) >> 3);
  if (v4 != v3)
  {
    v8 = *(_QWORD **)(v3 + 104 * a3 + 8);
    v9 = v8;
    v10 = 1;
    while (1)
    {
      result = *(_QWORD **)(v3 + 104 * v6 + 8);
      if (result != v9 && (v10 & 1) == 0)
      {
        v11 = (_QWORD *)(v3 + 40);
        v12 = v7;
        v13 = (_QWORD *)(v3 + 40);
        v14 = v7;
        if ((uint64_t)v9 > (uint64_t)v8)
        {
          do
          {
            v15 = *(v13 - 4);
            if (v15 >= (uint64_t)v8 && v15 < (uint64_t)v9)
              ++*v13;
            v13 += 13;
            --v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v17 = *(v11 - 4);
            if (v17 >= (uint64_t)v8 || v17 < (uint64_t)v9)
              ++*v11;
            v11 += 13;
            --v12;
          }
          while (v12);
        }
        v19 = (_QWORD *)(v3 + 48);
        v20 = v7;
        v21 = (_QWORD *)(v3 + 48);
        v22 = v7;
        if ((uint64_t)v9 > (uint64_t)v8)
        {
          do
          {
            v23 = *(v21 - 5);
            if (v23 > (uint64_t)v8 && v23 <= (uint64_t)v9)
              ++*v21;
            v21 += 13;
            --v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v25 = *(v19 - 5);
            if (v25 > (uint64_t)v8 || v25 <= (uint64_t)v9)
              ++*v19;
            v19 += 13;
            --v20;
          }
          while (v20);
        }
      }
      if (v6 == a3)
        break;
      v27 = *(_DWORD *)(v3 + 104 * v6 + 36);
      if (v27)
        v28 = v8;
      else
        v28 = result;
      if (!v27)
        v10 = 1;
      if (v27 == 1)
        v10 = 0;
      else
        v8 = v28;
      if (v6 + 1 < v5)
        ++v6;
      else
        v6 = 0;
      v9 = result;
      if (*(_QWORD *)(v3 + 104 * v6 + 64) != a2)
      {
        do
        {
          if (v6 + 1 < v5)
            ++v6;
          else
            v6 = 0;
        }
        while (*(_QWORD *)(v3 + 104 * v6 + 64) != a2);
        v9 = result;
      }
    }
  }
  return result;
}

uint64_t sub_22368EE0C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;

  v1 = *a1;
  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = v3 / 104;
  v8 = v7 + 1;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  v10 = v1 + 36;
  do
  {
    v12 = *(_QWORD *)(v10 - 28);
    if (v12 > v6)
      v6 = *(_QWORD *)(v10 - 28);
    if (*(_DWORD *)v10 == 1 && *(_QWORD *)(v10 + 12) && *(_QWORD *)(v10 + 4) == 0)
      v8 = v12 + 1;
    if (v4)
      v11 = 0;
    else
      v11 = v12 == v8;
    if (v11)
      v4 = v5;
    ++v5;
    v10 += 104;
  }
  while (v9 != v5);
  v14 = 0;
  result = 0;
  v16 = v6 + 1;
  do
  {
    if (v4 + 1 == v7)
      v18 = 0;
    else
      v18 = v4 + 1;
    v17 = *(_QWORD *)(v1 + 104 * v4 + 8);
    if (v17 == v14)
    {
      v17 = v14;
    }
    else
    {
      if (v17 == v16)
      {
        ++result;
        v16 = v6 + 1;
      }
      if (*(_DWORD *)(v1 + 104 * v4 + 36) == 1)
      {
        v19 = v1 + 104 * v4;
        v21 = *(_QWORD *)(v19 + 40);
        v20 = *(_QWORD *)(v19 + 48);
        if (v17 < v6)
          v22 = v17 + 1;
        else
          v22 = 0;
        if (v21)
          v23 = 1;
        else
          v23 = v20 == 0;
        if (!v23)
          v16 = v22;
      }
    }
    *(_QWORD *)(v1 + 104 * v4 + 16) = result;
    v4 = v18;
    v14 = v17;
    --v9;
  }
  while (v9);
  return result;
}

uint64_t sub_22368EF38(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = *a1;
  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = v3 / 104;
  v8 = v7 + 1;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  v10 = v1 + 36;
  do
  {
    v12 = *(_QWORD *)(v10 - 28);
    if (v12 > v6)
      v6 = *(_QWORD *)(v10 - 28);
    if (*(_DWORD *)v10 == 1 && *(_QWORD *)(v10 + 12) > 1uLL && *(_QWORD *)(v10 + 4) < 2uLL)
      v8 = v12 + 1;
    if (v4)
      v11 = 0;
    else
      v11 = v12 == v8;
    if (v11)
      v4 = v5;
    ++v5;
    v10 += 104;
  }
  while (v9 != v5);
  v14 = 0;
  result = 0;
  v16 = v6 + 1;
  do
  {
    if (v4 + 1 == v7)
      v18 = 0;
    else
      v18 = v4 + 1;
    v17 = *(_QWORD *)(v1 + 104 * v4 + 8);
    if (v17 == v14)
    {
      v17 = v14;
    }
    else
    {
      if (v17 == v16)
      {
        ++result;
        v16 = v6 + 1;
      }
      if (*(_DWORD *)(v1 + 104 * v4 + 36) == 1)
      {
        v19 = v1 + 104 * v4;
        v21 = *(_QWORD *)(v19 + 40);
        v20 = *(_QWORD *)(v19 + 48);
        if (v17 < v6)
          v22 = v17 + 1;
        else
          v22 = 0;
        if (v21 <= 1 && v20 >= 2)
          v16 = v22;
      }
    }
    *(_QWORD *)(v1 + 104 * v4 + 16) = result;
    v4 = v18;
    v14 = v17;
    --v9;
  }
  while (v9);
  return result;
}

void sub_22368F064(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_22368F064(a1, *a2);
    sub_22368F064(a1, a2[1]);
    v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_QWORD *sub_22368F0B4(uint64_t *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  void **v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v59;
  uint64_t **v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;

  v1 = a1;
  v2 = a1 + 4;
  v3 = (uint64_t **)(a1 + 5);
  sub_223690B10((uint64_t)(a1 + 4), (_QWORD *)a1[5]);
  v1[4] = (uint64_t)v3;
  *v3 = 0;
  v61 = v1;
  v4 = (_QWORD *)v1[8];
  v1 += 8;
  *(v1 - 2) = 0;
  sub_223690B5C((uint64_t)(v1 - 1), v4);
  *(v1 - 1) = (uint64_t)v1;
  *v1 = 0;
  v1[1] = 0;
  v5 = (_QWORD *)*(v1 - 6);
  if (v5[5])
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(v5[1] + (((unint64_t)(v5[4] + v6) >> 1) & 0x7FFFFFFFFFFFFFF8))
         + 368 * ((*((_DWORD *)v5 + 8) + (_DWORD)v6) & 0xF);
      if (!*(_BYTE *)(v7 + 24))
        break;
LABEL_4:
      if ((unint64_t)++v6 >= v5[5])
        goto LABEL_93;
    }
    v8 = (_QWORD *)(v7 + 32);
    v62 = (_QWORD *)(v7 + 368);
LABEL_12:
    v9 = v8[1];
    v10 = v8[2];
    v11 = v8[3];
    v12 = v3;
    v13 = v3;
    v14 = *v3;
    if (!*v3)
      goto LABEL_27;
    while (1)
    {
      while (1)
      {
        v13 = v14;
        v15 = v14[4];
        if (v9 == v15)
          break;
        if (v9 >= v15)
        {
          if (v15 >= v9)
            goto LABEL_52;
          goto LABEL_25;
        }
LABEL_14:
        v14 = (uint64_t *)*v13;
        v12 = (uint64_t **)v13;
        if (!*v13)
          goto LABEL_27;
      }
      v16 = v13[5];
      if (v10 != v16)
      {
        if (v10 >= v16)
        {
          if (v16 >= v10)
            goto LABEL_52;
          goto LABEL_25;
        }
        goto LABEL_14;
      }
      v17 = v13[6];
      if (v11 < v17)
        goto LABEL_14;
      if (v17 >= v11)
        goto LABEL_52;
LABEL_25:
      v14 = (uint64_t *)v13[1];
      if (!v14)
      {
        v12 = (uint64_t **)(v13 + 1);
LABEL_27:
        v18 = v3;
        v19 = (_QWORD **)v2;
        v20 = v13;
        v13 = operator new(0x58uLL);
        v13[4] = v9;
        v13[5] = v10;
        v13[6] = v11;
        v13[7] = -1;
        v13[10] = 0;
        v13[9] = 0;
        v13[8] = v13 + 9;
        *v13 = 0;
        v13[1] = 0;
        v13[2] = v20;
        v2 = v19;
        *v12 = v13;
        v21 = (_QWORD *)**v19;
        v22 = v13;
        if (v21)
        {
          *v19 = v21;
          v22 = *v12;
        }
        v3 = v18;
        v23 = *v18;
        v24 = v22 == *v18;
        *((_BYTE *)v22 + 24) = v24;
        if (!v24)
        {
          do
          {
            v25 = v22[2];
            if (*(_BYTE *)(v25 + 24))
              break;
            v26 = *(uint64_t **)(v25 + 16);
            v27 = *v26;
            if (*v26 == v25)
            {
              v30 = v26[1];
              if (!v30 || (v31 = *(unsigned __int8 *)(v30 + 24), v28 = (_BYTE *)(v30 + 24), v31))
              {
                if (*(uint64_t **)v25 == v22)
                {
                  *(_BYTE *)(v25 + 24) = 1;
                  *((_BYTE *)v26 + 24) = 0;
                  v34 = *(_QWORD *)(v25 + 8);
                  *v26 = v34;
                  if (v34)
                    goto LABEL_44;
                }
                else
                {
                  v32 = *(uint64_t **)(v25 + 8);
                  v33 = *v32;
                  *(_QWORD *)(v25 + 8) = *v32;
                  if (v33)
                  {
                    *(_QWORD *)(v33 + 16) = v25;
                    v26 = *(uint64_t **)(v25 + 16);
                  }
                  v32[2] = (uint64_t)v26;
                  *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v32;
                  *v32 = v25;
                  *(_QWORD *)(v25 + 16) = v32;
                  v26 = (uint64_t *)v32[2];
                  v25 = *v26;
                  *((_BYTE *)v32 + 24) = 1;
                  *((_BYTE *)v26 + 24) = 0;
                  v34 = *(_QWORD *)(v25 + 8);
                  *v26 = v34;
                  if (v34)
LABEL_44:
                    *(_QWORD *)(v34 + 16) = v26;
                }
                *(_QWORD *)(v25 + 16) = v26[2];
                *(_QWORD *)(v26[2] + 8 * (*(_QWORD *)v26[2] != (_QWORD)v26)) = v25;
                *(_QWORD *)(v25 + 8) = v26;
LABEL_50:
                v26[2] = v25;
                break;
              }
            }
            else if (!v27 || (v29 = *(unsigned __int8 *)(v27 + 24), v28 = (_BYTE *)(v27 + 24), v29))
            {
              if (*(uint64_t **)v25 == v22)
              {
                v55 = v22[1];
                *(_QWORD *)v25 = v55;
                if (v55)
                {
                  *(_QWORD *)(v55 + 16) = v25;
                  v26 = *(uint64_t **)(v25 + 16);
                }
                v22[2] = (uint64_t)v26;
                *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v22;
                v22[1] = v25;
                *(_QWORD *)(v25 + 16) = v22;
                v26 = (uint64_t *)v22[2];
                *((_BYTE *)v22 + 24) = 1;
                *((_BYTE *)v26 + 24) = 0;
                v25 = v26[1];
                v35 = *(uint64_t **)v25;
                v26[1] = *(_QWORD *)v25;
                if (v35)
LABEL_48:
                  v35[2] = (uint64_t)v26;
              }
              else
              {
                *(_BYTE *)(v25 + 24) = 1;
                *((_BYTE *)v26 + 24) = 0;
                v25 = v26[1];
                v35 = *(uint64_t **)v25;
                v26[1] = *(_QWORD *)v25;
                if (v35)
                  goto LABEL_48;
              }
              *(_QWORD *)(v25 + 16) = v26[2];
              *(_QWORD *)(v26[2] + 8 * (*(_QWORD *)v26[2] != (_QWORD)v26)) = v25;
              *(_QWORD *)v25 = v26;
              goto LABEL_50;
            }
            *(_BYTE *)(v25 + 24) = 1;
            v22 = v26;
            *((_BYTE *)v26 + 24) = v26 == v23;
            *v28 = 1;
          }
          while (v26 != v23);
        }
        ++v61[6];
LABEL_52:
        v37 = (void **)(v13 + 9);
        v36 = (_QWORD *)v13[9];
        v38 = v13 + 9;
        v39 = v13 + 9;
        if (v36)
        {
          while (1)
          {
            while (1)
            {
              v39 = v36;
              v40 = v36[4];
              if (v6 >= v40)
                break;
              v36 = (_QWORD *)*v39;
              v38 = v39;
              if (!*v39)
                goto LABEL_59;
            }
            if (v40 >= v6)
              break;
            v36 = (_QWORD *)v39[1];
            if (!v36)
            {
              v38 = v39 + 1;
              goto LABEL_59;
            }
          }
        }
        else
        {
LABEL_59:
          v41 = operator new(0x28uLL);
          v41[4] = v6;
          *v41 = 0;
          v41[1] = 0;
          v41[2] = v39;
          *v38 = v41;
          v42 = *(_QWORD *)v13[8];
          if (v42)
          {
            v13[8] = v42;
            v41 = (_QWORD *)*v38;
          }
          v43 = *v37;
          v24 = v41 == *v37;
          *((_BYTE *)v41 + 24) = v24;
          if (!v24)
          {
            do
            {
              v44 = v41[2];
              if (*(_BYTE *)(v44 + 24))
                break;
              v45 = *(_BYTE **)(v44 + 16);
              v46 = *(_QWORD *)v45;
              if (*(_QWORD *)v45 == v44)
              {
                v49 = *((_QWORD *)v45 + 1);
                if (!v49 || (v50 = *(unsigned __int8 *)(v49 + 24), v47 = (_BYTE *)(v49 + 24), v50))
                {
                  if (*(_QWORD **)v44 == v41)
                  {
                    *(_BYTE *)(v44 + 24) = 1;
                    v45[24] = 0;
                    v53 = *(_QWORD *)(v44 + 8);
                    *(_QWORD *)v45 = v53;
                    if (v53)
                      goto LABEL_76;
                  }
                  else
                  {
                    v51 = *(uint64_t **)(v44 + 8);
                    v52 = *v51;
                    *(_QWORD *)(v44 + 8) = *v51;
                    if (v52)
                    {
                      *(_QWORD *)(v52 + 16) = v44;
                      v45 = *(_BYTE **)(v44 + 16);
                    }
                    v51[2] = (uint64_t)v45;
                    *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * (**(_QWORD **)(v44 + 16) != v44)) = v51;
                    *v51 = v44;
                    *(_QWORD *)(v44 + 16) = v51;
                    v45 = (_BYTE *)v51[2];
                    v44 = *(_QWORD *)v45;
                    *((_BYTE *)v51 + 24) = 1;
                    v45[24] = 0;
                    v53 = *(_QWORD *)(v44 + 8);
                    *(_QWORD *)v45 = v53;
                    if (v53)
LABEL_76:
                      *(_QWORD *)(v53 + 16) = v45;
                  }
                  *(_QWORD *)(v44 + 16) = *((_QWORD *)v45 + 2);
                  *(_QWORD *)(*((_QWORD *)v45 + 2) + 8 * (**((_QWORD **)v45 + 2) != (_QWORD)v45)) = v44;
                  *(_QWORD *)(v44 + 8) = v45;
LABEL_9:
                  *((_QWORD *)v45 + 2) = v44;
                  break;
                }
              }
              else if (!v46 || (v48 = *(unsigned __int8 *)(v46 + 24), v47 = (_BYTE *)(v46 + 24), v48))
              {
                if (*(_QWORD **)v44 == v41)
                {
                  v56 = v41[1];
                  *(_QWORD *)v44 = v56;
                  if (v56)
                  {
                    *(_QWORD *)(v56 + 16) = v44;
                    v45 = *(_BYTE **)(v44 + 16);
                  }
                  v41[2] = v45;
                  *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * (**(_QWORD **)(v44 + 16) != v44)) = v41;
                  v41[1] = v44;
                  *(_QWORD *)(v44 + 16) = v41;
                  v45 = (_BYTE *)v41[2];
                  *((_BYTE *)v41 + 24) = 1;
                  v45[24] = 0;
                  v44 = *((_QWORD *)v45 + 1);
                  v54 = *(_QWORD **)v44;
                  *((_QWORD *)v45 + 1) = *(_QWORD *)v44;
                  if (!v54)
                    goto LABEL_8;
                }
                else
                {
                  *(_BYTE *)(v44 + 24) = 1;
                  v45[24] = 0;
                  v44 = *((_QWORD *)v45 + 1);
                  v54 = *(_QWORD **)v44;
                  *((_QWORD *)v45 + 1) = *(_QWORD *)v44;
                  if (!v54)
                    goto LABEL_8;
                }
                v54[2] = v45;
LABEL_8:
                *(_QWORD *)(v44 + 16) = *((_QWORD *)v45 + 2);
                *(_QWORD *)(*((_QWORD *)v45 + 2) + 8 * (**((_QWORD **)v45 + 2) != (_QWORD)v45)) = v44;
                *(_QWORD *)v44 = v45;
                goto LABEL_9;
              }
              *(_BYTE *)(v44 + 24) = 1;
              v41 = v45;
              v45[24] = v45 == (_BYTE *)v43;
              *v47 = 1;
            }
            while (v45 != (_BYTE *)v43);
          }
          ++v13[10];
        }
        v8 += 21;
        if (v8 == v62)
        {
          v5 = (_QWORD *)v61[2];
          goto LABEL_4;
        }
        goto LABEL_12;
      }
    }
  }
LABEL_93:
  v63 = 1;
  v57 = (uint64_t *)*v2;
  if ((uint64_t **)*v2 != v3)
  {
    do
    {
      sub_22368F878((uint64_t)v61, &v63, v57 + 4, v57 + 7, -1);
      v59 = (uint64_t *)v57[1];
      if (v59)
      {
        do
        {
          v60 = (uint64_t **)v59;
          v59 = (uint64_t *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (uint64_t **)v57[2];
          v24 = *v60 == v57;
          v57 = (uint64_t *)v60;
        }
        while (!v24);
      }
      v57 = (uint64_t *)v60;
    }
    while (v60 != v3);
  }
  sub_22368FB78(v61);
  sub_22368FCD0(v61);
  sub_223690608((uint64_t)v61);
  return sub_2236908CC(v61);
}

void sub_22368F728(uint64_t a1, _QWORD *a2, unint64_t *a3, _BYTE *a4)
{
  _QWORD *v4;
  unint64_t i;
  signed int v10;
  uint64_t v11;
  int v12;

  v4 = *(_QWORD **)(a1 + 72);
  if (v4[5])
  {
    for (i = 0; i < v4[5]; ++i)
    {
      v11 = *(_QWORD *)(v4[1] + (((i + v4[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 368 * (((_DWORD)i + *((_DWORD *)v4 + 8)) & 0xF);
      if (*(_BYTE *)(v11 + 24))
        continue;
      v12 = *(_DWORD *)(v11 + 32);
      if (v12 == 4)
      {
        if (*(_DWORD *)(v11 + 200) == 4)
        {
          v10 = *(float *)(v11 + 104) > *(float *)(v11 + 272);
          goto LABEL_4;
        }
      }
      else if (v12 == 3 && *(_DWORD *)(v11 + 200) == 3)
      {
        continue;
      }
      sub_223690F70(a1, v11, i, 0, a2, a3, a4);
      v10 = 1;
LABEL_4:
      sub_223690F70(a1, v11, i, v10, a2, a3, a4);
      v4 = *(_QWORD **)(a1 + 72);
    }
  }
}

uint64_t sub_22368F840(uint64_t a1)
{
  sub_223690B5C(a1 + 56, *(_QWORD **)(a1 + 64));
  sub_223690B10(a1 + 32, *(_QWORD **)(a1 + 40));
  return a1;
}

uint64_t sub_22368F878(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if (*a4 <= 0)
  {
    v5 = a5;
    v8 = result;
    if (a5 == -1)
      v5 = (*a2)++;
    *a4 = v5;
    v9 = (uint64_t *)a4[1];
    v10 = a4 + 2;
    if (v9 != a4 + 2)
    {
      v11 = (_QWORD *)(result + 40);
      do
      {
        v12 = *(_QWORD *)(v8 + 16);
        v13 = *(_QWORD *)(v12 + 32) + v9[4];
        v14 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + ((v13 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v13 & 0xF);
        if (!*(_BYTE *)(v14 + 24))
        {
          v15 = *(_DWORD *)(v14 + 32);
          v16 = *(_DWORD *)(v14 + 200);
          v17 = v15 == 3 && v16 == 3;
          if (!v17)
          {
            if (*(uint64_t *)(v14 + 16) <= 0)
            {
              if (v15 == 1)
              {
                if (v16 != 1)
                  goto LABEL_28;
              }
              else if (v15 != 2 || v16 != 2)
              {
LABEL_28:
                v20 = *(_QWORD *)(v14 + 40);
                v19 = *(_QWORD *)(v14 + 48);
                v21 = *(_QWORD *)(v14 + 56);
                v54 = v20;
                v55 = v19;
                v56 = v21;
                v22 = a3[1];
                v23 = a3[2];
                v24 = *a3;
                if (v20 == *a3 && v21 == v23 && v19 == v22)
                {
                  v22 = v19;
                  v23 = v21;
                  v24 = v20;
                }
                else
                {
                  v27 = (_QWORD *)*v11;
                  if (*v11)
                  {
                    v28 = (_QWORD *)(v8 + 40);
                    do
                    {
                      v32 = v27[4];
                      v33 = v32 < v20;
                      if (v32 == v20)
                      {
                        v34 = v27[5];
                        v33 = v34 < v19;
                        if (v34 == v19)
                          v33 = v27[6] < v21;
                      }
                      v29 = v33;
                      v30 = v29 == 0;
                      if (v29)
                        v31 = v27 + 1;
                      else
                        v31 = v27;
                      if (v30)
                        v28 = v27;
                      v27 = (_QWORD *)*v31;
                    }
                    while (*v31);
                    if (v28 != v11)
                    {
                      v46 = v28[4];
                      v47 = v20 < v46;
                      if (v20 == v46 && (v48 = v28[5], v47 = v19 < v48, v19 == v48))
                      {
                        if (v21 >= v28[6])
                        {
LABEL_87:
                          result = sub_22368F878(v8, a2, &v54, v28 + 7, v5);
                          v22 = a3[1];
                          v23 = a3[2];
                          v24 = *a3;
                        }
                      }
                      else if (!v47)
                      {
                        goto LABEL_87;
                      }
                    }
                  }
                }
                v36 = *(_QWORD *)(v14 + 208);
                v35 = *(_QWORD *)(v14 + 216);
                v37 = *(_QWORD *)(v14 + 224);
                v54 = v36;
                v55 = v35;
                v56 = v37;
                if (v36 != v24 || v37 != v23 || v35 != v22)
                {
                  v38 = (_QWORD *)*v11;
                  if (*v11)
                  {
                    v39 = (_QWORD *)(v8 + 40);
                    do
                    {
                      v43 = v38[4];
                      v44 = v43 < v36;
                      if (v43 == v36)
                      {
                        v45 = v38[5];
                        v44 = v45 < v35;
                        if (v45 == v35)
                          v44 = v38[6] < v37;
                      }
                      v40 = v44;
                      v41 = v40 == 0;
                      if (v40)
                        v42 = v38 + 1;
                      else
                        v42 = v38;
                      if (v41)
                        v39 = v38;
                      v38 = (_QWORD *)*v42;
                    }
                    while (*v42);
                    if (v39 != v11)
                    {
                      v49 = v39[4];
                      v50 = v36 < v49;
                      if (v36 == v49)
                      {
                        v51 = v39[5];
                        v50 = v35 < v51;
                        if (v35 == v51)
                          v50 = v37 < v39[6];
                      }
                      if (!v50)
                        result = sub_22368F878(v8, a2, &v54, v39 + 7, v5);
                    }
                  }
                }
              }
            }
            else if (v15 == 1)
            {
              if (v16 != 2)
                goto LABEL_28;
            }
            else if (v15 != 2 || (v16 - 1) >= 2)
            {
              goto LABEL_28;
            }
          }
        }
        v52 = (uint64_t *)v9[1];
        if (v52)
        {
          do
          {
            v53 = v52;
            v52 = (uint64_t *)*v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            v53 = (uint64_t *)v9[2];
            v17 = *v53 == (_QWORD)v9;
            v9 = v53;
          }
          while (!v17);
        }
        v9 = v53;
      }
      while (v53 != v10);
    }
  }
  return result;
}

_QWORD *sub_22368FB78(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (_QWORD *)result[4];
  if (v1 != result + 5)
  {
    do
    {
      v2 = (_QWORD *)v1[8];
      if (v2 != v1 + 9)
      {
        v3 = result[2];
        v4 = *(_QWORD *)(v3 + 32);
        v5 = *(_QWORD *)(v3 + 8);
        do
        {
          v6 = *(_QWORD *)(v5 + (((unint64_t)(v2[4] + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
             + 368 * ((*((_DWORD *)v2 + 8) + (_DWORD)v4) & 0xF);
          if (!*(_BYTE *)(v6 + 24))
          {
            v7 = *(_DWORD *)(v6 + 32) == 3 && *(_DWORD *)(v6 + 200) == 3;
            if (!v7)
            {
              v8 = v1[4];
              if (*(_QWORD *)(v6 + 40) == v8 && *(_QWORD *)(v6 + 56) == v1[6] && *(_QWORD *)(v6 + 48) == v1[5])
                *(_QWORD *)(v6 + 176) = v1[7];
              if (*(_QWORD *)(v6 + 208) == v8 && *(_QWORD *)(v6 + 224) == v1[6] && *(_QWORD *)(v6 + 216) == v1[5])
                *(_QWORD *)(v6 + 344) = v1[7];
            }
          }
          v9 = (_QWORD *)v2[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v2[2];
              v7 = *v10 == (_QWORD)v2;
              v2 = v10;
            }
            while (!v7);
          }
          v2 = v10;
        }
        while (v10 != v1 + 9);
      }
      v11 = (_QWORD *)v1[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v1[2];
          v7 = *v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v7);
      }
      v1 = v12;
    }
    while (v12 != result + 5);
  }
  return result;
}

uint64_t *sub_22368FCD0(uint64_t *result)
{
  _QWORD *v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t **v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v34;
  uint64_t **v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t **v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v60;
  uint64_t **v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t **v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t **v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  char *v81;
  uint64_t **v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;

  v1 = (_QWORD *)result[2];
  if (v1[5])
  {
    v2 = result;
    v3 = 0;
    v4 = (uint64_t **)(result + 8);
    do
    {
      v6 = (_QWORD *)(*(_QWORD *)(v1[1] + (((v1[4] + v3) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 368 * ((*((_DWORD *)v1 + 8) + (_DWORD)v3) & 0xF));
      v7 = v6[2];
      if (v7 > 0)
        v8 = -v7;
      else
        v8 = v3;
      v9 = v6[22];
      if (v9 != -1)
      {
        v10 = *v4;
        v11 = v4;
        v12 = (char *)v4;
        if (*v4)
        {
          v13 = *v4;
          while (1)
          {
            while (1)
            {
              v12 = (char *)v13;
              v14 = v13[4];
              if (v9 >= v14)
                break;
              v13 = *(uint64_t **)v12;
              v11 = (uint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_17;
            }
            if (v14 >= v9)
              break;
            v13 = (uint64_t *)*((_QWORD *)v12 + 1);
            if (!v13)
            {
              v11 = (uint64_t **)(v12 + 8);
              goto LABEL_17;
            }
          }
        }
        else
        {
LABEL_17:
          v15 = v12;
          v12 = (char *)operator new(0x68uLL);
          *((_QWORD *)v12 + 4) = v9;
          *(_OWORD *)(v12 + 40) = xmmword_2245F5400;
          *((_QWORD *)v12 + 8) = 0;
          *((_QWORD *)v12 + 7) = v12 + 64;
          *((_QWORD *)v12 + 12) = 0;
          *((_QWORD *)v12 + 11) = 0;
          *((_QWORD *)v12 + 9) = 0;
          *((_QWORD *)v12 + 10) = v12 + 88;
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 2) = v15;
          *v11 = (uint64_t *)v12;
          v16 = *(_QWORD *)v2[7];
          v17 = (uint64_t *)v12;
          if (v16)
          {
            v2[7] = v16;
            v17 = *v11;
          }
          result = sub_2231A9A8C((uint64_t *)v2[8], v17);
          v10 = (uint64_t *)v2[8];
          ++v2[9];
        }
        *((_QWORD *)v12 + 5) = v9;
        v18 = v6[22];
        v19 = v4;
        v20 = (char *)v4;
        if (v10)
        {
          while (1)
          {
            while (1)
            {
              v20 = (char *)v10;
              v21 = v10[4];
              if (v18 >= v21)
                break;
              v10 = *(uint64_t **)v20;
              v19 = (uint64_t **)v20;
              if (!*(_QWORD *)v20)
                goto LABEL_27;
            }
            if (v21 >= v18)
              break;
            v10 = (uint64_t *)*((_QWORD *)v20 + 1);
            if (!v10)
            {
              v19 = (uint64_t **)(v20 + 8);
              goto LABEL_27;
            }
          }
        }
        else
        {
LABEL_27:
          v22 = v20;
          v20 = (char *)operator new(0x68uLL);
          *((_QWORD *)v20 + 4) = v18;
          *(_OWORD *)(v20 + 40) = xmmword_2245F5400;
          *((_QWORD *)v20 + 8) = 0;
          *((_QWORD *)v20 + 7) = v20 + 64;
          *((_QWORD *)v20 + 12) = 0;
          *((_QWORD *)v20 + 11) = 0;
          *((_QWORD *)v20 + 9) = 0;
          *((_QWORD *)v20 + 10) = v20 + 88;
          *(_QWORD *)v20 = 0;
          *((_QWORD *)v20 + 1) = 0;
          *((_QWORD *)v20 + 2) = v22;
          *v19 = (uint64_t *)v20;
          v23 = *(_QWORD *)v2[7];
          v24 = (uint64_t *)v20;
          if (v23)
          {
            v2[7] = v23;
            v24 = *v19;
          }
          result = sub_2231A9A8C((uint64_t *)v2[8], v24);
          ++v2[9];
        }
        v26 = (uint64_t **)(v20 + 64);
        v25 = (uint64_t *)*((_QWORD *)v20 + 8);
        if (v25)
        {
          while (1)
          {
            while (1)
            {
              v27 = (uint64_t **)v25;
              v28 = v25[4];
              if (v8 >= v28)
                break;
              v25 = *v27;
              v26 = v27;
              if (!*v27)
                goto LABEL_37;
            }
            if (v28 >= v8)
              break;
            v25 = v27[1];
            if (!v25)
            {
              v26 = v27 + 1;
              goto LABEL_37;
            }
          }
        }
        else
        {
          v27 = (uint64_t **)(v20 + 64);
LABEL_37:
          v29 = (uint64_t *)operator new(0x28uLL);
          v29[4] = v8;
          *v29 = 0;
          v29[1] = 0;
          v29[2] = (uint64_t)v27;
          *v26 = v29;
          v30 = **((_QWORD **)v20 + 7);
          if (v30)
          {
            *((_QWORD *)v20 + 7) = v30;
            v31 = *v26;
          }
          else
          {
            v31 = v29;
          }
          result = sub_2231A9A8C(*((uint64_t **)v20 + 8), v31);
          ++*((_QWORD *)v20 + 9);
        }
      }
      v32 = v6[43];
      if (v32 != -1 && v6[22] != v32)
      {
        v34 = *v4;
        v35 = v4;
        v36 = (char *)v4;
        if (*v4)
        {
          v37 = *v4;
          while (1)
          {
            while (1)
            {
              v36 = (char *)v37;
              v38 = v37[4];
              if (v32 >= v38)
                break;
              v37 = *(uint64_t **)v36;
              v35 = (uint64_t **)v36;
              if (!*(_QWORD *)v36)
                goto LABEL_52;
            }
            if (v38 >= v32)
              break;
            v37 = (uint64_t *)*((_QWORD *)v36 + 1);
            if (!v37)
            {
              v35 = (uint64_t **)(v36 + 8);
              goto LABEL_52;
            }
          }
        }
        else
        {
LABEL_52:
          v39 = v36;
          v36 = (char *)operator new(0x68uLL);
          *((_QWORD *)v36 + 4) = v32;
          *(_OWORD *)(v36 + 40) = xmmword_2245F5400;
          *((_QWORD *)v36 + 8) = 0;
          *((_QWORD *)v36 + 7) = v36 + 64;
          *((_QWORD *)v36 + 12) = 0;
          *((_QWORD *)v36 + 11) = 0;
          *((_QWORD *)v36 + 9) = 0;
          *((_QWORD *)v36 + 10) = v36 + 88;
          *(_QWORD *)v36 = 0;
          *((_QWORD *)v36 + 1) = 0;
          *((_QWORD *)v36 + 2) = v39;
          *v35 = (uint64_t *)v36;
          v40 = *(_QWORD *)v2[7];
          v41 = (uint64_t *)v36;
          if (v40)
          {
            v2[7] = v40;
            v41 = *v35;
          }
          result = sub_2231A9A8C((uint64_t *)v2[8], v41);
          v34 = (uint64_t *)v2[8];
          ++v2[9];
        }
        *((_QWORD *)v36 + 5) = v32;
        v42 = v6[43];
        v43 = v4;
        v44 = (char *)v4;
        if (v34)
        {
          while (1)
          {
            while (1)
            {
              v44 = (char *)v34;
              v45 = v34[4];
              if (v42 >= v45)
                break;
              v34 = *(uint64_t **)v44;
              v43 = (uint64_t **)v44;
              if (!*(_QWORD *)v44)
                goto LABEL_62;
            }
            if (v45 >= v42)
              break;
            v34 = (uint64_t *)*((_QWORD *)v44 + 1);
            if (!v34)
            {
              v43 = (uint64_t **)(v44 + 8);
              goto LABEL_62;
            }
          }
        }
        else
        {
LABEL_62:
          v46 = v44;
          v44 = (char *)operator new(0x68uLL);
          *((_QWORD *)v44 + 4) = v42;
          *(_OWORD *)(v44 + 40) = xmmword_2245F5400;
          *((_QWORD *)v44 + 8) = 0;
          *((_QWORD *)v44 + 7) = v44 + 64;
          *((_QWORD *)v44 + 12) = 0;
          *((_QWORD *)v44 + 11) = 0;
          *((_QWORD *)v44 + 9) = 0;
          *((_QWORD *)v44 + 10) = v44 + 88;
          *(_QWORD *)v44 = 0;
          *((_QWORD *)v44 + 1) = 0;
          *((_QWORD *)v44 + 2) = v46;
          *v43 = (uint64_t *)v44;
          v47 = *(_QWORD *)v2[7];
          v48 = (uint64_t *)v44;
          if (v47)
          {
            v2[7] = v47;
            v48 = *v43;
          }
          result = sub_2231A9A8C((uint64_t *)v2[8], v48);
          ++v2[9];
        }
        v50 = (uint64_t **)(v44 + 64);
        v49 = (uint64_t *)*((_QWORD *)v44 + 8);
        if (v49)
        {
          while (1)
          {
            while (1)
            {
              v51 = (uint64_t **)v49;
              v52 = v49[4];
              if (v8 >= v52)
                break;
              v49 = *v51;
              v50 = v51;
              if (!*v51)
                goto LABEL_72;
            }
            if (v52 >= v8)
              break;
            v49 = v51[1];
            if (!v49)
            {
              v50 = v51 + 1;
              goto LABEL_72;
            }
          }
        }
        else
        {
          v51 = (uint64_t **)(v44 + 64);
LABEL_72:
          v53 = (uint64_t *)operator new(0x28uLL);
          v53[4] = v8;
          *v53 = 0;
          v53[1] = 0;
          v53[2] = (uint64_t)v51;
          *v50 = v53;
          v54 = **((_QWORD **)v44 + 7);
          if (v54)
          {
            *((_QWORD *)v44 + 7) = v54;
            v55 = *v50;
          }
          else
          {
            v55 = v53;
          }
          result = sub_2231A9A8C(*((uint64_t **)v44 + 8), v55);
          ++*((_QWORD *)v44 + 9);
        }
      }
      v56 = v6[22];
      v57 = v6[43];
      if (v57 != -1 && v56 != -1 && v56 != v57)
      {
        v60 = *v4;
        v61 = v4;
        v62 = (char *)v4;
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              v62 = (char *)v60;
              v63 = v60[4];
              if (v56 >= v63)
                break;
              v60 = *(uint64_t **)v62;
              v61 = (uint64_t **)v62;
              if (!*(_QWORD *)v62)
                goto LABEL_90;
            }
            if (v63 >= v56)
              break;
            v60 = (uint64_t *)*((_QWORD *)v62 + 1);
            if (!v60)
            {
              v61 = (uint64_t **)(v62 + 8);
              goto LABEL_90;
            }
          }
        }
        else
        {
LABEL_90:
          v64 = v62;
          v62 = (char *)operator new(0x68uLL);
          *((_QWORD *)v62 + 4) = v56;
          *(_OWORD *)(v62 + 40) = xmmword_2245F5400;
          *((_QWORD *)v62 + 8) = 0;
          *((_QWORD *)v62 + 7) = v62 + 64;
          *((_QWORD *)v62 + 12) = 0;
          *((_QWORD *)v62 + 11) = 0;
          *((_QWORD *)v62 + 9) = 0;
          *((_QWORD *)v62 + 10) = v62 + 88;
          *(_QWORD *)v62 = 0;
          *((_QWORD *)v62 + 1) = 0;
          *((_QWORD *)v62 + 2) = v64;
          *v61 = (uint64_t *)v62;
          v65 = *(_QWORD *)v2[7];
          v66 = (uint64_t *)v62;
          if (v65)
          {
            v2[7] = v65;
            v66 = *v61;
          }
          result = sub_2231A9A8C((uint64_t *)v2[8], v66);
          ++v2[9];
          v57 = v6[43];
        }
        v68 = (uint64_t **)(v62 + 88);
        v67 = (char *)*((_QWORD *)v62 + 11);
        if (v67)
        {
          while (1)
          {
            while (1)
            {
              v69 = v67;
              v70 = *((_QWORD *)v67 + 4);
              if (v57 >= v70)
                break;
              v67 = *(char **)v69;
              v68 = (uint64_t **)v69;
              if (!*(_QWORD *)v69)
                goto LABEL_100;
            }
            if (v70 >= v57)
              break;
            v67 = (char *)*((_QWORD *)v69 + 1);
            if (!v67)
            {
              v68 = (uint64_t **)(v69 + 8);
              goto LABEL_100;
            }
          }
        }
        else
        {
          v69 = v62 + 88;
LABEL_100:
          v71 = v69;
          v69 = (char *)operator new(0x48uLL);
          *((_QWORD *)v69 + 4) = v57;
          *(_OWORD *)(v69 + 40) = 0u;
          *(_OWORD *)(v69 + 56) = 0u;
          *((_QWORD *)v69 + 6) = v69 + 56;
          *(_QWORD *)v69 = 0;
          *((_QWORD *)v69 + 1) = 0;
          *((_QWORD *)v69 + 2) = v71;
          *v68 = (uint64_t *)v69;
          v72 = **((_QWORD **)v62 + 10);
          v73 = (uint64_t *)v69;
          if (v72)
          {
            *((_QWORD *)v62 + 10) = v72;
            v73 = *v68;
          }
          result = sub_2231A9A8C(*((uint64_t **)v62 + 11), v73);
          ++*((_QWORD *)v62 + 12);
          v57 = v6[43];
        }
        v74 = *v4;
        v75 = v4;
        v76 = (char *)v4;
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              v76 = (char *)v74;
              v77 = v74[4];
              if (v57 >= v77)
                break;
              v74 = *(uint64_t **)v76;
              v75 = (uint64_t **)v76;
              if (!*(_QWORD *)v76)
                goto LABEL_110;
            }
            if (v77 >= v57)
              break;
            v74 = (uint64_t *)*((_QWORD *)v76 + 1);
            if (!v74)
            {
              v75 = (uint64_t **)(v76 + 8);
              goto LABEL_110;
            }
          }
        }
        else
        {
LABEL_110:
          v78 = v76;
          v76 = (char *)operator new(0x68uLL);
          *((_QWORD *)v76 + 4) = v57;
          *(_OWORD *)(v76 + 40) = xmmword_2245F5400;
          *((_QWORD *)v76 + 8) = 0;
          *((_QWORD *)v76 + 7) = v76 + 64;
          *((_QWORD *)v76 + 12) = 0;
          *((_QWORD *)v76 + 11) = 0;
          *((_QWORD *)v76 + 9) = 0;
          *((_QWORD *)v76 + 10) = v76 + 88;
          *(_QWORD *)v76 = 0;
          *((_QWORD *)v76 + 1) = 0;
          *((_QWORD *)v76 + 2) = v78;
          *v75 = (uint64_t *)v76;
          v79 = *(_QWORD *)v2[7];
          v80 = (uint64_t *)v76;
          if (v79)
          {
            v2[7] = v79;
            v80 = *v75;
          }
          result = sub_2231A9A8C((uint64_t *)v2[8], v80);
          ++v2[9];
        }
        v82 = (uint64_t **)(v76 + 88);
        v81 = (char *)*((_QWORD *)v76 + 11);
        v83 = v6[22];
        if (v81)
        {
          while (1)
          {
            while (1)
            {
              v84 = v81;
              v85 = *((_QWORD *)v81 + 4);
              if (v83 >= v85)
                break;
              v81 = *(char **)v84;
              v82 = (uint64_t **)v84;
              if (!*(_QWORD *)v84)
                goto LABEL_120;
            }
            if (v85 >= v83)
              break;
            v81 = (char *)*((_QWORD *)v84 + 1);
            if (!v81)
            {
              v82 = (uint64_t **)(v84 + 8);
              goto LABEL_120;
            }
          }
        }
        else
        {
          v84 = v76 + 88;
LABEL_120:
          v86 = v84;
          v84 = (char *)operator new(0x48uLL);
          *((_QWORD *)v84 + 4) = v83;
          *(_OWORD *)(v84 + 40) = 0u;
          *(_OWORD *)(v84 + 56) = 0u;
          *((_QWORD *)v84 + 6) = v84 + 56;
          *(_QWORD *)v84 = 0;
          *((_QWORD *)v84 + 1) = 0;
          *((_QWORD *)v84 + 2) = v86;
          *v82 = (uint64_t *)v84;
          v87 = **((_QWORD **)v76 + 10);
          v88 = (uint64_t *)v84;
          if (v87)
          {
            *((_QWORD *)v76 + 10) = v87;
            v88 = *v82;
          }
          result = sub_2231A9A8C(*((uint64_t **)v76 + 11), v88);
          ++*((_QWORD *)v76 + 12);
        }
        v90 = (uint64_t **)(v69 + 56);
        v89 = (uint64_t *)*((_QWORD *)v69 + 7);
        v91 = v89;
        if (v89)
        {
          do
          {
            v93 = v91[4];
            if (v8 >= v93)
            {
              if (v93 >= v8)
                goto LABEL_139;
              ++v91;
            }
            v91 = (uint64_t *)*v91;
          }
          while (v91);
          ++*((_QWORD *)v69 + 5);
          while (1)
          {
            while (1)
            {
              v92 = (uint64_t **)v89;
              v94 = v89[4];
              if (v8 >= v94)
                break;
              v89 = *v92;
              v90 = v92;
              if (!*v92)
                goto LABEL_135;
            }
            if (v94 >= v8)
              break;
            v89 = v92[1];
            if (!v89)
            {
              v90 = v92 + 1;
              goto LABEL_135;
            }
          }
        }
        else
        {
          ++*((_QWORD *)v69 + 5);
          v92 = (uint64_t **)(v69 + 56);
LABEL_135:
          v95 = (uint64_t *)operator new(0x28uLL);
          v95[4] = v8;
          *v95 = 0;
          v95[1] = 0;
          v95[2] = (uint64_t)v92;
          *v90 = v95;
          v96 = **((_QWORD **)v69 + 6);
          if (v96)
          {
            *((_QWORD *)v69 + 6) = v96;
            v97 = *v90;
          }
          else
          {
            v97 = v95;
          }
          result = sub_2231A9A8C(*((uint64_t **)v69 + 7), v97);
          ++*((_QWORD *)v69 + 8);
        }
LABEL_139:
        v99 = (uint64_t **)(v84 + 56);
        v98 = (uint64_t *)*((_QWORD *)v84 + 7);
        v100 = v98;
        if (v98)
        {
          do
          {
            v102 = v100[4];
            if (v8 >= v102)
            {
              if (v102 >= v8)
                goto LABEL_5;
              ++v100;
            }
            v100 = (uint64_t *)*v100;
          }
          while (v100);
          ++*((_QWORD *)v84 + 5);
          while (1)
          {
            while (1)
            {
              v101 = (uint64_t **)v98;
              v103 = v98[4];
              if (v8 >= v103)
                break;
              v98 = *v101;
              v99 = v101;
              if (!*v101)
                goto LABEL_151;
            }
            if (v103 >= v8)
              break;
            v98 = v101[1];
            if (!v98)
            {
              v99 = v101 + 1;
              goto LABEL_151;
            }
          }
        }
        else
        {
          ++*((_QWORD *)v84 + 5);
          v101 = (uint64_t **)(v84 + 56);
LABEL_151:
          v104 = (uint64_t *)operator new(0x28uLL);
          v104[4] = v8;
          *v104 = 0;
          v104[1] = 0;
          v104[2] = (uint64_t)v101;
          *v99 = v104;
          v105 = **((_QWORD **)v84 + 6);
          if (v105)
          {
            *((_QWORD *)v84 + 6) = v105;
            v5 = *v99;
          }
          else
          {
            v5 = v104;
          }
          result = sub_2231A9A8C(*((uint64_t **)v84 + 7), v5);
          ++*((_QWORD *)v84 + 8);
        }
      }
LABEL_5:
      ++v3;
      v1 = (_QWORD *)v2[2];
    }
    while (v3 < v1[5]);
  }
  return result;
}

uint64_t sub_223690608(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;

  v1 = result;
  v2 = *(_QWORD **)(result + 56);
  v3 = (_QWORD *)(result + 64);
  if (v2 != (_QWORD *)(result + 64))
  {
    do
    {
      v4 = v2[12];
      if (v4)
      {
        if (v4 == 1)
        {
          if (*(_QWORD *)(v2[10] + 40) < 2uLL)
            v5 = 1;
          else
            v5 = 2;
          goto LABEL_23;
        }
        v6 = (_QWORD *)v2[10];
        if (v6 != v2 + 11)
        {
          v7 = 0;
          v8 = 1;
          while (v6[5] == 1)
          {
            v9 = *(_QWORD *)(v6[6] + 32);
            if ((v8 & 1) == 0)
            {
              v10 = v7 == v9;
              v9 = v7;
              if (!v10)
                break;
            }
            v11 = (_QWORD *)v6[1];
            if (v11)
            {
              do
              {
                v12 = v11;
                v11 = (_QWORD *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v12 = (_QWORD *)v6[2];
                v10 = *v12 == (_QWORD)v6;
                v6 = v12;
              }
              while (!v10);
            }
            v8 = 0;
            v7 = v9;
            v6 = v12;
            if (v12 == v2 + 11)
              goto LABEL_22;
          }
          goto LABEL_24;
        }
      }
LABEL_22:
      v5 = 1;
LABEL_23:
      *((_DWORD *)v2 + 12) = v5;
LABEL_24:
      v13 = (_QWORD *)v2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v2[2];
          v10 = *v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v10);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
  v30 = 0;
LABEL_32:
  if (v30 < *(_QWORD *)(v1 + 72))
  {
    v15 = *(_QWORD **)(v1 + 56);
    if (v15 != v3)
    {
      v16 = 0;
      ++v30;
      while (1)
      {
        if (!*((_DWORD *)v15 + 12))
        {
          v17 = (_QWORD *)v15[10];
          if (v17 != v15 + 11)
          {
            v18 = 0;
            v19 = 1;
            while (1)
            {
              v20 = (_QWORD *)*v3;
              if (!*v3)
                goto LABEL_64;
              v21 = v17[4];
              v22 = v3;
              do
              {
                v23 = v20[4];
                v24 = v23 < v21;
                if (v23 >= v21)
                  v25 = v20;
                else
                  v25 = v20 + 1;
                if (!v24)
                  v22 = v20;
                v20 = (_QWORD *)*v25;
              }
              while (*v25);
              if (v22 == v3)
                goto LABEL_64;
              if (v21 < v22[4])
                goto LABEL_64;
              if (v17[5] != 1)
              {
                result = sub_223690BB4(v1, v15 + 5, v22 + 5);
                if (!(_DWORD)result)
                  goto LABEL_64;
              }
              if ((*((_DWORD *)v22 + 12) - 1) < 2)
                goto LABEL_55;
              if ((v19 & 1) != 0)
                break;
              if (v18 != *(_QWORD *)(v17[6] + 32))
                goto LABEL_64;
              v19 = 0;
              v26 = (_QWORD *)v17[1];
              if (!v26)
              {
                do
                {
LABEL_60:
                  v27 = (_QWORD *)v17[2];
                  v10 = *v27 == (_QWORD)v17;
                  v17 = v27;
                }
                while (!v10);
                goto LABEL_39;
              }
              do
              {
LABEL_56:
                v27 = v26;
                v26 = (_QWORD *)*v26;
              }
              while (v26);
LABEL_39:
              v17 = v27;
              if (v27 == v15 + 11)
                goto LABEL_63;
            }
            v19 = 0;
            v18 = *(_QWORD *)(v17[6] + 32);
LABEL_55:
            v26 = (_QWORD *)v17[1];
            if (!v26)
              goto LABEL_60;
            goto LABEL_56;
          }
LABEL_63:
          v16 = 1;
          *((_DWORD *)v15 + 12) = 1;
        }
LABEL_64:
        v28 = (_QWORD *)v15[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v15[2];
            v10 = *v29 == (_QWORD)v15;
            v15 = v29;
          }
          while (!v10);
        }
        v15 = v29;
        if (v29 == v3)
        {
          if ((v16 & 1) != 0)
            goto LABEL_32;
          return result;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_2236908CC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  _QWORD *v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  uint64_t v40;

  v1 = (_QWORD *)result[2];
  v2 = v1[1];
  if (v1[2] != v2)
  {
    v3 = v1[4];
    v4 = v1[5];
    v5 = (uint64_t *)(v2 + 8 * (v3 >> 4));
    v6 = *v5;
    v7 = *v5 + 368 * (v3 & 0xF);
    v8 = *(_QWORD *)(v2 + (((v4 + v3) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (((_DWORD)v4 + (_DWORD)v3) & 0xF);
    if (v7 != v8)
    {
      v10 = (_QWORD *)result[8];
      result += 8;
      v9 = v10;
      if (v10)
      {
        while (1)
        {
          v11 = *(_QWORD *)(v7 + 40);
          v12 = *(_QWORD *)(v7 + 208);
          if (v11 == v12 || *(uint64_t *)(v7 + 16) > 0)
            break;
          v27 = *(_DWORD *)(v7 + 32);
          if (v27 == 1)
          {
            if (*(_DWORD *)(v7 + 200) != 1)
              break;
          }
          else if (v27 != 2 || *(_DWORD *)(v7 + 200) != 2)
          {
            break;
          }
          v28 = *(_QWORD *)(v7 + 176);
          v29 = *(_QWORD *)(v7 + 344);
          v30 = result;
          v31 = v9;
          if (v28 == v29)
            break;
          do
          {
            v32 = v31[4];
            v33 = v32 < v28;
            if (v32 >= v28)
              v34 = v31;
            else
              v34 = v31 + 1;
            if (!v33)
              v30 = v31;
            v31 = (_QWORD *)*v34;
          }
          while (*v34);
          if (v30 != result && v28 >= v30[4])
          {
            v35 = v11 >= 2 && *((_DWORD *)v30 + 12) == 1;
            *(_BYTE *)(v7 + 184) = v35;
          }
          v20 = result;
          v36 = v9;
          do
          {
            v37 = v36[4];
            v38 = v37 < v29;
            if (v37 >= v29)
              v39 = v36;
            else
              v39 = v36 + 1;
            if (!v38)
              v20 = v36;
            v36 = (_QWORD *)*v39;
          }
          while (*v39);
          if (v20 == result || v29 < v20[4])
            goto LABEL_29;
          if (v12 < 2)
          {
            v25 = 0;
            goto LABEL_28;
          }
LABEL_27:
          v25 = *((_DWORD *)v20 + 12) == 1;
LABEL_28:
          *(_BYTE *)(v7 + 352) = v25;
LABEL_29:
          v7 += 368;
          if (v7 - v6 == 5888)
          {
            v26 = v5[1];
            ++v5;
            v6 = v26;
            v7 = v26;
          }
          if (v7 == v8)
            return result;
        }
        v13 = *(_QWORD *)(v7 + 176);
        v14 = result;
        v15 = v9;
        do
        {
          v16 = v15[4];
          v17 = v16 < v13;
          if (v16 >= v13)
            v18 = v15;
          else
            v18 = v15 + 1;
          if (!v17)
            v14 = v15;
          v15 = (_QWORD *)*v18;
        }
        while (*v18);
        if (v14 != result && v13 >= v14[4])
          *(_BYTE *)(v7 + 184) = *((_DWORD *)v14 + 12) == 1;
        v19 = *(_QWORD *)(v7 + 344);
        v20 = result;
        v21 = v9;
        do
        {
          v22 = v21[4];
          v23 = v22 < v19;
          if (v22 >= v19)
            v24 = v21;
          else
            v24 = v21 + 1;
          if (!v23)
            v20 = v21;
          v21 = (_QWORD *)*v24;
        }
        while (*v24);
        if (v20 == result || v19 < v20[4])
          goto LABEL_29;
        goto LABEL_27;
      }
      do
      {
        v7 += 368;
        if (v7 - v6 == 5888)
        {
          v40 = v5[1];
          ++v5;
          v6 = v40;
          v7 = v40;
        }
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_223690B10(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_223690B10(a1, *a2);
    sub_223690B10(a1, a2[1]);
    sub_223198030((uint64_t)(a2 + 8), (_QWORD *)a2[9]);
    operator delete(a2);
  }
}

void sub_223690B5C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_223690B5C(a1, *a2);
    sub_223690B5C(a1, a2[1]);
    sub_223475E64((uint64_t)(a2 + 10), (_QWORD *)a2[11]);
    sub_223198030((uint64_t)(a2 + 7), (_QWORD *)a2[8]);
    operator delete(a2);
  }
}

uint64_t sub_223690BB4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;

  if (*((_DWORD *)a3 + 2) != 2)
    return 0;
  v60 = 0;
  v61 = 0;
  v59 = (uint64_t *)&v60;
  sub_223689588(&v59, (_QWORD *)a2[2], a2 + 3);
  v6 = (uint64_t *)a3[2];
  v7 = a3 + 3;
  if (v6 != a3 + 3)
  {
    v8 = v60;
    if (v60)
    {
LABEL_4:
      v9 = v6[4];
      v10 = (uint64_t *)&v60;
      v11 = v8;
      do
      {
        v12 = v11;
        v13 = v10;
        v14 = v11[4];
        v15 = (uint64_t **)(v11 + 1);
        if (v14 >= v9)
          v10 = v11;
        else
          ++v11;
        v11 = (uint64_t *)*v11;
      }
      while (v11);
      if (v10 != (uint64_t *)&v60)
      {
        if (v14 < v9)
          v12 = v13;
        if (v9 >= v12[4])
        {
          v16 = (uint64_t **)(v13 + 1);
          if (v14 >= v9)
            v17 = v15;
          else
            v17 = v16;
          v18 = *v17;
          v19 = v10;
          if (*v17)
          {
            do
            {
              v20 = v18;
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v20 = (uint64_t *)v19[2];
              v33 = *v20 == (_QWORD)v19;
              v19 = v20;
            }
            while (!v33);
          }
          if (v59 == v10)
            v59 = v20;
          --v61;
          sub_2231AFE60(v8, v10);
          operator delete(v10);
        }
      }
      while (1)
      {
        v21 = (uint64_t *)v6[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (uint64_t *)v6[2];
            v33 = *v22 == (_QWORD)v6;
            v6 = v22;
          }
          while (!v33);
        }
        if (v22 == v7)
          break;
        v8 = v60;
        v6 = v22;
        if (v60)
          goto LABEL_4;
      }
    }
    else
    {
      do
      {
        v23 = (uint64_t *)v6[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (uint64_t *)v6[2];
            v33 = *v24 == (_QWORD)v6;
            v6 = v24;
          }
          while (!v33);
        }
        v6 = v24;
      }
      while (v24 != v7);
    }
  }
  if (v61 != 1)
    goto LABEL_92;
  v26 = (uint64_t *)a3[2];
  if (v26 == v7)
  {
LABEL_93:
    v25 = 1;
    goto LABEL_94;
  }
  v27 = *a2;
  v28 = *a3;
  while (1)
  {
    v29 = v26[4];
    if (v29 < 0)
      break;
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                    + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + v29) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 368 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + (_DWORD)v29) & 0xF);
    if (*(_DWORD *)(v30 + 32) != 2 || *(_DWORD *)(v30 + 200) != 2)
      goto LABEL_92;
    v31 = *(_QWORD *)(v30 + 176);
    v32 = *(_QWORD *)(v30 + 344);
    v33 = v31 == v27 && v32 == v28;
    if (!v33 && (v32 != v27 || v31 != v28))
      goto LABEL_92;
LABEL_86:
    v56 = (uint64_t *)v26[1];
    if (v56)
    {
      do
      {
        v57 = v56;
        v56 = (uint64_t *)*v56;
      }
      while (v56);
    }
    else
    {
      do
      {
        v57 = (uint64_t *)v26[2];
        v33 = *v57 == (_QWORD)v26;
        v26 = v57;
      }
      while (!v33);
    }
    v26 = v57;
    if (v57 == v7)
      goto LABEL_93;
  }
  v35 = *(_QWORD *)(a1 + 24);
  v38 = *(_QWORD **)(v35 + 8);
  v36 = (_QWORD *)(v35 + 8);
  v37 = v38;
  if (!v38)
    goto LABEL_86;
  v39 = -v29;
  v40 = v36;
  do
  {
    v41 = v37[4];
    v42 = v41 < v39;
    if (v41 >= v39)
      v43 = v37;
    else
      v43 = v37 + 1;
    if (!v42)
      v40 = v37;
    v37 = (_QWORD *)*v43;
  }
  while (*v43);
  if (v40 == v36)
    goto LABEL_86;
  if (v40[4] > v39)
    goto LABEL_86;
  v44 = (_QWORD *)v40[5];
  v45 = v40 + 6;
  if (v44 == v40 + 6)
    goto LABEL_86;
  v46 = *(_QWORD *)(a1 + 16);
  v47 = *(_QWORD *)(v46 + 32);
  v48 = *(_QWORD *)(v46 + 8);
  while (1)
  {
    v49 = *(_QWORD *)(v48 + (((unint64_t)(v44[4] + v47) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 368 * ((*((_DWORD *)v44 + 8) + (_DWORD)v47) & 0xF);
    if (*(_DWORD *)(v49 + 32) != 2 || *(_DWORD *)(v49 + 200) != 2)
      break;
    v50 = *(_QWORD *)(v49 + 176);
    v51 = *(_QWORD *)(v49 + 344);
    if ((v50 != v27 || v51 != v28) && (v51 != v27 || v50 != v28))
      break;
    v54 = (_QWORD *)v44[1];
    if (v54)
    {
      do
      {
        v55 = v54;
        v54 = (_QWORD *)*v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        v55 = (_QWORD *)v44[2];
        v33 = *v55 == (_QWORD)v44;
        v44 = v55;
      }
      while (!v33);
    }
    v44 = v55;
    if (v55 == v45)
      goto LABEL_86;
  }
LABEL_92:
  v25 = 0;
LABEL_94:
  sub_223198030((uint64_t)&v59, v60);
  return v25;
}

void sub_223690F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_223198030((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_223690F70(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4, _QWORD *a5, unint64_t *a6, _BYTE *a7)
{
  uint64_t v7;
  BOOL v8;
  int v10;
  uint64_t v18;
  _QWORD *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float *v23;
  unint64_t v24;
  unint64_t v25;
  float *v26;
  float *v27;
  uint64_t v28;
  char v29;

  v7 = a2 + 32 + 168 * a4;
  if (*(_DWORD *)(v7 + 160))
    v8 = 1;
  else
    v8 = *(_BYTE *)(v7 + 104) == 0;
  if (!v8 && !*(_BYTE *)(a2 + 32 + 168 * a4 + 164))
  {
    v10 = *(_DWORD *)v7;
    if (v10 == 4 || v10 == 2)
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v18 = sub_22369119C((_QWORD *)a1, &v26, a3, a4);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD **)(a1 + 72);
        sub_223691B58(*a6, a5, &v26, v19, a2, *(_QWORD *)(v19[1] + (((unint64_t)(v19[4] + a3) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 368 * ((*((_DWORD *)v19 + 8) + (_DWORD)a3) & 0xF)+ 168 * a4+ 32, v18, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), a7);
      }
      else
      {
        v21 = v26;
        v20 = v27;
        if ((unint64_t)((char *)v27 - (char *)v26) < 0x11)
          goto LABEL_18;
        if ((unint64_t)((char *)v27 - (char *)v26) >= 0x20)
        {
          v22 = *(_QWORD *)(a1 + 104);
          do
          {
            v23 = v21 + 2;
            if (!sub_223692610(v21 + 2, v20 - 2, v21, (uint64_t)&v29, v22))
              break;
            if (v23 != v27)
            {
              memmove(v21, v21 + 2, (((char *)v27 - (char *)v21) & 0xFFFFFFFFFFFFFFF8) - 8);
              v23 = v27;
            }
            v24 = ((char *)v23 - (char *)v26) >> 3;
            v25 = (v24 - 1);
            if (v25 <= v24)
            {
              if (v23 == v26)
              {
                v20 = v23;
              }
              else
              {
                v20 = &v26[2 * v25];
                v27 = v20;
                v23 = v26;
              }
            }
            else
            {
              sub_223341C68((uint64_t *)&v26, v25 - v24);
              v23 = v26;
              v20 = v27;
            }
            v21 = v23;
          }
          while ((unint64_t)((char *)v20 - (char *)v23) > 0x18);
        }
        sub_223691340(a5, (uint64_t)&v26);
        sub_22369147C((_QWORD *)a1, *(uint64_t ***)(a1 + 80));
        ++*a6;
      }
      v21 = v26;
LABEL_18:
      if (v21)
      {
        v27 = v21;
        operator delete(v21);
      }
    }
  }
}

void sub_223691178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22369119C(_QWORD *a1, _QWORD *a2, uint64_t a3, signed int a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;

  v8 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8)
                 + (((unint64_t)(*(_QWORD *)(a1[9] + 32) + a3) >> 1) & 0x7FFFFFFFFFFFFFF8))
     + 368 * ((*(_DWORD *)(a1[9] + 32) + (_DWORD)a3) & 0xF);
  sub_223691DA0((uint64_t)a2, (float *)v8, a1[12], a1[13]);
  v20 = a3;
  v19 = a4;
  result = sub_223691E78(a1, a3, a4, &v20, &v19, a2, 1);
  if (!(_DWORD)result)
  {
    v10 = v8 + 32;
    if (v20 == a3)
    {
LABEL_3:
      v11 = v10 + 168 * a4;
LABEL_4:
      result = 0;
      *(_DWORD *)(v11 + 160) = 3;
      return result;
    }
    v12 = *(_QWORD *)(v8 + 16);
    v13 = (_QWORD *)a1[9];
    if (v12 >= 1)
    {
      v14 = *(_QWORD *)(v13[1] + (((unint64_t)(v13[4] + v20) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 368 * ((*((_DWORD *)v13 + 8) + (_DWORD)v20) & 0xF);
      if (*(_QWORD *)(v14 + 16) == v12)
      {
        v15 = v14 + 32;
        v16 = *(_QWORD *)(v14 + 32 + 168 * v19 + 96);
        if (v16 == -1)
          v16 = *(_QWORD *)(v15 + 168 * v19 + 88);
        if (v16 == a3)
        {
          v11 = v15 + 168 * v19;
          goto LABEL_4;
        }
      }
    }
    v17 = 2 * v13[5] + 3;
    while (1)
    {
      result = sub_223691E78(a1, a3, a4, &v20, &v19, a2, 0);
      if ((_DWORD)result)
        break;
      if (v20 == a3 && v19 == a4)
        goto LABEL_3;
      if (!--v17)
        return 6;
    }
  }
  return result;
}

void sub_223691340(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  const void *v9;
  int64_t v10;
  char *v11;
  size_t v12;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    sub_22369476C((uint64_t)a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
    MEMORY[0] = 0;
    MEMORY[8] = 0;
    MEMORY[0x10] = 0;
    v9 = *(const void **)a2;
    v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (!v10)
      goto LABEL_11;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (_QWORD *)(*(_QWORD *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    v9 = *(const void **)a2;
    v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (!v10)
      goto LABEL_11;
  }
  if (v10 < 0)
    sub_22316E078();
  v11 = (char *)operator new(v10);
  *v8 = v11;
  v8[1] = v11;
  v8[2] = &v11[8 * (v10 >> 3)];
  v12 = v10 & 0xFFFFFFFFFFFFFFF8;
  memcpy(v11, v9, v12);
  v8[1] = &v11[v12];
LABEL_11:
  ++a1[5];
}

void sub_223691460(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22369147C(_QWORD *result, uint64_t **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t **v70;
  uint64_t v72;
  char v73;

  v67 = result;
  v2 = (_QWORD *)result[2];
  v3 = v2[1];
  v4 = v2[2];
  v5 = (_QWORD *)(v3 + 8 * (v2[4] >> 4));
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *v5 + 368 * (v2[4] & 0xFLL);
  v7 = a2 + 1;
  v8 = a2[2];
  v70 = a2 + 1;
  while (v4 != v3)
  {
    v9 = v2[5] + v2[4];
    if (v6 == *(_QWORD *)(v3 + ((v9 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 368 * (v9 & 0xF))
      return result;
LABEL_10:
    v68 = v6;
    v69 = v5;
    v10 = 0;
    v11 = v6 + 32;
    v12 = 1;
    v72 = v6 + 32;
    while (2)
    {
      v13 = v12;
      v14 = v11 + 168 * v10;
      v15 = (_DWORD *)(v14 + 160);
      if ((*(_DWORD *)(v14 + 160) - 1) > 2)
        goto LABEL_11;
      v73 = v12;
      v16 = v8;
      v17 = *(_QWORD *)(v14 + 8);
      v18 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      v20 = v7;
      result = v7;
      for (i = *v7; *result; v20 = (uint64_t **)result)
      {
        while (1)
        {
          result = i;
          v22 = i[4];
          if (v17 == v22)
            break;
          if (v17 < v22)
            goto LABEL_15;
          if (v22 >= v17)
            goto LABEL_48;
LABEL_26:
          i = (uint64_t *)result[1];
          if (!i)
          {
            v20 = (uint64_t **)(result + 1);
            goto LABEL_28;
          }
        }
        v23 = result[5];
        if (v18 != v23)
        {
          if (v18 < v23)
            goto LABEL_15;
          if (v23 >= v18)
          {
LABEL_48:
            v8 = v16;
            *((_BYTE *)result + 56) = 1;
            if (*(_DWORD *)v14 != 4)
              goto LABEL_97;
            goto LABEL_56;
          }
          goto LABEL_26;
        }
        v24 = result[6];
        if (v19 >= v24)
        {
          if (v24 >= v19)
            goto LABEL_48;
          goto LABEL_26;
        }
LABEL_15:
        i = (uint64_t *)*result;
      }
LABEL_28:
      v25 = result;
      result = operator new(0x40uLL);
      result[4] = v17;
      result[5] = v18;
      result[6] = v19;
      *((_WORD *)result + 28) = 0;
      *((_BYTE *)result + 58) = 0;
      *result = 0;
      result[1] = 0;
      result[2] = v25;
      *v20 = result;
      v26 = (uint64_t *)**a2;
      v27 = result;
      if (v26)
      {
        *a2 = v26;
        v27 = *v20;
      }
      v7 = v70;
      v28 = *v70;
      v29 = v27 == *v70;
      *((_BYTE *)v27 + 24) = v29;
      if (!v29)
      {
        do
        {
          v30 = v27[2];
          if (*(_BYTE *)(v30 + 24))
            break;
          v31 = *(uint64_t **)(v30 + 16);
          v32 = *v31;
          if (*v31 == v30)
          {
            v35 = v31[1];
            if (!v35 || (v36 = *(unsigned __int8 *)(v35 + 24), v33 = (_BYTE *)(v35 + 24), v36))
            {
              if (*(uint64_t **)v30 == v27)
              {
                *(_BYTE *)(v30 + 24) = 1;
                *((_BYTE *)v31 + 24) = 0;
                v39 = *(_QWORD *)(v30 + 8);
                *v31 = v39;
                if (v39)
                  goto LABEL_45;
              }
              else
              {
                v37 = *(uint64_t **)(v30 + 8);
                v38 = *v37;
                *(_QWORD *)(v30 + 8) = *v37;
                if (v38)
                {
                  *(_QWORD *)(v38 + 16) = v30;
                  v31 = *(uint64_t **)(v30 + 16);
                }
                v37[2] = (uint64_t)v31;
                *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8 * (**(_QWORD **)(v30 + 16) != v30)) = v37;
                *v37 = v30;
                *(_QWORD *)(v30 + 16) = v37;
                v31 = (uint64_t *)v37[2];
                v30 = *v31;
                *((_BYTE *)v37 + 24) = 1;
                *((_BYTE *)v31 + 24) = 0;
                v39 = *(_QWORD *)(v30 + 8);
                *v31 = v39;
                if (v39)
LABEL_45:
                  *(_QWORD *)(v39 + 16) = v31;
              }
              *(_QWORD *)(v30 + 16) = v31[2];
              *(_QWORD *)(v31[2] + 8 * (*(_QWORD *)v31[2] != (_QWORD)v31)) = v30;
              *(_QWORD *)(v30 + 8) = v31;
LABEL_54:
              v31[2] = v30;
              break;
            }
          }
          else if (!v32 || (v34 = *(unsigned __int8 *)(v32 + 24), v33 = (_BYTE *)(v32 + 24), v34))
          {
            if (*(uint64_t **)v30 == v27)
            {
              v65 = v27[1];
              *(_QWORD *)v30 = v65;
              if (v65)
              {
                *(_QWORD *)(v65 + 16) = v30;
                v31 = *(uint64_t **)(v30 + 16);
              }
              v27[2] = (uint64_t)v31;
              *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8 * (**(_QWORD **)(v30 + 16) != v30)) = v27;
              v27[1] = v30;
              *(_QWORD *)(v30 + 16) = v27;
              v31 = (uint64_t *)v27[2];
              *((_BYTE *)v27 + 24) = 1;
              *((_BYTE *)v31 + 24) = 0;
              v30 = v31[1];
              v40 = *(uint64_t **)v30;
              v31[1] = *(_QWORD *)v30;
              if (v40)
LABEL_52:
                v40[2] = (uint64_t)v31;
            }
            else
            {
              *(_BYTE *)(v30 + 24) = 1;
              *((_BYTE *)v31 + 24) = 0;
              v30 = v31[1];
              v40 = *(uint64_t **)v30;
              v31[1] = *(_QWORD *)v30;
              if (v40)
                goto LABEL_52;
            }
            *(_QWORD *)(v30 + 16) = v31[2];
            *(_QWORD *)(v31[2] + 8 * (*(_QWORD *)v31[2] != (_QWORD)v31)) = v30;
            *(_QWORD *)v30 = v31;
            goto LABEL_54;
          }
          *(_BYTE *)(v30 + 24) = 1;
          v27 = v31;
          *((_BYTE *)v31 + 24) = v31 == v28;
          *v33 = 1;
        }
        while (v31 != v28);
      }
      v8 = (uint64_t *)((char *)v16 + 1);
      a2[2] = (uint64_t *)((char *)v16 + 1);
      v11 = v72;
      *((_BYTE *)result + 56) = 1;
      if (*(_DWORD *)v14 != 4)
        goto LABEL_97;
LABEL_56:
      v41 = (_QWORD *)(v11 + 168 * (v10 ^ 1));
      v42 = v41[1];
      v43 = v41[2];
      v44 = v41[3];
      v45 = *v7;
      v46 = v7;
      result = v7;
      if (!*v7)
        goto LABEL_71;
      do
      {
        while (1)
        {
          result = v45;
          v47 = v45[4];
          if (v42 != v47)
            break;
          v48 = result[5];
          if (v43 != v48)
          {
            if (v43 < v48)
              goto LABEL_58;
            if (v48 >= v43)
              goto LABEL_96;
            goto LABEL_69;
          }
          v49 = result[6];
          if (v44 >= v49)
          {
            if (v49 >= v44)
              goto LABEL_96;
            goto LABEL_69;
          }
LABEL_58:
          v45 = (uint64_t *)*result;
          v46 = (uint64_t **)result;
          if (!*result)
            goto LABEL_71;
        }
        if (v42 < v47)
          goto LABEL_58;
        if (v47 >= v42)
          goto LABEL_96;
LABEL_69:
        v45 = (uint64_t *)result[1];
      }
      while (v45);
      v46 = (uint64_t **)(result + 1);
LABEL_71:
      v50 = result;
      result = operator new(0x40uLL);
      result[4] = v42;
      result[5] = v43;
      result[6] = v44;
      *((_WORD *)result + 28) = 0;
      *((_BYTE *)result + 58) = 0;
      *result = 0;
      result[1] = 0;
      result[2] = v50;
      *v46 = result;
      v51 = (uint64_t *)**a2;
      v52 = result;
      if (v51)
      {
        *a2 = v51;
        v52 = *v46;
      }
      v7 = v70;
      v53 = *v70;
      v29 = v52 == *v70;
      *((_BYTE *)v52 + 24) = v29;
      if (!v29)
      {
        do
        {
          v54 = v52[2];
          if (*(_BYTE *)(v54 + 24))
            break;
          v55 = *(uint64_t **)(v54 + 16);
          v56 = *v55;
          if (*v55 == v54)
          {
            v59 = v55[1];
            if (!v59 || (v60 = *(unsigned __int8 *)(v59 + 24), v57 = (_BYTE *)(v59 + 24), v60))
            {
              if (*(uint64_t **)v54 == v52)
              {
                *(_BYTE *)(v54 + 24) = 1;
                *((_BYTE *)v55 + 24) = 0;
                v63 = *(_QWORD *)(v54 + 8);
                *v55 = v63;
                if (v63)
                  goto LABEL_88;
              }
              else
              {
                v61 = *(uint64_t **)(v54 + 8);
                v62 = *v61;
                *(_QWORD *)(v54 + 8) = *v61;
                if (v62)
                {
                  *(_QWORD *)(v62 + 16) = v54;
                  v55 = *(uint64_t **)(v54 + 16);
                }
                v61[2] = (uint64_t)v55;
                *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * (**(_QWORD **)(v54 + 16) != v54)) = v61;
                *v61 = v54;
                *(_QWORD *)(v54 + 16) = v61;
                v55 = (uint64_t *)v61[2];
                v54 = *v55;
                *((_BYTE *)v61 + 24) = 1;
                *((_BYTE *)v55 + 24) = 0;
                v63 = *(_QWORD *)(v54 + 8);
                *v55 = v63;
                if (v63)
LABEL_88:
                  *(_QWORD *)(v63 + 16) = v55;
              }
              *(_QWORD *)(v54 + 16) = v55[2];
              *(_QWORD *)(v55[2] + 8 * (*(_QWORD *)v55[2] != (_QWORD)v55)) = v54;
              *(_QWORD *)(v54 + 8) = v55;
LABEL_94:
              v55[2] = v54;
              break;
            }
          }
          else if (!v56 || (v58 = *(unsigned __int8 *)(v56 + 24), v57 = (_BYTE *)(v56 + 24), v58))
          {
            if (*(uint64_t **)v54 == v52)
            {
              v66 = v52[1];
              *(_QWORD *)v54 = v66;
              if (v66)
              {
                *(_QWORD *)(v66 + 16) = v54;
                v55 = *(uint64_t **)(v54 + 16);
              }
              v52[2] = (uint64_t)v55;
              *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * (**(_QWORD **)(v54 + 16) != v54)) = v52;
              v52[1] = v54;
              *(_QWORD *)(v54 + 16) = v52;
              v55 = (uint64_t *)v52[2];
              *((_BYTE *)v52 + 24) = 1;
              *((_BYTE *)v55 + 24) = 0;
              v54 = v55[1];
              v64 = *(uint64_t **)v54;
              v55[1] = *(_QWORD *)v54;
              if (v64)
LABEL_92:
                v64[2] = (uint64_t)v55;
            }
            else
            {
              *(_BYTE *)(v54 + 24) = 1;
              *((_BYTE *)v55 + 24) = 0;
              v54 = v55[1];
              v64 = *(uint64_t **)v54;
              v55[1] = *(_QWORD *)v54;
              if (v64)
                goto LABEL_92;
            }
            *(_QWORD *)(v54 + 16) = v55[2];
            *(_QWORD *)(v55[2] + 8 * (*(_QWORD *)v55[2] != (_QWORD)v55)) = v54;
            *(_QWORD *)v54 = v55;
            goto LABEL_94;
          }
          *(_BYTE *)(v54 + 24) = 1;
          v52 = v55;
          *((_BYTE *)v55 + 24) = v55 == v53;
          *v57 = 1;
        }
        while (v55 != v53);
      }
      v8 = (uint64_t *)((char *)v8 + 1);
      a2[2] = v8;
      v11 = v72;
LABEL_96:
      *((_BYTE *)result + 56) = 1;
LABEL_97:
      v13 = v73;
      if ((*v15 - 1) <= 2)
        *(_BYTE *)(v11 + 168 * v10 + 165) = 1;
LABEL_11:
      v12 = 0;
      v10 = 1;
      if ((v13 & 1) != 0)
        continue;
      break;
    }
    v5 = v69;
    v6 = v68 + 368;
    if (v68 + 368 - *v69 == 5888)
    {
      v5 = v69 + 1;
      v6 = v69[1];
    }
    v2 = (_QWORD *)v67[2];
    v3 = v2[1];
    v4 = v2[2];
  }
  if (v6)
    goto LABEL_10;
  return result;
}

void sub_223691B58(unint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *a12 = 0;
  if (!a12[1])
  {
    a12[1] = 1;
    sub_223694D0C(a8, a10, a11, 1);
    sub_223694D0C(a9, a10, a11, 1);
    v20 = a2[5];
    v18 = a1 >= v20;
    v19 = a1 - v20;
    if (a1 > v20)
      goto LABEL_3;
LABEL_5:
    if (v18)
      goto LABEL_14;
    v21 = a2[4];
    v22 = a2[1];
    v23 = (_QWORD *)(v22 + 8 * (v21 / 0xAA));
    if (a2[2] == v22)
    {
      v24 = 0;
      if (!a1)
      {
LABEL_13:
        sub_223699298(a2, v23, v24);
        goto LABEL_14;
      }
    }
    else
    {
      v24 = *v23 + 24 * (v21 % 0xAA);
      if (!a1)
        goto LABEL_13;
    }
    v25 = a1 - 0x5555555555555555 * ((uint64_t)(v24 - *v23) >> 3);
    if (v25 < 1)
    {
      v26 = 169 - v25;
      v23 -= v26 / 0xAA;
      v24 = *v23 + 24 * (170 * (v26 / 0xAA) - v26) + 4056;
    }
    else
    {
      v23 += v25 / 0xAAuLL;
      v24 = *v23 + 24 * (v25 % 0xAAuLL);
    }
    goto LABEL_13;
  }
  v17 = a2[5];
  v18 = a1 >= v17;
  v19 = a1 - v17;
  if (a1 <= v17)
    goto LABEL_5;
LABEL_3:
  sub_223699094(a2, v19);
LABEL_14:
  a3[1] = *a3;
  *(_DWORD *)(a6 + 160) = 4;
  *(_BYTE *)(a6 + 164) = 1;
  v27 = a4[1];
  if (a4[2] != v27)
  {
    v28 = a4[4];
    v29 = (uint64_t *)(v27 + 8 * (v28 >> 4));
    v30 = *v29;
    v31 = *v29 + 368 * (v28 & 0xF);
    v32 = *(_QWORD *)(v27 + (((a4[5] + v28) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 368 * ((*((_DWORD *)a4 + 10) + (_DWORD)v28) & 0xF);
    while (v31 != v32)
    {
      if (*(_BYTE *)(v31 + 196) || *(_BYTE *)(v31 + 197))
      {
        if (!*(_BYTE *)(v31 + 364))
          goto LABEL_21;
      }
      else
      {
        *(_DWORD *)(v31 + 192) = 0;
        if (!*(_BYTE *)(v31 + 364))
        {
LABEL_21:
          if (!*(_BYTE *)(v31 + 365))
            *(_DWORD *)(v31 + 360) = 0;
        }
      }
      v31 += 368;
      if (v31 - v30 == 5888)
      {
        v33 = v29[1];
        ++v29;
        v30 = v33;
        v31 = v33;
      }
    }
  }
}

void sub_223691DA0(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  float *v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v7 = *(float **)a1;
  if (*(_QWORD *)(a1 + 8) - (_QWORD)v7 != 8 || !sub_2236923C8(v7, a2, a3, a4))
  {
    sub_2236928DC((void **)a1, a2);
    v9 = *(_QWORD *)(a1 + 8);
    if ((unint64_t)(v9 - *(_QWORD *)a1) >= 0x11)
    {
      do
      {
        if (!sub_223692610(a2, (float *)(v9 - 24), (float *)(v9 - 16), (uint64_t)&v12, a4))
          break;
        v10 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
        v11 = (v10 - 2);
        if (v11 > v10)
        {
          sub_223341C68((uint64_t *)a1, v11 - v10);
        }
        else if (v11 < v10)
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * v11;
        }
        sub_2236928DC((void **)a1, a2);
        v9 = *(_QWORD *)(a1 + 8);
      }
      while ((unint64_t)(v9 - *(_QWORD *)a1) > 0x10);
    }
  }
}

uint64_t sub_223691E78(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, int *a5, _QWORD *a6, int a7)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float **v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t result;
  float **v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  BOOL v68;
  BOOL v69;
  _QWORD *v70;
  BOOL v71;
  _QWORD *v72;
  float *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  int *v80;
  int v81;
  _QWORD *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v9 = *a5;
  v10 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8)
                  + (((unint64_t)(*(_QWORD *)(a1[9] + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 368 * ((*(_DWORD *)(a1[9] + 32) + *(_DWORD *)a4) & 0xF)
      + 32;
  v11 = v10 + 168 * *a5;
  v12 = *(_QWORD *)(v11 + 96);
  if (v12 < 0)
  {
    v17 = *(_QWORD *)(v10 + 168 * v9 + 80);
    if (v17 < 0 || (v18 = *(_QWORD *)(v10 + 168 * v9 + 88), v18 < 0))
    {
      v15 = a7 == 0;
      goto LABEL_22;
    }
    v75 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8)
                    + (((unint64_t)(*(_QWORD *)(a1[9] + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 368 * ((*(_DWORD *)(a1[9] + 32) + *(_DWORD *)a4) & 0xF)
        + 32;
    v76 = *a4;
    v77 = a2;
    v78 = *a5;
    v79 = a3;
    v80 = a5;
    *a4 = v18;
    v19 = *(_OWORD *)(v11 + 8);
    v20 = *(_OWORD *)(v11 + 24);
    v85 = *(_QWORD *)(v11 + 40);
    v83 = v19;
    v84 = v20;
    v21 = *(_QWORD *)(v11 + 8);
    v23 = a1[12];
    v22 = a1[13];
    v24 = *(_QWORD *)(v11 + 32);
    v25 = ~v24;
    v82 = a1;
    v81 = a7;
    if (v21)
    {
      v26 = (float **)a1[8];
      v27 = v26[1];
      v73 = *v26;
      v28 = ((char *)v27 - (char *)*v26) >> 3;
      if (v27 == *v26)
        v29 = 0;
      else
        v29 = v28 + 1;
      v30 = v29 + v25;
      if (v29 >= v28 || v30 >= v28)
      {
        v31 = v27;
        if (v30 <= v28)
          v31 = &v73[2 * (v30 % v28)];
      }
      else
      {
        v31 = &v27[2 * v25];
      }
      if (v24 >= v17)
        v25 += v29;
      if (v25 + v17 >= 0)
      {
        v43 = v25 + v17 + 1;
        do
        {
          v45 = v30 - 1;
          if (v30 < v28)
          {
            v44 = v31 - 2;
          }
          else
          {
            v44 = v27;
            if (v45 <= v28)
              v44 = &v73[2 * (v45 % v28)];
          }
          sub_223692C40((uint64_t)a6, v44, v23, v22);
          if (v45)
            v30 = v45;
          else
            v30 = v29;
          if (v45)
            v31 = v44;
          else
            v31 = v27;
          --v43;
        }
        while (v43);
      }
    }
    else
    {
      v37 = (float **)a1[7];
      v38 = v37[1];
      v74 = *v37;
      v39 = ((char *)v38 - (char *)*v37) >> 3;
      if (v38 == *v37)
        v40 = 0;
      else
        v40 = v39 + 1;
      v41 = v40 + v25;
      if (v40 >= v39 || v41 >= v39)
      {
        v42 = v38;
        if (v41 <= v39)
          v42 = &v74[2 * (v41 % v39)];
      }
      else
      {
        v42 = &v38[2 * v25];
      }
      if (v24 >= v17)
        v25 += v40;
      if (v25 + v17 >= 0)
      {
        v46 = v25 + v17 + 1;
        do
        {
          v48 = v41 - 1;
          if (v41 < v39)
          {
            v47 = v42 - 2;
          }
          else
          {
            v47 = v38;
            if (v48 <= v39)
              v47 = &v74[2 * (v48 % v39)];
          }
          sub_223692C40((uint64_t)a6, v47, v23, v22);
          if (v48)
            v41 = v48;
          else
            v41 = v40;
          if (v48)
            v42 = v47;
          else
            v42 = v38;
          --v46;
        }
        while (v46);
      }
    }
  }
  else
  {
    v75 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8)
                    + (((unint64_t)(*(_QWORD *)(a1[9] + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 368 * ((*(_DWORD *)(a1[9] + 32) + *(_DWORD *)a4) & 0xF)
        + 32;
    v76 = *a4;
    v77 = a2;
    v78 = *a5;
    v79 = a3;
    v81 = a7;
    v80 = a5;
    v82 = a1;
    *a4 = v12;
    v13 = *(_OWORD *)(v11 + 8);
    v14 = *(_OWORD *)(v11 + 24);
    v85 = *(_QWORD *)(v11 + 40);
    v83 = v13;
    v84 = v14;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v82[9] + 8)
                            + (((unint64_t)(*(_QWORD *)(v82[9] + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 368 * ((*(_DWORD *)(v82[9] + 32) + *(_DWORD *)a4) & 0xF)
                + 24))
  {
    v15 = v81 == 0;
    v16 = 3;
    goto LABEL_23;
  }
  if (v81)
    *(_DWORD *)(v75 + 168 * v78 + 160) = 1;
  if ((sub_223692A40((uint64_t)v82, v77, v79, a4, v80, v78, v76, (uint64_t *)&v83, v81, a6[1] - *a6 > 8uLL) & 1) != 0)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(v82[9] + 8)
                    + (((unint64_t)(*(_QWORD *)(v82[9] + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 368 * ((*(_DWORD *)(v82[9] + 32) + *(_DWORD *)a4) & 0xF);
    v33 = *v80;
    v34 = v32 + 32 + 168 * *v80;
    if (*(_BYTE *)(v34 + 165))
      return 5;
    v35 = (_DWORD *)(v34 + 160);
    if (*(_DWORD *)(v34 + 160) == 2)
      return 5;
    sub_223691DA0((uint64_t)a6, (float *)v32, v82[12], v82[13]);
    if (*(_DWORD *)v34 == 4)
    {
      if (*(_DWORD *)(v32 + 192))
      {
        if (*(_DWORD *)(v32 + 360))
          goto LABEL_70;
      }
      else
      {
        *(_DWORD *)(v32 + 192) = 2;
        if (*(_DWORD *)(v32 + 360))
        {
LABEL_70:
          v49 = *(_QWORD *)(v32 + 16);
          if (v49 < 1)
            return 0;
LABEL_75:
          v50 = v82[3];
          v53 = *(_QWORD **)(v50 + 8);
          v51 = (_QWORD *)(v50 + 8);
          v52 = v53;
          if (!v53)
            goto LABEL_85;
          v54 = v51;
          do
          {
            v55 = v52[4];
            v56 = v55 < v49;
            if (v55 >= v49)
              v57 = v52;
            else
              v57 = v52 + 1;
            if (!v56)
              v54 = v52;
            v52 = (_QWORD *)*v57;
          }
          while (*v57);
          if (v54 == v51 || v54[4] > v49)
LABEL_85:
            v54 = v51;
          v58 = (_QWORD *)v54[5];
          v59 = v54 + 6;
          if (v58 == v54 + 6)
            return 0;
          v60 = *(_QWORD *)(v32 + 32 + 168 * v33 + 128);
          v61 = v82[2];
          v62 = *(_QWORD *)(v61 + 32);
          v63 = *(_QWORD *)(v61 + 8);
          while (1)
          {
            v64 = *(_QWORD *)(v63 + (((unint64_t)(v58[4] + v62) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 368 * ((*((_DWORD *)v58 + 8) + (_DWORD)v62) & 0xF);
            v65 = v64 + 32;
            v66 = *(_DWORD *)(v64 + 192);
            v67 = *(_QWORD *)(v64 + 160);
            if (v66)
              v68 = 0;
            else
              v68 = v67 == v60;
            if (v68)
            {
              *(_DWORD *)(v65 + 160) = 2;
              if (*(_DWORD *)(v65 + 328))
                v71 = 0;
              else
                v71 = *(_QWORD *)(v65 + 296) == v60;
              if (!v71)
              {
LABEL_97:
                v70 = (_QWORD *)v58[1];
                if (v70)
                  goto LABEL_105;
                goto LABEL_107;
              }
            }
            else
            {
              if (*(_DWORD *)(v65 + 328))
                v69 = 0;
              else
                v69 = *(_QWORD *)(v65 + 296) == v60;
              if (!v69)
                goto LABEL_97;
            }
            *(_DWORD *)(v65 + 328) = 2;
            v70 = (_QWORD *)v58[1];
            if (v70)
            {
              do
              {
LABEL_105:
                v72 = v70;
                v70 = (_QWORD *)*v70;
              }
              while (v70);
              goto LABEL_88;
            }
            do
            {
LABEL_107:
              v72 = (_QWORD *)v58[2];
              v15 = *v72 == (_QWORD)v58;
              v58 = v72;
            }
            while (!v15);
LABEL_88:
            result = 0;
            v58 = v72;
            if (v72 == v59)
              return result;
          }
        }
      }
      v35 = (_DWORD *)(v32 + 360);
    }
    *v35 = 2;
    v49 = *(_QWORD *)(v32 + 16);
    if (v49 < 1)
      return 0;
    goto LABEL_75;
  }
  v15 = v81 == 0;
LABEL_22:
  v16 = 1;
LABEL_23:
  if (v15)
    return v16 + 1;
  else
    return v16;
}

BOOL sub_2236923C8(float *a1, float *a2, uint64_t a3, uint64_t a4)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v13;
  float v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v42;
  float v43;
  float v44;
  float v45;

  v7 = *a1;
  v8 = *a2;
  if (*a1 == *a2)
    goto LABEL_51;
  if ((LODWORD(v7) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v8) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v13 = vabds_f32(v7, v8);
    v14 = fabsf(v7);
    v15 = fabsf(v8);
    if (v14 < v15)
      v14 = v15;
    v16 = v14 >= 1.0 ? v14 * 0.00000011921 : 0.00000011921;
    if (v13 <= v16)
    {
LABEL_51:
      v9 = a1[1];
      v10 = a2[1];
      if (v9 == v10)
        return 1;
      if ((LODWORD(v9) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v10) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v42 = vabds_f32(v9, v10);
        v43 = fabsf(v9);
        v44 = fabsf(v10);
        if (v43 < v44)
          v43 = v44;
        v45 = v43 >= 1.0 ? v43 * 0.00000011921 : 0.00000011921;
        if (v42 <= v45)
          return 1;
      }
    }
  }
  v18 = (float)((float)(a1[1] - *(float *)(a4 + 4)) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 16);
  if (v18 >= 0.0)
    v19 = 0.5;
  else
    v19 = -0.5;
  v20 = v18 + v19;
  sub_2233DC31C(v18 + v19);
  v21 = ceilf(v20);
  v22 = floorf(v20);
  if (v20 >= 0.0)
    v21 = v22;
  v23 = (uint64_t)v21;
  v24 = (float)((float)(*a1 - *(float *)a4) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 8);
  if (v24 >= 0.0)
    v25 = 0.5;
  else
    v25 = -0.5;
  v26 = v24 + v25;
  sub_2233DC31C(v24 + v25);
  v27 = ceilf(v26);
  v28 = floorf(v26);
  if (v26 >= 0.0)
    v27 = v28;
  v29 = (uint64_t)v27;
  v30 = (float)((float)(a2[1] - *(float *)(a4 + 4)) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 16);
  if (v30 >= 0.0)
    v31 = 0.5;
  else
    v31 = -0.5;
  v32 = v30 + v31;
  sub_2233DC31C(v30 + v31);
  v33 = ceilf(v32);
  v34 = floorf(v32);
  if (v32 >= 0.0)
    v33 = v34;
  v35 = (uint64_t)v33;
  v36 = (float)((float)(*a2 - *(float *)a4) * *(float *)(a4 + 24)) + (float)*(uint64_t *)(a4 + 8);
  if (v36 >= 0.0)
    v37 = 0.5;
  else
    v37 = -0.5;
  v38 = v36 + v37;
  sub_2233DC31C(v36 + v37);
  v39 = ceilf(v38);
  v40 = floorf(v38);
  if (v38 >= 0.0)
    v39 = v40;
  return v29 == (uint64_t)v39 && v23 == v35;
}

BOOL sub_223692610(float *a1, float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  double v40;
  uint64_t v42[2];
  uint64_t v43[2];
  uint64_t v44[2];
  double v45;

  v44[0] = 0x3FF0000000000000;
  v9 = sub_2233DB7C4(a2, a3, a1, (double *)v44);
  if (v9 == 0.0
    || (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v9) <= *(double *)v44 * 2.22044605e-16)
  {
    return 1;
  }
  v10 = (float)((float)(a1[1] - *(float *)(a5 + 4)) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 16);
  if (v10 >= 0.0)
    v11 = 0.5;
  else
    v11 = -0.5;
  v12 = v10 + v11;
  sub_2233DC31C(v10 + v11);
  v13 = ceilf(v12);
  v14 = floorf(v12);
  if (v12 >= 0.0)
    v13 = v14;
  v44[1] = (uint64_t)v13;
  v15 = (float)((float)(*a1 - *(float *)a5) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 8);
  if (v15 >= 0.0)
    v16 = 0.5;
  else
    v16 = -0.5;
  v17 = v15 + v16;
  sub_2233DC31C(v15 + v16);
  v18 = ceilf(v17);
  v19 = floorf(v17);
  if (v17 >= 0.0)
    v18 = v19;
  v44[0] = (uint64_t)v18;
  v20 = (float)((float)(a2[1] - *(float *)(a5 + 4)) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 16);
  if (v20 >= 0.0)
    v21 = 0.5;
  else
    v21 = -0.5;
  v22 = v20 + v21;
  sub_2233DC31C(v20 + v21);
  v23 = ceilf(v22);
  v24 = floorf(v22);
  if (v22 >= 0.0)
    v23 = v24;
  v43[1] = (uint64_t)v23;
  v25 = (float)((float)(*a2 - *(float *)a5) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 8);
  if (v25 >= 0.0)
    v26 = 0.5;
  else
    v26 = -0.5;
  v27 = v25 + v26;
  sub_2233DC31C(v25 + v26);
  v28 = ceilf(v27);
  v29 = floorf(v27);
  if (v27 >= 0.0)
    v28 = v29;
  v43[0] = (uint64_t)v28;
  v30 = (float)((float)(a3[1] - *(float *)(a5 + 4)) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 16);
  if (v30 >= 0.0)
    v31 = 0.5;
  else
    v31 = -0.5;
  v32 = v30 + v31;
  sub_2233DC31C(v30 + v31);
  v33 = ceilf(v32);
  v34 = floorf(v32);
  if (v32 >= 0.0)
    v33 = v34;
  v42[1] = (uint64_t)v33;
  v35 = (float)((float)(*a3 - *(float *)a5) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 8);
  v36 = v35 >= 0.0 ? 0.5 : -0.5;
  v37 = v35 + v36;
  sub_2233DC31C(v35 + v36);
  v38 = ceilf(v37);
  v39 = floorf(v37);
  if (v37 >= 0.0)
    v38 = v39;
  v42[0] = (uint64_t)v38;
  v45 = 1.0;
  v40 = sub_2233E3FAC(v43, v42, v44, &v45);
  return v40 == 0.0
      || (*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v40) <= v45 * 2.22044605e-16;
}

void sub_2236928DC(void **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = v5 - (_BYTE *)*a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      sub_22316E078();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_223174E94();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_28;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  a1[1] = v7;
}

uint64_t sub_223692A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int *a5, int a6, uint64_t a7, uint64_t *a8, char a9, char a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t result;
  int v27;
  int v28;

  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a4;
  v20 = *(_QWORD *)(v18 + 32);
  v21 = *(_QWORD *)(v18 + 8);
  v22 = *(_QWORD *)(v21 + (((unint64_t)(v20 + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 368 * (((_DWORD)v20 + *(_DWORD *)a4) & 0xF);
  v23 = *(_QWORD *)(v22 + 16);
  if (a10)
  {
    if (v23 < 1)
    {
      if (v19 == a2)
      {
LABEL_7:
        *a4 = a2;
        *a5 = a3;
        return 1;
      }
    }
    else
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v21 + (((unint64_t)(v20 + a2) >> 1) & 0x7FFFFFFFFFFFFFF8))
                      + 368 * (((_DWORD)v20 + (_DWORD)a2) & 0xF)
                      + 16) == v23;
      if (v19 == a2 || v24)
        goto LABEL_7;
    }
  }
  if (v23 > 0)
    goto LABEL_10;
  if (*(_DWORD *)(v22 + 32) != 2 || *(_DWORD *)(v22 + 200) != 2)
    goto LABEL_18;
  if ((sub_2236930DC((uint64_t **)a1, a4, a5, (float *)v22, a8) & 1) != 0)
    return 1;
  if (*(uint64_t *)(v22 + 16) < 1)
  {
LABEL_18:
    if (*(_DWORD *)(v22 + 360) == 1)
      v27 = 1;
    else
      v27 = -1;
    if (*(_DWORD *)(v22 + 192) == 1)
      v28 = 0;
    else
      v28 = v27;
    *a5 = v28;
    if (v28 != -1)
      return 1;
    if (*(_DWORD *)(v22 + 192) != 3 || *(_DWORD *)(v22 + 360) != 3)
    {
      *a5 = -1;
      if (*(_DWORD *)(v22 + 32) != 4 || *(_DWORD *)(v22 + 200) != 4)
        return (sub_223694574(a1, v22, a8, a5) & 1) != 0;
      if (sub_2236943DC(a1, v22, a2, a5))
        return 1;
    }
    return 0;
  }
LABEL_10:
  result = sub_2236933EC(a1, a4, a5, a2, a3, a8);
  if ((_DWORD)result)
  {
    result = 1;
    if (a9)
    {
      if (*a4 == a7)
        *a5 = a6;
    }
  }
  return result;
}

void sub_223692C40(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  float *v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v7 = *(float **)a1;
  if (*(_QWORD *)(a1 + 8) - (_QWORD)v7 != 8 || !sub_2236923C8(v7, a2, a3, a4))
  {
    sub_2236928DC((void **)a1, a2);
    v9 = *(_QWORD *)(a1 + 8);
    if ((unint64_t)(v9 - *(_QWORD *)a1) >= 0x11)
    {
      do
      {
        if (!sub_223692D18(a2, (float *)(v9 - 24), (float *)(v9 - 16), (uint64_t)&v12, a4))
          break;
        v10 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
        v11 = (v10 - 2);
        if (v11 > v10)
        {
          sub_223341C68((uint64_t *)a1, v11 - v10);
        }
        else if (v11 < v10)
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * v11;
        }
        sub_2236928DC((void **)a1, a2);
        v9 = *(_QWORD *)(a1 + 8);
      }
      while ((unint64_t)(v9 - *(_QWORD *)a1) > 0x10);
    }
  }
}

BOOL sub_223692D18(float *a1, float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  double v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double v56;

  v54 = 1.0;
  v9 = sub_2233DB7C4(a2, a3, a1, &v54);
  if (v9 == 0.0 || (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v9) <= v54 * 2.22044605e-16)
  {
    v10 = a3[1];
    v11 = a2[1] - v10;
    v12 = *a3 - *a2;
    if (v12 == 0.0)
      goto LABEL_7;
    if (COERCE_UNSIGNED_INT(fabs(*a3 - *a2)) <= 0x7F7FFFFF)
    {
      v16 = fabsf(v12);
      v17 = 0.00000011921;
      if (v16 >= 1.0)
        v17 = v16 * 0.00000011921;
      if (v16 <= v17)
      {
LABEL_7:
        if (v11 == 0.0)
          return 1;
        if (COERCE_UNSIGNED_INT(fabs(a2[1] - v10)) <= 0x7F7FFFFF)
        {
          v13 = fabsf(-v11);
          v14 = 0.00000011921;
          if (v13 >= 1.0)
            v14 = v13 * 0.00000011921;
          if (v13 <= v14)
            return 1;
        }
      }
    }
    v15 = a1[1];
    if ((float)((float)((float)(v10 * v11) - (float)(*a3 * v12)) + (float)((float)(v12 * *a1) - (float)(v11 * v15))) <= 0.0)
      return 1;
  }
  else
  {
    v15 = a1[1];
  }
  v18 = (float)((float)(v15 - *(float *)(a5 + 4)) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 16);
  if (v18 >= 0.0)
    v19 = 0.5;
  else
    v19 = -0.5;
  v20 = v18 + v19;
  sub_2233DC31C(v18 + v19);
  v21 = ceilf(v20);
  v22 = floorf(v20);
  if (v20 >= 0.0)
    v21 = v22;
  v55 = (uint64_t)v21;
  v23 = (float)((float)(*a1 - *(float *)a5) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 8);
  if (v23 >= 0.0)
    v24 = 0.5;
  else
    v24 = -0.5;
  v25 = v23 + v24;
  sub_2233DC31C(v23 + v24);
  v26 = ceilf(v25);
  v27 = floorf(v25);
  if (v25 >= 0.0)
    v26 = v27;
  *(_QWORD *)&v54 = (uint64_t)v26;
  v28 = (float)((float)(a2[1] - *(float *)(a5 + 4)) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 16);
  if (v28 >= 0.0)
    v29 = 0.5;
  else
    v29 = -0.5;
  v30 = v28 + v29;
  sub_2233DC31C(v28 + v29);
  v31 = ceilf(v30);
  v32 = floorf(v30);
  if (v30 >= 0.0)
    v31 = v32;
  v53 = (uint64_t)v31;
  v33 = (float)((float)(*a2 - *(float *)a5) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 8);
  if (v33 >= 0.0)
    v34 = 0.5;
  else
    v34 = -0.5;
  v35 = v33 + v34;
  sub_2233DC31C(v33 + v34);
  v36 = ceilf(v35);
  v37 = floorf(v35);
  if (v35 >= 0.0)
    v36 = v37;
  v52 = (uint64_t)v36;
  v38 = (float)((float)(a3[1] - *(float *)(a5 + 4)) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 16);
  if (v38 >= 0.0)
    v39 = 0.5;
  else
    v39 = -0.5;
  v40 = v38 + v39;
  sub_2233DC31C(v38 + v39);
  v41 = ceilf(v40);
  v42 = floorf(v40);
  if (v40 >= 0.0)
    v41 = v42;
  v51 = (uint64_t)v41;
  v43 = (float)((float)(*a3 - *(float *)a5) * *(float *)(a5 + 24)) + (float)*(uint64_t *)(a5 + 8);
  if (v43 >= 0.0)
    v44 = 0.5;
  else
    v44 = -0.5;
  v45 = v43 + v44;
  sub_2233DC31C(v43 + v44);
  v46 = ceilf(v45);
  v47 = floorf(v45);
  if (v45 >= 0.0)
    v46 = v47;
  v50 = (uint64_t)v46;
  v56 = 1.0;
  v48 = sub_2233E3FAC(&v52, &v50, (uint64_t *)&v54, &v56);
  if (v48 != 0.0
    && ((*(_QWORD *)&v48 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || fabs(v48) > v56 * 2.22044605e-16))
  {
    return 0;
  }
  if (v50 == v52 && v51 == v53)
    return 1;
  return (*(_QWORD *)&v54 - v50) * (v50 - v52) + (v55 - v51) * (v51 - v53) < 1;
}

uint64_t sub_2236930DC(uint64_t **a1, uint64_t *a2, _DWORD *a3, float *a4, _QWORD *a5)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  _BYTE *v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53[3];
  float *v54[3];

  __p = 0;
  v47 = 0;
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v10 = *a1;
  v11 = a1[1];
  sub_22368BAE0(&__p, a4, (uint64_t)(a4 + 8), *a2, 0, *a1, v11, 0, (uint64_t)v54);
  v12 = *((_QWORD *)a4 + 5);
  if (v12 != *a5 || *((_QWORD *)a4 + 7) != a5[2] || *((_QWORD *)a4 + 6) != a5[1])
    goto LABEL_19;
  v13 = *((_QWORD *)a4 + 8);
  v14 = a5[3];
  v15 = __OFSUB__(v13, v14);
  v16 = v13 - v14;
  if (v12)
  {
    if (v16 < 0 == v15)
      goto LABEL_15;
    v18 = *v11;
    v17 = v11[1];
LABEL_11:
    v20 = v17 - v18;
    v19 = v20 == 0;
    v21 = v20 >> 3;
    if (v19)
      v21 = -1;
    v16 += v21;
    goto LABEL_15;
  }
  if (v16 < 0 != v15)
  {
    v18 = *v10;
    v17 = v10[1];
    goto LABEL_11;
  }
LABEL_15:
  if (!v50 || v16 < v51)
  {
    v49 = v54[0];
    v51 = v16;
  }
  ++v50;
LABEL_19:
  v22 = *a1;
  v23 = a1[1];
  sub_22368BAE0(&__p, a4, (uint64_t)(a4 + 50), *a2, 1, *a1, v23, 0, (uint64_t)v54);
  v24 = *((_QWORD *)a4 + 26);
  if (v24 != *a5 || *((_QWORD *)a4 + 28) != a5[2] || *((_QWORD *)a4 + 27) != a5[1])
  {
    if (!v50)
      goto LABEL_48;
    goto LABEL_27;
  }
  v25 = *((_QWORD *)a4 + 29);
  v26 = a5[3];
  v27 = __OFSUB__(v25, v26);
  v28 = v25 - v26;
  if (v24)
  {
    if (v28 < 0 == v27)
      goto LABEL_44;
    v30 = *v23;
    v29 = v23[1];
  }
  else
  {
    if (v28 < 0 == v27)
      goto LABEL_44;
    v30 = *v22;
    v29 = v22[1];
  }
  v43 = v29 - v30;
  v19 = v43 == 0;
  v44 = v43 >> 3;
  if (v19)
    v44 = -1;
  v28 += v44;
LABEL_44:
  v45 = v50;
  if (!v50 || v28 < v51)
  {
    v49 = v54[0];
    v51 = v28;
  }
  ++v50;
  if (v45 == -1)
  {
LABEL_48:
    v40 = 0;
    v41 = __p;
    if (!__p)
      return v40;
    goto LABEL_35;
  }
LABEL_27:
  v31 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((v47 - (_BYTE *)__p) >> 3));
  v54[0] = (float *)&v49;
  v54[1] = a4;
  v54[2] = (float *)&v52;
  v53[0] = (float *)&v49;
  v53[1] = a4;
  v53[2] = (float *)&v52;
  if (v47 == __p)
    v32 = 0;
  else
    v32 = v31;
  sub_22368CCE8(__p, (unint64_t)v47, v53, v32, 1);
  v33 = __p;
  v34 = v47 - (_BYTE *)__p;
  if (v47 != __p)
  {
    *((_QWORD *)__p + 1) = 0;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (v34 >> 3)) >= 2)
    {
      v35 = 0;
      v36 = 1;
      v37 = 112;
      do
      {
        v38 = sub_22368C754(v54, (float *)&v33[v37 - 112], (float *)&v33[v37 - 8]);
        v33 = __p;
        v39 = v47;
        v35 += v38;
        *(_QWORD *)((char *)__p + v37) = v35;
        ++v36;
        v37 += 104;
      }
      while (v36 < 0x4EC4EC4EC4EC4EC5 * ((v39 - v33) >> 3));
    }
  }
  v40 = sub_223693694((uint64_t)a1, a2, a3, (uint64_t *)&__p);
  v41 = __p;
  if (__p)
  {
LABEL_35:
    v47 = v41;
    operator delete(v41);
  }
  return v40;
}

void sub_2236933C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2236933EC(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35[2];
  void *__p[2];
  __int128 v37;
  char v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v9 = *a2;
  v10 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD **)(v10 + 8);
  v11 = (_QWORD *)(v10 + 8);
  v12 = v13;
  if (!v13)
    goto LABEL_11;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                              + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + v9) >> 1) & 0x7FFFFFFFFFFFFFF8))
                  + 368 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + (_DWORD)v9) & 0xF)
                  + 16);
  v15 = v11;
  do
  {
    v16 = v12[4];
    v17 = v16 < v14;
    if (v16 >= v14)
      v18 = v12;
    else
      v18 = v12 + 1;
    if (!v17)
      v15 = v12;
    v12 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v15 == v11 || v14 < v15[4])
LABEL_11:
    v15 = v11;
  v19 = v15 + 5;
  v39 = 0;
  v40 = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  if (!sub_223693840((uint64_t **)a1, (uint64_t)&v39, v9, v15 + 5, a6))
  {
    v29 = 0;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(a1 + 16);
  v34 = v19;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)__p = 0u;
  v37 = 0u;
  if ((sub_223693B3C((uint64_t)&v34, v20) & 1) == 0)
  {
    v38 = 0;
    goto LABEL_31;
  }
  v21 = sub_223694170(&v34, (uint64_t *)&v39);
  v38 = v21;
  if (!v21)
    goto LABEL_31;
  v22 = v35[0];
  if (v35[0] == v35[1])
    goto LABEL_31;
  if (v34[1])
  {
    v23 = -1;
    v24 = -1;
    v25 = -1;
    while (2)
    {
      v26 = v22[2];
      v27 = (_QWORD *)v34[1];
      do
      {
        v28 = v27[4];
        if (v26 >= v28)
        {
          if (v28 >= v26)
            goto LABEL_19;
          ++v27;
        }
        v27 = (_QWORD *)*v27;
      }
      while (v27);
      if (v24 < 0 || v25 == v26)
      {
        v24 = *v22;
        v23 = *((_DWORD *)v22 + 2);
        v25 = v22[2];
LABEL_19:
        v22 += 4;
        if (v22 == v35[1])
          goto LABEL_45;
        continue;
      }
      goto LABEL_31;
    }
  }
  v24 = -1;
  v32 = -1;
  do
  {
    if (v24 < 0)
    {
      v32 = v22[2];
    }
    else if (v32 != v22[2])
    {
      goto LABEL_31;
    }
    v33 = *v22;
    v22 += 4;
    v24 = v33;
  }
  while (v22 != v35[1]);
  v23 = *((_DWORD *)v22 - 6);
LABEL_45:
  if (v24 < 0)
  {
LABEL_31:
    v29 = sub_223693694(a1, a2, a3, (uint64_t *)&v39);
    v30 = __p[1];
    if (!__p[1])
      goto LABEL_33;
    goto LABEL_32;
  }
  *a2 = v24;
  *a3 = v23;
  v29 = 1;
  v30 = __p[1];
  if (__p[1])
  {
LABEL_32:
    *(_QWORD *)&v37 = v30;
    operator delete(v30);
  }
LABEL_33:
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
LABEL_35:
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  return v29;
}

void sub_223693618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  sub_223693AFC(&a10);
  if (!__p)
    _Unwind_Resume(a1);
  a19 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223693694(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v24;
  int *v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v4 = *a4;
  v5 = a4[1];
  v6 = v5 - *a4;
  if (v5 == *a4)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v6 / 104;
  v11 = v10 <= 1 ? 1 : v10;
  v12 = (_DWORD *)(v4 + 36);
  result = v11;
  do
  {
    v14 = *(_QWORD *)(v12 - 7);
    if (v14 && *v12 != 0)
    {
      v16 = *(_QWORD *)(v9 + (((unint64_t)(*(_QWORD *)(v12 - 3) + v8) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 368 * ((*(v12 - 3) + (_DWORD)v8) & 0xF)
          + 32;
      v17 = *(v12 - 1);
      v18 = *(_DWORD *)(v16 + 168 * v17);
      if (v18 == 4 || v18 == 2)
      {
        v20 = v16 + 168 * v17;
        v21 = *(_QWORD *)(v20 + 144);
        v22 = *(unsigned __int8 *)(v20 + 152);
        if (*(_QWORD *)(*(_QWORD *)(v9 + (((unint64_t)(*(_QWORD *)(v4 + 24) + v8) >> 1) & 0x7FFFFFFFFFFFFFF8))
                       + 368 * ((*(_DWORD *)(v4 + 24) + (_DWORD)v8) & 0xF)
                       + 168 * *(int *)(v4 + 32)
                       + 176) == v21
          || v22 == 0)
        {
          break;
        }
      }
    }
    v12 += 26;
    --result;
  }
  while (result);
  if (v14 < 1)
    return 0;
  v24 = 0;
  v25 = (int *)(v4 + 32);
  v26 = 0.0;
  v27 = v10;
  do
  {
    v28 = *((_QWORD *)v25 - 3);
    if (v28 > v14)
      break;
    if (v28 == v14)
    {
      v29 = *(_QWORD *)(v9 + (((unint64_t)(*((_QWORD *)v25 - 1) + v8) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 368 * ((*(v25 - 2) + (_DWORD)v8) & 0xF)
          + 32;
      if (!*(_BYTE *)(v29 + 168 * *v25 + 165))
      {
        v30 = v29 + 168 * *v25;
        if (*(float *)(v30 + 72) < v26 || v27 == v10)
        {
          v26 = *(float *)(v30 + 72);
          v27 = v24;
        }
      }
    }
    ++v24;
    v25 += 26;
  }
  while (v11 != v24);
  if (v27 == v10)
    return 0;
  v32 = v4 + 104 * v27;
  *a2 = *(_QWORD *)(v32 + 24);
  *a3 = *(_DWORD *)(v32 + 32);
  return 1;
}

BOOL sub_223693840(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;

  v8 = a4 + 1;
  v9 = (_QWORD *)*a4;
  if ((_QWORD *)*a4 != a4 + 1)
  {
    while (1)
    {
      v11 = v9[4];
      v12 = *(_QWORD *)(a1[2][1] + (((unint64_t)(a1[2][4] + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 368 * ((*((_DWORD *)a1[2] + 8) + (_DWORD)v11) & 0xF);
      if (*(_BYTE *)(v12 + 24))
        goto LABEL_43;
      v13 = *a1;
      v14 = a1[1];
      sub_22368BAE0((void **)a2, (float *)v12, v12 + 32, v9[4], 0, *a1, v14, 0, (uint64_t)&v42);
      if (v11 != a3)
      {
        sub_22368BAE0((void **)a2, (float *)v12, v12 + 200, v11, 1, *a1, a1[1], 0, (uint64_t)&v42);
        goto LABEL_43;
      }
      v15 = *(_QWORD *)(v12 + 40);
      if (v15 == *a5 && *(_QWORD *)(v12 + 56) == a5[2] && *(_QWORD *)(v12 + 48) == a5[1])
        break;
LABEL_25:
      v26 = *a1;
      v27 = a1[1];
      sub_22368BAE0((void **)a2, (float *)v12, v12 + 200, a3, 1, *a1, v27, 0, (uint64_t)&v42);
      v28 = *(_QWORD *)(v12 + 208);
      if (v28 == *a5 && *(_QWORD *)(v12 + 224) == a5[2] && *(_QWORD *)(v12 + 216) == a5[1])
      {
        v29 = *(_QWORD *)(v12 + 232);
        v30 = a5[3];
        v31 = __OFSUB__(v29, v30);
        v32 = v29 - v30;
        if (v28)
        {
          if (v32 < 0 == v31)
            goto LABEL_39;
          v34 = *v27;
          v33 = v27[1];
        }
        else
        {
          if (v32 < 0 == v31)
          {
LABEL_39:
            v37 = *(_QWORD *)(a2 + 32);
            if (!v37 || v32 < *(_QWORD *)(a2 + 40))
            {
              *(_QWORD *)(a2 + 24) = v42;
              *(_QWORD *)(a2 + 40) = v32;
            }
            *(_QWORD *)(a2 + 32) = v37 + 1;
            goto LABEL_43;
          }
          v34 = *v26;
          v33 = v26[1];
        }
        v35 = v33 - v34;
        v22 = v35 == 0;
        v36 = v35 >> 3;
        if (v22)
          v36 = -1;
        v32 += v36;
        goto LABEL_39;
      }
LABEL_43:
      v38 = (_QWORD *)v9[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v9[2];
          v22 = *v39 == (_QWORD)v9;
          v9 = v39;
        }
        while (!v22);
      }
      v9 = v39;
      if (v39 == v8)
        goto LABEL_49;
    }
    v16 = *(_QWORD *)(v12 + 64);
    v17 = a5[3];
    v18 = __OFSUB__(v16, v17);
    v19 = v16 - v17;
    if (v15)
    {
      if (v19 < 0 == v18)
        goto LABEL_21;
      v21 = *v14;
      v20 = v14[1];
    }
    else
    {
      if (v19 < 0 == v18)
      {
LABEL_21:
        v25 = *(_QWORD *)(a2 + 32);
        if (!v25 || v19 < *(_QWORD *)(a2 + 40))
        {
          *(_QWORD *)(a2 + 24) = v42;
          *(_QWORD *)(a2 + 40) = v19;
        }
        *(_QWORD *)(a2 + 32) = v25 + 1;
        goto LABEL_25;
      }
      v21 = *v13;
      v20 = v13[1];
    }
    v23 = v20 - v21;
    v22 = v23 == 0;
    v24 = v23 >> 3;
    if (v22)
      v24 = -1;
    v19 += v24;
    goto LABEL_21;
  }
LABEL_49:
  v40 = *(_QWORD *)(a2 + 32);
  if (v40)
    sub_22368B9D4(a2, (float *)(*(_QWORD *)(a1[2][1] + (((unint64_t)(a1[2][4] + a3) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 368 * ((*((_DWORD *)a1[2] + 8) + (_DWORD)a3) & 0xF)));
  return v40 != 0;
}

_QWORD *sub_223693AFC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_223693B3C(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *i;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *j;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  char *v38;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  char *v72;
  _QWORD *v74;
  _QWORD *v75;

  v2 = *(_QWORD ***)a1;
  v3 = **(_QWORD ***)a1;
  v4 = 1;
  if (v3 != (_QWORD *)(*(_QWORD *)a1 + 8))
  {
    v74 = (_QWORD *)(a1 + 32);
    v75 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v7 = v3[4];
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 8)
                     + (((unint64_t)(*(_QWORD *)(a2 + 32) + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
         + 368 * ((*(_DWORD *)(a2 + 32) + (_DWORD)v7) & 0xF);
      if (*(_BYTE *)(v8 + 24))
        goto LABEL_5;
      v11 = *(_DWORD *)(v8 + 32);
      if (v11 == 2 && *(_DWORD *)(v8 + 200) == 2)
        return 0;
      v12 = *(_QWORD *)(v8 + 128);
      if (v12 == -1)
      {
        v12 = *(_QWORD *)(v8 + 120);
        if (v11 == 4)
          goto LABEL_16;
      }
      else if (v11 == 4)
      {
        goto LABEL_16;
      }
      if (v11 != 3)
        break;
      v19 = *(_QWORD *)(v8 + 296);
      if (v19 == -1)
      {
        if (v12 == *(_QWORD *)(v8 + 288))
          goto LABEL_64;
      }
      else if (v12 == v19)
      {
        goto LABEL_64;
      }
      for (i = v2[1]; i; i = (_QWORD *)*i)
      {
        v29 = i[4];
        if (v12 >= v29)
        {
          if (v29 >= v12)
            goto LABEL_64;
          ++i;
        }
      }
      v28 = *(_QWORD **)(a1 + 40);
      v27 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v28 >= v27)
      {
        v52 = (_QWORD *)*v74;
        v53 = ((uint64_t)v28 - *v74) >> 5;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 59)
          goto LABEL_132;
        v55 = v27 - (_QWORD)v52;
        if (v55 >> 4 > v54)
          v54 = v55 >> 4;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0)
          v56 = 0x7FFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          if (v56 >> 59)
            goto LABEL_131;
          v57 = (char *)operator new(32 * v56);
        }
        else
        {
          v57 = 0;
        }
        v64 = &v57[32 * v53];
        *(_QWORD *)v64 = v7;
        *((_DWORD *)v64 + 2) = 0;
        *((_QWORD *)v64 + 2) = v12;
        *((_QWORD *)v64 + 3) = -1;
        v65 = v64;
        if (v28 != v52)
        {
          do
          {
            v66 = *((_OWORD *)v28 - 1);
            *((_OWORD *)v65 - 2) = *((_OWORD *)v28 - 2);
            *((_OWORD *)v65 - 1) = v66;
            v65 -= 32;
            v28 -= 4;
          }
          while (v28 != v52);
          v28 = (_QWORD *)*v74;
        }
        v67 = &v57[32 * v56];
        v68 = v64 + 32;
        *(_QWORD *)(a1 + 32) = v65;
        *(_QWORD *)(a1 + 40) = v64 + 32;
        *(_QWORD *)(a1 + 48) = v67;
        if (v28)
          operator delete(v28);
        *(_QWORD *)(a1 + 40) = v68;
        v15 = *(_QWORD *)(v8 + 296);
        if (v15 == -1)
        {
LABEL_19:
          v15 = *(_QWORD *)(v8 + 288);
          v16 = *(_DWORD *)(v8 + 200);
          v17 = v16 == 2 || v16 == 4;
          if (v17)
            goto LABEL_70;
          goto LABEL_23;
        }
      }
      else
      {
        *v28 = v7;
        *((_DWORD *)v28 + 2) = 0;
        v28[2] = v12;
        v28[3] = -1;
        *(_QWORD *)(a1 + 40) = v28 + 4;
        v15 = *(_QWORD *)(v8 + 296);
        if (v15 == -1)
          goto LABEL_19;
      }
LABEL_65:
      v16 = *(_DWORD *)(v8 + 200);
      if (v16 == 2 || v16 == 4)
      {
LABEL_70:
        if (v15 == v7)
          return 0;
        v41 = *(char **)(a1 + 16);
        v40 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v41 >= v40)
        {
          v42 = (char *)*v75;
          v43 = (uint64_t)&v41[-*v75] >> 5;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 59)
LABEL_130:
            sub_22367C394();
          v45 = v40 - (_QWORD)v42;
          if (v45 >> 4 > v44)
            v44 = v45 >> 4;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0)
            v46 = 0x7FFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          if (v46)
          {
            if (v46 >> 59)
              goto LABEL_131;
            v47 = (char *)operator new(32 * v46);
          }
          else
          {
            v47 = 0;
          }
          v48 = &v47[32 * v43];
          *(_QWORD *)v48 = v7;
          *((_DWORD *)v48 + 2) = 1;
          *((_QWORD *)v48 + 2) = v15;
          *((_QWORD *)v48 + 3) = -1;
          v49 = v48;
          if (v41 != v42)
          {
            do
            {
              v50 = *((_OWORD *)v41 - 1);
              *((_OWORD *)v49 - 2) = *((_OWORD *)v41 - 2);
              *((_OWORD *)v49 - 1) = v50;
              v49 -= 32;
              v41 -= 32;
            }
            while (v41 != v42);
            v41 = (char *)*v75;
          }
          v51 = v48 + 32;
          *(_QWORD *)(a1 + 8) = v49;
          *(_QWORD *)(a1 + 16) = v48 + 32;
          *(_QWORD *)(a1 + 24) = &v47[32 * v46];
          if (v41)
            operator delete(v41);
          *(_QWORD *)(a1 + 16) = v51;
          v9 = (_QWORD *)v3[1];
          if (!v9)
          {
            do
            {
LABEL_90:
              v10 = (_QWORD *)v3[2];
              v17 = *v10 == (_QWORD)v3;
              v3 = v10;
            }
            while (!v17);
            goto LABEL_3;
          }
        }
        else
        {
          *(_QWORD *)v41 = v7;
          *((_DWORD *)v41 + 2) = 1;
          *((_QWORD *)v41 + 2) = v15;
          *((_QWORD *)v41 + 3) = -1;
          *(_QWORD *)(a1 + 16) = v41 + 32;
          v9 = (_QWORD *)v3[1];
          if (!v9)
            goto LABEL_90;
        }
        goto LABEL_6;
      }
LABEL_23:
      if (v16 != 3)
        goto LABEL_5;
      v18 = *(_QWORD *)(v8 + 128);
      if (v18 == -1)
      {
        if (v15 == *(_QWORD *)(v8 + 120))
          goto LABEL_5;
      }
      else if (v15 == v18)
      {
        goto LABEL_5;
      }
      for (j = *(_QWORD **)(*(_QWORD *)a1 + 8); j; j = (_QWORD *)*j)
      {
        v33 = j[4];
        if (v15 >= v33)
        {
          if (v33 >= v15)
            goto LABEL_5;
          ++j;
        }
      }
      v32 = *(_QWORD **)(a1 + 40);
      v31 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v32 >= v31)
      {
        v58 = (_QWORD *)*v74;
        v59 = ((uint64_t)v32 - *v74) >> 5;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 59)
LABEL_132:
          sub_22367C394();
        v61 = v31 - (_QWORD)v58;
        if (v61 >> 4 > v60)
          v60 = v61 >> 4;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFE0)
          v62 = 0x7FFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          if (v62 >> 59)
LABEL_131:
            sub_223174E94();
          v63 = (char *)operator new(32 * v62);
        }
        else
        {
          v63 = 0;
        }
        v69 = &v63[32 * v59];
        *(_QWORD *)v69 = v7;
        *((_DWORD *)v69 + 2) = 1;
        *((_QWORD *)v69 + 2) = v15;
        *((_QWORD *)v69 + 3) = -1;
        v70 = v69;
        if (v32 != v58)
        {
          do
          {
            v71 = *((_OWORD *)v32 - 1);
            *((_OWORD *)v70 - 2) = *((_OWORD *)v32 - 2);
            *((_OWORD *)v70 - 1) = v71;
            v70 -= 32;
            v32 -= 4;
          }
          while (v32 != v58);
          v32 = (_QWORD *)*v74;
        }
        v72 = v69 + 32;
        *(_QWORD *)(a1 + 32) = v70;
        *(_QWORD *)(a1 + 40) = v69 + 32;
        *(_QWORD *)(a1 + 48) = &v63[32 * v62];
        if (v32)
        {
          operator delete(v32);
          *(_QWORD *)(a1 + 40) = v72;
LABEL_5:
          v9 = (_QWORD *)v3[1];
          if (!v9)
            goto LABEL_90;
          goto LABEL_6;
        }
        *(_QWORD *)(a1 + 40) = v72;
        v9 = (_QWORD *)v3[1];
        if (!v9)
          goto LABEL_90;
      }
      else
      {
        *v32 = v7;
        *((_DWORD *)v32 + 2) = 1;
        v32[2] = v15;
        v32[3] = -1;
        *(_QWORD *)(a1 + 40) = v32 + 4;
        v9 = (_QWORD *)v3[1];
        if (!v9)
          goto LABEL_90;
      }
      do
      {
LABEL_6:
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
LABEL_3:
      v2 = *(_QWORD ***)a1;
      v3 = v10;
      if (v10 == (_QWORD *)(*(_QWORD *)a1 + 8))
        return 1;
    }
    if (v11 == 2)
    {
LABEL_16:
      if (v12 == v7)
        return 0;
      v14 = *(char **)(a1 + 16);
      v13 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v14 < v13)
      {
        *(_QWORD *)v14 = v7;
        *((_DWORD *)v14 + 2) = 0;
        *((_QWORD *)v14 + 2) = v12;
        *((_QWORD *)v14 + 3) = -1;
        *(_QWORD *)(a1 + 16) = v14 + 32;
        v15 = *(_QWORD *)(v8 + 296);
        if (v15 == -1)
          goto LABEL_19;
        goto LABEL_65;
      }
      v20 = (char *)*v75;
      v21 = (uint64_t)&v14[-*v75] >> 5;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 59)
        goto LABEL_130;
      v23 = v13 - (_QWORD)v20;
      if (v23 >> 4 > v22)
        v22 = v23 >> 4;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
        v24 = 0x7FFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 59)
          goto LABEL_131;
        v25 = (char *)operator new(32 * v24);
      }
      else
      {
        v25 = 0;
      }
      v34 = &v25[32 * v21];
      *(_QWORD *)v34 = v7;
      *((_DWORD *)v34 + 2) = 0;
      *((_QWORD *)v34 + 2) = v12;
      *((_QWORD *)v34 + 3) = -1;
      v35 = v34;
      if (v14 != v20)
      {
        do
        {
          v36 = *((_OWORD *)v14 - 1);
          *((_OWORD *)v35 - 2) = *((_OWORD *)v14 - 2);
          *((_OWORD *)v35 - 1) = v36;
          v35 -= 32;
          v14 -= 32;
        }
        while (v14 != v20);
        v14 = (char *)*v75;
      }
      v37 = &v25[32 * v24];
      v38 = v34 + 32;
      *(_QWORD *)(a1 + 8) = v35;
      *(_QWORD *)(a1 + 16) = v34 + 32;
      *(_QWORD *)(a1 + 24) = v37;
      if (v14)
        operator delete(v14);
      *(_QWORD *)(a1 + 16) = v38;
    }
LABEL_64:
    v15 = *(_QWORD *)(v8 + 296);
    if (v15 == -1)
      goto LABEL_19;
    goto LABEL_65;
  }
  return v4;
}

uint64_t sub_223694170(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = a1[4];
  v3 = a1[5];
  if (v2 == v3)
    return 1;
  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = *a2;
  v7 = a2[1];
  if (v4 != v5)
  {
    v8 = (v7 - v6) / 104;
    if (v8 <= 1)
      v8 = 1;
    if (v7 == v6)
    {
      v19 = v5 - v4 - 32;
      v20 = (char *)a1[1];
      if (v19 < 0x20)
        goto LABEL_53;
      v21 = (v19 >> 5) + 1;
      v20 = &v4[32 * (v21 & 0xFFFFFFFFFFFFFFELL)];
      v22 = v4 + 56;
      v23 = v21 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v22 - 4) = -1;
        *v22 = -1;
        v22 += 8;
        v23 -= 2;
      }
      while (v23);
      if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_53:
        do
        {
          *((_QWORD *)v20 + 3) = -1;
          v20 += 32;
        }
        while (v20 != v5);
      }
      goto LABEL_37;
    }
    v9 = a1[1];
    do
    {
LABEL_8:
      v10 = v8;
      v11 = (_DWORD *)(v6 + 36);
      while (*(_QWORD *)(v11 - 3) != *(_QWORD *)v9 || *(v11 - 1) != *(_DWORD *)(v9 + 8) || *v11 != 1)
      {
        v11 += 26;
        if (!--v10)
        {
          *(_QWORD *)(v9 + 24) = -1;
          v9 += 32;
          if ((char *)v9 == v5)
            goto LABEL_17;
          goto LABEL_8;
        }
      }
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v11 - 7);
      v9 += 32;
    }
    while ((char *)v9 != v5);
  }
LABEL_17:
  v13 = (v7 - v6) / 104;
  if (v13 <= 1)
    v13 = 1;
  if (v7 == v6)
  {
LABEL_37:
    v24 = v3 - v2 - 32;
    v25 = v2;
    if (v24 < 0x20)
      goto LABEL_54;
    v26 = (v24 >> 5) + 1;
    v25 = v2 + 32 * (v26 & 0xFFFFFFFFFFFFFFELL);
    v27 = (_QWORD *)(v2 + 56);
    v28 = v26 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v27 - 4) = -1;
      *v27 = -1;
      v27 += 8;
      v28 -= 2;
    }
    while (v28);
    if (v26 != (v26 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_54:
      do
      {
        *(_QWORD *)(v25 + 24) = -1;
        v25 += 32;
      }
      while (v25 != v3);
    }
    goto LABEL_44;
  }
  v14 = (_DWORD *)(v6 + 36);
  v15 = v2;
  do
  {
LABEL_22:
    v16 = v13;
    v17 = v14;
    while (*(_QWORD *)(v17 - 3) != *(_QWORD *)v15 || *(v17 - 1) != *(_DWORD *)(v15 + 8) || *v17 != 1)
    {
      v17 += 26;
      if (!--v16)
      {
        *(_QWORD *)(v15 + 24) = -1;
        v15 += 32;
        if (v15 == v3)
          goto LABEL_44;
        goto LABEL_22;
      }
    }
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v17 - 7);
    v15 += 32;
  }
  while (v15 != v3);
LABEL_44:
  if (v4 == v5)
    return 1;
  v29 = v2;
  while (*(_QWORD *)(v29 + 16) != *((_QWORD *)v4 + 2) || *(_QWORD *)(v29 + 24) != *((_QWORD *)v4 + 3))
  {
    v29 += 32;
    if (v29 == v3)
    {
      v4 += 32;
      goto LABEL_44;
    }
  }
  return 0;
}

BOOL sub_2236943DC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL8 result;
  float v12;
  int v13;
  uint64_t v17;
  int v18;
  int v19;

  v4 = *(_QWORD *)(a2 + 128);
  if (v4 == -1 && (v4 = *(_QWORD *)(a2 + 120), v4 == -1))
  {
    v7 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                   + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 368 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + (_DWORD)v4) & 0xF);
    if (*(uint64_t *)(v5 + 16) > 0 || (v6 = *(_DWORD *)(v5 + 32), v6 == 2))
    {
      v7 = 1;
      goto LABEL_6;
    }
    v13 = *(_DWORD *)(v5 + 200);
    v7 = v6 == 4;
    if (v13 == 2 || v13 == 4)
      v7 = 1;
    if (v6 == 4 || v13 == 4 || v13 == 2)
    {
LABEL_6:
      v8 = v4 == a3;
      v9 = *(_QWORD *)(a2 + 296);
      if (v9 != -1)
        goto LABEL_33;
      goto LABEL_7;
    }
  }
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 296);
  if (v9 != -1)
    goto LABEL_33;
LABEL_7:
  v9 = *(_QWORD *)(a2 + 288);
  if (v9 == -1)
  {
    v10 = 0;
    goto LABEL_9;
  }
LABEL_33:
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                  + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + v9) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 368 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + (_DWORD)v9) & 0xF);
  if (*(uint64_t *)(v17 + 16) > 0 || (v18 = *(_DWORD *)(v17 + 32), v18 == 2))
  {
    v10 = 1;
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 200);
    v10 = v18 == 4;
    if (v19 == 2 || v19 == 4)
      v10 = 1;
    if (v18 != 4 && v19 != 2 && v19 != 4)
    {
LABEL_9:
      if (!v8)
        goto LABEL_10;
LABEL_37:
      *a4 = !v8;
      return 1;
    }
  }
  if (v8 != (v9 == a3))
    goto LABEL_37;
LABEL_10:
  result = v7;
  if (v7)
  {
    v12 = *(float *)(a2 + 104);
    *a4 = 0;
    if (!v10)
      return result;
  }
  else
  {
    v12 = 0.0;
    if (!v10)
      return result;
  }
  result = 1;
  if (!v7 || *(float *)(a2 + 272) < v12)
  {
    *a4 = 1;
    return 1;
  }
  return result;
}

uint64_t sub_223694574(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v4 = *(_QWORD *)(a2 + 208);
  v5 = *(_QWORD *)(a2 + 176);
  v6 = *(_DWORD *)(a2 + 32);
  if (*(_QWORD *)(a2 + 40) == v4)
  {
    v7 = a3[1];
    if (v5 == -1)
    {
      if (v6 == 2 && (*(_DWORD *)(a2 + 192) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        result = 1;
        if (*(_DWORD *)(a2 + 200) != 2)
          return result;
      }
      else
      {
        result = 0;
        if (*(_DWORD *)(a2 + 200) != 2)
          return result;
      }
      if ((*(_DWORD *)(a2 + 360) & 0xFFFFFFFE) != 2)
      {
        if (*(_QWORD *)(a2 + 216) == v7)
          v11 = 0;
        else
          v11 = result;
        if ((v11 & 1) == 0)
          goto LABEL_46;
        return 1;
      }
    }
    else
    {
      if (v6 == 2 && (*(_DWORD *)(a2 + 192) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        result = 1;
        if (*(_DWORD *)(a2 + 200) != 2)
          return result;
      }
      else
      {
        result = 0;
        if (*(_DWORD *)(a2 + 200) != 2)
          return result;
      }
      if ((*(_DWORD *)(a2 + 360) & 0xFFFFFFFE) != 2)
      {
        if ((_DWORD)result)
        {
          v10 = *(_QWORD *)(a2 + 216);
          if (v5 == *(_QWORD *)(a2 + 344))
          {
            if (v10 != v7)
              goto LABEL_46;
          }
          else if (v10 == v7)
          {
            goto LABEL_46;
          }
          return 1;
        }
        goto LABEL_46;
      }
    }
  }
  else
  {
    v9 = *a3;
    if (v5 == -1)
    {
      if (v6 == 2 && (*(_DWORD *)(a2 + 192) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        result = 1;
        if (*(_DWORD *)(a2 + 200) != 2)
          return result;
      }
      else
      {
        result = 0;
        if (*(_DWORD *)(a2 + 200) != 2)
          return result;
      }
      if ((*(_DWORD *)(a2 + 360) & 0xFFFFFFFE) != 2)
      {
        if (v4 == v9)
          v12 = 0;
        else
          v12 = result;
        if ((v12 & 1) == 0)
          goto LABEL_46;
        return 1;
      }
    }
    else
    {
      if (v6 == 2 && (*(_DWORD *)(a2 + 192) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        result = 1;
        if (*(_DWORD *)(a2 + 200) != 2)
          return result;
      }
      else
      {
        result = 0;
        if (*(_DWORD *)(a2 + 200) != 2)
          return result;
      }
      if ((*(_DWORD *)(a2 + 360) & 0xFFFFFFFE) != 2)
      {
        if ((_DWORD)result)
        {
          if (v5 == *(_QWORD *)(a2 + 344))
          {
            if (v4 != v9)
              goto LABEL_46;
          }
          else if (v4 == v9)
          {
            goto LABEL_46;
          }
          return 1;
        }
LABEL_46:
        result = 1;
        *a4 = 1;
      }
    }
  }
  return result;
}

void sub_22369476C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFF0uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFF0uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_223694CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223694CC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223694CDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223694CF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223694D0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void **v5;
  void **v6;
  unint64_t v7;
  char **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int8x16_t v21;
  uint64_t v22;
  void (**v23)(std::exception *__hidden);
  unsigned __int8 v24;
  void *__p[2];
  __int128 v26;
  __int128 v27;

  v26 = 0u;
  v27 = 0u;
  *(_OWORD *)__p = 0u;
  v24 = 0;
  sub_223694FA8(a1, a2, a3, (uint64_t)__p, &v24, 0, 0);
  v5 = (void **)__p[1];
  v6 = (void **)v26;
  v7 = v26 - (unint64_t)__p[1];
  if ((void *)v26 != __p[1])
  {
    v8 = (char **)((char *)__p[1] + 8 * ((unint64_t)v27 / 0x15));
    v9 = *v8;
    v10 = &(*v8)[192 * ((unint64_t)v27 % 0x15)];
    v11 = ((unint64_t)(*((_QWORD *)&v27 + 1) + v27) * (unsigned __int128)0x8618618618618619) >> 64;
    v12 = (v11 + ((unint64_t)(*((_QWORD *)&v27 + 1) + v27 - v11) >> 1)) >> 4;
    v13 = *((_QWORD *)__p[1] + v12) + 192 * (*((_QWORD *)&v27 + 1) + v27 - 21 * v12);
    while (v10 != (char *)v13)
    {
      v14 = *((_DWORD *)v10 + 8);
      if (v14 == 1)
      {
        if (*((_DWORD *)v10 + 28) != 1)
          goto LABEL_26;
      }
      else if (v14 != 2 || *((_DWORD *)v10 + 28) != 2)
      {
LABEL_26:
        if (a4)
        {
          v23 = &off_24EC57268;
          v21.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcod"
                                "e.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Interna"
                                "l.sdk/usr/local/include/boost/geometry/algorithms/detail/has_self_intersections.hpp";
          v21.i64[1] = (uint64_t)"BOOL boost::geometry::detail::overlay::has_self_intersections(const Geometry &, const St"
                                "rategy &, const RobustPolicy &, BOOL) [Geometry = cv3d::recon::geometry::SimplePolygon<f"
                                "loat, 2>, Strategy = boost::geometry::strategies::relate::cartesian<>, RobustPolicy = bo"
                                "ost::geometry::detail::robust_policy<cva::Matrix<float, 2, 1>, boost::geometry::model::p"
                                "oint<long long, 2, boost::geometry::cs::cartesian>, float>]";
          v22 = 129;
          sub_223694F48((uint64_t)&v23, &v21);
        }
        v16 = 1;
        *((_QWORD *)&v27 + 1) = 0;
        if (v7 >= 0x11)
          goto LABEL_13;
        goto LABEL_14;
      }
      if ((*((_DWORD *)v10 + 2) - 3) >= 2)
        goto LABEL_26;
      v10 += 192;
      if (v10 - v9 == 4032)
      {
        v15 = v8[1];
        ++v8;
        v9 = v15;
        v10 = v15;
      }
    }
  }
  v16 = 0;
  *((_QWORD *)&v27 + 1) = 0;
  if (v7 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v5);
      v6 = (void **)v26;
      v5 = (void **)((char *)__p[1] + 8);
      __p[1] = v5;
      v7 = v26 - (_QWORD)v5;
    }
    while ((_QWORD)v26 - (_QWORD)v5 > 0x10uLL);
  }
LABEL_14:
  v17 = v7 >> 3;
  if (v17 == 1)
  {
    v18 = 10;
    goto LABEL_18;
  }
  if (v17 == 2)
  {
    v18 = 21;
LABEL_18:
    *(_QWORD *)&v27 = v18;
  }
  if (v5 != v6)
  {
    do
    {
      v19 = *v5++;
      operator delete(v19);
    }
    while (v5 != v6);
    if ((void *)v26 != __p[1])
      *(_QWORD *)&v26 = v26 + (((unint64_t)__p[1] - v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v16;
}

void sub_223694F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, char a15)
{
  std::exception::~exception(&a13);
  sub_2233FB518((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223694F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2233FB518((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223694F48(uint64_t a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_223698BF0((uint64_t)exception, a1, a2);
  __cxa_throw(exception, (struct type_info *)&unk_24EC57198, (void (*)(void *))sub_223698C24);
}

void sub_223694F90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_223694FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, int a6, char a7)
{
  float *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  char v26;
  void *__p;
  void *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[5];

  __p = 0;
  v28 = 0;
  v29 = 0;
  v14 = *(float **)a1;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = (v15 - *(_QWORD *)a1) >> 3;
  if (v15 == *(_QWORD *)a1)
    v17 = 0;
  else
    v17 = v16 + 1;
  if (v17 >= 2)
  {
    v20 = *(float **)a1;
    v21 = (uint64_t)v14;
    v22 = v15;
    v23 = v16;
    v24 = 0;
    v32[0] = v15;
    v32[1] = v14;
    v32[2] = v15;
    v32[3] = v16;
    v32[4] = v17;
    *(_QWORD *)&v30 = 0;
    *((_QWORD *)&v30 + 1) = -1;
    v31 = -1;
    sub_2233DC448(&__p, &v20, (uint64_t)v32, a3, a2, &v30, 0xAuLL);
  }
  v20 = (float *)a1;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = a6;
  v26 = a7;
  v32[0] = a2;
  *(_QWORD *)&v30 = a2;
  sub_2236950D0((uint64_t *)&__p, (uint64_t)&v20, (uint64_t)v32, (uint64_t)&v30, 0x10uLL);
  v18 = *a5;
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  return v18 == 0;
}

void sub_2236950B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2236950D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  _OWORD v19[2];
  void *__p;
  void *v21;
  uint64_t v22;
  char v23;

  v8 = *a1;
  v7 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v7 - *a1) >> 3) <= a5)
  {
LABEL_4:
    while (v8 != v7)
    {
      v13 = v8;
      v8 += 120;
      if (v8 != v7)
      {
        v14 = v8;
        while (1)
        {
          if (*(_QWORD *)(v13 + 48) >= *(_QWORD *)(v14 + 32) && *(_QWORD *)(v13 + 32) <= *(_QWORD *)(v14 + 48))
          {
            v15 = *(_QWORD *)(v13 + 56) >= *(_QWORD *)(v14 + 40) && *(_QWORD *)(v13 + 40) <= *(_QWORD *)(v14 + 56);
            v16 = v15 && *(_BYTE *)(v13 + 96) == 0;
            if (v16 && *(_BYTE *)(v14 + 96) == 0)
            {
              if (!sub_223697E88(*(_DWORD *)(a2 + 40), *(uint64_t **)a2, v13, *(_DWORD *)(a2 + 40), *(uint64_t **)a2, v14, 0, *(unsigned __int8 *)(a2 + 44), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD **)(a2 + 24), *(_BYTE **)(a2 + 32)))return 0;
              v7 = a1[1];
            }
          }
          v14 += 120;
          if (v14 == v7)
            goto LABEL_4;
        }
      }
    }
    return 1;
  }
  else
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    v19[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v19[1] = vdupq_n_s64(0x8000000000000000);
    sub_2233DCD4C(a1, (uint64_t *)v19, (char **)&__p);
    v12 = sub_223695284(v19, &__p, 0, a5, a2, a3, a4, (uint64_t)&v23);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_223695268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223695284(_QWORD *a1, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *i;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *j;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  int64x2_t v61;
  int64x2_t v62;
  void *__p;
  uint64_t *v64;
  uint64_t v65;
  void *v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  uint64_t v71;
  __int128 v72[2];
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v14 = *a1;
  v15 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v16 = *a1;
  else
    v16 = v14 + 1;
  v17 = v16 >> 1;
  if (v15 >= 0)
    v18 = a1[2];
  else
    v18 = v15 + 1;
  v19 = v18 >> 1;
  v20 = *((_OWORD *)a1 + 1);
  v21 = v15 - 2 * v19 + v14 - 2 * v17;
  v73 = *(_OWORD *)a1;
  v75 = *((_QWORD *)&v20 + 1);
  *((_QWORD *)&v72[0] + 1) = *((_QWORD *)&v73 + 1);
  v72[1] = v20;
  v74 = v19 + v17 + ((v21 + ((v21 & 0x80) >> 7)) << 24 >> 25);
  v71 = 0;
  *(_QWORD *)&v72[0] = v74;
  v69 = 0;
  v70 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  __p = 0;
  v64 = 0;
  v65 = 0;
  sub_2233DD4BC(&v73, v72, a2, &v69, (char **)&v66, (char **)&__p);
  v23 = (uint64_t *)__p;
  v22 = v64;
  if (__p == v64)
    goto LABEL_32;
  v24 = 0x7FFFFFFFFFFFFFFFLL;
  v25 = 0x8000000000000000;
  v61 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v62 = vdupq_n_s64(0x8000000000000000);
  v26 = 0x8000000000000000;
  v27 = (char *)__p;
  v28 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v29 = *(_QWORD **)v27;
    v30 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v30 < v28)
    {
      v61.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v28 = v30;
      if (v30 <= v26)
      {
LABEL_12:
        v31 = v29[5];
        if (v31 >= v24)
          goto LABEL_13;
        goto LABEL_21;
      }
    }
    else if (v30 <= v26)
    {
      goto LABEL_12;
    }
    v62.i64[0] = v30;
    v26 = v30;
    v31 = v29[5];
    if (v31 >= v24)
    {
LABEL_13:
      if (v31 <= v25)
        goto LABEL_14;
      goto LABEL_22;
    }
LABEL_21:
    v61.i64[1] = v31;
    v24 = v31;
    if (v31 <= v25)
    {
LABEL_14:
      v32 = v29[6];
      if (v32 >= v28)
        goto LABEL_15;
      goto LABEL_23;
    }
LABEL_22:
    v62.i64[1] = v31;
    v25 = v31;
    v32 = v29[6];
    if (v32 >= v28)
    {
LABEL_15:
      if (v32 <= v26)
        goto LABEL_16;
      goto LABEL_24;
    }
LABEL_23:
    v61.i64[0] = v32;
    v28 = v32;
    if (v32 <= v26)
    {
LABEL_16:
      v33 = v29[7];
      if (v33 < v24)
        goto LABEL_25;
      goto LABEL_17;
    }
LABEL_24:
    v62.i64[0] = v32;
    v26 = v32;
    v33 = v29[7];
    if (v33 < v24)
    {
LABEL_25:
      v61.i64[1] = v33;
      v24 = v33;
      if (v33 <= v25)
        goto LABEL_9;
      goto LABEL_26;
    }
LABEL_17:
    if (v33 <= v25)
      goto LABEL_9;
LABEL_26:
    v62.i64[1] = v33;
    v25 = v33;
LABEL_9:
    v27 += 8;
  }
  while (v27 != (char *)v64);
  if (a3 <= 0x63 && ((char *)v64 - (_BYTE *)__p) >> 3 >= a4)
  {
    if (sub_2236959E8((__int128 *)v61.i8, &__p, a3 + 1, a4, a5, a6, a7, a8))
      goto LABEL_30;
    goto LABEL_98;
  }
  do
  {
    v36 = v23 + 1;
    if (v23 + 1 != v22)
    {
      for (i = v23 + 1; i != v22; ++i)
      {
        v38 = *v23;
        v39 = *i;
        if (*(_QWORD *)(*v23 + 48) >= *(_QWORD *)(*i + 32) && *(_QWORD *)(v38 + 32) <= *(_QWORD *)(v39 + 48))
        {
          v40 = *(_QWORD *)(v38 + 56) >= *(_QWORD *)(v39 + 40) && *(_QWORD *)(v38 + 40) <= *(_QWORD *)(v39 + 56);
          v41 = v40 && *(_BYTE *)(v38 + 96) == 0;
          if (v41 && *(_BYTE *)(v39 + 96) == 0)
          {
            if (!sub_223697E88(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v38, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v39, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
            v22 = v64;
          }
        }
      }
    }
    ++v23;
  }
  while (v36 != v22);
LABEL_30:
  if (sub_223695878((__int128 *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v69, a3, a4, a5, a6, a7, a8)
    && (sub_223695878((__int128 *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v66, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    v35 = (uint64_t *)v69;
    v34 = v70;
    if (a3 > 0x63 || ((char *)v70 - (_BYTE *)v69) >> 3 < a4)
    {
LABEL_73:
      while (v35 != v34)
      {
        v43 = v35++;
        if (v35 != v34)
        {
          v44 = v35;
          while (1)
          {
            v45 = *v43;
            v46 = *v44;
            if (*(_QWORD *)(*v43 + 48) >= *(_QWORD *)(*v44 + 32) && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_223697E88(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v45, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v46, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
                v34 = v70;
              }
            }
            if (++v44 == v34)
              goto LABEL_73;
          }
        }
      }
    }
    else if (!sub_2236959E8(&v73, &v69, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    v51 = (uint64_t *)v66;
    v50 = v67;
    if (a3 > 0x63 || ((char *)v67 - (_BYTE *)v66) >> 3 < a4)
    {
      if (v66 == v67)
      {
        v52 = 1;
      }
      else
      {
        do
        {
          v53 = v51++;
          if (v51 != v50)
          {
            for (j = v51; j != v50; ++j)
            {
              v55 = *v53;
              v56 = *j;
              if (*(_QWORD *)(*v53 + 48) >= *(_QWORD *)(*j + 32) && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
              {
                v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
                v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
                if (v58 && *(_BYTE *)(v56 + 96) == 0)
                {
                  if (!sub_223697E88(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v55, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v56, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
                  v50 = v67;
                }
              }
            }
          }
          v52 = 1;
        }
        while (v51 != v50);
      }
    }
    else
    {
      v52 = sub_2236959E8(v72, &v66, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    v52 = 0;
  }
  if (__p)
  {
    v64 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v66)
  {
    v67 = (uint64_t *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = (uint64_t *)v69;
    operator delete(v69);
  }
  return v52;
}

void sub_223695814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (!a21)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223695878(__int128 *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v13 = *a2;
  v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5)
    return sub_223696FEC(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  if (v13 != v12)
  {
    v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            v17 = *v13;
            v18 = *v16;
            if (*(_QWORD *)(*v13 + 48) >= *(_QWORD *)(*v16 + 32) && *(_QWORD *)(v17 + 32) <= *(_QWORD *)(v18 + 48))
            {
              v19 = *(_QWORD *)(v17 + 56) >= *(_QWORD *)(v18 + 40) && *(_QWORD *)(v17 + 40) <= *(_QWORD *)(v18 + 56);
              v20 = v19 && *(_BYTE *)(v17 + 96) == 0;
              if (v20 && *(_BYTE *)(v18 + 96) == 0)
              {
                result = sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v17, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v18, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32));
                if (!(_DWORD)result)
                  return result;
                v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_2236959E8(__int128 *a1, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *i;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *j;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  int64x2_t v60;
  int64x2_t v61;
  void *__p;
  uint64_t *v63;
  uint64_t v64;
  void *v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD v71[2];
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v15 = *((_QWORD *)a1 + 2);
  v14 = *((_QWORD *)a1 + 3);
  v16 = *((_QWORD *)a1 + 1);
  if (v16 >= 0)
    v17 = *((_QWORD *)a1 + 1);
  else
    v17 = v16 + 1;
  v18 = v17 >> 1;
  if (v14 >= 0)
    v19 = *((_QWORD *)a1 + 3);
  else
    v19 = v14 + 1;
  v20 = a1[1];
  v73 = *a1;
  v71[0] = v73;
  v72 = v20;
  v74 = v15;
  v75 = (v19 >> 1)
      + v18
      + ((int)(((_DWORD)v14
              - 2 * (v19 >> 1)
              + (_DWORD)v16
              - 2 * (_DWORD)v18
              + (((v14 - 2 * (v19 >> 1) + (_DWORD)v16 - 2 * (_DWORD)v18) & 0x80) >> 7)) << 24) >> 25);
  v71[1] = v75;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  __p = 0;
  v63 = 0;
  v64 = 0;
  sub_2233DD4BC(&v73, v71, a2, &v68, (char **)&v65, (char **)&__p);
  v22 = (uint64_t *)__p;
  v21 = v63;
  if (__p == v63)
    goto LABEL_32;
  v23 = 0x7FFFFFFFFFFFFFFFLL;
  v24 = 0x8000000000000000;
  v60 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v61 = vdupq_n_s64(0x8000000000000000);
  v25 = 0x8000000000000000;
  v26 = (char *)__p;
  v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v28 = *(_QWORD **)v26;
    v29 = *(_QWORD *)(*(_QWORD *)v26 + 32);
    if (v29 < v27)
    {
      v60.i64[0] = *(_QWORD *)(*(_QWORD *)v26 + 32);
      v27 = v29;
      if (v29 <= v25)
      {
LABEL_12:
        v30 = v28[5];
        if (v30 >= v23)
          goto LABEL_13;
        goto LABEL_21;
      }
    }
    else if (v29 <= v25)
    {
      goto LABEL_12;
    }
    v61.i64[0] = v29;
    v25 = v29;
    v30 = v28[5];
    if (v30 >= v23)
    {
LABEL_13:
      if (v30 <= v24)
        goto LABEL_14;
      goto LABEL_22;
    }
LABEL_21:
    v60.i64[1] = v30;
    v23 = v30;
    if (v30 <= v24)
    {
LABEL_14:
      v31 = v28[6];
      if (v31 >= v27)
        goto LABEL_15;
      goto LABEL_23;
    }
LABEL_22:
    v61.i64[1] = v30;
    v24 = v30;
    v31 = v28[6];
    if (v31 >= v27)
    {
LABEL_15:
      if (v31 <= v25)
        goto LABEL_16;
      goto LABEL_24;
    }
LABEL_23:
    v60.i64[0] = v31;
    v27 = v31;
    if (v31 <= v25)
    {
LABEL_16:
      v32 = v28[7];
      if (v32 < v23)
        goto LABEL_25;
      goto LABEL_17;
    }
LABEL_24:
    v61.i64[0] = v31;
    v25 = v31;
    v32 = v28[7];
    if (v32 < v23)
    {
LABEL_25:
      v60.i64[1] = v32;
      v23 = v32;
      if (v32 <= v24)
        goto LABEL_9;
      goto LABEL_26;
    }
LABEL_17:
    if (v32 <= v24)
      goto LABEL_9;
LABEL_26:
    v61.i64[1] = v32;
    v24 = v32;
LABEL_9:
    v26 += 8;
  }
  while (v26 != (char *)v63);
  if (a3 <= 0x63 && ((char *)v63 - (_BYTE *)__p) >> 3 >= a4)
  {
    if (sub_223695284(&v60, &__p, a3 + 1, a4, a5, a6, a7, a8))
      goto LABEL_30;
    goto LABEL_98;
  }
  do
  {
    v35 = v22 + 1;
    if (v22 + 1 != v21)
    {
      for (i = v22 + 1; i != v21; ++i)
      {
        v37 = *v22;
        v38 = *i;
        if (*(_QWORD *)(*v22 + 48) >= *(_QWORD *)(*i + 32) && *(_QWORD *)(v37 + 32) <= *(_QWORD *)(v38 + 48))
        {
          v39 = *(_QWORD *)(v37 + 56) >= *(_QWORD *)(v38 + 40) && *(_QWORD *)(v37 + 40) <= *(_QWORD *)(v38 + 56);
          v40 = v39 && *(_BYTE *)(v37 + 96) == 0;
          if (v40 && *(_BYTE *)(v38 + 96) == 0)
          {
            if (!sub_223697E88(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v37, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v38, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
            v21 = v63;
          }
        }
      }
    }
    ++v22;
  }
  while (v35 != v21);
LABEL_30:
  if (sub_223695FE0(v60.i64, (uint64_t **)&__p, (uint64_t **)&v68, a3, a4, a5, a6, a7, a8)
    && (sub_223695FE0(v60.i64, (uint64_t **)&__p, (uint64_t **)&v65, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    v34 = (uint64_t *)v68;
    v33 = v69;
    if (a3 > 0x63 || ((char *)v69 - (_BYTE *)v68) >> 3 < a4)
    {
LABEL_73:
      while (v34 != v33)
      {
        v42 = v34++;
        if (v34 != v33)
        {
          v43 = v34;
          while (1)
          {
            v44 = *v42;
            v45 = *v43;
            if (*(_QWORD *)(*v42 + 48) >= *(_QWORD *)(*v43 + 32) && *(_QWORD *)(v44 + 32) <= *(_QWORD *)(v45 + 48))
            {
              v46 = *(_QWORD *)(v44 + 56) >= *(_QWORD *)(v45 + 40) && *(_QWORD *)(v44 + 40) <= *(_QWORD *)(v45 + 56);
              v47 = v46 && *(_BYTE *)(v44 + 96) == 0;
              if (v47 && *(_BYTE *)(v45 + 96) == 0)
              {
                if (!sub_223697E88(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v44, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v45, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
                v33 = v69;
              }
            }
            if (++v43 == v33)
              goto LABEL_73;
          }
        }
      }
    }
    else if (!sub_223695284(&v73, &v68, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    v50 = (uint64_t *)v65;
    v49 = v66;
    if (a3 > 0x63 || ((char *)v66 - (_BYTE *)v65) >> 3 < a4)
    {
      if (v65 == v66)
      {
        v51 = 1;
      }
      else
      {
        do
        {
          v52 = v50++;
          if (v50 != v49)
          {
            for (j = v50; j != v49; ++j)
            {
              v54 = *v52;
              v55 = *j;
              if (*(_QWORD *)(*v52 + 48) >= *(_QWORD *)(*j + 32) && *(_QWORD *)(v54 + 32) <= *(_QWORD *)(v55 + 48))
              {
                v56 = *(_QWORD *)(v54 + 56) >= *(_QWORD *)(v55 + 40) && *(_QWORD *)(v54 + 40) <= *(_QWORD *)(v55 + 56);
                v57 = v56 && *(_BYTE *)(v54 + 96) == 0;
                if (v57 && *(_BYTE *)(v55 + 96) == 0)
                {
                  if (!sub_223697E88(*(_DWORD *)(a5 + 40), *(uint64_t **)a5, v54, *(_DWORD *)(a5 + 40), *(uint64_t **)a5, v55, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
                  v49 = v66;
                }
              }
            }
          }
          v51 = 1;
        }
        while (v50 != v49);
      }
    }
    else
    {
      v51 = sub_223695284(v71, &v65, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    v51 = 0;
  }
  if (__p)
  {
    v63 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    v66 = (uint64_t *)v65;
    operator delete(v65);
  }
  if (v68)
  {
    v69 = (uint64_t *)v68;
    operator delete(v68);
  }
  return v51;
}

void sub_223695F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (!a21)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223695FE0(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v13 = *a2;
  v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5)
    return sub_223696150(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  if (v13 != v12)
  {
    v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            v17 = *v13;
            v18 = *v16;
            if (*(_QWORD *)(*v13 + 48) >= *(_QWORD *)(*v16 + 32) && *(_QWORD *)(v17 + 32) <= *(_QWORD *)(v18 + 48))
            {
              v19 = *(_QWORD *)(v17 + 56) >= *(_QWORD *)(v18 + 40) && *(_QWORD *)(v17 + 40) <= *(_QWORD *)(v18 + 56);
              v20 = v19 && *(_BYTE *)(v17 + 96) == 0;
              if (v20 && *(_BYTE *)(v18 + 96) == 0)
              {
                result = sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v17, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v18, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32));
                if (!(_DWORD)result)
                  return result;
                v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_223696150(uint64_t *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  void *v50;
  uint64_t *v51;
  uint64_t *v52;
  void *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  BOOL v95;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  BOOL v102;
  uint64_t *v104;
  uint64_t *v105;
  void *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  BOOL v113;
  void *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  BOOL v122;
  int64x2_t v125;
  int64x2_t v126;
  void *__p;
  char *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;
  void *v136;
  uint64_t *v137;
  uint64_t v138;
  void *v139;
  uint64_t *v140;
  uint64_t v141;
  void *v142;
  uint64_t *v143;
  uint64_t v144;
  _QWORD v145[2];
  __int128 v146;
  __int128 v147;
  __int128 v148;

  v17 = *a1;
  v18 = a1[2];
  if (*a1 >= 0)
    v19 = *a1;
  else
    v19 = v17 + 1;
  v20 = v19 >> 1;
  v22 = *(_OWORD *)a1;
  v21 = *((_OWORD *)a1 + 1);
  v147 = *(_OWORD *)a1;
  v148 = v21;
  if (v18 >= 0)
    v23 = v18;
  else
    v23 = v18 + 1;
  v24 = v23 >> 1;
  v145[1] = *((_QWORD *)&v22 + 1);
  v146 = v21;
  v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(_QWORD *)&v148 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v145[0] = v148;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  __p = 0;
  v128 = 0;
  v129 = 0;
  sub_2233DD4BC(&v147, v145, a2, &v142, (char **)&v139, (char **)&v136);
  sub_2233DD4BC(&v147, v145, a3, &v133, (char **)&v130, (char **)&__p);
  v27 = (uint64_t *)v136;
  v26 = v137;
  if (v136 == v137)
    goto LABEL_147;
  v29 = (char *)__p;
  v28 = v128;
  if (a5 > ((char *)v137 - (_BYTE *)v136) >> 3 || a4 > 0x63 || (v128 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v128)
    {
      do
      {
        v44 = (uint64_t *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *v27;
            v46 = *v44;
            if (*(_QWORD *)(*v27 + 48) >= *(_QWORD *)(*v44 + 32) && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v45, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v46, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                v28 = v128;
              }
            }
            ++v44;
          }
          while (v44 != (uint64_t *)v28);
          v26 = v137;
        }
        ++v27;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v125 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v126 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = (_QWORD *)*v27;
    v35 = *(_QWORD *)(*v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v125.i64[0] = *(_QWORD *)(*v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v126.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v125.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v126.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v125.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v126.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v125.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v126.i64[1] = v38;
    v31 = v38;
LABEL_12:
    ++v27;
  }
  while (v27 != v137);
  while (v29 != v128)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v125.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v126.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v125.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v126.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v125.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v126.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v125.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v126.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_223696FEC(&v125, &v136, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_283;
LABEL_72:
  v50 = v134;
  if (a5 > ((_BYTE *)v134 - (_BYTE *)v133) >> 3)
  {
    v52 = (uint64_t *)v136;
    v51 = v137;
    goto LABEL_75;
  }
  v52 = (uint64_t *)v136;
  v51 = v137;
  if (a5 > ((_BYTE *)v131 - (_BYTE *)v130) >> 3 || a4 > 0x63 || ((char *)v137 - (_BYTE *)v136) >> 3 < a5)
  {
LABEL_75:
    if (v133 == v134 || v52 == v51)
    {
      if (v52 == v51)
        goto LABEL_147;
    }
    else
    {
      do
      {
        v54 = (uint64_t *)v133;
        if (v133 != v50)
        {
          do
          {
            v55 = *v52;
            v56 = *v54;
            if (*(_QWORD *)(*v52 + 48) >= *(_QWORD *)(*v54 + 32) && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
            {
              v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
              v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
              if (v58 && *(_BYTE *)(v56 + 96) == 0)
              {
                if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v55, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v56, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                v50 = v134;
              }
            }
            ++v54;
          }
          while (v54 != v50);
          v51 = v137;
        }
        ++v52;
      }
      while (v52 != v51);
      v52 = (uint64_t *)v136;
      if (v136 == v51)
        goto LABEL_147;
    }
    v53 = v131;
    if (v130 != v131)
    {
      do
      {
        v60 = (uint64_t *)v130;
        if (v130 != v53)
        {
          do
          {
            v61 = *v52;
            v62 = *v60;
            if (*(_QWORD *)(*v52 + 48) >= *(_QWORD *)(*v60 + 32) && *(_QWORD *)(v61 + 32) <= *(_QWORD *)(v62 + 48))
            {
              v63 = *(_QWORD *)(v61 + 56) >= *(_QWORD *)(v62 + 40) && *(_QWORD *)(v61 + 40) <= *(_QWORD *)(v62 + 56);
              v64 = v63 && *(_BYTE *)(v61 + 96) == 0;
              if (v64 && *(_BYTE *)(v62 + 96) == 0)
              {
                if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v61, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v62, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                v53 = v131;
              }
            }
            ++v60;
          }
          while (v60 != v53);
          v51 = v137;
        }
        ++v52;
      }
      while (v52 != v51);
    }
  }
  else
  {
    v125 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v126 = vdupq_n_s64(0x8000000000000000);
    if (v136 != v137)
    {
      v66 = 0x7FFFFFFFFFFFFFFFLL;
      v67 = 0x8000000000000000;
      v68 = 0x8000000000000000;
      v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v70 = (_QWORD *)*v52;
        v71 = *(_QWORD *)(*v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            v72 = v70[5];
            if (v72 < v66)
              goto LABEL_129;
            goto LABEL_137;
          }
        }
        else
        {
          v125.i64[0] = *(_QWORD *)(*v52 + 32);
          v69 = v71;
          if (v71 <= v68)
            goto LABEL_128;
        }
        v126.i64[0] = v71;
        v68 = v71;
        v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v125.i64[1] = v72;
          v66 = v72;
          if (v72 <= v67)
            goto LABEL_130;
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          v73 = v70[6];
          if (v73 < v69)
            goto LABEL_131;
          goto LABEL_139;
        }
LABEL_138:
        v126.i64[1] = v72;
        v67 = v72;
        v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v125.i64[0] = v73;
          v69 = v73;
          if (v73 <= v68)
            goto LABEL_132;
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          v74 = v70[7];
          if (v74 < v66)
            goto LABEL_133;
          goto LABEL_141;
        }
LABEL_140:
        v126.i64[0] = v73;
        v68 = v73;
        v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v125.i64[1] = v74;
          v66 = v74;
          if (v74 > v67)
            goto LABEL_142;
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v126.i64[1] = v74;
          v67 = v74;
        }
LABEL_125:
        ++v52;
      }
      while (v52 != v137);
    }
    if (!sub_223696FEC(&v125, &v136, &v133, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_223696FEC(&v125, &v136, &v130, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_283;
    }
  }
LABEL_147:
  v76 = (char *)__p;
  v75 = v128;
  if (__p == v128)
    goto LABEL_227;
  v78 = (uint64_t *)v142;
  v77 = v143;
  if (a5 > ((char *)v143 - (_BYTE *)v142) >> 3
    || a5 > ((char *)v140 - (_BYTE *)v139) >> 3
    || a4 > 0x63
    || (v128 - (_BYTE *)__p) >> 3 < a5)
  {
    if (v142 == v143)
    {
      v89 = (uint64_t *)v139;
      v88 = v140;
      if (v139 != v140 && __p != v128)
        goto LABEL_207;
    }
    else
    {
      do
      {
        v91 = (uint64_t *)__p;
        if (__p != v75)
        {
          do
          {
            v92 = *v78;
            v93 = *v91;
            if (*(_QWORD *)(*v78 + 48) >= *(_QWORD *)(*v91 + 32) && *(_QWORD *)(v92 + 32) <= *(_QWORD *)(v93 + 48))
            {
              v94 = *(_QWORD *)(v92 + 56) >= *(_QWORD *)(v93 + 40) && *(_QWORD *)(v92 + 40) <= *(_QWORD *)(v93 + 56);
              v95 = v94 && *(_BYTE *)(v92 + 96) == 0;
              if (v95 && *(_BYTE *)(v93 + 96) == 0)
              {
                if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v92, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v93, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                v75 = v128;
              }
            }
            ++v91;
          }
          while (v91 != (uint64_t *)v75);
          v77 = v143;
        }
        ++v78;
      }
      while (v78 != v77);
      v89 = (uint64_t *)v139;
      v88 = v140;
      if (v139 != v140 && __p != v75)
      {
        do
        {
LABEL_207:
          v98 = (uint64_t *)__p;
          if (__p != v75)
          {
            do
            {
              v99 = *v89;
              v100 = *v98;
              if (*(_QWORD *)(*v89 + 48) >= *(_QWORD *)(*v98 + 32) && *(_QWORD *)(v99 + 32) <= *(_QWORD *)(v100 + 48))
              {
                v101 = *(_QWORD *)(v99 + 56) >= *(_QWORD *)(v100 + 40)
                    && *(_QWORD *)(v99 + 40) <= *(_QWORD *)(v100 + 56);
                v102 = v101 && *(_BYTE *)(v99 + 96) == 0;
                if (v102 && *(_BYTE *)(v100 + 96) == 0)
                {
                  if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v99, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v100, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                  v75 = v128;
                }
              }
              ++v98;
            }
            while (v98 != (uint64_t *)v75);
            v88 = v140;
          }
          ++v89;
        }
        while (v89 != v88);
      }
    }
LABEL_227:
    v105 = (uint64_t *)v142;
    v104 = v143;
    if (a5 > ((char *)v143 - (_BYTE *)v142) >> 3 || a4 > 0x63 || ((_BYTE *)v134 - (_BYTE *)v133) >> 3 < a5)
    {
      if (v142 != v143)
      {
        v106 = v134;
        if (v133 != v134)
        {
          do
          {
            v109 = (uint64_t *)v133;
            if (v133 != v106)
            {
              do
              {
                v110 = *v105;
                v111 = *v109;
                if (*(_QWORD *)(*v105 + 48) >= *(_QWORD *)(*v109 + 32)
                  && *(_QWORD *)(v110 + 32) <= *(_QWORD *)(v111 + 48))
                {
                  v112 = *(_QWORD *)(v110 + 56) >= *(_QWORD *)(v111 + 40)
                      && *(_QWORD *)(v110 + 40) <= *(_QWORD *)(v111 + 56);
                  v113 = v112 && *(_BYTE *)(v110 + 96) == 0;
                  if (v113 && *(_BYTE *)(v111 + 96) == 0)
                  {
                    if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v110, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v111, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                    v106 = v134;
                  }
                }
                ++v109;
              }
              while (v109 != v106);
              v104 = v143;
            }
            ++v105;
          }
          while (v105 != v104);
        }
      }
    }
    else if ((sub_223696FEC(&v147, &v142, &v133, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_283;
    }
    v108 = (uint64_t *)v139;
    v107 = v140;
    if (a5 > ((char *)v140 - (_BYTE *)v139) >> 3 || a4 > 0x63 || ((_BYTE *)v131 - (_BYTE *)v130) >> 3 < a5)
    {
      if (v139 != v140)
      {
        v115 = v131;
        if (v130 != v131)
        {
          do
          {
            v118 = (uint64_t *)v130;
            if (v130 != v115)
            {
              do
              {
                v119 = *v108;
                v120 = *v118;
                if (*(_QWORD *)(*v108 + 48) >= *(_QWORD *)(*v118 + 32)
                  && *(_QWORD *)(v119 + 32) <= *(_QWORD *)(v120 + 48))
                {
                  v121 = *(_QWORD *)(v119 + 56) >= *(_QWORD *)(v120 + 40)
                      && *(_QWORD *)(v119 + 40) <= *(_QWORD *)(v120 + 56);
                  v122 = v121 && *(_BYTE *)(v119 + 96) == 0;
                  if (v122 && *(_BYTE *)(v120 + 96) == 0)
                  {
                    if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v119, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v120, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                    v115 = v131;
                  }
                }
                ++v118;
              }
              while (v118 != v115);
              v107 = v140;
            }
            ++v108;
          }
          while (v108 != v107);
        }
      }
    }
    else if ((sub_223696FEC(v145, &v139, &v130, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_283;
    }
    v116 = 1;
    v117 = (char *)__p;
    if (__p)
      goto LABEL_284;
    goto LABEL_285;
  }
  v79 = 0x7FFFFFFFFFFFFFFFLL;
  v80 = 0x8000000000000000;
  v125 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v126 = vdupq_n_s64(0x8000000000000000);
  v81 = 0x8000000000000000;
  v82 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v83 = *(_QWORD **)v76;
    v84 = *(_QWORD *)(*(_QWORD *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 <= v81)
      {
LABEL_156:
        v85 = v83[5];
        if (v85 < v79)
          goto LABEL_157;
        goto LABEL_165;
      }
    }
    else
    {
      v125.i64[0] = *(_QWORD *)(*(_QWORD *)v76 + 32);
      v82 = v84;
      if (v84 <= v81)
        goto LABEL_156;
    }
    v126.i64[0] = v84;
    v81 = v84;
    v85 = v83[5];
    if (v85 < v79)
    {
LABEL_157:
      v125.i64[1] = v85;
      v79 = v85;
      if (v85 <= v80)
        goto LABEL_158;
      goto LABEL_166;
    }
LABEL_165:
    if (v85 <= v80)
    {
LABEL_158:
      v86 = v83[6];
      if (v86 < v82)
        goto LABEL_159;
      goto LABEL_167;
    }
LABEL_166:
    v126.i64[1] = v85;
    v80 = v85;
    v86 = v83[6];
    if (v86 < v82)
    {
LABEL_159:
      v125.i64[0] = v86;
      v82 = v86;
      if (v86 <= v81)
        goto LABEL_160;
      goto LABEL_168;
    }
LABEL_167:
    if (v86 <= v81)
    {
LABEL_160:
      v87 = v83[7];
      if (v87 >= v79)
        goto LABEL_169;
      goto LABEL_161;
    }
LABEL_168:
    v126.i64[0] = v86;
    v81 = v86;
    v87 = v83[7];
    if (v87 >= v79)
    {
LABEL_169:
      if (v87 <= v80)
        goto LABEL_153;
      goto LABEL_170;
    }
LABEL_161:
    v125.i64[1] = v87;
    v79 = v87;
    if (v87 <= v80)
      goto LABEL_153;
LABEL_170:
    v126.i64[1] = v87;
    v80 = v87;
LABEL_153:
    v76 += 8;
  }
  while (v76 != v128);
  if (sub_223696FEC(&v125, &v142, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    && (sub_223696FEC(&v125, &v139, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
  {
    goto LABEL_227;
  }
LABEL_283:
  v116 = 0;
  v117 = (char *)__p;
  if (__p)
  {
LABEL_284:
    v128 = v117;
    operator delete(v117);
  }
LABEL_285:
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  if (v136)
  {
    v137 = (uint64_t *)v136;
    operator delete(v136);
  }
  if (v139)
  {
    v140 = (uint64_t *)v139;
    operator delete(v139);
  }
  if (v142)
  {
    v143 = (uint64_t *)v142;
    operator delete(v142);
  }
  return v116;
}

void sub_223696F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223696FEC(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  void *v50;
  uint64_t *v51;
  uint64_t *v52;
  void *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  BOOL v95;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  BOOL v102;
  uint64_t *v104;
  uint64_t *v105;
  void *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  BOOL v113;
  void *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  BOOL v122;
  int64x2_t v125;
  int64x2_t v126;
  void *__p;
  char *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;
  void *v136;
  uint64_t *v137;
  uint64_t v138;
  void *v139;
  uint64_t *v140;
  uint64_t v141;
  void *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145[2];
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;

  v18 = *((_QWORD *)a1 + 2);
  v17 = *((_QWORD *)a1 + 3);
  v19 = *((_QWORD *)a1 + 1);
  if (v19 >= 0)
    v20 = *((_QWORD *)a1 + 1);
  else
    v20 = v19 + 1;
  v21 = v20 >> 1;
  v22 = *a1;
  v146 = a1[1];
  v147 = v22;
  if (v17 >= 0)
    v23 = v17;
  else
    v23 = v17 + 1;
  v24 = v23 >> 1;
  v145[0] = v22;
  v25 = v17 - 2 * v24 + v19 - 2 * v21;
  v148 = v18;
  v149 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v145[1] = v149;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  __p = 0;
  v128 = 0;
  v129 = 0;
  sub_2233DD4BC(&v147, v145, a2, &v142, (char **)&v139, (char **)&v136);
  sub_2233DD4BC(&v147, v145, a3, &v133, (char **)&v130, (char **)&__p);
  v27 = (uint64_t *)v136;
  v26 = v137;
  if (v136 == v137)
    goto LABEL_147;
  v29 = (char *)__p;
  v28 = v128;
  if (a5 > ((char *)v137 - (_BYTE *)v136) >> 3 || a4 > 0x63 || (v128 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v128)
    {
      do
      {
        v44 = (uint64_t *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *v27;
            v46 = *v44;
            if (*(_QWORD *)(*v27 + 48) >= *(_QWORD *)(*v44 + 32) && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v45, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v46, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                v28 = v128;
              }
            }
            ++v44;
          }
          while (v44 != (uint64_t *)v28);
          v26 = v137;
        }
        ++v27;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v125 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v126 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = (_QWORD *)*v27;
    v35 = *(_QWORD *)(*v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v125.i64[0] = *(_QWORD *)(*v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v126.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v125.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v126.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v125.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v126.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v125.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v126.i64[1] = v38;
    v31 = v38;
LABEL_12:
    ++v27;
  }
  while (v27 != v137);
  while (v29 != v128)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v125.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v126.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v125.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v126.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v125.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v126.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v125.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v126.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_223696150(v125.i64, &v136, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_283;
LABEL_72:
  v50 = v134;
  if (a5 > ((_BYTE *)v134 - (_BYTE *)v133) >> 3)
  {
    v52 = (uint64_t *)v136;
    v51 = v137;
    goto LABEL_75;
  }
  v52 = (uint64_t *)v136;
  v51 = v137;
  if (a5 > ((_BYTE *)v131 - (_BYTE *)v130) >> 3 || a4 > 0x63 || ((char *)v137 - (_BYTE *)v136) >> 3 < a5)
  {
LABEL_75:
    if (v133 == v134 || v52 == v51)
    {
      if (v52 == v51)
        goto LABEL_147;
    }
    else
    {
      do
      {
        v54 = (uint64_t *)v133;
        if (v133 != v50)
        {
          do
          {
            v55 = *v52;
            v56 = *v54;
            if (*(_QWORD *)(*v52 + 48) >= *(_QWORD *)(*v54 + 32) && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
            {
              v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
              v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
              if (v58 && *(_BYTE *)(v56 + 96) == 0)
              {
                if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v55, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v56, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                v50 = v134;
              }
            }
            ++v54;
          }
          while (v54 != v50);
          v51 = v137;
        }
        ++v52;
      }
      while (v52 != v51);
      v52 = (uint64_t *)v136;
      if (v136 == v51)
        goto LABEL_147;
    }
    v53 = v131;
    if (v130 != v131)
    {
      do
      {
        v60 = (uint64_t *)v130;
        if (v130 != v53)
        {
          do
          {
            v61 = *v52;
            v62 = *v60;
            if (*(_QWORD *)(*v52 + 48) >= *(_QWORD *)(*v60 + 32) && *(_QWORD *)(v61 + 32) <= *(_QWORD *)(v62 + 48))
            {
              v63 = *(_QWORD *)(v61 + 56) >= *(_QWORD *)(v62 + 40) && *(_QWORD *)(v61 + 40) <= *(_QWORD *)(v62 + 56);
              v64 = v63 && *(_BYTE *)(v61 + 96) == 0;
              if (v64 && *(_BYTE *)(v62 + 96) == 0)
              {
                if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v61, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v62, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                v53 = v131;
              }
            }
            ++v60;
          }
          while (v60 != v53);
          v51 = v137;
        }
        ++v52;
      }
      while (v52 != v51);
    }
  }
  else
  {
    v125 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v126 = vdupq_n_s64(0x8000000000000000);
    if (v136 != v137)
    {
      v66 = 0x7FFFFFFFFFFFFFFFLL;
      v67 = 0x8000000000000000;
      v68 = 0x8000000000000000;
      v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v70 = (_QWORD *)*v52;
        v71 = *(_QWORD *)(*v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            v72 = v70[5];
            if (v72 < v66)
              goto LABEL_129;
            goto LABEL_137;
          }
        }
        else
        {
          v125.i64[0] = *(_QWORD *)(*v52 + 32);
          v69 = v71;
          if (v71 <= v68)
            goto LABEL_128;
        }
        v126.i64[0] = v71;
        v68 = v71;
        v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v125.i64[1] = v72;
          v66 = v72;
          if (v72 <= v67)
            goto LABEL_130;
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          v73 = v70[6];
          if (v73 < v69)
            goto LABEL_131;
          goto LABEL_139;
        }
LABEL_138:
        v126.i64[1] = v72;
        v67 = v72;
        v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v125.i64[0] = v73;
          v69 = v73;
          if (v73 <= v68)
            goto LABEL_132;
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          v74 = v70[7];
          if (v74 < v66)
            goto LABEL_133;
          goto LABEL_141;
        }
LABEL_140:
        v126.i64[0] = v73;
        v68 = v73;
        v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v125.i64[1] = v74;
          v66 = v74;
          if (v74 > v67)
            goto LABEL_142;
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v126.i64[1] = v74;
          v67 = v74;
        }
LABEL_125:
        ++v52;
      }
      while (v52 != v137);
    }
    if (!sub_223696150(v125.i64, &v136, &v133, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_223696150(v125.i64, &v136, &v130, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_283;
    }
  }
LABEL_147:
  v76 = (char *)__p;
  v75 = v128;
  if (__p == v128)
    goto LABEL_227;
  v78 = (uint64_t *)v142;
  v77 = v143;
  if (a5 > ((char *)v143 - (_BYTE *)v142) >> 3
    || a5 > ((char *)v140 - (_BYTE *)v139) >> 3
    || a4 > 0x63
    || (v128 - (_BYTE *)__p) >> 3 < a5)
  {
    if (v142 == v143)
    {
      v89 = (uint64_t *)v139;
      v88 = v140;
      if (v139 != v140 && __p != v128)
        goto LABEL_207;
    }
    else
    {
      do
      {
        v91 = (uint64_t *)__p;
        if (__p != v75)
        {
          do
          {
            v92 = *v78;
            v93 = *v91;
            if (*(_QWORD *)(*v78 + 48) >= *(_QWORD *)(*v91 + 32) && *(_QWORD *)(v92 + 32) <= *(_QWORD *)(v93 + 48))
            {
              v94 = *(_QWORD *)(v92 + 56) >= *(_QWORD *)(v93 + 40) && *(_QWORD *)(v92 + 40) <= *(_QWORD *)(v93 + 56);
              v95 = v94 && *(_BYTE *)(v92 + 96) == 0;
              if (v95 && *(_BYTE *)(v93 + 96) == 0)
              {
                if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v92, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v93, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                v75 = v128;
              }
            }
            ++v91;
          }
          while (v91 != (uint64_t *)v75);
          v77 = v143;
        }
        ++v78;
      }
      while (v78 != v77);
      v89 = (uint64_t *)v139;
      v88 = v140;
      if (v139 != v140 && __p != v75)
      {
        do
        {
LABEL_207:
          v98 = (uint64_t *)__p;
          if (__p != v75)
          {
            do
            {
              v99 = *v89;
              v100 = *v98;
              if (*(_QWORD *)(*v89 + 48) >= *(_QWORD *)(*v98 + 32) && *(_QWORD *)(v99 + 32) <= *(_QWORD *)(v100 + 48))
              {
                v101 = *(_QWORD *)(v99 + 56) >= *(_QWORD *)(v100 + 40)
                    && *(_QWORD *)(v99 + 40) <= *(_QWORD *)(v100 + 56);
                v102 = v101 && *(_BYTE *)(v99 + 96) == 0;
                if (v102 && *(_BYTE *)(v100 + 96) == 0)
                {
                  if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v99, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v100, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                  v75 = v128;
                }
              }
              ++v98;
            }
            while (v98 != (uint64_t *)v75);
            v88 = v140;
          }
          ++v89;
        }
        while (v89 != v88);
      }
    }
LABEL_227:
    v105 = (uint64_t *)v142;
    v104 = v143;
    if (a5 > ((char *)v143 - (_BYTE *)v142) >> 3 || a4 > 0x63 || ((_BYTE *)v134 - (_BYTE *)v133) >> 3 < a5)
    {
      if (v142 != v143)
      {
        v106 = v134;
        if (v133 != v134)
        {
          do
          {
            v109 = (uint64_t *)v133;
            if (v133 != v106)
            {
              do
              {
                v110 = *v105;
                v111 = *v109;
                if (*(_QWORD *)(*v105 + 48) >= *(_QWORD *)(*v109 + 32)
                  && *(_QWORD *)(v110 + 32) <= *(_QWORD *)(v111 + 48))
                {
                  v112 = *(_QWORD *)(v110 + 56) >= *(_QWORD *)(v111 + 40)
                      && *(_QWORD *)(v110 + 40) <= *(_QWORD *)(v111 + 56);
                  v113 = v112 && *(_BYTE *)(v110 + 96) == 0;
                  if (v113 && *(_BYTE *)(v111 + 96) == 0)
                  {
                    if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v110, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v111, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                    v106 = v134;
                  }
                }
                ++v109;
              }
              while (v109 != v106);
              v104 = v143;
            }
            ++v105;
          }
          while (v105 != v104);
        }
      }
    }
    else if ((sub_223696150((uint64_t *)&v147, &v142, &v133, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_283;
    }
    v108 = (uint64_t *)v139;
    v107 = v140;
    if (a5 > ((char *)v140 - (_BYTE *)v139) >> 3 || a4 > 0x63 || ((_BYTE *)v131 - (_BYTE *)v130) >> 3 < a5)
    {
      if (v139 != v140)
      {
        v115 = v131;
        if (v130 != v131)
        {
          do
          {
            v118 = (uint64_t *)v130;
            if (v130 != v115)
            {
              do
              {
                v119 = *v108;
                v120 = *v118;
                if (*(_QWORD *)(*v108 + 48) >= *(_QWORD *)(*v118 + 32)
                  && *(_QWORD *)(v119 + 32) <= *(_QWORD *)(v120 + 48))
                {
                  v121 = *(_QWORD *)(v119 + 56) >= *(_QWORD *)(v120 + 40)
                      && *(_QWORD *)(v119 + 40) <= *(_QWORD *)(v120 + 56);
                  v122 = v121 && *(_BYTE *)(v119 + 96) == 0;
                  if (v122 && *(_BYTE *)(v120 + 96) == 0)
                  {
                    if (!sub_223697E88(*(_DWORD *)(a6 + 40), *(uint64_t **)a6, v119, *(_DWORD *)(a6 + 40), *(uint64_t **)a6, v120, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_283;
                    v115 = v131;
                  }
                }
                ++v118;
              }
              while (v118 != v115);
              v107 = v140;
            }
            ++v108;
          }
          while (v108 != v107);
        }
      }
    }
    else if ((sub_223696150(v145, &v139, &v130, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_283;
    }
    v116 = 1;
    v117 = (char *)__p;
    if (__p)
      goto LABEL_284;
    goto LABEL_285;
  }
  v79 = 0x7FFFFFFFFFFFFFFFLL;
  v80 = 0x8000000000000000;
  v125 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v126 = vdupq_n_s64(0x8000000000000000);
  v81 = 0x8000000000000000;
  v82 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v83 = *(_QWORD **)v76;
    v84 = *(_QWORD *)(*(_QWORD *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 <= v81)
      {
LABEL_156:
        v85 = v83[5];
        if (v85 < v79)
          goto LABEL_157;
        goto LABEL_165;
      }
    }
    else
    {
      v125.i64[0] = *(_QWORD *)(*(_QWORD *)v76 + 32);
      v82 = v84;
      if (v84 <= v81)
        goto LABEL_156;
    }
    v126.i64[0] = v84;
    v81 = v84;
    v85 = v83[5];
    if (v85 < v79)
    {
LABEL_157:
      v125.i64[1] = v85;
      v79 = v85;
      if (v85 <= v80)
        goto LABEL_158;
      goto LABEL_166;
    }
LABEL_165:
    if (v85 <= v80)
    {
LABEL_158:
      v86 = v83[6];
      if (v86 < v82)
        goto LABEL_159;
      goto LABEL_167;
    }
LABEL_166:
    v126.i64[1] = v85;
    v80 = v85;
    v86 = v83[6];
    if (v86 < v82)
    {
LABEL_159:
      v125.i64[0] = v86;
      v82 = v86;
      if (v86 <= v81)
        goto LABEL_160;
      goto LABEL_168;
    }
LABEL_167:
    if (v86 <= v81)
    {
LABEL_160:
      v87 = v83[7];
      if (v87 >= v79)
        goto LABEL_169;
      goto LABEL_161;
    }
LABEL_168:
    v126.i64[0] = v86;
    v81 = v86;
    v87 = v83[7];
    if (v87 >= v79)
    {
LABEL_169:
      if (v87 <= v80)
        goto LABEL_153;
      goto LABEL_170;
    }
LABEL_161:
    v125.i64[1] = v87;
    v79 = v87;
    if (v87 <= v80)
      goto LABEL_153;
LABEL_170:
    v126.i64[1] = v87;
    v80 = v87;
LABEL_153:
    v76 += 8;
  }
  while (v76 != v128);
  if (sub_223696150(v125.i64, &v142, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    && (sub_223696150(v125.i64, &v139, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
  {
    goto LABEL_227;
  }
LABEL_283:
  v116 = 0;
  v117 = (char *)__p;
  if (__p)
  {
LABEL_284:
    v128 = v117;
    operator delete(v117);
  }
LABEL_285:
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  if (v136)
  {
    v137 = (uint64_t *)v136;
    operator delete(v136);
  }
  if (v139)
  {
    v140 = (uint64_t *)v139;
    operator delete(v139);
  }
  if (v142)
  {
    v143 = (uint64_t *)v142;
    operator delete(v142);
  }
  return v116;
}

void sub_223697DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223697E88(int a1, uint64_t *a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, _BYTE *a12)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  __int128 *v114;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  char v123;
  uint64_t v124;
  __int16 v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  char v159;
  char v160;
  uint64_t v161;
  __int128 v162;
  int v163;
  _OWORD v164[2];
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  char v189;
  char v190;
  uint64_t v191;
  __int128 v192;
  int v193;
  _OWORD v194[2];
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  _QWORD v208[5];
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  _QWORD v212[5];
  __int128 v213;
  __int128 v214;
  uint64_t v215;

  if (*(_BYTE *)(a3 + 96) && (unint64_t)(*(_QWORD *)(a3 + 80) + 1) < *(_QWORD *)(a3 + 88)
    || *(_BYTE *)(a6 + 96) && (unint64_t)(*(_QWORD *)(a6 + 80) + 1) < *(_QWORD *)(a6 + 88))
  {
    return 1;
  }
  v14 = *a2;
  v15 = a2[1];
  v16 = v15 - *a2;
  v17 = v16 >> 3;
  if (v15 == *a2)
    v18 = 0;
  else
    v18 = v17 + 1;
  v212[0] = *a2;
  v212[1] = v14;
  v212[2] = v15;
  v212[3] = v16 >> 3;
  v212[4] = 0;
  *(_QWORD *)&v213 = v15;
  *((_QWORD *)&v213 + 1) = v14;
  *(_QWORD *)&v214 = v15;
  *((_QWORD *)&v214 + 1) = v16 >> 3;
  v215 = v18;
  v109 = v18;
  v20 = *a5;
  v19 = a5[1];
  v21 = v19 - *a5;
  if (v19 == *a5)
    v22 = 0;
  else
    v22 = (v21 >> 3) + 1;
  v208[0] = *a5;
  v208[1] = v20;
  v208[2] = v19;
  v208[3] = v21 >> 3;
  v208[4] = 0;
  *(_QWORD *)&v209 = v19;
  *((_QWORD *)&v209 + 1) = v20;
  v118 = v21 >> 3;
  v119 = v19;
  *(_QWORD *)&v210 = v19;
  *((_QWORD *)&v210 + 1) = v21 >> 3;
  v120 = v22;
  v211 = v22;
  v206 = v213;
  v207 = v214;
  v204 = v209;
  v205 = v210;
  v23 = *(_DWORD *)a3;
  v103 = *(_DWORD *)a6;
  v203 = *(_QWORD *)(a3 + 64);
  v202 = *(_QWORD *)(a3 + 104);
  v201 = 0;
  v200 = 0u;
  v199 = 0u;
  v198 = 0;
  v197 = 0u;
  v196 = 0u;
  v195 = 0;
  memset(v194, 0, sizeof(v194));
  v97 = (uint64_t *)(a6 + 32);
  sub_2233E07A8(a3, v212, (uint64_t *)&v199, (uint64_t)&v196, (uint64_t *)v194, &v203, &v202, v23, (uint64_t *)(a6 + 32), a10);
  v24 = v197;
  v25 = v198;
  v26 = v198 + 1;
  if (v198 + 1 >= *((uint64_t *)&v197 + 1))
  {
    v27 = v197;
    if (v198 < *((uint64_t *)&v197 + 1))
      v27 = *((_QWORD *)&v196 + 1) + 8 * (v26 % *((_QWORD *)&v197 + 1));
  }
  else
  {
    v27 = v196 + 8;
  }
  if (v26 == v109)
  {
    if (v16 < 9)
    {
      v27 = v15;
      if (v16 >= 1)
        v27 = v14 + 8 * (1 - v17);
    }
    else
    {
      v27 = v14 + 8;
    }
    v28 = v198 != 0;
    if (!v198)
      v27 = v14;
    v29 = v16 >> 3;
    v107 = v14;
    v108 = v15;
  }
  else
  {
    v28 = v198 + 1;
    v29 = *((_QWORD *)&v197 + 1);
    v107 = *((_QWORD *)&v196 + 1);
    v108 = v197;
  }
  v174 = v196;
  v175 = v197;
  v176 = v198++;
  if (v26 >= *((uint64_t *)&v197 + 1))
  {
    if (v25 < *((uint64_t *)&v197 + 1))
      v24 = *((_QWORD *)&v196 + 1) + 8 * (v26 % *((_QWORD *)&v197 + 1));
  }
  else
  {
    v24 = v196 + 8;
  }
  *(_QWORD *)&v196 = v24;
  v199 = v174;
  v200 = v175;
  v201 = v176;
  v30 = v28 + 1;
  if (v28 + 1 >= v29)
  {
    v31 = v108;
    v32 = a3;
    if (v28 >= v29)
    {
      v33 = v28 + 1;
      if (v30 == v109)
        goto LABEL_37;
    }
    else
    {
      v31 = v107 + 8 * (v30 % v29);
      v32 = a3;
      v33 = v28 + 1;
      if (v30 == v109)
        goto LABEL_37;
    }
LABEL_31:
    result = 1;
    if (v26 == v195)
      return result;
LABEL_45:
    v110 = v33;
    v111 = (uint64_t *)(v32 + 32);
    v101 = -v23;
    v114 = (__int128 *)(a10 + 8);
    v35 = v20 + 8 * (1 - v118);
    v113 = -v103;
    v36 = (float *)v199;
    if (v21 <= 0)
      v35 = v119;
    if (v21 > 8)
      v35 = v20 + 8;
    v112 = v35;
    if (v16 <= 0)
      v37 = v15;
    else
      v37 = v14 + 8 * (1 - v17);
    if (v16 > 8)
      v37 = v14 + 8;
    v96 = v37;
    v98 = v16 >> 3;
    v99 = v15;
    v38 = v29;
    v39 = v31;
    v100 = v14;
    while (1)
    {
      v40 = (float)((float)(v36[1] - *(float *)(a10 + 4)) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 16);
      if (v40 >= 0.0)
        v41 = 0.5;
      else
        v41 = -0.5;
      sub_2233DC31C(v40 + v41);
      v42 = (float)((float)(*v36 - *(float *)a10) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 8);
      if (v42 >= 0.0)
        v43 = 0.5;
      else
        v43 = -0.5;
      v44 = v42 + v43;
      sub_2233DC31C(v42 + v43);
      v45 = ceilf(v44);
      v46 = floorf(v44);
      if (v44 >= 0.0)
        v45 = v46;
      v47 = (uint64_t)v45;
      if (v101 == 1)
      {
        if (*v97 > v47)
          return 1;
      }
      else if (v101 == -1 && *(_QWORD *)(a6 + 48) < v47)
      {
        return 1;
      }
      v186 = v206;
      v187 = v207;
      *(_QWORD *)&v174 = a3;
      *((_QWORD *)&v174 + 1) = v203;
      *(_QWORD *)&v175 = v199;
      *((_QWORD *)&v175 + 1) = v196;
      v176 = v39;
      v177 = v107;
      v178 = v108;
      v179 = v38;
      v180 = v110;
      v181 = v14;
      v182 = v14;
      v183 = v15;
      v184 = v17;
      v185 = 0;
      v188 = v109;
      v189 = 1;
      v190 = 0;
      v191 = *(_QWORD *)a10;
      v192 = *v114;
      v193 = *(_DWORD *)(a10 + 24);
      v173 = *(_QWORD *)(a6 + 64);
      v172 = *(_QWORD *)(a6 + 104);
      v171 = 0;
      v169 = 0u;
      v170 = 0u;
      v168 = 0;
      v166 = 0u;
      v167 = 0u;
      v165 = 0;
      memset(v164, 0, sizeof(v164));
      sub_2233E07A8(a6, v208, (uint64_t *)&v169, (uint64_t)&v166, (uint64_t *)v164, &v173, &v172, v103, v111, a10);
      v48 = v167;
      v49 = v168;
      v50 = v168 + 1;
      if (v168 + 1 >= *((uint64_t *)&v167 + 1))
      {
        v51 = v167;
        if (v168 < *((uint64_t *)&v167 + 1))
          v51 = *((_QWORD *)&v166 + 1) + 8 * (v50 % *((_QWORD *)&v167 + 1));
      }
      else
      {
        v51 = v166 + 8;
      }
      v105 = v39;
      v106 = v38;
      if (v50 == v120)
      {
        v52 = v168 != 0;
        v51 = v112;
        if (!v168)
          v51 = v20;
        v54 = v118;
        v53 = v119;
        v55 = v20;
      }
      else
      {
        v52 = v168 + 1;
        v54 = *((_QWORD *)&v167 + 1);
        v53 = v167;
        v55 = *((_QWORD *)&v166 + 1);
      }
      v144 = v166;
      v145 = v167;
      v146 = v168++;
      if (v50 >= *((uint64_t *)&v167 + 1))
      {
        if (v49 < *((uint64_t *)&v167 + 1))
          v48 = *((_QWORD *)&v166 + 1) + 8 * (v50 % *((_QWORD *)&v167 + 1));
      }
      else
      {
        v48 = v166 + 8;
      }
      *(_QWORD *)&v166 = v48;
      v169 = v144;
      v170 = v145;
      v171 = v146;
      v56 = v52 + 1;
      if (v52 + 1 >= v54)
      {
        v57 = v53;
        if (v52 >= v54)
        {
          if (v56 != v120)
          {
LABEL_84:
            if (v50 != v165)
              break;
            goto LABEL_94;
          }
        }
        else
        {
          v57 = v55 + 8 * (v56 % v54);
          if (v56 != v120)
            goto LABEL_84;
        }
      }
      else
      {
        v57 = v51 + 8;
        if (v56 != v120)
          goto LABEL_84;
      }
      v56 = v52 != 0;
      v57 = v52 ? v112 : v20;
      v54 = v118;
      v53 = v119;
      v55 = v20;
      if (v50 != v165)
        break;
LABEL_94:
      v58 = v201;
      v59 = v201 + 1;
      v201 = v59;
      if (v59 >= *((uint64_t *)&v200 + 1))
      {
        v15 = v99;
        v14 = v100;
        v17 = v98;
        v60 = v105;
        v38 = v106;
        v61 = v110;
        if (v58 >= *((uint64_t *)&v200 + 1))
          v36 = (float *)v200;
        else
          v36 = (float *)(*((_QWORD *)&v199 + 1) + 8 * (v59 % *((_QWORD *)&v200 + 1)));
      }
      else
      {
        v36 = (float *)(v199 + 8);
        v15 = v99;
        v14 = v100;
        v17 = v98;
        v60 = v105;
        v38 = v106;
        v61 = v110;
      }
      *(_QWORD *)&v199 = v36;
      v92 = v198;
      v93 = v198 + 1;
      v198 = v93;
      if (v93 >= *((uint64_t *)&v197 + 1))
      {
        if (v92 >= *((uint64_t *)&v197 + 1))
          v94 = v197;
        else
          v94 = *((_QWORD *)&v196 + 1) + 8 * (v93 % *((_QWORD *)&v197 + 1));
      }
      else
      {
        v94 = v196 + 8;
      }
      *(_QWORD *)&v196 = v94;
      ++v203;
      v95 = v61 + 1;
      if (v61 + 1 >= v38)
      {
        v39 = v108;
        if (v61 < v38)
        {
          v39 = v107 + 8 * (v95 % v38);
          v61 = v110;
        }
      }
      else
      {
        v39 = v60 + 8;
      }
      if (v95 == v109)
      {
        v95 = v61 != 0;
        if (v61)
          v39 = v96;
        else
          v39 = v14;
        v38 = v17;
        v107 = v14;
        v108 = v15;
      }
      ++v202;
      v110 = v95;
      if (v93 == v195)
        return 1;
    }
    v62 = (float *)v169;
    while (1)
    {
      v63 = (float)((float)(v62[1] - *(float *)(a10 + 4)) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 16);
      if (v63 >= 0.0)
        v64 = 0.5;
      else
        v64 = -0.5;
      sub_2233DC31C(v63 + v64);
      v65 = (float)((float)(*v62 - *(float *)a10) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 8);
      if (v65 >= 0.0)
        v66 = 0.5;
      else
        v66 = -0.5;
      v67 = v65 + v66;
      sub_2233DC31C(v65 + v66);
      v68 = ceilf(v67);
      v69 = floorf(v67);
      if (v67 >= 0.0)
        v68 = v69;
      v70 = (uint64_t)v68;
      if (v113 == 1)
      {
        if (*v111 > v70)
          goto LABEL_94;
      }
      else if (v113 == -1 && *(_QWORD *)(a3 + 48) < v70)
      {
        goto LABEL_94;
      }
      v71 = *(_QWORD *)(a3 + 16);
      if (a1 != a4)
      {
        v72 = *(_QWORD *)(a3 + 24);
        v74 = *(_QWORD *)(a6 + 16);
        v73 = *(_QWORD *)(a6 + 24);
        goto LABEL_120;
      }
      v72 = *(_QWORD *)(a3 + 24);
      v74 = *(_QWORD *)(a6 + 16);
      v73 = *(_QWORD *)(a6 + 24);
      if (v71 != v74)
        goto LABEL_120;
      if (v72 != v73)
      {
        v74 = *(_QWORD *)(a3 + 16);
        goto LABEL_120;
      }
      if (a7)
      {
        if (v203 >= v173 || (a8 & 1) == 0)
        {
          v73 = *(_QWORD *)(a3 + 24);
          v74 = *(_QWORD *)(a3 + 16);
          if (v203 >= v173)
            goto LABEL_132;
          goto LABEL_120;
        }
      }
      else if (!a8)
      {
        goto LABEL_157;
      }
      if (v172 == v202 + 1)
        goto LABEL_132;
      if (v203)
      {
LABEL_157:
        v73 = *(_QWORD *)(a3 + 24);
        v74 = *(_QWORD *)(a3 + 16);
        goto LABEL_120;
      }
      v73 = *(_QWORD *)(a3 + 24);
      v74 = *(_QWORD *)(a3 + 16);
      if (*(_QWORD *)(a3 + 88) - 2 <= v173)
        goto LABEL_132;
LABEL_120:
      v156 = v204;
      v157 = v205;
      *(_QWORD *)&v144 = a6;
      *((_QWORD *)&v144 + 1) = v173;
      *(_QWORD *)&v145 = v169;
      *((_QWORD *)&v145 + 1) = v166;
      v146 = v57;
      v147 = v55;
      v148 = v53;
      v149 = v54;
      v150 = v56;
      v151 = v20;
      v152 = v20;
      v153 = v119;
      v154 = v118;
      v155 = 0;
      v158 = v120;
      v159 = 0;
      v160 = 0;
      v161 = *(_QWORD *)a10;
      v162 = *v114;
      v163 = *(_DWORD *)(a10 + 24);
      v122 = 0;
      v123 = 0;
      v124 = -1;
      v125 = 0;
      v126 = 0;
      v132 = 1;
      v133 = 0;
      v134 = 0;
      v135 = 0;
      v141 = 1;
      v142 = 0;
      v143 = 0;
      v127 = a1;
      v128 = v71;
      v129 = v72;
      v130 = v203;
      v131 = xmmword_2245F5400;
      v136 = a4;
      v137 = v74;
      v138 = v73;
      v139 = v173;
      v140 = xmmword_2245F5400;
      v75 = a11[5];
      sub_2233E0AA0((uint64_t)&v174, (uint64_t)&v144, &v121, a9, a10, a11);
      v76 = a11[4];
      v77 = a11[1];
      v78 = a11[2];
      v79 = (_QWORD *)(v77 + 8 * (v76 / 0x15));
      if (v78 == v77)
      {
        v80 = 0;
        if (!v75)
          goto LABEL_127;
      }
      else
      {
        v80 = *v79 + 192 * (v76 % 0x15);
        if (!v75)
          goto LABEL_127;
      }
      v81 = v75 - 0x5555555555555555 * ((uint64_t)(v80 - *v79) >> 6);
      if (v81 < 1)
      {
        v82 = 20 - v81;
        v79 -= v82 / 0x15;
        v80 = *v79 + 192 * (21 * (v82 / 0x15) - v82) + 3840;
      }
      else
      {
        v79 += v81 / 0x15uLL;
        v80 = *v79 + 192 * (v81 % 0x15uLL);
      }
LABEL_127:
      v83 = a11[5] + v76;
      v84 = (_QWORD *)(v77 + 8 * (v83 / 0x15));
      if (v78 == v77)
      {
        v85 = 0;
        if (!v80)
          goto LABEL_132;
      }
      else
      {
        v85 = *v84 + 192 * (v83 % 0x15);
        if (v80 == v85)
          goto LABEL_132;
      }
      if (21 * (v84 - v79) - 0x5555555555555555 * ((uint64_t)(v85 - *v84) >> 6) != 0xAAAAAAAAAAAAAAABLL
                                                                                   * ((uint64_t)(v80 - *v79) >> 6))
      {
        result = 0;
        *a12 = 1;
        return result;
      }
LABEL_132:
      v86 = v171;
      v87 = v171 + 1;
      v171 = v87;
      if (v87 >= *((uint64_t *)&v170 + 1))
      {
        if (v86 >= *((uint64_t *)&v170 + 1))
          v62 = (float *)v170;
        else
          v62 = (float *)(*((_QWORD *)&v169 + 1) + 8 * (v87 % *((_QWORD *)&v170 + 1)));
      }
      else
      {
        v62 = (float *)(v169 + 8);
      }
      *(_QWORD *)&v169 = v62;
      v88 = v168;
      v89 = v168 + 1;
      v168 = v89;
      if (v89 >= *((uint64_t *)&v167 + 1))
      {
        if (v88 >= *((uint64_t *)&v167 + 1))
          v90 = v167;
        else
          v90 = *((_QWORD *)&v166 + 1) + 8 * (v89 % *((_QWORD *)&v167 + 1));
      }
      else
      {
        v90 = v166 + 8;
      }
      *(_QWORD *)&v166 = v90;
      ++v173;
      v91 = v56 + 1;
      if (v56 + 1 >= v54)
      {
        v57 = v53;
        if (v56 < v54)
          v57 = v55 + 8 * (v91 % v54);
      }
      else
      {
        v57 += 8;
      }
      if (v91 == v120)
      {
        v91 = v56 != 0;
        if (v56)
          v57 = v112;
        else
          v57 = v20;
        v54 = v118;
        v53 = v119;
        v55 = v20;
      }
      ++v172;
      v56 = v91;
      if (v89 == v165)
        goto LABEL_94;
    }
  }
  v31 = v27 + 8;
  v32 = a3;
  v33 = v28 + 1;
  if (v30 != v109)
    goto LABEL_31;
LABEL_37:
  if (v16 < 9)
  {
    v34 = v15;
    if (v16 >= 1)
      v34 = v14 + 8 * (1 - v17);
  }
  else
  {
    v34 = v14 + 8;
  }
  v33 = v28 != 0;
  if (v28)
    v31 = v34;
  else
    v31 = v14;
  v29 = v16 >> 3;
  v107 = v14;
  v108 = v15;
  v32 = a3;
  result = 1;
  if (v26 != v195)
    goto LABEL_45;
  return result;
}

int8x16_t sub_223698BF0(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  int8x16_t result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24EC571F0;
  *(_QWORD *)(a1 + 8) = &unk_24EC57220;
  *(_QWORD *)(a1 + 16) = &unk_24EC57248;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = a3[1].i32[0];
  result = vextq_s8(*a3, *a3, 8uLL);
  *(int8x16_t *)(a1 + 32) = result;
  return result;
}

std::exception *sub_223698C24(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[2].__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = a1[3].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[3].__vftable = 0;
  std::exception::~exception(a1 + 1);
  return a1;
}

uint64_t sub_223698C7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24EC36548;
  *(_QWORD *)(v2 + 8) = &off_24EC57268;
  *(_QWORD *)(v2 + 16) = &unk_24EC365A0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &off_24EC571F0;
  *(_QWORD *)(v2 + 8) = &unk_24EC57220;
  *(_QWORD *)(v2 + 16) = &unk_24EC57248;
  sub_2233E5A54(v2 + 16, a1 + 16);
  return v2;
}

void sub_223698D40(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x227684CE8](v1, 0x10F1C40C404A9A7);
  _Unwind_Resume(a1);
}

void sub_223698D6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_223698D88(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_223698FE8((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24EC57198, (void (*)(void *))sub_223698C24);
}

void sub_223698DC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223698DD8(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[2].__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = a1[3].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[3].__vftable = 0;
  std::exception::~exception(a1 + 1);
  JUMPOUT(0x227684CE8);
}

void sub_223698E40(std::exception *this)
{
  std::exception_vtbl *v2;

  this[1].__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[2].__vftable = 0;
  std::exception::~exception(this);
}

void sub_223698E90(std::exception *this)
{
  std::exception_vtbl *v2;

  this[1].__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[2].__vftable = 0;
  std::exception::~exception(this);
  JUMPOUT(0x227684CE8);
}

const char *sub_223698EFC()
{
  return "Boost.Geometry Overlay invalid input exception";
}

void sub_223698F08(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 1);
}

void sub_223698F58(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 1);
  JUMPOUT(0x227684CE8);
}

void sub_223698FC4(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223698FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24EC36548;
  *(_QWORD *)(a1 + 8) = &off_24EC57268;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24EC365A0;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_24EC571F0;
  *(_QWORD *)(a1 + 8) = &unk_24EC57220;
  *(_QWORD *)(a1 + 16) = &unk_24EC57248;
  return a1;
}

void sub_223699080(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_223699094(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  void *v20;

  v4 = a1[1];
  v5 = a1[2];
  if (v5 == v4)
    v6 = 0;
  else
    v6 = 170 * ((v5 - v4) >> 3) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  v9 = v6 - v8;
  v10 = a2 > v9;
  v11 = a2 - v9;
  if (v10)
  {
    sub_22369951C((uint64_t)a1, v11);
    v7 = a1[5];
    v4 = a1[1];
    v5 = a1[2];
    v8 = a1[4] + v7;
  }
  v12 = (_QWORD *)(v4 + 8 * (v8 / 0xAA));
  if (v5 == v4)
  {
    v13 = 0;
    if (!a2)
      return;
  }
  else
  {
    v13 = (void *)(*v12 + 24 * (v8 % 0xAA));
    if (!a2)
      return;
  }
  v14 = a2 - 0x5555555555555555 * (((uint64_t)v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v17 = 169 - v14;
    v15 = &v12[-(v17 / 0xAA)];
    v16 = *v15 + 24 * (170 * (v17 / 0xAA) - v17) + 4056;
    if (v13 != (void *)v16)
    {
      do
      {
LABEL_15:
        v18 = v16;
        if (v12 != v15)
          v18 = *v12 + 4080;
        if (v13 == (void *)v18)
        {
          a1[5] = v7;
          if (v12 == v15)
            return;
        }
        else
        {
          v19 = 24 * ((v18 - (uint64_t)v13 - 24) / 0x18uLL) + 24;
          bzero(v13, v19);
          v7 = a1[5] - 0x5555555555555555 * (v19 >> 3);
          a1[5] = v7;
          if (v12 == v15)
            return;
        }
        v20 = (void *)v12[1];
        ++v12;
        v13 = v20;
      }
      while (v20 != (void *)v16);
    }
  }
  else
  {
    v15 = &v12[v14 / 0xAAuLL];
    v16 = *v15 + 24 * (v14 % 0xAAuLL);
    if (v13 != (void *)v16)
      goto LABEL_15;
  }
}

void sub_223699298(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = a3;
  v6 = a1[4];
  v5 = a1[5];
  v8 = a1[1];
  v7 = a1[2];
  v9 = (_QWORD *)(v8 + 8 * ((v6 + v5) / 0xAA));
  if (v7 == v8)
  {
    v10 = 0;
    if (!a3)
      return;
  }
  else
  {
    v10 = *v9 + 24 * ((v6 + v5) % 0xAA);
    if (v10 == a3)
      return;
  }
  v11 = 170 * (v9 - a2) - 0x5555555555555555 * ((uint64_t)(v10 - *v9) >> 3);
  v12 = (uint64_t)(a3 - *a2) >> 3;
  v13 = v11 + 0x5555555555555555 * v12;
  if (v13 < 1)
    return;
  v14 = (_QWORD *)(v8 + 8 * (v6 / 0xAA));
  if (v7 == v8)
  {
    v15 = 0;
    if (!a3)
      goto LABEL_15;
  }
  else
  {
    v15 = *v14 + 24 * (v6 % 0xAA);
    if (a3 == v15)
    {
LABEL_15:
      if (v3 == v10)
        goto LABEL_25;
      do
      {
LABEL_20:
        v21 = *(void **)v3;
        if (*(_QWORD *)v3)
        {
          *(_QWORD *)(v3 + 8) = v21;
          operator delete(v21);
        }
        v3 += 24;
        if (v3 - *v14 == 4080)
        {
          v22 = v14[1];
          ++v14;
          v3 = v22;
        }
      }
      while (v3 != v10);
      v8 = a1[1];
      v7 = a1[2];
      v6 = a1[4];
      v5 = a1[5];
      goto LABEL_25;
    }
  }
  v16 = 170 * (a2 - v14) - 0x5555555555555555 * v12;
  v17 = (uint64_t)(v15 - *v14) >> 3;
  v18 = v16 + 0x5555555555555555 * v17;
  if (!v18)
  {
    v3 = v15;
    goto LABEL_15;
  }
  v19 = v18 - 0x5555555555555555 * v17;
  if (v19 >= 1)
  {
    v14 += v19 / 0xAAuLL;
    v3 = *v14 + 24 * (v19 % 0xAAuLL);
    if (v3 == v10)
      goto LABEL_25;
    goto LABEL_20;
  }
  v20 = 169 - v19;
  v14 -= v20 / 0xAA;
  v3 = *v14 + 24 * (170 * (v20 / 0xAA) - v20) + 4056;
  if (v3 != v10)
    goto LABEL_20;
LABEL_25:
  if (v7 == v8)
    v23 = 0;
  else
    v23 = 170 * ((v7 - v8) >> 3) - 1;
  v24 = v5 - v13;
  a1[5] = v24;
  if (v23 - (v24 + v6) >= 0x154)
  {
    do
    {
      operator delete(*(void **)(v7 - 8));
      v7 = a1[2] - 8;
      v25 = v7 == a1[1];
      v26 = 170 * ((v7 - a1[1]) >> 3) - 1;
      a1[2] = v7;
      if (v25)
        v26 = 0;
    }
    while ((unint64_t)(v26 - (a1[5] + a1[4])) > 0x153);
  }
}

void sub_22369951C(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0xAA)
    v6 = v5 / 0xAA + 1;
  else
    v6 = v5 / 0xAA;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 / 0xAA)
    v8 = v7 / 0xAA;
  else
    v8 = v6;
  if (v6 <= v7 / 0xAA)
  {
    *(_QWORD *)(a1 + 32) = v7 - 170 * v8;
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0xFF0uLL);
        sub_22323CCA0((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0xFF0uLL);
        sub_22323CE2C((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 169;
        else
          v116 = 170;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - 170 * v6;
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= 170 * v8;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_223174E94();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = -170 * v8;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0xFF0uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_223174E94();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_223174E94();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_223174E94();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) += v144;
  if (v71)
    operator delete(v71);
}

void sub_223699E30(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_223699E7C()
{
  __cxa_end_catch();
  JUMPOUT(0x223699E84);
}

void sub_223699E9C(float **a1, uint64_t a2, _OWORD *a3, uint64_t **a4)
{
  float *v4;
  float *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  double v11;
  double v12;
  double v13;
  float *v14;
  uint64_t **v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  uint64_t *v22;
  _OWORD *v23;
  _BYTE v24[30];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a1[1];
  v6 = (char *)v5 - (char *)*a1;
  if (v5 != *a1)
  {
    memset(&v24[6], 255, 24);
    if ((unint64_t)v6 > 0x17)
    {
      v8 = v6 >> 3;
      v9 = v8 - 1;
      v10 = &v4[2 * ((v8 - 1) % v8)];
      v11 = *v10;
      v22 = *(uint64_t **)v4;
      v12 = v10[1];
      v13 = (COERCE_FLOAT(*(_QWORD *)v4) + v11) * (COERCE_FLOAT(HIDWORD(*(_QWORD *)v4)) - v12) + 0.0;
      if (v8 != 1)
      {
        v14 = v10 - 2;
        v13 = v13 + (v11 + *(v10 - 2)) * (v12 - *(v10 - 1));
        if (v8 != 2)
        {
          do
          {
            v18 = v9 - 1;
            if (v9 >= v8)
            {
              v19 = v5;
              if (v18 <= v8)
                v19 = &v4[2 * (v18 % v8)];
            }
            else
            {
              v19 = v10 - 2;
            }
            v20 = v9 - 2;
            if (v18 >= v8)
            {
              v21 = v5;
              if (v20 <= v8)
                v21 = &v4[2 * (v20 % v8)];
            }
            else
            {
              v21 = v14 - 2;
            }
            if (v9 >= v8)
            {
              v10 = v5;
              if (v18 <= v8)
                v10 = &v4[2 * (v18 % v8)];
            }
            else
            {
              v10 -= 2;
            }
            if (v18 >= v8)
            {
              v14 = &v4[2 * (v20 % v8)];
              if (v20 > v8)
                v14 = v5;
            }
            else
            {
              v14 -= 2;
            }
            v13 = v13 + (*v19 + *v21) * (v19[1] - v21[1]);
            --v9;
          }
          while (v18 != 1);
        }
      }
      v7 = v13 * 0.5;
    }
    else
    {
      v22 = *(uint64_t **)v4;
      v7 = 0.0;
    }
    v23 = a3;
    v15 = sub_22369A8C4(a4, (uint64_t *)a3, (uint64_t)&unk_2245BA939, &v23);
    *((_BYTE *)v15 + 56) = 1;
    *(uint64_t **)((char *)v15 + 60) = v22;
    *((double *)v15 + 9) = v7;
    *((_WORD *)v15 + 40) = 0;
    *(_OWORD *)((char *)v15 + 82) = *(_OWORD *)v24;
    *((_OWORD *)v15 + 6) = *(_OWORD *)&v24[14];
    v15[14] = (uint64_t *)0xBFF0000000000000;
    v17 = v15 + 15;
    v16 = v15[15];
    if (v16)
    {
      v15[16] = v16;
      operator delete(v16);
    }
    *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
  }
}

void sub_22369A0F4(float **a1, uint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float *v28;
  uint64_t *v29;
  float **v30;
  __int128 v31;
  __int128 v32;
  _BYTE *v33;
  _BYTE *v34;
  int64_t v35;
  char *v36;
  uint64_t **v37;
  __int128 v38;
  int v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  char v45;
  uint64_t *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *__p;
  char *v51;
  char *v52;
  _OWORD *v53;

  v8 = (_QWORD *)(a5 + 8);
  sub_22369A6FC(a5, *(_QWORD **)(a5 + 8));
  *(_QWORD *)a5 = v8;
  *(_QWORD *)(a5 + 16) = 0;
  *v8 = 0;
  v11 = (_QWORD *)*a4;
  v9 = a4 + 1;
  v10 = v11;
  if (v11 != v9)
  {
    v12 = (_QWORD *)(a3 + 8);
    while (1)
    {
      v13 = (_QWORD *)*v12;
      if (!*v12)
        break;
      v15 = v10[4];
      v14 = v10[5];
      v16 = (_QWORD *)(a3 + 8);
      v17 = v10[6];
      do
      {
        v21 = v13[4];
        v22 = v21 < v15;
        if (v21 == v15)
        {
          v23 = v13[5];
          v22 = v23 < v14;
          if (v23 == v14)
            v22 = v13[6] < v17;
        }
        v18 = v22;
        v19 = v18 == 0;
        if (v18)
          v20 = v13 + 1;
        else
          v20 = v13;
        if (v19)
          v16 = v13;
        v13 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v16 == v12)
        break;
      v24 = v16[4];
      if (v15 == v24)
      {
        v25 = v16[5];
        if (v14 == v25)
        {
          if (v17 < v16[6])
            break;
        }
        else if (v14 < v25)
        {
          break;
        }
      }
      else if (v15 < v24)
      {
        break;
      }
      v39 = *((unsigned __int8 *)v16 + 56);
      v40 = *((unsigned __int8 *)v16 + 57);
      v26 = *((unsigned __int8 *)v16 + 58);
      if (!(v39 | v40))
        goto LABEL_26;
LABEL_41:
      v41 = (_QWORD *)v10[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (_QWORD *)v10[2];
          v19 = *v42 == (_QWORD)v10;
          v10 = v42;
        }
        while (!v19);
      }
      v10 = v42;
      if (v42 == v9)
        return;
    }
    v26 = 0;
LABEL_26:
    v27 = v10[4];
    if (v27 == 1)
    {
      v28 = (float *)v10 + 15;
      v30 = a1;
      v29 = a2;
    }
    else
    {
      if (v27)
        goto LABEL_31;
      v28 = (float *)v10 + 15;
      v29 = (uint64_t *)a1;
      v30 = (float **)a2;
    }
    v26 = (int)sub_22369A400(v28, v29, v30) > 0;
LABEL_31:
    if (v26)
    {
      v45 = *((_BYTE *)v10 + 56);
      v46 = *(uint64_t **)((char *)v10 + 60);
      v31 = *(_OWORD *)(v10 + 13);
      v32 = *(_OWORD *)(v10 + 11);
      v47 = *(_OWORD *)(v10 + 9);
      v48 = v32;
      v49 = v31;
      __p = 0;
      v51 = 0;
      v52 = 0;
      v34 = (_BYTE *)v10[15];
      v33 = (_BYTE *)v10[16];
      v35 = v33 - v34;
      if (v33 != v34)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v35 >> 3) >= 0xAAAAAAAAAAAAAABLL)
          sub_22367C394();
        __p = operator new(v35);
        v51 = (char *)__p;
        v36 = (char *)__p + 8 * (v35 >> 3);
        v52 = v36;
        memcpy(__p, v34, v35);
        v51 = v36;
      }
      BYTE8(v47) = 0;
      v53 = v10 + 4;
      v37 = sub_22369A8C4((uint64_t **)a5, v10 + 4, (uint64_t)&unk_2245BA939, &v53);
      *((_BYTE *)v37 + 56) = v45;
      *(uint64_t **)((char *)v37 + 60) = v46;
      v38 = v48;
      *(_OWORD *)(v37 + 9) = v47;
      *(_OWORD *)(v37 + 11) = v38;
      *(_OWORD *)(v37 + 13) = v49;
      if (v37 + 7 != (uint64_t **)&v45)
        sub_22369A74C(v37 + 15, (char *)__p, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - (_BYTE *)__p) >> 3));
      if (__p)
      {
        v51 = (char *)__p;
        operator delete(__p);
      }
    }
    goto LABEL_41;
  }
}

void sub_22369A3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22369A400(float *a1, uint64_t *a2, float **a3)
{
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float *v30;
  float *v32;
  int v33;
  char v34;

  v4 = *a3;
  v3 = a3[1];
  v5 = (char *)v3 - (char *)*a3;
  if ((unint64_t)v5 < 0x18)
    return 0xFFFFFFFFLL;
  v8 = v5 >> 3;
  v9 = v3 == v4 ? 0 : v8 + 1;
  v33 = 0;
  v34 = 0;
  v10 = v9 - 1;
  if (v9 >= v8)
  {
    v11 = v3;
    if (v10 <= v8)
      v11 = &v4[2 * (v10 % v8)];
  }
  else
  {
    v11 = v3 - 2;
  }
  if (v9 == 1)
    return 0xFFFFFFFFLL;
  v12 = v3;
  do
  {
    if (v10 + 1 >= v8)
    {
      v13 = v3;
      if (v10 <= v8)
        v13 = &v4[2 * (v10 % v8)];
    }
    else
    {
      v13 = v12 - 2;
    }
    v14 = v10 - 1;
    if (v10 >= v8)
    {
      v15 = v3;
      if (v14 <= v8)
        v15 = &v4[2 * (v14 % v8)];
    }
    else
    {
      v15 = v11 - 2;
    }
    if (!sub_2233E62E4(a1, v13, v15, (uint64_t)&v33))
      break;
    if (v10 + 1 >= v8)
    {
      v12 = v3;
      if (v10 <= v8)
        v12 = &v4[2 * (v10 % v8)];
    }
    else
    {
      v12 -= 2;
    }
    if (v10 < v8)
    {
      v11 -= 2;
    }
    else
    {
      v11 = v3;
      if (v14 <= v8)
        v11 = &v4[2 * (v14 % v8)];
    }
    --v10;
  }
  while (v14);
  if (v33)
    result = 1;
  else
    result = 0xFFFFFFFFLL;
  if (v34)
  {
    v17 = *a2;
    v18 = a2[1];
    if (*a2 == v18)
      return 0;
    v19 = (float *)(v17 + 8);
    if (v17 + 8 == v18)
      return 0;
    v32 = (float *)a2[1];
    while (1)
    {
      v21 = *a3;
      v20 = a3[1];
      v22 = (char *)v20 - (char *)*a3;
      if ((unint64_t)v22 < 0x18)
        break;
      v23 = v22 >> 3;
      v24 = v20 == v21 ? 0 : v23 + 1;
      v33 = 0;
      v34 = 0;
      v25 = v24 - 1;
      if (v24 >= v23)
      {
        v26 = v20;
        if (v25 <= v23)
          v26 = &v21[2 * (v25 % v23)];
      }
      else
      {
        v26 = v20 - 2;
      }
      if (v24 == 1)
        break;
      v27 = v20;
      do
      {
        if (v25 + 1 >= v23)
        {
          v28 = v20;
          if (v25 <= v23)
            v28 = &v21[2 * (v25 % v23)];
        }
        else
        {
          v28 = v27 - 2;
        }
        v29 = v25 - 1;
        if (v25 >= v23)
        {
          v30 = v20;
          if (v29 <= v23)
            v30 = &v21[2 * (v29 % v23)];
        }
        else
        {
          v30 = v26 - 2;
        }
        if (!sub_2233E62E4(v19, v28, v30, (uint64_t)&v33))
          break;
        if (v25 + 1 >= v23)
        {
          v27 = v20;
          if (v25 <= v23)
            v27 = &v21[2 * (v25 % v23)];
        }
        else
        {
          v27 -= 2;
        }
        if (v25 < v23)
        {
          v26 -= 2;
        }
        else
        {
          v26 = v20;
          if (v29 <= v23)
            v26 = &v21[2 * (v29 % v23)];
        }
        --v25;
      }
      while (v29);
      if (!v34)
      {
        if (v33)
          return 1;
        else
          return 0xFFFFFFFFLL;
      }
      result = 0;
      v19 += 2;
      if (v19 == v32)
        return result;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_22369A6FC(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_22369A6FC(a1, *a2);
    sub_22369A6FC(a1, a2[1]);
    v4 = (void *)a2[15];
    if (v4)
    {
      a2[16] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_QWORD *sub_22369A74C(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      sub_22367C394();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

uint64_t **sub_22369A8C4(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    v9 = (uint64_t *)a2[1];
    v10 = (uint64_t *)a2[2];
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v12 = v6[4];
        if (v8 == v12)
          break;
        if (v8 < v12)
          goto LABEL_3;
        if (v12 >= v8)
          return v11;
LABEL_14:
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_17;
        }
      }
      v13 = v11[5];
      if (v9 != v13)
      {
        if ((uint64_t)v9 < (uint64_t)v13)
          goto LABEL_3;
        if ((uint64_t)v13 >= (uint64_t)v9)
          return v11;
        goto LABEL_14;
      }
      v14 = v11[6];
      if ((uint64_t)v10 >= (uint64_t)v14)
      {
        if ((uint64_t)v14 >= (uint64_t)v10)
          return v11;
        goto LABEL_14;
      }
LABEL_3:
      v6 = *v11;
      v7 = v11;
      if (!*v11)
        goto LABEL_17;
    }
  }
  v11 = a1 + 1;
LABEL_17:
  v15 = v11;
  v16 = operator new(0x90uLL);
  v17 = *((_QWORD *)*a4 + 2);
  v16[2] = **a4;
  *((_QWORD *)v16 + 6) = v17;
  *((_BYTE *)v16 + 56) = 0;
  *((_QWORD *)v16 + 9) = 0;
  *((_WORD *)v16 + 40) = 0;
  *((_QWORD *)v16 + 11) = -1;
  *((_QWORD *)v16 + 12) = -1;
  *((_QWORD *)v16 + 13) = -1;
  *((_QWORD *)v16 + 14) = 0xBFF0000000000000;
  *((_QWORD *)v16 + 16) = 0;
  *((_QWORD *)v16 + 17) = 0;
  *((_QWORD *)v16 + 15) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v15;
  *v7 = (uint64_t *)v16;
  v18 = (uint64_t *)**a1;
  v19 = (uint64_t *)v16;
  if (v18)
  {
    *a1 = v18;
    v19 = *v7;
  }
  sub_2231A9A8C(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v16;
}

uint64_t sub_22369AA20(float **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  float *v7;
  float *v8;
  uint64_t v12;
  double *v13;
  double *v14;
  __int128 v16;
  void *__p;
  void *v18;
  uint64_t v19;
  char v20;

  v8 = *a1;
  v7 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (char *)*a1) >> 3) <= a5)
  {
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      while (1)
      {
        v13 = (double *)v8;
        v8 += 14;
        v14 = (double *)v8;
        if (v8 != v7)
          break;
LABEL_6:
        v12 = 1;
        if (v8 == v7)
          return v12;
      }
      while ((sub_22369B3C0(a2, v13, v14, 1) & 1) != 0)
      {
        v7 = (float *)(v14 + 7);
        v14 = (double *)v7;
        if (v7 == a1[1])
          goto LABEL_6;
      }
      return 0;
    }
  }
  else
  {
    __p = 0;
    v18 = 0;
    v19 = 0;
    v16 = xmmword_2245F53F0;
    sub_22369AB74(a1, (float *)&v16, (char **)&__p);
    v12 = sub_22369AE00((float *)&v16, (float ***)&__p, 0, a5, a2, a3, a4, (uint64_t)&v20);
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_22369AB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22369AB74(float **a1, float *a2, char **a3)
{
  float *i;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  float **v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  float *v35;

  for (i = *a1; i != a1[1]; i += 14)
  {
    v8 = i[10];
    v9 = *a2;
    if (v8 < *a2)
    {
      *a2 = v8;
      v9 = v8;
      v10 = a2[2];
      if (v8 <= v10)
      {
LABEL_7:
        v11 = i[11];
        v12 = a2[1];
        if (v11 >= v12)
          goto LABEL_8;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = a2[2];
      if (v8 <= v10)
        goto LABEL_7;
    }
    a2[2] = v8;
    v10 = v8;
    v11 = i[11];
    v12 = a2[1];
    if (v11 >= v12)
    {
LABEL_8:
      v13 = a2[3];
      if (v11 <= v13)
        goto LABEL_9;
      goto LABEL_18;
    }
LABEL_17:
    a2[1] = v11;
    v12 = v11;
    v13 = a2[3];
    if (v11 <= v13)
    {
LABEL_9:
      v14 = i[12];
      if (v14 >= v9)
        goto LABEL_10;
      goto LABEL_19;
    }
LABEL_18:
    a2[3] = v11;
    v13 = v11;
    v14 = i[12];
    if (v14 >= v9)
    {
LABEL_10:
      if (v14 <= v10)
        goto LABEL_11;
      goto LABEL_20;
    }
LABEL_19:
    *a2 = v14;
    if (v14 <= v10)
    {
LABEL_11:
      v15 = i[13];
      if (v15 >= v12)
        goto LABEL_12;
      goto LABEL_21;
    }
LABEL_20:
    a2[2] = v14;
    v15 = i[13];
    if (v15 >= v12)
    {
LABEL_12:
      if (v15 <= v13)
        goto LABEL_13;
      goto LABEL_22;
    }
LABEL_21:
    a2[1] = v15;
    if (v15 <= v13)
    {
LABEL_13:
      v17 = a3[1];
      v16 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v16)
        goto LABEL_23;
      goto LABEL_3;
    }
LABEL_22:
    a2[3] = v15;
    v17 = a3[1];
    v16 = (unint64_t)a3[2];
    if ((unint64_t)v17 >= v16)
    {
LABEL_23:
      v18 = *a3;
      v19 = v17 - *a3;
      v20 = v19 >> 3;
      v21 = (v19 >> 3) + 1;
      if (v21 >> 61)
        sub_22367C394();
      v22 = v16 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          sub_223174E94();
        v24 = operator new(8 * v23);
        v25 = (float **)&v24[8 * v20];
        *v25 = i;
        v7 = (uint64_t)(v25 + 1);
        v26 = (char *)(v17 - v18);
        if (v17 == v18)
          goto LABEL_41;
LABEL_34:
        v27 = (unint64_t)(v26 - 8);
        if (v27 < 0x58)
          goto LABEL_48;
        if ((unint64_t)(v17 - v24 - v19) < 0x20)
          goto LABEL_48;
        v28 = (v27 >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = &v17[-v29];
        v25 = (float **)((char *)v25 - v29);
        v31 = &v24[8 * v20 - 16];
        v32 = v17 - 16;
        v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v17 = v30;
        if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v35 = (float *)*((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v25 = v35;
          }
          while (v17 != v18);
        }
        v17 = *a3;
      }
      else
      {
        v24 = 0;
        v25 = (float **)(8 * v20);
        *(_QWORD *)(8 * v20) = i;
        v7 = 8 * v20 + 8;
        v26 = (char *)(v17 - v18);
        if (v17 != v18)
          goto LABEL_34;
      }
LABEL_41:
      *a3 = (char *)v25;
      a3[1] = (char *)v7;
      a3[2] = &v24[8 * v23];
      if (v17)
        operator delete(v17);
      goto LABEL_4;
    }
LABEL_3:
    *(_QWORD *)v17 = i;
    v7 = (uint64_t)(v17 + 8);
LABEL_4:
    a3[1] = (char *)v7;
  }
}

uint64_t sub_22369AE00(float *a1, float ***a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  float v15;
  double **v16;
  double **v17;
  float v18;
  float v19;
  float v20;
  float **v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double **v28;
  double **v29;
  double **v30;
  double **v31;
  double **v32;
  double **v33;
  double **v34;
  double **v35;
  double **v36;
  uint64_t v37;
  double **v39;
  double **v40;
  double **v41;
  double **v42;
  double **v43;
  double **v44;
  __int128 v45;
  void *__p;
  double **v47;
  uint64_t v48;
  void *v49;
  double **v50;
  uint64_t v51;
  void *v52;
  double **v53;
  uint64_t v54;
  float v55[2];
  uint64_t v56;
  uint64_t v57;
  float v58;
  int v59;

  v14 = *((_QWORD *)a1 + 1);
  v15 = (float)(*a1 + a1[2]) * 0.5;
  v57 = *(_QWORD *)a1;
  v59 = HIDWORD(v14);
  v55[1] = *((float *)&v57 + 1);
  v56 = v14;
  v58 = v15;
  v55[0] = v15;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  __p = 0;
  v47 = 0;
  v48 = 0;
  sub_22369B900((float *)&v57, v55, a2, (float ***)&v52, &v49, &__p);
  v17 = (double **)__p;
  v16 = v47;
  if (__p == v47)
  {
LABEL_55:
    v36 = (double **)v52;
    v35 = v53;
    if (a3 > 0x63 || ((char *)v53 - (_BYTE *)v52) >> 3 < a4)
    {
LABEL_69:
      while (v36 != v35)
      {
        v39 = v36++;
        v40 = v36;
        if (v36 != v35)
        {
          while ((sub_22369B3C0(a5, *v39, *v40, 1) & 1) != 0)
          {
            v35 = v40 + 1;
            v40 = v35;
            if (v35 == v53)
              goto LABEL_69;
          }
          goto LABEL_58;
        }
      }
    }
    else if (!sub_22369BE0C((float *)&v57, (float ***)&v52, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_58;
    }
    v42 = (double **)v49;
    v41 = v50;
    if (a3 > 0x63 || ((char *)v50 - (_BYTE *)v49) >> 3 < a4)
    {
      if (v49 != v50)
      {
        while (1)
        {
          v43 = v42++;
          v44 = v42;
          if (v42 != v41)
            break;
LABEL_75:
          v37 = 1;
          if (v42 == v41)
            goto LABEL_59;
        }
        while ((sub_22369B3C0(a5, *v43, *v44, 1) & 1) != 0)
        {
          v41 = v44 + 1;
          v44 = v41;
          if (v41 == v50)
            goto LABEL_75;
        }
        goto LABEL_58;
      }
      v37 = 1;
    }
    else
    {
      v37 = sub_22369BE0C(v55, (float ***)&v49, a3 + 1, a4, a5, a6, a7, a8);
    }
    goto LABEL_59;
  }
  v45 = xmmword_2245F53F0;
  v18 = 3.4028e38;
  v19 = -3.4028e38;
  v20 = -3.4028e38;
  v21 = (float **)__p;
  v22 = 3.4028e38;
  do
  {
    v23 = *v21;
    v24 = (*v21)[10];
    if (v24 < v22)
    {
      *(float *)&v45 = (*v21)[10];
      v22 = v24;
      if (v24 <= v20)
      {
LABEL_6:
        v25 = v23[11];
        if (v25 >= v18)
          goto LABEL_7;
        goto LABEL_15;
      }
    }
    else if (v24 <= v20)
    {
      goto LABEL_6;
    }
    *((float *)&v45 + 2) = v24;
    v20 = v24;
    v25 = v23[11];
    if (v25 >= v18)
    {
LABEL_7:
      if (v25 <= v19)
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_15:
    *((float *)&v45 + 1) = v25;
    v18 = v25;
    if (v25 <= v19)
    {
LABEL_8:
      v26 = v23[12];
      if (v26 >= v22)
        goto LABEL_9;
      goto LABEL_17;
    }
LABEL_16:
    *((float *)&v45 + 3) = v25;
    v19 = v25;
    v26 = v23[12];
    if (v26 >= v22)
    {
LABEL_9:
      if (v26 <= v20)
        goto LABEL_10;
      goto LABEL_18;
    }
LABEL_17:
    *(float *)&v45 = v26;
    v22 = v26;
    if (v26 <= v20)
    {
LABEL_10:
      v27 = v23[13];
      if (v27 < v18)
        goto LABEL_19;
      goto LABEL_11;
    }
LABEL_18:
    *((float *)&v45 + 2) = v26;
    v20 = v26;
    v27 = v23[13];
    if (v27 < v18)
    {
LABEL_19:
      *((float *)&v45 + 1) = v27;
      v18 = v27;
      if (v27 <= v19)
        goto LABEL_3;
      goto LABEL_20;
    }
LABEL_11:
    if (v27 <= v19)
      goto LABEL_3;
LABEL_20:
    *((float *)&v45 + 3) = v27;
    v19 = v27;
LABEL_3:
    ++v21;
  }
  while (v21 != (float **)v47);
  if (a3 > 0x63 || ((char *)v47 - (_BYTE *)__p) >> 3 < a4)
  {
    while (1)
    {
      v29 = v17 + 1;
      if (v17 + 1 != v16)
        break;
LABEL_30:
      ++v17;
      if (v29 == v16)
        goto LABEL_25;
    }
    v16 = v17 + 1;
    while ((sub_22369B3C0(a5, *v17, *v16, 1) & 1) != 0)
    {
      if (++v16 == v47)
        goto LABEL_30;
    }
    goto LABEL_58;
  }
  if (!sub_22369BE0C((float *)&v45, (float ***)&__p, a3 + 1, a4, a5, a6, a7, a8))
    goto LABEL_58;
  v16 = v47;
LABEL_25:
  v28 = (double **)__p;
  if (a4 > ((char *)v16 - (_BYTE *)__p) >> 3 || a3 > 0x63 || ((char *)v53 - (_BYTE *)v52) >> 3 < a4)
  {
    if (__p != v16)
    {
      v30 = v53;
      if (v52 != v53)
      {
        while (1)
        {
          v33 = (double **)v52;
          if (v52 != v30)
            break;
LABEL_42:
          if (++v28 == v16)
            goto LABEL_38;
        }
        while ((sub_22369B3C0(a5, *v28, *v33, 1) & 1) != 0)
        {
          if (++v33 == v53)
          {
            v16 = v47;
            v30 = v33;
            goto LABEL_42;
          }
        }
        goto LABEL_58;
      }
    }
LABEL_38:
    v31 = (double **)__p;
    if (a4 > ((char *)v16 - (_BYTE *)__p) >> 3 || a3 > 0x63 || ((char *)v50 - (_BYTE *)v49) >> 3 < a4)
    {
      if (__p != v16)
      {
        v32 = v50;
        if (v49 != v50)
        {
          while (1)
          {
            v34 = (double **)v49;
            if (v49 != v32)
              break;
LABEL_47:
            if (++v31 == v16)
              goto LABEL_55;
          }
          while ((sub_22369B3C0(a5, *v31, *v34, 1) & 1) != 0)
          {
            if (++v34 == v50)
            {
              v16 = v47;
              v32 = v34;
              goto LABEL_47;
            }
          }
          goto LABEL_58;
        }
      }
    }
    else if ((sub_22369CF58((float *)&v45, (float ***)&__p, (float ***)&v49, a3 + 1, a4, a5, a6, a7, a6, a7, a8) & 1) == 0)
    {
      goto LABEL_58;
    }
    goto LABEL_55;
  }
  if (sub_22369CF58((float *)&v45, (float ***)&__p, (float ***)&v52, a3 + 1, a4, a5, a6, a7, a6, a7, a8))
  {
    v16 = v47;
    goto LABEL_38;
  }
LABEL_58:
  v37 = 0;
LABEL_59:
  if (__p)
  {
    v47 = (double **)__p;
    operator delete(__p);
  }
  if (v49)
  {
    v50 = (double **)v49;
    operator delete(v49);
  }
  if (v52)
  {
    v53 = (double **)v52;
    operator delete(v52);
  }
  return v37;
}

void sub_22369B354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v24;
  void *v25;

  if (__p)
  {
    operator delete(__p);
    v24 = a19;
    if (!a19)
    {
LABEL_3:
      v25 = a22;
      if (!a22)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v24 = a19;
    if (!a19)
      goto LABEL_3;
  }
  operator delete(v24);
  v25 = a22;
  if (!a22)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22369B3C0(uint64_t a1, double *a2, double *a3, int a4)
{
  double *v4;
  double *v6;
  uint64_t **v7;
  uint64_t **v8;
  float v9;
  float v11;
  _QWORD *v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t *v17;
  float **v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  double *v43;

  v4 = a2;
  if (a4 && a2[4] < a3[4])
  {
    v6 = a3;
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_6;
  }
  else
  {
    v6 = a2;
    v4 = a3;
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_6;
  }
  v19 = v6[3];
  if (v19 > 0.0)
  {
    if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_81;
    v20 = fabs(v19);
    v21 = 2.22044605e-16;
    if (v20 >= 1.0)
      v21 = v20 * 2.22044605e-16;
    if (v20 > v21)
    {
LABEL_81:
      v22 = v4[3];
      if (v22 < 0.0)
      {
        if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((v23 = vabdd_f64(0.0, v22), v24 = fmax(fabs(v22), 0.0), v24 >= 1.0)
            ? (v25 = v24 * 2.22044605e-16)
            : (v25 = 2.22044605e-16),
              v23 > v25))
        {
LABEL_6:
          v7 = *(uint64_t ***)(a1 + 24);
          v43 = v4;
          v8 = sub_22369A8C4(v7, (uint64_t *)v4, (uint64_t)&unk_2245BA939, (_OWORD **)&v43);
          v9 = *((float *)v8 + 15);
          if (v9 < *((float *)v6 + 10) || v9 > *((float *)v6 + 12))
            return 1;
          v11 = *((float *)v8 + 16);
          if (v11 < *((float *)v6 + 11) || v11 > *((float *)v6 + 13))
            return 1;
          v13 = *(_QWORD **)(a1 + 16);
          v14 = *v4;
          v16 = *v6;
          v15 = *((_QWORD *)v6 + 1);
          if (*(_QWORD *)v4 == 2)
          {
            v26 = *((_QWORD *)v4 + 1);
            v27 = v13[4];
            v28 = v13[1];
            v29 = v13[2];
            v30 = (_QWORD *)(v28 + 8 * (v27 / 0xAA));
            if (v29 == v28)
              v17 = 0;
            else
              v17 = (uint64_t *)(*v30 + 24 * (v27 % 0xAA));
            if (v26)
            {
              v31 = v26 - 0x5555555555555555 * (((uint64_t)v17 - *v30) >> 3);
              if (v31 < 1)
                v17 = (uint64_t *)(v30[-((169 - v31) / 0xAAuLL)]
                                + 24 * (170 * ((169 - v31) / 0xAAuLL) - (169 - v31))
                                + 4056);
              else
                v17 = (uint64_t *)(v30[v31 / 0xAAuLL] + 24 * (v31 % 0xAAuLL));
            }
            if (v16 != 0.0)
            {
              if (*(_QWORD *)&v16 == 2)
              {
                if (v29 == v28)
                  v18 = 0;
                else
                  v18 = (float **)(*v30 + 24 * (v27 % 0xAA));
                if (v15)
                {
                  v40 = v15 - 0x5555555555555555 * (((uint64_t)v18 - *v30) >> 3);
                  if (v40 < 1)
                    v18 = (float **)(v30[-((169 - v40) / 0xAAuLL)]
                                   + 24 * (170 * ((169 - v40) / 0xAAuLL) - (169 - v40))
                                   + 4056);
                  else
                    v18 = (float **)(v30[v40 / 0xAAuLL] + 24 * (v40 % 0xAAuLL));
                }
              }
              else
              {
                if (*(_QWORD *)&v16 != 1)
                  return 1;
                v18 = *(float ***)(a1 + 8);
              }
              goto LABEL_74;
            }
          }
          else
          {
            if (*(_QWORD *)&v14 != 1)
            {
              if (v14 != 0.0)
                return 1;
              if (*(_QWORD *)&v16 != 2)
              {
                if (*(_QWORD *)&v16 == 1)
                {
                  v17 = *(uint64_t **)a1;
                  v18 = *(float ***)(a1 + 8);
                }
                else
                {
                  if (v16 != 0.0)
                    return 1;
                  v17 = *(uint64_t **)a1;
                  v18 = *(float ***)a1;
                }
                goto LABEL_74;
              }
              v32 = v13[4];
              v33 = v13[1];
              v34 = (_QWORD *)(v33 + 8 * (v32 / 0xAA));
              if (v13[2] == v33)
                v18 = 0;
              else
                v18 = (float **)(*v34 + 24 * (v32 % 0xAA));
              if (v15)
              {
                v38 = v15 - 0x5555555555555555 * (((uint64_t)v18 - *v34) >> 3);
                if (v38 >= 1)
                {
                  v18 = (float **)(v34[v38 / 0xAAuLL] + 24 * (v38 % 0xAAuLL));
                  v17 = *(uint64_t **)a1;
                  goto LABEL_74;
                }
                v18 = (float **)(v34[-((169 - v38) / 0xAAuLL)]
                               + 24 * (170 * ((169 - v38) / 0xAAuLL) - (169 - v38))
                               + 4056);
              }
              v17 = *(uint64_t **)a1;
              goto LABEL_74;
            }
            if (*(_QWORD *)&v16 == 2)
            {
              v35 = v13[4];
              v36 = v13[1];
              v37 = (_QWORD *)(v36 + 8 * (v35 / 0xAA));
              if (v13[2] == v36)
                v18 = 0;
              else
                v18 = (float **)(*v37 + 24 * (v35 % 0xAA));
              if (v15)
              {
                v39 = v15 - 0x5555555555555555 * (((uint64_t)v18 - *v37) >> 3);
                if (v39 >= 1)
                {
                  v18 = (float **)(v37[v39 / 0xAAuLL] + 24 * (v39 % 0xAAuLL));
                  v17 = *(uint64_t **)(a1 + 8);
                  goto LABEL_74;
                }
                v18 = (float **)(v37[-((169 - v39) / 0xAAuLL)]
                               + 24 * (170 * ((169 - v39) / 0xAAuLL) - (169 - v39))
                               + 4056);
              }
              v17 = *(uint64_t **)(a1 + 8);
              goto LABEL_74;
            }
            if (*(_QWORD *)&v16 == 1)
            {
              v17 = *(uint64_t **)(a1 + 8);
              v18 = (float **)v17;
LABEL_74:
              if ((sub_22369A400((float *)v8 + 15, v17, v18) & 0x80000000) == 0
                && (v8[11] == (uint64_t *)-1 || v6[4] < *((double *)v8 + 14)))
              {
                v41 = *(_OWORD *)v6;
                v8[13] = (uint64_t *)*((_QWORD *)v6 + 2);
                *(_OWORD *)(v8 + 11) = v41;
                v8[14] = (uint64_t *)*((_QWORD *)v6 + 4);
              }
              return 1;
            }
            if (v16 != 0.0)
              return 1;
            v17 = *(uint64_t **)(a1 + 8);
          }
          v18 = *(float ***)a1;
          goto LABEL_74;
        }
      }
    }
  }
  return 1;
}

float *sub_22369B900(float *result, float *a2, float ***a3, float ***a4, _QWORD *a5, _QWORD *a6)
{
  float **v6;
  float *v8;
  float *v9;
  float v10;
  _BOOL4 v11;
  char **v12;
  unint64_t v13;
  char *v14;
  float ***v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  float **v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  float **v27;
  float ***v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float ***v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  float **v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float **v43;
  _OWORD *v44;
  float **v45;
  uint64_t v46;
  __int128 v47;
  float *v48;
  unint64_t v49;
  float ***v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  float *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  float *v75;
  unint64_t v76;
  float ***v77;
  float *v81;

  v6 = *a3;
  if (*a3 != a3[1])
  {
    v8 = a2;
    v81 = result;
    v77 = a3;
    do
    {
      v9 = *v6;
      v10 = (*v6)[10];
      if (result[2] >= v10 && *result <= v9[12] && result[3] >= v9[11])
      {
        v11 = result[1] <= v9[13];
        if (v8[2] < v10)
          goto LABEL_25;
      }
      else
      {
        v11 = 0;
        if (v8[2] < v10)
          goto LABEL_25;
      }
      if (*v8 <= v9[12] && v8[3] >= v9[11] && v8[1] <= v9[13])
      {
        if (v11)
        {
          v12 = (char **)a6;
          v14 = (char *)a6[1];
          v13 = a6[2];
          if ((unint64_t)v14 >= v13)
          {
            v15 = a4;
            v16 = (char *)*a6;
            v17 = (uint64_t)&v14[-*a6];
            v18 = v17 >> 3;
            v19 = (v17 >> 3) + 1;
            if (v19 >> 61)
              sub_22367C394();
            v20 = v13 - (_QWORD)v16;
            if (v20 >> 2 > v19)
              v19 = v20 >> 2;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            v76 = v19;
            if (v19)
            {
              if (v19 >> 61)
                goto LABEL_82;
              v21 = operator new(8 * v19);
              v22 = (float **)&v21[8 * v18];
              *v22 = v9;
              v23 = (uint64_t)(v22 + 1);
              v24 = (char *)(v14 - v16);
              if (v14 != v16)
              {
LABEL_22:
                v25 = (unint64_t)(v24 - 8);
                v12 = (char **)a6;
                if (v25 < 0x58)
                {
                  a4 = v15;
                  goto LABEL_68;
                }
                v58 = v14 - v21 - v17;
                a4 = v15;
                if (v58 < 0x20)
                  goto LABEL_87;
                v59 = (v25 >> 3) + 1;
                v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
                v61 = &v14[-v60];
                v22 = (float **)((char *)v22 - v60);
                v62 = &v21[8 * v18 - 16];
                v63 = v14 - 16;
                v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v65 = *(_OWORD *)v63;
                  *(v62 - 1) = *((_OWORD *)v63 - 1);
                  *v62 = v65;
                  v62 -= 2;
                  v63 -= 32;
                  v64 -= 4;
                }
                while (v64);
                v14 = v61;
                if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_87:
                  do
                  {
LABEL_68:
                    v66 = (float *)*((_QWORD *)v14 - 1);
                    v14 -= 8;
                    *--v22 = v66;
                  }
                  while (v14 != v16);
                }
LABEL_75:
                v14 = *v12;
LABEL_76:
                *v12 = (char *)v22;
                v12[1] = (char *)v23;
                v12[2] = &v21[8 * v76];
                if (v14)
                  operator delete(v14);
                a3 = v77;
                result = v81;
LABEL_79:
                v12[1] = (char *)v23;
                goto LABEL_4;
              }
            }
            else
            {
              v21 = 0;
              v22 = (float **)(8 * v18);
              *(_QWORD *)(8 * v18) = v9;
              v23 = 8 * v18 + 8;
              v24 = (char *)(v14 - v16);
              if (v14 != v16)
                goto LABEL_22;
            }
            v12 = (char **)a6;
            a4 = v15;
            goto LABEL_76;
          }
LABEL_49:
          *(_QWORD *)v14 = v9;
          v23 = (uint64_t)(v14 + 8);
          goto LABEL_79;
        }
        v12 = (char **)a5;
        v14 = (char *)a5[1];
        v49 = a5[2];
        if ((unint64_t)v14 < v49)
          goto LABEL_49;
        v50 = a4;
        v51 = (char *)*a5;
        v52 = (uint64_t)&v14[-*a5];
        v53 = v52 >> 3;
        v54 = (v52 >> 3) + 1;
        if (v54 >> 61)
          sub_22367C394();
        v55 = v49 - (_QWORD)v51;
        if (v55 >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v54 = 0x1FFFFFFFFFFFFFFFLL;
        v76 = v54;
        if (v54)
        {
          if (v54 >> 61)
LABEL_82:
            sub_223174E94();
          v21 = operator new(8 * v54);
          v22 = (float **)&v21[8 * v53];
          *v22 = v9;
          v23 = (uint64_t)(v22 + 1);
          v56 = (char *)(v14 - v51);
          if (v14 != v51)
          {
LABEL_58:
            v57 = (unint64_t)(v56 - 8);
            v12 = (char **)a5;
            if (v57 >= 0x58)
            {
              v67 = v14 - v21 - v52;
              a4 = v50;
              if (v67 >= 0x20)
              {
                v68 = (v57 >> 3) + 1;
                v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
                v70 = &v14[-v69];
                v22 = (float **)((char *)v22 - v69);
                v71 = &v21[8 * v53 - 16];
                v72 = v14 - 16;
                v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v74 = *(_OWORD *)v72;
                  *(v71 - 1) = *((_OWORD *)v72 - 1);
                  *v71 = v74;
                  v71 -= 2;
                  v72 -= 32;
                  v73 -= 4;
                }
                while (v73);
                v14 = v70;
                if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_75;
              }
            }
            else
            {
              a4 = v50;
            }
            do
            {
              v75 = (float *)*((_QWORD *)v14 - 1);
              v14 -= 8;
              *--v22 = v75;
            }
            while (v14 != v51);
            goto LABEL_75;
          }
        }
        else
        {
          v21 = 0;
          v22 = (float **)(8 * v53);
          *(_QWORD *)(8 * v53) = v9;
          v23 = 8 * v53 + 8;
          v56 = (char *)(v14 - v51);
          if (v14 != v51)
            goto LABEL_58;
        }
        v12 = (char **)a5;
        a4 = v50;
        goto LABEL_76;
      }
LABEL_25:
      if (v11)
      {
        v27 = a4[1];
        v26 = (unint64_t)a4[2];
        if ((unint64_t)v27 >= v26)
        {
          v28 = a4;
          v29 = (char *)*a4;
          v30 = (char *)v27 - (char *)*a4;
          v31 = v30 >> 3;
          v32 = (v30 >> 3) + 1;
          if (v32 >> 61)
            sub_22367C394();
          v33 = a3;
          v34 = v26 - (_QWORD)v29;
          if (v34 >> 2 > v32)
            v32 = v34 >> 2;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v32;
          if (v35)
          {
            if (v35 >> 61)
              goto LABEL_82;
            v36 = operator new(8 * v35);
            v37 = (float **)&v36[8 * v31];
            *v37 = v9;
            v38 = (uint64_t)(v37 + 1);
            v39 = (char *)((char *)v27 - v29);
            if (v27 != (float **)v29)
            {
LABEL_36:
              v40 = (unint64_t)(v39 - 8);
              if (v40 < 0x58)
                goto LABEL_88;
              if ((unint64_t)((char *)v27 - v36 - v30) < 0x20)
                goto LABEL_88;
              v41 = (v40 >> 3) + 1;
              v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v27[v42 / 0xFFFFFFFFFFFFFFF8];
              v37 = (float **)((char *)v37 - v42);
              v44 = &v36[8 * v31 - 16];
              v45 = v27 - 2;
              v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v47 = *(_OWORD *)v45;
                *(v44 - 1) = *((_OWORD *)v45 - 1);
                *v44 = v47;
                v44 -= 2;
                v45 -= 4;
                v46 -= 4;
              }
              while (v46);
              v27 = v43;
              if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_88:
                do
                {
                  v48 = *--v27;
                  *--v37 = v48;
                }
                while (v27 != (float **)v29);
              }
              a4 = v28;
              v27 = *v28;
              *v28 = v37;
              v28[1] = (float **)v38;
              v28[2] = (float **)&v36[8 * v35];
              if (v27)
LABEL_43:
                operator delete(v27);
LABEL_44:
              a3 = v33;
              v8 = a2;
              result = v81;
              a4[1] = (float **)v38;
              goto LABEL_4;
            }
          }
          else
          {
            v36 = 0;
            v37 = (float **)(8 * v31);
            *(_QWORD *)(8 * v31) = v9;
            v38 = 8 * v31 + 8;
            v39 = (char *)((char *)v27 - v29);
            if (v27 != (float **)v29)
              goto LABEL_36;
          }
          a4 = v28;
          *v28 = v37;
          v28[1] = (float **)v38;
          v28[2] = (float **)&v36[8 * v35];
          if (v27)
            goto LABEL_43;
          goto LABEL_44;
        }
        *v27 = v9;
        a4[1] = v27 + 1;
      }
LABEL_4:
      ++v6;
    }
    while (v6 != a3[1]);
  }
  return result;
}

uint64_t sub_22369BE0C(float *a1, float ***a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  float v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  double **v20;
  double **v21;
  float **v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double **v28;
  double **v29;
  double **v30;
  double **v31;
  double **v32;
  double **v33;
  double **v34;
  double **v35;
  double **v36;
  uint64_t v37;
  double **v39;
  double **v40;
  double **v41;
  double **v42;
  double **v43;
  double **v44;
  __int128 v45;
  void *__p;
  double **v47;
  uint64_t v48;
  void *v49;
  double **v50;
  uint64_t v51;
  void *v52;
  double **v53;
  uint64_t v54;
  float v55[2];
  uint64_t v56;
  uint64_t v57;
  int v58;
  float v59;

  v14 = *((_QWORD *)a1 + 1);
  v15 = (float)(a1[1] + a1[3]) * 0.5;
  v57 = *(_QWORD *)a1;
  v58 = v14;
  LODWORD(v55[0]) = v57;
  v56 = v14;
  v59 = v15;
  v55[1] = v15;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  __p = 0;
  v47 = 0;
  v48 = 0;
  sub_22369B900((float *)&v57, v55, a2, (float ***)&v52, &v49, &__p);
  v21 = (double **)__p;
  v20 = v47;
  if (__p == v47)
  {
LABEL_55:
    v36 = (double **)v52;
    v35 = v53;
    if (a3 > 0x63 || ((char *)v53 - (_BYTE *)v52) >> 3 < a4)
    {
LABEL_69:
      while (v36 != v35)
      {
        v39 = v36++;
        v40 = v36;
        if (v36 != v35)
        {
          while ((sub_22369B3C0(a5, *v39, *v40, 1) & 1) != 0)
          {
            v35 = v40 + 1;
            v40 = v35;
            if (v35 == v53)
              goto LABEL_69;
          }
          goto LABEL_58;
        }
      }
    }
    else if (!sub_22369AE00(&v57, &v52, a3 + 1, a4, a5, a6, a7, a8, v16, v17, v18, v19))
    {
      goto LABEL_58;
    }
    v42 = (double **)v49;
    v41 = v50;
    if (a3 > 0x63 || ((char *)v50 - (_BYTE *)v49) >> 3 < a4)
    {
      if (v49 != v50)
      {
        while (1)
        {
          v43 = v42++;
          v44 = v42;
          if (v42 != v41)
            break;
LABEL_75:
          v37 = 1;
          if (v42 == v41)
            goto LABEL_59;
        }
        while ((sub_22369B3C0(a5, *v43, *v44, 1) & 1) != 0)
        {
          v41 = v44 + 1;
          v44 = v41;
          if (v41 == v50)
            goto LABEL_75;
        }
        goto LABEL_58;
      }
      v37 = 1;
    }
    else
    {
      v37 = sub_22369AE00(v55, &v49, a3 + 1, a4, a5, a6, a7, a8, v16, v17, v18, v19);
    }
    goto LABEL_59;
  }
  v16 = (__n128)xmmword_2245F53F0;
  v45 = xmmword_2245F53F0;
  v16.n128_u32[0] = 2139095039;
  v17.n128_u32[0] = -8388609;
  v18.n128_u32[0] = -8388609;
  v22 = (float **)__p;
  v19.n128_u32[0] = 2139095039;
  do
  {
    v23 = *v22;
    v24 = (*v22)[10];
    if (v24 < v19.n128_f32[0])
    {
      *(float *)&v45 = (*v22)[10];
      v19.n128_f32[0] = v24;
      if (v24 <= v18.n128_f32[0])
      {
LABEL_6:
        v25 = v23[11];
        if (v25 >= v16.n128_f32[0])
          goto LABEL_7;
        goto LABEL_15;
      }
    }
    else if (v24 <= v18.n128_f32[0])
    {
      goto LABEL_6;
    }
    *((float *)&v45 + 2) = v24;
    v18.n128_f32[0] = v24;
    v25 = v23[11];
    if (v25 >= v16.n128_f32[0])
    {
LABEL_7:
      if (v25 <= v17.n128_f32[0])
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_15:
    *((float *)&v45 + 1) = v25;
    v16.n128_f32[0] = v25;
    if (v25 <= v17.n128_f32[0])
    {
LABEL_8:
      v26 = v23[12];
      if (v26 >= v19.n128_f32[0])
        goto LABEL_9;
      goto LABEL_17;
    }
LABEL_16:
    *((float *)&v45 + 3) = v25;
    v17.n128_f32[0] = v25;
    v26 = v23[12];
    if (v26 >= v19.n128_f32[0])
    {
LABEL_9:
      if (v26 <= v18.n128_f32[0])
        goto LABEL_10;
      goto LABEL_18;
    }
LABEL_17:
    *(float *)&v45 = v26;
    v19.n128_f32[0] = v26;
    if (v26 <= v18.n128_f32[0])
    {
LABEL_10:
      v27 = v23[13];
      if (v27 < v16.n128_f32[0])
        goto LABEL_19;
      goto LABEL_11;
    }
LABEL_18:
    *((float *)&v45 + 2) = v26;
    v18.n128_f32[0] = v26;
    v27 = v23[13];
    if (v27 < v16.n128_f32[0])
    {
LABEL_19:
      *((float *)&v45 + 1) = v27;
      v16.n128_f32[0] = v27;
      if (v27 <= v17.n128_f32[0])
        goto LABEL_3;
      goto LABEL_20;
    }
LABEL_11:
    if (v27 <= v17.n128_f32[0])
      goto LABEL_3;
LABEL_20:
    *((float *)&v45 + 3) = v27;
    v17.n128_f32[0] = v27;
LABEL_3:
    ++v22;
  }
  while (v22 != (float **)v47);
  if (a3 > 0x63 || ((char *)v47 - (_BYTE *)__p) >> 3 < a4)
  {
    while (1)
    {
      v29 = v21 + 1;
      if (v21 + 1 != v20)
        break;
LABEL_30:
      ++v21;
      if (v29 == v20)
        goto LABEL_25;
    }
    v20 = v21 + 1;
    while ((sub_22369B3C0(a5, *v21, *v20, 1) & 1) != 0)
    {
      if (++v20 == v47)
        goto LABEL_30;
    }
    goto LABEL_58;
  }
  if (!sub_22369AE00(&v45, &__p, a3 + 1, a4, a5, a6, a7, a8, v16, v17, v18, v19))
    goto LABEL_58;
  v20 = v47;
LABEL_25:
  v28 = (double **)__p;
  if (a4 > ((char *)v20 - (_BYTE *)__p) >> 3 || a3 > 0x63 || ((char *)v53 - (_BYTE *)v52) >> 3 < a4)
  {
    if (__p != v20)
    {
      v30 = v53;
      if (v52 != v53)
      {
        while (1)
        {
          v33 = (double **)v52;
          if (v52 != v30)
            break;
LABEL_42:
          if (++v28 == v20)
            goto LABEL_38;
        }
        while ((sub_22369B3C0(a5, *v28, *v33, 1) & 1) != 0)
        {
          if (++v33 == v53)
          {
            v20 = v47;
            v30 = v33;
            goto LABEL_42;
          }
        }
        goto LABEL_58;
      }
    }
LABEL_38:
    v31 = (double **)__p;
    if (a4 > ((char *)v20 - (_BYTE *)__p) >> 3 || a3 > 0x63 || ((char *)v50 - (_BYTE *)v49) >> 3 < a4)
    {
      if (__p != v20)
      {
        v32 = v50;
        if (v49 != v50)
        {
          while (1)
          {
            v34 = (double **)v49;
            if (v49 != v32)
              break;
LABEL_47:
            if (++v31 == v20)
              goto LABEL_55;
          }
          while ((sub_22369B3C0(a5, *v31, *v34, 1) & 1) != 0)
          {
            if (++v34 == v50)
            {
              v20 = v47;
              v32 = v34;
              goto LABEL_47;
            }
          }
          goto LABEL_58;
        }
      }
    }
    else if ((sub_22369C3CC((float *)&v45, (float ***)&__p, (float ***)&v49, a3 + 1, a4, a5, a6, a7, a6, a7, a8) & 1) == 0)
    {
      goto LABEL_58;
    }
    goto LABEL_55;
  }
  if (sub_22369C3CC((float *)&v45, (float ***)&__p, (float ***)&v52, a3 + 1, a4, a5, a6, a7, a6, a7, a8))
  {
    v20 = v47;
    goto LABEL_38;
  }
LABEL_58:
  v37 = 0;
LABEL_59:
  if (__p)
  {
    v47 = (double **)__p;
    operator delete(__p);
  }
  if (v49)
  {
    v50 = (double **)v49;
    operator delete(v49);
  }
  if (v52)
  {
    v53 = (double **)v52;
    operator delete(v52);
  }
  return v37;
}

void sub_22369C360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v24;
  void *v25;

  if (__p)
  {
    operator delete(__p);
    v24 = a19;
    if (!a19)
    {
LABEL_3:
      v25 = a22;
      if (!a22)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v24 = a19;
    if (!a19)
      goto LABEL_3;
  }
  operator delete(v24);
  v25 = a22;
  if (!a22)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22369C3CC(float *a1, float ***a2, float ***a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  float v18;
  double **v19;
  double **v20;
  double **v21;
  float **v22;
  double **v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  double **v38;
  double **v39;
  double **v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  double **v50;
  double **v51;
  double **v52;
  double **v53;
  float **v54;
  float **v55;
  double **v56;
  double **v57;
  double **v58;
  float **v60;
  double **v61;
  double **v62;
  double **v63;
  double **v64;
  double **v65;
  double **v66;
  double **v67;
  double **v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  uint64_t v78;
  double **v79;
  double **v82;
  __int128 v83;
  void *__p;
  double **v85;
  uint64_t v86;
  void *v87;
  double **v88;
  uint64_t v89;
  void *v90;
  double **v91;
  uint64_t v92;
  void *v93;
  double **v94;
  uint64_t v95;
  void *v96;
  double **v97;
  uint64_t v98;
  float **v99;
  float **v100;
  uint64_t v101;
  float v102[2];
  uint64_t v103;
  uint64_t v104;
  float v105;
  int v106;

  v17 = *((_QWORD *)a1 + 1);
  v18 = (float)(*a1 + a1[2]) * 0.5;
  v104 = *(_QWORD *)a1;
  v106 = HIDWORD(v17);
  v102[1] = *((float *)&v104 + 1);
  v103 = v17;
  v105 = v18;
  v102[0] = v18;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  __p = 0;
  v85 = 0;
  v86 = 0;
  sub_22369B900((float *)&v104, v102, a2, &v99, &v96, &v93);
  sub_22369B900((float *)&v104, v102, a3, (float ***)&v90, &v87, &__p);
  v20 = (double **)v93;
  v19 = v94;
  if (v93 == v94)
    goto LABEL_95;
  v22 = (float **)__p;
  v21 = v85;
  if (a5 > ((char *)v94 - (_BYTE *)v93) >> 3 || a4 > 0x63 || ((char *)v85 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v85)
    {
      do
      {
        v23 = (double **)__p;
        if (__p != v21)
        {
          do
          {
            if ((sub_22369B3C0(a6, *v20, *v23, 1) & 1) == 0)
              goto LABEL_158;
            ++v23;
          }
          while (v23 != v85);
          v19 = v94;
          v21 = v23;
        }
        ++v20;
      }
      while (v20 != v19);
    }
    goto LABEL_51;
  }
  v83 = xmmword_2245F53F0;
  v24 = 3.4028e38;
  v25 = -3.4028e38;
  v26 = -3.4028e38;
  v27 = 3.4028e38;
  do
  {
    v28 = (float *)*v20;
    v29 = *((float *)*v20 + 10);
    if (v29 >= v27)
    {
      if (v29 <= v26)
      {
LABEL_16:
        v30 = v28[11];
        if (v30 < v24)
          goto LABEL_17;
        goto LABEL_25;
      }
    }
    else
    {
      LODWORD(v83) = *((_DWORD *)*v20 + 10);
      v27 = v29;
      if (v29 <= v26)
        goto LABEL_16;
    }
    *((float *)&v83 + 2) = v29;
    v26 = v29;
    v30 = v28[11];
    if (v30 < v24)
    {
LABEL_17:
      *((float *)&v83 + 1) = v30;
      v24 = v30;
      if (v30 <= v25)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    if (v30 <= v25)
    {
LABEL_18:
      v31 = v28[12];
      if (v31 < v27)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    *((float *)&v83 + 3) = v30;
    v25 = v30;
    v31 = v28[12];
    if (v31 < v27)
    {
LABEL_19:
      *(float *)&v83 = v31;
      v27 = v31;
      if (v31 <= v26)
        goto LABEL_20;
      goto LABEL_28;
    }
LABEL_27:
    if (v31 <= v26)
    {
LABEL_20:
      v32 = v28[13];
      if (v32 >= v24)
        goto LABEL_29;
      goto LABEL_21;
    }
LABEL_28:
    *((float *)&v83 + 2) = v31;
    v26 = v31;
    v32 = v28[13];
    if (v32 >= v24)
    {
LABEL_29:
      if (v32 <= v25)
        goto LABEL_13;
      goto LABEL_30;
    }
LABEL_21:
    *((float *)&v83 + 1) = v32;
    v24 = v32;
    if (v32 <= v25)
      goto LABEL_13;
LABEL_30:
    *((float *)&v83 + 3) = v32;
    v25 = v32;
LABEL_13:
    ++v20;
  }
  while (v20 != v94);
  while (v22 != (float **)v85)
  {
    v33 = *v22;
    v34 = (*v22)[10];
    if (v34 >= v27)
    {
      if (v34 <= v26)
      {
LABEL_35:
        v35 = v33[11];
        if (v35 < v24)
          goto LABEL_36;
        goto LABEL_44;
      }
    }
    else
    {
      *(float *)&v83 = (*v22)[10];
      v27 = v34;
      if (v34 <= v26)
        goto LABEL_35;
    }
    *((float *)&v83 + 2) = v34;
    v26 = v34;
    v35 = v33[11];
    if (v35 < v24)
    {
LABEL_36:
      *((float *)&v83 + 1) = v35;
      v24 = v35;
      if (v35 <= v25)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    if (v35 <= v25)
    {
LABEL_37:
      v36 = v33[12];
      if (v36 < v27)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    *((float *)&v83 + 3) = v35;
    v25 = v35;
    v36 = v33[12];
    if (v36 < v27)
    {
LABEL_38:
      *(float *)&v83 = v36;
      v27 = v36;
      if (v36 <= v26)
        goto LABEL_39;
      goto LABEL_47;
    }
LABEL_46:
    if (v36 <= v26)
    {
LABEL_39:
      v37 = v33[13];
      if (v37 >= v24)
        goto LABEL_48;
      goto LABEL_40;
    }
LABEL_47:
    *((float *)&v83 + 2) = v36;
    v26 = v36;
    v37 = v33[13];
    if (v37 >= v24)
    {
LABEL_48:
      if (v37 <= v25)
        goto LABEL_31;
      goto LABEL_49;
    }
LABEL_40:
    *((float *)&v83 + 1) = v37;
    v24 = v37;
    if (v37 <= v25)
      goto LABEL_31;
LABEL_49:
    *((float *)&v83 + 3) = v37;
    v25 = v37;
LABEL_31:
    ++v22;
  }
  if ((sub_22369CF58((float *)&v83, (float ***)&v93, (float ***)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_158;
LABEL_51:
  v38 = v91;
  if (a5 > ((char *)v91 - (_BYTE *)v90) >> 3)
  {
    v40 = (double **)v93;
    v39 = v94;
    goto LABEL_76;
  }
  v40 = (double **)v93;
  v39 = v94;
  if (a5 > ((char *)v88 - (_BYTE *)v87) >> 3 || a4 > 0x63 || ((char *)v94 - (_BYTE *)v93) >> 3 < a5)
  {
LABEL_76:
    if (v90 == v91 || v40 == v39)
    {
      if (v40 == v39)
        goto LABEL_95;
    }
    else
    {
      do
      {
        v51 = (double **)v90;
        if (v90 != v38)
        {
          do
          {
            if ((sub_22369B3C0(a6, *v40, *v51, 1) & 1) == 0)
              goto LABEL_158;
            ++v51;
          }
          while (v51 != v91);
          v39 = v94;
          v38 = v51;
        }
        ++v40;
      }
      while (v40 != v39);
      v40 = (double **)v93;
      if (v93 == v39)
        goto LABEL_95;
    }
    v50 = v88;
    if (v87 != v88)
    {
      do
      {
        v52 = (double **)v87;
        if (v87 != v50)
        {
          do
          {
            if ((sub_22369B3C0(a6, *v40, *v52, 1) & 1) == 0)
              goto LABEL_158;
            ++v52;
          }
          while (v52 != v88);
          v39 = v94;
          v50 = v52;
        }
        ++v40;
      }
      while (v40 != v39);
    }
  }
  else
  {
    v83 = xmmword_2245F53F0;
    if (v93 != v94)
    {
      v41 = 3.4028e38;
      v42 = -3.4028e38;
      v43 = -3.4028e38;
      v44 = 3.4028e38;
      do
      {
        v45 = (float *)*v40;
        v46 = *((float *)*v40 + 10);
        if (v46 >= v44)
        {
          if (v46 <= v43)
          {
LABEL_61:
            v47 = v45[11];
            if (v47 < v41)
              goto LABEL_62;
            goto LABEL_70;
          }
        }
        else
        {
          LODWORD(v83) = *((_DWORD *)*v40 + 10);
          v44 = v46;
          if (v46 <= v43)
            goto LABEL_61;
        }
        *((float *)&v83 + 2) = v46;
        v43 = v46;
        v47 = v45[11];
        if (v47 < v41)
        {
LABEL_62:
          *((float *)&v83 + 1) = v47;
          v41 = v47;
          if (v47 <= v42)
            goto LABEL_63;
          goto LABEL_71;
        }
LABEL_70:
        if (v47 <= v42)
        {
LABEL_63:
          v48 = v45[12];
          if (v48 < v44)
            goto LABEL_64;
          goto LABEL_72;
        }
LABEL_71:
        *((float *)&v83 + 3) = v47;
        v42 = v47;
        v48 = v45[12];
        if (v48 < v44)
        {
LABEL_64:
          *(float *)&v83 = v48;
          v44 = v48;
          if (v48 <= v43)
            goto LABEL_65;
          goto LABEL_73;
        }
LABEL_72:
        if (v48 <= v43)
        {
LABEL_65:
          v49 = v45[13];
          if (v49 < v41)
            goto LABEL_66;
          goto LABEL_74;
        }
LABEL_73:
        *((float *)&v83 + 2) = v48;
        v43 = v48;
        v49 = v45[13];
        if (v49 < v41)
        {
LABEL_66:
          *((float *)&v83 + 1) = v49;
          v41 = v49;
          if (v49 > v42)
            goto LABEL_75;
          goto LABEL_58;
        }
LABEL_74:
        if (v49 > v42)
        {
LABEL_75:
          *((float *)&v83 + 3) = v49;
          v42 = v49;
        }
LABEL_58:
        ++v40;
      }
      while (v40 != v94);
    }
    if (!sub_22369CF58((float *)&v83, (float ***)&v93, (float ***)&v90, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_22369CF58((float *)&v83, (float ***)&v93, (float ***)&v87, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
LABEL_158:
      v78 = 0;
      v79 = (double **)__p;
      if (__p)
        goto LABEL_159;
      goto LABEL_160;
    }
  }
LABEL_95:
  v54 = (float **)__p;
  v53 = v85;
  if (__p == v85)
    goto LABEL_104;
  v56 = (double **)v99;
  v55 = v100;
  if (a5 <= v100 - v99
    && a5 <= ((char *)v97 - (_BYTE *)v96) >> 3
    && a4 <= 0x63
    && ((char *)v85 - (_BYTE *)__p) >> 3 >= a5)
  {
    v83 = xmmword_2245F53F0;
    v69 = 3.4028e38;
    v70 = -3.4028e38;
    v71 = -3.4028e38;
    v72 = 3.4028e38;
    while (1)
    {
      v73 = *v54;
      v74 = (*v54)[10];
      if (v74 >= v72)
      {
        if (v74 <= v71)
        {
LABEL_136:
          v75 = v73[11];
          if (v75 < v69)
            goto LABEL_137;
          goto LABEL_145;
        }
      }
      else
      {
        *(float *)&v83 = (*v54)[10];
        v72 = v74;
        if (v74 <= v71)
          goto LABEL_136;
      }
      *((float *)&v83 + 2) = v74;
      v71 = v74;
      v75 = v73[11];
      if (v75 < v69)
      {
LABEL_137:
        *((float *)&v83 + 1) = v75;
        v69 = v75;
        if (v75 <= v70)
          goto LABEL_138;
        goto LABEL_146;
      }
LABEL_145:
      if (v75 <= v70)
      {
LABEL_138:
        v76 = v73[12];
        if (v76 < v72)
          goto LABEL_139;
        goto LABEL_147;
      }
LABEL_146:
      *((float *)&v83 + 3) = v75;
      v70 = v75;
      v76 = v73[12];
      if (v76 < v72)
      {
LABEL_139:
        *(float *)&v83 = v76;
        v72 = v76;
        if (v76 <= v71)
          goto LABEL_140;
        goto LABEL_148;
      }
LABEL_147:
      if (v76 <= v71)
      {
LABEL_140:
        v77 = v73[13];
        if (v77 < v69)
          goto LABEL_141;
        goto LABEL_149;
      }
LABEL_148:
      *((float *)&v83 + 2) = v76;
      v71 = v76;
      v77 = v73[13];
      if (v77 < v69)
      {
LABEL_141:
        *((float *)&v83 + 1) = v77;
        v69 = v77;
        if (v77 > v70)
          goto LABEL_150;
        goto LABEL_133;
      }
LABEL_149:
      if (v77 > v70)
      {
LABEL_150:
        *((float *)&v83 + 3) = v77;
        v70 = v77;
      }
LABEL_133:
      if (++v54 == (float **)v85)
      {
        if (!sub_22369CF58((float *)&v83, &v99, (float ***)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
          || (sub_22369CF58((float *)&v83, (float ***)&v96, (float ***)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
        {
          goto LABEL_158;
        }
        goto LABEL_104;
      }
    }
  }
  if (v99 == v100)
  {
    v58 = (double **)v96;
    v57 = v97;
    if (v96 == v97 || __p == v85)
      goto LABEL_104;
  }
  else
  {
    do
    {
      v63 = (double **)__p;
      if (__p != v53)
      {
        do
        {
          if ((sub_22369B3C0(a6, *v56, *v63, 1) & 1) == 0)
            goto LABEL_158;
          ++v63;
        }
        while (v63 != v85);
        v55 = v100;
        v53 = v63;
      }
      ++v56;
    }
    while (v56 != (double **)v55);
    v58 = (double **)v96;
    v57 = v97;
    if (v96 == v97 || __p == v53)
      goto LABEL_104;
  }
  do
  {
    v82 = (double **)__p;
    if (__p != v53)
    {
      do
      {
        if ((sub_22369B3C0(a6, *v58, *v82, 1) & 1) == 0)
          goto LABEL_158;
        ++v82;
      }
      while (v82 != v85);
      v57 = v97;
      v53 = v82;
    }
    ++v58;
  }
  while (v58 != v57);
LABEL_104:
  v61 = (double **)v99;
  v60 = v100;
  if (a5 > v100 - v99 || a4 > 0x63 || ((char *)v91 - (_BYTE *)v90) >> 3 < a5)
  {
    if (v99 != v100)
    {
      v62 = v91;
      if (v90 != v91)
      {
        while (1)
        {
          v64 = (double **)v90;
          if (v90 != v62)
            break;
LABEL_113:
          if (++v61 == (double **)v60)
            goto LABEL_121;
        }
        while ((sub_22369B3C0(a6, *v61, *v64, 1) & 1) != 0)
        {
          if (++v64 == v91)
          {
            v60 = v100;
            v62 = v64;
            goto LABEL_113;
          }
        }
        goto LABEL_158;
      }
    }
  }
  else if ((sub_22369CF58((float *)&v104, &v99, (float ***)&v90, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_158;
  }
LABEL_121:
  v66 = (double **)v96;
  v65 = v97;
  if (a5 > ((char *)v97 - (_BYTE *)v96) >> 3 || a4 > 0x63 || ((char *)v88 - (_BYTE *)v87) >> 3 < a5)
  {
    if (v96 != v97)
    {
      v67 = v88;
      if (v87 != v88)
      {
        while (1)
        {
          v68 = (double **)v87;
          if (v87 != v67)
            break;
LABEL_125:
          if (++v66 == v65)
            goto LABEL_154;
        }
        while ((sub_22369B3C0(a6, *v66, *v68, 1) & 1) != 0)
        {
          if (++v68 == v88)
          {
            v65 = v97;
            v67 = v68;
            goto LABEL_125;
          }
        }
        goto LABEL_158;
      }
    }
  }
  else if ((sub_22369CF58(v102, (float ***)&v96, (float ***)&v87, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_158;
  }
LABEL_154:
  v78 = 1;
  v79 = (double **)__p;
  if (__p)
  {
LABEL_159:
    v85 = v79;
    operator delete(v79);
  }
LABEL_160:
  if (v87)
  {
    v88 = (double **)v87;
    operator delete(v87);
  }
  if (v90)
  {
    v91 = (double **)v90;
    operator delete(v90);
  }
  if (v93)
  {
    v94 = (double **)v93;
    operator delete(v93);
  }
  if (v96)
  {
    v97 = (double **)v96;
    operator delete(v96);
  }
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  return v78;
}

void sub_22369CE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  if (__p)
  {
    operator delete(__p);
    v31 = a19;
    if (!a19)
    {
LABEL_3:
      v32 = a22;
      if (!a22)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v31 = a19;
    if (!a19)
      goto LABEL_3;
  }
  operator delete(v31);
  v32 = a22;
  if (!a22)
  {
LABEL_4:
    v33 = a25;
    if (!a25)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v32);
  v33 = a25;
  if (!a25)
  {
LABEL_5:
    v34 = a28;
    if (!a28)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v33);
  v34 = a28;
  if (!a28)
  {
LABEL_6:
    v35 = *(void **)(v29 - 144);
    if (!v35)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v34);
  v35 = *(void **)(v29 - 144);
  if (!v35)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v29 - 136) = v35;
  operator delete(v35);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22369CF58(float *a1, float ***a2, float ***a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  float v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  double **v23;
  double **v24;
  double **v25;
  float **v26;
  double **v27;
  __n128 v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  double **v39;
  double **v40;
  double **v41;
  __n128 v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  double **v48;
  double **v49;
  double **v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  double **v55;
  float **v56;
  float **v57;
  double **v58;
  double **v59;
  double **v60;
  float **v62;
  double **v63;
  double **v64;
  double **v65;
  double **v66;
  double **v67;
  double **v68;
  double **v69;
  double **v70;
  __n128 v71;
  float *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  double **v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  double **v85;
  __int128 v86;
  void *__p;
  double **v88;
  uint64_t v89;
  void *v90;
  double **v91;
  uint64_t v92;
  void *v93;
  double **v94;
  uint64_t v95;
  void *v96;
  double **v97;
  uint64_t v98;
  void *v99;
  double **v100;
  uint64_t v101;
  float **v102;
  float **v103;
  uint64_t v104;
  float v105[2];
  uint64_t v106;
  uint64_t v107;
  int v108;
  float v109;

  v17 = *((_QWORD *)a1 + 1);
  v18 = (float)(a1[1] + a1[3]) * 0.5;
  v107 = *(_QWORD *)a1;
  v108 = v17;
  LODWORD(v105[0]) = v107;
  v106 = v17;
  v109 = v18;
  v105[1] = v18;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  __p = 0;
  v88 = 0;
  v89 = 0;
  sub_22369B900((float *)&v107, v105, a2, &v102, &v99, &v96);
  sub_22369B900((float *)&v107, v105, a3, (float ***)&v93, &v90, &__p);
  v24 = (double **)v96;
  v23 = v97;
  if (v96 == v97)
    goto LABEL_95;
  v26 = (float **)__p;
  v25 = v88;
  if (a5 > ((char *)v97 - (_BYTE *)v96) >> 3 || a4 > 0x63 || ((char *)v88 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v88)
    {
      do
      {
        v27 = (double **)__p;
        if (__p != v25)
        {
          do
          {
            if ((sub_22369B3C0(a6, *v24, *v27, 1) & 1) == 0)
              goto LABEL_158;
            ++v27;
          }
          while (v27 != v88);
          v23 = v97;
          v25 = v27;
        }
        ++v24;
      }
      while (v24 != v23);
    }
    goto LABEL_51;
  }
  v28 = (__n128)xmmword_2245F53F0;
  v86 = xmmword_2245F53F0;
  v28.n128_u32[0] = 2139095039;
  v20.n128_u32[0] = -8388609;
  v21.n128_u32[0] = -8388609;
  v22.n128_u32[0] = 2139095039;
  do
  {
    v29 = (float *)*v24;
    v30 = *((float *)*v24 + 10);
    if (v30 >= v22.n128_f32[0])
    {
      if (v30 <= v21.n128_f32[0])
      {
LABEL_16:
        v31 = v29[11];
        if (v31 < v28.n128_f32[0])
          goto LABEL_17;
        goto LABEL_25;
      }
    }
    else
    {
      LODWORD(v86) = *((_DWORD *)*v24 + 10);
      v22.n128_f32[0] = v30;
      if (v30 <= v21.n128_f32[0])
        goto LABEL_16;
    }
    *((float *)&v86 + 2) = v30;
    v21.n128_f32[0] = v30;
    v31 = v29[11];
    if (v31 < v28.n128_f32[0])
    {
LABEL_17:
      *((float *)&v86 + 1) = v31;
      v28.n128_f32[0] = v31;
      if (v31 <= v20.n128_f32[0])
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    if (v31 <= v20.n128_f32[0])
    {
LABEL_18:
      v32 = v29[12];
      if (v32 < v22.n128_f32[0])
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    *((float *)&v86 + 3) = v31;
    v20.n128_f32[0] = v31;
    v32 = v29[12];
    if (v32 < v22.n128_f32[0])
    {
LABEL_19:
      *(float *)&v86 = v32;
      v22.n128_f32[0] = v32;
      if (v32 <= v21.n128_f32[0])
        goto LABEL_20;
      goto LABEL_28;
    }
LABEL_27:
    if (v32 <= v21.n128_f32[0])
    {
LABEL_20:
      v33 = v29[13];
      if (v33 >= v28.n128_f32[0])
        goto LABEL_29;
      goto LABEL_21;
    }
LABEL_28:
    *((float *)&v86 + 2) = v32;
    v21.n128_f32[0] = v32;
    v33 = v29[13];
    if (v33 >= v28.n128_f32[0])
    {
LABEL_29:
      if (v33 <= v20.n128_f32[0])
        goto LABEL_13;
      goto LABEL_30;
    }
LABEL_21:
    *((float *)&v86 + 1) = v33;
    v28.n128_f32[0] = v33;
    if (v33 <= v20.n128_f32[0])
      goto LABEL_13;
LABEL_30:
    *((float *)&v86 + 3) = v33;
    v20.n128_f32[0] = v33;
LABEL_13:
    ++v24;
  }
  while (v24 != v97);
  while (v26 != (float **)v88)
  {
    v34 = *v26;
    v35 = (*v26)[10];
    if (v35 >= v22.n128_f32[0])
    {
      if (v35 <= v21.n128_f32[0])
      {
LABEL_35:
        v36 = v34[11];
        if (v36 < v28.n128_f32[0])
          goto LABEL_36;
        goto LABEL_44;
      }
    }
    else
    {
      *(float *)&v86 = (*v26)[10];
      v22.n128_f32[0] = v35;
      if (v35 <= v21.n128_f32[0])
        goto LABEL_35;
    }
    *((float *)&v86 + 2) = v35;
    v21.n128_f32[0] = v35;
    v36 = v34[11];
    if (v36 < v28.n128_f32[0])
    {
LABEL_36:
      *((float *)&v86 + 1) = v36;
      v28.n128_f32[0] = v36;
      if (v36 <= v20.n128_f32[0])
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    if (v36 <= v20.n128_f32[0])
    {
LABEL_37:
      v37 = v34[12];
      if (v37 < v22.n128_f32[0])
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    *((float *)&v86 + 3) = v36;
    v20.n128_f32[0] = v36;
    v37 = v34[12];
    if (v37 < v22.n128_f32[0])
    {
LABEL_38:
      *(float *)&v86 = v37;
      v22.n128_f32[0] = v37;
      if (v37 <= v21.n128_f32[0])
        goto LABEL_39;
      goto LABEL_47;
    }
LABEL_46:
    if (v37 <= v21.n128_f32[0])
    {
LABEL_39:
      v38 = v34[13];
      if (v38 >= v28.n128_f32[0])
        goto LABEL_48;
      goto LABEL_40;
    }
LABEL_47:
    *((float *)&v86 + 2) = v37;
    v21.n128_f32[0] = v37;
    v38 = v34[13];
    if (v38 >= v28.n128_f32[0])
    {
LABEL_48:
      if (v38 <= v20.n128_f32[0])
        goto LABEL_31;
      goto LABEL_49;
    }
LABEL_40:
    *((float *)&v86 + 1) = v38;
    v28.n128_f32[0] = v38;
    if (v38 <= v20.n128_f32[0])
      goto LABEL_31;
LABEL_49:
    *((float *)&v86 + 3) = v38;
    v20.n128_f32[0] = v38;
LABEL_31:
    ++v26;
  }
  if ((sub_22369C3CC(&v86, &v96, &__p, a4 + 1, a5, a6, a7, a8, v28, v20, v21, v22, a9, a10, a11) & 1) == 0)
    goto LABEL_158;
LABEL_51:
  v39 = v94;
  if (a5 > ((char *)v94 - (_BYTE *)v93) >> 3)
  {
    v41 = (double **)v96;
    v40 = v97;
    goto LABEL_76;
  }
  v41 = (double **)v96;
  v40 = v97;
  if (a5 > ((char *)v91 - (_BYTE *)v90) >> 3 || a4 > 0x63 || ((char *)v97 - (_BYTE *)v96) >> 3 < a5)
  {
LABEL_76:
    if (v93 == v94 || v41 == v40)
    {
      if (v41 == v40)
        goto LABEL_95;
    }
    else
    {
      do
      {
        v49 = (double **)v93;
        if (v93 != v39)
        {
          do
          {
            if ((sub_22369B3C0(a6, *v41, *v49, 1) & 1) == 0)
              goto LABEL_158;
            ++v49;
          }
          while (v49 != v94);
          v40 = v97;
          v39 = v49;
        }
        ++v41;
      }
      while (v41 != v40);
      v41 = (double **)v96;
      if (v96 == v40)
        goto LABEL_95;
    }
    v48 = v91;
    if (v90 != v91)
    {
      do
      {
        v50 = (double **)v90;
        if (v90 != v48)
        {
          do
          {
            if ((sub_22369B3C0(a6, *v41, *v50, 1) & 1) == 0)
              goto LABEL_158;
            ++v50;
          }
          while (v50 != v91);
          v40 = v97;
          v48 = v50;
        }
        ++v41;
      }
      while (v41 != v40);
    }
  }
  else
  {
    v42 = (__n128)xmmword_2245F53F0;
    v86 = xmmword_2245F53F0;
    if (v96 != v97)
    {
      v42.n128_u32[0] = 2139095039;
      v20.n128_u32[0] = -8388609;
      v21.n128_u32[0] = -8388609;
      v22.n128_u32[0] = 2139095039;
      do
      {
        v43 = (float *)*v41;
        v44 = *((float *)*v41 + 10);
        if (v44 >= v22.n128_f32[0])
        {
          if (v44 <= v21.n128_f32[0])
          {
LABEL_61:
            v45 = v43[11];
            if (v45 < v42.n128_f32[0])
              goto LABEL_62;
            goto LABEL_70;
          }
        }
        else
        {
          LODWORD(v86) = *((_DWORD *)*v41 + 10);
          v22.n128_f32[0] = v44;
          if (v44 <= v21.n128_f32[0])
            goto LABEL_61;
        }
        *((float *)&v86 + 2) = v44;
        v21.n128_f32[0] = v44;
        v45 = v43[11];
        if (v45 < v42.n128_f32[0])
        {
LABEL_62:
          *((float *)&v86 + 1) = v45;
          v42.n128_f32[0] = v45;
          if (v45 <= v20.n128_f32[0])
            goto LABEL_63;
          goto LABEL_71;
        }
LABEL_70:
        if (v45 <= v20.n128_f32[0])
        {
LABEL_63:
          v46 = v43[12];
          if (v46 < v22.n128_f32[0])
            goto LABEL_64;
          goto LABEL_72;
        }
LABEL_71:
        *((float *)&v86 + 3) = v45;
        v20.n128_f32[0] = v45;
        v46 = v43[12];
        if (v46 < v22.n128_f32[0])
        {
LABEL_64:
          *(float *)&v86 = v46;
          v22.n128_f32[0] = v46;
          if (v46 <= v21.n128_f32[0])
            goto LABEL_65;
          goto LABEL_73;
        }
LABEL_72:
        if (v46 <= v21.n128_f32[0])
        {
LABEL_65:
          v47 = v43[13];
          if (v47 < v42.n128_f32[0])
            goto LABEL_66;
          goto LABEL_74;
        }
LABEL_73:
        *((float *)&v86 + 2) = v46;
        v21.n128_f32[0] = v46;
        v47 = v43[13];
        if (v47 < v42.n128_f32[0])
        {
LABEL_66:
          *((float *)&v86 + 1) = v47;
          v42.n128_f32[0] = v47;
          if (v47 > v20.n128_f32[0])
            goto LABEL_75;
          goto LABEL_58;
        }
LABEL_74:
        if (v47 > v20.n128_f32[0])
        {
LABEL_75:
          *((float *)&v86 + 3) = v47;
          v20.n128_f32[0] = v47;
        }
LABEL_58:
        ++v41;
      }
      while (v41 != v97);
    }
    if (!sub_22369C3CC(&v86, &v96, &v93, a4 + 1, a5, a6, a7, a8, v42, v20, v21, v22, a9, a10, a11)
      || (sub_22369C3CC(&v86, &v96, &v90, a4 + 1, a5, a6, a7, a8, v51, v52, v53, v54, a9, a10, a11) & 1) == 0)
    {
LABEL_158:
      v77 = 0;
      v78 = (double **)__p;
      if (__p)
        goto LABEL_159;
      goto LABEL_160;
    }
  }
LABEL_95:
  v56 = (float **)__p;
  v55 = v88;
  if (__p == v88)
    goto LABEL_104;
  v58 = (double **)v102;
  v57 = v103;
  if (a5 <= v103 - v102
    && a5 <= ((char *)v100 - (_BYTE *)v99) >> 3
    && a4 <= 0x63
    && ((char *)v88 - (_BYTE *)__p) >> 3 >= a5)
  {
    v71 = (__n128)xmmword_2245F53F0;
    v86 = xmmword_2245F53F0;
    v71.n128_u32[0] = 2139095039;
    v20.n128_u32[0] = -8388609;
    v21.n128_u32[0] = -8388609;
    v22.n128_u32[0] = 2139095039;
    while (1)
    {
      v72 = *v56;
      v73 = (*v56)[10];
      if (v73 >= v22.n128_f32[0])
      {
        if (v73 <= v21.n128_f32[0])
        {
LABEL_136:
          v74 = v72[11];
          if (v74 < v71.n128_f32[0])
            goto LABEL_137;
          goto LABEL_145;
        }
      }
      else
      {
        *(float *)&v86 = (*v56)[10];
        v22.n128_f32[0] = v73;
        if (v73 <= v21.n128_f32[0])
          goto LABEL_136;
      }
      *((float *)&v86 + 2) = v73;
      v21.n128_f32[0] = v73;
      v74 = v72[11];
      if (v74 < v71.n128_f32[0])
      {
LABEL_137:
        *((float *)&v86 + 1) = v74;
        v71.n128_f32[0] = v74;
        if (v74 <= v20.n128_f32[0])
          goto LABEL_138;
        goto LABEL_146;
      }
LABEL_145:
      if (v74 <= v20.n128_f32[0])
      {
LABEL_138:
        v75 = v72[12];
        if (v75 < v22.n128_f32[0])
          goto LABEL_139;
        goto LABEL_147;
      }
LABEL_146:
      *((float *)&v86 + 3) = v74;
      v20.n128_f32[0] = v74;
      v75 = v72[12];
      if (v75 < v22.n128_f32[0])
      {
LABEL_139:
        *(float *)&v86 = v75;
        v22.n128_f32[0] = v75;
        if (v75 <= v21.n128_f32[0])
          goto LABEL_140;
        goto LABEL_148;
      }
LABEL_147:
      if (v75 <= v21.n128_f32[0])
      {
LABEL_140:
        v76 = v72[13];
        if (v76 < v71.n128_f32[0])
          goto LABEL_141;
        goto LABEL_149;
      }
LABEL_148:
      *((float *)&v86 + 2) = v75;
      v21.n128_f32[0] = v75;
      v76 = v72[13];
      if (v76 < v71.n128_f32[0])
      {
LABEL_141:
        *((float *)&v86 + 1) = v76;
        v71.n128_f32[0] = v76;
        if (v76 > v20.n128_f32[0])
          goto LABEL_150;
        goto LABEL_133;
      }
LABEL_149:
      if (v76 > v20.n128_f32[0])
      {
LABEL_150:
        *((float *)&v86 + 3) = v76;
        v20.n128_f32[0] = v76;
      }
LABEL_133:
      if (++v56 == (float **)v88)
      {
        if (!sub_22369C3CC(&v86, &v102, &__p, a4 + 1, a5, a6, a7, a8, v71, v20, v21, v22, a9, a10, a11)
          || (sub_22369C3CC(&v86, &v99, &__p, a4 + 1, a5, a6, a7, a8, v79, v80, v81, v82, a9, a10, a11) & 1) == 0)
        {
          goto LABEL_158;
        }
        goto LABEL_104;
      }
    }
  }
  if (v102 == v103)
  {
    v60 = (double **)v99;
    v59 = v100;
    if (v99 == v100 || __p == v88)
      goto LABEL_104;
  }
  else
  {
    do
    {
      v65 = (double **)__p;
      if (__p != v55)
      {
        do
        {
          if ((sub_22369B3C0(a6, *v58, *v65, 1) & 1) == 0)
            goto LABEL_158;
          ++v65;
        }
        while (v65 != v88);
        v57 = v103;
        v55 = v65;
      }
      ++v58;
    }
    while (v58 != (double **)v57);
    v60 = (double **)v99;
    v59 = v100;
    if (v99 == v100 || __p == v55)
      goto LABEL_104;
  }
  do
  {
    v85 = (double **)__p;
    if (__p != v55)
    {
      do
      {
        if ((sub_22369B3C0(a6, *v60, *v85, 1) & 1) == 0)
          goto LABEL_158;
        ++v85;
      }
      while (v85 != v88);
      v59 = v100;
      v55 = v85;
    }
    ++v60;
  }
  while (v60 != v59);
LABEL_104:
  v63 = (double **)v102;
  v62 = v103;
  if (a5 > v103 - v102 || a4 > 0x63 || ((char *)v94 - (_BYTE *)v93) >> 3 < a5)
  {
    if (v102 != v103)
    {
      v64 = v94;
      if (v93 != v94)
      {
        while (1)
        {
          v66 = (double **)v93;
          if (v93 != v64)
            break;
LABEL_113:
          if (++v63 == (double **)v62)
            goto LABEL_121;
        }
        while ((sub_22369B3C0(a6, *v63, *v66, 1) & 1) != 0)
        {
          if (++v66 == v94)
          {
            v62 = v103;
            v64 = v66;
            goto LABEL_113;
          }
        }
        goto LABEL_158;
      }
    }
  }
  else if ((sub_22369C3CC(&v107, &v102, &v93, a4 + 1, a5, a6, a7, a8, v19, v20, v21, v22, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_158;
  }
LABEL_121:
  v68 = (double **)v99;
  v67 = v100;
  if (a5 > ((char *)v100 - (_BYTE *)v99) >> 3 || a4 > 0x63 || ((char *)v91 - (_BYTE *)v90) >> 3 < a5)
  {
    if (v99 != v100)
    {
      v69 = v91;
      if (v90 != v91)
      {
        while (1)
        {
          v70 = (double **)v90;
          if (v90 != v69)
            break;
LABEL_125:
          if (++v68 == v67)
            goto LABEL_154;
        }
        while ((sub_22369B3C0(a6, *v68, *v70, 1) & 1) != 0)
        {
          if (++v70 == v91)
          {
            v67 = v100;
            v69 = v70;
            goto LABEL_125;
          }
        }
        goto LABEL_158;
      }
    }
  }
  else if ((sub_22369C3CC(v105, &v99, &v90, a4 + 1, a5, a6, a7, a8, v19, v20, v21, v22, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_158;
  }
LABEL_154:
  v77 = 1;
  v78 = (double **)__p;
  if (__p)
  {
LABEL_159:
    v88 = v78;
    operator delete(v78);
  }
LABEL_160:
  if (v90)
  {
    v91 = (double **)v90;
    operator delete(v90);
  }
  if (v93)
  {
    v94 = (double **)v93;
    operator delete(v93);
  }
  if (v96)
  {
    v97 = (double **)v96;
    operator delete(v96);
  }
  if (v99)
  {
    v100 = (double **)v99;
    operator delete(v99);
  }
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
  return v77;
}

void sub_22369DA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  if (__p)
  {
    operator delete(__p);
    v31 = a19;
    if (!a19)
    {
LABEL_3:
      v32 = a22;
      if (!a22)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v31 = a19;
    if (!a19)
      goto LABEL_3;
  }
  operator delete(v31);
  v32 = a22;
  if (!a22)
  {
LABEL_4:
    v33 = a25;
    if (!a25)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v32);
  v33 = a25;
  if (!a25)
  {
LABEL_5:
    v34 = a28;
    if (!a28)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v33);
  v34 = a28;
  if (!a28)
  {
LABEL_6:
    v35 = *(void **)(v29 - 144);
    if (!v35)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v34);
  v35 = *(void **)(v29 - 144);
  if (!v35)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v29 - 136) = v35;
  operator delete(v35);
  _Unwind_Resume(exception_object);
}

char **sub_22369DAE4(char **result, char **a2, char **a3, _QWORD *a4, uint64_t *a5, int a6, char a7)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char **v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;

  v8 = (unint64_t *)result;
  v9 = *a5;
  if (*a5 != 2)
  {
    if (v9 == 1)
    {
      if ((a7 & 1) == 0)
      {
        if (result != a3)
          result = (char **)sub_2233320C8(result, *a3, a3[1], (a3[1] - *a3) >> 3);
        if (a6)
        {
          v22 = *v8;
          v21 = v8[1];
          if (*v8 != v21)
          {
            v23 = (_QWORD *)(v21 - 8);
            if ((unint64_t)v23 > v22)
            {
              v24 = v22 + 8;
              do
              {
                v25 = *(_QWORD *)(v24 - 8);
                *(_QWORD *)(v24 - 8) = *v23;
                *v23-- = v25;
                v15 = v24 >= (unint64_t)v23;
                v24 += 8;
              }
              while (!v15);
            }
          }
        }
      }
    }
    else if (!v9 && (a7 & 1) == 0)
    {
      if (result != a2)
        result = (char **)sub_2233320C8(result, *a2, a2[1], (a2[1] - *a2) >> 3);
      if (a6)
      {
        v11 = *v8;
        v10 = v8[1];
        if (*v8 != v10)
        {
          v12 = (_QWORD *)(v10 - 8);
          if ((unint64_t)v12 > v11)
          {
            v13 = v11 + 8;
            do
            {
              v14 = *(_QWORD *)(v13 - 8);
              *(_QWORD *)(v13 - 8) = *v12;
              *v12-- = v14;
              v15 = v13 >= (unint64_t)v12;
              v13 += 8;
            }
            while (!v15);
          }
        }
      }
    }
    return result;
  }
  v16 = a5[1];
  v17 = a4[4];
  v18 = a4[1];
  v19 = (_QWORD *)(v18 + 8 * (v17 / 0xAA));
  if (a4[2] == v18)
  {
    v20 = 0;
    if (!v16)
      goto LABEL_30;
  }
  else
  {
    v20 = (char **)(*v19 + 24 * (v17 % 0xAA));
    if (!v16)
      goto LABEL_30;
  }
  v26 = v16 - 0x5555555555555555 * (((uint64_t)v20 - *v19) >> 3);
  if (v26 < 1)
  {
    v20 = (char **)(v19[-((169 - v26) / 0xAAuLL)] + 24 * (170 * ((169 - v26) / 0xAAuLL) - (169 - v26)) + 4056);
    if ((a7 & 1) != 0)
      return result;
    goto LABEL_31;
  }
  v20 = (char **)(v19[v26 / 0xAAuLL] + 24 * (v26 % 0xAAuLL));
LABEL_30:
  if ((a7 & 1) != 0)
    return result;
LABEL_31:
  if (v20 != result)
    result = (char **)sub_2233320C8(result, *v20, v20[1], (v20[1] - *v20) >> 3);
  if (a6)
  {
    v28 = *v8;
    v27 = v8[1];
    if (*v8 != v27)
    {
      v29 = (_QWORD *)(v27 - 8);
      if ((unint64_t)v29 > v28)
      {
        v30 = v28 + 8;
        do
        {
          v31 = *(_QWORD *)(v30 - 8);
          *(_QWORD *)(v30 - 8) = *v29;
          *v29-- = v31;
          v15 = v30 >= (unint64_t)v29;
          v30 += 8;
        }
        while (!v15);
      }
    }
  }
  return result;
}

char ***sub_22369DD18(char ***a1, const void **a2)
{
  char **v3;
  char *v4;
  _BYTE *v5;
  const void *v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  char *v10;

  v3 = *a1;
  v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    v10 = sub_223452F08(*a1, (uint64_t)a2);
  }
  else
  {
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    v6 = *a2;
    v5 = a2[1];
    v7 = v5 - (_BYTE *)*a2;
    if (v5 != *a2)
    {
      if (v7 < 0)
        sub_22316E078();
      v8 = (char *)operator new(v5 - (_BYTE *)*a2);
      *(_QWORD *)v4 = v8;
      *((_QWORD *)v4 + 1) = v8;
      *((_QWORD *)v4 + 2) = &v8[8 * (v7 >> 3)];
      v9 = v7 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v8, v6, v9);
      *((_QWORD *)v4 + 1) = &v8[v9];
    }
    v10 = v4 + 24;
    v3[1] = v4 + 24;
  }
  v3[1] = v10;
  return a1;
}

void sub_22369DDC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_22369DDE8(uint64_t a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_22369DE48((uint64_t)exception, a1, a2);
  __cxa_throw(exception, (struct type_info *)&unk_24EC57298, (void (*)(void *))sub_22369DE7C);
}

void sub_22369DE30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int8x16_t sub_22369DE48(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  int8x16_t result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24EC572F0;
  *(_QWORD *)(a1 + 8) = &unk_24EC57320;
  *(_QWORD *)(a1 + 16) = &unk_24EC57348;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = a3[1].i32[0];
  result = vextq_s8(*a3, *a3, 8uLL);
  *(int8x16_t *)(a1 + 32) = result;
  return result;
}

std::exception *sub_22369DE7C(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[2].__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = a1[3].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[3].__vftable = 0;
  std::exception::~exception(a1 + 1);
  return a1;
}

uint64_t sub_22369DED4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24EC36548;
  *(_QWORD *)(v2 + 8) = &off_24EC57368;
  *(_QWORD *)(v2 + 16) = &unk_24EC365A0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &off_24EC572F0;
  *(_QWORD *)(v2 + 8) = &unk_24EC57320;
  *(_QWORD *)(v2 + 16) = &unk_24EC57348;
  sub_2233E5A54(v2 + 16, a1 + 16);
  return v2;
}

void sub_22369DF98(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x227684CE8](v1, 0x10F1C40C404A9A7);
  _Unwind_Resume(a1);
}

void sub_22369DFC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_22369DFE0(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_22369E240((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24EC57298, (void (*)(void *))sub_22369DE7C);
}

void sub_22369E01C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_22369E030(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1[2].__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = a1[3].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[3].__vftable = 0;
  std::exception::~exception(a1 + 1);
  JUMPOUT(0x227684CE8);
}

void sub_22369E098(std::exception *this)
{
  std::exception_vtbl *v2;

  this[1].__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[2].__vftable = 0;
  std::exception::~exception(this);
}

void sub_22369E0E8(std::exception *this)
{
  std::exception_vtbl *v2;

  this[1].__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    this[2].__vftable = 0;
  std::exception::~exception(this);
  JUMPOUT(0x227684CE8);
}

const char *sub_22369E154()
{
  return "Boost.Geometry Invalid-Output exception";
}

void sub_22369E160(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 1);
}

void sub_22369E1B0(std::exception *a1)
{
  std::exception_vtbl *v2;

  a1->__vftable = (std::exception_vtbl *)&unk_24EC365A0;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2))
    a1[1].__vftable = 0;
  std::exception::~exception(a1 - 1);
  JUMPOUT(0x227684CE8);
}

void sub_22369E21C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22369E240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24EC36548;
  *(_QWORD *)(a1 + 8) = &off_24EC57368;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24EC365A0;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_24EC572F0;
  *(_QWORD *)(a1 + 8) = &unk_24EC57320;
  *(_QWORD *)(a1 + 16) = &unk_24EC57348;
  return a1;
}

void sub_22369E2D8(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22369E2EC(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0xAA];
    v6 = (unint64_t)*v5;
    v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        v9 = *(void **)v7;
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(v7 + 8) = v9;
          operator delete(v9);
          v6 = (unint64_t)*v5;
        }
        v7 += 24;
        if (v7 - v6 == 4080)
        {
          v10 = (unint64_t)v5[1];
          ++v5;
          v6 = v10;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22369E478(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_22369E478(a1, *a2);
    sub_22369E478(a1, a2[1]);
    sub_223198030((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t sub_22369E4C4(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 8;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 16;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22369E588(unint64_t *a1, char **a2)
{
  float32x2_t *v3;
  unint64_t v4;
  BOOL v5;
  __int128 v6;
  unint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;

  sub_22367C3A8(a1, a1[1], *a2, a2[1], (a2[1] - *a2) >> 3);
  v3 = (float32x2_t *)*a1;
  v4 = a1[1];
  if (*a1)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223FBEADC((uint64_t)(v4 - (_QWORD)v3) >> 3, v3, (uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  v8 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (unint64_t)v8;
    v9 = v6;
    operator delete(v8);
    v6 = v9;
  }
  *(_OWORD *)a1 = v6;
  a1[2] = v7;
}

void sub_22369E650(unint64_t a1@<X1>, float32x2_t *a2@<X3>, float *a3@<X4>, unsigned __int8 a4@<W5>, _QWORD *a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float32x2_t *v13;
  float32x2_t v14;
  char *v15;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  float v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t *v30;
  float v31;
  BOOL v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float *v38;
  float *v39;
  float *v40;
  float *v41;
  float v42;
  float v43;
  float *v44;
  char *v45;
  float *v46;
  char *v47;
  char *v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float *v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  float *v62;
  float *v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float *v69;
  float *v70;
  float v71;
  unint64_t v72;
  float32x2_t v73;
  float32x2_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x2_t v77;
  float32x2_t v78;
  int32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  int64x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float v85;
  float32x2_t *v86;
  float v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  float32x2_t *v93;
  uint64_t v94;
  float32x2_t v95;
  float32x2_t v96;
  uint64_t (***v97)();
  uint64_t (***v98)();
  uint64_t (***v99)();
  uint64_t (***v100)();
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float v108;
  float *v109;
  float32x2_t v110;
  float v111;
  float32x2_t *v112;
  float v113;
  float v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float *v123;
  float *v124;
  float32x2_t *v125;
  void (**v126)(float *);
  BOOL v127;
  float *v128;
  float32x2_t v129;
  float32x2_t *v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  _QWORD v134[2];
  float32x2_t v135;
  float32x2_t v136[2];
  float32x2_t v137;
  float32x2_t v138[2];
  __int128 v139;
  uint64_t (**v140)();
  __int128 v141;
  float32x2_t *v142;
  float32x2_t *v143;
  float32x2_t *v144;
  float32x2_t *v145;
  uint64_t (**v146)();
  float32x2_t v147;
  float32x2_t v148;
  uint64_t (**v149)();
  float32x2_t v150;
  float32x2_t v151;
  uint64_t (**v152)();
  __int128 v153;
  uint64_t (**v154)();
  __int128 v155;
  float *v156;
  float32x2_t *v157;
  unint64_t v158;
  float32x2_t v159;
  float32x2_t v160;

  v9 = (uint64_t)(a1 - (_QWORD)a2) >> 3;
  v10 = a4;
  if (a4)
    *a3 = 0.0;
  if (v9 == 1)
  {
    v11 = *(_QWORD *)(a1 - 8);
    *a5 = v11;
    a5[1] = v11;
    a5[2] = v11;
    a5[3] = v11;
    return;
  }
  if (!v9)
  {
    *(_OWORD *)a5 = 0u;
    *((_OWORD *)a5 + 1) = 0u;
    return;
  }
  v156 = 0;
  v157 = 0;
  v158 = 0;
  sub_22369EFFC((uint64_t)&v156, v9);
  if (a1 > (unint64_t)a2)
  {
    v12 = a1 - 8;
    v13 = (float32x2_t *)(a1 - 8);
    do
    {
      if (v13 == a2)
        v17 = a1;
      else
        v17 = v12;
      v18 = v13->f32[0];
      v19 = *(float *)(v17 - 8);
      if (v13->f32[0] != v19)
      {
        v20 = v18 - v19;
        v21 = v19 - v18;
        if (v13->f32[0] >= v19)
          v21 = v20;
        if (v21 > 0.000001)
          goto LABEL_24;
      }
      v22 = v13->f32[1];
      v23 = *(float *)(v17 - 4);
      v24 = v22 < v23;
      if (v22 != v23)
      {
        v25 = v22 - v23;
        v26 = v23 - v22;
        if (!v24)
          v26 = v25;
        if (v26 > 0.000001)
        {
LABEL_24:
          v27 = *v13;
          v28 = vsub_f32(*(float32x2_t *)(v17 - 8), *v13);
          v29 = vmul_n_f32(v28, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v28, v28), (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1), v28, 1).f32[0]));
          v30 = v157;
          if (v156 == (float *)v157)
            goto LABEL_33;
          v31 = v157[-1].f32[0];
          v32 = v29.f32[0] < v31;
          if (v29.f32[0] != v31)
          {
            v33 = v29.f32[0] - v31;
            v34 = v31 - v29.f32[0];
            if (!v32)
              v34 = v33;
            if (v34 > 0.000001)
              goto LABEL_33;
          }
          v35 = v157[-1].f32[1];
          if (v29.f32[1] != v35)
          {
            v36 = v35 - v29.f32[1];
            if (v29.f32[1] >= v35)
              v36 = v29.f32[1] - v35;
            if (v36 > 0.000001)
            {
LABEL_33:
              v146 = &off_24EC57390;
              v147 = v27;
              v148 = v29;
              if ((unint64_t)v157 < v158)
              {
                *v157 = (float32x2_t)&off_24EC57390;
                v30[1] = v147;
                v14 = v148;
                v30[1] = v147;
                v30[2] = v14;
                v30[2] = v148;
                v15 = (char *)&v30[3];
              }
              else
              {
                v15 = sub_22369F1FC((void **)&v156, (uint64_t)&v146);
              }
              v157 = (float32x2_t *)v15;
            }
          }
        }
      }
      v12 -= 8;
    }
    while (v13-- > a2);
  }
  v37 = v156;
  if (v156 == (float *)v157)
  {
    v55 = *(_QWORD *)(a1 - 8);
    *a5 = v55;
    a5[1] = v55;
    a5[2] = v55;
    a5[3] = v55;
    if (!v37)
      return;
    goto LABEL_130;
  }
  v128 = a3;
  v38 = v156;
  v39 = v156;
  v40 = v156;
  v41 = v156;
  if (v156 + 6 != (float *)v157)
  {
    v42 = v156[8];
    v43 = v156[2];
    if (v42 >= v43)
      v39 = v156;
    else
      v39 = v156 + 6;
    if (v42 >= v43)
      v38 = v156 + 6;
    else
      v38 = v156;
    v44 = v156 + 12;
    if (v156 + 12 == (float *)v157)
    {
      v56 = v156[9];
      v57 = v156[3];
      if (v56 >= v57)
        v40 = v156;
      else
        v40 = v156 + 6;
      if (v56 >= v57)
        v41 = v156 + 6;
      else
        v41 = v156;
    }
    else
    {
      v45 = (char *)(v156 + 12);
      v46 = v156;
      while (1)
      {
        v47 = v45;
        v48 = v45 + 24;
        if (v48 == (char *)v157)
          break;
        v49 = v46 + 18;
        v50 = *((float *)v47 + 8);
        v51 = *((float *)v47 + 2);
        v52 = v39[2];
        v53 = v38[2];
        if (v51 >= v52)
          v54 = v39;
        else
          v54 = (float *)v47;
        if (v50 < v53)
          v49 = v38;
        if (v50 < v52)
          v39 = (float *)v48;
        if (v51 >= v53)
          v38 = (float *)v47;
        if (v50 >= v51)
        {
          v39 = v54;
          v38 = v49;
        }
        v45 = v47 + 48;
        v46 = (float *)v47;
        if (v47 + 48 == (char *)v157)
          goto LABEL_71;
      }
      v58 = *((float *)v47 + 2);
      if (v58 >= v39[2])
      {
        if (v58 >= v38[2])
          v38 = (float *)v47;
      }
      else
      {
        v39 = (float *)v47;
      }
LABEL_71:
      v59 = v156[9];
      v60 = v156[3];
      if (v59 >= v60)
        v61 = v156 + 6;
      else
        v61 = v156;
      if (v59 >= v60)
        v40 = v156;
      else
        v40 = v156 + 6;
      v62 = v156;
      while (1)
      {
        v41 = v44;
        v63 = v44 + 6;
        if (v44 + 6 == (float *)v157)
          break;
        v64 = v62 + 18;
        v65 = v41[9];
        v66 = v41[3];
        v67 = v40[3];
        v68 = v61[3];
        if (v66 >= v67)
          v69 = v40;
        else
          v69 = v41;
        if (v65 < v68)
          v64 = v61;
        if (v65 < v67)
          v40 = v63;
        if (v66 >= v68)
          v70 = v41;
        else
          v70 = v61;
        if (v65 < v66)
        {
          v61 = v70;
        }
        else
        {
          v40 = v69;
          v61 = v64;
        }
        v44 = v41 + 12;
        v62 = v41;
        if (v41 + 12 == (float *)v157)
          goto LABEL_97;
      }
      v71 = v44[3];
      if (v71 >= v40[3])
      {
        if (v71 >= v61[3])
          goto LABEL_98;
      }
      else
      {
        v40 = v44;
      }
LABEL_97:
      v41 = v61;
    }
  }
LABEL_98:
  v130 = (float32x2_t *)a5;
  v72 = 0;
  v73 = *(float32x2_t *)(v39 + 2);
  v146 = &off_24EC57390;
  v147 = v73;
  v148 = (float32x2_t)0x3F80000000000000;
  v149 = &off_24EC57390;
  v74 = *(float32x2_t *)(v41 + 2);
  v150 = v74;
  v151 = (float32x2_t)1065353216;
  v152 = &off_24EC57390;
  v75 = *((_QWORD *)v38 + 1);
  *(_QWORD *)&v153 = v75;
  *((_QWORD *)&v153 + 1) = 0xBF80000000000000;
  v154 = &off_24EC57390;
  v76 = *((_QWORD *)v40 + 1);
  *(_QWORD *)&v155 = v76;
  *((_QWORD *)&v155 + 1) = 3212836864;
  v142 = (float32x2_t *)v39;
  v143 = (float32x2_t *)v41;
  v144 = (float32x2_t *)v38;
  v145 = (float32x2_t *)v40;
  v134[1] = &off_24EC57390;
  v135 = v73;
  v136[0] = (float32x2_t)0x3F80000000000000;
  v136[1] = (float32x2_t)&off_24EC57390;
  v137 = v74;
  v138[0] = (float32x2_t)1065353216;
  v138[1] = (float32x2_t)&off_24EC57390;
  *(_QWORD *)&v139 = v75;
  *((_QWORD *)&v139 + 1) = 0xBF80000000000000;
  v140 = &off_24EC57390;
  *(_QWORD *)&v141 = v76;
  *((_QWORD *)&v141 + 1) = 3212836864;
  v77 = vadd_f32(v73, (float32x2_t)0x3F80000000000000);
  v78 = vsub_f32(v77, v73);
  v79 = (int32x2_t)vmla_lane_f32(vmul_f32(v78, v78), (float32x2_t)vdup_lane_s32((int32x2_t)v78, 1), v78, 1);
  v80 = vadd_f32(v74, (float32x2_t)1065353216);
  v81 = vsub_f32(v80, v74);
  v82.i64[0] = v75;
  v82.i64[1] = v76;
  v83 = (float32x2_t)vzip2_s32((int32x2_t)v73, (int32x2_t)v74);
  v84 = vdiv_f32(vsub_f32(vmul_f32(vsub_f32(v83, (float32x2_t)vshrn_n_s64(v82, 0x20uLL)), vsub_f32((float32x2_t)vzip1_s32((int32x2_t)v77, (int32x2_t)v80), (float32x2_t)__PAIR64__(v74.u32[0], v73.u32[0]))), vmul_f32(vsub_f32((float32x2_t)__PAIR64__(v74.u32[0], v73.u32[0]), (float32x2_t)__PAIR64__(v76, v75)), vsub_f32((float32x2_t)vzip2_s32((int32x2_t)v77, (int32x2_t)v80), v83))), vsqrt_f32((float32x2_t)vzip1_s32(v79, (int32x2_t)vmla_lane_f32(vmul_f32(v81, v81), (float32x2_t)vdup_lane_s32((int32x2_t)v81, 1), v81, 1))));
  v85 = fabsf(vmul_lane_f32(v84, v84, 1).f32[0]);
  do
  {
    v86 = v142;
    v87 = vmla_lane_f32(vmul_f32(v148, v142[2]), (float32x2_t)vdup_lane_s32((int32x2_t)v142[2], 1), v148, 1).f32[0];
    LODWORD(v88) = vmla_lane_f32(vmul_f32(v151, v143[2]), (float32x2_t)vdup_lane_s32((int32x2_t)v143[2], 1), v151, 1).u32[0];
    LODWORD(v89) = vmla_lane_f32(vmul_f32(*(float32x2_t *)((char *)&v153 + 8), v144[2]), (float32x2_t)vdup_lane_s32((int32x2_t)v144[2], 1), *(float32x2_t *)((char *)&v153 + 8), 1).u32[0];
    if (v87 <= -1.0)
      v86 = (float32x2_t *)v37;
    v90 = fmaxf(v87, -1.0);
    if (v88 <= v90)
    {
      v91 = 0;
    }
    else
    {
      v86 = v143;
      v91 = 1;
    }
    if (v88 > v90)
      v90 = v88;
    if (v89 > v90)
    {
      v86 = v144;
      v91 = 2;
      v90 = v89;
    }
    v92 = vmla_lane_f32(vmul_f32(*(float32x2_t *)((char *)&v155 + 8), v145[2]), (float32x2_t)vdup_lane_s32((int32x2_t)v145[2], 1), *(float32x2_t *)((char *)&v155 + 8), 1).f32[0];
    if (v92 <= v90)
      v93 = v86;
    else
      v93 = v145;
    if (v92 <= v90)
      v94 = v91;
    else
      v94 = 3;
    v95 = vmul_n_f32(v93[2], 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v93[2], v93[2]), (float32x2_t)vdup_lane_s32((int32x2_t)v93[2], 1), v93[2], 1).f32[0]));
    v96.i32[0] = vdup_lane_s32((int32x2_t)v95, 1).u32[0];
    v96.f32[1] = -v95.f32[0];
    v131 = v95;
    v132 = v96;
    v133 = vneg_f32(v95);
    v134[0] = vneg_f32(v96);
    v97 = &(&v146)[3 * v94];
    ((void (*)(uint64_t (***)(), float32x2_t *))(*v97)[3])(v97, &v131);
    v98 = &(&v146)[3 * ((v94 + 1) & 3)];
    ((void (*)(uint64_t (***)(), float32x2_t *))(*v98)[3])(v98, &v132);
    v99 = &(&v146)[3 * ((v94 + 2) & 3)];
    ((void (*)(uint64_t (***)(), float32x2_t *))(*v99)[3])(v99, &v133);
    v100 = &(&v146)[3 * ((v94 - 1) & 3)];
    ((void (*)(uint64_t (***)(), _QWORD *))(*v100)[3])(v100, v134);
    v101 = vadd_f32(v147, v148);
    v102 = vsub_f32(v101, v147);
    v103 = vadd_f32(v150, v151);
    v104 = vsub_f32(v103, v150);
    v105 = (float32x2_t)vzip1_s32((int32x2_t)v147, (int32x2_t)v150);
    v106 = (float32x2_t)vzip2_s32((int32x2_t)v147, (int32x2_t)v150);
    v107 = vdiv_f32(vsub_f32(vmul_f32(vsub_f32(v106, (float32x2_t)__PAIR64__(DWORD1(v155), DWORD1(v153))), vsub_f32((float32x2_t)vzip1_s32((int32x2_t)v101, (int32x2_t)v103), v105)), vmul_f32(vsub_f32(v105, (float32x2_t)__PAIR64__(v155, v153)), vsub_f32((float32x2_t)vzip2_s32((int32x2_t)v101, (int32x2_t)v103), v106))), vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vmla_lane_f32(vmul_f32(v102, v102), (float32x2_t)vdup_lane_s32((int32x2_t)v102, 1), v102, 1), (int32x2_t)vmla_lane_f32(vmul_f32(v104, v104), (float32x2_t)vdup_lane_s32((int32x2_t)v104, 1), v104, 1))));
    v108 = fabsf(vmul_lane_f32(v107, v107, 1).f32[0]);
    if (v108 < v85)
    {
      v135 = v147;
      v136[0] = v148;
      v137 = v150;
      v138[0] = v151;
      v139 = v153;
      v141 = v155;
      v85 = v108;
    }
    if (&v93[3] == v157)
      v109 = v156;
    else
      v109 = (float *)&v93[3];
    ((void (*)(uint64_t (***)(), float *))(*v97)[2])(&(&v146)[3 * v94], v109 + 2);
    (&v142)[v94] = (float32x2_t *)v109;
    ++v72;
    v37 = v156;
  }
  while (v72 < 0xAAAAAAAAAAAAAAABLL * (((char *)v157 - (char *)v156) >> 3));
  v110 = v136[0];
  if (v10)
  {
    v111 = vmla_lane_f32(v136[0], 0, v136[0], 1).f32[0];
    v112 = v136;
    if (v111 >= 0.70711
      || (v111 = vmla_lane_f32(v138[0], 0, v138[0], 1).f32[0], v112 = v138, v111 >= 0.70711)
      || (v111 = vmla_lane_f32(*(float32x2_t *)((char *)&v139 + 8), 0, *(float32x2_t *)((char *)&v139 + 8), 1).f32[0],
          v112 = (float32x2_t *)&v139 + 1,
          v111 >= 0.70711)
      || (v111 = vmla_lane_f32(*(float32x2_t *)((char *)&v141 + 8), 0, *(float32x2_t *)((char *)&v141 + 8), 1).f32[0],
          v113 = 0.0,
          v112 = (float32x2_t *)&v141 + 1,
          v111 >= 0.70711))
    {
      v129 = v136[0];
      v114 = acosf(v111);
      v110 = v129;
      if (v112->f32[1] >= 0.0)
        v113 = v114;
      else
        v113 = -v114;
    }
    *v128 = v113;
  }
  v115 = v135;
  v116 = v137;
  v117 = vadd_f32(v110, v135);
  v131 = v135;
  v132 = v117;
  v118 = vadd_f32(v137, v138[0]);
  v159 = v137;
  v160 = v118;
  sub_22369F3FC(&v131, &v159, v130 + 1, 1);
  v131 = v116;
  v132 = v118;
  v119 = (float32x2_t)v139;
  v120 = vadd_f32(*(float32x2_t *)&v139, *(float32x2_t *)((char *)&v139 + 8));
  v159 = (float32x2_t)v139;
  v160 = v120;
  sub_22369F3FC(&v131, &v159, v130 + 2, 1);
  v131 = v119;
  v132 = v120;
  v121 = (float32x2_t)v141;
  v122 = vadd_f32(*(float32x2_t *)&v141, *(float32x2_t *)((char *)&v141 + 8));
  v159 = (float32x2_t)v141;
  v160 = v122;
  sub_22369F3FC(&v131, &v159, v130 + 3, 1);
  v131 = v121;
  v132 = v122;
  v159 = v115;
  v160 = v117;
  sub_22369F3FC(&v131, &v159, v130, 1);
  v37 = v156;
  if (v156)
  {
LABEL_130:
    v123 = v37;
    if (v157 != (float32x2_t *)v37)
    {
      v124 = (float *)&v157[-3];
      v125 = v157 - 3;
      do
      {
        v126 = (void (**)(float *))*v125;
        v125 -= 3;
        (*v126)(v124);
        v127 = v124 == v37;
        v124 = (float *)v125;
      }
      while (!v127);
      v123 = v156;
    }
    v157 = (float32x2_t *)v37;
    operator delete(v123);
  }
}

void sub_22369EF24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22369EF8C((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_22369EF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22369EF8C((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_22369EF4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22369EF8C((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_22369EF60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22369EF8C((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_22369EF74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22369EF8C((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void **sub_22369EF8C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 24;
      v6 = v3 - 24;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 24;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_22369EFFC(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  double *v18;
  uint64_t *v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (**v28)(char *);
  BOOL v29;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22367C394();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = (v4 - v2) / 24;
    v9 = &v6[24 * v8];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
LABEL_19:
      if (v2)
        operator delete(v2);
      return;
    }
    v10 = v4 - v2 - 24;
    if (v10 >= 0x318)
    {
      v13 = v10 / 0x18;
      v14 = (unint64_t)&v6[24 * v8 - 24 + -24 * (v10 / 0x18)];
      v15 = (unint64_t)&v4[-24 * (v10 / 0x18) - 16];
      v16 = v14 >= (unint64_t)v4 || v15 >= (unint64_t)v9;
      v11 = v4;
      v12 = v9;
      if (v16)
      {
        v17 = v13 + 1;
        v11 = &v4[-24 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
        v12 = &v9[-24 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
        v18 = (double *)(v9 - 48);
        v19 = (uint64_t *)(v4 - 16);
        v20 = vdupq_n_s64((unint64_t)&off_24EC57390);
        v21 = v17 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v22 = *(v19 - 3);
          v23 = *v19;
          v24 = *(v19 - 2);
          v25 = v19[1];
          vst3q_f64(v18, *(float64x2x3_t *)v20.i8);
          v18 -= 6;
          v19 -= 6;
          v21 -= 2;
        }
        while (v21);
        if (v17 == (v17 & 0x1FFFFFFFFFFFFFFELL))
          goto LABEL_16;
      }
    }
    else
    {
      v11 = v4;
      v12 = &v6[24 * v8];
    }
    do
    {
      *((_QWORD *)v12 - 3) = &off_24EC57390;
      v12 -= 24;
      *(_OWORD *)(v12 + 8) = *((_OWORD *)v11 - 1);
      v11 -= 24;
    }
    while (v11 != v2);
LABEL_16:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v7;
    v26 = v4 - 24;
    v27 = v4 - 24;
    do
    {
      v28 = *(void (***)(char *))v27;
      v27 -= 24;
      (*v28)(v26);
      v29 = v26 == v2;
      v26 = v27;
    }
    while (!v29);
    goto LABEL_19;
  }
}

void sub_22369F1D0()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22369F1E4(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 8) = *a2;
  return result;
}

uint64_t sub_22369F1F0(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 16) = *a2;
  return result;
}

char *sub_22369F1FC(void **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  double *v23;
  char *v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (**v33)(char *);
  BOOL v34;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = v3 - (_BYTE *)*a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3) + 1;
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_22367C394();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * (((_BYTE *)a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v4) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_223174E94();
  v8 = 24 * v6;
  v9 = (char *)operator new(24 * v6);
  v10 = &v9[8 * (v5 >> 3)];
  v11 = &v9[v8];
  *(_QWORD *)v10 = &off_24EC57390;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
  v12 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v3)
      return v12;
    goto LABEL_26;
  }
  v13 = v3 - v4 - 24;
  if (v13 < 0x318)
  {
    v14 = v3;
LABEL_20:
    v22 = v10;
    do
    {
      *((_QWORD *)v22 - 3) = &off_24EC57390;
      v22 -= 24;
      *(_OWORD *)(v22 + 8) = *((_OWORD *)v14 - 1);
      v14 -= 24;
    }
    while (v14 != v4);
    goto LABEL_22;
  }
  v15 = v13 / 0x18;
  v16 = 24 * (v13 / 0x18);
  v17 = (unint64_t)&v9[v5 - v16 - 24];
  v18 = (unint64_t)&v3[-v16 - 16];
  v19 = v17 >= (unint64_t)v3 || v18 >= (unint64_t)v10;
  v14 = v3;
  if (!v19)
    goto LABEL_20;
  v20 = v15 + 1;
  v21 = (v15 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v14 = &v3[-24 * v21];
  v22 = &v10[-24 * v21];
  v23 = (double *)(v10 - 48);
  v24 = v3 - 16;
  v25 = vdupq_n_s64((unint64_t)&off_24EC57390);
  v26 = v21;
  do
  {
    v27 = *((_QWORD *)v24 - 3);
    v28 = *(_QWORD *)v24;
    v29 = *((_QWORD *)v24 - 2);
    v30 = *((_QWORD *)v24 + 1);
    vst3q_f64(v23, *(float64x2x3_t *)v25.i8);
    v23 -= 6;
    v24 -= 48;
    v26 -= 2;
  }
  while (v26);
  v10 = v22;
  if (v20 != v21)
    goto LABEL_20;
LABEL_22:
  *a1 = v22;
  a1[1] = v12;
  a1[2] = v11;
  v31 = v3 - 24;
  v32 = v31;
  do
  {
    v33 = *(void (***)(char *))v32;
    v32 -= 24;
    (*v33)(v31);
    v34 = v31 == v4;
    v31 = v32;
  }
  while (!v34);
  v3 = v4;
  if (v4)
LABEL_26:
    operator delete(v3);
  return v12;
}

uint64_t sub_22369F3FC(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, char a4)
{
  float32x2_t *v4;
  float v5;
  float v6;
  float v7;
  float32x2_t *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v26;
  float v27;
  BOOL v28;
  BOOL v29;
  float *v31;
  float *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  BOOL v35;
  float v36;
  float v37;
  float *v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;

  v4 = a2 + 1;
  v5 = a2[1].f32[0];
  v6 = a2[1].f32[1];
  v7 = a2->f32[1];
  v8 = a1 + 1;
  v9 = a1[1].f32[0];
  v10 = a1->f32[0];
  v11 = v9 - a1->f32[0];
  v12 = a2->f32[0];
  v13 = v5 - a2->f32[0];
  v14 = (float *)&a1[1] + 1;
  v15 = a1[1].f32[1];
  v16 = (float *)a1 + 1;
  v17 = a1->f32[1];
  v18 = (float)((float)(v6 - v7) * v11) - (float)(v13 * (float)(v15 - v17));
  v19 = a1->f32[0] - a2->f32[0];
  v20 = (float)(v13 * (float)(v17 - v7)) - (float)((float)(v6 - v7) * v19);
  v21 = (float)(v11 * (float)(v17 - v7)) - (float)(v19 * (float)(v15 - v17));
  if (v18 == 0.0)
    goto LABEL_14;
  v22 = 0.0 - v18;
  if (v18 >= 0.0)
    v22 = v18;
  if (v22 <= 0.000001)
  {
LABEL_14:
    if (v20 != 0.0)
    {
      v26 = 0.0 - v20;
      if (v20 >= 0.0)
        v26 = v20;
      if (v26 > 0.000001)
        return 0;
    }
    if (v21 != 0.0)
    {
      v27 = 0.0 - v21;
      if (v21 >= 0.0)
        v27 = v21;
      if (v27 > 0.000001)
        return 0;
    }
    v28 = v12 == v10 && v7 == v17;
    if (v28 || (v5 == v10 ? (v29 = v6 == v17) : (v29 = 0), v29))
    {
      *a3 = *a1;
      return 1;
    }
    if (v5 == v9 && v6 == v15 || v12 == v9 && v7 == v15)
    {
      *a3 = *v8;
      return 1;
    }
    if (v12 > v10 && v5 > v9 && v5 > v10 && v12 > v9)
      return 0;
    if (v7 > v17 && v6 > v15 && v7 > v15 && v6 > v17)
      return 0;
    if (v12 < v10 && v5 < v9 && v5 < v10 && v12 < v9)
      return 0;
    if (v7 < v17 && v6 < v15 && v7 < v15 && v6 < v17)
      return 0;
    if (v10 <= v9 || v5 >= v10 || (v31 = (float *)a1 + 1, v32 = (float *)a1, v12 >= v10))
    {
      if (v7 >= v17 || v6 >= v17 || (v31 = (float *)a1 + 1, v32 = (float *)a1, v17 <= v15))
      {
        if (v5 >= v9 || v9 <= v10 || (v31 = (float *)&a1[1] + 1, v32 = (float *)&a1[1], v12 >= v9))
        {
          if (v7 >= v15 || v6 >= v15 || (v31 = (float *)&a1[1] + 1, v32 = (float *)&a1[1], v15 <= v17))
          {
            if (v12 <= v10 || v12 <= v5 || (v31 = (float *)a2 + 1, v32 = (float *)a2, v12 <= v9))
            {
              v33 = v7 > v17;
              v34 = v7 > v6;
              if (v7 <= v15)
                v34 = 0;
              v35 = !v34 || !v33;
              if (v34 && v33)
                v31 = (float *)a2 + 1;
              else
                v31 = (float *)&a2[1] + 1;
              if (v35)
                v32 = (float *)&a2[1];
              else
                v32 = (float *)a2;
            }
          }
        }
      }
    }
    v36 = *v32;
    v37 = *v31;
    if (*v32 != v10 || v37 != v17)
    {
      if (v10 < v9 && v5 > v10)
      {
        v38 = (float *)a1 + 1;
        v39 = (float *)a1;
        if (v12 > v10)
          goto LABEL_112;
      }
      if (v7 > v17 && v6 > v17)
      {
        v38 = (float *)a1 + 1;
        v39 = (float *)a1;
        if (v17 < v15)
          goto LABEL_112;
      }
    }
    if (v36 != v9 || v37 != v15)
    {
      if (v10 > v9 && v5 > v9)
      {
        v38 = (float *)&a1[1] + 1;
        v39 = (float *)&a1[1];
        if (v12 > v9)
          goto LABEL_112;
      }
      if (v7 > v15 && v6 > v15)
      {
        v38 = (float *)&a1[1] + 1;
        v39 = (float *)&a1[1];
        if (v15 < v17)
          goto LABEL_112;
      }
    }
    if (v36 == v12 && v37 == v7)
      goto LABEL_90;
    if (v12 < v10 && v12 < v5 && v12 < v9)
    {
      v38 = (float *)a2 + 1;
      v39 = (float *)a2;
      goto LABEL_112;
    }
    if (v7 >= v6 || v7 >= v15 || (v38 = (float *)a2 + 1, v39 = (float *)a2, v7 >= v17))
    {
LABEL_90:
      v38 = (float *)&a2[1] + 1;
      v39 = (float *)&a2[1];
    }
LABEL_112:
    v40 = *v39;
    v41 = *v38;
    *a3 = 0;
    if ((a1->f32[0] != v36 || *v16 != v37) && (a1->f32[0] != v40 || *v16 != v41))
      *a3 = vadd_f32(*a3, *a1);
    if ((v8->f32[0] != v36 || *v14 != v37) && (v8->f32[0] != v40 || *v14 != v41))
      *a3 = vadd_f32(*a3, *v8);
    v42 = a2->f32[1];
    if ((a2->f32[0] != v36 || v42 != v37) && (a2->f32[0] != v40 || v42 != v41))
      *a3 = vadd_f32(*a3, *a2);
    v43 = a2[1].f32[1];
    if (v4->f32[0] == v36 && v43 == v37)
    {
      *a3 = vmul_f32(*a3, (float32x2_t)0x3F0000003F000000);
      return 1;
    }
    else
    {
      v44 = *a3;
      if (v4->f32[0] != v40 || v43 != v41)
        v44 = vadd_f32(v44, *v4);
      *a3 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
      return 1;
    }
  }
  v23 = v20 / v18;
  if ((a4 & 1) != 0)
    goto LABEL_40;
  if (v23 < 0.0 || v23 > 1.0)
    return 0;
  if ((float)(v21 / v18) < 0.0 || (float)(v21 / v18) > 1.0)
    return 0;
LABEL_40:
  a3->f32[0] = v10 + (float)(v11 * v23);
  a3->f32[1] = *v16 + (float)(v23 * (float)(*v14 - *v16));
  return 1;
}

double sub_22369F940(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  unsigned __int8 v6;
  double result;
  std::runtime_error *exception;
  uint64_t v9;
  int v10;

  v3 = 0;
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  do
  {
    v4 = *(unsigned __int8 *)(a1 + v3);
    if (*(_BYTE *)(a1 + v3))
      v5 = 1;
    else
      v5 = v3 == 15;
    ++v3;
  }
  while (!v5);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "UUID cannot be null");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_BYTE *)(a1 + 48) = -1;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  v6 = atomic_load((unsigned __int8 *)&qword_25578E170);
  if ((v6 & 1) == 0)
  {
    v9 = a1;
    v10 = __cxa_guard_acquire(&qword_25578E170);
    a1 = v9;
    if (v10)
    {
      qword_25578E158 = 0;
      *(_QWORD *)&dword_25578E160 = 0;
      *(uint64_t *)((char *)&qword_25578E164 + 4) = 0x3F80000000000000;
      __cxa_guard_release(&qword_25578E170);
      a1 = v9;
    }
  }
  *(_QWORD *)(a1 + 120) = qword_25578E158;
  *(_DWORD *)(a1 + 128) = dword_25578E160;
  *(_QWORD *)(a1 + 132) = qword_25578E164;
  *(_DWORD *)(a1 + 140) = dword_25578E16C;
  *(_DWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  return result;
}

void sub_22369FA78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_22369FA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v8;
  char *v9;
  size_t v10;
  int v11;
  unint64_t v12;
  BOOL v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  const char *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  __int128 *v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count_vtbl *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unsigned __int8 v83;
  const char *v84;
  size_t v85;
  __int128 *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  size_t v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  char *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  _OWORD *v141;
  _OWORD *v142;
  _OWORD *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t *v158;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v160;
  int v161;
  const char *v162;
  int v163;
  const char *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  char *v171;
  char *v172;
  char v173[37];
  char __s[37];
  uint64_t v175;
  __int128 v176;
  _BYTE v177[24];
  size_t v178;
  unint64_t v179;
  char v180;
  std::__shared_weak_count_vtbl *v181;
  __int128 v182;
  __int128 v183;
  char *v184;
  uint64_t v185;

  v3 = a1;
  v185 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(a1 + 240);
  v5 = *(_QWORD **)(a1 + 248);
  v6 = (_QWORD *)(a1 + 240);
  if (v4 != v5)
  {
    while (*v4 != *(_QWORD *)a2 || v4[1] != *(_QWORD *)(a2 + 8))
    {
      v4 += 2;
      if (v4 == v5)
      {
        v4 = *(_QWORD **)(a1 + 248);
        break;
      }
    }
  }
  if (v4 == v5)
  {
    sub_2236A0EC4(&v167);
    if (**(int **)(v167 + 56) > 3
      || ((v11 = *(unsigned __int8 *)(v167 + 72), v12 = sub_22322F254(v167, "OSLogSurrogateAppender", 1, 0), !v11)
        ? (v13 = v12 == 0)
        : (v13 = 0),
          v13))
    {
LABEL_219:
      v141 = *(_OWORD **)(v3 + 248);
      v140 = *(_QWORD *)(v3 + 256);
      if ((unint64_t)v141 >= v140)
      {
        v143 = (_OWORD *)*v6;
        v144 = ((uint64_t)v141 - *v6) >> 4;
        v145 = v144 + 1;
        if ((unint64_t)(v144 + 1) >> 60)
          sub_22316E078();
        v146 = v140 - (_QWORD)v143;
        if (v146 >> 3 > v145)
          v145 = v146 >> 3;
        if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF0)
          v147 = 0xFFFFFFFFFFFFFFFLL;
        else
          v147 = v145;
        if (v147)
        {
          if (v147 >> 60)
            sub_223174E94();
          v148 = (char *)operator new(16 * v147);
        }
        else
        {
          v148 = 0;
        }
        v149 = &v148[16 * v144];
        *(_OWORD *)v149 = *(_OWORD *)a2;
        v142 = v149 + 16;
        if (v141 != v143)
        {
          do
          {
            *((_OWORD *)v149 - 1) = *(v141 - 1);
            v149 -= 16;
            --v141;
          }
          while (v141 != v143);
          v141 = (_OWORD *)*v6;
        }
        *(_QWORD *)(v3 + 240) = v149;
        *(_QWORD *)(v3 + 248) = v142;
        *(_QWORD *)(v3 + 256) = &v148[16 * v147];
        if (v141)
          operator delete(v141);
      }
      else
      {
        *v141 = *(_OWORD *)a2;
        v142 = v141 + 1;
      }
      *(_QWORD *)(v3 + 248) = v142;
      return;
    }
    v155 = v12;
    v158 = &v167;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v160 = std::chrono::system_clock::now().__d_.__rep_;
    v161 = 3;
    v162 = "unknown file";
    v163 = 400;
    v165 = 0;
    v166 = 0;
    v164 = "unknown function";
    sub_2245664AC((unsigned __int8 *)a2, __s);
    sub_2245664AC((unsigned __int8 *)v3, v173);
    v157 = v173;
    v14 = (const char *)(v167 + 16);
    v150 = v167;
    v151 = v167 + 16;
    if (*(char *)(v167 + 39) < 0)
    {
      v14 = *(const char **)(v167 + 16);
      v15 = *(_QWORD *)(v167 + 24);
      v153 = v11;
      v83 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v83 & 1) != 0)
        goto LABEL_124;
    }
    else
    {
      v15 = *(unsigned __int8 *)(v167 + 39);
      v153 = v11;
      v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v16 & 1) != 0)
        goto LABEL_124;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v175);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v175, &xmmword_255788F40);
      if (v177[0] && SHIBYTE(v176) < 0)
        operator delete((void *)v175);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_124:
    if (byte_255788F57 >= 0)
      v84 = (const char *)&xmmword_255788F40;
    else
      v84 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v85 = byte_255788F57;
    else
      v85 = *((_QWORD *)&xmmword_255788F40 + 1);
    v175 = (uint64_t)os_log_create(v84, v14);
    v86 = &v176;
    if (v85 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v85 >= 0x17)
    {
      v87 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v85 | 7) != 0x17)
        v87 = v85 | 7;
      v88 = v87 + 1;
      v86 = (__int128 *)operator new(v87 + 1);
      *((_QWORD *)&v176 + 1) = v85;
      *(_QWORD *)v177 = v88 | 0x8000000000000000;
      *(_QWORD *)&v176 = v86;
    }
    else
    {
      v177[7] = v85;
      if (!v85)
      {
LABEL_138:
        *((_BYTE *)v86 + v85) = 0;
        v177[8] = 1;
        v89 = &v177[16];
        if (v15 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v90 = v153;
        if (v15 >= 0x17)
        {
          v91 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v91 = v15 | 7;
          v92 = v91 + 1;
          v89 = operator new(v91 + 1);
          v178 = v15;
          v179 = v92 | 0x8000000000000000;
          *(_QWORD *)&v177[16] = v89;
        }
        else
        {
          HIBYTE(v179) = v15;
          if (!v15)
            goto LABEL_146;
        }
        memmove(v89, v14, v15);
LABEL_146:
        v89[v15] = 0;
        v180 = 1;
        v93 = v175;
        if (SHIBYTE(v179) < 0)
          operator delete(*(void **)&v177[16]);
        if (v177[8] && (v177[7] & 0x80000000) != 0)
          operator delete((void *)v176);
        if (v175)
          os_release((void *)v175);
        if (v155 && *(_QWORD *)(v155 + 24))
        {
          v94 = _os_log_pack_size();
          v95 = (std::__shared_weak_count_vtbl *)operator new(v94, (std::align_val_t)8uLL);
          v96 = (std::__shared_weak_count *)operator new();
          v96->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v96->__shared_owners_;
          v96->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v96->__shared_weak_owners_ = 0;
          v96[1].__vftable = v95;
          v168 = v95;
          v169 = v95;
          v171 = 0;
          v172 = 0;
          v170 = v96;
          sub_2236AE020((uint64_t)&v175, __s, (const char **)&v157);
          v98 = (char *)operator new(0x50uLL);
          v99 = (std::__shared_weak_count *)v98;
          *((_QWORD *)v98 + 1) = 0;
          v100 = (unint64_t *)(v98 + 8);
          *((_QWORD *)v98 + 2) = 0;
          *(_QWORD *)v98 = &off_24EC20730;
          *((_QWORD *)v98 + 3) = off_24EC20780;
          *((_OWORD *)v98 + 2) = v176;
          *((_QWORD *)v98 + 6) = *(_QWORD *)v177;
          *(_OWORD *)(v98 + 56) = *(_OWORD *)&v177[8];
          *((_QWORD *)v98 + 9) = v178;
          v171 = v98 + 24;
          v172 = v98;
          v181 = v95;
          *(_QWORD *)&v182 = v95;
          *((_QWORD *)&v182 + 1) = v96;
          do
            v101 = __ldxr(p_shared_owners);
          while (__stxr(v101 + 1, p_shared_owners));
          *(_QWORD *)&v183 = v98 + 24;
          *((_QWORD *)&v183 + 1) = v98;
          do
            v102 = __ldxr(v100);
          while (__stxr(v102 + 1, v100));
          v184 = v98 + 24;
          do
            v103 = __ldaxr(v100);
          while (__stlxr(v103 - 1, v100));
          if (!v103)
          {
            (*(void (**)(char *))(*(_QWORD *)v98 + 16))(v98);
            std::__shared_weak_count::__release_weak(v99);
          }
          v104 = v170;
          if (v170)
          {
            v105 = (unint64_t *)&v170->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v107 = v181;
          if (v184[31] >= 0)
            v108 = v184 + 8;
          else
            v108 = (char *)*((_QWORD *)v184 + 1);
          if (v184[55] >= 0)
            v109 = v184 + 32;
          else
            v109 = (char *)*((_QWORD *)v184 + 4);
          v110 = _os_log_pack_fill();
          *(_DWORD *)v110 = 68158466;
          *(_DWORD *)(v110 + 4) = 13;
          *(_WORD *)(v110 + 8) = 2080;
          *(_QWORD *)(v110 + 10) = v108;
          *(_WORD *)(v110 + 18) = 1040;
          *(_DWORD *)(v110 + 20) = 13;
          *(_WORD *)(v110 + 24) = 2080;
          *(_QWORD *)(v110 + 26) = v109;
          v111 = (char *)operator new();
          v112 = *(unsigned __int8 *)(v150 + 39);
          v113 = *(_QWORD *)(v150 + 16);
          v114 = *(_QWORD *)(v150 + 24);
          v115 = v183;
          *(_OWORD *)(v111 + 8) = v182;
          if ((v112 & 0x80u) != 0)
            v112 = v114;
          else
            v113 = v151;
          *(_QWORD *)v111 = v107;
          v182 = 0uLL;
          *(_OWORD *)(v111 + 24) = v115;
          v183 = 0uLL;
          *((_QWORD *)v111 + 5) = v113;
          *((_QWORD *)v111 + 6) = v112;
          v111[56] = 1;
          v168 = 0;
          v175 = (uint64_t)v111;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v155 + 24) + 40))(*(_QWORD *)(v155 + 24), &v175);
          v116 = v175;
          v175 = 0;
          v90 = v153;
          if (v116)
          {
            v117 = *(std::__shared_weak_count **)(v116 + 32);
            if (v117)
            {
              v118 = (unint64_t *)&v117->__shared_owners_;
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
            v120 = *(std::__shared_weak_count **)(v116 + 16);
            if (v120)
            {
              v121 = (unint64_t *)&v120->__shared_owners_;
              do
                v122 = __ldaxr(v121);
              while (__stlxr(v122 - 1, v121));
              if (!v122)
              {
                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                std::__shared_weak_count::__release_weak(v120);
              }
            }
            MEMORY[0x227684CE8](v116, 0x10F0C40B62ED6C6);
            v123 = v168;
            v168 = 0;
            if (v123)
            {
              on_zero_shared_weak = (std::__shared_weak_count *)v123->__on_zero_shared_weak;
              if (on_zero_shared_weak)
              {
                v125 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
                do
                  v126 = __ldaxr(v125);
                while (__stlxr(v126 - 1, v125));
                if (!v126)
                {
                  ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
                  std::__shared_weak_count::__release_weak(on_zero_shared_weak);
                }
              }
              on_zero_shared = (std::__shared_weak_count *)v123->__on_zero_shared;
              if (on_zero_shared)
              {
                v128 = (unint64_t *)&on_zero_shared->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
                  std::__shared_weak_count::__release_weak(on_zero_shared);
                }
              }
              MEMORY[0x227684CE8](v123, 0x10F0C40B62ED6C6);
            }
          }
          v130 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
          if (*((_QWORD *)&v183 + 1))
          {
            v131 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          v133 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
          if (*((_QWORD *)&v182 + 1))
          {
            v134 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v133);
            }
          }
        }
        else
        {
          os_log_type_enabled(v93, OS_LOG_TYPE_INFO);
          v175 = 0xD04100402;
          LOWORD(v176) = 2080;
          *(_QWORD *)((char *)&v176 + 2) = __s;
          WORD5(v176) = 1040;
          HIDWORD(v176) = 13;
          *(_WORD *)v177 = 2080;
          *(_QWORD *)&v177[2] = v157;
          v136 = (void *)_os_log_send_and_compose_impl();
          if (v136)
            free(v136);
        }
        if (v90)
        {
          sub_2245664AC((unsigned __int8 *)a2, &v175);
          sub_2245664AC((unsigned __int8 *)v3, &v181);
          sub_22322C138((uint64_t)&v158, "Adding KF plane %.13s to global plane %.13s", (const char *)&v175, (const char *)&v181);
          sub_223182C08((uint64_t)&v158);
        }
        sub_223182C08((uint64_t)&v158);
        v137 = v166;
        if (v166)
        {
          v138 = (unint64_t *)&v166->__shared_owners_;
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        goto LABEL_219;
      }
    }
    memmove(v86, v84, v85);
    goto LABEL_138;
  }
  v8 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_2236A0EC4(&v175);
  if (*(char *)(v175 + 39) < 0)
  {
    v9 = *(char **)(v175 + 16);
    v10 = *(_QWORD *)(v175 + 24);
  }
  else
  {
    v9 = (char *)(v175 + 16);
    v10 = *(unsigned __int8 *)(v175 + 39);
  }
  sub_223195728((uint64_t)&stru_255789280, v9, v10, "Attempting to add KP %.13s to GP %.13s that is already present", 0x3EuLL);
  sub_2236A0FB8(&v167);
  if (**(int **)(v167 + 56) <= 5)
  {
    v17 = *(unsigned __int8 *)(v167 + 72);
    v18 = sub_22322F254(v167, "OSLogSurrogateAppender", 1, 0);
    v19 = v18;
    if (v17 || v18)
    {
      v158 = &v167;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v160 = std::chrono::system_clock::now().__d_.__rep_;
      v161 = 5;
      v162 = "unknown file";
      v163 = 404;
      v165 = 0;
      v166 = 0;
      v164 = "unknown function";
      sub_2245664AC((unsigned __int8 *)a2, __s);
      sub_2245664AC((unsigned __int8 *)v3, v173);
      v157 = v173;
      v154 = v167;
      if (*(char *)(v167 + 39) < 0)
      {
        v21 = *(const char **)(v167 + 16);
        v20 = *(_QWORD *)(v167 + 24);
        v156 = v167 + 16;
        v23 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v23 & 1) != 0)
          goto LABEL_28;
      }
      else
      {
        v20 = *(unsigned __int8 *)(v167 + 39);
        v21 = (const char *)(v167 + 16);
        v156 = v167 + 16;
        v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v22 & 1) != 0)
          goto LABEL_28;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v175);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v175, &xmmword_255788F40);
        if (v177[0] && SHIBYTE(v176) < 0)
          operator delete((void *)v175);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_28:
      if (byte_255788F57 >= 0)
        v24 = (const char *)&xmmword_255788F40;
      else
        v24 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v25 = byte_255788F57;
      else
        v25 = *((_QWORD *)&xmmword_255788F40 + 1);
      v175 = (uint64_t)os_log_create(v24, v21);
      v26 = &v176;
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v25 >= 0x17)
      {
        v27 = v21;
        v28 = v3;
        v29 = v19;
        v30 = v17;
        v31 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v31 = v25 | 7;
        v32 = v31 + 1;
        v26 = (__int128 *)operator new(v31 + 1);
        *((_QWORD *)&v176 + 1) = v25;
        *(_QWORD *)v177 = v32 | 0x8000000000000000;
        *(_QWORD *)&v176 = v26;
        v17 = v30;
        v19 = v29;
        v3 = v28;
        v21 = v27;
      }
      else
      {
        v177[7] = v25;
        if (!v25)
        {
LABEL_42:
          *((_BYTE *)v26 + v25) = 0;
          v177[8] = 1;
          v33 = &v177[16];
          if (v20 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v20 >= 0x17)
          {
            v34 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v34 = v20 | 7;
            v35 = v34 + 1;
            v33 = operator new(v34 + 1);
            v178 = v20;
            v179 = v35 | 0x8000000000000000;
            *(_QWORD *)&v177[16] = v33;
          }
          else
          {
            HIBYTE(v179) = v20;
            if (!v20)
              goto LABEL_50;
          }
          memmove(v33, v21, v20);
LABEL_50:
          v33[v20] = 0;
          v180 = 1;
          v36 = v175;
          if (SHIBYTE(v179) < 0)
            operator delete(*(void **)&v177[16]);
          if (v177[8] && (v177[7] & 0x80000000) != 0)
            operator delete((void *)v176);
          if (v175)
            os_release((void *)v175);
          if (v19 && *(_QWORD *)(v19 + 24))
          {
            v37 = _os_log_pack_size();
            v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
            v152 = v17;
            v39 = (std::__shared_weak_count *)operator new();
            v39->__shared_owners_ = 0;
            v40 = (unint64_t *)&v39->__shared_owners_;
            v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v39->__shared_weak_owners_ = 0;
            v39[1].__vftable = v38;
            v168 = v38;
            v169 = v38;
            v171 = 0;
            v172 = 0;
            v170 = v39;
            sub_2236AE020((uint64_t)&v175, __s, (const char **)&v157);
            v41 = (char *)operator new(0x50uLL);
            v42 = (std::__shared_weak_count *)v41;
            *((_QWORD *)v41 + 1) = 0;
            v43 = (unint64_t *)(v41 + 8);
            *((_QWORD *)v41 + 2) = 0;
            *(_QWORD *)v41 = &off_24EC20730;
            *((_QWORD *)v41 + 3) = off_24EC20780;
            *((_OWORD *)v41 + 2) = v176;
            *((_QWORD *)v41 + 6) = *(_QWORD *)v177;
            *(_OWORD *)(v41 + 56) = *(_OWORD *)&v177[8];
            *((_QWORD *)v41 + 9) = v178;
            v171 = v41 + 24;
            v172 = v41;
            v181 = v38;
            *(_QWORD *)&v182 = v38;
            *((_QWORD *)&v182 + 1) = v39;
            do
              v44 = __ldxr(v40);
            while (__stxr(v44 + 1, v40));
            *(_QWORD *)&v183 = v41 + 24;
            *((_QWORD *)&v183 + 1) = v41;
            do
              v45 = __ldxr(v43);
            while (__stxr(v45 + 1, v43));
            v184 = v41 + 24;
            do
              v46 = __ldaxr(v43);
            while (__stlxr(v46 - 1, v43));
            if (!v46)
            {
              (*(void (**)(char *))(*(_QWORD *)v41 + 16))(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
            v47 = v170;
            if (v170)
            {
              v48 = (unint64_t *)&v170->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = v181;
            if (v184[31] >= 0)
              v51 = v184 + 8;
            else
              v51 = (char *)*((_QWORD *)v184 + 1);
            if (v184[55] >= 0)
              v52 = v184 + 32;
            else
              v52 = (char *)*((_QWORD *)v184 + 4);
            v53 = _os_log_pack_fill();
            *(_DWORD *)v53 = 68158466;
            *(_DWORD *)(v53 + 4) = 13;
            *(_WORD *)(v53 + 8) = 2080;
            *(_QWORD *)(v53 + 10) = v51;
            *(_WORD *)(v53 + 18) = 1040;
            *(_DWORD *)(v53 + 20) = 13;
            *(_WORD *)(v53 + 24) = 2080;
            *(_QWORD *)(v53 + 26) = v52;
            v54 = (char *)operator new();
            v55 = *(unsigned __int8 *)(v154 + 39);
            v56 = *(_QWORD *)(v154 + 16);
            v57 = *(_QWORD *)(v154 + 24);
            v58 = v183;
            *(_OWORD *)(v54 + 8) = v182;
            if ((v55 & 0x80u) != 0)
              v55 = v57;
            else
              v56 = v156;
            *(_QWORD *)v54 = v50;
            v182 = 0uLL;
            *(_OWORD *)(v54 + 24) = v58;
            v183 = 0uLL;
            *((_QWORD *)v54 + 5) = v56;
            *((_QWORD *)v54 + 6) = v55;
            v54[56] = 16;
            v168 = 0;
            v175 = (uint64_t)v54;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), &v175);
            v17 = v152;
            v59 = v175;
            v175 = 0;
            if (v59)
            {
              v60 = *(std::__shared_weak_count **)(v59 + 32);
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              v63 = *(std::__shared_weak_count **)(v59 + 16);
              if (v63)
              {
                v64 = (unint64_t *)&v63->__shared_owners_;
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 - 1, v64));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
              MEMORY[0x227684CE8](v59, 0x10F0C40B62ED6C6);
              v66 = v168;
              v168 = 0;
              if (v66)
              {
                v67 = (std::__shared_weak_count *)v66->__on_zero_shared_weak;
                if (v67)
                {
                  v68 = (unint64_t *)&v67->__shared_owners_;
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                v70 = (std::__shared_weak_count *)v66->__on_zero_shared;
                if (v70)
                {
                  v71 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                MEMORY[0x227684CE8](v66, 0x10F0C40B62ED6C6);
              }
            }
            v73 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
            if (*((_QWORD *)&v183 + 1))
            {
              v74 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v76 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
            if (*((_QWORD *)&v182 + 1))
            {
              v77 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
          }
          else
          {
            os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
            v175 = 0xD04100402;
            LOWORD(v176) = 2080;
            *(_QWORD *)((char *)&v176 + 2) = __s;
            WORD5(v176) = 1040;
            HIDWORD(v176) = 13;
            *(_WORD *)v177 = 2080;
            *(_QWORD *)&v177[2] = v157;
            v79 = (void *)_os_log_send_and_compose_impl();
            if (v79)
              free(v79);
          }
          if (v17)
          {
            sub_2245664AC((unsigned __int8 *)a2, &v175);
            sub_2245664AC((unsigned __int8 *)v3, &v181);
            sub_22322C138((uint64_t)&v158, "Attempting to add KP %.13s to GP %.13s that is already present", (const char *)&v175, (const char *)&v181);
            sub_223182C08((uint64_t)&v158);
          }
          sub_223182C08((uint64_t)&v158);
          v80 = v166;
          if (v166)
          {
            v81 = (unint64_t *)&v166->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          return;
        }
      }
      memmove(v26, v24, v25);
      goto LABEL_42;
    }
  }
}

void sub_2236A0CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  if (*(_BYTE *)(v8 - 200))
  {
    if (*(char *)(v8 - 201) < 0)
      operator delete(*(void **)(v8 - 224));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236A0D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  sub_22319A054((uint64_t *)(v26 - 224));
  sub_22319A054(&a26);
  sub_223199DE8(v26 - 152);
  sub_223182DAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2236A0DCC()
{
  JUMPOUT(0x2236A0DD4);
}

void sub_2236A0E14()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 192) && *(char *)(v0 - 193) < 0)
    operator delete(*(void **)(v0 - 216));
  v1 = *(void **)(v0 - 224);
  if (v1)
    os_release(v1);
  JUMPOUT(0x2236A0E60);
}

void sub_2236A0E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236A0E70()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 192) && *(char *)(v0 - 193) < 0)
    operator delete(*(void **)(v0 - 216));
  v1 = *(void **)(v0 - 224);
  if (v1)
    os_release(v1);
  JUMPOUT(0x2236A0E60);
}

void sub_2236A0EA4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2236A0EC4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CBFB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFB8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CBFB0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CBFB8);
  }
  *a1 = qword_2540CBFB0;
}

void sub_2236A0F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CBFB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CBFB8);
  _Unwind_Resume(a1);
}

void sub_2236A0FB8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CBFC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFC8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CBFC0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CBFC8);
  }
  *a1 = qword_2540CBFC0;
}

void sub_2236A1054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CBFC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CBFC8);
  _Unwind_Resume(a1);
}

void sub_2236A10AC(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int v7;
  unint64_t v8;
  BOOL v9;
  const char *v10;
  size_t v11;
  unsigned __int8 v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  size_t v17;
  const char *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  const char *v21;
  size_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char *v77;
  int64_t v78;
  unsigned __int8 v79;
  const char *v80;
  size_t v81;
  __int128 *v82;
  const char *v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  size_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  char *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t *v146;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v148;
  int v149;
  const char *v150;
  int v151;
  const char *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  char *v159;
  char *v160;
  char v161[37];
  char __s[37];
  uint64_t v163;
  __int128 v164;
  _BYTE v165[24];
  size_t v166;
  unint64_t v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  __int128 v170;
  __int128 v171;
  char *v172;
  uint64_t v173;

  v173 = *MEMORY[0x24BDAC8D0];
  v5 = *(char **)(a1 + 240);
  v4 = *(char **)(a1 + 248);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != *(_QWORD *)a2 || *((_QWORD *)v5 + 1) != *(_QWORD *)(a2 + 8))
    {
      v5 += 16;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 248);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    sub_2236A0EC4(&v155);
    if (**(int **)(v155 + 56) > 3
      || ((v7 = *(unsigned __int8 *)(v155 + 72), v8 = sub_22322F254(v155, "OSLogSurrogateAppender", 1, 0), !v7)
        ? (v9 = v8 == 0)
        : (v9 = 0),
          v9))
    {
LABEL_121:
      v77 = *(char **)(a1 + 248);
      v78 = v77 - (v5 + 16);
      if (v77 != v5 + 16)
        memmove(v5, v5 + 16, v77 - (v5 + 16));
      *(_QWORD *)(a1 + 248) = &v5[v78];
      return;
    }
    v143 = v8;
    v146 = &v155;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v148 = std::chrono::system_clock::now().__d_.__rep_;
    v149 = 3;
    v150 = "unknown file";
    v151 = 416;
    v153 = 0;
    v154 = 0;
    v152 = "unknown function";
    sub_2245664AC((unsigned __int8 *)a2, __s);
    sub_2245664AC((unsigned __int8 *)a1, v161);
    v145 = v161;
    v10 = (const char *)(v155 + 16);
    v138 = v155;
    v139 = v155 + 16;
    if (*(char *)(v155 + 39) < 0)
    {
      v10 = *(const char **)(v155 + 16);
      v11 = *(_QWORD *)(v155 + 24);
      v141 = v7;
      v20 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v20 & 1) != 0)
        goto LABEL_26;
    }
    else
    {
      v11 = *(unsigned __int8 *)(v155 + 39);
      v141 = v7;
      v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v12 & 1) != 0)
        goto LABEL_26;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v163);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v163, &xmmword_255788F40);
      if (v165[0] && SHIBYTE(v164) < 0)
        operator delete((void *)v163);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_26:
    if (byte_255788F57 >= 0)
      v21 = (const char *)&xmmword_255788F40;
    else
      v21 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v22 = byte_255788F57;
    else
      v22 = *((_QWORD *)&xmmword_255788F40 + 1);
    v163 = (uint64_t)os_log_create(v21, v10);
    v23 = &v164;
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v22 >= 0x17)
    {
      v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v24 = v22 | 7;
      v25 = v24 + 1;
      v23 = (__int128 *)operator new(v24 + 1);
      *((_QWORD *)&v164 + 1) = v22;
      *(_QWORD *)v165 = v25 | 0x8000000000000000;
      *(_QWORD *)&v164 = v23;
    }
    else
    {
      v165[7] = v22;
      if (!v22)
      {
LABEL_40:
        *((_BYTE *)v23 + v22) = 0;
        v165[8] = 1;
        v26 = &v165[16];
        if (v11 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v27 = v141;
        if (v11 >= 0x17)
        {
          v28 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v28 = v11 | 7;
          v29 = v28 + 1;
          v26 = operator new(v28 + 1);
          v166 = v11;
          v167 = v29 | 0x8000000000000000;
          *(_QWORD *)&v165[16] = v26;
        }
        else
        {
          HIBYTE(v167) = v11;
          if (!v11)
            goto LABEL_48;
        }
        memmove(v26, v10, v11);
LABEL_48:
        v26[v11] = 0;
        v168 = 1;
        v30 = v163;
        if (SHIBYTE(v167) < 0)
          operator delete(*(void **)&v165[16]);
        if (v165[8] && (v165[7] & 0x80000000) != 0)
          operator delete((void *)v164);
        if (v163)
          os_release((void *)v163);
        if (v143 && *(_QWORD *)(v143 + 24))
        {
          v31 = _os_log_pack_size();
          v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
          v33 = (std::__shared_weak_count *)operator new();
          v33->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v33->__shared_weak_owners_ = 0;
          v33[1].__vftable = v32;
          v156 = v32;
          v157 = v32;
          v159 = 0;
          v160 = 0;
          v158 = v33;
          sub_2236AE020((uint64_t)&v163, __s, (const char **)&v145);
          v35 = (char *)operator new(0x50uLL);
          v36 = (std::__shared_weak_count *)v35;
          *((_QWORD *)v35 + 1) = 0;
          v37 = (unint64_t *)(v35 + 8);
          *((_QWORD *)v35 + 2) = 0;
          *(_QWORD *)v35 = &off_24EC20730;
          *((_QWORD *)v35 + 3) = off_24EC20780;
          *((_OWORD *)v35 + 2) = v164;
          *((_QWORD *)v35 + 6) = *(_QWORD *)v165;
          *(_OWORD *)(v35 + 56) = *(_OWORD *)&v165[8];
          *((_QWORD *)v35 + 9) = v166;
          v159 = v35 + 24;
          v160 = v35;
          v169 = v32;
          *(_QWORD *)&v170 = v32;
          *((_QWORD *)&v170 + 1) = v33;
          do
            v38 = __ldxr(p_shared_owners);
          while (__stxr(v38 + 1, p_shared_owners));
          *(_QWORD *)&v171 = v35 + 24;
          *((_QWORD *)&v171 + 1) = v35;
          do
            v39 = __ldxr(v37);
          while (__stxr(v39 + 1, v37));
          v172 = v35 + 24;
          do
            v40 = __ldaxr(v37);
          while (__stlxr(v40 - 1, v37));
          if (!v40)
          {
            (*(void (**)(char *))(*(_QWORD *)v35 + 16))(v35);
            std::__shared_weak_count::__release_weak(v36);
          }
          v41 = v158;
          if (v158)
          {
            v42 = (unint64_t *)&v158->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = v169;
          if (v172[31] >= 0)
            v45 = v172 + 8;
          else
            v45 = (char *)*((_QWORD *)v172 + 1);
          if (v172[55] >= 0)
            v46 = v172 + 32;
          else
            v46 = (char *)*((_QWORD *)v172 + 4);
          v47 = _os_log_pack_fill();
          *(_DWORD *)v47 = 68158466;
          *(_DWORD *)(v47 + 4) = 13;
          *(_WORD *)(v47 + 8) = 2080;
          *(_QWORD *)(v47 + 10) = v45;
          *(_WORD *)(v47 + 18) = 1040;
          *(_DWORD *)(v47 + 20) = 13;
          *(_WORD *)(v47 + 24) = 2080;
          *(_QWORD *)(v47 + 26) = v46;
          v48 = (char *)operator new();
          v49 = *(unsigned __int8 *)(v138 + 39);
          v50 = *(_QWORD *)(v138 + 16);
          v51 = *(_QWORD *)(v138 + 24);
          v52 = v171;
          *(_OWORD *)(v48 + 8) = v170;
          if ((v49 & 0x80u) != 0)
            v49 = v51;
          else
            v50 = v139;
          *(_QWORD *)v48 = v44;
          v170 = 0uLL;
          *(_OWORD *)(v48 + 24) = v52;
          v171 = 0uLL;
          *((_QWORD *)v48 + 5) = v50;
          *((_QWORD *)v48 + 6) = v49;
          v48[56] = 1;
          v156 = 0;
          v163 = (uint64_t)v48;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v143 + 24) + 40))(*(_QWORD *)(v143 + 24), &v163);
          v53 = v163;
          v163 = 0;
          v27 = v141;
          if (v53)
          {
            v54 = *(std::__shared_weak_count **)(v53 + 32);
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = *(std::__shared_weak_count **)(v53 + 16);
            if (v57)
            {
              v58 = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            MEMORY[0x227684CE8](v53, 0x10F0C40B62ED6C6);
            v60 = v156;
            v156 = 0;
            if (v60)
            {
              on_zero_shared_weak = (std::__shared_weak_count *)v60->__on_zero_shared_weak;
              if (on_zero_shared_weak)
              {
                v62 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
                  std::__shared_weak_count::__release_weak(on_zero_shared_weak);
                }
              }
              on_zero_shared = (std::__shared_weak_count *)v60->__on_zero_shared;
              if (on_zero_shared)
              {
                v65 = (unint64_t *)&on_zero_shared->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
                  std::__shared_weak_count::__release_weak(on_zero_shared);
                }
              }
              MEMORY[0x227684CE8](v60, 0x10F0C40B62ED6C6);
            }
          }
          v67 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
          if (*((_QWORD *)&v171 + 1))
          {
            v68 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          v70 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
          if (*((_QWORD *)&v170 + 1))
          {
            v71 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
        }
        else
        {
          os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
          v163 = 0xD04100402;
          LOWORD(v164) = 2080;
          *(_QWORD *)((char *)&v164 + 2) = __s;
          WORD5(v164) = 1040;
          HIDWORD(v164) = 13;
          *(_WORD *)v165 = 2080;
          *(_QWORD *)&v165[2] = v145;
          v73 = (void *)_os_log_send_and_compose_impl();
          if (v73)
            free(v73);
        }
        if (v27)
        {
          sub_2245664AC((unsigned __int8 *)a2, &v163);
          sub_2245664AC((unsigned __int8 *)a1, &v169);
          sub_22322C138((uint64_t)&v146, "Removing KP %.13s from GP %.13s", (const char *)&v163, (const char *)&v169);
          sub_223182C08((uint64_t)&v146);
        }
        sub_223182C08((uint64_t)&v146);
        v74 = v154;
        if (v154)
        {
          v75 = (unint64_t *)&v154->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        goto LABEL_121;
      }
    }
    memmove(v23, v21, v22);
    goto LABEL_40;
  }
  sub_2236A0FB8(&v155);
  if (**(int **)(v155 + 56) <= 4)
  {
    v13 = *(unsigned __int8 *)(v155 + 72);
    v14 = sub_22322F254(v155, "OSLogSurrogateAppender", 1, 0);
    v15 = v14;
    if (v13 || v14 != 0)
    {
      v146 = &v155;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v148 = std::chrono::system_clock::now().__d_.__rep_;
      v149 = 4;
      v150 = "unknown file";
      v151 = 412;
      v153 = 0;
      v154 = 0;
      v152 = "unknown function";
      sub_2245664AC((unsigned __int8 *)a2, __s);
      sub_2245664AC((unsigned __int8 *)a1, v161);
      v145 = v161;
      v142 = v155;
      if (*(char *)(v155 + 39) < 0)
      {
        v18 = *(const char **)(v155 + 16);
        v17 = *(_QWORD *)(v155 + 24);
        v144 = v155 + 16;
        v79 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v79 & 1) != 0)
          goto LABEL_126;
      }
      else
      {
        v17 = *(unsigned __int8 *)(v155 + 39);
        v18 = (const char *)(v155 + 16);
        v144 = v155 + 16;
        v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v19 & 1) != 0)
          goto LABEL_126;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v163);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v163, &xmmword_255788F40);
        if (v165[0] && SHIBYTE(v164) < 0)
          operator delete((void *)v163);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_126:
      if (byte_255788F57 >= 0)
        v80 = (const char *)&xmmword_255788F40;
      else
        v80 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v81 = byte_255788F57;
      else
        v81 = *((_QWORD *)&xmmword_255788F40 + 1);
      v163 = (uint64_t)os_log_create(v80, v18);
      v82 = &v164;
      if (v81 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v81 >= 0x17)
      {
        v83 = v18;
        v84 = v15;
        v85 = v13;
        v86 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v81 | 7) != 0x17)
          v86 = v81 | 7;
        v87 = v86 + 1;
        v82 = (__int128 *)operator new(v86 + 1);
        *((_QWORD *)&v164 + 1) = v81;
        *(_QWORD *)v165 = v87 | 0x8000000000000000;
        *(_QWORD *)&v164 = v82;
        v13 = v85;
        v15 = v84;
        v18 = v83;
      }
      else
      {
        v165[7] = v81;
        if (!v81)
        {
LABEL_140:
          *((_BYTE *)v82 + v81) = 0;
          v165[8] = 1;
          v88 = &v165[16];
          if (v17 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v17 >= 0x17)
          {
            v89 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17)
              v89 = v17 | 7;
            v90 = v89 + 1;
            v88 = operator new(v89 + 1);
            v166 = v17;
            v167 = v90 | 0x8000000000000000;
            *(_QWORD *)&v165[16] = v88;
          }
          else
          {
            HIBYTE(v167) = v17;
            if (!v17)
              goto LABEL_148;
          }
          memmove(v88, v18, v17);
LABEL_148:
          v88[v17] = 0;
          v168 = 1;
          v91 = v163;
          if (SHIBYTE(v167) < 0)
            operator delete(*(void **)&v165[16]);
          if (v165[8] && (v165[7] & 0x80000000) != 0)
            operator delete((void *)v164);
          if (v163)
            os_release((void *)v163);
          if (v15 && *(_QWORD *)(v15 + 24))
          {
            v92 = _os_log_pack_size();
            v93 = (std::__shared_weak_count_vtbl *)operator new(v92, (std::align_val_t)8uLL);
            v140 = v13;
            v94 = (std::__shared_weak_count *)operator new();
            v94->__shared_owners_ = 0;
            v95 = (unint64_t *)&v94->__shared_owners_;
            v94->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v94->__shared_weak_owners_ = 0;
            v94[1].__vftable = v93;
            v156 = v93;
            v157 = v93;
            v159 = 0;
            v160 = 0;
            v158 = v94;
            sub_2236AE020((uint64_t)&v163, __s, (const char **)&v145);
            v96 = (char *)operator new(0x50uLL);
            v97 = (std::__shared_weak_count *)v96;
            *((_QWORD *)v96 + 1) = 0;
            v98 = (unint64_t *)(v96 + 8);
            *((_QWORD *)v96 + 2) = 0;
            *(_QWORD *)v96 = &off_24EC20730;
            *((_QWORD *)v96 + 3) = off_24EC20780;
            *((_OWORD *)v96 + 2) = v164;
            *((_QWORD *)v96 + 6) = *(_QWORD *)v165;
            *(_OWORD *)(v96 + 56) = *(_OWORD *)&v165[8];
            *((_QWORD *)v96 + 9) = v166;
            v159 = v96 + 24;
            v160 = v96;
            v169 = v93;
            *(_QWORD *)&v170 = v93;
            *((_QWORD *)&v170 + 1) = v94;
            do
              v99 = __ldxr(v95);
            while (__stxr(v99 + 1, v95));
            *(_QWORD *)&v171 = v96 + 24;
            *((_QWORD *)&v171 + 1) = v96;
            do
              v100 = __ldxr(v98);
            while (__stxr(v100 + 1, v98));
            v172 = v96 + 24;
            do
              v101 = __ldaxr(v98);
            while (__stlxr(v101 - 1, v98));
            if (!v101)
            {
              (*(void (**)(char *))(*(_QWORD *)v96 + 16))(v96);
              std::__shared_weak_count::__release_weak(v97);
            }
            v102 = v158;
            if (v158)
            {
              v103 = (unint64_t *)&v158->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v105 = v169;
            if (v172[31] >= 0)
              v106 = v172 + 8;
            else
              v106 = (char *)*((_QWORD *)v172 + 1);
            if (v172[55] >= 0)
              v107 = v172 + 32;
            else
              v107 = (char *)*((_QWORD *)v172 + 4);
            v108 = _os_log_pack_fill();
            *(_DWORD *)v108 = 68158466;
            *(_DWORD *)(v108 + 4) = 13;
            *(_WORD *)(v108 + 8) = 2080;
            *(_QWORD *)(v108 + 10) = v106;
            *(_WORD *)(v108 + 18) = 1040;
            *(_DWORD *)(v108 + 20) = 13;
            *(_WORD *)(v108 + 24) = 2080;
            *(_QWORD *)(v108 + 26) = v107;
            v109 = (char *)operator new();
            v110 = *(unsigned __int8 *)(v142 + 39);
            v111 = *(_QWORD *)(v142 + 16);
            v112 = *(_QWORD *)(v142 + 24);
            v113 = v171;
            *(_OWORD *)(v109 + 8) = v170;
            if ((v110 & 0x80u) != 0)
              v110 = v112;
            else
              v111 = v144;
            *(_QWORD *)v109 = v105;
            v170 = 0uLL;
            *(_OWORD *)(v109 + 24) = v113;
            v171 = 0uLL;
            *((_QWORD *)v109 + 5) = v111;
            *((_QWORD *)v109 + 6) = v110;
            v109[56] = 16;
            v156 = 0;
            v163 = (uint64_t)v109;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), &v163);
            v13 = v140;
            v114 = v163;
            v163 = 0;
            if (v114)
            {
              v115 = *(std::__shared_weak_count **)(v114 + 32);
              if (v115)
              {
                v116 = (unint64_t *)&v115->__shared_owners_;
                do
                  v117 = __ldaxr(v116);
                while (__stlxr(v117 - 1, v116));
                if (!v117)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
              }
              v118 = *(std::__shared_weak_count **)(v114 + 16);
              if (v118)
              {
                v119 = (unint64_t *)&v118->__shared_owners_;
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 - 1, v119));
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                  std::__shared_weak_count::__release_weak(v118);
                }
              }
              MEMORY[0x227684CE8](v114, 0x10F0C40B62ED6C6);
              v121 = v156;
              v156 = 0;
              if (v121)
              {
                v122 = (std::__shared_weak_count *)v121->__on_zero_shared_weak;
                if (v122)
                {
                  v123 = (unint64_t *)&v122->__shared_owners_;
                  do
                    v124 = __ldaxr(v123);
                  while (__stlxr(v124 - 1, v123));
                  if (!v124)
                  {
                    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                    std::__shared_weak_count::__release_weak(v122);
                  }
                }
                v125 = (std::__shared_weak_count *)v121->__on_zero_shared;
                if (v125)
                {
                  v126 = (unint64_t *)&v125->__shared_owners_;
                  do
                    v127 = __ldaxr(v126);
                  while (__stlxr(v127 - 1, v126));
                  if (!v127)
                  {
                    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                    std::__shared_weak_count::__release_weak(v125);
                  }
                }
                MEMORY[0x227684CE8](v121, 0x10F0C40B62ED6C6);
              }
            }
            v128 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
            if (*((_QWORD *)&v171 + 1))
            {
              v129 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            v131 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
            if (*((_QWORD *)&v170 + 1))
            {
              v132 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
              do
                v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
          }
          else
          {
            os_log_type_enabled(v91, OS_LOG_TYPE_ERROR);
            v163 = 0xD04100402;
            LOWORD(v164) = 2080;
            *(_QWORD *)((char *)&v164 + 2) = __s;
            WORD5(v164) = 1040;
            HIDWORD(v164) = 13;
            *(_WORD *)v165 = 2080;
            *(_QWORD *)&v165[2] = v145;
            v134 = (void *)_os_log_send_and_compose_impl();
            if (v134)
              free(v134);
          }
          if (v13)
          {
            sub_2245664AC((unsigned __int8 *)a2, &v163);
            sub_2245664AC((unsigned __int8 *)a1, &v169);
            sub_22322C138((uint64_t)&v146, "Cannot remove KP %.13s which is not contained in GP %.13s", (const char *)&v163, (const char *)&v169);
            sub_223182C08((uint64_t)&v146);
          }
          sub_223182C08((uint64_t)&v146);
          v135 = v154;
          if (v154)
          {
            v136 = (unint64_t *)&v154->__shared_owners_;
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
          }
          return;
        }
      }
      memmove(v82, v80, v81);
      goto LABEL_140;
    }
  }
}

void sub_2236A21B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  if (*(_BYTE *)(v8 - 200))
  {
    if (*(char *)(v8 - 201) < 0)
      operator delete(*(void **)(v8 - 224));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236A21F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  sub_22319A054((uint64_t *)(v26 - 224));
  sub_22319A054(&a26);
  sub_223199DE8(v26 - 152);
  sub_223182DAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2236A22A8()
{
  JUMPOUT(0x2236A22B0);
}

void sub_2236A22F0()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 192) && *(char *)(v0 - 193) < 0)
    operator delete(*(void **)(v0 - 216));
  v1 = *(void **)(v0 - 224);
  if (v1)
    os_release(v1);
  JUMPOUT(0x2236A233CLL);
}

void sub_2236A2338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236A234C()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 192) && *(char *)(v0 - 193) < 0)
    operator delete(*(void **)(v0 - 216));
  v1 = *(void **)(v0 - 224);
  if (v1)
    os_release(v1);
  JUMPOUT(0x2236A233CLL);
}

void sub_2236A2380(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_2236A23A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v7;
  const char *v8;
  size_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  std::__shared_weak_count_vtbl *v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  char *v27;
  std::__shared_weak_count *v28;
  size_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t i;
  uint64_t v69;
  _OWORD **v70;
  unint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  _OWORD *v82;
  _OWORD *j;
  _OWORD *v84;
  unint64_t v85;
  _OWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 *v94;
  __int128 *v95;
  __int128 v96;
  char v97;
  double result;
  uint64_t v99;
  uint64_t v100;
  char *v102;
  __int128 v103;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v105;
  const char *v106;
  int v107;
  const char *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  char *v115;
  char *v116;
  char v117[37];
  char __s[37];
  _BYTE v119[24];
  _BYTE v120[24];
  size_t v121;
  unint64_t v122;
  char v123;
  _BYTE v124[24];
  __int128 v125;
  char *v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  sub_2236A0EC4(&v111);
  v3 = a2;
  if (**(int **)(v111 + 56) > 3)
    goto LABEL_104;
  v4 = *(unsigned __int8 *)(v111 + 72);
  v5 = sub_22322F254(v111, "OSLogSurrogateAppender", 1, 0);
  if (!v4 && v5 == 0)
    goto LABEL_104;
  v7 = v5;
  *(_QWORD *)&v103 = &v111;
  *((std::chrono::steady_clock::time_point *)&v103 + 1) = std::chrono::steady_clock::now();
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v105 = 3;
  v106 = "unknown file";
  v107 = 424;
  v109 = 0;
  v110 = 0;
  v108 = "unknown function";
  sub_2245664AC((unsigned __int8 *)a1, __s);
  sub_2245664AC((unsigned __int8 *)a2, v117);
  v102 = v117;
  v8 = (const char *)(v111 + 16);
  v99 = v111 + 16;
  v100 = v111;
  if (*(char *)(v111 + 39) < 0)
  {
    v8 = *(const char **)(v111 + 16);
    v9 = *(_QWORD *)(v111 + 24);
    v11 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v9 = *(unsigned __int8 *)(v111 + 39);
    v10 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v119);
    sub_223199C58("com.apple.cv3d", (unint64_t)v119, &xmmword_255788F40);
    if (v120[0] && (v119[23] & 0x80000000) != 0)
      operator delete(*(void **)v119);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_10:
  if (byte_255788F57 >= 0)
    v12 = (const char *)&xmmword_255788F40;
  else
    v12 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v13 = byte_255788F57;
  else
    v13 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v119 = os_log_create(v12, v8);
  v14 = &v119[8];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v13 >= 0x17)
  {
    v15 = v4;
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v14 = operator new(v16 + 1);
    *(_QWORD *)&v119[16] = v13;
    *(_QWORD *)v120 = v17 | 0x8000000000000000;
    *(_QWORD *)&v119[8] = v14;
    v4 = v15;
    goto LABEL_23;
  }
  v120[7] = v13;
  if (v13)
LABEL_23:
    memmove(v14, v12, v13);
  v14[v13] = 0;
  v120[8] = 1;
  v18 = &v120[16];
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v3 = a2;
  if (v9 >= 0x17)
  {
    v20 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v20 = v9 | 7;
    v21 = v20 + 1;
    v18 = operator new(v20 + 1);
    v121 = v9;
    v122 = v21 | 0x8000000000000000;
    *(_QWORD *)&v120[16] = v18;
  }
  else
  {
    HIBYTE(v122) = v9;
    if (!v9)
    {
      v120[16] = 0;
      v123 = 1;
      v19 = *(NSObject **)v119;
      if ((SHIBYTE(v122) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v18, v8, v9);
  v18[v9] = 0;
  v123 = 1;
  v19 = *(NSObject **)v119;
  if ((SHIBYTE(v122) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v120[8])
      goto LABEL_37;
LABEL_35:
    if ((v120[7] & 0x80000000) != 0)
      operator delete(*(void **)&v119[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(*(void **)&v120[16]);
  if (v120[8])
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)v119)
    os_release(*(void **)v119);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v22 = _os_log_pack_size();
    v23 = (std::__shared_weak_count_vtbl *)operator new(v22, (std::align_val_t)8uLL);
    v24 = v4;
    v25 = (std::__shared_weak_count *)operator new();
    v25->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = v23;
    v112 = v23;
    v113 = v23;
    v115 = 0;
    v116 = 0;
    v114 = v25;
    sub_2236AE020((uint64_t)v119, __s, (const char **)&v102);
    v27 = (char *)operator new(0x50uLL);
    v28 = (std::__shared_weak_count *)v27;
    *(_QWORD *)v27 = &off_24EC20730;
    *((_QWORD *)v27 + 3) = off_24EC20780;
    v29 = v121;
    *((_QWORD *)v27 + 6) = *(_QWORD *)v120;
    *((_QWORD *)v27 + 1) = 0;
    v30 = (unint64_t *)(v27 + 8);
    *((_QWORD *)v27 + 2) = 0;
    *((_OWORD *)v27 + 2) = *(_OWORD *)&v119[8];
    *(_OWORD *)(v27 + 56) = *(_OWORD *)&v120[8];
    *((_QWORD *)v27 + 9) = v29;
    v115 = v27 + 24;
    v116 = v27;
    *(_QWORD *)v124 = v23;
    *(_QWORD *)&v124[8] = v23;
    *(_QWORD *)&v124[16] = v25;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    *(_QWORD *)&v125 = v27 + 24;
    *((_QWORD *)&v125 + 1) = v27;
    do
      v32 = __ldxr(v30);
    while (__stxr(v32 + 1, v30));
    v126 = v27 + 24;
    v4 = v24;
    do
      v33 = __ldaxr(v30);
    while (__stlxr(v33 - 1, v30));
    if (!v33)
    {
      (*(void (**)(char *))(*(_QWORD *)v27 + 16))(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    v34 = v114;
    if (v114)
    {
      v35 = (unint64_t *)&v114->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = *(_QWORD *)v124;
    if (v126[31] >= 0)
      v38 = v126 + 8;
    else
      v38 = (char *)*((_QWORD *)v126 + 1);
    if (v126[55] >= 0)
      v39 = v126 + 32;
    else
      v39 = (char *)*((_QWORD *)v126 + 4);
    v40 = _os_log_pack_fill();
    *(_DWORD *)v40 = 68158466;
    *(_DWORD *)(v40 + 4) = 13;
    *(_WORD *)(v40 + 8) = 2080;
    *(_QWORD *)(v40 + 10) = v38;
    *(_WORD *)(v40 + 18) = 1040;
    *(_DWORD *)(v40 + 20) = 13;
    *(_WORD *)(v40 + 24) = 2080;
    *(_QWORD *)(v40 + 26) = v39;
    v41 = operator new();
    v42 = *(unsigned __int8 *)(v100 + 39);
    v43 = v99;
    if ((v42 & 0x80u) != 0)
    {
      v43 = *(_QWORD *)(v100 + 16);
      v42 = *(_QWORD *)(v100 + 24);
    }
    *(_QWORD *)v41 = v37;
    *(_OWORD *)(v41 + 8) = *(_OWORD *)&v124[8];
    *(_QWORD *)&v124[8] = 0;
    *(_QWORD *)&v124[16] = 0;
    *(_OWORD *)(v41 + 24) = v125;
    v125 = 0uLL;
    *(_QWORD *)(v41 + 40) = v43;
    *(_QWORD *)(v41 + 48) = v42;
    *(_BYTE *)(v41 + 56) = 1;
    v112 = 0;
    *(_QWORD *)v119 = v41;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v119);
    v44 = *(_QWORD *)v119;
    *(_QWORD *)v119 = 0;
    v3 = a2;
    if (v44)
    {
      v45 = *(std::__shared_weak_count **)(v44 + 32);
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = *(std::__shared_weak_count **)(v44 + 16);
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      MEMORY[0x227684CE8](v44, 0x10F0C40B62ED6C6);
      v51 = v112;
      v112 = 0;
      if (v51)
      {
        on_zero_shared_weak = (std::__shared_weak_count *)v51->__on_zero_shared_weak;
        if (on_zero_shared_weak)
        {
          v53 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
            std::__shared_weak_count::__release_weak(on_zero_shared_weak);
          }
        }
        on_zero_shared = (std::__shared_weak_count *)v51->__on_zero_shared;
        if (on_zero_shared)
        {
          v56 = (unint64_t *)&on_zero_shared->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
            std::__shared_weak_count::__release_weak(on_zero_shared);
          }
        }
        MEMORY[0x227684CE8](v51, 0x10F0C40B62ED6C6);
      }
    }
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
    if (*((_QWORD *)&v125 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = *(std::__shared_weak_count **)&v124[16];
    if (*(_QWORD *)&v124[16])
    {
      v62 = (unint64_t *)(*(_QWORD *)&v124[16] + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
  else
  {
    os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
    *(_QWORD *)v119 = 0xD04100402;
    *(_WORD *)&v119[8] = 2080;
    *(_QWORD *)&v119[10] = __s;
    *(_WORD *)&v119[18] = 1040;
    *(_DWORD *)&v119[20] = 13;
    *(_WORD *)v120 = 2080;
    *(_QWORD *)&v120[2] = v102;
    v64 = (void *)_os_log_send_and_compose_impl();
    if (v64)
      free(v64);
  }
  if (v4)
  {
    sub_2245664AC((unsigned __int8 *)a1, v119);
    sub_2245664AC((unsigned __int8 *)v3, v124);
    sub_22322C138((uint64_t)&v103, "Merging GPs %.13s <- %.13s", v119, v124);
    sub_223182C08((uint64_t)&v103);
  }
  sub_223182C08((uint64_t)&v103);
  v65 = v110;
  if (v110)
  {
    v66 = (unint64_t *)&v110->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_104:
  v69 = *(_QWORD *)(v3 + 240);
  for (i = *(_QWORD *)(v3 + 248); v69 != i; v69 += 16)
    sub_22369FA8C(a1, v69);
  v70 = (_OWORD **)(a1 + 264);
  v72 = *(_OWORD **)(a1 + 272);
  v71 = *(_QWORD *)(a1 + 280);
  if ((unint64_t)v72 >= v71)
  {
    v75 = *(_OWORD **)(a1 + 264);
    v76 = v72 - v75;
    v77 = v76 + 1;
    v73 = a2;
    if ((unint64_t)(v76 + 1) >> 60)
      sub_22316E078();
    v78 = v71 - (_QWORD)v75;
    if (v78 >> 3 > v77)
      v77 = v78 >> 3;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
      v79 = 0xFFFFFFFFFFFFFFFLL;
    else
      v79 = v77;
    if (v79)
    {
      if (v79 >> 60)
        sub_223174E94();
      v80 = (char *)operator new(16 * v79);
      v73 = a2;
    }
    else
    {
      v80 = 0;
    }
    v81 = &v80[16 * v76];
    *(_OWORD *)v81 = *(_OWORD *)v73;
    v74 = v81 + 16;
    if (v72 != v75)
    {
      do
      {
        *((_OWORD *)v81 - 1) = *(v72 - 1);
        v81 -= 16;
        --v72;
      }
      while (v72 != v75);
      v72 = *v70;
    }
    *(_QWORD *)(a1 + 264) = v81;
    *(_QWORD *)(a1 + 272) = v74;
    *(_QWORD *)(a1 + 280) = &v80[16 * v79];
    if (v72)
      operator delete(v72);
  }
  else
  {
    v73 = a2;
    *v72 = *(_OWORD *)a2;
    v74 = v72 + 1;
  }
  *(_QWORD *)(a1 + 272) = v74;
  v82 = *(_OWORD **)(v73 + 264);
  for (j = *(_OWORD **)(v73 + 272); v82 != j; v74 = v84)
  {
    v85 = *(_QWORD *)(a1 + 280);
    if ((unint64_t)v74 < v85)
    {
      *v74 = *v82;
      v84 = v74 + 1;
    }
    else
    {
      v86 = *v70;
      v87 = v74 - *v70;
      v88 = v87 + 1;
      if ((unint64_t)(v87 + 1) >> 60)
        sub_22316E078();
      v89 = v85 - (_QWORD)v86;
      if (v89 >> 3 > v88)
        v88 = v89 >> 3;
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
        v90 = 0xFFFFFFFFFFFFFFFLL;
      else
        v90 = v88;
      if (v90)
      {
        if (v90 >> 60)
          sub_223174E94();
        v91 = (char *)operator new(16 * v90);
      }
      else
      {
        v91 = 0;
      }
      v92 = &v91[16 * v87];
      v93 = &v91[16 * v90];
      *(_OWORD *)v92 = *v82;
      v84 = v92 + 16;
      if (v74 == v86)
      {
        *(_QWORD *)(a1 + 264) = v92;
        *(_QWORD *)(a1 + 272) = v84;
        *(_QWORD *)(a1 + 280) = v93;
      }
      else
      {
        do
        {
          *((_OWORD *)v92 - 1) = *(v74 - 1);
          v92 -= 16;
          --v74;
        }
        while (v74 != v86);
        v74 = *(_OWORD **)(a1 + 264);
        *(_QWORD *)(a1 + 264) = v92;
        *(_QWORD *)(a1 + 272) = v84;
        *(_QWORD *)(a1 + 280) = v93;
        if (!v74)
          goto LABEL_126;
      }
      operator delete(v74);
    }
LABEL_126:
    *(_QWORD *)(a1 + 272) = v84;
    ++v82;
  }
  v94 = (__int128 *)(a1 + 216);
  *(_OWORD *)v119 = *(_OWORD *)(a1 + 216);
  *(_QWORD *)&v119[16] = *(_QWORD *)(a1 + 232);
  v103 = *(_OWORD *)(a2 + 216);
  rep = *(_QWORD *)(a2 + 232);
  if (v119[16])
  {
    if ((_BYTE)rep)
    {
      v95 = (__int128 *)v119;
      if (*(uint64_t *)v119 < (uint64_t)v103)
        v95 = &v103;
      v96 = *v95;
    }
    else
    {
      v96 = *v94;
    }
    *(_OWORD *)v124 = v96;
    v97 = 1;
  }
  else
  {
    *(_OWORD *)v124 = *(_OWORD *)(a2 + 216);
    v97 = rep;
  }
  result = *(double *)v124;
  *v94 = *(_OWORD *)v124;
  *(_BYTE *)(a1 + 232) = v97;
  return result;
}

void sub_2236A2EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 216))
  {
    if (*(char *)(v7 - 217) < 0)
      operator delete(*(void **)(v7 - 240));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236A2F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  sub_22319A054((uint64_t *)(v26 - 240));
  sub_22319A054(&a26);
  sub_223199DE8(v26 - 160);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2236A2F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  sub_2231A87A4(v26 - 240);
  sub_223199DE8((uint64_t)&a26);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2236A2F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x227684CE8](v7, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236A2FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236A2FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 208) && *(char *)(v7 - 209) < 0)
    operator delete(*(void **)(v7 - 232));
  v9 = *(void **)(v7 - 240);
  if (v9)
    os_release(v9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_2236A3030(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5, int a6, char a7, float32x4_t a8, float32x4_t a9)
{
  uint64_t v14;
  unint64_t v15;
  int v16;
  float32x2_t *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float64x2_t v24;
  float32x4_t v25;
  int v26;
  int32x2_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  char *v42;
  char *v43;
  char *v44;
  _BYTE *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t *v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int8x16_t *v59;
  int8x16_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  uint64_t *v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int8x16_t *v76;
  int8x16_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x4_t v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  size_t v85;
  const char *v86;
  unsigned __int8 v87;
  const char *v88;
  size_t v89;
  const char *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  size_t v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  size_t v102;
  size_t v103;
  char **p_dst;
  void *v105;
  unsigned __int8 *v106;
  uint64_t **v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char **v111;
  char v112;
  char *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  __int128 v132;
  void *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  char **v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  __int32 v156;
  int8x16_t v157;
  float32x2_t v158;
  float32x4_t **v159;
  float64x2_t v160;
  int8x16_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v165;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v175;
  float32x2_t v178;
  float v179;
  float v180;
  BOOL v181;
  float32x2_t v182;
  float32x2_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  void *v191;
  void *v192;
  float64x2_t v193;
  float64x2_t v195;
  int8x16_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v201;
  float64x2_t v203;
  uint64_t v205;
  uint64_t v206;
  float64x2_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char **v215;
  float32x2_t v216;
  float32x2_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  float32x4_t v222;
  int8x16_t v223;
  float32x4_t v224;
  int8x16_t v225;
  int8x16_t v226;
  uint64_t v227;
  float32x2_t v228;
  float32x2_t v229;
  float32x2_t v230;
  int8x16_t v231;
  simd_float3x3 v232;
  __n128 v233;
  int16x4_t v234;
  float32x2_t v235;
  float32x2_t v236;
  uint64_t v237;
  float32x2_t v238;
  float32x2_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  char **v243;
  int64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  _BYTE *v249;
  char **v250;
  int64_t v251;
  unint64_t v252;
  char **v253;
  char *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _OWORD *v258;
  char **v259;
  uint64_t v260;
  __int128 v261;
  char v262;
  uint64_t v263;
  int v264;
  void *v265;
  float32x2_t *v266;
  float32x2_t *v267;
  uint64_t v268;
  uint64_t *v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  size_t v274;
  void *v275;
  float64x2_t v276;
  int8x16_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  int8x16_t v284;
  int8x16_t v285;
  int8x16_t v286;
  float64x2_t v288;
  int8x16_t v290;
  unint64_t v292;
  float64x2_t v294;
  float64x2_t v296;
  int8x16_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float32x4_t **v304;
  float32x4_t v305;
  float32x2_t *v306;
  float32x2_t *v307;
  float64x2_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  uint64_t v313;
  uint64_t v314;
  __int16 **v315;
  uint64_t v316;
  __int16 *v317;
  int v318;
  int v319;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  float32x2_t *v324;
  unint64_t v325;
  uint64_t v326;
  float32x4_t *v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  __int128 v335;
  int8x16_t v336;
  float32x4_t v337;
  float64x2_t v338;
  __int128 v339;
  int8x16_t v340;
  uint64_t *v341;
  uint64_t v342;
  float32x4_t v343;
  float32x4_t v344;
  __int128 v345;
  uint64_t *v346;
  uint64_t *v347;
  int8x16_t v348;
  uint64_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x2_t v352;
  float32x2_t v353;
  float32x2_t v354;
  float64x2_t v355;
  int8x16_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v360;
  float64x2_t v362;
  int8x16_t v366;
  int8x16_t v367;
  float64x2_t v368;
  double v369;
  int8x16_t v370;
  unint64_t v372;
  float64x2_t v374;
  int64x2_t v375;
  int8x16_t v377;
  float64x2_t v378;
  float64x2_t v381;
  float64x2_t v383;
  float32x4_t v385;
  float32x4_t v386;
  float32x2_t v387;
  float32x2_t v388;
  __int128 v389;
  uint64_t v390;
  void *v391;
  int64x2_t **v392;
  int64x2_t **v393;
  int64x2_t v394;
  int64x2_t v395;
  int64x2_t v396;
  int64x2_t *v397;
  int64x2_t *v398;
  unint64_t v399;
  int64x2_t *v400;
  uint64_t v401;
  double *i64;
  uint64_t v403;
  double *v404;
  uint64_t *v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  float32x4_t v410;
  char v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  uint64_t v421;
  float32x4_t v422;
  unint64_t v423;
  float32x4_t v424;
  void **v425;
  float32x4_t v426;
  uint64_t v427;
  float32x4_t v428;
  int v429;
  float32x4_t v430;
  float64_t v431;
  float32x4_t v432;
  uint64_t *v433;
  float32x4_t v434;
  uint64_t v435;
  float32x4_t v436;
  uint64_t *v437;
  float32x4_t v438;
  uint64_t v439;
  float32x4_t v440;
  uint64_t **v441;
  int32x4_t v442;
  uint64_t v443;
  float32x4_t v444;
  int v445;
  int32x4_t v446;
  float64_t v447;
  float v448;
  float32x4_t v449;
  int32x4_t v450;
  uint64_t v451;
  float v452;
  uint64_t *v453;
  unint64_t v454;
  float32x4_t **v455;
  float64_t v456;
  float v457;
  __int128 v458;
  uint64_t v459;
  int8x16_t v460;
  float32x4_t v461;
  float v462;
  float32x2_t v463;
  _BYTE v464[24];
  float32x2_t v465;
  const char *v466;
  int v467;
  const char *v468;
  uint64_t v469;
  std::__shared_weak_count *v470;
  void *__p;
  char *v472;
  char *v473;
  void *v474;
  char *v475;
  char *v476;
  void *v477[2];
  float32x2_t *v478;
  char *v479;
  std::__shared_weak_count *v480;
  char **__dst;
  __int128 v482;
  void **v483;
  char __s[8];
  float32x2_t *v485;
  uint64_t v486;
  _BYTE v487[48];
  simd_float3 v488;
  char v489;
  _QWORD v490[5];
  simd_float3x3 v491;
  float64x2x2_t v492;
  float64x2x2_t v493;
  float64x2x2_t v494;

  v490[2] = *MEMORY[0x24BDAC8D0];
  if (*a3 == a3[1])
    return 0;
  if ((a5 & 0xFF00000000) == 0)
    goto LABEL_11;
  v14 = *a2;
  if (*a2 > *(_QWORD *)(a1 + 192))
  {
    *(_DWORD *)(a1 + 208) = a5;
    *(_QWORD *)(a1 + 192) = v14;
    *(_BYTE *)(a1 + 200) = 0;
    if ((a5 & 2) == 0)
      goto LABEL_10;
LABEL_8:
    v16 = *(unsigned __int8 *)(a1 + 232);
    *(_QWORD *)(a1 + 216) = v14;
    *(_BYTE *)(a1 + 224) = 0;
    if (!v16)
      *(_BYTE *)(a1 + 232) = 1;
    goto LABEL_10;
  }
  *(_DWORD *)(a1 + 208) |= a5;
  *(_QWORD *)(a1 + 192) = v14;
  *(_BYTE *)(a1 + 200) = 0;
  if ((a5 & 2) != 0)
    goto LABEL_8;
LABEL_10:
  *(_QWORD *)(a1 + 24) = *a2;
LABEL_11:
  v17 = (float32x2_t *)(a1 + 120);
  a8.i64[0] = *(_QWORD *)(a1 + 120);
  a8.i32[2] = *(_DWORD *)(a1 + 128);
  v449 = a8;
  sub_2236A576C(a4[1] - *a4, *a4, (uint64_t)v487, a9);
  *v17 = *(float32x2_t *)v487;
  v26 = *(_DWORD *)&v487[20];
  *(_DWORD *)(a1 + 128) = *(_DWORD *)&v487[8];
  *(_QWORD *)(a1 + 132) = *(_QWORD *)&v487[12];
  v27 = (int32x2_t *)(a1 + 132);
  *(_DWORD *)(a1 + 140) = v26;
  *(_BYTE *)(a1 + 48) = v487[24];
  v28 = a4[1];
  v441 = a4;
  v29 = *a4;
  v475 = 0;
  v476 = 0;
  v474 = 0;
  v30 = (char *)v28 - (char *)v29;
  if (v28 == v29)
  {
    v31 = 0;
    __p = 0;
    v472 = 0;
    v473 = 0;
  }
  else
  {
    if (v30 < 0)
      sub_22316E078();
    v474 = operator new((char *)v28 - (char *)v29);
    v475 = (char *)v474;
    v476 = (char *)v474 + 8 * (v30 >> 3);
    __p = operator new((char *)v28 - (char *)v29);
    v472 = (char *)__p;
    v473 = (char *)__p + 8 * (v30 >> 3);
    v31 = (uint64_t *)__p;
  }
  v32 = *a3;
  v33 = a3[1];
  v408 = a1;
  v459 = a1 + 120;
  v453 = v28;
  v411 = a7;
  v445 = a6;
  if (v29 == v28 && v32 == v33)
  {
    v34 = (uint64_t)v31;
    goto LABEL_191;
  }
  v34 = (uint64_t)v31;
  do
  {
    v20.i32[0] = v27[1].i32[0];
    *(int32x2_t *)v18.i8 = *v27;
    v18.i32[2] = v20.i32[0];
    v35 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*v27, 1), (float32x2_t)*v27, 1), *(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8).f32[0];
    if (v35 != 1.0)
    {
      v36 = v35 >= 1.0 ? v35 + -1.0 : 1.0 - v35;
      if (v36 > 0.000001)
        v18 = (int8x16_t)vmulq_n_f32((float32x4_t)v18, 1.0 / sqrtf(v35));
    }
    v37 = *v32;
    v19.i64[0] = *(_QWORD *)(*v32 + 144);
    v19.i32[2] = *(_DWORD *)(*v32 + 152);
    v20.i64[0] = *(_QWORD *)(*v32 + 160);
    v20.i32[2] = *(_DWORD *)(*v32 + 168);
    v21.i64[0] = *(_QWORD *)(*v32 + 176);
    v21.i32[2] = *(_DWORD *)(*v32 + 184);
    v22.i64[0] = *(_QWORD *)(*v32 + 192);
    v22.i32[2] = *(_DWORD *)(*v32 + 200);
    v22 = (int8x16_t)vnegq_f32((float32x4_t)v22);
    *(float32x2_t *)v23.i8 = *v17;
    v23.i32[2] = v17[1].i32[0];
    v38 = (float32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
    v23 = vextq_s8(v18, v18, 8uLL);
    v39 = vmla_f32(vmla_lane_f32(vmul_f32(*v17, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *v17, 1), *(float32x2_t *)v23.i8, v38);
    v24 = (float64x2_t)vextq_s8(v22, v22, 8uLL);
    v40 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1), *(float32x2_t *)v22.i8, 1);
    v19 = vextq_s8(v19, v19, 8uLL);
    v41 = vmla_f32(v40, *(float32x2_t *)v19.i8, *(float32x2_t *)&v24.f64[0]);
    *(float32x2_t *)v19.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1), *(float32x2_t *)v22.i8, 1);
    v20 = vextq_s8(v20, v20, 8uLL);
    *(float32x2_t *)v19.i8 = vmla_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v20.i8, *(float32x2_t *)&v24.f64[0]);
    *(float32x2_t *)v20.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1), *(float32x2_t *)v22.i8, 1);
    v21 = vextq_s8(v21, v21, 8uLL);
    *(float32x2_t *)v20.i8 = vmla_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v21.i8, *(float32x2_t *)&v24.f64[0]);
    if (vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(v41, *(float32x2_t *)v18.i8), *(float32x2_t *)v19.i8, *(float32x2_t *)v18.i8, 1), *(float32x2_t *)v23.i8, *(float32x2_t *)v20.i8), v39).f32[0] >= 0.05)
    {
      v42 = v475;
      if (v475 < v476)
      {
        *(_QWORD *)v475 = v37;
        v475 = v42 + 8;
        v44 = v472;
        v43 = v473;
        if (v472 < v473)
        {
LABEL_28:
          *(_QWORD *)v44 = *v29;
          v34 = (uint64_t)(v44 + 8);
LABEL_70:
          v17 = (float32x2_t *)v459;
          v472 = (char *)v34;
          goto LABEL_71;
        }
LABEL_50:
        v63 = (char *)__p;
        v64 = v44 - (_BYTE *)__p;
        v65 = (v44 - (_BYTE *)__p) >> 3;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61)
          sub_22316E078();
        v67 = v43 - (_BYTE *)__p;
        if (v67 >> 2 > v66)
          v66 = v67 >> 2;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          if (v68 >> 61)
LABEL_374:
            sub_223174E94();
          v69 = operator new(8 * v68);
          v70 = (uint64_t *)&v69[8 * v65];
          *v70 = *v29;
          v34 = (uint64_t)(v70 + 1);
          v71 = v44 - v63;
          if (v44 != v63)
          {
LABEL_59:
            v72 = v71 - 8;
            if (v72 < 0x58)
              goto LABEL_396;
            if ((unint64_t)(v44 - &v69[v64]) < 0x20)
              goto LABEL_396;
            v73 = (v72 >> 3) + 1;
            v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
            v75 = &v44[-v74];
            v70 = (uint64_t *)((char *)v70 - v74);
            v76 = (int8x16_t *)&v69[8 * v65 - 16];
            v77 = (int8x16_t *)(v44 - 16);
            v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v19 = v77[-1];
              v18 = *v77;
              v76[-1] = v19;
              *v76 = v18;
              v76 -= 2;
              v77 -= 2;
              v78 -= 4;
            }
            while (v78);
            v44 = v75;
            if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_396:
              do
              {
                v79 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *--v70 = v79;
              }
              while (v44 != v63);
            }
            v44 = (char *)__p;
            __p = v70;
            v473 = &v69[8 * v68];
            v28 = v453;
            if (!v44)
              goto LABEL_70;
            goto LABEL_69;
          }
        }
        else
        {
          v69 = 0;
          v70 = (uint64_t *)(8 * v65);
          *(_QWORD *)(8 * v65) = *v29;
          v34 = 8 * v65 + 8;
          v71 = v44 - v63;
          if (v44 != v63)
            goto LABEL_59;
        }
        __p = v70;
        v473 = &v69[8 * v68];
        v28 = v453;
        if (!v44)
          goto LABEL_70;
LABEL_69:
        operator delete(v44);
        goto LABEL_70;
      }
      v45 = v474;
      v46 = v475 - (_BYTE *)v474;
      v47 = (v475 - (_BYTE *)v474) >> 3;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        sub_22316E078();
      v49 = v476 - (_BYTE *)v474;
      if ((v476 - (_BYTE *)v474) >> 2 > v48)
        v48 = v49 >> 2;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (v50)
      {
        if (v50 >> 61)
          goto LABEL_374;
        v51 = operator new(8 * v50);
        v52 = (uint64_t *)&v51[8 * v47];
        *v52 = *v32;
        v53 = (uint64_t)(v52 + 1);
        v54 = v42 - v45;
        if (v42 == v45)
        {
LABEL_47:
          v474 = v52;
          v476 = &v51[8 * v50];
          if (v42)
            operator delete(v42);
          v28 = v453;
          v475 = (char *)v53;
          v44 = v472;
          v43 = v473;
          if (v472 < v473)
            goto LABEL_28;
          goto LABEL_50;
        }
      }
      else
      {
        v51 = 0;
        v52 = (uint64_t *)(8 * v47);
        *(_QWORD *)(8 * v47) = v37;
        v53 = 8 * v47 + 8;
        v54 = v42 - v45;
        if (v42 == v45)
          goto LABEL_47;
      }
      v55 = v54 - 8;
      if (v55 < 0x58)
        goto LABEL_397;
      if ((unint64_t)(v42 - v51 - v46) < 0x20)
        goto LABEL_397;
      v56 = (v55 >> 3) + 1;
      v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      v58 = &v42[-v57];
      v52 = (uint64_t *)((char *)v52 - v57);
      v59 = (int8x16_t *)&v51[8 * v47 - 16];
      v60 = (int8x16_t *)(v42 - 16);
      v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19 = v60[-1];
        v18 = *v60;
        v59[-1] = v19;
        *v59 = v18;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      v42 = v58;
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_397:
        do
        {
          v62 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *--v52 = v62;
        }
        while (v42 != v45);
      }
      v42 = (char *)v474;
      goto LABEL_47;
    }
LABEL_71:
    ++v32;
    ++v29;
  }
  while (v32 != v33 || v29 != v28);
  v31 = (uint64_t *)__p;
  v80 = v34 - (_QWORD)__p;
  if (v34 - (uint64_t)__p >= (unint64_t)((char *)v441[1] - (char *)*v441))
    goto LABEL_191;
  sub_2236A0EC4(&v483);
  if (*(int *)v483[7] > 3)
    goto LABEL_190;
  v82 = *((unsigned __int8 *)v483 + 72);
  v83 = sub_22322F254((uint64_t)v483, "OSLogSurrogateAppender", 1, 0);
  v84 = v83;
  if (!v82 && !v83)
    goto LABEL_190;
  *(_QWORD *)v464 = &v483;
  *(std::chrono::steady_clock::time_point *)&v464[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v464[16] = std::chrono::system_clock::now();
  v465.i32[0] = 3;
  v466 = "unknown file";
  v467 = 519;
  v469 = 0;
  v470 = 0;
  v468 = "unknown function";
  sub_2245664AC((unsigned __int8 *)v408, __s);
  v429 = v82;
  if (*((char *)v483 + 39) < 0)
  {
    v86 = (const char *)v483[2];
    v85 = (size_t)v483[3];
  }
  else
  {
    v85 = *((unsigned __int8 *)v483 + 39);
    v86 = (const char *)(**(_QWORD **)v464 + 16);
  }
  v421 = **(_QWORD **)v464;
  v425 = v483 + 2;
  v437 = v441[1];
  v433 = *v441;
  v87 = atomic_load((unsigned __int8 *)&qword_255788F58);
  v454 = v84;
  if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v487);
    sub_223199C58("com.apple.cv3d", (unint64_t)v487, &xmmword_255788F40);
    if (v487[24] && (v487[23] & 0x80000000) != 0)
      operator delete(*(void **)v487);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
    v17 = (float32x2_t *)v459;
  }
  if (byte_255788F57 >= 0)
    v88 = (const char *)&xmmword_255788F40;
  else
    v88 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v89 = byte_255788F57;
  else
    v89 = *((_QWORD *)&xmmword_255788F40 + 1);
  v90 = v86;
  *(_QWORD *)v487 = os_log_create(v88, v86);
  v91 = &v487[8];
  if (v89 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v89 >= 0x17)
  {
    v92 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17)
      v92 = v89 | 7;
    v93 = v92 + 1;
    v91 = operator new(v92 + 1);
    *(_QWORD *)&v487[16] = v89;
    *(_QWORD *)&v487[24] = v93 | 0x8000000000000000;
    *(_QWORD *)&v487[8] = v91;
    v84 = v454;
    goto LABEL_94;
  }
  v487[31] = v89;
  if (v89)
LABEL_94:
    memmove(v91, v88, v89);
  v91[v89] = 0;
  v487[32] = 1;
  v94 = &v487[40];
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v85 >= 0x17)
  {
    v95 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v95 = v85 | 7;
    v96 = v95 + 1;
    v94 = operator new(v95 + 1);
    v488.i64[0] = v85;
    v488.i64[1] = v96 | 0x8000000000000000;
    *(_QWORD *)&v487[40] = v94;
    v84 = v454;
    goto LABEL_102;
  }
  v488.i8[15] = v85;
  if (v85)
LABEL_102:
    memmove(v94, v90, v85);
  v94[v85] = 0;
  v489 = 1;
  v97 = *(NSObject **)v487;
  if (v488.i8[15] < 0)
    operator delete(*(void **)&v487[40]);
  if (v487[32] && (v487[31] & 0x80000000) != 0)
    operator delete(*(void **)&v487[8]);
  if (*(_QWORD *)v487)
    os_release(*(void **)v487);
  v98 = v80 >> 3;
  if (v84 && *(_QWORD *)(v84 + 24))
  {
    v99 = _os_log_pack_size();
    v100 = (std::__shared_weak_count_vtbl *)operator new(v99, (std::align_val_t)8uLL);
    v101 = (std::__shared_weak_count *)operator new();
    v101->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v100;
    v477[0] = v100;
    v477[1] = v100;
    v479 = 0;
    v480 = 0;
    v478 = (float32x2_t *)v101;
    v102 = strlen(__s);
    if (v102 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v103 = v102;
    if (v102 >= 0x17)
    {
      v109 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v102 | 7) != 0x17)
        v109 = v102 | 7;
      v110 = v109 + 1;
      p_dst = (char **)operator new(v109 + 1);
      *(_QWORD *)&v482 = v103;
      *((_QWORD *)&v482 + 1) = v110 | 0x8000000000000000;
      __dst = p_dst;
      v84 = v454;
    }
    else
    {
      HIBYTE(v482) = v102;
      p_dst = (char **)&__dst;
      if (!v102)
        goto LABEL_122;
    }
    memcpy(p_dst, __s, v103);
LABEL_122:
    *((_BYTE *)p_dst + v103) = 0;
    v111 = __dst;
    v490[0] = v482;
    *(_QWORD *)((char *)v490 + 7) = *(_QWORD *)((char *)&v482 + 7);
    v112 = HIBYTE(v482);
    v113 = (char *)operator new(0x40uLL);
    *((_QWORD *)v113 + 1) = 0;
    *((_QWORD *)v113 + 2) = 0;
    *((_QWORD *)v113 + 3) = off_24EC1F890;
    *(_QWORD *)v113 = &off_24EC1F840;
    v114 = v490[0];
    *((_QWORD *)v113 + 4) = v111;
    *((_QWORD *)v113 + 5) = v114;
    *(_QWORD *)(v113 + 47) = *(_QWORD *)((char *)v490 + 7);
    v113[55] = v112;
    v490[0] = 0;
    *(_QWORD *)((char *)v490 + 7) = 0;
    v115 = v480;
    v479 = v113 + 24;
    v480 = (std::__shared_weak_count *)v113;
    v17 = (float32x2_t *)v459;
    if (v115)
    {
      p_shared_owners = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldaxr(p_shared_owners);
      while (__stlxr(v117 - 1, p_shared_owners));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    *(_OWORD *)v487 = *(_OWORD *)v477;
    *(_QWORD *)&v487[16] = v478;
    if (v478)
    {
      v118 = (uint64_t *)&v478[1];
      do
        v119 = __ldxr((unint64_t *)v118);
      while (__stxr(v119 + 1, (unint64_t *)v118));
    }
    *(_QWORD *)&v487[24] = v479;
    *(_QWORD *)&v487[32] = v480;
    if (v480)
    {
      v120 = &v480->__shared_owners_;
      do
        v121 = __ldxr((unint64_t *)v120);
      while (__stxr(v121 + 1, (unint64_t *)v120));
      *(_QWORD *)&v487[40] = v479;
      do
        v122 = __ldaxr((unint64_t *)v120);
      while (__stlxr(v122 - 1, (unint64_t *)v120));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
        std::__shared_weak_count::__release_weak(v480);
      }
    }
    else
    {
      *(_QWORD *)&v487[40] = v479;
    }
    if (v478)
    {
      v123 = (uint64_t *)&v478[1];
      do
        v124 = __ldaxr((unint64_t *)v123);
      while (__stlxr(v124 - 1, (unint64_t *)v123));
      if (!v124)
      {
        (*(void (**)(float32x2_t *))(*(_QWORD *)v478 + 16))(v478);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v478);
      }
    }
    v125 = *(_QWORD *)v487;
    if (*(char *)(*(_QWORD *)&v487[40] + 31) >= 0)
      v126 = *(_QWORD *)&v487[40] + 8;
    else
      v126 = *(_QWORD *)(*(_QWORD *)&v487[40] + 8);
    v127 = _os_log_pack_fill();
    *(_DWORD *)v127 = 68158466;
    *(_DWORD *)(v127 + 4) = 13;
    *(_WORD *)(v127 + 8) = 2080;
    *(_QWORD *)(v127 + 10) = v126;
    *(_WORD *)(v127 + 18) = 2048;
    *(_QWORD *)(v127 + 20) = v98;
    *(_WORD *)(v127 + 28) = 2048;
    *(_QWORD *)(v127 + 30) = v437 - v433;
    v128 = (char *)operator new();
    v129 = *(unsigned __int8 *)(v421 + 39);
    v130 = *(void ***)(v421 + 16);
    v131 = *(_QWORD *)(v421 + 24);
    v132 = *(_OWORD *)&v487[24];
    *(_OWORD *)(v128 + 8) = *(_OWORD *)&v487[8];
    if ((v129 & 0x80u) != 0)
      v129 = v131;
    else
      v130 = v425;
    *(_QWORD *)v128 = v125;
    *(_QWORD *)&v487[8] = 0;
    *(_QWORD *)&v487[16] = 0;
    *(_OWORD *)(v128 + 24) = v132;
    *(_QWORD *)&v487[24] = 0;
    *(_QWORD *)&v487[32] = 0;
    *((_QWORD *)v128 + 5) = v130;
    *((_QWORD *)v128 + 6) = v129;
    v128[56] = 1;
    __dst = 0;
    v477[0] = v128;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v84 + 24) + 40))(*(_QWORD *)(v84 + 24), v477);
    v106 = (unsigned __int8 *)v408;
    v133 = v477[0];
    v477[0] = 0;
    v107 = v441;
    if (v133)
    {
      v134 = (std::__shared_weak_count *)*((_QWORD *)v133 + 4);
      if (v134)
      {
        v135 = (unint64_t *)&v134->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      v137 = (std::__shared_weak_count *)*((_QWORD *)v133 + 2);
      if (v137)
      {
        v138 = (unint64_t *)&v137->__shared_owners_;
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      MEMORY[0x227684CE8](v133, 0x10F0C40B62ED6C6);
      v140 = __dst;
      __dst = 0;
      if (v140)
      {
        v141 = (std::__shared_weak_count *)v140[4];
        if (v141)
        {
          v142 = (unint64_t *)&v141->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        v144 = (std::__shared_weak_count *)v140[2];
        if (v144)
        {
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        MEMORY[0x227684CE8](v140, 0x10F0C40B62ED6C6);
      }
    }
    v147 = *(std::__shared_weak_count **)&v487[32];
    v108 = v429;
    if (*(_QWORD *)&v487[32])
    {
      v148 = (unint64_t *)(*(_QWORD *)&v487[32] + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v150 = *(std::__shared_weak_count **)&v487[16];
    if (*(_QWORD *)&v487[16])
    {
      v151 = (unint64_t *)(*(_QWORD *)&v487[16] + 8);
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
  }
  else
  {
    os_log_type_enabled(v97, OS_LOG_TYPE_INFO);
    *(_QWORD *)v487 = 0xD04100402;
    *(_WORD *)&v487[8] = 2080;
    *(_QWORD *)&v487[10] = __s;
    *(_WORD *)&v487[18] = 2048;
    *(_QWORD *)&v487[20] = v80 >> 3;
    *(_WORD *)&v487[28] = 2048;
    *(_QWORD *)&v487[30] = v437 - v433;
    v105 = (void *)_os_log_send_and_compose_impl();
    v106 = (unsigned __int8 *)v408;
    v107 = v441;
    v108 = v429;
    if (v105)
      free(v105);
  }
  if (v108)
  {
    sub_2245664AC(v106, v487);
    sub_22322C138((uint64_t)v464, "Global plane %.13s has filtered keyframe planes %lu / %lu", v487, (v472 - (_BYTE *)__p) >> 3, v107[1] - *v107);
    sub_223182C08((uint64_t)v464);
  }
  sub_223182C08((uint64_t)v464);
  v153 = v470;
  if (v470)
  {
    v154 = (unint64_t *)&v470->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v31 = (uint64_t *)__p;
  v34 = (uint64_t)v472;
  v80 = v472 - (_BYTE *)__p;
LABEL_190:
  sub_2236A576C(v80 >> 3, v31, (uint64_t)v487, v81);
  *v17 = *(float32x2_t *)v487;
  v156 = *(_DWORD *)&v487[20];
  v17[1].i32[0] = *(_DWORD *)&v487[8];
  *v27 = *(int32x2_t *)&v487[12];
  v27[1].i32[0] = v156;
  *(_BYTE *)(v408 + 48) = v487[24];
LABEL_191:
  v157 = (int8x16_t)v449;
  v158 = (float32x2_t)vextq_s8(v157, v157, 8uLL).u64[0];
  if (v449.f32[0] == 0.0)
  {
    v157 = (int8x16_t)v449;
    v157.i32[0] = v158.i32[0];
    *(int32x2_t *)v157.i8 = vceqz_f32(*(float32x2_t *)v157.i8);
    if ((v157.i8[4] & 1) != 0 && (v157.i8[0] & 1) != 0)
    {
      v159 = (float32x4_t **)v474;
      v406 = v31;
      if (v445)
        goto LABEL_195;
LABEL_205:
      if ((v411 & 1) == 0)
        goto LABEL_341;
LABEL_206:
      v184 = v34 - (_QWORD)v31;
      v185 = v184 >> 3;
      sub_2236A5B54(v487, v184 >> 3, v31, (v475 - (char *)v159) >> 3, v159, v459);
      v186 = v408;
      sub_2236ADA84((char **)(v408 + 88), (uint64_t)v487);
      if (v487[24])
      {
        v187 = *(_QWORD *)v487;
        if (*(_QWORD *)v487)
        {
          v188 = *(_QWORD *)&v487[8];
          v189 = *(void **)v487;
          if (*(_QWORD *)&v487[8] != *(_QWORD *)v487)
          {
            v190 = *(_QWORD *)&v487[8];
            do
            {
              v192 = *(void **)(v190 - 24);
              v190 -= 24;
              v191 = v192;
              if (v192)
              {
                *(_QWORD *)(v188 - 16) = v191;
                operator delete(v191);
              }
              v188 = v190;
            }
            while (v190 != v187);
            v189 = *(void **)v487;
            v31 = v406;
          }
          *(_QWORD *)&v487[8] = v187;
          operator delete(v189);
        }
      }
      v159 = (float32x4_t **)v474;
      if (!*(_BYTE *)(v408 + 80))
        goto LABEL_291;
LABEL_342:
      sub_22369E650(*(_QWORD *)(v186 + 64), *(float32x2_t **)(v186 + 56), 0, 0, v487);
      v345 = *(_OWORD *)&v487[16];
      *(_OWORD *)(v186 + 160) = *(_OWORD *)v487;
      *(_OWORD *)(v186 + 176) = v345;
      v346 = *(uint64_t **)(v186 + 56);
      v347 = *(uint64_t **)(v186 + 64);
      if (v346 == v347)
      {
        *(_OWORD *)(v186 + 144) = 0u;
      }
      else
      {
        v348.i64[0] = *v346;
        v348.i64[1] = *v346;
        do
        {
          v349 = *v346++;
          v350.i64[0] = v349;
          v336.i64[0] = v349;
          v336.i64[1] = v349;
          v351.i64[0] = v348.i64[0];
          v351.i64[1] = v349;
          v337 = (float32x4_t)vextq_s8(v348, v348, 8uLL);
          v350.i64[1] = v337.i64[0];
          v348 = vbslq_s8((int8x16_t)vcgtq_f32(v351, v350), v336, v348);
        }
        while (v346 != v347);
        *(int8x16_t *)(v186 + 144) = v348;
        if (*(float *)v348.i32 > 0.0)
          goto LABEL_351;
      }
      goto LABEL_348;
    }
  }
  v20.i32[0] = v27[1].i32[0];
  *(int32x2_t *)v157.i8 = *v27;
  v178 = (float32x2_t)vdup_lane_s32(*v27, 1);
  v157.i32[2] = v20.i32[0];
  v179 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v157.i8, *(float32x2_t *)v157.i8), v178, (float32x2_t)*v27, 1), *(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8).f32[0];
  v20 = v157;
  if (v179 != 1.0)
  {
    v180 = v179 + -1.0;
    if (v179 < 1.0)
      v180 = 1.0 - v179;
    v181 = v180 > 0.000001;
    v20 = v157;
    if (v181)
      v20 = (int8x16_t)vmulq_n_f32((float32x4_t)v157, 1.0 / sqrtf(v179));
  }
  v178.i32[0] = v17[1].i32[0];
  v182 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1);
  v183 = (float32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
  v22 = (int8x16_t)vmlsq_lane_f32(v449, (float32x4_t)v157, vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v449.f32, *(float32x2_t *)v20.i8), v182, *(float32x2_t *)v449.f32, 1), v183, v158), vmla_f32(vmla_lane_f32(vmul_f32(*v17, *(float32x2_t *)v20.i8), v182, *v17, 1), v183, v178)), 0);
  v17[1].i32[0] = v22.i32[2];
  *v17 = *(float32x2_t *)v22.i8;
  v159 = (float32x4_t **)v474;
  v406 = v31;
  if (!v445)
    goto LABEL_205;
LABEL_195:
  v20.i64[0] = *(_QWORD *)(v408 + 132);
  v20.i32[2] = *(_DWORD *)(v408 + 140);
  v160 = vcvt_hight_f64_f32((float32x4_t)v20);
  v161 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v20.i8);
  v162 = (float64x2_t)vextq_s8(v161, v161, 8uLL);
  if (fabsf(*(float *)&v20.i32[2]) >= 0.99863)
  {
    *(_QWORD *)&v193.f64[0] = v161.i64[0];
    v193.f64[1] = v162.f64[0];
    _Q6 = (int64x2_t)vmulq_f64(v193, (float64x2_t)0);
    v195.f64[0] = v160.f64[0];
    *(_QWORD *)&v195.f64[1] = _Q6.i64[0];
    v196 = (int8x16_t)vmulq_f64(v193, (float64x2_t)xmmword_2245F5CB0);
    v197 = (float64x2_t)vextq_s8(v196, (int8x16_t)vmulq_f64(v160, (float64x2_t)0), 8uLL);
    v198 = vsubq_f64((float64x2_t)vdupq_laneq_s64(_Q6, 1), (float64x2_t)v196);
    _Q1 = vsubq_f64(v195, v197);
    _Q2 = vmulq_f64(_Q1, _Q1);
    _Q6.i64[0] = *(_QWORD *)&_Q1.f64[1];
    __asm { FMLA            D2, D6, V1.D[1] }
    _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v198.f64[0], v198.f64[0]));
    v175 = (int8x16_t)vmulq_n_f64(_Q1, _Q2.f64[0]);
    _Q0 = (int8x16_t)vmulq_f64(v198, _Q2);
    _Q2.f64[0] = v162.f64[0];
    _Q2.f64[1] = v160.f64[0];
    *(_QWORD *)&v160.f64[1] = v161.i64[0];
    *(_QWORD *)&v201.f64[0] = _Q0.i64[0];
    *(_QWORD *)&v201.f64[1] = v175.i64[0];
    _Q2 = vmlsq_f64(vmulq_f64(_Q2, v201), v160, (float64x2_t)vextq_s8(v175, _Q0, 8uLL));
    v203 = vmlsq_f64(vmulq_laneq_f64((float64x2_t)v161, (float64x2_t)v175, 1), v162, (float64x2_t)v175);
    _Q3 = vmulq_f64(_Q2, _Q2);
    _D5 = _Q2.f64[1];
    __asm { FMLA            D3, D5, V2.D[1] }
    _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q3.f64[0], v203.f64[0], v203.f64[0]));
    v20 = (int8x16_t)vmulq_n_f64(_Q2, _Q3.f64[0]);
    v172 = vextq_s8(v20, (int8x16_t)vmulq_f64(v203, _Q3), 8uLL);
    *(_QWORD *)&_Q3.f64[0] = vextq_s8(v172, v172, 8uLL).u64[0];
    v22 = vextq_s8(v175, v175, 8uLL);
    if ((uint64_t *)v34 != v31)
      goto LABEL_214;
LABEL_261:
    LOBYTE(v477[0]) = 0;
    v262 = 1;
    v263 = v408 + 56;
    v264 = *(unsigned __int8 *)(v408 + 80);
    if (*(_BYTE *)(v408 + 80))
      goto LABEL_283;
LABEL_262:
    if (!v264)
      goto LABEL_340;
    v265 = *(void **)v263;
    if (*(_QWORD *)v263)
    {
      *(_QWORD *)(v408 + 64) = v265;
      operator delete(v265);
      *(_QWORD *)v263 = 0;
      *(_QWORD *)(v263 + 8) = 0;
      *(_QWORD *)(v263 + 16) = 0;
    }
    *(_OWORD *)(v408 + 56) = *(_OWORD *)v477;
    *(_QWORD *)(v408 + 72) = v478;
    v477[1] = 0;
    v478 = 0;
    v477[0] = 0;
    v31 = v406;
    if ((v262 & 1) != 0)
      goto LABEL_340;
    goto LABEL_338;
  }
  v163.f64[0] = v162.f64[0];
  v163.f64[1] = v160.f64[0];
  *(_QWORD *)&v160.f64[1] = v161.i64[0];
  v24.f64[0] = -0.0;
  _Q7 = vmlaq_f64(vmulq_f64(v160, (float64x2_t)xmmword_2245D2420), v163, (float64x2_t)xmmword_2245F5CB0);
  v165 = vmlaq_f64(vmulq_f64(v162, v24), (float64x2_t)v161, (float64x2_t)0);
  _Q1 = vmulq_f64(_Q7, _Q7);
  _D2 = _Q7.f64[1];
  __asm { FMLA            D1, D2, V7.D[1] }
  _Q1.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q1.f64[0], v165.f64[0], v165.f64[0]));
  v171 = (int8x16_t)vmulq_f64(v165, _Q1);
  v20 = (int8x16_t)vmulq_n_f64(_Q7, _Q1.f64[0]);
  v172 = vextq_s8(v20, v171, 8uLL);
  v171.i64[1] = v20.i64[0];
  _Q1 = vmlsq_f64(vmulq_f64(v160, (float64x2_t)v172), v163, (float64x2_t)v171);
  _Q3 = vmlsq_laneq_f64(vmulq_f64(v162, (float64x2_t)v20), (float64x2_t)v161, (float64x2_t)v20, 1);
  _Q0 = (int8x16_t)vmulq_f64(_Q1, _Q1);
  _D4 = _Q1.f64[1];
  __asm { FMLA            D0, D4, V1.D[1] }
  *(double *)_Q0.i64 = 1.0 / sqrt(vmlad_n_f64(*(double *)_Q0.i64, _Q3.f64[0], _Q3.f64[0]));
  v175 = (int8x16_t)vmulq_n_f64(_Q1, *(double *)_Q0.i64);
  _Q0.i64[0] = *(_OWORD *)&vmulq_f64(_Q3, (float64x2_t)_Q0);
  v22 = vextq_s8(v175, v175, 8uLL);
  *(_QWORD *)&_Q3.f64[0] = vextq_s8(v172, v172, 8uLL).u64[0];
  if ((uint64_t *)v34 == v31)
    goto LABEL_261;
LABEL_214:
  LODWORD(v205) = 0;
  v25.i64[0] = *(_QWORD *)(v408 + 120);
  v206 = (v34 - (uint64_t)v31) >> 3;
  v25.i32[2] = *(_DWORD *)(v408 + 128);
  v207.f64[1] = 1.0;
  v208 = (v475 - (char *)v159) >> 3;
  v20.i64[1] = v172.i64[0];
  v175.i64[1] = v22.i64[0];
  _Q0.i64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
  v22 = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL);
  *(_QWORD *)&_Q3.f64[1] = v22.i64[0];
  *(_QWORD *)&v207.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32(v25);
  v442 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v20), _Q3);
  v446 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v175), (float64x2_t)_Q0);
  v450 = (int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)v25.f32, v207);
  v209 = &v31[v206];
  v210 = 8 * v206;
  v211 = v31;
  do
  {
    while (1)
    {
      v212 = *v211;
      if (*(_BYTE *)(*v211 + 384))
      {
        v214 = *(_QWORD *)(v212 + 360);
        v213 = *(_QWORD *)(v212 + 368);
        if (v214 != v213)
          break;
      }
      v205 = v205;
      ++v211;
      v210 -= 8;
      if (!v210)
        goto LABEL_219;
    }
    v205 = v205 + ((v213 - v214) >> 2);
    ++v211;
    v210 -= 8;
  }
  while (v210);
LABEL_219:
  if (!(_DWORD)v205)
    goto LABEL_261;
  *(_QWORD *)__s = operator new(8 * v205);
  v485 = *(float32x2_t **)__s;
  v486 = *(_QWORD *)__s + 8 * v205;
  __dst = 0;
  v482 = 0uLL;
  if (v34 - (_QWORD)v31 < 0)
    sub_22367C394();
  v215 = (char **)operator new(v34 - (_QWORD)v31);
  __dst = v215;
  *(_QWORD *)&v482 = v215;
  v434 = (float32x4_t)vdupq_laneq_s32(v446, 2);
  v438 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v446.i8, 1);
  v426 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v442.i8, 1);
  v430 = (float32x4_t)vdupq_laneq_s32(v446, 3);
  v419 = (float32x4_t)vdupq_laneq_s32(v442, 3);
  v422 = (float32x4_t)vdupq_laneq_s32(v442, 2);
  v455 = &v159[v208];
  v415 = (float32x4_t)vdupq_laneq_s32(v450, 2);
  v417 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v450.i8, 1);
  *((_QWORD *)&v482 + 1) = &v215[(v34 - (uint64_t)v31) >> 3];
  v218 = v31;
  v413 = (float32x4_t)vdupq_laneq_s32(v450, 3);
  v409 = v34;
  while (2)
  {
    v219 = *v218;
    if (*(_BYTE *)(*v218 + 384))
    {
      v221 = *(_QWORD *)(v219 + 360);
      v220 = *(_QWORD *)(v219 + 368);
      if (v221 != v220)
      {
        v222 = (*v159)[9];
        v232.columns[1] = (simd_float3)(*v159)[10];
        v223 = (int8x16_t)(*v159)[11];
        v224 = (*v159)[12];
        v225 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v222, *(float *)v446.i32), v438, (float32x4_t)v232.columns[1]), v434, (float32x4_t)v223), v430, v224);
        v226 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v222, *(float *)v442.i32), v426, (float32x4_t)v232.columns[1]), v422, (float32x4_t)v223), v419, v224);
        v232.columns[2] = (simd_float3)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v222, *(float *)v450.i32), v417, (float32x4_t)v232.columns[1]), v415, (float32x4_t)v223), v413, v224);
        v227 = v220 - v221;
        v223.i64[0] = (*v159)[6].i64[0];
        v224.i32[0] = (*v159)[6].i32[2];
        v228 = *(float32x2_t *)((char *)&(*v159)[6].u64[1] + 4);
        v216.i32[0] = (*v159)[7].i32[1];
        v229 = *(float32x2_t *)&(*v159)[7].u32[2];
        v217.i32[0] = (*v159)[8].i32[0];
        v230 = (float32x2_t)vextq_s8(v225, v225, 8uLL).u64[0];
        *(float32x2_t *)v232.columns[0].f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v223.i8, *(float *)v225.i32), v228, *(float32x2_t *)v225.i8, 1), v229, (float32x4_t)v225, 2);
        *(float32x2_t *)v232.columns[1].f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v225.i8), v216, *(float32x2_t *)v225.i8, 1);
        *(float32x2_t *)v225.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v223.i8, *(float *)v226.i32), v228, *(float32x2_t *)v226.i8, 1), v229, (float32x4_t)v226, 2);
        v225.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v226.i8), v216, *(float32x2_t *)v226.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL), v217);
        *(float32x2_t *)v223.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v223.i8, v232.columns[2].f32[0]), v228, *(float32x2_t *)v232.columns[2].f32, 1), v229, (float32x4_t)v232.columns[2], 2);
        v223.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v232.columns[2].f32), v216, *(float32x2_t *)v232.columns[2].f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v232.columns[2], (int8x16_t)v232.columns[2], 8uLL), v217);
        *(float32x2_t *)v232.columns[1].f32 = vmla_f32(*(float32x2_t *)v232.columns[1].f32, v230, v217);
        *(_QWORD *)v487 = v232.columns[0].i64[0];
        *(_DWORD *)&v487[8] = v232.columns[1].i32[0];
        *(_DWORD *)&v487[20] = v225.i32[2];
        *(_QWORD *)&v487[12] = v225.i64[0];
        *(_DWORD *)&v487[32] = v223.i32[2];
        *(_QWORD *)&v487[24] = v223.i64[0];
        v232.columns[2] = (simd_float3)vextq_s8(vextq_s8(v225, v225, 0xCuLL), v225, 8uLL);
        v231 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)v232.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v223, (int32x4_t)v223), v223, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v225, (int32x4_t)v225), v225, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v223, v223, 0xCuLL), v223, 8uLL));
        *(float32x2_t *)v232.columns[2].f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v232.columns[0].f32, *(float32x2_t *)v231.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v231.i8, 1), *(float32x2_t *)v232.columns[0].f32, 1);
        v232.columns[0] = (simd_float3)vextq_s8(v231, v231, 8uLL);
        *(float32x2_t *)v232.columns[2].f32 = vmla_f32(*(float32x2_t *)v232.columns[2].f32, *(float32x2_t *)v232.columns[0].f32, *(float32x2_t *)v232.columns[1].f32);
        if (v232.columns[2].f32[0] != 0.0)
        {
          v232.columns[0].f32[0] = 0.0 - v232.columns[2].f32[0];
          if (v232.columns[2].f32[0] >= 0.0)
            v232.columns[0].f32[0] = v232.columns[2].f32[0];
          v232.columns[1].i32[0] = 897988541;
          if (v232.columns[0].f32[0] > 0.000001)
          {
            v233 = sub_22322BB84((uint64_t)v487, (uint64_t)v464, v232);
            v237 = 4 * (v227 >> 2);
            do
            {
              v233.n128_u16[0] = *(_WORD *)(v221 + v237 - 4);
              v238 = (float32x2_t)vmovl_s16((int16x4_t)v233.n128_u64[0]).u64[0];
              v238.f32[0] = (float)v238.i32[0];
              v234.i16[0] = *(_WORD *)(v221 + v237 - 2);
              v239 = (float32x2_t)vmovl_s16(v234).u64[0];
              v239.f32[0] = (float)v239.i32[0];
              v235.i32[0] = *(_DWORD *)&v464[20];
              v236.i32[0] = (int)v466;
              v490[0] = vdiv_f32(vadd_f32(v465, vmla_n_f32(vmul_n_f32(*(float32x2_t *)v464, v238.f32[0]), *(float32x2_t *)&v464[12], v239.f32[0])), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v236, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v464, *(int8x16_t *)v464, 8uLL), v238), v239, v235)), 0));
              v483 = (void **)__s;
              sub_2232EA538(&v483, v490);
              v237 -= 4;
            }
            while (v237);
            v215 = (char **)v482;
          }
        }
        v240 = ((uint64_t)v485 - *(_QWORD *)__s) >> 3;
        if ((unint64_t)v215 < *((_QWORD *)&v482 + 1))
        {
          *v215 = (char *)v240;
          v241 = (uint64_t)(v215 + 1);
          goto LABEL_247;
        }
        v242 = v209;
        v243 = __dst;
        v244 = (char *)v215 - (char *)__dst;
        v245 = v215 - __dst;
        v246 = v245 + 1;
        if ((unint64_t)(v245 + 1) >> 61)
          sub_22367C394();
        v247 = *((_QWORD *)&v482 + 1) - (_QWORD)__dst;
        if ((uint64_t)(*((_QWORD *)&v482 + 1) - (_QWORD)__dst) >> 2 > v246)
          v246 = v247 >> 2;
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8)
          v248 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v248 = v246;
        if (v248)
        {
          if (v248 >> 61)
            sub_223174E94();
          v249 = operator new(8 * v248);
          v250 = (char **)&v249[8 * v245];
          *v250 = (char *)v240;
          v241 = (uint64_t)(v250 + 1);
          v251 = (char *)v215 - (char *)v243;
          if (v215 != v243)
          {
LABEL_242:
            v252 = v251 - 8;
            if (v252 < 0x168
              || (v255 = ((char *)(v215 - 1) - (char *)v243) & 0xFFFFFFFFFFFFFFF8,
                  &v249[v244 - 8 - v255] > &v249[v244 - 8])
              || (char **)((char *)v215 - v255 - 8) > v215 - 1
              || (unint64_t)((char *)v215 - v249 - v244) < 0x20)
            {
              v253 = v215;
              v31 = v406;
              v209 = v242;
            }
            else
            {
              v256 = (v252 >> 3) + 1;
              v257 = 8 * (v256 & 0x3FFFFFFFFFFFFFFCLL);
              v253 = &v215[v257 / 0xFFFFFFFFFFFFFFF8];
              v250 = (char **)((char *)v250 - v257);
              v258 = &v249[8 * v245 - 16];
              v259 = v215 - 2;
              v260 = v256 & 0x3FFFFFFFFFFFFFFCLL;
              v31 = v406;
              do
              {
                v261 = *(_OWORD *)v259;
                *(v258 - 1) = *((_OWORD *)v259 - 1);
                *v258 = v261;
                v258 -= 2;
                v259 -= 4;
                v260 -= 4;
              }
              while (v260);
              v209 = v242;
              if (v256 == (v256 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_245:
                __dst = v250;
                *(_QWORD *)&v482 = v241;
                *((_QWORD *)&v482 + 1) = &v249[8 * v248];
                v34 = v409;
                if (v243)
                  goto LABEL_246;
                goto LABEL_247;
              }
            }
            do
            {
              v254 = *--v253;
              *--v250 = v254;
            }
            while (v253 != v243);
            goto LABEL_245;
          }
        }
        else
        {
          v249 = 0;
          v250 = (char **)(8 * v245);
          *(_QWORD *)(8 * v245) = v240;
          v241 = 8 * v245 + 8;
          v251 = (char *)v215 - (char *)v243;
          if (v215 != v243)
            goto LABEL_242;
        }
        v31 = v406;
        v209 = v242;
        __dst = v250;
        *(_QWORD *)&v482 = v241;
        *((_QWORD *)&v482 + 1) = &v249[8 * v248];
        v34 = v409;
        if (v243)
LABEL_246:
          operator delete(v243);
LABEL_247:
        *(_QWORD *)&v482 = v241;
        v215 = (char **)v241;
      }
    }
    ++v218;
    ++v159;
    if (v218 != v209 || v159 != v455)
      continue;
    break;
  }
  kdebug_trace();
  v267 = *(float32x2_t **)__s;
  v266 = v485;
  if (!*(_QWORD *)__s
    && v485
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v269 = (uint64_t *)__dst, v268 = v482, !__dst)&& (_QWORD)v482&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223FBF2F8(v266 - v267, v267, (v268 - (uint64_t)v269) >> 3, v269, (uint64_t)v487);
  v270 = *(_OWORD *)v487;
  v271 = *(_QWORD *)&v487[8] - *(_QWORD *)v487;
  v272 = (uint64_t)(*(_QWORD *)&v487[8] - *(_QWORD *)v487) >> 3;
  kdebug_trace();
  v477[0] = 0;
  v477[1] = 0;
  v478 = 0;
  if (*((_QWORD *)&v270 + 1) != (_QWORD)v270)
  {
    if (v271 < 0)
      sub_22316E078();
    v273 = (char *)operator new(*((_QWORD *)&v270 + 1) - v270);
    v477[0] = v273;
    v478 = (float32x2_t *)&v273[8 * v272];
    v274 = v271 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v273, (const void *)v270, v274);
    v477[1] = &v273[v274];
  }
  LOBYTE(v479) = 1;
  if ((_QWORD)v270)
    operator delete((void *)v270);
  if (__dst)
  {
    *(_QWORD *)&v482 = __dst;
    operator delete(__dst);
  }
  if (*(_QWORD *)__s)
  {
    v485 = *(float32x2_t **)__s;
    operator delete(*(void **)__s);
  }
  v262 = 0;
  v263 = v408 + 56;
  v264 = *(unsigned __int8 *)(v408 + 80);
  if (v264 == 1)
    goto LABEL_262;
LABEL_283:
  if (!v264)
  {
    *(_OWORD *)(v408 + 56) = *(_OWORD *)v477;
    *(_QWORD *)(v408 + 72) = v478;
    v477[1] = 0;
    v478 = 0;
    v477[0] = 0;
    *(_BYTE *)(v408 + 80) = 1;
    if ((v262 & 1) != 0)
      goto LABEL_340;
    goto LABEL_338;
  }
  v275 = *(void **)v263;
  if (*(_QWORD *)v263)
  {
    *(_QWORD *)(v408 + 64) = v275;
    operator delete(v275);
  }
  *(_BYTE *)(v408 + 80) = 0;
  if ((v262 & 1) == 0)
  {
LABEL_338:
    if (v477[0])
      operator delete(v477[0]);
  }
LABEL_340:
  v159 = (float32x4_t **)v474;
  if ((v411 & 1) != 0)
    goto LABEL_206;
LABEL_341:
  v184 = v34 - (_QWORD)v31;
  v185 = v184 >> 3;
  v186 = v408;
  if (*(_BYTE *)(v408 + 80))
    goto LABEL_342;
LABEL_291:
  v20.i64[0] = *(_QWORD *)(v186 + 120);
  v460 = v20;
  v20.i64[0] = *(_QWORD *)(v186 + 132);
  v20.i32[2] = *(_DWORD *)(v186 + 140);
  v276 = vcvt_hight_f64_f32((float32x4_t)v20);
  v277 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v20.i8);
  v278 = (float64x2_t)vextq_s8(v277, v277, 8uLL);
  if (fabsf(*(float *)&v20.i32[2]) >= 0.99863)
  {
    *(_QWORD *)&v294.f64[0] = v277.i64[0];
    v294.f64[1] = v278.f64[0];
    _Q3 = (int64x2_t)vmulq_f64(v294, (float64x2_t)0);
    v296.f64[0] = v276.f64[0];
    *(_QWORD *)&v296.f64[1] = _Q3.i64[0];
    v297 = (int8x16_t)vmulq_f64(v294, (float64x2_t)xmmword_2245F5CB0);
    v298 = (float64x2_t)vextq_s8(v297, (int8x16_t)vmulq_f64(v276, (float64x2_t)0), 8uLL);
    v299 = vsubq_f64((float64x2_t)vdupq_laneq_s64(_Q3, 1), (float64x2_t)v297);
    _Q1 = vsubq_f64(v296, v298);
    _Q2 = vmulq_f64(_Q1, _Q1);
    _Q3.i64[0] = *(_QWORD *)&_Q1.f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v299.f64[0], v299.f64[0]));
    v290 = (int8x16_t)vmulq_n_f64(_Q1, _Q2.f64[0]);
    _Q5 = (int8x16_t)vmulq_f64(v299, _Q2);
    v299.f64[0] = v278.f64[0];
    v299.f64[1] = v276.f64[0];
    _Q1.f64[0] = v276.f64[0];
    *(_QWORD *)&_Q1.f64[1] = v277.i64[0];
    *(_QWORD *)&v296.f64[0] = _Q5.i64[0];
    *(_QWORD *)&v296.f64[1] = v290.i64[0];
    _Q0 = vmlsq_f64(vmulq_f64(v299, v296), _Q1, (float64x2_t)vextq_s8(v290, _Q5, 8uLL));
    _Q4 = vmlsq_f64(vmulq_laneq_f64((float64x2_t)v277, (float64x2_t)v290, 1), v278, (float64x2_t)v290);
    _Q1 = vmulq_f64(_Q0, _Q0);
    _Q2.f64[0] = _Q0.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    _Q1.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q1.f64[0], _Q4.f64[0], _Q4.f64[0]));
    v285 = (int8x16_t)vmulq_n_f64(_Q0, _Q1.f64[0]);
    v286 = vextq_s8(v285, (int8x16_t)vmulq_f64(_Q4, _Q1), 8uLL);
    *(_QWORD *)&_Q4.f64[0] = vextq_s8(v286, v286, 8uLL).u64[0];
    v292 = vextq_s8(v290, v290, 8uLL).u64[0];
  }
  else
  {
    v279.f64[0] = v278.f64[0];
    v279.f64[1] = v276.f64[0];
    v280.f64[0] = v276.f64[0];
    *(_QWORD *)&v280.f64[1] = v277.i64[0];
    v22.i64[0] = 0x8000000000000000;
    _Q5 = (int8x16_t)vmlaq_f64(vmulq_f64(v280, (float64x2_t)xmmword_2245D2420), v279, (float64x2_t)xmmword_2245F5CB0);
    v281 = vmlaq_f64(vmulq_f64(v278, (float64x2_t)v22), (float64x2_t)v277, (float64x2_t)0);
    _Q2 = vmulq_f64((float64x2_t)_Q5, (float64x2_t)_Q5);
    _D3 = _Q5.i64[1];
    __asm { FMLA            D2, D3, V5.D[1] }
    _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v281.f64[0], v281.f64[0]));
    v284 = (int8x16_t)vmulq_f64(v281, _Q2);
    v285 = (int8x16_t)vmulq_n_f64((float64x2_t)_Q5, _Q2.f64[0]);
    v286 = vextq_s8(v285, v284, 8uLL);
    *(_QWORD *)&_Q4.f64[1] = v285.i64[0];
    _Q1 = vmlsq_f64(vmulq_f64(v280, (float64x2_t)v286), v279, _Q4);
    v288 = vmlsq_laneq_f64(vmulq_f64(v278, (float64x2_t)v285), (float64x2_t)v277, (float64x2_t)v285, 1);
    _Q0 = vmulq_f64(_Q1, _Q1);
    _Q4.f64[0] = _Q1.f64[1];
    __asm { FMLA            D0, D4, V1.D[1] }
    _Q0.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q0.f64[0], v288.f64[0], v288.f64[0]));
    v290 = (int8x16_t)vmulq_n_f64(_Q1, _Q0.f64[0]);
    _Q5.i64[0] = *(_OWORD *)&vmulq_f64(v288, _Q0);
    v292 = vextq_s8(v290, v290, 8uLL).u64[0];
    *(_QWORD *)&_Q4.f64[0] = vextq_s8(v286, v286, 8uLL).u64[0];
  }
  v304 = (float32x4_t **)v475;
  v305 = (float32x4_t)v460;
  v305.i32[2] = *(_DWORD *)(v186 + 128);
  v461 = v305;
  v477[0] = 0;
  v477[1] = 0;
  v478 = 0;
  v407 = v31;
  if (4 * v185)
  {
    v423 = v292;
    v427 = v286.i64[0];
    v431 = _Q4.f64[0];
    v435 = v285.i64[0];
    v439 = v290.i64[0];
    v443 = _Q5.i64[0];
    v447 = v278.f64[0];
    v451 = v277.i64[0];
    v456 = v276.f64[0];
    if ((unint64_t)(4 * v185) >> 61)
      sub_22316E078();
    v306 = (float32x2_t *)operator new(32 * v185);
    v477[0] = v306;
    v477[1] = v306;
    v478 = &v306[4 * v185];
    v277.i64[0] = v451;
    v276.f64[0] = v456;
    _Q5.i64[0] = v443;
    v278.f64[0] = v447;
    v285.i64[0] = v435;
    v290.i64[0] = v439;
    v286.i64[0] = v427;
    _Q4.f64[0] = v431;
    v292 = v423;
    if (v185)
    {
LABEL_300:
      v308.f64[1] = 1.0;
      v285.i64[1] = v286.i64[0];
      v277.i64[1] = *(_QWORD *)&v278.f64[0];
      v290.i64[1] = v292;
      _Q5.i64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
      *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL).u64[0];
      *(_QWORD *)&v276.f64[1] = vextq_s8((int8x16_t)xmmword_224690B50, (int8x16_t)xmmword_224690B50, 8uLL).u64[0];
      *(_QWORD *)&v308.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32(v461);
      v309 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v290), (float64x2_t)_Q5);
      v310 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v285), _Q4);
      v311 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v277), v276);
      v440 = (float32x4_t)vdupq_laneq_s32(v309, 2);
      v444 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v309.i8, 1);
      v452 = *(float *)v310.i32;
      v457 = *(float *)v309.i32;
      v432 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v310.i8, 1);
      v436 = (float32x4_t)vdupq_laneq_s32(v309, 3);
      v424 = (float32x4_t)vdupq_laneq_s32(v310, 3);
      v428 = (float32x4_t)vdupq_laneq_s32(v310, 2);
      v418 = (float32x4_t)vdupq_laneq_s32(v311, 2);
      v420 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v311.i8, 1);
      v448 = *(float *)v311.i32;
      v312 = (int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)v461.f32, v308);
      v414 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v312.i8, 1);
      v416 = (float32x4_t)vdupq_laneq_s32(v311, 3);
      v313 = 8 * (v304 - v159) - 8;
      v314 = 8 * v185 - 8;
      v462 = *(float *)v312.i32;
      v410 = (float32x4_t)vdupq_laneq_s32(v312, 3);
      v412 = (float32x4_t)vdupq_laneq_s32(v312, 2);
      v315 = (__int16 **)v407;
      do
      {
        v317 = *v315;
        if (*((_QWORD *)*v315 + 34) == *((_QWORD *)*v315 + 33))
        {
          v324 = 0;
          v325 = 0xFFFFFFFF00000000;
          v326 = 0xFFFFFFFFLL;
        }
        else
        {
          v318 = v317[164];
          if (v318 < 0 || (v319 = v317[165], v319 < 0))
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            LOWORD(v318) = v317[164];
            LOWORD(v319) = v317[165];
          }
          _ZF = v317[166] - (_WORD)v318 == 0xFFFF || (unsigned __int16)~(v317[167] - v319) == 0;
          v321 = (__int16)v318;
          v322 = (v321 + (__int16)(v317[166] - v318)) | ((unint64_t)((__int16)(v317[167] - v319) + (__int16)v319) << 32);
          v323 = (uint64_t)(__int16)v319 << 32;
          if (_ZF)
            v324 = 0;
          else
            v324 = (float32x2_t *)v322;
          if (_ZF)
            v325 = 0xFFFFFFFF00000000;
          else
            v325 = v323;
          if (_ZF)
            v326 = 0xFFFFFFFFLL;
          else
            v326 = v321;
        }
        *(_QWORD *)__s = v326 | v325;
        v485 = v324;
        v327 = *v159;
        v328 = (*v159)[9];
        v329 = (*v159)[10];
        v491.columns[2] = (simd_float3)(*v159)[11];
        v330 = (*v159)[12];
        v331 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v328, v457), v444, v329), v440, (float32x4_t)v491.columns[2]), v436, v330);
        v332 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v328, v452), v432, v329), v428, (float32x4_t)v491.columns[2]), v424, v330);
        v333 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v328, v448), v420, v329), v418, (float32x4_t)v491.columns[2]), v416, v330);
        v334 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v328, v462), v414, v329), v412, (float32x4_t)v491.columns[2]);
        *(float32x4_t *)v487 = v331;
        *(float32x4_t *)&v487[16] = v332;
        v491.columns[1] = (simd_float3)v410;
        v491.columns[0] = (simd_float3)vmlaq_f32(v334, v410, v330);
        *(float32x4_t *)&v487[32] = v333;
        v488 = v491.columns[0];
        sub_223764C58((uint64_t)&v327[6], (float32x2_t *)v487, (uint64_t)__s, (float32x4_t *)v464, v491, *(double *)v332.i64, *(double *)v414.i64);
        if ((_BYTE)v466)
        {
          __dst = (char **)v477;
          sub_2236AE1BC(&__dst, *(uint64_t *)v464);
          sub_2236AE1BC(&__dst, *(uint64_t *)&v464[8]);
          sub_2236AE1BC(&__dst, *(uint64_t *)&v464[16]);
          sub_2236AE1BC(&__dst, *(_QWORD *)&v465);
        }
        ++v315;
        ++v159;
        v316 = v314 | v313;
        v313 -= 8;
        v314 -= 8;
      }
      while (v316);
      v307 = (float32x2_t *)v477[0];
      v306 = (float32x2_t *)v477[1];
      v186 = v408;
      goto LABEL_323;
    }
  }
  else
  {
    v306 = 0;
    if (v185)
      goto LABEL_300;
  }
  v307 = v306;
  if (v304 != v159)
    goto LABEL_300;
LABEL_323:
  if (v306
    && !v307
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223FBEADC(v306 - v307, v307, (uint64_t)v487);
  v335 = *(_OWORD *)v487;
  sub_22369E650(*(unint64_t *)&v487[8], *(float32x2_t **)v487, 0, 0, v487);
  v339 = *(_OWORD *)&v487[16];
  *(_OWORD *)(v186 + 160) = *(_OWORD *)v487;
  *(_OWORD *)(v186 + 176) = v339;
  if ((_QWORD)v335 == *((_QWORD *)&v335 + 1))
  {
    *(_OWORD *)(v186 + 144) = 0u;
    if ((_QWORD)v335)
      goto LABEL_330;
  }
  else
  {
    v340.i64[0] = *(_QWORD *)v335;
    v340.i64[1] = *(_QWORD *)v335;
    v341 = (uint64_t *)v335;
    do
    {
      v342 = *v341++;
      v343.i64[0] = v342;
      v336.i64[0] = v342;
      v336.i64[1] = v342;
      v344.i64[0] = v340.i64[0];
      v344.i64[1] = v342;
      v337 = (float32x4_t)vextq_s8(v340, v340, 8uLL);
      v343.i64[1] = v337.i64[0];
      v340 = vbslq_s8((int8x16_t)vcgtq_f32(v344, v343), v336, v340);
    }
    while (v341 != *((uint64_t **)&v335 + 1));
    *(int8x16_t *)(v186 + 144) = v340;
    if ((_QWORD)v335)
LABEL_330:
      operator delete((void *)v335);
  }
  v31 = v407;
  if (v477[0])
  {
    v477[1] = v477[0];
    operator delete(v477[0]);
  }
  if (*(float *)(v186 + 144) > 0.0)
  {
LABEL_351:
    v353 = *(float32x2_t *)(v186 + 144);
    v352 = *(float32x2_t *)(v186 + 152);
    v354 = vmul_f32(vadd_f32(v353, v352), (float32x2_t)0x3F0000003F000000);
    v336.i64[0] = *(_QWORD *)(v186 + 120);
    v337.i64[0] = *(_QWORD *)(v186 + 132);
    v337.i32[2] = *(_DWORD *)(v186 + 140);
    v355 = vcvt_hight_f64_f32(v337);
    v356 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v337.f32);
    v357 = (float64x2_t)vextq_s8(v356, v356, 8uLL);
    v358.f64[1] = 1.0;
    if (fabsf(*(float *)(v186 + 140)) >= 0.99863)
    {
      *(_QWORD *)&v374.f64[0] = v356.i64[0];
      v374.f64[1] = v357.f64[0];
      v375 = (int64x2_t)vmulq_f64(v374, (float64x2_t)0);
      _Q22.f64[0] = v355.f64[0];
      *(_QWORD *)&_Q22.f64[1] = v375.i64[0];
      _Q21 = (float64x2_t)vdupq_laneq_s64(v375, 1);
      v377 = (int8x16_t)vmulq_f64(v374, (float64x2_t)xmmword_2245F5CB0);
      v378 = vsubq_f64(_Q21, (float64x2_t)v377);
      _Q18 = vsubq_f64(_Q22, (float64x2_t)vextq_s8(v377, (int8x16_t)vmulq_f64(v355, (float64x2_t)0), 8uLL));
      _Q19 = vmulq_f64(_Q18, _Q18);
      _Q21.f64[0] = _Q18.f64[1];
      __asm { FMLA            D19, D21, V18.D[1] }
      _Q19.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q19.f64[0], v378.f64[0], v378.f64[0]));
      v370 = (int8x16_t)vmulq_n_f64(_Q18, _Q19.f64[0]);
      _Q19 = (int8x16_t)vmulq_f64(v378, _Q19);
      v378.f64[0] = v357.f64[0];
      v378.f64[1] = v355.f64[0];
      _Q22.f64[0] = v355.f64[0];
      *(_QWORD *)&_Q22.f64[1] = v356.i64[0];
      *(_QWORD *)&v381.f64[0] = _Q19.i64[0];
      *(_QWORD *)&v381.f64[1] = v370.i64[0];
      _Q20 = vmlsq_f64(vmulq_f64(v378, v381), _Q22, (float64x2_t)vextq_s8(v370, _Q19, 8uLL));
      v383 = vmlsq_f64(vmulq_laneq_f64((float64x2_t)v356, (float64x2_t)v370, 1), v357, (float64x2_t)v370);
      _D23 = _Q20.f64[1];
      __asm { FMLA            D22, D23, V20.D[1] }
      _Q21.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q22.f64[0], v383.f64[0], v383.f64[0]));
      v366 = (int8x16_t)vmulq_n_f64(_Q20, _Q21.f64[0]);
      v367 = vextq_s8(v366, (int8x16_t)vmulq_f64(v383, _Q21), 8uLL);
      *(_QWORD *)&_Q21.f64[0] = vextq_s8(v367, v367, 8uLL).u64[0];
      v372 = vextq_s8(v370, v370, 8uLL).u64[0];
    }
    else
    {
      _Q18.f64[0] = v357.f64[0];
      _Q18.f64[1] = v355.f64[0];
      v360.f64[0] = v355.f64[0];
      *(_QWORD *)&v360.f64[1] = v356.i64[0];
      v338.f64[0] = -0.0;
      _Q23 = vmlaq_f64(vmulq_f64(v360, (float64x2_t)xmmword_2245D2420), _Q18, (float64x2_t)xmmword_2245F5CB0);
      v362 = vmlaq_f64(vmulq_f64(v357, v338), (float64x2_t)v356, (float64x2_t)0);
      _Q20 = vmulq_f64(_Q23, _Q23);
      _D21 = _Q23.f64[1];
      __asm { FMLA            D20, D21, V23.D[1] }
      _Q20.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q20.f64[0], v362.f64[0], v362.f64[0]));
      _Q24 = (int8x16_t)vmulq_f64(v362, _Q20);
      v366 = (int8x16_t)vmulq_n_f64(_Q23, _Q20.f64[0]);
      v367 = vextq_s8(v366, _Q24, 8uLL);
      _Q24.i64[1] = v366.i64[0];
      _Q19 = (int8x16_t)vmlsq_f64(vmulq_f64(v360, (float64x2_t)v367), _Q18, (float64x2_t)_Q24);
      v368 = vmlsq_laneq_f64(vmulq_f64(v357, (float64x2_t)v366), (float64x2_t)v356, (float64x2_t)v366, 1);
      _Q24.i64[0] = _Q19.i64[1];
      __asm { FMLA            D18, D24, V19.D[1] }
      v369 = 1.0 / sqrt(vmlad_n_f64(_Q18.f64[0], v368.f64[0], v368.f64[0]));
      v370 = (int8x16_t)vmulq_n_f64((float64x2_t)_Q19, v369);
      _Q19.i64[0] = *(_OWORD *)&vmulq_f64(v368, (float64x2_t)*(unint64_t *)&v369);
      v372 = vextq_s8(v370, v370, 8uLL).u64[0];
      *(_QWORD *)&_Q21.f64[0] = vextq_s8(v367, v367, 8uLL).u64[0];
    }
    v366.i64[1] = v367.i64[0];
    v336.i32[2] = *(_DWORD *)(v186 + 128);
    v356.i64[1] = *(_QWORD *)&v357.f64[0];
    v370.i64[1] = v372;
    _Q19.i64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
    *(_QWORD *)&_Q21.f64[1] = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL).u64[0];
    *(_QWORD *)&v355.f64[1] = vextq_s8((int8x16_t)xmmword_224690B50, (int8x16_t)xmmword_224690B50, 8uLL).u64[0];
    *(_QWORD *)&v358.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32((float32x4_t)v336);
    *(float32x2_t *)v385.f32 = vmla_f32(vmla_lane_f32(vmul_n_f32(vcvt_f32_f64((float64x2_t)v370), v354.f32[0]), vcvt_f32_f64((float64x2_t)v366), v354, 1), 0, vcvt_f32_f64((float64x2_t)v356));
    *(float32x2_t *)&v385.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(vcvt_f32_f64((float64x2_t)_Q19), v354), vcvt_f32_f64(_Q21), v354, 1), 0, vcvt_f32_f64(v355));
    v386 = vaddq_f32(v385, vcvt_hight_f32_f64(*(int32x2_t *)v336.i8, v358));
    *(_DWORD *)(v186 + 128) = v386.i32[2];
    *(_QWORD *)(v186 + 120) = v386.i64[0];
    *(float32x2_t *)(v186 + 144) = vsub_f32(v353, v354);
    *(float32x2_t *)(v186 + 152) = vsub_f32(v352, v354);
    v387 = vsub_f32(*(float32x2_t *)(v186 + 168), v354);
    *(float32x2_t *)(v186 + 160) = vsub_f32(*(float32x2_t *)(v186 + 160), v354);
    *(float32x2_t *)(v186 + 168) = v387;
    v388 = vsub_f32(*(float32x2_t *)(v186 + 184), v354);
    *(float32x2_t *)(v186 + 176) = vsub_f32(*(float32x2_t *)(v186 + 176), v354);
    *(float32x2_t *)(v186 + 184) = v388;
    if (*(_BYTE *)(v186 + 80))
    {
      v463 = v354;
      memset(&v487[20], 0, 28);
      *(_OWORD *)&v487[4] = 0u;
      *(_DWORD *)v487 = 1065353216;
      *(_DWORD *)&v487[20] = 1065353216;
      *(_DWORD *)&v487[40] = 1065353216;
      *(float32x2_t *)v488.f32 = vneg_f32(v354);
      v488.i64[1] = 0x3F80000000000000;
      sub_223FBB8C4((void ***)(v186 + 56), (float32x2_t *)v487, (uint64_t)v464);
      v389 = *(_OWORD *)v464;
      v390 = *(_QWORD *)&v464[16];
      v391 = *(void **)(v186 + 56);
      if (v391)
      {
        *(_QWORD *)(v186 + 64) = v391;
        v458 = v389;
        operator delete(v391);
        v389 = v458;
      }
      *(_OWORD *)(v186 + 56) = v389;
      *(_QWORD *)(v186 + 72) = v390;
      v354 = v463;
    }
    if (*(_BYTE *)(v186 + 112))
    {
      v392 = *(int64x2_t ***)(v186 + 88);
      v393 = *(int64x2_t ***)(v186 + 96);
      if (v392 != v393)
      {
        v394 = vcvtq_s64_f64(vcvtq_f64_f32(vmul_f32(v354, (float32x2_t)vdup_n_s32(0xC4800000))));
        v395 = vdupq_lane_s64(v394.i64[0], 0);
        v396 = vdupq_laneq_s64(v394, 1);
        do
        {
          v398 = *v392;
          v397 = v392[1];
          if (*v392 != v397)
          {
            v399 = (char *)v397 - (char *)v398 - 16;
            v400 = *v392;
            if (v399 < 0x30)
              goto LABEL_398;
            v401 = (v399 >> 4) + 1;
            v400 = &v398[v401 & 0x1FFFFFFFFFFFFFFCLL];
            i64 = (double *)v398[2].i64;
            v403 = v401 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v404 = i64 - 4;
              v492 = vld2q_f64(v404);
              v493 = vld2q_f64(i64);
              v494.val[0] = (float64x2_t)vaddq_s64((int64x2_t)v492.val[0], v395);
              v494.val[1] = (float64x2_t)vaddq_s64((int64x2_t)v492.val[1], v396);
              v492.val[0] = (float64x2_t)vaddq_s64((int64x2_t)v493.val[0], v395);
              v492.val[1] = (float64x2_t)vaddq_s64((int64x2_t)v493.val[1], v396);
              vst2q_f64(v404, v494);
              vst2q_f64(i64, v492);
              i64 += 8;
              v403 -= 4;
            }
            while (v403);
            if (v401 != (v401 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_398:
              do
              {
                *v400 = vaddq_s64(*v400, v394);
                ++v400;
              }
              while (v400 != v397);
            }
          }
          v392 += 3;
        }
        while (v392 != v393);
      }
    }
    goto LABEL_369;
  }
LABEL_348:
  if (*(float *)(v186 + 152) < 0.0 || *(float *)(v186 + 148) > 0.0 || *(float *)(v186 + 156) < 0.0)
    goto LABEL_351;
LABEL_369:
  if (v31)
  {
    v472 = (char *)v31;
    operator delete(v31);
  }
  v15 = (unint64_t)v184 >> 3;
  if (v474)
  {
    v475 = (char *)v474;
    operator delete(v474);
  }
  return v15;
}

void sub_2236A54FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  uint64_t v61;

  if (*(_BYTE *)(v61 - 184) && *(char *)(v61 - 185) < 0)
    operator delete(*(void **)(v61 - 208));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a47);
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  if (!a60)
    _Unwind_Resume(a1);
  a61 = (uint64_t)a60;
  operator delete(a60);
  _Unwind_Resume(a1);
}

void sub_2236A576C(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q1>)
{
  uint64_t v4;
  int8x16_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  unsigned int *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  int v50;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  _OWORD v59[10];
  uint64_t v60;

  v4 = a3;
  v60 = 0;
  v5 = 0uLL;
  memset(v59, 0, sizeof(v59));
  if (a1)
  {
    v6 = a2;
    v7 = 0;
    v8 = &a2[a1];
    v9 = a2;
    v10 = 0uLL;
    do
    {
      v53 = v10;
      v56 = v5;
      v12 = *v9;
      v13 = acosf(*(float *)(*v9 + 36));
      if (v13 <= 0.7854)
      {
        v26 = 0;
        v20 = 0;
        v27 = 168;
        v16 = v53;
        v17 = (float32x4_t)v56;
        do
        {
          v28 = *(unsigned int *)(v12 + 44 + 4 * v26);
          if (byte_224649850[v26])
            v29 = v26;
          else
            v29 = 0;
          *((_DWORD *)v59 + v29) += v28;
          v20 += v28;
          ++v26;
          v27 -= 4;
        }
        while (v27);
      }
      else
      {
        v16 = v53;
        v17 = (float32x4_t)v56;
        if (v13 <= 1.5708)
        {
          v30 = 0;
          v20 = 0;
          v31 = 168;
          do
          {
            v32 = *(unsigned int *)(v12 + 44 + 4 * v30);
            if (byte_22464987A[v30])
              v33 = v30;
            else
              v33 = 0;
            *((_DWORD *)v59 + v33) += v32;
            v20 += v32;
            ++v30;
            v31 -= 4;
          }
          while (v31);
        }
        else
        {
          v18 = v12 + 44;
          v19 = 0;
          v20 = 0;
          v21 = 168;
          if (v13 >= 2.3562)
          {
            do
            {
              v24 = *(unsigned int *)(v18 + 4 * v19);
              if (byte_2246498CE[v19])
                v25 = v19;
              else
                v25 = 0;
              *((_DWORD *)v59 + v25) += v24;
              v20 += v24;
              ++v19;
              v21 -= 4;
            }
            while (v21);
          }
          else
          {
            do
            {
              v22 = *(unsigned int *)(v18 + 4 * v19);
              if (byte_2246498A4[v19])
                v23 = v19;
              else
                v23 = 0;
              *((_DWORD *)v59 + v23) += v22;
              v20 += v22;
              ++v19;
              v21 -= 4;
            }
            while (v21);
          }
        }
      }
      v14.i64[0] = *(_QWORD *)(v12 + 28);
      v14.i32[2] = *(_DWORD *)(v12 + 36);
      a4 = vmulq_n_f32(v14, (float)v20);
      v15.i64[0] = *(_QWORD *)(v12 + 16);
      v15.i32[2] = *(_DWORD *)(v12 + 24);
      v5 = (int8x16_t)vaddq_f32(v17, a4);
      v11 = vmulq_n_f32(v15, (float)v20);
      v10 = vaddq_f32(v16, v11);
      v7 += v20;
      ++v9;
    }
    while (v9 != v8);
    v34 = 0;
    do
    {
      v35 = *(_DWORD *)((char *)v59 + v34);
      if (v35)
        break;
      v36 = v34 == 164;
      v34 += 4;
    }
    while (!v36);
    v4 = a3;
    if (v35)
    {
      v54 = v10;
      v57 = v5;
      v37 = sub_22372619C((unsigned int *)v59);
      v10 = v54;
      v5 = v57;
      v38 = (unint64_t)((char *)v37 - (char *)v59) >> 2;
      v39 = a1;
      if (v7)
        goto LABEL_48;
    }
    else
    {
      LOBYTE(v38) = 0;
      v39 = a1;
      if (v7)
        goto LABEL_48;
    }
    v43 = 8 * v39;
    do
    {
      v44 = *v6++;
      v11.i64[0] = *(_QWORD *)(v44 + 28);
      v11.i32[2] = *(_DWORD *)(v44 + 36);
      v5 = (int8x16_t)vaddq_f32((float32x4_t)v5, v11);
      v11.i64[0] = *(_QWORD *)(v44 + 16);
      v11.i32[2] = *(_DWORD *)(v44 + 24);
      v10 = vaddq_f32(v10, v11);
      v43 -= 8;
    }
    while (v43);
    v7 = v39;
  }
  else
  {
    v40 = 0;
    do
    {
      v41 = *(_DWORD *)((char *)v59 + v40);
      if (v41)
        break;
      v36 = v40 == 164;
      v40 += 4;
    }
    while (!v36);
    v5 = 0uLL;
    if (v41)
    {
      v42 = sub_22372619C((unsigned int *)v59);
      v5 = 0uLL;
      v7 = 0;
      v38 = (unint64_t)((char *)v42 - (char *)v59) >> 2;
    }
    else
    {
      LOBYTE(v38) = 0;
      v7 = 0;
    }
    v10 = 0uLL;
  }
LABEL_48:
  v45 = atomic_load((unsigned __int8 *)&qword_25578E170);
  if ((v45 & 1) == 0)
  {
    v55 = v10;
    v58 = v5;
    v50 = __cxa_guard_acquire(&qword_25578E170);
    v10 = v55;
    v5 = v58;
    if (v50)
    {
      qword_25578E158 = 0;
      *(_QWORD *)&dword_25578E160 = 0;
      *(uint64_t *)((char *)&qword_25578E164 + 4) = 0x3F80000000000000;
      __cxa_guard_release(&qword_25578E170);
      v10 = v55;
      v5 = v58;
    }
  }
  v46.i64[0] = qword_25578E164;
  v46.i32[2] = dword_25578E16C;
  if (v7)
  {
    a4.f32[0] = (float)v7;
    v47 = vdivq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0));
    v49 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1);
    v48 = (float32x2_t)vextq_s8(v5, v5, 8uLL).u64[0];
    v49.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), v49, *(float32x2_t *)v5.i8, 1), v48, v48).f32[0]);
    if (v49.f32[0] != 0.0)
      v46 = vdivq_f32((float32x4_t)v5, (float32x4_t)vdupq_lane_s32((int32x2_t)v49, 0));
  }
  else
  {
    v47.i64[0] = qword_25578E158;
    v47.i32[2] = dword_25578E160;
  }
  *(_DWORD *)(v4 + 8) = v47.i32[2];
  *(_QWORD *)v4 = v47.i64[0];
  *(_DWORD *)(v4 + 20) = v46.i32[2];
  *(_QWORD *)(v4 + 12) = v46.i64[0];
  *(_BYTE *)(v4 + 24) = v38;
}

void sub_2236A5B54(_BYTE *a1, unint64_t a2, uint64_t *a3, uint64_t a4, float32x4_t **a5, uint64_t a6)
{
  float32x4_t v10;
  int64x2_t v11;
  uint64_t *v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  float v17;
  float64x2_t v18;
  int8x16_t v19;
  float64x2_t v20;
  float64x2_t v22;
  float64x2_t v24;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  unint64_t v35;
  float64x2_t v37;
  int64x2_t v38;
  int8x16_t v40;
  float64x2_t v41;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  __int128 *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  char *v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v78;
  const char *v79;
  size_t v80;
  unsigned __int8 v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int32x4_t v85;
  const double *v86;
  int32x4_t v87;
  const double *v88;
  const double *v89;
  const double *v90;
  int64x2_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float32x4_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  float32x4_t *v104;
  float32x4_t *v105;
  float32x4_t *v106;
  uint64_t v107;
  float32x4_t *v108;
  float32x4_t *i;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  unsigned __int8 v115;
  const char *v116;
  size_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  NSObject *v122;
  uint64_t v123;
  uint64_t v124;
  size_t v125;
  void *v126;
  _QWORD *v127;
  size_t v128;
  void *v129;
  void *v130;
  void *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  _QWORD *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  char v149;
  _QWORD *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *p_shared_owners;
  unint64_t v154;
  char *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  __int128 v172;
  void *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  void *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  void *v206;
  void *v207;
  const void **v208;
  const void **v209;
  _BYTE *v210;
  _BYTE *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  size_t v215;
  char *v216;
  uint64_t v217;
  _BYTE *v218;
  const void **v219;
  void *v220;
  const void **v221;
  void *v222;
  void *v223;
  int v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  size_t v229;
  const char *v230;
  _QWORD *v231;
  _QWORD *v232;
  int v233;
  unint64_t v234;
  uint64_t v235;
  char *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  char *v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  char *v249;
  int v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  void *v255;
  uint64_t v256;
  unsigned __int8 v257;
  const char *v258;
  size_t v259;
  _BYTE *v260;
  uint64_t v261;
  uint64_t v262;
  _BYTE *v263;
  uint64_t v264;
  uint64_t v265;
  NSObject *v266;
  size_t v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  void *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  void *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  void *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  int v304;
  unint64_t v305;
  uint64_t v306;
  char *v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  char *v312;
  unsigned __int8 v313;
  unint64_t v314;
  __int128 *v315;
  NSObject *v316;
  unsigned __int8 v317;
  unint64_t v318;
  __int128 *v319;
  NSObject *v320;
  char *v321;
  unsigned __int8 v322;
  unint64_t v323;
  __int128 *v324;
  NSObject *v325;
  unsigned __int8 v326;
  unint64_t v327;
  __int128 *v328;
  NSObject *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  uint64_t v334;
  void *v335;
  void *v336;
  float32x4_t *v337;
  float32x4_t *v338;
  void *v339;
  float32x4_t *v340;
  void *v341;
  void *v342;
  uint64_t v344;
  const char *v345;
  int v346;
  uint64_t *v347;
  int v348;
  float32x4_t **v350;
  char *v351;
  void *v352[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v353;
  char *v354;
  const char *v355;
  int v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  unsigned __int8 v360;
  void *v361;
  const void **v362;
  void *v363;
  float32x4_t *v364;
  char *v365;
  void *v366;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v368;
  int v369;
  const char *v370;
  uint64_t v371;
  const char *v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  char *category;
  __int128 v376;
  void *v377[4];
  _BYTE object[48];
  float32x4_t v379;
  char v380;
  _OWORD v381[2];
  char __s[8];
  void *v383;
  uint64_t v384;
  uint64_t v385;
  float64x2x3_t v386;
  float64x2x3_t v387;
  float64x2x3_t v388;

  v385 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    *a1 = 0;
    a1[24] = 0;
    return;
  }
  v363 = 0;
  v364 = 0;
  v365 = 0;
  sub_2232EA6AC((uint64_t)&v363, a2);
  v348 = 0;
  v12 = &a3[a2];
  v350 = &a5[a4];
  v13.i32[3] = -1074790400;
  v347 = v12;
  do
  {
    v14 = *a3;
    if (!*(_BYTE *)(*a3 + 416))
      goto LABEL_209;
    v15 = *(uint64_t **)(v14 + 392);
    v16 = *(uint64_t **)(v14 + 400);
    if (v15 == v16)
      goto LABEL_209;
    v13.i64[0] = *(_QWORD *)a6;
    v10.i64[0] = *(_QWORD *)(a6 + 12);
    v10.i32[2] = *(_DWORD *)(a6 + 20);
    v17 = fabsf(v10.f32[2]);
    v18 = vcvt_hight_f64_f32(v10);
    v19 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v10.f32);
    v20 = (float64x2_t)vextq_s8(v19, v19, 8uLL);
    if (v17 >= 0.99863)
    {
      *(_QWORD *)&v37.f64[0] = v19.i64[0];
      v37.f64[1] = v20.f64[0];
      v38 = (int64x2_t)vmulq_f64(v37, (float64x2_t)0);
      _Q7.f64[0] = v18.f64[0];
      *(_QWORD *)&_Q7.f64[1] = v38.i64[0];
      v40 = (int8x16_t)vmulq_f64(v37, (float64x2_t)xmmword_2245F5CB0);
      v41 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v38, 1), (float64x2_t)v40);
      _Q4 = vsubq_f64(_Q7, (float64x2_t)vextq_s8(v40, (int8x16_t)vmulq_f64(v18, (float64x2_t)0), 8uLL));
      _Q6 = vmulq_f64(_Q4, _Q4);
      _Q7.f64[0] = _Q4.f64[1];
      __asm { FMLA            D6, D7, V4.D[1] }
      _Q6.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q6.f64[0], v41.f64[0], v41.f64[0]));
      v33 = (int8x16_t)vmulq_n_f64(_Q4, _Q6.f64[0]);
      _Q5 = (int8x16_t)vmulq_f64(v41, _Q6);
      _Q6.f64[0] = v20.f64[0];
      _Q6.f64[1] = v18.f64[0];
      _Q7.f64[0] = v18.f64[0];
      *(_QWORD *)&_Q7.f64[1] = v19.i64[0];
      *(_QWORD *)&v44.f64[0] = _Q5.i64[0];
      *(_QWORD *)&v44.f64[1] = v33.i64[0];
      _Q6 = vmlsq_f64(vmulq_f64(_Q6, v44), _Q7, (float64x2_t)vextq_s8(v33, _Q5, 8uLL));
      v46 = vmlsq_f64(vmulq_laneq_f64((float64x2_t)v19, (float64x2_t)v33, 1), v20, (float64x2_t)v33);
      _Q7 = vmulq_f64(_Q6, _Q6);
      _D16 = _Q6.f64[1];
      __asm { FMLA            D7, D16, V6.D[1] }
      _Q7.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q7.f64[0], v46.f64[0], v46.f64[0]));
      v31 = (int8x16_t)vmulq_n_f64(_Q6, _Q7.f64[0]);
      v32 = vextq_s8(v31, (int8x16_t)vmulq_f64(v46, _Q7), 8uLL);
      *(_QWORD *)&_Q7.f64[0] = vextq_s8(v32, v32, 8uLL).u64[0];
      v35 = vextq_s8(v33, v33, 8uLL).u64[0];
    }
    else
    {
      _Q4.f64[0] = v20.f64[0];
      _Q4.f64[1] = v18.f64[0];
      v22.f64[0] = v18.f64[0];
      *(_QWORD *)&v22.f64[1] = v19.i64[0];
      v11.i64[0] = 0x8000000000000000;
      _Q7 = vmlaq_f64(vmulq_f64(v22, (float64x2_t)xmmword_2245D2420), _Q4, (float64x2_t)xmmword_2245F5CB0);
      v24 = vmlaq_f64(vmulq_f64(v20, (float64x2_t)v11), (float64x2_t)v19, (float64x2_t)0);
      _Q16 = vmulq_f64(_Q7, _Q7);
      _D17 = _Q7.f64[1];
      __asm { FMLA            D16, D17, V7.D[1] }
      _Q16.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q16.f64[0], v24.f64[0], v24.f64[0]));
      _Q17 = (int8x16_t)vmulq_f64(v24, _Q16);
      v31 = (int8x16_t)vmulq_n_f64(_Q7, _Q16.f64[0]);
      v32 = vextq_s8(v31, _Q17, 8uLL);
      _Q17.i64[1] = v31.i64[0];
      _Q5 = (int8x16_t)vmlsq_f64(vmulq_f64(v22, (float64x2_t)v32), _Q4, (float64x2_t)_Q17);
      _Q7 = vmlsq_laneq_f64(vmulq_f64(v20, (float64x2_t)v31), (float64x2_t)v19, (float64x2_t)v31, 1);
      _Q17.i64[0] = _Q5.i64[1];
      __asm { FMLA            D4, D17, V5.D[1] }
      *(double *)_Q17.i64 = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], _Q7.f64[0], _Q7.f64[0]));
      v33 = (int8x16_t)vmulq_n_f64((float64x2_t)_Q5, *(double *)_Q17.i64);
      _Q5.i64[0] = *(_OWORD *)&vmulq_f64(_Q7, (float64x2_t)_Q17);
      v35 = vextq_s8(v33, v33, 8uLL).u64[0];
      *(_QWORD *)&_Q7.f64[0] = vextq_s8(v32, v32, 8uLL).u64[0];
    }
    v31.i64[1] = v32.i64[0];
    v19.i64[1] = *(_QWORD *)&v20.f64[0];
    v33.i64[1] = v35;
    _Q5.i64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
    *(_QWORD *)&_Q7.f64[1] = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL).u64[0];
    *(_QWORD *)&v18.f64[1] = vextq_s8((int8x16_t)xmmword_224690B50, (int8x16_t)xmmword_224690B50, 8uLL).u64[0];
    v48.f64[1] = 1.0;
    v13.i32[2] = *(_DWORD *)(a6 + 8);
    *(_QWORD *)&v48.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32(v13);
    v49 = vcvt_f32_f64(v18);
    v50 = vcvt_f32_f64((float64x2_t)v19);
    v51 = vcvt_f32_f64(_Q7);
    v52 = vcvt_f32_f64((float64x2_t)v31);
    v53 = vcvt_f32_f64((float64x2_t)_Q5);
    v54 = vcvt_f32_f64((float64x2_t)v33);
    *(float32x2_t *)&v48.f64[0] = vcvt_f32_f64(v48);
    v55 = (__int128 *)&(*a5)[6];
    v56 = (*a5)[9];
    v57 = (*a5)[10];
    v58 = (*a5)[11];
    v59 = (*a5)[12];
    *(float32x4_t *)object = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v54.f32[0]), v57, v54, 1), v58, v53.f32[0]), v59, v53, 1);
    *(float32x4_t *)&object[16] = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v52.f32[0]), v57, v52, 1), v58, v51.f32[0]), v59, v51, 1);
    *(float32x4_t *)&object[32] = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v50.f32[0]), v57, v50, 1), v58, v49.f32[0]), v59, v49, 1);
    v379 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v13.f32[0]), v57, *(float32x2_t *)v13.f32, 1), v58, *(float *)v48.f64), v59, *(float32x2_t *)&v48.f64[0], 1);
    sub_2237650E0(v55, (simd_float3 *)object, 0xAAAAAAAAAAAAAAABLL * (v16 - v15), v15, (uint64_t)&category, 1024.0);
    v60 = category;
    v61 = (char *)v376;
    if (category == (char *)v376)
      goto LABEL_31;
    v62 = category;
    while (*((_QWORD *)v62 + 1) - *(_QWORD *)v62 >= 0x30uLL)
    {
      v62 += 24;
      if (v62 == (char *)v376)
        goto LABEL_28;
    }
    if (v62 != (char *)v376)
    {
      v63 = v62 + 24;
      if (v62 + 24 != (char *)v376)
      {
        do
        {
          v64 = *(_QWORD *)v63;
          v65 = *((_QWORD *)v63 + 1);
          if ((unint64_t)(v65 - *(_QWORD *)v63) >= 0x30)
          {
            v66 = *(void **)v62;
            if (*(_QWORD *)v62)
            {
              *((_QWORD *)v62 + 1) = v66;
              operator delete(v66);
              *(_QWORD *)v62 = 0;
              *((_QWORD *)v62 + 1) = 0;
              *((_QWORD *)v62 + 2) = 0;
              v64 = *(_QWORD *)v63;
              v65 = *((_QWORD *)v63 + 1);
            }
            *(_QWORD *)v62 = v64;
            *((_QWORD *)v62 + 1) = v65;
            *((_QWORD *)v62 + 2) = *((_QWORD *)v63 + 2);
            *(_QWORD *)v63 = 0;
            *((_QWORD *)v63 + 1) = 0;
            *((_QWORD *)v63 + 2) = 0;
            v62 += 24;
          }
          v63 += 24;
        }
        while (v63 != v61);
        v60 = category;
        v61 = (char *)v376;
      }
    }
    if (v62 != v61)
    {
      v67 = v61;
      do
      {
        v69 = (void *)*((_QWORD *)v67 - 3);
        v67 -= 24;
        v68 = v69;
        if (v69)
        {
          *((_QWORD *)v61 - 2) = v68;
          operator delete(v68);
        }
        v61 = v67;
      }
      while (v67 != v62);
      *(_QWORD *)&v376 = v62;
      v60 = category;
      v61 = v62;
    }
LABEL_28:
    if (v60 == v61)
    {
LABEL_31:
      sub_2236A0EC4(&v361);
      if (**((int **)v361 + 7) > 3
        || ((v74 = *((unsigned __int8 *)v361 + 72),
             v75 = sub_22322F254((uint64_t)v361, "OSLogSurrogateAppender", 1, 0),
             v76 = v75,
             !v74)
          ? (_ZF = v75 == 0)
          : (_ZF = 0),
            _ZF))
      {
LABEL_200:
        v12 = v347;
        goto LABEL_201;
      }
      v366 = &v361;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v368 = std::chrono::system_clock::now().__d_.__rep_;
      v369 = 3;
      v370 = "unknown file";
      LODWORD(v371) = 315;
      v372 = "unknown function";
      v373 = 0;
      v374 = 0;
      sub_2245664AC((unsigned __int8 *)v14, __s);
      v78 = *(_QWORD *)v366;
      v79 = (const char *)(*(_QWORD *)v366 + 16);
      v344 = *(_QWORD *)v366;
      v345 = v79;
      if (*(char *)(*(_QWORD *)v366 + 39) < 0)
      {
        v79 = *(const char **)(v78 + 16);
        v80 = *(_QWORD *)(v78 + 24);
        v346 = v74;
        v115 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v115 & 1) != 0)
          goto LABEL_76;
      }
      else
      {
        v80 = *(unsigned __int8 *)(*(_QWORD *)v366 + 39);
        v346 = v74;
        v81 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v81 & 1) != 0)
          goto LABEL_76;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v352);
        sub_223199C58("com.apple.cv3d", (unint64_t)v352, &xmmword_255788F40);
        if ((_BYTE)v354 && SHIBYTE(v353) < 0)
          operator delete(v352[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_76:
      if (byte_255788F57 >= 0)
        v116 = (const char *)&xmmword_255788F40;
      else
        v116 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v117 = byte_255788F57;
      else
        v117 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v116, v79);
      if (v117 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v117 >= 0x17)
      {
        v119 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v117 | 7) != 0x17)
          v119 = v117 | 7;
        v120 = v119 + 1;
        v118 = operator new(v119 + 1);
        *(_QWORD *)&object[24] = v120 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v118;
        *(_QWORD *)&object[16] = v117;
      }
      else
      {
        object[31] = v117;
        v118 = &object[8];
        if (!v117)
        {
LABEL_90:
          v118[v117] = 0;
          object[32] = 1;
          if (v80 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v80 >= 0x17)
          {
            v123 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v80 | 7) != 0x17)
              v123 = v80 | 7;
            v124 = v123 + 1;
            v121 = operator new(v123 + 1);
            v379.i64[1] = v124 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v121;
            v379.i64[0] = v80;
          }
          else
          {
            v379.i8[15] = v80;
            v121 = &object[40];
            if (!v80)
            {
              object[40] = 0;
              v380 = 1;
              v122 = *(NSObject **)object;
              if ((v379.i8[15] & 0x80000000) == 0)
                goto LABEL_94;
              goto LABEL_100;
            }
          }
          memmove(v121, v79, v80);
          v121[v80] = 0;
          v380 = 1;
          v122 = *(NSObject **)object;
          if ((v379.i8[15] & 0x80000000) == 0)
          {
LABEL_94:
            if (!object[32])
              goto LABEL_103;
            goto LABEL_101;
          }
LABEL_100:
          operator delete(*(void **)&object[40]);
          if (!object[32])
            goto LABEL_103;
LABEL_101:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
LABEL_103:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (!v76 || !*(_QWORD *)(v76 + 24))
          {
            os_log_type_enabled(v122, OS_LOG_TYPE_INFO);
            *(_QWORD *)object = 0xD04100202;
            *(_WORD *)&object[8] = 2080;
            *(_QWORD *)&object[10] = __s;
            v131 = (void *)_os_log_send_and_compose_impl();
            if (v131)
            {
              free(v131);
              if (!v346)
                goto LABEL_195;
              goto LABEL_194;
            }
            goto LABEL_193;
          }
          v125 = _os_log_pack_size();
          v126 = operator new(v125, (std::align_val_t)8uLL);
          v127 = (_QWORD *)operator new();
          *v127 = &off_24EC1F7F0;
          v127[1] = 0;
          v127[2] = 0;
          v127[3] = v126;
          v352[0] = v126;
          v352[1] = v126;
          v353 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v127;
          v354 = 0;
          v355 = 0;
          v128 = strlen(__s);
          if (v128 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v129 = (void *)v128;
          if (v128 >= 0x17)
          {
            v146 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v128 | 7) != 0x17)
              v146 = v128 | 7;
            v147 = v146 + 1;
            v130 = operator new(v146 + 1);
            v377[1] = v129;
            v377[2] = (void *)(v147 | 0x8000000000000000);
            v377[0] = v130;
          }
          else
          {
            HIBYTE(v377[2]) = v128;
            v130 = v377;
            if (!v128)
              goto LABEL_135;
          }
          memcpy(v130, __s, (size_t)v129);
LABEL_135:
          *((_BYTE *)v129 + (_QWORD)v130) = 0;
          v148 = v377[0];
          *(void **)&v381[0] = v377[1];
          *(void **)((char *)v381 + 7) = *(void **)((char *)&v377[1] + 7);
          v149 = HIBYTE(v377[2]);
          v150 = operator new(0x38uLL);
          v150[1] = 0;
          v150[2] = 0;
          v150[3] = off_24EC1FA48;
          *v150 = &off_24EC1F9F8;
          v151 = *(_QWORD *)&v381[0];
          v150[4] = v148;
          v150[5] = v151;
          *(_QWORD *)((char *)v150 + 47) = *(_QWORD *)((char *)v381 + 7);
          *((_BYTE *)v150 + 55) = v149;
          *(_QWORD *)&v381[0] = 0;
          *(_QWORD *)((char *)v381 + 7) = 0;
          v152 = (std::__shared_weak_count *)v355;
          v354 = (char *)(v150 + 3);
          v355 = (const char *)v150;
          if (v152)
          {
            p_shared_owners = (unint64_t *)&v152->__shared_owners_;
            do
              v154 = __ldaxr(p_shared_owners);
            while (__stlxr(v154 - 1, p_shared_owners));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          *(_OWORD *)object = *(_OWORD *)v352;
          v155 = v354;
          *(_QWORD *)&object[16] = v353;
          if (v353)
          {
            v156 = (unint64_t *)(v353 + 8);
            do
              v157 = __ldxr(v156);
            while (__stxr(v157 + 1, v156));
          }
          v158 = (std::__shared_weak_count *)v355;
          *(_QWORD *)&object[24] = v155;
          *(_QWORD *)&object[32] = v355;
          if (v355)
          {
            v159 = (unint64_t *)(v355 + 8);
            do
              v160 = __ldxr(v159);
            while (__stxr(v160 + 1, v159));
            *(_QWORD *)&object[40] = v155;
            do
              v161 = __ldaxr(v159);
            while (__stlxr(v161 - 1, v159));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          else
          {
            *(_QWORD *)&object[40] = v155;
          }
          v162 = (std::__shared_weak_count *)v353;
          if (v353)
          {
            v163 = (unint64_t *)(v353 + 8);
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
          v165 = *(_QWORD *)object;
          if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
            v166 = *(_QWORD *)&object[40] + 8;
          else
            v166 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
          v167 = _os_log_pack_fill();
          *(_DWORD *)v167 = 68157954;
          *(_DWORD *)(v167 + 4) = 13;
          *(_WORD *)(v167 + 8) = 2080;
          *(_QWORD *)(v167 + 10) = v166;
          v168 = (char *)operator new();
          v169 = *(unsigned __int8 *)(v344 + 39);
          v170 = *(const char **)(v344 + 16);
          v171 = *(_QWORD *)(v344 + 24);
          v172 = *(_OWORD *)&object[24];
          *(_OWORD *)(v168 + 8) = *(_OWORD *)&object[8];
          if ((v169 & 0x80u) != 0)
            v169 = v171;
          else
            v170 = v345;
          *(_QWORD *)v168 = v165;
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v168 + 24) = v172;
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *((_QWORD *)v168 + 5) = v170;
          *((_QWORD *)v168 + 6) = v169;
          v168[56] = 1;
          v377[0] = 0;
          v352[0] = v168;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v76 + 24) + 40))(*(_QWORD *)(v76 + 24), v352);
          v173 = v352[0];
          v352[0] = 0;
          if (v173)
          {
            v174 = (std::__shared_weak_count *)*((_QWORD *)v173 + 4);
            if (v174)
            {
              v175 = (unint64_t *)&v174->__shared_owners_;
              do
                v176 = __ldaxr(v175);
              while (__stlxr(v176 - 1, v175));
              if (!v176)
              {
                ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                std::__shared_weak_count::__release_weak(v174);
              }
            }
            v177 = (std::__shared_weak_count *)*((_QWORD *)v173 + 2);
            if (v177)
            {
              v178 = (unint64_t *)&v177->__shared_owners_;
              do
                v179 = __ldaxr(v178);
              while (__stlxr(v179 - 1, v178));
              if (!v179)
              {
                ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                std::__shared_weak_count::__release_weak(v177);
              }
            }
            MEMORY[0x227684CE8](v173, 0x10F0C40B62ED6C6);
            v180 = v377[0];
            v377[0] = 0;
            if (v180)
            {
              v181 = (std::__shared_weak_count *)*((_QWORD *)v180 + 4);
              if (v181)
              {
                v182 = (unint64_t *)&v181->__shared_owners_;
                do
                  v183 = __ldaxr(v182);
                while (__stlxr(v183 - 1, v182));
                if (!v183)
                {
                  ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                  std::__shared_weak_count::__release_weak(v181);
                }
              }
              v184 = (std::__shared_weak_count *)*((_QWORD *)v180 + 2);
              if (v184)
              {
                v185 = (unint64_t *)&v184->__shared_owners_;
                do
                  v186 = __ldaxr(v185);
                while (__stlxr(v186 - 1, v185));
                if (!v186)
                {
                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                  std::__shared_weak_count::__release_weak(v184);
                }
              }
              MEMORY[0x227684CE8](v180, 0x10F0C40B62ED6C6);
            }
          }
          v187 = *(std::__shared_weak_count **)&object[32];
          if (!*(_QWORD *)&object[32])
            goto LABEL_189;
          v188 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
            std::__shared_weak_count::__release_weak(v187);
            v190 = *(std::__shared_weak_count **)&object[16];
            if (!*(_QWORD *)&object[16])
              goto LABEL_193;
          }
          else
          {
LABEL_189:
            v190 = *(std::__shared_weak_count **)&object[16];
            if (!*(_QWORD *)&object[16])
              goto LABEL_193;
          }
          v191 = (unint64_t *)&v190->__shared_owners_;
          do
            v192 = __ldaxr(v191);
          while (__stlxr(v192 - 1, v191));
          if (!v192)
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
            if (!v346)
              goto LABEL_195;
            goto LABEL_194;
          }
LABEL_193:
          if (!v346)
          {
LABEL_195:
            sub_223182C08((uint64_t)&v366);
            v193 = v374;
            if (v374)
            {
              v194 = (unint64_t *)&v374->__shared_owners_;
              do
                v195 = __ldaxr(v194);
              while (__stlxr(v195 - 1, v194));
              if (!v195)
              {
                ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                std::__shared_weak_count::__release_weak(v193);
              }
            }
            goto LABEL_200;
          }
LABEL_194:
          sub_2245664AC((unsigned __int8 *)v14, object);
          sub_22322C138((uint64_t)&v366, "Global keyframe polygon for plane %.13s is empty after filtering", object);
          sub_223182C08((uint64_t)&v366);
          goto LABEL_195;
        }
      }
      memmove(v118, v116, v117);
      goto LABEL_90;
    }
    v70 = v61 - v60;
    v71 = v61 - v60 - 24;
    if (v71 >= 0xC0)
    {
      v82 = v71 / 0x18 + 1;
      v83 = v82 & 7;
      if ((v82 & 7) == 0)
        v83 = 8;
      v84 = v82 - v83;
      v73 = &v60[24 * v84];
      v85 = 0uLL;
      v86 = (const double *)v60;
      v87 = 0uLL;
      do
      {
        v88 = v86 + 12;
        v89 = v86;
        v386 = vld3q_f64(v89);
        v89 += 6;
        *(float64x2x3_t *)(&v11 - 1) = vld3q_f64(v89);
        v387 = vld3q_f64(v88);
        v90 = v86 + 18;
        v388 = vld3q_f64(v90);
        v10 = (float32x4_t)vshrn_high_n_s64(vshrn_n_s64(vsubq_s64((int64x2_t)v386.val[1], (int64x2_t)v386.val[0]), 4uLL), vsubq_s64(v11, v91), 4uLL);
        v85 = vaddq_s32(v85, (int32x4_t)v10);
        v87 = vaddq_s32(v87, vshrn_high_n_s64(vshrn_n_s64(vsubq_s64((int64x2_t)v387.val[1], (int64x2_t)v387.val[0]), 4uLL), vsubq_s64((int64x2_t)v388.val[1], (int64x2_t)v388.val[0]), 4uLL));
        v86 += 24;
        v84 -= 8;
      }
      while (v84);
      v13 = (float32x4_t)vaddq_s32(v87, v85);
      v72 = vaddvq_s32((int32x4_t)v13);
    }
    else
    {
      v72 = 0;
      v73 = v60;
    }
    do
    {
      v92 = *(_QWORD *)v73;
      v93 = *((_QWORD *)v73 + 1);
      v73 += 24;
      v72 += (unint64_t)(v93 - v92) >> 4;
    }
    while (v73 != v61);
    v348 += v72;
    if (v70 < 1)
      goto LABEL_201;
    v94 = v70 / 24;
    v96 = (char *)v363;
    v95 = v364;
    v97 = ((char *)v364 - (_BYTE *)v363) / 24;
    v98 = (uint64_t *)((char *)v363 + 24 * v97);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v365 - (char *)v364) >> 3)) >= v94)
    {
      v102 = (char *)v364 - (char *)v98;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v364 - (char *)v98) >> 3)) >= v94)
      {
        v103 = &v60[24 * v94];
        v104 = v364;
      }
      else
      {
        v103 = &v60[8 * (((char *)v364 - (char *)v98) >> 3)];
        v104 = v364;
        if (v103 != v61)
        {
          v105 = (float32x4_t *)&v60[8 * (((char *)v364 - (char *)v98) >> 3)];
          v106 = v364;
          do
          {
            v106->i64[0] = 0;
            v106->i64[1] = 0;
            v106[1].i64[0] = 0;
            v13 = *v105;
            *v106 = *v105;
            v106[1].i64[0] = v105[1].i64[0];
            v105->i64[0] = 0;
            v105->i64[1] = 0;
            v105[1].i64[0] = 0;
            v104 = (float32x4_t *)((char *)v104 + 24);
            v105 = (float32x4_t *)((char *)v105 + 24);
            v106 = (float32x4_t *)((char *)v106 + 24);
          }
          while (v105 != (float32x4_t *)v61);
        }
        v364 = v104;
        if (v102 < 1)
          goto LABEL_201;
      }
      v107 = 3 * v94;
      v108 = (float32x4_t *)((char *)v104 - 24 * v94);
      for (i = v104; v108 < v95; v108 = (float32x4_t *)((char *)v108 + 24))
      {
        i->i64[0] = 0;
        i->i64[1] = 0;
        i[1].i64[0] = 0;
        v13 = *v108;
        *i = *v108;
        i[1].i64[0] = v108[1].i64[0];
        v108->i64[0] = 0;
        v108->i64[1] = 0;
        v108[1].i64[0] = 0;
        i = (float32x4_t *)((char *)i + 24);
      }
      v364 = i;
      if (v104 != (float32x4_t *)&v98[v107])
      {
        v110 = &v104[-2].i8[8];
        v111 = ((char *)v104 - (char *)&v98[v107]) >> 3;
        do
        {
          v113 = *(void **)v110;
          if (*(_QWORD *)v110)
          {
            *((_QWORD *)v110 + 1) = v113;
            operator delete(v113);
            *(_QWORD *)v110 = 0;
            *((_QWORD *)v110 + 1) = 0;
            *((_QWORD *)v110 + 2) = 0;
          }
          v112 = (uint64_t)&v98[v111 - 3];
          v13 = *(float32x4_t *)v112;
          *(_OWORD *)v110 = *(_OWORD *)v112;
          *((_QWORD *)v110 + 2) = v98[v111 - 1];
          *(_QWORD *)v112 = 0;
          *(_QWORD *)(v112 + 8) = 0;
          *(_QWORD *)(v112 + 16) = 0;
          v110 -= 24;
          v111 -= 3;
        }
        while (v111 * 8);
      }
      for (; v60 != v103; v60 += 24)
      {
        v114 = (void *)*v98;
        if (*v98)
        {
          v98[1] = (uint64_t)v114;
          operator delete(v114);
          *v98 = 0;
          v98[1] = 0;
          v98[2] = 0;
        }
        v13 = *(float32x4_t *)v60;
        *(_OWORD *)v98 = *(_OWORD *)v60;
        v98[2] = *((_QWORD *)v60 + 2);
        *(_QWORD *)v60 = 0;
        *((_QWORD *)v60 + 1) = 0;
        *((_QWORD *)v60 + 2) = 0;
        v98 += 3;
      }
    }
    else
    {
      v99 = v97 + v94;
      if ((unint64_t)(v97 + v94) > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      if (0x5555555555555556 * ((v365 - (_BYTE *)v363) >> 3) > v99)
        v99 = 0x5555555555555556 * ((v365 - (_BYTE *)v363) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v365 - (_BYTE *)v363) >> 3) >= 0x555555555555555)
        v100 = 0xAAAAAAAAAAAAAAALL;
      else
        v100 = v99;
      if (v100)
      {
        if (v100 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v101 = (char *)operator new(24 * v100);
      }
      else
      {
        v101 = 0;
      }
      v132 = 24 * v97;
      v133 = &v101[24 * v97];
      v134 = 24 * v94;
      v135 = &v133[24 * v94];
      v136 = v133 + 16;
      do
      {
        *v136 = 0;
        v13 = *(float32x4_t *)v60;
        *((_OWORD *)v136 - 1) = *(_OWORD *)v60;
        *v136 = *((_QWORD *)v60 + 2);
        v136 += 3;
        *(_QWORD *)v60 = 0;
        *((_QWORD *)v60 + 1) = 0;
        *((_QWORD *)v60 + 2) = 0;
        v60 += 24;
        v134 -= 24;
      }
      while (v134);
      v137 = (char *)v363;
      if (v363 != v98)
      {
        v138 = v101;
        do
        {
          v139 = &v138[v132];
          v140 = &v96[v132];
          v13 = *(float32x4_t *)&v96[v132 - 24];
          *(float32x4_t *)(v139 - 24) = v13;
          *((_QWORD *)v139 - 1) = *(_QWORD *)&v96[v132 - 8];
          *((_QWORD *)v140 - 3) = 0;
          *((_QWORD *)v140 - 2) = 0;
          *((_QWORD *)v140 - 1) = 0;
          v138 -= 24;
          v96 -= 24;
        }
        while (&v96[v132] != v137);
        v133 = &v138[v132];
      }
      v141 = (uint64_t *)v364;
      if (v364 != (float32x4_t *)v98)
      {
        do
        {
          v13 = *(float32x4_t *)v98;
          *(_OWORD *)v135 = *(_OWORD *)v98;
          *((_QWORD *)v135 + 2) = v98[2];
          *v98 = 0;
          v98[1] = 0;
          v98[2] = 0;
          v135 += 24;
          v98 += 3;
        }
        while (v98 != v141);
        v98 = (uint64_t *)v364;
      }
      v142 = (uint64_t *)v363;
      v363 = v133;
      v364 = (float32x4_t *)v135;
      v365 = &v101[24 * v100];
      if (v98 != v142)
      {
        v143 = v98;
        do
        {
          v145 = (void *)*(v143 - 3);
          v143 -= 3;
          v144 = v145;
          if (v145)
          {
            *(v98 - 2) = (uint64_t)v144;
            operator delete(v144);
          }
          v98 = v143;
        }
        while (v143 != v142);
      }
      if (v142)
        operator delete(v142);
    }
LABEL_201:
    v196 = category;
    if (category)
    {
      v197 = (char *)v376;
      v198 = category;
      if ((char *)v376 != category)
      {
        v199 = (char *)v376;
        do
        {
          v201 = (void *)*((_QWORD *)v199 - 3);
          v199 -= 24;
          v200 = v201;
          if (v201)
          {
            *((_QWORD *)v197 - 2) = v200;
            operator delete(v200);
          }
          v197 = v199;
        }
        while (v199 != v196);
        v198 = category;
      }
      *(_QWORD *)&v376 = v196;
      operator delete(v198);
    }
LABEL_209:
    ++a3;
    ++a5;
  }
  while (a3 != v12 || a5 != v350);
  kdebug_trace();
  memset(object, 0, 24);
  sub_223768028((uint64_t)&v363, (uint64_t)object, (uint64_t (**)())&v361);
  v202 = *(_QWORD *)object;
  if (*(_QWORD *)object)
  {
    v203 = *(_QWORD *)&object[8];
    v204 = *(void **)object;
    if (*(_QWORD *)&object[8] != *(_QWORD *)object)
    {
      v205 = *(_QWORD *)&object[8];
      do
      {
        v207 = *(void **)(v205 - 24);
        v205 -= 24;
        v206 = v207;
        if (v207)
        {
          *(_QWORD *)(v203 - 16) = v206;
          operator delete(v206);
        }
        v203 = v205;
      }
      while (v205 != v202);
      v204 = *(void **)object;
    }
    *(_QWORD *)&object[8] = v202;
    operator delete(v204);
  }
  v376 = 0uLL;
  category = 0;
  sub_2232EA6AC((uint64_t)&category, 0xAAAAAAAAAAAAAAABLL * (((char *)v362 - (_BYTE *)v361) >> 3));
  v208 = (const void **)v361;
  v209 = v362;
  if (v361 != v362)
  {
    do
    {
      v211 = *v208;
      v210 = v208[1];
      v352[1] = 0;
      v353 = 0;
      v352[0] = 0;
      v212 = v210 - v211;
      if (v210 == v211)
      {
        v214 = 0;
        v216 = 0;
        v213 = 0;
      }
      else
      {
        if (v212 < 0)
          sub_22316E078();
        v213 = (char *)operator new(v210 - v211);
        v214 = &v213[16 * (v212 >> 4)];
        v215 = v212 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v213, v211, v215);
        v216 = &v213[v215];
      }
      v366 = v213;
      rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v216;
      v368 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v214;
      *(_QWORD *)__s = 0;
      v383 = 0;
      v384 = 0;
      sub_223ED182C((char **)&v366, (unsigned int **)__s, (uint64_t)object, 10.0);
      *(_OWORD *)v377 = *(_OWORD *)object;
      v377[2] = *(void **)&object[16];
      memset(object, 0, 24);
      if (*(_QWORD *)__s)
      {
        v383 = *(void **)__s;
        operator delete(*(void **)__s);
      }
      if (v366)
      {
        rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v366;
        operator delete(v366);
      }
      v217 = v376;
      if ((unint64_t)v376 < *((_QWORD *)&v376 + 1))
      {
        *(_QWORD *)v376 = 0;
        *(_QWORD *)(v217 + 8) = 0;
        *(_QWORD *)(v217 + 16) = 0;
        *(_OWORD *)v217 = *(_OWORD *)v377;
        *(void **)(v217 + 16) = v377[2];
        *(_QWORD *)&v376 = v217 + 24;
      }
      else
      {
        *(_QWORD *)&v376 = sub_2232EA89C(&category, (uint64_t)v377);
        if (v377[0])
        {
          v377[1] = v377[0];
          operator delete(v377[0]);
        }
      }
      v208 += 3;
    }
    while (v208 != v209);
    v208 = (const void **)v361;
  }
  *(_QWORD *)&v381[0] = category;
  *(_OWORD *)((char *)v381 + 8) = v376;
  v218 = a1;
  if (v208)
  {
    v219 = v362;
    v220 = v208;
    if (v362 != v208)
    {
      v221 = v362;
      do
      {
        v223 = (void *)*(v221 - 3);
        v221 -= 3;
        v222 = v223;
        if (v223)
        {
          *(v219 - 2) = v222;
          operator delete(v222);
        }
        v219 = v221;
      }
      while (v221 != v208);
      v220 = v361;
    }
    v362 = v208;
    operator delete(v220);
  }
  kdebug_trace();
  if (*(_QWORD *)&v381[0] == *((_QWORD *)&v381[0] + 1))
  {
    sub_2236A0EC4(v377);
    if (**((int **)v377[0] + 7) > 3)
      goto LABEL_437;
    v224 = *((unsigned __int8 *)v377[0] + 72);
    v225 = sub_22322F254((uint64_t)v377[0], "OSLogSurrogateAppender", 1, 0);
    v226 = v225;
    if (!v224 && !v225)
      goto LABEL_437;
    v366 = v377;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v368 = std::chrono::system_clock::now().__d_.__rep_;
    v369 = 3;
    v370 = "unknown file";
    LODWORD(v371) = 349;
    v373 = 0;
    v374 = 0;
    v372 = "unknown function";
    v227 = *(_QWORD *)v366;
    v228 = *(_QWORD *)v366 + 16;
    if (*(char *)(*(_QWORD *)v366 + 39) < 0)
    {
      v230 = *(const char **)(v227 + 16);
      v229 = *(_QWORD *)(v227 + 24);
    }
    else
    {
      v229 = *(unsigned __int8 *)(*(_QWORD *)v366 + 39);
      v230 = (const char *)(*(_QWORD *)v366 + 16);
    }
    v257 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v257 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v258 = (const char *)&xmmword_255788F40;
    else
      v258 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v259 = byte_255788F57;
    else
      v259 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v258, v230);
    v260 = &object[8];
    if (v259 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v259 >= 0x17)
    {
      v261 = (v259 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v259 | 7) != 0x17)
        v261 = v259 | 7;
      v262 = v261 + 1;
      v260 = operator new(v261 + 1);
      *(_QWORD *)&object[24] = v262 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v260;
      *(_QWORD *)&object[16] = v259;
    }
    else
    {
      object[31] = v259;
      if (!v259)
      {
LABEL_315:
        v260[v259] = 0;
        object[32] = 1;
        v263 = &object[40];
        if (v229 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v229 >= 0x17)
        {
          v264 = (v229 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v229 | 7) != 0x17)
            v264 = v229 | 7;
          v265 = v264 + 1;
          v263 = operator new(v264 + 1);
          v379.i64[1] = v265 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v263;
          v379.i64[0] = v229;
        }
        else
        {
          v379.i8[15] = v229;
          if (!v229)
            goto LABEL_323;
        }
        memmove(v263, v230, v229);
LABEL_323:
        v263[v229] = 0;
        v380 = 1;
        v266 = *(NSObject **)object;
        if (v379.i8[15] < 0)
          operator delete(*(void **)&object[40]);
        v218 = a1;
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v226 && *(_QWORD *)(v226 + 24))
        {
          v267 = _os_log_pack_size();
          v268 = (std::__shared_weak_count_vtbl *)operator new(v267, (std::align_val_t)8uLL);
          v269 = (std::__shared_weak_count *)operator new();
          v270 = v269;
          v269->__shared_owners_ = 0;
          v271 = (unint64_t *)&v269->__shared_owners_;
          v269->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v269->__shared_weak_owners_ = 0;
          v269[1].__vftable = v268;
          *(_QWORD *)object = v268;
          *(_QWORD *)&object[8] = v268;
          *(_QWORD *)&object[16] = v269;
          do
            v272 = __ldxr(v271);
          while (__stxr(v272 + 1, v271));
          memset(&object[24], 0, 24);
          do
            v273 = __ldaxr(v271);
          while (__stlxr(v273 - 1, v271));
          if (!v273)
          {
            ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
            std::__shared_weak_count::__release_weak(v270);
          }
          v274 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v275 = (char *)operator new();
          v276 = *(unsigned __int8 *)(v227 + 39);
          v277 = *(_QWORD *)(v227 + 16);
          v278 = *(_QWORD *)(v227 + 24);
          v279 = *(_OWORD *)&object[24];
          *(_OWORD *)(v275 + 8) = *(_OWORD *)&object[8];
          if ((v276 & 0x80u) != 0)
            v276 = v278;
          else
            v277 = v228;
          *(_QWORD *)v275 = v274;
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v275 + 24) = v279;
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *((_QWORD *)v275 + 5) = v277;
          *((_QWORD *)v275 + 6) = v276;
          v275[56] = 1;
          *(_QWORD *)__s = 0;
          v352[0] = v275;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v226 + 24) + 40))(*(_QWORD *)(v226 + 24), v352);
          v280 = v352[0];
          v352[0] = 0;
          v218 = a1;
          if (v280)
          {
            v281 = (std::__shared_weak_count *)*((_QWORD *)v280 + 4);
            if (v281)
            {
              v282 = (unint64_t *)&v281->__shared_owners_;
              do
                v283 = __ldaxr(v282);
              while (__stlxr(v283 - 1, v282));
              if (!v283)
              {
                ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                std::__shared_weak_count::__release_weak(v281);
              }
            }
            v284 = (std::__shared_weak_count *)*((_QWORD *)v280 + 2);
            if (v284)
            {
              v285 = (unint64_t *)&v284->__shared_owners_;
              do
                v286 = __ldaxr(v285);
              while (__stlxr(v286 - 1, v285));
              if (!v286)
              {
                ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                std::__shared_weak_count::__release_weak(v284);
              }
            }
            MEMORY[0x227684CE8](v280, 0x10F0C40B62ED6C6);
            v287 = *(void **)__s;
            *(_QWORD *)__s = 0;
            if (v287)
            {
              v288 = (std::__shared_weak_count *)*((_QWORD *)v287 + 4);
              if (v288)
              {
                v289 = (unint64_t *)&v288->__shared_owners_;
                do
                  v290 = __ldaxr(v289);
                while (__stlxr(v290 - 1, v289));
                if (!v290)
                {
                  ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                  std::__shared_weak_count::__release_weak(v288);
                }
              }
              v291 = (std::__shared_weak_count *)*((_QWORD *)v287 + 2);
              if (v291)
              {
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldaxr(v292);
                while (__stlxr(v293 - 1, v292));
                if (!v293)
                {
                  ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                  std::__shared_weak_count::__release_weak(v291);
                }
              }
              MEMORY[0x227684CE8](v287, 0x10F0C40B62ED6C6);
            }
          }
          v294 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v295 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v296 = __ldaxr(v295);
            while (__stlxr(v296 - 1, v295));
            if (!v296)
            {
              ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
              std::__shared_weak_count::__release_weak(v294);
            }
          }
          v297 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v298 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v299 = __ldaxr(v298);
            while (__stlxr(v299 - 1, v298));
            if (!v299)
            {
              ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
              std::__shared_weak_count::__release_weak(v297);
            }
          }
        }
        else
        {
          os_log_type_enabled(v266, OS_LOG_TYPE_INFO);
          *(_WORD *)object = 0;
          v300 = (void *)_os_log_send_and_compose_impl();
          if (v300)
            free(v300);
        }
        if (v224)
        {
          sub_22322C138((uint64_t)&v366, "Unioned global polygon is empty");
          sub_223182C08((uint64_t)&v366);
        }
        sub_223182C08((uint64_t)&v366);
        v301 = v374;
        if (v374)
        {
          v302 = (unint64_t *)&v374->__shared_owners_;
          do
            v303 = __ldaxr(v302);
          while (__stlxr(v303 - 1, v302));
          if (!v303)
          {
            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
            std::__shared_weak_count::__release_weak(v301);
          }
        }
        goto LABEL_437;
      }
    }
    memmove(v260, v258, v259);
    goto LABEL_315;
  }
  v360 = 0;
  if ((sub_223766638((uint64_t *)v381, &v360, 1) & 1) != 0)
    goto LABEL_256;
  if (v360 == 40)
  {
    sub_2236A0EC4(&v361);
    if (**((int **)v361 + 7) <= 4)
    {
      v242 = *((unsigned __int8 *)v361 + 72);
      v243 = sub_22322F254((uint64_t)v361, "OSLogSurrogateAppender", 1, 0);
      v244 = v243 ? v243 + 16 : 0;
      if (v242 || v243)
      {
        sub_223195210((uint64_t)object);
        sub_2231813E8(&object[16], (uint64_t)"Unioned global polygon has sliver after Clipper2 union", 54);
        sub_2236AC340(object, __s);
        v352[0] = &v361;
        v352[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        v353 = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v354) = 4;
        v355 = "unknown file";
        v356 = 371;
        v358 = 0;
        v359 = 0;
        v357 = "unknown function";
        if (v384 >= 0)
          v245 = __s;
        else
          v245 = *(char **)__s;
        v351 = v245;
        v246 = *(_QWORD *)v352[0];
        v247 = (uint64_t *)(*(_QWORD *)v352[0] + 16);
        if (*(char *)(*(_QWORD *)v352[0] + 39) < 0)
        {
          v249 = *(char **)(v246 + 16);
          v248 = *(_QWORD *)(v246 + 24);
        }
        else
        {
          v248 = *(unsigned __int8 *)(*(_QWORD *)v352[0] + 39);
          v249 = (char *)(*(_QWORD *)v352[0] + 16);
        }
        category = v249;
        *(_QWORD *)&v376 = v248;
        v317 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v317 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&v366);
          sub_223199C58("com.apple.cv3d", (unint64_t)&v366, &xmmword_255788F40);
          if ((_BYTE)v369 && SHIBYTE(v368) < 0)
            operator delete(v366);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
          v218 = a1;
        }
        v318 = byte_255788F57;
        if (byte_255788F57 >= 0)
        {
          v319 = &xmmword_255788F40;
        }
        else
        {
          v318 = *((_QWORD *)&xmmword_255788F40 + 1);
          v319 = (__int128 *)xmmword_255788F40;
        }
        v377[0] = v319;
        v377[1] = (void *)v318;
        v366 = os_log_create((const char *)v319, category);
        sub_223199D38(&rep, (uint64_t)v377);
        sub_223199D38(&v371, (uint64_t)&category);
        v320 = v366;
        sub_223199BDC((uint64_t)&v366);
        sub_2236AD040(v244, v247, v320, OS_LOG_TYPE_ERROR, (const char **)&v351);
        if (!v242)
          goto LABEL_422;
        v321 = __s;
        if (v384 < 0)
          v321 = *(char **)__s;
        goto LABEL_421;
      }
    }
LABEL_256:
    *(_OWORD *)v218 = v381[0];
    *((_QWORD *)v218 + 2) = *(_QWORD *)&v381[1];
    memset(v381, 0, 24);
    v218[24] = 1;
    goto LABEL_445;
  }
  if (v360 != 21)
  {
    sub_2236A0EC4(v377);
    if (**((int **)v377[0] + 7) <= 5)
    {
      v250 = *((unsigned __int8 *)v377[0] + 72);
      v251 = sub_22322F254((uint64_t)v377[0], "OSLogSurrogateAppender", 1, 0);
      v252 = v251 ? v251 + 16 : 0;
      if (v250 || v251)
      {
        v366 = v377;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v368 = std::chrono::system_clock::now().__d_.__rep_;
        v369 = 5;
        v370 = "unknown file";
        LODWORD(v371) = 374;
        v373 = 0;
        v374 = 0;
        v372 = "unknown function";
        category = (char *)v360;
        v253 = *(_QWORD *)v366;
        v254 = (uint64_t *)(*(_QWORD *)v366 + 16);
        if (*(char *)(*(_QWORD *)v366 + 39) < 0)
        {
          v256 = *(_QWORD *)(v253 + 16);
          v255 = *(void **)(v253 + 24);
        }
        else
        {
          v255 = (void *)*(unsigned __int8 *)(*(_QWORD *)v366 + 39);
          v256 = *(_QWORD *)v366 + 16;
        }
        *(_QWORD *)__s = v256;
        v383 = v255;
        v313 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v313 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)object);
          sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
          v218 = a1;
        }
        v314 = byte_255788F57;
        if (byte_255788F57 >= 0)
        {
          v315 = &xmmword_255788F40;
        }
        else
        {
          v314 = *((_QWORD *)&xmmword_255788F40 + 1);
          v315 = (__int128 *)xmmword_255788F40;
        }
        v352[0] = v315;
        v352[1] = (void *)v314;
        *(_QWORD *)object = os_log_create((const char *)v315, *(const char **)__s);
        sub_223199D38(&object[8], (uint64_t)v352);
        sub_223199D38(&object[40], (uint64_t)__s);
        v316 = *(NSObject **)object;
        sub_223199BDC((uint64_t)object);
        sub_2236AD644(v252, v254, v316, OS_LOG_TYPE_ERROR, (uint64_t *)&category);
        if (v250)
        {
          sub_22322C138((uint64_t)&v366, "Unioned global polygon is invalid (failure %zu)", v360);
          sub_223182C08((uint64_t)&v366);
        }
        sub_223182DAC((uint64_t)&v366);
      }
    }
    goto LABEL_437;
  }
  v232 = (_QWORD *)*((_QWORD *)&v381[0] + 1);
  v231 = *(_QWORD **)&v381[0];
  if (*(_QWORD *)&v381[0] == *((_QWORD *)&v381[0] + 1))
  {
LABEL_267:
    sub_2236A0EC4(&v361);
    if (**((int **)v361 + 7) <= 3)
    {
      v233 = *((unsigned __int8 *)v361 + 72);
      v234 = sub_22322F254((uint64_t)v361, "OSLogSurrogateAppender", 1, 0);
      v235 = v234 ? v234 + 16 : 0;
      if (v233 || v234 != 0)
      {
        sub_223195210((uint64_t)object);
        sub_2231813E8(&object[16], (uint64_t)"Unioned global polygon has self-touching point", 46);
        sub_2236AC340(object, __s);
        v352[0] = &v361;
        v352[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        v353 = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v354) = 3;
        v355 = "unknown file";
        v356 = 363;
        v358 = 0;
        v359 = 0;
        v357 = "unknown function";
        if (v384 >= 0)
          v237 = __s;
        else
          v237 = *(char **)__s;
        v351 = v237;
        v238 = *(_QWORD *)v352[0];
        v239 = (uint64_t *)(*(_QWORD *)v352[0] + 16);
        if (*(char *)(*(_QWORD *)v352[0] + 39) < 0)
        {
          v241 = *(char **)(v238 + 16);
          v240 = *(_QWORD *)(v238 + 24);
        }
        else
        {
          v240 = *(unsigned __int8 *)(*(_QWORD *)v352[0] + 39);
          v241 = (char *)(*(_QWORD *)v352[0] + 16);
        }
        category = v241;
        *(_QWORD *)&v376 = v240;
        v322 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v322 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&v366);
          sub_223199C58("com.apple.cv3d", (unint64_t)&v366, &xmmword_255788F40);
          if ((_BYTE)v369 && SHIBYTE(v368) < 0)
            operator delete(v366);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
          v218 = a1;
        }
        v323 = byte_255788F57;
        if (byte_255788F57 >= 0)
        {
          v324 = &xmmword_255788F40;
        }
        else
        {
          v323 = *((_QWORD *)&xmmword_255788F40 + 1);
          v324 = (__int128 *)xmmword_255788F40;
        }
        v377[0] = v324;
        v377[1] = (void *)v323;
        v366 = os_log_create((const char *)v324, category);
        sub_223199D38(&rep, (uint64_t)v377);
        sub_223199D38(&v371, (uint64_t)&category);
        v325 = v366;
        sub_223199BDC((uint64_t)&v366);
        sub_2236ACA3C(v235, v239, v325, OS_LOG_TYPE_INFO, (const char **)&v351);
        if (!v233)
          goto LABEL_422;
        v321 = __s;
        if (v384 < 0)
          v321 = *(char **)__s;
LABEL_421:
        sub_22322C138((uint64_t)v352, "%s", v321);
        sub_223182C08((uint64_t)v352);
LABEL_422:
        sub_223182DAC((uint64_t)v352);
        if (SHIBYTE(v384) < 0)
          operator delete(*(void **)__s);
        sub_223195348((uint64_t)object);
        goto LABEL_256;
      }
    }
    goto LABEL_256;
  }
  while (!sub_223765D70(v231))
  {
    v231 += 3;
    if (v231 == v232)
      goto LABEL_267;
  }
  sub_2236A0EC4(&v361);
  if (**((int **)v361 + 7) <= 5)
  {
    v304 = *((unsigned __int8 *)v361 + 72);
    v305 = sub_22322F254((uint64_t)v361, "OSLogSurrogateAppender", 1, 0);
    v306 = v305 ? v305 + 16 : 0;
    if (v304 || v305 != 0)
    {
      sub_223195210((uint64_t)object);
      sub_2231813E8(&object[16], (uint64_t)"Unioned global polygon has self-intersection.", 45);
      sub_2236AC340(object, __s);
      v352[0] = &v361;
      v352[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
      v353 = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v354) = 5;
      v355 = "unknown file";
      v356 = 360;
      v358 = 0;
      v359 = 0;
      v357 = "unknown function";
      if (v384 >= 0)
        v308 = __s;
      else
        v308 = *(char **)__s;
      v351 = v308;
      v309 = *(_QWORD *)v352[0];
      v310 = (uint64_t *)(*(_QWORD *)v352[0] + 16);
      if (*(char *)(*(_QWORD *)v352[0] + 39) < 0)
      {
        v312 = *(char **)(v309 + 16);
        v311 = *(_QWORD *)(v309 + 24);
      }
      else
      {
        v311 = *(unsigned __int8 *)(*(_QWORD *)v352[0] + 39);
        v312 = (char *)(*(_QWORD *)v352[0] + 16);
      }
      category = v312;
      *(_QWORD *)&v376 = v311;
      v326 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v326 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v366);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v366, &xmmword_255788F40);
        if ((_BYTE)v369 && SHIBYTE(v368) < 0)
          operator delete(v366);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        v218 = a1;
      }
      v327 = byte_255788F57;
      if (byte_255788F57 >= 0)
      {
        v328 = &xmmword_255788F40;
      }
      else
      {
        v327 = *((_QWORD *)&xmmword_255788F40 + 1);
        v328 = (__int128 *)xmmword_255788F40;
      }
      v377[0] = v328;
      v377[1] = (void *)v327;
      v366 = os_log_create((const char *)v328, category);
      sub_223199D38(&rep, (uint64_t)v377);
      sub_223199D38(&v371, (uint64_t)&category);
      v329 = v366;
      sub_223199BDC((uint64_t)&v366);
      sub_2236AC438(v306, v310, v329, OS_LOG_TYPE_ERROR, (const char **)&v351);
      if (v304)
      {
        v330 = __s;
        if (v384 < 0)
          v330 = *(char **)__s;
        sub_22322C138((uint64_t)v352, "%s", v330);
        sub_223182C08((uint64_t)v352);
      }
      sub_223182DAC((uint64_t)v352);
      if (SHIBYTE(v384) < 0)
        operator delete(*(void **)__s);
      sub_223195348((uint64_t)object);
    }
  }
LABEL_437:
  *v218 = 0;
  v218[24] = 0;
  v331 = *(_QWORD *)&v381[0];
  if (*(_QWORD *)&v381[0])
  {
    v332 = *((_QWORD *)&v381[0] + 1);
    v333 = *(void **)&v381[0];
    if (*((_QWORD *)&v381[0] + 1) != *(_QWORD *)&v381[0])
    {
      v334 = *((_QWORD *)&v381[0] + 1);
      do
      {
        v336 = *(void **)(v334 - 24);
        v334 -= 24;
        v335 = v336;
        if (v336)
        {
          *(_QWORD *)(v332 - 16) = v335;
          operator delete(v335);
        }
        v332 = v334;
      }
      while (v334 != v331);
      v333 = *(void **)&v381[0];
    }
    *((_QWORD *)&v381[0] + 1) = v331;
    operator delete(v333);
  }
LABEL_445:
  v337 = (float32x4_t *)v363;
  if (v363)
  {
    v338 = v364;
    v339 = v363;
    if (v364 != v363)
    {
      v340 = v364;
      do
      {
        v342 = (void *)v340[-2].i64[1];
        v340 = (float32x4_t *)((char *)v340 - 24);
        v341 = v342;
        if (v342)
        {
          v338[-1].i64[0] = (uint64_t)v341;
          operator delete(v341);
        }
        v338 = v340;
      }
      while (v340 != v337);
      v339 = v363;
    }
    v364 = v337;
    operator delete(v339);
  }
}

void sub_2236A80DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p,void *a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  uint64_t v63;

  if (a63 && a62 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a41);
  if (*(char *)(v63 - 137) < 0)
    operator delete(*(void **)(v63 - 160));
  sub_223195348((uint64_t)&STACK[0x200]);
  sub_22317C838((void **)(v63 - 192));
  sub_22317C838(&a54);
  _Unwind_Resume(a1);
}

unint64_t sub_2236A857C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, char a6, float32x4_t a7, float32x4_t a8)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *i;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  unsigned __int8 v25;
  char *v26;
  size_t v27;
  unsigned __int8 v28;
  char *v29;
  size_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  unsigned __int8 v37;
  _BYTE *v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  char *v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __n128 *v51;
  float32x4_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  const char *v59;
  size_t v60;
  unsigned __int8 v61;
  _QWORD *v62;
  unint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unint64_t *v72;
  int64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  __n128 *v78;
  float32x4_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unsigned __int8 v83;
  const char *v84;
  size_t v85;
  __int128 *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  char *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unsigned __int8 v139;
  const char *v140;
  size_t v141;
  __int128 *v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  NSObject *v146;
  uint64_t v147;
  uint64_t v148;
  size_t v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *p_shared_owners;
  char *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count_vtbl *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  unint64_t *v192;
  unint64_t v193;
  const char *v199;
  const char *v200;
  unsigned __int8 *v201;
  _QWORD *v202;
  uint64_t v203;
  char *v204;
  uint64_t *v205;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v207;
  int v208;
  const char *v209;
  int v210;
  const char *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  uint64_t v214;
  void *v215;
  char *v216;
  char *v217;
  void *__p;
  char *v219;
  char *v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count_vtbl *v222;
  std::__shared_weak_count *v223;
  char *v224;
  char *v225;
  char v226[37];
  char __s[37];
  uint64_t v228;
  __int128 v229;
  _BYTE v230[24];
  size_t v231;
  unint64_t v232;
  char v233;
  std::__shared_weak_count_vtbl *v234;
  __int128 v235;
  __int128 v236;
  char *v237;
  uint64_t v238;

  v8 = (unsigned __int8 *)a1;
  v238 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 240);
  v9 = *(_QWORD *)(a1 + 248);
  v219 = 0;
  v220 = 0;
  __p = 0;
  v203 = v9;
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_22316E078();
    v13 = (unint64_t)v11 >> 1;
    v14 = (char *)operator new((unint64_t)v11 >> 1);
    v15 = v11 >> 4;
    __p = v14;
    v219 = v14;
    v220 = &v14[8 * v15];
    v215 = operator new(v13);
    v216 = (char *)v215;
    v217 = (char *)v215 + 8 * v15;
    v202 = (_QWORD *)(a3 + 80);
    v201 = v8;
    for (i = sub_223340F28((_QWORD *)(a3 + 80), v10); ; i = sub_223340F28(v202, v10))
    {
      if (i)
      {
        v18 = i[5];
        v20 = *(_QWORD *)(v18 + 208);
        v19 = *(_QWORD **)(v18 + 216);
        if ((_QWORD *)v20 != v19)
        {
          while (*(_QWORD *)v20 != *(_QWORD *)v10 || *(_QWORD *)(v20 + 8) != *(_QWORD *)(v10 + 8))
          {
            v20 += 424;
            if ((_QWORD *)v20 == v19)
              goto LABEL_25;
          }
        }
        if ((_QWORD *)v20 == v19)
          v22 = 0;
        else
          v22 = v20;
        if ((_QWORD *)v20 != v19)
        {
          v23 = v219;
          if (v219 < v220)
          {
            *(_QWORD *)v219 = v18;
            v24 = v23 + 8;
            goto LABEL_62;
          }
          v38 = __p;
          v39 = v219 - (_BYTE *)__p;
          v40 = (v219 - (_BYTE *)__p) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            sub_22316E078();
          v42 = v220 - (_BYTE *)__p;
          if ((v220 - (_BYTE *)__p) >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 >> 61)
              sub_223174E94();
            v44 = operator new(8 * v43);
            v45 = &v44[8 * v40];
            *(_QWORD *)v45 = v18;
            v24 = v45 + 8;
            v46 = v23 - v38;
            if (v23 != v38)
            {
LABEL_44:
              v47 = v46 - 8;
              if (v47 < 0x58)
                goto LABEL_305;
              if ((unint64_t)(v23 - v44 - v39) < 0x20)
                goto LABEL_305;
              v48 = (v47 >> 3) + 1;
              v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
              v50 = &v23[-v49];
              v45 -= v49;
              v51 = (__n128 *)&v44[v39 - 16];
              v52 = (float32x4_t *)(v23 - 16);
              v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                a8 = v52[-1];
                a7 = *v52;
                v51[-1] = (__n128)a8;
                *v51 = (__n128)a7;
                v51 -= 2;
                v52 -= 2;
                v53 -= 4;
              }
              while (v53);
              v23 = v50;
              if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_305:
                do
                {
                  v54 = *((_QWORD *)v23 - 1);
                  v23 -= 8;
                  *((_QWORD *)v45 - 1) = v54;
                  v45 -= 8;
                }
                while (v23 != v38);
              }
              v23 = __p;
              __p = v45;
              v219 = v24;
              v220 = &v44[8 * v43];
              if (!v23)
              {
LABEL_62:
                v63 = v22 | v20 & 0xFFFFFFFFFFFFFF00;
                v219 = v24;
                v64 = v216;
                if (v216 < v217)
                {
                  *(_QWORD *)v216 = v63;
                  v17 = v64 + 8;
                  goto LABEL_5;
                }
                v65 = v215;
                v66 = v216 - (_BYTE *)v215;
                v67 = (v216 - (_BYTE *)v215) >> 3;
                v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 61)
                  sub_22316E078();
                v69 = v217 - (_BYTE *)v215;
                if ((v217 - (_BYTE *)v215) >> 2 > v68)
                  v68 = v69 >> 2;
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
                  v70 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v70 = v68;
                if (v70)
                {
                  if (v70 >> 61)
                    sub_223174E94();
                  v71 = operator new(8 * v70);
                  v72 = (unint64_t *)&v71[8 * v67];
                  *v72 = v63;
                  v17 = (char *)(v72 + 1);
                  v73 = v64 - v65;
                  if (v64 != v65)
                  {
LABEL_72:
                    v74 = v73 - 8;
                    if (v74 < 0x58)
                      goto LABEL_306;
                    if ((unint64_t)(v64 - &v71[v66]) < 0x20)
                      goto LABEL_306;
                    v75 = (v74 >> 3) + 1;
                    v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
                    v77 = &v64[-v76];
                    v72 = (unint64_t *)((char *)v72 - v76);
                    v78 = (__n128 *)&v71[v66 - 16];
                    v79 = (float32x4_t *)(v64 - 16);
                    v80 = v75 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      a8 = v79[-1];
                      a7 = *v79;
                      v78[-1] = (__n128)a8;
                      *v78 = (__n128)a7;
                      v78 -= 2;
                      v79 -= 2;
                      v80 -= 4;
                    }
                    while (v80);
                    v64 = v77;
                    if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_306:
                      do
                      {
                        v81 = *((_QWORD *)v64 - 1);
                        v64 -= 8;
                        *--v72 = v81;
                      }
                      while (v64 != v65);
                    }
                    v64 = v215;
                    v215 = v72;
                    v217 = &v71[8 * v70];
                    if (!v64)
                      goto LABEL_5;
LABEL_82:
                    operator delete(v64);
LABEL_5:
                    v216 = v17;
                    goto LABEL_6;
                  }
                }
                else
                {
                  v71 = 0;
                  v72 = (unint64_t *)(8 * v67);
                  v82 = (unint64_t *)(8 * v67);
                  *v82 = v63;
                  v17 = (char *)(v82 + 1);
                  v73 = v64 - v65;
                  if (v64 != v65)
                    goto LABEL_72;
                }
                v215 = v72;
                v217 = &v71[8 * v70];
                if (v64)
                  goto LABEL_82;
                goto LABEL_5;
              }
LABEL_61:
              operator delete(v23);
              goto LABEL_62;
            }
          }
          else
          {
            v44 = 0;
            v45 = (char *)(8 * v40);
            v62 = (_QWORD *)(8 * v40);
            *v62 = v18;
            v24 = (char *)(v62 + 1);
            v46 = v23 - v38;
            if (v23 != v38)
              goto LABEL_44;
          }
          __p = v45;
          v219 = v24;
          v220 = &v44[8 * v43];
          if (!v23)
            goto LABEL_62;
          goto LABEL_61;
        }
LABEL_25:
        v28 = atomic_load((unsigned __int8 *)&qword_2557892F0);
        if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
        {
          __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
          __cxa_guard_release(&qword_2557892F0);
        }
        sub_2236A0EC4(&v228);
        if (*(char *)(v228 + 39) < 0)
        {
          v29 = *(char **)(v228 + 16);
          v30 = *(_QWORD *)(v228 + 24);
        }
        else
        {
          v29 = (char *)(v228 + 16);
          v30 = *(unsigned __int8 *)(v228 + 39);
        }
        sub_223195728((uint64_t)&stru_255789280, v29, v30, "Updating GP %.13s with KP %.13s that does not exist", 0x33uLL);
        sub_2236A0FB8(&v214);
        if (**(int **)(v214 + 56) > 5)
          goto LABEL_6;
        v55 = *(unsigned __int8 *)(v214 + 72);
        v56 = sub_22322F254(v214, "OSLogSurrogateAppender", 1, 0);
        v57 = v56;
        if (!v55 && !v56)
          goto LABEL_6;
        v205 = &v214;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v207 = std::chrono::system_clock::now().__d_.__rep_;
        v208 = 5;
        v209 = "unknown file";
        v210 = 573;
        v211 = "unknown function";
        v212 = 0;
        v213 = 0;
        sub_2245664AC(v8, __s);
        sub_2245664AC((unsigned __int8 *)v10, v226);
        v204 = v226;
        v58 = *v205;
        v59 = (const char *)(*v205 + 16);
        v200 = v59;
        if (*(char *)(*v205 + 39) < 0)
        {
          v59 = *(const char **)(v58 + 16);
          v60 = *(_QWORD *)(v58 + 24);
          v139 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v139 & 1) == 0)
          {
LABEL_283:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v234);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v234, &xmmword_255788F40);
              if ((_BYTE)v236 && SHIBYTE(v235) < 0)
                operator delete(v234);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v60 = *(unsigned __int8 *)(*v205 + 39);
          v61 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v61 & 1) == 0)
            goto LABEL_283;
        }
        if (byte_255788F57 >= 0)
          v140 = (const char *)&xmmword_255788F40;
        else
          v140 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v141 = byte_255788F57;
        else
          v141 = *((_QWORD *)&xmmword_255788F40 + 1);
        v228 = (uint64_t)os_log_create(v140, v59);
        if (v141 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v141 >= 0x17)
        {
          v143 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v141 | 7) != 0x17)
            v143 = v141 | 7;
          v144 = v143 + 1;
          v142 = (__int128 *)operator new(v143 + 1);
          *((_QWORD *)&v229 + 1) = v141;
          *(_QWORD *)v230 = v144 | 0x8000000000000000;
          *(_QWORD *)&v229 = v142;
        }
        else
        {
          v230[7] = v141;
          v142 = &v229;
          if (!v141)
          {
LABEL_193:
            *((_BYTE *)v142 + v141) = 0;
            v230[8] = 1;
            if (v60 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v8 = v201;
            if (v60 >= 0x17)
            {
              v147 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v60 | 7) != 0x17)
                v147 = v60 | 7;
              v148 = v147 + 1;
              v145 = operator new(v147 + 1);
              v231 = v60;
              v232 = v148 | 0x8000000000000000;
              *(_QWORD *)&v230[16] = v145;
            }
            else
            {
              HIBYTE(v232) = v60;
              v145 = &v230[16];
              if (!v60)
              {
                v230[16] = 0;
                v233 = 1;
                v146 = v228;
                if ((SHIBYTE(v232) & 0x80000000) == 0)
                  goto LABEL_197;
LABEL_203:
                operator delete(*(void **)&v230[16]);
                if (v230[8])
                  goto LABEL_204;
                goto LABEL_206;
              }
            }
            memmove(v145, v59, v60);
            v145[v60] = 0;
            v233 = 1;
            v146 = v228;
            if (SHIBYTE(v232) < 0)
              goto LABEL_203;
LABEL_197:
            if (v230[8])
            {
LABEL_204:
              if ((v230[7] & 0x80000000) != 0)
                operator delete((void *)v229);
            }
LABEL_206:
            if (v228)
              os_release((void *)v228);
            if (v57 && *(_QWORD *)(v57 + 24))
            {
              v149 = _os_log_pack_size();
              v150 = (std::__shared_weak_count_vtbl *)operator new(v149, (std::align_val_t)8uLL);
              v151 = (std::__shared_weak_count *)operator new();
              v151->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v151->__shared_owners_;
              v151->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v151->__shared_weak_owners_ = 0;
              v151[1].__vftable = v150;
              v221 = v150;
              v222 = v150;
              v223 = v151;
              v224 = 0;
              v225 = 0;
              sub_2236AE020((uint64_t)&v228, __s, (const char **)&v204);
              v153 = (char *)operator new(0x50uLL);
              v154 = (std::__shared_weak_count *)v153;
              *((_QWORD *)v153 + 1) = 0;
              v155 = (unint64_t *)(v153 + 8);
              *((_QWORD *)v153 + 2) = 0;
              *(_QWORD *)v153 = &off_24EC20730;
              *((_QWORD *)v153 + 3) = off_24EC20780;
              *((_OWORD *)v153 + 2) = v229;
              *((_QWORD *)v153 + 6) = *(_QWORD *)v230;
              *(_OWORD *)(v153 + 56) = *(_OWORD *)&v230[8];
              *((_QWORD *)v153 + 9) = v231;
              v224 = v153 + 24;
              v225 = v153;
              v234 = v150;
              *(_QWORD *)&v235 = v150;
              *((_QWORD *)&v235 + 1) = v151;
              do
                v156 = __ldxr(p_shared_owners);
              while (__stxr(v156 + 1, p_shared_owners));
              *(_QWORD *)&v236 = v153 + 24;
              *((_QWORD *)&v236 + 1) = v153;
              do
                v157 = __ldxr(v155);
              while (__stxr(v157 + 1, v155));
              v237 = v153 + 24;
              do
                v158 = __ldaxr(v155);
              while (__stlxr(v158 - 1, v155));
              if (!v158)
              {
                (*(void (**)(char *))(*(_QWORD *)v153 + 16))(v153);
                std::__shared_weak_count::__release_weak(v154);
              }
              v159 = v223;
              if (v223)
              {
                v160 = (unint64_t *)&v223->__shared_owners_;
                do
                  v161 = __ldaxr(v160);
                while (__stlxr(v161 - 1, v160));
                if (!v161)
                {
                  ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                  std::__shared_weak_count::__release_weak(v159);
                }
              }
              v162 = v234;
              if (v237[31] >= 0)
                v163 = v237 + 8;
              else
                v163 = (char *)*((_QWORD *)v237 + 1);
              if (v237[55] >= 0)
                v164 = v237 + 32;
              else
                v164 = (char *)*((_QWORD *)v237 + 4);
              v165 = _os_log_pack_fill();
              *(_DWORD *)v165 = 68158466;
              *(_DWORD *)(v165 + 4) = 13;
              *(_WORD *)(v165 + 8) = 2080;
              *(_QWORD *)(v165 + 10) = v163;
              *(_WORD *)(v165 + 18) = 1040;
              *(_DWORD *)(v165 + 20) = 13;
              *(_WORD *)(v165 + 24) = 2080;
              *(_QWORD *)(v165 + 26) = v164;
              v166 = (char *)operator new();
              v167 = *(unsigned __int8 *)(v58 + 39);
              v168 = *(const char **)(v58 + 16);
              v169 = *(_QWORD *)(v58 + 24);
              v170 = v236;
              *(_OWORD *)(v166 + 8) = v235;
              if ((v167 & 0x80u) != 0)
                v167 = v169;
              else
                v168 = v200;
              *(_QWORD *)v166 = v162;
              v235 = 0uLL;
              *(_OWORD *)(v166 + 24) = v170;
              v236 = 0uLL;
              *((_QWORD *)v166 + 5) = v168;
              *((_QWORD *)v166 + 6) = v167;
              v166[56] = 16;
              v221 = 0;
              v228 = (uint64_t)v166;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v57 + 24) + 40))(*(_QWORD *)(v57 + 24), &v228);
              v171 = v228;
              v228 = 0;
              if (v171)
              {
                v172 = *(std::__shared_weak_count **)(v171 + 32);
                if (v172)
                {
                  v173 = (unint64_t *)&v172->__shared_owners_;
                  do
                    v174 = __ldaxr(v173);
                  while (__stlxr(v174 - 1, v173));
                  if (!v174)
                  {
                    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                    std::__shared_weak_count::__release_weak(v172);
                  }
                }
                v175 = *(std::__shared_weak_count **)(v171 + 16);
                if (v175)
                {
                  v176 = (unint64_t *)&v175->__shared_owners_;
                  do
                    v177 = __ldaxr(v176);
                  while (__stlxr(v177 - 1, v176));
                  if (!v177)
                  {
                    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                    std::__shared_weak_count::__release_weak(v175);
                  }
                }
                MEMORY[0x227684CE8](v171, 0x10F0C40B62ED6C6);
                v178 = v221;
                v221 = 0;
                if (v178)
                {
                  on_zero_shared_weak = (std::__shared_weak_count *)v178->__on_zero_shared_weak;
                  if (on_zero_shared_weak)
                  {
                    v180 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
                    do
                      v181 = __ldaxr(v180);
                    while (__stlxr(v181 - 1, v180));
                    if (!v181)
                    {
                      ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
                      std::__shared_weak_count::__release_weak(on_zero_shared_weak);
                    }
                  }
                  on_zero_shared = (std::__shared_weak_count *)v178->__on_zero_shared;
                  if (on_zero_shared)
                  {
                    v183 = (unint64_t *)&on_zero_shared->__shared_owners_;
                    do
                      v184 = __ldaxr(v183);
                    while (__stlxr(v184 - 1, v183));
                    if (!v184)
                    {
                      ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
                      std::__shared_weak_count::__release_weak(on_zero_shared);
                    }
                  }
                  MEMORY[0x227684CE8](v178, 0x10F0C40B62ED6C6);
                }
              }
              v185 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
              if (*((_QWORD *)&v236 + 1))
              {
                v186 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
                do
                  v187 = __ldaxr(v186);
                while (__stlxr(v187 - 1, v186));
                if (!v187)
                {
                  ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                  std::__shared_weak_count::__release_weak(v185);
                }
              }
              v188 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
              if (*((_QWORD *)&v235 + 1))
              {
                v189 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
                do
                  v190 = __ldaxr(v189);
                while (__stlxr(v190 - 1, v189));
                if (!v190)
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                }
              }
            }
            else
            {
              os_log_type_enabled(v146, OS_LOG_TYPE_ERROR);
              v228 = 0xD04100402;
              LOWORD(v229) = 2080;
              *(_QWORD *)((char *)&v229 + 2) = __s;
              WORD5(v229) = 1040;
              HIDWORD(v229) = 13;
              *(_WORD *)v230 = 2080;
              *(_QWORD *)&v230[2] = v204;
              v191 = (void *)_os_log_send_and_compose_impl();
              if (v191)
                free(v191);
            }
            if (v55)
            {
              sub_2245664AC(v201, &v228);
              sub_2245664AC((unsigned __int8 *)v10, &v234);
              sub_22322C138((uint64_t)&v205, "Updating GP %.13s with KP %.13s that does not exist", (const char *)&v228, (const char *)&v234);
              sub_223182C08((uint64_t)&v205);
            }
            sub_223182C08((uint64_t)&v205);
            v136 = v213;
            if (v213)
            {
              v192 = (unint64_t *)&v213->__shared_owners_;
              do
                v138 = __ldaxr(v192);
              while (__stlxr(v138 - 1, v192));
              goto LABEL_272;
            }
            goto LABEL_6;
          }
        }
        memmove(v142, v140, v141);
        goto LABEL_193;
      }
      v25 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_2236A0EC4(&v228);
      if (*(char *)(v228 + 39) < 0)
      {
        v26 = *(char **)(v228 + 16);
        v27 = *(_QWORD *)(v228 + 24);
      }
      else
      {
        v26 = (char *)(v228 + 16);
        v27 = *(unsigned __int8 *)(v228 + 39);
      }
      sub_223195728((uint64_t)&stru_255789280, v26, v27, "Updating GP %.13s with KP %.13s that does not have a link", 0x39uLL);
      sub_2236A0FB8(&v214);
      if (**(int **)(v214 + 56) > 5)
        goto LABEL_6;
      v31 = *(unsigned __int8 *)(v214 + 72);
      v32 = sub_22322F254(v214, "OSLogSurrogateAppender", 1, 0);
      v33 = v32;
      if (!v31 && !v32)
        goto LABEL_6;
      v205 = &v214;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v207 = std::chrono::system_clock::now().__d_.__rep_;
      v208 = 5;
      v209 = "unknown file";
      v210 = 566;
      v211 = "unknown function";
      v212 = 0;
      v213 = 0;
      sub_2245664AC(v8, __s);
      sub_2245664AC((unsigned __int8 *)v10, v226);
      v204 = v226;
      v34 = *v205;
      v35 = (const char *)(*v205 + 16);
      v199 = v35;
      if (*(char *)(*v205 + 39) < 0)
      {
        v35 = *(const char **)(v34 + 16);
        v36 = *(_QWORD *)(v34 + 24);
        v83 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v83 & 1) != 0)
          goto LABEL_84;
      }
      else
      {
        v36 = *(unsigned __int8 *)(*v205 + 39);
        v37 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v37 & 1) != 0)
          goto LABEL_84;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v234);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v234, &xmmword_255788F40);
        if ((_BYTE)v236 && SHIBYTE(v235) < 0)
          operator delete(v234);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_84:
      if (byte_255788F57 >= 0)
        v84 = (const char *)&xmmword_255788F40;
      else
        v84 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v85 = byte_255788F57;
      else
        v85 = *((_QWORD *)&xmmword_255788F40 + 1);
      v228 = (uint64_t)os_log_create(v84, v35);
      if (v85 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v85 >= 0x17)
      {
        v87 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v85 | 7) != 0x17)
          v87 = v85 | 7;
        v88 = v87 + 1;
        v86 = (__int128 *)operator new(v87 + 1);
        *((_QWORD *)&v229 + 1) = v85;
        *(_QWORD *)v230 = v88 | 0x8000000000000000;
        *(_QWORD *)&v229 = v86;
LABEL_97:
        memmove(v86, v84, v85);
        goto LABEL_98;
      }
      v230[7] = v85;
      v86 = &v229;
      if (v85)
        goto LABEL_97;
LABEL_98:
      *((_BYTE *)v86 + v85) = 0;
      v230[8] = 1;
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v8 = v201;
      if (v36 >= 0x17)
      {
        v91 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v91 = v36 | 7;
        v92 = v91 + 1;
        v89 = operator new(v91 + 1);
        v231 = v36;
        v232 = v92 | 0x8000000000000000;
        *(_QWORD *)&v230[16] = v89;
      }
      else
      {
        HIBYTE(v232) = v36;
        v89 = &v230[16];
        if (!v36)
        {
          v230[16] = 0;
          v233 = 1;
          v90 = v228;
          if ((SHIBYTE(v232) & 0x80000000) == 0)
            goto LABEL_102;
          goto LABEL_108;
        }
      }
      memmove(v89, v35, v36);
      v89[v36] = 0;
      v233 = 1;
      v90 = v228;
      if ((SHIBYTE(v232) & 0x80000000) == 0)
      {
LABEL_102:
        if (!v230[8])
          goto LABEL_111;
        goto LABEL_109;
      }
LABEL_108:
      operator delete(*(void **)&v230[16]);
      if (!v230[8])
        goto LABEL_111;
LABEL_109:
      if ((v230[7] & 0x80000000) != 0)
        operator delete((void *)v229);
LABEL_111:
      if (v228)
        os_release((void *)v228);
      if (v33 && *(_QWORD *)(v33 + 24))
      {
        v93 = _os_log_pack_size();
        v94 = (std::__shared_weak_count_vtbl *)operator new(v93, (std::align_val_t)8uLL);
        v95 = (std::__shared_weak_count *)operator new();
        v95->__shared_owners_ = 0;
        v96 = (unint64_t *)&v95->__shared_owners_;
        v95->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v95->__shared_weak_owners_ = 0;
        v95[1].__vftable = v94;
        v221 = v94;
        v222 = v94;
        v223 = v95;
        v224 = 0;
        v225 = 0;
        sub_2236AE020((uint64_t)&v228, __s, (const char **)&v204);
        v97 = (char *)operator new(0x50uLL);
        v98 = (std::__shared_weak_count *)v97;
        *((_QWORD *)v97 + 1) = 0;
        v99 = (unint64_t *)(v97 + 8);
        *((_QWORD *)v97 + 2) = 0;
        *(_QWORD *)v97 = &off_24EC20730;
        *((_QWORD *)v97 + 3) = off_24EC20780;
        *((_OWORD *)v97 + 2) = v229;
        *((_QWORD *)v97 + 6) = *(_QWORD *)v230;
        *(_OWORD *)(v97 + 56) = *(_OWORD *)&v230[8];
        *((_QWORD *)v97 + 9) = v231;
        v224 = v97 + 24;
        v225 = v97;
        v234 = v94;
        *(_QWORD *)&v235 = v94;
        *((_QWORD *)&v235 + 1) = v95;
        do
          v100 = __ldxr(v96);
        while (__stxr(v100 + 1, v96));
        *(_QWORD *)&v236 = v97 + 24;
        *((_QWORD *)&v236 + 1) = v97;
        do
          v101 = __ldxr(v99);
        while (__stxr(v101 + 1, v99));
        v237 = v97 + 24;
        do
          v102 = __ldaxr(v99);
        while (__stlxr(v102 - 1, v99));
        if (!v102)
        {
          (*(void (**)(char *))(*(_QWORD *)v97 + 16))(v97);
          std::__shared_weak_count::__release_weak(v98);
        }
        v103 = v223;
        if (v223)
        {
          v104 = (unint64_t *)&v223->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        v106 = v234;
        if (v237[31] >= 0)
          v107 = v237 + 8;
        else
          v107 = (char *)*((_QWORD *)v237 + 1);
        if (v237[55] >= 0)
          v108 = v237 + 32;
        else
          v108 = (char *)*((_QWORD *)v237 + 4);
        v109 = _os_log_pack_fill();
        *(_DWORD *)v109 = 68158466;
        *(_DWORD *)(v109 + 4) = 13;
        *(_WORD *)(v109 + 8) = 2080;
        *(_QWORD *)(v109 + 10) = v107;
        *(_WORD *)(v109 + 18) = 1040;
        *(_DWORD *)(v109 + 20) = 13;
        *(_WORD *)(v109 + 24) = 2080;
        *(_QWORD *)(v109 + 26) = v108;
        v110 = (char *)operator new();
        v111 = *(unsigned __int8 *)(v34 + 39);
        v112 = *(const char **)(v34 + 16);
        v113 = *(_QWORD *)(v34 + 24);
        v114 = v236;
        *(_OWORD *)(v110 + 8) = v235;
        if ((v111 & 0x80u) != 0)
          v111 = v113;
        else
          v112 = v199;
        *(_QWORD *)v110 = v106;
        v235 = 0uLL;
        *(_OWORD *)(v110 + 24) = v114;
        v236 = 0uLL;
        *((_QWORD *)v110 + 5) = v112;
        *((_QWORD *)v110 + 6) = v111;
        v110[56] = 16;
        v221 = 0;
        v228 = (uint64_t)v110;
        (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v33 + 24) + 40))(*(_QWORD *)(v33 + 24), &v228);
        v115 = v228;
        v228 = 0;
        if (v115)
        {
          v116 = *(std::__shared_weak_count **)(v115 + 32);
          if (v116)
          {
            v117 = (unint64_t *)&v116->__shared_owners_;
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          v119 = *(std::__shared_weak_count **)(v115 + 16);
          if (v119)
          {
            v120 = (unint64_t *)&v119->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          MEMORY[0x227684CE8](v115, 0x10F0C40B62ED6C6);
          v122 = v221;
          v221 = 0;
          if (v122)
          {
            v123 = (std::__shared_weak_count *)v122->__on_zero_shared_weak;
            if (v123)
            {
              v124 = (unint64_t *)&v123->__shared_owners_;
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
            v126 = (std::__shared_weak_count *)v122->__on_zero_shared;
            if (v126)
            {
              v127 = (unint64_t *)&v126->__shared_owners_;
              do
                v128 = __ldaxr(v127);
              while (__stlxr(v128 - 1, v127));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
            MEMORY[0x227684CE8](v122, 0x10F0C40B62ED6C6);
          }
        }
        v129 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
        if (*((_QWORD *)&v236 + 1))
        {
          v130 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        v132 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
        if (*((_QWORD *)&v235 + 1))
        {
          v133 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
      }
      else
      {
        os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
        v228 = 0xD04100402;
        LOWORD(v229) = 2080;
        *(_QWORD *)((char *)&v229 + 2) = __s;
        WORD5(v229) = 1040;
        HIDWORD(v229) = 13;
        *(_WORD *)v230 = 2080;
        *(_QWORD *)&v230[2] = v204;
        v135 = (void *)_os_log_send_and_compose_impl();
        if (v135)
          free(v135);
      }
      if (v31)
      {
        sub_2245664AC(v201, &v228);
        sub_2245664AC((unsigned __int8 *)v10, &v234);
        sub_22322C138((uint64_t)&v205, "Updating GP %.13s with KP %.13s that does not have a link", (const char *)&v228, (const char *)&v234);
        sub_223182C08((uint64_t)&v205);
      }
      sub_223182C08((uint64_t)&v205);
      v136 = v213;
      if (v213)
      {
        v137 = (unint64_t *)&v213->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
LABEL_272:
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
LABEL_6:
      v10 += 16;
      if (v10 == v203)
        goto LABEL_289;
    }
  }
  v215 = 0;
  v216 = 0;
  v217 = 0;
LABEL_289:
  v193 = sub_2236A3030((uint64_t)v8, a2, (uint64_t **)&__p, (uint64_t **)&v215, a4, a5, a6, a7, a8);
  if (v215)
    operator delete(v215);
  if (__p)
  {
    v219 = (char *)__p;
    operator delete(__p);
  }
  return v193;
}

void sub_2236A9B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  if (*(_BYTE *)(v44 - 128) && *(char *)(v44 - 129) < 0)
    operator delete(*(void **)(v44 - 152));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a28);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_2236A9D38(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, char a7, float32x4_t a8, float32x4_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  char *v34;
  int64_t v35;
  char *v36;
  _BYTE *v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  char *v44;
  int64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __n128 *v51;
  float32x4_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __n128 *v60;
  float32x4_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v70;
  void *__p;
  char *v72;
  char *v73;
  void *v74;
  char *v75;
  char *v76;

  v13 = *(_QWORD *)(a1 + 240);
  v12 = *(_QWORD *)(a1 + 248);
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v14 = v12 - v13;
  if (v12 == v13)
  {
    __p = 0;
    v72 = 0;
    v73 = 0;
    if (!a3)
      goto LABEL_64;
    goto LABEL_6;
  }
  if (v14 < 0)
    sub_22316E078();
  v15 = (unint64_t)v14 >> 1;
  v16 = (char *)operator new((unint64_t)v14 >> 1);
  v17 = v14 >> 4;
  v74 = v16;
  v75 = v16;
  v76 = &v16[8 * v17];
  __p = operator new(v15);
  v72 = (char *)__p;
  v73 = (char *)__p + 8 * v17;
  if (a3)
  {
LABEL_6:
    v70 = &a4[a3];
    do
    {
      v18 = *(_QWORD **)(*a4 + 208);
      v19 = *(_QWORD **)(*a4 + 216);
      while (v18 != v19)
      {
        v21 = *(_QWORD **)(a1 + 240);
        v22 = *(_QWORD **)(a1 + 248);
        if (v21 != v22)
        {
          while (*v21 != *v18 || v21[1] != v18[1])
          {
            v21 += 2;
            if (v21 == v22)
            {
              v21 = *(_QWORD **)(a1 + 248);
              break;
            }
          }
        }
        if (v21 != v22)
        {
          v24 = *a4;
          v25 = v75;
          if (v75 < v76)
          {
            *(_QWORD *)v75 = v24;
            v26 = v25 + 8;
            goto LABEL_34;
          }
          v27 = v74;
          v28 = v75 - (_BYTE *)v74;
          v29 = (v75 - (_BYTE *)v74) >> 3;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61)
            sub_22316E078();
          v31 = v76 - (_BYTE *)v74;
          if ((v76 - (_BYTE *)v74) >> 2 > v30)
            v30 = v31 >> 2;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            if (v32 >> 61)
              sub_223174E94();
            v33 = operator new(8 * v32);
            v34 = &v33[8 * v29];
            *(_QWORD *)v34 = v24;
            v26 = v34 + 8;
            v35 = v25 - v27;
            if (v25 == v27)
            {
LABEL_32:
              v74 = v34;
              v76 = &v33[8 * v32];
              if (v25)
                goto LABEL_33;
              goto LABEL_34;
            }
          }
          else
          {
            v33 = 0;
            v34 = (char *)(8 * v29);
            v46 = (_QWORD *)(8 * v29);
            *v46 = v24;
            v26 = (char *)(v46 + 1);
            v35 = v25 - v27;
            if (v25 == v27)
              goto LABEL_32;
          }
          v47 = v35 - 8;
          if (v47 < 0x58)
            goto LABEL_76;
          if ((unint64_t)(v25 - v33 - v28) < 0x20)
            goto LABEL_76;
          v48 = (v47 >> 3) + 1;
          v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
          v50 = &v25[-v49];
          v34 -= v49;
          v51 = (__n128 *)&v33[v28 - 16];
          v52 = (float32x4_t *)(v25 - 16);
          v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            a9 = v52[-1];
            a8 = *v52;
            v51[-1] = (__n128)a9;
            *v51 = (__n128)a8;
            v51 -= 2;
            v52 -= 2;
            v53 -= 4;
          }
          while (v53);
          v25 = v50;
          if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_76:
            do
            {
              v54 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v34 - 1) = v54;
              v34 -= 8;
            }
            while (v25 != v27);
          }
          v25 = v74;
          v74 = v34;
          v76 = &v33[8 * v32];
          if (v25)
LABEL_33:
            operator delete(v25);
LABEL_34:
          v75 = v26;
          v36 = v72;
          if (v72 >= v73)
          {
            v37 = __p;
            v38 = v72 - (_BYTE *)__p;
            v39 = (v72 - (_BYTE *)__p) >> 3;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61)
              sub_22316E078();
            v41 = v73 - (_BYTE *)__p;
            if ((v73 - (_BYTE *)__p) >> 2 > v40)
              v40 = v41 >> 2;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42)
            {
              if (v42 >> 61)
                sub_223174E94();
              v43 = operator new(8 * v42);
              v44 = &v43[8 * v39];
              *(_QWORD *)v44 = v18;
              v20 = v44 + 8;
              v45 = v36 - v37;
              if (v36 == v37)
              {
LABEL_44:
                __p = v44;
                v73 = &v43[8 * v42];
                if (!v36)
                  goto LABEL_10;
LABEL_63:
                operator delete(v36);
LABEL_10:
                v72 = v20;
                goto LABEL_11;
              }
            }
            else
            {
              v43 = 0;
              v44 = (char *)(8 * v39);
              v55 = (_QWORD *)(8 * v39);
              *v55 = v18;
              v20 = (char *)(v55 + 1);
              v45 = v36 - v37;
              if (v36 == v37)
                goto LABEL_44;
            }
            v56 = v45 - 8;
            if (v56 < 0x58)
              goto LABEL_77;
            if ((unint64_t)(v36 - &v43[v38]) < 0x20)
              goto LABEL_77;
            v57 = (v56 >> 3) + 1;
            v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v36[-v58];
            v44 -= v58;
            v60 = (__n128 *)&v43[v38 - 16];
            v61 = (float32x4_t *)(v36 - 16);
            v62 = v57 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              a9 = v61[-1];
              a8 = *v61;
              v60[-1] = (__n128)a9;
              *v60 = (__n128)a8;
              v60 -= 2;
              v61 -= 2;
              v62 -= 4;
            }
            while (v62);
            v36 = v59;
            if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_77:
              do
              {
                v63 = *((_QWORD *)v36 - 1);
                v36 -= 8;
                *((_QWORD *)v44 - 1) = v63;
                v44 -= 8;
              }
              while (v36 != v37);
            }
            v36 = (char *)__p;
            __p = v44;
            v73 = &v43[8 * v42];
            if (!v36)
              goto LABEL_10;
            goto LABEL_63;
          }
          *(_QWORD *)v72 = v18;
          v20 = v36 + 8;
          goto LABEL_10;
        }
LABEL_11:
        v18 += 53;
      }
      ++a4;
    }
    while (a4 != v70);
  }
LABEL_64:
  v64 = sub_2236A3030(a1, a2, (uint64_t **)&v74, (uint64_t **)&__p, a5, a6, a7, a8, a9);
  if (__p)
    operator delete(__p);
  if (v74)
    operator delete(v74);
  return v64;
}

void sub_2236AA13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2236AA184(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q3>)
{
  float64x2_t v4;
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  float32x2_t *v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  char *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  float32x4_t v32;
  _BYTE *v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  float32x4_t *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  char *v60;
  void *v61;
  void *v62;
  void *v63;
  float64x2_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v71;
  int8x16_t v78;
  int8x16_t v79;
  float64x2_t v81;
  int8x16_t v82;
  unint64_t v84;
  float64x2_t v86;
  int64x2_t v87;
  int8x16_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v94;
  float64x2_t v96;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float v101;
  int8x16_t v102;
  float32x2_t v103;
  double v104;
  float32x2_t v105;
  double v106;
  float32x4_t v107;
  int8x16_t v108;
  int8x16_t v109;
  float v110;
  int8x16_t v112;
  float32x2_t v113;
  float v114;
  unsigned int v115;
  int8x16_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x4_t v119;
  int8x16_t v120;
  float32x2_t v121;
  float32x2_t v122;
  _BOOL4 v123;
  float32x4_t v124;
  int8x16_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x4_t v128;
  int8x16_t v129;
  float32x2_t v130;
  float32x2_t v131;
  double v132;
  float32x2_t v133;
  double v134;
  float32x4_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float v138;
  float v139;
  BOOL v140;
  int8x16_t v141;
  float32x2_t v142;
  float v143;
  unsigned int v144;
  int8x16_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x4_t v149;
  int8x16_t v150;
  float32x2_t v151;
  float32x2_t v152;
  _BOOL4 v153;
  float32x4_t v154;
  int8x16_t v155;
  float32x2_t v156;
  float32x2_t v157;
  float32x4_t v158;
  int8x16_t v159;
  float32x2_t v160;
  float32x2_t v161;
  float32x2_t v162;
  int8x16_t v163;
  int8x16_t v164;
  float64x2_t v165;
  uint64_t v167;
  float64x2_t v168;
  int8x16_t v172;
  int8x16_t v173;
  float64x2_t v174;
  float64x2_t v176;
  uint64_t v178;
  float32x2_t *v179;
  float *v180;
  uint64_t v181;
  void **v182;
  uint64_t **v183;
  float32x4_t v184;
  char *v185;
  char *v186;
  unint64_t v187;
  void *v188[2];
  uint64_t v189;
  void *__p;
  __int128 v191;

  v6 = a1;
  v7 = a3;
  *(_OWORD *)(a3 + 40) = xmmword_2246498F8;
  *(_OWORD *)(a3 + 56) = unk_224649908;
  *(_OWORD *)(a3 + 72) = xmmword_224649918;
  *(_OWORD *)(a3 + 88) = unk_224649928;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 216) = 0;
  *(_BYTE *)(a3 + 320) = 0;
  *(_BYTE *)(a3 + 324) = 0;
  *(_BYTE *)(a3 + 356) = 0;
  *(_BYTE *)(a3 + 360) = 0;
  *(_BYTE *)(a3 + 384) = 0;
  *(_BYTE *)(a3 + 392) = 0;
  *(_BYTE *)(a3 + 416) = 0;
  *(_BYTE *)(a3 + 424) = 0;
  *(_BYTE *)(a3 + 448) = 0;
  *(_WORD *)(a3 + 456) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_QWORD *)(a3 + 288) = 0;
  *(_BYTE *)(a3 + 304) = 0;
  *(_QWORD *)(a3 + 296) = 0;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 120);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 128);
  *(_QWORD *)(a3 + 28) = *(_QWORD *)(a1 + 132);
  v8 = (float32x2_t *)(a3 + 28);
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a3 + 108) = 1036831949;
  *(_DWORD *)(a3 + 224) = 0;
  v9 = *(_OWORD *)(a1 + 192);
  v10 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a3 + 264) = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a3 + 248) = v10;
  *(_OWORD *)(a3 + 232) = v9;
  if (a3 + 280 == a1 + 264)
  {
    v12 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v7 + 304) = *(_QWORD *)(a1 + 144);
  }
  else
  {
    sub_2231984D0((_QWORD *)(a3 + 280), *(char **)(a1 + 264), *(char **)(a1 + 272), (uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 4);
    v11 = *(unsigned __int8 *)(v7 + 320);
    v12 = *(_QWORD *)(v6 + 152);
    *(_QWORD *)(v7 + 304) = *(_QWORD *)(v6 + 144);
    if (v11)
      goto LABEL_6;
  }
  *(_BYTE *)(v7 + 320) = 1;
LABEL_6:
  v13 = (float32x2_t *)(v7 + 324);
  *(_QWORD *)(v7 + 312) = v12;
  v14 = *(float32x4_t *)(v6 + 168);
  v15 = *(_QWORD *)(v6 + 184);
  v16 = *(unsigned __int8 *)(v7 + 356);
  *(_QWORD *)(v7 + 324) = *(_QWORD *)(v6 + 160);
  if (!v16)
    *(_BYTE *)(v7 + 356) = 1;
  v17 = (void **)(v7 + 360);
  *(float32x4_t *)(v7 + 332) = v14;
  *(_QWORD *)(v7 + 348) = v15;
  if (*(_BYTE *)(v7 + 384))
  {
    v18 = *v17;
    if (*v17)
    {
      *(_QWORD *)(v7 + 368) = v18;
      operator delete(v18);
    }
    *(_BYTE *)(v7 + 384) = 0;
  }
  if (*(_BYTE *)(v6 + 80))
    sub_2236AB0C4(v7 + 360, (char **)(v6 + 56));
  v182 = (void **)(v7 + 424);
  if (*(_BYTE *)(v7 + 448))
  {
    v19 = (char *)*v182;
    if (*v182)
    {
      v20 = *(char **)(v7 + 432);
      v21 = *v182;
      if (v20 != v19)
      {
        v22 = *(char **)(v7 + 432);
        do
        {
          v24 = (void *)*((_QWORD *)v22 - 3);
          v22 -= 24;
          v23 = v24;
          if (v24)
          {
            *((_QWORD *)v20 - 2) = v23;
            operator delete(v23);
          }
          v20 = v22;
        }
        while (v22 != v19);
        v21 = *v182;
      }
      *(_QWORD *)(v7 + 432) = v19;
      operator delete(v21);
    }
    *(_BYTE *)(v7 + 448) = 0;
  }
  if (*(_BYTE *)(v6 + 112))
  {
    v25 = *(_QWORD *)(v6 + 88);
    v26 = *(_QWORD *)(v6 + 96);
    if (v25 != v26)
    {
      v179 = (float32x2_t *)(v7 + 324);
      v180 = a2;
      v181 = v7;
      v185 = 0;
      v186 = 0;
      v187 = 0;
      sub_2236ADBC8((uint64_t)&v185, 0xAAAAAAAAAAAAAAABLL * ((v26 - v25) >> 3));
      v27 = *(uint64_t ***)(v6 + 88);
      v178 = v6;
      v183 = *(uint64_t ***)(v6 + 96);
      if (v27 != v183)
      {
        while (1)
        {
          v28 = *v27;
          v29 = v27[1];
          __p = 0;
          v191 = 0uLL;
          v30 = (char *)v29 - (char *)v28;
          if (v29 != v28)
            break;
          v188[0] = 0;
          v188[1] = 0;
          v189 = 0;
          v53 = v186;
          if ((unint64_t)v186 < v187)
            goto LABEL_28;
LABEL_67:
          v186 = sub_2236ADCEC(&v185, (uint64_t)v188);
          if (v188[0])
          {
            v188[1] = v188[0];
            operator delete(v188[0]);
          }
LABEL_29:
          v27 += 3;
          if (v27 == v183)
            goto LABEL_69;
        }
        if (v30 < 0)
          sub_22316E078();
        v31 = operator new((unint64_t)v30 >> 1);
        __p = v31;
        *(_QWORD *)&v191 = v31;
        *((_QWORD *)&v191 + 1) = &v31[v30 >> 4];
        while (1)
        {
          while (1)
          {
            *(float32x2_t *)v32.f32 = vadd_f32(vmla_n_f32(vmul_n_f32((float32x2_t)981467136, (float)*v28), (float32x2_t)0x3A80000000000000, (float)v28[1]), 0);
            v32 = vaddq_f32(v32, (float32x4_t)0);
            if ((unint64_t)v31 >= *((_QWORD *)&v191 + 1))
              break;
            *v31++ = v32.i64[0];
            *(_QWORD *)&v191 = v31;
            v28 += 2;
            if (v28 == v29)
              goto LABEL_64;
          }
          v33 = __p;
          v34 = (char *)v31 - (_BYTE *)__p;
          v35 = ((char *)v31 - (_BYTE *)__p) >> 3;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
            sub_22316E078();
          v37 = *((_QWORD *)&v191 + 1) - (_QWORD)__p;
          if ((uint64_t)(*((_QWORD *)&v191 + 1) - (_QWORD)__p) >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v184 = v32;
            if (v38 >> 61)
              sub_223174E94();
            v39 = operator new(8 * v38);
            v32.i64[1] = v184.i64[1];
            v40 = &v39[8 * v35];
            v41 = &v39[8 * v38];
            *v40 = v184.i64[0];
            v42 = (uint64_t)(v40 + 1);
            v43 = (char *)v31 - v33;
            if (v31 == (_QWORD *)v33)
            {
LABEL_51:
              __p = v40;
              *(_QWORD *)&v191 = v42;
              *((_QWORD *)&v191 + 1) = v41;
              goto LABEL_52;
            }
          }
          else
          {
            v39 = 0;
            v40 = (_QWORD *)(8 * v35);
            v41 = 0;
            *(_QWORD *)(8 * v35) = v32.i64[0];
            v42 = 8 * v35 + 8;
            v43 = (char *)v31 - v33;
            if (v31 == (_QWORD *)v33)
              goto LABEL_51;
          }
          v44 = v43 - 8;
          if (v44 >= 0x168)
          {
            v47 = ((char *)(v31 - 1) - v33) & 0xFFFFFFFFFFFFFFF8;
            if (&v39[v34 - 8 - v47] > &v39[v34 - 8])
            {
              v45 = v31;
            }
            else if ((_QWORD *)((char *)v31 - v47 - 8) > v31 - 1)
            {
              v45 = v31;
            }
            else if ((unint64_t)((char *)v31 - v39 - v34) >= 0x20)
            {
              v48 = (v44 >> 3) + 1;
              v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
              v45 = &v31[v49 / 0xFFFFFFFFFFFFFFF8];
              v40 = (_QWORD *)((char *)v40 - v49);
              v50 = (float32x4_t *)&v39[8 * v35 - 16];
              v51 = (float32x4_t *)(v31 - 2);
              v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v32 = *v51;
                v50[-1] = v51[-1];
                *v50 = v32;
                v50 -= 2;
                v51 -= 2;
                v52 -= 4;
              }
              while (v52);
              if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_47;
            }
            else
            {
              v45 = v31;
            }
          }
          else
          {
            v45 = v31;
          }
          do
          {
            v46 = *--v45;
            *--v40 = v46;
          }
          while (v45 != (_QWORD *)v33);
LABEL_47:
          v31 = __p;
          __p = v40;
          *(_QWORD *)&v191 = v42;
          *((_QWORD *)&v191 + 1) = v41;
          if (v31)
          {
LABEL_52:
            operator delete(v31);
            v31 = (_QWORD *)v42;
            *(_QWORD *)&v191 = v42;
            v28 += 2;
            if (v28 == v29)
            {
LABEL_64:
              v188[0] = __p;
              v188[1] = v31;
              v189 = *((_QWORD *)&v191 + 1);
              v53 = v186;
              if ((unint64_t)v186 >= v187)
                goto LABEL_67;
LABEL_28:
              *(_QWORD *)v53 = 0;
              *((_QWORD *)v53 + 1) = 0;
              *((_QWORD *)v53 + 2) = 0;
              v14.i32[3] = HIDWORD(v188[1]);
              *(_OWORD *)v53 = *(_OWORD *)v188;
              *((_QWORD *)v53 + 2) = v189;
              v186 = v53 + 24;
              goto LABEL_29;
            }
          }
          else
          {
            v31 = (_QWORD *)v42;
            *(_QWORD *)&v191 = v42;
            v28 += 2;
            if (v28 == v29)
              goto LABEL_64;
          }
        }
      }
LABEL_69:
      v55 = v185;
      v54 = v186;
      v56 = v187;
      v7 = v181;
      v13 = v179;
      if (*(_BYTE *)(v181 + 448))
      {
        v57 = (char *)*v182;
        a2 = v180;
        if (*v182)
        {
          v58 = *(char **)(v181 + 432);
          v59 = *v182;
          if (v58 != v57)
          {
            v60 = *(char **)(v181 + 432);
            do
            {
              v62 = (void *)*((_QWORD *)v60 - 3);
              v60 -= 24;
              v61 = v62;
              if (v62)
              {
                *((_QWORD *)v58 - 2) = v61;
                operator delete(v61);
              }
              v58 = v60;
            }
            while (v60 != v57);
            v59 = *v182;
          }
          *(_QWORD *)(v181 + 432) = v57;
          operator delete(v59);
          *v182 = 0;
          v182[1] = 0;
          v182[2] = 0;
        }
        *(_QWORD *)(v181 + 424) = v55;
        *(_QWORD *)(v181 + 432) = v54;
        *(_QWORD *)(v181 + 440) = v56;
        v6 = v178;
      }
      else
      {
        *(_QWORD *)(v181 + 424) = v185;
        *(_QWORD *)(v181 + 432) = v54;
        *(_QWORD *)(v181 + 440) = v56;
        *(_BYTE *)(v181 + 448) = 1;
        v6 = v178;
        a2 = v180;
      }
    }
  }
  if (*(_BYTE *)(v7 + 416))
  {
    v63 = *(void **)(v7 + 392);
    if (v63)
    {
      *(_QWORD *)(v7 + 400) = v63;
      operator delete(v63);
    }
    *(_BYTE *)(v7 + 416) = 0;
  }
  v14.i64[0] = *(_QWORD *)(v7 + 16);
  a4.i64[0] = *(_QWORD *)(v7 + 28);
  a4.i32[2] = *(_DWORD *)(v7 + 36);
  v64 = vcvt_hight_f64_f32(a4);
  v65 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)a4.f32);
  v66 = (float32x4_t)vextq_s8(v65, v65, 8uLL);
  v67.i64[1] = 0x3FF0000000000000;
  if (fabsf(*(float *)(v7 + 36)) >= 0.99863)
  {
    *(_QWORD *)&v86.f64[0] = v65.i64[0];
    *(_QWORD *)&v86.f64[1] = v66.i64[0];
    v87 = (int64x2_t)vmulq_f64(v86, (float64x2_t)0);
    _Q20.f64[0] = v64.f64[0];
    *(_QWORD *)&_Q20.f64[1] = v87.i64[0];
    _Q19 = (int8x16_t)vdupq_laneq_s64(v87, 1);
    v89 = (int8x16_t)vmulq_f64(v86, (float64x2_t)xmmword_2245F5CB0);
    v90 = (float64x2_t)vextq_s8(v89, (int8x16_t)vmulq_f64(v64, (float64x2_t)0), 8uLL);
    v91 = vsubq_f64((float64x2_t)_Q19, (float64x2_t)v89);
    _Q17 = vsubq_f64(_Q20, v90);
    _Q18 = vmulq_f64(_Q17, _Q17);
    _Q19.i64[0] = *(_QWORD *)&_Q17.f64[1];
    __asm { FMLA            D18, D19, V17.D[1] }
    _Q18.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q18.f64[0], v91.f64[0], v91.f64[0]));
    v82 = (int8x16_t)vmulq_n_f64(_Q17, _Q18.f64[0]);
    _Q16 = (int8x16_t)vmulq_f64(v91, _Q18);
    *(_QWORD *)&_Q18.f64[0] = v66.i64[0];
    _Q18.f64[1] = v64.f64[0];
    _Q20.f64[0] = v64.f64[0];
    *(_QWORD *)&_Q20.f64[1] = v65.i64[0];
    *(_QWORD *)&v94.f64[0] = _Q16.i64[0];
    *(_QWORD *)&v94.f64[1] = v82.i64[0];
    _Q18 = vmlsq_f64(vmulq_f64(_Q18, v94), _Q20, (float64x2_t)vextq_s8(v82, _Q16, 8uLL));
    v96 = vmlsq_f64(vmulq_laneq_f64((float64x2_t)v65, (float64x2_t)v82, 1), (float64x2_t)v66, (float64x2_t)v82);
    _D21 = _Q18.f64[1];
    __asm { FMLA            D20, D21, V18.D[1] }
    *(double *)_Q19.i64 = 1.0 / sqrt(vmlad_n_f64(_Q20.f64[0], v96.f64[0], v96.f64[0]));
    v78 = (int8x16_t)vmulq_n_f64(_Q18, *(double *)_Q19.i64);
    v79 = vextq_s8(v78, (int8x16_t)vmulq_f64(v96, (float64x2_t)_Q19), 8uLL);
    _Q19.i64[0] = vextq_s8(v79, v79, 8uLL).u64[0];
    v84 = vextq_s8(v82, v82, 8uLL).u64[0];
  }
  else
  {
    *(_QWORD *)&v68.f64[0] = v66.i64[0];
    v68.f64[1] = v64.f64[0];
    v69.f64[0] = v64.f64[0];
    *(_QWORD *)&v69.f64[1] = v65.i64[0];
    v4.f64[0] = -0.0;
    _Q21 = vmlaq_f64(vmulq_f64(v69, (float64x2_t)xmmword_2245D2420), v68, (float64x2_t)xmmword_2245F5CB0);
    v71 = vmlaq_f64(vmulq_f64((float64x2_t)v66, v4), (float64x2_t)v65, (float64x2_t)0);
    _Q18 = vmulq_f64(_Q21, _Q21);
    _D19 = _Q21.f64[1];
    __asm { FMLA            D18, D19, V21.D[1] }
    _Q18.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q18.f64[0], v71.f64[0], v71.f64[0]));
    _Q22 = (int8x16_t)vmulq_f64(v71, _Q18);
    v78 = (int8x16_t)vmulq_n_f64(_Q21, _Q18.f64[0]);
    v79 = vextq_s8(v78, _Q22, 8uLL);
    _Q22.i64[1] = v78.i64[0];
    _Q17 = vmlsq_f64(vmulq_f64(v69, (float64x2_t)v79), v68, (float64x2_t)_Q22);
    v81 = vmlsq_laneq_f64(vmulq_f64((float64x2_t)v66, (float64x2_t)v78), (float64x2_t)v65, (float64x2_t)v78, 1);
    _Q16 = (int8x16_t)vmulq_f64(_Q17, _Q17);
    _Q22.i64[0] = *(_QWORD *)&_Q17.f64[1];
    __asm { FMLA            D16, D22, V17.D[1] }
    *(double *)_Q16.i64 = 1.0 / sqrt(vmlad_n_f64(*(double *)_Q16.i64, v81.f64[0], v81.f64[0]));
    v82 = (int8x16_t)vmulq_n_f64(_Q17, *(double *)_Q16.i64);
    _Q16.i64[0] = *(_OWORD *)&vmulq_f64(v81, (float64x2_t)_Q16);
    v84 = vextq_s8(v82, v82, 8uLL).u64[0];
    _Q19.i64[0] = vextq_s8(v79, v79, 8uLL).u64[0];
  }
  v78.i64[1] = v79.i64[0];
  v65.i64[1] = v66.i64[0];
  v82.i64[1] = v84;
  _Q16.i64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
  _Q19.i64[1] = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL).u64[0];
  v14.i32[2] = *(_DWORD *)(v7 + 24);
  *(_QWORD *)&v64.f64[1] = vextq_s8((int8x16_t)xmmword_224690B50, (int8x16_t)xmmword_224690B50, 8uLL).u64[0];
  v67.i64[0] = *(_OWORD *)&vcvt_hight_f64_f32(v14);
  v98 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v65), v64);
  v99 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v82), (float64x2_t)_Q16);
  v100 = vcvt_hight_f32_f64(*(int32x2_t *)v14.f32, (float64x2_t)v67);
  *(float32x4_t *)(v7 + 40) = v99;
  *(float32x4_t *)(v7 + 88) = v100;
  *(float32x4_t *)(v7 + 56) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v78), (float64x2_t)_Q19);
  *(float32x4_t *)(v7 + 72) = v98;
  if (!*(_BYTE *)(v7 + 356)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/GlobalPlane.cpp", 100, (uint64_t)"result.orientedBoxExtent.has_value()", 36, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !*(_BYTE *)(v7 + 384)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/GlobalPlane.cpp", 101, (uint64_t)"result.convexHullExtent.has_value()", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v67.i32[0] = v8[1].i32[0];
  *(float32x2_t *)v100.f32 = *v8;
  v100.i32[2] = v67.i32[0];
  v67.i32[0] = vadd_f32(*(float32x2_t *)v67.i8, vmla_lane_f32(vmul_f32(*v8, 0), 0, *v8, 1)).u32[0];
  v101 = fabsf(*(float *)v67.i32);
  if (v101 >= a2[1])
  {
    if (*(float *)v67.i32 <= 0.0)
      *(float *)v78.i32 = -1.0;
    else
      *(float *)v78.i32 = 1.0;
    v133 = v13[2];
    *(float32x2_t *)v67.i8 = vadd_f32(*v13, v133);
    v66.f32[0] = 0.5 * *(float *)v67.i32;
    *(float *)_Q19.i32 = vmuls_lane_f32(0.5, *(float32x2_t *)v67.i8, 1);
    v99.i64[0] = *(_QWORD *)(v7 + 40);
    v67.i32[0] = *(_DWORD *)(v7 + 48);
    v132 = *(double *)(v7 + 56);
    v133.i32[0] = *(_DWORD *)(v7 + 64);
    v134 = *(double *)(v7 + 72);
    v98.i32[0] = *(_DWORD *)(v7 + 80);
    *(float32x2_t *)v135.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v99.f32, v66.f32[0]), *(float32x2_t *)&v132, *(float *)_Q19.i32), 0, *(float32x2_t *)&v134);
    *(float32x2_t *)&v135.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v66.f32), *(float32x2_t *)_Q19.i8, v133), 0, *(float32x2_t *)v98.f32);
    v66.i64[0] = *(_QWORD *)(v7 + 88);
    v66.i32[2] = *(_DWORD *)(v7 + 96);
    v136 = (int8x16_t)vaddq_f32(v66, v135);
    LODWORD(v191) = v136.i32[2];
    __p = (void *)v136.i64[0];
    *(_QWORD *)((char *)&v191 + 4) = 0;
    _Q19.i64[0] = 0;
    v137 = (float32x4_t)_Q19;
    v137.i32[2] = v78.i32[0];
    HIDWORD(v191) = v78.i32[0];
    v138 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32), (float32x2_t)vdup_lane_s32(0, 1), 0, 1), *(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8).f32[0];
    v139 = v138 + -1.0;
    if (v138 < 1.0)
      v139 = 1.0 - v138;
    v140 = v139 <= 0.000001 || v138 == 1.0;
    *(float *)_Q16.i32 = 1.0 / sqrtf(v138);
    v141 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)_Q16.i8, 0);
    v142 = (float32x2_t)vextq_s8(v136, v136, 8uLL).u64[0];
    v143 = a2[3];
    if (v140)
      v144 = -1;
    else
      v144 = 0;
    __asm { FMOV            V19.4S, #1.0 }
    v145 = (int8x16_t)vmulq_f32(v137, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v144), _Q19, v141));
    *(int32x2_t *)_Q19.i8 = vdup_lane_s32(*(int32x2_t *)v145.i8, 1);
    v146 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v136.i8, *(float32x2_t *)v145.i8), *(float32x2_t *)_Q19.i8, *(float32x2_t *)v136.i8, 1);
    v147 = (float32x2_t)vextq_s8(v145, v145, 8uLL).u64[0];
    v148 = vmla_f32(v146, v147, v142);
    v137.i32[0] = *(_DWORD *)(v7 + 324);
    v142.i32[0] = *(_DWORD *)(v7 + 328);
    *(float32x2_t *)v149.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v99.f32, v137.f32[0]), *(float32x2_t *)&v132, v142.f32[0]), 0, *(float32x2_t *)&v134);
    *(float32x2_t *)&v149.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v137.f32), v142, v133), 0, *(float32x2_t *)v98.f32);
    v150 = (int8x16_t)vaddq_f32(v66, v149);
    v151 = (float32x2_t)vextq_s8(v150, v150, 8uLL).u64[0];
    v152 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v150.i8, *(float32x2_t *)v145.i8), *(float32x2_t *)_Q19.i8, *(float32x2_t *)v150.i8, 1), v147, v151);
    *(float *)v150.i32 = vsub_f32(v152, v148).f32[0];
    v153 = *(float *)v150.i32 <= v143;
    if (*(float *)v150.i32 <= v143)
    {
      v151.i32[0] = *(_DWORD *)(v7 + 332);
      v152.i32[0] = *(_DWORD *)(v7 + 336);
      *(float32x2_t *)v154.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v99.f32, v151.f32[0]), *(float32x2_t *)&v132, v152.f32[0]), 0, *(float32x2_t *)&v134);
      *(float32x2_t *)&v154.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v67.i8, v151), v152, v133), 0, *(float32x2_t *)v98.f32);
      v155 = (int8x16_t)vaddq_f32(v66, v154);
      v156 = (float32x2_t)vextq_s8(v155, v155, 8uLL).u64[0];
      v157 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v155.i8, *(float32x2_t *)v145.i8), *(float32x2_t *)_Q19.i8, *(float32x2_t *)v155.i8, 1), v147, v156), v148);
      v153 = v157.f32[0] <= v143;
      if (v157.f32[0] <= v143)
      {
        v157.i32[0] = *(_DWORD *)(v7 + 340);
        v156.i32[0] = *(_DWORD *)(v7 + 344);
        *(float32x2_t *)v158.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v99.f32, v157.f32[0]), *(float32x2_t *)&v132, v156.f32[0]), 0, *(float32x2_t *)&v134);
        *(float32x2_t *)&v158.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v67.i8, v157), v156, v133), 0, *(float32x2_t *)v98.f32);
        v159 = (int8x16_t)vaddq_f32(v66, v158);
        v160 = (float32x2_t)vextq_s8(v159, v159, 8uLL).u64[0];
        v161 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v159.i8, *(float32x2_t *)v145.i8), *(float32x2_t *)_Q19.i8, *(float32x2_t *)v159.i8, 1), v147, v160), v148);
        v153 = v161.f32[0] <= v143;
        if (v161.f32[0] <= v143)
        {
          v161.i32[0] = *(_DWORD *)(v7 + 348);
          v160.i32[0] = *(_DWORD *)(v7 + 352);
          v162 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v99.f32, v161.f32[0]), *(float32x2_t *)&v132, v160.f32[0]);
          v132 = 0.0;
          *(float32x2_t *)v99.f32 = vmla_f32(v162, 0, *(float32x2_t *)&v134);
          *(float32x2_t *)&v99.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v67.i8, v161), v160, v133), 0, *(float32x2_t *)v98.f32);
          v67 = (int8x16_t)vaddq_f32(v66, v99);
          v133 = (float32x2_t)vextq_s8(v67, v67, 8uLL).u64[0];
          *(float32x2_t *)v98.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v145.i8), *(float32x2_t *)_Q19.i8, *(float32x2_t *)v67.i8, 1), v147, v133);
          *(float32x2_t *)v67.i8 = vsub_f32(*(float32x2_t *)v98.f32, v148);
          v153 = *(float *)v67.i32 <= v143;
        }
      }
    }
    if (v153)
    {
      sub_2236ABB0C(v7, (uint64_t)&__p, 1, *(double *)v100.i64, *(double *)v67.i64, *(double *)&v133, *(double *)v98.i64, v99, v132, v134, v66);
      goto LABEL_125;
    }
LABEL_124:
    v67.i64[0] = *(_QWORD *)(v7 + 16);
    v67.i32[2] = *(_DWORD *)(v7 + 24);
    *(_BYTE *)(v7 + 104) = 4;
    v163 = (int8x16_t)vcvt_hight_f64_f32(v100);
    v164 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v100.f32);
    v165.f64[1] = 1.0;
    _Q6 = (float64x2_t)vextq_s8(v164, v163, 8uLL);
    v167 = v163.i64[0];
    v163.i64[1] = v164.i64[0];
    _Q19.i64[0] = 0x8000000000000000;
    v168 = vmlaq_f64(vmulq_laneq_f64((float64x2_t)_Q19, (float64x2_t)v164, 1), (float64x2_t)v164, (float64x2_t)0);
    _Q18 = vmlaq_f64(vmulq_f64((float64x2_t)v163, (float64x2_t)xmmword_2245D2420), _Q6, (float64x2_t)xmmword_2245F5CB0);
    _Q16 = vmulq_f64(_Q18, _Q18);
    _D17 = _Q18.f64[1];
    __asm { FMLA            D16, D17, V18.D[1] }
    _Q16.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q16.f64[0], v168.f64[0], v168.f64[0]));
    v172 = (int8x16_t)vmulq_f64(v168, _Q16);
    v173 = (int8x16_t)vmulq_n_f64(_Q18, _Q16.f64[0]);
    v174 = (float64x2_t)vextq_s8(v173, v172, 8uLL);
    v172.i64[1] = v173.i64[0];
    _Q7 = vmlsq_f64(vmulq_f64((float64x2_t)v163, v174), _Q6, (float64x2_t)v172);
    v176 = vmlsq_laneq_f64(vmulq_laneq_f64((float64x2_t)v173, (float64x2_t)v164, 1), (float64x2_t)v164, (float64x2_t)v173, 1);
    _Q5 = vmulq_f64(_Q7, _Q7);
    _Q6.f64[0] = _Q7.f64[1];
    __asm { FMLA            D5, D6, V7.D[1] }
    _Q5.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], v176.f64[0], v176.f64[0]));
    *(_QWORD *)&v165.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32((float32x4_t)v67);
    *(float32x4_t *)(v7 + 72) = vcvt_hight_f32_f64(*(int32x2_t *)v100.f32, (float64x2_t)(unint64_t)v167);
    *(float32x4_t *)(v7 + 88) = vcvt_hight_f32_f64(*(int32x2_t *)v67.i8, v165);
    *(float32x4_t *)(v7 + 56) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v173), (float64x2_t)v172.u64[0]);
    *(float32x4_t *)(v7 + 40) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(_Q7, _Q5.f64[0])), (float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(v176, _Q5));
    goto LABEL_125;
  }
  if (v101 > a2[2])
    goto LABEL_124;
  v102 = (int8x16_t)vmlaq_n_f32(v100, (float32x4_t)xmmword_224649840, *(float *)v67.i32);
  v103 = (float32x2_t)vextq_s8(v102, v102, 8uLL).u64[0];
  *(float *)_Q19.i32 = 1.0
                     / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v102.i8, 1), *(float32x2_t *)v102.i8, 1), v103, v103).f32[0]);
  v105 = v13[2];
  *(float32x2_t *)v67.i8 = vadd_f32(*v13, v105);
  v66.f32[0] = 0.5 * *(float *)v67.i32;
  *(float *)v79.i32 = vmuls_lane_f32(0.5, *(float32x2_t *)v67.i8, 1);
  v99.i64[0] = *(_QWORD *)(v7 + 40);
  v67.i32[0] = *(_DWORD *)(v7 + 48);
  v104 = *(double *)(v7 + 56);
  v105.i32[0] = *(_DWORD *)(v7 + 64);
  v106 = *(double *)(v7 + 72);
  v98.i32[0] = *(_DWORD *)(v7 + 80);
  *(float32x2_t *)v107.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v99.f32, v66.f32[0]), *(float32x2_t *)&v104, *(float *)v79.i32), 0, *(float32x2_t *)&v106);
  *(float32x2_t *)&v107.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v66.f32), *(float32x2_t *)v79.i8, v105), 0, *(float32x2_t *)v98.f32);
  v108 = (int8x16_t)vmulq_n_f32((float32x4_t)v102, *(float *)_Q19.i32);
  v66.i64[0] = *(_QWORD *)(v7 + 88);
  v66.i32[2] = *(_DWORD *)(v7 + 96);
  v109 = (int8x16_t)vaddq_f32(v66, v107);
  LODWORD(v191) = v109.i32[2];
  __p = (void *)v109.i64[0];
  HIDWORD(v191) = v108.i32[2];
  *(_QWORD *)((char *)&v191 + 4) = v108.i64[0];
  *(float *)_Q19.i32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v108.i8), vmul_lane_f32(*(float32x2_t *)_Q19.i8, *(float32x2_t *)v102.i8, 1), *(float32x2_t *)v108.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL), vmul_f32(v103, *(float32x2_t *)_Q19.i8)).f32[0];
  v110 = *(float *)_Q19.i32 + -1.0;
  if (*(float *)_Q19.i32 < 1.0)
    v110 = 1.0 - *(float *)_Q19.i32;
  _ZF = v110 <= 0.000001 || *(float *)_Q19.i32 == 1.0;
  *(float *)_Q16.i32 = 1.0 / sqrtf(*(float *)_Q19.i32);
  v112 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)_Q16.i8, 0);
  v113 = (float32x2_t)vextq_s8(v109, v109, 8uLL).u64[0];
  v114 = a2[3];
  v115 = _ZF ? -1 : 0;
  __asm { FMOV            V19.4S, #1.0 }
  v116 = (int8x16_t)vmulq_f32((float32x4_t)v108, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v115), _Q19, v112));
  *(int32x2_t *)_Q19.i8 = vdup_lane_s32(*(int32x2_t *)v116.i8, 1);
  v117 = (float32x2_t)vextq_s8(v116, v116, 8uLL).u64[0];
  v118 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v116.i8), *(float32x2_t *)_Q19.i8, *(float32x2_t *)v109.i8, 1), v117, v113);
  v109.i32[0] = *(_DWORD *)(v7 + 324);
  v113.i32[0] = *(_DWORD *)(v7 + 328);
  *(float32x2_t *)v119.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v99.f32, *(float *)v109.i32), *(float32x2_t *)&v104, v113.f32[0]), 0, *(float32x2_t *)&v106);
  *(float32x2_t *)&v119.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v109.i8), v113, v105), 0, *(float32x2_t *)v98.f32);
  v120 = (int8x16_t)vaddq_f32(v66, v119);
  v121 = (float32x2_t)vextq_s8(v120, v120, 8uLL).u64[0];
  v122 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v116.i8), *(float32x2_t *)_Q19.i8, *(float32x2_t *)v120.i8, 1), v117, v121), v118);
  v123 = v122.f32[0] <= v114;
  if (v122.f32[0] <= v114)
  {
    v122.i32[0] = *(_DWORD *)(v7 + 332);
    v121.i32[0] = *(_DWORD *)(v7 + 336);
    *(float32x2_t *)v124.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v99.f32, v122.f32[0]), *(float32x2_t *)&v104, v121.f32[0]), 0, *(float32x2_t *)&v106);
    *(float32x2_t *)&v124.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v67.i8, v122), v121, v105), 0, *(float32x2_t *)v98.f32);
    v125 = (int8x16_t)vaddq_f32(v66, v124);
    v126 = (float32x2_t)vextq_s8(v125, v125, 8uLL).u64[0];
    v127 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v116.i8), *(float32x2_t *)_Q19.i8, *(float32x2_t *)v125.i8, 1), v117, v126);
    *(float *)v125.i32 = vsub_f32(v127, v118).f32[0];
    v123 = *(float *)v125.i32 <= v114;
    if (*(float *)v125.i32 <= v114)
    {
      v126.i32[0] = *(_DWORD *)(v7 + 340);
      v127.i32[0] = *(_DWORD *)(v7 + 344);
      *(float32x2_t *)v128.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v99.f32, v126.f32[0]), *(float32x2_t *)&v104, v127.f32[0]), 0, *(float32x2_t *)&v106);
      *(float32x2_t *)&v128.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v67.i8, v126), v127, v105), 0, *(float32x2_t *)v98.f32);
      v129 = (int8x16_t)vaddq_f32(v66, v128);
      v130 = (float32x2_t)vextq_s8(v129, v129, 8uLL).u64[0];
      v131 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v129.i8, *(float32x2_t *)v116.i8), *(float32x2_t *)_Q19.i8, *(float32x2_t *)v129.i8, 1), v117, v130), v118);
      v123 = v131.f32[0] <= v114;
      if (v131.f32[0] <= v114)
      {
        v131.i32[0] = *(_DWORD *)(v7 + 348);
        v130.i32[0] = *(_DWORD *)(v7 + 352);
        *(float32x2_t *)v99.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v99.f32, v131.f32[0]), *(float32x2_t *)&v104, v130.f32[0]), 0, *(float32x2_t *)&v106);
        *(float32x2_t *)&v99.u32[2] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v67.i8, v131), v130, v105), 0, *(float32x2_t *)v98.f32);
        v67 = (int8x16_t)vaddq_f32(v66, v99);
        v105 = (float32x2_t)vextq_s8(v67, v67, 8uLL).u64[0];
        *(float32x2_t *)v98.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v116.i8), *(float32x2_t *)_Q19.i8, *(float32x2_t *)v67.i8, 1), v117, v105);
        *(float32x2_t *)v67.i8 = vsub_f32(*(float32x2_t *)v98.f32, v118);
        v123 = *(float *)v67.i32 <= v114;
      }
    }
  }
  if (!v123)
    goto LABEL_124;
  sub_2236ABB0C(v7, (uint64_t)&__p, 2, *(double *)v100.i64, *(double *)v67.i64, *(double *)&v105, *(double *)v98.i64, v99, v104, v106, v66);
LABEL_125:
  *(_WORD *)(v7 + 456) = *(unsigned __int8 *)(v6 + 48) | 0x100;
}

void sub_2236AAFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_22317C838((void **)va);
  sub_223248D8C(a7);
  _Unwind_Resume(a1);
}

void sub_2236AB014(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223248D8C(v1);
  _Unwind_Resume(a1);
}

void sub_2236AB028(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223248D8C(v1);
  _Unwind_Resume(a1);
}

void sub_2236AB03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_22317C838(&a20);
  sub_223248D8C(a14);
  _Unwind_Resume(a1);
}

void sub_2236AB088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;

  if (v28)
  {
    a28 = (uint64_t)v28;
    operator delete(v28);
  }
  sub_22317C838(&a20);
  sub_223248D8C(a14);
  _Unwind_Resume(a1);
}

uint64_t sub_2236AB0C4(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  size_t v8;

  if (*(_BYTE *)(a1 + 24))
  {
    if ((char **)a1 != a2)
      sub_2233320C8((_QWORD *)a1, *a2, a2[1], (a2[1] - *a2) >> 3);
    return a1;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *a2;
    v4 = a2[1];
    v6 = v4 - *a2;
    if (v4 != *a2)
    {
      if (v6 < 0)
        sub_22316E078();
      v7 = (char *)operator new(v4 - *a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v7[8 * (v6 >> 3)];
      v8 = v6 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v7, v5, v8);
      *(_QWORD *)(a1 + 8) = &v7[v8];
    }
    *(_BYTE *)(a1 + 24) = 1;
    return a1;
  }
}

void sub_2236AB188(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2236AB1A4(unsigned __int8 *a1, const void **a2)
{
  _OWORD *v4;
  float32x4_t v5;
  __int128 v6;
  double v7;
  float32x4_t v8;
  void *__p;
  __int128 v10;
  _OWORD v11[2];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_2245664AC(a1, v11);
  v4 = operator new(0x28uLL);
  __p = v4;
  v10 = xmmword_2245C4640;
  v5 = (float32x4_t)v11[0];
  v6 = v11[1];
  *v4 = v11[0];
  v4[1] = v6;
  *((_DWORD *)v4 + 8) = v12;
  *((_BYTE *)v4 + 36) = 0;
  sub_2236AB284((uint64_t)a1, (uint64_t)&__p, a2, a1[48], 0, 0, v5, *(double *)&v6, v7, v8);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_2236AB25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2236AB284(uint64_t a1, uint64_t a2, const void **a3, __int16 a4, uint64_t a5, char a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  float64x2_t v10;
  float64x2_t v17;
  int8x16_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v24;
  int8x16_t v32;
  int8x16_t v33;
  float64x2_t v35;
  int8x16_t v36;
  unint64_t v38;
  float64x2_t v40;
  int64x2_t v41;
  int8x16_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v48;
  float64x2_t v50;
  uint64_t v52;
  unint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  unsigned __int8 v62;
  double v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  char *v72;
  _QWORD *v73;
  void *v74;
  char *v75;
  void *v76;
  void *v77;
  int v78;
  uint64_t v79;
  int32x2_t v80;
  float32x2_t v81;
  void **v82;
  float32x2_t v83;
  void *v84;
  void *v85;
  unint64_t v86;
  float v87;
  float v88;
  float v89;
  void *v90;
  float32x2_t v91;
  unint64_t v92;
  int v93;
  _OWORD v94[4];
  void *__p[128];

  a7.i64[0] = *(_QWORD *)(a1 + 120);
  a10.i64[0] = *(_QWORD *)(a1 + 132);
  a10.i32[2] = *(_DWORD *)(a1 + 140);
  v17 = vcvt_hight_f64_f32(a10);
  v18 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)a10.f32);
  v19 = (float64x2_t)vextq_s8(v18, v18, 8uLL);
  v20.f64[1] = 1.0;
  if (fabsf(*(float *)(a1 + 140)) >= 0.99863)
  {
    *(_QWORD *)&v40.f64[0] = v18.i64[0];
    v40.f64[1] = v19.f64[0];
    v41 = (int64x2_t)vmulq_f64(v40, (float64x2_t)0);
    _Q20.f64[0] = v17.f64[0];
    *(_QWORD *)&_Q20.f64[1] = v41.i64[0];
    _Q19 = (float64x2_t)vdupq_laneq_s64(v41, 1);
    v43 = (int8x16_t)vmulq_f64(v40, (float64x2_t)xmmword_2245F5CB0);
    v44 = (float64x2_t)vextq_s8(v43, (int8x16_t)vmulq_f64(v17, (float64x2_t)0), 8uLL);
    v45 = vsubq_f64(_Q19, (float64x2_t)v43);
    _Q17 = vsubq_f64(_Q20, v44);
    _Q18 = vmulq_f64(_Q17, _Q17);
    _Q19.f64[0] = _Q17.f64[1];
    __asm { FMLA            D18, D19, V17.D[1] }
    _Q18.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q18.f64[0], v45.f64[0], v45.f64[0]));
    v36 = (int8x16_t)vmulq_n_f64(_Q17, _Q18.f64[0]);
    _Q16 = (int8x16_t)vmulq_f64(v45, _Q18);
    _Q18.f64[0] = v19.f64[0];
    _Q18.f64[1] = v17.f64[0];
    _Q20.f64[0] = v17.f64[0];
    *(_QWORD *)&_Q20.f64[1] = v18.i64[0];
    *(_QWORD *)&v48.f64[0] = _Q16.i64[0];
    *(_QWORD *)&v48.f64[1] = v36.i64[0];
    _Q18 = vmlsq_f64(vmulq_f64(_Q18, v48), _Q20, (float64x2_t)vextq_s8(v36, _Q16, 8uLL));
    v50 = vmlsq_f64(vmulq_laneq_f64((float64x2_t)v18, (float64x2_t)v36, 1), v19, (float64x2_t)v36);
    _D21 = _Q18.f64[1];
    __asm { FMLA            D20, D21, V18.D[1] }
    _Q19.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q20.f64[0], v50.f64[0], v50.f64[0]));
    v32 = (int8x16_t)vmulq_n_f64(_Q18, _Q19.f64[0]);
    v33 = vextq_s8(v32, (int8x16_t)vmulq_f64(v50, _Q19), 8uLL);
    *(_QWORD *)&_Q19.f64[0] = vextq_s8(v33, v33, 8uLL).u64[0];
    v38 = vextq_s8(v36, v36, 8uLL).u64[0];
  }
  else
  {
    v21.f64[0] = v19.f64[0];
    v21.f64[1] = v17.f64[0];
    v22.f64[0] = v17.f64[0];
    *(_QWORD *)&v22.f64[1] = v18.i64[0];
    v10.f64[0] = -0.0;
    _Q21 = vmlaq_f64(vmulq_f64(v22, (float64x2_t)xmmword_2245D2420), v21, (float64x2_t)xmmword_2245F5CB0);
    v24 = vmlaq_f64(vmulq_f64(v19, v10), (float64x2_t)v18, (float64x2_t)0);
    _Q18 = vmulq_f64(_Q21, _Q21);
    _D19 = _Q21.f64[1];
    __asm { FMLA            D18, D19, V21.D[1] }
    _Q18.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q18.f64[0], v24.f64[0], v24.f64[0]));
    _Q22 = (int8x16_t)vmulq_f64(v24, _Q18);
    v32 = (int8x16_t)vmulq_n_f64(_Q21, _Q18.f64[0]);
    v33 = vextq_s8(v32, _Q22, 8uLL);
    _Q22.i64[1] = v32.i64[0];
    _Q17 = vmlsq_f64(vmulq_f64(v22, (float64x2_t)v33), v21, (float64x2_t)_Q22);
    v35 = vmlsq_laneq_f64(vmulq_f64(v19, (float64x2_t)v32), (float64x2_t)v18, (float64x2_t)v32, 1);
    _Q16 = (int8x16_t)vmulq_f64(_Q17, _Q17);
    _Q22.i64[0] = *(_QWORD *)&_Q17.f64[1];
    __asm { FMLA            D16, D22, V17.D[1] }
    *(double *)_Q16.i64 = 1.0 / sqrt(vmlad_n_f64(*(double *)_Q16.i64, v35.f64[0], v35.f64[0]));
    v36 = (int8x16_t)vmulq_n_f64(_Q17, *(double *)_Q16.i64);
    _Q16.i64[0] = *(_OWORD *)&vmulq_f64(v35, (float64x2_t)_Q16);
    v38 = vextq_s8(v36, v36, 8uLL).u64[0];
    *(_QWORD *)&_Q19.f64[0] = vextq_s8(v33, v33, 8uLL).u64[0];
  }
  v32.i64[1] = v33.i64[0];
  v18.i64[1] = *(_QWORD *)&v19.f64[0];
  v36.i64[1] = v38;
  _Q16.i64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
  *(_QWORD *)&_Q19.f64[1] = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL).u64[0];
  a7.i32[2] = *(_DWORD *)(a1 + 128);
  *(_QWORD *)&v17.f64[1] = vextq_s8((int8x16_t)xmmword_224690B50, (int8x16_t)xmmword_224690B50, 8uLL).u64[0];
  *(_QWORD *)&v20.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32(a7);
  v94[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v36), (float64x2_t)_Q16);
  v94[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v32), _Q19);
  v94[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v18), v17);
  v94[3] = vcvt_hight_f32_f64(*(int32x2_t *)a7.f32, v20);
  v53 = sub_22456636C((unsigned __int8 *)a1) % 0xFFuLL;
  v62 = atomic_load((unsigned __int8 *)&qword_255795018);
  if ((v62 & 1) == 0)
  {
    v86 = v53;
    v78 = __cxa_guard_acquire(&qword_255795018);
    v53 = v86;
    if (v78)
    {
      bzero(__p, 0x3FCuLL);
      v79 = 0;
      v80 = (int32x2_t)0x100000000;
      v81 = (float32x2_t)vdup_n_s32(0x3E924745u);
      do
      {
        v82 = &__p[v79];
        v83 = vmul_f32(vcvt_f32_s32(v80), v81);
        v87 = v83.f32[0];
        v91 = vmul_f32(vcvt_f32_s32(vadd_s32(v80, (int32x2_t)0x200000002)), v81);
        v89 = fmodf(v83.f32[1], 1.0);
        *(float *)&v84 = fmodf(v87, 1.0);
        *((float *)&v84 + 1) = v89;
        v90 = v84;
        v88 = fmodf(v91.f32[1], 1.0);
        *(float *)&v85 = fmodf(v91.f32[0], 1.0);
        *((float *)&v85 + 1) = v88;
        *v82 = v90;
        v82[1] = v85;
        v80 = vadd_s32(v80, (int32x2_t)0x400000004);
        v79 += 2;
      }
      while (v79 != 126);
      __p[126] = (void *)0x3E906F003F7F1400;
      LODWORD(__p[127]) = 1058102016;
      memcpy(dword_255794C18, __p, 0x3FCuLL);
      __cxa_guard_release(&qword_255795018);
      v53 = v86;
    }
  }
  LODWORD(v54) = dword_255794C18[v53];
  LODWORD(v55) = dword_255794C18[(unsigned __int16)(2 * v53 + 85) % 0xFFu];
  LODWORD(v56) = dword_255794C18[(unsigned __int16)(3 * v53 + 170) % 0xFFu];
  v92 = __PAIR64__(LODWORD(v55), LODWORD(v54));
  v93 = LODWORD(v56);
  if (*(_BYTE *)(a1 + 112))
  {
    v63 = sub_2236AB790((void ****)(a1 + 88), (uint64_t)__p, 0.00097656);
    sub_223739E78(0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3), (uint64_t)__p[0], (float32x2_t *)v94, a2, a4, (uint64_t)&v92, a3, v64, v63, v65, v66, v67, v68, v69, v70, v71, *(double *)&a5, a6);
    v72 = (char *)__p[0];
    if (__p[0])
    {
      v73 = __p[1];
      v74 = __p[0];
      if (__p[1] != __p[0])
      {
        v75 = (char *)__p[1];
        do
        {
          v77 = (void *)*((_QWORD *)v75 - 3);
          v75 -= 24;
          v76 = v77;
          if (v77)
          {
            *(v73 - 2) = v76;
            operator delete(v76);
          }
          v73 = v75;
        }
        while (v75 != v72);
        v74 = __p[0];
      }
      __p[1] = v72;
      operator delete(v74);
    }
  }
  else if (*(_BYTE *)(a1 + 80))
  {
    sub_223739844((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3, *(float32x2_t **)(a1 + 56), (float32x2_t *)v94, a2, a4, (uint64_t *)&v92, a3, v52, v54, v55, v56, v57, v58, v59, v60, v61, *(double *)&a5, a6);
  }
  sub_22373A3E0((float32x2_t *)v94, a2, a3, a5, a6);
}

void sub_2236AB77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  sub_22317C838(&a29);
  _Unwind_Resume(a1);
}

double sub_2236AB790@<D0>(void ****a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v6;
  void ***v7;
  void ***i;
  uint64_t v9;
  double result;
  __int128 v11;
  unint64_t v12;
  void *__p[2];
  uint64_t v14;

  v6 = a1[1] - *a1;
  v12 = 0;
  v11 = 0uLL;
  sub_2236ADBC8((uint64_t)&v11, 0xAAAAAAAAAAAAAAABLL * v6);
  v7 = *a1;
  for (i = a1[1]; v7 != i; v7 += 3)
  {
    while (1)
    {
      sub_2236ADE38(v7, (uint64_t)__p, a3);
      v9 = *((_QWORD *)&v11 + 1);
      if (*((_QWORD *)&v11 + 1) >= v12)
        break;
      **((_QWORD **)&v11 + 1) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_OWORD *)v9 = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 16) = v14;
      *((_QWORD *)&v11 + 1) = v9 + 24;
      v7 += 3;
      if (v7 == i)
        goto LABEL_8;
    }
    *((_QWORD *)&v11 + 1) = sub_2236ADCEC((char **)&v11, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
LABEL_8:
  result = *(double *)&v11;
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = v12;
  return result;
}

void sub_2236AB88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  sub_22317C838((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_2236AB8C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, unint64_t a4@<D3>, int8x16_t a5@<Q4>, int8x16_t a6@<Q5>, double a7@<D7>)
{
  int32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float v12;
  float v13;
  int8x16_t v14;
  float32x2_t v15;
  int32x4_t v16;
  float32x2_t v17;
  float v18;
  float v19;
  int8x16_t v20;
  float32x2_t v21;
  int8x16_t v22;
  float32x2_t v23;
  float v24;
  int8x16_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  float32x4_t v30;
  double v31;
  double v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  __int32 v36;
  int v37;
  int v38;
  int v39;

  if (*(_BYTE *)(a1 + 104) == 1)
  {
    sub_223249DC0(a3, a1);
    return;
  }
  v8.i64[0] = *(_QWORD *)(a2 + 48);
  v8.i32[2] = *(_DWORD *)(a2 + 56);
  LODWORD(a4) = *(_DWORD *)(a1 + 36);
  a6.i64[0] = *(_QWORD *)(a1 + 28);
  v9 = a6;
  v9.i32[2] = a4;
  v10 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.i8, 1);
  v11 = vaddq_f32(v8, (float32x4_t)xmmword_224649840);
  v12 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)a6.i8), v10, *(float32x2_t *)a6.i8, 1), (float32x2_t)a4, (float32x2_t)a4).f32[0];
  if (v12 == 1.0 || (v12 >= 1.0 ? (v13 = v12 + -1.0) : (v13 = 1.0 - v12), v13 <= 0.000001))
  {
    a6.i32[0] = *(_DWORD *)(a1 + 24);
    *(float *)&a4 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 16), *(float32x2_t *)v9.i8), v10, *(float32x2_t *)(a1 + 16), 1), (float32x2_t)a4, *(float32x2_t *)a6.i8).f32[0];
  }
  else
  {
    *(float *)&a7 = 1.0 / sqrtf(v12);
    v14 = (int8x16_t)vmulq_n_f32((float32x4_t)v9, *(float *)&a7);
    a5.i64[0] = *(_QWORD *)(a1 + 16);
    a5.i32[2] = *(_DWORD *)(a1 + 24);
    v15 = vmul_lane_f32(*(float32x2_t *)&a7, *(float32x2_t *)a6.i8, 1);
    *(float32x2_t *)v7.i8 = vmul_f32((float32x2_t)a4, *(float32x2_t *)&a7);
    v16.i64[0] = v14.i64[0];
    v16.u64[1] = (unint64_t)v15;
    v9 = (int8x16_t)vuzp1q_s32(v16, v7);
    v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1);
    a4 = vextq_s8(v14, v14, 8uLL).u64[0];
    v18 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), v15, *(float32x2_t *)v14.i8, 1), (float32x2_t)a4, *(float32x2_t *)v7.i8).f32[0];
    if (v18 == 1.0 || (v18 >= 1.0 ? (v19 = v18 + -1.0) : (v19 = 1.0 - v18), v19 <= 0.000001))
    {
      *(float *)&a4 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v14.i8), v17, *(float32x2_t *)a5.i8, 1), (float32x2_t)a4, (float32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL)).f32[0];
      goto LABEL_16;
    }
    *(float *)v9.i32 = sqrtf(v18);
    v20 = (int8x16_t)vmulq_n_f32((float32x4_t)v14, 1.0 / *(float *)v9.i32);
    v21 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)v20.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1), *(float32x2_t *)a5.i8, 1);
    a4 = vextq_s8(v20, v20, 8uLL).u64[0];
    *(float *)&a4 = -vmla_f32(v21, (float32x2_t)a4, (float32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL)).f32[0];
    v9 = (int8x16_t)vdivq_f32((float32x4_t)v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0));
  }
  v14 = v9;
LABEL_16:
  v22 = (int8x16_t)vsubq_f32(v11, v8);
  v23 = (float32x2_t)vextq_s8(v9, v9, 8uLL).u64[0];
  LODWORD(v24) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1), *(float32x2_t *)v9.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), v23).u32[0];
  if (fabsf(v24) >= 0.00000011921)
  {
    *(float *)&a4 = -*(float *)&a4;
    v25 = (int8x16_t)vmlsq_lane_f32(v8, (float32x4_t)v14, (float32x2_t)a4, 0);
    v8 = vmlaq_n_f32(v8, (float32x4_t)v22, (float)-vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v25.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1), *(float32x2_t *)v25.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), v23).f32[0]/ v24);
  }
  v34 = v8;
  v26 = sub_223249DC0(a3, a1);
  v36 = v34.i32[2];
  v35 = v34.i64[0];
  v37 = 0;
  v38 = 0;
  v39 = 1065353216;
  sub_2236ABB0C(v26, (uint64_t)&v35, 1, *(double *)v34.i64, v27, v28, v29, v30, v31, v32, v33);
}

void sub_2236ABAF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223248D8C(v1);
  _Unwind_Resume(a1);
}

void sub_2236ABB0C(uint64_t a1, uint64_t a2, char a3, double a4, double a5, double a6, double a7, float32x4_t a8, double a9, double a10, float32x4_t a11)
{
  float32x2_t v11;
  float64x2_t v12;
  uint64_t v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  float v29;
  float32x2_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int v35;
  int v36;
  float v37;
  int8x16_t v38;
  float v39;
  BOOL v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v51;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v61;
  float64x2_t v62;
  unint64_t v64;
  float64x2_t v66;
  int64x2_t v67;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v74;
  float64x2_t v76;
  float32x2_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x2_t *v87;
  unint64_t v88;
  float32x2_t *v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  int v93;
  __int128 v94;
  uint64_t v95;
  float *v96;
  float *v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  int v104;
  unint64_t v105;
  float **v106;
  float **i;
  char *v108;
  char *v109;
  char *v110;
  unint64_t v111;
  void **v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *v117;
  void *v118;
  int v119;
  _BYTE __p[24];
  uint64_t v121;
  _OWORD v122[4];
  float32x2_t *v123;
  char *v124;
  unint64_t v125;
  uint64_t v126[2];

  v126[1] = *MEMORY[0x24BDAC8D0];
  v14 = a1 + 28;
  v15 = *(float *)(a1 + 28);
  *(_BYTE *)(a1 + 104) = a3;
  v16 = *(float *)(a2 + 12);
  _NF = v15 < v16;
  if (v15 == v16)
    goto LABEL_12;
  v18 = v15 - v16;
  v19 = v16 - v15;
  if (!_NF)
    v19 = v18;
  if (v19 <= 0.000001)
  {
LABEL_12:
    v20 = *(float *)(a1 + 32);
    v21 = *(float *)(a2 + 16);
    v22 = v20 < v21;
    if (v20 == v21)
      goto LABEL_73;
    v23 = v20 - v21;
    v24 = v21 - v20;
    if (!v22)
      v24 = v23;
    if (v24 <= 0.000001)
    {
LABEL_73:
      v25 = *(float *)(a1 + 36);
      v26 = *(float *)(a2 + 20);
      v27 = v25 < v26;
      if (v25 == v26)
        return;
      v28 = v25 - v26;
      v29 = v26 - v25;
      if (!v27)
        v29 = v28;
      if (v29 <= 0.000001)
        return;
    }
  }
  v30 = (float32x2_t *)(a1 + 16);
  a8.i64[0] = *(_QWORD *)(a1 + 16);
  a8.i32[2] = *(_DWORD *)(a1 + 24);
  v31 = *(float32x4_t *)(a1 + 40);
  v32 = *(float32x4_t *)(a1 + 56);
  v33 = *(float32x4_t *)(a1 + 72);
  v34 = *(float32x4_t *)(a1 + 88);
  v35 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = v35;
  v36 = *(_DWORD *)(a2 + 20);
  *(_QWORD *)v14 = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 36) = v36;
  LODWORD(a9) = *(_DWORD *)(a1 + 36);
  a11.i64[0] = *(_QWORD *)(a1 + 28);
  a11.i32[2] = LODWORD(a9);
  v37 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a11.f32, 1), *(float32x2_t *)a11.f32, 1), *(float32x2_t *)&a9, *(float32x2_t *)&a9).f32[0];
  v38 = (int8x16_t)a11;
  if (v37 != 1.0)
  {
    v39 = v37 + -1.0;
    if (v37 < 1.0)
      v39 = 1.0 - v37;
    v40 = v39 > 0.000001;
    v38 = (int8x16_t)a11;
    if (v40)
      v38 = (int8x16_t)vmulq_n_f32(a11, 1.0 / sqrtf(v37));
  }
  v11.i32[0] = *(_DWORD *)(a1 + 24);
  v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1);
  v42 = (float32x2_t)vextq_s8(v38, v38, 8uLL).u64[0];
  v43 = vmlsq_lane_f32(a8, a11, vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a8.f32, *(float32x2_t *)v38.i8), v41, *(float32x2_t *)a8.f32, 1), v42, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL)), vmla_f32(vmla_lane_f32(vmul_f32(*v30, *(float32x2_t *)v38.i8), v41, *v30, 1), v42, v11)), 0);
  *(_DWORD *)(a1 + 24) = v43.i32[2];
  *v30 = *(float32x2_t *)v43.f32;
  v44 = vcvt_hight_f64_f32(a11);
  v45 = vcvtq_f64_f32(*(float32x2_t *)a11.f32);
  v46 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
  v47.f64[1] = 1.0;
  if (fabsf(*(float *)&a9) >= 0.99863)
  {
    v66.f64[0] = v45.f64[0];
    v66.f64[1] = v46.f64[0];
    v67 = (int64x2_t)vmulq_f64(v66, (float64x2_t)0);
    _Q24.f64[0] = v44.f64[0];
    *(_QWORD *)&_Q24.f64[1] = v67.i64[0];
    _Q23 = (float64x2_t)vdupq_laneq_s64(v67, 1);
    v69 = vmulq_f64(v66, (float64x2_t)xmmword_2245F5CB0);
    v70 = (float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)vmulq_f64(v44, (float64x2_t)0), 8uLL);
    v71 = vsubq_f64(_Q23, v69);
    _Q21 = vsubq_f64(_Q24, v70);
    _Q22 = vmulq_f64(_Q21, _Q21);
    _Q23.f64[0] = _Q21.f64[1];
    __asm { FMLA            D22, D23, V21.D[1] }
    _Q22.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q22.f64[0], v71.f64[0], v71.f64[0]));
    v62 = vmulq_n_f64(_Q21, _Q22.f64[0]);
    _Q20 = vmulq_f64(v71, _Q22);
    _Q22.f64[0] = v46.f64[0];
    _Q22.f64[1] = v44.f64[0];
    _Q24.f64[0] = v44.f64[0];
    _Q24.f64[1] = v45.f64[0];
    v74.f64[0] = _Q20.f64[0];
    v74.f64[1] = v62.f64[0];
    _Q22 = vmlsq_f64(vmulq_f64(_Q22, v74), _Q24, (float64x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)_Q20, 8uLL));
    v76 = vmlsq_f64(vmulq_laneq_f64(v45, v62, 1), v46, v62);
    _D25 = _Q22.f64[1];
    __asm { FMLA            D24, D25, V22.D[1] }
    _Q23.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q24.f64[0], v76.f64[0], v76.f64[0]));
    v58 = vmulq_n_f64(_Q22, _Q23.f64[0]);
    v59 = (float64x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)vmulq_f64(v76, _Q23), 8uLL);
    *(_QWORD *)&_Q23.f64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
    v64 = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
  }
  else
  {
    v48.f64[0] = v46.f64[0];
    v48.f64[1] = v44.f64[0];
    v49.f64[0] = v44.f64[0];
    v49.f64[1] = v45.f64[0];
    v12.f64[0] = -0.0;
    _Q25 = vmlaq_f64(vmulq_f64(v49, (float64x2_t)xmmword_2245D2420), v48, (float64x2_t)xmmword_2245F5CB0);
    v51 = vmlaq_f64(vmulq_f64(v46, v12), v45, (float64x2_t)0);
    _Q22 = vmulq_f64(_Q25, _Q25);
    _D23 = _Q25.f64[1];
    __asm { FMLA            D22, D23, V25.D[1] }
    _Q22.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q22.f64[0], v51.f64[0], v51.f64[0]));
    _Q26 = vmulq_f64(v51, _Q22);
    v58 = vmulq_n_f64(_Q25, _Q22.f64[0]);
    v59 = (float64x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)_Q26, 8uLL);
    _Q26.f64[1] = v58.f64[0];
    _Q21 = vmlsq_f64(vmulq_f64(v49, v59), v48, _Q26);
    v61 = vmlsq_laneq_f64(vmulq_f64(v46, v58), v45, v58, 1);
    _Q20 = vmulq_f64(_Q21, _Q21);
    _Q26.f64[0] = _Q21.f64[1];
    __asm { FMLA            D20, D26, V21.D[1] }
    _Q20.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q20.f64[0], v61.f64[0], v61.f64[0]));
    v62 = vmulq_n_f64(_Q21, _Q20.f64[0]);
    *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vmulq_f64(v61, _Q20);
    v64 = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
    *(_QWORD *)&_Q23.f64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
  }
  v58.f64[1] = v59.f64[0];
  v45.f64[1] = v46.f64[0];
  v78 = (float32x2_t)*(_OWORD *)&vcvt_hight_f64_f32(v43);
  *(_QWORD *)&v62.f64[1] = v64;
  *(_QWORD *)&_Q20.f64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
  *(_QWORD *)&_Q23.f64[1] = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL).u64[0];
  *(_QWORD *)&v44.f64[1] = vextq_s8((int8x16_t)xmmword_224690B50, (int8x16_t)xmmword_224690B50, 8uLL).u64[0];
  *(float32x2_t *)&v47.f64[0] = v78;
  v79 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v45), v44);
  v80 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), _Q23);
  v81 = vcvt_hight_f32_f64(*(int32x2_t *)v43.f32, v47);
  *(float32x4_t *)(a1 + 40) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v62), _Q20);
  *(float32x4_t *)(a1 + 88) = v81;
  *(int32x4_t *)(a1 + 56) = v80;
  *(float32x4_t *)(a1 + 72) = v79;
  v47.f64[0] = *(float64_t *)(a1 + 40);
  LODWORD(v47.f64[1]) = *(_DWORD *)(a1 + 48);
  v80.i64[0] = *(_QWORD *)(a1 + 56);
  v80.i32[2] = *(_DWORD *)(a1 + 64);
  v82.i64[0] = vzip1q_s32((int32x4_t)v47, v80).u64[0];
  v78.i32[0] = *(_DWORD *)(a1 + 80);
  v83 = (int8x16_t)vtrn2q_s32((int32x4_t)v47, v80);
  v83.i32[2] = HIDWORD(*(_QWORD *)(a1 + 72));
  v84 = vzip2q_s32((int32x4_t)v47, v80);
  *(float32x2_t *)v85.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v82.f32, COERCE_FLOAT(v81.i32[0] ^ 0x80000000)), *(float32x2_t *)v83.i8, (float32x2_t)(v81.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)v84.i8, COERCE_FLOAT(v81.i32[2] ^ 0x80000000));
  v84.i32[2] = v78.i32[0];
  v86 = vextq_s8(vextq_s8(v83, v83, 0xCuLL), (int8x16_t)v84, 8uLL);
  v85.i64[1] = __PAIR64__(1.0, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 72), (float32x2_t)(v81.i64[0] ^ 0x8000000080000000)), (float32x2_t)vdup_lane_s32((int32x2_t)(v81.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)(a1 + 72), 1), (float32x2_t)(v81.i64[1] ^ 0xFFFFFFFF80000000), v78).u32[0]);
  v79.i64[0] = __PAIR64__(v86.u32[0], v83.u32[0]);
  v79.i64[1] = v86.u32[1];
  v81.i64[0] = v86.i64[1];
  v81.i64[1] = vdupq_laneq_s32(v84, 2).u32[0];
  v82.i64[1] = *(_QWORD *)(a1 + 72);
  v122[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v31.f32[0]), v79, *(float32x2_t *)v31.f32, 1), v81, v31, 2), v85, v31, 3);
  v122[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v32.f32[0]), v79, *(float32x2_t *)v32.f32, 1), v81, v32, 2), v85, v32, 3);
  v122[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v33.f32[0]), v79, *(float32x2_t *)v33.f32, 1), v81, v33, 2), v85, v33, 3);
  v122[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v34.f32[0]), v79, *(float32x2_t *)v34.f32, 1), v81, v34, 2), v85, v34, 3);
  if (!*(_BYTE *)(a1 + 384))
    goto LABEL_46;
  sub_2236ADF18((void ***)&v123, *(float **)(a1 + 360), *(float **)(a1 + 368), (float32x2_t *)v122);
  v87 = v123;
  v88 = (v124 - (char *)v123) >> 3;
  v126[0] = v88;
  if (!v123
    && v124
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223FBF2F8(v88, v87, 1uLL, v126, (uint64_t)__p);
  v89 = *(float32x2_t **)__p;
  v90 = *(_QWORD *)&__p[8];
  v91 = *(_QWORD *)&__p[16];
  if (*(_BYTE *)(a1 + 384))
  {
    v92 = *(void **)(a1 + 360);
    if (v92)
    {
      *(_QWORD *)(a1 + 368) = v92;
      operator delete(v92);
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
      *(_QWORD *)(a1 + 376) = 0;
    }
    *(_QWORD *)(a1 + 360) = v89;
    *(_QWORD *)(a1 + 368) = v90;
    *(_QWORD *)(a1 + 376) = v91;
  }
  else
  {
    *(_QWORD *)(a1 + 360) = *(_QWORD *)__p;
    *(_QWORD *)(a1 + 368) = v90;
    *(_QWORD *)(a1 + 376) = v91;
    *(_BYTE *)(a1 + 384) = 1;
  }
  sub_22369E650(v90, v89, 0, 0, __p);
  v93 = *(unsigned __int8 *)(a1 + 356);
  *(_QWORD *)(v14 + 296) = *(_QWORD *)__p;
  v94 = *(_OWORD *)&__p[8];
  v95 = v121;
  if (v93)
  {
    *(_OWORD *)(v14 + 304) = *(_OWORD *)&__p[8];
    *(_QWORD *)(v14 + 320) = v95;
    v96 = *(float **)(a1 + 360);
    v97 = *(float **)(a1 + 368);
    if (v96 != v97)
    {
LABEL_33:
      v99 = *v96;
      v98 = v96[1];
      v100 = v98;
      v101 = *v96;
      do
      {
        v102 = *v96;
        v103 = v96[1];
        v96 += 2;
        if (v102 < v101)
          v101 = v102;
        if (v103 < v100)
          v100 = v103;
        if (v99 < v102)
          v99 = v102;
        if (v98 < v103)
          v98 = v103;
      }
      while (v96 != v97);
      v104 = *(unsigned __int8 *)(a1 + 320);
      *(float *)(a1 + 304) = v101;
      *(float *)(a1 + 308) = v100;
      if (v104)
      {
LABEL_44:
        *(float *)(a1 + 312) = v99;
        *(float *)(a1 + 316) = v98;
        if (!v87)
          goto LABEL_46;
        goto LABEL_45;
      }
      goto LABEL_63;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 356) = 1;
    *(_OWORD *)(v14 + 304) = v94;
    *(_QWORD *)(v14 + 320) = v95;
    v96 = *(float **)(a1 + 360);
    v97 = *(float **)(a1 + 368);
    if (v96 != v97)
      goto LABEL_33;
  }
  v99 = 0.0;
  v98 = 0.0;
  v119 = *(unsigned __int8 *)(a1 + 320);
  *(_DWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 308) = 0;
  if (v119)
    goto LABEL_44;
LABEL_63:
  *(_BYTE *)(a1 + 320) = 1;
  *(float *)(a1 + 312) = v99;
  *(float *)(a1 + 316) = v98;
  if (v87)
LABEL_45:
    operator delete(v87);
LABEL_46:
  if (*(_BYTE *)(a1 + 448))
  {
    v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 432) - *(_QWORD *)(a1 + 424)) >> 3);
    v124 = 0;
    v125 = 0;
    v123 = 0;
    sub_2236ADBC8((uint64_t)&v123, v105);
    v106 = *(float ***)(a1 + 424);
    for (i = *(float ***)(a1 + 432); v106 != i; v106 += 3)
    {
      while (1)
      {
        sub_2236ADF18((void ***)__p, *v106, v106[1], (float32x2_t *)v122);
        v108 = v124;
        if ((unint64_t)v124 >= v125)
          break;
        *(_QWORD *)v124 = 0;
        *((_QWORD *)v108 + 1) = 0;
        *((_QWORD *)v108 + 2) = 0;
        *(_OWORD *)v108 = *(_OWORD *)__p;
        *((_QWORD *)v108 + 2) = *(_QWORD *)&__p[16];
        v124 = v108 + 24;
        v106 += 3;
        if (v106 == i)
          goto LABEL_54;
      }
      v124 = sub_2236ADCEC((char **)&v123, (uint64_t)__p);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
    }
LABEL_54:
    v110 = (char *)v123;
    v109 = v124;
    v111 = v125;
    if (*(_BYTE *)(a1 + 448))
    {
      v112 = (void **)(a1 + 424);
      v113 = *(_QWORD *)(a1 + 424);
      if (v113)
      {
        v114 = *(_QWORD *)(a1 + 432);
        v115 = *(void **)(a1 + 424);
        if (v114 != v113)
        {
          v116 = *(_QWORD *)(a1 + 432);
          do
          {
            v118 = *(void **)(v116 - 24);
            v116 -= 24;
            v117 = v118;
            if (v118)
            {
              *(_QWORD *)(v114 - 16) = v117;
              operator delete(v117);
            }
            v114 = v116;
          }
          while (v116 != v113);
          v115 = *v112;
        }
        *(_QWORD *)(a1 + 432) = v113;
        operator delete(v115);
        *v112 = 0;
        *(_QWORD *)(a1 + 432) = 0;
        *(_QWORD *)(a1 + 440) = 0;
      }
      *(_QWORD *)(a1 + 424) = v110;
      *(_QWORD *)(a1 + 432) = v109;
      *(_QWORD *)(a1 + 440) = v111;
    }
    else
    {
      *(_QWORD *)(a1 + 424) = v123;
      *(_QWORD *)(a1 + 432) = v109;
      *(_QWORD *)(a1 + 440) = v111;
      *(_BYTE *)(a1 + 448) = 1;
    }
  }
}

void sub_2236AC2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  if (!v22)
    _Unwind_Resume(exception_object);
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_2236AC308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (__p)
  {
    operator delete(__p);
    sub_22317C838(&a22);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2236AC330);
}

_DWORD *sub_2236AC340@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = result[30];
  if ((v3 & 0x10) != 0)
  {
    v4 = *((_QWORD *)result + 14);
    v5 = *((_QWORD *)result + 9);
    if (v4 < v5)
    {
      *((_QWORD *)result + 14) = v5;
      v4 = v5;
    }
    v6 = (const void *)*((_QWORD *)result + 8);
    v7 = v4 - (_QWORD)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_16;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      a2[23] = 0;
LABEL_4:
      *a2 = 0;
      return result;
    }
    v6 = (const void *)*((_QWORD *)result + 5);
    v7 = *((_QWORD *)result + 7) - (_QWORD)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_16:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v8 = v7 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    *((_QWORD *)a2 + 1) = v7;
    *((_QWORD *)a2 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a2 = v10;
    a2 = v10;
  }
  else
  {
    a2[23] = v7;
    if (!v7)
      goto LABEL_4;
  }
  result = memmove(a2, v6, v7);
  a2[v7] = 0;
  return result;
}

void sub_2236AC438(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_2236AC9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2236AC9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236AC9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2236ACA3C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_2236ACFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2236ACFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236ACFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2236AD040(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_2236AD5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2236AD5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236AD5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2236AD644(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[24];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)v38 = v10;
    *(_QWORD *)&v38[8] = v10;
    *(_QWORD *)&v38[16] = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v39 = 0uLL;
    v40 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = *(_QWORD *)v38;
    v17 = _os_log_pack_fill();
    v18 = *a5;
    *(_DWORD *)v17 = 134217984;
    *(_QWORD *)(v17 + 4) = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)&v38[8];
    *(_OWORD *)&v38[8] = 0uLL;
    *(_OWORD *)(v19 + 24) = v39;
    v39 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x227684CE8](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *(std::__shared_weak_count **)&v38[16];
    if (*(_QWORD *)&v38[16])
    {
      v33 = (unint64_t *)(*(_QWORD *)&v38[16] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    *(_DWORD *)v38 = 134217984;
    *(_QWORD *)&v38[4] = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_2236ADA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va1);
  sub_22319A054((uint64_t *)va);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2236ADA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236ADA60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_2236ADA84(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;

  if (*((unsigned __int8 *)a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*((_BYTE *)a1 + 24))
    {
      v4 = *a1;
      if (*a1)
      {
        v5 = a1[1];
        v6 = *a1;
        if (v5 != v4)
        {
          v7 = a1[1];
          do
          {
            v9 = (void *)*((_QWORD *)v7 - 3);
            v7 -= 24;
            v8 = v9;
            if (v9)
            {
              *((_QWORD *)v5 - 2) = v8;
              operator delete(v8);
            }
            v5 = v7;
          }
          while (v7 != v4);
          v6 = *a1;
        }
        a1[1] = v4;
        operator delete(v6);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = *(char **)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*((_BYTE *)a1 + 24))
  {
    v10 = *a1;
    if (*a1)
    {
      v11 = a1[1];
      v12 = *a1;
      if (v11 != v10)
      {
        v13 = a1[1];
        do
        {
          v15 = (void *)*((_QWORD *)v13 - 3);
          v13 -= 24;
          v14 = v15;
          if (v15)
          {
            *((_QWORD *)v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
    }
    *((_BYTE *)a1 + 24) = 0;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(char **)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_BYTE *)a1 + 24) = 1;
  }
}

void sub_2236ADBC8(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22324A284();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_2236ADCEC(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22324A284();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_223174E94();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void ***sub_2236ADE38@<X0>(void ***result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int64x2_t *v4;
  int64x2_t *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  float32x2_t v12;
  void **v13;

  v5 = (int64x2_t *)*result;
  v4 = (int64x2_t *)result[1];
  v11 = 0;
  v10 = 0uLL;
  v6 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    v8 = 0;
    v7 = 0uLL;
  }
  else
  {
    if (v6 < 0)
      sub_22316E078();
    *(_QWORD *)&v10 = operator new((unint64_t)v6 >> 1);
    *((_QWORD *)&v10 + 1) = v10;
    v11 = v10 + 8 * (v6 >> 4);
    v13 = (void **)&v10;
    do
    {
      v12 = vmul_n_f32(vcvt_f32_f64(vcvtq_f64_s64(*v5)), a3);
      result = sub_2232EA538(&v13, &v12);
      ++v5;
    }
    while (v5 != v4);
    v7 = v10;
    v8 = v11;
  }
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

void sub_2236ADEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ***sub_2236ADF18(void ***result, float *a2, float *a3, float32x2_t *a4)
{
  void ***v4;
  uint64_t v5;
  float *v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void **v12;
  float32x2_t v13;
  void **v14;

  v4 = result;
  v11 = 0uLL;
  v12 = 0;
  v5 = (char *)a3 - (char *)a2;
  if (a3 == a2)
  {
    v10 = 0;
    v9 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_22316E078();
    v8 = a2;
    *(_QWORD *)&v11 = operator new((char *)a3 - (char *)a2);
    *((_QWORD *)&v11 + 1) = v11;
    v12 = (void **)(v11 + 8 * (v5 >> 3));
    v14 = (void **)&v11;
    do
    {
      v13 = vadd_f32(vmla_f32(vmla_n_f32(vmul_n_f32(*a4, *v8), a4[2], v8[1]), 0, a4[4]), a4[6]);
      result = sub_2232EA538(&v14, &v13);
      v8 += 2;
    }
    while (v8 != a3);
    v9 = v11;
    v10 = v12;
  }
  *(_OWORD *)v4 = v9;
  v4[2] = v10;
  return result;
}

void sub_2236AE000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_2236AE020(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24EC20780;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_2236AE1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char ***sub_2236AE1BC(char ***a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = a2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v9 = *v4;
  v10 = v6 - *v4;
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    sub_22316E078();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_223174E94();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = (uint64_t)(v16 + 8);
    v18 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (char *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = a2;
  v8 = 8 * v11 + 8;
  v18 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v6 - v15 - v10) < 0x20)
      goto LABEL_28;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v21];
    v16 -= v21;
    v22 = &v15[8 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v26 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v16 - 1) = v26;
        v16 -= 8;
      }
      while (v7 != v9);
    }
    v7 = *v4;
  }
LABEL_21:
  *v4 = v16;
  v4[1] = (char *)v8;
  v4[2] = v17;
  if (v7)
    operator delete(v7);
LABEL_23:
  v4[1] = (char *)v8;
  return a1;
}

uint64_t sub_2236AE340(float32x2_t *a1, uint64_t a2, float32x2_t *a3, uint64_t a4, float32x4_t a5, float32x4_t a6)
{
  float32x2_t *v9;
  float32x2_t v10;
  float32x2_t v11;
  float v12;
  float v13;
  float v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  double v30;
  float32x4_t v31;
  float32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float64x2_t v50;
  float64x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x2_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int32x4_t v59;
  float32x2_t v60;
  double v61;
  float32x4_t v62;
  float32x2_t v63;
  int8x16_t v64;
  double v65;
  _BOOL8 v66;
  float32x4_t v67;
  float32x4_t v68;
  int v69;
  int v70;
  float32x4_t v71;
  float32x4_t v72;
  int64x2_t v73;
  float32x4_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  float32x2_t *v79;
  float32x2_t v80;
  float32x2_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  int8x16_t v85;
  int8x16_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t *v91;
  __int128 v92;
  float32x2_t *v93;
  uint64_t v94;
  size_t v95;
  BOOL *v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  size_t v102;
  void *v103;
  BOOL *v104;
  char *v105;
  uint64_t v106;
  BOOL *v107;
  char *v108;
  char v109;
  unint64_t v110;
  int64x2_t *v111;
  int64x2_t *v112;
  unint64_t v113;
  int64x2_t v114;
  BOOL *v115;
  BOOL *v116;
  unint64_t v117;
  uint64_t v118;
  BOOL *v119;
  unint64_t v120;
  uint64_t v121;
  BOOL *v122;
  void **v123;
  unint64_t v124;
  int64x2_t v125;
  int8x16_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int8x16_t *v129;
  int64x2_t v130;
  unint64_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  uint8x16_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint32x4_t v146;
  int8x16_t v147;
  uint32x4_t v148;
  uint32x4_t v149;
  int8x16_t v150;
  uint32x4_t v151;
  int64x2_t v152;
  int64x2_t v153;
  uint8x16_t v154;
  uint16x8_t v155;
  uint16x8_t v156;
  uint32x4_t v157;
  uint32x4_t v158;
  uint32x4_t v159;
  uint32x4_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int8x8_t *v164;
  unint64_t v165;
  int8x16_t v166;
  int64x2_t v167;
  int8x8_t v168;
  uint16x8_t v169;
  uint32x4_t v170;
  int8x16_t v171;
  uint32x4_t v172;
  int64x2_t v173;
  float32x2_t *v175;
  unint64_t v176;
  float32x2_t *v177;
  float32x2_t *v178;
  float32x2_t v179;
  float32x2_t *v180;
  float *v181;
  float32x2_t *v182;
  float v183;
  float v184;
  uint64_t v185;
  void **v186;
  float *v187;
  uint64_t v188;
  float v190;
  void **v192;
  int64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  _BYTE *v198;
  _QWORD *v199;
  int64_t v200;
  unint64_t v201;
  void **v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 *v208;
  uint64_t v209;
  __int128 v210;
  float32x2_t *v211;
  unint64_t v212;
  unint64_t v213;
  float32x2_t *v214;
  void *v215;
  _BYTE *v216;
  void **v217;
  unint64_t v218;
  float32x2_t *v219;
  unint64_t v220;
  uint64_t v221;
  float32x4_t v222;
  float32x2_t *v223;
  uint64_t v224;
  unint64_t v225;
  _BOOL4 v226;
  char *v227;
  float32x2_t v228;
  char *v229;
  float v230;
  float v231;
  float32x2_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t v243;
  char *v244;
  float32x2_t *i;
  float32x2_t v246;
  __int32 v247;
  uint64_t v248;
  char *v249;
  float32x2_t *k;
  float32x2_t v251;
  __int32 v252;
  unint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  __int32 v258;
  char *v259;
  float32x2_t *j;
  float32x2_t v261;
  __int32 v262;
  _BYTE *v263;
  int64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  _BYTE *v269;
  void **v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  _OWORD *v275;
  __int128 *v276;
  uint64_t v277;
  __int128 v278;
  void *v279;
  _BYTE *v280;
  void **v281;
  _BYTE *v282;
  int64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  _BYTE *v288;
  void **v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  _OWORD *v294;
  __int128 *v295;
  uint64_t v296;
  __int128 v297;
  void *v298;
  _BYTE *v299;
  void **v300;
  _BYTE *v301;
  int64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  _BYTE *v307;
  void **v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  _OWORD *v313;
  __int128 *v314;
  uint64_t v315;
  __int128 v316;
  void *v317;
  _BYTE *v318;
  void **v319;
  _BYTE *v320;
  int64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  _BYTE *v326;
  void **v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  _OWORD *v332;
  __int128 *v333;
  uint64_t v334;
  __int128 v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  _BYTE *v340;
  uint64_t v341;
  _BYTE *v342;
  int64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t v347;
  _BYTE *v348;
  float32x2_t *v349;
  int64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  _OWORD *v355;
  __int128 *v356;
  uint64_t v357;
  __int128 v358;
  float32x2_t v359;
  _BYTE *v360;
  uint64_t v361;
  _BYTE *v362;
  int64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  _BYTE *v368;
  float32x2_t *v369;
  int64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  _OWORD *v375;
  __int128 *v376;
  uint64_t v377;
  __int128 v378;
  float32x2_t v379;
  _BYTE *v380;
  uint64_t v381;
  _BYTE *v382;
  int64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  _BYTE *v388;
  float32x2_t *v389;
  int64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char *v394;
  _OWORD *v395;
  __int128 *v396;
  uint64_t v397;
  __int128 v398;
  float32x2_t v399;
  _BYTE *v400;
  _BYTE *v401;
  int64_t v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  unint64_t v406;
  _BYTE *v407;
  float32x2_t *v408;
  int64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  _OWORD *v414;
  __int128 *v415;
  uint64_t v416;
  __int128 v417;
  float32x2_t v418;
  void **v419;
  float32x2_t *v420;
  float32x2_t v421;
  float32x2_t v422;
  float32x4_t v423;
  int8x16_t v424;
  int8x16_t v425;
  float32x2_t v426;
  float32x2_t v427;
  float32x4_t v428;
  unint64_t v429;
  float32x2_t v430;
  float32x2_t v431;
  float32x4_t v432;
  int8x16_t v434;
  uint64_t v439;
  unint64_t v440;
  float32x2_t *v441;
  int8x16_t v442;
  int *v443;
  int *v444;
  double v445;
  _DWORD *v446;
  unint64_t v448;
  float32x2_t v449;
  unint64_t v450;
  double v451;
  int8x16_t v452;
  float32x2_t *v453;
  unint64_t v454;
  const float *v455;
  int8x16_t v456;
  int32x4_t v457;
  int8x16_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  unint64_t v464;
  float32x2_t *v465;
  float32x2_t v466;
  float32x2_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float64x2_t v471;
  int8x16_t v472;
  int8x16_t v473;
  float64x2_t v474;
  int8x16_t v475;
  float32x2_t v476;
  float32x2_t v477;
  float32x2_t v478;
  float32x2_t v479;
  int64x2_t v480;
  float32x2_t v481;
  float32x2_t v482;
  float v483;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  signed int v489;
  int *v490;
  int *v491;
  int v492;
  int v493;
  int *v494;
  int v495;
  uint64_t v496;
  BOOL v497;
  int v498;
  int v499;
  void *v500;
  int v501;
  unint64_t v502;
  _DWORD *v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  float v509;
  float v510;
  float32x4_t v511;
  uint64_t v512;
  uint64_t v513;
  float32x4_t v514;
  float32x2_t v515;
  float32x4_t v516;
  float32x2_t v517;
  float32x4_t v518;
  float32x2_t v519;
  float32x2_t *v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x2_t *v523;
  float32x4_t v524;
  float32x2_t v525;
  float32x2_t v526;
  float32x4_t v527;
  float32x2_t v528;
  float32x2_t v529;
  unint64_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x2_t v533;
  float32x2_t *v534;
  int8x16_t v535;
  float32x2_t *v536;
  int8x16_t v537;
  int64_t v538;
  float32x2_t v539;
  int8x16_t v540;
  unint64_t v541;
  float32x2_t v542;
  void *v543[2];
  _OWORD v544[2];
  void *v545;
  __int128 v546;
  void *v547;
  __int128 v548;
  _BYTE v549[32];
  float32x4_t v550;
  float32x4_t v551;
  float32x2_t v552;
  void *v553[2];
  uint64_t v554;
  void *v555;
  void **v556;
  void **v557;
  float32x2_t *v558;
  float32x2_t *v559;
  _BYTE __p[48];
  float64x2_t v561;
  float64_t v562;
  float64x2_t v563;
  uint64_t v564;
  float64x2_t v565;
  uint64_t v566;
  float64x2_t v567;
  uint64_t v568;
  int v569;
  float32x4x2_t v570;

  v9 = a1;
  if (*(_QWORD *)&a1[31] - *(_QWORD *)&a1[30] > 0x5FuLL
    || ((v10 = a1[21],
         v11 = vsub_f32(v10, a1[20]),
         v12 = vmla_lane_f32(vmul_f32(v11, v11), (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1), v11, 1).f32[0],
         *(float32x2_t *)a5.f32 = vsub_f32(a1[22], v10),
         *(int32x2_t *)a6.f32 = vdup_lane_s32(*(int32x2_t *)a5.f32, 1),
         v13 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a5.f32), *(float32x2_t *)a6.f32, *(float32x2_t *)a5.f32, 1).f32[0], v13 >= v12)? (v14 = v12): (v14 = v13), v14 >= 0.04))
  {
    v16 = a1[6].u8[0];
    if (v16 <= 0xFD && byte_2246499E2[v16])
      return 1;
    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
  a5.f32[0] = fabsf(a1[17].f32[1]);
  if (a5.f32[0] <= 0.052336)
    v17 = 2;
  else
    v17 = 4;
  a6.i32[0] = 1065330231;
  if (a5.f32[0] >= 0.99863)
    v18 = 1;
  else
    v18 = v17;
  sub_223F2B7AC((uint64_t)&a1[15], v18, (float32x4_t *)__p, a5, a6);
  v21 = 0;
  v22 = v9[19];
  *(float32x2_t *)v23.f32 = vmul_f32(vadd_f32(v9[18], v22), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)v24.f32 = vsub_f32(*(float32x2_t *)v23.f32, v22);
  *(float32x2_t *)v549 = vadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.f32);
  v25 = vsub_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.f32);
  v23.i64[1] = v23.i64[0];
  v24.i64[1] = v24.i64[0];
  v26 = vsubq_f32(v23, v24);
  v27 = vaddq_f32(v23, v24);
  v27.i32[0] = v26.i32[0];
  v27.i32[3] = v26.i32[3];
  *(float32x4_t *)&v549[8] = v27;
  *(float32x2_t *)&v549[24] = v25;
  v28 = *(int8x16_t *)__p;
  v29 = *(int8x16_t *)&__p[16];
  HIDWORD(v30) = HIDWORD(v561.f64[0]);
  v31 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
  v32 = (float32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
  v33 = (int8x16_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v34 = (int8x16_t)xmmword_2245F5CC0;
  v35 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v36 = (float32x2_t)vextq_s8(*(int8x16_t *)&__p[32], *(int8x16_t *)&__p[32], 8uLL).u64[0];
  v37 = (float32x2_t)vdup_n_s32(0xBC23D70A);
  v38 = (float32x2_t)vdup_n_s32(0x3C23D70Au);
  do
  {
    v19.i32[0] = *(_DWORD *)&v549[v21];
    v20.i32[0] = *(_DWORD *)&v549[v21 + 4];
    v39 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)__p, *(float *)v19.i32), *(float32x2_t *)&__p[16], *(float *)v20.i32);
    *(float32x2_t *)v40.f32 = vmla_f32(v39, v37, *(float32x2_t *)&__p[32]);
    v41 = vmla_f32(vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v19.i8), *(float32x2_t *)v20.i8, v32);
    v20.i32[0] = -1138501878;
    v42 = vmla_f32(v41, *(float32x2_t *)v20.i8, v36);
    *(float32x2_t *)&v40.u32[2] = v42;
    v43 = vaddq_f32(v40, (float32x4_t)v561);
    *(double *)v40.i64 = v43.f32[2];
    *(float32x2_t *)v44.f32 = vmla_f32(v39, v38, *(float32x2_t *)&__p[32]);
    v42.i32[0] = 1008981770;
    *(float32x2_t *)&v44.u32[2] = vmla_f32(v41, v42, v36);
    v45 = vaddq_f32(v44, (float32x4_t)v561);
    *(double *)v44.i64 = v45.f32[2];
    v46 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v43.f32);
    v47 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v35, (float64x2_t)v46), v46, v35);
    v48 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v45.f32);
    v35 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v47, (float64x2_t)v48), v48, v47);
    v49 = vextq_s8(v46, v46, 8uLL);
    *(_QWORD *)&v50.f64[1] = v49.i64[1];
    *(_QWORD *)&v51.f64[1] = v34.i64[1];
    *(_QWORD *)&v50.f64[0] = v34.i64[0];
    *(_QWORD *)&v51.f64[0] = v40.i64[0];
    v52.i64[1] = v49.i64[1];
    v52.i64[0] = v40.i64[0];
    v53 = vbslq_s8((int8x16_t)vcgtq_f64(v50, v51), v52, v34);
    v19 = vextq_s8(v48, v48, 8uLL);
    *(_QWORD *)&v50.f64[1] = v19.i64[1];
    *(_QWORD *)&v51.f64[1] = v53.i64[1];
    *(_QWORD *)&v50.f64[0] = v53.i64[0];
    *(_QWORD *)&v51.f64[0] = v44.i64[0];
    v52.i64[1] = v19.i64[1];
    v52.i64[0] = v44.i64[0];
    v34 = vbslq_s8((int8x16_t)vcgtq_f64(v50, v51), v52, v53);
    v49.i64[1] = v40.i64[0];
    v54 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v49, (float64x2_t)v33), v49, v33);
    v19.i64[1] = v44.i64[0];
    v20 = (int8x16_t)vcgtq_f64((float64x2_t)v19, (float64x2_t)v54);
    v33 = vbslq_s8(v20, v19, v54);
    v21 += 8;
  }
  while (v21 != 32);
  *(int8x16_t *)v543 = v35;
  v544[0] = v34;
  *(float32x2_t *)v28.i8 = *a3;
  v28.i32[2] = a3[1].i32[0];
  *(float32x2_t *)v29.i8 = a3[2];
  v29.i32[2] = a3[3].i32[0];
  v55 = a3[4];
  LODWORD(v30) = a3[5].i32[0];
  *(float32x2_t *)v31.f32 = a3[6];
  v31.i32[2] = a3[7].i32[0];
  v56.i64[0] = vzip1q_s32((int32x4_t)v28, (int32x4_t)v29).u64[0];
  v57 = (int8x16_t)vnegq_f32(v31);
  v56.i32[2] = v55.i32[0];
  v58 = (int8x16_t)vtrn2q_s32((int32x4_t)v28, (int32x4_t)v29);
  v58.i32[2] = v55.i32[1];
  v59 = vzip2q_s32((int32x4_t)v28, (int32x4_t)v29);
  v60 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v56.i8, *(float *)v57.i32), *(float32x2_t *)v58.i8, *(float32x2_t *)v31.f32, 1), *(float32x2_t *)v59.i8, v31, 2);
  v59.i32[2] = LODWORD(v30);
  *(_QWORD *)&v61 = vdupq_laneq_s32(v59, 2).u64[0];
  v544[1] = v33;
  v62 = (float32x4_t)vextq_s8(v58, v33, 4uLL);
  v63 = vmls_lane_f32(vmul_f32(v55, *(float32x2_t *)v57.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v55, 1), *(float32x2_t *)v31.f32, 1);
  v64 = vextq_s8(v57, v57, 8uLL);
  v56.i64[1] = v56.u32[2];
  v57.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v58, 0).i32[3];
  v57.i32[1] = v62.i32[0];
  v57.i64[1] = v62.u32[1];
  v65 = COERCE_DOUBLE(vmla_f32(v63, *(float32x2_t *)v64.i8, *(float32x2_t *)&v30));
  v59.i64[1] = LODWORD(v61);
  *(int8x16_t *)&v549[16] = v57;
  v550 = (float32x4_t)v59;
  *(int8x16_t *)v549 = v56;
  *(float32x2_t *)v551.f32 = v60;
  v551.i64[1] = LODWORD(v65) | 0x3F80000000000000;
  v66 = !sub_223EA6588((double *)v543, (uint64_t)v549, (float32x2_t *)a4, qword_224649A0C, v62, *(double *)v59.i64, v61, v65, v30, v64, v56, v57);
  if (v15 | v66)
    return v66;
  if (!v9[10].i8[0])
    return 1;
  v67.f32[0] = fabsf(v9[17].f32[1]);
  if (v67.f32[0] <= 0.052336)
    v69 = 2;
  else
    v69 = 4;
  v68.i32[0] = 1065330231;
  if (v67.f32[0] >= 0.99863)
    v70 = 1;
  else
    v70 = v69;
  v71 = sub_223F2B7AC((uint64_t)&v9[15], v70, (float32x4_t *)v549, v67, v68);
  v71.i64[0] = *(_QWORD *)(a4 + 48);
  v71.i32[2] = *(_DWORD *)(a4 + 56);
  v540 = (int8x16_t)v71;
  v71.i64[0] = *(_QWORD *)(a4 + 60);
  v71.i32[2] = *(_DWORD *)(a4 + 68);
  v537 = (int8x16_t)v71;
  v71.i64[0] = *(_QWORD *)(a4 + 72);
  v513 = a4;
  v71.i32[2] = *(_DWORD *)(a4 + 80);
  v535 = (int8x16_t)v71;
  v73 = *(int64x2_t *)a3->f32;
  v72 = *(float32x4_t *)a3[2].f32;
  v75 = *(int64x2_t *)a3[4].f32;
  v74 = *(float32x4_t *)a3[6].f32;
  v77.i32[1] = *(_DWORD *)&v549[4];
  v76.i32[3] = *(_DWORD *)&v549[28];
  v78.i32[1] = v550.i32[1];
  if (v9[10].i8[0])
    v79 = v9 + 7;
  else
    v79 = 0;
  v80 = *v79;
  v81 = v79[1];
  memset(__p, 0, 24);
  v82 = *(_QWORD *)&v81 - *(_QWORD *)&v80;
  if (*(_QWORD *)&v81 == *(_QWORD *)&v80)
  {
    v91 = 0;
    v92 = 0uLL;
  }
  else
  {
    v511 = *(float32x4_t *)v549;
    v514 = *(float32x4_t *)&v549[16];
    v516 = v550;
    v518 = v551;
    v521 = (float32x4_t)v73;
    v524 = v72;
    v527 = (float32x4_t)v75;
    v532 = v74;
    if (v82 < 0)
      sub_22316E078();
    v83 = v82 >> 3;
    v84 = (char *)operator new(12 * (v82 >> 3));
    v85 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v521, v511.f32[0]), v524, *(float32x2_t *)v511.f32, 1), v527, v511, 2), v532, v511, 3);
    v75 = (int64x2_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v521, v514.f32[0]), v524, *(float32x2_t *)v514.f32, 1), v527, v514, 2), v532, v514, 3);
    v86 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v521, v516.f32[0]), v524, *(float32x2_t *)v516.f32, 1), v527, v516, 2), v532, v516, 3);
    v87 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v521, v518.f32[0]), v524, *(float32x2_t *)v518.f32, 1), v527, v518, 2), v532, v518, 3);
    *(_QWORD *)__p = v84;
    *(_QWORD *)&__p[8] = v84;
    *(_QWORD *)&__p[16] = &v84[12 * v83];
    v558 = (float32x2_t *)__p;
    v528 = *(float32x2_t *)v75.i8;
    v531 = (float32x4_t)v85;
    v519 = (float32x2_t)vextq_s8(v85, v85, 8uLL).u64[0];
    v522 = v87;
    v525 = *(float32x2_t *)v86.i8;
    v88 = (float32x2_t)vextq_s8(v86, v86, 8uLL).u64[0];
    v515 = v88;
    v517 = (float32x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
    do
    {
      v88.i32[0] = **(_DWORD **)&v80;
      v75.i32[0] = *(_DWORD *)(*(_QWORD *)&v80 + 4);
      *(float32x2_t *)v89.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v531.f32, **(float **)v80.f32), v528, *(float *)v75.i32), 0, v525);
      *(float32x2_t *)&v89.u32[2] = vmla_f32(vmla_f32(vmul_f32(v519, v88), *(float32x2_t *)v75.i8, v517), 0, v515);
      v90 = vaddq_f32(v89, v522);
      LODWORD(v543[1]) = v90.i32[2];
      v543[0] = (void *)v90.i64[0];
      sub_22339DC14((char ***)&v558, (uint64_t *)v543);
      *(_QWORD *)&v80 += 8;
    }
    while (*(_QWORD *)&v80 != *(_QWORD *)&v81);
    v91 = *(float32x2_t **)__p;
    v92 = *(_OWORD *)&__p[8];
  }
  v545 = v91;
  v546 = v92;
  v93 = (float32x2_t *)v92;
  memset(__p, 0, 24);
  v94 = v92 - (_QWORD)v91;
  v523 = v9;
  v520 = a3;
  v512 = a2;
  if ((float32x2_t *)v92 == v91)
  {
    v96 = 0;
    goto LABEL_77;
  }
  if (v94 < 0)
    sub_22316E078();
  v95 = 0xAAAAAAAAAAAAAAABLL * (v94 >> 2);
  v96 = (BOOL *)operator new(v95);
  *(_QWORD *)__p = v96;
  *(_QWORD *)&__p[8] = v96;
  *(_QWORD *)&__p[16] = &v96[v95];
  do
  {
    while (1)
    {
      while (1)
      {
        v75.i32[0] = v91[1].i32[0];
        v97 = (float)(vadd_f32(*(float32x2_t *)v75.i8, vmla_lane_f32(vmul_f32(*v91, 0), 0, *v91, 1)).f32[0] + -0.2) >= 0.0;
        if ((unint64_t)v96 >= *(_QWORD *)&__p[16])
          break;
        *v96++ = v97;
        *(_QWORD *)&__p[8] = v96;
        v91 = (float32x2_t *)((char *)v91 + 12);
        if (v91 == v93)
          goto LABEL_73;
      }
      v98 = *(_QWORD *)__p;
      v99 = (unint64_t)&v96[-*(_QWORD *)__p];
      v100 = (uint64_t)&v96[-*(_QWORD *)__p + 1];
      if (v100 < 0)
        sub_22316E078();
      v101 = *(_QWORD *)&__p[16] - *(_QWORD *)__p;
      if (2 * (*(_QWORD *)&__p[16] - *(_QWORD *)__p) > (unint64_t)v100)
        v100 = 2 * v101;
      v102 = v101 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v100;
      if (!v102)
        break;
      v103 = operator new(v102);
      v104 = (BOOL *)v103 + v99;
      v105 = (char *)v103 + v102;
      *((_BYTE *)v103 + v99) = v97;
      v106 = (uint64_t)v103 + v99 + 1;
      if (v96 == (BOOL *)v98)
        goto LABEL_56;
LABEL_48:
      if (v99 < 8
        || (char *)v103 + v99 - 1 - (char *)&v96[~v98] > (unint64_t)v103 + v99 - 1
        || v98 > (unint64_t)(v96 - 1)
        || v98 - (unint64_t)v103 < 0x20)
      {
        v107 = v96;
        goto LABEL_50;
      }
      if (v99 >= 0x20)
      {
        v110 = v99 & 0xFFFFFFFFFFFFFFE0;
        v111 = (int64x2_t *)((char *)v103 + v99 - 16);
        v112 = (int64x2_t *)(v96 - 16);
        v113 = v99 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v75 = v112[-1];
          v114 = *v112;
          v111[-1] = v75;
          *v111 = v114;
          v111 -= 2;
          v112 -= 2;
          v113 -= 32;
        }
        while (v113);
        if (v99 == v110)
          goto LABEL_52;
        if ((v99 & 0x18) == 0)
        {
          v104 -= v110;
          v107 = &v96[-v110];
LABEL_50:
          v108 = (char *)(v104 - 1);
          do
          {
            v109 = *--v107;
            *v108-- = v109;
          }
          while (v107 != (BOOL *)v98);
          goto LABEL_52;
        }
      }
      else
      {
        v110 = 0;
      }
      v107 = &v96[-(v99 & 0xFFFFFFFFFFFFFFF8)];
      v104 -= v99 & 0xFFFFFFFFFFFFFFF8;
      v115 = &v96[-v110 - v98 - 8 + (_QWORD)v103];
      v116 = &v96[-v110 - 8];
      v117 = v110 - (v99 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v118 = *(_QWORD *)v116;
        v116 -= 8;
        *(_QWORD *)v115 = v118;
        v115 -= 8;
        v117 += 8;
      }
      while (v117);
      if (v99 != (v99 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_50;
LABEL_52:
      v96 = *(BOOL **)__p;
      *(_QWORD *)__p = v103;
      *(_QWORD *)&__p[16] = v105;
      if (v96)
        goto LABEL_57;
      v96 = (BOOL *)v106;
      *(_QWORD *)&__p[8] = v106;
      v91 = (float32x2_t *)((char *)v91 + 12);
      if (v91 == v93)
        goto LABEL_73;
    }
    v103 = 0;
    v104 = &v96[-*(_QWORD *)__p];
    v105 = 0;
    *(_BYTE *)v99 = v97;
    v106 = v99 + 1;
    if (v96 != (BOOL *)v98)
      goto LABEL_48;
LABEL_56:
    *(_QWORD *)__p = v104;
    *(_QWORD *)&__p[16] = v105;
LABEL_57:
    operator delete(v96);
    v96 = (BOOL *)v106;
    *(_QWORD *)&__p[8] = v106;
    v91 = (float32x2_t *)((char *)v91 + 12);
  }
  while (v91 != v93);
LABEL_73:
  v119 = *(BOOL **)__p;
  if (*(BOOL **)__p == v96)
  {
LABEL_77:
    v123 = &v547;
    goto LABEL_97;
  }
  v120 = (unint64_t)&v96[-*(_QWORD *)__p];
  if ((unint64_t)&v96[-*(_QWORD *)__p] >= 8)
  {
    if (v120 >= 0x20)
    {
      v125 = 0uLL;
      v126 = (int8x16_t)vdupq_n_s64(1uLL);
      v127 = 0uLL;
      v124 = v120 & 0xFFFFFFFFFFFFFFE0;
      v128 = 0uLL;
      v129 = (int8x16_t *)(*(_QWORD *)__p + 16);
      v130 = 0uLL;
      v131 = v120 & 0xFFFFFFFFFFFFFFE0;
      v132 = 0uLL;
      v133 = 0uLL;
      v134 = 0uLL;
      v135 = 0uLL;
      v77 = 0uLL;
      v136 = 0uLL;
      v137 = 0uLL;
      v138 = 0uLL;
      v139 = 0uLL;
      v140 = 0uLL;
      v141 = 0uLL;
      v142 = 0uLL;
      do
      {
        v143 = (uint8x16_t)vtstq_s8(v129[-1], v129[-1]);
        v144 = vmovl_u8(*(uint8x8_t *)v143.i8);
        v145 = vmovl_high_u8(v143);
        v146 = vmovl_high_u16(v145);
        v147.i64[0] = v146.u32[2];
        v147.i64[1] = v146.u32[3];
        v135 = vaddq_s64(v135, (int64x2_t)vandq_s8(v147, v126));
        v148 = vmovl_high_u16(v144);
        v149 = vmovl_u16(*(uint16x4_t *)v145.i8);
        v147.i64[0] = v146.u32[0];
        v147.i64[1] = v146.u32[1];
        v134 = vaddq_s64(v134, (int64x2_t)vandq_s8(v147, v126));
        v147.i64[0] = v149.u32[2];
        v147.i64[1] = v149.u32[3];
        v133 = vaddq_s64(v133, (int64x2_t)vandq_s8(v147, v126));
        v147.i64[0] = v148.u32[2];
        v147.i64[1] = v148.u32[3];
        v130 = vaddq_s64(v130, (int64x2_t)vandq_s8(v147, v126));
        v150 = *v129;
        v129 += 2;
        v151 = vmovl_u16(*(uint16x4_t *)v144.i8);
        v147.i64[0] = v149.u32[0];
        v147.i64[1] = v149.u32[1];
        v132 = vaddq_s64(v132, (int64x2_t)vandq_s8(v147, v126));
        v147.i64[0] = v151.u32[0];
        v147.i64[1] = v151.u32[1];
        v152 = (int64x2_t)vandq_s8(v147, v126);
        v147.i64[0] = v151.u32[2];
        v147.i64[1] = v151.u32[3];
        v153 = (int64x2_t)vandq_s8(v147, v126);
        v147.i64[0] = v148.u32[0];
        v147.i64[1] = v148.u32[1];
        v154 = (uint8x16_t)vtstq_s8(v150, v150);
        v128 = vaddq_s64(v128, (int64x2_t)vandq_s8(v147, v126));
        v155 = vmovl_u8(*(uint8x8_t *)v154.i8);
        v156 = vmovl_high_u8(v154);
        v127 = vaddq_s64(v127, v153);
        v157 = vmovl_high_u16(v156);
        v125 = vaddq_s64(v125, v152);
        v147.i64[0] = v157.u32[2];
        v147.i64[1] = v157.u32[3];
        v142 = vaddq_s64(v142, (int64x2_t)vandq_s8(v147, v126));
        v158 = vmovl_high_u16(v155);
        v159 = vmovl_u16(*(uint16x4_t *)v156.i8);
        v147.i64[0] = v157.u32[0];
        v147.i64[1] = v157.u32[1];
        v141 = vaddq_s64(v141, (int64x2_t)vandq_s8(v147, v126));
        v147.i64[0] = v159.u32[2];
        v147.i64[1] = v159.u32[3];
        v140 = vaddq_s64(v140, (int64x2_t)vandq_s8(v147, v126));
        v147.i64[0] = v158.u32[2];
        v147.i64[1] = v158.u32[3];
        v138 = vaddq_s64(v138, (int64x2_t)vandq_s8(v147, v126));
        v147.i64[0] = v159.u32[0];
        v147.i64[1] = v159.u32[1];
        v139 = vaddq_s64(v139, (int64x2_t)vandq_s8(v147, v126));
        v160 = vmovl_u16(*(uint16x4_t *)v155.i8);
        v147.i64[0] = v158.u32[0];
        v147.i64[1] = v158.u32[1];
        v137 = vaddq_s64(v137, (int64x2_t)vandq_s8(v147, v126));
        v147.i64[0] = v160.u32[2];
        v147.i64[1] = v160.u32[3];
        v136 = vaddq_s64(v136, (int64x2_t)vandq_s8(v147, v126));
        v147.i64[0] = v160.u32[0];
        v147.i64[1] = v160.u32[1];
        v77 = vaddq_s64(v77, (int64x2_t)vandq_s8(v147, v126));
        v131 -= 32;
      }
      while (v131);
      v73 = vaddq_s64(v138, v130);
      v76 = vaddq_s64(v140, v133);
      v78 = vaddq_s64(v141, v134);
      v161 = vaddq_s64(vaddq_s64(vaddq_s64(v77, v125), vaddq_s64(v139, v132)), vaddq_s64(vaddq_s64(v137, v128), v78));
      v75 = vaddq_s64(vaddq_s64(vaddq_s64(v136, v127), v76), vaddq_s64(v73, vaddq_s64(v142, v135)));
      v121 = vaddvq_s64(vaddq_s64(v161, v75));
      if (v120 == v124)
        goto LABEL_92;
      if ((v120 & 0x18) == 0)
      {
        v122 = (BOOL *)(*(_QWORD *)__p + v124);
        goto LABEL_89;
      }
    }
    else
    {
      v121 = 0;
      v124 = 0;
    }
    v122 = (BOOL *)(*(_QWORD *)__p + (v120 & 0xFFFFFFFFFFFFFFF8));
    v162 = 0uLL;
    v163 = (int64x2_t)(unint64_t)v121;
    v164 = (int8x8_t *)(*(_QWORD *)__p + v124);
    v165 = v124 - (v120 & 0xFFFFFFFFFFFFFFF8);
    v166 = (int8x16_t)vdupq_n_s64(1uLL);
    v73 = 0uLL;
    v167 = 0uLL;
    do
    {
      v168 = *v164++;
      v169 = vmovl_u8((uint8x8_t)vtst_s8(v168, v168));
      v170 = vmovl_u16(*(uint16x4_t *)v169.i8);
      v171.i64[0] = v170.u32[0];
      v171.i64[1] = v170.u32[1];
      v77 = (int64x2_t)vandq_s8(v171, v166);
      v171.i64[0] = v170.u32[2];
      v171.i64[1] = v170.u32[3];
      v76 = (int64x2_t)vandq_s8(v171, v166);
      v172 = vmovl_high_u16(v169);
      v171.i64[0] = v172.u32[0];
      v171.i64[1] = v172.u32[1];
      v173 = (int64x2_t)vandq_s8(v171, v166);
      v171.i64[0] = v172.u32[2];
      v171.i64[1] = v172.u32[3];
      v78 = (int64x2_t)vandq_s8(v171, v166);
      v167 = vaddq_s64(v167, v78);
      v73 = vaddq_s64(v73, v173);
      v162 = vaddq_s64(v162, v76);
      v163 = vaddq_s64(v163, v77);
      v165 += 8;
    }
    while (v165);
    v75 = vaddq_s64(v163, v73);
    LODWORD(v121) = vaddvq_s64(vaddq_s64(v75, vaddq_s64(v162, v167)));
    if (v120 != (v120 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_89;
  }
  else
  {
    LODWORD(v121) = 0;
    v122 = *(BOOL **)__p;
    do
    {
LABEL_89:
      if (*v122++)
        LODWORD(v121) = v121 + 1;
    }
    while (v122 != v96);
  }
LABEL_92:
  if (!(_DWORD)v121)
  {
    v123 = &v547;
LABEL_96:
    v96 = *(BOOL **)__p;
LABEL_97:
    *v123 = 0;
    v123[1] = 0;
    v119 = v96;
    v123[2] = 0;
    goto LABEL_98;
  }
  v93 = (float32x2_t *)v545;
  v175 = (float32x2_t *)v546;
  v176 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v546 - (_QWORD)v545) >> 2);
  if (v121 == v176)
  {
    v547 = v545;
    v548 = v546;
    v123 = &v545;
    goto LABEL_96;
  }
  v218 = 0;
  v219 = 0;
  v547 = 0;
  v548 = 0uLL;
  v220 = v176 + 1;
  if (v176 != -1)
  {
    if (v220 > 0x1555555555555555)
      sub_22316E078();
    v219 = (float32x2_t *)operator new(v546 - (_QWORD)v545 + 12);
    v218 = (unint64_t)v219 + 12 * v220;
    v547 = v219;
    *(_QWORD *)&v548 = v219;
    *((_QWORD *)&v548 + 1) = v218;
  }
  if (v175 != v93)
  {
    v221 = 0;
    v222.i32[3] = 0;
    v93 = v219;
    v223 = v219;
    v530 = v176;
    while (1)
    {
      v224 = v221 + 1;
      v225 = (v221 + 1) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v546 - (_QWORD)v545) >> 2));
      v226 = v119[v221];
      if (v119[v221])
      {
        v227 = (char *)v545 + 12 * v221;
        if (v119[v225])
        {
          if ((unint64_t)v223 >= v218)
          {
            v234 = 0xAAAAAAAAAAAAAAABLL * (((char *)v223 - (char *)v93) >> 2) + 1;
            if (v234 > 0x1555555555555555)
            {
              *(_QWORD *)&v548 = v219;
              *((_QWORD *)&v548 + 1) = v218;
              v547 = v93;
              sub_22316E078();
            }
            if (0x5555555555555556 * ((uint64_t)(v218 - (_QWORD)v93) >> 2) > v234)
              v234 = 0x5555555555555556 * ((uint64_t)(v218 - (_QWORD)v93) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v218 - (_QWORD)v93) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v235 = 0x1555555555555555;
            else
              v235 = v234;
            if (v235)
            {
              if (v235 > 0x1555555555555555)
              {
                *(_QWORD *)&v548 = v219;
                *((_QWORD *)&v548 + 1) = v218;
                v547 = v93;
                sub_223174E94();
              }
              v236 = (char *)operator new(12 * v235);
            }
            else
            {
              v236 = 0;
            }
            v243 = *(_QWORD *)v227;
            v244 = &v236[4 * (((char *)v223 - (char *)v93) >> 2)];
            *((_DWORD *)v244 + 2) = *((_DWORD *)v227 + 2);
            *(_QWORD *)v244 = v243;
            for (i = (float32x2_t *)v244; v223 != v93; i[1].i32[0] = v247)
            {
              v246 = *(float32x2_t *)((char *)v223 - 12);
              v223 = (float32x2_t *)((char *)v223 - 12);
              v247 = v223[1].i32[0];
              *(float32x2_t *)((char *)i - 12) = v246;
              i = (float32x2_t *)((char *)i - 12);
            }
            v218 = (unint64_t)&v236[12 * v235];
            v219 = (float32x2_t *)(v244 + 12);
            if (v93)
              operator delete(v93);
            v93 = i;
            v223 = v219;
            v176 = v530;
            goto LABEL_171;
          }
          v228 = *(float32x2_t *)v227;
          v223[1].i32[0] = *((_DWORD *)v227 + 2);
          *v223 = v228;
          goto LABEL_200;
        }
      }
      else
      {
        if (!v119[v225])
          goto LABEL_171;
        v227 = (char *)v545 + 12 * v221;
      }
      v222.i64[0] = *(_QWORD *)v227;
      v222.i32[2] = *((_DWORD *)v227 + 2);
      v229 = (char *)v545 + 12 * v225;
      v75.i64[0] = *(_QWORD *)v229;
      v75.i32[2] = *((_DWORD *)v229 + 2);
      v75 = (int64x2_t)vsubq_f32((float32x4_t)v75, v222);
      v73.i64[0] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
      LODWORD(v230) = vadd_f32(*(float32x2_t *)v73.i8, vmla_lane_f32(vmul_f32(*(float32x2_t *)v75.i8, 0), 0, *(float32x2_t *)v75.i8, 1)).u32[0];
      if (fabsf(v230) >= 0.00000011921)
      {
        v73 = (int64x2_t)vaddq_f32(v222, (float32x4_t)xmmword_224649940);
        *(float32x2_t *)v73.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v73.i8, 0), 0, *(float32x2_t *)v73.i8, 1));
        v231 = (float)-*(float *)v73.i32 / v230;
        if (v231 >= 0.0 && v231 <= 1.0)
          v531 = vmlaq_n_f32(v222, (float32x4_t)v75, v231);
      }
      if (!v226)
      {
        if ((unint64_t)v223 >= v218)
        {
          v240 = 0xAAAAAAAAAAAAAAABLL * (((char *)v223 - (char *)v93) >> 2) + 1;
          if (v240 > 0x1555555555555555)
            goto LABEL_557;
          if (0x5555555555555556 * ((uint64_t)(v218 - (_QWORD)v93) >> 2) > v240)
            v240 = 0x5555555555555556 * ((uint64_t)(v218 - (_QWORD)v93) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v218 - (_QWORD)v93) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v241 = 0x1555555555555555;
          else
            v241 = v240;
          if (v241)
          {
            if (v241 > 0x1555555555555555)
              goto LABEL_561;
            v242 = (char *)operator new(12 * v241);
            v176 = v530;
          }
          else
          {
            v242 = 0;
          }
          v259 = &v242[4 * (((char *)v223 - (char *)v93) >> 2)];
          v222.i32[3] = v531.i32[3];
          *(_QWORD *)v259 = v531.i64[0];
          *((_DWORD *)v259 + 2) = v531.i32[2];
          for (j = (float32x2_t *)v259; v223 != v93; j[1].i32[0] = v262)
          {
            v261 = *(float32x2_t *)((char *)v223 - 12);
            v223 = (float32x2_t *)((char *)v223 - 12);
            v262 = v223[1].i32[0];
            *(float32x2_t *)((char *)j - 12) = v261;
            j = (float32x2_t *)((char *)j - 12);
          }
          v218 = (unint64_t)&v242[12 * v241];
          v219 = (float32x2_t *)(v259 + 12);
          if (v93)
            operator delete(v93);
          v93 = j;
          v223 = v219;
          goto LABEL_171;
        }
        v222.i32[3] = v531.i32[3];
        v223[1].i32[0] = v531.i32[2];
        *v223 = *(float32x2_t *)v531.f32;
LABEL_200:
        v219 = (float32x2_t *)((char *)v223 + 12);
        v223 = (float32x2_t *)((char *)v223 + 12);
        goto LABEL_171;
      }
      if ((unint64_t)v223 >= v218)
      {
        v237 = 0xAAAAAAAAAAAAAAABLL * (((char *)v223 - (char *)v93) >> 2) + 1;
        if (v237 > 0x1555555555555555)
          goto LABEL_557;
        if (0x5555555555555556 * ((uint64_t)(v218 - (_QWORD)v93) >> 2) > v237)
          v237 = 0x5555555555555556 * ((uint64_t)(v218 - (_QWORD)v93) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v218 - (_QWORD)v93) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v238 = 0x1555555555555555;
        else
          v238 = v237;
        if (v238)
        {
          if (v238 > 0x1555555555555555)
            goto LABEL_561;
          v239 = (char *)operator new(12 * v238);
        }
        else
        {
          v239 = 0;
        }
        v248 = *(_QWORD *)v227;
        v249 = &v239[4 * (((char *)v223 - (char *)v93) >> 2)];
        *((_DWORD *)v249 + 2) = *((_DWORD *)v227 + 2);
        *(_QWORD *)v249 = v248;
        for (k = (float32x2_t *)v249; v223 != v93; k[1].i32[0] = v252)
        {
          v251 = *(float32x2_t *)((char *)v223 - 12);
          v223 = (float32x2_t *)((char *)v223 - 12);
          v252 = v223[1].i32[0];
          *(float32x2_t *)((char *)k - 12) = v251;
          k = (float32x2_t *)((char *)k - 12);
        }
        v218 = (unint64_t)&v239[12 * v238];
        v219 = (float32x2_t *)(v249 + 12);
        if (v93)
          operator delete(v93);
        v93 = k;
        v176 = v530;
        if ((unint64_t)v219 >= v218)
        {
LABEL_230:
          v253 = 0xAAAAAAAAAAAAAAABLL * (((char *)v219 - (char *)v93) >> 2) + 1;
          if (v253 > 0x1555555555555555)
          {
LABEL_557:
            *(_QWORD *)&v548 = v219;
            *((_QWORD *)&v548 + 1) = v218;
            v547 = v93;
            sub_22316E078();
          }
          if (0x5555555555555556 * ((uint64_t)(v218 - (_QWORD)v93) >> 2) > v253)
            v253 = 0x5555555555555556 * ((uint64_t)(v218 - (_QWORD)v93) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v218 - (_QWORD)v93) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v254 = 0x1555555555555555;
          else
            v254 = v253;
          if (v254)
          {
            if (v254 > 0x1555555555555555)
            {
LABEL_561:
              *(_QWORD *)&v548 = v219;
              *((_QWORD *)&v548 + 1) = v218;
              v547 = v93;
              sub_223174E94();
            }
            v255 = (char *)operator new(12 * v254);
            v176 = v530;
          }
          else
          {
            v255 = 0;
          }
          v256 = &v255[4 * (((char *)v219 - (char *)v93) >> 2)];
          v218 = (unint64_t)&v255[12 * v254];
          v222.i32[3] = v531.i32[3];
          *(_QWORD *)v256 = v531.i64[0];
          *((_DWORD *)v256 + 2) = v531.i32[2];
          v223 = (float32x2_t *)(v256 + 12);
          if (v219 == v93)
            goto LABEL_243;
          do
          {
            v257 = *(uint64_t *)((char *)&v219[-2] + 4);
            v219 = (float32x2_t *)((char *)v219 - 12);
            v258 = v219[1].i32[0];
            *(_QWORD *)(v256 - 12) = v257;
            v256 -= 12;
            *((_DWORD *)v256 + 2) = v258;
          }
          while (v219 != v93);
          if (v93)
LABEL_243:
            operator delete(v93);
          v219 = v223;
          v93 = (float32x2_t *)v256;
          goto LABEL_171;
        }
      }
      else
      {
        v233 = *(float32x2_t *)v227;
        v223[1].i32[0] = *((_DWORD *)v227 + 2);
        *v223 = v233;
        v219 = (float32x2_t *)((char *)v223 + 12);
        if ((unint64_t)&v223[1] + 4 >= v218)
          goto LABEL_230;
      }
      v222.i32[3] = v531.i32[3];
      v219[1].i32[0] = v531.i32[2];
      *v219 = *(float32x2_t *)v531.f32;
      v219 = (float32x2_t *)((char *)v219 + 12);
      v223 = v219;
LABEL_171:
      v221 = v224;
      if (v224 == v176)
      {
        *(_QWORD *)&v548 = v219;
        *((_QWORD *)&v548 + 1) = v218;
        v547 = v93;
        v9 = v523;
        a3 = v520;
        goto LABEL_98;
      }
    }
  }
  v9 = v523;
LABEL_98:
  if (v119)
    operator delete(v119);
  if (v545)
    operator delete(v545);
  v178 = (float32x2_t *)v547;
  v177 = (float32x2_t *)v548;
  if (v547 == (void *)v548)
  {
    v214 = 0;
    v215 = v547;
    if (v547)
      goto LABEL_457;
    goto LABEL_458;
  }
  memset(__p, 0, 24);
  if ((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v548 - (_QWORD)v547) >> 2)) >> 61)
    sub_22316E078();
  *(_QWORD *)__p = operator new(0x5555555555555558 * ((uint64_t)(v548 - (_QWORD)v547) >> 2));
  *(_QWORD *)&__p[8] = *(_QWORD *)__p;
  *(_QWORD *)&__p[16] = *(_QWORD *)__p + 0x5555555555555558 * (((char *)v177 - (char *)v178) >> 2);
  v543[0] = __p;
  v179 = (float32x2_t)vextq_s8(v540, v540, 8uLL).u64[0];
  v529 = (float32x2_t)vextq_s8(v537, v537, 8uLL).u64[0];
  v533 = v179;
  v526 = (float32x2_t)vextq_s8(v535, v535, 8uLL).u64[0];
  v180 = v178;
  do
  {
    v179.i32[0] = v180[1].i32[0];
    v558 = (float32x2_t *)vdiv_f32(vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v540.i8, COERCE_FLOAT(*v180)), *(float32x2_t *)v537.i8, *v180, 1), *(float32x2_t *)v535.i8, v179.f32[0]), (float32x2_t)vdup_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v533, *v180), v529, *v180, 1), v179, v526), 0));
    sub_2232EA538((void ***)v543, &v558);
    v180 = (float32x2_t *)((char *)v180 + 12);
  }
  while (v180 != v177);
  v536 = v178;
  v182 = *(float32x2_t **)__p;
  v181 = *(float **)&__p[8];
  v183 = (float)*(unsigned int *)(v513 + 88) + -1.0;
  v184 = (float)*(unsigned int *)(v513 + 92) + -1.0;
  v555 = 0;
  v556 = 0;
  v557 = 0;
  v185 = *(_QWORD *)&__p[8] - *(_QWORD *)__p;
  if (*(_QWORD *)&__p[8] == *(_QWORD *)__p)
  {
    v212 = 0;
    v211 = 0;
    v186 = 0;
    goto LABEL_150;
  }
  if (v185 < 0)
    sub_22316E078();
  v186 = (void **)operator new(*(_QWORD *)&__p[8] - *(_QWORD *)__p);
  v541 = v185 >> 3;
  v555 = v186;
  v556 = v186;
  v557 = &v186[v185 >> 3];
  v187 = (float *)v182;
  while (2)
  {
    if (*v187 < 0.0 || *v187 > v183)
      goto LABEL_111;
    v190 = v187[1];
    if (v190 < 0.0 || v190 > v184)
      goto LABEL_111;
    if (v186 < v557)
    {
      *v186 = *(void **)v187;
      v188 = (uint64_t)(v186 + 1);
      goto LABEL_110;
    }
    v192 = (void **)v555;
    v193 = (char *)v186 - (_BYTE *)v555;
    v194 = ((char *)v186 - (_BYTE *)v555) >> 3;
    v195 = v194 + 1;
    if ((unint64_t)(v194 + 1) >> 61)
      sub_22316E078();
    v196 = (char *)v557 - (_BYTE *)v555;
    if (((char *)v557 - (_BYTE *)v555) >> 2 > v195)
      v195 = v196 >> 2;
    if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8)
      v197 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v197 = v195;
    if (!v197)
    {
      v198 = 0;
      v199 = (_QWORD *)(8 * v194);
      *(_QWORD *)(8 * v194) = *(_QWORD *)v187;
      v188 = 8 * v194 + 8;
      v200 = (char *)v186 - (char *)v192;
      if (v186 != v192)
        goto LABEL_130;
LABEL_136:
      v555 = v199;
      v557 = (void **)&v198[8 * v197];
      if (!v186)
        goto LABEL_138;
      goto LABEL_137;
    }
    if (v197 >> 61)
      sub_223174E94();
    v198 = operator new(8 * v197);
    v199 = &v198[8 * v194];
    *v199 = *(_QWORD *)v187;
    v188 = (uint64_t)(v199 + 1);
    v200 = (char *)v186 - (char *)v192;
    if (v186 == v192)
      goto LABEL_136;
LABEL_130:
    v201 = v200 - 8;
    if (v201 < 0x168)
    {
      v202 = v186;
      goto LABEL_132;
    }
    v204 = ((char *)(v186 - 1) - (char *)v192) & 0xFFFFFFFFFFFFFFF8;
    if (&v198[v193 - 8 - v204] > &v198[v193 - 8])
    {
      v202 = v186;
      goto LABEL_132;
    }
    if ((void **)((char *)v186 - v204 - 8) > v186 - 1)
    {
      v202 = v186;
      goto LABEL_132;
    }
    if ((unint64_t)((char *)v186 - v198 - v193) < 0x20)
    {
      v202 = v186;
      goto LABEL_132;
    }
    v205 = (v201 >> 3) + 1;
    v206 = 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
    v202 = &v186[v206 / 0xFFFFFFFFFFFFFFF8];
    v199 = (_QWORD *)((char *)v199 - v206);
    v207 = &v198[8 * v194 - 16];
    v208 = (__int128 *)(v186 - 2);
    v209 = v205 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v210 = *v208;
      *(v207 - 1) = *(v208 - 1);
      *v207 = v210;
      v207 -= 2;
      v208 -= 2;
      v209 -= 4;
    }
    while (v209);
    if (v205 != (v205 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_132:
        v203 = (uint64_t)*--v202;
        *--v199 = v203;
      }
      while (v202 != v192);
    }
    v186 = (void **)v555;
    v555 = v199;
    v557 = (void **)&v198[8 * v197];
    if (v186)
LABEL_137:
      operator delete(v186);
LABEL_138:
    v9 = v523;
LABEL_110:
    v556 = (void **)v188;
    v186 = (void **)v188;
LABEL_111:
    v187 += 2;
    if (v187 != v181)
      continue;
    break;
  }
  v211 = (float32x2_t *)v555;
  v212 = v541;
  if (v541 == ((char *)v186 - (_BYTE *)v555) >> 3)
  {
LABEL_150:
    v213 = v212;
    v555 = 0;
    v556 = 0;
    v557 = 0;
    if (!v211
      && v186
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223FBEADC(v213, v211, (uint64_t)__p);
    v214 = *(float32x2_t **)__p;
    v93 = *(float32x2_t **)&__p[8];
    if (v211)
      operator delete(v211);
    a3 = v520;
    goto LABEL_452;
  }
  v543[0] = 0;
  v543[1] = (void *)LODWORD(v183);
  *(float *)v544 = v183;
  *((float *)v544 + 1) = v184;
  DWORD2(v544[0]) = 0;
  *((float *)v544 + 3) = v184;
  v534 = v182;
  if (!v182
    && v181
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223FBEADC(v541, v182, (uint64_t)__p);
  *(_OWORD *)v553 = *(_OWORD *)__p;
  v554 = *(_QWORD *)&__p[16];
  if (!sub_223FBC2C4((float32x2_t **)v553, (float *)v543, 0, 0.000001))
    goto LABEL_274;
  v216 = v556;
  if (v556 < v557)
  {
    *v556 = v543[0];
    v217 = (void **)(v216 + 8);
    goto LABEL_273;
  }
  v263 = v555;
  v264 = (char *)v556 - (_BYTE *)v555;
  v265 = ((char *)v556 - (_BYTE *)v555) >> 3;
  v266 = v265 + 1;
  if ((unint64_t)(v265 + 1) >> 61)
    goto LABEL_566;
  v267 = (char *)v557 - (_BYTE *)v555;
  if (((char *)v557 - (_BYTE *)v555) >> 2 > v266)
    v266 = v267 >> 2;
  if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFF8)
    v268 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v268 = v266;
  if (!v268)
  {
    v269 = 0;
    goto LABEL_263;
  }
  if (v268 >> 61)
    goto LABEL_568;
  v269 = operator new(8 * v268);
LABEL_263:
  v270 = (void **)&v269[8 * v265];
  *v270 = v543[0];
  v217 = v270 + 1;
  if (v216 != v263)
  {
    v271 = v216 - v263 - 8;
    if (v271 < 0x58)
      goto LABEL_575;
    if ((unint64_t)(v216 - &v269[v264]) < 0x20)
      goto LABEL_575;
    v272 = (v271 >> 3) + 1;
    v273 = 8 * (v272 & 0x3FFFFFFFFFFFFFFCLL);
    v274 = &v216[-v273];
    v270 = (void **)((char *)v270 - v273);
    v275 = &v269[8 * v265 - 16];
    v276 = (__int128 *)(v216 - 16);
    v277 = v272 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v278 = *v276;
      *(v275 - 1) = *(v276 - 1);
      *v275 = v278;
      v275 -= 2;
      v276 -= 2;
      v277 -= 4;
    }
    while (v277);
    v216 = v274;
    if (v272 != (v272 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_575:
      do
      {
        v279 = (void *)*((_QWORD *)v216 - 1);
        v216 -= 8;
        *--v270 = v279;
      }
      while (v216 != v263);
    }
    v216 = v555;
  }
  v555 = v270;
  v556 = v217;
  v557 = (void **)&v269[8 * v268];
  if (v216)
    operator delete(v216);
LABEL_273:
  v556 = v217;
LABEL_274:
  if (!sub_223FBC2C4((float32x2_t **)v553, (float *)&v543[1], 0, 0.000001))
    goto LABEL_298;
  v280 = v556;
  if (v556 < v557)
  {
    *v556 = v543[1];
    v281 = (void **)(v280 + 8);
    goto LABEL_297;
  }
  v282 = v555;
  v283 = (char *)v556 - (_BYTE *)v555;
  v284 = ((char *)v556 - (_BYTE *)v555) >> 3;
  v285 = v284 + 1;
  if ((unint64_t)(v284 + 1) >> 61)
    goto LABEL_566;
  v286 = (char *)v557 - (_BYTE *)v555;
  if (((char *)v557 - (_BYTE *)v555) >> 2 > v285)
    v285 = v286 >> 2;
  if ((unint64_t)v286 >= 0x7FFFFFFFFFFFFFF8)
    v287 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v287 = v285;
  if (!v287)
  {
    v288 = 0;
    goto LABEL_287;
  }
  if (v287 >> 61)
    goto LABEL_568;
  v288 = operator new(8 * v287);
LABEL_287:
  v289 = (void **)&v288[8 * v284];
  *v289 = v543[1];
  v281 = v289 + 1;
  if (v280 != v282)
  {
    v290 = v280 - v282 - 8;
    if (v290 < 0x58)
      goto LABEL_576;
    if ((unint64_t)(v280 - v288 - v283) < 0x20)
      goto LABEL_576;
    v291 = (v290 >> 3) + 1;
    v292 = 8 * (v291 & 0x3FFFFFFFFFFFFFFCLL);
    v293 = &v280[-v292];
    v289 = (void **)((char *)v289 - v292);
    v294 = &v288[8 * v284 - 16];
    v295 = (__int128 *)(v280 - 16);
    v296 = v291 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v297 = *v295;
      *(v294 - 1) = *(v295 - 1);
      *v294 = v297;
      v294 -= 2;
      v295 -= 2;
      v296 -= 4;
    }
    while (v296);
    v280 = v293;
    if (v291 != (v291 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_576:
      do
      {
        v298 = (void *)*((_QWORD *)v280 - 1);
        v280 -= 8;
        *--v289 = v298;
      }
      while (v280 != v282);
    }
    v280 = v555;
  }
  v555 = v289;
  v556 = v281;
  v557 = (void **)&v288[8 * v287];
  if (v280)
    operator delete(v280);
LABEL_297:
  v556 = v281;
LABEL_298:
  if (!sub_223FBC2C4((float32x2_t **)v553, (float *)v544, 0, 0.000001))
    goto LABEL_322;
  v299 = v556;
  if (v556 < v557)
  {
    *v556 = *(void **)&v544[0];
    v300 = (void **)(v299 + 8);
    goto LABEL_321;
  }
  v301 = v555;
  v302 = (char *)v556 - (_BYTE *)v555;
  v303 = ((char *)v556 - (_BYTE *)v555) >> 3;
  v304 = v303 + 1;
  if ((unint64_t)(v303 + 1) >> 61)
    goto LABEL_566;
  v305 = (char *)v557 - (_BYTE *)v555;
  if (((char *)v557 - (_BYTE *)v555) >> 2 > v304)
    v304 = v305 >> 2;
  if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFF8)
    v306 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v306 = v304;
  if (!v306)
  {
    v307 = 0;
    goto LABEL_311;
  }
  if (v306 >> 61)
    goto LABEL_568;
  v307 = operator new(8 * v306);
LABEL_311:
  v308 = (void **)&v307[8 * v303];
  *v308 = *(void **)&v544[0];
  v300 = v308 + 1;
  if (v299 != v301)
  {
    v309 = v299 - v301 - 8;
    if (v309 < 0x58)
      goto LABEL_577;
    if ((unint64_t)(v299 - v307 - v302) < 0x20)
      goto LABEL_577;
    v310 = (v309 >> 3) + 1;
    v311 = 8 * (v310 & 0x3FFFFFFFFFFFFFFCLL);
    v312 = &v299[-v311];
    v308 = (void **)((char *)v308 - v311);
    v313 = &v307[8 * v303 - 16];
    v314 = (__int128 *)(v299 - 16);
    v315 = v310 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v316 = *v314;
      *(v313 - 1) = *(v314 - 1);
      *v313 = v316;
      v313 -= 2;
      v314 -= 2;
      v315 -= 4;
    }
    while (v315);
    v299 = v312;
    if (v310 != (v310 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_577:
      do
      {
        v317 = (void *)*((_QWORD *)v299 - 1);
        v299 -= 8;
        *--v308 = v317;
      }
      while (v299 != v301);
    }
    v299 = v555;
  }
  v555 = v308;
  v556 = v300;
  v557 = (void **)&v307[8 * v306];
  if (v299)
    operator delete(v299);
LABEL_321:
  v556 = v300;
LABEL_322:
  if (!sub_223FBC2C4((float32x2_t **)v553, (float *)v544 + 2, 0, 0.000001))
    goto LABEL_346;
  v318 = v556;
  if (v556 < v557)
  {
    *v556 = (void *)*((_QWORD *)&v544[0] + 1);
    v319 = (void **)(v318 + 8);
    goto LABEL_345;
  }
  v320 = v555;
  v321 = (char *)v556 - (_BYTE *)v555;
  v322 = ((char *)v556 - (_BYTE *)v555) >> 3;
  v323 = v322 + 1;
  if ((unint64_t)(v322 + 1) >> 61)
LABEL_566:
    sub_22316E078();
  v324 = (char *)v557 - (_BYTE *)v555;
  if (((char *)v557 - (_BYTE *)v555) >> 2 > v323)
    v323 = v324 >> 2;
  if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF8)
    v325 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v325 = v323;
  if (!v325)
  {
    v326 = 0;
    goto LABEL_335;
  }
  if (v325 >> 61)
LABEL_568:
    sub_223174E94();
  v326 = operator new(8 * v325);
LABEL_335:
  v327 = (void **)&v326[8 * v322];
  *v327 = (void *)*((_QWORD *)&v544[0] + 1);
  v319 = v327 + 1;
  if (v318 != v320)
  {
    v328 = v318 - v320 - 8;
    if (v328 < 0x58)
      goto LABEL_578;
    if ((unint64_t)(v318 - v326 - v321) < 0x20)
      goto LABEL_578;
    v329 = (v328 >> 3) + 1;
    v330 = 8 * (v329 & 0x3FFFFFFFFFFFFFFCLL);
    v331 = &v318[-v330];
    v327 = (void **)((char *)v327 - v330);
    v332 = &v326[8 * v322 - 16];
    v333 = (__int128 *)(v318 - 16);
    v334 = v329 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v335 = *v333;
      *(v332 - 1) = *(v333 - 1);
      *v332 = v335;
      v332 -= 2;
      v333 -= 2;
      v334 -= 4;
    }
    while (v334);
    v318 = v331;
    if (v329 != (v329 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_578:
      do
      {
        v336 = (void *)*((_QWORD *)v318 - 1);
        v318 -= 8;
        *--v327 = v336;
      }
      while (v318 != v320);
    }
    v318 = v555;
  }
  v555 = v327;
  v556 = v319;
  v557 = (void **)&v326[8 * v325];
  if (v318)
    operator delete(v318);
LABEL_345:
  v556 = v319;
LABEL_346:
  *(void **)__p = v543[0];
  *(void **)&__p[8] = v543[1];
  *(_OWORD *)&__p[16] = __PAIR128__(*(unint64_t *)&v544[0], (unint64_t)v543[1]);
  *(_OWORD *)&__p[32] = v544[0];
  v561.f64[0] = *((float64_t *)v544 + 1);
  *(void **)&v561.f64[1] = v543[0];
  if (v553[1] != v553[0])
  {
    v337 = 0;
    v538 = ((char *)v553[1] - (char *)v553[0]) >> 3;
    while (2)
    {
      v339 = v337 + 1;
      v558 = (float32x2_t *)*((_QWORD *)v553[0] + v337);
      v559 = (float32x2_t *)*((_QWORD *)v553[0]
                            + (v337 + 1) % (unint64_t)(((char *)v553[1] - (char *)v553[0]) >> 3));
      if (!sub_22369F3FC((float32x2_t *)__p, (float32x2_t *)&v558, &v552, 0))
        goto LABEL_375;
      v340 = v556;
      if (v556 < v557)
      {
        *v556 = (void *)v552;
        v341 = (uint64_t)(v340 + 8);
        goto LABEL_374;
      }
      v342 = v555;
      v343 = (char *)v556 - (_BYTE *)v555;
      v344 = ((char *)v556 - (_BYTE *)v555) >> 3;
      v345 = v344 + 1;
      if ((unint64_t)(v344 + 1) >> 61)
        goto LABEL_553;
      v346 = (char *)v557 - (_BYTE *)v555;
      if (((char *)v557 - (_BYTE *)v555) >> 2 > v345)
        v345 = v346 >> 2;
      if ((unint64_t)v346 >= 0x7FFFFFFFFFFFFFF8)
        v347 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v347 = v345;
      if (v347)
      {
        if (v347 >> 61)
          goto LABEL_554;
        v348 = operator new(8 * v347);
        v349 = (float32x2_t *)&v348[8 * v344];
        *v349 = v552;
        v341 = (uint64_t)&v349[1];
        v350 = v340 - v342;
        if (v340 != v342)
        {
LABEL_363:
          v351 = v350 - 8;
          if (v351 < 0x58)
            goto LABEL_579;
          if ((unint64_t)(v340 - v348 - v343) < 0x20)
            goto LABEL_579;
          v352 = (v351 >> 3) + 1;
          v353 = 8 * (v352 & 0x3FFFFFFFFFFFFFFCLL);
          v354 = &v340[-v353];
          v349 = (float32x2_t *)((char *)v349 - v353);
          v355 = &v348[8 * v344 - 16];
          v356 = (__int128 *)(v340 - 16);
          v357 = v352 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v358 = *v356;
            *(v355 - 1) = *(v356 - 1);
            *v355 = v358;
            v355 -= 2;
            v356 -= 2;
            v357 -= 4;
          }
          while (v357);
          v340 = v354;
          if (v352 != (v352 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_579:
            do
            {
              v359 = *(float32x2_t *)(v340 - 8);
              v340 -= 8;
              v349[-1] = v359;
              --v349;
            }
            while (v340 != v342);
          }
          v340 = v555;
          v555 = v349;
          v556 = (void **)v341;
          v557 = (void **)&v348[8 * v347];
          if (!v340)
          {
LABEL_374:
            v556 = (void **)v341;
LABEL_375:
            if (!sub_22369F3FC((float32x2_t *)&__p[16], (float32x2_t *)&v558, &v552, 0))
              goto LABEL_399;
            v360 = v556;
            if (v556 >= v557)
            {
              v362 = v555;
              v363 = (char *)v556 - (_BYTE *)v555;
              v364 = ((char *)v556 - (_BYTE *)v555) >> 3;
              v365 = v364 + 1;
              if ((unint64_t)(v364 + 1) >> 61)
                goto LABEL_553;
              v366 = (char *)v557 - (_BYTE *)v555;
              if (((char *)v557 - (_BYTE *)v555) >> 2 > v365)
                v365 = v366 >> 2;
              if ((unint64_t)v366 >= 0x7FFFFFFFFFFFFFF8)
                v367 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v367 = v365;
              if (v367)
              {
                if (v367 >> 61)
                  goto LABEL_554;
                v368 = operator new(8 * v367);
                v369 = (float32x2_t *)&v368[8 * v364];
                *v369 = v552;
                v361 = (uint64_t)&v369[1];
                v370 = v360 - v362;
                if (v360 != v362)
                {
LABEL_387:
                  v371 = v370 - 8;
                  if (v371 < 0x58)
                    goto LABEL_580;
                  if ((unint64_t)(v360 - v368 - v363) < 0x20)
                    goto LABEL_580;
                  v372 = (v371 >> 3) + 1;
                  v373 = 8 * (v372 & 0x3FFFFFFFFFFFFFFCLL);
                  v374 = &v360[-v373];
                  v369 = (float32x2_t *)((char *)v369 - v373);
                  v375 = &v368[8 * v364 - 16];
                  v376 = (__int128 *)(v360 - 16);
                  v377 = v372 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v378 = *v376;
                    *(v375 - 1) = *(v376 - 1);
                    *v375 = v378;
                    v375 -= 2;
                    v376 -= 2;
                    v377 -= 4;
                  }
                  while (v377);
                  v360 = v374;
                  if (v372 != (v372 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_580:
                    do
                    {
                      v379 = *(float32x2_t *)(v360 - 8);
                      v360 -= 8;
                      v369[-1] = v379;
                      --v369;
                    }
                    while (v360 != v362);
                  }
                  v360 = v555;
                  v555 = v369;
                  v556 = (void **)v361;
                  v557 = (void **)&v368[8 * v367];
                  if (!v360)
                    goto LABEL_398;
LABEL_397:
                  operator delete(v360);
                  goto LABEL_398;
                }
              }
              else
              {
                v368 = 0;
                v369 = (float32x2_t *)(8 * v364);
                *(float32x2_t *)(8 * v364) = v552;
                v361 = 8 * v364 + 8;
                v370 = v360 - v362;
                if (v360 != v362)
                  goto LABEL_387;
              }
              v555 = v369;
              v556 = (void **)v361;
              v557 = (void **)&v368[8 * v367];
              if (v360)
                goto LABEL_397;
            }
            else
            {
              *v556 = (void *)v552;
              v361 = (uint64_t)(v360 + 8);
            }
LABEL_398:
            v556 = (void **)v361;
LABEL_399:
            if (!sub_22369F3FC((float32x2_t *)&__p[32], (float32x2_t *)&v558, &v552, 0))
              goto LABEL_423;
            v380 = v556;
            if (v556 >= v557)
            {
              v382 = v555;
              v383 = (char *)v556 - (_BYTE *)v555;
              v384 = ((char *)v556 - (_BYTE *)v555) >> 3;
              v385 = v384 + 1;
              if ((unint64_t)(v384 + 1) >> 61)
                goto LABEL_553;
              v386 = (char *)v557 - (_BYTE *)v555;
              if (((char *)v557 - (_BYTE *)v555) >> 2 > v385)
                v385 = v386 >> 2;
              if ((unint64_t)v386 >= 0x7FFFFFFFFFFFFFF8)
                v387 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v387 = v385;
              if (v387)
              {
                if (v387 >> 61)
                  goto LABEL_554;
                v388 = operator new(8 * v387);
                v389 = (float32x2_t *)&v388[8 * v384];
                *v389 = v552;
                v381 = (uint64_t)&v389[1];
                v390 = v380 - v382;
                if (v380 != v382)
                {
LABEL_411:
                  v391 = v390 - 8;
                  if (v391 < 0x58)
                    goto LABEL_581;
                  if ((unint64_t)(v380 - v388 - v383) < 0x20)
                    goto LABEL_581;
                  v392 = (v391 >> 3) + 1;
                  v393 = 8 * (v392 & 0x3FFFFFFFFFFFFFFCLL);
                  v394 = &v380[-v393];
                  v389 = (float32x2_t *)((char *)v389 - v393);
                  v395 = &v388[8 * v384 - 16];
                  v396 = (__int128 *)(v380 - 16);
                  v397 = v392 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v398 = *v396;
                    *(v395 - 1) = *(v396 - 1);
                    *v395 = v398;
                    v395 -= 2;
                    v396 -= 2;
                    v397 -= 4;
                  }
                  while (v397);
                  v380 = v394;
                  if (v392 != (v392 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_581:
                    do
                    {
                      v399 = *(float32x2_t *)(v380 - 8);
                      v380 -= 8;
                      v389[-1] = v399;
                      --v389;
                    }
                    while (v380 != v382);
                  }
                  v380 = v555;
                  v555 = v389;
                  v556 = (void **)v381;
                  v557 = (void **)&v388[8 * v387];
                  if (!v380)
                    goto LABEL_422;
LABEL_421:
                  operator delete(v380);
                  goto LABEL_422;
                }
              }
              else
              {
                v388 = 0;
                v389 = (float32x2_t *)(8 * v384);
                *(float32x2_t *)(8 * v384) = v552;
                v381 = 8 * v384 + 8;
                v390 = v380 - v382;
                if (v380 != v382)
                  goto LABEL_411;
              }
              v555 = v389;
              v556 = (void **)v381;
              v557 = (void **)&v388[8 * v387];
              if (v380)
                goto LABEL_421;
            }
            else
            {
              *v556 = (void *)v552;
              v381 = (uint64_t)(v380 + 8);
            }
LABEL_422:
            v556 = (void **)v381;
LABEL_423:
            if (!sub_22369F3FC((float32x2_t *)&v561, (float32x2_t *)&v558, &v552, 0))
              goto LABEL_350;
            v400 = v556;
            if (v556 < v557)
            {
              *v556 = (void *)v552;
              v338 = (uint64_t)(v400 + 8);
            }
            else
            {
              v401 = v555;
              v402 = (char *)v556 - (_BYTE *)v555;
              v403 = ((char *)v556 - (_BYTE *)v555) >> 3;
              v404 = v403 + 1;
              if ((unint64_t)(v403 + 1) >> 61)
LABEL_553:
                sub_22316E078();
              v405 = (char *)v557 - (_BYTE *)v555;
              if (((char *)v557 - (_BYTE *)v555) >> 2 > v404)
                v404 = v405 >> 2;
              if ((unint64_t)v405 >= 0x7FFFFFFFFFFFFFF8)
                v406 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v406 = v404;
              if (v406)
              {
                if (v406 >> 61)
LABEL_554:
                  sub_223174E94();
                v407 = operator new(8 * v406);
                v408 = (float32x2_t *)&v407[8 * v403];
                *v408 = v552;
                v338 = (uint64_t)&v408[1];
                v409 = v400 - v401;
                if (v400 != v401)
                {
LABEL_434:
                  v410 = v409 - 8;
                  if (v410 < 0x58)
                    goto LABEL_582;
                  if ((unint64_t)(v400 - v407 - v402) < 0x20)
                    goto LABEL_582;
                  v411 = (v410 >> 3) + 1;
                  v412 = 8 * (v411 & 0x3FFFFFFFFFFFFFFCLL);
                  v413 = &v400[-v412];
                  v408 = (float32x2_t *)((char *)v408 - v412);
                  v414 = &v407[8 * v403 - 16];
                  v415 = (__int128 *)(v400 - 16);
                  v416 = v411 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v417 = *v415;
                    *(v414 - 1) = *(v415 - 1);
                    *v414 = v417;
                    v414 -= 2;
                    v415 -= 2;
                    v416 -= 4;
                  }
                  while (v416);
                  v400 = v413;
                  if (v411 != (v411 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_582:
                    do
                    {
                      v418 = *(float32x2_t *)(v400 - 8);
                      v400 -= 8;
                      v408[-1] = v418;
                      --v408;
                    }
                    while (v400 != v401);
                  }
                  v400 = v555;
                  v555 = v408;
                  v556 = (void **)v338;
                  v557 = (void **)&v407[8 * v406];
                  if (!v400)
                    goto LABEL_349;
LABEL_444:
                  operator delete(v400);
                  goto LABEL_349;
                }
              }
              else
              {
                v407 = 0;
                v408 = (float32x2_t *)(8 * v403);
                *(float32x2_t *)(8 * v403) = v552;
                v338 = 8 * v403 + 8;
                v409 = v400 - v401;
                if (v400 != v401)
                  goto LABEL_434;
              }
              v555 = v408;
              v556 = (void **)v338;
              v557 = (void **)&v407[8 * v406];
              if (v400)
                goto LABEL_444;
            }
LABEL_349:
            v556 = (void **)v338;
LABEL_350:
            v337 = v339;
            if (v339 == v538)
              goto LABEL_445;
            continue;
          }
LABEL_373:
          operator delete(v340);
          goto LABEL_374;
        }
      }
      else
      {
        v348 = 0;
        v349 = (float32x2_t *)(8 * v344);
        *(float32x2_t *)(8 * v344) = v552;
        v341 = 8 * v344 + 8;
        v350 = v340 - v342;
        if (v340 != v342)
          goto LABEL_363;
      }
      break;
    }
    v555 = v349;
    v556 = (void **)v341;
    v557 = (void **)&v348[8 * v347];
    if (!v340)
      goto LABEL_374;
    goto LABEL_373;
  }
LABEL_445:
  v420 = (float32x2_t *)v555;
  v419 = v556;
  v556 = 0;
  v557 = 0;
  v555 = 0;
  v9 = v523;
  a3 = v520;
  v182 = v534;
  if (!v420
    && v419
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223FBEADC(((char *)v419 - (char *)v420) >> 3, v420, (uint64_t)&v558);
  v214 = v558;
  v93 = v559;
  if (v420)
    operator delete(v420);
  if (v553[0])
  {
    v553[1] = v553[0];
    operator delete(v553[0]);
  }
LABEL_452:
  if (v555)
  {
    v556 = (void **)v555;
    operator delete(v555);
  }
  if (v182)
    operator delete(v182);
  v215 = v547;
  v178 = v536;
  if (v547)
  {
LABEL_457:
    *(_QWORD *)&v548 = v215;
    operator delete(v215);
  }
LABEL_458:
  if (v178 == v177)
    return 1;
  v75.i32[0] = a3[1].i32[0];
  v421 = a3[2];
  v73.i32[0] = a3[3].i32[0];
  v422 = a3[4];
  v78.i32[0] = a3[5].i32[0];
  *(float32x2_t *)v76.i8 = v9[15];
  v77.i32[0] = v9[16].i32[0];
  *(float32x2_t *)v423.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a3, *(float *)v76.i32), v421, *(float32x2_t *)v76.i8, 1), v422, *(float *)v77.i32);
  *(float32x2_t *)&v423.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v76.i8), *(float32x2_t *)v73.i8, *(float32x2_t *)v76.i8, 1), *(float32x2_t *)v77.i8, *(float32x2_t *)v78.i8);
  *(float32x2_t *)v76.i8 = a3[6];
  v76.i32[2] = a3[7].i32[0];
  v424 = (int8x16_t)vaddq_f32(v423, (float32x4_t)v76);
  *(float32x2_t *)v425.i8 = *(float32x2_t *)((char *)v9 + 132);
  v423.i32[0] = v9[17].i32[1];
  v426 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a3, *(float *)v425.i32), v421, *(float32x2_t *)v425.i8, 1), v422, v423.f32[0]);
  v427 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v425.i8), *(float32x2_t *)v73.i8, *(float32x2_t *)v425.i8, 1);
  v428.i64[0] = *(_QWORD *)(v513 + 32);
  v428.i64[1] = *(unsigned int *)(v513 + 40);
  LODWORD(v429) = HIDWORD(*(_QWORD *)(v513 + 32));
  HIDWORD(v429) = *(_DWORD *)(v513 + 44);
  v430 = vmla_f32(v427, *(float32x2_t *)v423.f32, *(float32x2_t *)v78.i8);
  v431 = vmla_f32(vmla_lane_f32(vmul_f32(v426, *(float32x2_t *)v424.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v424.i8, 1), v426, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v424, v424, 8uLL), v430);
  v432 = (float32x4_t)vdupq_lane_s32((int32x2_t)v431, 0);
  _Q1 = (int8x16_t)vdivq_f32((float32x4_t)v429, v432);
  v434 = (int8x16_t)vdivq_f32(v428, v432);
  *(float32x2_t *)v432.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v434.i8, v426.f32[0]), (float32x2_t)*(_OWORD *)&vextq_s8(v434, _Q1, 0xCuLL), v426, 1), (float32x2_t)*(_OWORD *)&vextq_s8(_Q1, _Q1, 8uLL), v430.f32[0]);
  v539 = v430;
  v542 = v426;
  *(float32x2_t *)v434.i8 = vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v434, v434, 8uLL), v426), (float32x2_t)vdup_lane_s32((int32x2_t)v426, 1), *(float32x2_t *)_Q1.i8, 1);
  __asm { FMOV            V1.2S, #1.0 }
  v558 = (float32x2_t *)v432.i64[0];
  LODWORD(v559) = vmla_f32(*(float32x2_t *)v434.i8, v430, vdiv_f32(*(float32x2_t *)_Q1.i8, v431)).u32[0];
  memset(__p, 0, 24);
  v439 = (char *)v93 - (char *)v214;
  if (v93 == v214)
  {
    v444 = 0;
    v443 = 0;
    v445 = 0.0;
    v446 = (_DWORD *)v513;
  }
  else
  {
    if (v439 < 0)
      sub_2236B43DC();
    v440 = v439 >> 3;
    *(_QWORD *)__p = operator new((char *)v93 - (char *)v214);
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    *(_QWORD *)&__p[16] = *(_QWORD *)__p + 8 * (v439 >> 3);
    *(_QWORD *)v549 = __p;
    v441 = v214;
    do
    {
      v543[0] = (void *)vcvt_s32_f32(vadd_f32(*v441, (float32x2_t)0x3F0000003F000000));
      sub_2236B43F0((void ***)v549, v543);
      ++v441;
    }
    while (v441 != v93);
    v444 = *(int **)__p;
    v443 = *(int **)&__p[8];
    v445 = 0.0;
    if ((unint64_t)v439 < 0x18)
    {
      v446 = (_DWORD *)v513;
      goto LABEL_480;
    }
    if (v440 <= 1)
      v448 = 1;
    else
      v448 = v439 >> 3;
    v449 = v214[v440 - 1];
    v446 = (_DWORD *)v513;
    if (v448 >= 8)
    {
      v442.u64[1] = (unint64_t)v214[v440 - 1];
      v450 = v448 & 0xFFFFFFFFFFFFFFF8;
      v452 = (int8x16_t)vdupq_lane_s32((int32x2_t)v449, 0);
      v453 = v214 + 4;
      v451 = 0.0;
      v454 = v448 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v455 = (const float *)&v453[-4];
        v570 = vld2q_f32(v455);
        v457 = *(int32x4_t *)v453->f32;
        v456 = *(int8x16_t *)v453[2].f32;
        v453 += 8;
        v425 = (int8x16_t)vuzp1q_s32(v457, (int32x4_t)v456);
        v458 = (int8x16_t)vuzp2q_s32(v457, (int32x4_t)v456);
        v459 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8(v452, (int8x16_t)v570.val[0], 0xCuLL), v570.val[0]), vsubq_f32(v570.val[1], (float32x4_t)vextq_s8(v442, (int8x16_t)v570.val[1], 0xCuLL)));
        v460 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v570.val[0], v425, 0xCuLL), (float32x4_t)v425), vsubq_f32((float32x4_t)v458, (float32x4_t)vextq_s8((int8x16_t)v570.val[1], v458, 0xCuLL)));
        v570.val[0] = (float32x4_t)vcvt_hight_f64_f32(v459);
        v461 = vcvtq_f64_f32(*(float32x2_t *)v459.f32);
        v462 = vcvt_hight_f64_f32(v460);
        v463 = vcvtq_f64_f32(*(float32x2_t *)v460.f32);
        v451 = v451
             + v461.f64[0]
             + v461.f64[1]
             + *(double *)v570.val[0].i64
             + *(double *)&v570.val[0].i64[1]
             + v463.f64[0]
             + v463.f64[1]
             + v462.f64[0]
             + v462.f64[1];
        v442 = v458;
        v452 = v425;
        v454 -= 8;
      }
      while (v454);
      if (v448 != v450)
      {
        v449 = (float32x2_t)vextq_s8(v456, v456, 8uLL).u64[0];
        goto LABEL_477;
      }
    }
    else
    {
      v450 = 0;
      v451 = 0.0;
LABEL_477:
      v464 = v448 - v450;
      v465 = &v214[v450];
      do
      {
        v466 = *v465++;
        v451 = v451 + vmul_lane_f32(vadd_f32(v466, v449), vsub_f32(v466, v449), 1).f32[0];
        v449 = v466;
        --v464;
      }
      while (v464);
    }
    v445 = v451 * 0.5;
  }
LABEL_480:
  v467 = v542;
  *(float32x2_t *)v468.f32 = vmul_n_f32(v467, v467.f32[0]);
  *(float32x2_t *)&v468.u32[2] = vmul_f32(v539, v542);
  v555 = 0;
  *(float32x2_t *)v469.f32 = vmul_lane_f32(v467, v467, 1);
  *(float32x2_t *)&v469.u32[2] = vmul_lane_f32(v539, v542, 1);
  *(float32x2_t *)v470.f32 = vmul_n_f32(v542, v539.f32[0]);
  *(float32x2_t *)&v470.u32[2] = vmul_f32(v539, v539);
  *(_QWORD *)&v471.f64[1] = 0x80000000;
  v472 = (int8x16_t)vaddq_f32(v468, (float32x4_t)xmmword_224649950);
  v473 = (int8x16_t)vaddq_f32(v469, (float32x4_t)xmmword_224649960);
  v474 = (float64x2_t)xmmword_224649970;
  v475 = (int8x16_t)vaddq_f32(v470, (float32x4_t)xmmword_224649970);
  v425.i32[0] = v446[8];
  v470.i32[0] = v446[9];
  v469.i32[0] = v446[10];
  LODWORD(v474.f64[0]) = v446[11];
  v476.i32[0] = 0;
  v476.i32[1] = v470.i32[0];
  v477 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v425.u32[0], *(float *)v472.i32), v476, *(float32x2_t *)v472.i8, 1), 0, (float32x4_t)v472, 2);
  *(float32x2_t *)v472.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v472, v472, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v469.f32, *(float32x2_t *)v472.i8), *(float32x2_t *)&v474.f64[0], *(float32x2_t *)v472.i8, 1));
  v478 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v425.u32[0], *(float *)v473.i32), v476, *(float32x2_t *)v473.i8, 1), 0, (float32x4_t)v473, 2);
  v479 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v469.f32, *(float32x2_t *)v473.i8), *(float32x2_t *)&v474.f64[0], *(float32x2_t *)v473.i8, 1);
  v480 = (int64x2_t)vextq_s8(v473, v473, 8uLL);
  *(float32x2_t *)v480.i8 = vadd_f32(*(float32x2_t *)v480.i8, v479);
  v481 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v425.u32[0], *(float *)v475.i32), v476, *(float32x2_t *)v475.i8, 1), 0, (float32x4_t)v475, 2);
  *(float32x2_t *)v475.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v475, v475, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v469.f32, *(float32x2_t *)v475.i8), *(float32x2_t *)&v474.f64[0], *(float32x2_t *)v475.i8, 1));
  v482 = vmla_f32(vmla_n_f32(vmul_f32(v477, 0), v478, v470.f32[0]), 0, v481);
  v483 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v472.i8, 0), *(float32x2_t *)v470.f32, *(float32x2_t *)v480.i8), 0, *(float32x2_t *)v475.i8).f32[0];
  *(float32x2_t *)v470.f32 = vadd_f32(v481, vmla_n_f32(vmul_n_f32(v477, v469.f32[0]), v478, *(float *)v474.f64));
  *(float *)v474.f64 = vadd_f32(*(float32x2_t *)v475.i8, vmla_f32(vmul_f32(*(float32x2_t *)v472.i8, *(float32x2_t *)v469.f32), *(float32x2_t *)&v474.f64[0], *(float32x2_t *)v480.i8)).f32[0];
  *(float64x2_t *)__p = vcvtq_f64_f32(vmla_f32(vmla_f32(vmul_n_f32(v477, *(float *)v425.i32), 0, v478), 0, v481));
  v471.f64[0] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v472.i8, *(float32x2_t *)v425.i8), 0, *(float32x2_t *)v480.i8), 0, *(float32x2_t *)v475.i8).f32[0];
  *(float64x2_t *)&__p[24] = vcvtq_f64_f32(v482);
  *(double *)v480.i64 = v483;
  *(double *)&__p[16] = v471.f64[0];
  *(double *)&__p[40] = v483;
  v561 = vcvtq_f64_f32(*(float32x2_t *)v470.f32);
  v474.f64[0] = *(float *)v474.f64;
  __asm { FMOV            V6.2D, #0.5 }
  v563 = vmulq_f64(vaddq_f64(*(float64x2_t *)__p, (float64x2_t)vzip1q_s64(*(int64x2_t *)__p, *(int64x2_t *)&__p[24])), _Q6);
  v562 = v474.f64[0];
  v564 = *(_OWORD *)&vmulq_f64(vaddq_f64(v471, v561), _Q6);
  v565 = vmulq_f64(vaddq_f64(*(float64x2_t *)&__p[24], (float64x2_t)vzip2q_s64(*(int64x2_t *)__p, *(int64x2_t *)&__p[24])), _Q6);
  v566 = *(_OWORD *)&vmulq_f64(vaddq_f64((float64x2_t)v480, (float64x2_t)vdupq_laneq_s64((int64x2_t)v561, 1)), _Q6);
  v568 = *(_OWORD *)&vmulq_f64(vaddq_f64(v474, v474), _Q6);
  v567 = vmulq_f64(vaddq_f64(v561, (float64x2_t)vzip1q_s64((int64x2_t)v471, v480)), _Q6);
  v569 = v446[22];
  *(_QWORD *)v549 = __p;
  *(_QWORD *)&v549[8] = v512;
  *(_QWORD *)&v549[16] = &v558;
  *(_QWORD *)&v549[24] = &v555;
  v485 = (char *)v443 - (char *)v444;
  if (v443 == v444)
  {
    v500 = 0;
    if (v444)
      goto LABEL_549;
  }
  else
  {
    v543[0] = 0;
    v543[1] = 0;
    *(_QWORD *)&v544[0] = 0;
    if ((unint64_t)v485 >= 0x7FFFFFFFFFFFFFF9)
      sub_2236B43DC();
    v486 = v485 >> 3;
    v543[0] = operator new(2 * v485);
    v543[1] = v543[0];
    *(_QWORD *)&v544[0] = (char *)v543[0] + 16 * (v485 >> 3);
    LODWORD(v553[0]) = 0;
    LODWORD(v547) = 0;
    sub_2236B5220(v485 >> 3, (uint64_t)v444, v553, &v547, (char **)v543);
    v487 = 126 - 2 * __clz(((char *)v543[1] - (char *)v543[0]) >> 4);
    if (v543[1] == v543[0])
      v488 = 0;
    else
      v488 = v487;
    sub_2236B598C((float *)v543[0], (float *)v543[1], v488, 1);
    v489 = (signed int)v553[0];
    if (LODWORD(v553[0]) == (_DWORD)v547)
    {
      v490 = v444;
      v491 = v444;
      if ((unint64_t)v485 >= 0x10)
      {
        v491 = v444 + 2;
        v492 = v444[2];
        v493 = *v444;
        if (v492 >= *v444)
          v490 = v444;
        else
          v490 = v444 + 2;
        if (v492 < v493)
          v491 = v444;
        if (v485 != 16)
        {
          v494 = v444 + 4;
          if (v492 <= v493)
            v495 = *v444;
          else
            v495 = v444[2];
          if (v492 < v493)
            v493 = v444[2];
          v496 = 8 * v486 - 24;
          while (v496)
          {
            v498 = v494[2];
            v499 = *v494;
            if (v498 >= *v494)
            {
              if (v499 < v493)
              {
                v493 = *v494;
                v490 = v494;
              }
              v497 = v498 < v495;
              if (v498 > v495)
                v495 = v494[2];
              if (!v497)
                v491 = v494 + 2;
              v494 += 4;
              v496 -= 16;
              if (v496 == -8)
                goto LABEL_544;
            }
            else
            {
              v493 = *v490;
              if (v498 < *v490)
              {
                v493 = v494[2];
                v490 = v494 + 2;
              }
              v495 = *v491;
              if (v499 > *v491)
                v495 = *v494;
              if (v499 >= *v491)
                v491 = v494;
              v494 += 4;
              v496 -= 16;
              if (v496 == -8)
                goto LABEL_544;
            }
          }
          if (*v494 >= *v490)
          {
            if (*v494 >= *v491)
              v491 = v494;
          }
          else
          {
            v490 = v494;
          }
        }
      }
LABEL_544:
      if (&v444[2 * v486] != v490)
        sub_2236B540C((uint64_t *)v549, v490[1], *v490, *v491);
    }
    else
    {
      v501 = (_DWORD)v547 + 1;
      if (LODWORD(v553[0]) != (_DWORD)v547 + 1)
      {
        v502 = 0;
        v503 = v543[0];
        v504 = 1;
        do
        {
          if (v502 <= v504)
            v505 = v504;
          else
            v505 = v502;
          if (v489 == v503[4 * v502 + 1] && v489 < (int)v547)
            v506 = v505 + 1;
          else
            v506 = v502;
          if (v506 <= v504)
            v507 = v504;
          else
            v507 = v506;
          if (v489 == v503[4 * v504 + 1] && v489 < (int)v547)
            v508 = v507 + 1;
          else
            v508 = v504;
          v509 = *(float *)&v503[4 * v506 + 2];
          v510 = *(float *)&v503[4 * v508 + 2];
          if (v509 <= v510)
            v504 = v508;
          else
            v504 = v506;
          if (v509 <= v510)
            v502 = v506;
          else
            v502 = v508;
          sub_2236B540C((uint64_t *)v549, v489, llroundf(*(float *)&v503[4 * v502 + 2]), llroundf(*(float *)&v503[4 * v504 + 2]));
          v503 = v543[0];
          *((float *)v543[0] + 4 * v502 + 2) = *((float *)v543[0] + 4 * v502 + 3) + *((float *)v543[0] + 4 * v502 + 2);
          *(float *)&v503[4 * v504 + 2] = *(float *)&v503[4 * v504 + 3] + *(float *)&v503[4 * v504 + 2];
          ++v489;
        }
        while (v501 != v489);
      }
    }
    if (v543[0])
    {
      v543[1] = v543[0];
      operator delete(v543[0]);
    }
    v500 = v555;
    if (v444)
LABEL_549:
      operator delete(v444);
  }
  v66 = (unint64_t)v500 <= (unint64_t)(v445 * 0.200000003);
  if (v214)
    operator delete(v214);
  return v66;
}

void sub_2236B0AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p)
{
  void *v42;

  if (__p)
    operator delete(__p);
  if (v42)
    operator delete(v42);
  if (a39)
    operator delete(a39);
  _Unwind_Resume(a1);
}

void sub_2236B0C90(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint32x2_t *a3@<X2>, float32x2_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, float *a8@<X7>, char **a9@<X8>, float32x2_t a10@<D1>, float32x2_t a11@<D3>, float32x2_t a12@<D5>, float32x4_t a13@<Q6>, double a14@<D7>, float *a15, int32x2_t *a16)
{
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float v28;
  float v29;
  float32x2_t v30;
  float v31;
  float v32;
  int32x2_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::string::size_type v43;
  _QWORD *v44;
  uint32x2_t v45;
  float32x4_t v46;
  unint64_t v47;
  char *v48;
  int8x16_t v49;
  int8x16_t v53;
  float32x2_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  char *v61;
  __int128 v62;
  float32x2_t *v63;
  float32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int32x4_t v68;
  float32x2_t v69;
  int32x4_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  uint64_t v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x4_t v90;
  int8x16_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  int8x16_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float32x2_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x2_t v108;
  _BOOL4 v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  unsigned int v114;
  uint64_t v115;
  int v116;
  int v117;
  BOOL v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  double v129;
  double v130;
  double v131;
  int8x16_t v132;
  int8x16_t v133;
  double v134;
  int8x16_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  int8x16_t v141;
  float64x2_t v142;
  unint64_t v143;
  float64x2_t v144;
  unint64_t v145;
  float64x2_t v146;
  float64x2_t v147;
  int8x16_t v148;
  float64x2_t v149;
  unint64_t v150;
  float64x2_t v151;
  float64x2_t v152;
  unsigned int v153;
  unsigned int v154;
  float64x2_t v155;
  int v156;
  BOOL v157;
  double v159;
  double v160;
  double v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  double v165;
  double v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  double v170;
  double v171;
  unsigned int v172;
  unsigned int v173;
  int32x2_t v174;
  int32x2_t v175;
  float64x2_t v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  int8x16_t v181;
  unint64_t v182;
  uint64_t v183;
  uint32x2_t v184;
  float v185;
  int32x2_t v186;
  float64x2_t v187;
  unint64_t v188;
  unint64_t v189;
  char *v190;
  char *v191;
  __int128 v192;
  int8x16_t *v193;
  char *v194;
  char *v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  float32x2_t v199;
  float32x2_t v200;
  float32x2_t v201;
  float32x2_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  float32x2_t v211;
  float32x4_t v212;
  float32x4_t v213;
  uint32x2_t v214;
  float32x4_t v215;
  int8x16_t v216;
  int8x16_t v217;
  float64x2_t v218;
  int8x16_t v219;
  float32x2_t v220;
  float32x2_t v221;
  float32x2_t v222;
  int64x2_t v223;
  float32x2_t v224;
  float32x2_t v225;
  float32x2_t v226;
  int64x2_t v227;
  float32x2_t v228;
  float v229;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  std::mutex *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  __int128 v240;
  std::string *v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  std::mutex *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  __int128 v254;
  std::string *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  size_t v273;
  int v274;
  void *v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  unsigned int v281;
  int v282;
  uint64_t v283;
  _BYTE *v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  unsigned int v290;
  int v291;
  int v292;
  unsigned int v293;
  _BYTE *v294;
  int v295;
  char *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  int i;
  std::string::size_type v303;
  std::__shared_weak_count *v304;
  uint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t j;
  int data;
  int v310;
  int v311;
  int v312;
  uint64_t k;
  uint64_t v314;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  unint64_t v354;
  float32x2_t v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v366;
  __int32 v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  __int32 v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  unsigned int v375;
  int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  uint64_t v383;
  float v384;
  float v385;
  float v387;
  int v390;
  float *v391;
  float v392;
  float v393;
  float v394;
  __int16 *v395;
  float32x2_t v396;
  int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  uint64_t v404;
  float v405;
  float v406;
  float v408;
  int v411;
  float *v412;
  float v413;
  float v414;
  float v415;
  __int16 *v416;
  float32x2_t v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  float32x2_t v423;
  float32x2_t v424;
  float32x2_t v425;
  float32x2_t v426;
  float32x2_t v427;
  float32x2_t v428;
  float32x2_t v429;
  float32x2_t v430;
  int8x8_t v431;
  char *v432;
  float64x2_t v433;
  char *v434;
  float64x2_t v435;
  char *v436;
  unsigned int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  void *v441;
  void **v442;
  void *v443;
  uint64_t v444;
  unint64_t v445;
  float64x2_t *v446;
  float64x2_t *v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  char *v452;
  float64x2_t v453;
  char *v454;
  char *v455;
  __int128 v456;
  float64x2_t v457;
  char *v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  int v462;
  BOOL v463;
  unsigned int v464;
  unsigned int v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  double v470;
  int8x16_t v471;
  unint64_t v472;
  double v473;
  float64x2_t v474;
  double v475;
  float64x2_t v476;
  double v477;
  float64x2_t v478;
  int8x16_t v479;
  float64x2_t v480;
  int8x16_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  int8x16_t v486;
  int8x16_t v487;
  float64_t v488;
  double v489;
  unint64_t v490;
  float64x2_t v491;
  int8x16_t v492;
  float64x2_t v493;
  float64x2_t v494;
  int v495;
  unsigned int v496;
  unsigned int v497;
  float64x2_t v498;
  BOOL v499;
  BOOL v500;
  double v501;
  double v502;
  double v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  double v507;
  double v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  double v512;
  double v513;
  int v514;
  unsigned int v515;
  unsigned int v516;
  uint64_t v517;
  unsigned int v518;
  unsigned int v519;
  unsigned int v520;
  unsigned int v521;
  int8x16_t v522;
  unint64_t v523;
  uint64_t v524;
  float64x2_t v525;
  float64x2_t v526;
  int32x2_t v527;
  __int128 v528;
  unint64_t v529;
  float64x2_t *v530;
  char *v531;
  float64x2_t *v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t v536;
  char *v537;
  char *v538;
  char *v539;
  char **v540;
  float64x2_t v541;
  float64x2_t v542;
  double v543;
  uint64_t v544;
  unsigned int v545;
  char *__p;
  double v548;
  uint64_t *v549;
  float64x2_t v550;
  float32x2_t v551;
  double v552;
  float64x2_t v553;
  uint64_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  unint64_t v558;
  uint64_t v560;
  int8x16_t v561;
  char *v562;
  unsigned int v563;
  char v564;
  unint64_t v565;
  __int32 v566;
  int8x16_t v567;
  int8x16_t v568;
  __int32 v569;
  uint64_t v570;
  float64x2_t v571;
  float64x2_t v573;
  int8x16_t v575;
  _QWORD *v576;
  std::__shared_weak_count *v577;
  float64x2_t v578;
  int8x16_t v579;
  float v580;
  float32x2_t v581;
  float64x2_t v582;
  __int32 v583;
  unint64_t v584;
  float32x2_t v585;
  float64x2_t v586;
  float32x4_t v587;
  float32x2_t v588;
  float64_t v589;
  int v590;
  float64x2_t v591;
  float32x4_t v592;
  __int32 v593;
  float64x2_t v594;
  uint64_t v595;
  unint64_t v596;
  float32x2_t v597;
  unsigned __int32 v598;
  double v599;
  float32x2_t v600;
  uint64_t v601;
  double v602;
  int8x16_t v603;
  float32x2_t v604;
  __int32 v605;
  double v606;
  float32x2_t v607;
  unint64_t v608;
  unsigned int v609;
  double v610;
  uint64_t v611;
  float32x2_t v612;
  unsigned __int32 v613;
  float64x2_t v614;
  float32x2_t v615;
  uint64_t v616;
  unsigned int v617;
  float64x2_t v618;
  int8x16_t v619;
  __int32 v620;
  uint64_t v621;
  float32x2_t v622;
  uint64_t v623;
  int8x16_t v624;
  void *v625[2];
  uint64_t v626;
  void *v627;
  __int128 v628;
  void *v629[2];
  _BYTE v630[32];
  float64x2_t v631;
  float64_t v632;
  float64x2_t v633;
  double v634;
  float64x2_t v635;
  double v636;
  float64x2_t v637;
  double v638;
  int v639;
  uint64_t (**v640)();
  uint64_t v641;
  std::__shared_weak_count *v642;
  uint64_t v643;
  int v644;
  int v645;
  __int128 v646;
  __int128 v647;
  int v648;
  std::string v649;
  __int128 v650;
  uint64_t v651;
  uint64_t v652;
  std::__shared_weak_count *v653;
  uint64_t (**v654)();
  uint64_t v655;
  std::__shared_weak_count *v656;
  void *__b;
  unsigned int __len;
  int __len_4;
  unsigned int v660;
  unsigned int v661;
  char v662;
  char v663;
  _QWORD v664[2];
  std::string v665;
  char v666;
  _BYTE v667[32];
  int8x16_t v668;
  float32x2_t v669;
  unsigned __int32 v670;
  int v671;
  int v672;
  int v673;
  uint64_t v674;

  v674 = *MEMORY[0x24BDAC8D0];
  a10.i32[0] = a4[1].i32[0];
  v21 = a4[2];
  a11.i32[0] = a4[3].i32[0];
  v22 = a4[4];
  a12.i32[0] = a4[5].i32[0];
  LODWORD(a14) = *((_DWORD *)a2 + 2);
  *(float32x2_t *)v23.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a4, COERCE_FLOAT(*a2)), v21, *(float32x2_t *)a2, 1), v22, *(float *)&a14);
  v24 = vmla_f32(vmla_lane_f32(vmul_f32(a10, *(float32x2_t *)a2), a11, *(float32x2_t *)a2, 1), *(float32x2_t *)&a14, a12);
  *(float32x2_t *)&v23.u32[2] = v24;
  *(float32x2_t *)a13.f32 = a4[6];
  a13.i32[2] = a4[7].i32[0];
  v25 = *(float32x2_t *)((char *)a2 + 12);
  v24.i32[0] = *((_DWORD *)a2 + 5);
  *(float32x2_t *)v26.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a4, v25.f32[0]), v21, v25, 1), v22, v24.f32[0]);
  v26.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(a10, v25), a11, v25, 1), v24, a12);
  v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  v612 = (float32x2_t)v26.u64[1];
  v619 = (int8x16_t)vaddq_f32(v23, a13);
  v604 = *(float32x2_t *)v26.i8;
  v28 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v27, *(float32x2_t *)v26.i8, 1), (float32x2_t)v26.u64[1], (float32x2_t)v26.u64[1]).f32[0];
  if (v28 != 1.0)
  {
    v29 = v28 >= 1.0 ? v28 + -1.0 : 1.0 - v28;
    if (v29 > 0.000001)
      v26 = (int8x16_t)vmulq_n_f32((float32x4_t)v26, 1.0 / sqrtf(v28));
  }
  v30 = (float32x2_t)vextq_s8(v619, v619, 8uLL).u64[0];
  v31 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v619.i8, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v619.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), v30).f32[0];
  if (v31 == 0.0)
    goto LABEL_28;
  v597 = v30;
  v32 = -v31;
  if (v31 > 0.0)
    v32 = v31 + 0.0;
  if (v32 <= 0.000001)
  {
LABEL_28:
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    return;
  }
  LODWORD(v654) = 0;
  v33 = a16[1];
  if (v33)
  {
    v34 = (std::__shared_weak_count *)a16[2];
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      v33 = a16[1];
      v38 = (std::__shared_weak_count *)a16[2];
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        do
          v41 = __ldaxr(v39);
        while (__stlxr(v41 - 1, v39));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    if (a16[6].i8[1])
    {
      (*(void (**)(std::string *__return_ptr, int32x2_t, uint64_t))(**(_QWORD **)&v33 + 96))(&v665, v33, 1);
      if (a16[5].i32[0] == 1)
        goto LABEL_26;
LABEL_31:
      v629[0] = &v654;
      if (a16[4].i32[0] && a16[4].i32[1])
        sub_2236B50B8((_DWORD **)v629, (uint64_t)a16);
      goto LABEL_37;
    }
  }
  v665.__r_.__value_.__r.__words[0] = 0;
  if (a16[5].i32[0] != 1)
    goto LABEL_31;
LABEL_26:
  v42 = a16[4].u32[0];
  if (a16[5].i32[1] == (_DWORD)v42)
  {
    sub_2236B4E44((uint64_t)a16, (const float *)&v654);
  }
  else
  {
    LOBYTE(v640) = 0;
    *(_QWORD *)v667 = v42;
    v629[0] = &v640;
    v629[1] = v667;
    *(_QWORD *)v630 = &v654;
    if ((_DWORD)v42 && a16[4].i32[1])
      sub_2236B4FD4((uint64_t)v629, (uint64_t)a16);
  }
LABEL_37:
  v43 = v665.__r_.__value_.__r.__words[0];
  v665.__r_.__value_.__r.__words[0] = 0;
  if (v43)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(_QWORD **)a1;
  v576 = *(_QWORD **)(a1 + 8);
  if (v576 == *(_QWORD **)a1)
  {
    v48 = 0;
LABEL_186:
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    if (!v48)
      return;
    goto LABEL_29;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v576 - v44) > 0x276276276276276)
    sub_2236B43DC();
  v45 = a3[4];
  v46.i64[0] = *(_QWORD *)(a5 + 32);
  v46.i64[1] = *(unsigned int *)(a5 + 40);
  LODWORD(v47) = HIDWORD(*(_QWORD *)(a5 + 32));
  HIDWORD(v47) = *(_DWORD *)(a5 + 44);
  v587 = (float32x4_t)v47;
  v592 = v46;
  v48 = (char *)operator new(0x5555555555555578 * (v576 - v44));
  v560 = a6;
  __asm { FMOV            V2.2S, #-1.0 }
  v551 = _D2;
  *(float32x2_t *)v53.i8 = vadd_f32(vadd_f32(vcvt_f32_u32(v45), _D2), (float32x2_t)vdup_n_s32(0x3EFFF2E5u));
  v54 = vmla_f32(vmla_f32(vmul_f32(v604, *(float32x2_t *)v619.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v619.i8, 1), v27), v597, v612);
  v55 = (float32x4_t)vdupq_lane_s32((int32x2_t)v54, 0);
  v56 = (int8x16_t)vdivq_f32(v587, v55);
  _Q0 = (int8x16_t)vdivq_f32(v592, v55);
  v58 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)_Q0.i8, v604.f32[0]), (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, v56, 0xCuLL), v604, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), v612.f32[0]);
  v59 = vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL), v604), v27, *(float32x2_t *)v56.i8, 1);
  __asm { FMOV            V0.2S, #1.0 }
  v562 = &v48[0x5555555555555578 * (v576 - v44)];
  LODWORD(v580) = vmla_f32(v59, v612, vdiv_f32(*(float32x2_t *)_Q0.i8, v54)).u32[0];
  v60 = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v53.i8);
  v557 = (float64x2_t)v60;
  v61 = "llocatorISD_EEFvvEEE";
  __p = v48;
  v554 = a5;
  do
  {
    v63 = (float32x2_t *)v44[2];
    v665.__r_.__value_.__r.__words[0] = 0x409000003E4CCCCDLL;
    *(float32x2_t *)v60.f32 = v63[18];
    v60.i32[2] = v63[19].i32[0];
    *(float32x2_t *)v53.i8 = v63[20];
    v53.i32[2] = v63[21].i32[0];
    *(float32x2_t *)v56.i8 = v63[24];
    v56.i32[2] = v63[25].i32[0];
    v64.i64[0] = vzip1q_s32((int32x4_t)v60, (int32x4_t)v53).u64[0];
    v65 = (int8x16_t)vnegq_f32((float32x4_t)v56);
    v49.i32[0] = v63[23].i32[0];
    v66 = (int8x16_t)vtrn2q_s32((int32x4_t)v60, (int32x4_t)v53);
    v66.i32[2] = HIDWORD(*(_QWORD *)&v63[22]);
    v67 = (int8x16_t)vzip2q_s32((int32x4_t)v60, (int32x4_t)v53);
    v68 = (int32x4_t)v67;
    v68.i32[2] = v49.i32[0];
    v69 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v64.f32, *(float *)v65.i32), *(float32x2_t *)v66.i8, *(float32x2_t *)v56.i8, 1), *(float32x2_t *)v67.i8, (float32x4_t)v56, 2);
    v70 = (int32x4_t)vextq_s8(v66, v67, 4uLL);
    v71 = vmls_lane_f32(vmul_f32(v63[22], *(float32x2_t *)v65.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v63[22], 1), *(float32x2_t *)v56.i8, 1);
    v72 = (float32x2_t)vextq_s8(v65, v65, 8uLL).u64[0];
    v64.i64[1] = *(_QWORD *)&v63[22];
    v65.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v66, 0).i32[3];
    v65.i32[1] = v70.i32[0];
    v65.i64[1] = v70.u32[1];
    v68.i64[1] = vdupq_laneq_s32(v68, 2).u32[0];
    *(int8x16_t *)v630 = v65;
    *(int32x4_t *)&v630[16] = v68;
    *(float32x4_t *)v629 = v64;
    *(float32x2_t *)&v631.f64[0] = v69;
    LODWORD(v631.f64[1]) = vmla_f32(v71, v72, *(float32x2_t *)v49.i8).u32[0];
    *(float32x2_t *)v70.i8 = *a4;
    v70.i32[2] = a4[1].i32[0];
    *(float32x2_t *)v68.i8 = a4[2];
    v68.i32[2] = a4[3].i32[0];
    v73 = a4[4];
    v72.i32[0] = a4[5].i32[0];
    *(float32x2_t *)v64.f32 = a4[6];
    v64.i32[2] = a4[7].i32[0];
    v65.i64[0] = vzip1q_s32(v70, v68).u64[0];
    v74 = (int8x16_t)vnegq_f32(v64);
    v65.i32[2] = v73.i32[0];
    v75 = (int8x16_t)vtrn2q_s32(v70, v68);
    v75.i32[2] = v73.i32[1];
    v76 = (int8x16_t)vzip2q_s32(v70, v68);
    v77 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v65.i8, *(float *)v74.i32), *(float32x2_t *)v75.i8, *(float32x2_t *)v64.f32, 1), *(float32x2_t *)v76.i8, v64, 2);
    v76.i32[2] = v72.i32[0];
    HIDWORD(v631.f64[1]) = 1065353216;
    v78 = vmls_lane_f32(vmul_f32(v73, *(float32x2_t *)v74.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v73, 1), *(float32x2_t *)v64.f32, 1);
    v64.i64[0] = vextq_s8(v74, v74, 8uLL).u64[0];
    v65.i64[1] = v65.u32[2];
    v74.i32[3] = 0;
    v74.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v75, 0).i32[3];
    *(uint64_t *)((char *)v74.i64 + 4) = vextq_s8(v75, v76, 4uLL).u64[0];
    v76.i64[1] = vdupq_laneq_s32((int32x4_t)v76, 2).u32[0];
    *(int8x16_t *)&v667[16] = v74;
    v668 = v76;
    *(int8x16_t *)v667 = v65;
    v669 = v77;
    v670 = vmla_f32(v78, *(float32x2_t *)v64.f32, v72).u32[0];
    v671 = 1065353216;
    if (!sub_223EA55CC((float32x2_t *)&v665, (float32x2_t *)v667, (float32x2_t *)a5, (uint64_t *)&v665, (uint64_t)v629, (uint64_t)&v63[6]))goto LABEL_43;
    v80 = 0;
    *(float32x2_t *)v60.f32 = v63[24];
    v60.i32[2] = v63[25].i32[0];
    v53.i64[0] = *(_QWORD *)((char *)a2 + 12);
    v81 = *(float32x2_t *)(a5 + 60);
    v82 = *(float32x4_t *)a4[2].f32;
    v83 = *(float32x4_t *)a4[4].f32;
    v84 = *(float32x4_t *)a4[6].f32;
    v85 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a4->f32, *(float *)v629), v82, (float32x2_t)v629[0], 1), v83, *(float32x4_t *)v629, 2), v84, *(float32x4_t *)v629, 3);
    v49 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a4->f32, *(float *)v630), v82, *(float32x2_t *)v630, 1), v83, *(float32x4_t *)v630, 2), v84, *(float32x4_t *)v630, 3);
    v106 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a4->f32, *(float *)&v630[16]), v82, *(float32x2_t *)&v630[16], 1), v83, *(float32x4_t *)&v630[16], 2), v84, *(float32x4_t *)&v630[16], 3);
    v86 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a4->f32, *(float *)v631.f64), v82, *(float32x2_t *)&v631.f64[0], 1), v83, (float32x4_t)v631, 2), v84, (float32x4_t)v631, 3);
    v87 = v63[18];
    v82.i32[0] = v63[19].i32[0];
    *(float32x2_t *)v83.f32 = v63[20];
    v84.i32[0] = v63[21].i32[0];
    v88 = v63[22];
    v79.i32[0] = v63[23].i32[0];
    v89 = *(float32x2_t *)a2;
    v89.i32[0] = *((_DWORD *)a2 + 2);
    *(float32x2_t *)v90.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v87, COERCE_FLOAT(*a2)), *(float32x2_t *)v83.f32, *(float32x2_t *)a2, 1), v88, v89.f32[0]);
    *(float32x2_t *)&v90.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)a2), *(float32x2_t *)v84.f32, *(float32x2_t *)a2, 1), v89, v79);
    v91 = (int8x16_t)vaddq_f32(v90, v60);
    v90.i32[0] = *((_DWORD *)a2 + 5);
    v92 = v63[10];
    v93 = vmla_lane_f32(vmul_n_f32(v87, *(float *)v53.i32), *(float32x2_t *)v83.f32, *(float32x2_t *)v53.i8, 1);
    v87.i32[0] = v63[11].i32[0];
    v60.i32[0] = v63[11].i32[1];
    v94 = vmla_n_f32(v93, v88, v90.f32[0]);
    *(float32x2_t *)v82.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v53.i8), *(float32x2_t *)v84.f32, *(float32x2_t *)v53.i8, 1), *(float32x2_t *)v90.f32, v79);
    *(float32x2_t *)v53.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v94, *(float32x2_t *)v91.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.i8, 1), v94, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL), *(float32x2_t *)v82.f32);
    *(float32x2_t *)v83.f32 = vmul_n_f32(*(float32x2_t *)v86.i8, v94.f32[0]);
    v84.i64[0] = vextq_s8(v86, v86, 8uLL).u64[0];
    v83.i32[2] = vmul_f32(*(float32x2_t *)v84.f32, v94).u32[0];
    *(float32x2_t *)v95.i8 = vmul_lane_f32(*(float32x2_t *)v86.i8, v94, 1);
    v83.i32[3] = v95.i32[0];
    v95.u64[1] = (unint64_t)vmul_lane_f32(*(float32x2_t *)v84.f32, v94, 1);
    *(float32x2_t *)v86.i8 = vmul_n_f32(*(float32x2_t *)v86.i8, v82.f32[0]);
    *(float32x2_t *)v82.f32 = vmul_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v82.f32);
    v96 = (float32x4_t)vextq_s8(vextq_s8(v95, v95, 0xCuLL), v86, 8uLL);
    v97 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.i8, 0);
    *(float32x2_t *)v53.i8 = vdiv_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v53.i8);
    v98 = (int8x16_t)vdivq_f32(v96, v97);
    v99 = (int8x16_t)vdivq_f32(v83, v97);
    v96.i64[0] = *(_QWORD *)(a5 + 48);
    v97.i32[0] = *(_DWORD *)(a5 + 56);
    v95.i32[0] = *(_DWORD *)(a5 + 68);
    v100 = *(float32x2_t *)(a5 + 72);
    v91.i32[0] = *(_DWORD *)(a5 + 80);
    v101 = (float32x4_t)vextq_s8(v99, v98, 0xCuLL);
    v102 = (float32x4_t)vextq_s8(v98, v53, 8uLL);
    v103 = (int8x16_t)vaddq_f32((float32x4_t)v99, v85);
    v104 = (int8x16_t)vaddq_f32(v101, (float32x4_t)v49);
    v105 = (int8x16_t)vaddq_f32(v102, v106);
    *(float32x2_t *)v49.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v96.f32, *(float *)v103.i32), v81, *(float32x2_t *)v103.i8, 1), v100, (float32x4_t)v103, 2);
    *(float32x2_t *)v106.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v103.i8), *(float32x2_t *)v95.i8, *(float32x2_t *)v103.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL), *(float32x2_t *)v91.i8);
    *(float32x2_t *)v103.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v96.f32, *(float *)v104.i32), v81, *(float32x2_t *)v104.i8, 1), v100, (float32x4_t)v104, 2);
    *(float32x2_t *)v85.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v104.i8), *(float32x2_t *)v95.i8, *(float32x2_t *)v104.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL), *(float32x2_t *)v91.i8);
    *(float32x2_t *)v104.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v96.f32, *(float *)v105.i32), v81, *(float32x2_t *)v105.i8, 1), v100, (float32x4_t)v105, 2);
    v107 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v105.i8), *(float32x2_t *)v95.i8, *(float32x2_t *)v105.i8, 1);
    v53 = vextq_s8(v105, v105, 8uLL);
    v108 = vmla_f32(v107, *(float32x2_t *)v53.i8, *(float32x2_t *)v91.i8);
    *(float32x2_t *)v96.f32 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v49.i8, v92.f32[0]), 0, *(float32x2_t *)v103.i8), 0, *(float32x2_t *)v104.i8);
    *(float32x2_t *)v95.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v49.i8, 0), *(float32x2_t *)v103.i8, v92, 1), 0, *(float32x2_t *)v104.i8);
    *(float32x2_t *)v103.i8 = vadd_f32(*(float32x2_t *)v104.i8, vmla_n_f32(vmul_n_f32(*(float32x2_t *)v49.i8, v87.f32[0]), *(float32x2_t *)v103.i8, v60.f32[0]));
    *(_QWORD *)v667 = v96.i64[0];
    v613 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v106.f32, v92), 0, *(float32x2_t *)v85.f32), 0, v108).u32[0];
    v620 = v96.i32[0];
    *(_DWORD *)&v667[8] = v613;
    v583 = v95.i32[1];
    v588 = vadd_f32(v108, vmla_f32(vmul_f32(*(float32x2_t *)v106.f32, v87), *(float32x2_t *)v60.f32, *(float32x2_t *)v85.f32));
    v566 = v96.i32[1];
    v598 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v106.f32, 0), *(float32x2_t *)v85.f32, v92, 1), 0, v108).u32[0];
    v605 = v95.i32[0];
    *(_QWORD *)&v667[12] = v95.i64[0];
    *(_DWORD *)&v667[20] = v598;
    v569 = v103.i32[1];
    v593 = v103.i32[0];
    *(_QWORD *)&v667[24] = v103.i64[0];
    v668.i32[0] = v588.i32[0];
    do
    {
      v109 = (*(_DWORD *)&v667[v80] & 0x7FFFFFFFu) < 0x7F800000;
      if ((*(_DWORD *)&v667[v80] & 0x7FFFFFFFu) > 0x7F7FFFFF)
        break;
      _ZF = v80 == 32;
      v80 += 4;
    }
    while (!_ZF);
    if (!v109)
      goto LABEL_43;
    v110 = (_QWORD *)v63[26];
    v111 = (_QWORD *)v63[27];
    v112 = v110;
    if (v110 != v111)
    {
      v112 = (_QWORD *)v63[26];
      while (1)
      {
        _ZF = *v112 == *v44 && v112[1] == v44[1];
        if (_ZF)
          break;
        v112 += 53;
        if (v112 == v111)
          goto LABEL_60;
      }
    }
    if (v112 == v111)
    {
LABEL_60:
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/GlobalPlaneConsistency.cpp", 287, (uint64_t)"maybe_plane_id.has_value()", 26, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v114 = 0;
      v110 = (_QWORD *)v63[26];
    }
    else
    {
      v114 = (29 * (((_DWORD)v112 - (_DWORD)v110) >> 3));
    }
    v564 = v114;
    v115 = (uint64_t)&v110[53 * v114 + 33];
    if (v110[53 * v114 + 34] == *(_QWORD *)v115)
    {
      v119 = 0;
      v120 = -1;
      v121 = -1;
      v122 = *(_QWORD *)v115;
      v125 = *(_QWORD *)(v115 + 8);
      v124 = v125 - *(_QWORD *)v115;
      if (v125 == *(_QWORD *)v115)
        goto LABEL_43;
    }
    else
    {
      v116 = SLOWORD(v110[53 * v114 + 41]);
      if (v116 < 0 || (v117 = *(__int16 *)(v115 + 66), v117 < 0))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        LOWORD(v116) = *(_WORD *)(v115 + 64);
        LOWORD(v117) = *(_WORD *)(v115 + 66);
      }
      v118 = *(_WORD *)(v115 + 68) - (_WORD)v116 == 0xFFFF || (unsigned __int16)~(*(_WORD *)(v115 + 70) - v117) == 0;
      if (v118)
        v119 = 0;
      else
        v119 = (__int16)v116 + (__int16)(*(_WORD *)(v115 + 68) - v116);
      if (v118)
        v120 = -1;
      else
        v120 = (__int16)v117;
      if (v118)
        v121 = -1;
      else
        v121 = (__int16)v116;
      v122 = *(_QWORD *)v115;
      v123 = *(_QWORD *)(v115 + 8);
      v124 = v123 - *(_QWORD *)v115;
      if (v123 == *(_QWORD *)v115)
        goto LABEL_43;
    }
    v126 = 0;
    v127 = 0;
    LODWORD(v128) = 0;
    v129 = (double)v121;
    v130 = (double)v119;
    v131 = (double)(v119 - v121);
    v132 = (int8x16_t)vcvtq_f64_f32((float32x2_t)__PAIR64__(v566, v620));
    v133 = (int8x16_t)vcvtq_f64_f32((float32x2_t)__PAIR64__(v605, v613));
    *(_QWORD *)&v134 = vextq_s8(v133, v133, 8uLL).u64[0];
    v135 = (int8x16_t)vcvtq_f64_f32((float32x2_t)__PAIR64__(v598, v583));
    v136 = (float64x2_t)vextq_s8(v135, v135, 8uLL);
    v141 = (int8x16_t)vcvtq_f64_f32((float32x2_t)__PAIR64__(v569, v593));
    v137 = vcvtq_f64_f32(v588);
    v138 = (float64x2_t)vdupq_n_s64(0x3FDFFE5CA0000000uLL);
    v139 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, v134), (float64x2_t)xmmword_224649980, *(double *)v135.i64), v138, v136.f64[0]);
    v140 = *((float64x2_t *)v61 + 154);
    v56 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, v134), v140, *(double *)v135.i64), v557, v136.f64[0]);
    v567 = vextq_s8(v141, v141, 8uLL);
    v570 = v141.i64[0];
    v141.i64[1] = v567.i64[0];
    v584 = vextq_s8(v132, v132, 8uLL).u64[0];
    v589 = *(double *)v132.i64;
    *(_QWORD *)&v142.f64[0] = v132.i64[0];
    *(_QWORD *)&v142.f64[1] = v584;
    v143 = v124 >> 3;
    v144.f64[0] = v134;
    *(_QWORD *)&v144.f64[1] = v135.i64[0];
    v49 = (int8x16_t)vaddq_f64((float64x2_t)v141, vmlaq_n_f64(vmulq_n_f64(v142, (double)v121), v144, (double)v120));
    *(double *)v106.i64 = v137.f64[0] + *(double *)v133.i64 * (double)v121 + v136.f64[0] * (double)v120;
    v145 = vextq_s8(v49, v49, 8uLL).u64[0];
    v146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, *(double *)v49.i64), (float64x2_t)xmmword_224649980, (float64x2_t)v49, 1), v138, *(double *)v106.i64);
    v149 = vmlaq_n_f64(vmulq_n_f64(v142, v130), v144, (double)v120);
    v594 = (float64x2_t)v133;
    v599 = v137.f64[0];
    *(double *)v133.i64 = *(double *)v133.i64 * v130 + v136.f64[0] * (double)v120;
    v147 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, *(double *)v49.i64), v140, (float64x2_t)v49, 1), v557, *(double *)v106.i64);
    v148 = (int8x16_t)vaddq_f64((float64x2_t)v141, v149);
    v149.f64[0] = v137.f64[0] + *(double *)v133.i64;
    v150 = vextq_s8(v148, v148, 8uLL).u64[0];
    v151 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, *(double *)v148.i64), (float64x2_t)xmmword_224649980, (float64x2_t)v148, 1), v138, v149.f64[0]);
    v152 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, *(double *)v148.i64), v140, (float64x2_t)v148, 1), v557, v149.f64[0]);
    v614 = v136;
    v621 = v135.i64[0];
    v606 = v134;
    do
    {
      v153 = *(__int16 *)(v122 + 8 * v127);
      v154 = v153 - v120;
      if (v153 > v120)
      {
        do
        {
          v49.i64[1] = v145;
          v155.f64[0] = v134;
          *(_QWORD *)&v155.f64[1] = v135.i64[0];
          v49 = (int8x16_t)vaddq_f64(v155, (float64x2_t)v49);
          v145 = vextq_s8(v49, v49, 8uLL).u64[0];
          v106 = (float32x4_t)vaddq_f64(v136, (float64x2_t)v106);
          v148.i64[1] = v150;
          v148 = (int8x16_t)vaddq_f64(v155, (float64x2_t)v148);
          v150 = vextq_s8(v148, v148, 8uLL).u64[0];
          v149 = vaddq_f64(v136, v149);
          v146 = vaddq_f64(v139, v146);
          v147 = vaddq_f64((float64x2_t)v56, v147);
          v151 = vaddq_f64(v139, v151);
          v152 = vaddq_f64((float64x2_t)v56, v152);
          --v154;
        }
        while (v154);
        v120 = v153;
      }
      if (v146.f64[0] < 0.0 && v151.f64[0] < 0.0)
        goto LABEL_88;
      v157 = v147.f64[0] < 0.0;
      if (v152.f64[0] >= 0.0)
        v157 = 0;
      _NF = v151.f64[1] < 0.0 && v146.f64[1] < 0.0;
      if (_NF || v157 || v147.f64[1] < 0.0 && v152.f64[1] < 0.0)
        goto LABEL_88;
      v159 = 0.0;
      v160 = 1.0;
      if (*(double *)v106.i64 * v149.f64[0] < 0.0)
      {
        v161 = *(double *)v106.i64 / (*(double *)v106.i64 - v149.f64[0]);
        if (*(double *)v106.i64 >= 0.0)
          v160 = fmin(v161, 1.0);
        else
          v159 = fmax(v161, 0.0);
      }
      v162 = vsubq_f64(v146, v151);
      v163 = vdivq_f64(v146, v162);
      v164 = vnegq_f64(v162);
      if (v163.f64[0] >= v160)
        v165 = v160;
      else
        v165 = v163.f64[0];
      if (v164.f64[0] >= 0.0)
        v165 = v160;
      v166 = v159 >= v163.f64[0] ? v159 : v163.f64[0];
      if (v164.f64[0] > 0.0)
        v159 = v166;
      else
        v160 = v165;
      if (v164.f64[1] <= 0.0)
      {
        if (v164.f64[1] < 0.0 && v163.f64[1] < v160)
          v160 = v163.f64[1];
      }
      else if (v159 < v163.f64[1])
      {
        v159 = v163.f64[1];
      }
      v167 = vsubq_f64(v147, v152);
      v168 = vdivq_f64(v147, v167);
      v169 = vnegq_f64(v167);
      if (v159 >= v168.f64[0])
        v170 = v159;
      else
        v170 = v168.f64[0];
      if (v168.f64[0] >= v160)
        v171 = v160;
      else
        v171 = v168.f64[0];
      if (v169.f64[0] >= 0.0)
        v171 = v160;
      if (v169.f64[0] > 0.0)
        v159 = v170;
      else
        v160 = v171;
      if (v169.f64[1] <= 0.0)
      {
        if (v169.f64[1] < 0.0 && v168.f64[1] < v160)
          v160 = v168.f64[1];
      }
      else if (v159 < v168.f64[1])
      {
        v159 = v168.f64[1];
      }
      if (v159 > v160)
      {
LABEL_88:
        v156 = v128;
      }
      else
      {
        v172 = vcvtpd_u64_f64(v159 * v131 + v129);
        v173 = vcvtmd_u64_f64(v160 * v131 + v129);
        v174 = a16[5];
        v175 = a16[3];
        v176 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v153), 0);
        while (1)
        {
          v156 = v128;
          v177 = v122 + 8 * v128;
          v178 = *(__int16 *)(v177 + 4);
          if (v172 <= *(__int16 *)(v177 + 2))
            v179 = *(__int16 *)(v177 + 2);
          else
            v179 = v172;
          if (v178 >= v173)
            v180 = v173;
          else
            v180 = v178;
          if (v179 <= v180)
          {
            v181 = (int8x16_t)vaddq_f64((float64x2_t)v141, vmlaq_f64(vmulq_n_f64(v142, (double)v179), v176, v144));
            v137.f64[0] = v599 + v594.f64[0] * (double)v179 + v136.f64[0] * (double)v153;
            v182 = vextq_s8(v181, v181, 8uLL).u64[0];
            v183 = *(uint64_t *)&v137.f64[0];
            v27.i32[1] = HIDWORD(v584);
            do
            {
              ++v126;
              v181.i64[1] = v182;
              v184 = (uint32x2_t)vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64((float64x2_t)v181, (float64x2_t)vdupq_lane_s64(v183, 0)))));
              v185 = vaddv_f32(vmul_f32(v58, vcvt_f32_u32(v184)));
              v186 = vmul_s32(v174, (int32x2_t)v184);
              *(float *)(*(_QWORD *)&v175 + 4 * vadd_s32(vdup_lane_s32(v186, 1), v186).u32[0]) = v580 + v185;
              v187.f64[0] = v589;
              *(_QWORD *)&v187.f64[1] = v584;
              ++v179;
              v181 = (int8x16_t)vaddq_f64(v187, (float64x2_t)v181);
              v182 = vextq_s8(v181, v181, 8uLL).u64[0];
              v137 = vaddq_f64(v594, v137);
              v183 = *(uint64_t *)&v137.f64[0];
            }
            while (v179 <= v180);
          }
          v128 = (v156 + 1);
          v134 = v606;
          if (v143 <= v128)
            break;
          v136 = v614;
          v135.i64[0] = v621;
          if (*(unsigned __int16 *)(v122 + 8 * v128) != (unsigned __int16)v153)
            goto LABEL_89;
        }
        v136 = v614;
        v135.i64[0] = v621;
      }
LABEL_89:
      v127 = (v156 + 1);
      LODWORD(v128) = v156 + 1;
    }
    while (v143 > v127);
    if (v126)
    {
      *(_OWORD *)v667 = *(_OWORD *)v44;
      *(_QWORD *)&v667[16] = v44[2];
      if (v48 < v562)
      {
        v62 = *(_OWORD *)v44;
        *((_QWORD *)v48 + 2) = v44[2];
        *(_OWORD *)v48 = v62;
        *(float64_t *)&v62 = v589;
        *((_QWORD *)&v62 + 1) = v584;
        *(_OWORD *)(v48 + 24) = v62;
        *(float64_t *)&v62 = v594.f64[0];
        *((double *)&v62 + 1) = v134;
        *(_OWORD *)(v48 + 40) = v62;
        v135.i64[1] = *(_QWORD *)&v136.f64[0];
        *(int8x16_t *)(v48 + 56) = v135;
        *((double *)v48 + 11) = v599;
        v53.i32[3] = v567.i32[3];
        v60.i64[0] = v141.i64[0];
        v60.i64[1] = v567.i64[0];
        *(float32x4_t *)(v48 + 72) = v60;
        v48[96] = v564;
        v48 += 104;
        goto LABEL_43;
      }
      v188 = 0x4EC4EC4EC4EC4EC5 * ((v48 - __p) >> 3) + 1;
      if (v188 > 0x276276276276276)
        sub_2236B43DC();
      if (0x9D89D89D89D89D8ALL * ((v562 - __p) >> 3) > v188)
        v188 = 0x9D89D89D89D89D8ALL * ((v562 - __p) >> 3);
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v562 - __p) >> 3)) >= 0x13B13B13B13B13BLL)
        v189 = 0x276276276276276;
      else
        v189 = v188;
      if (v189 > 0x276276276276276)
        sub_223174E94();
      v190 = (char *)operator new(104 * v189);
      v191 = &v190[8 * ((v48 - __p) >> 3)];
      *(_OWORD *)v191 = *(_OWORD *)v667;
      *((_QWORD *)v191 + 2) = *(_QWORD *)&v667[16];
      *(float64_t *)&v192 = v589;
      *((_QWORD *)&v192 + 1) = v584;
      *(_OWORD *)(v191 + 24) = v192;
      *(float64_t *)&v192 = v594.f64[0];
      *((double *)&v192 + 1) = v606;
      *(_OWORD *)(v191 + 40) = v192;
      *(_QWORD *)&v192 = v621;
      *((_QWORD *)&v192 + 1) = *(_QWORD *)&v614.f64[0];
      *(_OWORD *)(v191 + 56) = v192;
      *((double *)v191 + 11) = v599;
      v53.i32[3] = v567.i32[3];
      v60.i64[0] = v570;
      v60.i64[1] = v567.i64[0];
      *(float32x4_t *)(v191 + 72) = v60;
      v191[96] = v564;
      if (v48 == __p)
      {
        v195 = &v190[8 * ((v48 - __p) >> 3)];
        v194 = __p;
        a5 = v554;
        v562 = &v190[104 * v189];
        v48 = v191 + 104;
        if (__p)
          goto LABEL_168;
      }
      else
      {
        v193 = (int8x16_t *)&v190[8 * ((v48 - __p) >> 3)];
        v194 = __p;
        a5 = v554;
        do
        {
          v195 = &v193[-7].i8[8];
          v196 = *(int8x16_t *)(v48 - 104);
          v193[-6].i64[1] = *((_QWORD *)v48 - 11);
          *(int8x16_t *)((char *)v193 - 104) = v196;
          v53 = *((int8x16_t *)v48 - 3);
          v197 = *((int8x16_t *)v48 - 2);
          v198 = *((int8x16_t *)v48 - 4);
          v193[-1].i64[0] = *((_QWORD *)v48 - 2);
          v193[-3] = v53;
          v193[-2] = v197;
          v193[-4] = v198;
          v60 = *((float32x4_t *)v48 - 5);
          v193[-5] = (int8x16_t)v60;
          v193[-1].i8[8] = *(v48 - 8);
          v48 -= 104;
          v193 = (int8x16_t *)((char *)v193 - 104);
        }
        while (v48 != __p);
        v562 = &v190[104 * v189];
        v48 = v191 + 104;
        if (__p)
LABEL_168:
          operator delete(v194);
      }
      __p = v195;
      v61 = "NSt3__110__function6__funcIZN4cv3d3kit11concurrency6detail9ProcessorINS2_5recon3sng26FailureSnapshotDoneRequ"
            "estEvvvLb0EE9SubscribeENS4_12ChannelInputIvEEEUlvE_NS_9allocatorISD_EEFvvEEE"
          + 164;
    }
LABEL_43:
    v44 += 3;
  }
  while (v44 != v576);
  if (__p == v48)
    goto LABEL_186;
  v600 = *a4;
  v199 = (float32x2_t)a4[1].u32[0];
  v607 = a4[2];
  v27.i32[0] = a4[3].i32[0];
  v200 = a4[4];
  v615 = v200;
  v58.i32[0] = a4[5].i32[0];
  v201 = *(float32x2_t *)((char *)a2 + 12);
  v200.i32[0] = *((_DWORD *)a2 + 5);
  v622 = v200;
  v640 = &off_24EC21420;
  sub_2231F9830(a7, &v641);
  v585 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v600, v201.f32[0]), v607, v201, 1), v615, v622.f32[0]);
  v581 = vmla_f32(vmla_lane_f32(vmul_f32(v199, v201), v27, v201, 1), v622, v58);
  v203 = *(std::__shared_weak_count **)(a7 + 104);
  v577 = v203;
  if (v203)
  {
    v204 = (unint64_t *)&v203->__shared_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
    do
      v206 = __ldxr(v204);
    while (__stxr(v206 + 1, v204));
    v595 = *(_QWORD *)(a7 + 112);
    v207 = *(_QWORD *)(a7 + 132);
    v590 = *(_DWORD *)(a7 + 156);
    do
      v208 = __ldxr(v204);
    while (__stxr(v208 + 1, v204));
    do
      v209 = __ldaxr(v204);
    while (__stlxr(v209 - 1, v204));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
      std::__shared_weak_count::__release_weak(v577);
    }
    do
      v210 = __ldaxr(v204);
    while (__stlxr(v210 - 1, v204));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
      std::__shared_weak_count::__release_weak(v577);
    }
  }
  else
  {
    v595 = *(_QWORD *)(a7 + 112);
    v207 = *(_QWORD *)(a7 + 132);
    v590 = *(_DWORD *)(a7 + 156);
  }
  v211 = v585;
  *(float32x2_t *)v212.f32 = vmul_n_f32(v211, v211.f32[0]);
  *(float32x2_t *)&v212.u32[2] = vmul_f32(v581, v585);
  *(float32x2_t *)v213.f32 = vmul_lane_f32(v211, v211, 1);
  *(float32x2_t *)&v213.u32[2] = vmul_lane_f32(v581, v585, 1);
  v214 = a3[4];
  *(float32x2_t *)v215.f32 = vmul_n_f32(v585, v581.f32[0]);
  *(float32x2_t *)&v215.u32[2] = vmul_f32(v581, v581);
  v216 = (int8x16_t)vaddq_f32(v212, (float32x4_t)xmmword_224649950);
  v217 = (int8x16_t)vaddq_f32(v213, (float32x4_t)xmmword_224649960);
  v218 = (float64x2_t)xmmword_224649970;
  v219 = (int8x16_t)vaddq_f32(v215, (float32x4_t)xmmword_224649970);
  v202.i32[0] = *(_DWORD *)(a5 + 32);
  v215.i32[0] = *(_DWORD *)(a5 + 36);
  v213.i32[0] = *(_DWORD *)(a5 + 40);
  LODWORD(v218.f64[0]) = *(_DWORD *)(a5 + 44);
  v220.i32[0] = 0;
  v220.i32[1] = v215.i32[0];
  v221 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v202.u32[0], *(float *)v216.i32), v220, *(float32x2_t *)v216.i8, 1), 0, (float32x4_t)v216, 2);
  v222 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v216.i8), *(float32x2_t *)&v218.f64[0], *(float32x2_t *)v216.i8, 1);
  v223 = (int64x2_t)vextq_s8(v216, v216, 8uLL);
  *(float32x2_t *)v223.i8 = vadd_f32(*(float32x2_t *)v223.i8, v222);
  v224 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v202.u32[0], *(float *)v217.i32), v220, *(float32x2_t *)v217.i8, 1), 0, (float32x4_t)v217, 2);
  *(float32x2_t *)v217.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v217, v217, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v217.i8), *(float32x2_t *)&v218.f64[0], *(float32x2_t *)v217.i8, 1));
  v225 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v202.u32[0], *(float *)v219.i32), v220, *(float32x2_t *)v219.i8, 1), 0, (float32x4_t)v219, 2);
  v226 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v219.i8), *(float32x2_t *)&v218.f64[0], *(float32x2_t *)v219.i8, 1);
  v227 = (int64x2_t)vextq_s8(v219, v219, 8uLL);
  *(float32x2_t *)v227.i8 = vadd_f32(*(float32x2_t *)v227.i8, v226);
  v228 = vmla_f32(vmla_n_f32(vmul_f32(v221, 0), v224, v215.f32[0]), 0, v225);
  v229 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v223.i8, 0), *(float32x2_t *)v215.f32, *(float32x2_t *)v217.i8), 0, *(float32x2_t *)v227.i8).f32[0];
  *(float32x2_t *)v215.f32 = vadd_f32(v225, vmla_n_f32(vmul_n_f32(v221, v213.f32[0]), v224, *(float *)v218.f64));
  *(float *)v218.f64 = vadd_f32(*(float32x2_t *)v227.i8, vmla_f32(vmul_f32(*(float32x2_t *)v223.i8, *(float32x2_t *)v213.f32), *(float32x2_t *)&v218.f64[0], *(float32x2_t *)v217.i8)).f32[0];
  *(float64x2_t *)v629 = vcvtq_f64_f32(vmla_f32(vmla_f32(vmul_n_f32(v221, v202.f32[0]), 0, v224), 0, v225));
  *(double *)v223.i64 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v223.i8, v202), 0, *(float32x2_t *)v217.i8), 0, *(float32x2_t *)v227.i8).f32[0];
  *(double *)v630 = *(double *)v223.i64;
  *(float64x2_t *)&v630[8] = vcvtq_f64_f32(v228);
  *(double *)v227.i64 = v229;
  *(double *)&v630[24] = v229;
  v631 = vcvtq_f64_f32(*(float32x2_t *)v215.f32);
  v218.f64[0] = *(float *)v218.f64;
  v632 = v218.f64[0];
  __asm { FMOV            V6.2D, #0.5 }
  v633 = vmulq_f64(vaddq_f64(*(float64x2_t *)v629, (float64x2_t)vzip1q_s64(*(int64x2_t *)v629, *(int64x2_t *)&v630[8])), _Q6);
  *(_QWORD *)&v634 = *(_OWORD *)&vmulq_f64(vaddq_f64((float64x2_t)v223, v631), _Q6);
  v635 = vmulq_f64(vaddq_f64(*(float64x2_t *)&v630[8], (float64x2_t)vzip2q_s64(*(int64x2_t *)v629, *(int64x2_t *)&v630[8])), _Q6);
  *(_QWORD *)&v636 = *(_OWORD *)&vmulq_f64(vaddq_f64((float64x2_t)v227, (float64x2_t)vdupq_laneq_s64((int64x2_t)v631, 1)), _Q6);
  *(_QWORD *)&v638 = *(_OWORD *)&vmulq_f64(vaddq_f64(v218, v218), _Q6);
  v637 = vmulq_f64(vaddq_f64(v631, (float64x2_t)vzip1q_s64(v223, v227)), _Q6);
  v639 = *(_DWORD *)(a5 + 88);
  v627 = operator new(0x20uLL);
  v628 = xmmword_2245C6420;
  strcpy((char *)v627, "KeyframePlanes.ViewingAngleFSV");
  sub_224569D7C();
  sub_224569A80();
  v623 = HIDWORD(*(_QWORD *)&v214);
  if (os_variant_has_internal_diagnostics())
  {
    v231 = sub_2241471F8();
    v232 = v231[2];
    if (!v232)
    {
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        v232 = v231[2];
        goto LABEL_193;
      }
LABEL_635:
      abort();
    }
LABEL_193:
    v233 = *(_QWORD *)(v232 + 64);
    v234 = (std::mutex *)(v233 + 32);
    std::mutex::lock((std::mutex *)(v233 + 32));
    v236 = *(_QWORD *)(v233 + 96);
    v235 = *(_QWORD *)(v233 + 104);
    std::mutex::unlock(v234);
    if (v236 != v235)
    {
      *(_QWORD *)v667 = "cv3d.recon.";
      *(_QWORD *)&v667[8] = 11;
      v237 = HIBYTE(v628);
      v238 = &v627;
      if (v628 < 0)
      {
        v238 = v627;
        v237 = v628;
      }
      *(_QWORD *)&v667[16] = v238;
      *(_QWORD *)&v667[24] = v237;
      sub_2231A9820((uint64_t)v667, (uint64_t)&v668, 0, 0, &v665);
      v239 = HIBYTE(v665.__r_.__value_.__r.__words[2]);
      v240 = *(_OWORD *)&v665.__r_.__value_.__l.__data_;
      sub_2241471F8();
      if ((v239 & 0x80u) == 0)
        v241 = &v665;
      else
        v241 = (std::string *)v240;
      if ((v239 & 0x80u) == 0)
        v242 = v239;
      else
        v242 = *((_QWORD *)&v240 + 1);
      v243 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v241, v242);
      v244 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v243 + 32))(v243);
      if (SHIBYTE(v665.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v665.__r_.__value_.__l.__data_);
      if (v244 == 1)
      {
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v245 = sub_2241471F8();
          v246 = v245[2];
          if (!v246)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_635;
            }
            v246 = v245[2];
          }
          v247 = *(_QWORD *)(v246 + 64);
          v248 = (std::mutex *)(v247 + 32);
          std::mutex::lock((std::mutex *)(v247 + 32));
          v250 = *(_QWORD *)(v247 + 96);
          v249 = *(_QWORD *)(v247 + 104);
          std::mutex::unlock(v248);
          if (v250 != v249)
          {
            *(_QWORD *)v667 = "cv3d.recon.";
            *(_QWORD *)&v667[8] = 11;
            v251 = HIBYTE(v628);
            v252 = &v627;
            if (v628 < 0)
            {
              v252 = v627;
              v251 = v628;
            }
            *(_QWORD *)&v667[16] = v252;
            *(_QWORD *)&v667[24] = v251;
            sub_2231A9820((uint64_t)v667, (uint64_t)&v668, 0, 0, &v649);
            v253 = HIBYTE(v649.__r_.__value_.__r.__words[2]);
            v254 = *(_OWORD *)&v649.__r_.__value_.__l.__data_;
            sub_2241471F8();
            if ((v253 & 0x80u) == 0)
              v255 = &v649;
            else
              v255 = (std::string *)v254;
            if ((v253 & 0x80u) == 0)
              v256 = v253;
            else
              v256 = *((_QWORD *)&v254 + 1);
            v257 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v255, v256);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v257 + 24))(v257))
            {
              v646 = 0u;
              v647 = 0u;
              v648 = 728325616;
              kdebug_trace();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v257 + 24))(v257))
              {
                *(_QWORD *)&v650 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                *((_QWORD *)&v650 + 1) = 2;
                v258 = sub_2241471F8();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v257 + 24))(v257))
                {
                  v616 = v257;
                  LODWORD(v665.__r_.__value_.__l.__data_) = 2 * v214.i32[0] + 50;
                  HIDWORD(v665.__r_.__value_.__r.__words[0]) = v214.i32[1];
                  LOBYTE(v654) = 0;
                  *(_QWORD *)v667 = &off_24EC24788;
                  sub_2236B4564(&v665, (void **)&v654, (uint64_t *)&v667[8]);
                  v664[0] = v214.u32[0];
                  v664[1] = *(_QWORD *)&v214 & 0xFFFFFFFF00000000 | 0x32;
                  v665.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC22138;
                  sub_2236B487C((uint64_t)v667, (uint64_t *)&v665.__r_.__value_.__l.__size_);
                  v654 = &off_24EC22138;
                  sub_2236B4984((uint64_t)&v665, v664, (uint64_t)&v655);
                  v259 = (std::__shared_weak_count *)v665.__r_.__value_.__r.__words[2];
                  if (v665.__r_.__value_.__r.__words[2])
                  {
                    v260 = (unint64_t *)(v665.__r_.__value_.__r.__words[2] + 8);
                    do
                      v261 = __ldaxr(v260);
                    while (__stlxr(v261 - 1, v260));
                    if (!v261)
                    {
                      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                      std::__shared_weak_count::__release_weak(v259);
                    }
                  }
                  v262 = v655;
                  if (!v655)
                    goto LABEL_242;
                  v263 = v656;
                  if (v656)
                  {
                    v264 = (unint64_t *)&v656->__shared_owners_;
                    do
                      v265 = __ldxr(v264);
                    while (__stxr(v265 + 1, v264));
                    do
                      v266 = __ldaxr(v264);
                    while (__stlxr(v266 - 1, v264));
                    if (!v266)
                    {
                      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                      std::__shared_weak_count::__release_weak(v263);
                    }
                    v267 = v656;
                    v262 = v655;
                    if (v656)
                    {
                      v268 = (unint64_t *)&v656->__shared_owners_;
                      do
                        v269 = __ldxr(v268);
                      while (__stxr(v269 + 1, v268));
                      do
                        v270 = __ldaxr(v268);
                      while (__stlxr(v270 - 1, v268));
                      if (!v270)
                      {
                        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                        std::__shared_weak_count::__release_weak(v267);
                      }
                    }
                  }
                  if (v663)
                    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v262 + 96))(&v665, v262, 1);
                  else
LABEL_242:
                    v665.__r_.__value_.__r.__words[0] = 0;
                  v271 = v660;
                  v608 = v207;
                  if (v660 == 1)
                  {
                    v272 = v661;
                    v273 = __len;
                    if (v661 == __len)
                    {
                      v274 = __len_4;
                      v275 = __b;
                      if (v662 && __b)
                      {
                        v276 = v655;
                        v277 = v656;
                        if (v656)
                        {
                          v278 = (unint64_t *)&v656->__shared_owners_;
                          do
                            v279 = __ldxr(v278);
                          while (__stxr(v279 + 1, v278));
                          do
                            v280 = __ldaxr(v278);
                          while (__stlxr(v280 - 1, v278));
                          if (!v280)
                          {
                            ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                            std::__shared_weak_count::__release_weak(v277);
                          }
                        }
                        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v276 + 88))(v276, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                        v275 = __b;
                      }
                      memset(v275, 255, (v274 * v272));
                    }
                    else if (__len)
                    {
                      v295 = __len_4;
                      if (__len_4)
                      {
                        v296 = (char *)__b;
                        if (v662 && __b)
                        {
                          v297 = v655;
                          v298 = v656;
                          if (v656)
                          {
                            v299 = (unint64_t *)&v656->__shared_owners_;
                            do
                              v300 = __ldxr(v299);
                            while (__stxr(v300 + 1, v299));
                            do
                              v301 = __ldaxr(v299);
                            while (__stlxr(v301 - 1, v299));
                            if (!v301)
                            {
                              ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                              std::__shared_weak_count::__release_weak(v298);
                            }
                          }
                          (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v297 + 88))(v297, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                          v296 = (char *)__b;
                        }
                        for (i = v295 - 1; i; --i)
                        {
                          memset(v296, 255, v273);
                          v296 += v272;
                        }
                        memset(v296, 255, v273);
                      }
                    }
                  }
                  else
                  {
                    v281 = __len;
                    if (__len)
                    {
                      v282 = __len_4;
                      if (__len_4)
                      {
                        v283 = v661;
                        v284 = __b;
                        if (v662 && __b)
                        {
                          v285 = v655;
                          v286 = v656;
                          if (v656)
                          {
                            v287 = (unint64_t *)&v656->__shared_owners_;
                            do
                              v288 = __ldxr(v287);
                            while (__stxr(v288 + 1, v287));
                            do
                              v289 = __ldaxr(v287);
                            while (__stlxr(v289 - 1, v287));
                            if (!v289)
                            {
                              ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                              std::__shared_weak_count::__release_weak(v286);
                            }
                          }
                          (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v285 + 88))(v285, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                          v284 = __b;
                        }
                        v290 = v281 - 1;
                        v291 = v282 - 1;
                        if (v282 != 1)
                        {
                          if (v281 == 1)
                          {
                            do
                            {
                              *v284 = -1;
                              v284 += v283;
                              --v291;
                            }
                            while (v291);
                          }
                          else
                          {
                            v292 = 0;
                            do
                            {
                              v293 = v281 - 1;
                              v294 = v284;
                              do
                              {
                                *v294 = -1;
                                v294 += v271;
                                --v293;
                              }
                              while (v293);
                              *v294 = -1;
                              v284 += v283;
                              ++v292;
                            }
                            while (v292 != v291);
                          }
                        }
                        if (v281 != 1)
                        {
                          do
                          {
                            *v284 = -1;
                            v284 += v271;
                            --v290;
                          }
                          while (v290);
                        }
                        *v284 = -1;
                      }
                    }
                  }
                  v303 = v665.__r_.__value_.__r.__words[0];
                  v665.__r_.__value_.__r.__words[0] = 0;
                  if (v303)
                    (*(void (**)(std::string::size_type))(*(_QWORD *)v303 + 8))(v303);
                  v304 = v656;
                  v305 = v616;
                  if (v656)
                  {
                    v306 = (unint64_t *)&v656->__shared_owners_;
                    do
                      v307 = __ldaxr(v306);
                    while (__stlxr(v307 - 1, v306));
                    if (!v307)
                    {
                      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                      std::__shared_weak_count::__release_weak(v304);
                    }
                  }
                  v207 = v608;
                  if (v623)
                  {
                    for (j = 0; j != v623; ++j)
                    {
                      sub_223765A28((uint64_t)v629, j, &v665);
                      if (v665.__r_.__value_.__s.__data_[8])
                      {
                        data = (int)v665.__r_.__value_.__l.__data_;
                        v310 = HIDWORD(v665.__r_.__value_.__r.__words[0]);
                        if (LODWORD(v665.__r_.__value_.__l.__data_) > HIDWORD(v665.__r_.__value_.__r.__words[0])
                          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/GlobalPlaneConsistency.cpp", 118, (uint64_t)"min_u <= max_u", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                        {
LABEL_637:
                          abort();
                        }
                        for (; v310 != data; ++data)
                          *(_BYTE *)(v668.i64[0] + (v672 * data + v673 * j)) = 0x80;
                      }
                      if (v665.__r_.__value_.__s.__data_[20])
                      {
                        v311 = HIDWORD(v665.__r_.__value_.__r.__words[1]);
                        v312 = v665.__r_.__value_.__r.__words[2];
                        if (HIDWORD(v665.__r_.__value_.__r.__words[1]) > LODWORD(v665.__r_.__value_.__r.__words[2])
                          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/GlobalPlaneConsistency.cpp", 118, (uint64_t)"min_u <= max_u", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                        {
                          goto LABEL_637;
                        }
                        for (; v312 != v311; ++v311)
                          *(_BYTE *)(v668.i64[0] + (v672 * v311 + v673 * j)) = 0x80;
                      }
                    }
                    v305 = v616;
                    if (v214.i32[0])
                    {
                      for (k = 0; k != v623; ++k)
                      {
                        v314 = 0;
                        _D0 = (double)k;
                        do
                        {
                          _V3.D[1] = v633.f64[1];
                          _V4.D[1] = v635.f64[1];
                          _V7.D[1] = v637.f64[1];
                          __asm
                          {
                            FMLA            D16, D0, V3.D[1]
                            FMLA            D3, D0, V4.D[1]
                            FMLA            D4, D0, V7.D[1]
                          }
                          if (v638 + _D4 + (v634 + _D16) * (double)v314 + (v636 + _D3) * _D0 > 0.0)
                            *(_BYTE *)(v668.i64[0] + (v672 * (v214.i32[0] + 50 + v314) + v673 * k)) = 0x80;
                          ++v314;
                        }
                        while (v214.u32[0] != v314);
                      }
                    }
                  }
                  v665.__r_.__value_.__s.__data_[0] = 0;
                  v666 = 0;
                  sub_2233B3528((uint64_t)v667, (__int128 *)&v665, &v650, &v651);
                  if (v666 && SHIBYTE(v665.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v665.__r_.__value_.__l.__data_);
                  v322 = *(std::__shared_weak_count **)&v667[16];
                  if (*(_QWORD *)&v667[16])
                  {
                    v323 = (unint64_t *)(*(_QWORD *)&v667[16] + 8);
                    do
                      v324 = __ldaxr(v323);
                    while (__stlxr(v324 - 1, v323));
                    if (!v324)
                    {
                      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                      std::__shared_weak_count::__release_weak(v322);
                    }
                  }
                  v325 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v305 + 56))(v305);
                  v326 = *v325;
                  v327 = (std::__shared_weak_count *)v325[1];
                  if (v327)
                  {
                    v328 = (unint64_t *)&v327->__shared_owners_;
                    do
                      v329 = __ldxr(v328);
                    while (__stxr(v329 + 1, v328));
                  }
                  v330 = v652;
                  v331 = v653;
                  v654 = &off_24EC6A3B8;
                  v655 = v652;
                  v656 = v653;
                  v653 = 0;
                  v652 = 0;
                  *(_QWORD *)v667 = v326;
                  *(_QWORD *)&v667[8] = v327;
                  if (v327)
                  {
                    v332 = (unint64_t *)&v327->__shared_owners_;
                    do
                      v333 = __ldxr(v332);
                    while (__stxr(v333 + 1, v332));
                  }
                  *(_QWORD *)&v667[16] = &off_24EC6A3B8;
                  *(_QWORD *)&v667[24] = v330;
                  v668.i64[0] = (uint64_t)v331;
                  if (v331)
                  {
                    v334 = (unint64_t *)&v331->__shared_owners_;
                    do
                      v335 = __ldxr(v334);
                    while (__stxr(v335 + 1, v334));
                  }
                  (*(void (**)(uint64_t *, _BYTE *))(*v258 + 16))(v258, v667);
                  v336 = (std::__shared_weak_count *)v668.i64[0];
                  if (v668.i64[0])
                  {
                    v337 = (unint64_t *)(v668.i64[0] + 8);
                    do
                      v338 = __ldaxr(v337);
                    while (__stlxr(v338 - 1, v337));
                    if (!v338)
                    {
                      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                      std::__shared_weak_count::__release_weak(v336);
                    }
                  }
                  v339 = *(std::__shared_weak_count **)&v667[8];
                  if (*(_QWORD *)&v667[8])
                  {
                    v340 = (unint64_t *)(*(_QWORD *)&v667[8] + 8);
                    do
                      v341 = __ldaxr(v340);
                    while (__stlxr(v341 - 1, v340));
                    if (!v341)
                    {
                      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                      std::__shared_weak_count::__release_weak(v339);
                    }
                  }
                  v342 = v656;
                  if (v656)
                  {
                    v343 = (unint64_t *)&v656->__shared_owners_;
                    do
                      v344 = __ldaxr(v343);
                    while (__stlxr(v344 - 1, v343));
                    if (!v344)
                    {
                      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                      std::__shared_weak_count::__release_weak(v342);
                    }
                  }
                  if (v327)
                  {
                    v345 = (unint64_t *)&v327->__shared_owners_;
                    do
                      v346 = __ldaxr(v345);
                    while (__stlxr(v346 - 1, v345));
                    if (!v346)
                    {
                      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                      std::__shared_weak_count::__release_weak(v327);
                    }
                  }
                  v347 = v653;
                  if (v653)
                  {
                    v348 = (unint64_t *)&v653->__shared_owners_;
                    do
                      v349 = __ldaxr(v348);
                    while (__stlxr(v349 - 1, v348));
                    if (!v349)
                    {
                      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                      std::__shared_weak_count::__release_weak(v347);
                    }
                  }
                }
              }
              kdebug_trace();
            }
            if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v649.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  if (v214.i32[1])
  {
    v350 = 0;
    v351 = 0;
    v352 = 0;
    v617 = 0;
    v353 = 0;
    v354 = HIDWORD(v207);
    v355 = (float32x2_t)vdup_lane_s32((int32x2_t)v585, 1);
    v609 = -1;
    v356 = -1;
    do
    {
      sub_223765A28((uint64_t)v629, v350, v667);
      if (v667[8] | v667[20])
      {
        v366 = 0;
        v367 = a16[5].i32[0];
        v368 = *(_QWORD *)&a16[3] + 4 * (a16[5].i32[1] * v350);
        v369 = *(_DWORD *)(v560 + 40);
        v370 = *(_QWORD *)(v560 + 24) + (*(_DWORD *)(v560 + 44) * v350);
        v371 = a3[5].i32[0];
        v372 = *(_QWORD *)&a3[3] + 2 * (a3[5].i32[1] * v350);
        v373 = v644;
        v374 = v643 + (v645 * v350);
        v601 = v595 + 2 * (v590 * v350);
        v375 = -1;
        if (v667[8])
        {
          v377 = *(_DWORD *)v667;
          v376 = *(_DWORD *)&v667[4];
          if (*(_DWORD *)v667 != *(_DWORD *)&v667[4])
          {
            v366 = 0;
            v378 = v354 * *(_DWORD *)v667;
            v379 = v644 * *(_DWORD *)v667;
            v380 = v369 * *(_DWORD *)v667;
            v381 = v371 * *(_DWORD *)v667;
            v382 = v367 * *(_DWORD *)v667;
            do
            {
              v383 = v382;
              v384 = *(float *)(v368 + 4 * v382);
              v385 = fabsf(v384);
              if (v384 != 0.0 && v385 > 0.000001)
              {
                v387 = 1.0 / v384;
                if (v387 >= 0.2)
                {
                  _H1 = *(_WORD *)(v372 + 2 * v381);
                  __asm { FCVT            S1, H1 }
                  v390 = *(unsigned __int8 *)(v370 + v380);
                  if (v390 != 63 && *(_BYTE *)(v370 + v380))
                    v391 = a8;
                  else
                    v391 = a15;
                  v392 = v391[2];
                  v393 = (float)((float)(_S1 - *v391) * v391[4]) + v392;
                  if (v391[3] < v393)
                    v393 = v391[3];
                  if (v393 < v392)
                    v393 = v391[2];
                  v394 = _S1 - v387;
                  if (v394 >= v393)
                    goto LABEL_392;
                  if (!*(_BYTE *)(v370 + v380))
                    goto LABEL_414;
                  if (v390 == 63)
                    goto LABEL_414;
                  if (!*(_BYTE *)(v374 + v379))
                    goto LABEL_414;
                  if (fabsf(v394) >= v393)
                    goto LABEL_414;
                  v395 = (__int16 *)(v601 + 2 * v378);
                  _D0.i16[0] = *v395;
                  __asm { FCVT            S0, H0 }
                  _D1.i16[0] = v395[1];
                  __asm { FCVT            S1, H1 }
                  _D2.i16[0] = v395[2];
                  __asm { FCVT            S2, H2 }
                  v396 = vmla_f32(vmul_f32(v585, _D0), _D1, v355);
                  _D1.i32[1] = v581.i32[1];
                  _D0 = vmla_f32(v396, _D2, v581);
                  if (_D0.f32[0] < 0.70711)
                  {
LABEL_392:
                    ++v352;
                    *(_DWORD *)(v368 + 4 * v383) = 2139095040;
                    if (v375 >= v377)
                      v375 = v377;
                    if (v366 <= v377)
                      v366 = v377;
                  }
                  else
                  {
LABEL_414:
                    ++v351;
                  }
                }
              }
              ++v377;
              v378 += v354;
              v379 += v373;
              v380 += v369;
              v381 += v371;
              v382 = v383 + v367;
            }
            while (v376 != v377);
          }
        }
        if (v667[20])
        {
          v398 = *(_DWORD *)&v667[12];
          v397 = *(_DWORD *)&v667[16];
          if (*(_DWORD *)&v667[12] != *(_DWORD *)&v667[16])
          {
            v399 = v354 * *(_DWORD *)&v667[12];
            v400 = v373 * *(_DWORD *)&v667[12];
            v401 = v369 * *(_DWORD *)&v667[12];
            v402 = v371 * *(_DWORD *)&v667[12];
            v403 = v367 * *(_DWORD *)&v667[12];
            do
            {
              v404 = v403;
              v405 = *(float *)(v368 + 4 * v403);
              v406 = fabsf(v405);
              if (v405 != 0.0 && v406 > 0.000001)
              {
                v408 = 1.0 / v405;
                if (v408 >= 0.2)
                {
                  _H1 = *(_WORD *)(v372 + 2 * v402);
                  __asm { FCVT            S1, H1 }
                  v411 = *(unsigned __int8 *)(v370 + v401);
                  if (v411 != 63 && *(_BYTE *)(v370 + v401))
                    v412 = a8;
                  else
                    v412 = a15;
                  v413 = v412[2];
                  v414 = (float)((float)(_S1 - *v412) * v412[4]) + v413;
                  if (v412[3] < v414)
                    v414 = v412[3];
                  if (v414 < v413)
                    v414 = v412[2];
                  v415 = _S1 - v408;
                  if (v415 >= v414)
                    goto LABEL_422;
                  if (!*(_BYTE *)(v370 + v401))
                    goto LABEL_444;
                  if (v411 == 63)
                    goto LABEL_444;
                  if (!*(_BYTE *)(v374 + v400))
                    goto LABEL_444;
                  if (fabsf(v415) >= v414)
                    goto LABEL_444;
                  v416 = (__int16 *)(v601 + 2 * v399);
                  _D0.i16[0] = *v416;
                  __asm { FCVT            S0, H0 }
                  _D1.i16[0] = v416[1];
                  __asm { FCVT            S1, H1 }
                  _D2.i16[0] = v416[2];
                  __asm { FCVT            S2, H2 }
                  v417 = vmla_f32(vmul_f32(v585, _D0), _D1, v355);
                  _D1.i32[1] = v581.i32[1];
                  _D0 = vmla_f32(v417, _D2, v581);
                  if (_D0.f32[0] < 0.70711)
                  {
LABEL_422:
                    ++v352;
                    *(_DWORD *)(v368 + 4 * v404) = 2139095040;
                    if (v375 >= v398)
                      v375 = v398;
                    if (v366 <= v398)
                      v366 = v398;
                  }
                  else
                  {
LABEL_444:
                    ++v351;
                  }
                }
              }
              ++v398;
              v399 += v354;
              v400 += v373;
              v401 += v369;
              v402 += v371;
              v403 = v404 + v367;
            }
            while (v397 != v398);
          }
        }
        if (v356 >= v375)
          v357 = v375;
        else
          v357 = v356;
        v358 = v609;
        if (v609 >= v350)
          v359 = v350;
        else
          v359 = v609;
        if (v353 <= v375)
          v360 = v375;
        else
          v360 = v353;
        v361 = v617;
        if (v617 <= v350)
          v362 = v350;
        else
          v362 = v617;
        if (v357 >= v366)
          v357 = v366;
        if (v360 <= v366)
          v360 = v366;
        if (v366 >= v375)
        {
          v356 = v357;
          v358 = v359;
        }
        v609 = v358;
        if (v366 >= v375)
        {
          v353 = v360;
          v361 = v362;
        }
        v617 = v361;
      }
      ++v350;
    }
    while (v350 != v623);
  }
  else
  {
    v353 = 0;
    v617 = 0;
    v352 = 0;
    v351 = 0;
    v356 = -1;
    v609 = -1;
  }
  if (SHIBYTE(v628) < 0)
    operator delete(v627);
  if (v577)
  {
    v418 = (unint64_t *)&v577->__shared_owners_;
    do
      v419 = __ldaxr(v418);
    while (__stlxr(v419 - 1, v418));
    if (!v419)
    {
      ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
      std::__shared_weak_count::__release_weak(v577);
    }
  }
  v420 = v642;
  if (v642)
  {
    v421 = (unint64_t *)&v642->__shared_owners_;
    do
      v422 = __ldaxr(v421);
    while (__stlxr(v422 - 1, v421));
    if (!v422)
    {
      ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
      std::__shared_weak_count::__release_weak(v420);
    }
  }
  if (v353 < v356)
    goto LABEL_467;
  if (v353 + 1 == v356)
    goto LABEL_467;
  if (v617 < v609)
    goto LABEL_467;
  if (v617 + 1 == v609)
    goto LABEL_467;
  v423.f32[0] = (float)v356;
  v424.f32[0] = (float)v353;
  v423.f32[1] = (float)v609;
  v424.f32[1] = (float)v617;
  v425 = vadd_f32(vadd_f32(vcvt_f32_u32(a3[4]), v551), (float32x2_t)vdup_n_s32(0x3EFFF2E5u));
  v426 = vadd_f32(v423, (float32x2_t)0xBF000000BF000000);
  v427 = vadd_f32(v424, (float32x2_t)0x3F0000003F000000);
  v428 = (float32x2_t)vdup_n_s32(0xBEFFF2E5);
  v429 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v428, v426), (int8x8_t)v428, (int8x8_t)v426);
  v430 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v427, v425), (int8x8_t)v425, (int8x8_t)v427);
  v431 = vmvn_s8((int8x8_t)vcge_f32(v430, v429));
  if (((v431.i32[0] | v431.i32[1]) & 1) != 0)
  {
LABEL_467:
    v48 = __p;
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    if (!__p)
      return;
LABEL_29:
    operator delete(v48);
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v48 - __p) >> 3)) > 0xAAAAAAAAAAAAAAALL)
    sub_2236B43DC();
  v432 = (char *)operator new(0x6276276276276278 * ((v48 - __p) >> 3));
  *a9 = v432;
  a9[1] = v432;
  a9[2] = &v432[0x6276276276276278 * ((v48 - __p) >> 3)];
  if ((float)((float)v352 / (float)(v351 + v352)) > 0.85)
  {
    v434 = __p;
    while (1)
    {
      v437 = v434[96];
      v438 = *(_QWORD *)(*((_QWORD *)v434 + 2) + 208);
      v439 = v438 + 424 * v434[96];
      v440 = v439 + 264;
      v441 = *(void **)(v439 + 264);
      if (v441)
      {
        *(_QWORD *)(v439 + 272) = v441;
        operator delete(v441);
        *(_QWORD *)v440 = 0;
        *(_QWORD *)(v440 + 8) = 0;
        *(_QWORD *)(v440 + 16) = 0;
      }
      v442 = (void **)(v438 + 424 * v437 + 296);
      *(_QWORD *)v440 = 0;
      *(_QWORD *)(v440 + 8) = 0;
      *(_DWORD *)(v440 + 24) = 0;
      *(_QWORD *)(v440 + 16) = 0;
      v443 = *v442;
      if (*v442)
      {
        *(_QWORD *)(v438 + 424 * v437 + 304) = v443;
        operator delete(v443);
        *v442 = 0;
        *(_QWORD *)(v438 + 424 * v437 + 304) = 0;
        *(_QWORD *)(v438 + 424 * v437 + 312) = 0;
      }
      v444 = v438 + 424 * v437;
      *(_OWORD *)v442 = 0u;
      *(_OWORD *)(v444 + 312) = 0u;
      *(_QWORD *)(v444 + 328) = 0x800080007FFF7FFFLL;
      if (*(_BYTE *)(v444 + 344))
        *(_BYTE *)(v444 + 344) = 0;
      v446 = (float64x2_t *)a9[1];
      v445 = (unint64_t)a9[2];
      if ((unint64_t)v446 < v445)
      {
        v435 = *(float64x2_t *)v434;
        v446[1].f64[0] = *((float64_t *)v434 + 2);
        *v446 = v435;
        v436 = (char *)&v446[1].f64[1];
      }
      else
      {
        v447 = (float64x2_t *)*a9;
        v448 = 0xAAAAAAAAAAAAAAABLL * (((char *)v446 - *a9) >> 3);
        v449 = v448 + 1;
        if (v448 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_2236B43DC();
        v450 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v445 - (_QWORD)v447) >> 3);
        if (2 * v450 > v449)
          v449 = 2 * v450;
        if (v450 >= 0x555555555555555)
          v451 = 0xAAAAAAAAAAAAAAALL;
        else
          v451 = v449;
        if (v451)
        {
          if (v451 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v452 = (char *)operator new(24 * v451);
        }
        else
        {
          v452 = 0;
        }
        v453 = *(float64x2_t *)v434;
        v454 = &v452[24 * v448];
        *((_QWORD *)v454 + 2) = *((_QWORD *)v434 + 2);
        *(float64x2_t *)v454 = v453;
        v455 = v454;
        if (v446 != v447)
        {
          do
          {
            v456 = *(__int128 *)((char *)&v446[-2] + 8);
            *((_QWORD *)v455 - 1) = *(_QWORD *)&v446[-1].f64[1];
            *(_OWORD *)(v455 - 24) = v456;
            v455 -= 24;
            v446 = (float64x2_t *)((char *)v446 - 24);
          }
          while (v446 != v447);
          v446 = (float64x2_t *)*a9;
          v436 = v454 + 24;
          *a9 = v455;
          a9[1] = v454 + 24;
          a9[2] = &v452[24 * v451];
          if (!v446)
            goto LABEL_473;
LABEL_496:
          operator delete(v446);
          goto LABEL_473;
        }
        v436 = v454 + 24;
        *a9 = v454;
        a9[1] = v454 + 24;
        a9[2] = &v452[24 * v451];
        if (v446)
          goto LABEL_496;
      }
LABEL_473:
      a9[1] = v436;
      v434 += 104;
      if (v434 == v48)
        goto LABEL_623;
    }
  }
  v541 = vcvtq_f64_f32(v430);
  v542 = vcvtq_f64_f32(vneg_f32(v429));
  v457.f64[1] = -1.0;
  v458 = __p;
  while (2)
  {
    v544 = *((_QWORD *)v458 + 2);
    v545 = v458[96];
    v457.f64[0] = *((float64_t *)v458 + 5);
    v618 = v457;
    v624 = *(int8x16_t *)(v458 + 24);
    v459 = a3[4].u32[1];
    memset(v667, 0, 24);
    if ((_DWORD)v459)
    {
      *(_QWORD *)v667 = operator new(8 * v459);
      *(_QWORD *)&v667[8] = *(_QWORD *)v667;
      *(_QWORD *)&v667[16] = *(_QWORD *)v667 + 8 * v459;
    }
    v460 = *(_QWORD *)(v544 + 208) + 424 * v545 + 264;
    v610 = *((double *)v458 + 6);
    v602 = *((double *)v458 + 7);
    v457.f64[0] = *((float64_t *)v458 + 8);
    v553 = v457;
    if (*(_QWORD *)(*(_QWORD *)(v544 + 208) + 424 * v545 + 272) == *(_QWORD *)v460)
    {
      v464 = 0;
      v563 = -1;
      v465 = -1;
      v467 = *(_QWORD *)v460;
      v466 = *(_QWORD *)(*(_QWORD *)(v544 + 208) + 424 * v545 + 272);
      if (v466 == *(_QWORD *)v460)
        goto LABEL_595;
      goto LABEL_520;
    }
    v461 = *(__int16 *)(*(_QWORD *)(v544 + 208) + 424 * v545 + 328);
    if (v461 < 0 || (v462 = *(__int16 *)(*(_QWORD *)(v544 + 208) + 424 * v545 + 330), v462 < 0))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      LOWORD(v461) = *(_WORD *)(v460 + 64);
      LOWORD(v462) = *(_WORD *)(v460 + 66);
    }
    v463 = *(_WORD *)(v460 + 68) - (_WORD)v461 == 0xFFFF || (unsigned __int16)~(*(_WORD *)(v460 + 70) - v462) == 0;
    v462 = (__int16)v462;
    if (v463)
      v464 = 0;
    else
      v464 = (__int16)v461 + (__int16)(*(_WORD *)(v460 + 68) - v461);
    if (v463)
      v462 = -1;
    v563 = v462;
    if (v463)
      v465 = -1;
    else
      v465 = (__int16)v461;
    v467 = *(_QWORD *)v460;
    v466 = *(_QWORD *)(v460 + 8);
    if (v466 != *(_QWORD *)v460)
    {
LABEL_520:
      v468 = 0;
      LODWORD(v469) = 0;
      v470 = (double)(v464 - v465);
      *(double *)v471.i64 = v610;
      *(double *)&v471.i64[1] = v602;
      v472 = vextq_s8(v624, v624, 8uLL).u64[0];
      v473 = *((double *)v458 + 5);
      v474 = *(float64x2_t *)(v458 + 24);
      v475 = *((double *)v458 + 8);
      v476 = *((float64x2_t *)v458 + 3);
      v477 = *((double *)v458 + 11);
      v478 = *(float64x2_t *)(v458 + 72);
      v480 = vmlaq_n_f64(vmulq_n_f64(v474, (double)v465), v476, (double)v563);
      v479 = (int8x16_t)vaddq_f64(v478, v480);
      v543 = (double)v465;
      v480.f64[0] = v477 + v473 * (double)v465 + v475 * (double)v563;
      v481 = vextq_s8(v479, v479, 8uLL);
      v482 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, *(double *)v479.i64), (float64x2_t)xmmword_224649980, (float64x2_t)v479, 1), v542, v480.f64[0]);
      v483 = vmlaq_n_f64(vmulq_n_f64(v474, (double)v464), v476, (double)v563);
      v484 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, v610), (float64x2_t)xmmword_224649980, v602), v542, v553.f64[0]);
      v485 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, *(double *)v479.i64), (float64x2_t)xmmword_2246499A0, (float64x2_t)v479, 1), v541, v480.f64[0]);
      v486 = (int8x16_t)vaddq_f64(v478, v483);
      v487 = v479;
      v488 = v610;
      v489 = v473 * (double)v464 + v475 * (double)v563;
      v490 = vextq_s8(v471, v471, 8uLL).u64[0];
      v433.f64[0] = v477 + v489;
      v491 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, v610), (float64x2_t)xmmword_2246499A0, v602), v541, v553.f64[0]);
      v492 = vextq_s8(v486, v486, 8uLL);
      v493 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, *(double *)v486.i64), (float64x2_t)xmmword_224649980, (float64x2_t)v486, 1), v542, v433.f64[0]);
      v494 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_224649990, *(double *)v486.i64), (float64x2_t)xmmword_2246499A0, (float64x2_t)v486, 1), v541, v433.f64[0]);
      v549 = (uint64_t *)v460;
      v556 = v484;
      v558 = v490;
      v555 = v491;
      v548 = v610;
      v565 = v472;
      do
      {
        v496 = *(__int16 *)(v467 + 8 * v468);
        v497 = v496 - v563;
        if (v496 > v563)
        {
          do
          {
            v487.i64[1] = v481.i64[0];
            v498.f64[0] = v488;
            *(_QWORD *)&v498.f64[1] = v490;
            v487 = (int8x16_t)vaddq_f64(v498, (float64x2_t)v487);
            v481 = vextq_s8(v487, v487, 8uLL);
            v480 = vaddq_f64(v553, v480);
            v486.i64[1] = v492.i64[0];
            v486 = (int8x16_t)vaddq_f64(v498, (float64x2_t)v486);
            v492 = vextq_s8(v486, v486, 8uLL);
            v433 = vaddq_f64(v553, v433);
            v482 = vaddq_f64(v484, v482);
            v485 = vaddq_f64(v491, v485);
            v493 = vaddq_f64(v484, v493);
            v494 = vaddq_f64(v491, v494);
            --v497;
          }
          while (v497);
          v563 = v496;
        }
        if (v482.f64[0] < 0.0 && v493.f64[0] < 0.0)
          goto LABEL_521;
        v499 = v485.f64[0] < 0.0;
        if (v494.f64[0] >= 0.0)
          v499 = 0;
        v500 = v493.f64[1] < 0.0 && v482.f64[1] < 0.0;
        if (v500 || v499 || v485.f64[1] < 0.0 && v494.f64[1] < 0.0)
        {
LABEL_521:
          v495 = v469;
        }
        else
        {
          v561 = v487;
          v501 = 0.0;
          v502 = 1.0;
          if (v480.f64[0] * v433.f64[0] < 0.0)
          {
            v503 = v480.f64[0] / (v480.f64[0] - v433.f64[0]);
            if (v480.f64[0] >= 0.0)
              v502 = fmin(v503, 1.0);
            else
              v501 = fmax(v503, 0.0);
          }
          v504 = vsubq_f64(v482, v493);
          v505 = vdivq_f64(v482, v504);
          v506 = vnegq_f64(v504);
          if (v505.f64[0] >= v502)
            v507 = v502;
          else
            v507 = v505.f64[0];
          if (v506.f64[0] >= 0.0)
            v507 = v502;
          if (v501 >= v505.f64[0])
            v508 = v501;
          else
            v508 = v505.f64[0];
          if (v506.f64[0] > 0.0)
            v501 = v508;
          else
            v502 = v507;
          if (v506.f64[1] <= 0.0)
          {
            if (v506.f64[1] < 0.0 && v505.f64[1] < v502)
              v502 = v505.f64[1];
          }
          else if (v501 < v505.f64[1])
          {
            v501 = v505.f64[1];
          }
          v509 = vsubq_f64(v485, v494);
          v510 = vdivq_f64(v485, v509);
          v511 = vnegq_f64(v509);
          if (v501 >= v510.f64[0])
            v512 = v501;
          else
            v512 = v510.f64[0];
          if (v510.f64[0] >= v502)
            v513 = v502;
          else
            v513 = v510.f64[0];
          if (v511.f64[0] >= 0.0)
            v513 = v502;
          if (v511.f64[0] > 0.0)
            v501 = v512;
          else
            v502 = v513;
          if (v511.f64[1] <= 0.0)
          {
            v484 = v556;
            v490 = v558;
            v491 = v555;
            if (v511.f64[1] < 0.0 && v510.f64[1] < v502)
              v502 = v510.f64[1];
          }
          else
          {
            if (v501 < v510.f64[1])
              v501 = v510.f64[1];
            v484 = v556;
            v490 = v558;
            v491 = v555;
          }
          if (v501 <= v502)
          {
            v514 = (unsigned __int16)v496;
            v515 = vcvtpd_u64_f64(v501 * v470 + v543);
            v516 = vcvtmd_u64_f64(v502 * v470 + v543);
            v552 = (double)v496;
            v550 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v496), 0);
            v487 = v561;
            v586 = v482;
            v591 = v480;
            v579 = v486;
            v582 = v485;
            v575 = v481;
            v578 = v433;
            v571 = v494;
            v573 = v493;
            v568 = v492;
            do
            {
              v495 = v469;
              v517 = v467 + 8 * v469;
              v518 = *(__int16 *)(v517 + 2);
              v519 = *(__int16 *)(v517 + 4);
              if (v515 <= v518)
                v520 = v518;
              else
                v520 = v515;
              if (v519 >= v516)
                v521 = v516;
              else
                v521 = v519;
              if (v520 <= v521)
              {
                v522 = (int8x16_t)vaddq_f64(*(float64x2_t *)(v458 + 72), vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(v458 + 24), (double)v520), v550, *((float64x2_t *)v458 + 3)));
                *(double *)v487.i64 = *((double *)v458 + 11)
                                    + *((double *)v458 + 5) * (double)v520
                                    + *((double *)v458 + 8) * v552;
                v523 = vextq_s8(v522, v522, 8uLL).u64[0];
                v524 = v487.i64[0];
                do
                {
                  *(_QWORD *)&v526.f64[0] = v522.i64[0];
                  *(_QWORD *)&v526.f64[1] = v523;
                  v527 = vmul_s32(a16[5], vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(v526, (float64x2_t)vdupq_lane_s64(v524, 0))))));
                  if (fabsf(*(float *)(*(_QWORD *)&a16[3] + 4 * vadd_s32(vdup_lane_s32(v527, 1), v527).u32[0])) == INFINITY)
                  {
                    v596 = v523;
                    v603 = v487;
                    v611 = v522.i64[0];
                    LOWORD(v629[0]) = v514;
                    WORD1(v629[0]) = v520;
                    WORD2(v629[0]) = v520;
                    sub_223ECBBF0((uint64_t)v667, (__int16 *)v629);
                    v472 = v565;
                    v492 = v568;
                    v482 = v586;
                    v480 = v591;
                    v486 = v579;
                    v485 = v582;
                    v481 = v575;
                    v433 = v578;
                    v494 = v571;
                    v493 = v573;
                    v487 = v603;
                    v522.i64[0] = v611;
                    v523 = v596;
                  }
                  v522.i64[1] = v523;
                  *(_QWORD *)&v525.f64[0] = v624.i64[0];
                  *(_QWORD *)&v525.f64[1] = v472;
                  ++v520;
                  v522 = (int8x16_t)vaddq_f64(v525, (float64x2_t)v522);
                  v523 = vextq_s8(v522, v522, 8uLL).u64[0];
                  v487 = (int8x16_t)vaddq_f64(v618, (float64x2_t)v487);
                  v524 = v487.i64[0];
                }
                while (v520 <= v521);
                v467 = *v549;
                v466 = v549[1];
                v488 = v548;
                v484 = v556;
                v490 = v558;
                v491 = v555;
                v487 = v561;
              }
              v469 = (v495 + 1);
            }
            while (v469 < (v466 - v467) >> 3 && *(unsigned __int16 *)(v467 + 8 * v469) == v514);
          }
          else
          {
            v495 = v469;
            v487 = v561;
          }
        }
        v468 = (v495 + 1);
        LODWORD(v469) = v495 + 1;
      }
      while (v468 < (v466 - v467) >> 3);
    }
LABEL_595:
    v528 = *(_OWORD *)v667;
    memset(v667, 0, 24);
    *(_OWORD *)v625 = v528;
    v626 = *(_QWORD *)&v667[16];
    sub_223ECB71C((__int16 **)v629, (uint64_t)v625);
    if (v625[0])
    {
      v625[1] = v625[0];
      operator delete(v625[0]);
    }
    if (v629[1] != v629[0])
    {
      sub_2236B3F6C(*(_QWORD *)(v544 + 208) + 424 * v545, (uint64_t)v629);
      v530 = (float64x2_t *)a9[1];
      v529 = (unint64_t)a9[2];
      if ((unint64_t)v530 >= v529)
      {
        v532 = (float64x2_t *)*a9;
        v533 = 0xAAAAAAAAAAAAAAABLL * (((char *)v530 - *a9) >> 3);
        v534 = v533 + 1;
        if (v533 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_2236B43DC();
        v535 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v529 - (_QWORD)v532) >> 3);
        if (2 * v535 > v534)
          v534 = 2 * v535;
        if (v535 >= 0x555555555555555)
          v536 = 0xAAAAAAAAAAAAAAALL;
        else
          v536 = v534;
        if (v536)
        {
          if (v536 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v537 = (char *)operator new(24 * v536);
        }
        else
        {
          v537 = 0;
        }
        v457 = *(float64x2_t *)v458;
        v538 = &v537[24 * v533];
        *((_QWORD *)v538 + 2) = *((_QWORD *)v458 + 2);
        *(float64x2_t *)v538 = v457;
        v539 = v538;
        if (v530 == v532)
        {
          v540 = a9;
        }
        else
        {
          do
          {
            v457 = *(float64x2_t *)((char *)v530 - 24);
            *((_QWORD *)v539 - 1) = *(_QWORD *)&v530[-1].f64[1];
            *(float64x2_t *)(v539 - 24) = v457;
            v539 -= 24;
            v530 = (float64x2_t *)((char *)v530 - 24);
          }
          while (v530 != v532);
          v540 = a9;
          v530 = (float64x2_t *)*a9;
        }
        v531 = v538 + 24;
        *v540 = v539;
        v540[1] = v538 + 24;
        v540[2] = &v537[24 * v536];
        if (v530)
          operator delete(v530);
      }
      else
      {
        v457 = *(float64x2_t *)v458;
        v530[1].f64[0] = *((float64_t *)v458 + 2);
        *v530 = v457;
        v531 = (char *)&v530[1].f64[1];
      }
      a9[1] = v531;
    }
    if (*(_QWORD *)&v630[16])
    {
      *(_QWORD *)&v630[24] = *(_QWORD *)&v630[16];
      operator delete(*(void **)&v630[16]);
    }
    if (v629[0])
    {
      v629[1] = v629[0];
      operator delete(v629[0]);
    }
    if (*(_QWORD *)v667)
    {
      *(_QWORD *)&v667[8] = *(_QWORD *)v667;
      operator delete(*(void **)v667);
    }
    v458 += 104;
    if (v458 != v48)
      continue;
    break;
  }
LABEL_623:
  v48 = __p;
  if (__p)
    goto LABEL_29;
}

void sub_2236B3B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59)
{
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;

  v60 = STACK[0x3E8];
  STACK[0x3E8] = 0;
  if (v60)
    (*(void (**)(unint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)STACK[0x3B0];
  if (STACK[0x3B0])
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  sub_223167354(a55);
  sub_2231874DC((uint64_t)&STACK[0x330]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  if (a59)
  {
    v64 = (unint64_t *)&a59->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))a59->__on_zero_shared)(a59);
      std::__shared_weak_count::__release_weak(a59);
    }
  }
  v66 = (std::__shared_weak_count *)STACK[0x308];
  if (STACK[0x308])
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (!a26)
    _Unwind_Resume(a1);
  operator delete(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_2236B3F2C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_2236B3F6C(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *__p[2];
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;

  v3 = (_OWORD *)(a1 + 264);
  sub_223ECC454(a1 + 264, a2, (uint64_t)__p);
  v4 = *(void **)(a1 + 264);
  if (v4)
  {
    *(_QWORD *)(a1 + 272) = v4;
    operator delete(v4);
  }
  *v3 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 280) = v10;
  __p[1] = 0;
  v10 = 0;
  __p[0] = 0;
  *(_DWORD *)(a1 + 288) = v11;
  v5 = *(void **)(a1 + 296);
  if (v5)
  {
    *(_QWORD *)(a1 + 304) = v5;
    operator delete(v5);
  }
  v3[2] = v12;
  v6 = v13;
  v7 = v14;
  v13 = 0;
  v12 = 0uLL;
  *(_QWORD *)(a1 + 312) = v6;
  *(_QWORD *)(a1 + 320) = v7;
  *(_QWORD *)(a1 + 328) = v15;
  if (*(unsigned __int8 *)(a1 + 344) == v17)
  {
    if (*(_BYTE *)(a1 + 344))
    {
      *(_QWORD *)(a1 + 336) = v16;
      v8 = __p[0];
      if (!__p[0])
        return;
      goto LABEL_12;
    }
LABEL_11:
    v8 = __p[0];
    if (!__p[0])
      return;
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 344))
  {
    *(_BYTE *)(a1 + 344) = 0;
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 336) = v16;
  *(_BYTE *)(a1 + 344) = 1;
  v8 = __p[0];
  if (!__p[0])
    return;
LABEL_12:
  __p[1] = v8;
  operator delete(v8);
}

void sub_2236B406C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v16;
  char *v17;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _QWORD *v32;
  _BYTE *v33;
  int64_t v34;

  v4 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 == v4)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
    return;
  }
  v7 = *(char **)a1;
  v6 = *(char **)(a1 + 8);
  if (*(char **)a1 != v6)
  {
    while (1)
    {
      v8 = (_QWORD *)*a2;
      while (*v8 != *(_QWORD *)v7 || v8[1] != *((_QWORD *)v7 + 1))
      {
        v8 += 2;
        if (v8 == v4)
        {
          v8 = (_QWORD *)a2[1];
          break;
        }
      }
      if (v8 == v4)
        break;
      v7 += 16;
      if (v7 == v6)
        goto LABEL_29;
    }
    if (v7 == v6)
    {
LABEL_29:
      v7 = *(char **)(a1 + 8);
      v12 = (_QWORD *)*a2;
      v11 = (_QWORD *)a2[1];
      if ((_QWORD *)*a2 != v11)
        goto LABEL_37;
      goto LABEL_63;
    }
    v10 = v7 + 16;
    if (v7 + 16 == v6)
    {
      if (v7 != v6)
      {
LABEL_17:
        *(_QWORD *)(a1 + 8) = v7;
        v12 = (_QWORD *)*a2;
        v11 = (_QWORD *)a2[1];
        if ((_QWORD *)*a2 != v11)
          goto LABEL_37;
        goto LABEL_63;
      }
    }
    else
    {
      do
      {
        v13 = (_QWORD *)*a2;
        v14 = (_QWORD *)a2[1];
        if ((_QWORD *)*a2 != v14)
        {
          while (*v13 != *(_QWORD *)v10 || v13[1] != *((_QWORD *)v10 + 1))
          {
            v13 += 2;
            if (v13 == v14)
            {
              v13 = (_QWORD *)a2[1];
              break;
            }
          }
        }
        if (v13 != v14)
        {
          *(_OWORD *)v7 = *(_OWORD *)v10;
          v7 += 16;
        }
        v10 += 16;
      }
      while (v10 != v6);
      v6 = *(char **)(a1 + 8);
      if (v7 != v6)
        goto LABEL_17;
    }
    v7 = v6;
  }
  v12 = (_QWORD *)*a2;
  v11 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v11)
  {
    while (1)
    {
      while (1)
      {
LABEL_37:
        v16 = *(char **)a1;
        v17 = v7;
        if (*(char **)a1 != v7)
        {
          v17 = *(char **)a1;
          while (*(_QWORD *)v17 != *v12 || *((_QWORD *)v17 + 1) != v12[1])
          {
            v17 += 16;
            if (v17 == v7)
            {
              v17 = v7;
              break;
            }
          }
        }
        if (v17 == v7)
          break;
        v12 += 2;
        if (v12 == v11)
          goto LABEL_63;
      }
      v19 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v7 >= v19)
        break;
      *(_OWORD *)v7 = *(_OWORD *)v12;
      v20 = v7 + 16;
LABEL_62:
      *(_QWORD *)(a1 + 8) = v20;
      v7 = v20;
      v12 += 2;
      if (v12 == v11)
        goto LABEL_63;
    }
    v21 = (v7 - v16) >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      sub_22316E078();
    v23 = v19 - (_QWORD)v16;
    if (v23 >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 60)
        sub_223174E94();
      v25 = (char *)operator new(16 * v24);
      v26 = &v25[16 * v21];
      *(_OWORD *)v26 = *(_OWORD *)v12;
      v27 = (uint64_t)v26;
      if (v16 == v7)
        goto LABEL_60;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(16 * v21);
      *(_OWORD *)(16 * v21) = *(_OWORD *)v12;
      v27 = 16 * v21;
      if (v16 == v7)
        goto LABEL_60;
    }
    do
    {
      *(_OWORD *)(v27 - 16) = *((_OWORD *)v7 - 1);
      v27 -= 16;
      v7 -= 16;
    }
    while (v7 != v16);
    v7 = *(char **)a1;
LABEL_60:
    v20 = v26 + 16;
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = v26 + 16;
    *(_QWORD *)(a1 + 16) = &v25[16 * v24];
    if (v7)
      operator delete(v7);
    goto LABEL_62;
  }
LABEL_63:
  v28 = *(char **)a1;
  if ((unint64_t)((uint64_t)&v7[-*(_QWORD *)a1] >> 4) >= *(_QWORD *)(a1 + 24))
    v29 = *(_QWORD *)(a1 + 24);
  else
    v29 = (uint64_t)&v7[-*(_QWORD *)a1] >> 4;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (v29)
  {
    v30 = 16 * v29;
    do
    {
      sub_223340BF8(a3, (uint64_t)v28, v28);
      v28 += 16;
      v30 -= 16;
    }
    while (v30);
    v32 = *(_QWORD **)a1;
    v31 = *(_BYTE **)(a1 + 8);
    v33 = (_BYTE *)(*(_QWORD *)a1 + 16 * v29);
    v34 = v31 - v33;
    if (v31 != v33)
      memmove(*(void **)a1, v33, v31 - v33);
    *(_QWORD *)(a1 + 8) = (char *)v32 + v34;
  }
}

void sub_2236B43DC()
{
  sub_22316DBD4("vector");
}

void ***sub_2236B43F0(void ***a1, _QWORD *a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = (char *)*v4;
    v10 = v6 - (_BYTE *)*v4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_2236B43DC();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_223174E94();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_28;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = (__int128 *)(v6 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
      v7 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

void sub_2236B4564(_DWORD *a1@<X0>, void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17[2];
  std::__shared_weak_count *v18;
  uint64_t v19;

  sub_2236B4758(a1, a2, v17);
  v4 = v17[0];
  v17[1] = v17[0];
  if (v17[0])
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v17[0];
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24880;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v18 = v5;
    v17[0] = 0;
    *a3 = v4;
    a3[1] = (uint64_t)v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v5 = 0;
    v18 = 0;
    v17[0] = 0;
    *a3 = 0;
    a3[1] = 0;
  }
  a3[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v19, v4, 1);
  v9 = *(_QWORD *)(v19 + 16);
  *(_OWORD *)(a3 + 3) = *(_OWORD *)v19;
  a3[5] = v9;
  v19 = 0;
  MEMORY[0x227684CE8]();
  a3[6] = a3[3];
  *(_OWORD *)(a3 + 7) = *((_OWORD *)a3 + 2);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 104))(*a3);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a3 + 36) = v12 & 0xFF00 | v11;
  if (v4)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v15 = v17[0];
  v17[0] = 0;
  if (v15)
  {
    v16 = *(void **)(v15 + 48);
    if (v16)
      free(v16);
    *(_QWORD *)(v15 + 48) = 0;
    MEMORY[0x227684CE8](v15, 0x1091C406A8758A4);
  }
}

void sub_2236B46FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231F9050(&a9);
  _Unwind_Resume(a1);
}

void sub_2236B4710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_2231F9050(&a9);
  _Unwind_Resume(a1);
}

void sub_2236B4734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_2231F9050(&a9);
  _Unwind_Resume(a1);
}

__n128 sub_2236B4758@<Q0>(_DWORD *a1@<X0>, void **a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  BOOL v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  __n128 result;
  __n128 v15;
  __int128 v16;
  _BYTE v17[28];
  size_t v18[3];
  __n128 v19;
  unint64_t v20;
  uint64_t v21;

  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a1;
  if (v4)
    v5 = 0;
  v6 = v5 << 32;
  if (!HIDWORD(v5))
    v6 = 0;
  v7 = v5 != 0;
  if ((_DWORD)v5)
    v8 = HIDWORD(v5) == 0;
  else
    v8 = 1;
  *(_QWORD *)v17 = v5;
  *(_QWORD *)&v17[8] = v6 | v7;
  v17[16] = 0;
  v17[24] = 0;
  if (v8)
    v5 = 0;
  v20 = v5;
  v21 = v6 | v7;
  if ((HIDWORD(v6) & (HIDWORD(v6) - 1)) != 0)
    v9 = 1;
  else
    v9 = HIDWORD(v6);
  sub_223316930(v18, &v20, (void **)&v21, 1, a2, 1, v9);
  v16 = *(_OWORD *)v17;
  HIDWORD(v16) = *(_DWORD *)&v17[12];
  v11 = v18[0];
  v10 = v18[1];
  v12 = v18[2];
  v15 = v19;
  v13 = operator new();
  *(_QWORD *)v13 = &off_24EC20D50;
  *(_OWORD *)(v13 + 8) = v16;
  *(_OWORD *)(v13 + 20) = *(_OWORD *)&v17[12];
  *(_QWORD *)(v13 + 40) = v11;
  *(_QWORD *)(v13 + 48) = v10;
  *(_QWORD *)(v13 + 56) = v12;
  result = v15;
  *(__n128 *)(v13 + 64) = v15;
  *a3 = v13;
  return result;
}

void sub_2236B4864(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_2236B487C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231DEAD8(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2236B4968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2236B4984(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v7)
      goto LABEL_55;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (*(_BYTE *)(a1 + 49))
      {
LABEL_8:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v42, v6, 0);
        v11 = *(std::__shared_weak_count **)(a1 + 16);
        v37 = *(_QWORD *)(a1 + 8);
        v40 = v37;
        v41 = v11;
        if (!v11)
          goto LABEL_26;
LABEL_24:
        v18 = (unint64_t *)&v11->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
LABEL_26:
        v20 = *(_DWORD *)(a1 + 40);
        v21 = *(_DWORD *)(a1 + 44);
        v22 = *a2;
        v23 = a2[1];
        v24 = *(_QWORD *)(a1 + 24);
        if (a2[3])
          v25 = a2[2] == 0;
        else
          v25 = 1;
        if (v25)
          v26 = 0;
        else
          v26 = *((_QWORD *)a2 + 1);
        v27 = *(_QWORD *)(a1 + 40);
        if (HIDWORD(v26) * HIDWORD(v27) == -1
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v28 = v24 + (v22 * v20 + v23 * v21);
        v29 = *(_WORD *)(a1 + 48);
        if (v11)
        {
          v30 = (unint64_t *)&v11->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          do
            v32 = __ldxr(v30);
          while (__stxr(v32 + 1, v30));
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = v11;
          *(_QWORD *)(a3 + 16) = v28;
          *(_QWORD *)(a3 + 24) = v26;
          *(_QWORD *)(a3 + 32) = v27;
          *(_WORD *)(a3 + 40) = v29;
          do
            v33 = __ldaxr(v30);
          while (__stlxr(v33 - 1, v30));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        else
        {
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = v28;
          *(_QWORD *)(a3 + 24) = v26;
          *(_QWORD *)(a3 + 32) = v27;
          *(_WORD *)(a3 + 40) = v29;
        }
        if (v41)
        {
          v34 = &v41->__shared_owners_;
          do
            v35 = __ldaxr((unint64_t *)v34);
          while (__stlxr(v35 - 1, (unint64_t *)v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v36 = v42;
        v42 = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        return;
      }
    }
    else
    {
LABEL_55:
      if (*(_BYTE *)(a1 + 49))
        goto LABEL_8;
    }
    v42 = 0;
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    v37 = *(_QWORD *)(a1 + 8);
    v40 = v37;
    v41 = v11;
    if (!v11)
      goto LABEL_26;
    goto LABEL_24;
  }
  v40 = 0;
  v41 = 0;
  if (a2[3])
    v12 = a2[2] == 0;
  else
    v12 = 1;
  v13 = *((_QWORD *)a2 + 1);
  if (v12)
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v38 = *(_QWORD *)(a1 + 24) + (*a2 * *(_DWORD *)(a1 + 40) + a2[1] * *(_DWORD *)(a1 + 44));
  *((_QWORD *)&v38 + 1) = v13;
  v39 = v14;
  if (HIDWORD(v13) * HIDWORD(v14) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2236B4CF4(a3, &v40, &v38);
  v15 = v41;
  if (v41)
  {
    v16 = &v41->__shared_owners_;
    do
      v17 = __ldaxr((unint64_t *)v16);
    while (__stlxr(v17 - 1, (unint64_t *)v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2236B4CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  sub_223167354((uint64_t)&a14);
  v17 = a16;
  a16 = 0;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2236B4CF4(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_2236B4E00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2236B4E44(uint64_t result, const float *a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;

  v3 = (*(_DWORD *)(result + 36) * *(_DWORD *)(result + 32));
  v4 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(result + 48))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 8);
    v8 = *(std::__shared_weak_count **)(result + 16);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v7 + 88))(v7, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v4 = *(_QWORD *)(v6 + 24);
  }
  if ((_DWORD)v3)
    v12 = v4 == 0;
  else
    v12 = 0;
  if (v12)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  else if (!(_DWORD)v3)
  {
    return result;
  }
  v13 = v3 - ((_DWORD)v3 != 0) + 1;
  if (v13 < 0x10)
    goto LABEL_24;
  v14 = 4 * v3;
  if (!(_DWORD)v3)
    v14 = 4;
  if (v4 < (unint64_t)(a2 + 1) && v4 + v14 > (unint64_t)a2)
  {
LABEL_24:
    v15 = (_DWORD *)v4;
LABEL_25:
    v16 = v3 + 1;
    do
    {
      *v15++ = *(_DWORD *)a2;
      --v16;
    }
    while (v16 > 1);
    return result;
  }
  v15 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
  v3 -= v13 & 0xFFFFFFFFFFFFFFF8;
  v17 = vld1q_dup_f32(a2);
  v18 = (float32x4_t *)(v4 + 16);
  v19 = v13 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v18[-1] = v17;
    *v18 = v17;
    v18 += 2;
    v19 -= 8;
  }
  while (v19);
  if (v13 != (v13 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_25;
  return result;
}

uint64_t sub_2236B4FD4(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  _DWORD v14[5];
  _QWORD v15[2];

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = result;
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(a2 + 44);
    v14[2] = *(_DWORD *)(a2 + 40);
    v14[3] = v2 - 1;
    v14[4] = v7;
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v8)
    {
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(std::__shared_weak_count **)(a2 + 16);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v9 + 88))(v9, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v8 = *(_QWORD *)(a2 + 24);
    }
    v15[0] = 0;
    v15[1] = 0;
    return sub_223469FB8((uint64_t)v14, (uint64_t)v15, v6, v8);
  }
  return result;
}

float sub_2236B50B8(_DWORD **a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  int i;
  _DWORD *v20;
  int v21;
  float result;

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v7 = v2 - 1;
    v8 = *(unsigned int *)(a2 + 40);
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(_DWORD **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v10 = *(_DWORD **)(a2 + 24);
    }
    v17 = v3 - 1;
    if (v7)
    {
      v18 = *a1;
      if (v3 == 1)
      {
        do
        {
          *v10 = *v18;
          v10 += v9;
          --v7;
        }
        while (v7);
        goto LABEL_27;
      }
      for (i = 0; i != v7; ++i)
      {
        v20 = v10;
        v21 = v3 - 1;
        do
        {
          *v20 = *v18;
          v20 += v8;
          --v21;
        }
        while (v21);
        *v20 = *v18;
        v10 += v9;
      }
    }
    else
    {
      v18 = *a1;
      if (v3 == 1)
      {
LABEL_27:
        result = *(float *)v18;
        *v10 = *v18;
        return result;
      }
    }
    do
    {
      *v10 = *v18;
      v10 += v8;
      --v17;
    }
    while (v17);
    goto LABEL_27;
  }
  return result;
}

void sub_2236B5220(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, char **a5)
{
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  float v25;
  int v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;

  *a3 = 0x7FFFFFFF;
  *a4 = 0x80000000;
  if (a1)
  {
    v7 = 0;
    v41 = a3;
    v42 = a4;
    v40 = a2;
    while (1)
    {
      v9 = (int *)(a2 + 8 * v7);
      v10 = v7 + 1;
      if (v7 + 1 == a1)
        v11 = 0;
      else
        v11 = v7 + 1;
      v12 = (int *)(a2 + 8 * v11);
      v13 = v12[1];
      v14 = v9[1];
      if (v13 >= v14)
        v15 = v9[1];
      else
        v15 = v12[1];
      if (v14 <= v13)
        v16 = v12[1];
      else
        v16 = v9[1];
      v17 = *a3;
      if (v15 < *a3)
        v17 = v15;
      *a3 = v17;
      v18 = *a4;
      if (*a4 <= v16)
        v18 = v16;
      *a4 = v18;
      if (v15 == v16)
        goto LABEL_5;
      v20 = *v12;
      v19 = v12[1];
      v22 = *v9;
      v21 = v9[1];
      v23 = __OFSUB__(v19, v21);
      v24 = v19 - v21;
      v25 = (float)(v20 - v22) / (float)v24;
      v26 = v24 < 0 != v23 ? v20 : v22;
      v28 = a5[1];
      v27 = (unint64_t)a5[2];
      if ((unint64_t)v28 >= v27)
        break;
      *(_DWORD *)v28 = v15;
      *((_DWORD *)v28 + 1) = v16;
      *((float *)v28 + 2) = (float)v26;
      *((float *)v28 + 3) = v25;
      v8 = v28 + 16;
LABEL_4:
      a5[1] = v8;
LABEL_5:
      v7 = v10;
      if (v10 == a1)
        return;
    }
    v29 = *a5;
    v30 = (v28 - *a5) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      sub_2236B43DC();
    v32 = v27 - (_QWORD)v29;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    v33 = (unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0;
    v34 = 0xFFFFFFFFFFFFFFFLL;
    if (!v33)
      v34 = v31;
    if (v34 >> 60)
      sub_223174E94();
    v35 = 16 * v34;
    v36 = (char *)operator new(16 * v34);
    v37 = &v36[16 * v30];
    *(_DWORD *)v37 = v15;
    *((_DWORD *)v37 + 1) = v16;
    *((float *)v37 + 2) = (float)v26;
    *((float *)v37 + 3) = v25;
    if (v28 == v29)
    {
      v8 = v37 + 16;
      *a5 = v37;
      a5[1] = v37 + 16;
      a5[2] = &v36[v35];
      if (!v29)
        goto LABEL_35;
    }
    else
    {
      v38 = &v36[16 * v30];
      do
      {
        v39 = v38 - 16;
        *((_OWORD *)v38 - 1) = *((_OWORD *)v28 - 1);
        v28 -= 16;
        v38 -= 16;
      }
      while (v28 != v29);
      v8 = v37 + 16;
      *a5 = v39;
      a5[1] = v37 + 16;
      a5[2] = &v36[v35];
      if (!v29)
        goto LABEL_35;
    }
    operator delete(v29);
LABEL_35:
    a3 = v41;
    a4 = v42;
    a2 = v40;
    goto LABEL_4;
  }
}

unint64_t sub_2236B540C(uint64_t *a1, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  int32x2_t v9;
  int32x2_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16;
  uint64_t *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v25;
  int64x2_t v26;
  int64x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v36;
  int8x16_t v37;
  int32x4_t v39;
  unint64_t v40;
  unsigned int v41;
  int64x2_t v42;
  int64x2_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int64x2_t v54;
  int64x2_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  float32x4_t v75;
  int8x16_t v77;
  int32x4_t v78;
  unint64_t v79;
  int64x2_t v80;
  int64x2_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float16x4_t *v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int64x2_t v93;
  int64x2_t v94;
  uint64_t v95;
  unsigned int v96;
  float v97;
  float v99;
  unsigned int v102;
  _BOOL4 v103;
  float v104;
  BOOL v105;
  float v106;
  int v109;
  int v110;
  char v111;
  int v112;
  int v113;
  char v114;

  LODWORD(v4) = a4;
  LODWORD(v5) = a3;
  result = sub_223765A28(*a1, a2, &v109);
  v11 = a1[1];
  v12 = *(_DWORD *)(v11 + 40);
  v13 = *(_DWORD *)(v11 + 44) * a2;
  v14 = *(_QWORD *)(v11 + 24);
  v15 = v14 + 2 * v13;
  *(float *)v16.i32 = (float)a2;
  if (v111)
  {
    v5 = (int)v5 <= v109 ? v109 : v5;
    v4 = v110 >= (int)v4 + 1 ? (v4 + 1) : v110;
    if (v5 < v4)
    {
      v18 = a1[2];
      v17 = (uint64_t *)a1[3];
      v19 = *(float *)v18;
      *(float *)v9.i32 = *(float *)(v18 + 4) * *(float *)v16.i32;
      v10.i32[0] = *(_DWORD *)(v18 + 8);
      v20 = *v17;
      v21 = v4 - v5;
      if ((unint64_t)(v4 - v5) >= 8
        && ((v22 = ~v5 + v4, !__CFADD__((_DWORD)v5, (_DWORD)v22)) ? (v23 = 0) : (v23 = 1),
            v12 == 1
         && (v23 & 1) == 0
         && !HIDWORD(v22)
         && ((unint64_t)v17 < v14 + 2 * (v4 + v13)
           ? (_CF = v14 + 2 * (v5 + v13) >= (unint64_t)(v17 + 1))
           : (_CF = 1),
             _CF)))
      {
        v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + v5;
        v26 = 0uLL;
        v27 = (int64x2_t)(unint64_t)*v17;
        v28 = (float32x4_t)vdupq_lane_s32(v9, 0);
        v29 = (float32x4_t)vdupq_lane_s32(v10, 0);
        v30 = vaddq_s32(vdupq_n_s32(v5), (int32x4_t)xmmword_2246499B0);
        v31.i64[0] = 0x400000004;
        v31.i64[1] = 0x400000004;
        v32 = (float32x4_t)vdupq_n_s32(0x358637BDu);
        __asm { FMOV            V19.4S, #1.0 }
        v36 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
        v37 = (int8x16_t)vdupq_n_s64(1uLL);
        __asm { FMOV            V22.4S, #-0.25 }
        v39.i64[0] = 0x800000008;
        v39.i64[1] = 0x800000008;
        v40 = v21 & 0xFFFFFFFFFFFFFFF8;
        v41 = v5;
        v42 = 0uLL;
        v43 = 0uLL;
        do
        {
          v44 = vaddq_f32(v29, vaddq_f32(v28, vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)v30), v19)));
          v45 = vaddq_f32(v29, vaddq_f32(v28, vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v30, v31)), v19)));
          v46 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(_Q19, v44), vbicq_s8(vmvnq_s8((int8x16_t)vceqzq_f32(v44)), (int8x16_t)vcgeq_f32(v32, vabsq_f32(v44))));
          result = v15 + 2 * v41;
          v47 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(_Q19, v45), vbicq_s8(vmvnq_s8((int8x16_t)vceqzq_f32(v45)), (int8x16_t)vcgeq_f32(v32, vabsq_f32(v45))));
          v48 = vcvtq_f32_f16(*(float16x4_t *)result);
          v49 = vcvtq_f32_f16(*(float16x4_t *)(result + 8));
          v50 = vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v48, v36), (int8x16_t)vcgeq_f32(v46, v36)), (int8x16_t)vcgtq_f32(vaddq_f32(v48, _Q22), v46));
          v51 = vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v49, v36), (int8x16_t)vcgeq_f32(v47, v36)), (int8x16_t)vcgtq_f32(vaddq_f32(v49, _Q22), v47));
          v52.i64[0] = v50.u32[0];
          v52.i64[1] = v50.u32[1];
          v53 = v52;
          v52.i64[0] = v50.u32[2];
          v52.i64[1] = v50.u32[3];
          v54 = (int64x2_t)vandq_s8(v52, v37);
          v52.i64[0] = v51.u32[0];
          v52.i64[1] = v51.u32[1];
          v55 = (int64x2_t)vandq_s8(v52, v37);
          v52.i64[0] = v51.u32[2];
          v52.i64[1] = v51.u32[3];
          v26 = vaddq_s64(v26, v54);
          v27 = vaddq_s64(v27, (int64x2_t)vandq_s8(v53, v37));
          v43 = vaddq_s64(v43, (int64x2_t)vandq_s8(v52, v37));
          v42 = vaddq_s64(v42, v55);
          v30 = vaddq_s32(v30, v39);
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
        v56 = vaddvq_s64(vaddq_s64(vaddq_s64(v42, v27), vaddq_s64(v43, v26)));
        *v17 = v56;
        v20 = v56;
        if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_24;
      }
      else
      {
        v25 = v5;
      }
      v96 = v12 * v25;
      do
      {
        result = 0;
        v97 = *(float *)v10.i32 + (float)(*(float *)v9.i32 + (float)(v19 * (float)v25));
        _ZF = fabsf(v97) <= 0.000001 || v97 == 0.0;
        v99 = 1.0 / v97;
        if (_ZF)
          v99 = 0.0;
        _H16 = *(_WORD *)(v15 + 2 * v96);
        __asm { FCVT            S16, H16 }
        if (_S16 >= 0.2 && v99 >= 0.2)
          result = v99 < (float)(_S16 + -0.25);
        v20 += result;
        *v17 = v20;
        ++v25;
        v96 += v12;
      }
      while (v4 != v25);
    }
  }
LABEL_24:
  if (v114)
  {
    v57 = (int)v5 <= v112 ? v112 : v5;
    v58 = v113 >= (int)v4 + 1 ? (v4 + 1) : v113;
    if (v57 < v58)
    {
      v60 = a1[2];
      v59 = (uint64_t *)a1[3];
      v61 = *(float *)v60;
      *(float *)v16.i32 = *(float *)(v60 + 4) * *(float *)v16.i32;
      v9.i32[0] = *(_DWORD *)(v60 + 8);
      v62 = *v59;
      v63 = v58 - v57;
      if ((unint64_t)(v58 - v57) >= 8
        && ((v64 = ~v57 + v58, !__CFADD__((_DWORD)v57, (_DWORD)v64)) ? (result = 0) : (result = 1),
            v12 == 1
         && (result & 1) == 0
         && !HIDWORD(v64)
         && ((result = v14 + 2 * (v57 + v13), (unint64_t)v59 < v14 + 2 * (v58 + v13))
           ? (v65 = result >= (unint64_t)(v59 + 1))
           : (v65 = 1),
             v65)))
      {
        v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + v57;
        v67 = (int64x2_t)(unint64_t)*v59;
        v68 = 0uLL;
        v69 = vaddq_s32(vdupq_n_s32(v57), (int32x4_t)xmmword_2246499B0);
        v70 = (float32x4_t)vdupq_lane_s32(v16, 0);
        v71 = (float32x4_t)vdupq_lane_s32(v9, 0);
        v72.i64[0] = 0x400000004;
        v72.i64[1] = 0x400000004;
        v73 = (float32x4_t)vdupq_n_s32(0x358637BDu);
        __asm { FMOV            V18.4S, #1.0 }
        v75 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
        __asm { FMOV            V20.4S, #-0.25 }
        v77 = (int8x16_t)vdupq_n_s64(1uLL);
        v78.i64[0] = 0x800000008;
        v78.i64[1] = 0x800000008;
        v79 = v63 & 0xFFFFFFFFFFFFFFF8;
        v80 = 0uLL;
        v81 = 0uLL;
        do
        {
          v82 = vaddq_f32(v71, vaddq_f32(v70, vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)v69), v61)));
          v83 = vaddq_f32(v71, vaddq_f32(v70, vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v69, v72)), v61)));
          v84 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(_Q18, v82), vbicq_s8(vmvnq_s8((int8x16_t)vceqzq_f32(v82)), (int8x16_t)vcgeq_f32(v73, vabsq_f32(v82))));
          v85 = (float16x4_t *)(v15 + 2 * v57);
          v86 = (float32x4_t)vandq_s8((int8x16_t)vdivq_f32(_Q18, v83), vbicq_s8(vmvnq_s8((int8x16_t)vceqzq_f32(v83)), (int8x16_t)vcgeq_f32(v73, vabsq_f32(v83))));
          v87 = vcvtq_f32_f16(*v85);
          v88 = vcvtq_f32_f16(v85[1]);
          v89 = vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v87, v75), (int8x16_t)vcgeq_f32(v84, v75)), (int8x16_t)vcgtq_f32(vaddq_f32(v87, _Q20), v84));
          v90 = vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v88, v75), (int8x16_t)vcgeq_f32(v86, v75)), (int8x16_t)vcgtq_f32(vaddq_f32(v88, _Q20), v86));
          v91.i64[0] = v89.u32[0];
          v91.i64[1] = v89.u32[1];
          v92 = v91;
          v91.i64[0] = v89.u32[2];
          v91.i64[1] = v89.u32[3];
          v93 = (int64x2_t)vandq_s8(v91, v77);
          v91.i64[0] = v90.u32[0];
          v91.i64[1] = v90.u32[1];
          v94 = (int64x2_t)vandq_s8(v91, v77);
          v91.i64[0] = v90.u32[2];
          v91.i64[1] = v90.u32[3];
          v68 = vaddq_s64(v68, v93);
          v67 = vaddq_s64(v67, (int64x2_t)vandq_s8(v92, v77));
          v81 = vaddq_s64(v81, (int64x2_t)vandq_s8(v91, v77));
          v80 = vaddq_s64(v80, v94);
          v69 = vaddq_s32(v69, v78);
          LODWORD(v57) = v57 + 8;
          v79 -= 8;
        }
        while (v79);
        v95 = vaddvq_s64(vaddq_s64(vaddq_s64(v80, v67), vaddq_s64(v81, v68)));
        *v59 = v95;
        v62 = v95;
        if (v63 == (v63 & 0xFFFFFFFFFFFFFFF8))
          return result;
      }
      else
      {
        v66 = v57;
      }
      v102 = v12 * v66;
      do
      {
        v103 = 0;
        v104 = *(float *)v9.i32 + (float)(*(float *)v16.i32 + (float)(v61 * (float)v66));
        v105 = fabsf(v104) <= 0.000001 || v104 == 0.0;
        v106 = 1.0 / v104;
        if (v105)
          v106 = 0.0;
        _H7 = *(_WORD *)(v15 + 2 * v102);
        __asm { FCVT            S7, H7 }
        if (_S7 >= 0.2 && v106 >= 0.2)
          v103 = v106 < (float)(_S7 + -0.25);
        v62 += v103;
        *v59 = v62;
        ++v66;
        v102 += v12;
      }
      while (v58 != v66);
    }
  }
  return result;
}

void sub_2236B598C(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float *i;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  int v31;
  float v32;
  float *v34;
  unint64_t v35;
  float *v37;
  int v38;
  BOOL v39;
  float *v41;
  int v42;
  float v43;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  int v51;
  BOOL v52;
  BOOL v54;
  float *v55;
  float v56;
  float v57;
  float *v59;
  int v60;
  BOOL v61;
  __int128 *v62;
  __int128 *v63;
  float *v64;
  int v65;
  int v66;
  BOOL v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  float *v73;
  BOOL v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float *v79;
  int v80;
  float v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  int v86;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float *v92;
  int v93;
  BOOL v94;
  float *v95;
  int v96;
  float v97;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  float *v118;
  int v119;
  float v120;
  BOOL v121;
  uint64_t v122;
  unint64_t v123;
  float *v124;
  float *v126;
  int v127;
  float v128;
  BOOL v129;
  uint64_t v130;
  float *j;
  int v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

__n128 sub_2236B62E8(uint64_t a1, float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  BOOL v11;
  BOOL v12;

  sub_2236B6494((float *)a1, a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || ((result.n128_f32[0] = a3[3], *(_DWORD *)a4 == *(_DWORD *)a3)
      ? (v11 = *(float *)(a4 + 12) < result.n128_f32[0])
      : (v11 = 0),
        v11))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)a3 < *(_DWORD *)a2
      || ((result.n128_f32[0] = a2[3], *(_DWORD *)a3 == *(_DWORD *)a2) ? (v12 = a3[3] < result.n128_f32[0]) : (v12 = 0),
          v12))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)a2 < *(_DWORD *)a1
        || *(_DWORD *)a2 == *(_DWORD *)a1 && (result.n128_u32[0] = *(_DWORD *)(a1 + 12), a2[3] < result.n128_f32[0]))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4
    || *(_DWORD *)a5 == *(_DWORD *)a4
    && (result.n128_u32[0] = *(_DWORD *)(a4 + 12), *(float *)(a5 + 12) < result.n128_f32[0]))
  {
    result = *(__n128 *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(__n128 *)a5 = result;
    if (*(_DWORD *)a4 < *(_DWORD *)a3
      || *(_DWORD *)a4 == *(_DWORD *)a3 && (result.n128_f32[0] = a3[3], *(float *)(a4 + 12) < result.n128_f32[0]))
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(__n128 *)a4 = result;
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 == *(_DWORD *)a2 && (result.n128_f32[0] = a2[3], a3[3] < result.n128_f32[0]))
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a2 == *(_DWORD *)a1 && (result.n128_u32[0] = *(_DWORD *)(a1 + 12), a2[3] < result.n128_f32[0]))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

float *sub_2236B6494(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  BOOL v5;
  BOOL v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;
  __int128 v10;
  __int128 v11;

  v3 = *a2;
  v4 = a2[3];
  if (*(_DWORD *)a2 < *(_DWORD *)result || (LODWORD(v3) == *(_DWORD *)result ? (v5 = v4 < result[3]) : (v5 = 0), v5))
  {
    if (*(_DWORD *)a3 < SLODWORD(v3) || (*(_DWORD *)a3 == LODWORD(v3) ? (v9 = a3[3] < v4) : (v9 = 0), v9))
    {
      v11 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
    }
    else
    {
      v10 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v10;
      if (*(_DWORD *)a3 >= *(_DWORD *)a2 && (*(_DWORD *)a3 != *(_DWORD *)a2 || a3[3] >= a2[3]))
        return result;
      v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v11;
    return result;
  }
  if (*(_DWORD *)a3 < SLODWORD(v3) || (*(_DWORD *)a3 == LODWORD(v3) ? (v6 = a3[3] < v4) : (v6 = 0), v6))
  {
    v7 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v7;
    if (*(_DWORD *)a2 < *(_DWORD *)result || *(_DWORD *)a2 == *(_DWORD *)result && a2[3] < result[3])
    {
      v8 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
    }
  }
  return result;
}

BOOL sub_2236B6590(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  float *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float *v18;
  int v19;
  BOOL v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  float *v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = a2 - 4;
      v19 = *((_DWORD *)a2 - 4);
      if (v19 < *(_DWORD *)a1 || (v19 == *(_DWORD *)a1 ? (v20 = *(a2 - 1) < a1[3]) : (v20 = 0), v20))
      {
        v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)v18 = v21;
      }
      return result;
    case 3:
      sub_2236B6494(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      v22 = (__int128 *)(a1 + 4);
      v23 = (__int128 *)(a1 + 8);
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v24 = a2 - 4;
      v25 = *((_DWORD *)a2 - 4);
      v26 = *((_DWORD *)a1 + 8);
      if (v25 < v26 || (result = 1, v25 == v26) && *(a2 - 1) < a1[11])
      {
        v27 = *v23;
        *v23 = *(_OWORD *)v24;
        *(_OWORD *)v24 = v27;
        v28 = *((_DWORD *)a1 + 8);
        v29 = *((_DWORD *)a1 + 4);
        if (v28 < v29 || (result = 1, v28 == v29) && a1[11] < a1[7])
        {
          v30 = *v22;
          *v22 = *v23;
          *v23 = v30;
          v31 = *((_DWORD *)a1 + 4);
          if (v31 < *(_DWORD *)a1 || (result = 1, v31 == *(_DWORD *)a1) && a1[7] < a1[3])
          {
            v32 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v22;
            *v22 = v32;
            return 1;
          }
        }
      }
      return result;
    case 5:
      sub_2236B62E8((uint64_t)a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      v6 = a1 + 8;
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v7 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)v7;
    v12 = v7[3];
    if (*(_DWORD *)v7 < *(_DWORD *)v6 || (v11 == *(_DWORD *)v6 ? (v13 = v12 < v6[3]) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)(v7 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v10 = (uint64_t)a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(_DWORD *)((char *)a1 + v15 + 16);
          if (v11 >= v16 && (v11 != v16 || v12 >= *(float *)((char *)a1 + v15 + 28)))
            break;
          *(_OWORD *)((char *)a1 + v15 + 32) = *(_OWORD *)((char *)a1 + v15 + 16);
          v15 -= 16;
          if (v15 == -32)
          {
            v10 = (uint64_t)a1;
            goto LABEL_6;
          }
        }
        v10 = (uint64_t)a1 + v15 + 32;
      }
LABEL_6:
      *(_DWORD *)v10 = v11;
      *(_QWORD *)(v10 + 4) = v14;
      *(float *)(v10 + 12) = v12;
      if (++v9 == 8)
        return v7 + 4 == a2;
    }
    v6 = v7;
    v8 += 16;
    v7 += 4;
    if (v7 == a2)
      return 1;
  }
}

uint64_t sub_2236B687C(uint64_t a1, __int128 *a2, float32x2_t *a3, double a4, int8x16_t a5, int8x16_t a6, double a7, float32x2_t a8, float32x4_t a9)
{
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  __int128 *v15;
  int v16;
  _BOOL4 v17;
  __int128 *v18;
  _BOOL4 v19;
  float32x2_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x2_t v58;
  float32x2_t v59;
  int8x16_t v60;
  float32x2_t v61;
  unint64_t v63;
  float v64;
  float v65;
  uint64_t v67[6];
  __int128 v68;
  float32x2_t *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v15 = a2;
    v16 = 0;
    v17 = 0;
    v18 = (__int128 *)((char *)a2 + 24 * a1);
    while (1)
    {
      v68 = *v15;
      v20 = (float32x2_t *)*((_QWORD *)v15 + 2);
      v69 = v20;
      v21 = (unint64_t)v20[26];
      v22 = (_QWORD *)v20[27];
      if ((_QWORD *)v21 != v22)
      {
        while (*(_QWORD *)v21 != (_QWORD)v68 || *(_QWORD *)(v21 + 8) != *((_QWORD *)&v68 + 1))
        {
          v21 += 424;
          if ((_QWORD *)v21 == v22)
          {
            v21 = (unint64_t)v20[27];
            break;
          }
        }
      }
      v24 = v21 & 0xFFFFFFFFFFFFFF00;
      if ((_QWORD *)v21 == v22)
        v21 = 0;
      else
        v21 = v21;
      v25 = v21 | v24;
      if (*(_QWORD *)((v21 | v24) + 0x110) == *(_QWORD *)((v21 | v24) + 0x108))
      {
        v30 = 0;
        v32 = 0xFFFFFFFF00000000;
        v33 = -1;
      }
      else
      {
        v26 = *(__int16 *)((v21 | v24) + 0x148);
        if (v26 < 0 || (v27 = *(__int16 *)((v21 | v24) + 0x14A), v27 < 0))
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          LOWORD(v26) = *(_WORD *)(v25 + 328);
          LOWORD(v27) = *(_WORD *)(v25 + 330);
        }
        v28 = *(_WORD *)(v25 + 332) - (_WORD)v26 == 0xFFFF || (unsigned __int16)~(*(_WORD *)(v25 + 334) - v27) == 0;
        v29 = (__int16)v26;
        v30 = ((__int16)v26 + (__int16)(*(_WORD *)(v25 + 332) - v26)) | ((unint64_t)((__int16)(*(_WORD *)(v25 + 334) - v27) + (__int16)v27) << 32);
        v31 = (uint64_t)(__int16)v27 << 32;
        if (v28)
          v30 = 0;
        v32 = 0xFFFFFFFF00000000;
        if (v28)
        {
          v33 = -1;
        }
        else
        {
          v32 = v31;
          v33 = v29;
        }
      }
      v34 = 0;
      if (HIDWORD(v30) >= HIDWORD(v32))
        v35 = (HIDWORD(v30) - HIDWORD(v32) + 1);
      else
        v35 = 0;
      v36 = v30 >= v33;
      v37 = v30 - v33;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      if (v36)
        v42 = (v37 + 1);
      else
        v42 = 0;
      if ((_DWORD)v42)
      {
        v43 = 0;
        if ((_DWORD)v35)
        {
          v43 = v35 * (unint64_t)v42;
          v44 = v42 - 1 + 2 * v33;
          v45 = v35 - 1 + ((v32 >> 31) & 0xFFFFFFFE);
          v46 = 12 * v43 * v44;
          v47 = (v42 - 1 + (v42 - 1) * v42) * 4 * v43 + v46 * v44;
          v48 = v45 * 12 * v43;
          v34 = v47 / 48;
          v38 = (uint64_t)((v35 - 1 + (v35 - 1) * v35) * 4 * v43 + v48 * v45) / 48;
          v49 = (unsigned __int128)(v46 * v45 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
          v39 = (v49 >> 3) + ((unint64_t)v49 >> 63);
          v40 = v46 / 24;
          v41 = v48 / 24;
        }
      }
      else
      {
        v43 = 0;
      }
      v67[0] = v34;
      v67[1] = v38;
      v67[2] = v39;
      v67[3] = v40;
      v67[4] = v41;
      v67[5] = v43;
      a8.i32[0] = *(_DWORD *)(v25 + 36);
      a9.i64[0] = *(_QWORD *)(v25 + 28);
      a6.i32[0] = a3[2].i32[1];
      *(float32x2_t *)v12.f32 = *(float32x2_t *)((char *)a3 + 12);
      v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 1);
      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)v12.f32), v50, *(float32x2_t *)a9.f32, 1), *(float32x2_t *)a6.i8, a8).f32[0] < 0.96593)
      {
        v19 = 0;
      }
      else
      {
        v51 = a9;
        v51.i32[2] = *(_DWORD *)(v25 + 36);
        v52 = v12;
        v52.i32[2] = a3[2].i32[1];
        v53 = v20[18];
        v9.i32[0] = v20[19].i32[0];
        v54 = v20[20];
        v10.i32[0] = v20[21].i32[0];
        v55 = v20[22];
        v11.i32[0] = v20[23].i32[0];
        a5.i32[0] = a3[1].i32[0];
        *(float32x2_t *)v56.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v53, COERCE_FLOAT(*a3)), v54, *a3, 1), v55, *(float *)a5.i32);
        *(float32x2_t *)&v56.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v9, *a3), v10, *a3, 1), *(float32x2_t *)a5.i8, v11);
        *(float32x2_t *)v13.f32 = v20[24];
        v13.i32[2] = v20[25].i32[0];
        v57 = (int8x16_t)vaddq_f32(v56, v13);
        *(float32x2_t *)a5.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v53, v12.f32[0]), v54, *(float32x2_t *)v12.f32, 1), v55, v52, 2);
        v58 = vmla_f32(vmla_f32(vmul_f32(v9, *(float32x2_t *)v12.f32), v50, v10), *(float32x2_t *)a6.i8, v11);
        v59 = *(float32x2_t *)(v25 + 16);
        v50.i32[0] = *(_DWORD *)(v25 + 24);
        *(float32x2_t *)v52.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v53, v59.f32[0]), v54, v59, 1), v55, v50.f32[0]);
        *(float32x2_t *)&v52.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v9, v59), v10, v59, 1), v50, v11);
        a6 = (int8x16_t)vaddq_f32(v13, v52);
        *(float32x2_t *)v60.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v53, a9.f32[0]), v54, *(float32x2_t *)a9.f32, 1), v55, v51, 2);
        v61 = vmla_f32(vmla_f32(vmul_f32(v9, *(float32x2_t *)a9.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.f32, 1), v10), a8, v11);
        a8 = (float32x2_t)vextq_s8(a6, a6, 8uLL).u64[0];
        v9 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *(float32x2_t *)v60.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v60.i8, 1), *(float32x2_t *)a6.i8, 1), v61, a8);
        if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)a5.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.i8, 1), *(float32x2_t *)v57.i8, 1), v58, (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)).f32[0] >= -0.000001|| v9.f32[0] >= -0.000001)
        {
          goto LABEL_5;
        }
        a5.u64[1] = (unint64_t)v58;
        v60.u64[1] = (unint64_t)v61;
        v63 = sub_223765420(v20 + 6, v67, v57, a5, a6, v60);
        v64 = sqrtf(*(float *)&v63);
        if (*((float *)&v63 + 1) >= 1.0)
          v65 = *((float *)&v63 + 1) * 0.075;
        else
          v65 = 0.075;
        v19 = v64 <= v65;
      }
      v17 = v19 || v17;
      v16 |= !v19;
LABEL_5:
      v15 = (__int128 *)((char *)v15 + 24);
      if (v15 == v18)
        return v17 & ~v16 & 1;
    }
  }
  v17 = 0;
  v16 = 0;
  return v17 & ~v16 & 1;
}

void sub_2236B6CC8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int64x2_t v6;
  unint64_t v7;
  const std::nothrow_t *v8;
  unint64_t v9;
  char *v10;
  BOOL v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  _BYTE *v30;
  char *v31;
  unint64_t v32;
  _OWORD *v33;
  char *v34;
  unint64_t v35;
  __int128 v36;
  _QWORD *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x2_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  char *v60;
  char *v61;
  void *v62;
  void *v63;
  float32x2_t **v64;
  uint64_t v65;
  _QWORD *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  uint64_t v69;
  int8x16_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float32x2_t v75;
  int8x16_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float v79;
  float v80;
  _BOOL4 v81;
  float32x2_t v82;
  float v83;
  float32x2_t *v84;
  float32x2_t v85;
  float32x2_t v86;
  float v87;
  float v88;
  _QWORD *v89;
  _QWORD *v90;
  int8x16_t *v91;
  __int128 *v92;
  __int128 *v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  void *v97;
  _BYTE *v98;
  __int128 *v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  BOOL v103;
  unint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  unint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  float32x4_t v115;
  float32x4_t v116;
  int v117;
  int v118;
  float32x4_t v119;
  float32x4_t v120;
  int v121;
  int v122;
  float32x4_t v123;
  float32x4_t v124;
  int v125;
  int v126;
  int32x4_t v127;
  float32x4_t v128;
  int8x16_t v129;
  uint64_t v130;
  int8x16_t v131;
  int8x16_t v132;
  float32x4_t v133;
  int8x16_t v134;
  float32x4_t v135;
  float32x2_t v136;
  float32x2_t v137;
  uint64_t v138;
  float32x4_t *v139;
  float32x4_t v140;
  _OWORD *v141;
  __int128 v142;
  double v143;
  float32x4_t v144;
  unsigned int *v145;
  unsigned int *v146;
  void *v147;
  unsigned int *v148;
  unsigned int *v149;
  void *v150;
  void *v151;
  float32x4_t *v152;
  float32x4_t *v153;
  void *v154;
  float32x4_t *v155;
  void *v156;
  void *v157;
  unsigned int *v158;
  unsigned int *v159;
  void *v160;
  unsigned int *v161;
  void *v162;
  void *v163;
  double v164;
  float32x4_t v165;
  __int128 *v166;
  __int128 *v167;
  unint64_t v168;
  __int128 *v169;
  unint64_t v170;
  float32x2_t v171;
  float32x4_t v172;
  int32x4_t v173;
  float32x4_t v174;
  float32x2_t v175;
  uint64_t (**v176)();
  float32x2_t *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x2_t v187;
  float32x4_t v188;
  uint64_t *v189;
  __int128 *v190;
  float32x4_t *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  float32x2_t v196;
  float32x2_t v197;
  int8x16_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  int8x16_t v207;
  float32x4_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  int8x16_t *v217;
  int8x16_t *v218;
  int8x16_t *v219;
  char *i8;
  char *v221;
  int8x16_t *v222;
  _QWORD *v223;
  _QWORD *v224;
  void *v225;
  void *v226;
  __int128 **v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  __int128 v243;
  char *v244;
  char *v245;
  void *v246;
  void *v247;
  uint64_t v248;
  char *v249;
  void *v250;
  void *v251;
  uint64_t *v252;
  uint64_t v253;
  char v254;
  unint64_t v255;
  size_t v256;
  _QWORD *v257;
  void *v258;
  unsigned int *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _DWORD *v263;
  unsigned int *v264;
  unsigned int *v265;
  unsigned int v266;
  _DWORD *v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  _DWORD *v272;
  unsigned int *v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int *v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  char *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  void *v288;
  char *v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  char *v294;
  char *v295;
  char *v296;
  uint64_t v297;
  __int128 v298;
  char *v299;
  char *v300;
  __int128 v301;
  uint64_t v302;
  __n128 **v303;
  unsigned int *v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int *v307;
  unsigned int v308;
  unsigned int v309;
  BOOL v310;
  unint64_t v311;
  char *v312;
  uint64_t v313;
  _QWORD *v314;
  char **v315;
  _OWORD *v316;
  char *v317;
  _QWORD *v318;
  unint64_t v319;
  _QWORD *v320;
  char *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  char *v326;
  char *v327;
  char *v328;
  _OWORD *v329;
  uint64_t *v330;
  __n128 *v331;
  __n128 *v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  __n128 *v336;
  __n128 *v337;
  __n128 *v338;
  __n128 *v339;
  __n128 *v340;
  _OWORD *v341;
  __int128 v342;
  _OWORD *v343;
  unint64_t v344;
  _OWORD *v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  char *v350;
  __int128 v351;
  char *v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  char *v356;
  char *v357;
  __n128 **v358;
  __n128 **v359;
  __n128 **v360;
  __n128 *v361;
  __n128 *v362;
  _QWORD *v363;
  _QWORD *v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  uint64_t v369;
  void *v370;
  void *v371;
  _QWORD *v372;
  uint64_t v373;
  uint64_t v374;
  _BYTE *v375;
  _QWORD *v376;
  int8x16_t *v377;
  uint64_t v378;
  uint64_t v379;
  float32x2_t **v380;
  _BYTE *v381;
  _QWORD *v382;
  uint64_t v383;
  unint64_t v385;
  __int128 **v386;
  __int128 *v387;
  char *v388;
  __int128 *v389;
  uint64_t v390;
  unsigned int *v391;
  int8x16_t *v392;
  int8x16_t *v393;
  __int128 **v394;
  uint64_t v395;
  char *v396;
  _QWORD *v397;
  float32x2_t *v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t v401;
  float32x2_t *v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  __int128 **v407;
  _DWORD *v408;
  __n128 **v409;
  _BYTE v410[20];
  float v411;
  uint64_t v412;
  __int128 v413;
  int64x2_t v414;
  void *v415;
  float32x4_t *v416;
  char *v417;
  void *v418;
  unsigned int *v419;
  char *v420;
  void *v421;
  unsigned int *v422;
  _BYTE __p[32];
  float32x4_t v424;
  float32x4_t v425;
  uint64_t v426;
  void *v427;
  void *v428;
  _OWORD *v429;
  void *v430;
  _QWORD *i64;
  float32x4_t *v432;
  void *v433[2];
  __int128 v434;
  float32x4_t v435[2];
  int8x16_t v436;
  float32x4_t v437;
  _BYTE v438[32];
  __int128 v439;
  float32x4_t v440;
  uint64_t v441;

  v441 = *MEMORY[0x24BDAC8D0];
  sub_223737E44(a1 + 40, &v414);
  v6 = v414;
  v7 = (v414.i64[1] - v414.i64[0]) >> 3;
  if (v414.i64[1] - v414.i64[0] < 1025)
  {
LABEL_5:
    sub_2236B98B8((char *)v6.i64[0], (__n128 *)v6.i64[1], v7, 0, 0);
    v13 = v414.i64[1];
    v12 = (unsigned __int8 **)v414.i64[0];
    memset(__p, 0, 24);
    v14 = v414.i64[1] - v414.i64[0];
    if (v414.i64[1] == v414.i64[0])
    {
LABEL_276:
      v43 = 0;
      goto LABEL_277;
    }
  }
  else
  {
    v8 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v9 = (v414.i64[1] - v414.i64[0]) >> 3;
    while (1)
    {
      v10 = (char *)operator new(8 * v9, v8);
      if (v10)
        break;
      v11 = v9 > 1;
      v9 >>= 1;
      if (!v11)
        goto LABEL_5;
    }
    v221 = v10;
    sub_2236B98B8((char *)v6.i64[0], (__n128 *)v6.i64[1], v7, v10, v9);
    operator delete(v221);
    v13 = v414.i64[1];
    v12 = (unsigned __int8 **)v414.i64[0];
    memset(__p, 0, 24);
    v14 = v414.i64[1] - v414.i64[0];
    if (v414.i64[1] == v414.i64[0])
      goto LABEL_276;
  }
  if (v14 < 0)
    sub_22316E078();
  v15 = v14 >> 3;
  *(_QWORD *)__p = operator new(v14 >> 3);
  *(_QWORD *)&__p[8] = *(_QWORD *)__p;
  *(_QWORD *)&__p[16] = *(_QWORD *)__p + v15;
  v16 = (unsigned __int8 *)(a3 + 8);
  do
  {
    v18 = *(unsigned __int8 **)v16;
    if (!*(_QWORD *)v16)
      goto LABEL_35;
    v19 = *v12;
    v20 = v16;
    do
    {
      v21 = v18[25];
      v22 = **v12;
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[26];
      v22 = v19[1];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[27];
      v22 = v19[2];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[28];
      v22 = v19[3];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[29];
      v22 = v19[4];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[30];
      v22 = v19[5];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[31];
      v22 = v19[6];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[32];
      v22 = v19[7];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[33];
      v22 = v19[8];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[34];
      v22 = v19[9];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[35];
      v22 = v19[10];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[36];
      v22 = v19[11];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[37];
      v22 = v19[12];
      if (v21 != v22)
        goto LABEL_29;
      v21 = v18[38];
      v22 = v19[13];
      if (v21 == v22 && (v21 = v18[39], v22 = v19[14], v21 == v22) && (v21 = v18[40], v22 = v19[15], v21 == v22))
      {
        v20 = v18;
      }
      else
      {
LABEL_29:
        if (v21 < v22)
          v18 += 8;
        else
          v20 = v18;
      }
      v18 = *(unsigned __int8 **)v18;
    }
    while (v18);
    if (v20 == v16 || (char)sub_22319835C(v19, v20 + 25) < 0)
LABEL_35:
      v20 = v16;
    v23 = v20 != v16;
    v24 = *(char **)&__p[8];
    if (*(_QWORD *)&__p[8] < *(_QWORD *)&__p[16])
    {
      **(_BYTE **)&__p[8] = v23;
      v17 = (uint64_t)(v24 + 1);
      goto LABEL_9;
    }
    v25 = *(char **)__p;
    v26 = *(_QWORD *)&__p[8] - *(_QWORD *)__p;
    v27 = *(_QWORD *)&__p[8] - *(_QWORD *)__p + 1;
    if (v27 < 0)
      sub_22316E078();
    v28 = *(_QWORD *)&__p[16] - *(_QWORD *)__p;
    if (2 * (*(_QWORD *)&__p[16] - *(_QWORD *)__p) > (unint64_t)v27)
      v27 = 2 * v28;
    if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (!v29)
    {
      v30 = 0;
      v31 = (char *)(*(_QWORD *)&__p[8] - *(_QWORD *)__p);
      *(_BYTE *)v26 = v23;
      v17 = v26 + 1;
      if (v24 == v25)
        goto LABEL_50;
LABEL_45:
      if (v26 < 8 || (unint64_t)(v25 - v30) < 0x20)
        goto LABEL_61;
      if (v26 >= 0x20)
      {
        v32 = v26 & 0xFFFFFFFFFFFFFFE0;
        v33 = &v30[v26 - 16];
        v34 = v24 - 16;
        v35 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 32;
        }
        while (v35);
        if (v26 == v32)
        {
LABEL_63:
          v24 = *(char **)__p;
          *(_QWORD *)__p = v30;
          *(_QWORD *)&__p[16] = &v30[v29];
          if (!v24)
            goto LABEL_9;
LABEL_64:
          operator delete(v24);
          goto LABEL_9;
        }
        if ((v26 & 0x18) == 0)
        {
          v31 -= v32;
          v24 -= v32;
          goto LABEL_61;
        }
      }
      else
      {
        v32 = 0;
      }
      v31 -= v26 & 0xFFFFFFFFFFFFFFF8;
      v37 = &v30[&v24[-v32] - v25 - 8];
      v38 = &v24[-v32 - 8];
      v39 = v32 - (v26 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v40 = *(_QWORD *)v38;
        v38 -= 8;
        *v37-- = v40;
        v39 += 8;
      }
      while (v39);
      v24 -= v26 & 0xFFFFFFFFFFFFFFF8;
      if (v26 == (v26 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_63;
LABEL_61:
      v41 = v31 - 1;
      do
      {
        v42 = *--v24;
        *v41-- = v42;
      }
      while (v24 != v25);
      goto LABEL_63;
    }
    v30 = operator new(v29);
    v31 = &v30[v26];
    v30[v26] = v23;
    v17 = (uint64_t)&v30[v26 + 1];
    if (v24 != v25)
      goto LABEL_45;
LABEL_50:
    *(_QWORD *)__p = v31;
    *(_QWORD *)&__p[16] = &v30[v29];
    if (v24)
      goto LABEL_64;
LABEL_9:
    *(_QWORD *)&__p[8] = v17;
    ++v12;
  }
  while (v12 != (unsigned __int8 **)v13);
  v43 = *(_BYTE **)__p;
  v44 = v414.i64[1];
  v45 = (uint64_t *)v414.i64[0];
  memset(v438, 0, 24);
  v46 = v414.i64[1] - v414.i64[0];
  if (v414.i64[1] == v414.i64[0])
  {
LABEL_277:
    v68 = 0;
    v67 = 0;
    goto LABEL_286;
  }
  v381 = *(_BYTE **)__p;
  if ((unint64_t)v46 >= 0x5555555555555551)
    sub_22316E078();
  v47 = v46 >> 3;
  *(_QWORD *)v438 = operator new(24 * (v46 >> 3));
  *(_QWORD *)&v438[8] = *(_QWORD *)v438;
  *(_QWORD *)&v438[16] = *(_QWORD *)v438 + 24 * v47;
  do
  {
    sub_223736F20(a1, *v45, a2, (void **)__p);
    v51 = *(char **)&v438[8];
    if (*(_QWORD *)&v438[8] < *(_QWORD *)&v438[16])
    {
      **(_QWORD **)&v438[8] = 0;
      *((_QWORD *)v51 + 1) = 0;
      *((_QWORD *)v51 + 2) = 0;
      *(_OWORD *)v51 = *(_OWORD *)__p;
      *((_QWORD *)v51 + 2) = *(_QWORD *)&__p[16];
      *(_QWORD *)&v438[8] = v51 + 24;
    }
    else
    {
      v52 = *(char **)v438;
      v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v438[8] - *(_QWORD *)v438) >> 3);
      v54 = v53 + 1;
      if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v438[16] - *(_QWORD *)v438) >> 3) > v54)
        v54 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v438[16] - *(_QWORD *)v438) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v438[16] - *(_QWORD *)v438) >> 3) >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v54;
      if (v55 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v56 = (char *)operator new(24 * v55);
      v57 = &v56[24 * v53];
      *(_OWORD *)v57 = *(_OWORD *)__p;
      *((_QWORD *)v57 + 2) = *(_QWORD *)&__p[16];
      memset(__p, 0, 24);
      v58 = v57 + 24;
      if (v51 == v52)
      {
        *(_QWORD *)v438 = v57;
        *(_QWORD *)&v438[8] = v57 + 24;
        *(_QWORD *)&v438[16] = &v56[24 * v55];
      }
      else
      {
        do
        {
          v59 = *(_OWORD *)(v51 - 24);
          v51 -= 24;
          *(_OWORD *)(v57 - 24) = v59;
          v57 -= 24;
          *((_QWORD *)v57 + 2) = *((_QWORD *)v51 + 2);
          *(_QWORD *)v51 = 0;
          *((_QWORD *)v51 + 1) = 0;
          *((_QWORD *)v51 + 2) = 0;
        }
        while (v51 != v52);
        v60 = *(char **)&v438[8];
        v51 = *(char **)v438;
        *(_QWORD *)v438 = v57;
        *(_QWORD *)&v438[8] = v58;
        *(_QWORD *)&v438[16] = &v56[24 * v55];
        if (v60 != v51)
        {
          v61 = v60;
          do
          {
            v63 = (void *)*((_QWORD *)v61 - 3);
            v61 -= 24;
            v62 = v63;
            if (v63)
            {
              *((_QWORD *)v60 - 2) = v62;
              operator delete(v62);
            }
            v60 = v61;
          }
          while (v61 != v51);
        }
      }
      if (v51)
        operator delete(v51);
      *(_QWORD *)&v438[8] = v58;
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
    }
    ++v45;
  }
  while (v45 != (uint64_t *)v44);
  v65 = v414.i64[1];
  v64 = (float32x2_t **)v414.i64[0];
  v376 = *(_QWORD **)&v438[8];
  v66 = *(_QWORD **)v438;
  v412 = *(_QWORD *)v438;
  v413 = *(_OWORD *)&v438[8];
  if (v414.i64[0] == v414.i64[1])
  {
    v67 = 0;
    v68 = 0;
    v71 = a4;
    v43 = v381;
    goto LABEL_279;
  }
  v377 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70.i32[3] = 0;
  v71 = a4;
  v43 = v381;
  v382 = *(_QWORD **)v438;
  v378 = v414.i64[1];
  while (2)
  {
    while (2)
    {
      v396 = (char *)&v66[3 * v69];
      v394 = (__int128 **)(v396 + 8);
      if (*(_QWORD *)v396 == *((_QWORD *)v396 + 1))
      {
        v72 = v69 + 1;
        goto LABEL_93;
      }
      v72 = (v414.i64[1] - v414.i64[0]) >> 3;
      v383 = v69;
      v73 = v69 + 1;
      if (v69 + 1 == v72)
      {
LABEL_93:
        ++v64;
        v69 = v72;
        if (v64 == (float32x2_t **)v65)
          goto LABEL_279;
        continue;
      }
      break;
    }
    v400 = (v414.i64[1] - v414.i64[0]) >> 3;
    v379 = v69 + 1;
    v380 = v64;
    v403 = *v64;
    v398 = *v64 + 15;
    while (2)
    {
      v74 = *(_QWORD *)(v414.i64[0] + 8 * v73);
      if (v43[v69] || v43[v73])
      {
        v50.i32[0] = v403[17].i32[1];
        *(float32x2_t *)v49.i8 = *(float32x2_t *)((char *)v403 + 132);
        v75 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1);
        v70.i64[0] = *(_QWORD *)(v74 + 132);
        v76 = v49;
        v76.i32[2] = v50.i32[0];
        v77 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1);
        v78 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v70.i8), v77, *(float32x2_t *)v49.i8, 1);
        v49.i32[0] = *(_DWORD *)(v74 + 140);
        v79 = vmla_f32(v78, *(float32x2_t *)v49.i8, v50).f32[0];
        v80 = v79 + -0.96593;
        if (v79 < 0.96593)
          v80 = 0.96593 - v79;
        v81 = v80 <= 0.000001;
        if (v79 >= 0.96593)
          v81 = 1;
        v82 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v76.i8), v75, v75), v50, v50);
        if (v82.f32[0] != 1.0)
        {
          v83 = v82.f32[0] + -1.0;
          if (v82.f32[0] < 1.0)
            v83 = 1.0 - v82.f32[0];
          if (v83 > 0.000001)
            v76 = (int8x16_t)vmulq_n_f32((float32x4_t)v76, 1.0 / sqrtf(v82.f32[0]));
        }
        v406 = *(_QWORD *)(v414.i64[0] + 8 * v73);
        v84 = (float32x2_t *)(v74 + 120);
        v50 = *v398;
        v82.i32[0] = v398[1].i32[0];
        v85 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 1);
        v86 = (float32x2_t)vextq_s8(v76, v76, 8uLL).u64[0];
        v75.i32[0] = *(_DWORD *)(v74 + 128);
        if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v84, *(float32x2_t *)v76.i8), v85, *v84, 1), v86, v75), vmla_f32(vmla_lane_f32(vmul_f32(*v398, *(float32x2_t *)v76.i8), v85, *v398, 1), v86, v82)).f32[0]) <= 1.0)
        {
          v70.i32[2] = *(_DWORD *)(v74 + 140);
          v87 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), v77, v77), *(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8).f32[0];
          if (v87 != 1.0)
          {
            v88 = v87 + -1.0;
            if (v87 < 1.0)
              v88 = 1.0 - v87;
            if (v88 > 0.000001)
              v70 = (int8x16_t)vmulq_n_f32((float32x4_t)v70, 1.0 / sqrtf(v87));
          }
          *(int32x2_t *)v48.i8 = vdup_lane_s32((int32x2_t)v50, 1);
          v49 = vextq_s8(v70, v70, 8uLL);
          v50 = vmla_f32(vmla_lane_f32(vmul_f32(v50, *(float32x2_t *)v70.i8), *(float32x2_t *)v48.i8, *(float32x2_t *)v70.i8, 1), *(float32x2_t *)v49.i8, v82);
          v48.i32[0] = 1.0;
          if (fabsf(vsub_f32(v50, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v74 + 120), *(float32x2_t *)v70.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v74 + 120), 1), *(float32x2_t *)v70.i8, 1), *(float32x2_t *)v49.i8, v75)).f32[0]) > 1.0)v81 = 0;
          if (v81)
          {
            v89 = (_QWORD *)v66[3 * v73];
            v388 = (char *)&v66[3 * v73];
            v90 = (_QWORD *)*((_QWORD *)v388 + 1);
            v386 = (__int128 **)(v388 + 8);
            if (v89 == v90)
            {
              v71 = a4;
              goto LABEL_99;
            }
            v91 = v67;
            v392 = v68;
            v92 = *(__int128 **)v396;
            v93 = *v394;
            v94 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)*v394 - *(_QWORD *)v396) >> 3);
            v385 = 0xAAAAAAAAAAAAAAABLL * (v90 - v89);
            v95 = v94 - 0x5555555555555555 * (v90 - v89);
            *(_QWORD *)__p = &__p[24];
            *(_OWORD *)&__p[8] = xmmword_224649A20;
            if (v95 >= 0x41)
            {
              if (v95 >> 60)
                sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
              v96 = operator new(8 * v95);
              v97 = v96;
              v98 = *(_BYTE **)__p;
              if (*(_QWORD *)__p && *(_QWORD *)&__p[8])
              {
                memmove(v96, *(const void **)__p, 8 * *(_QWORD *)&__p[8]);
LABEL_126:
                if (&__p[24] != v98)
                  operator delete(v98);
              }
              else if (*(_QWORD *)__p)
              {
                goto LABEL_126;
              }
              *(_QWORD *)__p = v97;
              *(_QWORD *)&__p[16] = v95;
              v43 = v381;
            }
            v103 = v93 == v92;
            v67 = v91;
            if (!v103)
            {
              v99 = (__int128 *)((char *)v92 + 24 * v94);
              do
              {
                v100 = *((_QWORD *)v92 + 2);
                v101 = *(_QWORD *)(v100 + 208);
                v102 = *(_QWORD **)(v100 + 216);
                if ((_QWORD *)v101 != v102)
                {
                  while (1)
                  {
                    v103 = *(_QWORD *)v101 == *(_QWORD *)v92 && *(_QWORD *)(v101 + 8) == *((_QWORD *)v92 + 1);
                    if (v103)
                      break;
                    v101 += 424;
                    if ((_QWORD *)v101 == v102)
                    {
                      v101 = (unint64_t)v102;
                      break;
                    }
                  }
                }
                v104 = v101 & 0xFFFFFFFFFFFFFF00;
                if ((_QWORD *)v101 == v102)
                  v101 = 0;
                else
                  v101 = v101;
                v105 = v101 | v104;
                v435[0].i64[0] = v105;
                v106 = (_BYTE *)(*(_QWORD *)__p + 8 * *(_QWORD *)&__p[8]);
                if (*(_QWORD *)&__p[8] == *(_QWORD *)&__p[16])
                {
                  sub_2236BBA44(v438, (uint64_t)__p, v106, v435);
                }
                else
                {
                  *(_QWORD *)v106 = v105;
                  ++*(_QWORD *)&__p[8];
                }
                v92 = (__int128 *)((char *)v92 + 24);
              }
              while (v92 != v99);
            }
            v107 = &v89[3 * v385];
            v66 = v382;
            do
            {
              v108 = v89[2];
              v109 = *(_QWORD *)(v108 + 208);
              v110 = *(_QWORD **)(v108 + 216);
              if ((_QWORD *)v109 != v110)
              {
                while (*(_QWORD *)v109 != *v89 || *(_QWORD *)(v109 + 8) != v89[1])
                {
                  v109 += 424;
                  if ((_QWORD *)v109 == v110)
                  {
                    v109 = (unint64_t)v110;
                    break;
                  }
                }
              }
              v112 = v109 & 0xFFFFFFFFFFFFFF00;
              if ((_QWORD *)v109 == v110)
                v109 = 0;
              else
                v109 = v109;
              v113 = v109 | v112;
              v435[0].i64[0] = v113;
              v114 = (_BYTE *)(*(_QWORD *)__p + 8 * *(_QWORD *)&__p[8]);
              if (*(_QWORD *)&__p[8] == *(_QWORD *)&__p[16])
              {
                sub_2236BBA44(v438, (uint64_t)__p, v114, v435);
              }
              else
              {
                *(_QWORD *)v114 = v113;
                ++*(_QWORD *)&__p[8];
              }
              v89 += 3;
            }
            while (v89 != v107);
            sub_2236A576C(*(unint64_t *)&__p[8], *(uint64_t **)__p, (uint64_t)v438, (float32x4_t)v48);
            *(_QWORD *)v410 = *(_QWORD *)v438;
            *(_DWORD *)&v410[8] = *(_DWORD *)&v438[8];
            *(_QWORD *)((unint64_t)v410 | 0xC) = *(_QWORD *)&v438[12];
            *(_DWORD *)(((unint64_t)v410 | 0xC) + 8) = *(_DWORD *)&v438[20];
            if (*(_QWORD *)&__p[16] && &__p[24] != *(_BYTE **)__p)
              operator delete(*(void **)__p);
            v115.f32[0] = fabsf(v403[17].f32[1]);
            if (v115.f32[0] <= 0.052336)
              v117 = 2;
            else
              v117 = 4;
            v116.i32[0] = 1065330231;
            if (v115.f32[0] >= 0.99863)
              v118 = 1;
            else
              v118 = v117;
            v120 = sub_223F2B7AC((uint64_t)v398, v118, (float32x4_t *)__p, v115, v116);
            v120.f32[0] = fabsf(*(float *)(v406 + 140));
            if (v120.f32[0] <= 0.052336)
              v121 = 2;
            else
              v121 = 4;
            v119.i32[0] = 1065330231;
            if (v120.f32[0] >= 0.99863)
              v122 = 1;
            else
              v122 = v121;
            v124 = sub_223F2B7AC((uint64_t)v84, v122, (float32x4_t *)v438, v120, v119);
            v124.f32[0] = fabsf(v411);
            if (v124.f32[0] <= 0.052336)
              v125 = 2;
            else
              v125 = 4;
            v123.i32[0] = 1065330231;
            if (v124.f32[0] >= 0.99863)
              v126 = 1;
            else
              v126 = v125;
            sub_223F2B7AC((uint64_t)v410, v126, v435, v124, v123);
            v127 = (int32x4_t)v435[1];
            v128.i64[0] = vzip1q_s32((int32x4_t)v435[0], (int32x4_t)v435[1]).u64[0];
            v129 = (int8x16_t)vnegq_f32(v437);
            v130 = (uint64_t)v403[23];
            *(float32x2_t *)v435[1].f32 = v403[22];
            v435[1].i64[1] = v130;
            v128.i64[1] = v436.u32[0];
            v131 = (int8x16_t)vtrn2q_s32((int32x4_t)v435[0], v127);
            v131.i32[2] = v436.i32[1];
            v132 = (int8x16_t)vzip2q_s32((int32x4_t)v435[0], v127);
            *(float32x2_t *)v133.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v128.f32, *(float *)v129.i32), *(float32x2_t *)v131.i8, *(float32x2_t *)v437.f32, 1), *(float32x2_t *)v132.i8, v437, 2);
            v132.i32[2] = v436.i32[2];
            v127.i32[0] = vdupq_laneq_s32((int32x4_t)v132, 2).u32[0];
            v133.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v436.i8, *(float32x2_t *)v129.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v436.i8, 1), *(float32x2_t *)v437.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v436, v436, 8uLL)).u32[0]);
            v134 = vextq_s8(vextq_s8(v131, v131, 0xCuLL), v132, 8uLL);
            v129.i64[0] = __PAIR64__(v134.u32[0], v131.u32[0]);
            v129.i64[1] = v134.u32[1];
            v135.i64[0] = v134.i64[1];
            v135.i64[1] = v127.u32[0];
            v131.i64[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v128, *(float *)__p), (float32x4_t)v129, *(float32x2_t *)__p, 1), v135, *(float32x4_t *)__p, 2), v133, *(float32x4_t *)__p, 3).u64[0];
            v134.i64[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v128, *(float *)&__p[16]), (float32x4_t)v129, *(float32x2_t *)&__p[16], 1), v135, *(float32x4_t *)&__p[16], 2), v133, *(float32x4_t *)&__p[16], 3).u64[0];
            v127.i64[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v128, v425.f32[0]), (float32x4_t)v129, *(float32x2_t *)v425.f32, 1), v135, v425, 2), v133, v425, 3).u64[0];
            v136 = (float32x2_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v128, *(float *)v438), (float32x4_t)v129, *(float32x2_t *)v438, 1), v135, *(float32x4_t *)v438, 2), v133, *(float32x4_t *)v438, 3).u64[0];
            v137 = (float32x2_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v128, *(float *)&v438[16]), (float32x4_t)v129, *(float32x2_t *)&v438[16], 1), v135, *(float32x4_t *)&v438[16], 2), v133, *(float32x4_t *)&v438[16], 3).u64[0];
            v128.i64[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v128, v440.f32[0]), (float32x4_t)v129, *(float32x2_t *)v440.f32, 1), v135, v440, 2), v133, v440, 3).u64[0];
            v435[0] = *(float32x4_t *)v403[20].f32;
            *(_OWORD *)v433 = *(_OWORD *)(v406 + 160);
            v138 = *(_QWORD *)(v406 + 184);
            *(_QWORD *)&v434 = *(_QWORD *)(v406 + 176);
            *(float32x2_t *)v435[0].f32 = vadd_f32(*(float32x2_t *)v127.i8, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v131.i8, v435[0].f32[0]), *(float32x2_t *)v134.i8, *(float32x2_t *)v435[0].f32, 1));
            *(float32x2_t *)&v435[0].u32[2] = vadd_f32(*(float32x2_t *)v127.i8, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v131.i8, v435[0].f32[2]), *(float32x2_t *)v134.i8, *(float32x2_t *)&v435[0].u32[2], 1));
            *(float32x2_t *)v435[1].f32 = vadd_f32(*(float32x2_t *)v127.i8, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v131.i8, v435[1].f32[0]), *(float32x2_t *)v134.i8, *(float32x2_t *)v435[1].f32, 1));
            *(float32x2_t *)&v435[1].u32[2] = vadd_f32(*(float32x2_t *)v127.i8, vmla_f32(vmul_n_f32(*(float32x2_t *)v131.i8, *(float *)&v130), (float32x2_t)vdup_n_s32(HIDWORD(v130)), *(float32x2_t *)v134.i8));
            v433[0] = (void *)vadd_f32(*(float32x2_t *)v128.f32, vmla_lane_f32(vmul_n_f32(v136, *(float *)v433), v137, (float32x2_t)v433[0], 1));
            v433[1] = (void *)vadd_f32(*(float32x2_t *)v128.f32, vmla_lane_f32(vmul_n_f32(v136, *(float *)&v433[1]), v137, (float32x2_t)v433[1], 1));
            *(float32x2_t *)&v434 = vadd_f32(*(float32x2_t *)v128.f32, vmla_lane_f32(vmul_n_f32(v136, *(float *)&v434), v137, *(float32x2_t *)&v434, 1));
            *((float32x2_t *)&v434 + 1) = vadd_f32(*(float32x2_t *)v128.f32, vmla_f32(vmul_n_f32(v136, *(float *)&v138), (float32x2_t)vdup_n_s32(HIDWORD(v138)), v137));
            v139 = (float32x4_t *)operator new(0x20uLL);
            v432 = v139 + 2;
            v140 = v435[1];
            *v139 = v435[0];
            v139[1] = v140;
            v430 = v139;
            i64 = v139[2].i64;
            v419 = 0;
            v420 = 0;
            v418 = 0;
            v418 = operator new(0x18uLL);
            v419 = (unsigned int *)v418;
            v420 = (char *)v418 + 24;
            v419 = (unsigned int *)sub_2236B97AC((uint64_t)&v420, (uint64_t)&v430, (uint64_t)v433, v418);
            v141 = operator new(0x20uLL);
            v429 = v141 + 2;
            v142 = v434;
            *v141 = *(_OWORD *)v433;
            v141[1] = v142;
            v427 = v141;
            v428 = v141 + 2;
            v416 = 0;
            v417 = 0;
            v415 = 0;
            v415 = operator new(0x18uLL);
            v416 = (float32x4_t *)v415;
            v417 = (char *)v415 + 24;
            v416 = (float32x4_t *)sub_2236B97AC((uint64_t)&v417, (uint64_t)&v427, (uint64_t)&v430, v415);
            sub_22376852C((float32x2_t ***)&v418, (float32x2_t ***)&v415, (uint64_t)&v421);
            v145 = (unsigned int *)v421;
            v146 = v422;
            if (v421)
            {
              v147 = v421;
              if (v421 != v422)
              {
                v148 = v422;
                v149 = v422;
                do
                {
                  v151 = (void *)*((_QWORD *)v149 - 3);
                  v149 -= 6;
                  v150 = v151;
                  if (v151)
                  {
                    *((_QWORD *)v148 - 2) = v150;
                    operator delete(v150);
                  }
                  v148 = v149;
                }
                while (v149 != v145);
                v147 = v421;
              }
              v422 = v145;
              operator delete(v147);
            }
            v152 = (float32x4_t *)v415;
            if (v415)
            {
              v153 = v416;
              v154 = v415;
              if (v416 != v415)
              {
                v155 = v416;
                do
                {
                  v157 = (void *)v155[-2].i64[1];
                  v155 = (float32x4_t *)((char *)v155 - 24);
                  v156 = v157;
                  if (v157)
                  {
                    v153[-1].i64[0] = (uint64_t)v156;
                    operator delete(v156);
                  }
                  v153 = v155;
                }
                while (v155 != v152);
                v154 = v415;
              }
              v416 = v152;
              operator delete(v154);
            }
            if (v427)
            {
              v428 = v427;
              operator delete(v427);
            }
            v158 = (unsigned int *)v418;
            if (v418)
            {
              v159 = v419;
              v160 = v418;
              if (v419 != v418)
              {
                v161 = v419;
                do
                {
                  v163 = (void *)*((_QWORD *)v161 - 3);
                  v161 -= 6;
                  v162 = v163;
                  if (v163)
                  {
                    *((_QWORD *)v159 - 2) = v162;
                    operator delete(v162);
                  }
                  v159 = v161;
                }
                while (v161 != v158);
                v160 = v418;
              }
              v419 = v158;
              operator delete(v160);
            }
            if (v430)
            {
              i64 = v430;
              operator delete(v430);
            }
            if (v145 == v146
              || !sub_2236B687C(0xAAAAAAAAAAAAAAABLL * (((uint64_t)*v394 - *(_QWORD *)v396) >> 3), *(__int128 **)v396, (float32x2_t *)v410, *(double *)v70.i64, v48, v49, v143, v50, v144)|| !sub_2236B687C(0xAAAAAAAAAAAAAAABLL * (((uint64_t)*v386 - *(_QWORD *)v388) >> 3), *(__int128 **)v388, (float32x2_t *)v410, *(double *)v70.i64, v48, v49, v164, v50, v165))
            {
              v68 = v392;
              goto LABEL_218;
            }
            v166 = *(__int128 **)v396;
            v167 = *v394;
            v168 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)*v394 - *(_QWORD *)v396) >> 3);
            v169 = *(__int128 **)v388;
            v389 = *v386;
            v170 = 0xAAAAAAAAAAAAAAABLL * (((char *)*v386 - (char *)v169) >> 3);
            kdebug_trace();
            v176 = &off_24EC573D0;
            *(_QWORD *)v438 = &off_24EC573D0;
            *(_QWORD *)&v438[24] = v438;
            if (v167 == v166)
            {
              v209 = 0;
            }
            else
            {
              v387 = (__int128 *)((char *)v166 + 24 * v168);
              while (1)
              {
                v177 = (float32x2_t *)*((_QWORD *)v166 + 2);
                v178 = (_QWORD *)v177[26];
                v179 = (_QWORD *)v177[27];
                v180 = v178;
                if (v178 != v179)
                {
                  v180 = (_QWORD *)v177[26];
                  while (*v180 != *(_QWORD *)v166 || v180[1] != *((_QWORD *)v166 + 1))
                  {
                    v180 += 53;
                    if (v180 == v179)
                      goto LABEL_483;
                  }
                }
                if (v180 == v179)
LABEL_483:
                  sub_22324A974();
                v182 = v177[18];
                v171.i32[0] = v177[19].i32[0];
                v183 = v177[20];
                v173.i32[0] = v177[21].i32[0];
                v184 = v177[22];
                v175.i32[0] = v177[23].i32[0];
                *(float32x2_t *)v185.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v182, *(float *)v410), v183, *(float32x2_t *)v410, 1), v184, *(float32x4_t *)v410, 2);
                v186 = (float32x4_t)vextq_s8(*(int8x16_t *)v410, *(int8x16_t *)v410, 8uLL);
                v187 = vmla_f32(vmla_lane_f32(vmul_f32(v171, *(float32x2_t *)v410), *(float32x2_t *)v173.i8, *(float32x2_t *)v410, 1), *(float32x2_t *)v186.f32, v175);
                *(float32x2_t *)&v185.u32[2] = v187;
                *(float32x2_t *)v186.f32 = v177[24];
                v186.i32[2] = v177[25].i32[0];
                v188 = vaddq_f32(v185, v186);
                v187.f32[0] = v411;
                v171 = vmla_f32(vmla_lane_f32(vmul_f32(v171, *(float32x2_t *)&v410[12]), *(float32x2_t *)v173.i8, *(float32x2_t *)&v410[12], 1), v187, v175);
                v435[0].i32[2] = v188.i32[2];
                v435[0].i64[0] = v188.i64[0];
                v435[1].i32[1] = v171.i32[0];
                *(float32x2_t *)((char *)&v435[0].u64[1] + 4) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v182, *(float *)&v410[12]), v183, *(float32x2_t *)&v410[12], 1), v184, v411);
                if (v389 != v169)
                  break;
LABEL_219:
                v166 = (__int128 *)((char *)v166 + 24);
                if (v166 == v387)
                {
                  v209 = 0;
                  goto LABEL_244;
                }
              }
              v189 = &v178[53 * (29 * (((_DWORD)v180 - (_DWORD)v178) >> 3)) + 33];
              v190 = v169;
              while (1)
              {
                v191 = (float32x4_t *)*((_QWORD *)v190 + 2);
                v192 = (_QWORD *)v191[13].i64[0];
                v193 = (_QWORD *)v191[13].i64[1];
                v194 = v192;
                if (v192 != v193)
                {
                  v194 = (_QWORD *)v191[13].i64[0];
                  while (*v194 != *(_QWORD *)v190 || v194[1] != *((_QWORD *)v190 + 1))
                  {
                    v194 += 53;
                    if (v194 == v193)
                      goto LABEL_479;
                  }
                }
                if (v194 == v193)
LABEL_479:
                  sub_22324A974();
                v196 = v177[18];
                v197.i32[0] = v177[19].i32[0];
                *(float32x2_t *)v172.f32 = v177[20];
                *(float32x2_t *)v174.f32 = v177[22];
                v173.i32[0] = v177[23].i32[0];
                *(float32x2_t *)v188.f32 = v177[24];
                v188.i32[2] = v177[25].i32[0];
                v198 = (int8x16_t)vnegq_f32(v188);
                v199 = v191[9];
                v200 = v191[10];
                v201 = vmulq_n_f32(v199, v197.f32[0]);
                v197.i32[1] = v177[21].i32[0];
                v202 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v196, *(int32x2_t *)v172.f32), *(float *)v198.i32), (float32x2_t)vzip2_s32((int32x2_t)v196, *(int32x2_t *)v172.f32), *(float32x2_t *)v188.f32, 1), v197, v188, 2);
                v203 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v198.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v174.f32, 1), *(float32x2_t *)v188.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL), *(float32x2_t *)v173.i8);
                v204 = v191[11];
                v205 = v191[12];
                v206 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v199, v196.f32[0]), v200, v172.f32[0]), v204, v174.f32[0]), (float32x4_t)0, v205);
                v207 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v199, v196, 1), v200, *(float32x2_t *)v172.f32, 1), v204, *(float32x2_t *)v174.f32, 1), (float32x4_t)0, v205);
                v208 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v201, v200, v177[21].f32[0]), v204, *(float *)v173.i32), (float32x4_t)0, v205);
                *(float32x4_t *)__p = v206;
                *(int8x16_t *)&__p[16] = v207;
                v424 = v208;
                v425 = vaddq_f32(v205, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v199, v202.f32[0]), v200, v202, 1), v204, v203.f32[0]));
                v207.i32[0] = 1045220557;
                if (sub_2237934F4(v189, (uint64_t)&v192[53* (29* (((_DWORD)v194 - (_DWORD)v192) >> 3))+ 33], v177 + 6, (uint64_t)&v191[3], (uint64_t)v435, (float32x2_t *)__p, v207, (int32x4_t)v425, v172, v173, v174, v203, v204, *(double *)v205.i64))break;
                v190 = (__int128 *)((char *)v190 + 24);
                if (v190 == (__int128 *)((char *)v169 + 24 * v170))
                  goto LABEL_219;
              }
              v209 = 1;
LABEL_244:
              v43 = v381;
              if (!*(_QWORD *)&v438[24])
                sub_223198474();
              v176 = **(uint64_t (****)())&v438[24];
            }
            v176[6]();
            v210 = *(_QWORD **)&v438[24];
            v69 = v383;
            v211 = v406;
            if (*(_BYTE **)&v438[24] == v438)
            {
              v210 = v438;
              v212 = 4;
LABEL_251:
              (*(void (**)(void))(*v210 + 8 * v212))();
              v69 = v383;
              v211 = v406;
            }
            else if (*(_QWORD *)&v438[24])
            {
              v212 = 5;
              goto LABEL_251;
            }
            if (v209)
            {
              v68 = v392;
              if (v67 < v377)
              {
                v71 = a4;
                v67->i64[0] = (uint64_t)v403;
                v67->i64[1] = v211;
                ++v67;
                goto LABEL_99;
              }
              v213 = v67 - v392;
              v214 = v213 + 1;
              if ((unint64_t)(v213 + 1) >> 60)
                sub_22316E078();
              if (((char *)v377 - (char *)v392) >> 3 > v214)
                v214 = ((char *)v377 - (char *)v392) >> 3;
              if ((unint64_t)((char *)v377 - (char *)v392) >= 0x7FFFFFFFFFFFFFF0)
                v215 = 0xFFFFFFFFFFFFFFFLL;
              else
                v215 = v214;
              if (v215 >> 60)
                sub_223174E94();
              v216 = (char *)operator new(16 * v215);
              v217 = (int8x16_t *)&v216[16 * v213];
              v217->i64[0] = (uint64_t)v403;
              v217->i64[1] = v406;
              if (v67 == v392)
              {
                i8 = &v216[16 * v213];
                v219 = v392;
                v377 = (int8x16_t *)&v216[16 * v215];
                v67 = v217 + 1;
                if (v392)
                  goto LABEL_266;
              }
              else
              {
                v218 = (int8x16_t *)&v216[16 * v213];
                v219 = v392;
                do
                {
                  i8 = v218[-1].i8;
                  v70 = v67[-1];
                  v218[-1] = v70;
                  --v67;
                  --v218;
                }
                while (v67 != v392);
                v377 = (int8x16_t *)&v216[16 * v215];
                v67 = v217 + 1;
                if (v392)
LABEL_266:
                  operator delete(v219);
              }
              v68 = (int8x16_t *)i8;
LABEL_218:
              v71 = a4;
              v69 = v383;
              goto LABEL_99;
            }
            v68 = v392;
          }
        }
        v71 = a4;
      }
LABEL_99:
      if (++v73 != v400)
        continue;
      break;
    }
    v65 = v378;
    v64 = v380 + 1;
    v69 = v379;
    if (v380 + 1 != (float32x2_t **)v378)
      continue;
    break;
  }
LABEL_279:
  if (v66)
  {
    v222 = v68;
    v223 = v376;
    if (v376 != v66)
    {
      v224 = v376;
      do
      {
        v226 = (void *)*(v224 - 3);
        v224 -= 3;
        v225 = v226;
        if (v226)
        {
          *(v223 - 2) = v225;
          operator delete(v225);
        }
        v223 = v224;
      }
      while (v224 != v66);
    }
    operator delete(v66);
    v68 = v222;
LABEL_286:
    v71 = a4;
  }
  v393 = v68;
  if (v43)
  {
    operator delete(v43);
    v68 = v393;
  }
  if (v414.i64[0])
  {
    v414.i64[1] = v414.i64[0];
    operator delete((void *)v414.i64[0]);
    v68 = v393;
  }
  if (v68 == v67)
  {
    *v71 = 0;
    v71[1] = 0;
    v71[2] = 0;
    if (v68)
      goto LABEL_477;
    return;
  }
  *(_QWORD *)v438 = v438;
  *(_QWORD *)&v438[8] = v438;
  *(_OWORD *)&v438[16] = 0u;
  v439 = 0u;
  v440.i64[0] = operator new();
  memset(v435, 0, sizeof(v435));
  v436.i32[0] = 1065353216;
  v227 = (__int128 **)v393;
  v415 = v438;
  v416 = v435;
  v407 = (__int128 **)v67;
  while (2)
  {
    v229 = sub_2236B94AC((uint64_t)&v415, *v227);
    v230 = sub_2236B94AC((uint64_t)&v415, v227[1]);
    v231 = v230;
    if (v229 <= v230)
      v232 = v230;
    else
      v232 = v229;
    v233 = *(char **)&v438[24];
    v234 = (char *)v439;
    v235 = v439 - *(_QWORD *)&v438[24];
    v236 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v439 - *(_QWORD *)&v438[24]) >> 3);
    if (v232 >= v236)
    {
      v237 = v232 + 1;
      v238 = v232 + 1 - v236;
      if (v232 + 1 <= v236)
      {
        if (v232 + 1 >= v236)
          goto LABEL_326;
        v248 = *(_QWORD *)&v438[24] + 40 * v237;
        if ((_QWORD)v439 != v248)
        {
          v249 = (char *)v439;
          do
          {
            v251 = (void *)*((_QWORD *)v249 - 5);
            v249 -= 40;
            v250 = v251;
            if (v251)
            {
              *((_QWORD *)v234 - 4) = v250;
              operator delete(v250);
            }
            v234 = v249;
          }
          while (v249 != (char *)v248);
        }
      }
      else
      {
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v439 + 1) - v439) >> 3) < v238)
        {
          if (v237 > 0x666666666666666)
            sub_22316E078();
          v239 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v439 + 1) - *(_QWORD *)&v438[24]) >> 3);
          if (v239 <= v237)
            v239 = v232 + 1;
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v439 + 1) - *(_QWORD *)&v438[24]) >> 3) >= 0x333333333333333)
            v240 = 0x666666666666666;
          else
            v240 = v239;
          if (v240 > 0x666666666666666)
            sub_223174E94();
          v404 = v240;
          v241 = (char *)operator new(40 * v240);
          v242 = &v241[40 * v236];
          bzero(v242, 40 * ((40 * v232 - v235) / 0x28) + 40);
          if (v234 == v233)
          {
            *(_QWORD *)&v438[24] = v242;
            *(_QWORD *)&v439 = &v241[40 * v237];
            *((_QWORD *)&v439 + 1) = &v241[40 * v404];
          }
          else
          {
            do
            {
              v243 = *(_OWORD *)(v234 - 40);
              v234 -= 40;
              *(_OWORD *)(v242 - 40) = v243;
              v242 -= 40;
              *((_QWORD *)v242 + 2) = *((_QWORD *)v234 + 2);
              *(_QWORD *)v234 = 0;
              *((_QWORD *)v234 + 1) = 0;
              *((_QWORD *)v234 + 2) = 0;
              *(_OWORD *)(v242 + 24) = *(_OWORD *)(v234 + 24);
            }
            while (v234 != v233);
            v234 = *(char **)&v438[24];
            v244 = (char *)v439;
            *(_QWORD *)&v438[24] = v242;
            *(_QWORD *)&v439 = &v241[40 * v237];
            *((_QWORD *)&v439 + 1) = &v241[40 * v404];
            if (v244 != v234)
            {
              v245 = v244;
              do
              {
                v247 = (void *)*((_QWORD *)v245 - 5);
                v245 -= 40;
                v246 = v247;
                if (v247)
                {
                  *((_QWORD *)v244 - 4) = v246;
                  operator delete(v246);
                }
                v244 = v245;
              }
              while (v245 != v234);
            }
          }
          if (v234)
            operator delete(v234);
          goto LABEL_326;
        }
        v248 = v439 + 40 * v238;
        bzero((void *)v439, 40 * ((40 * v232 - v235) / 0x28) + 40);
      }
      *(_QWORD *)&v439 = v248;
    }
LABEL_326:
    v252 = (uint64_t *)operator new(0x28uLL);
    v252[2] = v229;
    v252[3] = v231;
    v253 = *(_QWORD *)v438;
    *v252 = *(_QWORD *)v438;
    v252[1] = (uint64_t)v438;
    *(_QWORD *)(v253 + 8) = v252;
    *(_QWORD *)v438 = v252;
    ++*(_QWORD *)&v438[16];
    *(_QWORD *)__p = v231;
    *(_QWORD *)&__p[8] = v252;
    v433[0] = &unk_24EC574F0;
    sub_2236BBCA8((char **)(*(_QWORD *)&v438[24] + 40 * v229), __p);
    if (v254)
    {
      *(_QWORD *)__p = v229;
      *(_QWORD *)&__p[8] = v252;
      v433[0] = &unk_24EC574F0;
      sub_2236BBCA8((char **)(*(_QWORD *)&v438[24] + 40 * v231), __p);
    }
    else
    {
      v228 = *v252;
      *(_QWORD *)(v228 + 8) = v252[1];
      *(_QWORD *)v252[1] = v228;
      --*(_QWORD *)&v438[16];
      operator delete(v252);
    }
    v227 += 2;
    if (v227 != v407)
      continue;
    break;
  }
  v432 = 0;
  v430 = 0;
  i64 = 0;
  if ((_QWORD)v439 == *(_QWORD *)&v438[24])
  {
    v303 = 0;
    v433[1] = 0;
    v433[0] = 0;
    *(_QWORD *)&v434 = 0;
    goto LABEL_415;
  }
  v255 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v439 - *(_QWORD *)&v438[24]) >> 3);
  if (v255 >> 61)
    sub_22367C394();
  v256 = 0xCCCCCCCCCCCCCCDLL * ((uint64_t)(v439 - *(_QWORD *)&v438[24]) >> 3);
  v257 = operator new(v256 * 8);
  v430 = v257;
  v432 = (float32x4_t *)&v257[v255];
  bzero(v257, 8 * v255);
  v397 = &v257[v256];
  i64 = &v257[v256];
  v258 = (void *)operator new[]();
  v418 = v258;
  v259 = (unsigned int *)operator new();
  *((_QWORD *)v259 + 1) = 0x100000001;
  *(_QWORD *)v259 = &off_24EC57500;
  *((_QWORD *)v259 + 2) = v258;
  v419 = v259;
  if ((_QWORD)v439 == *(_QWORD *)&v438[24])
  {
    v262 = -1;
LABEL_385:
    v304 = v259 + 2;
    do
    {
      v305 = __ldaxr(v304);
      v306 = v305 - 1;
    }
    while (__stlxr(v306, v304));
    if (!v306)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v259 + 16))(v259);
      v307 = v259 + 3;
      do
      {
        v308 = __ldaxr(v307);
        v309 = v308 - 1;
      }
      while (__stlxr(v309, v307));
      if (!v309)
        (*(void (**)(unsigned int *))(*(_QWORD *)v259 + 24))(v259);
    }
    goto LABEL_392;
  }
  v260 = ((_QWORD)v439 - *(_QWORD *)&v438[24]) / 40;
  bzero(v258, 4 * v260);
  v261 = 0;
  v262 = -1;
  v399 = v257;
  v390 = v260;
  do
  {
    v263 = v418;
    if (!*((_DWORD *)v418 + v261))
    {
      v264 = v419;
      v421 = v418;
      v422 = v419;
      if (v419)
      {
        v265 = v419 + 2;
        do
          v266 = __ldxr(v265);
        while (__stxr(v266 + 1, v265));
      }
      v391 = v264;
      ++v262;
      v433[1] = 0;
      v433[0] = 0;
      *(_QWORD *)&v434 = 0;
      v267 = v263;
      v263[v261] = 1;
      v257[v261] = v262;
      v268 = (uint64_t *)(*(_QWORD *)&v438[24] + 40 * v261);
      v270 = *v268;
      v269 = v268[1];
      *(_QWORD *)__p = v261;
      __p[8] = 0;
      v424.i64[1] = v270;
      v425.i64[0] = v261;
      v425.i64[1] = v269;
      v426 = v261;
      v395 = v261;
      v271 = sub_2236BBE80(v433, (uint64_t)__p);
      v433[1] = v271;
      v272 = v267;
      v401 = v262;
      if (v433[0] != v271)
      {
        while (1)
        {
          v280 = v271 - 72;
          v279 = *((_QWORD *)v271 - 9);
          if (*(v271 - 64))
            *(v271 - 64) = 0;
          v281 = (uint64_t *)*((_QWORD *)v271 - 4);
          v282 = *((_QWORD *)v271 - 3);
          v284 = (uint64_t *)*((_QWORD *)v271 - 2);
          v283 = *((_QWORD *)v271 - 1);
          v433[1] = v271 - 72;
          if (v281 != v284)
            break;
LABEL_348:
          v272[v279] = 4;
          v271 = v280;
          if (v433[0] == v280)
            goto LABEL_338;
        }
        while (2)
        {
          while (1)
          {
            v285 = *v281;
            if (!v272[*v281])
              break;
            v281 += 2;
            if (v281 == v284)
              goto LABEL_348;
          }
          v286 = v281[1] + 32;
          v287 = v281 + 2;
          if ((unint64_t)v280 < (unint64_t)v434)
          {
            *(_QWORD *)v280 = v279;
            *((_QWORD *)v280 + 2) = v282;
            *((_QWORD *)v280 + 3) = v285;
            v280[8] = 1;
            *((_QWORD *)v280 + 4) = v286;
            *((_QWORD *)v280 + 5) = v287;
            *((_QWORD *)v280 + 6) = v282;
            *((_QWORD *)v280 + 7) = v284;
            v288 = v280 + 72;
            *((_QWORD *)v280 + 8) = v283;
            goto LABEL_375;
          }
          v289 = (char *)v433[0];
          v290 = 0x8E38E38E38E38E39 * ((v280 - (char *)v433[0]) >> 3);
          v291 = v290 + 1;
          if (v290 + 1 > 0x38E38E38E38E38ELL)
            sub_22316E078();
          if (0x1C71C71C71C71C72 * ((uint64_t)(v434 - (unint64_t)v433[0]) >> 3) > v291)
            v291 = 0x1C71C71C71C71C72 * ((uint64_t)(v434 - (unint64_t)v433[0]) >> 3);
          if (0x8E38E38E38E38E39 * ((uint64_t)(v434 - (unint64_t)v433[0]) >> 3) >= 0x1C71C71C71C71C7)
            v292 = 0x38E38E38E38E38ELL;
          else
            v292 = v291;
          if (v292 > 0x38E38E38E38E38ELL)
            sub_223174E94();
          v293 = v281[1] + 32;
          v405 = v283;
          v408 = v272;
          v294 = (char *)operator new(72 * v292);
          v295 = &v294[72 * v290];
          *(_QWORD *)v295 = v279;
          *((_QWORD *)v295 + 2) = v282;
          *((_QWORD *)v295 + 3) = v285;
          v295[8] = 1;
          v296 = &v294[72 * v292];
          *((_QWORD *)v295 + 4) = v293;
          *((_QWORD *)v295 + 5) = v287;
          *((_QWORD *)v295 + 6) = v282;
          *((_QWORD *)v295 + 7) = v284;
          *((_QWORD *)v295 + 8) = v405;
          v288 = v295 + 72;
          if (v280 == v289)
          {
            v433[0] = &v294[72 * v290];
            v433[1] = v295 + 72;
            *(_QWORD *)&v434 = &v294[72 * v292];
            v257 = v399;
            v262 = v401;
            v272 = v408;
            if (v280)
              goto LABEL_374;
          }
          else
          {
            v297 = 0;
            v262 = v401;
            do
            {
              v299 = &v295[v297];
              v300 = &v280[v297];
              *((_QWORD *)v299 - 9) = *(_QWORD *)&v280[v297 - 72];
              *(v299 - 64) = 0;
              if (v280[v297 - 64])
              {
                v301 = *(_OWORD *)(v300 - 56);
                *((_QWORD *)v299 - 5) = *((_QWORD *)v300 - 5);
                *(_OWORD *)(v299 - 56) = v301;
                *(v299 - 64) = 1;
              }
              v298 = *((_OWORD *)v300 - 1);
              *((_OWORD *)v299 - 2) = *((_OWORD *)v300 - 2);
              *((_OWORD *)v299 - 1) = v298;
              v297 -= 72;
            }
            while (&v280[v297] != v289);
            v433[0] = &v295[v297];
            v433[1] = v295 + 72;
            *(_QWORD *)&v434 = v296;
            v272 = v408;
            do
            {
              if (*(v280 - 64))
                *(v280 - 64) = 0;
              v280 -= 72;
            }
            while (v280 != v289);
            v280 = v289;
            v257 = v399;
            if (v280)
            {
LABEL_374:
              operator delete(v280);
              v272 = v421;
            }
          }
LABEL_375:
          v433[1] = v288;
          v272[v285] = 1;
          v257[v285] = v262;
          v302 = *(_QWORD *)&v438[24] + 40 * v285;
          v281 = *(uint64_t **)v302;
          v284 = *(uint64_t **)(v302 + 8);
          v280 = (char *)v288;
          v283 = v285;
          v279 = v285;
          v282 = v285;
          if (*(uint64_t **)v302 == v284)
            goto LABEL_348;
          continue;
        }
      }
LABEL_338:
      if (v271)
      {
        v433[1] = v271;
        operator delete(v271);
      }
      v260 = v390;
      v261 = v395;
      if (v391)
      {
        v273 = v391 + 2;
        do
        {
          v274 = __ldaxr(v273);
          v275 = v274 - 1;
        }
        while (__stlxr(v275, v273));
        if (!v275)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v391 + 16))(v391);
          v276 = v391 + 3;
          do
          {
            v277 = __ldaxr(v276);
            v278 = v277 - 1;
          }
          while (__stlxr(v278, v276));
          if (!v278)
            (*(void (**)(unsigned int *))(*(_QWORD *)v391 + 24))(v391);
        }
      }
    }
    ++v261;
  }
  while (v261 != v260);
  v259 = v419;
  if (v419)
    goto LABEL_385;
LABEL_392:
  v433[1] = 0;
  v433[0] = 0;
  *(_QWORD *)&v434 = 0;
  v310 = __CFADD__(v262, 1);
  v311 = v262 + 1;
  if (!v310)
  {
    if (v311 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v312 = (char *)operator new(24 * v311);
    v433[0] = v312;
    *(_QWORD *)&v434 = &v312[24 * v311];
    bzero(v312, 24 * ((24 * v311 - 24) / 0x18) + 24);
    v433[1] = &v312[24 * ((24 * v311 - 24) / 0x18) + 24];
  }
  v313 = 0;
  do
  {
    while (1)
    {
      v314 = v257;
      v315 = (char **)((char *)v433[0] + 24 * *v257);
      v316 = (_OWORD *)(*(_QWORD *)&v438[24] + 40 * v313 + 24);
      v318 = v315 + 1;
      v317 = v315[1];
      v320 = v315 + 2;
      v319 = (unint64_t)v315[2];
      if ((unint64_t)v317 >= v319)
        break;
      *(_OWORD *)v317 = *v316;
      *v318 = v317 + 16;
      v257 = v314 + 1;
      ++v313;
      if (v314 + 1 == v397)
        goto LABEL_414;
    }
    v321 = *v315;
    v322 = (v317 - *v315) >> 4;
    v323 = v322 + 1;
    if ((unint64_t)(v322 + 1) >> 60)
      sub_22316E078();
    v324 = v319 - (_QWORD)v321;
    if (v324 >> 3 > v323)
      v323 = v324 >> 3;
    if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF0)
      v325 = 0xFFFFFFFFFFFFFFFLL;
    else
      v325 = v323;
    if (v325)
    {
      if (v325 >> 60)
        sub_223174E94();
      v326 = (char *)operator new(16 * v325);
    }
    else
    {
      v326 = 0;
    }
    v327 = &v326[16 * v322];
    *(_OWORD *)v327 = *v316;
    v328 = v327;
    if (v317 != v321)
    {
      do
      {
        *((_OWORD *)v328 - 1) = *((_OWORD *)v317 - 1);
        v328 -= 16;
        v317 -= 16;
      }
      while (v317 != v321);
      v317 = *v315;
    }
    *v315 = v328;
    v329 = v327 + 16;
    *v318 = v327 + 16;
    *v320 = &v326[16 * v325];
    if (v317)
      operator delete(v317);
    *v318 = v329;
    v257 = v314 + 1;
    ++v313;
  }
  while (v314 + 1 != v397);
LABEL_414:
  v303 = (__n128 **)v433[0];
LABEL_415:
  v330 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v409 = (__n128 **)v433[1];
  if (v303 == v433[1])
    goto LABEL_449;
  while (2)
  {
    v332 = *v303;
    v331 = v303[1];
    v333 = (char *)v331 - (char *)*v303;
    if ((unint64_t)v333 >= 0x20)
    {
      *(_QWORD *)__p = a1;
      v334 = v333 >> 4;
      if (v333 < 2049)
      {
LABEL_423:
        v337 = 0;
        v335 = 0;
      }
      else
      {
        v335 = v333 >> 4;
        while (1)
        {
          v336 = (__n128 *)operator new(16 * v335, MEMORY[0x24BEDB6B8]);
          if (v336)
            break;
          v11 = v335 > 1;
          v335 >>= 1;
          if (!v11)
            goto LABEL_423;
        }
        v337 = v336;
      }
      sub_2236BAA18(v332, v331, (uint64_t)__p, v334, v337, v335);
      if (v337)
        operator delete(v337);
      v338 = *v303;
      v339 = v303[1];
      v340 = *v303 + 1;
      if (v340 != v339)
      {
        v341 = (_OWORD *)v330[1];
        do
        {
          *(__n128 *)__p = *v340;
          *(__n128 *)&__p[16] = *v338;
          v344 = v330[2];
          if ((unint64_t)v341 < v344)
          {
            v342 = *(_OWORD *)&__p[16];
            *v341 = *(_OWORD *)__p;
            v341[1] = v342;
            v343 = v341 + 2;
          }
          else
          {
            v345 = (_OWORD *)*v330;
            v346 = ((uint64_t)v341 - *v330) >> 5;
            v347 = v346 + 1;
            if ((unint64_t)(v346 + 1) >> 59)
              sub_22316E078();
            v348 = v344 - (_QWORD)v345;
            if (v348 >> 4 > v347)
              v347 = v348 >> 4;
            if ((unint64_t)v348 >= 0x7FFFFFFFFFFFFFE0)
              v349 = 0x7FFFFFFFFFFFFFFLL;
            else
              v349 = v347;
            if (v349)
            {
              if (v349 >> 59)
                sub_223174E94();
              v350 = (char *)operator new(32 * v349);
              v351 = *(_OWORD *)&__p[16];
              v352 = &v350[32 * v346];
              *(_OWORD *)v352 = *(_OWORD *)__p;
              *((_OWORD *)v352 + 1) = v351;
              v353 = (uint64_t)v352;
              if (v341 != v345)
              {
                do
                {
LABEL_443:
                  v355 = *(v341 - 1);
                  *(_OWORD *)(v353 - 32) = *(v341 - 2);
                  *(_OWORD *)(v353 - 16) = v355;
                  v353 -= 32;
                  v341 -= 2;
                }
                while (v341 != v345);
                v341 = v345;
                v356 = &v350[32 * v349];
                v343 = v352 + 32;
                *a4 = v353;
                a4[1] = (uint64_t)(v352 + 32);
                a4[2] = (uint64_t)v356;
                if (!v345)
                  goto LABEL_430;
LABEL_447:
                operator delete(v341);
                goto LABEL_430;
              }
            }
            else
            {
              v350 = 0;
              v354 = *(_OWORD *)&__p[16];
              v352 = (char *)(32 * v346);
              *(_OWORD *)v352 = *(_OWORD *)__p;
              *((_OWORD *)v352 + 1) = v354;
              v353 = 32 * v346;
              if (v341 != v345)
                goto LABEL_443;
            }
            v357 = &v350[32 * v349];
            v343 = v352 + 32;
            *a4 = v353;
            a4[1] = (uint64_t)(v352 + 32);
            a4[2] = (uint64_t)v357;
            if (v341)
              goto LABEL_447;
          }
LABEL_430:
          a4[1] = (uint64_t)v343;
          ++v340;
          v341 = v343;
          v330 = a4;
        }
        while (v340 != v339);
      }
    }
    v303 += 3;
    if (v303 != v409)
      continue;
    break;
  }
  v303 = (__n128 **)v433[0];
LABEL_449:
  if (v303)
  {
    v358 = (__n128 **)v433[1];
    v359 = v303;
    if (v433[1] != v303)
    {
      v360 = (__n128 **)v433[1];
      do
      {
        v362 = *(v360 - 3);
        v360 -= 3;
        v361 = v362;
        if (v362)
        {
          *(v358 - 2) = v361;
          operator delete(v361);
        }
        v358 = v360;
      }
      while (v360 != v303);
      v359 = (__n128 **)v433[0];
    }
    v433[1] = v303;
    operator delete(v359);
  }
  if (v430)
    operator delete(v430);
  v363 = (_QWORD *)v435[1].i64[0];
  if (v435[1].i64[0])
  {
    do
    {
      v364 = (_QWORD *)*v363;
      operator delete(v363);
      v363 = v364;
    }
    while (v364);
  }
  v365 = (void *)v435[0].i64[0];
  v435[0].i64[0] = 0;
  if (v365)
    operator delete(v365);
  if (v440.i64[0])
    MEMORY[0x227684CE8](v440.i64[0], 0xC400A2AC0F1);
  v366 = *(_QWORD *)&v438[24];
  if (*(_QWORD *)&v438[24])
  {
    v367 = v439;
    v368 = *(void **)&v438[24];
    if ((_QWORD)v439 != *(_QWORD *)&v438[24])
    {
      v369 = v439;
      do
      {
        v371 = *(void **)(v369 - 40);
        v369 -= 40;
        v370 = v371;
        if (v371)
        {
          *(_QWORD *)(v367 - 32) = v370;
          operator delete(v370);
        }
        v367 = v369;
      }
      while (v369 != v366);
      v368 = *(void **)&v438[24];
    }
    *(_QWORD *)&v439 = v366;
    operator delete(v368);
  }
  if (*(_QWORD *)&v438[16])
  {
    v372 = *(_QWORD **)&v438[8];
    v373 = *(_QWORD *)v438;
    v374 = **(_QWORD **)&v438[8];
    *(_QWORD *)(v374 + 8) = *(_QWORD *)(*(_QWORD *)v438 + 8);
    **(_QWORD **)(v373 + 8) = v374;
    *(_QWORD *)&v438[16] = 0;
    if (v372 != (_QWORD *)v438)
    {
      do
      {
        v375 = (_BYTE *)v372[1];
        operator delete(v372);
        v372 = v375;
      }
      while (v375 != v438);
    }
  }
  v68 = v393;
  if (v393)
LABEL_477:
    operator delete(v68);
}

void sub_2236B901C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59)
{
  if (a59 && a30 != __p)
    operator delete(__p);
  sub_22317C838(&a42);
  operator delete(a15);
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  if (a31)
  {
    operator delete(a31);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2236B9378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void *v36;

  v36 = *(void **)a36;
  if (*(_QWORD *)a36)
  {
    *(_QWORD *)(a36 + 8) = v36;
    operator delete(v36);
  }
  sub_22317C838(&STACK[0x3D0]);
  if (!STACK[0x3B8])
    JUMPOUT(0x2236B93F8);
  JUMPOUT(0x2236B93ECLL);
}

void sub_2236B9384()
{
  JUMPOUT(0x2236B93F8);
}

void sub_2236B938C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46)
{
  void *v46;

  sub_22317C838(&a42);
  operator delete(v46);
  if (a45)
  {
    a46 = a45;
    operator delete(a45);
  }
  JUMPOUT(0x2236B9408);
}

void sub_2236B9394()
{
  JUMPOUT(0x2236B93F8);
}

void sub_2236B93C8()
{
  JUMPOUT(0x2236B93D4);
}

void sub_2236B941C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,void *a46)
{
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;

  v47 = *(_QWORD *)(v46 - 168);
  if (!v47)
    sub_223198474();
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 48))(v47);
  v48 = *(_QWORD **)(v46 - 168);
  if (v48 == (_QWORD *)(v46 - 192))
  {
    v49 = 4;
    v48 = (_QWORD *)(v46 - 192);
  }
  else
  {
    if (!v48)
      goto LABEL_8;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_8:
  sub_22317C838(&a42);
  operator delete(a15);
  if (a45)
  {
    a46 = a45;
    operator delete(a45);
  }
  JUMPOUT(0x2236B9408);
}

unint64_t sub_2236B94AC(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  unint64_t result;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22342DA5C(*(_QWORD **)(a1 + 8), (uint64_t)a2);
  if (v4)
    return v4[4];
  v6 = *(_QWORD **)a1;
  v26 = *a2;
  v8 = v6[4];
  v7 = v6[5];
  if (v8 >= v7)
  {
    v10 = v6[3];
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - v10) >> 3) + 1;
    if (v11 > 0x666666666666666)
      sub_22316E078();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v10) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x666666666666666)
        sub_223174E94();
      v14 = (char *)operator new(40 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * ((uint64_t)(v8 - v10) >> 3)];
    v16 = &v14[40 * v13];
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
    *(_OWORD *)(v15 + 24) = *a2;
    v9 = v15 + 40;
    if (v8 == v10)
    {
      v6[3] = v15;
      v6[4] = v9;
      v6[5] = v16;
    }
    else
    {
      do
      {
        v17 = v15;
        *((_QWORD *)v15 - 4) = 0;
        *((_QWORD *)v15 - 3) = 0;
        v18 = *(_OWORD *)(v8 - 40);
        v8 -= 40;
        *(_OWORD *)(v15 - 40) = v18;
        v15 -= 40;
        *((_QWORD *)v17 - 3) = *(_QWORD *)(v8 + 16);
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_OWORD *)(v15 + 24) = *(_OWORD *)(v8 + 24);
      }
      while (v8 != v10);
      v8 = v6[3];
      v19 = v6[4];
      v6[3] = v15;
      v6[4] = v9;
      v6[5] = v16;
      if (v19 != v8)
      {
        v20 = v19;
        do
        {
          v22 = *(void **)(v20 - 40);
          v20 -= 40;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v19 - 32) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v8);
      }
    }
    if (v8)
      operator delete((void *)v8);
  }
  else
  {
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_OWORD *)(v8 + 24) = v26;
    v9 = (char *)(v8 + 40);
  }
  v6[4] = v9;
  v23 = v6[3];
  v24 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v26 = a2;
  v25 = sub_2236BA6E0(v24, (uint64_t)a2, (uint64_t)&unk_2245BA939, (_OWORD **)&v26);
  result = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v9[-v23] >> 3) - 1;
  v25[4] = result;
  return result;
}

uint64_t *sub_2236B96E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = a1[6];
  if (v2)
    MEMORY[0x227684CE8](v2, 0xC400A2AC0F1);
  v3 = a1[3];
  if (v3)
  {
    v4 = a1[4];
    v5 = (void *)a1[3];
    if (v4 != v3)
    {
      v6 = a1[4];
      do
      {
        v8 = *(void **)(v6 - 40);
        v6 -= 40;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 32) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[3];
    }
    a1[4] = v3;
    operator delete(v5);
  }
  if (a1[2])
  {
    v10 = *a1;
    v9 = (uint64_t *)a1[1];
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    a1[2] = 0;
    if (v9 != a1)
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != a1);
    }
  }
  return a1;
}

_QWORD *sub_2236B97AC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v9 - *(_QWORD *)v6;
      if (v9 != *(_QWORD *)v6)
      {
        if (v11 < 0)
          sub_22316E078();
        v7 = (char *)operator new(v9 - *(_QWORD *)v6);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[8 * (v11 >> 3)];
        v8 = v11 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_2236B9880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236B9894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_2236B98B8(char *a1, __n128 *a2, unint64_t a3, char *a4, uint64_t a5)
{
  __n128 *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  __n128 v29;
  char *v30;
  char *v31;
  char *v32;
  __n128 *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  __n128 *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  __n128 *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 *v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 *v57;
  __n128 v58;

  if (a3 < 2)
    return v29.n128_f64[0];
  v6 = (__n128 *)a1;
  if (a3 != 2)
  {
    if ((uint64_t)a3 <= 128)
    {
      if (a1 == (char *)a2)
        return v29.n128_f64[0];
      v12 = a1 + 8;
      if (a1 + 8 == (char *)a2)
        return v29.n128_f64[0];
      v13 = 0;
      v14 = a1;
LABEL_14:
      v15 = v14;
      v14 = v12;
      v16 = *(_QWORD **)v12;
      v17 = v16[2];
      v18 = *(_QWORD *)v15;
      v19 = *(_QWORD *)(*(_QWORD *)v15 + 16);
      if (v17 == v19)
      {
        if (v16[31] - v16[30] <= *(_QWORD *)(v18 + 248) - *(_QWORD *)(v18 + 240))
          goto LABEL_13;
      }
      else if (v17 >= v19)
      {
        goto LABEL_13;
      }
      *(_QWORD *)v14 = v18;
      if (v15 == a1)
      {
LABEL_11:
        v15 = a1;
        goto LABEL_12;
      }
      v20 = v13;
      while (1)
      {
        v21 = v16[2];
        v22 = *(_QWORD **)&a1[v20 - 8];
        v23 = v22[2];
        if (v21 == v23)
        {
          if (v16[31] - v16[30] <= v22[31] - v22[30])
            goto LABEL_12;
        }
        else if (v21 >= v23)
        {
          v15 = &a1[v20];
LABEL_12:
          *(_QWORD *)v15 = v16;
LABEL_13:
          v12 = v14 + 8;
          v13 += 8;
          if (v14 + 8 == (char *)a2)
            return v29.n128_f64[0];
          goto LABEL_14;
        }
        v15 -= 8;
        *(_QWORD *)&a1[v20] = v22;
        v20 -= 8;
        if (!v20)
          goto LABEL_11;
      }
    }
    v26 = a3 >> 1;
    v27 = &a1[8 * (a3 >> 1)];
    v28 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_2236B98B8(a1, v27, v28, a4, a5);
      sub_2236B98B8(&v6->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
      v29.n128_u64[0] = sub_2236B9FDC(v6, (__n128 *)((char *)v6 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5).n128_u64[0];
      return v29.n128_f64[0];
    }
    sub_2236B9C68(a1, v27, v28, a4);
    v30 = &a4[8 * v26];
    v29.n128_u64[0] = sub_2236B9C68(&v6->n128_i8[8 * (a3 >> 1)], (char *)a2, a3 - (a3 >> 1), v30).n128_u64[0];
    v31 = v30;
    v32 = a4;
    v33 = v6;
    v34 = &a4[8 * a3];
    while (1)
    {
      if (v31 == v34)
      {
        if (v32 == v30)
          return v29.n128_f64[0];
        v43 = &a4[8 * v26] - v32 - 8;
        if (v43 >= 0x38 && (unint64_t)((char *)v6 - v32) >= 0x20)
        {
          v53 = 0;
          v54 = (v43 >> 3) + 1;
          v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
          v44 = &v32[v55];
          v45 = (__n128 *)((char *)v33 + v55);
          v56 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v57 = &v33[v53];
            v29 = *(__n128 *)&v32[v53 * 16];
            v58 = *(__n128 *)&v32[v53 * 16 + 16];
            *v57 = v29;
            v57[1] = v58;
            v53 += 2;
            v56 -= 4;
          }
          while (v56);
          if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
            return v29.n128_f64[0];
        }
        else
        {
          v44 = v32;
          v45 = v33;
        }
        do
        {
          v46 = *(_QWORD *)v44;
          v44 += 8;
          v45->n128_u64[0] = v46;
          v45 = (__n128 *)((char *)v45 + 8);
        }
        while (v44 != v30);
        return v29.n128_f64[0];
      }
      v35 = *(_QWORD *)v31;
      v36 = *(_QWORD *)(*(_QWORD *)v31 + 16);
      v37 = *(_QWORD *)v32;
      v38 = *(_QWORD *)(*(_QWORD *)v32 + 16);
      if (v36 == v38)
      {
        if (*(_QWORD *)(v35 + 248) - *(_QWORD *)(v35 + 240) <= *(_QWORD *)(v37 + 248) - *(_QWORD *)(v37 + 240))
          goto LABEL_37;
LABEL_31:
        v33->n128_u64[0] = v35;
        v33 = (__n128 *)((char *)v33 + 8);
        v31 += 8;
        v6 = (__n128 *)((char *)v6 + 8);
        if (v32 == v30)
          goto LABEL_38;
      }
      else
      {
        if (v36 < v38)
          goto LABEL_31;
LABEL_37:
        v33->n128_u64[0] = v37;
        v33 = (__n128 *)((char *)v33 + 8);
        v32 += 8;
        v6 = (__n128 *)((char *)v6 + 8);
        if (v32 == v30)
        {
LABEL_38:
          if (v31 == v34)
            return v29.n128_f64[0];
          v39 = &a4[8 * a3] - v31 - 8;
          if (v39 < 0x48 || (unint64_t)((char *)v6 - v31) < 0x20)
          {
            v40 = v31;
            v41 = v33;
            do
            {
LABEL_42:
              v42 = *(_QWORD *)v40;
              v40 += 8;
              v41->n128_u64[0] = v42;
              v41 = (__n128 *)((char *)v41 + 8);
            }
            while (v40 != v34);
            return v29.n128_f64[0];
          }
          v47 = 0;
          v48 = (v39 >> 3) + 1;
          v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
          v40 = &v31[v49];
          v41 = (__n128 *)((char *)v33 + v49);
          v50 = v48 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = &v33[v47];
            v29 = *(__n128 *)&v31[v47 * 16];
            v52 = *(__n128 *)&v31[v47 * 16 + 16];
            *v51 = v29;
            v51[1] = v52;
            v47 += 2;
            v50 -= 4;
          }
          while (v50);
          if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_42;
          return v29.n128_f64[0];
        }
      }
    }
  }
  v7 = (_QWORD *)a2[-1].n128_u64[1];
  v8 = v7[2];
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v8 == v10)
  {
    if (v7[31] - v7[30] <= *(_QWORD *)(v9 + 248) - *(_QWORD *)(v9 + 240))
      return v29.n128_f64[0];
  }
  else if (v8 >= v10)
  {
    return v29.n128_f64[0];
  }
  *(_QWORD *)a1 = v7;
  a2[-1].n128_u64[1] = v9;
  return v29.n128_f64[0];
}

__n128 sub_2236B9C68(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  __n128 result;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;

  if (!a3)
    return result;
  v4 = a4;
  v6 = a1;
  if (a3 == 1)
  {
LABEL_29:
    *(_QWORD *)v4 = *(_QWORD *)v6;
    return result;
  }
  if (a3 == 2)
  {
    v8 = (_QWORD *)*((_QWORD *)a2 - 1);
    v9 = v8[2];
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (v9 == v10)
    {
      if (v8[31] - v8[30] > *(_QWORD *)(*(_QWORD *)a1 + 248) - *(_QWORD *)(*(_QWORD *)a1 + 240))
        goto LABEL_28;
    }
    else if (v9 < v10)
    {
LABEL_28:
      *(_QWORD *)a4 = v8;
      v4 = a4 + 8;
      goto LABEL_29;
    }
    v8 = *(_QWORD **)a1;
    v6 = a2 - 8;
    goto LABEL_28;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (a1 == a2)
      return result;
    v11 = a1 + 8;
    *(_QWORD *)a4 = *(_QWORD *)a1;
    if (a1 + 8 == a2)
      return result;
    v12 = 0;
    v13 = a4;
    v14 = (uint64_t *)a4;
LABEL_13:
    while (2)
    {
      v18 = *v14++;
      v17 = v18;
      v19 = *(_QWORD *)v11;
      v20 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      v21 = *(_QWORD *)(v18 + 16);
      if (v20 == v21)
      {
        if (*(_QWORD *)(v19 + 248) - *(_QWORD *)(v19 + 240) <= *(_QWORD *)(v17 + 248) - *(_QWORD *)(v17 + 240))
          goto LABEL_15;
      }
      else if (v20 >= v21)
      {
LABEL_15:
        *v14 = v19;
        v11 += 8;
        v12 += 8;
        v13 = (char *)v14;
        if (v11 == a2)
          return result;
        continue;
      }
      break;
    }
    *((_QWORD *)v13 + 1) = v17;
    v15 = a4;
    if (v13 == a4)
      goto LABEL_12;
    v22 = v12;
    while (1)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      v24 = *(_QWORD **)&a4[v22 - 8];
      v25 = v24[2];
      if (v23 == v25)
      {
        if (*(_QWORD *)(*(_QWORD *)v11 + 248) - *(_QWORD *)(*(_QWORD *)v11 + 240) <= v24[31] - v24[30])
        {
          v15 = &a4[v22];
LABEL_12:
          v16 = *(_QWORD *)v11;
          v11 += 8;
          *(_QWORD *)v15 = v16;
          v12 += 8;
          v13 = (char *)v14;
          if (v11 == a2)
            return result;
          goto LABEL_13;
        }
      }
      else if (v23 >= v25)
      {
        v15 = v13;
        goto LABEL_12;
      }
      v13 -= 8;
      *(_QWORD *)&a4[v22] = v24;
      v22 -= 8;
      if (!v22)
      {
        v15 = a4;
        goto LABEL_12;
      }
    }
  }
  v26 = a3 >> 1;
  v27 = 8 * (a3 >> 1);
  v28 = &a1[v27];
  sub_2236B98B8(a1, &a1[v27], a3 >> 1, a4, a3 >> 1);
  sub_2236B98B8(&v6[v27], a2, a3 - v26, &v4[v27], a3 - v26);
  v30 = v4;
  v31 = v6;
  v32 = &v6[v27];
  do
  {
    while (1)
    {
      if (v32 == a2)
      {
        if (v31 == v28)
          return result;
        v41 = &v6[8 * v26] - v31 - 8;
        if (v41 >= 0x38 && (unint64_t)(v30 - v31) >= 0x20)
        {
          v51 = 0;
          v52 = (v41 >> 3) + 1;
          v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          v42 = &v4[v53];
          v43 = &v31[v53];
          v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v55 = &v4[v51];
            result = *(__n128 *)&v31[v51];
            v56 = *(_OWORD *)&v31[v51 + 16];
            *(__n128 *)v55 = result;
            *((_OWORD *)v55 + 1) = v56;
            v51 += 32;
            v54 -= 4;
          }
          while (v54);
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v42 = v4;
          v43 = v31;
        }
        do
        {
          v44 = *(_QWORD *)v43;
          v43 += 8;
          *(_QWORD *)v42 = v44;
          v42 += 8;
        }
        while (v43 != v28);
        return result;
      }
      v33 = *(_QWORD *)v32;
      v34 = *(_QWORD *)(*(_QWORD *)v32 + 16);
      v35 = *(_QWORD *)v31;
      v36 = *(_QWORD *)(*(_QWORD *)v31 + 16);
      if (v34 == v36)
        break;
      if (v34 >= v36)
        goto LABEL_38;
LABEL_32:
      *(_QWORD *)v4 = v33;
      v4 += 8;
      v32 += 8;
      v30 += 8;
      if (v31 == v28)
        goto LABEL_39;
    }
    if (*(_QWORD *)(v33 + 248) - *(_QWORD *)(v33 + 240) > *(_QWORD *)(v35 + 248) - *(_QWORD *)(v35 + 240))
      goto LABEL_32;
LABEL_38:
    *(_QWORD *)v4 = v35;
    v4 += 8;
    v31 += 8;
    v30 += 8;
  }
  while (v31 != v28);
LABEL_39:
  if (v32 == a2)
    return result;
  v37 = a2 - v32 - 8;
  if (v37 < 0x48 || (unint64_t)(v30 - v32) < 0x20)
  {
    v38 = v4;
    v39 = v32;
    do
    {
LABEL_43:
      v40 = *(_QWORD *)v39;
      v39 += 8;
      *(_QWORD *)v38 = v40;
      v38 += 8;
    }
    while (v39 != a2);
    return result;
  }
  v45 = 0;
  v46 = (v37 >> 3) + 1;
  v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
  v38 = &v4[v47];
  v39 = &v32[v47];
  v48 = v46 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v49 = &v4[v45];
    result = *(__n128 *)&v32[v45];
    v50 = *(_OWORD *)&v32[v45 + 16];
    *(__n128 *)v49 = result;
    *((_OWORD *)v49 + 1) = v50;
    v45 += 32;
    v48 -= 4;
  }
  while (v48);
  if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_43;
  return result;
}

__n128 sub_2236B9FDC(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  char *v22;
  __n128 *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 *v32;
  __n128 *v33;
  unint64_t v34;
  __n128 *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __n128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 *v53;
  unint64_t v54;
  unint64_t v55;
  __n128 *v56;
  __n128 *v57;
  __n128 *v58;
  uint64_t v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  __n128 *v68;
  __n128 result;
  __n128 *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  char *v77;
  __n128 *v78;
  uint64_t v79;
  uint64_t v80;
  __n128 *v81;
  __n128 *v82;
  uint64_t v83;
  __n128 v84;
  unint64_t v85;
  char *v86;
  __n128 *v87;
  uint64_t v88;
  uint64_t v89;
  __n128 *v90;
  __n128 *v91;
  uint64_t v92;
  __n128 v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __n128 *v100;
  _QWORD *v101;
  __n128 *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __n128 *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __n128 *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;

  if (!a5)
    return result;
  v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4)
      return result;
    v11 = 0;
    v12 = a2->n128_u64[0];
    v13 = *(_QWORD *)(a2->n128_u64[0] + 16);
    v14 = -a4;
    while (1)
    {
      v16 = (_QWORD *)a1->n128_u64[v11 / 8];
      v17 = v16[2];
      if (v13 != v17)
      {
        if (v13 < v17)
          break;
        goto LABEL_8;
      }
      if (*(_QWORD *)(v12 + 248) - *(_QWORD *)(v12 + 240) > v16[31] - v16[30])
        break;
LABEL_8:
      v11 += 8;
      if (__CFADD__(v14++, 1))
        return result;
    }
    v18 = &a1->n128_u64[v11 / 8];
    if (-v14 >= v7)
    {
      if (v14 == -1)
      {
        a1->n128_u64[v11 / 8] = v12;
        a2->n128_u64[0] = (unint64_t)v16;
        return result;
      }
      if (v14 <= 0)
        v29 = -v14;
      else
        v29 = 1 - v14;
      v30 = v29 >> 1;
      v23 = (__n128 *)((char *)a1 + 8 * (v29 >> 1) + v11);
      if (a2 == a3)
      {
        v20 = 0;
LABEL_30:
        v21 = (__n128 *)((char *)a2 + 8 * v20);
        v31 = (8 * v20) >> 3;
        v22 = (char *)v23;
        v32 = v21;
        if (v23 != a2)
          goto LABEL_34;
        goto LABEL_64;
      }
      v20 = 0;
      v36 = ((char *)a3 - (char *)a2) >> 3;
      v37 = *(_QWORD *)(v23->n128_u64[0] + 16);
      while (2)
      {
        v38 = v36 >> 1;
        v39 = (v36 >> 1) + v20;
        v40 = (_QWORD *)a2->n128_u64[v39];
        v41 = v40[2];
        if (v41 == v37)
        {
          if (v40[31] - v40[30] <= *(_QWORD *)(v23->n128_u64[0] + 248) - *(_QWORD *)(v23->n128_u64[0] + 240))
            goto LABEL_42;
        }
        else if (v41 >= v37)
        {
LABEL_42:
          v36 = v38;
          if (!v38)
            goto LABEL_30;
          continue;
        }
        break;
      }
      v20 = v39 + 1;
      v38 = v36 + ~v38;
      goto LABEL_42;
    }
    if (v7 >= 0)
      v19 = v7;
    else
      v19 = v7 + 1;
    v20 = v19 >> 1;
    v21 = (__n128 *)((char *)a2 + 8 * v20);
    v22 = (char *)a2;
    v23 = (__n128 *)((char *)a1 + v11);
    if ((char *)a2 - (char *)a1 != v11)
    {
      v24 = (uint64_t)((char *)a2 - (char *)a1 - v11) >> 3;
      v25 = *(_QWORD *)(v21->n128_u64[0] + 16);
      v23 = (__n128 *)((char *)a1 + v11);
      while (1)
      {
        v26 = v24 >> 1;
        v27 = &v23->n128_i8[8 * (v24 >> 1)];
        v28 = *(_QWORD *)(*(_QWORD *)v27 + 16);
        if (v25 == v28)
        {
          if (*(_QWORD *)(v21->n128_u64[0] + 248) - *(_QWORD *)(v21->n128_u64[0] + 240) > *(_QWORD *)(*(_QWORD *)v27 + 248)
                                                                                         - *(_QWORD *)(*(_QWORD *)v27 + 240))
            goto LABEL_18;
        }
        else if (v25 < v28)
        {
          goto LABEL_18;
        }
        v23 = (__n128 *)(v27 + 8);
        v26 = v24 + ~v26;
LABEL_18:
        v24 = v26;
        if (!v26)
        {
          v22 = (char *)v23;
          break;
        }
      }
    }
    v30 = (uint64_t)(v22 - (char *)a1 - v11) >> 3;
    v31 = v20;
    v32 = (__n128 *)((char *)a2 + 8 * v20);
    if (v23 != a2)
    {
LABEL_34:
      v32 = (__n128 *)v22;
      if (v20)
      {
        v33 = (__n128 *)&v23->n128_i8[8];
        if (&v23->n128_i8[8] == (__int8 *)a2)
        {
          v117 = v23->n128_u64[0];
          v119 = v30;
          v42 = (char *)v21 - (char *)a2;
          v121 = a7;
          v123 = a6;
          v43 = a3;
          memmove(v23, a2, (char *)v21 - (char *)a2);
          v30 = v119;
          v18 = &a1->n128_u64[v11 / 8];
          a7 = v121;
          a6 = v123;
          a3 = v43;
          v32 = (__n128 *)((char *)v23 + v42);
          *(unint64_t *)((char *)v23->n128_u64 + v42) = v117;
        }
        else if (v20 == 1)
        {
          v34 = a2->n128_u64[0];
          v32 = (__n128 *)(v22 + 8);
          if (a2 != v23)
          {
            v120 = a7;
            v122 = a6;
            v35 = a3;
            v116 = a2->n128_u64[0];
            v118 = v30;
            memmove(v22 + 8, v23, (char *)a2 - v22);
            v34 = v116;
            v30 = v118;
            v18 = &a1->n128_u64[v11 / 8];
            a7 = v120;
            a3 = v35;
            a6 = v122;
          }
          v23->n128_u64[0] = v34;
        }
        else
        {
          v44 = ((char *)a2 - v22) >> 3;
          v45 = ((char *)v21 - (char *)a2) >> 3;
          if (v44 == v45)
          {
            v46 = 8 * v20 - 8;
            v47 = a2;
            do
            {
              v48 = v33[-1].n128_i64[1];
              v33[-1].n128_u64[1] = v47->n128_u64[0];
              v47->n128_u64[0] = v48;
              v47 = (__n128 *)((char *)v47 + 8);
              if (v33 == a2)
                break;
              v33 = (__n128 *)((char *)v33 + 8);
              v49 = v46;
              v46 -= 8;
            }
            while (v49);
            v32 = a2;
          }
          else
          {
            v50 = ((char *)v21 - (char *)a2) >> 3;
            v51 = ((char *)a2 - v22) >> 3;
            do
            {
              v52 = v51;
              v51 = v50;
              v50 = v52 % v50;
            }
            while (v50);
            if (v51)
            {
              v53 = (__n128 *)((char *)v23 + 8 * v51);
              do
              {
                v55 = v53[-1].n128_u64[1];
                v53 = (__n128 *)((char *)v53 - 8);
                v54 = v55;
                v56 = (__n128 *)((char *)v53 + 8 * v44);
                v57 = v53;
                do
                {
                  v58 = v56;
                  v57->n128_u64[0] = v56->n128_u64[0];
                  v59 = ((char *)v21 - (char *)v56) >> 3;
                  v60 = __OFSUB__(v44, v59);
                  v62 = v44 - v59;
                  v61 = (v62 < 0) ^ v60;
                  v56 = (__n128 *)((char *)v23 + 8 * v62);
                  if (v61)
                    v56 = (__n128 *)((char *)v58 + 8 * v44);
                  v57 = v58;
                }
                while (v56 != v53);
                v58->n128_u64[0] = v54;
              }
              while (v53 != v23);
            }
            v32 = (__n128 *)((char *)v23 + 8 * v45);
          }
        }
      }
    }
LABEL_64:
    a4 = -(v30 + v14);
    v63 = v7 - v31;
    if (v30 + v31 >= v7 - (v30 + v31) - v14)
    {
      v70 = (__n128 *)v18;
      v71 = v30;
      v72 = v7 - v31;
      v73 = a6;
      v74 = a7;
      sub_2236B9FDC(v32, v21, a3, a4, v72);
      a7 = v74;
      a6 = v73;
      a4 = v71;
      a3 = v32;
      v7 = v31;
      a1 = v70;
      a2 = (__n128 *)v22;
      if (!v31)
        return result;
    }
    else
    {
      v64 = &a1->n128_u64[v11 / 8];
      v65 = v22;
      v66 = a6;
      v67 = a7;
      v68 = a3;
      sub_2236B9FDC(v64, v65, v32, v30, v31);
      a7 = v67;
      a3 = v68;
      a6 = v66;
      v7 = v63;
      a1 = v32;
      a2 = v21;
      if (!v63)
        return result;
    }
  }
  if (a4 <= v7)
  {
    if (a1 == a2)
      return result;
    v85 = (char *)a2 - (char *)a1 - 8;
    v86 = a6;
    v87 = a1;
    if (v85 < 0x18)
      goto LABEL_119;
    v86 = a6;
    v87 = a1;
    if ((unint64_t)(a6 - (char *)a1) < 0x20)
      goto LABEL_119;
    v88 = (v85 >> 3) + 1;
    v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
    v86 = &a6[v89];
    v87 = (__n128 *)((char *)a1 + v89);
    v90 = a1 + 1;
    v91 = (__n128 *)(a6 + 16);
    v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = v90[-1];
      v93 = *v90;
      v91[-1] = result;
      *v91 = v93;
      v90 += 2;
      v91 += 2;
      v92 -= 4;
    }
    while (v92);
    if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_119:
      do
      {
        v94 = v87->n128_u64[0];
        v87 = (__n128 *)((char *)v87 + 8);
        *(_QWORD *)v86 = v94;
        v86 += 8;
      }
      while (v87 != a2);
    }
    if (v86 == a6)
      return result;
    while (1)
    {
      if (a2 == a3)
      {
        memmove(a1, a6, v86 - a6);
        return result;
      }
      v95 = a2->n128_u64[0];
      v96 = *(_QWORD *)(a2->n128_u64[0] + 16);
      v97 = *(_QWORD *)a6;
      v98 = *(_QWORD *)(*(_QWORD *)a6 + 16);
      if (v96 == v98)
      {
        if (*(_QWORD *)(v95 + 248) - *(_QWORD *)(v95 + 240) <= *(_QWORD *)(v97 + 248) - *(_QWORD *)(v97 + 240))
          goto LABEL_92;
LABEL_86:
        a1->n128_u64[0] = v95;
        a1 = (__n128 *)((char *)a1 + 8);
        a2 = (__n128 *)((char *)a2 + 8);
        if (a6 == v86)
          return result;
      }
      else
      {
        if (v96 < v98)
          goto LABEL_86;
LABEL_92:
        a1->n128_u64[0] = v97;
        a1 = (__n128 *)((char *)a1 + 8);
        a6 += 8;
        if (a6 == v86)
          return result;
      }
    }
  }
  v75 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v76 = v75 - 8;
  if ((unint64_t)(v75 - 8) < 0x18)
  {
    v77 = a6;
    v78 = a2;
    do
    {
LABEL_97:
      v99 = v78->n128_u64[0];
      v78 = (__n128 *)((char *)v78 + 8);
      *(_QWORD *)v77 = v99;
      v77 += 8;
    }
    while (v78 != a3);
    goto LABEL_98;
  }
  v77 = a6;
  v78 = a2;
  if ((unint64_t)(a6 - (char *)a2) < 0x20)
    goto LABEL_97;
  v79 = (v76 >> 3) + 1;
  v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
  v77 = &a6[v80];
  v78 = (__n128 *)((char *)a2 + v80);
  v81 = a2 + 1;
  v82 = (__n128 *)(a6 + 16);
  v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = v81[-1];
    v84 = *v81;
    v82[-1] = result;
    *v82 = v84;
    v81 += 2;
    v82 += 2;
    v83 -= 4;
  }
  while (v83);
  if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_97;
LABEL_98:
  if (v77 == a6)
    return result;
  v100 = a3;
  while (2)
  {
    if (a2 != a1)
    {
      v102 = (__n128 *)((char *)a2 - 8);
      v101 = (_QWORD *)a2[-1].n128_u64[1];
      v103 = (_QWORD *)*((_QWORD *)v77 - 1);
      v104 = v103[2];
      v105 = v101[2];
      if (v104 == v105)
      {
        if (v103[31] - v103[30] > v101[31] - v101[30])
          goto LABEL_101;
      }
      else if (v104 < v105)
      {
LABEL_101:
        a3[-1].n128_u64[1] = (unint64_t)v101;
        a3 = (__n128 *)((char *)a3 - 8);
        v100 = (__n128 *)((char *)v100 - 8);
        a2 = v102;
        if (v77 == a6)
          return result;
        continue;
      }
      v101 = (_QWORD *)*((_QWORD *)v77 - 1);
      v102 = a2;
      v77 -= 8;
      goto LABEL_101;
    }
    break;
  }
  v106 = v77 - a6 - 8;
  if (v106 < 0x58 || (unint64_t)(v77 - (char *)v100) < 0x20)
  {
    v107 = a3;
    v108 = v77;
    goto LABEL_111;
  }
  v111 = 0;
  v112 = (v106 >> 3) + 1;
  v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
  v107 = (__n128 *)((char *)a3 - v113);
  v108 = &v77[-v113];
  v114 = v112 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = *(__n128 *)&v77[v111 * 16 - 16];
    v115 = &a3[v111];
    v115[-2] = *(__n128 *)&v77[v111 * 16 - 32];
    v115[-1] = result;
    v111 -= 2;
    v114 -= 4;
  }
  while (v114);
  if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_111:
    v109 = &v107[-1].n128_i8[8];
    do
    {
      v110 = *((_QWORD *)v108 - 1);
      v108 -= 8;
      *(_QWORD *)v109 = v110;
      v109 -= 8;
    }
    while (v108 != a6);
  }
  return result;
}

_QWORD *sub_2236BA6E0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v16;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v8 = sub_22456636C((unsigned __int8 *)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *(_QWORD *)a2 && v13[3] == *(_QWORD *)(a2 + 8))
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v13 = operator new(0x28uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = **a4;
  v13[4] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_34:
      *v13 = *v21;
LABEL_69:
      *v21 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_45;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_34;
      }
    }
    else
    {
      v4 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_34;
    }
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v30 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_2236BAA04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2236BAA18(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6)
{
  char *v7;
  __n128 v8;
  __n128 *v9;
  _QWORD *v10;
  _QWORD *v11;
  __n128 *v13;
  uint64_t v14;
  __n128 *v15;
  __n128 *v16;
  __n128 v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  __n128 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v37;
  unint64_t v39;
  __n128 *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 *v45;
  __n128 v46;
  __n128 *v47;
  __int128 *v48;
  __n128 *v49;
  __int128 v50;
  _OWORD *v51;
  __n128 v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v63;
  __n128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (a4 < 2)
    return;
  v7 = (char *)a1;
  if (a4 == 2)
  {
    v8 = a2[-1];
    v9 = a2 - 1;
    v63 = (__int128)*a1;
    v64 = v8;
    v10 = sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v64);
    if (v10)
      v11 = (_QWORD *)v10[4];
    else
      v11 = 0;
    v42 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v63)[4];
    v43 = v11[2];
    v44 = v42[2];
    if (v43 == v44)
    {
      v23 = v11[31] - v11[30] > v42[31] - v42[30];
      v45 = a1;
      if (!v23)
        return;
    }
    else
    {
      v45 = a1;
      if (v43 >= v44)
        return;
    }
    v46 = *v45;
    *v45 = *v9;
    *v9 = v46;
    return;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2)
      return;
    v13 = a1 + 1;
    if (&a1[1] == a2)
      return;
    v14 = 0;
    v15 = a1;
LABEL_13:
    v16 = v15;
    v15 = v13;
    v17 = *v13;
    v63 = (__int128)*v16;
    v64 = v17;
    v18 = sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v64);
    if (v18)
      v19 = (_QWORD *)v18[4];
    else
      v19 = 0;
    v20 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v63)[4];
    v21 = v19[2];
    v22 = v20[2];
    if (v21 == v22)
    {
      v23 = v19[31] - v19[30] > v20[31] - v20[30];
      v24 = a1;
      if (!v23)
        goto LABEL_12;
    }
    else
    {
      v24 = a1;
      if (v21 >= v22)
        goto LABEL_12;
    }
    v25 = v15->n128_u64[0];
    v26 = v16[1].n128_i64[1];
    *v15 = *v16;
    if (v16 == v24)
    {
LABEL_10:
      v16 = v24;
      goto LABEL_11;
    }
    v27 = v14;
    while (1)
    {
      v28 = (__int128 *)((char *)v24 + v27);
      v29 = (__int128 *)((char *)&v24[-1] + v27);
      v30 = *v29;
      v64.n128_u64[0] = v25;
      v64.n128_u64[1] = v26;
      v63 = v30;
      v31 = sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v64);
      if (v31)
        v32 = (_QWORD *)v31[4];
      else
        v32 = 0;
      v33 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v63)[4];
      v34 = v32[2];
      v35 = v33[2];
      if (v34 == v35)
      {
        if (v32[31] - v32[30] <= v33[31] - v33[30])
          goto LABEL_11;
      }
      else if (v34 >= v35)
      {
        v16 = (__n128 *)((char *)a1 + v27);
LABEL_11:
        v16->n128_u64[0] = v25;
        v16->n128_u64[1] = v26;
LABEL_12:
        v13 = v15 + 1;
        v14 += 16;
        if (&v15[1] == a2)
          return;
        goto LABEL_13;
      }
      --v16;
      *v28 = *v29;
      v27 -= 16;
      v24 = a1;
      if (!v27)
        goto LABEL_10;
    }
  }
  v37 = (__int128 *)a5;
  v39 = a4 >> 1;
  v40 = &a1[a4 >> 1];
  v41 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    sub_2236BAA18(a1, v40, a3, v41, a5, a6);
    sub_2236BAA18(&v7[16 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v37, a6);
    sub_2236BB278(v7, &v7[16 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v37, a6);
    return;
  }
  sub_2236BAE8C(a1, v40, a3, v41, a5);
  v47 = (__n128 *)&v37[v39];
  sub_2236BAE8C((__n128 *)&v7[16 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v47);
  v48 = &v37[a4];
  v49 = v47;
  while (v49 != (__n128 *)v48)
  {
    v51 = v7;
    v52 = *v49;
    v63 = *v37;
    v64 = v52;
    v53 = sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v64);
    if (v53)
      v54 = (_QWORD *)v53[4];
    else
      v54 = 0;
    v55 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v63)[4];
    v56 = v54[2];
    v57 = v55[2];
    if (v56 == v57)
    {
      if (v54[31] - v54[30] <= v55[31] - v55[30])
        goto LABEL_51;
LABEL_42:
      v50 = (__int128)*v49++;
      *v51 = v50;
      v7 = (char *)(v51 + 1);
      if (v37 == (__int128 *)v47)
        goto LABEL_52;
    }
    else
    {
      if (v56 < v57)
        goto LABEL_42;
LABEL_51:
      v58 = *v37++;
      *v51 = v58;
      v7 = (char *)(v51 + 1);
      if (v37 == (__int128 *)v47)
      {
LABEL_52:
        if (v49 != (__n128 *)v48)
        {
          v59 = 0;
          do
          {
            *(__n128 *)&v7[v59 * 16] = v49[v59];
            ++v59;
          }
          while (&v49[v59] != (__n128 *)v48);
        }
        return;
      }
    }
  }
  if (v37 != (__int128 *)v47)
  {
    v60 = 0;
    do
    {
      *(_OWORD *)&v7[v60 * 16] = v37[v60];
      ++v60;
    }
    while (&v37[v60] != (__int128 *)v47);
  }
}

__n128 sub_2236BAE8C(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 result;
  __n128 *v11;
  __n128 v12;
  _QWORD *v13;
  _QWORD *v14;
  __n128 *v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  __n128 v19;
  __n128 *v20;
  __n128 v21;
  __n128 v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __n128 *v38;
  __n128 *v39;
  __n128 v40;
  __n128 v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v54;
  __n128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return result;
  v5 = a5;
  v8 = a2;
  v9 = a1;
  if (a4 == 2)
  {
    v12 = a2[-1];
    v11 = a2 - 1;
    v54 = *a1;
    v55 = v12;
    v13 = sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v55);
    if (v13)
      v14 = (_QWORD *)v13[4];
    else
      v14 = 0;
    v49 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v54)[4];
    v50 = v14[2];
    v51 = v49[2];
    if (v50 == v51)
    {
      if (v14[31] - v14[30] <= v49[31] - v49[30])
      {
LABEL_49:
        *v5 = *v9;
        result = *v11;
        v5[1] = *v11;
        return result;
      }
    }
    else if (v50 >= v51)
    {
      goto LABEL_49;
    }
    *v5 = *v11;
    result = *v9;
    v5[1] = *v9;
    return result;
  }
  if (a4 == 1)
  {
    result = *a1;
    *a5 = *a1;
    return result;
  }
  if ((uint64_t)a4 > 8)
  {
    v36 = a4 >> 1;
    v37 = a4 >> 1;
    v38 = &a1[v37];
    sub_2236BAA18(a1, &a1[v37], a3, a4 >> 1, a5, a4 >> 1);
    sub_2236BAA18(&v9[v37], v8, a3, a4 - v36, &v5[v37], a4 - v36);
    v39 = &v9[v37];
    while (1)
    {
      if (v39 == v8)
      {
        if (v9 != v38)
        {
          v52 = 0;
          do
          {
            result = v9[v52];
            v5[v52++] = result;
          }
          while (&v9[v52] != v38);
        }
        return result;
      }
      v41 = *v39;
      v54 = *v9;
      v55 = v41;
      v42 = sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v55);
      if (v42)
        v43 = (_QWORD *)v42[4];
      else
        v43 = 0;
      v44 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v54)[4];
      v45 = v43[2];
      v46 = v44[2];
      if (v45 == v46)
      {
        if (v43[31] - v43[30] <= v44[31] - v44[30])
          goto LABEL_41;
LABEL_32:
        v40 = *v39++;
        result.n128_u64[0] = v40.n128_u64[0];
        *v5++ = v40;
        v8 = a2;
        if (v9 == v38)
          goto LABEL_42;
      }
      else
      {
        if (v45 < v46)
          goto LABEL_32;
LABEL_41:
        v47 = *v9++;
        result.n128_u64[0] = v47.n128_u64[0];
        *v5++ = v47;
        v8 = a2;
        if (v9 == v38)
        {
LABEL_42:
          if (v39 != v8)
          {
            v48 = 0;
            do
            {
              result = v39[v48];
              v5[v48++] = result;
            }
            while (&v39[v48] != v8);
          }
          return result;
        }
      }
    }
  }
  if (a1 != a2)
  {
    v15 = a1 + 1;
    result = *a1;
    *a5 = *a1;
    if (&a1[1] != a2)
    {
      v16 = 0;
      v17 = a5;
      do
      {
        v20 = v17;
        v21 = *v15;
        v22 = *v17++;
        v54 = v22;
        v55 = v21;
        v23 = sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v55);
        if (v23)
          v24 = (_QWORD *)v23[4];
        else
          v24 = 0;
        v25 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v54)[4];
        v26 = v24[2];
        v27 = v25[2];
        if (v26 == v27)
        {
          v28 = v25[31] - v25[30];
          v18 = v17;
          if (v24[31] - v24[30] <= v28)
            goto LABEL_12;
        }
        else
        {
          v18 = v17;
          if (v26 >= v27)
            goto LABEL_12;
        }
        *v17 = *v20;
        v18 = v5;
        if (v20 != v5)
        {
          v29 = v16;
          while (1)
          {
            v30 = *v15;
            v54 = *(__n128 *)((char *)v5 + v29 - 16);
            v55 = v30;
            v31 = sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v55);
            if (v31)
              v32 = (_QWORD *)v31[4];
            else
              v32 = 0;
            v33 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a3 + 40), (uint64_t)&v54)[4];
            v34 = v32[2];
            v35 = v33[2];
            if (v34 == v35)
            {
              if (v32[31] - v32[30] <= v33[31] - v33[30])
              {
                v18 = (__n128 *)((char *)v5 + v29);
                break;
              }
            }
            else if (v34 >= v35)
            {
              v18 = v20;
              break;
            }
            --v20;
            *(__n128 *)((char *)v5 + v29) = *(__n128 *)((char *)v5 + v29 - 16);
            v29 -= 16;
            if (!v29)
            {
              v18 = v5;
              break;
            }
          }
        }
LABEL_12:
        v19 = *v15++;
        result.n128_u64[0] = v19.n128_u64[0];
        *v18 = v19;
        v16 += 16;
      }
      while (v15 != a2);
    }
  }
  return result;
}

char *sub_2236BB278(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  char *v12;
  __int128 v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 *v82;
  __int128 *v83;
  __int128 v84;
  char *v85;
  char *v86;
  __int128 v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v101 = a6;
  if (!a6)
    return result;
  while (a5 > a8 && v101 > a8)
  {
    if (!a5)
      return result;
    v9 = 0;
    v10 = -a5;
    while (1)
    {
      v12 = a2;
      v13 = *(_OWORD *)a2;
      v14 = result;
      v105 = *(_OWORD *)&result[v9];
      v106 = v13;
      v15 = sub_223340F28((_QWORD *)(*(_QWORD *)a4 + 40), (uint64_t)&v106);
      if (v15)
        v16 = (_QWORD *)v15[4];
      else
        v16 = 0;
      v17 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a4 + 40), (uint64_t)&v105)[4];
      v18 = v16[2];
      v19 = v17[2];
      if (v18 != v19)
      {
        result = v14;
        a2 = v12;
        if (v18 < v19)
          break;
        goto LABEL_7;
      }
      result = v14;
      a2 = v12;
      if (v16[31] - v16[30] > v17[31] - v17[30])
        break;
LABEL_7:
      v9 += 16;
      if (__CFADD__(v10++, 1))
        return result;
    }
    v20 = -v10;
    v96 = &result[v9];
    if (-v10 >= v101)
    {
      if (v10 == -1)
      {
        v106 = *(_OWORD *)&result[v9];
        *(_OWORD *)&result[v9] = *(_OWORD *)a2;
        *(_OWORD *)a2 = v106;
        return result;
      }
      if (v10 > 0)
        v20 = 1 - v10;
      v97 = v20 >> 1;
      v24 = &result[16 * (v20 >> 1) + v9];
      if (a2 == a3)
      {
        v34 = 0;
LABEL_34:
        v22 = &a2[16 * v34];
        v35 = (16 * v34) >> 4;
        v23 = v24;
        result = v14;
        v36 = v22;
        v37 = v101;
        if (v24 != a2)
          goto LABEL_38;
        goto LABEL_71;
      }
      v34 = 0;
      v40 = (a3 - a2) >> 4;
      v103 = (_QWORD *)(*(_QWORD *)a4 + 40);
      while (2)
      {
        v41 = v40 >> 1;
        v42 = v34;
        v43 = (v40 >> 1) + v34;
        v44 = *(_OWORD *)&a2[16 * v43];
        v105 = *(_OWORD *)v24;
        v106 = v44;
        v45 = sub_223340F28(v103, (uint64_t)&v106);
        if (v45)
          v46 = (_QWORD *)v45[4];
        else
          v46 = 0;
        v47 = (_QWORD *)sub_223340F28(v103, (uint64_t)&v105)[4];
        v48 = v46[2];
        v49 = v47[2];
        v50 = v48 < v49;
        if (v48 == v49)
        {
          a2 = v12;
          v34 = v42;
          if (v46[31] - v46[30] <= v47[31] - v47[30])
            goto LABEL_46;
        }
        else
        {
          a2 = v12;
          v34 = v42;
          if (!v50)
          {
LABEL_46:
            v40 = v41;
            if (!v41)
              goto LABEL_34;
            continue;
          }
        }
        break;
      }
      v34 = v43 + 1;
      v41 = v40 + ~v41;
      goto LABEL_46;
    }
    if (v101 >= 0)
      v21 = v101;
    else
      v21 = v101 + 1;
    v102 = v21 >> 1;
    v22 = &a2[16 * (v21 >> 1)];
    v23 = a2;
    v24 = &result[v9];
    if (a2 - result != v9)
    {
      v25 = (a2 - result - v9) >> 4;
      v24 = &result[v9];
      while (1)
      {
        v26 = v25 >> 1;
        v27 = &v24[16 * (v25 >> 1)];
        v28 = *(_OWORD *)v22;
        v105 = *(_OWORD *)v27;
        v106 = v28;
        v29 = sub_223340F28((_QWORD *)(*(_QWORD *)a4 + 40), (uint64_t)&v106);
        if (v29)
          v30 = (_QWORD *)v29[4];
        else
          v30 = 0;
        v31 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a4 + 40), (uint64_t)&v105)[4];
        v32 = v30[2];
        v33 = v31[2];
        if (v32 == v33)
        {
          if (v30[31] - v30[30] > v31[31] - v31[30])
            goto LABEL_20;
        }
        else if (v32 < v33)
        {
          goto LABEL_20;
        }
        v24 = v27 + 16;
        v26 = v25 + ~v26;
LABEL_20:
        v25 = v26;
        if (!v26)
        {
          v23 = v24;
          result = v14;
          a2 = v12;
          break;
        }
      }
    }
    v97 = (v23 - result - v9) >> 4;
    v37 = v101;
    v34 = v102;
    v35 = v102;
    v36 = v22;
    if (v24 != a2)
    {
LABEL_38:
      v36 = v23;
      if (v34)
      {
        v38 = v34;
        v39 = v24 + 16;
        if (v24 + 16 == a2)
        {
          v106 = *(_OWORD *)v24;
          v51 = v22 - a2;
          memmove(v24, a2, v22 - a2);
          result = v14;
          v36 = &v24[v51];
          *(_OWORD *)v36 = v106;
        }
        else if (v38 == 1)
        {
          v106 = *(_OWORD *)a2;
          v36 = v23 + 16;
          if (a2 != v24)
          {
            memmove(v23 + 16, v24, a2 - v23);
            result = v14;
          }
          *(_OWORD *)v24 = v106;
        }
        else
        {
          v52 = (a2 - v23) >> 4;
          v53 = (v22 - a2) >> 4;
          if (v52 == v53)
          {
            v54 = 16 * v38 - 16;
            v55 = a2;
            do
            {
              v106 = *((_OWORD *)v39 - 1);
              *((_OWORD *)v39 - 1) = *(_OWORD *)v55;
              *(_OWORD *)v55 = v106;
              if (v39 == a2)
                break;
              v55 += 16;
              v39 += 16;
              v56 = v54;
              v54 -= 16;
            }
            while (v56);
            v36 = a2;
          }
          else
          {
            v57 = (v22 - a2) >> 4;
            v58 = (a2 - v23) >> 4;
            do
            {
              v59 = v58;
              v58 = v57;
              v57 = v59 % v57;
            }
            while (v57);
            if (v58)
            {
              v60 = &v24[16 * v58];
              do
              {
                v61 = *((_OWORD *)v60 - 1);
                v60 -= 16;
                v106 = v61;
                v62 = &v60[16 * v52];
                v63 = v60;
                do
                {
                  v64 = v62;
                  *(_OWORD *)v63 = *(_OWORD *)v62;
                  v65 = (v22 - v62) >> 4;
                  v66 = __OFSUB__(v52, v65);
                  v67 = v52 - v65;
                  v50 = (v67 < 0) ^ v66;
                  v62 = &v24[16 * v67];
                  if (v50)
                    v62 = &v64[16 * v52];
                  v63 = v64;
                }
                while (v62 != v60);
                *(_OWORD *)v64 = v106;
              }
              while (v60 != v24);
            }
            v36 = &v24[16 * v53];
          }
        }
      }
    }
LABEL_71:
    a5 = -(v97 + v10);
    if (v97 + v35 >= v37 - (v97 + v35) - v10)
    {
      sub_2236BB278(v36, v22, a3, a4, -(v97 + v10), v37 - v35, a7, a8);
      result = v96;
      a5 = v97;
      a3 = v36;
      v101 = v35;
      a2 = v23;
      if (!v35)
        return result;
    }
    else
    {
      sub_2236BB278(&result[v9], v23, v36, a4, v97, v35, a7, a8);
      result = v36;
      v101 = v37 - v35;
      a2 = v22;
      if (v37 == v35)
        return result;
    }
  }
  if (a5 <= v101)
  {
    if (result == a2)
      return result;
    v81 = 0;
    do
    {
      a7[v81 / 0x10] = *(_OWORD *)&result[v81];
      v81 += 16;
    }
    while (&result[v81] != a2);
    if (!v81)
      return result;
    v82 = a7;
    v83 = &a7[v81 / 0x10];
    while (1)
    {
      if (a2 == a3)
        return (char *)memmove(result, v82, (char *)a7 - (char *)v82 + v81);
      v85 = result;
      v86 = a2;
      v87 = *(_OWORD *)a2;
      v105 = *v82;
      v106 = v87;
      v88 = sub_223340F28((_QWORD *)(*(_QWORD *)a4 + 40), (uint64_t)&v106);
      if (v88)
        v89 = (_QWORD *)v88[4];
      else
        v89 = 0;
      v90 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a4 + 40), (uint64_t)&v105)[4];
      v91 = v89[2];
      v92 = v90[2];
      if (v91 == v92)
      {
        v93 = v85;
        a2 = v86;
        if (v89[31] - v89[30] <= v90[31] - v90[30])
          goto LABEL_107;
LABEL_98:
        v84 = *(_OWORD *)a2;
        a2 += 16;
        *(_OWORD *)v93 = v84;
        result = v93 + 16;
        if (v83 == v82)
          return result;
      }
      else
      {
        v93 = v85;
        a2 = v86;
        if (v91 < v92)
          goto LABEL_98;
LABEL_107:
        v94 = *v82++;
        *(_OWORD *)v93 = v94;
        result = v93 + 16;
        if (v83 == v82)
          return result;
      }
    }
  }
  if (a3 != a2)
  {
    v68 = 0;
    do
    {
      a7[v68] = *(_OWORD *)&a2[v68 * 16];
      ++v68;
    }
    while (&a2[v68 * 16] != a3);
    if (v68 * 16)
    {
      v69 = &a7[v68];
      v70 = a3 - 16;
      do
      {
        if (a2 == result)
        {
          v95 = 0;
          do
          {
            *(_OWORD *)&v70[v95 * 16] = v69[v95 - 1];
            --v95;
          }
          while (&v69[v95] != a7);
          return result;
        }
        v73 = result;
        v74 = a2;
        v71 = a2 - 16;
        v75 = *(v69 - 1);
        v105 = *((_OWORD *)a2 - 1);
        v106 = v75;
        v76 = sub_223340F28((_QWORD *)(*(_QWORD *)a4 + 40), (uint64_t)&v106);
        if (v76)
          v77 = (_QWORD *)v76[4];
        else
          v77 = 0;
        v78 = (_QWORD *)sub_223340F28((_QWORD *)(*(_QWORD *)a4 + 40), (uint64_t)&v105)[4];
        v79 = v77[2];
        v80 = v78[2];
        if (v79 == v80)
        {
          v72 = v71;
          if (v77[31] - v77[30] > v78[31] - v78[30])
            goto LABEL_83;
        }
        else
        {
          v72 = v71;
          if (v79 < v80)
            goto LABEL_83;
        }
        v71 = (char *)(v69 - 1);
        v72 = v74;
        --v69;
LABEL_83:
        *(_OWORD *)v70 = *(_OWORD *)v71;
        v70 -= 16;
        a2 = v72;
        result = v73;
      }
      while (v69 != a7);
    }
  }
  return result;
}

void sub_2236BBA44(_QWORD *a1, uint64_t a2, _BYTE *a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;

  v4 = 0xFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (0xFFFFFFFFFFFFFFFLL - v6 < v5 - v6 + 1)
    goto LABEL_23;
  v7 = v6 >> 61;
  v8 = 8 * v6;
  if (v7 > 4)
    v9 = -1;
  else
    v9 = v8;
  v10 = v8 / 5;
  if (v7)
    v10 = v9;
  if (v10 < 0xFFFFFFFFFFFFFFFLL)
    v4 = v10;
  v11 = v5 + 1 > v4 ? v5 + 1 : v4;
  if (v11 >> 60)
LABEL_23:
    sub_22317521C((uint64_t)"get_next_capacity, allocator's max size reached");
  v16 = *(_BYTE **)a2;
  v17 = operator new(8 * v11);
  v18 = v17;
  v19 = *(_BYTE **)a2;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = v17;
  if (*(_QWORD *)a2)
  {
    v21 = v17;
    if (v19 != a3)
    {
      memmove(v17, *(const void **)a2, a3 - v19);
      v21 = (_QWORD *)((char *)v18 + a3 - v19);
    }
  }
  *v21 = *a4;
  if (a3)
  {
    v22 = &v19[8 * v20];
    if (v22 != a3)
      memmove(v21 + 1, a3, v22 - a3);
  }
  if (v19 && (_BYTE *)(a2 + 24) != v19)
  {
    operator delete(v19);
    v20 = *(_QWORD *)(a2 + 8);
  }
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v20 + 1;
  *(_QWORD *)(a2 + 16) = v11;
  *a1 = (char *)v18 + a3 - v16;
}

void sub_2236BBB94()
{
  JUMPOUT(0x227684CE8);
}

_WORD *sub_2236BBBA8(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24EC573D0;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_2236BBBE0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24EC573D0;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_2236BBC00()
{
  return kdebug_trace();
}

uint64_t sub_2236BBC30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes6detail20DoAnySegmentsOverlapENS0_"
                     "4spanIKNS3_4pairIKNS0_6random4UUIDENS3_17reference_wrapperIKNS6_25KeyframePlaneSegmentationEEEEELm1"
                     "8446744073709551615EEESJ_RKNS_3acv8geometry5PlaneIfEEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes6detail20DoAnySegmentsO"
                                "verlapENS0_4spanIKNS3_4pairIKNS0_6random4UUIDENS3_17reference_wrapperIKNS6_25KeyframePla"
                                "neSegmentationEEEEELm18446744073709551615EEESJ_RKNS_3acv8geometry5PlaneIfEEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes6detail20DoAnySegmentsOverlapENS0_4spanIKNS3_4pairIKNS0_6random4UUIDENS3_17reference_wrapperIKNS6_25KeyframePlaneSegmentationEEEEELm18446744073709551615EEESJ_RKNS_3acv8geometry5PlaneIfEEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon8kfplanes6detail20DoAnySegmentsOverlapENS0_4spanIKNS3_4pairIKNS0_6random4UUIDENS3_17reference_wrapperIKNS6_25KeyframePlaneSegmentationEEEEELm18446744073709551615EEESJ_RKNS_3acv8geometry5PlaneIfEEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236BBC9C()
{
  return &unk_24EC57430;
}

char *sub_2236BBCA8(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_22316E078();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_223174E94();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
  return v6 - 16;
}

uint64_t sub_2236BBDB0(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

char **sub_2236BBE2C(char **a1)
{
  char *v2;
  char *i;

  v2 = *a1;
  if (v2)
  {
    for (i = a1[1]; i != v2; i -= 72)
    {
      if (*(i - 64))
        *(i - 64) = 0;
    }
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

char *sub_2236BBE80(void **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0x8E38E38E38E38E39 * ((v3 - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x38E38E38E38E38ELL)
    sub_22316E078();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - v4) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - v4) >> 3) >= 0x1C71C71C71C71C7)
    v8 = 0x38E38E38E38E38ELL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x38E38E38E38E38ELL)
      sub_223174E94();
    v9 = (char *)operator new(72 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[72 * v5];
  *(_QWORD *)v10 = *(_QWORD *)a2;
  v10[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v11 = &v9[72 * v5];
    *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
    v10[8] = 1;
  }
  v12 = &v9[72 * v8];
  v13 = &v9[72 * v5];
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(a2 + 56);
  v14 = v10 + 72;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    v15 = 0;
    do
    {
      v17 = &v10[v15];
      v18 = &v3[v15];
      *((_QWORD *)v17 - 9) = *(_QWORD *)&v3[v15 - 72];
      *(v17 - 64) = 0;
      if (v3[v15 - 64])
      {
        v19 = *(_OWORD *)(v18 - 56);
        *((_QWORD *)v17 - 5) = *((_QWORD *)v18 - 5);
        *(_OWORD *)(v17 - 56) = v19;
        *(v17 - 64) = 1;
      }
      v16 = *((_OWORD *)v18 - 1);
      *((_OWORD *)v17 - 2) = *((_OWORD *)v18 - 2);
      *((_OWORD *)v17 - 1) = v16;
      v15 -= 72;
    }
    while (&v3[v15] != v4);
    v3 = (char *)*a1;
    v20 = (char *)a1[1];
    *a1 = &v10[v15];
    a1[1] = v14;
    a1[2] = v12;
    while (v20 != v3)
    {
      if (*(v20 - 64))
        *(v20 - 64) = 0;
      v20 -= 72;
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

void sub_2236BC058()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2236BC06C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    JUMPOUT(0x227684CB8);
  return result;
}

uint64_t sub_2236BC08C(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2236BC0A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N5boost21checked_array_deleterINS_18default_color_typeEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N5boost21checked_array_deleterINS_18default_color_typeEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N5boost21checked_array_deleterINS_18default_color_typeEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N5boost21checked_array_deleterINS_18default_color_typeEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2236BC10C()
{
  return 0;
}

uint64_t sub_2236BC114(uint64_t a1)
{
  return a1 + 24;
}

void sub_2236BC11C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CBFD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFD8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CBFD0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CBFD8);
  }
  *a1 = qword_2540CBFD0;
}

void sub_2236BC1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CBFD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CBFD8);
  _Unwind_Resume(a1);
}

void sub_2236BC210(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CBFE8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFE8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CBFE0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CBFE8);
  }
  *a1 = qword_2540CBFE0;
}

void sub_2236BC2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CBFE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CBFE8);
  _Unwind_Resume(a1);
}

void sub_2236BC304(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, _QWORD *a6@<X5>, uint64_t **a7@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 **v17;
  unint64_t v18;
  int8x8_t v19;
  uint8x8_t v20;
  unint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  const void *v31;
  size_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  unsigned __int8 v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  const char *v47;
  size_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  char *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  int8x8_t v74;
  uint8x8_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v97;
  uint64_t v99;
  unsigned __int8 v100;
  const void *v101;
  size_t v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  size_t v107;
  const char *v108;
  unsigned __int8 v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned __int8 v126;
  const char *v127;
  size_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  size_t v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  char *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  void *v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  BOOL v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  int v156;
  unsigned int v158;
  unsigned int v159;
  unsigned __int8 v160;
  const void *v161;
  size_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  size_t v199;
  const char *v200;
  unsigned __int8 v201;
  int v202;
  unsigned int v203;
  unsigned int v205;
  int v206;
  BOOL v207;
  unsigned int v208;
  unsigned int v209;
  float v210;
  __int16 *v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  __int16 **v218;
  int8x16_t *v219;
  char *v220;
  unsigned __int8 v221;
  const char *v222;
  size_t v223;
  _BYTE *v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  uint64_t v228;
  uint64_t v229;
  NSObject *v230;
  size_t v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  char *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  void *v271;
  unint64_t *v272;
  uint64_t v273;
  __int16 **v274;
  __int16 **v275;
  __int16 *v276;
  int v277;
  int v278;
  BOOL v279;
  unsigned int v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  float32x2_t *v300;
  float32x2_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x2_t *v304;
  float32x2_t v305;
  float32x2_t v306;
  float32x2_t v307;
  float32x2_t v308;
  float32x4_t v309;
  int8x16_t v310;
  float32x2_t v311;
  float32x2_t v312;
  float32x4_t v313;
  float32x2_t v314;
  unint64_t v316;
  float v317;
  float v318;
  char *v319;
  size_t v320;
  char *v321;
  __n128 v322;
  unint64_t v323;
  __n128 *v324;
  uint64_t v325;
  unsigned __int8 v326;
  const void *v327;
  size_t v328;
  int v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  size_t v334;
  const char *v335;
  unsigned __int8 v336;
  int64x2_t *v337;
  unint64_t v338;
  unsigned __int8 v339;
  const char *v340;
  size_t v341;
  _BYTE *v342;
  uint64_t v343;
  uint64_t v344;
  _BYTE *v345;
  NSObject *v346;
  uint64_t v347;
  uint64_t v348;
  size_t v349;
  void *v350;
  _QWORD *v351;
  size_t v352;
  size_t v353;
  void *v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char v359;
  _QWORD *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  _QWORD **v404;
  _QWORD **v405;
  uint64_t v406;
  unint64_t v407;
  char *v408;
  char *v409;
  int8x16_t v410;
  float32x2_t v411;
  float32x2_t v412;
  int8x16_t v413;
  float32x4_t v414;
  char *v415;
  char *v416;
  float32x2_t v417;
  float32x2_t v418;
  float32x2_t **v419;
  float32x2_t *v420;
  float32x2_t v421;
  float32x2_t v422;
  float32x2_t v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float v427;
  BOOL v428;
  float v429;
  char v430;
  float32x2_t *v431;
  float32x2_t v432;
  float32x2_t v433;
  float32x2_t v434;
  float32x2_t v435;
  float32x4_t v436;
  float v437;
  BOOL v438;
  float v439;
  char v440;
  float v441;
  unsigned __int32 v442;
  _BOOL4 v443;
  int v444;
  float v445;
  unint64_t v446;
  unint64_t v447;
  char *v448;
  float32x2_t v449;
  int v450;
  unsigned int v451;
  __int16 v452;
  int v453;
  __int16 v454;
  unint64_t v455;
  int v456;
  unint64_t v457;
  unsigned int v458;
  char *v459;
  char *v460;
  float32x4_t v461;
  float32x2_t v462;
  float32x2_t v463;
  float32x2_t v464;
  float32x2_t v465;
  float32x2_t v466;
  float32x2_t v467;
  float32x2_t v468;
  float v469;
  float32x2_t v470;
  float32x2_t v471;
  float32x2_t v472;
  float32x2_t v473;
  float v474;
  float32x2_t v475;
  float32x2_t v476;
  float32x2_t v477;
  float32x2_t v478;
  float32x2_t v479;
  float32x2_t v480;
  unint64_t v481;
  char *v482;
  unint64_t v483;
  __n128 *v484;
  void *v485;
  char *v486;
  int v487;
  unint64_t *v488;
  unint64_t v489;
  char *v490;
  __int128 v491;
  __int128 v492;
  uint64_t v493;
  __int128 v494;
  float32x4_t *v495;
  unint64_t *v496;
  unint64_t v497;
  float32x4_t *v498;
  float32x4_t v499;
  uint64_t v500;
  char *v501;
  float32x4_t *v502;
  uint64_t v503;
  char *v504;
  char *v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  unint64_t v509;
  _BYTE *v510;
  uint64_t *v511;
  char *v512;
  char *v513;
  char *v514;
  unint64_t v515;
  char *v516;
  uint64_t *v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  float32x4_t *v522;
  float32x4_t *v523;
  uint64_t v524;
  float32x4_t v525;
  uint64_t *v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  char *v530;
  float32x4_t *v531;
  float32x4_t *v532;
  char *v533;
  int8x16_t v534;
  int8x16_t v535;
  float32x2_t v536;
  float32x4_t v537;
  float32x2_t v538;
  float32x2_t v539;
  float32x2_t v540;
  float32x4_t v541;
  __int16 **v542;
  __int16 *v543;
  int v544;
  int v545;
  unsigned __int8 v546;
  uint64_t v547;
  uint64_t i;
  unsigned __int8 v549;
  BOOL v550;
  unsigned int v551;
  unint64_t v552;
  uint64_t v553;
  unint64_t v554;
  unsigned int v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  float32x2_t *v571;
  float32x2_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x2_t *v575;
  float32x2_t v576;
  float32x2_t v577;
  float32x2_t v578;
  float32x2_t v579;
  int8x16_t v580;
  int8x16_t v581;
  float32x2_t v582;
  float32x2_t v583;
  float32x4_t v584;
  float32x2_t v585;
  unint64_t v587;
  float v588;
  float v589;
  _QWORD *v590;
  _QWORD *v591;
  uint64_t v592;
  char *v593;
  _QWORD *v594;
  char *v595;
  unint64_t v596;
  _QWORD *v597;
  char *v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t **v604;
  unint64_t v605;
  _BYTE *v606;
  _QWORD *v607;
  _QWORD *v608;
  int64_t v609;
  _QWORD *v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  char *v614;
  _OWORD *v615;
  char *v616;
  uint64_t v617;
  __int128 v618;
  uint64_t v619;
  char *v620;
  unint64_t v621;
  char *v622;
  __int128 v623;
  unsigned int v624;
  uint64_t v625;
  std::__shared_weak_count *v626;
  int v627;
  char *v628;
  uint64_t v629;
  _QWORD *v630;
  uint64_t v631;
  float *v632;
  uint64_t v633;
  float *v634;
  float *v635;
  _QWORD *v636;
  __int128 v637;
  char *v638;
  __int128 v639;
  uint64_t v640;
  unint64_t v641;
  unint64_t v642;
  char *v643;
  char *v644;
  __int128 v645;
  float *v646;
  __int128 v647;
  uint64_t v648;
  char v649;
  int v650;
  int v651;
  uint64_t v652;
  float v653;
  float *v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  int64_t v659;
  uint64_t v660;
  int v661;
  int v662;
  BOOL v663;
  std::string::value_type *v664;
  int64_t v665;
  char *v666;
  char *v667;
  unint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  unint64_t v672;
  char *v673;
  char *v674;
  std::__shared_weak_count *v675;
  int v676;
  uint64_t v677;
  char *v678;
  uint64_t v679;
  __int128 v680;
  __int128 v681;
  uint64_t v682;
  uint64_t v683;
  void *v684;
  void *v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  char *v689;
  char *v690;
  unsigned __int8 *v691;
  unsigned int v692;
  unsigned __int8 *v693;
  unsigned __int8 **v694;
  unsigned __int8 **v695;
  unsigned __int8 *v696;
  unsigned int v697;
  unsigned int v698;
  char *v699;
  unint64_t v700;
  uint64_t v701;
  _DWORD *v702;
  char *v703;
  unsigned __int8 **v704;
  unsigned __int8 **v705;
  uint64_t v706;
  uint64_t v707;
  int v708;
  int v709;
  unint64_t v710;
  unint64_t v711;
  void **v713;
  uint64_t v714;
  const char *v715;
  size_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t *v720;
  uint64_t *v721;
  uint64_t v722;
  char *v723;
  __int128 *v724;
  std::string *v725;
  __int128 v726;
  uint64_t v727;
  uint64_t v728;
  char *v729;
  unsigned __int8 v730;
  const char *v731;
  size_t v732;
  _BYTE *v733;
  const char *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  _BYTE *v739;
  NSObject *v740;
  unint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  size_t v745;
  std::__shared_weak_count_vtbl *v746;
  std::__shared_weak_count *v747;
  size_t v748;
  size_t v749;
  _BYTE *v750;
  void *v751;
  int v752;
  std::string::value_type v753;
  uint64_t v754;
  int v755;
  uint64_t v756;
  size_t v757;
  const char *v758;
  unsigned __int8 v759;
  uint64_t v760;
  uint64_t v761;
  size_t v762;
  size_t v763;
  _BYTE *v764;
  uint64_t v765;
  uint64_t v766;
  char *v767;
  std::__shared_weak_count *v768;
  unint64_t *v769;
  unint64_t v770;
  char *v771;
  std::__shared_weak_count *v772;
  unint64_t *v773;
  unint64_t v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  unint64_t v778;
  std::__shared_weak_count *v779;
  unint64_t *v780;
  unint64_t v781;
  uint64_t v782;
  char *v783;
  char *v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  const char *v788;
  uint64_t v789;
  std::__shared_weak_count *v790;
  unint64_t *v791;
  unint64_t v792;
  std::__shared_weak_count *v793;
  unint64_t *v794;
  unint64_t v795;
  uint64_t v796;
  std::__shared_weak_count *v797;
  unint64_t *v798;
  unint64_t v799;
  std::__shared_weak_count *v800;
  unint64_t *v801;
  unint64_t v802;
  std::__shared_weak_count *v803;
  unint64_t *v804;
  unint64_t v805;
  std::__shared_weak_count *v806;
  unint64_t *v807;
  unint64_t v808;
  const char *p_s;
  std::__shared_weak_count *v810;
  unint64_t *v811;
  unint64_t v812;
  uint64_t *v813;
  uint64_t v814;
  uint64_t v815;
  std::mutex *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  _BYTE *v820;
  char v821;
  std::string::size_type v822;
  std::string *v823;
  uint64_t v824;
  int v825;
  int v826;
  uint64_t v827;
  float32x4_t v828;
  float32x4_t v829;
  uint64_t *v830;
  uint64_t *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t *v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  _OWORD *v840;
  unint64_t v841;
  unint64_t v842;
  char *v843;
  char *v844;
  char *v845;
  char *v846;
  __int128 v847;
  unsigned __int8 v848;
  const char *v849;
  size_t v850;
  _BYTE *v851;
  uint64_t v852;
  uint64_t v853;
  int v854;
  _BYTE *v855;
  NSObject *v856;
  unint64_t v857;
  uint64_t v858;
  uint64_t v859;
  size_t v860;
  std::__shared_weak_count_vtbl *v861;
  std::__shared_weak_count *v862;
  unint64_t *v863;
  char *v864;
  std::__shared_weak_count *v865;
  unint64_t *v866;
  unint64_t v867;
  unint64_t v868;
  unint64_t v869;
  std::__shared_weak_count *v870;
  unint64_t *v871;
  unint64_t v872;
  uint64_t v873;
  char *v874;
  char *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  std::__shared_weak_count *v881;
  unint64_t *v882;
  unint64_t v883;
  std::__shared_weak_count *v884;
  unint64_t *v885;
  unint64_t v886;
  uint64_t v887;
  std::__shared_weak_count *v888;
  unint64_t *v889;
  unint64_t v890;
  std::__shared_weak_count *v891;
  unint64_t *v892;
  unint64_t v893;
  std::__shared_weak_count *v894;
  unint64_t *v895;
  unint64_t v896;
  std::__shared_weak_count *v897;
  unint64_t *v898;
  unint64_t v899;
  void *v900;
  std::__shared_weak_count *v901;
  unint64_t *v902;
  unint64_t v903;
  int v904;
  uint64_t *v905;
  char *v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  int v910;
  uint64_t *v911;
  unsigned int v912;
  char *v913;
  _QWORD *v914;
  _QWORD *v915;
  _QWORD *v916;
  unsigned __int8 v918;
  const void *v919;
  size_t v920;
  int v921;
  unint64_t v922;
  unint64_t v923;
  uint64_t v924;
  size_t v925;
  const char *v926;
  unsigned __int8 v927;
  unsigned __int8 v928;
  const char *v929;
  size_t v930;
  _BYTE *v931;
  uint64_t v932;
  uint64_t v933;
  _BYTE *v934;
  NSObject *v935;
  int v936;
  uint64_t v937;
  uint64_t v938;
  size_t v939;
  std::__shared_weak_count_vtbl *v940;
  std::__shared_weak_count *v941;
  unint64_t *v942;
  char *v943;
  std::__shared_weak_count *v944;
  unint64_t *v945;
  unint64_t v946;
  unint64_t v947;
  unint64_t v948;
  std::__shared_weak_count *v949;
  unint64_t *v950;
  unint64_t v951;
  uint64_t v952;
  char *v953;
  char *v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  std::__shared_weak_count *v960;
  unint64_t *v961;
  unint64_t v962;
  std::__shared_weak_count *v963;
  unint64_t *v964;
  unint64_t v965;
  uint64_t v966;
  std::__shared_weak_count *v967;
  unint64_t *v968;
  unint64_t v969;
  std::__shared_weak_count *v970;
  unint64_t *v971;
  unint64_t v972;
  std::__shared_weak_count *v973;
  unint64_t *v974;
  unint64_t v975;
  std::__shared_weak_count *v976;
  unint64_t *v977;
  unint64_t v978;
  void *v979;
  std::__shared_weak_count *v980;
  unint64_t *v981;
  unint64_t v982;
  char *v983;
  _BYTE *v984;
  char *v985;
  void *v986;
  void *v987;
  unint64_t v988;
  char *v989;
  void *v990;
  char *v991;
  void *v992;
  void *v993;
  _QWORD *v994;
  unsigned __int8 **v995;
  uint64_t v998;
  int32x2_t v999;
  size_t v1000;
  __int32 v1001;
  const char *v1002;
  unint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  char *v1007;
  void *v1008;
  uint64_t v1009;
  uint64_t v1010;
  unint64_t *v1011;
  _BYTE *v1012;
  char *v1013;
  uint64_t v1014;
  int v1015;
  int v1016;
  uint64_t v1017;
  unint64_t v1018;
  unsigned int v1019;
  unsigned int v1020;
  _QWORD **v1021;
  unsigned __int8 *v1023;
  __int16 *v1024;
  unsigned __int32 v1025;
  unint64_t v1026;
  char *v1027;
  const char *v1028;
  uint64_t v1029;
  __int16 **v1030;
  unint64_t v1031;
  const char *v1032;
  unsigned __int8 *v1033;
  uint64_t v1034;
  __n128 *v1035;
  _QWORD *v1036;
  uint64_t v1037;
  uint64_t v1038;
  unsigned __int8 *v1039;
  char *v1040;
  char *v1041;
  char *v1042;
  char *v1043;
  int v1044;
  int v1045;
  __int16 **v1046;
  uint64_t v1048;
  void *v1049[2];
  char *v1050;
  char *v1051;
  char *v1052;
  unint64_t v1053;
  unint64_t v1054;
  unint64_t v1055;
  uint64_t **v1056;
  void *v1057[2];
  char v1058;
  int **v1059;
  void *v1060;
  _BYTE *v1061;
  std::__shared_weak_count *v1062;
  void *v1063;
  char *v1064;
  _QWORD **v1065;
  _QWORD *v1066[2];
  _DWORD v1067[2];
  int v1068[2];
  _BYTE v1069[24];
  _BYTE v1070[24];
  char __src[8];
  __int128 v1072;
  std::string v1073;
  int v1074;
  const char *v1075;
  int v1076;
  const char *v1077;
  uint64_t v1078;
  std::__shared_weak_count *v1079;
  _BYTE object[56];
  unint64_t v1081;
  char v1082;
  _BYTE v1083[24];
  __int128 v1084;
  char *v1085;
  __int128 __s;
  std::__shared_weak_count *v1087;
  char *v1088;
  std::__shared_weak_count *v1089;
  uint64_t v1090;

  v1090 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  a7[1] = 0;
  *a7 = (uint64_t *)(a7 + 1);
  a7[4] = 0;
  a7[5] = 0;
  a7[6] = 0;
  a7[2] = 0;
  a7[3] = (uint64_t *)(a7 + 4);
  v9 = *(_QWORD **)a3;
  a7[7] = 0;
  a7[8] = 0;
  v1066[1] = 0;
  v1066[0] = 0;
  v1065 = v1066;
  v995 = (unsigned __int8 **)(a3 + 8);
  sub_2236C4048(&v1065, v9, v10, (_QWORD *)(a3 + 8));
  v11 = v1065;
  if (v1065 != v1066)
  {
    v998 = 0;
    v1018 = 0;
    v1056 = a7;
    while (1)
    {
      v1021 = v11;
      v1023 = (unsigned __int8 *)v11 + 25;
      v12 = sub_22342DA5C(a2 + 5, (uint64_t)v11 + 25);
      if (!v12)
        break;
      v13 = (unsigned __int8 *)v12[4];
      v15 = *((_QWORD *)v13 + 30);
      v14 = *((_QWORD *)v13 + 31);
      v16 = v14 - v15;
      if (v14 == v15)
        goto LABEL_1476;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF1)
        sub_22316E078();
      v17 = (__int16 **)operator new(2 * v16);
      v1024 = 0;
      v1013 = (char *)&v17[4 * (v16 >> 4)];
      v1039 = v13;
      v1046 = v17;
      v1030 = v17;
      v1048 = v15 + 16 * (v16 >> 4);
      while (2)
      {
        v18 = sub_22456636C((unsigned __int8 *)v15);
        v19 = (int8x8_t)a2[11];
        if (!*(_QWORD *)&v19)
          goto LABEL_36;
        v20 = (uint8x8_t)vcnt_s8(v19);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          v21 = v18;
          if (v18 >= *(_QWORD *)&v19)
            v21 = v18 % *(_QWORD *)&v19;
        }
        else
        {
          v21 = (*(_QWORD *)&v19 - 1) & v18;
        }
        v22 = *(unsigned __int8 ***)(a2[10] + 8 * v21);
        if (!v22 || (v23 = *v22) == 0)
        {
LABEL_36:
          v29 = atomic_load((unsigned __int8 *)&qword_2557892F0);
          if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
          {
            __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
            __cxa_guard_release(&qword_2557892F0);
          }
          v30 = atomic_load((unsigned __int8 *)&qword_2540CBFD8);
          if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFD8))
          {
            sub_22455F53C(&v1073);
            sub_223174DE4(object, "cv3d.recon.kfplanes");
            sub_2232300E0((uint64_t **)&v1073, (uint64_t)object, &qword_2540CBFD0);
            if ((object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_guard_release(&qword_2540CBFD8);
          }
          if (*(char *)(qword_2540CBFD0 + 39) < 0)
          {
            v31 = *(const void **)(qword_2540CBFD0 + 16);
            v32 = *(_QWORD *)(qword_2540CBFD0 + 24);
          }
          else
          {
            v31 = (const void *)(qword_2540CBFD0 + 16);
            v32 = *(unsigned __int8 *)(qword_2540CBFD0 + 39);
          }
          sub_223195728((uint64_t)&stru_255789280, v31, v32, "SplitGP: KP %.13s is not linked to a GP %.13s", 0x2DuLL);
          v42 = atomic_load((unsigned __int8 *)&qword_2540CBFE8);
          if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFE8))
          {
            sub_22455F53C(&v1073);
            sub_223174DE4(object, "cv3dapi.recon3d.kfplanes");
            sub_2232300E0((uint64_t **)&v1073, (uint64_t)object, &qword_2540CBFE0);
            if ((object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_guard_release(&qword_2540CBFE8);
          }
          *(_QWORD *)v1069 = qword_2540CBFE0;
          if (**(int **)(qword_2540CBFE0 + 56) > 5)
            goto LABEL_9;
          v43 = *(unsigned __int8 *)(qword_2540CBFE0 + 72);
          v44 = sub_22322F254(qword_2540CBFE0, "OSLogSurrogateAppender", 1, 0);
          v45 = v44;
          if (!v43 && !v44)
            goto LABEL_9;
          v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)v1069;
          v1073.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v1073.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v1074 = 5;
          v1075 = "unknown file";
          v1076 = 97;
          v1077 = "unknown function";
          v1078 = 0;
          v1079 = 0;
          sub_2245664AC((unsigned __int8 *)v15, __src);
          sub_2245664AC(v13, v1070);
          v1063 = v1070;
          v46 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
          v47 = (const char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16);
          v1032 = v47;
          if (*(char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v47 = *(const char **)(v46 + 16);
            v48 = *(_QWORD *)(v46 + 24);
            v50 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v50 & 1) == 0)
            {
LABEL_454:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v1083);
                sub_223199C58("com.apple.cv3d", (unint64_t)v1083, &xmmword_255788F40);
                if ((_BYTE)v1084 && (v1083[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1083);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
                a7 = v1056;
              }
            }
          }
          else
          {
            v48 = *(unsigned __int8 *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39);
            v49 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v49 & 1) == 0)
              goto LABEL_454;
          }
          if (byte_255788F57 >= 0)
            v51 = (const char *)&xmmword_255788F40;
          else
            v51 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v52 = byte_255788F57;
          else
            v52 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)object = os_log_create(v51, v47);
          if (v52 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v52 >= 0x17)
          {
            v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v52 | 7) != 0x17)
              v54 = v52 | 7;
            v55 = v54 + 1;
            v53 = operator new(v54 + 1);
            *(_QWORD *)&object[24] = v55 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v53;
            *(_QWORD *)&object[16] = v52;
            a7 = v1056;
          }
          else
          {
            object[31] = v52;
            v53 = &object[8];
            if (!v52)
            {
LABEL_63:
              v53[v52] = 0;
              object[32] = 1;
              if (v48 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v13 = v1039;
              if (v48 >= 0x17)
              {
                v58 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v48 | 7) != 0x17)
                  v58 = v48 | 7;
                v59 = v58 + 1;
                v56 = operator new(v58 + 1);
                v1081 = v59 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v56;
                *(_QWORD *)&object[48] = v48;
              }
              else
              {
                HIBYTE(v1081) = v48;
                v56 = &object[40];
                if (!v48)
                {
                  object[40] = 0;
                  v1082 = 1;
                  v57 = *(NSObject **)object;
                  if ((SHIBYTE(v1081) & 0x80000000) == 0)
                    goto LABEL_67;
LABEL_73:
                  operator delete(*(void **)&object[40]);
                  if (object[32])
                    goto LABEL_74;
                  goto LABEL_76;
                }
              }
              memmove(v56, v47, v48);
              v56[v48] = 0;
              v1082 = 1;
              v57 = *(NSObject **)object;
              if (SHIBYTE(v1081) < 0)
                goto LABEL_73;
LABEL_67:
              if (object[32])
              {
LABEL_74:
                if ((object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
              }
LABEL_76:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v45 && *(_QWORD *)(v45 + 24))
              {
                v60 = _os_log_pack_size();
                v61 = (std::__shared_weak_count_vtbl *)operator new(v60, (std::align_val_t)8uLL);
                v62 = (std::__shared_weak_count *)operator new();
                v62->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v62->__shared_owners_;
                v62->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v62->__shared_weak_owners_ = 0;
                v62[1].__vftable = v61;
                *(_QWORD *)&__s = v61;
                *((_QWORD *)&__s + 1) = v61;
                v1087 = v62;
                v1088 = 0;
                v1089 = 0;
                sub_2236C879C((uint64_t)object, __src, (const char **)&v1063);
                v64 = (char *)operator new(0x50uLL);
                v65 = (std::__shared_weak_count *)v64;
                *((_QWORD *)v64 + 1) = 0;
                v66 = (unint64_t *)(v64 + 8);
                *((_QWORD *)v64 + 2) = 0;
                *(_QWORD *)v64 = &off_24EC20730;
                *((_QWORD *)v64 + 3) = off_24EC20780;
                *((_OWORD *)v64 + 2) = *(_OWORD *)&object[8];
                *((_QWORD *)v64 + 6) = *(_QWORD *)&object[24];
                *(_OWORD *)(v64 + 56) = *(_OWORD *)&object[32];
                *((_QWORD *)v64 + 9) = *(_QWORD *)&object[48];
                v1088 = v64 + 24;
                v1089 = (std::__shared_weak_count *)v64;
                *(_QWORD *)v1083 = v61;
                *(_QWORD *)&v1083[8] = v61;
                *(_QWORD *)&v1083[16] = v62;
                do
                  v67 = __ldxr(p_shared_owners);
                while (__stxr(v67 + 1, p_shared_owners));
                *(_QWORD *)&v1084 = v64 + 24;
                *((_QWORD *)&v1084 + 1) = v64;
                do
                  v68 = __ldxr(v66);
                while (__stxr(v68 + 1, v66));
                v1085 = v64 + 24;
                do
                  v69 = __ldaxr(v66);
                while (__stlxr(v69 - 1, v66));
                if (v69)
                {
                  v70 = v1087;
                  if (!v1087)
                    goto LABEL_99;
                }
                else
                {
                  (*(void (**)(char *))(*(_QWORD *)v64 + 16))(v64);
                  std::__shared_weak_count::__release_weak(v65);
                  v70 = v1087;
                  if (!v1087)
                    goto LABEL_99;
                }
                v77 = (unint64_t *)&v70->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                  std::__shared_weak_count::__release_weak(v70);
                }
LABEL_99:
                v79 = *(_QWORD *)v1083;
                if (v1085[31] >= 0)
                  v80 = v1085 + 8;
                else
                  v80 = (char *)*((_QWORD *)v1085 + 1);
                if (v1085[55] >= 0)
                  v81 = v1085 + 32;
                else
                  v81 = (char *)*((_QWORD *)v1085 + 4);
                v82 = _os_log_pack_fill();
                *(_DWORD *)v82 = 68158466;
                *(_DWORD *)(v82 + 4) = 13;
                *(_WORD *)(v82 + 8) = 2080;
                *(_QWORD *)(v82 + 10) = v80;
                *(_WORD *)(v82 + 18) = 1040;
                *(_DWORD *)(v82 + 20) = 13;
                *(_WORD *)(v82 + 24) = 2080;
                *(_QWORD *)(v82 + 26) = v81;
                v83 = operator new();
                v84 = *(unsigned __int8 *)(v46 + 39);
                v85 = v1032;
                if ((v84 & 0x80u) != 0)
                {
                  v85 = *(const char **)(v46 + 16);
                  v84 = *(_QWORD *)(v46 + 24);
                }
                *(_QWORD *)v83 = v79;
                *(_OWORD *)(v83 + 8) = *(_OWORD *)&v1083[8];
                *(_QWORD *)&v1083[8] = 0;
                *(_QWORD *)&v1083[16] = 0;
                *(_OWORD *)(v83 + 24) = v1084;
                v1084 = 0uLL;
                *(_QWORD *)(v83 + 40) = v85;
                *(_QWORD *)(v83 + 48) = v84;
                *(_BYTE *)(v83 + 56) = 16;
                *(_QWORD *)&__s = 0;
                *(_QWORD *)object = v83;
                a7 = v1056;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v45 + 24) + 40))(*(_QWORD *)(v45 + 24), object);
                v86 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                if (v86)
                {
                  v87 = *(std::__shared_weak_count **)(v86 + 32);
                  if (!v87)
                    goto LABEL_112;
                  v88 = (unint64_t *)&v87->__shared_owners_;
                  do
                    v89 = __ldaxr(v88);
                  while (__stlxr(v89 - 1, v88));
                  if (!v89)
                  {
                    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                    std::__shared_weak_count::__release_weak(v87);
                    v90 = *(std::__shared_weak_count **)(v86 + 16);
                    if (v90)
                    {
LABEL_113:
                      v91 = (unint64_t *)&v90->__shared_owners_;
                      do
                        v92 = __ldaxr(v91);
                      while (__stlxr(v92 - 1, v91));
                      if (!v92)
                      {
                        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                        std::__shared_weak_count::__release_weak(v90);
                      }
                    }
                  }
                  else
                  {
LABEL_112:
                    v90 = *(std::__shared_weak_count **)(v86 + 16);
                    if (v90)
                      goto LABEL_113;
                  }
                  MEMORY[0x227684CE8](v86, 0x10F0C40B62ED6C6);
                  v110 = __s;
                  *(_QWORD *)&__s = 0;
                  if (v110)
                  {
                    v111 = *(std::__shared_weak_count **)(v110 + 32);
                    if (!v111)
                      goto LABEL_156;
                    v112 = (unint64_t *)&v111->__shared_owners_;
                    do
                      v113 = __ldaxr(v112);
                    while (__stlxr(v113 - 1, v112));
                    if (!v113)
                    {
                      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                      std::__shared_weak_count::__release_weak(v111);
                      v114 = *(std::__shared_weak_count **)(v110 + 16);
                      if (v114)
                      {
LABEL_157:
                        v115 = (unint64_t *)&v114->__shared_owners_;
                        do
                          v116 = __ldaxr(v115);
                        while (__stlxr(v116 - 1, v115));
                        if (!v116)
                        {
                          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                          std::__shared_weak_count::__release_weak(v114);
                        }
                      }
                    }
                    else
                    {
LABEL_156:
                      v114 = *(std::__shared_weak_count **)(v110 + 16);
                      if (v114)
                        goto LABEL_157;
                    }
                    MEMORY[0x227684CE8](v110, 0x10F0C40B62ED6C6);
                  }
                }
                v117 = (std::__shared_weak_count *)*((_QWORD *)&v1084 + 1);
                if (!*((_QWORD *)&v1084 + 1))
                  goto LABEL_167;
                v118 = (unint64_t *)(*((_QWORD *)&v1084 + 1) + 8);
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                  v120 = *(std::__shared_weak_count **)&v1083[16];
                  if (*(_QWORD *)&v1083[16])
                  {
LABEL_168:
                    v121 = (unint64_t *)&v120->__shared_owners_;
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                      std::__shared_weak_count::__release_weak(v120);
                    }
                  }
                }
                else
                {
LABEL_167:
                  v120 = *(std::__shared_weak_count **)&v1083[16];
                  if (*(_QWORD *)&v1083[16])
                    goto LABEL_168;
                }
              }
              else
              {
                os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
                *(_QWORD *)object = 0xD04100402;
                *(_WORD *)&object[8] = 2080;
                *(_QWORD *)&object[10] = __src;
                *(_WORD *)&object[18] = 1040;
                *(_DWORD *)&object[20] = 13;
                *(_WORD *)&object[24] = 2080;
                *(_QWORD *)&object[26] = v1063;
                v71 = (void *)_os_log_send_and_compose_impl();
                if (v71)
                  free(v71);
              }
              if (v43)
              {
                sub_2245664AC((unsigned __int8 *)v15, object);
                sub_2245664AC(v1039, v1083);
                sub_22322C138((uint64_t)&v1073, "SplitGP: KP %.13s is not linked to a GP %.13s", object, v1083);
                sub_223182C08((uint64_t)&v1073);
              }
              sub_223182C08((uint64_t)&v1073);
              v123 = v1079;
              if (v1079)
              {
                v124 = (unint64_t *)&v1079->__shared_owners_;
                do
                  v125 = __ldaxr(v124);
                while (__stlxr(v125 - 1, v124));
                if (!v125)
                {
                  ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                  std::__shared_weak_count::__release_weak(v123);
                }
              }
              goto LABEL_9;
            }
          }
          memmove(v53, v51, v52);
          goto LABEL_63;
        }
        if (v20.u32[0] < 2uLL)
        {
          v24 = *(_QWORD *)&v19 - 1;
          while (1)
          {
            v28 = *((_QWORD *)v23 + 1);
            if (v28 == v18)
            {
              if (*((_QWORD *)v23 + 2) == *(_QWORD *)v15 && *((_QWORD *)v23 + 3) == *(_QWORD *)(v15 + 8))
                goto LABEL_91;
            }
            else if ((v28 & v24) != v21)
            {
              goto LABEL_36;
            }
            v23 = *(unsigned __int8 **)v23;
            if (!v23)
              goto LABEL_36;
          }
        }
        while (1)
        {
          v26 = *((_QWORD *)v23 + 1);
          if (v26 == v18)
            break;
          if (v26 >= *(_QWORD *)&v19)
            v26 %= *(_QWORD *)&v19;
          if (v26 != v21)
            goto LABEL_36;
LABEL_23:
          v23 = *(unsigned __int8 **)v23;
          if (!v23)
            goto LABEL_36;
        }
        v25 = *((_QWORD *)v23 + 2) == *(_QWORD *)v15 && *((_QWORD *)v23 + 3) == *(_QWORD *)(v15 + 8);
        if (!v25)
          goto LABEL_23;
LABEL_91:
        v72 = *((_QWORD *)v23 + 5);
        v73 = sub_22456636C((unsigned __int8 *)v72);
        v74 = (int8x8_t)a2[1];
        if (!*(_QWORD *)&v74)
          goto LABEL_140;
        v75 = (uint8x8_t)vcnt_s8(v74);
        v75.i16[0] = vaddlv_u8(v75);
        if (v75.u32[0] > 1uLL)
        {
          v76 = v73;
          if (v73 >= *(_QWORD *)&v74)
            v76 = v73 % *(_QWORD *)&v74;
        }
        else
        {
          v76 = (*(_QWORD *)&v74 - 1) & v73;
        }
        v93 = *(_QWORD **)(*a2 + 8 * v76);
        if (!v93 || (v94 = (_QWORD *)*v93) == 0)
        {
LABEL_140:
          v100 = atomic_load((unsigned __int8 *)&qword_2557892F0);
          if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
          {
            __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
            __cxa_guard_release(&qword_2557892F0);
          }
          sub_2236BC11C(object);
          if (*(char *)(*(_QWORD *)object + 39) < 0)
          {
            v101 = *(const void **)(*(_QWORD *)object + 16);
            v102 = *(_QWORD *)(*(_QWORD *)object + 24);
          }
          else
          {
            v101 = (const void *)(*(_QWORD *)object + 16);
            v102 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
          }
          sub_223195728((uint64_t)&stru_255789280, v101, v102, "SplitGP: stale KP %.13s in GP %.13s", 0x23uLL);
          sub_2236BC210(v1069);
          if (**(int **)(*(_QWORD *)v1069 + 56) > 5)
            goto LABEL_8;
          v103 = *(unsigned __int8 *)(*(_QWORD *)v1069 + 72);
          v104 = sub_22322F254(*(uint64_t *)v1069, "OSLogSurrogateAppender", 1, 0);
          v105 = v104;
          if (!v103 && !v104)
            goto LABEL_8;
          v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)v1069;
          v1073.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v1073.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v1074 = 5;
          v1075 = "unknown file";
          v1076 = 107;
          v1077 = "unknown function";
          v1078 = 0;
          v1079 = 0;
          v1033 = v23 + 16;
          sub_2245664AC(v23 + 16, __src);
          sub_2245664AC(v13, v1070);
          v1063 = v1070;
          v106 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
          if (*(char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v108 = *(const char **)(v106 + 16);
            v107 = *(_QWORD *)(v106 + 24);
            v1009 = *(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16;
            v126 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v126 & 1) == 0)
            {
LABEL_461:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v1083);
                sub_223199C58("com.apple.cv3d", (unint64_t)v1083, &xmmword_255788F40);
                if ((_BYTE)v1084 && (v1083[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1083);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
            }
          }
          else
          {
            v107 = *(unsigned __int8 *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39);
            v108 = (const char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16);
            v1009 = (uint64_t)v108;
            v109 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v109 & 1) == 0)
              goto LABEL_461;
          }
          if (byte_255788F57 >= 0)
            v127 = (const char *)&xmmword_255788F40;
          else
            v127 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v128 = byte_255788F57;
          else
            v128 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)object = os_log_create(v127, v108);
          if (v128 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v128 >= 0x17)
          {
            v130 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v128 | 7) != 0x17)
              v130 = v128 | 7;
            v131 = v130 + 1;
            v129 = operator new(v130 + 1);
            *(_QWORD *)&object[24] = v131 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v129;
            *(_QWORD *)&object[16] = v128;
          }
          else
          {
            object[31] = v128;
            v129 = &object[8];
            if (!v128)
            {
LABEL_195:
              v129[v128] = 0;
              object[32] = 1;
              if (v107 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v13 = v1039;
              if (v107 >= 0x17)
              {
                v134 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v107 | 7) != 0x17)
                  v134 = v107 | 7;
                v135 = v134 + 1;
                v132 = operator new(v134 + 1);
                v1081 = v135 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v132;
                *(_QWORD *)&object[48] = v107;
              }
              else
              {
                HIBYTE(v1081) = v107;
                v132 = &object[40];
                if (!v107)
                {
                  object[40] = 0;
                  v1082 = 1;
                  v133 = *(NSObject **)object;
                  if ((SHIBYTE(v1081) & 0x80000000) == 0)
                    goto LABEL_199;
LABEL_205:
                  operator delete(*(void **)&object[40]);
                  if (object[32])
                    goto LABEL_206;
                  goto LABEL_208;
                }
              }
              memmove(v132, v108, v107);
              v132[v107] = 0;
              v1082 = 1;
              v133 = *(NSObject **)object;
              if (SHIBYTE(v1081) < 0)
                goto LABEL_205;
LABEL_199:
              if (object[32])
              {
LABEL_206:
                if ((object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
              }
LABEL_208:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v105 && *(_QWORD *)(v105 + 24))
              {
                v136 = _os_log_pack_size();
                v137 = (std::__shared_weak_count_vtbl *)operator new(v136, (std::align_val_t)8uLL);
                v138 = (std::__shared_weak_count *)operator new();
                v138->__shared_owners_ = 0;
                v139 = (unint64_t *)&v138->__shared_owners_;
                v138->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v138->__shared_weak_owners_ = 0;
                v138[1].__vftable = v137;
                *(_QWORD *)&__s = v137;
                *((_QWORD *)&__s + 1) = v137;
                v1087 = v138;
                v1088 = 0;
                v1089 = 0;
                sub_2236C879C((uint64_t)object, __src, (const char **)&v1063);
                v140 = (char *)operator new(0x50uLL);
                v141 = (std::__shared_weak_count *)v140;
                *((_QWORD *)v140 + 1) = 0;
                v142 = (unint64_t *)(v140 + 8);
                *((_QWORD *)v140 + 2) = 0;
                *(_QWORD *)v140 = &off_24EC20730;
                *((_QWORD *)v140 + 3) = off_24EC20780;
                *((_OWORD *)v140 + 2) = *(_OWORD *)&object[8];
                *((_QWORD *)v140 + 6) = *(_QWORD *)&object[24];
                *(_OWORD *)(v140 + 56) = *(_OWORD *)&object[32];
                *((_QWORD *)v140 + 9) = *(_QWORD *)&object[48];
                v1088 = v140 + 24;
                v1089 = (std::__shared_weak_count *)v140;
                *(_QWORD *)v1083 = v137;
                *(_QWORD *)&v1083[8] = v137;
                *(_QWORD *)&v1083[16] = v138;
                do
                  v143 = __ldxr(v139);
                while (__stxr(v143 + 1, v139));
                *(_QWORD *)&v1084 = v140 + 24;
                *((_QWORD *)&v1084 + 1) = v140;
                do
                  v144 = __ldxr(v142);
                while (__stxr(v144 + 1, v142));
                v1085 = v140 + 24;
                do
                  v145 = __ldaxr(v142);
                while (__stlxr(v145 - 1, v142));
                if (v145)
                {
                  v146 = v1087;
                  if (!v1087)
                    goto LABEL_255;
                }
                else
                {
                  (*(void (**)(char *))(*(_QWORD *)v140 + 16))(v140);
                  std::__shared_weak_count::__release_weak(v141);
                  v146 = v1087;
                  if (!v1087)
                    goto LABEL_255;
                }
                v163 = (unint64_t *)&v146->__shared_owners_;
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 - 1, v163));
                if (!v164)
                {
                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                  std::__shared_weak_count::__release_weak(v146);
                }
LABEL_255:
                v165 = *(_QWORD *)v1083;
                if (v1085[31] >= 0)
                  v166 = v1085 + 8;
                else
                  v166 = (char *)*((_QWORD *)v1085 + 1);
                if (v1085[55] >= 0)
                  v167 = v1085 + 32;
                else
                  v167 = (char *)*((_QWORD *)v1085 + 4);
                v168 = _os_log_pack_fill();
                *(_DWORD *)v168 = 68158466;
                *(_DWORD *)(v168 + 4) = 13;
                *(_WORD *)(v168 + 8) = 2080;
                *(_QWORD *)(v168 + 10) = v166;
                *(_WORD *)(v168 + 18) = 1040;
                *(_DWORD *)(v168 + 20) = 13;
                *(_WORD *)(v168 + 24) = 2080;
                *(_QWORD *)(v168 + 26) = v167;
                v169 = operator new();
                v170 = *(unsigned __int8 *)(v106 + 39);
                v171 = v1009;
                if ((v170 & 0x80u) != 0)
                {
                  v171 = *(_QWORD *)(v106 + 16);
                  v170 = *(_QWORD *)(v106 + 24);
                }
                *(_QWORD *)v169 = v165;
                *(_OWORD *)(v169 + 8) = *(_OWORD *)&v1083[8];
                *(_QWORD *)&v1083[8] = 0;
                *(_QWORD *)&v1083[16] = 0;
                *(_OWORD *)(v169 + 24) = v1084;
                v1084 = 0uLL;
                *(_QWORD *)(v169 + 40) = v171;
                *(_QWORD *)(v169 + 48) = v170;
                *(_BYTE *)(v169 + 56) = 16;
                *(_QWORD *)&__s = 0;
                *(_QWORD *)object = v169;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v105 + 24) + 40))(*(_QWORD *)(v105 + 24), object);
                v13 = v1039;
                v172 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                if (v172)
                {
                  v173 = *(std::__shared_weak_count **)(v172 + 32);
                  if (v173)
                  {
                    v174 = (unint64_t *)&v173->__shared_owners_;
                    do
                      v175 = __ldaxr(v174);
                    while (__stlxr(v175 - 1, v174));
                    if (!v175)
                    {
                      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                      std::__shared_weak_count::__release_weak(v173);
                    }
                  }
                  v176 = *(std::__shared_weak_count **)(v172 + 16);
                  if (v176)
                  {
                    v177 = (unint64_t *)&v176->__shared_owners_;
                    do
                      v178 = __ldaxr(v177);
                    while (__stlxr(v178 - 1, v177));
                    if (!v178)
                    {
                      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                      std::__shared_weak_count::__release_weak(v176);
                    }
                  }
                  MEMORY[0x227684CE8](v172, 0x10F0C40B62ED6C6);
                  v179 = __s;
                  *(_QWORD *)&__s = 0;
                  if (v179)
                  {
                    v180 = *(std::__shared_weak_count **)(v179 + 32);
                    if (v180)
                    {
                      v181 = (unint64_t *)&v180->__shared_owners_;
                      do
                        v182 = __ldaxr(v181);
                      while (__stlxr(v182 - 1, v181));
                      if (!v182)
                      {
                        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                        std::__shared_weak_count::__release_weak(v180);
                      }
                    }
                    v183 = *(std::__shared_weak_count **)(v179 + 16);
                    if (v183)
                    {
                      v184 = (unint64_t *)&v183->__shared_owners_;
                      do
                        v185 = __ldaxr(v184);
                      while (__stlxr(v185 - 1, v184));
                      if (!v185)
                      {
                        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                        std::__shared_weak_count::__release_weak(v183);
                      }
                    }
                    MEMORY[0x227684CE8](v179, 0x10F0C40B62ED6C6);
                  }
                }
                v186 = (std::__shared_weak_count *)*((_QWORD *)&v1084 + 1);
                if (*((_QWORD *)&v1084 + 1))
                {
                  v187 = (unint64_t *)(*((_QWORD *)&v1084 + 1) + 8);
                  do
                    v188 = __ldaxr(v187);
                  while (__stlxr(v188 - 1, v187));
                  if (!v188)
                  {
                    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                    std::__shared_weak_count::__release_weak(v186);
                    v189 = *(std::__shared_weak_count **)&v1083[16];
                    if (*(_QWORD *)&v1083[16])
                      goto LABEL_291;
                    goto LABEL_294;
                  }
                }
                v189 = *(std::__shared_weak_count **)&v1083[16];
                if (!*(_QWORD *)&v1083[16])
                  goto LABEL_294;
LABEL_291:
                v190 = (unint64_t *)&v189->__shared_owners_;
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (v191)
                {
LABEL_294:
                  if (v103)
                    goto LABEL_295;
LABEL_296:
                  sub_223182C08((uint64_t)&v1073);
                  v192 = v1079;
                  if (v1079)
                  {
                    v193 = (unint64_t *)&v1079->__shared_owners_;
                    do
                      v194 = __ldaxr(v193);
                    while (__stlxr(v194 - 1, v193));
LABEL_299:
                    if (!v194)
                    {
                      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                      std::__shared_weak_count::__release_weak(v192);
                    }
                  }
LABEL_8:
                  a7 = v1056;
                  goto LABEL_9;
                }
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v189);
                if (!v103)
                  goto LABEL_296;
              }
              else
              {
                os_log_type_enabled(v133, OS_LOG_TYPE_ERROR);
                *(_QWORD *)object = 0xD04100402;
                *(_WORD *)&object[8] = 2080;
                *(_QWORD *)&object[10] = __src;
                *(_WORD *)&object[18] = 1040;
                *(_DWORD *)&object[20] = 13;
                *(_WORD *)&object[24] = 2080;
                *(_QWORD *)&object[26] = v1063;
                v147 = (void *)_os_log_send_and_compose_impl();
                if (!v147)
                  goto LABEL_294;
                free(v147);
                if (!v103)
                  goto LABEL_296;
              }
LABEL_295:
              sub_2245664AC(v1033, object);
              sub_2245664AC(v13, v1083);
              sub_22322C138((uint64_t)&v1073, "SplitGP: stale KP %.13s in GP %.13s", object, v1083);
              sub_223182C08((uint64_t)&v1073);
              goto LABEL_296;
            }
          }
          memmove(v129, v127, v128);
          goto LABEL_195;
        }
        if (v75.u32[0] < 2uLL)
        {
          v95 = *(_QWORD *)&v74 - 1;
          while (1)
          {
            v99 = v94[1];
            if (v99 == v73)
            {
              if (v94[2] == *(_QWORD *)v72 && v94[3] == *(_QWORD *)(v72 + 8))
                goto LABEL_224;
            }
            else if ((v99 & v95) != v76)
            {
              goto LABEL_140;
            }
            v94 = (_QWORD *)*v94;
            if (!v94)
              goto LABEL_140;
          }
        }
        while (1)
        {
          v97 = v94[1];
          if (v97 == v73)
            break;
          if (v97 >= *(_QWORD *)&v74)
            v97 %= *(_QWORD *)&v74;
          if (v97 != v76)
            goto LABEL_140;
LABEL_127:
          v94 = (_QWORD *)*v94;
          if (!v94)
            goto LABEL_140;
        }
        if (v94[2] != *(_QWORD *)v72 || v94[3] != *(_QWORD *)(v72 + 8))
          goto LABEL_127;
LABEL_224:
        v148 = v94[4];
        v149 = *(_QWORD *)(v148 + 208);
        v150 = *(_QWORD **)(v148 + 216);
        if ((_QWORD *)v149 != v150)
        {
          while (*(_QWORD *)v149 != *(_QWORD *)v15 || *(_QWORD *)(v149 + 8) != *(_QWORD *)(v15 + 8))
          {
            v149 += 424;
            if ((_QWORD *)v149 == v150)
              goto LABEL_247;
          }
        }
        v152 = v149 == (_QWORD)v150;
        if ((_QWORD *)v149 == v150)
          v153 = 0;
        else
          v153 = v149;
        if (v152)
        {
LABEL_247:
          v160 = atomic_load((unsigned __int8 *)&qword_2557892F0);
          if ((v160 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
          {
            __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
            __cxa_guard_release(&qword_2557892F0);
          }
          sub_2236BC11C(object);
          if (*(char *)(*(_QWORD *)object + 39) < 0)
          {
            v161 = *(const void **)(*(_QWORD *)object + 16);
            v162 = *(_QWORD *)(*(_QWORD *)object + 24);
          }
          else
          {
            v161 = (const void *)(*(_QWORD *)object + 16);
            v162 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
          }
          sub_223195728((uint64_t)&stru_255789280, v161, v162, "SplitGP: KP %.13s in GP %.13s missing from KFS", 0x2EuLL);
          sub_2236BC210(v1069);
          if (**(int **)(*(_QWORD *)v1069 + 56) > 5)
            goto LABEL_8;
          v195 = *(unsigned __int8 *)(*(_QWORD *)v1069 + 72);
          v196 = sub_22322F254(*(uint64_t *)v1069, "OSLogSurrogateAppender", 1, 0);
          v197 = v196;
          if (!v195 && !v196)
            goto LABEL_8;
          v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)v1069;
          v1073.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v1073.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v1074 = 5;
          v1075 = "unknown file";
          v1076 = 117;
          v1077 = "unknown function";
          v1078 = 0;
          v1079 = 0;
          sub_2245664AC((unsigned __int8 *)v15, __src);
          sub_2245664AC(v13, v1070);
          v1063 = v1070;
          v198 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
          if (*(char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v200 = *(const char **)(v198 + 16);
            v199 = *(_QWORD *)(v198 + 24);
            v1034 = *(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16;
            v221 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v221 & 1) == 0)
            {
LABEL_468:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v1083);
                sub_223199C58("com.apple.cv3d", (unint64_t)v1083, &xmmword_255788F40);
                if ((_BYTE)v1084 && (v1083[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1083);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
            }
          }
          else
          {
            v199 = *(unsigned __int8 *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39);
            v200 = (const char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16);
            v1034 = (uint64_t)v200;
            v201 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v201 & 1) == 0)
              goto LABEL_468;
          }
          if (byte_255788F57 >= 0)
            v222 = (const char *)&xmmword_255788F40;
          else
            v222 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v223 = byte_255788F57;
          else
            v223 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)object = os_log_create(v222, v200);
          if (v223 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v223 >= 0x17)
          {
            v225 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v223 | 7) != 0x17)
              v225 = v223 | 7;
            v226 = v225 + 1;
            v224 = operator new(v225 + 1);
            *(_QWORD *)&object[24] = v226 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v224;
            *(_QWORD *)&object[16] = v223;
          }
          else
          {
            object[31] = v223;
            v224 = &object[8];
            if (!v223)
            {
LABEL_365:
              v224[v223] = 0;
              object[32] = 1;
              if (v199 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v13 = v1039;
              if (v199 >= 0x17)
              {
                v228 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v199 | 7) != 0x17)
                  v228 = v199 | 7;
                v229 = v228 + 1;
                v227 = operator new(v228 + 1);
                v1081 = v229 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v227;
                *(_QWORD *)&object[48] = v199;
              }
              else
              {
                HIBYTE(v1081) = v199;
                v227 = &object[40];
                if (!v199)
                {
LABEL_373:
                  v227[v199] = 0;
                  v1082 = 1;
                  v230 = *(NSObject **)object;
                  if (SHIBYTE(v1081) < 0)
                    operator delete(*(void **)&object[40]);
                  if (object[32] && (object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (v197 && *(_QWORD *)(v197 + 24))
                  {
                    v231 = _os_log_pack_size();
                    v232 = (std::__shared_weak_count_vtbl *)operator new(v231, (std::align_val_t)8uLL);
                    v233 = (std::__shared_weak_count *)operator new();
                    v233->__shared_owners_ = 0;
                    v234 = (unint64_t *)&v233->__shared_owners_;
                    v233->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v233->__shared_weak_owners_ = 0;
                    v233[1].__vftable = v232;
                    *(_QWORD *)&__s = v232;
                    *((_QWORD *)&__s + 1) = v232;
                    v1087 = v233;
                    v1088 = 0;
                    v1089 = 0;
                    sub_2236C879C((uint64_t)object, __src, (const char **)&v1063);
                    v235 = (char *)operator new(0x50uLL);
                    v236 = (std::__shared_weak_count *)v235;
                    *((_QWORD *)v235 + 1) = 0;
                    v237 = (unint64_t *)(v235 + 8);
                    *((_QWORD *)v235 + 2) = 0;
                    *(_QWORD *)v235 = &off_24EC20730;
                    *((_QWORD *)v235 + 3) = off_24EC20780;
                    *((_OWORD *)v235 + 2) = *(_OWORD *)&object[8];
                    *((_QWORD *)v235 + 6) = *(_QWORD *)&object[24];
                    *(_OWORD *)(v235 + 56) = *(_OWORD *)&object[32];
                    *((_QWORD *)v235 + 9) = *(_QWORD *)&object[48];
                    v1088 = v235 + 24;
                    v1089 = (std::__shared_weak_count *)v235;
                    *(_QWORD *)v1083 = v232;
                    *(_QWORD *)&v1083[8] = v232;
                    *(_QWORD *)&v1083[16] = v233;
                    do
                      v238 = __ldxr(v234);
                    while (__stxr(v238 + 1, v234));
                    *(_QWORD *)&v1084 = v235 + 24;
                    *((_QWORD *)&v1084 + 1) = v235;
                    do
                      v239 = __ldxr(v237);
                    while (__stxr(v239 + 1, v237));
                    v1085 = v235 + 24;
                    do
                      v240 = __ldaxr(v237);
                    while (__stlxr(v240 - 1, v237));
                    if (!v240)
                    {
                      (*(void (**)(char *))(*(_QWORD *)v235 + 16))(v235);
                      std::__shared_weak_count::__release_weak(v236);
                    }
                    v241 = v1087;
                    if (v1087)
                    {
                      v242 = (unint64_t *)&v1087->__shared_owners_;
                      do
                        v243 = __ldaxr(v242);
                      while (__stlxr(v243 - 1, v242));
                      if (!v243)
                      {
                        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                        std::__shared_weak_count::__release_weak(v241);
                      }
                    }
                    v244 = *(_QWORD *)v1083;
                    if (v1085[31] >= 0)
                      v245 = v1085 + 8;
                    else
                      v245 = (char *)*((_QWORD *)v1085 + 1);
                    if (v1085[55] >= 0)
                      v246 = v1085 + 32;
                    else
                      v246 = (char *)*((_QWORD *)v1085 + 4);
                    v247 = _os_log_pack_fill();
                    *(_DWORD *)v247 = 68158466;
                    *(_DWORD *)(v247 + 4) = 13;
                    *(_WORD *)(v247 + 8) = 2080;
                    *(_QWORD *)(v247 + 10) = v245;
                    *(_WORD *)(v247 + 18) = 1040;
                    *(_DWORD *)(v247 + 20) = 13;
                    *(_WORD *)(v247 + 24) = 2080;
                    *(_QWORD *)(v247 + 26) = v246;
                    v248 = operator new();
                    v249 = *(unsigned __int8 *)(v198 + 39);
                    v250 = v1034;
                    if ((v249 & 0x80u) != 0)
                    {
                      v250 = *(_QWORD *)(v198 + 16);
                      v249 = *(_QWORD *)(v198 + 24);
                    }
                    *(_QWORD *)v248 = v244;
                    *(_OWORD *)(v248 + 8) = *(_OWORD *)&v1083[8];
                    *(_QWORD *)&v1083[8] = 0;
                    *(_QWORD *)&v1083[16] = 0;
                    *(_OWORD *)(v248 + 24) = v1084;
                    v1084 = 0uLL;
                    *(_QWORD *)(v248 + 40) = v250;
                    *(_QWORD *)(v248 + 48) = v249;
                    *(_BYTE *)(v248 + 56) = 16;
                    *(_QWORD *)&__s = 0;
                    *(_QWORD *)object = v248;
                    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v197 + 24) + 40))(*(_QWORD *)(v197 + 24), object);
                    v13 = v1039;
                    v251 = *(_QWORD *)object;
                    *(_QWORD *)object = 0;
                    if (v251)
                    {
                      v252 = *(std::__shared_weak_count **)(v251 + 32);
                      if (v252)
                      {
                        v253 = (unint64_t *)&v252->__shared_owners_;
                        do
                          v254 = __ldaxr(v253);
                        while (__stlxr(v254 - 1, v253));
                        if (!v254)
                        {
                          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                          std::__shared_weak_count::__release_weak(v252);
                        }
                      }
                      v255 = *(std::__shared_weak_count **)(v251 + 16);
                      if (v255)
                      {
                        v256 = (unint64_t *)&v255->__shared_owners_;
                        do
                          v257 = __ldaxr(v256);
                        while (__stlxr(v257 - 1, v256));
                        if (!v257)
                        {
                          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                          std::__shared_weak_count::__release_weak(v255);
                        }
                      }
                      MEMORY[0x227684CE8](v251, 0x10F0C40B62ED6C6);
                      v258 = __s;
                      *(_QWORD *)&__s = 0;
                      if (v258)
                      {
                        v259 = *(std::__shared_weak_count **)(v258 + 32);
                        if (v259)
                        {
                          v260 = (unint64_t *)&v259->__shared_owners_;
                          do
                            v261 = __ldaxr(v260);
                          while (__stlxr(v261 - 1, v260));
                          if (!v261)
                          {
                            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                            std::__shared_weak_count::__release_weak(v259);
                          }
                        }
                        v262 = *(std::__shared_weak_count **)(v258 + 16);
                        if (v262)
                        {
                          v263 = (unint64_t *)&v262->__shared_owners_;
                          do
                            v264 = __ldaxr(v263);
                          while (__stlxr(v264 - 1, v263));
                          if (!v264)
                          {
                            ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                            std::__shared_weak_count::__release_weak(v262);
                          }
                        }
                        MEMORY[0x227684CE8](v258, 0x10F0C40B62ED6C6);
                      }
                    }
                    v265 = (std::__shared_weak_count *)*((_QWORD *)&v1084 + 1);
                    if (*((_QWORD *)&v1084 + 1))
                    {
                      v266 = (unint64_t *)(*((_QWORD *)&v1084 + 1) + 8);
                      do
                        v267 = __ldaxr(v266);
                      while (__stlxr(v267 - 1, v266));
                      if (!v267)
                      {
                        ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                        std::__shared_weak_count::__release_weak(v265);
                      }
                    }
                    v268 = *(std::__shared_weak_count **)&v1083[16];
                    if (*(_QWORD *)&v1083[16])
                    {
                      v269 = (unint64_t *)(*(_QWORD *)&v1083[16] + 8);
                      do
                        v270 = __ldaxr(v269);
                      while (__stlxr(v270 - 1, v269));
                      if (!v270)
                      {
                        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                        std::__shared_weak_count::__release_weak(v268);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v230, OS_LOG_TYPE_ERROR);
                    *(_QWORD *)object = 0xD04100402;
                    *(_WORD *)&object[8] = 2080;
                    *(_QWORD *)&object[10] = __src;
                    *(_WORD *)&object[18] = 1040;
                    *(_DWORD *)&object[20] = 13;
                    *(_WORD *)&object[24] = 2080;
                    *(_QWORD *)&object[26] = v1063;
                    v271 = (void *)_os_log_send_and_compose_impl();
                    if (v271)
                      free(v271);
                  }
                  if (v195)
                  {
                    sub_2245664AC((unsigned __int8 *)v15, object);
                    sub_2245664AC(v13, v1083);
                    sub_22322C138((uint64_t)&v1073, "SplitGP: KP %.13s in GP %.13s missing from KFS", object, v1083);
                    sub_223182C08((uint64_t)&v1073);
                  }
                  sub_223182C08((uint64_t)&v1073);
                  v192 = v1079;
                  if (v1079)
                  {
                    v272 = (unint64_t *)&v1079->__shared_owners_;
                    do
                      v194 = __ldaxr(v272);
                    while (__stlxr(v194 - 1, v272));
                    goto LABEL_299;
                  }
                  goto LABEL_8;
                }
              }
              memmove(v227, v200, v199);
              goto LABEL_373;
            }
          }
          memmove(v224, v222, v223);
          goto LABEL_365;
        }
        v154 = v153 | v149 & 0xFFFFFFFFFFFFFF00;
        if (*(_QWORD *)(v154 + 0x110) == *(_QWORD *)(v154 + 0x108))
          goto LABEL_245;
        v155 = *(__int16 *)((v153 | v149 & 0xFFFFFFFFFFFFFF00) + 0x148);
        if ((v155 & 0x80000000) == 0)
        {
          v156 = *(__int16 *)(v154 + 330);
          if ((v156 & 0x80000000) == 0)
            goto LABEL_240;
        }
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_1530;
        }
        LOWORD(v155) = *(_WORD *)(v154 + 328);
        LOWORD(v156) = *(_WORD *)(v154 + 330);
LABEL_240:
        if (*(_WORD *)(v154 + 332) - (_WORD)v155 != 0xFFFF && (unsigned __int16)~(*(_WORD *)(v154 + 334) - v156) != 0)
        {
          v159 = (__int16)v155;
          v158 = (__int16)v155 + (__int16)(*(_WORD *)(v154 + 332) - v155);
          if (*(_QWORD *)(v154 + 272) != *(_QWORD *)(v154 + 264))
            goto LABEL_313;
LABEL_322:
          v205 = 0;
          v203 = -1;
          goto LABEL_323;
        }
LABEL_245:
        v158 = 0;
        v159 = -1;
        if (*(_QWORD *)(v154 + 272) == *(_QWORD *)(v154 + 264))
          goto LABEL_322;
LABEL_313:
        v202 = *(__int16 *)(v154 + 328);
        if (v202 < 0 || (v203 = *(__int16 *)(v154 + 330), (v203 & 0x80000000) != 0))
        {
          if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
          {
            LOWORD(v202) = *(_WORD *)(v154 + 328);
            LOWORD(v203) = *(_WORD *)(v154 + 330);
            goto LABEL_317;
          }
LABEL_1530:
          abort();
        }
LABEL_317:
        if (*(_WORD *)(v154 + 332) - (_WORD)v202 == 0xFFFF || (unsigned __int16)~(*(_WORD *)(v154 + 334) - v203) == 0)
          goto LABEL_322;
        v203 = (__int16)v203;
        v205 = (__int16)v203 + (__int16)(*(_WORD *)(v154 + 334) - v203);
LABEL_323:
        if (v158 >= v159)
          v206 = v158 - v159 + 1;
        else
          v206 = 0;
        v207 = v205 >= v203;
        v208 = v205 - v203;
        if (v207)
          v209 = v208 + 1;
        else
          v209 = 0;
        v210 = (float)(v209 * v206);
        if (v1030 < (__int16 **)v1013)
        {
          *v1030 = (__int16 *)v154;
          v1030[1] = (__int16 *)v148;
          *((float *)v1030 + 4) = v210;
          v211 = v1024;
          v1030[3] = v1024;
          v1030 += 4;
          goto LABEL_347;
        }
        v212 = ((char *)v1030 - (char *)v1046) >> 5;
        v213 = v212 + 1;
        if ((unint64_t)(v212 + 1) >> 59)
          sub_22316E078();
        if ((v1013 - (char *)v1046) >> 4 > v213)
          v213 = (v1013 - (char *)v1046) >> 4;
        if ((unint64_t)(v1013 - (char *)v1046) >= 0x7FFFFFFFFFFFFFE0)
          v214 = 0x7FFFFFFFFFFFFFFLL;
        else
          v214 = v213;
        if (v214)
        {
          if (v214 >> 59)
            sub_223174E94();
          v215 = (char *)operator new(32 * v214);
        }
        else
        {
          v215 = 0;
        }
        v216 = &v215[32 * v212];
        *(_QWORD *)v216 = v154;
        *((_QWORD *)v216 + 1) = v148;
        *((float *)v216 + 4) = v210;
        *((_QWORD *)v216 + 3) = v1024;
        if (v1030 == v1046)
        {
          v220 = &v215[32 * v212];
          v218 = v1046;
          v1013 = &v215[32 * v214];
          v1030 = (__int16 **)(v216 + 32);
          if (v1046)
            goto LABEL_345;
        }
        else
        {
          v217 = &v215[32 * v212];
          v218 = v1046;
          v219 = (int8x16_t *)v1030;
          do
          {
            v33 = v219[-1];
            v220 = v217 - 32;
            *((int8x16_t *)v217 - 2) = v219[-2];
            *((int8x16_t *)v217 - 1) = v33;
            v219 -= 2;
            v217 -= 32;
          }
          while (v219 != (int8x16_t *)v1046);
          v1013 = &v215[32 * v214];
          v1030 = (__int16 **)(v216 + 32);
          if (v1046)
LABEL_345:
            operator delete(v218);
        }
        v1046 = (__int16 **)v220;
        v211 = v1024;
LABEL_347:
        v1024 = (__int16 *)((char *)v211 + 1);
LABEL_9:
        v15 += 16;
        if (v15 != v1048)
          continue;
        break;
      }
      v273 = (char *)v1030 - (char *)v1046;
      if ((unint64_t)((char *)v1030 - (char *)v1046) < 0x40 || (v274 = v1046, v1046 == v1030))
      {
LABEL_475:
        v275 = v1046;
        if (v1046)
          goto LABEL_476;
        goto LABEL_1476;
      }
      while (1)
      {
        v276 = *v274;
        if (*((_QWORD *)*v274 + 34) == *((_QWORD *)*v274 + 33))
        {
          v281 = 0;
          v283 = 0xFFFFFFFF00000000;
          v284 = -1;
        }
        else
        {
          v277 = v276[164];
          if (v277 < 0 || (v278 = v276[165], v278 < 0))
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            LOWORD(v277) = v276[164];
            LOWORD(v278) = v276[165];
          }
          v279 = v276[166] - (_WORD)v277 == 0xFFFF || (unsigned __int16)~(v276[167] - v278) == 0;
          v280 = (__int16)v277;
          v281 = ((__int16)v277 + (__int16)(v276[166] - v277)) | ((unint64_t)((__int16)(v276[167] - v278) + (__int16)v278) << 32);
          v282 = (uint64_t)(__int16)v278 << 32;
          if (v279)
            v281 = 0;
          v283 = 0xFFFFFFFF00000000;
          if (v279)
          {
            v284 = -1;
          }
          else
          {
            v283 = v282;
            v284 = v280;
          }
        }
        v285 = 0;
        v286 = HIDWORD(v281) >= HIDWORD(v283) ? (HIDWORD(v281) - HIDWORD(v283) + 1) : 0;
        v207 = v281 >= v284;
        v287 = v281 - v284;
        v288 = 0;
        v289 = 0;
        v290 = 0;
        v291 = 0;
        v292 = v207 ? (v287 + 1) : 0;
        if ((_DWORD)v292)
        {
          v293 = 0;
          if ((_DWORD)v286)
          {
            v293 = v286 * (unint64_t)v292;
            v294 = v292 - 1 + 2 * v284;
            v295 = v286 - 1 + ((v283 >> 31) & 0xFFFFFFFE);
            v296 = 12 * v293 * v294;
            v297 = (v292 - 1 + (v292 - 1) * v292) * 4 * v293 + v296 * v294;
            v298 = v295 * 12 * v293;
            v285 = v297 / 48;
            v288 = (uint64_t)((v286 - 1 + (v286 - 1) * v286) * 4 * v293 + v298 * v295) / 48;
            v299 = (unsigned __int128)(v296 * v295 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
            v289 = (v299 >> 3) + ((unint64_t)v299 >> 63);
            v290 = v296 / 24;
            v291 = v298 / 24;
          }
        }
        else
        {
          v293 = 0;
        }
        *(_QWORD *)object = v285;
        *(_QWORD *)&object[8] = v288;
        *(_QWORD *)&object[16] = v289;
        *(_QWORD *)&object[24] = v290;
        *(_QWORD *)&object[32] = v291;
        *(_QWORD *)&object[40] = v293;
        v300 = (float32x2_t *)*v274;
        v36.i32[0] = *((_DWORD *)*v274 + 9);
        v37.i64[0] = *(_QWORD *)(*v274 + 14);
        v34.i32[0] = *((_DWORD *)v13 + 35);
        v35.i64[0] = *(_QWORD *)(v13 + 132);
        v301 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1);
        if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v35.i8), v301, *(float32x2_t *)v37.f32, 1), *(float32x2_t *)v34.i8, v36).f32[0] < 0.96593)break;
        v302 = v37;
        v302.i32[2] = *((_DWORD *)*v274 + 9);
        v303 = (float32x4_t)v35;
        v303.i32[2] = *((_DWORD *)v13 + 35);
        v304 = (float32x2_t *)v274[1];
        v305 = v304[18];
        v38.i32[0] = v304[19].i32[0];
        v306 = v304[20];
        v39.i32[0] = v304[21].i32[0];
        v307 = v304[22];
        v40.i32[0] = v304[23].i32[0];
        v308 = *(float32x2_t *)(v13 + 120);
        v33.i32[0] = *((_DWORD *)v13 + 32);
        *(float32x2_t *)v309.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v305, v308.f32[0]), v306, v308, 1), v307, *(float *)v33.i32);
        *(float32x2_t *)&v309.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v38, v308), v39, v308, 1), *(float32x2_t *)v33.i8, v40);
        *(float32x2_t *)v41.f32 = v304[24];
        v41.i32[2] = v304[25].i32[0];
        v310 = (int8x16_t)vaddq_f32(v309, v41);
        *(float32x2_t *)v33.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v305, *(float *)v35.i32), v306, *(float32x2_t *)v35.i8, 1), v307, v303, 2);
        v311 = vmla_f32(vmla_f32(vmul_f32(v38, *(float32x2_t *)v35.i8), v301, v39), *(float32x2_t *)v34.i8, v40);
        v312 = v300[2];
        v35.i32[0] = v300[3].i32[0];
        *(float32x2_t *)v313.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v305, v312.f32[0]), v306, v312, 1), v307, *(float *)v35.i32);
        *(float32x2_t *)&v313.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v38, v312), v39, v312, 1), *(float32x2_t *)v35.i8, v40);
        v34 = (int8x16_t)vaddq_f32(v41, v313);
        *(float32x2_t *)v35.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v305, v37.f32[0]), v306, *(float32x2_t *)v37.f32, 1), v307, v302, 2);
        v314 = vmla_f32(vmla_f32(vmul_f32(v38, *(float32x2_t *)v37.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.f32, 1), v39), v36, v40);
        v36 = (float32x2_t)vextq_s8(v34, v34, 8uLL).u64[0];
        v38 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1), *(float32x2_t *)v34.i8, 1), v314, v36);
        if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v310.i8, *(float32x2_t *)v33.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1), *(float32x2_t *)v310.i8, 1), v311, (float32x2_t)*(_OWORD *)&vextq_s8(v310, v310, 8uLL)).f32[0] < -0.000001&& v38.f32[0] < -0.000001)
        {
          v33.u64[1] = (unint64_t)v311;
          v35.u64[1] = (unint64_t)v314;
          v316 = sub_223765420(v304 + 6, (uint64_t *)object, v310, v33, v34, v35);
          v317 = sqrtf(*(float *)&v316);
          v318 = *((float *)&v316 + 1) >= 1.0 ? *((float *)&v316 + 1) * 0.075 : 0.075;
          if (v317 > v318)
            break;
        }
        v274 += 4;
        if (v274 == v1030)
          goto LABEL_475;
      }
      memset(v1083, 0, sizeof(v1083));
      if (v273 < 0)
        sub_22367C394();
      v319 = (char *)operator new((unint64_t)v273 >> 2);
      v1031 = v273 >> 5;
      v320 = 8 * (v273 >> 5);
      v321 = &v319[v320];
      *(_QWORD *)v1083 = v319;
      *(_QWORD *)&v1083[16] = &v319[v320];
      memset(v319, 255, v320);
      *(_QWORD *)&v1083[8] = v321;
      v1007 = (char *)operator new((unint64_t)v273 >> 2);
      if ((unint64_t)v273 < 0x80)
      {
        v323 = 0;
        v324 = (__n128 *)v1007;
        v325 = v273 >> 5;
        goto LABEL_652;
      }
      v323 = v1031 & 0xFFFFFFFFFFFFFFFCLL;
      v324 = (__n128 *)&v1007[8 * (v1031 & 0xFFFFFFFFFFFFFFFCLL)];
      v322 = (__n128)xmmword_2245F5410;
      v337 = (int64x2_t *)(v1007 + 16);
      v338 = v1031 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v337[-1] = (int64x2_t)v322;
        *v337 = vaddq_s64((int64x2_t)v322, vdupq_n_s64(2uLL));
        v322 = (__n128)vaddq_s64((int64x2_t)v322, vdupq_n_s64(4uLL));
        v337 += 2;
        v338 -= 4;
      }
      while (v338);
      v325 = v273 >> 5;
      while (v325 != v323)
      {
LABEL_652:
        v324->n128_u64[0] = v323;
        v324 = (__n128 *)((char *)v324 + 8);
        ++v323;
      }
      v1035 = v324;
      v406 = (char *)v324 - v1007;
      v407 = ((char *)v324 - v1007) >> 3;
      if (v324 == (__n128 *)v1007)
      {
        v483 = 0;
        memset(object, 0, 24);
        v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
LABEL_721:
        v484 = v1035;
        sub_2236C4284(v1007, v1035, (uint64_t **)&v1073, v483, 0, 0, v322);
        v485 = *(void **)object;
        if (!*(_QWORD *)object)
          goto LABEL_723;
LABEL_722:
        *(_QWORD *)&object[8] = v485;
        operator delete(v485);
        goto LABEL_723;
      }
      if ((unint64_t)v406 >= 0x5555555555555551)
        sub_22316E078();
      v408 = v1007;
      v409 = (char *)operator new(24 * v407);
      v415 = &v409[24 * v407];
      v416 = v409;
      while (2)
      {
        while (1)
        {
          v417 = *(float32x2_t *)(v13 + 120);
          v413.i32[0] = *((_DWORD *)v13 + 32);
          v418 = *(float32x2_t *)(v13 + 132);
          v414.i32[0] = *((_DWORD *)v13 + 35);
          v419 = (float32x2_t **)&v1046[4 * *(_QWORD *)v408];
          v420 = v419[1];
          v410.i32[0] = v420[19].i32[0];
          v421 = v420[18];
          v411.i32[0] = v420[21].i32[0];
          v422 = v420[20];
          v412.i32[0] = v420[23].i32[0];
          v322.n128_u64[0] = (unint64_t)v420[24];
          v322.n128_u32[2] = v420[25].u32[0];
          v423 = v420[22];
          *(float32x2_t *)v424.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v421, v418.f32[0]), v422, v418, 1), v423, v414.f32[0]);
          *(float32x2_t *)v425.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v410.i8, v418), v411, v418, 1), *(float32x2_t *)v414.f32, v412);
          *(float32x2_t *)v426.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v421, v417.f32[0]), v422, v417, 1), v423, *(float *)v413.i32);
          *(float32x2_t *)&v426.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v410.i8, v417), v411, v417, 1), *(float32x2_t *)v413.i8, v412);
          v413 = (int8x16_t)vaddq_f32(v426, (float32x4_t)v322);
          v427 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v413.i8, *(float32x2_t *)v424.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v424.f32, 1), *(float32x2_t *)v413.i8, 1), *(float32x2_t *)v425.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v413, v413, 8uLL)).f32[0];
          v414 = 0uLL;
          v428 = v427 <= 0.0;
          if (v427 == 0.0)
            goto LABEL_664;
          *(float *)v413.i32 = -v427;
          v429 = v427 + 0.0;
          if (v428)
            v429 = *(float *)v413.i32;
          if (v429 <= 0.000001)
          {
LABEL_664:
            v430 = 1;
          }
          else
          {
            v430 = 0;
            v424.i64[1] = v425.i64[0];
            v425 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v413.i8, 0);
            v414 = vdivq_f32(v424, v425);
          }
          v431 = *v419;
          v432 = (*v419)[2];
          v425.i32[0] = (*v419)[3].i32[0];
          v433 = *(float32x2_t *)((char *)*v419 + 28);
          v413.i32[0] = (*v419)[4].i32[1];
          v434 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v421, v433.f32[0]), v422, v433, 1), v423, *(float *)v413.i32);
          v435 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v410.i8, v433), v411, v433, 1), *(float32x2_t *)v413.i8, v412);
          *(float32x2_t *)v436.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v421, v432.f32[0]), v422, v432, 1), v423, v425.f32[0]);
          *(float32x2_t *)&v436.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v410.i8, v432), v411, v432, 1), *(float32x2_t *)v425.f32, v412);
          v410 = (int8x16_t)vaddq_f32((float32x4_t)v322, v436);
          v411 = (float32x2_t)vextq_s8(v410, v410, 8uLL).u64[0];
          v412 = (float32x2_t)vdup_lane_s32((int32x2_t)v434, 1);
          v437 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v410.i8, v434), v412, *(float32x2_t *)v410.i8, 1), v435, v411).f32[0];
          v438 = v437 <= 0.0;
          if (v437 == 0.0)
            goto LABEL_673;
          v411.f32[0] = -v437;
          v439 = v437 + 0.0;
          if (v438)
            v439 = v411.f32[0];
          v440 = v439 <= 0.000001 ? 1 : v430;
          if ((v440 & 1) != 0)
          {
LABEL_673:
            v441 = INFINITY;
          }
          else
          {
            v1010 = (uint64_t)v435;
            v1014 = (uint64_t)v434;
            *(float32x4_t *)v1049 = v414;
            v1025 = v420[10].u32[0];
            v999 = (int32x2_t)v411;
            v1001 = v420[10].i32[1];
            v449 = v420[11];
            if (*(_QWORD *)&v431[34] == *(_QWORD *)&v431[33])
            {
              v457 = 0;
              v451 = -1;
              v458 = -1;
            }
            else
            {
              v450 = v431[41].i16[0];
              if (v450 < 0 || (v451 = v431[41].i16[1], (v451 & 0x80000000) != 0))
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
                LOWORD(v450) = v431[41].i16[0];
                LOWORD(v451) = v431[41].i16[1];
              }
              v452 = v431[41].i16[2] - v450;
              v453 = (unsigned __int16)~v452;
              v454 = v431[41].i16[3] - v451;
              v451 = (__int16)v451;
              v455 = ((__int16)v450 + v452) | ((unint64_t)((__int16)v451 + v454) << 32);
              if (v454 == -1)
              {
                v455 = 0;
                v451 = -1;
                v456 = -1;
              }
              else
              {
                v456 = (__int16)v450;
              }
              v457 = v453 ? v455 : 0;
              if (v453)
              {
                v458 = v456;
              }
              else
              {
                v451 = -1;
                v458 = -1;
              }
            }
            v461.i64[0] = v1014;
            v461.i64[1] = v1010;
            v410 = (int8x16_t)vdivq_f32(v461, (float32x4_t)vdupq_lane_s32(v999, 0));
            v462 = (float32x2_t)vextq_s8(v410, v410, 8uLL).u64[0];
            v411 = (float32x2_t)vextq_s8(*(int8x16_t *)v1049, *(int8x16_t *)v1049, 8uLL).u64[0];
            v412.f32[0] = (float)HIDWORD(v457);
            v432.f32[0] = (float)v457;
            v425.f32[0] = (float)v451;
            v422.f32[0] = (float)v458;
            v463 = vmul_n_f32((float32x2_t)v1025, (float)v458);
            v464.i32[0] = 0;
            v464.i32[1] = v1001;
            v465 = vadd_f32(v449, vmla_n_f32(v463, v464, (float)v451));
            v466 = vmul_f32(v422, 0);
            v467 = vmla_f32(v466, 0, *(float32x2_t *)v425.f32);
            v468 = (float32x2_t)vdup_lane_s32((int32x2_t)v465, 1);
            v467.f32[0] = v467.f32[0] + 1.0;
            v469 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v1049[0], v465), v468, (float32x2_t)v1049[0], 1), v467, v411).f32[0];
            v465.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v410.i8, v465), v468, *(float32x2_t *)v410.i8, 1), v467, v462).f32[0];
            v465.f32[0] = (float)((float)(1.0 / v469) - (float)(1.0 / v465.f32[0]))
                        * (float)((float)(1.0 / v469) - (float)(1.0 / v465.f32[0]));
            v470 = vmul_n_f32((float32x2_t)v1025, (float)v457);
            v471 = vadd_f32(v449, vmla_n_f32(v470, v464, (float)v451));
            v472 = vmul_f32(v432, 0);
            *(float32x2_t *)v414.f32 = vmla_f32(v472, 0, *(float32x2_t *)v425.f32);
            v473 = (float32x2_t)vdup_lane_s32((int32x2_t)v471, 1);
            v414.f32[0] = v414.f32[0] + 1.0;
            v474 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v1049[0], v471), v473, (float32x2_t)v1049[0], 1), *(float32x2_t *)v414.f32, v411).f32[0];
            v471.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v410.i8, v471), v473, *(float32x2_t *)v410.i8, 1), *(float32x2_t *)v414.f32, v462).f32[0];
            v473.f32[0] = v465.f32[0]
                        + (float)((float)((float)(1.0 / v474) - (float)(1.0 / v471.f32[0]))
                                * (float)((float)(1.0 / v474) - (float)(1.0 / v471.f32[0])));
            v475 = vadd_f32(v449, vmla_n_f32(v470, v464, (float)HIDWORD(v457)));
            v476 = vmla_f32(v472, 0, v412);
            v477 = (float32x2_t)vdup_lane_s32((int32x2_t)v475, 1);
            v476.f32[0] = v476.f32[0] + 1.0;
            *(float32x2_t *)v413.i8 = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v1049[0], v475), v477, (float32x2_t)v1049[0], 1), v476, v411);
            v475.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v410.i8, v475), v477, *(float32x2_t *)v410.i8, 1), v476, v462).f32[0];
            v478 = vadd_f32(v449, vmla_n_f32(v463, v464, (float)HIDWORD(v457)));
            v479 = vmla_f32(v466, 0, v412);
            v480 = (float32x2_t)vdup_lane_s32((int32x2_t)v478, 1);
            v479.f32[0] = v479.f32[0] + 1.0;
            v411.f32[0] = 1.0
                        / vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v1049[0], v478), v480, (float32x2_t)v1049[0], 1), v479, v411).f32[0];
            v412 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v410.i8, v478), v480, *(float32x2_t *)v410.i8, 1), v479, v462);
            v441 = sqrtf((float)((float)(v473.f32[0]+ (float)((float)((float)(1.0 / *(float *)v413.i32) - (float)(1.0 / v475.f32[0]))* (float)((float)(1.0 / *(float *)v413.i32) - (float)(1.0 / v475.f32[0]))))+ (float)((float)(v411.f32[0] - (float)(1.0 / v412.f32[0]))* (float)(v411.f32[0] - (float)(1.0 / v412.f32[0]))))* 0.25);
          }
          v442 = v431[29].u32[0];
          v443 = ((v442 >> 3) & 1) == 0;
          if ((v442 & 0x10) != 0)
            v443 = 0;
          v444 = (v442 & 2) != 0 ? 2 : v443;
          v445 = -v441;
          *(_OWORD *)&v1073.__r_.__value_.__l.__data_ = *(_OWORD *)v431[27].f32;
          if (v416 >= v415)
            break;
          *(_DWORD *)v416 = v444;
          *((float *)v416 + 1) = v445;
          v322 = *(__n128 *)&v1073.__r_.__value_.__l.__data_;
          *(_OWORD *)(v416 + 8) = *(_OWORD *)&v1073.__r_.__value_.__l.__data_;
          v416 += 24;
          a7 = v1056;
          v13 = v1039;
          v408 += 8;
          if (v408 == (char *)v1035)
            goto LABEL_715;
        }
        v446 = 0xAAAAAAAAAAAAAAABLL * ((v416 - v409) >> 3) + 1;
        if (v446 > 0xAAAAAAAAAAAAAAALL)
          sub_22316E078();
        if (0x5555555555555556 * ((v415 - v409) >> 3) > v446)
          v446 = 0x5555555555555556 * ((v415 - v409) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v415 - v409) >> 3) >= 0x555555555555555)
          v447 = 0xAAAAAAAAAAAAAAALL;
        else
          v447 = v446;
        if (v447)
        {
          if (v447 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v448 = (char *)operator new(24 * v447);
        }
        else
        {
          v448 = 0;
        }
        v459 = &v448[8 * ((v416 - v409) >> 3)];
        v415 = &v448[24 * v447];
        *(_DWORD *)v459 = v444;
        *((float *)v459 + 1) = v445;
        *(_OWORD *)(v459 + 8) = *(_OWORD *)&v1073.__r_.__value_.__l.__data_;
        v460 = v459 + 24;
        if (v416 == v409)
        {
          v13 = v1039;
LABEL_710:
          operator delete(v409);
          goto LABEL_711;
        }
        v13 = v1039;
        do
        {
          v322 = *(__n128 *)(v416 - 24);
          *((_QWORD *)v459 - 1) = *((_QWORD *)v416 - 1);
          *(__n128 *)(v459 - 24) = v322;
          v459 -= 24;
          v416 -= 24;
        }
        while (v416 != v409);
        if (v409)
          goto LABEL_710;
LABEL_711:
        v409 = v459;
        v416 = v460;
        a7 = v1056;
        v408 += 8;
        if (v408 != (char *)v1035)
          continue;
        break;
      }
LABEL_715:
      *(_QWORD *)object = v409;
      *(_QWORD *)&object[8] = v416;
      *(_QWORD *)&object[16] = v415;
      v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
      if (v406 < 1025)
      {
LABEL_719:
        v483 = v407;
        goto LABEL_721;
      }
      v481 = v407;
      while (1)
      {
        v482 = (char *)operator new(8 * v481, MEMORY[0x24BEDB6B8]);
        if (v482)
          break;
        v428 = v481 > 1;
        v481 >>= 1;
        if (!v428)
          goto LABEL_719;
      }
      v906 = v482;
      v907 = v481;
      v484 = v1035;
      sub_2236C4284(v1007, v1035, (uint64_t **)&v1073, v407, v482, v907, v322);
      operator delete(v906);
      v485 = *(void **)object;
      if (*(_QWORD *)object)
        goto LABEL_722;
LABEL_723:
      if (v484 == (__n128 *)v1007)
      {
        v486 = 0;
        v1026 = 0;
        goto LABEL_845;
      }
      v486 = 0;
      v1040 = 0;
      v1026 = 0;
      v487 = 0;
      v488 = (unint64_t *)v1007;
      v1003 = v407;
      while (2)
      {
        v489 = *v488;
        if (*v488 >= (uint64_t)(*(_QWORD *)&v1083[8] - *(_QWORD *)v1083) >> 3)
          sub_2236C5448();
        if (*(_QWORD *)(*(_QWORD *)v1083 + 8 * v489) != -1)
          goto LABEL_726;
        *(_QWORD *)(*(_QWORD *)v1083 + 8 * v489) = v1026;
        if (v1031 <= *v488)
          sub_2236C5448();
        v490 = (char *)&v1046[4 * *v488];
        v491 = *((_OWORD *)v490 + 1);
        *(_OWORD *)object = *(_OWORD *)v490;
        *(_OWORD *)&object[16] = v491;
        if (v1040 == v486)
        {
          if (v486)
            operator delete(v486);
          v486 = (char *)operator new(0x20uLL);
          v1040 = v486 + 32;
          v494 = *(_OWORD *)&object[16];
          *(_OWORD *)v486 = *(_OWORD *)object;
          *((_OWORD *)v486 + 1) = v494;
          v1011 = v488;
          v1015 = v487;
          v493 = v487 + 1;
          if (v493 == v407)
            goto LABEL_725;
        }
        else
        {
          v492 = *((_OWORD *)v490 + 1);
          *(_OWORD *)v486 = *(_OWORD *)v490;
          *((_OWORD *)v486 + 1) = v492;
          v1011 = v488;
          v1015 = v487;
          v493 = v487 + 1;
          if (v493 == v407)
            goto LABEL_725;
        }
        v495 = (float32x4_t *)(v486 + 32);
        v496 = (unint64_t *)&v1007[8 * v493];
        while (2)
        {
          v497 = *v496;
          if (*v496 >= (uint64_t)(*(_QWORD *)&v1083[8] - *(_QWORD *)v1083) >> 3)
            sub_2236C5448();
          if (*(_QWORD *)(*(_QWORD *)v1083 + 8 * v497) != -1)
            goto LABEL_738;
          if (v1031 <= v497)
            sub_2236C5448();
          v498 = (float32x4_t *)&v1046[4 * v497];
          if (v495 < (float32x4_t *)v1040)
          {
            v499 = v498[1];
            *v495 = *v498;
            v495[1] = v499;
            v495 += 2;
            memset(object, 0, 24);
            v500 = (char *)v495 - v486;
            v1050 = v486;
            if (v495 != (float32x4_t *)v486)
              goto LABEL_744;
LABEL_789:
            v501 = 0;
            v526 = 0;
            goto LABEL_790;
          }
          v527 = ((char *)v495 - v486) >> 5;
          v528 = v527 + 1;
          if ((unint64_t)(v527 + 1) >> 59)
            sub_22316E078();
          if ((v1040 - v486) >> 4 > v528)
            v528 = (v1040 - v486) >> 4;
          if ((unint64_t)(v1040 - v486) >= 0x7FFFFFFFFFFFFFE0)
            v529 = 0x7FFFFFFFFFFFFFFLL;
          else
            v529 = v528;
          if (!v529)
          {
            v530 = 0;
            v499 = v498[1];
            v531 = (float32x4_t *)(32 * v527);
            *v531 = *v498;
            v531[1] = v499;
            if (v495 != (float32x4_t *)v486)
              goto LABEL_784;
LABEL_842:
            v533 = (char *)v531;
            v1040 = &v530[32 * v529];
            v495 = v531 + 2;
            if (v486)
              goto LABEL_787;
            goto LABEL_788;
          }
          if (v529 >> 59)
            sub_223174E94();
          v530 = (char *)operator new(32 * v529);
          v499 = v498[1];
          v531 = (float32x4_t *)&v530[32 * v527];
          *v531 = *v498;
          v531[1] = v499;
          if (v495 == (float32x4_t *)v486)
            goto LABEL_842;
LABEL_784:
          v532 = v531;
          do
          {
            v499 = v495[-1];
            v533 = (char *)&v532[-2];
            v532[-2] = v495[-2];
            v532[-1] = v499;
            v495 -= 2;
            v532 -= 2;
          }
          while (v495 != (float32x4_t *)v486);
          v1040 = &v530[32 * v529];
          v495 = v531 + 2;
          if (v486)
LABEL_787:
            operator delete(v486);
LABEL_788:
          v486 = v533;
          memset(object, 0, 24);
          v500 = (char *)v495 - v533;
          v1050 = v486;
          if (!v500)
            goto LABEL_789;
LABEL_744:
          if (v500 < 0)
            sub_22316E078();
          v501 = (char *)operator new((unint64_t)v500 >> 2);
          *(_QWORD *)object = v501;
          *(_QWORD *)&object[8] = v501;
          *(_QWORD *)&object[16] = &v501[8 * (v500 >> 5)];
          v502 = (float32x4_t *)v486;
          while (2)
          {
            while (1)
            {
              v503 = v502->i64[0];
              if ((unint64_t)v501 >= *(_QWORD *)&object[16])
                break;
              *(_QWORD *)v501 = v503;
              v501 += 8;
              *(_QWORD *)&object[8] = v501;
              v502 += 2;
              if (v502 == v495)
                goto LABEL_774;
            }
            v504 = *(char **)object;
            v505 = &v501[-*(_QWORD *)object];
            v506 = (uint64_t)&v501[-*(_QWORD *)object] >> 3;
            v507 = v506 + 1;
            if ((unint64_t)(v506 + 1) >> 61)
              sub_22316E078();
            v508 = *(_QWORD *)&object[16] - *(_QWORD *)object;
            if ((uint64_t)(*(_QWORD *)&object[16] - *(_QWORD *)object) >> 2 > v507)
              v507 = v508 >> 2;
            if ((unint64_t)v508 >= 0x7FFFFFFFFFFFFFF8)
              v509 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v509 = v507;
            if (!v509)
            {
              v510 = 0;
              v511 = (uint64_t *)(8 * v506);
              v512 = 0;
              v517 = (uint64_t *)(8 * v506);
              *v517 = v503;
              v513 = (char *)(v517 + 1);
              v514 = (char *)(v501 - v504);
              if (v501 != v504)
                goto LABEL_757;
LABEL_760:
              *(_QWORD *)object = v511;
              *(_QWORD *)&object[8] = v513;
              *(_QWORD *)&object[16] = v512;
              a7 = v1056;
              v486 = v1050;
              goto LABEL_767;
            }
            if (v509 >> 61)
              sub_223174E94();
            v510 = operator new(8 * v509);
            v511 = (uint64_t *)&v510[8 * v506];
            v512 = &v510[8 * v509];
            *v511 = v503;
            v513 = (char *)(v511 + 1);
            v514 = (char *)(v501 - v504);
            if (v501 == v504)
              goto LABEL_760;
LABEL_757:
            v515 = (unint64_t)(v514 - 8);
            if (v515 < 0x168)
            {
              v516 = v501;
              a7 = v1056;
              v486 = v1050;
              goto LABEL_765;
            }
            v518 = (v501 - 8 - v504) & 0xFFFFFFFFFFFFFFF8;
            a7 = v1056;
            if (&v505[(_QWORD)v510 - 8 - v518] > &v505[(_QWORD)v510 - 8]
              || &v501[-v518 - 8] > v501 - 8
              || (unint64_t)(v501 - v510 - (_QWORD)v505) < 0x20)
            {
              v516 = v501;
              v486 = v1050;
              goto LABEL_765;
            }
            v520 = (v515 >> 3) + 1;
            v521 = 8 * (v520 & 0x3FFFFFFFFFFFFFFCLL);
            v516 = &v501[-v521];
            v511 = (uint64_t *)((char *)v511 - v521);
            v522 = (float32x4_t *)&v505[(_QWORD)v510 - 16];
            v523 = (float32x4_t *)(v501 - 16);
            v524 = v520 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v499 = v523[-1];
              v525 = *v523;
              v522[-1] = v499;
              *v522 = v525;
              v522 -= 2;
              v523 -= 2;
              v524 -= 4;
            }
            while (v524);
            v486 = v1050;
            if (v520 != (v520 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_765:
                v519 = *((_QWORD *)v516 - 1);
                v516 -= 8;
                *--v511 = v519;
              }
              while (v516 != v504);
            }
            v501 = *(char **)object;
            *(_QWORD *)object = v511;
            *(_QWORD *)&object[8] = v513;
            *(_QWORD *)&object[16] = v512;
            if (v501)
LABEL_767:
              operator delete(v501);
            v501 = v513;
            *(_QWORD *)&object[8] = v513;
            v502 += 2;
            if (v502 != v495)
              continue;
            break;
          }
LABEL_774:
          v526 = *(uint64_t **)object;
LABEL_790:
          sub_2236A576C((v501 - (char *)v526) >> 3, v526, (uint64_t)&v1073, v499);
          if (v526)
            operator delete(v526);
          v542 = (__int16 **)v486;
          if (v495 == (float32x4_t *)v486)
          {
LABEL_793:
            v484 = v1035;
            if (v497 >= (uint64_t)(*(_QWORD *)&v1083[8] - *(_QWORD *)v1083) >> 3)
              sub_2236C5448();
            *(_QWORD *)(*(_QWORD *)v1083 + 8 * v497) = v1026;
          }
          else
          {
            while (1)
            {
              v543 = *v542;
              if (*((_QWORD *)*v542 + 34) == *((_QWORD *)*v542 + 33))
              {
                v552 = 0;
                v554 = 0xFFFFFFFF00000000;
                v555 = -1;
              }
              else
              {
                v544 = v543[164];
                if (v544 < 0 || (v545 = v543[165], v545 < 0))
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/include/Reconstruction/Geometry/RLRegion.hpp", 180, (uint64_t)"(bounding_box_.min_corner.e() >= T{0}).all()", 44, (uint64_t)"Cannot create arr::IndexRange2 from region with negative row/column indices", 75, (void (*)(void **))sub_22457406C);
                  v546 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v546 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v547 = qword_255795648;
                    for (i = qword_255795650; v547 != i; v547 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v547)(*(_QWORD *)(v547 + 8), "(bounding_box_.min_corner.e() >= T{0}).all()", 44, "Cannot create arr::IndexRange2 from region with negative row/column indices", 75);
                  }
                  v549 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v549 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    abort();
                  qword_255795660(*(_QWORD *)algn_255795668, "(bounding_box_.min_corner.e() >= T{0}).all()", 44, "Cannot create arr::IndexRange2 from region with negative row/column indices", 75);
                  LOWORD(v544) = v543[164];
                  LOWORD(v545) = v543[165];
                }
                v550 = v543[166] - (_WORD)v544 == 0xFFFF || (unsigned __int16)~(v543[167] - v545) == 0;
                v551 = (__int16)v544;
                v552 = ((__int16)v544 + (__int16)(v543[166] - v544)) | ((unint64_t)((__int16)(v543[167] - v545) + (__int16)v545) << 32);
                v553 = (uint64_t)(__int16)v545 << 32;
                if (v550)
                  v552 = 0;
                v554 = 0xFFFFFFFF00000000;
                if (v550)
                {
                  v555 = -1;
                }
                else
                {
                  v554 = v553;
                  v555 = v551;
                }
              }
              v556 = 0;
              v557 = HIDWORD(v552) >= HIDWORD(v554) ? (HIDWORD(v552) - HIDWORD(v554) + 1) : 0;
              v207 = v552 >= v555;
              v558 = v552 - v555;
              v559 = 0;
              v560 = 0;
              v561 = 0;
              v562 = 0;
              v563 = v207 ? (v558 + 1) : 0;
              if ((_DWORD)v563)
              {
                v564 = 0;
                if ((_DWORD)v557)
                {
                  v564 = v557 * (unint64_t)v563;
                  v565 = v563 - 1 + 2 * v555;
                  v566 = v557 - 1 + ((v554 >> 31) & 0xFFFFFFFE);
                  v567 = 12 * v564 * v565;
                  v568 = (v563 - 1 + (v563 - 1) * v563) * 4 * v564 + v567 * v565;
                  v569 = v566 * 12 * v564;
                  v556 = v568 / 48;
                  v559 = (uint64_t)((v557 - 1 + (v557 - 1) * v557) * 4 * v564 + v569 * v566) / 48;
                  v570 = (unsigned __int128)(v567 * v566 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
                  v560 = (v570 >> 3) + ((unint64_t)v570 >> 63);
                  v561 = v567 / 24;
                  v562 = v569 / 24;
                }
              }
              else
              {
                v564 = 0;
              }
              *(_QWORD *)object = v556;
              *(_QWORD *)&object[8] = v559;
              *(_QWORD *)&object[16] = v560;
              *(_QWORD *)&object[24] = v561;
              *(_QWORD *)&object[32] = v562;
              *(_QWORD *)&object[40] = v564;
              v571 = (float32x2_t *)*v542;
              v536.i32[0] = *((_DWORD *)*v542 + 9);
              v537.i64[0] = *(_QWORD *)(*v542 + 14);
              v534.i32[0] = HIDWORD(v1073.__r_.__value_.__r.__words[2]);
              v535.i64[0] = *(std::string::size_type *)((char *)&v1073.__r_.__value_.__r.__words[1] + 4);
              v572 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)((char *)&v1073.__r_.__value_.__r.__words[1] + 4), 1);
              if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v537.f32, *(float32x2_t *)((char *)&v1073.__r_.__value_.__r.__words[1] + 4)), v572, *(float32x2_t *)v537.f32, 1), *(float32x2_t *)v534.i8, v536).f32[0] < 0.96593)break;
              v573 = v537;
              v573.i32[2] = *((_DWORD *)*v542 + 9);
              v574 = (float32x4_t)v535;
              v574.i32[2] = HIDWORD(v1073.__r_.__value_.__r.__words[2]);
              v575 = (float32x2_t *)v542[1];
              v576 = v575[18];
              v538.i32[0] = v575[19].i32[0];
              v577 = v575[20];
              v539.i32[0] = v575[21].i32[0];
              v578 = v575[22];
              v540.i32[0] = v575[23].i32[0];
              v579 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v576, *(float *)&v1073.__r_.__value_.__l.__data_), v577, (float32x2_t)v1073.__r_.__value_.__l.__data_, 1), v578, *(float32x4_t *)&v1073.__r_.__value_.__l.__data_, 2);
              v581.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v538, (float32x2_t)v1073.__r_.__value_.__l.__data_), v539, (float32x2_t)v1073.__r_.__value_.__l.__data_, 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v1073.__r_.__value_.__l.__data_, *(int8x16_t *)&v1073.__r_.__value_.__l.__data_, 8uLL), v540);
              *(float32x2_t *)v541.f32 = v575[24];
              v541.i32[2] = v575[25].i32[0];
              v580 = (int8x16_t)vaddq_f32((float32x4_t)v581, v541);
              *(float32x2_t *)v581.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v576, *((float *)&v1073.__r_.__value_.__r.__words[1] + 1)), v577, *(float32x2_t *)((char *)&v1073.__r_.__value_.__r.__words[1] + 4), 1), v578, v574, 2);
              v582 = vmla_f32(vmla_f32(vmul_f32(v538, *(float32x2_t *)((char *)&v1073.__r_.__value_.__r.__words[1] + 4)), v572, v539), *(float32x2_t *)v534.i8, v540);
              v583 = v571[2];
              v535.i32[0] = v571[3].i32[0];
              *(float32x2_t *)v584.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v576, v583.f32[0]), v577, v583, 1), v578, *(float *)v535.i32);
              *(float32x2_t *)&v584.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v538, v583), v539, v583, 1), *(float32x2_t *)v535.i8, v540);
              v534 = (int8x16_t)vaddq_f32(v541, v584);
              *(float32x2_t *)v535.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v576, v537.f32[0]), v577, *(float32x2_t *)v537.f32, 1), v578, v573, 2);
              v585 = vmla_f32(vmla_f32(vmul_f32(v538, *(float32x2_t *)v537.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v537.f32, 1), v539), v536, v540);
              v536 = (float32x2_t)vextq_s8(v534, v534, 8uLL).u64[0];
              v538 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v534.i8, *(float32x2_t *)v535.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v535.i8, 1), *(float32x2_t *)v534.i8, 1), v585, v536);
              if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v580.i8, *(float32x2_t *)v581.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v581.i8, 1), *(float32x2_t *)v580.i8, 1), v582, (float32x2_t)*(_OWORD *)&vextq_s8(v580, v580, 8uLL)).f32[0] < -0.000001&& v538.f32[0] < -0.000001)
              {
                v581.u64[1] = (unint64_t)v582;
                v535.u64[1] = (unint64_t)v585;
                v587 = sub_223765420(v575 + 6, (uint64_t *)object, v580, v581, v534, v535);
                v588 = sqrtf(*(float *)&v587);
                v589 = *((float *)&v587 + 1) >= 1.0 ? *((float *)&v587 + 1) * 0.075 : 0.075;
                if (v588 > v589)
                  break;
              }
              v542 += 4;
              if (v542 == (__int16 **)v495)
                goto LABEL_793;
            }
            v495 -= 2;
            v484 = v1035;
          }
LABEL_738:
          if (++v496 != (unint64_t *)v484)
            continue;
          break;
        }
LABEL_725:
        ++v1026;
        v407 = v1003;
        v487 = v1015;
        v488 = v1011;
LABEL_726:
        ++v488;
        ++v487;
        if (v488 != (unint64_t *)v484)
          continue;
        break;
      }
LABEL_845:
      v1051 = v486;
      sub_2236C4184(&v1063, v1026);
      v591 = *(_QWORD **)v1083;
      v590 = *(_QWORD **)&v1083[8];
      if (*(_QWORD *)v1083 != *(_QWORD *)&v1083[8])
      {
        v592 = 0;
        v1036 = *(_QWORD **)&v1083[8];
        while (1)
        {
          while (1)
          {
            v593 = (char *)v1063 + 24 * *v591;
            v594 = v593 + 8;
            v595 = (char *)*((_QWORD *)v593 + 1);
            v597 = v593 + 16;
            v596 = *((_QWORD *)v593 + 2);
            if ((unint64_t)v595 >= v596)
              break;
            *(_QWORD *)v595 = v592;
            *v594 = v595 + 8;
            ++v591;
            ++v592;
            if (v591 == v590)
              goto LABEL_869;
          }
          v598 = *(char **)v593;
          v599 = (uint64_t)&v595[-*(_QWORD *)v593];
          v600 = v599 >> 3;
          v601 = (v599 >> 3) + 1;
          if (v601 >> 61)
            sub_22367C394();
          v602 = v596 - (_QWORD)v598;
          if (v602 >> 2 > v601)
            v601 = v602 >> 2;
          v603 = (unint64_t)v602 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v601;
          if (v603)
            break;
          v606 = 0;
          v607 = (_QWORD *)(8 * v600);
          v610 = (_QWORD *)(8 * v600);
          *v610 = v592;
          v608 = v610 + 1;
          v609 = v595 - v598;
          if (v595 != v598)
            goto LABEL_860;
LABEL_866:
          *(_QWORD *)v593 = v607;
          *v594 = v608;
          *v597 = &v606[8 * v603];
          if (v598)
            operator delete(v598);
          v590 = v1036;
          *v594 = v608;
          ++v591;
          ++v592;
          if (v591 == v1036)
            goto LABEL_869;
        }
        v1041 = &v595[-*(_QWORD *)v593];
        if (v603 >> 61)
          sub_223174E94();
        v604 = a7;
        v605 = v603;
        v606 = operator new(8 * v603);
        v603 = v605;
        a7 = v604;
        v597 = v593 + 16;
        v599 = (uint64_t)v1041;
        v607 = &v606[8 * v600];
        *v607 = v592;
        v608 = v607 + 1;
        v609 = v595 - v598;
        if (v595 == v598)
          goto LABEL_866;
LABEL_860:
        v611 = v609 - 8;
        if (v611 < 0x58)
          goto LABEL_1537;
        if ((unint64_t)(v595 - v606 - v599) < 0x20)
          goto LABEL_1537;
        v612 = (v611 >> 3) + 1;
        v613 = 8 * (v612 & 0x3FFFFFFFFFFFFFFCLL);
        v614 = &v595[-v613];
        v607 = (_QWORD *)((char *)v607 - v613);
        v615 = &v606[v599 - 16];
        v616 = v595 - 16;
        v617 = v612 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v618 = *(_OWORD *)v616;
          *(v615 - 1) = *((_OWORD *)v616 - 1);
          *v615 = v618;
          v615 -= 2;
          v616 -= 32;
          v617 -= 4;
        }
        while (v617);
        v595 = v614;
        if (v612 != (v612 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1537:
          do
          {
            v619 = *((_QWORD *)v595 - 1);
            v595 -= 8;
            *--v607 = v619;
          }
          while (v595 != v598);
        }
        goto LABEL_866;
      }
LABEL_869:
      if (v1051)
        operator delete(v1051);
      operator delete(v1007);
      if (*(_QWORD *)v1083)
      {
        *(_QWORD *)&v1083[8] = *(_QWORD *)v1083;
        operator delete(*(void **)v1083);
      }
      v620 = (char *)v1063;
      v1042 = v1064;
      v621 = 0xAAAAAAAAAAAAAAABLL * ((v1064 - (_BYTE *)v1063) >> 3);
      if (v621 < 2)
        goto LABEL_1467;
      __s = 0uLL;
      v1087 = 0;
      if (v621 > 0x333333333333333)
        sub_22316E078();
      v622 = (char *)operator new(0x5555555555555570 * ((v1064 - (_BYTE *)v1063) >> 3));
      v624 = v1019;
      v625 = (uint64_t)v622;
      v626 = (std::__shared_weak_count *)&v622[80 * v621];
      *(_QWORD *)&__s = v622;
      *((_QWORD *)&__s + 1) = v622;
      v1087 = v626;
      if (v620 != v1042)
      {
        while (1)
        {
          v630 = *(_QWORD **)v620;
          v629 = *((_QWORD *)v620 + 1);
          v631 = v629 - *(_QWORD *)v620;
          v1020 = v624;
          v1052 = v620;
          if (v629 == *(_QWORD *)v620)
          {
            v648 = 0;
            v649 = 0;
            v650 = 0;
            v666 = 0;
            v667 = 0;
            LOBYTE(v651) = 0;
            LOBYTE(v657) = 0;
            v632 = 0;
          }
          else
          {
            if ((unint64_t)v631 >= 0x3FFFFFFFFFFFFFF9)
              sub_22316E078();
            v632 = (float *)operator new(4 * v631);
            v633 = v631 >> 3;
            v634 = &v632[8 * (v631 >> 3)];
            v635 = v632;
            v636 = &v630[v633];
            do
            {
              while (1)
              {
                v638 = (char *)&v1046[4 * *v630];
                v639 = *((_OWORD *)v638 + 1);
                *(_OWORD *)object = *(_OWORD *)v638;
                *(_OWORD *)&object[16] = v639;
                if (v635 >= v634)
                  break;
                v623 = *(_OWORD *)v638;
                v637 = *((_OWORD *)v638 + 1);
                *(_OWORD *)v635 = *(_OWORD *)v638;
                *((_OWORD *)v635 + 1) = v637;
                v635 += 8;
                if (++v630 == v636)
                  goto LABEL_899;
              }
              v640 = ((char *)v635 - (char *)v632) >> 5;
              v641 = v640 + 1;
              if ((unint64_t)(v640 + 1) >> 59)
                sub_22316E078();
              if (((char *)v634 - (char *)v632) >> 4 > v641)
                v641 = ((char *)v634 - (char *)v632) >> 4;
              if ((unint64_t)((char *)v634 - (char *)v632) >= 0x7FFFFFFFFFFFFFE0)
                v642 = 0x7FFFFFFFFFFFFFFLL;
              else
                v642 = v641;
              if (v642)
              {
                if (v642 >> 59)
                  sub_223174E94();
                v643 = (char *)operator new(32 * v642);
              }
              else
              {
                v643 = 0;
              }
              v644 = &v643[32 * v640];
              v645 = *(_OWORD *)&object[16];
              v634 = (float *)&v643[32 * v642];
              *(_OWORD *)v644 = *(_OWORD *)object;
              *((_OWORD *)v644 + 1) = v645;
              v646 = (float *)(v644 + 32);
              if (v635 == v632)
                goto LABEL_897;
              do
              {
                v623 = *((_OWORD *)v635 - 2);
                v647 = *((_OWORD *)v635 - 1);
                *((_OWORD *)v644 - 2) = v623;
                *((_OWORD *)v644 - 1) = v647;
                v644 -= 32;
                v635 -= 8;
              }
              while (v635 != v632);
              if (v632)
LABEL_897:
                operator delete(v632);
              v632 = (float *)v644;
              v635 = v646;
              ++v630;
            }
            while (v630 != v636);
LABEL_899:
            if (v632 != v635)
            {
              v648 = 0;
              v649 = 0;
              v650 = 0;
              v651 = 0;
              v652 = 0;
              v653 = 0.0;
              v654 = v632;
              v655 = v1018;
              v656 = v1020;
              do
              {
                v658 = *(_QWORD *)v654;
                v659 = *(_QWORD *)(*(_QWORD *)v654 + 216);
                v660 = *(unsigned __int8 *)(*(_QWORD *)v654 + 224);
                v661 = *(_DWORD *)(*(_QWORD *)v654 + 232);
                *(_OWORD *)object = *(_OWORD *)(*(_QWORD *)v654 + 236);
                *(_OWORD *)&object[12] = *(_OWORD *)(v658 + 248);
                if (v659 >= v648)
                {
                  if (v659 <= v648)
                    v662 = v650;
                  else
                    v662 = 0;
                  v650 = v661 | v662;
                  if ((v661 & 2) != 0)
                  {
                    v652 = v659;
                    v655 = (unint64_t)v659 >> 8;
                    if (!v651)
                    {
                      *(_DWORD *)v1070 = *(_DWORD *)(v658 + 225);
                      *(_DWORD *)&v1070[3] = *(_DWORD *)(v658 + 228);
                      v651 = 1;
                    }
                    v648 = v659;
                    v649 = v660;
                  }
                  else
                  {
                    v648 = v659;
                    v649 = v660;
                    v660 = v656;
                  }
                }
                else
                {
                  v660 = v656;
                }
                v657 = v652 | (v655 << 8);
                v1073.__r_.__value_.__r.__words[0] = v657;
                v1073.__r_.__value_.__s.__data_[8] = v660;
                *(_DWORD *)((char *)&v1073.__r_.__value_.__r.__words[1] + 1) = *(_DWORD *)v1070;
                HIDWORD(v1073.__r_.__value_.__r.__words[1]) = *(_DWORD *)&v1070[3];
                v1073.__r_.__value_.__s.__data_[16] = v651;
                *(_OWORD *)v1083 = *(_OWORD *)&object[4];
                *(_QWORD *)&v1083[16] = *(_QWORD *)&object[20];
                if (v651)
                {
                  if (v1083[16])
                  {
                    v663 = v657 < *(_QWORD *)v1083;
                    if (v657 <= *(uint64_t *)v1083)
                      v657 = *(_QWORD *)v1083;
                    if (v663)
                      v656 = v1083[8];
                    else
                      v656 = v660;
                    if (v663)
                      v664 = &v1083[9];
                    else
                      v664 = &v1073.__r_.__value_.__s.__data_[9];
                    LODWORD(v1057[0]) = *(_DWORD *)v664;
                    *(_DWORD *)((char *)v1057 + 3) = *(_DWORD *)(v664 + 3);
                    v651 = 1;
                  }
                  else
                  {
                    LODWORD(v1057[0]) = *(_DWORD *)v1070;
                    *(_DWORD *)((char *)v1057 + 3) = *(_DWORD *)&v1070[3];
                    v656 = v660;
                  }
                }
                else
                {
                  v657 = *(_QWORD *)v1083;
                  v656 = v1083[8];
                  LODWORD(v1057[0]) = *(_DWORD *)&v1083[9];
                  *(_DWORD *)((char *)v1057 + 3) = *(_DWORD *)&v1083[12];
                  v651 = v1083[16];
                }
                v652 = v657;
                v655 = (unint64_t)v657 >> 8;
                *(_DWORD *)v1070 = v1057[0];
                *(_DWORD *)&v1070[3] = *(_DWORD *)((char *)v1057 + 3);
                v653 = v653 + v654[4];
                v654 += 8;
              }
              while (v654 != v635);
              v665 = (char *)v635 - (char *)v632;
              if (v665 < 0)
                sub_22316E078();
              v1020 = v656;
              v1018 = (unint64_t)v657 >> 8;
              v666 = (char *)operator new(v665);
              v667 = &v666[32 * (v665 >> 5)];
              memcpy(v666, v632, v665);
              goto LABEL_930;
            }
            v648 = 0;
            v649 = 0;
            v650 = 0;
            v666 = 0;
            v667 = 0;
            LOBYTE(v651) = 0;
            LOBYTE(v657) = 0;
          }
          v653 = 0.0;
LABEL_930:
          LODWORD(v1059) = *(_DWORD *)__src;
          *(_DWORD *)((char *)&v1059 + 3) = *(_DWORD *)&__src[3];
          v1068[0] = *(_DWORD *)v1070;
          *(int *)((char *)v1068 + 3) = *(_DWORD *)&v1070[3];
          v1067[0] = *(_DWORD *)v1069;
          *(_DWORD *)((char *)v1067 + 3) = *(_DWORD *)&v1069[3];
          if (v632)
            operator delete(v632);
          v668 = v657 | (v1018 << 8);
          v669 = *((_QWORD *)&__s + 1);
          if (*((_QWORD *)&__s + 1) < (unint64_t)v1087)
          {
            **((_QWORD **)&__s + 1) = v666;
            *(_QWORD *)(v669 + 8) = v667;
            *(_QWORD *)(v669 + 16) = v667;
            *(_QWORD *)(v669 + 24) = v648;
            *(_BYTE *)(v669 + 32) = v649;
            *(_DWORD *)(v669 + 33) = (_DWORD)v1059;
            *(_DWORD *)(v669 + 36) = *(_DWORD *)((char *)&v1059 + 3);
            *(_DWORD *)(v669 + 40) = v650;
            *(_QWORD *)(v669 + 48) = v668;
            v624 = v1020;
            *(_BYTE *)(v669 + 56) = v1020;
            *(_DWORD *)(v669 + 57) = v1068[0];
            *(_DWORD *)(v669 + 60) = *(int *)((char *)v1068 + 3);
            *(_BYTE *)(v669 + 64) = v651;
            v627 = v1067[0];
            *(_DWORD *)(v669 + 68) = *(_DWORD *)((char *)v1067 + 3);
            *(_DWORD *)(v669 + 65) = v627;
            v625 = v669 + 80;
            *(float *)(v669 + 72) = v653;
            v628 = v1052;
          }
          else
          {
            v670 = __s;
            v671 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&__s + 1) - __s) >> 4) + 1;
            if (v671 > 0x333333333333333)
              sub_22316E078();
            if (0x999999999999999ALL * ((uint64_t)((uint64_t)v1087 - __s) >> 4) > v671)
              v671 = 0x999999999999999ALL * ((uint64_t)((uint64_t)v1087 - __s) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v1087 - __s) >> 4) >= 0x199999999999999)
              v672 = 0x333333333333333;
            else
              v672 = v671;
            if (v672)
            {
              if (v672 > 0x333333333333333)
                sub_223174E94();
              v673 = (char *)operator new(80 * v672);
            }
            else
            {
              v673 = 0;
            }
            v674 = &v673[16 * ((v669 - v670) >> 4)];
            *(_QWORD *)v674 = v666;
            *((_QWORD *)v674 + 1) = v667;
            *((_QWORD *)v674 + 2) = v667;
            *((_QWORD *)v674 + 3) = v648;
            v675 = (std::__shared_weak_count *)&v673[80 * v672];
            v674[32] = v649;
            *(_DWORD *)(v674 + 33) = (_DWORD)v1059;
            *((_DWORD *)v674 + 9) = *(_DWORD *)((char *)&v1059 + 3);
            *((_DWORD *)v674 + 10) = v650;
            *((_QWORD *)v674 + 6) = v668;
            v624 = v1020;
            v674[56] = v1020;
            *(_DWORD *)(v674 + 57) = v1068[0];
            *((_DWORD *)v674 + 15) = *(int *)((char *)v1068 + 3);
            v674[64] = v651;
            v676 = v1067[0];
            *((_DWORD *)v674 + 17) = *(_DWORD *)((char *)v1067 + 3);
            *(_DWORD *)(v674 + 65) = v676;
            v625 = (uint64_t)(v674 + 80);
            *((float *)v674 + 18) = v653;
            if (v669 == v670)
            {
              *(_QWORD *)&__s = &v673[16 * ((v669 - v670) >> 4)];
              *((_QWORD *)&__s + 1) = v674 + 80;
              v1087 = v675;
              v628 = v1052;
            }
            else
            {
              v677 = 0;
              do
              {
                v678 = &v674[v677];
                v679 = v669 + v677;
                *((_QWORD *)v678 - 9) = 0;
                *((_QWORD *)v678 - 8) = 0;
                *((_OWORD *)v678 - 5) = *(_OWORD *)(v669 + v677 - 80);
                *((_QWORD *)v678 - 8) = *(_QWORD *)(v669 + v677 - 64);
                *(_QWORD *)(v679 - 80) = 0;
                *(_QWORD *)(v679 - 72) = 0;
                *(_QWORD *)(v679 - 64) = 0;
                v623 = *(_OWORD *)(v669 + v677 - 56);
                v680 = *(_OWORD *)(v669 + v677 - 40);
                v681 = *(_OWORD *)(v669 + v677 - 24);
                *((_DWORD *)v678 - 2) = *(_DWORD *)(v669 + v677 - 8);
                *(_OWORD *)(v678 - 24) = v681;
                *(_OWORD *)(v678 - 40) = v680;
                *(_OWORD *)(v678 - 56) = v623;
                v677 -= 80;
              }
              while (v669 + v677 != v670);
              v682 = *((_QWORD *)&__s + 1);
              v669 = __s;
              *(_QWORD *)&__s = &v674[v677];
              *((_QWORD *)&__s + 1) = v674 + 80;
              v1087 = v675;
              v628 = v1052;
              if (v682 != v669)
              {
                v683 = v682;
                do
                {
                  v685 = *(void **)(v683 - 80);
                  v683 -= 80;
                  v684 = v685;
                  if (v685)
                  {
                    *(_QWORD *)(v682 - 72) = v684;
                    operator delete(v684);
                  }
                  v682 = v683;
                }
                while (v683 != v669);
              }
            }
            if (v669)
              operator delete((void *)v669);
          }
          *((_QWORD *)&__s + 1) = v625;
          v620 = v628 + 24;
          if (v620 == v1042)
          {
            v622 = (char *)__s;
            v626 = v1087;
            break;
          }
        }
      }
      v686 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v625 - (uint64_t)v622) >> 4));
      v1060 = v622;
      v1061 = (_BYTE *)v625;
      v1062 = v626;
      if ((char *)v625 == v622)
        v687 = 0;
      else
        v687 = v686;
      sub_2236C545C((uint64_t)v622, v625, v687, 1, *(double *)&v623);
      v1012 = v1060;
      v688 = v1061 - (_BYTE *)v1060;
      if (v1061 == v1060)
        sub_2236C5448();
      v1019 = v624;
      if (v688 != 80)
      {
        v689 = 0;
        v690 = 0;
        v699 = 0;
        v700 = 0xCCCCCCCCCCCCCCCDLL * (v688 >> 4);
        v701 = 1;
        v1008 = (void *)v700;
        while (1)
        {
          v702 = v1060;
          v703 = (char *)v1060 + 80 * v701;
          v704 = *(unsigned __int8 ***)v703;
          v705 = (unsigned __int8 **)*((_QWORD *)v703 + 1);
          if (*(unsigned __int8 ***)v703 == v705)
            goto LABEL_999;
          do
          {
            sub_22372C314((uint64_t)a2, *v704, (uint64_t)object);
            v704 += 4;
          }
          while (v704 != v705);
          v706 = *((_QWORD *)v703 + 1);
          v707 = *(_QWORD *)v703;
          if (*(_QWORD *)v703 == v706)
          {
LABEL_999:
            v708 = 1;
          }
          else
          {
            while ((*(_BYTE *)(*(_QWORD *)v707 + 232) & 3) == 0)
            {
              v707 += 32;
              if (v707 == v706)
                goto LABEL_999;
            }
            if ((v1012[40] & 2) == 0
              || (v702[20 * v701 + 10] & 2) != 0
              || *((_QWORD *)v1012 + 1) - *(_QWORD *)v1012 <= (unint64_t)(v706 - *(_QWORD *)v703))
            {
              *(_QWORD *)v1083 = *a6;
              sub_2232D69F0((unsigned int *)object, (uint64_t *)v1083);
              v1073.__r_.__value_.__r.__words[0] = (*(unsigned int *)object | ((unint64_t)object[4] << 32) | ((unint64_t)object[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)object[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&object[4]) & 0xF | 0x40u) << 48);
              v1073.__r_.__value_.__l.__size_ = ((unint64_t)object[12] << 32) | ((unint64_t)object[13] << 40) | *(_DWORD *)&object[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&object[12] << 32) & 0xFF00000000000000 | ((unint64_t)object[14] << 48) | object[8] & 0x3F | 0x80;
              v717 = operator new();
              sub_22369F940(v717, &v1073, a1);
              *(_QWORD *)&__s = v717;
              v718 = sub_223729D64((uint64_t)a2, (unsigned __int8 **)&__s);
              v719 = __s;
              *(_QWORD *)&__s = 0;
              if (v719)
                sub_2236C86D0((uint64_t)&__s, v719);
              v720 = *(uint64_t **)v703;
              v721 = (uint64_t *)*((_QWORD *)v703 + 1);
              if (*(uint64_t **)v703 != v721)
              {
                do
                {
                  v722 = *v720;
                  *(_QWORD *)object = v718;
                  *(_QWORD *)&object[8] = v720[1];
                  sub_223731730((uint64_t)a2, v722, (unsigned __int8 **)object);
                  *(_QWORD *)(v720[1] + 24) = *a1;
                  v720 += 4;
                }
                while (v720 != v721);
              }
              v723 = (char *)&v702[20 * v701];
              v724 = (__int128 *)(v718 + 216);
              *(_OWORD *)object = *(_OWORD *)(v718 + 216);
              *(_QWORD *)&object[16] = *(_QWORD *)(v718 + 232);
              v1073 = *(std::string *)(v723 + 2);
              if (object[16])
              {
                if (v1073.__r_.__value_.__s.__data_[16])
                {
                  v725 = &v1073;
                  if (*(uint64_t *)object >= (uint64_t)v1073.__r_.__value_.__l.__data_)
                    v725 = (std::string *)object;
                  v726 = *(_OWORD *)&v725->__r_.__value_.__l.__data_;
                }
                else
                {
                  v726 = *v724;
                }
                *(_OWORD *)v1083 = v726;
                v753 = 1;
              }
              else
              {
                *(_OWORD *)v1083 = *((_OWORD *)v723 + 3);
                v753 = v1073.__r_.__value_.__s.__data_[16];
              }
              v754 = v701;
              *v724 = *(_OWORD *)v1083;
              *(_BYTE *)(v718 + 232) = v753;
              *(_OWORD *)v1069 = *(_OWORD *)v718;
              sub_2236BC11C(v1057);
              if (**((int **)v1057[0] + 7) > 3)
                goto LABEL_1315;
              v755 = *((unsigned __int8 *)v1057[0] + 72);
              v1054 = sub_22322F254((uint64_t)v1057[0], "OSLogSurrogateAppender", 1, 0);
              if (!v755 && !v1054)
                goto LABEL_1315;
              v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)v1057;
              v1073.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v1073.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
              v1074 = 3;
              v1075 = "unknown file";
              v1076 = 514;
              v1077 = "unknown function";
              v1078 = 0;
              v1079 = 0;
              sub_2245664AC(v1023, __src);
              v1044 = v755;
              sub_2245664AC(v1069, v1070);
              v1059 = (int **)v1070;
              v756 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
              v1017 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
              if (*(char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39) < 0)
              {
                v758 = *(const char **)(v756 + 16);
                v757 = *(_QWORD *)(v756 + 24);
                v1005 = *(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16;
                v848 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v848 & 1) == 0)
                {
LABEL_1322:
                  if (__cxa_guard_acquire(&qword_255788F58))
                  {
                    sub_224568628((uint64_t)v1083);
                    sub_223199C58("com.apple.cv3d", (unint64_t)v1083, &xmmword_255788F40);
                    if ((_BYTE)v1084 && (v1083[23] & 0x80000000) != 0)
                      operator delete(*(void **)v1083);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                    __cxa_guard_release(&qword_255788F58);
                    v700 = (unint64_t)v1008;
                  }
                }
              }
              else
              {
                v757 = *(unsigned __int8 *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39);
                v758 = (const char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16);
                v1005 = (uint64_t)v758;
                v759 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v759 & 1) == 0)
                  goto LABEL_1322;
              }
              if (byte_255788F57 >= 0)
                v849 = (const char *)&xmmword_255788F40;
              else
                v849 = (const char *)xmmword_255788F40;
              if (byte_255788F57 >= 0)
                v850 = byte_255788F57;
              else
                v850 = *((_QWORD *)&xmmword_255788F40 + 1);
              *(_QWORD *)object = os_log_create(v849, v758);
              if (v850 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v1028 = v758;
              if (v850 >= 0x17)
              {
                v852 = (v850 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v850 | 7) != 0x17)
                  v852 = v850 | 7;
                v853 = v852 + 1;
                v851 = operator new(v852 + 1);
                *(_QWORD *)&object[24] = v853 | 0x8000000000000000;
                *(_QWORD *)&object[8] = v851;
                *(_QWORD *)&object[16] = v850;
                v700 = (unint64_t)v1008;
              }
              else
              {
                object[31] = v850;
                v851 = &object[8];
                if (!v850)
                {
LABEL_1235:
                  v851[v850] = 0;
                  object[32] = 1;
                  if (v757 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v854 = v1044;
                  if (v757 >= 0x17)
                  {
                    v858 = (v757 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v757 | 7) != 0x17)
                      v858 = v757 | 7;
                    v859 = v858 + 1;
                    v855 = operator new(v858 + 1);
                    v1081 = v859 | 0x8000000000000000;
                    *(_QWORD *)&object[40] = v855;
                    *(_QWORD *)&object[48] = v757;
                  }
                  else
                  {
                    HIBYTE(v1081) = v757;
                    v855 = &object[40];
                    if (!v757)
                    {
                      object[40] = 0;
                      v1082 = 1;
                      v856 = *(NSObject **)object;
                      if ((SHIBYTE(v1081) & 0x80000000) == 0)
                        goto LABEL_1239;
LABEL_1245:
                      operator delete(*(void **)&object[40]);
                      v857 = v1054;
                      if (object[32])
                        goto LABEL_1246;
                      goto LABEL_1248;
                    }
                  }
                  memmove(v855, v1028, v757);
                  v855[v757] = 0;
                  v1082 = 1;
                  v856 = *(NSObject **)object;
                  if (SHIBYTE(v1081) < 0)
                    goto LABEL_1245;
LABEL_1239:
                  v857 = v1054;
                  if (object[32])
                  {
LABEL_1246:
                    if ((object[31] & 0x80000000) != 0)
                      operator delete(*(void **)&object[8]);
                  }
LABEL_1248:
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (v857 && *(_QWORD *)(v857 + 24))
                  {
                    v860 = _os_log_pack_size();
                    v861 = (std::__shared_weak_count_vtbl *)operator new(v860, (std::align_val_t)8uLL);
                    v862 = (std::__shared_weak_count *)operator new();
                    v862->__shared_owners_ = 0;
                    v863 = (unint64_t *)&v862->__shared_owners_;
                    v862->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v862->__shared_weak_owners_ = 0;
                    v862[1].__vftable = v861;
                    *(_QWORD *)&__s = v861;
                    *((_QWORD *)&__s + 1) = v861;
                    v1087 = v862;
                    v1088 = 0;
                    v1089 = 0;
                    sub_2236C879C((uint64_t)object, __src, (const char **)&v1059);
                    v864 = (char *)operator new(0x50uLL);
                    v865 = (std::__shared_weak_count *)v864;
                    *((_QWORD *)v864 + 1) = 0;
                    v866 = (unint64_t *)(v864 + 8);
                    *((_QWORD *)v864 + 2) = 0;
                    *(_QWORD *)v864 = &off_24EC20730;
                    *((_QWORD *)v864 + 3) = off_24EC20780;
                    *((_OWORD *)v864 + 2) = *(_OWORD *)&object[8];
                    *((_QWORD *)v864 + 6) = *(_QWORD *)&object[24];
                    *(_OWORD *)(v864 + 56) = *(_OWORD *)&object[32];
                    *((_QWORD *)v864 + 9) = *(_QWORD *)&object[48];
                    v1088 = v864 + 24;
                    v1089 = (std::__shared_weak_count *)v864;
                    *(_QWORD *)v1083 = v861;
                    *(_QWORD *)&v1083[8] = v861;
                    *(_QWORD *)&v1083[16] = v862;
                    do
                      v867 = __ldxr(v863);
                    while (__stxr(v867 + 1, v863));
                    *(_QWORD *)&v1084 = v864 + 24;
                    *((_QWORD *)&v1084 + 1) = v864;
                    do
                      v868 = __ldxr(v866);
                    while (__stxr(v868 + 1, v866));
                    v1085 = v864 + 24;
                    v700 = (unint64_t)v1008;
                    do
                      v869 = __ldaxr(v866);
                    while (__stlxr(v869 - 1, v866));
                    if (!v869)
                    {
                      (*(void (**)(char *))(*(_QWORD *)v864 + 16))(v864);
                      std::__shared_weak_count::__release_weak(v865);
                    }
                    v870 = v1087;
                    if (v1087)
                    {
                      v871 = (unint64_t *)&v1087->__shared_owners_;
                      do
                        v872 = __ldaxr(v871);
                      while (__stlxr(v872 - 1, v871));
                      if (!v872)
                      {
                        ((void (*)(std::__shared_weak_count *))v870->__on_zero_shared)(v870);
                        std::__shared_weak_count::__release_weak(v870);
                      }
                    }
                    v873 = *(_QWORD *)v1083;
                    if (v1085[31] >= 0)
                      v874 = v1085 + 8;
                    else
                      v874 = (char *)*((_QWORD *)v1085 + 1);
                    if (v1085[55] >= 0)
                      v875 = v1085 + 32;
                    else
                      v875 = (char *)*((_QWORD *)v1085 + 4);
                    v876 = _os_log_pack_fill();
                    *(_DWORD *)v876 = 68158466;
                    *(_DWORD *)(v876 + 4) = 13;
                    *(_WORD *)(v876 + 8) = 2080;
                    *(_QWORD *)(v876 + 10) = v874;
                    *(_WORD *)(v876 + 18) = 1040;
                    *(_DWORD *)(v876 + 20) = 13;
                    *(_WORD *)(v876 + 24) = 2080;
                    *(_QWORD *)(v876 + 26) = v875;
                    v877 = operator new();
                    v878 = *(unsigned __int8 *)(v1017 + 39);
                    v879 = v1005;
                    if ((v878 & 0x80u) != 0)
                    {
                      v879 = *(_QWORD *)(v1017 + 16);
                      v878 = *(_QWORD *)(v1017 + 24);
                    }
                    *(_QWORD *)v877 = v873;
                    *(_OWORD *)(v877 + 8) = *(_OWORD *)&v1083[8];
                    *(_QWORD *)&v1083[8] = 0;
                    *(_QWORD *)&v1083[16] = 0;
                    *(_OWORD *)(v877 + 24) = v1084;
                    v1084 = 0uLL;
                    *(_QWORD *)(v877 + 40) = v879;
                    *(_QWORD *)(v877 + 48) = v878;
                    *(_BYTE *)(v877 + 56) = 1;
                    *(_QWORD *)&__s = 0;
                    *(_QWORD *)object = v877;
                    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v1054 + 24) + 40))(*(_QWORD *)(v1054 + 24), object);
                    v854 = v1044;
                    v880 = *(_QWORD *)object;
                    *(_QWORD *)object = 0;
                    if (v880)
                    {
                      v881 = *(std::__shared_weak_count **)(v880 + 32);
                      if (v881)
                      {
                        v882 = (unint64_t *)&v881->__shared_owners_;
                        do
                          v883 = __ldaxr(v882);
                        while (__stlxr(v883 - 1, v882));
                        if (!v883)
                        {
                          ((void (*)(std::__shared_weak_count *))v881->__on_zero_shared)(v881);
                          std::__shared_weak_count::__release_weak(v881);
                        }
                      }
                      v884 = *(std::__shared_weak_count **)(v880 + 16);
                      if (v884)
                      {
                        v885 = (unint64_t *)&v884->__shared_owners_;
                        do
                          v886 = __ldaxr(v885);
                        while (__stlxr(v886 - 1, v885));
                        if (!v886)
                        {
                          ((void (*)(std::__shared_weak_count *))v884->__on_zero_shared)(v884);
                          std::__shared_weak_count::__release_weak(v884);
                        }
                      }
                      MEMORY[0x227684CE8](v880, 0x10F0C40B62ED6C6);
                      v887 = __s;
                      *(_QWORD *)&__s = 0;
                      if (v887)
                      {
                        v888 = *(std::__shared_weak_count **)(v887 + 32);
                        if (v888)
                        {
                          v889 = (unint64_t *)&v888->__shared_owners_;
                          do
                            v890 = __ldaxr(v889);
                          while (__stlxr(v890 - 1, v889));
                          if (!v890)
                          {
                            ((void (*)(std::__shared_weak_count *))v888->__on_zero_shared)(v888);
                            std::__shared_weak_count::__release_weak(v888);
                          }
                        }
                        v891 = *(std::__shared_weak_count **)(v887 + 16);
                        if (v891)
                        {
                          v892 = (unint64_t *)&v891->__shared_owners_;
                          do
                            v893 = __ldaxr(v892);
                          while (__stlxr(v893 - 1, v892));
                          if (!v893)
                          {
                            ((void (*)(std::__shared_weak_count *))v891->__on_zero_shared)(v891);
                            std::__shared_weak_count::__release_weak(v891);
                          }
                        }
                        MEMORY[0x227684CE8](v887, 0x10F0C40B62ED6C6);
                      }
                    }
                    v894 = (std::__shared_weak_count *)*((_QWORD *)&v1084 + 1);
                    if (*((_QWORD *)&v1084 + 1))
                    {
                      v895 = (unint64_t *)(*((_QWORD *)&v1084 + 1) + 8);
                      do
                        v896 = __ldaxr(v895);
                      while (__stlxr(v896 - 1, v895));
                      if (!v896)
                      {
                        ((void (*)(std::__shared_weak_count *))v894->__on_zero_shared)(v894);
                        std::__shared_weak_count::__release_weak(v894);
                      }
                    }
                    v897 = *(std::__shared_weak_count **)&v1083[16];
                    if (*(_QWORD *)&v1083[16])
                    {
                      v898 = (unint64_t *)(*(_QWORD *)&v1083[16] + 8);
                      do
                        v899 = __ldaxr(v898);
                      while (__stlxr(v899 - 1, v898));
                      if (!v899)
                      {
                        ((void (*)(std::__shared_weak_count *))v897->__on_zero_shared)(v897);
                        std::__shared_weak_count::__release_weak(v897);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v856, OS_LOG_TYPE_INFO);
                    *(_QWORD *)object = 0xD04100402;
                    *(_WORD *)&object[8] = 2080;
                    *(_QWORD *)&object[10] = __src;
                    *(_WORD *)&object[18] = 1040;
                    *(_DWORD *)&object[20] = 13;
                    *(_WORD *)&object[24] = 2080;
                    *(_QWORD *)&object[26] = v1059;
                    v900 = (void *)_os_log_send_and_compose_impl();
                    if (v900)
                      free(v900);
                  }
                  if (v854)
                  {
                    sub_2245664AC(v1023, object);
                    sub_2245664AC(v1069, v1083);
                    sub_22322C138((uint64_t)&v1073, "SplitGlobalPlanes: Split part of global plane %.13s into new global plane %.13s", object, v1083);
                    sub_223182C08((uint64_t)&v1073);
                  }
                  sub_223182C08((uint64_t)&v1073);
                  v901 = v1079;
                  if (v1079)
                  {
                    v902 = (unint64_t *)&v1079->__shared_owners_;
                    do
                      v903 = __ldaxr(v902);
                    while (__stlxr(v903 - 1, v902));
                    if (!v903)
                    {
                      ((void (*)(std::__shared_weak_count *))v901->__on_zero_shared)(v901);
                      std::__shared_weak_count::__release_weak(v901);
                    }
                  }
LABEL_1315:
                  *(_QWORD *)object = v1069;
                  *((_DWORD *)sub_2231A9C40(v1056, v1069, (uint64_t)&unk_2245BA939, (_OWORD **)object) + 11) = 64;
                  v701 = v754;
                  if (*(_QWORD *)&v702[20 * v754 + 6] >= *a1)
                  {
                    v904 = v702[20 * v754 + 10];
                    *(_QWORD *)object = v1069;
                    v905 = sub_2231A9C40(v1056, v1069, (uint64_t)&unk_2245BA939, (_OWORD **)object);
                    *((_DWORD *)v905 + 11) |= v904;
                  }
                  goto LABEL_993;
                }
              }
              memmove(v851, v849, v850);
              goto LABEL_1235;
            }
            v708 = 2;
          }
          v1068[0] = v708;
          sub_2236BC11C(&v1059);
          if (*v1059[7] <= 3)
          {
            v709 = *((unsigned __int8 *)v1059 + 72);
            v710 = sub_22322F254((uint64_t)v1059, "OSLogSurrogateAppender", 1, 0);
            v711 = v710;
            if (v709 || v710 != 0)
              break;
          }
LABEL_1167:
          *(_QWORD *)v1083 = operator new(0x38uLL);
          *(_OWORD *)&v1083[8] = xmmword_2245C43E0;
          strcpy(*(char **)v1083, "KeyframePlanes.GlobalPlaneSplittingErasedComponents");
          v1073.__r_.__value_.__r.__words[0] = *a6;
          sub_2232D69F0((unsigned int *)object, (uint64_t *)&v1073);
          *(_QWORD *)&__s = (*(unsigned int *)object | ((unint64_t)object[4] << 32) | ((unint64_t)object[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)object[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&object[4]) & 0xF | 0x40u) << 48);
          *((_QWORD *)&__s + 1) = ((unint64_t)object[12] << 32) | ((unint64_t)object[13] << 40) | *(_DWORD *)&object[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&object[12] << 32) & 0xFF00000000000000 | ((unint64_t)object[14] << 48) | object[8] & 0x3F | 0x80;
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v813 = sub_2241471F8();
            v814 = v813[2];
            if (!v814)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v814 = v813[2];
            }
            v815 = *(_QWORD *)(v814 + 64);
            v816 = (std::mutex *)(v815 + 32);
            std::mutex::lock((std::mutex *)(v815 + 32));
            v818 = *(_QWORD *)(v815 + 96);
            v817 = *(_QWORD *)(v815 + 104);
            std::mutex::unlock(v816);
            if (v818 != v817)
            {
              *(_QWORD *)object = "cv3d.recon.";
              *(_QWORD *)&object[8] = 11;
              v819 = v1083[23];
              v820 = v1083;
              if (v1083[23] < 0)
              {
                v820 = *(_BYTE **)v1083;
                v819 = *(_QWORD *)&v1083[8];
              }
              *(_QWORD *)&object[16] = v820;
              *(_QWORD *)&object[24] = v819;
              sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v1073);
              v821 = HIBYTE(v1073.__r_.__value_.__r.__words[2]);
              v822 = v1073.__r_.__value_.__r.__words[0];
              sub_2241471F8();
              if (v821 >= 0)
                v823 = &v1073;
              else
                v823 = (std::string *)v822;
              v824 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v823);
              v825 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v824 + 24))(v824);
              v826 = v825;
              if (SHIBYTE(v1073.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v1073.__r_.__value_.__l.__data_);
                if (!v826)
                  goto LABEL_1193;
              }
              else if (!v825)
              {
                goto LABEL_1193;
              }
              v827 = operator new();
              *(double *)v828.i64 = sub_22369F940(v827, &__s, a1);
              *(_QWORD *)v1070 = v827;
              v830 = *(uint64_t **)v703;
              v831 = (uint64_t *)*((_QWORD *)v703 + 1);
              if (*(uint64_t **)v703 == v831)
                goto LABEL_1188;
              do
              {
                sub_22369FA8C(*(uint64_t *)v1070, *v830);
                v830 += 4;
              }
              while (v830 != v831);
              v832 = *(_QWORD *)v703;
              v833 = *((_QWORD *)v703 + 1);
              memset(object, 0, 24);
              v834 = v833 - v832;
              if (v833 == v832)
              {
LABEL_1188:
                v836 = 0;
                v835 = 0;
              }
              else
              {
                if (v834 < 0)
                  sub_22316E078();
                *(_QWORD *)object = operator new((unint64_t)v834 >> 2);
                *(_QWORD *)&object[8] = *(_QWORD *)object;
                *(_QWORD *)&object[16] = *(_QWORD *)object + 8 * (v834 >> 5);
                v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
                do
                {
                  *(_QWORD *)__src = *(_QWORD *)(v832 + 8);
                  sub_2232EA538((void ***)&v1073, __src);
                  v832 += 32;
                }
                while (v832 != v833);
                v835 = *(uint64_t **)object;
                v836 = *(_QWORD *)&object[8];
              }
              sub_2236A9D38(*(uint64_t *)v1070, a1, (v836 - (uint64_t)v835) >> 3, v835, 0x100000004, a4, a5, v828, v829);
              sub_2236AB1A4(*(unsigned __int8 **)v1070, (const void **)v1083);
              if (v835)
                operator delete(v835);
              v837 = *(_QWORD *)v1070;
              *(_QWORD *)v1070 = 0;
              if (v837)
                sub_2236C86D0((uint64_t)v1070, v837);
            }
          }
LABEL_1193:
          v838 = *(_QWORD *)v703;
          v839 = *((_QWORD *)v703 + 1);
          if (*(_QWORD *)v703 != v839)
          {
            do
            {
              while (1)
              {
                v840 = *(_OWORD **)v838;
                if (v690 >= v699)
                  break;
                *(_QWORD *)v690 = *(_QWORD *)(v838 + 8);
                *(_OWORD *)(v690 + 8) = *v840;
                v690 += 24;
                v838 += 32;
                if (v838 == v839)
                  goto LABEL_991;
              }
              v841 = 0xAAAAAAAAAAAAAAABLL * ((v690 - v689) >> 3) + 1;
              if (v841 > 0xAAAAAAAAAAAAAAALL)
                sub_22316E078();
              if (0x5555555555555556 * ((v699 - v689) >> 3) > v841)
                v841 = 0x5555555555555556 * ((v699 - v689) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v699 - v689) >> 3) >= 0x555555555555555)
                v842 = 0xAAAAAAAAAAAAAAALL;
              else
                v842 = v841;
              if (v842)
              {
                if (v842 > 0xAAAAAAAAAAAAAAALL)
                  sub_223174E94();
                v843 = (char *)operator new(24 * v842);
              }
              else
              {
                v843 = 0;
              }
              v844 = &v843[8 * ((v690 - v689) >> 3)];
              *(_QWORD *)v844 = *(_QWORD *)(v838 + 8);
              *(_OWORD *)(v844 + 8) = *v840;
              if (v690 == v689)
              {
                v846 = &v843[8 * ((v690 - v689) >> 3)];
                v699 = &v843[24 * v842];
                v690 = v844 + 24;
                if (!v689)
                  goto LABEL_1212;
              }
              else
              {
                v845 = &v843[8 * ((v690 - v689) >> 3)];
                do
                {
                  v846 = v845 - 24;
                  v847 = *(_OWORD *)(v690 - 24);
                  *((_QWORD *)v845 - 1) = *((_QWORD *)v690 - 1);
                  *(_OWORD *)(v845 - 24) = v847;
                  v690 -= 24;
                  v845 -= 24;
                }
                while (v690 != v689);
                v699 = &v843[24 * v842];
                v690 = v844 + 24;
                if (!v689)
                  goto LABEL_1212;
              }
              operator delete(v689);
LABEL_1212:
              v689 = v846;
              v838 += 32;
            }
            while (v838 != v839);
          }
LABEL_991:
          if ((v1083[23] & 0x80000000) != 0)
            operator delete(*(void **)v1083);
LABEL_993:
          if (++v701 == v700)
            goto LABEL_961;
        }
        v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1059;
        v1073.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v1073.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v1074 = 3;
        v1075 = "unknown file";
        v1076 = 495;
        v1077 = "unknown function";
        v1078 = 0;
        v1079 = 0;
        sub_2245664AC(v1023, __src);
        *(_DWORD *)&object[24] = 0;
        sub_2236C8D8C((std::string::size_type)object, v1068);
        if (*(_DWORD *)&object[24] == -1)
          sub_22316DD70();
        *(_QWORD *)v1083 = &__s;
        ((void (*)(void **__return_ptr, _BYTE *, _BYTE *))off_24EC57590[*(unsigned int *)&object[24]])(v1057, v1083, object);
        if (*(_DWORD *)&object[24] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24EC57578[*(unsigned int *)&object[24]])(v1083, object);
        v1016 = v709;
        v713 = v1057;
        if (v1058 < 0)
          v713 = (void **)v1057[0];
        v1037 = v701;
        v1043 = (char *)v713;
        v714 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
        v715 = (const char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16);
        v1004 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
        v1002 = v715;
        if (*(char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v715 = *(const char **)(v714 + 16);
          v716 = *(_QWORD *)(v714 + 24);
        }
        else
        {
          v716 = *(unsigned __int8 *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39);
        }
        v1053 = v711;
        v1027 = v703;
        v729 = v703;
        v728 = *(_QWORD *)v703;
        v727 = *((_QWORD *)v729 + 1);
        v730 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v730 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v1083);
          sub_223199C58("com.apple.cv3d", (unint64_t)v1083, &xmmword_255788F40);
          if ((_BYTE)v1084 && (v1083[23] & 0x80000000) != 0)
            operator delete(*(void **)v1083);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v731 = (const char *)&xmmword_255788F40;
        else
          v731 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v732 = byte_255788F57;
        else
          v732 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v731, v715);
        if (v732 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v732 >= 0x17)
        {
          v1000 = v716;
          v734 = v715;
          v735 = v728;
          v736 = v727;
          v737 = (v732 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v732 | 7) != 0x17)
            v737 = v732 | 7;
          v738 = v737 + 1;
          v733 = operator new(v737 + 1);
          *(_QWORD *)&object[24] = v738 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v733;
          *(_QWORD *)&object[16] = v732;
          v727 = v736;
          v728 = v735;
          v715 = v734;
          v716 = v1000;
        }
        else
        {
          object[31] = v732;
          v733 = &object[8];
          if (!v732)
          {
LABEL_1041:
            v733[v732] = 0;
            object[32] = 1;
            if (v716 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v716 >= 0x17)
            {
              v742 = (v716 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v716 | 7) != 0x17)
                v742 = v716 | 7;
              v743 = v742 + 1;
              v739 = operator new(v742 + 1);
              v1081 = v743 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v739;
              *(_QWORD *)&object[48] = v716;
            }
            else
            {
              HIBYTE(v1081) = v716;
              v739 = &object[40];
              if (!v716)
              {
                object[40] = 0;
                v1082 = 1;
                v740 = *(NSObject **)object;
                if ((SHIBYTE(v1081) & 0x80000000) == 0)
                  goto LABEL_1045;
                goto LABEL_1051;
              }
            }
            memmove(v739, v715, v716);
            v739[v716] = 0;
            v1082 = 1;
            v740 = *(NSObject **)object;
            if ((SHIBYTE(v1081) & 0x80000000) == 0)
            {
LABEL_1045:
              v700 = (unint64_t)v1008;
              v741 = v1053;
              if (!object[32])
                goto LABEL_1054;
              goto LABEL_1052;
            }
LABEL_1051:
            operator delete(*(void **)&object[40]);
            v700 = (unint64_t)v1008;
            v741 = v1053;
            if (!object[32])
              goto LABEL_1054;
LABEL_1052:
            if ((object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
LABEL_1054:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            v744 = (v727 - v728) >> 5;
            if (!v741 || !*(_QWORD *)(v741 + 24))
            {
              os_log_type_enabled(v740, OS_LOG_TYPE_INFO);
              *(_QWORD *)object = 0xD04100402;
              *(_WORD *)&object[8] = 2080;
              *(_QWORD *)&object[10] = __src;
              *(_WORD *)&object[18] = 2080;
              *(_QWORD *)&object[20] = v1043;
              *(_WORD *)&object[28] = 2048;
              *(_QWORD *)&object[30] = v744;
              v751 = (void *)_os_log_send_and_compose_impl();
              v701 = v1037;
              v703 = v1027;
              if (v751)
              {
                free(v751);
                v752 = v1016;
                if ((v1058 & 0x80000000) == 0)
                  goto LABEL_1153;
                goto LABEL_1064;
              }
              goto LABEL_1152;
            }
            v745 = _os_log_pack_size();
            v701 = v1037;
            v703 = v1027;
            v746 = (std::__shared_weak_count_vtbl *)operator new(v745, (std::align_val_t)8uLL);
            v747 = (std::__shared_weak_count *)operator new();
            v747->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v747->__shared_owners_ = 0;
            v747->__shared_weak_owners_ = 0;
            v747[1].__vftable = v746;
            *(_QWORD *)&__s = v746;
            *((_QWORD *)&__s + 1) = v746;
            v1087 = v747;
            v1088 = 0;
            v1089 = 0;
            v748 = strlen(__src);
            if (v748 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v749 = v748;
            if (v748 >= 0x17)
            {
              v760 = (v748 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v748 | 7) != 0x17)
                v760 = v748 | 7;
              v761 = v760 + 1;
              v750 = operator new(v760 + 1);
              *(_QWORD *)&v1070[16] = v761 | 0x8000000000000000;
              *(_QWORD *)v1070 = v750;
              *(_QWORD *)&v1070[8] = v749;
            }
            else
            {
              v1070[23] = v748;
              v750 = v1070;
              if (!v748)
              {
LABEL_1079:
                v750[v749] = 0;
                v762 = strlen(v1043);
                if (v762 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v763 = v762;
                if (v762 >= 0x17)
                {
                  v765 = (v762 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v762 | 7) != 0x17)
                    v765 = v762 | 7;
                  v766 = v765 + 1;
                  v764 = operator new(v765 + 1);
                  *(_QWORD *)&v1069[16] = v766 | 0x8000000000000000;
                  *(_QWORD *)v1069 = v764;
                  *(_QWORD *)&v1069[8] = v763;
                }
                else
                {
                  v1069[23] = v762;
                  v764 = v1069;
                  if (!v762)
                    goto LABEL_1087;
                }
                memcpy(v764, v1043, v763);
LABEL_1087:
                v764[v763] = 0;
                *(_QWORD *)&object[16] = *(_QWORD *)&v1070[8];
                *(_QWORD *)&object[23] = *(_QWORD *)&v1070[15];
                *(_QWORD *)&object[40] = *(_QWORD *)&v1069[8];
                *(_QWORD *)&object[47] = *(_QWORD *)&v1069[15];
                *(_QWORD *)object = off_24EC57608;
                *(_QWORD *)&object[8] = *(_QWORD *)v1070;
                object[31] = v1070[23];
                *(_QWORD *)&object[32] = *(_QWORD *)v1069;
                object[55] = v1069[23];
                v767 = (char *)operator new(0x50uLL);
                *((_QWORD *)v767 + 1) = 0;
                *((_QWORD *)v767 + 2) = 0;
                *((_QWORD *)v767 + 3) = off_24EC57608;
                *(_QWORD *)v767 = &off_24EC575B8;
                *((_OWORD *)v767 + 2) = *(_OWORD *)&object[8];
                *((_QWORD *)v767 + 6) = *(_QWORD *)&object[24];
                memset(&object[8], 0, 24);
                *(_OWORD *)(v767 + 56) = *(_OWORD *)&object[32];
                *((_QWORD *)v767 + 9) = *(_QWORD *)&object[48];
                memset(&object[32], 0, 24);
                v768 = v1089;
                v1088 = v767 + 24;
                v1089 = (std::__shared_weak_count *)v767;
                if (!v768)
                  goto LABEL_1091;
                v769 = (unint64_t *)&v768->__shared_owners_;
                do
                  v770 = __ldaxr(v769);
                while (__stlxr(v770 - 1, v769));
                if (!v770)
                {
                  ((void (*)(std::__shared_weak_count *))v768->__on_zero_shared)(v768);
                  std::__shared_weak_count::__release_weak(v768);
                  if ((object[55] & 0x80000000) == 0)
                  {
LABEL_1092:
                    if ((object[31] & 0x80000000) == 0)
                      goto LABEL_1093;
                    goto LABEL_1097;
                  }
                }
                else
                {
LABEL_1091:
                  if ((object[55] & 0x80000000) == 0)
                    goto LABEL_1092;
                }
                operator delete(*(void **)&object[32]);
                if ((object[31] & 0x80000000) == 0)
                {
LABEL_1093:
                  *(_OWORD *)v1083 = __s;
                  v772 = v1087;
                  v771 = v1088;
                  *(_QWORD *)&v1083[16] = v1087;
                  if (!v1087)
                    goto LABEL_1100;
                  goto LABEL_1098;
                }
LABEL_1097:
                operator delete(*(void **)&object[8]);
                *(_OWORD *)v1083 = __s;
                v772 = v1087;
                v771 = v1088;
                *(_QWORD *)&v1083[16] = v1087;
                if (!v1087)
                  goto LABEL_1100;
LABEL_1098:
                v773 = (unint64_t *)&v772->__shared_owners_;
                do
                  v774 = __ldxr(v773);
                while (__stxr(v774 + 1, v773));
LABEL_1100:
                v775 = v1089;
                *(_QWORD *)&v1084 = v771;
                *((_QWORD *)&v1084 + 1) = v1089;
                if (v1089)
                {
                  v776 = (unint64_t *)&v1089->__shared_owners_;
                  do
                    v777 = __ldxr(v776);
                  while (__stxr(v777 + 1, v776));
                  v1085 = v771;
                  do
                    v778 = __ldaxr(v776);
                  while (__stlxr(v778 - 1, v776));
                  if (!v778)
                  {
                    ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
                    std::__shared_weak_count::__release_weak(v775);
                  }
                }
                else
                {
                  v1085 = v771;
                }
                v779 = v1087;
                if (v1087)
                {
                  v780 = (unint64_t *)&v1087->__shared_owners_;
                  do
                    v781 = __ldaxr(v780);
                  while (__stlxr(v781 - 1, v780));
                  if (!v781)
                  {
                    ((void (*)(std::__shared_weak_count *))v779->__on_zero_shared)(v779);
                    std::__shared_weak_count::__release_weak(v779);
                  }
                }
                v782 = *(_QWORD *)v1083;
                if (v1085[31] >= 0)
                  v783 = v1085 + 8;
                else
                  v783 = (char *)*((_QWORD *)v1085 + 1);
                if (v1085[55] >= 0)
                  v784 = v1085 + 32;
                else
                  v784 = (char *)*((_QWORD *)v1085 + 4);
                v785 = _os_log_pack_fill();
                *(_DWORD *)v785 = 68158466;
                *(_DWORD *)(v785 + 4) = 13;
                *(_WORD *)(v785 + 8) = 2080;
                *(_QWORD *)(v785 + 10) = v783;
                *(_WORD *)(v785 + 18) = 2080;
                *(_QWORD *)(v785 + 20) = v784;
                *(_WORD *)(v785 + 28) = 2048;
                *(_QWORD *)(v785 + 30) = v744;
                v786 = operator new();
                v787 = *(unsigned __int8 *)(v1004 + 39);
                v788 = v1002;
                if ((v787 & 0x80u) != 0)
                {
                  v788 = *(const char **)(v1004 + 16);
                  v787 = *(_QWORD *)(v1004 + 24);
                }
                *(_QWORD *)v786 = v782;
                *(_OWORD *)(v786 + 8) = *(_OWORD *)&v1083[8];
                *(_QWORD *)&v1083[8] = 0;
                *(_QWORD *)&v1083[16] = 0;
                *(_OWORD *)(v786 + 24) = v1084;
                v1084 = 0uLL;
                *(_QWORD *)(v786 + 40) = v788;
                *(_QWORD *)(v786 + 48) = v787;
                *(_BYTE *)(v786 + 56) = 1;
                *(_QWORD *)&__s = 0;
                *(_QWORD *)object = v786;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v1053 + 24) + 40))(*(_QWORD *)(v1053 + 24), object);
                v700 = (unint64_t)v1008;
                v789 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                if (v789)
                {
                  v790 = *(std::__shared_weak_count **)(v789 + 32);
                  if (v790)
                  {
                    v791 = (unint64_t *)&v790->__shared_owners_;
                    do
                      v792 = __ldaxr(v791);
                    while (__stlxr(v792 - 1, v791));
                    if (!v792)
                    {
                      ((void (*)(std::__shared_weak_count *))v790->__on_zero_shared)(v790);
                      std::__shared_weak_count::__release_weak(v790);
                    }
                  }
                  v793 = *(std::__shared_weak_count **)(v789 + 16);
                  if (v793)
                  {
                    v794 = (unint64_t *)&v793->__shared_owners_;
                    do
                      v795 = __ldaxr(v794);
                    while (__stlxr(v795 - 1, v794));
                    if (!v795)
                    {
                      ((void (*)(std::__shared_weak_count *))v793->__on_zero_shared)(v793);
                      std::__shared_weak_count::__release_weak(v793);
                    }
                  }
                  MEMORY[0x227684CE8](v789, 0x10F0C40B62ED6C6);
                  v796 = __s;
                  *(_QWORD *)&__s = 0;
                  if (v796)
                  {
                    v797 = *(std::__shared_weak_count **)(v796 + 32);
                    if (v797)
                    {
                      v798 = (unint64_t *)&v797->__shared_owners_;
                      do
                        v799 = __ldaxr(v798);
                      while (__stlxr(v799 - 1, v798));
                      if (!v799)
                      {
                        ((void (*)(std::__shared_weak_count *))v797->__on_zero_shared)(v797);
                        std::__shared_weak_count::__release_weak(v797);
                      }
                    }
                    v800 = *(std::__shared_weak_count **)(v796 + 16);
                    if (v800)
                    {
                      v801 = (unint64_t *)&v800->__shared_owners_;
                      do
                        v802 = __ldaxr(v801);
                      while (__stlxr(v802 - 1, v801));
                      if (!v802)
                      {
                        ((void (*)(std::__shared_weak_count *))v800->__on_zero_shared)(v800);
                        std::__shared_weak_count::__release_weak(v800);
                      }
                    }
                    MEMORY[0x227684CE8](v796, 0x10F0C40B62ED6C6);
                  }
                }
                v803 = (std::__shared_weak_count *)*((_QWORD *)&v1084 + 1);
                if (!*((_QWORD *)&v1084 + 1))
                  goto LABEL_1148;
                v804 = (unint64_t *)(*((_QWORD *)&v1084 + 1) + 8);
                do
                  v805 = __ldaxr(v804);
                while (__stlxr(v805 - 1, v804));
                if (!v805)
                {
                  ((void (*)(std::__shared_weak_count *))v803->__on_zero_shared)(v803);
                  std::__shared_weak_count::__release_weak(v803);
                  v806 = *(std::__shared_weak_count **)&v1083[16];
                  if (!*(_QWORD *)&v1083[16])
                    goto LABEL_1152;
                }
                else
                {
LABEL_1148:
                  v806 = *(std::__shared_weak_count **)&v1083[16];
                  if (!*(_QWORD *)&v1083[16])
                    goto LABEL_1152;
                }
                v807 = (unint64_t *)&v806->__shared_owners_;
                do
                  v808 = __ldaxr(v807);
                while (__stlxr(v808 - 1, v807));
                if (!v808)
                {
                  ((void (*)(std::__shared_weak_count *))v806->__on_zero_shared)(v806);
                  std::__shared_weak_count::__release_weak(v806);
                  v752 = v1016;
                  if ((v1058 & 0x80000000) == 0)
                  {
LABEL_1153:
                    if (v752)
                      goto LABEL_1154;
                    goto LABEL_1162;
                  }
LABEL_1064:
                  operator delete(v1057[0]);
                  if (v752)
                  {
LABEL_1154:
                    sub_2245664AC(v1023, object);
                    LODWORD(v1084) = 0;
                    sub_2236C8D8C((std::string::size_type)v1083, v1068);
                    if ((_DWORD)v1084 == -1)
                      sub_22316DD70();
                    *(_QWORD *)__src = v1070;
                    ((void (*)(__int128 *__return_ptr, char *, _BYTE *))off_24EC57590[v1084])(&__s, __src, v1083);
                    if ((_DWORD)v1084 != -1)
                      ((void (*)(char *, _BYTE *))off_24EC57578[v1084])(__src, v1083);
                    p_s = (const char *)&__s;
                    if (SHIBYTE(v1087) < 0)
                      p_s = (const char *)__s;
                    sub_22322C138((uint64_t)&v1073, "SplitGlobalPlanes: Split part of global plane %.13s and not creating new global plane (reason: %s); removing %zu keyframe planes ",
                      object,
                      p_s,
                      (uint64_t)(*((_QWORD *)v703 + 1) - *(_QWORD *)v703) >> 5);
                    if (SHIBYTE(v1087) < 0)
                      operator delete((void *)__s);
                    sub_223182C08((uint64_t)&v1073);
                  }
LABEL_1162:
                  sub_223182C08((uint64_t)&v1073);
                  v810 = v1079;
                  if (v1079)
                  {
                    v811 = (unint64_t *)&v1079->__shared_owners_;
                    do
                      v812 = __ldaxr(v811);
                    while (__stlxr(v812 - 1, v811));
                    if (!v812)
                    {
                      ((void (*)(std::__shared_weak_count *))v810->__on_zero_shared)(v810);
                      std::__shared_weak_count::__release_weak(v810);
                    }
                  }
                  goto LABEL_1167;
                }
LABEL_1152:
                v752 = v1016;
                if ((v1058 & 0x80000000) == 0)
                  goto LABEL_1153;
                goto LABEL_1064;
              }
            }
            memcpy(v750, __src, v749);
            goto LABEL_1079;
          }
        }
        memmove(v733, v731, v732);
        goto LABEL_1041;
      }
      v689 = 0;
      v690 = 0;
LABEL_961:
      v691 = *v995;
      if (!*v995)
      {
LABEL_962:
        v692 = 0;
        goto LABEL_1331;
      }
      while (1)
      {
        if ((char)sub_22319835C(v1023, v691 + 28) < 0)
          goto LABEL_964;
        if (((char)sub_22319835C(v691 + 28, v1023) & 0x80000000) == 0)
          break;
        v691 += 8;
LABEL_964:
        v691 = *(unsigned __int8 **)v691;
        if (!v691)
          goto LABEL_962;
      }
      v693 = *v995;
      if (!*v995)
        goto LABEL_1499;
      v694 = v995;
      while (1)
      {
        while (1)
        {
          v695 = (unsigned __int8 **)v693;
          v696 = v693 + 28;
          v697 = v693[28];
          v698 = *v1023;
          if (v698 == v697)
          {
            v698 = *((unsigned __int8 *)v1021 + 26);
            v697 = *((unsigned __int8 *)v695 + 29);
            if (v698 == v697)
            {
              v698 = *((unsigned __int8 *)v1021 + 27);
              v697 = *((unsigned __int8 *)v695 + 30);
              if (v698 == v697)
              {
                v698 = *((unsigned __int8 *)v1021 + 28);
                v697 = *((unsigned __int8 *)v695 + 31);
                if (v698 == v697)
                {
                  v698 = *((unsigned __int8 *)v1021 + 29);
                  v697 = *((unsigned __int8 *)v695 + 32);
                  if (v698 == v697)
                  {
                    v698 = *((unsigned __int8 *)v1021 + 30);
                    v697 = *((unsigned __int8 *)v695 + 33);
                    if (v698 == v697)
                    {
                      v698 = *((unsigned __int8 *)v1021 + 31);
                      v697 = *((unsigned __int8 *)v695 + 34);
                      if (v698 == v697)
                      {
                        v698 = *((unsigned __int8 *)v1021 + 32);
                        v697 = *((unsigned __int8 *)v695 + 35);
                        if (v698 == v697)
                        {
                          v698 = *((unsigned __int8 *)v1021 + 33);
                          v697 = *((unsigned __int8 *)v695 + 36);
                          if (v698 == v697)
                          {
                            v698 = *((unsigned __int8 *)v1021 + 34);
                            v697 = *((unsigned __int8 *)v695 + 37);
                            if (v698 == v697)
                            {
                              v698 = *((unsigned __int8 *)v1021 + 35);
                              v697 = *((unsigned __int8 *)v695 + 38);
                              if (v698 == v697)
                              {
                                v698 = *((unsigned __int8 *)v1021 + 36);
                                v697 = *((unsigned __int8 *)v695 + 39);
                                if (v698 == v697)
                                {
                                  v698 = *((unsigned __int8 *)v1021 + 37);
                                  v697 = *((unsigned __int8 *)v695 + 40);
                                  if (v698 == v697)
                                  {
                                    v698 = *((unsigned __int8 *)v1021 + 38);
                                    v697 = *((unsigned __int8 *)v695 + 41);
                                    if (v698 == v697)
                                    {
                                      v698 = *((unsigned __int8 *)v1021 + 39);
                                      v697 = *((unsigned __int8 *)v695 + 42);
                                      if (v698 == v697)
                                      {
                                        v698 = *((unsigned __int8 *)v1021 + 40);
                                        v697 = *((unsigned __int8 *)v695 + 43);
                                        if (v698 == v697)
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v698 >= v697)
            break;
          v693 = *v695;
          v694 = v695;
          if (!*v695)
            goto LABEL_1499;
        }
        if (((char)sub_22319835C(v696, v1023) & 0x80000000) == 0)
          break;
        v693 = v695[1];
        v694 = v695 + 1;
        if (!v693)
          goto LABEL_1499;
      }
      if (!*v694)
LABEL_1499:
        sub_223198218("map::at:  key not found");
      v692 = *((_DWORD *)*v694 + 11);
LABEL_1331:
      v908 = *a1;
      v909 = *((_QWORD *)v1012 + 3);
      v910 = *((_DWORD *)v1012 + 10);
      *(_QWORD *)object = v1023;
      v911 = sub_2231A9C40(v1056, v1023, (uint64_t)&unk_2245BA939, (_OWORD **)object);
      v912 = v910 | v692 & 0xFFFFFFE1;
      if (v909 < v908)
        v912 = v692;
      *((_DWORD *)v911 + 11) = v912 | 4;
      if (v689 != v690)
      {
        v913 = v689;
        while (1)
        {
          v914 = *(_QWORD **)(*(_QWORD *)v913 + 208);
          v915 = *(_QWORD **)(*(_QWORD *)v913 + 216);
          v916 = v914;
          if (v914 != v915)
          {
            v916 = *(_QWORD **)(*(_QWORD *)v913 + 208);
            while (*v916 != *((_QWORD *)v913 + 1) || v916[1] != *((_QWORD *)v913 + 2))
            {
              v916 += 53;
              if (v916 == v915)
                goto LABEL_1345;
            }
          }
          if (v916 == v915)
            break;
          sub_22371A4BC(*(_QWORD *)v913, a1, (29 * (((_DWORD)v916 - (_DWORD)v914) >> 3)));
LABEL_1337:
          v913 += 24;
          if (v913 == v690)
            goto LABEL_1457;
        }
LABEL_1345:
        v918 = atomic_load((unsigned __int8 *)&qword_2557892F0);
        if ((v918 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
        {
          __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
          __cxa_guard_release(&qword_2557892F0);
        }
        sub_2236BC11C(object);
        if (*(char *)(*(_QWORD *)object + 39) < 0)
        {
          v919 = *(const void **)(*(_QWORD *)object + 16);
          v920 = *(_QWORD *)(*(_QWORD *)object + 24);
        }
        else
        {
          v919 = (const void *)(*(_QWORD *)object + 16);
          v920 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
        }
        sub_223195728((uint64_t)&stru_255789280, v919, v920, "SplitGP: To be erased KP %.13s does not exist in KFS %.13s", 0x3AuLL);
        sub_2236BC210(v1069);
        if (**(int **)(*(_QWORD *)v1069 + 56) > 5)
          goto LABEL_1337;
        v921 = *(unsigned __int8 *)(*(_QWORD *)v1069 + 72);
        v922 = sub_22322F254(*(uint64_t *)v1069, "OSLogSurrogateAppender", 1, 0);
        v923 = v922;
        if (!v921 && !v922)
          goto LABEL_1337;
        v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)v1069;
        v1073.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v1073.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v1074 = 5;
        v1075 = "unknown file";
        v1076 = 327;
        v1077 = "unknown function";
        v1078 = 0;
        v1079 = 0;
        sub_2245664AC((unsigned __int8 *)v913 + 8, __src);
        sub_2245664AC(*(unsigned __int8 **)v913, v1070);
        v1045 = v921;
        v1057[0] = v1070;
        v924 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
        if (*(char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v926 = *(const char **)(v924 + 16);
          v925 = *(_QWORD *)(v924 + 24);
          v1029 = *(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16;
          v1038 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
          v928 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v928 & 1) == 0)
          {
LABEL_1452:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v1083);
              sub_223199C58("com.apple.cv3d", (unint64_t)v1083, &xmmword_255788F40);
              if ((_BYTE)v1084 && (v1083[23] & 0x80000000) != 0)
                operator delete(*(void **)v1083);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
          }
        }
        else
        {
          v925 = *(unsigned __int8 *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39);
          v926 = (const char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16);
          v1029 = (uint64_t)v926;
          v1038 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
          v927 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v927 & 1) == 0)
            goto LABEL_1452;
        }
        if (byte_255788F57 >= 0)
          v929 = (const char *)&xmmword_255788F40;
        else
          v929 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v930 = byte_255788F57;
        else
          v930 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v929, v926);
        if (v930 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v1055 = v923;
        if (v930 >= 0x17)
        {
          v932 = (v930 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v930 | 7) != 0x17)
            v932 = v930 | 7;
          v933 = v932 + 1;
          v931 = operator new(v932 + 1);
          *(_QWORD *)&object[24] = v933 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v931;
          *(_QWORD *)&object[16] = v930;
        }
        else
        {
          object[31] = v930;
          v931 = &object[8];
          if (!v930)
          {
LABEL_1370:
            v931[v930] = 0;
            object[32] = 1;
            if (v925 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v925 >= 0x17)
            {
              v937 = (v925 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v925 | 7) != 0x17)
                v937 = v925 | 7;
              v938 = v937 + 1;
              v934 = operator new(v937 + 1);
              v1081 = v938 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v934;
              *(_QWORD *)&object[48] = v925;
            }
            else
            {
              HIBYTE(v1081) = v925;
              v934 = &object[40];
              if (!v925)
              {
                object[40] = 0;
                v1082 = 1;
                v935 = *(NSObject **)object;
                if ((SHIBYTE(v1081) & 0x80000000) == 0)
                  goto LABEL_1374;
LABEL_1380:
                operator delete(*(void **)&object[40]);
                v936 = v1045;
                if (object[32])
                  goto LABEL_1381;
                goto LABEL_1383;
              }
            }
            memmove(v934, v926, v925);
            v934[v925] = 0;
            v1082 = 1;
            v935 = *(NSObject **)object;
            if (SHIBYTE(v1081) < 0)
              goto LABEL_1380;
LABEL_1374:
            v936 = v1045;
            if (object[32])
            {
LABEL_1381:
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
            }
LABEL_1383:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v1055 && *(_QWORD *)(v1055 + 24))
            {
              v939 = _os_log_pack_size();
              v940 = (std::__shared_weak_count_vtbl *)operator new(v939, (std::align_val_t)8uLL);
              v941 = (std::__shared_weak_count *)operator new();
              v941->__shared_owners_ = 0;
              v942 = (unint64_t *)&v941->__shared_owners_;
              v941->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v941->__shared_weak_owners_ = 0;
              v941[1].__vftable = v940;
              *(_QWORD *)&__s = v940;
              *((_QWORD *)&__s + 1) = v940;
              v1087 = v941;
              v1088 = 0;
              v1089 = 0;
              sub_2236C879C((uint64_t)object, __src, (const char **)v1057);
              v943 = (char *)operator new(0x50uLL);
              v944 = (std::__shared_weak_count *)v943;
              *((_QWORD *)v943 + 1) = 0;
              v945 = (unint64_t *)(v943 + 8);
              *((_QWORD *)v943 + 2) = 0;
              *(_QWORD *)v943 = &off_24EC20730;
              *((_QWORD *)v943 + 3) = off_24EC20780;
              *((_OWORD *)v943 + 2) = *(_OWORD *)&object[8];
              *((_QWORD *)v943 + 6) = *(_QWORD *)&object[24];
              *(_OWORD *)(v943 + 56) = *(_OWORD *)&object[32];
              *((_QWORD *)v943 + 9) = *(_QWORD *)&object[48];
              v1088 = v943 + 24;
              v1089 = (std::__shared_weak_count *)v943;
              *(_QWORD *)v1083 = v940;
              *(_QWORD *)&v1083[8] = v940;
              *(_QWORD *)&v1083[16] = v941;
              do
                v946 = __ldxr(v942);
              while (__stxr(v946 + 1, v942));
              *(_QWORD *)&v1084 = v943 + 24;
              *((_QWORD *)&v1084 + 1) = v943;
              do
                v947 = __ldxr(v945);
              while (__stxr(v947 + 1, v945));
              v1085 = v943 + 24;
              do
                v948 = __ldaxr(v945);
              while (__stlxr(v948 - 1, v945));
              if (!v948)
              {
                (*(void (**)(char *))(*(_QWORD *)v943 + 16))(v943);
                std::__shared_weak_count::__release_weak(v944);
              }
              v949 = v1087;
              if (v1087)
              {
                v950 = (unint64_t *)&v1087->__shared_owners_;
                do
                  v951 = __ldaxr(v950);
                while (__stlxr(v951 - 1, v950));
                if (!v951)
                {
                  ((void (*)(std::__shared_weak_count *))v949->__on_zero_shared)(v949);
                  std::__shared_weak_count::__release_weak(v949);
                }
              }
              v952 = *(_QWORD *)v1083;
              if (v1085[31] >= 0)
                v953 = v1085 + 8;
              else
                v953 = (char *)*((_QWORD *)v1085 + 1);
              if (v1085[55] >= 0)
                v954 = v1085 + 32;
              else
                v954 = (char *)*((_QWORD *)v1085 + 4);
              v955 = _os_log_pack_fill();
              *(_DWORD *)v955 = 68158466;
              *(_DWORD *)(v955 + 4) = 13;
              *(_WORD *)(v955 + 8) = 2080;
              *(_QWORD *)(v955 + 10) = v953;
              *(_WORD *)(v955 + 18) = 1040;
              *(_DWORD *)(v955 + 20) = 13;
              *(_WORD *)(v955 + 24) = 2080;
              *(_QWORD *)(v955 + 26) = v954;
              v956 = operator new();
              v957 = *(unsigned __int8 *)(v1038 + 39);
              v958 = v1029;
              if ((v957 & 0x80u) != 0)
              {
                v958 = *(_QWORD *)(v1038 + 16);
                v957 = *(_QWORD *)(v1038 + 24);
              }
              *(_QWORD *)v956 = v952;
              *(_OWORD *)(v956 + 8) = *(_OWORD *)&v1083[8];
              *(_QWORD *)&v1083[8] = 0;
              *(_QWORD *)&v1083[16] = 0;
              *(_OWORD *)(v956 + 24) = v1084;
              v1084 = 0uLL;
              *(_QWORD *)(v956 + 40) = v958;
              *(_QWORD *)(v956 + 48) = v957;
              *(_BYTE *)(v956 + 56) = 16;
              *(_QWORD *)&__s = 0;
              *(_QWORD *)object = v956;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v1055 + 24) + 40))(*(_QWORD *)(v1055 + 24), object);
              v959 = *(_QWORD *)object;
              *(_QWORD *)object = 0;
              if (v959)
              {
                v960 = *(std::__shared_weak_count **)(v959 + 32);
                if (v960)
                {
                  v961 = (unint64_t *)&v960->__shared_owners_;
                  do
                    v962 = __ldaxr(v961);
                  while (__stlxr(v962 - 1, v961));
                  if (!v962)
                  {
                    ((void (*)(std::__shared_weak_count *))v960->__on_zero_shared)(v960);
                    std::__shared_weak_count::__release_weak(v960);
                  }
                }
                v963 = *(std::__shared_weak_count **)(v959 + 16);
                if (v963)
                {
                  v964 = (unint64_t *)&v963->__shared_owners_;
                  do
                    v965 = __ldaxr(v964);
                  while (__stlxr(v965 - 1, v964));
                  if (!v965)
                  {
                    ((void (*)(std::__shared_weak_count *))v963->__on_zero_shared)(v963);
                    std::__shared_weak_count::__release_weak(v963);
                  }
                }
                MEMORY[0x227684CE8](v959, 0x10F0C40B62ED6C6);
                v966 = __s;
                *(_QWORD *)&__s = 0;
                if (v966)
                {
                  v967 = *(std::__shared_weak_count **)(v966 + 32);
                  if (v967)
                  {
                    v968 = (unint64_t *)&v967->__shared_owners_;
                    do
                      v969 = __ldaxr(v968);
                    while (__stlxr(v969 - 1, v968));
                    if (!v969)
                    {
                      ((void (*)(std::__shared_weak_count *))v967->__on_zero_shared)(v967);
                      std::__shared_weak_count::__release_weak(v967);
                    }
                  }
                  v970 = *(std::__shared_weak_count **)(v966 + 16);
                  if (v970)
                  {
                    v971 = (unint64_t *)&v970->__shared_owners_;
                    do
                      v972 = __ldaxr(v971);
                    while (__stlxr(v972 - 1, v971));
                    if (!v972)
                    {
                      ((void (*)(std::__shared_weak_count *))v970->__on_zero_shared)(v970);
                      std::__shared_weak_count::__release_weak(v970);
                    }
                  }
                  MEMORY[0x227684CE8](v966, 0x10F0C40B62ED6C6);
                }
              }
              v973 = (std::__shared_weak_count *)*((_QWORD *)&v1084 + 1);
              if (*((_QWORD *)&v1084 + 1))
              {
                v974 = (unint64_t *)(*((_QWORD *)&v1084 + 1) + 8);
                do
                  v975 = __ldaxr(v974);
                while (__stlxr(v975 - 1, v974));
                if (!v975)
                {
                  ((void (*)(std::__shared_weak_count *))v973->__on_zero_shared)(v973);
                  std::__shared_weak_count::__release_weak(v973);
                }
              }
              v976 = *(std::__shared_weak_count **)&v1083[16];
              if (*(_QWORD *)&v1083[16])
              {
                v977 = (unint64_t *)(*(_QWORD *)&v1083[16] + 8);
                do
                  v978 = __ldaxr(v977);
                while (__stlxr(v978 - 1, v977));
                if (!v978)
                {
                  ((void (*)(std::__shared_weak_count *))v976->__on_zero_shared)(v976);
                  std::__shared_weak_count::__release_weak(v976);
                }
              }
            }
            else
            {
              os_log_type_enabled(v935, OS_LOG_TYPE_ERROR);
              *(_QWORD *)object = 0xD04100402;
              *(_WORD *)&object[8] = 2080;
              *(_QWORD *)&object[10] = __src;
              *(_WORD *)&object[18] = 1040;
              *(_DWORD *)&object[20] = 13;
              *(_WORD *)&object[24] = 2080;
              *(void **)&object[26] = v1057[0];
              v979 = (void *)_os_log_send_and_compose_impl();
              if (v979)
                free(v979);
            }
            if (v936)
            {
              sub_2245664AC((unsigned __int8 *)v913 + 8, object);
              sub_2245664AC(*(unsigned __int8 **)v913, v1083);
              sub_22322C138((uint64_t)&v1073, "SplitGP: To be erased KP %.13s does not exist in KFS %.13s", object, v1083);
              sub_223182C08((uint64_t)&v1073);
            }
            sub_223182C08((uint64_t)&v1073);
            v980 = v1079;
            if (v1079)
            {
              v981 = (unint64_t *)&v1079->__shared_owners_;
              do
                v982 = __ldaxr(v981);
              while (__stlxr(v982 - 1, v981));
              if (!v982)
              {
                ((void (*)(std::__shared_weak_count *))v980->__on_zero_shared)(v980);
                std::__shared_weak_count::__release_weak(v980);
              }
            }
            goto LABEL_1337;
          }
        }
        memmove(v931, v929, v930);
        goto LABEL_1370;
      }
LABEL_1457:
      if (v689)
        operator delete(v689);
      v983 = (char *)v1060;
      a7 = v1056;
      if (v1060)
      {
        v984 = v1061;
        if (v1061 != v1060)
        {
          v985 = v1061;
          do
          {
            v987 = (void *)*((_QWORD *)v985 - 10);
            v985 -= 80;
            v986 = v987;
            if (v987)
            {
              *((_QWORD *)v984 - 9) = v986;
              operator delete(v986);
            }
            v984 = v985;
          }
          while (v985 != v983);
        }
        operator delete(v983);
      }
      v620 = (char *)v1063;
LABEL_1467:
      v988 = v1031;
      if (v620)
      {
        v989 = v1064;
        v990 = v620;
        if (v1064 != v620)
        {
          v991 = v1064;
          do
          {
            v993 = (void *)*((_QWORD *)v991 - 3);
            v991 -= 24;
            v992 = v993;
            if (v993)
            {
              *((_QWORD *)v989 - 2) = v992;
              operator delete(v992);
            }
            v989 = v991;
          }
          while (v991 != v620);
          v990 = v1063;
          v988 = v1031;
        }
        v1064 = v620;
        operator delete(v990);
      }
      v998 += v988;
      v275 = v1046;
      if (v1046)
LABEL_476:
        operator delete(v275);
LABEL_1476:
      v405 = v1021;
      v994 = v1021[1];
      if (v994)
      {
        do
        {
          v404 = (_QWORD **)v994;
          v994 = (_QWORD *)*v994;
        }
        while (v994);
      }
      else
      {
        do
        {
          v404 = (_QWORD **)v405[2];
          v25 = *v404 == v405;
          v405 = v404;
        }
        while (!v25);
      }
      v11 = v404;
      if (v404 == v1066)
        goto LABEL_1479;
    }
    v326 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v326 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2236BC11C(object);
    if (*(char *)(*(_QWORD *)object + 39) < 0)
    {
      v327 = *(const void **)(*(_QWORD *)object + 16);
      v328 = *(_QWORD *)(*(_QWORD *)object + 24);
    }
    else
    {
      v327 = (const void *)(*(_QWORD *)object + 16);
      v328 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
    }
    sub_223195728((uint64_t)&stru_255789280, v327, v328, "SplitGP: unknown GP %.13s", 0x19uLL);
    sub_2236BC210(v1069);
    if (**(int **)(*(_QWORD *)v1069 + 56) > 5)
      goto LABEL_1476;
    v329 = *(unsigned __int8 *)(*(_QWORD *)v1069 + 72);
    v330 = sub_22322F254(*(uint64_t *)v1069, "OSLogSurrogateAppender", 1, 0);
    v331 = v330;
    if (!v329 && !v330)
      goto LABEL_1476;
    v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)v1069;
    v1073.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v1073.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v1074 = 5;
    v1075 = "unknown file";
    v1076 = 432;
    v1077 = "unknown function";
    v1078 = 0;
    v1079 = 0;
    sub_2245664AC(v1023, &__s);
    v332 = *(_QWORD *)v1073.__r_.__value_.__l.__data_;
    v333 = *(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16;
    if (*(char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v335 = *(const char **)(v332 + 16);
      v334 = *(_QWORD *)(v332 + 24);
      v339 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v339 & 1) != 0)
        goto LABEL_529;
    }
    else
    {
      v334 = *(unsigned __int8 *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 39);
      v335 = (const char *)(*(_QWORD *)v1073.__r_.__value_.__l.__data_ + 16);
      v336 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v336 & 1) != 0)
        goto LABEL_529;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v1083);
      sub_223199C58("com.apple.cv3d", (unint64_t)v1083, &xmmword_255788F40);
      if ((_BYTE)v1084 && (v1083[23] & 0x80000000) != 0)
        operator delete(*(void **)v1083);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_529:
    if (byte_255788F57 >= 0)
      v340 = (const char *)&xmmword_255788F40;
    else
      v340 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v341 = byte_255788F57;
    else
      v341 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v340, v335);
    if (v341 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v341 >= 0x17)
    {
      v343 = (v341 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v341 | 7) != 0x17)
        v343 = v341 | 7;
      v344 = v343 + 1;
      v342 = operator new(v343 + 1);
      *(_QWORD *)&object[24] = v344 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v342;
      *(_QWORD *)&object[16] = v341;
    }
    else
    {
      object[31] = v341;
      v342 = &object[8];
      if (!v341)
      {
LABEL_543:
        v342[v341] = 0;
        object[32] = 1;
        if (v334 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        a7 = v1056;
        if (v334 >= 0x17)
        {
          v347 = (v334 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v334 | 7) != 0x17)
            v347 = v334 | 7;
          v348 = v347 + 1;
          v345 = operator new(v347 + 1);
          v1081 = v348 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v345;
          *(_QWORD *)&object[48] = v334;
        }
        else
        {
          HIBYTE(v1081) = v334;
          v345 = &object[40];
          if (!v334)
          {
            object[40] = 0;
            v1082 = 1;
            v346 = *(NSObject **)object;
            if ((SHIBYTE(v1081) & 0x80000000) == 0)
              goto LABEL_547;
            goto LABEL_553;
          }
        }
        memmove(v345, v335, v334);
        v345[v334] = 0;
        v1082 = 1;
        v346 = *(NSObject **)object;
        if ((SHIBYTE(v1081) & 0x80000000) == 0)
        {
LABEL_547:
          if (!object[32])
            goto LABEL_556;
          goto LABEL_554;
        }
LABEL_553:
        operator delete(*(void **)&object[40]);
        if (!object[32])
          goto LABEL_556;
LABEL_554:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_556:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v331 || !*(_QWORD *)(v331 + 24))
        {
          os_log_type_enabled(v346, OS_LOG_TYPE_ERROR);
          *(_QWORD *)object = 0xD04100202;
          *(_WORD *)&object[8] = 2080;
          *(_QWORD *)&object[10] = &__s;
          v355 = (void *)_os_log_send_and_compose_impl();
          if (v355)
          {
            free(v355);
            if (!v329)
              goto LABEL_633;
            goto LABEL_632;
          }
          goto LABEL_631;
        }
        v349 = _os_log_pack_size();
        v350 = operator new(v349, (std::align_val_t)8uLL);
        v351 = (_QWORD *)operator new();
        *v351 = &off_24EC1F7F0;
        v351[1] = 0;
        v351[2] = 0;
        v351[3] = v350;
        *(_QWORD *)v1083 = v350;
        *(_QWORD *)&v1083[8] = v350;
        *(_QWORD *)&v1083[16] = v351;
        v1084 = 0uLL;
        v352 = strlen((const char *)&__s);
        if (v352 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v353 = v352;
        if (v352 >= 0x17)
        {
          v356 = (v352 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v352 | 7) != 0x17)
            v356 = v352 | 7;
          v357 = v356 + 1;
          v354 = operator new(v356 + 1);
          *((_QWORD *)&v1072 + 1) = v357 | 0x8000000000000000;
          *(_QWORD *)__src = v354;
          *(_QWORD *)&v1072 = v353;
        }
        else
        {
          HIBYTE(v1072) = v352;
          v354 = __src;
          if (!v352)
            goto LABEL_571;
        }
        memcpy(v354, &__s, v353);
LABEL_571:
        *((_BYTE *)v354 + v353) = 0;
        v358 = *(_QWORD *)__src;
        *(_QWORD *)v1070 = v1072;
        *(_QWORD *)&v1070[7] = *(_QWORD *)((char *)&v1072 + 7);
        v359 = HIBYTE(v1072);
        v360 = operator new(0x38uLL);
        v360[1] = 0;
        v360[2] = 0;
        v360[3] = off_24EC1FA48;
        *v360 = &off_24EC1F9F8;
        v361 = *(_QWORD *)v1070;
        v360[4] = v358;
        v360[5] = v361;
        *(_QWORD *)((char *)v360 + 47) = *(_QWORD *)&v1070[7];
        *((_BYTE *)v360 + 55) = v359;
        *(_QWORD *)v1070 = 0;
        *(_QWORD *)&v1070[7] = 0;
        v362 = (std::__shared_weak_count *)*((_QWORD *)&v1084 + 1);
        *(_QWORD *)&v1084 = v360 + 3;
        *((_QWORD *)&v1084 + 1) = v360;
        if (v362)
        {
          v363 = (unint64_t *)&v362->__shared_owners_;
          do
            v364 = __ldaxr(v363);
          while (__stlxr(v364 - 1, v363));
          if (!v364)
          {
            ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
            std::__shared_weak_count::__release_weak(v362);
          }
        }
        *(_OWORD *)object = *(_OWORD *)v1083;
        v365 = v1084;
        *(_QWORD *)&object[16] = *(_QWORD *)&v1083[16];
        if (*(_QWORD *)&v1083[16])
        {
          v366 = (unint64_t *)(*(_QWORD *)&v1083[16] + 8);
          do
            v367 = __ldxr(v366);
          while (__stxr(v367 + 1, v366));
        }
        v368 = (std::__shared_weak_count *)*((_QWORD *)&v1084 + 1);
        *(_QWORD *)&object[24] = v365;
        *(_QWORD *)&object[32] = *((_QWORD *)&v1084 + 1);
        if (*((_QWORD *)&v1084 + 1))
        {
          v369 = (unint64_t *)(*((_QWORD *)&v1084 + 1) + 8);
          do
            v370 = __ldxr(v369);
          while (__stxr(v370 + 1, v369));
          *(_QWORD *)&object[40] = v365;
          do
            v371 = __ldaxr(v369);
          while (__stlxr(v371 - 1, v369));
          if (!v371)
          {
            ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
            std::__shared_weak_count::__release_weak(v368);
          }
        }
        else
        {
          *(_QWORD *)&object[40] = v365;
        }
        v372 = *(std::__shared_weak_count **)&v1083[16];
        if (*(_QWORD *)&v1083[16])
        {
          v373 = (unint64_t *)(*(_QWORD *)&v1083[16] + 8);
          do
            v374 = __ldaxr(v373);
          while (__stlxr(v374 - 1, v373));
          if (!v374)
          {
            ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
            std::__shared_weak_count::__release_weak(v372);
          }
        }
        v375 = *(_QWORD *)object;
        if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
          v376 = *(_QWORD *)&object[40] + 8;
        else
          v376 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
        v377 = _os_log_pack_fill();
        *(_DWORD *)v377 = 68157954;
        *(_DWORD *)(v377 + 4) = 13;
        *(_WORD *)(v377 + 8) = 2080;
        *(_QWORD *)(v377 + 10) = v376;
        v378 = operator new();
        v379 = *(unsigned __int8 *)(v332 + 39);
        if ((v379 & 0x80u) == 0)
          v380 = v333;
        else
          v380 = *(_QWORD *)(v332 + 16);
        if ((v379 & 0x80u) != 0)
          v379 = *(_QWORD *)(v332 + 24);
        *(_QWORD *)v378 = v375;
        *(_OWORD *)(v378 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v378 + 24) = *(_OWORD *)&object[24];
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *(_QWORD *)(v378 + 40) = v380;
        *(_QWORD *)(v378 + 48) = v379;
        *(_BYTE *)(v378 + 56) = 16;
        *(_QWORD *)__src = 0;
        *(_QWORD *)v1083 = v378;
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v331 + 24) + 40))(*(_QWORD *)(v331 + 24), v1083);
        v381 = *(_QWORD *)v1083;
        *(_QWORD *)v1083 = 0;
        if (v381)
        {
          v382 = *(std::__shared_weak_count **)(v381 + 32);
          if (v382)
          {
            v383 = (unint64_t *)&v382->__shared_owners_;
            do
              v384 = __ldaxr(v383);
            while (__stlxr(v384 - 1, v383));
            if (!v384)
            {
              ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
              std::__shared_weak_count::__release_weak(v382);
            }
          }
          v385 = *(std::__shared_weak_count **)(v381 + 16);
          if (v385)
          {
            v386 = (unint64_t *)&v385->__shared_owners_;
            do
              v387 = __ldaxr(v386);
            while (__stlxr(v387 - 1, v386));
            if (!v387)
            {
              ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
              std::__shared_weak_count::__release_weak(v385);
            }
          }
          MEMORY[0x227684CE8](v381, 0x10F0C40B62ED6C6);
          v388 = *(_QWORD *)__src;
          *(_QWORD *)__src = 0;
          if (v388)
          {
            v389 = *(std::__shared_weak_count **)(v388 + 32);
            if (v389)
            {
              v390 = (unint64_t *)&v389->__shared_owners_;
              do
                v391 = __ldaxr(v390);
              while (__stlxr(v391 - 1, v390));
              if (!v391)
              {
                ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
                std::__shared_weak_count::__release_weak(v389);
              }
            }
            v392 = *(std::__shared_weak_count **)(v388 + 16);
            if (v392)
            {
              v393 = (unint64_t *)&v392->__shared_owners_;
              do
                v394 = __ldaxr(v393);
              while (__stlxr(v394 - 1, v393));
              if (!v394)
              {
                ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                std::__shared_weak_count::__release_weak(v392);
              }
            }
            MEMORY[0x227684CE8](v388, 0x10F0C40B62ED6C6);
          }
        }
        v395 = *(std::__shared_weak_count **)&object[32];
        if (!*(_QWORD *)&object[32])
          goto LABEL_627;
        v396 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
        do
          v397 = __ldaxr(v396);
        while (__stlxr(v397 - 1, v396));
        if (!v397)
        {
          ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
          std::__shared_weak_count::__release_weak(v395);
          v398 = *(std::__shared_weak_count **)&object[16];
          if (!*(_QWORD *)&object[16])
            goto LABEL_631;
        }
        else
        {
LABEL_627:
          v398 = *(std::__shared_weak_count **)&object[16];
          if (!*(_QWORD *)&object[16])
            goto LABEL_631;
        }
        v399 = (unint64_t *)&v398->__shared_owners_;
        do
          v400 = __ldaxr(v399);
        while (__stlxr(v400 - 1, v399));
        if (!v400)
        {
          ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
          std::__shared_weak_count::__release_weak(v398);
          if (!v329)
            goto LABEL_633;
          goto LABEL_632;
        }
LABEL_631:
        if (!v329)
        {
LABEL_633:
          sub_223182C08((uint64_t)&v1073);
          v401 = v1079;
          if (v1079)
          {
            v402 = (unint64_t *)&v1079->__shared_owners_;
            do
              v403 = __ldaxr(v402);
            while (__stlxr(v403 - 1, v402));
            if (!v403)
            {
              ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
              std::__shared_weak_count::__release_weak(v401);
            }
          }
          goto LABEL_1476;
        }
LABEL_632:
        sub_2245664AC(v1023, object);
        sub_22322C138((uint64_t)&v1073, "SplitGP: unknown GP %.13s", object);
        sub_223182C08((uint64_t)&v1073);
        goto LABEL_633;
      }
    }
    memmove(v342, v340, v341);
    goto LABEL_543;
  }
LABEL_1479:
  kdebug_trace();
  sub_223198030((uint64_t)&v1065, v1066[0]);
}

void sub_2236C33E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a71;
  void *v71;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x2E0]);
  if (v71)
    operator delete(v71);
  sub_2236C3F8C((void **)&STACK[0x218]);
  sub_22317C838((void **)&STACK[0x230]);
  if (__p)
    operator delete(__p);
  sub_223198030((uint64_t)&STACK[0x248], (_QWORD *)STACK[0x250]);
  sub_2236C4000(a71);
  _Unwind_Resume(a1);
}

void **sub_2236C3F8C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 10);
        v5 -= 80;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 9) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2236C4000(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  sub_223198030(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_223198030(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_2236C4048(_QWORD *result, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t *v7;
  char **v8;
  _QWORD *v9;
  char *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 != a4)
  {
    v5 = a2;
    v6 = (_QWORD **)result;
    v7 = result + 1;
    do
    {
      v17 = *(_OWORD *)((char *)v5 + 28);
      result = sub_223426D4C(v6, v7, &v16, &v15, (unsigned __int8 *)&v17);
      v8 = (char **)result;
      if (*result)
      {
        v9 = (_QWORD *)v5[1];
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v10 + 25) = v17;
        v11 = v16;
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = v11;
        *v8 = v10;
        v12 = (_QWORD *)**v6;
        if (v12)
        {
          *v6 = v12;
          v10 = *v8;
        }
        result = sub_2231A9A8C(v6[1], (uint64_t *)v10);
        v6[2] = (_QWORD *)((char *)v6[2] + 1);
        v9 = (_QWORD *)v5[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v13 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v13 = (_QWORD *)v5[2];
        v14 = *v13 == (_QWORD)v5;
        v5 = v13;
      }
      while (!v14);
LABEL_3:
      v5 = v13;
    }
    while (v13 != a4);
  }
  return result;
}

_QWORD *sub_2236C4184(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2236C422C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double sub_2236C4284(char *a1, __n128 *a2, uint64_t **a3, unint64_t a4, char *a5, uint64_t a6, __n128 a7)
{
  __n128 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 *v24;
  __n128 *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  __n128 v45;
  __n128 v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  __n128 *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  __n128 *v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  __n128 *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 *v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 *v77;
  __n128 v78;

  if (a4 < 2)
    return a7.n128_f64[0];
  v9 = (__n128 *)a1;
  if (a4 != 2)
  {
    if ((uint64_t)a4 <= 128)
    {
      if (a1 == (char *)a2)
        return a7.n128_f64[0];
      v20 = a1 + 8;
      if (a1 + 8 == (char *)a2)
        return a7.n128_f64[0];
      v21 = 0;
      v22 = **a3;
      v23 = a1;
LABEL_27:
      v25 = (__n128 *)v23;
      v23 = v20;
      v26 = *(_QWORD *)v20;
      v27 = v25->n128_u64[0];
      v28 = v22 + 24 * v26;
      v29 = v22 + 24 * v25->n128_u64[0];
      v30 = *(_DWORD *)v28;
      if (*(_DWORD *)v28 < *(_DWORD *)v29)
        LOBYTE(v31) = -1;
      else
        LOBYTE(v31) = 1;
      if (*(_DWORD *)v28 != *(_DWORD *)v29)
        goto LABEL_39;
      a7.n128_u32[0] = *(_DWORD *)(v28 + 4);
      v32 = *(float *)(v29 + 4);
      if (a7.n128_f32[0] == v32)
        v31 = 0;
      else
        v31 = -127;
      if (a7.n128_f32[0] > v32)
        v31 = 1;
      if (a7.n128_f32[0] < v32)
        v31 = -1;
      if (!v31)
      {
        v38 = *(_QWORD *)(v28 + 8);
        v39 = *(_QWORD *)(v29 + 8);
        if (v38 < v39 || (v39 < v38) < 1)
          goto LABEL_26;
      }
      else
      {
LABEL_39:
        if ((char)v31 < 1)
          goto LABEL_26;
      }
      v33 = v21;
      while (1)
      {
        v24 = v25;
        *(unint64_t *)((char *)&v9->n128_u64[1] + v33) = v27;
        if (!v33)
        {
          v24 = v9;
          goto LABEL_25;
        }
        v27 = *(unint64_t *)((char *)&v9->n128_u64[-1] + v33);
        v34 = v22 + 24 * v27;
        if (v30 < *(_DWORD *)v34)
          LOBYTE(v35) = -1;
        else
          LOBYTE(v35) = 1;
        if (v30 == *(_DWORD *)v34)
        {
          a7.n128_u32[0] = *(_DWORD *)(v28 + 4);
          v36 = *(float *)(v34 + 4);
          if (a7.n128_f32[0] == v36)
            LODWORD(v35) = 0;
          else
            LODWORD(v35) = -127;
          if (a7.n128_f32[0] > v36)
            LODWORD(v35) = 1;
          if (a7.n128_f32[0] < v36)
            LODWORD(v35) = -1;
          if (!(_DWORD)v35)
          {
            v35 = *(_QWORD *)(v28 + 8);
            v37 = *(_QWORD *)(v34 + 8);
            if (v35 < v37)
            {
              v24 = (__n128 *)((char *)v9 + v33);
LABEL_25:
              v24->n128_u64[0] = v26;
LABEL_26:
              v20 = v23 + 8;
              v21 += 8;
              if (v23 + 8 == (char *)a2)
                return a7.n128_f64[0];
              goto LABEL_27;
            }
            LOBYTE(v35) = v37 < v35;
          }
        }
        v25 = (__n128 *)((char *)v24 - 8);
        v33 -= 8;
        if ((char)v35 <= 0)
          goto LABEL_25;
      }
    }
    v42 = a4 >> 1;
    v43 = &a1[8 * (a4 >> 1)];
    v44 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_2236C4284(a1, v43, a3, v44, a5, a6);
      sub_2236C4284(&v9->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
      a7.n128_u64[0] = sub_2236C4BC8(v9, (__n128 *)((char *)v9 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6, v45).n128_u64[0];
      return a7.n128_f64[0];
    }
    v46 = sub_2236C4740(a1, v43, a3, v44, a5, a7);
    v47 = &a5[8 * v42];
    a7.n128_u64[0] = sub_2236C4740(&v9->n128_i8[8 * (a4 >> 1)], (char *)a2, a3, a4 - (a4 >> 1), v47, v46).n128_u64[0];
    v48 = *a3;
    v49 = v47;
    v50 = a5;
    v51 = v9;
    v52 = &a5[8 * a4];
    while (1)
    {
      while (1)
      {
        if (v49 == v52)
        {
          if (v50 == v47)
            return a7.n128_f64[0];
          v59 = &a5[8 * v42] - v50 - 8;
          if (v59 >= 0x38 && (unint64_t)((char *)v9 - v50) >= 0x20)
          {
            v67 = 0;
            v68 = (v59 >> 3) + 1;
            v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
            v60 = &v50[v69];
            v61 = (__n128 *)((char *)v51 + v69);
            v70 = v68 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = &v51[v67];
              a7 = *(__n128 *)&v50[v67 * 16];
              v72 = *(__n128 *)&v50[v67 * 16 + 16];
              *v71 = a7;
              v71[1] = v72;
              v67 += 2;
              v70 -= 4;
            }
            while (v70);
            if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
              return a7.n128_f64[0];
          }
          else
          {
            v60 = v50;
            v61 = v51;
          }
          do
          {
            v62 = *(_QWORD *)v60;
            v60 += 8;
            v61->n128_u64[0] = v62;
            v61 = (__n128 *)((char *)v61 + 8);
          }
          while (v60 != v47);
          return a7.n128_f64[0];
        }
        v53 = *v48 + 24 * *(_QWORD *)v49;
        v54 = *v48 + 24 * *(_QWORD *)v50;
        LOBYTE(v55) = *(_DWORD *)v53 < *(_DWORD *)v54 ? -1 : 1;
        if (*(_DWORD *)v53 != *(_DWORD *)v54)
          break;
        a7.n128_u32[0] = *(_DWORD *)(v53 + 4);
        v56 = *(float *)(v54 + 4);
        if (a7.n128_f32[0] == v56)
          v55 = 0;
        else
          v55 = -127;
        if (a7.n128_f32[0] > v56)
          v55 = 1;
        if (a7.n128_f32[0] < v56)
          v55 = -1;
        if (v55)
          break;
        v57 = *(_QWORD *)(v53 + 8);
        v58 = *(_QWORD *)(v54 + 8);
        if (v57 >= v58 && (v58 < v57) >= 1)
          goto LABEL_79;
LABEL_64:
        v51->n128_u64[0] = *(_QWORD *)v50;
        v51 = (__n128 *)((char *)v51 + 8);
        v50 += 8;
        v9 = (__n128 *)((char *)v9 + 8);
        if (v50 == v47)
          goto LABEL_90;
      }
      if ((char)v55 < 1)
        goto LABEL_64;
LABEL_79:
      v51->n128_u64[0] = *(_QWORD *)v49;
      v51 = (__n128 *)((char *)v51 + 8);
      v49 += 8;
      v9 = (__n128 *)((char *)v9 + 8);
      if (v50 == v47)
      {
LABEL_90:
        if (v49 == v52)
          return a7.n128_f64[0];
        v63 = &a5[8 * a4] - v49 - 8;
        if (v63 < 0x48 || (unint64_t)((char *)v9 - v49) < 0x20)
        {
          v64 = v49;
          v65 = v51;
          do
          {
LABEL_94:
            v66 = *(_QWORD *)v64;
            v64 += 8;
            v65->n128_u64[0] = v66;
            v65 = (__n128 *)((char *)v65 + 8);
          }
          while (v64 != v52);
          return a7.n128_f64[0];
        }
        v73 = 0;
        v74 = (v63 >> 3) + 1;
        v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        v64 = &v49[v75];
        v65 = (__n128 *)((char *)v51 + v75);
        v76 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v77 = &v51[v73];
          a7 = *(__n128 *)&v49[v73 * 16];
          v78 = *(__n128 *)&v49[v73 * 16 + 16];
          *v77 = a7;
          v77[1] = v78;
          v73 += 2;
          v76 -= 4;
        }
        while (v76);
        if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_94;
        return a7.n128_f64[0];
      }
    }
  }
  v10 = a2[-1].n128_u64[1];
  v11 = *(_QWORD *)a1;
  v12 = **a3;
  v13 = v12 + 24 * v10;
  v14 = v12 + 24 * *(_QWORD *)a1;
  if (*(_DWORD *)v13 < *(_DWORD *)v14)
    LOBYTE(v15) = -1;
  else
    LOBYTE(v15) = 1;
  if (*(_DWORD *)v13 == *(_DWORD *)v14)
  {
    a7.n128_u32[0] = *(_DWORD *)(v13 + 4);
    v16 = *(float *)(v14 + 4);
    if (a7.n128_f32[0] == v16)
      v15 = 0;
    else
      v15 = -127;
    if (a7.n128_f32[0] > v16)
      v15 = 1;
    if (a7.n128_f32[0] < v16)
      v15 = -1;
    if (!v15)
    {
      v17 = *(_QWORD *)(v13 + 8);
      v18 = *(_QWORD *)(v14 + 8);
      if (v17 < v18)
        return a7.n128_f64[0];
      LOBYTE(v15) = v18 < v17;
    }
  }
  if ((char)v15 >= 1)
  {
    *(_QWORD *)a1 = v10;
    a2[-1].n128_u64[1] = v11;
  }
  return a7.n128_f64[0];
}

__n128 sub_2236C4740(char *a1, char *a2, uint64_t **a3, unint64_t a4, char *a5, __n128 result)
{
  char *v6;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __int128 v75;

  if (!a4)
    return result;
  v6 = a5;
  if (a4 == 1)
  {
    v11 = a1;
    goto LABEL_22;
  }
  if (a4 == 2)
  {
    v11 = a2 - 8;
    v12 = *(_QWORD *)a1;
    v13 = **a3;
    v14 = v13 + 24 * *((_QWORD *)a2 - 1);
    v15 = v13 + 24 * *(_QWORD *)a1;
    if (*(_DWORD *)v14 < *(_DWORD *)v15)
      LOBYTE(v16) = -1;
    else
      LOBYTE(v16) = 1;
    if (*(_DWORD *)v14 == *(_DWORD *)v15)
    {
      result.n128_u32[0] = *(_DWORD *)(v14 + 4);
      v17 = *(float *)(v15 + 4);
      if (result.n128_f32[0] == v17)
        v16 = 0;
      else
        v16 = -127;
      if (result.n128_f32[0] > v17)
        v16 = 1;
      if (result.n128_f32[0] < v17)
        v16 = -1;
      if (!v16)
      {
        v18 = *(_QWORD *)(v14 + 8);
        v19 = *(_QWORD *)(v15 + 8);
        if (v18 < v19)
        {
LABEL_20:
          *(_QWORD *)a5 = v12;
          v6 = a5 + 8;
LABEL_22:
          *(_QWORD *)v6 = *(_QWORD *)v11;
          return result;
        }
        LOBYTE(v16) = v19 < v18;
      }
    }
    if ((char)v16 > 0)
    {
      v12 = *((_QWORD *)a2 - 1);
      v11 = a1;
    }
    goto LABEL_20;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 != a2)
    {
      v20 = a1 + 8;
      *(_QWORD *)a5 = *(_QWORD *)a1;
      if (a1 + 8 != a2)
      {
        v21 = 0;
        v22 = **a3;
        v23 = (uint64_t *)a5;
        while (1)
        {
          v26 = (char *)v23;
          v28 = *v23++;
          v27 = v28;
          v29 = v22 + 24 * *(_QWORD *)v20;
          v30 = v22 + 24 * v28;
          LOBYTE(v31) = *(_DWORD *)v29 < *(_DWORD *)v30 ? -1 : 1;
          if (*(_DWORD *)v29 != *(_DWORD *)v30)
            break;
          result.n128_u32[0] = *(_DWORD *)(v29 + 4);
          v32 = *(float *)(v30 + 4);
          if (result.n128_f32[0] == v32)
            v31 = 0;
          else
            v31 = -127;
          if (result.n128_f32[0] > v32)
            v31 = 1;
          if (result.n128_f32[0] < v32)
            v31 = -1;
          if (v31)
            break;
          v41 = *(_QWORD *)(v29 + 8);
          v42 = *(_QWORD *)(v30 + 8);
          v24 = (char *)v23;
          if (v41 >= v42)
          {
            v24 = (char *)v23;
            if ((v42 < v41) >= 1)
              goto LABEL_43;
          }
LABEL_29:
          v25 = *(_QWORD *)v20;
          v20 += 8;
          *(_QWORD *)v24 = v25;
          v21 += 8;
          if (v20 == a2)
            return result;
        }
        v24 = (char *)v23;
        if ((char)v31 < 1)
          goto LABEL_29;
LABEL_43:
        *((_QWORD *)v26 + 1) = v27;
        v24 = a5;
        if (v26 == a5)
          goto LABEL_29;
        v33 = v21;
        while (1)
        {
          v34 = *(_QWORD *)&a5[v33 - 8];
          v35 = v22 + 24 * *(_QWORD *)v20;
          v36 = v22 + 24 * v34;
          if (*(_DWORD *)v35 < *(_DWORD *)v36)
            LOBYTE(v37) = -1;
          else
            LOBYTE(v37) = 1;
          if (*(_DWORD *)v35 == *(_DWORD *)v36)
          {
            result.n128_u32[0] = *(_DWORD *)(v35 + 4);
            v38 = *(float *)(v36 + 4);
            if (result.n128_f32[0] == v38)
              v37 = 0;
            else
              v37 = -127;
            if (result.n128_f32[0] > v38)
              v37 = 1;
            if (result.n128_f32[0] < v38)
              v37 = -1;
            if (!v37)
            {
              v39 = *(_QWORD *)(v35 + 8);
              v40 = *(_QWORD *)(v36 + 8);
              if (v39 < v40)
              {
                v24 = v26;
                goto LABEL_29;
              }
              LOBYTE(v37) = v40 < v39;
            }
          }
          if ((char)v37 < 1)
          {
            v24 = &a5[v33];
            goto LABEL_29;
          }
          v26 -= 8;
          *(_QWORD *)&a5[v33] = v34;
          v33 -= 8;
          if (!v33)
          {
            v24 = a5;
            goto LABEL_29;
          }
        }
      }
    }
    return result;
  }
  v43 = a4 >> 1;
  v44 = 8 * (a4 >> 1);
  v45 = &a1[v44];
  sub_2236C4284(a1, &a1[v44], a3, a4 >> 1, a5, a4 >> 1);
  sub_2236C4284(&a1[v44], a2, a3, a4 - v43, &v6[v44], a4 - v43);
  v46 = *a3;
  v47 = v6;
  v48 = a1;
  v49 = &a1[v44];
  do
  {
    while (1)
    {
      if (v49 == a2)
      {
        if (v48 == v45)
          return result;
        v56 = &a1[8 * v43] - v48 - 8;
        if (v56 >= 0x38 && (unint64_t)(v47 - v48) >= 0x20)
        {
          v64 = 0;
          v65 = (v56 >> 3) + 1;
          v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
          v57 = &v6[v66];
          v58 = &v48[v66];
          v67 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = &v6[v64];
            result = *(__n128 *)&v48[v64];
            v69 = *(_OWORD *)&v48[v64 + 16];
            *(__n128 *)v68 = result;
            *((_OWORD *)v68 + 1) = v69;
            v64 += 32;
            v67 -= 4;
          }
          while (v67);
          if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v57 = v6;
          v58 = v48;
        }
        do
        {
          v59 = *(_QWORD *)v58;
          v58 += 8;
          *(_QWORD *)v57 = v59;
          v57 += 8;
        }
        while (v58 != v45);
        return result;
      }
      v50 = *v46 + 24 * *(_QWORD *)v49;
      v51 = *v46 + 24 * *(_QWORD *)v48;
      LOBYTE(v52) = *(_DWORD *)v50 < *(_DWORD *)v51 ? -1 : 1;
      if (*(_DWORD *)v50 == *(_DWORD *)v51)
      {
        result.n128_u32[0] = *(_DWORD *)(v50 + 4);
        v53 = *(float *)(v51 + 4);
        if (result.n128_f32[0] == v53)
          v52 = 0;
        else
          v52 = -127;
        if (result.n128_f32[0] > v53)
          v52 = 1;
        if (result.n128_f32[0] < v53)
          v52 = -1;
        if (!v52)
          break;
      }
      if ((char)v52 >= 1)
        goto LABEL_82;
LABEL_67:
      *(_QWORD *)v6 = *(_QWORD *)v48;
      v6 += 8;
      v48 += 8;
      v47 += 8;
      if (v48 == v45)
        goto LABEL_93;
    }
    v54 = *(_QWORD *)(v50 + 8);
    v55 = *(_QWORD *)(v51 + 8);
    if (v54 < v55 || (v55 < v54) < 1)
      goto LABEL_67;
LABEL_82:
    *(_QWORD *)v6 = *(_QWORD *)v49;
    v6 += 8;
    v49 += 8;
    v47 += 8;
  }
  while (v48 != v45);
LABEL_93:
  if (v49 == a2)
    return result;
  v60 = a2 - v49 - 8;
  if (v60 < 0x48 || (unint64_t)(v47 - v49) < 0x20)
  {
    v61 = v6;
    v62 = v49;
    do
    {
LABEL_97:
      v63 = *(_QWORD *)v62;
      v62 += 8;
      *(_QWORD *)v61 = v63;
      v61 += 8;
    }
    while (v62 != a2);
    return result;
  }
  v70 = 0;
  v71 = (v60 >> 3) + 1;
  v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
  v61 = &v6[v72];
  v62 = &v49[v72];
  v73 = v71 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v74 = &v6[v70];
    result = *(__n128 *)&v49[v70];
    v75 = *(_OWORD *)&v49[v70 + 16];
    *(__n128 *)v74 = result;
    *((_OWORD *)v74 + 1) = v75;
    v70 += 32;
    v73 -= 4;
  }
  while (v73);
  if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_97;
  return result;
}

__n128 sub_2236C4BC8(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v9;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __n128 *v30;
  unint64_t v31;
  float *v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __n128 *v45;
  unint64_t v46;
  __n128 *v47;
  unint64_t v48;
  float *v49;
  float v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  __n128 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 *v70;
  uint64_t v71;
  uint64_t v72;
  __n128 *v73;
  __n128 *v74;
  __n128 *v75;
  uint64_t v76;
  BOOL v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  uint64_t **v82;
  __n128 *v83;
  char *v84;
  uint64_t v85;
  __n128 *v86;
  char *v87;
  uint64_t **v88;
  char *v89;
  uint64_t v90;
  __n128 *v91;
  uint64_t v92;
  __n128 *v93;
  int64_t v94;
  unint64_t v95;
  char *v96;
  __n128 *v97;
  uint64_t v98;
  uint64_t v99;
  __n128 *v100;
  __n128 *v101;
  uint64_t v102;
  __n128 v103;
  unint64_t v104;
  char *v105;
  __n128 *v106;
  uint64_t v107;
  uint64_t v108;
  __n128 *v109;
  __n128 *v110;
  uint64_t v111;
  __n128 v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  __n128 *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  float v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  __n128 *v134;
  char *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __n128 *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t **v151;
  uint64_t **v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v9 = a6;
  if (!a6)
    return result;
  while (a5 > a8 && v9 > a8)
  {
    if (!a5)
      return result;
    v13 = 0;
    v14 = **a4;
    v15 = (int *)(v14 + 24 * a2->n128_u64[0]);
    v16 = *v15;
    v17 = -a5;
    while (1)
    {
      v18 = a1->n128_i64[v13 / 8];
      v19 = v14 + 24 * v18;
      if (v16 < *(_DWORD *)v19)
        LOBYTE(v20) = -1;
      else
        LOBYTE(v20) = 1;
      if (v16 != *(_DWORD *)v19)
        goto LABEL_18;
      result.n128_u32[0] = v15[1];
      v21 = *(float *)(v19 + 4);
      if (result.n128_f32[0] == v21)
        v20 = 0;
      else
        v20 = -127;
      if (result.n128_f32[0] > v21)
        v20 = 1;
      if (result.n128_f32[0] < v21)
        v20 = -1;
      if (v20)
      {
LABEL_18:
        if ((char)v20 > 0)
          break;
        goto LABEL_19;
      }
      v23 = *((_QWORD *)v15 + 1);
      v24 = *(_QWORD *)(v19 + 8);
      if (v23 >= v24 && (v24 < v23) > 0)
        break;
LABEL_19:
      v13 += 8;
      if (__CFADD__(v17++, 1))
        return result;
    }
    v25 = &a1->n128_u64[v13 / 8];
    if (-v17 >= v9)
    {
      if (v17 == -1)
      {
        a1->n128_u64[v13 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v18;
        return result;
      }
      if (v17 <= 0)
        v44 = -v17;
      else
        v44 = 1 - v17;
      v41 = v44 >> 1;
      v30 = (__n128 *)((char *)a1 + 8 * (v44 >> 1) + v13);
      if (a2 == a3)
      {
        v27 = 0;
LABEL_56:
        v28 = &a2->n128_i8[8 * v27];
        v42 = (8 * v27) >> 3;
        v29 = (char *)v30;
        v43 = v28;
        if (v30 == a2)
          goto LABEL_98;
LABEL_57:
        v43 = v29;
        if (v27)
        {
          v45 = (__n128 *)&v30->n128_i8[8];
          if (&v30->n128_i8[8] == (__int8 *)a2)
          {
            v144 = v30->n128_u64[0];
            v146 = v42;
            v59 = v28 - (char *)a2;
            v150 = a8;
            v152 = a4;
            v154 = a7;
            v60 = a3;
            v156 = v41;
            v148 = v29;
            memmove(v30, a2, v28 - (char *)a2);
            v42 = v146;
            v29 = v148;
            a7 = v154;
            v41 = v156;
            v25 = &a1->n128_u64[v13 / 8];
            a8 = v150;
            a4 = v152;
            a3 = v60;
            v43 = (char *)v30 + v59;
            *(unint64_t *)((char *)v30->n128_u64 + v59) = v144;
          }
          else if (v27 == 1)
          {
            v46 = a2->n128_u64[0];
            v43 = v29 + 8;
            if (a2 != v30)
            {
              v149 = a8;
              v151 = a4;
              v153 = a7;
              v47 = a3;
              v155 = v41;
              v145 = v42;
              v147 = v29;
              v143 = a2->n128_u64[0];
              memmove(v29 + 8, v30, (char *)a2 - v29);
              v46 = v143;
              v42 = v145;
              v29 = v147;
              v25 = &a1->n128_u64[v13 / 8];
              a7 = v153;
              v41 = v155;
              a8 = v149;
              a4 = v151;
              a3 = v47;
            }
            v30->n128_u64[0] = v46;
          }
          else
          {
            v61 = ((char *)a2 - v29) >> 3;
            v62 = (v28 - (char *)a2) >> 3;
            if (v61 == v62)
            {
              v63 = 8 * v27 - 8;
              v64 = a2;
              do
              {
                v65 = v45[-1].n128_i64[1];
                v45[-1].n128_u64[1] = v64->n128_u64[0];
                v64->n128_u64[0] = v65;
                v64 = (__n128 *)((char *)v64 + 8);
                if (v45 == a2)
                  break;
                v45 = (__n128 *)((char *)v45 + 8);
                v66 = v63;
                v63 -= 8;
              }
              while (v66);
              v43 = (char *)a2;
            }
            else
            {
              v67 = (v28 - (char *)a2) >> 3;
              v68 = ((char *)a2 - v29) >> 3;
              do
              {
                v69 = v68;
                v68 = v67;
                v67 = v69 % v67;
              }
              while (v67);
              if (v68)
              {
                v70 = (__n128 *)((char *)v30 + 8 * v68);
                do
                {
                  v72 = v70[-1].n128_i64[1];
                  v70 = (__n128 *)((char *)v70 - 8);
                  v71 = v72;
                  v73 = (__n128 *)((char *)v70 + 8 * v61);
                  v74 = v70;
                  do
                  {
                    v75 = v73;
                    v74->n128_u64[0] = v73->n128_u64[0];
                    v76 = (v28 - (char *)v73) >> 3;
                    v77 = __OFSUB__(v61, v76);
                    v79 = v61 - v76;
                    v78 = (v79 < 0) ^ v77;
                    v73 = (__n128 *)((char *)v30 + 8 * v79);
                    if (v78)
                      v73 = (__n128 *)((char *)v75 + 8 * v61);
                    v74 = v75;
                  }
                  while (v73 != v70);
                  v75->n128_u64[0] = v71;
                }
                while (v70 != v30);
              }
              v43 = &v30->n128_i8[8 * v62];
            }
          }
        }
        goto LABEL_98;
      }
      v27 = 0;
      v48 = ((char *)a3 - (char *)a2) >> 3;
      v49 = (float *)(v14 + 24 * v30->n128_u64[0]);
      v50 = *v49;
      while (2)
      {
        v51 = v48 >> 1;
        v52 = (v48 >> 1) + v27;
        v53 = v14 + 24 * a2->n128_u64[v52];
        if (*(_DWORD *)v53 < SLODWORD(v50))
          LOBYTE(v54) = -1;
        else
          LOBYTE(v54) = 1;
        if (*(_DWORD *)v53 != LODWORD(v50))
          goto LABEL_77;
        v55 = *(float *)(v53 + 4);
        v56 = v49[1];
        if (v55 == v56)
          v54 = 0;
        else
          v54 = -127;
        if (v55 > v56)
          v54 = 1;
        if (v55 < v56)
          v54 = -1;
        if (!v54)
        {
          v57 = *(_QWORD *)(v53 + 8);
          v58 = *((_QWORD *)v49 + 1);
          if (v57 >= v58 && (v58 < v57) >= 1)
          {
LABEL_78:
            v27 = v52 + 1;
            v51 = v48 + ~v51;
          }
        }
        else
        {
LABEL_77:
          if ((char)v54 >= 1)
            goto LABEL_78;
        }
        v48 = v51;
        if (!v51)
          goto LABEL_56;
        continue;
      }
    }
    if (v9 >= 0)
      v26 = v9;
    else
      v26 = v9 + 1;
    v27 = v26 >> 1;
    v28 = &a2->n128_i8[8 * v27];
    v29 = (char *)a2;
    v30 = (__n128 *)((char *)a1 + v13);
    if ((char *)a2 - (char *)a1 != v13)
    {
      v31 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 3;
      v32 = (float *)(v14 + 24 * *(_QWORD *)v28);
      v33 = *v32;
      v30 = (__n128 *)((char *)a1 + v13);
      while (1)
      {
        v35 = v31 >> 1;
        v36 = &v30->n128_u64[v31 >> 1];
        v37 = v14 + 24 * *v36;
        if (SLODWORD(v33) < *(_DWORD *)v37)
          LOBYTE(v34) = -1;
        else
          LOBYTE(v34) = 1;
        if (LODWORD(v33) == *(_DWORD *)v37)
        {
          v38 = v32[1];
          v39 = *(float *)(v37 + 4);
          if (v38 == v39)
            LODWORD(v34) = 0;
          else
            LODWORD(v34) = -127;
          if (v38 > v39)
            LODWORD(v34) = 1;
          if (v38 < v39)
            LODWORD(v34) = -1;
          if (!(_DWORD)v34)
          {
            v34 = *((_QWORD *)v32 + 1);
            v40 = *(_QWORD *)(v37 + 8);
            if (v34 < v40)
              goto LABEL_46;
            LOBYTE(v34) = v40 < v34;
          }
        }
        if ((char)v34 <= 0)
        {
LABEL_46:
          v30 = (__n128 *)(v36 + 1);
          v31 += ~v35;
          if (!v31)
          {
LABEL_47:
            v29 = (char *)v30;
            break;
          }
        }
        else
        {
          v31 >>= 1;
          if (!v35)
            goto LABEL_47;
        }
      }
    }
    v41 = (uint64_t)(v29 - (char *)a1 - v13) >> 3;
    v42 = v27;
    v43 = &a2->n128_i8[8 * v27];
    if (v30 != a2)
      goto LABEL_57;
LABEL_98:
    a5 = -(v41 + v17);
    v80 = v9 - v42;
    if (v41 + v42 >= v9 - (v41 + v42) - v17)
    {
      v86 = (__n128 *)v25;
      v87 = v28;
      v88 = a4;
      v157 = v41;
      v89 = a7;
      v90 = a8;
      v91 = (__n128 *)v29;
      v92 = v42;
      sub_2236C4BC8(v43, v87, a3);
      v93 = v86;
      a8 = v90;
      a4 = v88;
      a7 = v89;
      a5 = v157;
      a3 = (__n128 *)v43;
      v9 = v92;
      a1 = v93;
      a2 = v91;
      if (!v92)
        return result;
    }
    else
    {
      v81 = &a1->n128_u64[v13 / 8];
      v82 = a4;
      v83 = a3;
      v84 = a7;
      v85 = a8;
      sub_2236C4BC8(v81, v29, v43);
      a8 = v85;
      a4 = v82;
      a3 = v83;
      a7 = v84;
      v9 = v80;
      a1 = (__n128 *)v43;
      a2 = (__n128 *)v28;
      if (!v80)
        return result;
    }
  }
  if (a5 <= v9)
  {
    if (a1 == a2)
      return result;
    v104 = (char *)a2 - (char *)a1 - 8;
    v105 = a7;
    v106 = a1;
    if (v104 < 0x18)
      goto LABEL_175;
    v105 = a7;
    v106 = a1;
    if ((unint64_t)(a7 - (char *)a1) < 0x20)
      goto LABEL_175;
    v107 = (v104 >> 3) + 1;
    v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
    v105 = &a7[v108];
    v106 = (__n128 *)((char *)a1 + v108);
    v109 = a1 + 1;
    v110 = (__n128 *)(a7 + 16);
    v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = v109[-1];
      v112 = *v109;
      v110[-1] = result;
      *v110 = v112;
      v109 += 2;
      v110 += 2;
      v111 -= 4;
    }
    while (v111);
    if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_175:
      do
      {
        v113 = v106->n128_u64[0];
        v106 = (__n128 *)((char *)v106 + 8);
        *(_QWORD *)v105 = v113;
        v105 += 8;
      }
      while (v106 != a2);
    }
    if (v105 == a7)
      return result;
    v114 = *a4;
    while (1)
    {
      while (1)
      {
        if (a2 == a3)
        {
          memmove(a1, a7, v105 - a7);
          return result;
        }
        v115 = *v114 + 24 * a2->n128_u64[0];
        v116 = *v114 + 24 * *(_QWORD *)a7;
        LOBYTE(v117) = *(_DWORD *)v115 < *(_DWORD *)v116 ? -1 : 1;
        if (*(_DWORD *)v115 == *(_DWORD *)v116)
        {
          result.n128_u32[0] = *(_DWORD *)(v115 + 4);
          v118 = *(float *)(v116 + 4);
          if (result.n128_f32[0] == v118)
            v117 = 0;
          else
            v117 = -127;
          if (result.n128_f32[0] > v118)
            v117 = 1;
          if (result.n128_f32[0] < v118)
            v117 = -1;
          if (!v117)
            break;
        }
LABEL_136:
        if ((char)v117 < 1)
          goto LABEL_120;
        a1->n128_u64[0] = a2->n128_u64[0];
        a1 = (__n128 *)((char *)a1 + 8);
        a2 = (__n128 *)((char *)a2 + 8);
        if (a7 == v105)
          return result;
      }
      v119 = *(_QWORD *)(v115 + 8);
      v120 = *(_QWORD *)(v116 + 8);
      if (v119 >= v120)
      {
        LOBYTE(v117) = v120 < v119;
        goto LABEL_136;
      }
LABEL_120:
      a1->n128_u64[0] = *(_QWORD *)a7;
      a1 = (__n128 *)((char *)a1 + 8);
      a7 += 8;
      if (a7 == v105)
        return result;
    }
  }
  v94 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v95 = v94 - 8;
  if ((unint64_t)(v94 - 8) < 0x18)
  {
    v96 = a7;
    v97 = a2;
  }
  else
  {
    v96 = a7;
    v97 = a2;
    if ((unint64_t)(a7 - (char *)a2) >= 0x20)
    {
      v98 = (v95 >> 3) + 1;
      v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
      v96 = &a7[v99];
      v97 = (__n128 *)((char *)a2 + v99);
      v100 = a2 + 1;
      v101 = (__n128 *)(a7 + 16);
      v102 = v98 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v100[-1];
        v103 = *v100;
        v101[-1] = result;
        *v101 = v103;
        v100 += 2;
        v101 += 2;
        v102 -= 4;
      }
      while (v102);
      if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_143;
    }
  }
  do
  {
    v121 = v97->n128_u64[0];
    v97 = (__n128 *)((char *)v97 + 8);
    *(_QWORD *)v96 = v121;
    v96 += 8;
  }
  while (v97 != a3);
LABEL_143:
  if (v96 == a7)
    return result;
  v122 = *a4;
  v123 = a3;
  while (a2 != a1)
  {
    v124 = a2[-1].n128_i64[1];
    v126 = v96 - 8;
    v125 = *((_QWORD *)v96 - 1);
    v127 = *v122 + 24 * v125;
    v128 = *v122 + 24 * v124;
    if (*(_DWORD *)v127 < *(_DWORD *)v128)
      LOBYTE(v129) = -1;
    else
      LOBYTE(v129) = 1;
    if (*(_DWORD *)v127 != *(_DWORD *)v128)
      goto LABEL_161;
    result.n128_u32[0] = *(_DWORD *)(v127 + 4);
    v130 = *(float *)(v128 + 4);
    if (result.n128_f32[0] == v130)
      v129 = 0;
    else
      v129 = -127;
    if (result.n128_f32[0] > v130)
      v129 = 1;
    if (result.n128_f32[0] < v130)
      v129 = -1;
    if (v129)
    {
LABEL_161:
      if ((char)v129 <= 0)
        goto LABEL_145;
      a2 = (__n128 *)((char *)a2 - 8);
      a3[-1].n128_u64[1] = v124;
      a3 = (__n128 *)((char *)a3 - 8);
      v123 = (__n128 *)((char *)v123 - 8);
      if (v96 == a7)
        return result;
    }
    else
    {
      v131 = *(_QWORD *)(v127 + 8);
      v132 = *(_QWORD *)(v128 + 8);
      if (v131 >= v132)
      {
        LOBYTE(v129) = v132 < v131;
        goto LABEL_161;
      }
LABEL_145:
      v96 -= 8;
      a3[-1].n128_u64[1] = v125;
      a3 = (__n128 *)((char *)a3 - 8);
      v123 = (__n128 *)((char *)v123 - 8);
      if (v126 == a7)
        return result;
    }
  }
  v133 = v96 - a7 - 8;
  if (v133 < 0x58 || (unint64_t)(v96 - (char *)v123) < 0x20)
  {
    v134 = a3;
    v135 = v96;
    goto LABEL_167;
  }
  v138 = 0;
  v139 = (v133 >> 3) + 1;
  v140 = 8 * (v139 & 0x3FFFFFFFFFFFFFFCLL);
  v134 = (__n128 *)((char *)a3 - v140);
  v135 = &v96[-v140];
  v141 = v139 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = *(__n128 *)&v96[v138 * 16 - 16];
    v142 = &a3[v138];
    v142[-2] = *(__n128 *)&v96[v138 * 16 - 32];
    v142[-1] = result;
    v138 -= 2;
    v141 -= 4;
  }
  while (v141);
  if (v139 != (v139 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_167:
    v136 = &v134[-1].n128_u64[1];
    do
    {
      v137 = *((_QWORD *)v135 - 1);
      v135 -= 8;
      *v136-- = v137;
    }
    while (v135 != a7);
  }
  return result;
}

void sub_2236C5448()
{
  sub_223198218("vector");
}

double sub_2236C545C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double result)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  __int128 v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  float v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  float v67;
  char v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  _BOOL4 v72;
  unsigned int v73;
  BOOL v74;
  uint64_t v75;
  unint64_t v76;
  BOOL v77;
  float v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  unint64_t v85;
  char v86;
  int v87;
  unsigned int v88;
  _BOOL4 v89;
  unsigned int v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  BOOL v94;
  float v95;
  unint64_t v96;
  char v97;
  int v98;
  unsigned int v99;
  _BOOL4 v100;
  unsigned int v101;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  BOOL v105;
  float v106;
  void **v107;
  void *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  void *v112;
  BOOL v113;
  BOOL v114;
  uint64_t v115;
  _BOOL4 v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  BOOL v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  BOOL v124;
  float v125;
  unsigned int v126;
  unint64_t v127;
  char v128;
  int v129;
  unsigned int v130;
  _BOOL4 v131;
  unsigned int v132;
  BOOL v133;
  uint64_t v134;
  unint64_t v135;
  BOOL v136;
  float v137;
  unsigned int v138;
  unint64_t v139;
  char v140;
  int v141;
  unsigned int v142;
  _BOOL4 v143;
  unsigned int v144;
  BOOL v145;
  uint64_t v146;
  unint64_t v147;
  BOOL v148;
  float v149;
  unint64_t v150;
  unsigned int v151;
  uint64_t v152;
  char v153;
  int v154;
  unsigned int v155;
  _BOOL4 v156;
  unsigned int v157;
  BOOL v158;
  uint64_t v159;
  unint64_t v160;
  BOOL v161;
  float v162;
  unsigned int v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  void *v169;
  unint64_t v170;
  char v171;
  int v172;
  unsigned int v173;
  _BOOL4 v174;
  unsigned int v175;
  BOOL v176;
  uint64_t v177;
  unint64_t v178;
  BOOL v179;
  float v180;
  unint64_t v181;
  char v182;
  int v183;
  unsigned int v184;
  _BOOL4 v185;
  unsigned int v186;
  BOOL v187;
  uint64_t v188;
  unint64_t v189;
  BOOL v190;
  float v191;
  void **v192;
  void *v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  void *v197;
  unsigned int v198;
  _BOOL4 v199;
  unsigned int v200;
  uint64_t v201;
  __int128 *v202;
  unsigned int v203;
  unsigned int v204;
  __int128 *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  BOOL v209;
  char v210;
  unint64_t v211;
  unint64_t v212;
  BOOL v213;
  float v214;
  char v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  void *v220;
  unint64_t v221;
  BOOL v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int v227;
  _BOOL4 v228;
  unsigned int v229;
  unsigned int v230;
  _BOOL4 v231;
  unsigned int v232;
  BOOL v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  BOOL v239;
  float v240;
  uint64_t v241;
  __int128 v242;
  uint64_t v243;
  unsigned int v244;
  float v245;
  _BOOL4 v246;
  unsigned int v247;
  uint64_t v248;
  char v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  unsigned int v256;
  _BOOL4 v257;
  unsigned int v258;
  BOOL v259;
  uint64_t v260;
  unint64_t v261;
  BOOL v262;
  float v263;
  char v264;
  void *v265;
  int64_t v266;
  int64_t v267;
  int64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  BOOL v275;
  char v276;
  BOOL v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  BOOL v283;
  float v284;
  float v285;
  uint64_t v286;
  unsigned int v287;
  _BOOL4 v288;
  unsigned int v289;
  unsigned int v290;
  _BOOL4 v291;
  _BOOL4 v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  BOOL v298;
  char v299;
  uint64_t v300;
  unint64_t v301;
  BOOL v302;
  float v303;
  float v304;
  void *v305;
  float v306;
  unsigned int v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  BOOL v317;
  char v318;
  BOOL v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  BOOL v325;
  float v326;
  float v327;
  unsigned int v328;
  _BOOL4 v329;
  unsigned int v330;
  BOOL v331;
  char v332;
  uint64_t v333;
  unint64_t v334;
  BOOL v335;
  float v336;
  void *v337;
  int64_t v338;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  BOOL v355;
  char v356;
  BOOL v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  BOOL v363;
  float v364;
  float v365;
  char v366;
  void *v367;
  _OWORD *v368;
  void *v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unsigned int v378;
  _BOOL4 v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  uint64_t v383;
  float v384;
  BOOL v385;
  char v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  BOOL v390;
  void *v391;
  _BOOL4 v392;
  unsigned int v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  unint64_t v397;
  unsigned int v398;
  _BOOL4 v399;
  unsigned int v400;
  BOOL v401;
  char v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  BOOL v406;
  float v407;
  void *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  _BOOL4 v412;
  unsigned int v413;
  unsigned int v414;
  _BOOL4 v415;
  unsigned int v416;
  BOOL v417;
  char v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  BOOL v423;
  float v424;
  uint64_t v425;
  __int128 v426;
  unsigned int v427;
  float v428;
  _BOOL4 v429;
  unint64_t v430;
  unsigned int v431;
  uint64_t v432;
  char v433;
  uint64_t v434;
  void *v435;
  unsigned int v436;
  _BOOL4 v437;
  unsigned int v438;
  uint64_t v439;
  unint64_t v440;
  float v441;
  char v442;
  void *v443;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unsigned int v463;
  unsigned int v464;
  __int128 v465;
  uint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t v471;
  __int128 v472;
  uint64_t v475;
  __int128 v476;
  __int128 v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t v481;
  __int128 v482;
  _BYTE v483[28];
  _BYTE v484[28];
  _BYTE v485[28];
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  _BYTE v490[28];
  _BYTE v491[28];
  __int128 v492;
  _BYTE v493[28];
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;

__n128 sub_2236C720C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  unsigned int v11;
  _BOOL4 v12;
  unsigned int v13;
  uint64_t v14;
  __int128 *v15;
  unsigned int v16;
  _BOOL4 v17;
  uint64_t v18;
  __int128 *v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  float v28;
  char v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  void *v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  float v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  void *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  void *v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  float v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  __int128 v73;
  void *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  float v89;
  uint64_t v90;
  int v91;
  __int128 v92;
  __int128 v93;
  void *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  int v107;
  int v108;
  int v109;
  int v110;

  result.n128_u64[0] = sub_2236C8294(a1, a2, a3, a4).n128_u64[0];
  v11 = *(_DWORD *)(a5 + 40);
  v12 = ((v11 >> 3) & 1) == 0;
  if ((v11 & 0x10) != 0)
    v12 = 0;
  if ((v11 & 2) != 0)
    v13 = 2;
  else
    v13 = v12;
  v15 = (__int128 *)(a5 + 24);
  v14 = *(_QWORD *)(a5 + 24);
  v16 = *(_DWORD *)(a4 + 40);
  v17 = (v16 & 0x10) == 0 && ((v16 >> 3) & 1) == 0;
  v19 = (__int128 *)(a4 + 24);
  v18 = *(_QWORD *)(a4 + 24);
  if ((v16 & 2) != 0)
    v20 = 2;
  else
    v20 = v17;
  v22 = *(void **)a4;
  v21 = *(_QWORD *)(a4 + 8);
  v23 = v13 == v20;
  if (v13 < v20)
    v24 = -1;
  else
    v24 = 1;
  if (v23)
  {
    if (v14 < v18)
      return result;
    if (v18 < v14)
      goto LABEL_32;
    v25 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 5;
    v26 = (v21 - (uint64_t)v22) >> 5;
    v27 = v25 == v26;
    if (v25 < v26)
      v24 = -1;
    else
      v24 = 1;
    if (v27)
    {
      result.n128_u32[0] = *(_DWORD *)(a5 + 72);
      v28 = *(float *)(a4 + 72);
      v29 = result.n128_f32[0] == v28 ? 0 : -127;
      v24 = result.n128_f32[0] > v28 ? 1 : v29;
      if (result.n128_f32[0] < v28)
        return result;
    }
  }
  if (v24 < 1)
    return result;
LABEL_32:
  v30 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v95 = *v19;
  v99 = *(_OWORD *)(a4 + 40);
  v103 = *(__n128 *)(a4 + 56);
  v107 = *(_DWORD *)(a4 + 72);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v31 = *(_DWORD *)(a5 + 72);
  v33 = *(_OWORD *)(a5 + 40);
  v32 = *(_OWORD *)(a5 + 56);
  *v19 = *v15;
  *(_OWORD *)(a4 + 40) = v33;
  *(_OWORD *)(a4 + 56) = v32;
  *(_DWORD *)(a4 + 72) = v31;
  v34 = *(void **)a5;
  if (*(_QWORD *)a5)
  {
    *(_QWORD *)(a5 + 8) = v34;
    operator delete(v34);
  }
  *(_QWORD *)a5 = v22;
  *(_QWORD *)(a5 + 8) = v21;
  *(_QWORD *)(a5 + 16) = v30;
  *v15 = v95;
  *(_OWORD *)(a5 + 40) = v99;
  result = v103;
  *(__n128 *)(a5 + 56) = v103;
  *(_DWORD *)(a5 + 72) = v107;
  v35 = *(_DWORD *)(a4 + 40);
  if ((v35 & 2) != 0)
  {
    v36 = 2;
    v37 = *(_DWORD *)(a3 + 40);
    if ((v37 & 2) == 0)
      goto LABEL_39;
  }
  else
  {
    if ((v35 & 0x10) == 0)
    {
      v36 = ((v35 >> 3) & 1) == 0;
      v37 = *(_DWORD *)(a3 + 40);
      if ((v37 & 2) != 0)
        goto LABEL_42;
LABEL_39:
      v38 = (v37 & 0x10) == 0 && ((v37 >> 3) & 1) == 0;
      goto LABEL_44;
    }
    v36 = 0;
    v37 = *(_DWORD *)(a3 + 40);
    if ((v37 & 2) == 0)
      goto LABEL_39;
  }
LABEL_42:
  v38 = 2;
LABEL_44:
  v40 = (__int128 *)(a3 + 24);
  v39 = *(_QWORD *)(a3 + 24);
  v42 = *(void **)a3;
  v41 = *(_QWORD *)(a3 + 8);
  v43 = v36 == v38;
  if (v36 < v38)
    v44 = -1;
  else
    v44 = 1;
  if (v43)
  {
    v45 = *(_QWORD *)(a4 + 24);
    if (v45 < v39)
      return result;
    if (v39 < v45)
      goto LABEL_63;
    v46 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 5;
    v47 = (v41 - (uint64_t)v42) >> 5;
    v48 = v46 == v47;
    if (v46 < v47)
      v44 = -1;
    else
      v44 = 1;
    if (v48)
    {
      result.n128_u32[0] = *(_DWORD *)(a4 + 72);
      v49 = *(float *)(a3 + 72);
      if (result.n128_f32[0] == v49)
        v44 = 0;
      else
        v44 = -127;
      if (result.n128_f32[0] > v49)
        v44 = 1;
      if (result.n128_f32[0] < v49)
        return result;
    }
  }
  if (v44 < 1)
    return result;
LABEL_63:
  v50 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v96 = *v40;
  v100 = *(_OWORD *)(a3 + 40);
  v104 = *(__n128 *)(a3 + 56);
  v108 = *(_DWORD *)(a3 + 72);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v51 = *(_DWORD *)(a4 + 72);
  v53 = *(_OWORD *)(a4 + 40);
  v52 = *(_OWORD *)(a4 + 56);
  *v40 = *v19;
  *(_OWORD *)(a3 + 40) = v53;
  *(_OWORD *)(a3 + 56) = v52;
  *(_DWORD *)(a3 + 72) = v51;
  v54 = *(void **)a4;
  if (*(_QWORD *)a4)
  {
    *(_QWORD *)(a4 + 8) = v54;
    operator delete(v54);
  }
  *(_QWORD *)a4 = v42;
  *(_QWORD *)(a4 + 8) = v41;
  *(_QWORD *)(a4 + 16) = v50;
  *v19 = v96;
  *(_OWORD *)(a4 + 40) = v100;
  result = v104;
  *(__n128 *)(a4 + 56) = v104;
  *(_DWORD *)(a4 + 72) = v108;
  v55 = *(_DWORD *)(a3 + 40);
  if ((v55 & 2) != 0)
  {
    v56 = 2;
    v57 = *(_DWORD *)(a2 + 40);
    if ((v57 & 2) == 0)
      goto LABEL_70;
  }
  else
  {
    if ((v55 & 0x10) == 0)
    {
      v56 = ((v55 >> 3) & 1) == 0;
      v57 = *(_DWORD *)(a2 + 40);
      if ((v57 & 2) != 0)
        goto LABEL_73;
LABEL_70:
      v58 = (v57 & 0x10) == 0 && ((v57 >> 3) & 1) == 0;
      goto LABEL_75;
    }
    v56 = 0;
    v57 = *(_DWORD *)(a2 + 40);
    if ((v57 & 2) == 0)
      goto LABEL_70;
  }
LABEL_73:
  v58 = 2;
LABEL_75:
  v60 = (__int128 *)(a2 + 24);
  v59 = *(_QWORD *)(a2 + 24);
  v62 = *(void **)a2;
  v61 = *(_QWORD *)(a2 + 8);
  v63 = v56 == v58;
  if (v56 < v58)
    v64 = -1;
  else
    v64 = 1;
  if (v63)
  {
    v65 = *(_QWORD *)(a3 + 24);
    if (v65 < v59)
      return result;
    if (v59 < v65)
      goto LABEL_94;
    v66 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5;
    v67 = (v61 - (uint64_t)v62) >> 5;
    v68 = v66 == v67;
    if (v66 < v67)
      v64 = -1;
    else
      v64 = 1;
    if (v68)
    {
      result.n128_u32[0] = *(_DWORD *)(a3 + 72);
      v69 = *(float *)(a2 + 72);
      if (result.n128_f32[0] == v69)
        v64 = 0;
      else
        v64 = -127;
      if (result.n128_f32[0] > v69)
        v64 = 1;
      if (result.n128_f32[0] < v69)
        return result;
    }
  }
  if (v64 < 1)
    return result;
LABEL_94:
  v70 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v97 = *v60;
  v101 = *(_OWORD *)(a2 + 40);
  v105 = *(__n128 *)(a2 + 56);
  v109 = *(_DWORD *)(a2 + 72);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v71 = *(_DWORD *)(a3 + 72);
  v73 = *(_OWORD *)(a3 + 40);
  v72 = *(_OWORD *)(a3 + 56);
  *v60 = *v40;
  *(_OWORD *)(a2 + 40) = v73;
  *(_OWORD *)(a2 + 56) = v72;
  *(_DWORD *)(a2 + 72) = v71;
  v74 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v74;
    operator delete(v74);
  }
  *(_QWORD *)a3 = v62;
  *(_QWORD *)(a3 + 8) = v61;
  *(_QWORD *)(a3 + 16) = v70;
  *v40 = v97;
  *(_OWORD *)(a3 + 40) = v101;
  result = v105;
  *(__n128 *)(a3 + 56) = v105;
  *(_DWORD *)(a3 + 72) = v109;
  v75 = *(_DWORD *)(a2 + 40);
  if ((v75 & 2) != 0)
  {
    v76 = 2;
    v77 = *(_DWORD *)(a1 + 40);
    if ((v77 & 2) == 0)
      goto LABEL_101;
    goto LABEL_104;
  }
  if ((v75 & 0x10) != 0)
  {
    v76 = 0;
    v77 = *(_DWORD *)(a1 + 40);
    if ((v77 & 2) == 0)
      goto LABEL_101;
LABEL_104:
    v78 = 2;
    goto LABEL_106;
  }
  v76 = ((v75 >> 3) & 1) == 0;
  v77 = *(_DWORD *)(a1 + 40);
  if ((v77 & 2) != 0)
    goto LABEL_104;
LABEL_101:
  v78 = (v77 & 0x10) == 0 && ((v77 >> 3) & 1) == 0;
LABEL_106:
  v79 = (__int128 *)(a1 + 24);
  v80 = *(_QWORD *)(a1 + 24);
  v82 = *(_QWORD *)a1;
  v81 = *(_QWORD *)(a1 + 8);
  v83 = v76 == v78;
  if (v76 < v78)
    v84 = -1;
  else
    v84 = 1;
  if (!v83)
    goto LABEL_124;
  v85 = *(_QWORD *)(a2 + 24);
  if (v85 < v80)
    return result;
  if (v80 < v85)
  {
LABEL_125:
    v90 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v98 = *v79;
    v102 = *(_OWORD *)(a1 + 40);
    v106 = *(__n128 *)(a1 + 56);
    v110 = *(_DWORD *)(a1 + 72);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v91 = *(_DWORD *)(a2 + 72);
    v93 = *(_OWORD *)(a2 + 40);
    v92 = *(_OWORD *)(a2 + 56);
    *v79 = *v60;
    *(_OWORD *)(a1 + 40) = v93;
    *(_OWORD *)(a1 + 56) = v92;
    *(_DWORD *)(a1 + 72) = v91;
    v94 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v94;
      operator delete(v94);
    }
    *(_QWORD *)a2 = v82;
    *(_QWORD *)(a2 + 8) = v81;
    *(_QWORD *)(a2 + 16) = v90;
    *v60 = v98;
    *(_OWORD *)(a2 + 40) = v102;
    result = v106;
    *(__n128 *)(a2 + 56) = v106;
    *(_DWORD *)(a2 + 72) = v110;
    return result;
  }
  v86 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  v87 = (v81 - v82) >> 5;
  v88 = v86 == v87;
  v84 = v86 < v87 ? -1 : 1;
  if (!v88)
    goto LABEL_124;
  result.n128_u32[0] = *(_DWORD *)(a2 + 72);
  v89 = *(float *)(a1 + 72);
  if (result.n128_f32[0] == v89)
    v84 = 0;
  else
    v84 = -127;
  if (result.n128_f32[0] > v89)
    v84 = 1;
  if (result.n128_f32[0] >= v89)
  {
LABEL_124:
    if (v84 < 1)
      return result;
    goto LABEL_125;
  }
  return result;
}

__n128 sub_2236C77A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  _BOOL4 v7;
  unsigned int v8;
  uint64_t v9;
  __int128 *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  __n128 result;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  char v23;
  float v24;
  char v25;
  unsigned int v26;
  _BOOL4 v27;
  unsigned int v28;
  uint64_t v29;
  __int128 *v30;
  unsigned int v31;
  BOOL v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  float v36;
  char v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  void *v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  char v64;
  unsigned int v65;
  BOOL v66;
  char v67;
  BOOL v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  float v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  __int128 v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  BOOL v84;
  float v85;
  int v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  int v102;
  int v103;
  int v104;
  int v105;

  v6 = *(_DWORD *)(a2 + 40);
  v7 = ((v6 >> 3) & 1) == 0;
  v8 = (v6 & 0x10) == 0 && ((v6 >> 3) & 1) == 0;
  if ((v6 & 2) != 0)
    v8 = 2;
  v10 = (__int128 *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  v11 = *(void **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (v12 - *(_QWORD *)a2) >> 5;
  result.n128_u32[0] = *(_DWORD *)(a2 + 72);
  v15 = *((_DWORD *)a1 + 10);
  v16 = ((v15 >> 3) & 1) == 0;
  if ((v15 & 0x10) != 0)
    v16 = 0;
  if ((v15 & 2) != 0)
    v16 = 2;
  v18 = (__int128 *)(a1 + 3);
  v17 = a1[3];
  v20 = *a1;
  v19 = a1[1];
  v21 = (v19 - *a1) >> 5;
  v22 = v8 == v16;
  if (v8 < v16)
    v23 = -1;
  else
    v23 = 1;
  if (v22)
  {
    if (v9 >= v17)
    {
      if (v17 >= v9)
      {
        v24 = *((float *)a1 + 18);
        if (result.n128_f32[0] == v24)
          v23 = 0;
        else
          v23 = -127;
        if (result.n128_f32[0] > v24)
          v23 = 1;
        if (result.n128_f32[0] < v24)
          v23 = -1;
        if (v13 < v21)
          v25 = -1;
        else
          v25 = 1;
        if (v13 != v21)
          v23 = v25;
      }
      else
      {
        v23 = 1;
      }
    }
    else
    {
      v23 = -1;
    }
  }
  v26 = *(_DWORD *)(a3 + 40);
  v27 = ((v26 >> 3) & 1) == 0;
  if ((v26 & 0x10) != 0)
    v27 = 0;
  if ((v26 & 2) != 0)
    v28 = 2;
  else
    v28 = v27;
  v30 = (__int128 *)(a3 + 24);
  v29 = *(_QWORD *)(a3 + 24);
  if ((v6 & 0x10) != 0)
    v7 = 0;
  if ((v6 & 2) != 0)
    v31 = 2;
  else
    v31 = v7;
  v32 = v28 == v31;
  if (v28 < v31)
    v33 = -1;
  else
    v33 = 1;
  if (v32)
  {
    if (v29 >= v9)
    {
      if (v9 >= v29)
      {
        v34 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5;
        v35 = v34 == v13;
        if (v34 < v13)
          v33 = -1;
        else
          v33 = 1;
        if (v35)
        {
          v36 = *(float *)(a3 + 72);
          if (v36 == result.n128_f32[0])
            v37 = 0;
          else
            v37 = -127;
          if (v36 > result.n128_f32[0])
            v37 = 1;
          if (v36 < result.n128_f32[0])
            v33 = -1;
          else
            v33 = v37;
        }
      }
      else
      {
        v33 = 1;
      }
    }
    else
    {
      v33 = -1;
    }
  }
  if (v23 <= 0)
  {
    if (v33 < 1)
      return result;
    v43 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v91 = *v10;
    v95 = *(_OWORD *)(a2 + 40);
    v99 = *(__n128 *)(a2 + 56);
    v103 = *(_DWORD *)(a2 + 72);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v44 = *(_DWORD *)(a3 + 72);
    v46 = *(_OWORD *)(a3 + 40);
    v45 = *(_OWORD *)(a3 + 56);
    *v10 = *v30;
    *(_OWORD *)(a2 + 40) = v46;
    *(_OWORD *)(a2 + 56) = v45;
    *(_DWORD *)(a2 + 72) = v44;
    v47 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v47;
      operator delete(v47);
    }
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v43;
    *v30 = v91;
    *(_OWORD *)(a3 + 40) = v95;
    result = v99;
    *(__n128 *)(a3 + 56) = v99;
    *(_DWORD *)(a3 + 72) = v103;
    v48 = *(_DWORD *)(a2 + 40);
    if ((v48 & 2) != 0)
    {
      v49 = 2;
      v50 = *((_DWORD *)a1 + 10);
      if ((v50 & 2) != 0)
        goto LABEL_96;
    }
    else if ((v48 & 0x10) != 0)
    {
      v49 = 0;
      v50 = *((_DWORD *)a1 + 10);
      if ((v50 & 2) != 0)
        goto LABEL_96;
    }
    else
    {
      v49 = ((v48 >> 3) & 1) == 0;
      v50 = *((_DWORD *)a1 + 10);
      if ((v50 & 2) != 0)
      {
LABEL_96:
        v62 = *a1;
        v61 = a1[1];
        v68 = v49 == 2;
        if (v49 < 2)
          v64 = -1;
        else
          v64 = 1;
        if (!v68)
          goto LABEL_122;
        goto LABEL_109;
      }
    }
    if ((v50 & 0x10) != 0)
    {
      v62 = *a1;
      v61 = a1[1];
      v22 = v49 == 0;
      v64 = 1;
      if (!v22)
        goto LABEL_122;
    }
    else
    {
      v60 = ((v50 >> 3) & 1) == 0;
      v62 = *a1;
      v61 = a1[1];
      v63 = v49 == v60;
      if (v49 < v60)
        v64 = -1;
      else
        v64 = 1;
      if (!v63)
        goto LABEL_122;
    }
LABEL_109:
    v70 = *(_QWORD *)(a2 + 24);
    v71 = a1[3];
    if (v70 < v71)
      return result;
    if (v71 < v70)
    {
LABEL_123:
      v76 = a1[2];
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      v93 = *v18;
      v97 = v18[1];
      v101 = (__n128)v18[2];
      v105 = *((_DWORD *)v18 + 12);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v77 = *((_DWORD *)v10 + 12);
      v79 = v10[1];
      v78 = v10[2];
      *v18 = *v10;
      v18[1] = v79;
      v18[2] = v78;
      *((_DWORD *)v18 + 12) = v77;
      v80 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v80;
        operator delete(v80);
      }
      *(_QWORD *)a2 = v62;
      *(_QWORD *)(a2 + 8) = v61;
      *(_QWORD *)(a2 + 16) = v76;
      *v10 = v93;
      v10[1] = v97;
      result = v101;
      v10[2] = (__int128)v101;
      *((_DWORD *)v10 + 12) = v105;
      return result;
    }
    v72 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
    v73 = (v61 - v62) >> 5;
    v74 = v72 == v73;
    if (v72 < v73)
      v64 = -1;
    else
      v64 = 1;
    if (v74)
    {
      result.n128_u32[0] = *(_DWORD *)(a2 + 72);
      v75 = *((float *)a1 + 18);
      if (result.n128_f32[0] == v75)
        v64 = 0;
      else
        v64 = -127;
      if (result.n128_f32[0] > v75)
        v64 = 1;
      if (result.n128_f32[0] < v75)
        return result;
    }
LABEL_122:
    if (v64 < 1)
      return result;
    goto LABEL_123;
  }
  if (v33 >= 1)
  {
    v38 = a1[2];
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v90 = *v18;
    v94 = *(_OWORD *)(a1 + 5);
    v98 = *(__n128 *)(a1 + 7);
    v102 = *((_DWORD *)a1 + 18);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    a1[2] = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v39 = *(_DWORD *)(a3 + 72);
    v41 = *(_OWORD *)(a3 + 40);
    v40 = *(_OWORD *)(a3 + 56);
    *v18 = *v30;
    *(_OWORD *)(a1 + 5) = v41;
    *(_OWORD *)(a1 + 7) = v40;
    *((_DWORD *)a1 + 18) = v39;
    v42 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v42;
      operator delete(v42);
    }
    *(_QWORD *)a3 = v20;
    *(_QWORD *)(a3 + 8) = v19;
    *(_QWORD *)(a3 + 16) = v38;
LABEL_145:
    *v30 = v90;
    *(_OWORD *)(a3 + 40) = v94;
    result = v98;
    *(__n128 *)(a3 + 56) = v98;
    *(_DWORD *)(a3 + 72) = v102;
    return result;
  }
  v51 = a1[2];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v92 = *v18;
  v96 = *(_OWORD *)(a1 + 5);
  v100 = *(__n128 *)(a1 + 7);
  v104 = *((_DWORD *)a1 + 18);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v52 = *(_DWORD *)(a2 + 72);
  v54 = *(_OWORD *)(a2 + 40);
  v53 = *(_OWORD *)(a2 + 56);
  *v18 = *v10;
  *(_OWORD *)(a1 + 5) = v54;
  *(_OWORD *)(a1 + 7) = v53;
  *((_DWORD *)a1 + 18) = v52;
  v55 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v55;
    v56 = v21;
    operator delete(v55);
    v21 = v56;
  }
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = v51;
  *v10 = v92;
  v10[1] = v96;
  result = v100;
  v10[2] = (__int128)v100;
  *((_DWORD *)v10 + 12) = v104;
  v57 = *(_DWORD *)(a3 + 40);
  if ((v57 & 2) != 0)
  {
    v58 = 2;
    v59 = *(_DWORD *)(a2 + 40);
    if ((v59 & 2) != 0)
      goto LABEL_102;
  }
  else if ((v57 & 0x10) != 0)
  {
    v58 = 0;
    v59 = *(_DWORD *)(a2 + 40);
    if ((v59 & 2) != 0)
      goto LABEL_102;
  }
  else
  {
    v58 = ((v57 >> 3) & 1) == 0;
    v59 = *(_DWORD *)(a2 + 40);
    if ((v59 & 2) != 0)
    {
LABEL_102:
      v69 = v58 == 2;
      if (v58 < 2)
        v67 = -1;
      else
        v67 = 1;
      if (!v69)
        goto LABEL_141;
      goto LABEL_128;
    }
  }
  if ((v59 & 0x10) != 0)
  {
    v22 = v58 == 0;
    v67 = 1;
    if (!v22)
      goto LABEL_141;
  }
  else
  {
    v65 = ((v59 >> 3) & 1) == 0;
    v66 = v58 == v65;
    if (v58 < v65)
      v67 = -1;
    else
      v67 = 1;
    if (!v66)
      goto LABEL_141;
  }
LABEL_128:
  v81 = *(_QWORD *)(a3 + 24);
  v82 = *(_QWORD *)(a2 + 24);
  if (v81 < v82)
    return result;
  if (v82 < v81)
  {
LABEL_142:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v90 = *v10;
    v94 = v10[1];
    v98 = (__n128)v10[2];
    v102 = *((_DWORD *)v10 + 12);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v86 = *(_DWORD *)(a3 + 72);
    v88 = *(_OWORD *)(a3 + 40);
    v87 = *(_OWORD *)(a3 + 56);
    *v10 = *v30;
    v10[1] = v88;
    v10[2] = v87;
    *((_DWORD *)v10 + 12) = v86;
    v89 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v89;
      operator delete(v89);
    }
    *(_QWORD *)a3 = v20;
    *(_QWORD *)(a3 + 8) = v19;
    *(_QWORD *)(a3 + 16) = v51;
    goto LABEL_145;
  }
  v83 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5;
  v84 = v83 == v21;
  if (v83 < v21)
    v67 = -1;
  else
    v67 = 1;
  if (!v84)
    goto LABEL_141;
  result.n128_u32[0] = *(_DWORD *)(a3 + 72);
  v85 = *(float *)(a2 + 72);
  if (result.n128_f32[0] == v85)
    v67 = 0;
  else
    v67 = -127;
  if (result.n128_f32[0] > v85)
    v67 = 1;
  if (result.n128_f32[0] >= v85)
  {
LABEL_141:
    if (v67 < 1)
      return result;
    goto LABEL_142;
  }
  return result;
}

BOOL sub_2236C7DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  _BOOL4 v6;
  unsigned int v7;
  uint64_t v8;
  __int128 *v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  float v21;
  float v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  float v37;
  unsigned int v38;
  _BOOL4 v39;
  unsigned int v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  float v46;
  void *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  BOOL v61;
  float v62;
  char v63;
  void *v64;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  _BYTE v74[28];
  __int128 v75;
  __int128 v76;
  int v77;

  v2 = a2;
  v4 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v5 = *(_DWORD *)(a2 - 40);
      v6 = ((v5 >> 3) & 1) == 0;
      if ((v5 & 0x10) != 0)
        v6 = 0;
      if ((v5 & 2) != 0)
        v7 = 2;
      else
        v7 = v6;
      v9 = (__int128 *)(a2 - 56);
      v8 = *(_QWORD *)(a2 - 56);
      v10 = *(_DWORD *)(a1 + 40);
      v11 = ((v10 >> 3) & 1) == 0;
      if ((v10 & 0x10) != 0)
        v11 = 0;
      v12 = (__int128 *)(a1 + 24);
      v13 = *(_QWORD *)(a1 + 24);
      if ((*(_DWORD *)(a1 + 40) & 2) != 0)
        v11 = 2;
      v15 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v16 = v7 == v11;
      if (v7 < v11)
        v17 = -1;
      else
        v17 = 1;
      if (!v16)
        goto LABEL_30;
      if (v8 < v13)
        return 1;
      if (v13 >= v8)
      {
        v18 = (uint64_t)(*(_QWORD *)(a2 - 72) - *(_QWORD *)(a2 - 80)) >> 5;
        v19 = (v14 - v15) >> 5;
        v20 = v18 == v19;
        if (v18 < v19)
          v17 = -1;
        else
          v17 = 1;
        if (v20)
        {
          v21 = *(float *)(a2 - 8);
          v22 = *(float *)(a1 + 72);
          v23 = v21 == v22 ? 0 : -127;
          v17 = v21 > v22 ? 1 : v23;
          if (v21 < v22)
            return 1;
        }
LABEL_30:
        if (v17 < 1)
          return 1;
      }
      v24 = (_QWORD *)(a2 - 80);
      v25 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v73 = *v12;
      v75 = *(_OWORD *)(a1 + 40);
      v76 = *(_OWORD *)(a1 + 56);
      v77 = *(_DWORD *)(a1 + 72);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 64);
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      LODWORD(v24) = *(_DWORD *)(a2 - 8);
      v27 = *(_OWORD *)(a2 - 40);
      v26 = *(_OWORD *)(a2 - 24);
      *v12 = *v9;
      *(_OWORD *)(a1 + 40) = v27;
      *(_OWORD *)(a1 + 56) = v26;
      *(_DWORD *)(a1 + 72) = (_DWORD)v24;
      v28 = *(void **)(a2 - 80);
      if (v28)
      {
        *(_QWORD *)(a2 - 72) = v28;
        operator delete(v28);
      }
      *(_QWORD *)(v2 - 80) = v15;
      *(_QWORD *)(v2 - 72) = v14;
      *(_QWORD *)(v2 - 64) = v25;
      *v9 = v73;
      *(_OWORD *)(v2 - 40) = v75;
      *(_OWORD *)(v2 - 24) = v76;
      v4 = 1;
      *(_DWORD *)(v2 - 8) = v77;
      return v4;
    case 3uLL:
      sub_2236C77A0((uint64_t *)a1, a1 + 80, a2 - 80);
      return v4;
    case 4uLL:
      sub_2236C8294(a1, a1 + 80, a1 + 160, a2 - 80);
      return v4;
    case 5uLL:
      sub_2236C720C(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return v4;
    default:
      v29 = a1 + 160;
      sub_2236C77A0((uint64_t *)a1, a1 + 80, a1 + 160);
      v30 = a1 + 240;
      v4 = 1;
      if (a1 + 240 == v2)
        return v4;
      v31 = 0;
      v32 = 0;
      v66 = v2;
LABEL_39:
      v33 = *(_DWORD *)(v30 + 40);
      v34 = ((v33 >> 3) & 1) == 0;
      v35 = (v33 & 0x10) == 0 && ((v33 >> 3) & 1) == 0;
      if ((v33 & 2) != 0)
        v35 = 2;
      v72 = (uint64_t)(*(_QWORD *)(v30 + 8) - *(_QWORD *)v30) >> 5;
      v36 = *(_QWORD *)(v30 + 24);
      v37 = *(float *)(v30 + 72);
      v38 = *(_DWORD *)(v29 + 40);
      v39 = ((v38 >> 3) & 1) == 0;
      if ((v38 & 0x10) != 0)
        v39 = 0;
      if ((v38 & 2) != 0)
        v40 = 2;
      else
        v40 = v39;
      v41 = v35 == v40;
      if (v35 < v40)
        v42 = -1;
      else
        v42 = 1;
      if (!v41)
        goto LABEL_67;
      v43 = *(_QWORD *)(v29 + 24);
      if (v36 < v43)
        goto LABEL_38;
      if (v43 >= v36)
      {
        v44 = (uint64_t)(*(_QWORD *)(v29 + 8) - *(_QWORD *)v29) >> 5;
        v45 = v72 == v44;
        if (v72 < v44)
          v42 = -1;
        else
          v42 = 1;
        if (v45)
        {
          v46 = *(float *)(v29 + 72);
          if (v37 == v46)
            v42 = 0;
          else
            v42 = -127;
          if (v37 > v46)
            v42 = 1;
          if (v37 < v46)
            goto LABEL_38;
        }
LABEL_67:
        if (v42 < 1)
          goto LABEL_38;
      }
      v70 = *(_QWORD *)v30;
      v71 = *(_QWORD *)(v30 + 8);
      v67 = v32;
      v47 = 0;
      v48 = *(_QWORD *)(v30 + 16);
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      v68 = *(_QWORD *)(v30 + 32);
      v69 = v48;
      *(_OWORD *)v74 = *(_OWORD *)(v30 + 44);
      *(_OWORD *)&v74[12] = *(_OWORD *)(v30 + 56);
      if ((v33 & 0x10) != 0)
        v34 = 0;
      if ((v33 & 2) != 0)
        v49 = 2;
      else
        v49 = v34;
      v50 = v31;
      break;
  }
  while (1)
  {
    v51 = a1 + v50;
    if (v47)
    {
      *(_QWORD *)(v51 + 248) = v47;
      operator delete(v47);
      *(_QWORD *)(v51 + 248) = 0;
      *(_QWORD *)(v51 + 256) = 0;
    }
    *(_OWORD *)(v51 + 240) = *(_OWORD *)(v51 + 160);
    *(_QWORD *)(v51 + 256) = *(_QWORD *)(v51 + 176);
    *(_QWORD *)(v51 + 160) = 0;
    *(_QWORD *)(v51 + 168) = 0;
    *(_QWORD *)(v51 + 176) = 0;
    v52 = *(_OWORD *)(v51 + 200);
    *(_OWORD *)(v51 + 264) = *(_OWORD *)(v51 + 184);
    *(_OWORD *)(v51 + 280) = v52;
    *(_OWORD *)(v51 + 296) = *(_OWORD *)(v51 + 216);
    *(_DWORD *)(v51 + 312) = *(_DWORD *)(v51 + 232);
    if (v50 == -160)
      break;
    v53 = a1 + v50;
    v54 = *(_DWORD *)(a1 + v50 + 120);
    v55 = ((v54 >> 3) & 1) == 0;
    if ((v54 & 0x10) != 0)
      v55 = 0;
    if ((v54 & 2) != 0)
      v56 = 2;
    else
      v56 = v55;
    v57 = v49 == v56;
    if (v49 < v56)
      v58 = -1;
    else
      v58 = 1;
    if (!v57)
      goto LABEL_74;
    v59 = *(_QWORD *)(v53 + 104);
    if (v36 < v59)
      goto LABEL_105;
    if (v59 >= v36)
    {
      v60 = (uint64_t)(*(_QWORD *)(v53 + 88) - *(_QWORD *)(v53 + 80)) >> 5;
      v61 = v72 == v60;
      if (v72 < v60)
        v58 = -1;
      else
        v58 = 1;
      if (v61)
      {
        v62 = *(float *)(v53 + 152);
        v63 = v37 == v62 ? 0 : -127;
        v58 = v37 > v62 ? 1 : v63;
        if (v37 < v62)
        {
          v29 = a1 + v50 + 160;
          goto LABEL_105;
        }
      }
LABEL_74:
      if (v58 <= 0)
        goto LABEL_105;
    }
    v29 -= 80;
    v47 = *(void **)(v51 + 160);
    v50 -= 80;
  }
  v29 = a1;
LABEL_105:
  v2 = v66;
  v64 = *(void **)v29;
  if (*(_QWORD *)v29)
  {
    *(_QWORD *)(v29 + 8) = v64;
    operator delete(v64);
  }
  *(_QWORD *)v29 = v70;
  *(_QWORD *)(v29 + 8) = v71;
  *(_QWORD *)(v29 + 16) = v69;
  *(_QWORD *)(a1 + v50 + 184) = v36;
  *(_QWORD *)(v29 + 32) = v68;
  *(_DWORD *)(v29 + 40) = v33;
  *(_OWORD *)(v29 + 44) = *(_OWORD *)v74;
  *(_OWORD *)(v29 + 56) = *(_OWORD *)&v74[12];
  *(float *)(v29 + 72) = v37;
  v32 = v67 + 1;
  if (v67 != 7)
  {
LABEL_38:
    v29 = v30;
    v31 += 80;
    v30 += 80;
    if (v30 == v2)
      return 1;
    goto LABEL_39;
  }
  return v30 + 80 == v66;
}

__n128 sub_2236C8294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  unsigned int v9;
  _BOOL4 v10;
  unsigned int v11;
  uint64_t v12;
  __int128 *v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;
  __int128 *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  BOOL v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  float v26;
  char v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  void *v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  float v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  float v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  int v82;
  int v83;
  int v84;

  result.n128_u64[0] = sub_2236C77A0((uint64_t *)a1, a2, a3).n128_u64[0];
  v9 = *(_DWORD *)(a4 + 40);
  v10 = ((v9 >> 3) & 1) == 0;
  if ((v9 & 0x10) != 0)
    v10 = 0;
  if ((v9 & 2) != 0)
    v11 = 2;
  else
    v11 = v10;
  v13 = (__int128 *)(a4 + 24);
  v12 = *(_QWORD *)(a4 + 24);
  v14 = *(_DWORD *)(a3 + 40);
  v15 = (v14 & 0x10) == 0 && ((v14 >> 3) & 1) == 0;
  v17 = (__int128 *)(a3 + 24);
  v16 = *(_QWORD *)(a3 + 24);
  if ((v14 & 2) != 0)
    v18 = 2;
  else
    v18 = v15;
  v20 = *(void **)a3;
  v19 = *(_QWORD *)(a3 + 8);
  v21 = v11 == v18;
  if (v11 < v18)
    v22 = -1;
  else
    v22 = 1;
  if (v21)
  {
    if (v12 < v16)
      return result;
    if (v16 < v12)
      goto LABEL_32;
    v23 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 5;
    v24 = (v19 - (uint64_t)v20) >> 5;
    v25 = v23 == v24;
    if (v23 < v24)
      v22 = -1;
    else
      v22 = 1;
    if (v25)
    {
      result.n128_u32[0] = *(_DWORD *)(a4 + 72);
      v26 = *(float *)(a3 + 72);
      v27 = result.n128_f32[0] == v26 ? 0 : -127;
      v22 = result.n128_f32[0] > v26 ? 1 : v27;
      if (result.n128_f32[0] < v26)
        return result;
    }
  }
  if (v22 < 1)
    return result;
LABEL_32:
  v28 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v73 = *v17;
  v76 = *(_OWORD *)(a3 + 40);
  v79 = *(__n128 *)(a3 + 56);
  v82 = *(_DWORD *)(a3 + 72);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v29 = *(_DWORD *)(a4 + 72);
  v31 = *(_OWORD *)(a4 + 40);
  v30 = *(_OWORD *)(a4 + 56);
  *v17 = *v13;
  *(_OWORD *)(a3 + 40) = v31;
  *(_OWORD *)(a3 + 56) = v30;
  *(_DWORD *)(a3 + 72) = v29;
  v32 = *(void **)a4;
  if (*(_QWORD *)a4)
  {
    *(_QWORD *)(a4 + 8) = v32;
    operator delete(v32);
  }
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v19;
  *(_QWORD *)(a4 + 16) = v28;
  *v13 = v73;
  *(_OWORD *)(a4 + 40) = v76;
  result = v79;
  *(__n128 *)(a4 + 56) = v79;
  *(_DWORD *)(a4 + 72) = v82;
  v33 = *(_DWORD *)(a3 + 40);
  if ((v33 & 2) != 0)
  {
    v34 = 2;
    v35 = *(_DWORD *)(a2 + 40);
    if ((v35 & 2) == 0)
      goto LABEL_39;
  }
  else
  {
    if ((v33 & 0x10) == 0)
    {
      v34 = ((v33 >> 3) & 1) == 0;
      v35 = *(_DWORD *)(a2 + 40);
      if ((v35 & 2) != 0)
        goto LABEL_42;
LABEL_39:
      v36 = (v35 & 0x10) == 0 && ((v35 >> 3) & 1) == 0;
      goto LABEL_44;
    }
    v34 = 0;
    v35 = *(_DWORD *)(a2 + 40);
    if ((v35 & 2) == 0)
      goto LABEL_39;
  }
LABEL_42:
  v36 = 2;
LABEL_44:
  v38 = (__int128 *)(a2 + 24);
  v37 = *(_QWORD *)(a2 + 24);
  v40 = *(void **)a2;
  v39 = *(_QWORD *)(a2 + 8);
  v41 = v34 == v36;
  if (v34 < v36)
    v42 = -1;
  else
    v42 = 1;
  if (v41)
  {
    v43 = *(_QWORD *)(a3 + 24);
    if (v43 < v37)
      return result;
    if (v37 < v43)
      goto LABEL_63;
    v44 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5;
    v45 = (v39 - (uint64_t)v40) >> 5;
    v46 = v44 == v45;
    if (v44 < v45)
      v42 = -1;
    else
      v42 = 1;
    if (v46)
    {
      result.n128_u32[0] = *(_DWORD *)(a3 + 72);
      v47 = *(float *)(a2 + 72);
      if (result.n128_f32[0] == v47)
        v42 = 0;
      else
        v42 = -127;
      if (result.n128_f32[0] > v47)
        v42 = 1;
      if (result.n128_f32[0] < v47)
        return result;
    }
  }
  if (v42 < 1)
    return result;
LABEL_63:
  v48 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v74 = *v38;
  v77 = *(_OWORD *)(a2 + 40);
  v80 = *(__n128 *)(a2 + 56);
  v83 = *(_DWORD *)(a2 + 72);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v49 = *(_DWORD *)(a3 + 72);
  v51 = *(_OWORD *)(a3 + 40);
  v50 = *(_OWORD *)(a3 + 56);
  *v38 = *v17;
  *(_OWORD *)(a2 + 40) = v51;
  *(_OWORD *)(a2 + 56) = v50;
  *(_DWORD *)(a2 + 72) = v49;
  v52 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v52;
    operator delete(v52);
  }
  *(_QWORD *)a3 = v40;
  *(_QWORD *)(a3 + 8) = v39;
  *(_QWORD *)(a3 + 16) = v48;
  *v17 = v74;
  *(_OWORD *)(a3 + 40) = v77;
  result = v80;
  *(__n128 *)(a3 + 56) = v80;
  *(_DWORD *)(a3 + 72) = v83;
  v53 = *(_DWORD *)(a2 + 40);
  if ((v53 & 2) != 0)
  {
    v54 = 2;
    v55 = *(_DWORD *)(a1 + 40);
    if ((v55 & 2) == 0)
      goto LABEL_70;
    goto LABEL_73;
  }
  if ((v53 & 0x10) != 0)
  {
    v54 = 0;
    v55 = *(_DWORD *)(a1 + 40);
    if ((v55 & 2) == 0)
      goto LABEL_70;
LABEL_73:
    v56 = 2;
    goto LABEL_75;
  }
  v54 = ((v53 >> 3) & 1) == 0;
  v55 = *(_DWORD *)(a1 + 40);
  if ((v55 & 2) != 0)
    goto LABEL_73;
LABEL_70:
  v56 = (v55 & 0x10) == 0 && ((v55 >> 3) & 1) == 0;
LABEL_75:
  v57 = (__int128 *)(a1 + 24);
  v58 = *(_QWORD *)(a1 + 24);
  v60 = *(_QWORD *)a1;
  v59 = *(_QWORD *)(a1 + 8);
  v61 = v54 == v56;
  if (v54 < v56)
    v62 = -1;
  else
    v62 = 1;
  if (!v61)
    goto LABEL_93;
  v63 = *(_QWORD *)(a2 + 24);
  if (v63 < v58)
    return result;
  if (v58 < v63)
  {
LABEL_94:
    v68 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v75 = *v57;
    v78 = *(_OWORD *)(a1 + 40);
    v81 = *(__n128 *)(a1 + 56);
    v84 = *(_DWORD *)(a1 + 72);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v69 = *(_DWORD *)(a2 + 72);
    v71 = *(_OWORD *)(a2 + 40);
    v70 = *(_OWORD *)(a2 + 56);
    *v57 = *v38;
    *(_OWORD *)(a1 + 40) = v71;
    *(_OWORD *)(a1 + 56) = v70;
    *(_DWORD *)(a1 + 72) = v69;
    v72 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v72;
      operator delete(v72);
    }
    *(_QWORD *)a2 = v60;
    *(_QWORD *)(a2 + 8) = v59;
    *(_QWORD *)(a2 + 16) = v68;
    *v38 = v75;
    *(_OWORD *)(a2 + 40) = v78;
    result = v81;
    *(__n128 *)(a2 + 56) = v81;
    *(_DWORD *)(a2 + 72) = v84;
    return result;
  }
  v64 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  v65 = (v59 - v60) >> 5;
  v66 = v64 == v65;
  v62 = v64 < v65 ? -1 : 1;
  if (!v66)
    goto LABEL_93;
  result.n128_u32[0] = *(_DWORD *)(a2 + 72);
  v67 = *(float *)(a1 + 72);
  if (result.n128_f32[0] == v67)
    v62 = 0;
  else
    v62 = -127;
  if (result.n128_f32[0] > v67)
    v62 = 1;
  if (result.n128_f32[0] >= v67)
  {
LABEL_93:
    if (v62 < 1)
      return result;
    goto LABEL_94;
  }
  return result;
}

void sub_2236C86D0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  if (a2)
  {
    v3 = *(void **)(a2 + 264);
    if (v3)
    {
      *(_QWORD *)(a2 + 272) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a2 + 240);
    if (v4)
    {
      *(_QWORD *)(a2 + 248) = v4;
      operator delete(v4);
    }
    if (*(_BYTE *)(a2 + 112))
    {
      v5 = *(_QWORD *)(a2 + 88);
      if (v5)
      {
        v6 = *(_QWORD *)(a2 + 96);
        v7 = *(void **)(a2 + 88);
        if (v6 != v5)
        {
          v8 = *(_QWORD *)(a2 + 96);
          do
          {
            v10 = *(void **)(v8 - 24);
            v8 -= 24;
            v9 = v10;
            if (v10)
            {
              *(_QWORD *)(v6 - 16) = v9;
              operator delete(v9);
            }
            v6 = v8;
          }
          while (v8 != v5);
          v7 = *(void **)(a2 + 88);
        }
        *(_QWORD *)(a2 + 96) = v5;
        operator delete(v7);
      }
    }
    if (*(_BYTE *)(a2 + 80))
    {
      v11 = *(void **)(a2 + 56);
      if (v11)
      {
        *(_QWORD *)(a2 + 64) = v11;
        operator delete(v11);
      }
    }
    JUMPOUT(0x227684CE8);
  }
}

unint64_t sub_2236C879C(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24EC20780;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_2236C891C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2236C8938@<X0>(uint64_t a1@<X8>)
{
  char *v2;
  int v4;
  char v5[24];
  int v6;
  char v7[24];
  int v8;
  char v9[24];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2245B8D00;
  strcpy(v2, "EraseSplitComponentReason");
  v4 = 0;
  v5[23] = 17;
  strcpy(v5, "CreateGlobalPlane");
  v6 = 1;
  v7[23] = 14;
  strcpy(v7, "EraseAllRemove");
  v8 = 2;
  v9[23] = 15;
  strcpy(v9, "EraseNotObserve");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  sub_2236C8B00((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), 0, (uint64_t)&v4);
  sub_2236C8B00((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), 1, (uint64_t)&v6);
  return sub_2236C8B00((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), 2, (uint64_t)&v8);
}

void sub_2236C8A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2236C8D34(*(char **)(v1 + 32));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2236C8AB8(uint64_t a1)
{
  sub_2236C8D34(*(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_2236C8B00(uint64_t *result, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;

  v5 = a2;
  v6 = result;
  v7 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v8 = *((_DWORD *)a2 + 8), v8 > a3))
  {
    v9 = *a2;
    if ((uint64_t *)*result == a2)
    {
      v11 = a2;
LABEL_16:
      if (v9)
        v17 = v11;
      else
        v17 = a2;
      if (v9)
        v13 = v11 + 1;
      else
        v13 = a2;
      if (*v13)
        return result;
      v5 = v17;
LABEL_37:
      v22 = (char *)operator new(0x40uLL);
      *((_DWORD *)v22 + 8) = *(_DWORD *)a4;
      v23 = v22 + 40;
      if (*(char *)(a4 + 31) < 0)
      {
        sub_223197FA4(v23, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
      }
      else
      {
        *(_OWORD *)v23 = *(_OWORD *)(a4 + 8);
        *((_QWORD *)v22 + 7) = *(_QWORD *)(a4 + 24);
      }
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = v5;
      *v13 = (uint64_t)v22;
      v25 = *(_QWORD *)*v6;
      if (v25)
      {
        *v6 = v25;
        v22 = (char *)*v13;
      }
      result = sub_2231A9A8C((uint64_t *)v6[1], (uint64_t *)v22);
      ++v6[2];
      return result;
    }
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (uint64_t *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    if (*((_DWORD *)v11 + 8) < a3)
      goto LABEL_16;
    v18 = *v7;
    v13 = result + 1;
    v5 = result + 1;
    if (!*v7)
      goto LABEL_37;
    while (1)
    {
      while (1)
      {
        v5 = v18;
        v19 = *((_DWORD *)v18 + 8);
        if (v19 <= a3)
          break;
        v18 = (uint64_t *)*v18;
        v13 = v5;
        if (!*v5)
          goto LABEL_37;
      }
      if (v19 >= a3)
        break;
      v18 = (uint64_t *)v18[1];
      if (!v18)
        goto LABEL_30;
    }
  }
  else
  {
    if (v8 >= a3)
      return result;
    v13 = a2 + 1;
    v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
        v5 = v13;
        v14 = v13;
      }
      while (v12);
    }
    else
    {
      v14 = a2;
      do
      {
        v20 = v14;
        v14 = (uint64_t *)v14[2];
      }
      while ((uint64_t *)*v14 != v20);
    }
    if (v14 == (uint64_t *)v7)
      goto LABEL_37;
    if (*((_DWORD *)v14 + 8) > a3)
      goto LABEL_37;
    v21 = *v7;
    v13 = result + 1;
    v5 = result + 1;
    if (!*v7)
      goto LABEL_37;
    while (1)
    {
      while (1)
      {
        v5 = v21;
        v24 = *((_DWORD *)v21 + 8);
        if (v24 <= a3)
          break;
        v21 = (uint64_t *)*v21;
        v13 = v5;
        if (!*v5)
          goto LABEL_37;
      }
      if (v24 >= a3)
        break;
      v21 = (uint64_t *)v21[1];
      if (!v21)
      {
LABEL_30:
        v13 = v5 + 1;
        goto LABEL_37;
      }
    }
  }
  return result;
}

void sub_2236C8D20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2236C8D34(char *a1)
{
  if (a1)
  {
    sub_2236C8D34(*(_QWORD *)a1);
    sub_2236C8D34(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

void sub_2236C8D8C(std::string::size_type a1, int *a2)
{
  uint64_t v4;
  int v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  __int128 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  size_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  void *__p[2];
  unint64_t v38;
  uint64_t v39;
  std::string v40;
  void **v41;
  void **v42;
  std::string v43;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v39 = v4;
  v5 = *a2;
  v6 = atomic_load((unsigned __int8 *)&qword_2540CBFF0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFF0))
  {
    sub_2236C8938((uint64_t)&unk_2540CC018);
    __cxa_atexit((void (*)(void *))sub_2236C8AB8, &unk_2540CC018, &dword_22314D000);
    __cxa_guard_release(&qword_2540CBFF0);
  }
  v7 = qword_2540CC038;
  if (!qword_2540CC038)
    goto LABEL_12;
  v8 = &qword_2540CC038;
  do
  {
    v9 = *(_DWORD *)(v7 + 32);
    v10 = v9 < v5;
    if (v9 >= v5)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (!v10)
      v8 = (uint64_t *)v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 != &qword_2540CC038 && *((_DWORD *)v8 + 8) <= v5)
  {
    v32 = atomic_load((unsigned __int8 *)&qword_2540CBFF0);
    if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFF0))
    {
      sub_2236C8938((uint64_t)&unk_2540CC018);
      __cxa_atexit((void (*)(void *))sub_2236C8AB8, &unk_2540CC018, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBFF0);
    }
    v14 = (__int128 *)(v8 + 5);
  }
  else
  {
LABEL_12:
    v12 = atomic_load((unsigned __int8 *)&qword_2540CBFF0);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFF0))
    {
      sub_2236C8938((uint64_t)&unk_2540CC018);
      __cxa_atexit((void (*)(void *))sub_2236C8AB8, &unk_2540CC018, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBFF0);
    }
    v13 = atomic_load((unsigned __int8 *)&qword_2540CBFF8);
    v14 = &xmmword_2540CC000;
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_2540CBFF8))
    {
      std::to_string(&v43, v5);
      v33 = std::string::insert(&v43, 0, "{unnamed literal '", 0x12uLL);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v40, "'}", 2uLL);
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      unk_2540CC010 = *((_QWORD *)&v35->__r_.__value_.__l + 2);
      xmmword_2540CC000 = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      v14 = &xmmword_2540CC000;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CC000, &dword_22314D000);
      __cxa_guard_release(&qword_2540CBFF8);
    }
  }
  v15 = *((char *)v14 + 23);
  if (v15 >= 0)
    v16 = (uint64_t)v14;
  else
    v16 = *(_QWORD *)v14;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)v14 + 23);
  else
    v17 = *((_QWORD *)v14 + 1);
  sub_2231813E8((_QWORD *)(v4 + 16), v16, v17);
  v18 = v39;
  v19 = *(_DWORD *)(v39 + 120);
  if ((v19 & 0x10) != 0)
  {
    v22 = *(_QWORD *)(v39 + 112);
    v23 = *(_QWORD *)(v39 + 72);
    if (v22 < v23)
    {
      *(_QWORD *)(v39 + 112) = v23;
      v22 = v23;
    }
    v24 = *(const void **)(v18 + 64);
    v20 = v22 - (_QWORD)v24;
    if (v22 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  else
  {
    if ((v19 & 8) == 0)
    {
      v20 = 0;
      HIBYTE(v38) = 0;
      v21 = __p;
      goto LABEL_33;
    }
    v24 = *(const void **)(v39 + 40);
    v20 = *(_QWORD *)(v39 + 56) - (_QWORD)v24;
    if (v20 >= 0x7FFFFFFFFFFFFFF8)
LABEL_41:
      sub_22316DBC0();
  }
  if (v20 >= 0x17)
  {
    v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v25 = v20 | 7;
    v26 = v25 + 1;
    v21 = operator new(v25 + 1);
    __p[1] = (void *)v20;
    v38 = v26 | 0x8000000000000000;
    __p[0] = v21;
    goto LABEL_32;
  }
  HIBYTE(v38) = v20;
  v21 = __p;
  if (v20)
LABEL_32:
    memmove(v21, v24, v20);
LABEL_33:
  *((_BYTE *)v21 + v20) = 0;
  v27 = v39;
  if (v39)
  {
    v28 = MEMORY[0x24BEDB7F0];
    v29 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v39 = *MEMORY[0x24BEDB7F0];
    v30 = *(_QWORD *)(v28 + 72);
    *(_QWORD *)(v27 + *(_QWORD *)(v29 - 24)) = *(_QWORD *)(v28 + 64);
    *(_QWORD *)(v27 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v27 + 16) = v30;
    if (*(char *)(v27 + 111) < 0)
      operator delete(*(void **)(v27 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v27 + 128);
    MEMORY[0x227684CE8](v27, 0x10B2C40EED050F3);
  }
  v40.__r_.__value_.__r.__words[0] = a1;
  v40.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v40.__r_.__value_.__r.__words[2] = a1;
  v41 = __p;
  v42 = __p;
  v31 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v31 == -1)
    sub_22316DD70();
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  ((void (*)(std::string *, std::string::size_type))off_24EC57560[v31])(&v43, a1);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
}

void sub_2236C9210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __cxa_guard_abort(&qword_2540CBFF0);
  sub_22456E764(&a12);
  _Unwind_Resume(a1);
}

void sub_2236C9288(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2236C92AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2236C92C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2236C92DC(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_2236C9334(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC575B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2236C9344(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC575B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2236C9374(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 32));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_5;
}

void sub_2236C93C4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x227684CE8);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

void sub_2236C9420(_QWORD **a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  __int128 **v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  __int128 **v14;
  __int128 *v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  unint64_t v20;
  const char *v21;
  int v22;
  uint64_t v23;
  __int128 *v24;
  __int128 **v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t **v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  const char **v99;
  unint64_t **v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  __int128 *v130;
  uint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __n128 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  unint64_t **v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  __int128 *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  void **v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  unint64_t *v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  __n128 *v271;
  unsigned __int8 *v272;
  char **v273;
  char **i;
  unsigned int v275;
  char *v276;
  unsigned int v277;
  BOOL v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  char *v282;
  uint64_t v283;
  __n128 *j;
  unsigned __int8 *v285;
  char **v286;
  char **v287;
  unsigned int v288;
  char *v289;
  unsigned int v290;
  BOOL v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  char *v295;
  _BYTE *v296;
  uint64_t v297;
  _BYTE *v298;
  uint64_t v299;
  _BYTE *v300;
  int v301;
  uint64_t v302;
  int v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  char *v312;
  BOOL v313;
  char *v314;
  char *v315;
  uint64_t *k;
  uint64_t *v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  __int128 *v321;
  __int128 *v322;
  uint64_t *v323;
  __int128 v324;
  __int128 v325;
  unsigned __int8 v326;
  int v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v331;
  const char *v332;
  size_t v333;
  unsigned __int8 v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v343;
  unsigned __int8 v344;
  const char *v345;
  size_t v346;
  _BYTE *v347;
  uint64_t v348;
  uint64_t v349;
  _BYTE *v350;
  NSObject *v351;
  uint64_t v352;
  uint64_t v353;
  size_t v354;
  std::__shared_weak_count_vtbl *v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  char *v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  void *v365;
  unint64_t *v366;
  unint64_t v367;
  char *v368;
  char *v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  const char *v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  uint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  uint64_t *v395;
  void (**v396)(_QWORD);
  _QWORD *v397;
  uint64_t v398;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v399;
  int v400;
  const char *v401;
  int v402;
  char *v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  __int128 **v420;
  void *v421;
  __int128 **v422;
  __int128 *v423;
  __int128 *v424;
  __int128 **v426;
  uint64_t v427;
  uint64_t v428;
  size_t v429;
  const char *v430;
  __int128 **v431;
  const char *v432;
  __int128 *v433;
  _BYTE *v434;
  uint64_t v435;
  __int128 *v437;
  char *v438;
  void *v440;
  __int128 **v441;
  __int128 *v442;
  _QWORD v443[3];
  _QWORD *v444;
  const char *v445;
  _QWORD v446[3];
  _QWORD *v447;
  __int128 v448;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v450;
  const char *v451;
  int v452;
  char *v453;
  void (**v454)(_QWORD);
  std::__shared_weak_count *v455;
  unint64_t *v456;
  uint64_t v457;
  _QWORD v458[3];
  _QWORD *v459;
  char *v460;
  _QWORD v461[3];
  _QWORD *v462;
  const char *v463;
  _QWORD v464[3];
  _QWORD *v465;
  void *v466;
  _QWORD v467[3];
  _QWORD *v468;
  const char *v469;
  _QWORD v470[3];
  _QWORD *v471;
  char *v472;
  _QWORD v473[3];
  _QWORD *v474;
  const char *v475;
  _QWORD v476[3];
  _QWORD *v477;
  void *v478;
  _QWORD v479[3];
  _QWORD *v480;
  const char *v481;
  _QWORD v482[3];
  _QWORD *v483;
  char *v484;
  _QWORD v485[3];
  _QWORD *v486;
  char *v487;
  _QWORD v488[3];
  _QWORD *v489;
  void *v490;
  _QWORD v491[3];
  _QWORD *v492;
  const char *v493;
  _QWORD v494[3];
  _QWORD *v495;
  char *v496;
  _QWORD v497[3];
  _QWORD *v498;
  const char *v499;
  _QWORD v500[3];
  _QWORD *v501;
  void *v502;
  _QWORD v503[3];
  _QWORD *v504;
  const char *v505;
  _QWORD v506[3];
  _QWORD *v507;
  char *v508;
  _QWORD v509[3];
  _QWORD *v510;
  const char *v511;
  _QWORD v512[3];
  _QWORD *v513;
  void *v514;
  _QWORD v515[3];
  _QWORD *v516;
  const char *v517;
  _QWORD v518[3];
  _QWORD *v519;
  char *v520;
  _QWORD v521[3];
  _QWORD *v522;
  char *v523;
  _BYTE v524[24];
  _BYTE *v525;
  char *v526;
  _BYTE v527[24];
  _BYTE *v528;
  char *v529;
  _BYTE v530[24];
  _BYTE *v531;
  char *v532;
  _BYTE v533[24];
  _BYTE *v534;
  const char *v535;
  _QWORD v536[3];
  _QWORD *v537;
  void *v538;
  _QWORD v539[3];
  _QWORD *v540;
  const char **v541;
  _QWORD v542[3];
  _QWORD *v543;
  char *v544;
  _QWORD v545[3];
  _QWORD *v546;
  _BYTE object[24];
  _BYTE v548[24];
  void *v549;
  unint64_t v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  uint64_t v553;
  _QWORD v554[3];
  _QWORD v555[2];
  char *v556;
  _QWORD v557[3];
  _QWORD v558[2];
  const char *v559;
  _QWORD v560[3];
  _QWORD v561[2];
  void *v562;
  _QWORD v563[3];
  _QWORD *v564;
  __int128 v565;
  __int128 v566;
  _QWORD v567[2];
  char *v568;
  _QWORD v569[3];
  _QWORD *v570;
  const char *v571;
  _QWORD v572[3];
  _QWORD v573[3];
  _BYTE v574[24];
  _BYTE *v575;
  char __s[8];
  _QWORD v577[3];
  _QWORD v578[3];
  _QWORD v579[3];
  _QWORD *v580;
  uint64_t v581;
  std::__shared_weak_count_vtbl *v582;
  std::__shared_weak_count *v583;
  char *v584;
  _QWORD v585[2];
  char *v586;
  _QWORD v587[3];
  _QWORD *v588;
  char *v589;
  __int128 v590;
  __int128 v591;
  char *v592;
  void *v593;
  _QWORD v594[3];
  _QWORD v595[4];

  v595[1] = *MEMORY[0x24BDAC8D0];
  sub_22370D35C(*a3, &v440);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = a5 + 32;
  *(_QWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 64) = 0;
  v6 = (__int128 **)v440;
  v426 = v441;
  if (v440 != v441)
  {
    v431 = (__int128 **)v440;
    v428 = 0;
    v427 = a5;
    while (1)
    {
      sub_2236CE554(__s);
      if (**(int **)(*(_QWORD *)__s + 56) > 2)
        goto LABEL_94;
      v7 = *(unsigned __int8 *)(*(_QWORD *)__s + 72);
      v8 = sub_22322F254(*(uint64_t *)__s, "OSLogSurrogateAppender", 1, 0);
      v9 = v8;
      v10 = !v7 && v8 == 0;
      if (v10)
        goto LABEL_94;
      *(_QWORD *)&v448 = __s;
      *((std::chrono::steady_clock::time_point *)&v448 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v450 = 2;
      v451 = "unknown file";
      v452 = 89;
      v453 = "unknown function";
      v454 = 0;
      v455 = 0;
      v11 = *(_QWORD *)v448;
      v12 = (const char *)(*(_QWORD *)v448 + 16);
      v432 = v12;
      if (*(char *)(*(_QWORD *)v448 + 39) < 0)
      {
        v12 = *(const char **)(v11 + 16);
        v13 = *(_QWORD *)(v11 + 24);
      }
      else
      {
        v13 = *(unsigned __int8 *)(*(_QWORD *)v448 + 39);
      }
      v14 = v441;
      v434 = v440;
      v15 = *v431;
      v437 = v431[1];
      v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v589);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v589, &xmmword_255788F40);
        if ((_BYTE)v591 && SHIBYTE(v590) < 0)
          operator delete(v589);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v17 = (const char *)&xmmword_255788F40;
      else
        v17 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v18 = byte_255788F57;
      else
        v18 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v17, v12);
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v18 >= 0x17)
        break;
      v548[7] = v18;
      v19 = &object[8];
      if (v18)
        goto LABEL_26;
LABEL_27:
      v19[v18] = 0;
      v548[8] = 1;
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v13 >= 0x17)
      {
        v30 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v30 = v13 | 7;
        v31 = v30 + 1;
        v28 = operator new(v30 + 1);
        v550 = v31 | 0x8000000000000000;
        *(_QWORD *)&v548[16] = v28;
        v549 = (void *)v13;
      }
      else
      {
        HIBYTE(v550) = v13;
        v28 = &v548[16];
        if (!v13)
        {
          v548[16] = 0;
          LOBYTE(v551) = 1;
          v29 = *(NSObject **)object;
          if ((SHIBYTE(v550) & 0x80000000) == 0)
            goto LABEL_31;
          goto LABEL_37;
        }
      }
      memmove(v28, v12, v13);
      v28[v13] = 0;
      LOBYTE(v551) = 1;
      v29 = *(NSObject **)object;
      if ((SHIBYTE(v550) & 0x80000000) == 0)
      {
LABEL_31:
        if (v548[8])
          goto LABEL_38;
        goto LABEL_40;
      }
LABEL_37:
      operator delete(*(void **)&v548[16]);
      if (v548[8])
      {
LABEL_38:
        if ((v548[7] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
      }
LABEL_40:
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      v32 = v428 + 1;
      v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - v434) >> 3);
      if (v9 && *(_QWORD *)(v9 + 24))
      {
        v34 = _os_log_pack_size();
        v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
        v36 = (std::__shared_weak_count *)operator new();
        v37 = v36;
        v36->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v36->__shared_weak_owners_ = 0;
        v36[1].__vftable = v35;
        *(_QWORD *)object = v35;
        *(_QWORD *)&object[8] = v35;
        *(_QWORD *)&object[16] = v36;
        do
          v39 = __ldxr(p_shared_owners);
        while (__stxr(v39 + 1, p_shared_owners));
        memset(v548, 0, sizeof(v548));
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v37);
        }
        v41 = *(_QWORD *)object;
        v42 = _os_log_pack_fill();
        *(_DWORD *)v42 = 134218496;
        *(_QWORD *)(v42 + 4) = v32;
        *(_WORD *)(v42 + 12) = 2048;
        *(_QWORD *)(v42 + 14) = v33;
        *(_WORD *)(v42 + 22) = 2048;
        *(_QWORD *)(v42 + 24) = 0x8E38E38E38E38E39 * (((char *)v437 - (char *)v15) >> 2);
        v43 = (char *)operator new();
        v44 = *(unsigned __int8 *)(v11 + 39);
        v45 = v432;
        if ((v44 & 0x80u) != 0)
        {
          v45 = *(const char **)(v11 + 16);
          v44 = *(_QWORD *)(v11 + 24);
        }
        *(_QWORD *)v43 = v41;
        *(_OWORD *)(v43 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v43 + 24) = *(_OWORD *)v548;
        *(_QWORD *)v548 = 0;
        *(_QWORD *)&v548[8] = 0;
        *((_QWORD *)v43 + 5) = v45;
        *((_QWORD *)v43 + 6) = v44;
        v43[56] = 2;
        v581 = 0;
        v589 = v43;
        a5 = v427;
        (*(void (**)(_QWORD, char **))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v589);
        v46 = v589;
        v589 = 0;
        if (v46)
        {
          v47 = (std::__shared_weak_count *)*((_QWORD *)v46 + 4);
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v50 = (std::__shared_weak_count *)*((_QWORD *)v46 + 2);
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          MEMORY[0x227684CE8](v46, 0x10F0C40B62ED6C6);
          v53 = v581;
          v581 = 0;
          if (v53)
          {
            v54 = *(std::__shared_weak_count **)(v53 + 32);
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = *(std::__shared_weak_count **)(v53 + 16);
            if (v57)
            {
              v58 = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            MEMORY[0x227684CE8](v53, 0x10F0C40B62ED6C6);
          }
        }
        v60 = *(std::__shared_weak_count **)&v548[8];
        if (*(_QWORD *)&v548[8])
        {
          v61 = (unint64_t *)(*(_QWORD *)&v548[8] + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = *(std::__shared_weak_count **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          v64 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
      }
      else
      {
        os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)object = 134218496;
        *(_QWORD *)&object[4] = v428 + 1;
        *(_WORD *)&object[12] = 2048;
        *(_QWORD *)&object[14] = v33;
        *(_WORD *)&object[22] = 2048;
        *(_QWORD *)v548 = 0x8E38E38E38E38E39 * (((char *)v437 - (char *)v15) >> 2);
        v66 = (void *)_os_log_send_and_compose_impl();
        a5 = v427;
        if (v66)
          free(v66);
      }
      if (v7)
      {
        sub_22322C138((uint64_t)&v448, "Processing global plane update %zu/%zu of size %zu", v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v441 - (_BYTE *)v440) >> 3), 0x8E38E38E38E38E39 * (((char *)v431[1] - (char *)*v431) >> 2));
        sub_223182C08((uint64_t)&v448);
      }
      sub_223182C08((uint64_t)&v448);
      v67 = v455;
      if (v455)
      {
        v68 = (unint64_t *)&v455->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
LABEL_94:
      v70 = (const char *)v431[1];
      v442 = *v431;
      v443[0] = &off_24EC57640;
      v444 = v443;
      v443[1] = a1;
      v445 = v70;
      v446[0] = &off_24EC57640;
      v447 = v446;
      v446[1] = a1;
      *(_QWORD *)__s = v442;
      v577[0] = &off_24EC57640;
      v578[0] = v577;
      v577[1] = a1;
      v571 = v70;
      v572[0] = &off_24EC57640;
      v573[0] = v572;
      v572[1] = a1;
      *(_QWORD *)&v565 = v442;
      *((_QWORD *)&v565 + 1) = &off_24EC57640;
      v567[0] = (char *)&v565 + 8;
      *(_QWORD *)&v566 = a1;
      v559 = v70;
      v560[0] = &off_24EC57640;
      v561[0] = v560;
      v560[1] = a1;
      sub_2236D1BCC((uint64_t *)&v589, (uint64_t *)&v565, (uint64_t *)&v559);
      v72 = v573[0];
      v541 = (const char **)v571;
      if (!v573[0])
      {
        v543 = 0;
        v535 = v571;
LABEL_102:
        v537 = (_QWORD *)v72;
        goto LABEL_103;
      }
      if ((_QWORD *)v573[0] == v572)
      {
        v543 = v542;
        (*(void (**)(uint64_t, _QWORD *))(v572[0] + 24))((uint64_t)v572, v542);
      }
      else
      {
        v543 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v573[0] + 16))(v573[0], v71);
      }
      v72 = v573[0];
      v535 = v571;
      if (!v573[0])
        goto LABEL_102;
      if ((_QWORD *)v573[0] != v572)
      {
        v72 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v573[0] + 16))(v573[0], v73);
        goto LABEL_102;
      }
      v537 = v536;
      (*(void (**)(uint64_t, _QWORD *))(v572[0] + 24))((uint64_t)v572, v536);
LABEL_103:
      sub_2236D1BCC(&v581, (uint64_t *)&v541, (uint64_t *)&v535);
      *(_QWORD *)object = v589;
      v75 = &v548[8];
      if (!*((_QWORD *)&v591 + 1))
        goto LABEL_106;
      if (*((__int128 **)&v591 + 1) != &v590)
      {
        *(_QWORD *)&v548[8] = *((_QWORD *)&v591 + 1);
        v75 = (char *)&v591 + 8;
LABEL_106:
        *(_QWORD *)v75 = 0;
        goto LABEL_108;
      }
      *(_QWORD *)&v548[8] = &object[8];
      (*(void (**)(__int128 *))(v590 + 24))(&v590);
LABEL_108:
      v549 = v593;
      v76 = &v552;
      if (!v595[0])
        goto LABEL_111;
      if ((_QWORD *)v595[0] != v594)
      {
        v552 = (unint64_t *)v595[0];
        v76 = (unint64_t **)v595;
LABEL_111:
        *v76 = 0;
        goto LABEL_113;
      }
      v552 = &v550;
      (*(void (**)(_QWORD *, unint64_t *))(v594[0] + 24))(v594, &v550);
LABEL_113:
      v553 = v581;
      v77 = v555;
      if (!v585[0])
        goto LABEL_116;
      if ((std::__shared_weak_count_vtbl **)v585[0] != &v582)
      {
        v555[0] = v585[0];
        v77 = v585;
LABEL_116:
        *v77 = 0;
        goto LABEL_118;
      }
      v555[0] = v554;
      ((void (*)(std::__shared_weak_count_vtbl **, _QWORD *))v582->__get_deleter)(&v582, v554);
LABEL_118:
      v556 = v586;
      v78 = v558;
      if (!v588)
        goto LABEL_121;
      if (v588 != v587)
      {
        v558[0] = v588;
        v78 = &v588;
LABEL_121:
        *v78 = 0;
        goto LABEL_123;
      }
      v558[0] = v557;
      (*(void (**)(_QWORD *, _QWORD *))(v587[0] + 24))(v587, v557);
LABEL_123:
      v79 = v588;
      if (v588 == v587)
      {
        v79 = v587;
        v80 = 4;
      }
      else
      {
        if (!v588)
          goto LABEL_128;
        v80 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v79 + 8 * v80))(v79, v74);
LABEL_128:
      v81 = (void **)v585[0];
      if ((std::__shared_weak_count_vtbl **)v585[0] == &v582)
      {
        v81 = (void **)&v582;
        v82 = 4;
      }
      else
      {
        if (!v585[0])
          goto LABEL_133;
        v82 = 5;
      }
      (*((void (**)(void **, uint64_t))*v81 + v82))(v81, v74);
LABEL_133:
      v83 = v537;
      if (v537 == v536)
      {
        v83 = v536;
        v84 = 4;
      }
      else
      {
        if (!v537)
          goto LABEL_138;
        v84 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v83 + 8 * v84))(v83, v74);
LABEL_138:
      v85 = v543;
      if (v543 == v542)
      {
        v85 = v542;
        v86 = 4;
      }
      else
      {
        if (!v543)
          goto LABEL_143;
        v86 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v85 + 8 * v86))(v85, v74);
LABEL_143:
      v87 = (_QWORD *)v595[0];
      if ((_QWORD *)v595[0] == v594)
      {
        v87 = v594;
        v88 = 4;
      }
      else
      {
        if (!v595[0])
          goto LABEL_148;
        v88 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v87 + 8 * v88))(v87, v74);
LABEL_148:
      v89 = (__int128 *)*((_QWORD *)&v591 + 1);
      if (*((__int128 **)&v591 + 1) == &v590)
      {
        v89 = &v590;
        v90 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v591 + 1))
          goto LABEL_153;
        v90 = 5;
      }
      (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v89 + 8 * v90))(v89, v74);
LABEL_153:
      v91 = (_QWORD *)v561[0];
      if ((_QWORD *)v561[0] == v560)
      {
        v91 = v560;
        v92 = 4;
      }
      else
      {
        if (!v561[0])
          goto LABEL_158;
        v92 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v91 + 8 * v92))(v91, v74);
LABEL_158:
      v93 = (_QWORD *)v567[0];
      if ((__int128 *)v567[0] == (__int128 *)((char *)&v565 + 8))
      {
        v93 = (_QWORD *)&v565 + 1;
        v94 = 4;
      }
      else
      {
        if (!v567[0])
          goto LABEL_163;
        v94 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v93 + 8 * v94))(v93, v74);
LABEL_163:
      v95 = (_QWORD *)v573[0];
      if ((_QWORD *)v573[0] == v572)
      {
        v95 = v572;
        v96 = 4;
      }
      else
      {
        if (!v573[0])
          goto LABEL_168;
        v96 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v95 + 8 * v96))(v95, v74);
LABEL_168:
      v97 = (_QWORD *)v578[0];
      if ((_QWORD *)v578[0] == v577)
      {
        v97 = v577;
        v98 = 4;
      }
      else
      {
        if (!v578[0])
          goto LABEL_173;
        v98 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v97 + 8 * v98))(v97, v74);
LABEL_173:
      *(_QWORD *)&v448 = *(_QWORD *)object;
      v99 = &v451;
      if (!*(_QWORD *)&v548[8])
        goto LABEL_176;
      if (*(_BYTE **)&v548[8] != &object[8])
      {
        v451 = *(const char **)&v548[8];
        v99 = (const char **)&v548[8];
LABEL_176:
        *v99 = 0;
        goto LABEL_178;
      }
      v451 = (char *)&v448 + 8;
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)&object[8] + 24))(&object[8], (char *)&v448 + 8);
LABEL_178:
      v453 = (char *)v549;
      v100 = &v456;
      if (!v552)
        goto LABEL_181;
      if (v552 != &v550)
      {
        v456 = v552;
        v100 = &v552;
LABEL_181:
        *v100 = 0;
        goto LABEL_183;
      }
      v456 = (unint64_t *)&v454;
      (*(void (**)(unint64_t *, void (***)(_QWORD)))(v550 + 24))(&v550, &v454);
LABEL_183:
      v457 = v553;
      v101 = &v459;
      if (!v555[0])
        goto LABEL_186;
      if ((_QWORD *)v555[0] != v554)
      {
        v459 = (_QWORD *)v555[0];
        v101 = v555;
LABEL_186:
        *v101 = 0;
        goto LABEL_188;
      }
      v459 = v458;
      (*(void (**)(_QWORD *, _QWORD *))(v554[0] + 24))(v554, v458);
LABEL_188:
      v460 = v556;
      v102 = &v462;
      if (!v558[0])
        goto LABEL_191;
      if ((_QWORD *)v558[0] != v557)
      {
        v462 = (_QWORD *)v558[0];
        v102 = v558;
LABEL_191:
        *v102 = 0;
        goto LABEL_193;
      }
      v462 = v461;
      (*(void (**)(_QWORD *, _QWORD *))(v557[0] + 24))(v557, v461);
LABEL_193:
      v103 = (_QWORD *)v558[0];
      v104 = v473;
      if ((_QWORD *)v558[0] == v557)
      {
        v103 = v557;
        v105 = 4;
      }
      else
      {
        if (!v558[0])
          goto LABEL_198;
        v105 = 5;
      }
      (*(void (**)(_QWORD *, _QWORD *))(*v103 + 8 * v105))(v103, v473);
      v104 = v473;
LABEL_198:
      v106 = (_QWORD *)v555[0];
      if ((_QWORD *)v555[0] == v554)
      {
        v106 = v554;
        v107 = 4;
      }
      else
      {
        if (!v555[0])
          goto LABEL_203;
        v107 = 5;
      }
      (*(void (**)(_QWORD *, _QWORD *))(*v106 + 8 * v107))(v106, v473);
      v104 = v473;
LABEL_203:
      v108 = v552;
      if (v552 == &v550)
      {
        v108 = &v550;
        v109 = 4;
      }
      else
      {
        if (!v552)
          goto LABEL_208;
        v109 = 5;
      }
      (*(void (**)(unint64_t *, _QWORD *))(*v108 + 8 * v109))(v108, v473);
      v104 = v473;
LABEL_208:
      v110 = *(_QWORD **)&v548[8];
      if (*(_BYTE **)&v548[8] == &object[8])
      {
        v110 = &object[8];
        v111 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v548[8])
          goto LABEL_213;
        v111 = 5;
      }
      (*(void (**)(_QWORD *, _QWORD *))(*v110 + 8 * v111))(v110, v473);
      v104 = v473;
LABEL_213:
      v112 = (uint64_t)v451;
      v469 = (const char *)v448;
      if (!v451)
        goto LABEL_216;
      if (v451 != (char *)&v448 + 8)
      {
        v112 = (*(uint64_t (**)(const char *, _QWORD *))(*(_QWORD *)v451 + 16))(v451, v473);
        v104 = v473;
LABEL_216:
        v471 = (_QWORD *)v112;
        goto LABEL_218;
      }
      v471 = v470;
      (*(void (**)(char *, _QWORD *))(*((_QWORD *)&v448 + 1) + 24))((char *)&v448 + 8, v470);
      v104 = v473;
LABEL_218:
      v113 = (uint64_t)v456;
      v472 = v453;
      if (!v456)
        goto LABEL_221;
      if (v456 != (unint64_t *)&v454)
      {
        v113 = (*(uint64_t (**)(unint64_t *, _QWORD *))(*v456 + 16))(v456, v473);
LABEL_221:
        v474 = (_QWORD *)v113;
        goto LABEL_223;
      }
      v474 = v473;
      v454[3](&v454);
LABEL_223:
      v114 = (uint64_t)v459;
      v463 = (const char *)v457;
      if (!v459)
        goto LABEL_226;
      if (v459 != v458)
      {
        v114 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v459 + 16))(v459, v104);
LABEL_226:
        v465 = (_QWORD *)v114;
        goto LABEL_228;
      }
      v465 = v464;
      (*(void (**)(_QWORD *, _QWORD *))(v458[0] + 24))(v458, v464);
LABEL_228:
      v115 = (uint64_t)v462;
      v466 = v460;
      if (!v462)
        goto LABEL_231;
      if (v462 != v461)
      {
        v115 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v462 + 16))(v462, v104);
LABEL_231:
        v468 = (_QWORD *)v115;
        goto LABEL_233;
      }
      v468 = v467;
      (*(void (**)(_QWORD *, _QWORD *))(v461[0] + 24))(v461, v467);
LABEL_233:
      v116 = (uint64_t)v471;
      v493 = v469;
      if (!v471)
        goto LABEL_236;
      if (v471 != v470)
      {
        v116 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v471 + 16))(v471, v104);
LABEL_236:
        v495 = (_QWORD *)v116;
        goto LABEL_238;
      }
      v495 = v494;
      (*(void (**)(_QWORD *))(v470[0] + 24))(v470);
LABEL_238:
      v117 = (uint64_t)v474;
      v496 = v472;
      if (!v474)
        goto LABEL_241;
      if (v474 != v473)
      {
        v117 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v474 + 16))(v474, v104);
LABEL_241:
        v498 = (_QWORD *)v117;
        goto LABEL_243;
      }
      v498 = v497;
      (*(void (**)(_QWORD *))(v473[0] + 24))(v473);
LABEL_243:
      v118 = (uint64_t)v465;
      v487 = (char *)v463;
      if (!v465)
        goto LABEL_246;
      if (v465 != v464)
      {
        v118 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v465 + 16))(v465, v104);
LABEL_246:
        v489 = (_QWORD *)v118;
        goto LABEL_248;
      }
      v489 = v488;
      (*(void (**)(_QWORD *))(v464[0] + 24))(v464);
LABEL_248:
      v119 = (uint64_t)v468;
      v490 = v466;
      if (!v468)
        goto LABEL_251;
      if (v468 != v467)
      {
        v119 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v468 + 16))(v468, v104);
LABEL_251:
        v492 = (_QWORD *)v119;
        goto LABEL_253;
      }
      v492 = v491;
      (*(void (**)(_QWORD *))(v467[0] + 24))(v467);
LABEL_253:
      v120 = (uint64_t)v495;
      *(_QWORD *)object = v493;
      if (!v495)
        goto LABEL_256;
      if (v495 != v494)
      {
        v120 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v495 + 16))(v495, v104);
LABEL_256:
        *(_QWORD *)&v548[8] = v120;
        goto LABEL_258;
      }
      *(_QWORD *)&v548[8] = &object[8];
      (*(void (**)(_QWORD *))(v494[0] + 24))(v494);
LABEL_258:
      v121 = (uint64_t)v498;
      v549 = v496;
      if (!v498)
        goto LABEL_261;
      if (v498 != v497)
      {
        v121 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v498 + 16))(v498, v104);
LABEL_261:
        v552 = (unint64_t *)v121;
        goto LABEL_263;
      }
      v552 = &v550;
      (*(void (**)(_QWORD *))(v497[0] + 24))(v497);
LABEL_263:
      v122 = (uint64_t)v489;
      v589 = v487;
      if (!v489)
        goto LABEL_266;
      if (v489 != v488)
      {
        v122 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v489 + 16))(v489, v104);
LABEL_266:
        *((_QWORD *)&v591 + 1) = v122;
        goto LABEL_268;
      }
      *((_QWORD *)&v591 + 1) = &v590;
      (*(void (**)(_QWORD *, __int128 *))(v488[0] + 24))(v488, &v590);
LABEL_268:
      v123 = (uint64_t)v492;
      v593 = v490;
      if (!v492)
        goto LABEL_271;
      if (v492 != v491)
      {
        v123 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v492 + 16))(v492, v104);
LABEL_271:
        v595[0] = v123;
        goto LABEL_273;
      }
      v595[0] = v594;
      (*(void (**)(_QWORD *))(v491[0] + 24))(v491);
LABEL_273:
      v124 = *(char **)object;
      v125 = v589;
      if (*(char **)object == v589)
      {
        v126 = 0;
      }
      else
      {
        v126 = 0;
        do
        {
          v124 += 36;
          *(_QWORD *)object = v124;
          if (v124 != v549)
          {
            do
            {
              if (!*(_QWORD *)&v548[8])
                sub_223198474();
              v127 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v548[8] + 48))(*(_QWORD *)&v548[8]);
              v124 = *(char **)object;
              if (v127)
                break;
              v124 = (char *)(*(_QWORD *)object + 36);
              *(_QWORD *)object = v124;
            }
            while (v124 != v549);
            v125 = v589;
          }
          ++v126;
        }
        while (v124 != v125);
      }
      v128 = (_QWORD *)v595[0];
      if ((_QWORD *)v595[0] == v594)
      {
        v128 = v594;
        v129 = 4;
      }
      else
      {
        if (!v595[0])
          goto LABEL_288;
        v129 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v128 + 8 * v129))(v128, v124);
LABEL_288:
      v130 = (__int128 *)*((_QWORD *)&v591 + 1);
      if (*((__int128 **)&v591 + 1) == &v590)
      {
        v130 = &v590;
        v131 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v591 + 1))
          goto LABEL_293;
        v131 = 5;
      }
      (*(void (**)(__int128 *, char *))(*(_QWORD *)v130 + 8 * v131))(v130, v124);
LABEL_293:
      v132 = v552;
      if (v552 == &v550)
      {
        v132 = &v550;
        v133 = 4;
      }
      else
      {
        if (!v552)
          goto LABEL_298;
        v133 = 5;
      }
      (*(void (**)(unint64_t *, char *))(*v132 + 8 * v133))(v132, v124);
LABEL_298:
      v134 = *(_QWORD **)&v548[8];
      if (*(_BYTE **)&v548[8] == &object[8])
      {
        v134 = &object[8];
        v135 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v548[8])
          goto LABEL_303;
        v135 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v134 + 8 * v135))(v134, v124);
LABEL_303:
      v136 = v492;
      if (v492 == v491)
      {
        v136 = v491;
        v137 = 4;
      }
      else
      {
        if (!v492)
          goto LABEL_308;
        v137 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v136 + 8 * v137))(v136, v124);
LABEL_308:
      v138 = v489;
      if (v489 == v488)
      {
        v138 = v488;
        v139 = 4;
      }
      else
      {
        if (!v489)
          goto LABEL_313;
        v139 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v138 + 8 * v139))(v138, v124);
LABEL_313:
      v140 = v498;
      if (v498 == v497)
      {
        v140 = v497;
        v141 = 4;
      }
      else
      {
        if (!v498)
          goto LABEL_318;
        v141 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v140 + 8 * v141))(v140, v124);
LABEL_318:
      v142 = v495;
      if (v495 == v494)
      {
        v142 = v494;
        v143 = 4;
      }
      else
      {
        if (!v495)
          goto LABEL_323;
        v143 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v142 + 8 * v143))(v142, v124);
LABEL_323:
      v144 = (uint64_t)v471;
      v481 = v469;
      if (!v471)
        goto LABEL_326;
      if (v471 != v470)
      {
        v144 = (*(uint64_t (**)(_QWORD *, char *))(*v471 + 16))(v471, v124);
LABEL_326:
        v483 = (_QWORD *)v144;
        goto LABEL_328;
      }
      v483 = v482;
      (*(void (**)(_QWORD *, _QWORD *))(v470[0] + 24))(v470, v482);
LABEL_328:
      v145 = (uint64_t)v474;
      v484 = v472;
      if (!v474)
        goto LABEL_331;
      if (v474 != v473)
      {
        v145 = (*(uint64_t (**)(_QWORD *, char *))(*v474 + 16))(v474, v124);
LABEL_331:
        v486 = (_QWORD *)v145;
        goto LABEL_333;
      }
      v486 = v485;
      (*(void (**)(_QWORD *, _QWORD *))(v473[0] + 24))(v473, v485);
LABEL_333:
      v146 = (uint64_t)v465;
      v475 = v463;
      if (!v465)
        goto LABEL_336;
      if (v465 != v464)
      {
        v146 = (*(uint64_t (**)(_QWORD *, char *))(*v465 + 16))(v465, v124);
LABEL_336:
        v477 = (_QWORD *)v146;
        goto LABEL_338;
      }
      v477 = v476;
      (*(void (**)(_QWORD *, _QWORD *))(v464[0] + 24))(v464, v476);
LABEL_338:
      v147 = (uint64_t)v468;
      v478 = v466;
      if (!v468)
        goto LABEL_341;
      if (v468 != v467)
      {
        v147 = (*(uint64_t (**)(_QWORD *, char *))(*v468 + 16))(v468, v124);
LABEL_341:
        v480 = (_QWORD *)v147;
        goto LABEL_343;
      }
      v480 = v479;
      (*(void (**)(_QWORD *))(v467[0] + 24))(v467);
LABEL_343:
      if (!v126)
      {
        v438 = 0;
        v149 = 0;
        goto LABEL_656;
      }
      if (v126 >> 61)
        sub_22316E078();
      v438 = (char *)operator new(8 * v126);
      v148 = (uint64_t)v483;
      v505 = v481;
      if (!v483)
        goto LABEL_348;
      if (v483 != v482)
      {
        v148 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v483 + 16))(v483, v563);
LABEL_348:
        v507 = (_QWORD *)v148;
        goto LABEL_352;
      }
      v507 = v506;
      (*(void (**)(_QWORD *))(v482[0] + 24))(v482);
LABEL_352:
      v150 = (uint64_t)v486;
      v508 = v484;
      if (!v486)
        goto LABEL_355;
      if (v486 != v485)
      {
        v150 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v486 + 16))(v486, v563);
LABEL_355:
        v510 = (_QWORD *)v150;
        goto LABEL_357;
      }
      v510 = v509;
      (*(void (**)(_QWORD *))(v485[0] + 24))(v485);
LABEL_357:
      v151 = (uint64_t)v477;
      v499 = v475;
      if (!v477)
        goto LABEL_360;
      if (v477 != v476)
      {
        v151 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v477 + 16))(v477, v563);
LABEL_360:
        v501 = (_QWORD *)v151;
        goto LABEL_362;
      }
      v501 = v500;
      (*(void (**)(_QWORD *))(v476[0] + 24))(v476);
LABEL_362:
      v152 = (uint64_t)v480;
      v502 = v478;
      if (!v480)
        goto LABEL_365;
      if (v480 != v479)
      {
        v152 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v480 + 16))(v480, v563);
LABEL_365:
        v504 = (_QWORD *)v152;
        goto LABEL_367;
      }
      v504 = v503;
      (*(void (**)(_QWORD *))(v479[0] + 24))(v479);
LABEL_367:
      v153 = (uint64_t)v507;
      v517 = v505;
      if (!v507)
        goto LABEL_370;
      if (v507 != v506)
      {
        v153 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v507 + 16))(v507, v563);
LABEL_370:
        v519 = (_QWORD *)v153;
        goto LABEL_372;
      }
      v519 = v518;
      (*(void (**)(_QWORD *))(v506[0] + 24))(v506);
LABEL_372:
      v154 = (uint64_t)v510;
      v520 = v508;
      if (!v510)
        goto LABEL_375;
      if (v510 != v509)
      {
        v154 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v510 + 16))(v510, v563);
LABEL_375:
        v522 = (_QWORD *)v154;
        goto LABEL_377;
      }
      v522 = v521;
      (*(void (**)(_QWORD *))(v509[0] + 24))(v509);
LABEL_377:
      v155 = (uint64_t)v501;
      v511 = v499;
      if (!v501)
        goto LABEL_380;
      if (v501 != v500)
      {
        v155 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v501 + 16))(v501, v563);
LABEL_380:
        v513 = (_QWORD *)v155;
        goto LABEL_382;
      }
      v513 = v512;
      (*(void (**)(_QWORD *))(v500[0] + 24))(v500);
LABEL_382:
      v156 = (uint64_t)v504;
      v514 = v502;
      if (!v504)
        goto LABEL_385;
      if (v504 != v503)
      {
        v156 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v504 + 16))(v504, v563);
LABEL_385:
        v516 = (_QWORD *)v156;
        goto LABEL_387;
      }
      v516 = v515;
      (*(void (**)(_QWORD *))(v503[0] + 24))(v503);
LABEL_387:
      v157 = (uint64_t)v519;
      v541 = (const char **)v517;
      if (!v519)
        goto LABEL_390;
      if (v519 != v518)
      {
        v157 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v519 + 16))(v519, v563);
LABEL_390:
        v543 = (_QWORD *)v157;
        goto LABEL_392;
      }
      v543 = v542;
      (*(void (**)(_QWORD *))(v518[0] + 24))(v518);
LABEL_392:
      v158 = (uint64_t)v522;
      v544 = v520;
      if (!v522)
        goto LABEL_395;
      if (v522 != v521)
      {
        v158 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v522 + 16))(v522, v563);
LABEL_395:
        v546 = (_QWORD *)v158;
        goto LABEL_397;
      }
      v546 = v545;
      (*(void (**)(_QWORD *))(v521[0] + 24))(v521);
LABEL_397:
      v159 = (uint64_t)v513;
      v535 = v511;
      if (!v513)
        goto LABEL_400;
      if (v513 != v512)
      {
        v159 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v513 + 16))(v513, v563);
LABEL_400:
        v537 = (_QWORD *)v159;
        goto LABEL_402;
      }
      v537 = v536;
      (*(void (**)(_QWORD *))(v512[0] + 24))(v512);
LABEL_402:
      v160 = (uint64_t)v516;
      v538 = v514;
      if (!v516)
        goto LABEL_405;
      if (v516 != v515)
      {
        v160 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v516 + 16))(v516, v563);
LABEL_405:
        v540 = (_QWORD *)v160;
        goto LABEL_407;
      }
      v540 = v539;
      (*(void (**)(_QWORD *, _QWORD *))(v515[0] + 24))(v515, v539);
LABEL_407:
      *(_QWORD *)&v565 = v541;
      v161 = v567;
      if (!v543)
        goto LABEL_410;
      if (v543 != v542)
      {
        v567[0] = v543;
        v161 = &v543;
LABEL_410:
        *v161 = 0;
        goto LABEL_412;
      }
      v567[0] = (char *)&v565 + 8;
      (*(void (**)(_QWORD *, char *))(v542[0] + 24))(v542, (char *)&v565 + 8);
LABEL_412:
      v568 = v544;
      v162 = &v570;
      if (!v546)
        goto LABEL_415;
      if (v546 != v545)
      {
        v570 = v546;
        v162 = &v546;
LABEL_415:
        *v162 = 0;
        goto LABEL_417;
      }
      v570 = v569;
      (*(void (**)(_QWORD *, _QWORD *))(v545[0] + 24))(v545, v569);
LABEL_417:
      v559 = v535;
      v163 = v561;
      if (!v537)
        goto LABEL_420;
      if (v537 != v536)
      {
        v561[0] = v537;
        v163 = &v537;
LABEL_420:
        *v163 = 0;
        goto LABEL_422;
      }
      v561[0] = v560;
      (*(void (**)(_QWORD *, _QWORD *))(v536[0] + 24))(v536, v560);
LABEL_422:
      v562 = v538;
      v164 = &v564;
      if (!v540)
        goto LABEL_425;
      if (v540 != v539)
      {
        v564 = v540;
        v164 = &v540;
LABEL_425:
        *v164 = 0;
        goto LABEL_427;
      }
      v564 = v563;
      (*(void (**)(_QWORD *))(v539[0] + 24))(v539);
LABEL_427:
      v581 = v565;
      v165 = v585;
      if (!v567[0])
        goto LABEL_430;
      if ((__int128 *)v567[0] != (__int128 *)((char *)&v565 + 8))
      {
        v585[0] = v567[0];
        v165 = v567;
LABEL_430:
        *v165 = 0;
        goto LABEL_432;
      }
      v585[0] = &v582;
      (*(void (**)(char *, std::__shared_weak_count_vtbl **))(*((_QWORD *)&v565 + 1) + 24))((char *)&v565 + 8, &v582);
LABEL_432:
      v586 = v568;
      v166 = &v588;
      if (!v570)
        goto LABEL_435;
      if (v570 != v569)
      {
        v588 = v570;
        v166 = &v570;
LABEL_435:
        *v166 = 0;
        goto LABEL_437;
      }
      v588 = v587;
      (*(void (**)(_QWORD *, _QWORD *))(v569[0] + 24))(v569, v587);
LABEL_437:
      sub_2236D1984(&v589, &v581);
      v571 = v559;
      v167 = v573;
      if (!v561[0])
        goto LABEL_440;
      if ((_QWORD *)v561[0] != v560)
      {
        v573[0] = v561[0];
        v167 = v561;
LABEL_440:
        *v167 = 0;
        goto LABEL_442;
      }
      v573[0] = v572;
      (*(void (**)(_QWORD *, _QWORD *))(v560[0] + 24))(v560, v572);
LABEL_442:
      v573[2] = v562;
      v168 = &v575;
      if (!v564)
        goto LABEL_445;
      if (v564 != v563)
      {
        v575 = v564;
        v168 = &v564;
LABEL_445:
        *v168 = 0;
        goto LABEL_447;
      }
      v575 = v574;
      (*(void (**)(_QWORD *))(v563[0] + 24))(v563);
LABEL_447:
      sub_2236D1984(__s, (uint64_t *)&v571);
      *(_QWORD *)object = v589;
      v170 = &v548[8];
      if (!*((_QWORD *)&v591 + 1))
        goto LABEL_450;
      if (*((__int128 **)&v591 + 1) != &v590)
      {
        *(_QWORD *)&v548[8] = *((_QWORD *)&v591 + 1);
        v170 = (char *)&v591 + 8;
LABEL_450:
        *(_QWORD *)v170 = 0;
        goto LABEL_452;
      }
      *(_QWORD *)&v548[8] = &object[8];
      (*(void (**)(__int128 *))(v590 + 24))(&v590);
LABEL_452:
      v549 = v593;
      v171 = &v552;
      if (!v595[0])
        goto LABEL_455;
      if ((_QWORD *)v595[0] != v594)
      {
        v552 = (unint64_t *)v595[0];
        v171 = (unint64_t **)v595;
LABEL_455:
        *v171 = 0;
        goto LABEL_457;
      }
      v552 = &v550;
      (*(void (**)(_QWORD *, unint64_t *))(v594[0] + 24))(v594, &v550);
LABEL_457:
      v553 = *(_QWORD *)__s;
      v172 = v555;
      if (!v578[0])
        goto LABEL_460;
      if ((_QWORD *)v578[0] != v577)
      {
        v555[0] = v578[0];
        v172 = v578;
LABEL_460:
        *v172 = 0;
        goto LABEL_462;
      }
      v555[0] = v554;
      (*(void (**)(_QWORD *, _QWORD *))(v577[0] + 24))(v577, v554);
LABEL_462:
      v556 = (char *)v578[2];
      v173 = v558;
      if (!v580)
        goto LABEL_465;
      if (v580 != v579)
      {
        v558[0] = v580;
        v173 = &v580;
LABEL_465:
        *v173 = 0;
        goto LABEL_467;
      }
      v558[0] = v557;
      (*(void (**)(_QWORD *))(v579[0] + 24))(v579);
LABEL_467:
      v174 = v580;
      if (v580 == v579)
      {
        v174 = v579;
        v175 = 4;
      }
      else
      {
        if (!v580)
          goto LABEL_472;
        v175 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v174 + 8 * v175))(v174, v169);
LABEL_472:
      v176 = (_QWORD *)v578[0];
      if ((_QWORD *)v578[0] == v577)
      {
        v176 = v577;
        v177 = 4;
      }
      else
      {
        if (!v578[0])
          goto LABEL_477;
        v177 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v176 + 8 * v177))(v176, v169);
LABEL_477:
      v178 = v575;
      if (v575 == v574)
      {
        v178 = v574;
        v179 = 4;
      }
      else
      {
        if (!v575)
          goto LABEL_482;
        v179 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v178 + 8 * v179))(v178, v169);
LABEL_482:
      v180 = (_QWORD *)v573[0];
      if ((_QWORD *)v573[0] == v572)
      {
        v180 = v572;
        v181 = 4;
      }
      else
      {
        if (!v573[0])
          goto LABEL_487;
        v181 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v180 + 8 * v181))(v180, v169);
LABEL_487:
      v182 = (_QWORD *)v595[0];
      if ((_QWORD *)v595[0] == v594)
      {
        v182 = v594;
        v183 = 4;
      }
      else
      {
        if (!v595[0])
          goto LABEL_492;
        v183 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v182 + 8 * v183))(v182, v169);
LABEL_492:
      v184 = (__int128 *)*((_QWORD *)&v591 + 1);
      if (*((__int128 **)&v591 + 1) == &v590)
      {
        v184 = &v590;
        v185 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v591 + 1))
          goto LABEL_497;
        v185 = 5;
      }
      (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v184 + 8 * v185))(v184, v169);
LABEL_497:
      v186 = v588;
      if (v588 == v587)
      {
        v186 = v587;
        v187 = 4;
      }
      else
      {
        if (!v588)
          goto LABEL_502;
        v187 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v186 + 8 * v187))(v186, v169);
LABEL_502:
      v188 = (void **)v585[0];
      if ((std::__shared_weak_count_vtbl **)v585[0] == &v582)
      {
        v188 = (void **)&v582;
        v189 = 4;
      }
      else
      {
        if (!v585[0])
          goto LABEL_507;
        v189 = 5;
      }
      (*((void (**)(void **, uint64_t))*v188 + v189))(v188, v169);
LABEL_507:
      v190 = v564;
      if (v564 == v563)
      {
        v190 = v563;
        v191 = 4;
      }
      else
      {
        if (!v564)
          goto LABEL_512;
        v191 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v190 + 8 * v191))(v190, v169);
LABEL_512:
      v192 = (_QWORD *)v561[0];
      if ((_QWORD *)v561[0] == v560)
      {
        v192 = v560;
        v193 = 4;
      }
      else
      {
        if (!v561[0])
          goto LABEL_517;
        v193 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v192 + 8 * v193))(v192, v169);
LABEL_517:
      v194 = v570;
      if (v570 == v569)
      {
        v194 = v569;
        v195 = 4;
      }
      else
      {
        if (!v570)
          goto LABEL_522;
        v195 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v194 + 8 * v195))(v194, v169);
LABEL_522:
      v196 = (_QWORD *)v567[0];
      if ((__int128 *)v567[0] == (__int128 *)((char *)&v565 + 8))
      {
        v196 = (_QWORD *)&v565 + 1;
        v197 = 4;
      }
      else
      {
        if (!v567[0])
          goto LABEL_527;
        v197 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v196 + 8 * v197))(v196, v169);
LABEL_527:
      v198 = v540;
      if (v540 == v539)
      {
        v198 = v539;
        v199 = 4;
      }
      else
      {
        if (!v540)
          goto LABEL_532;
        v199 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v198 + 8 * v199))(v198, v169);
LABEL_532:
      v200 = v537;
      if (v537 == v536)
      {
        v200 = v536;
        v201 = 4;
      }
      else
      {
        if (!v537)
          goto LABEL_537;
        v201 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v200 + 8 * v201))(v200, v169);
LABEL_537:
      v202 = v546;
      if (v546 == v545)
      {
        v202 = v545;
        v203 = 4;
      }
      else
      {
        if (!v546)
          goto LABEL_542;
        v203 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v202 + 8 * v203))(v202, v169);
LABEL_542:
      v204 = v543;
      if (v543 == v542)
      {
        v204 = v542;
        v205 = 4;
      }
      else
      {
        if (!v543)
          goto LABEL_547;
        v205 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v204 + 8 * v205))(v204, v169);
LABEL_547:
      v206 = *(_QWORD *)&v548[8];
      v529 = *(char **)object;
      if (!*(_QWORD *)&v548[8])
        goto LABEL_550;
      if (*(_BYTE **)&v548[8] != &object[8])
      {
        v206 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)&v548[8] + 16))(*(_QWORD *)&v548[8], v169);
LABEL_550:
        v531 = (_BYTE *)v206;
        goto LABEL_552;
      }
      v531 = v530;
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)&object[8] + 24))(&object[8], v530);
LABEL_552:
      v207 = (uint64_t)v552;
      v532 = (char *)v549;
      if (!v552)
        goto LABEL_555;
      if (v552 != &v550)
      {
        v207 = (*(uint64_t (**)(unint64_t *, uint64_t))(*v552 + 16))(v552, v169);
LABEL_555:
        v534 = (_BYTE *)v207;
        goto LABEL_557;
      }
      v534 = v533;
      (*(void (**)(unint64_t *))(v550 + 24))(&v550);
LABEL_557:
      v208 = v555[0];
      v523 = (char *)v553;
      if (!v555[0])
        goto LABEL_560;
      if ((_QWORD *)v555[0] != v554)
      {
        v208 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v555[0] + 16))(v555[0], v169);
LABEL_560:
        v525 = (_BYTE *)v208;
        goto LABEL_562;
      }
      v525 = v524;
      (*(void (**)(_QWORD *))(v554[0] + 24))(v554);
LABEL_562:
      v209 = v558[0];
      v526 = v556;
      if (!v558[0])
        goto LABEL_565;
      if ((_QWORD *)v558[0] != v557)
      {
        v209 = (*(uint64_t (**)(_QWORD, _BYTE *))(*(_QWORD *)v558[0] + 16))(v558[0], v527);
LABEL_565:
        v528 = (_BYTE *)v209;
        goto LABEL_567;
      }
      v528 = v527;
      (*(void (**)(_QWORD *))(v557[0] + 24))(v557);
LABEL_567:
      v124 = v529;
      v149 = (__n128 *)v438;
      if (v529 != v523)
      {
        v149 = (__n128 *)v438;
        while (1)
        {
          if (!v531)
            goto LABEL_1045;
          v149->n128_u64[0] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v531 + 48))(v531);
          v124 = v529 + 36;
          v529 = v124;
          if (v124 != v532)
            break;
LABEL_569:
          v149 = (__n128 *)((char *)v149 + 8);
          if (v124 == v523)
            goto LABEL_576;
        }
        while (v531)
        {
          v210 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v531 + 48))(v531);
          v124 = v529;
          if (!v210)
          {
            v124 = v529 + 36;
            v529 = v124;
            if (v124 != v532)
              continue;
          }
          goto LABEL_569;
        }
LABEL_1045:
        sub_223198474();
      }
LABEL_576:
      v211 = v528;
      if (v528 == v527)
      {
        v211 = v527;
        v212 = 4;
      }
      else
      {
        if (!v528)
          goto LABEL_581;
        v212 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v211 + 8 * v212))(v211, v124);
LABEL_581:
      v213 = v525;
      if (v525 == v524)
      {
        v213 = v524;
        v214 = 4;
      }
      else
      {
        if (!v525)
          goto LABEL_586;
        v214 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v213 + 8 * v214))(v213, v124);
LABEL_586:
      v215 = v534;
      if (v534 == v533)
      {
        v215 = v533;
        v216 = 4;
      }
      else
      {
        if (!v534)
          goto LABEL_591;
        v216 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v215 + 8 * v216))(v215, v124);
LABEL_591:
      v217 = v531;
      if (v531 == v530)
      {
        v217 = v530;
        v218 = 4;
      }
      else
      {
        if (!v531)
          goto LABEL_596;
        v218 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v217 + 8 * v218))(v217, v124);
LABEL_596:
      v219 = (_QWORD *)v558[0];
      if ((_QWORD *)v558[0] == v557)
      {
        v219 = v557;
        v220 = 4;
      }
      else
      {
        if (!v558[0])
          goto LABEL_601;
        v220 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v219 + 8 * v220))(v219, v124);
LABEL_601:
      v221 = (_QWORD *)v555[0];
      if ((_QWORD *)v555[0] == v554)
      {
        v221 = v554;
        v222 = 4;
      }
      else
      {
        if (!v555[0])
          goto LABEL_606;
        v222 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v221 + 8 * v222))(v221, v124);
LABEL_606:
      v223 = v552;
      if (v552 == &v550)
      {
        v223 = &v550;
        v224 = 4;
      }
      else
      {
        if (!v552)
          goto LABEL_611;
        v224 = 5;
      }
      (*(void (**)(unint64_t *, char *))(*v223 + 8 * v224))(v223, v124);
LABEL_611:
      v225 = *(_QWORD **)&v548[8];
      if (*(_BYTE **)&v548[8] == &object[8])
      {
        v225 = &object[8];
        v226 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v548[8])
          goto LABEL_616;
        v226 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v225 + 8 * v226))(v225, v124);
LABEL_616:
      v227 = v516;
      if (v516 == v515)
      {
        v227 = v515;
        v228 = 4;
      }
      else
      {
        if (!v516)
          goto LABEL_621;
        v228 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v227 + 8 * v228))(v227, v124);
LABEL_621:
      v229 = v513;
      if (v513 == v512)
      {
        v229 = v512;
        v230 = 4;
      }
      else
      {
        if (!v513)
          goto LABEL_626;
        v230 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v229 + 8 * v230))(v229, v124);
LABEL_626:
      v231 = v522;
      if (v522 == v521)
      {
        v231 = v521;
        v232 = 4;
      }
      else
      {
        if (!v522)
          goto LABEL_631;
        v232 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v231 + 8 * v232))(v231, v124);
LABEL_631:
      v233 = v519;
      if (v519 == v518)
      {
        v233 = v518;
        v234 = 4;
      }
      else
      {
        if (!v519)
          goto LABEL_636;
        v234 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v233 + 8 * v234))(v233, v124);
LABEL_636:
      v235 = v504;
      if (v504 == v503)
      {
        v235 = v503;
        v236 = 4;
      }
      else
      {
        if (!v504)
          goto LABEL_641;
        v236 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v235 + 8 * v236))(v235, v124);
LABEL_641:
      v237 = v501;
      if (v501 == v500)
      {
        v237 = v500;
        v238 = 4;
      }
      else
      {
        if (!v501)
          goto LABEL_646;
        v238 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v237 + 8 * v238))(v237, v124);
LABEL_646:
      v239 = v510;
      if (v510 == v509)
      {
        v239 = v509;
        v240 = 4;
      }
      else
      {
        if (!v510)
          goto LABEL_651;
        v240 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v239 + 8 * v240))(v239, v124);
LABEL_651:
      v241 = v507;
      if (v507 == v506)
      {
        v241 = v506;
        v242 = 4;
      }
      else
      {
        if (!v507)
          goto LABEL_656;
        v242 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v241 + 8 * v242))(v241, v124);
LABEL_656:
      v243 = v480;
      if (v480 == v479)
      {
        v243 = v479;
        v244 = 4;
      }
      else
      {
        if (!v480)
          goto LABEL_661;
        v244 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v243 + 8 * v244))(v243, v124);
LABEL_661:
      v245 = v477;
      if (v477 == v476)
      {
        v245 = v476;
        v246 = 4;
      }
      else
      {
        if (!v477)
          goto LABEL_666;
        v246 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v245 + 8 * v246))(v245, v124);
LABEL_666:
      v247 = v486;
      if (v486 == v485)
      {
        v247 = v485;
        v248 = 4;
      }
      else
      {
        if (!v486)
          goto LABEL_671;
        v248 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v247 + 8 * v248))(v247, v124);
LABEL_671:
      v249 = v483;
      if (v483 == v482)
      {
        v249 = v482;
        v250 = 4;
      }
      else
      {
        if (!v483)
          goto LABEL_676;
        v250 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v249 + 8 * v250))(v249, v124);
LABEL_676:
      v251 = v468;
      if (v468 == v467)
      {
        v251 = v467;
        v252 = 4;
      }
      else
      {
        if (!v468)
          goto LABEL_681;
        v252 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v251 + 8 * v252))(v251, v124);
LABEL_681:
      v253 = v465;
      if (v465 == v464)
      {
        v253 = v464;
        v254 = 4;
      }
      else
      {
        if (!v465)
          goto LABEL_686;
        v254 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v253 + 8 * v254))(v253, v124);
LABEL_686:
      v255 = v474;
      if (v474 == v473)
      {
        v255 = v473;
        v256 = 4;
      }
      else
      {
        if (!v474)
          goto LABEL_691;
        v256 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v255 + 8 * v256))(v255, v124);
LABEL_691:
      v257 = v471;
      if (v471 == v470)
      {
        v257 = v470;
        v258 = 4;
      }
      else
      {
        if (!v471)
          goto LABEL_696;
        v258 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v257 + 8 * v258))(v257, v124);
LABEL_696:
      v259 = v462;
      if (v462 == v461)
      {
        v259 = v461;
        v260 = 4;
      }
      else
      {
        if (!v462)
          goto LABEL_701;
        v260 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v259 + 8 * v260))(v259, v124);
LABEL_701:
      v261 = v459;
      if (v459 == v458)
      {
        v261 = v458;
        v262 = 4;
      }
      else
      {
        if (!v459)
          goto LABEL_706;
        v262 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v261 + 8 * v262))(v261, v124);
LABEL_706:
      v263 = v456;
      if (v456 == (unint64_t *)&v454)
      {
        v263 = (unint64_t *)&v454;
        v264 = 4;
      }
      else
      {
        if (!v456)
          goto LABEL_711;
        v264 = 5;
      }
      (*(void (**)(unint64_t *, char *))(*v263 + 8 * v264))(v263, v124);
LABEL_711:
      v265 = (char *)v451;
      if (v451 == (char *)&v448 + 8)
      {
        v265 = (char *)&v448 + 8;
        v266 = 4;
      }
      else
      {
        if (!v451)
          goto LABEL_716;
        v266 = 5;
      }
      (*(void (**)(char *, char *))(*(_QWORD *)v265 + 8 * v266))(v265, v124);
LABEL_716:
      v267 = v447;
      if (v447 == v446)
      {
        v267 = v446;
        v268 = 4;
      }
      else
      {
        if (!v447)
          goto LABEL_721;
        v268 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v267 + 8 * v268))(v267, v124);
LABEL_721:
      v269 = v444;
      if (v444 == v443)
      {
        v269 = v443;
        v270 = 4;
      }
      else
      {
        if (!v444)
          goto LABEL_726;
        v270 = 5;
      }
      (*(void (**)(_QWORD *, char *))(*v269 + 8 * v270))(v269, v124);
LABEL_726:
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      v271 = (__n128 *)v438;
      *(_QWORD *)object = &object[8];
      if (v438 != (char *)v149)
      {
        v271 = (__n128 *)v438;
        v272 = *(unsigned __int8 **)v438;
        v273 = (char **)&object[8];
        for (i = (char **)&object[8]; ; i = v273 + 1)
        {
          do
          {
LABEL_764:
            v282 = (char *)operator new(0x30uLL);
            *(_OWORD *)(v282 + 25) = *(_OWORD *)v272;
            *(_QWORD *)v282 = 0;
            *((_QWORD *)v282 + 1) = 0;
            *((_QWORD *)v282 + 2) = v273;
            *i = v282;
            if (**(_QWORD **)object)
            {
              *(_QWORD *)object = **(_QWORD **)object;
              v282 = *i;
            }
            sub_2231A9A8C(*(uint64_t **)&object[8], (uint64_t *)v282);
            v283 = ++*(_QWORD *)&object[16];
            v271 = (__n128 *)((char *)v271 + 8);
            if (v271 == v149)
              goto LABEL_845;
            v272 = (unsigned __int8 *)v271->n128_u64[0];
            v273 = (char **)&object[8];
            i = (char **)&object[8];
          }
          while (!*(_QWORD *)&object[8]);
          v275 = *v272;
          v276 = *(char **)&object[8];
          do
          {
            while (1)
            {
              v273 = (char **)v276;
              v277 = v276[25];
              v278 = v275 >= v277;
              if (v275 != v277)
              {
                v279 = *v272;
                goto LABEL_759;
              }
              v279 = v272[1];
              v277 = *((unsigned __int8 *)v273 + 26);
              v278 = v279 >= v277;
              if (v279 == v277)
              {
                v279 = v272[2];
                v277 = *((unsigned __int8 *)v273 + 27);
                v278 = v279 >= v277;
                if (v279 == v277)
                {
                  v279 = v272[3];
                  v277 = *((unsigned __int8 *)v273 + 28);
                  v278 = v279 >= v277;
                  if (v279 == v277)
                  {
                    v279 = v272[4];
                    v277 = *((unsigned __int8 *)v273 + 29);
                    v278 = v279 >= v277;
                    if (v279 == v277)
                    {
                      v279 = v272[5];
                      v277 = *((unsigned __int8 *)v273 + 30);
                      v278 = v279 >= v277;
                      if (v279 == v277)
                        break;
                    }
                  }
                }
              }
LABEL_759:
              if (v278)
                goto LABEL_761;
LABEL_729:
              v276 = *v273;
              i = v273;
              if (!*v273)
                goto LABEL_764;
            }
            v280 = v272[6];
            v281 = *((unsigned __int8 *)v273 + 31);
            if (v280 != v281)
              goto LABEL_746;
            v280 = v272[7];
            v281 = *((unsigned __int8 *)v273 + 32);
            if (v280 != v281)
              goto LABEL_746;
            v280 = v272[8];
            v281 = *((unsigned __int8 *)v273 + 33);
            if (v280 != v281)
              goto LABEL_746;
            v280 = v272[9];
            v281 = *((unsigned __int8 *)v273 + 34);
            if (v280 != v281)
              goto LABEL_746;
            v280 = v272[10];
            v281 = *((unsigned __int8 *)v273 + 35);
            if (v280 != v281)
              goto LABEL_746;
            v280 = v272[11];
            v281 = *((unsigned __int8 *)v273 + 36);
            if (v280 != v281)
              goto LABEL_746;
            v280 = v272[12];
            v281 = *((unsigned __int8 *)v273 + 37);
            if (v280 != v281
              || (v280 = v272[13], v281 = *((unsigned __int8 *)v273 + 38), v280 != v281)
              || (v280 = v272[14], v281 = *((unsigned __int8 *)v273 + 39), v280 != v281)
              || (v280 = v272[15], v281 = *((unsigned __int8 *)v273 + 40), v280 != v281))
            {
LABEL_746:
              if (v280 < v281)
                goto LABEL_729;
            }
            v277 = *((unsigned __int8 *)v273 + 31);
            v279 = v272[6];
            if (v277 == v279)
            {
              v277 = *((unsigned __int8 *)v273 + 32);
              v279 = v272[7];
              if (v277 == v279)
              {
                v277 = *((unsigned __int8 *)v273 + 33);
                v279 = v272[8];
                if (v277 == v279)
                {
                  v277 = *((unsigned __int8 *)v273 + 34);
                  v279 = v272[9];
                  if (v277 == v279)
                  {
                    v277 = *((unsigned __int8 *)v273 + 35);
                    v279 = v272[10];
                    if (v277 == v279)
                    {
                      v277 = *((unsigned __int8 *)v273 + 36);
                      v279 = v272[11];
                      if (v277 == v279)
                      {
                        v277 = *((unsigned __int8 *)v273 + 37);
                        v279 = v272[12];
                        if (v277 == v279)
                        {
                          v277 = *((unsigned __int8 *)v273 + 38);
                          v279 = v272[13];
                          if (v277 == v279)
                          {
                            v277 = *((unsigned __int8 *)v273 + 39);
                            v279 = v272[14];
                            if (v277 == v279)
                            {
                              v277 = *((unsigned __int8 *)v273 + 40);
                              v279 = v272[15];
                              if (v277 == v279)
                              {
LABEL_769:
                                for (j = (__n128 *)&v271->n128_i8[8]; ; j = (__n128 *)((char *)j + 8))
                                {
                                  if (j == v149)
                                    goto LABEL_843;
                                  v285 = (unsigned __int8 *)j->n128_u64[0];
                                  v286 = (char **)&object[8];
                                  v287 = (char **)&object[8];
                                  if (*(_QWORD *)&object[8])
                                    break;
LABEL_815:
                                  v295 = (char *)operator new(0x30uLL);
                                  *(_OWORD *)(v295 + 25) = *(_OWORD *)v285;
                                  *(_QWORD *)v295 = 0;
                                  *((_QWORD *)v295 + 1) = 0;
                                  *((_QWORD *)v295 + 2) = v286;
                                  *v287 = v295;
                                  if (**(_QWORD **)object)
                                  {
                                    *(_QWORD *)object = **(_QWORD **)object;
                                    v295 = *v287;
                                  }
                                  v296 = *(_BYTE **)&object[8];
                                  v10 = v295 == *(char **)&object[8];
                                  v295[24] = v295 == *(char **)&object[8];
                                  if (!v10)
                                  {
                                    do
                                    {
                                      v297 = *((_QWORD *)v295 + 2);
                                      if (*(_BYTE *)(v297 + 24))
                                        break;
                                      v298 = *(_BYTE **)(v297 + 16);
                                      v299 = *(_QWORD *)v298;
                                      if (*(_QWORD *)v298 == v297)
                                      {
                                        v302 = *((_QWORD *)v298 + 1);
                                        if (!v302
                                          || (v303 = *(unsigned __int8 *)(v302 + 24), v300 = (_BYTE *)(v302 + 24), v303))
                                        {
                                          if (*(char **)v297 == v295)
                                          {
                                            *(_BYTE *)(v297 + 24) = 1;
                                            v298[24] = 0;
                                            v306 = *(_QWORD *)(v297 + 8);
                                            *(_QWORD *)v298 = v306;
                                            if (v306)
                                              goto LABEL_832;
                                          }
                                          else
                                          {
                                            v304 = *(uint64_t **)(v297 + 8);
                                            v305 = *v304;
                                            *(_QWORD *)(v297 + 8) = *v304;
                                            if (v305)
                                            {
                                              *(_QWORD *)(v305 + 16) = v297;
                                              v298 = *(_BYTE **)(v297 + 16);
                                            }
                                            v304[2] = (uint64_t)v298;
                                            *(_QWORD *)(*(_QWORD *)(v297 + 16) + 8
                                                                               * (**(_QWORD **)(v297 + 16) != v297)) = v304;
                                            *v304 = v297;
                                            *(_QWORD *)(v297 + 16) = v304;
                                            v298 = (_BYTE *)v304[2];
                                            v297 = *(_QWORD *)v298;
                                            *((_BYTE *)v304 + 24) = 1;
                                            v298[24] = 0;
                                            v306 = *(_QWORD *)(v297 + 8);
                                            *(_QWORD *)v298 = v306;
                                            if (v306)
LABEL_832:
                                              *(_QWORD *)(v306 + 16) = v298;
                                          }
                                          *(_QWORD *)(v297 + 16) = *((_QWORD *)v298 + 2);
                                          *(_QWORD *)(*((_QWORD *)v298 + 2)
                                                    + 8 * (**((_QWORD **)v298 + 2) != (_QWORD)v298)) = v297;
                                          *(_QWORD *)(v297 + 8) = v298;
LABEL_772:
                                          *((_QWORD *)v298 + 2) = v297;
                                          break;
                                        }
                                      }
                                      else if (!v299
                                             || (v301 = *(unsigned __int8 *)(v299 + 24),
                                                 v300 = (_BYTE *)(v299 + 24),
                                                 v301))
                                      {
                                        if (*(char **)v297 == v295)
                                        {
                                          v308 = *((_QWORD *)v295 + 1);
                                          *(_QWORD *)v297 = v308;
                                          if (v308)
                                          {
                                            *(_QWORD *)(v308 + 16) = v297;
                                            v298 = *(_BYTE **)(v297 + 16);
                                          }
                                          *((_QWORD *)v295 + 2) = v298;
                                          *(_QWORD *)(*(_QWORD *)(v297 + 16) + 8 * (**(_QWORD **)(v297 + 16) != v297)) = v295;
                                          *((_QWORD *)v295 + 1) = v297;
                                          *(_QWORD *)(v297 + 16) = v295;
                                          v298 = (_BYTE *)*((_QWORD *)v295 + 2);
                                          v295[24] = 1;
                                          v298[24] = 0;
                                          v297 = *((_QWORD *)v298 + 1);
                                          v307 = *(char **)v297;
                                          *((_QWORD *)v298 + 1) = *(_QWORD *)v297;
                                          if (!v307)
                                            goto LABEL_771;
                                        }
                                        else
                                        {
                                          *(_BYTE *)(v297 + 24) = 1;
                                          v298[24] = 0;
                                          v297 = *((_QWORD *)v298 + 1);
                                          v307 = *(char **)v297;
                                          *((_QWORD *)v298 + 1) = *(_QWORD *)v297;
                                          if (!v307)
                                            goto LABEL_771;
                                        }
                                        *((_QWORD *)v307 + 2) = v298;
LABEL_771:
                                        *(_QWORD *)(v297 + 16) = *((_QWORD *)v298 + 2);
                                        *(_QWORD *)(*((_QWORD *)v298 + 2)
                                                  + 8 * (**((_QWORD **)v298 + 2) != (_QWORD)v298)) = v297;
                                        *(_QWORD *)v297 = v298;
                                        goto LABEL_772;
                                      }
                                      *(_BYTE *)(v297 + 24) = 1;
                                      v295 = v298;
                                      v298[24] = v298 == v296;
                                      *v300 = 1;
                                    }
                                    while (v298 != v296);
                                  }
                                  *(_QWORD *)&object[16] = ++v283;
                                  v271->n128_u64[0] = j->n128_u64[0];
                                  v271 = (__n128 *)((char *)v271 + 8);
LABEL_774:
                                  ;
                                }
                                v288 = *v285;
                                v289 = *(char **)&object[8];
                                while (2)
                                {
                                  while (2)
                                  {
                                    v286 = (char **)v289;
                                    v290 = v289[25];
                                    v291 = v288 >= v290;
                                    if (v288 == v290)
                                    {
                                      v292 = v285[1];
                                      v290 = *((unsigned __int8 *)v286 + 26);
                                      v291 = v292 >= v290;
                                      if (v292 == v290)
                                      {
                                        v292 = v285[2];
                                        v290 = *((unsigned __int8 *)v286 + 27);
                                        v291 = v292 >= v290;
                                        if (v292 == v290)
                                        {
                                          v292 = v285[3];
                                          v290 = *((unsigned __int8 *)v286 + 28);
                                          v291 = v292 >= v290;
                                          if (v292 == v290)
                                          {
                                            v293 = v285[4];
                                            v294 = *((unsigned __int8 *)v286 + 29);
                                            if (v293 != v294)
                                              goto LABEL_795;
                                            v293 = v285[5];
                                            v294 = *((unsigned __int8 *)v286 + 30);
                                            if (v293 != v294)
                                              goto LABEL_795;
                                            v293 = v285[6];
                                            v294 = *((unsigned __int8 *)v286 + 31);
                                            if (v293 != v294)
                                              goto LABEL_795;
                                            v293 = v285[7];
                                            v294 = *((unsigned __int8 *)v286 + 32);
                                            if (v293 != v294)
                                              goto LABEL_795;
                                            v293 = v285[8];
                                            v294 = *((unsigned __int8 *)v286 + 33);
                                            if (v293 != v294)
                                              goto LABEL_795;
                                            v293 = v285[9];
                                            v294 = *((unsigned __int8 *)v286 + 34);
                                            if (v293 != v294)
                                              goto LABEL_795;
                                            v293 = v285[10];
                                            v294 = *((unsigned __int8 *)v286 + 35);
                                            if (v293 != v294)
                                              goto LABEL_795;
                                            v293 = v285[11];
                                            v294 = *((unsigned __int8 *)v286 + 36);
                                            if (v293 != v294)
                                              goto LABEL_795;
                                            v293 = v285[12];
                                            v294 = *((unsigned __int8 *)v286 + 37);
                                            if (v293 != v294
                                              || (v293 = v285[13], v294 = *((unsigned __int8 *)v286 + 38), v293 != v294)
                                              || (v293 = v285[14], v294 = *((unsigned __int8 *)v286 + 39), v293 != v294)
                                              || (v293 = v285[15], v294 = *((unsigned __int8 *)v286 + 40), v293 != v294))
                                            {
LABEL_795:
                                              if (v293 < v294)
                                              {
LABEL_778:
                                                v289 = *v286;
                                                v287 = v286;
                                                if (!*v286)
                                                  goto LABEL_815;
                                                continue;
                                              }
                                            }
                                            v290 = *((unsigned __int8 *)v286 + 29);
                                            v292 = v285[4];
                                            if (v290 == v292)
                                            {
                                              v290 = *((unsigned __int8 *)v286 + 30);
                                              v292 = v285[5];
                                              if (v290 == v292)
                                              {
                                                v290 = *((unsigned __int8 *)v286 + 31);
                                                v292 = v285[6];
                                                if (v290 == v292)
                                                {
                                                  v290 = *((unsigned __int8 *)v286 + 32);
                                                  v292 = v285[7];
                                                  if (v290 == v292)
                                                  {
                                                    v290 = *((unsigned __int8 *)v286 + 33);
                                                    v292 = v285[8];
                                                    if (v290 == v292)
                                                    {
                                                      v290 = *((unsigned __int8 *)v286 + 34);
                                                      v292 = v285[9];
                                                      if (v290 == v292)
                                                      {
                                                        v290 = *((unsigned __int8 *)v286 + 35);
                                                        v292 = v285[10];
                                                        if (v290 == v292)
                                                        {
                                                          v290 = *((unsigned __int8 *)v286 + 36);
                                                          v292 = v285[11];
                                                          if (v290 == v292)
                                                          {
                                                            v290 = *((unsigned __int8 *)v286 + 37);
                                                            v292 = v285[12];
                                                            if (v290 == v292)
                                                            {
                                                              v290 = *((unsigned __int8 *)v286 + 38);
                                                              v292 = v285[13];
                                                              if (v290 == v292)
                                                              {
                                                                v290 = *((unsigned __int8 *)v286 + 39);
                                                                v292 = v285[14];
                                                                if (v290 == v292)
                                                                {
                                                                  v290 = *((unsigned __int8 *)v286 + 40);
                                                                  v292 = v285[15];
                                                                  if (v290 == v292)
                                                                    goto LABEL_774;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            goto LABEL_812;
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      v292 = *v285;
                                    }
                                    break;
                                  }
                                  if (!v291)
                                    goto LABEL_778;
LABEL_812:
                                  if (v290 >= v292)
                                    goto LABEL_774;
                                  v289 = v286[1];
                                  if (!v289)
                                  {
                                    v287 = v286 + 1;
                                    goto LABEL_815;
                                  }
                                  continue;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_761:
            if (v277 >= v279)
              goto LABEL_769;
            v276 = v273[1];
          }
          while (v276);
        }
      }
LABEL_843:
      if (v271 != v149)
        v149 = v271;
LABEL_845:
      sub_223198030((uint64_t)object, *(_QWORD **)&object[8]);
      v309 = (char *)v149 - v438;
      if ((unint64_t)((char *)v149 - v438) >= 9)
      {
        v310 = v309 >> 3;
        if (v309 < 1025)
        {
LABEL_850:
          v314 = v438;
          sub_2236D1E98(v438, v149, v310, 0, 0);
        }
        else
        {
          v311 = v309 >> 3;
          while (1)
          {
            v312 = (char *)operator new(8 * v311, MEMORY[0x24BEDB6B8]);
            if (v312)
              break;
            v313 = v311 > 1;
            v311 >>= 1;
            if (!v313)
              goto LABEL_850;
          }
          v315 = v312;
          v314 = v438;
          sub_2236D1E98(v438, v149, v310, v312, v311);
          operator delete(v315);
        }
        for (k = (uint64_t *)(v314 + 8); k != (uint64_t *)v149; ++k)
        {
          v317 = (uint64_t *)*k;
          sub_2236CE7A8(a1, *(_OWORD **)v438, *k, a2, (uint64_t)object);
          sub_2236D2F4C(a5, (uint64_t)object);
          if (v549)
          {
            v550 = (unint64_t)v549;
            operator delete(v549);
          }
          sub_223198030((uint64_t)v548, *(_QWORD **)&v548[8]);
          sub_223198030((uint64_t)object, *(_QWORD **)&object[8]);
          sub_22372D6F4(*a1, *v317, v317[1]);
        }
      }
      if (v438 == (char *)v149)
      {
        v589 = (char *)*a4;
        sub_2232D69F0((unsigned int *)object, (uint64_t *)&v589);
        *(_QWORD *)&v448 = (*(unsigned int *)object | ((unint64_t)object[4] << 32) | ((unint64_t)object[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)object[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&object[4]) & 0xF | 0x40u) << 48);
        *((_QWORD *)&v448 + 1) = ((unint64_t)object[12] << 32) | ((unint64_t)object[13] << 40) | *(_DWORD *)&object[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&object[12] << 32) & 0xFF00000000000000 | ((unint64_t)object[14] << 48) | object[8] & 0x3F | 0x80;
        v318 = *a1;
        v319 = operator new();
        sub_22369F940(v319, &v448, a2);
        *(_QWORD *)object = v319;
        v435 = sub_223729D64((uint64_t)v318, (unsigned __int8 **)object);
        v320 = *(_QWORD *)object;
        *(_QWORD *)object = 0;
        if (v320)
          sub_2236C86D0((uint64_t)object, v320);
      }
      else
      {
        v435 = *(_QWORD *)v438;
      }
      v322 = *v431;
      v321 = v431[1];
      v433 = v321;
      if (*v431 != v321)
      {
        while (1)
        {
          v324 = *v322;
          v325 = v322[1];
          LODWORD(v567[0]) = *((_DWORD *)v322 + 8);
          v565 = v324;
          v566 = v325;
          if (!(_DWORD)v325)
          {
            v335 = *(_QWORD **)(v435 + 240);
            v336 = *(_QWORD **)(v435 + 248);
            if (v335 != v336)
            {
              while (*v335 != (_QWORD)v565 || v335[1] != *((_QWORD *)&v565 + 1))
              {
                v335 += 2;
                if (v335 == v336)
                {
                  v335 = *(_QWORD **)(v435 + 248);
                  break;
                }
              }
            }
            if (v335 == v336)
            {
              v338 = sub_22342DA5C(*a1, (uint64_t)&v566 + 4);
              if (v338)
              {
                v339 = v338[4];
                v340 = *(_QWORD **)(v339 + 208);
                v341 = *(_QWORD **)(v339 + 216);
                if (v340 != v341)
                {
                  while (*v340 != (_QWORD)v565 || v340[1] != *((_QWORD *)&v565 + 1))
                  {
                    v340 += 53;
                    if (v340 == v341)
                      goto LABEL_865;
                  }
                }
                if (v340 != v341)
                {
                  v343 = *a1;
                  *(_QWORD *)object = v435;
                  *(_QWORD *)&object[8] = v339;
                  sub_223731730((uint64_t)v343, (uint64_t)&v565, (unsigned __int8 **)object);
                }
              }
            }
            goto LABEL_865;
          }
          if ((_DWORD)v325 == 1)
            break;
LABEL_865:
          v322 = (__int128 *)((char *)v322 + 36);
          if (v322 == v321)
            goto LABEL_862;
        }
        v326 = atomic_load((unsigned __int8 *)&qword_2540CC050);
        if ((v326 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC050))
        {
          sub_22455F53C(&v448);
          sub_223174DE4(object, "cv3d.recon.kfplanes");
          sub_2232300E0((uint64_t **)&v448, (uint64_t)object, &qword_2540CC048);
          if ((object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_guard_release(&qword_2540CC050);
          a5 = v427;
        }
        v559 = (const char *)qword_2540CC048;
        if (**(int **)(qword_2540CC048 + 56) > 3)
          goto LABEL_1017;
        v327 = *(unsigned __int8 *)(qword_2540CC048 + 72);
        v328 = sub_22322F254(qword_2540CC048, "OSLogSurrogateAppender", 1, 0);
        v329 = v328;
        if (!v327 && v328 == 0)
          goto LABEL_1017;
        *(_QWORD *)&v448 = &v559;
        *((std::chrono::steady_clock::time_point *)&v448 + 1) = std::chrono::steady_clock::now();
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v450 = 3;
        v451 = "unknown file";
        v452 = 133;
        v453 = "unknown function";
        v454 = 0;
        v455 = 0;
        sub_2245664AC((unsigned __int8 *)&v565, __s);
        sub_2245664AC((unsigned __int8 *)v435, &v571);
        v541 = &v571;
        v331 = *(_QWORD *)v448;
        v332 = (const char *)(*(_QWORD *)v448 + 16);
        v430 = v332;
        if (*(char *)(*(_QWORD *)v448 + 39) < 0)
        {
          v332 = *(const char **)(v331 + 16);
          v333 = *(_QWORD *)(v331 + 24);
          v344 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v344 & 1) == 0)
          {
LABEL_1024:
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v589);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v589, &xmmword_255788F40);
              if ((_BYTE)v591 && SHIBYTE(v590) < 0)
                operator delete(v589);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
              a5 = v427;
            }
          }
        }
        else
        {
          v333 = *(unsigned __int8 *)(*(_QWORD *)v448 + 39);
          v334 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v334 & 1) == 0)
            goto LABEL_1024;
        }
        if (byte_255788F57 >= 0)
          v345 = (const char *)&xmmword_255788F40;
        else
          v345 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v346 = byte_255788F57;
        else
          v346 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v345, v332);
        if (v346 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v346 >= 0x17)
        {
          v348 = (v346 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v346 | 7) != 0x17)
            v348 = v346 | 7;
          v349 = v348 + 1;
          v347 = operator new(v348 + 1);
          *(_QWORD *)v548 = v349 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v347;
          *(_QWORD *)&object[16] = v346;
          a5 = v427;
        }
        else
        {
          v548[7] = v346;
          v347 = &object[8];
          if (!v346)
          {
LABEL_909:
            v347[v346] = 0;
            v548[8] = 1;
            if (v333 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v333 >= 0x17)
            {
              v352 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v333 | 7) != 0x17)
                v352 = v333 | 7;
              v353 = v352 + 1;
              v350 = operator new(v352 + 1);
              v550 = v353 | 0x8000000000000000;
              *(_QWORD *)&v548[16] = v350;
              v549 = (void *)v333;
            }
            else
            {
              HIBYTE(v550) = v333;
              v350 = &v548[16];
              if (!v333)
              {
                v548[16] = 0;
                LOBYTE(v551) = 1;
                v351 = *(NSObject **)object;
                if ((SHIBYTE(v550) & 0x80000000) == 0)
                  goto LABEL_913;
LABEL_919:
                operator delete(*(void **)&v548[16]);
                if (v548[8])
                  goto LABEL_920;
                goto LABEL_922;
              }
            }
            memmove(v350, v332, v333);
            v350[v333] = 0;
            LOBYTE(v551) = 1;
            v351 = *(NSObject **)object;
            if (SHIBYTE(v550) < 0)
              goto LABEL_919;
LABEL_913:
            if (v548[8])
            {
LABEL_920:
              if ((v548[7] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
            }
LABEL_922:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v329 && *(_QWORD *)(v329 + 24))
            {
              v354 = _os_log_pack_size();
              v355 = (std::__shared_weak_count_vtbl *)operator new(v354, (std::align_val_t)8uLL);
              v356 = (std::__shared_weak_count *)operator new();
              v356->__shared_owners_ = 0;
              v357 = (unint64_t *)&v356->__shared_owners_;
              v356->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v356->__shared_weak_owners_ = 0;
              v356[1].__vftable = v355;
              v581 = (uint64_t)v355;
              v582 = v355;
              v583 = v356;
              v584 = 0;
              v585[0] = 0;
              sub_2236D2CBC((uint64_t)object, __s, (const char **)&v541);
              v358 = (char *)operator new(0x50uLL);
              v359 = (std::__shared_weak_count *)v358;
              *((_QWORD *)v358 + 1) = 0;
              v360 = (unint64_t *)(v358 + 8);
              *((_QWORD *)v358 + 2) = 0;
              *(_QWORD *)v358 = &off_24EC20730;
              *((_QWORD *)v358 + 3) = off_24EC20780;
              *((_OWORD *)v358 + 2) = *(_OWORD *)&object[8];
              *((_QWORD *)v358 + 6) = *(_QWORD *)v548;
              *(_OWORD *)(v358 + 56) = *(_OWORD *)&v548[8];
              *((_QWORD *)v358 + 9) = v549;
              v584 = v358 + 24;
              v585[0] = v358;
              v589 = (char *)v355;
              *(_QWORD *)&v590 = v355;
              *((_QWORD *)&v590 + 1) = v356;
              do
                v361 = __ldxr(v357);
              while (__stxr(v361 + 1, v357));
              *(_QWORD *)&v591 = v358 + 24;
              *((_QWORD *)&v591 + 1) = v358;
              do
                v362 = __ldxr(v360);
              while (__stxr(v362 + 1, v360));
              v592 = v358 + 24;
              a5 = v427;
              do
                v363 = __ldaxr(v360);
              while (__stlxr(v363 - 1, v360));
              if (v363)
              {
                v364 = v583;
                if (!v583)
                  goto LABEL_942;
              }
              else
              {
                (*(void (**)(char *))(*(_QWORD *)v358 + 16))(v358);
                std::__shared_weak_count::__release_weak(v359);
                v364 = v583;
                if (!v583)
                  goto LABEL_942;
              }
              v366 = (unint64_t *)&v364->__shared_owners_;
              do
                v367 = __ldaxr(v366);
              while (__stlxr(v367 - 1, v366));
              if (!v367)
              {
                ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                std::__shared_weak_count::__release_weak(v364);
              }
LABEL_942:
              v368 = v589;
              if (v592[31] >= 0)
                v369 = v592 + 8;
              else
                v369 = (char *)*((_QWORD *)v592 + 1);
              if (v592[55] >= 0)
                v370 = v592 + 32;
              else
                v370 = (char *)*((_QWORD *)v592 + 4);
              v371 = _os_log_pack_fill();
              *(_DWORD *)v371 = 68158466;
              *(_DWORD *)(v371 + 4) = 13;
              *(_WORD *)(v371 + 8) = 2080;
              *(_QWORD *)(v371 + 10) = v369;
              *(_WORD *)(v371 + 18) = 1040;
              *(_DWORD *)(v371 + 20) = 13;
              *(_WORD *)(v371 + 24) = 2080;
              *(_QWORD *)(v371 + 26) = v370;
              v372 = operator new();
              v373 = *(unsigned __int8 *)(v331 + 39);
              v374 = v430;
              if ((v373 & 0x80u) != 0)
              {
                v374 = *(const char **)(v331 + 16);
                v373 = *(_QWORD *)(v331 + 24);
              }
              *(_QWORD *)v372 = v368;
              *(_OWORD *)(v372 + 8) = v590;
              v590 = 0uLL;
              *(_OWORD *)(v372 + 24) = v591;
              v591 = 0uLL;
              *(_QWORD *)(v372 + 40) = v374;
              *(_QWORD *)(v372 + 48) = v373;
              *(_BYTE *)(v372 + 56) = 1;
              v581 = 0;
              *(_QWORD *)object = v372;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v329 + 24) + 40))(*(_QWORD *)(v329 + 24), object);
              v375 = *(_QWORD *)object;
              *(_QWORD *)object = 0;
              if (v375)
              {
                v376 = *(std::__shared_weak_count **)(v375 + 32);
                if (!v376)
                  goto LABEL_955;
                v377 = (unint64_t *)&v376->__shared_owners_;
                do
                  v378 = __ldaxr(v377);
                while (__stlxr(v378 - 1, v377));
                if (!v378)
                {
                  ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                  std::__shared_weak_count::__release_weak(v376);
                  v379 = *(std::__shared_weak_count **)(v375 + 16);
                  if (v379)
                  {
LABEL_956:
                    v380 = (unint64_t *)&v379->__shared_owners_;
                    do
                      v381 = __ldaxr(v380);
                    while (__stlxr(v381 - 1, v380));
                    if (!v381)
                    {
                      ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                      std::__shared_weak_count::__release_weak(v379);
                    }
                  }
                }
                else
                {
LABEL_955:
                  v379 = *(std::__shared_weak_count **)(v375 + 16);
                  if (v379)
                    goto LABEL_956;
                }
                MEMORY[0x227684CE8](v375, 0x10F0C40B62ED6C6);
                v382 = v581;
                v581 = 0;
                if (v382)
                {
                  v383 = *(std::__shared_weak_count **)(v382 + 32);
                  if (!v383)
                    goto LABEL_966;
                  v384 = (unint64_t *)&v383->__shared_owners_;
                  do
                    v385 = __ldaxr(v384);
                  while (__stlxr(v385 - 1, v384));
                  if (!v385)
                  {
                    ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                    std::__shared_weak_count::__release_weak(v383);
                    v386 = *(std::__shared_weak_count **)(v382 + 16);
                    if (v386)
                    {
LABEL_967:
                      v387 = (unint64_t *)&v386->__shared_owners_;
                      do
                        v388 = __ldaxr(v387);
                      while (__stlxr(v388 - 1, v387));
                      if (!v388)
                      {
                        ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
                        std::__shared_weak_count::__release_weak(v386);
                      }
                    }
                  }
                  else
                  {
LABEL_966:
                    v386 = *(std::__shared_weak_count **)(v382 + 16);
                    if (v386)
                      goto LABEL_967;
                  }
                  MEMORY[0x227684CE8](v382, 0x10F0C40B62ED6C6);
                }
              }
              v389 = (std::__shared_weak_count *)*((_QWORD *)&v591 + 1);
              if (!*((_QWORD *)&v591 + 1))
                goto LABEL_977;
              v390 = (unint64_t *)(*((_QWORD *)&v591 + 1) + 8);
              do
                v391 = __ldaxr(v390);
              while (__stlxr(v391 - 1, v390));
              if (!v391)
              {
                ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
                std::__shared_weak_count::__release_weak(v389);
                v392 = (std::__shared_weak_count *)*((_QWORD *)&v590 + 1);
                if (*((_QWORD *)&v590 + 1))
                {
LABEL_978:
                  v393 = (unint64_t *)&v392->__shared_owners_;
                  do
                    v394 = __ldaxr(v393);
                  while (__stlxr(v394 - 1, v393));
                  if (!v394)
                  {
                    ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                    std::__shared_weak_count::__release_weak(v392);
                  }
                }
              }
              else
              {
LABEL_977:
                v392 = (std::__shared_weak_count *)*((_QWORD *)&v590 + 1);
                if (*((_QWORD *)&v590 + 1))
                  goto LABEL_978;
              }
            }
            else
            {
              os_log_type_enabled(v351, OS_LOG_TYPE_INFO);
              *(_QWORD *)object = 0xD04100402;
              *(_WORD *)&object[8] = 2080;
              *(_QWORD *)&object[10] = __s;
              *(_WORD *)&object[18] = 1040;
              *(_DWORD *)&object[20] = 13;
              *(_WORD *)v548 = 2080;
              *(_QWORD *)&v548[2] = v541;
              v365 = (void *)_os_log_send_and_compose_impl();
              if (v365)
                free(v365);
            }
            if (v327)
            {
              sub_2245664AC((unsigned __int8 *)&v565, object);
              sub_2245664AC((unsigned __int8 *)v435, &v589);
              sub_22322C138((uint64_t)&v448, "Unlinking merged KF plane %.13s from global plane %.13s", object, (const char *)&v589);
              sub_223182C08((uint64_t)&v448);
            }
            v395 = (uint64_t *)v448;
            if ((_QWORD)v448)
            {
              v396 = v454;
              if (v454)
              {
                v397 = (_QWORD *)(*(_QWORD *)v448 + 16);
                if (*(char *)(*(_QWORD *)v448 + 39) < 0)
                  v397 = (_QWORD *)*v397;
                v398 = *((_QWORD *)&v448 + 1);
                v399 = rep;
                v400 = v450;
                v401 = v451;
                v402 = v452;
                v403 = v453;
                v404 = v455;
                v589 = (char *)v454;
                *(_QWORD *)&v590 = v455;
                if (v455)
                {
                  v405 = (unint64_t *)&v455->__shared_owners_;
                  do
                    v406 = __ldxr(v405);
                  while (__stxr(v406 + 1, v405));
                  *(_QWORD *)&object[8] = v398;
                  *(_QWORD *)&object[16] = v399;
                  *(_DWORD *)v548 = v400;
                  *(_QWORD *)&v548[8] = v401;
                  *(_DWORD *)&v548[16] = v402;
                  v549 = v403;
                  v550 = (unint64_t)v396;
                  v551 = v404;
                  do
                    v407 = __ldxr(v405);
                  while (__stxr(v407 + 1, v405));
                  *(_QWORD *)object = v397;
                  v408 = *v395;
                  if (v400 < **(_DWORD **)(*v395 + 56))
                  {
LABEL_995:
                    if (!v404)
                      goto LABEL_1002;
LABEL_999:
                    v409 = (unint64_t *)&v404->__shared_owners_;
                    do
                      v410 = __ldaxr(v409);
                    while (__stlxr(v410 - 1, v409));
                    if (v410)
                    {
LABEL_1002:
                      v411 = (std::__shared_weak_count *)v590;
                      if ((_QWORD)v590)
                        goto LABEL_1003;
                    }
                    else
                    {
                      ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                      std::__shared_weak_count::__release_weak(v404);
                      v411 = (std::__shared_weak_count *)v590;
                      if ((_QWORD)v590)
                      {
LABEL_1003:
                        v412 = (unint64_t *)&v411->__shared_owners_;
                        do
                          v413 = __ldaxr(v412);
                        while (__stlxr(v413 - 1, v412));
                        if (!v413)
                        {
                          ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                          std::__shared_weak_count::__release_weak(v411);
                        }
                      }
                    }
                    v414 = v455;
                    v455 = 0;
                    v454 = 0;
                    if (!v414)
                      goto LABEL_1017;
                    v415 = (unint64_t *)&v414->__shared_owners_;
                    do
                      v416 = __ldaxr(v415);
                    while (__stlxr(v416 - 1, v415));
                    if (v416)
                      goto LABEL_1012;
                    ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
                    std::__shared_weak_count::__release_weak(v414);
                    v417 = v455;
                    if (!v455)
                    {
LABEL_1017:
                      sub_22372C314((uint64_t)*a1, (unsigned __int8 *)&v565, (uint64_t)object);
                      v321 = v433;
                      goto LABEL_865;
                    }
LABEL_1013:
                    v418 = (unint64_t *)&v417->__shared_owners_;
                    do
                      v419 = __ldaxr(v418);
                    while (__stlxr(v419 - 1, v418));
                    if (!v419)
                    {
                      ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
                      std::__shared_weak_count::__release_weak(v417);
                    }
                    goto LABEL_1017;
                  }
                }
                else
                {
                  *(_QWORD *)&object[8] = *((_QWORD *)&v448 + 1);
                  *(_QWORD *)&object[16] = rep;
                  *(_DWORD *)v548 = v450;
                  *(_QWORD *)&v548[8] = v451;
                  *(_DWORD *)&v548[16] = v452;
                  v549 = v453;
                  v550 = (unint64_t)v454;
                  v551 = 0;
                  *(_QWORD *)object = v397;
                  v408 = *(_QWORD *)v448;
                  if (v450 < **(_DWORD **)(*(_QWORD *)v448 + 56))
                    goto LABEL_995;
                }
                sub_22323003C(v408, (uint64_t)object);
                v404 = v551;
                if (!v551)
                  goto LABEL_1002;
                goto LABEL_999;
              }
            }
LABEL_1012:
            v417 = v455;
            if (!v455)
              goto LABEL_1017;
            goto LABEL_1013;
          }
        }
        memmove(v347, v345, v346);
        goto LABEL_909;
      }
LABEL_862:
      *(_QWORD *)object = v435;
      v323 = sub_2231A9C40((uint64_t **)a5, (unsigned __int8 *)v435, (uint64_t)&unk_2245BA939, (_OWORD **)object);
      *((_DWORD *)v323 + 11) |= 2u;
      if (v438)
        operator delete(v438);
      ++v428;
      v431 += 3;
      if (v431 == v426)
      {
        v6 = (__int128 **)v440;
        goto LABEL_1035;
      }
    }
    v429 = v13;
    v20 = v9;
    v21 = v12;
    v22 = v7;
    v23 = v11;
    v24 = v15;
    v25 = v14;
    v26 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v26 = v18 | 7;
    v27 = v26 + 1;
    v19 = operator new(v26 + 1);
    *(_QWORD *)v548 = v27 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v19;
    *(_QWORD *)&object[16] = v18;
    v14 = v25;
    v15 = v24;
    v11 = v23;
    v7 = v22;
    v12 = v21;
    v9 = v20;
    v13 = v429;
LABEL_26:
    memmove(v19, v17, v18);
    goto LABEL_27;
  }
LABEL_1035:
  if (v6)
  {
    v420 = v441;
    v421 = v6;
    if (v441 != v6)
    {
      v422 = v441;
      do
      {
        v424 = *(v422 - 3);
        v422 -= 3;
        v423 = (__int128 *)v424;
        if (v424)
        {
          *(v420 - 2) = v423;
          operator delete(v423);
        }
        v420 = v422;
      }
      while (v422 != v6);
      v421 = v440;
    }
    v441 = v6;
    operator delete(v421);
  }
}

void sub_2236CD368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;

  if (*(_BYTE *)(v63 - 168))
  {
    if (*(char *)(v63 - 169) < 0)
      operator delete(*(void **)(v63 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x380]);
  sub_2236C4000(a63);
  sub_22317C838((void **)&STACK[0x318]);
  _Unwind_Resume(a1);
}

void sub_2236CD52C(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    sub_223197DCC((uint64_t)&STACK[0x900]);
    sub_223167354(v2 - 192);
    sub_22316DC48(a1);
  }
  JUMPOUT(0x2236CE54CLL);
}

void sub_2236CD54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;

  MEMORY[0x227684CE8](v63, 0x1022C404BCC7DC6);
  if (STACK[0x308])
  {
    operator delete((void *)STACK[0x308]);
    sub_2236C4000(a63);
    sub_22317C838((void **)&STACK[0x318]);
    _Unwind_Resume(a1);
  }
  sub_2236C4000(a63);
  sub_22317C838((void **)&STACK[0x318]);
  JUMPOUT(0x2236CE54CLL);
}

void sub_2236CD570()
{
  uint64_t v0;

  v0 = STACK[0x900];
  STACK[0x900] = 0;
  if (v0)
    sub_2236C86D0((uint64_t)&STACK[0x900], v0);
  if (!STACK[0x308])
    JUMPOUT(0x2236CE53CLL);
  JUMPOUT(0x2236CDE98);
}

void sub_2236CDBE0()
{
  if (SLOBYTE(STACK[0x91F]) < 0)
    operator delete((void *)STACK[0x908]);
  if (STACK[0x900])
    os_release((void *)STACK[0x900]);
  sub_223182DAC((uint64_t)&STACK[0x380]);
  JUMPOUT(0x2236CDE6CLL);
}

void sub_2236CDBF4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = STACK[0x870];
  if (STACK[0x870] == STACK[0x230])
  {
    v2 = 4;
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    v2 = 5;
    STACK[0x230] = v1;
  }
  (*(void (**)(void))(*(_QWORD *)STACK[0x230] + 8 * v2))();
LABEL_6:
  v3 = STACK[0x8C8];
  if (STACK[0x8C8] == STACK[0x238])
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_11;
    v4 = 5;
    STACK[0x238] = v3;
  }
  (*(void (**)(void))(*(_QWORD *)STACK[0x238] + 8 * v4))();
LABEL_11:
  v5 = *(_QWORD *)(v0 - 112);
  if (v5 == STACK[0x2A0])
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_16;
    v6 = 5;
    STACK[0x2A0] = v5;
  }
  (*(void (**)(void))(*(_QWORD *)STACK[0x2A0] + 8 * v6))();
LABEL_16:
  v7 = *(_QWORD *)(v0 - 160);
  if (v7 == STACK[0x288])
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_21;
    v8 = 5;
    STACK[0x288] = v7;
  }
  (*(void (**)(void))(*(_QWORD *)STACK[0x288] + 8 * v8))();
LABEL_21:
  JUMPOUT(0x2236CDCD0);
}

void sub_2236CDDD0()
{
  JUMPOUT(0x2236CE464);
}

void sub_2236CDDD8()
{
  JUMPOUT(0x2236CDDE8);
}

void sub_2236CDE20(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2236CDE54()
{
  if (!STACK[0x308])
    JUMPOUT(0x2236CE53CLL);
  JUMPOUT(0x2236CDE98);
}

void sub_2236CDE5C()
{
  _QWORD *v0;

  sub_223198030((uint64_t)&STACK[0x900], v0);
  JUMPOUT(0x2236CDE6CLL);
}

void sub_2236CDE7C()
{
  JUMPOUT(0x2236CDE98);
}

void sub_2236CDEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *a31,_QWORD *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,_QWORD *a47,uint64_t a48,uint64_t a49,uint64_t a50,_QWORD *a51,_QWORD *a52,_QWORD *a53,_QWORD *a54,_QWORD *a55,_QWORD *a56,_QWORD *a57,_QWORD *a58,uint64_t a59,_QWORD *a60)
{
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  if ((_QWORD *)STACK[0x7F0] == a47)
  {
    v64 = 4;
  }
  else
  {
    if (!STACK[0x7F0])
      goto LABEL_6;
    v64 = 5;
    a47 = (_QWORD *)STACK[0x7F0];
  }
  (*(void (**)(void))(*a47 + 8 * v64))();
LABEL_6:
  if ((_QWORD *)STACK[0x7C0] == a31)
  {
    v65 = 4;
  }
  else
  {
    if (!STACK[0x7C0])
      goto LABEL_11;
    v65 = 5;
    a31 = (_QWORD *)STACK[0x7C0];
  }
  (*(void (**)(void))(*a31 + 8 * v65))();
LABEL_11:
  if ((_QWORD *)STACK[0x848] == a32)
  {
    v66 = 4;
  }
  else
  {
    if (!STACK[0x848])
      goto LABEL_16;
    v66 = 5;
    a32 = (_QWORD *)STACK[0x848];
  }
  (*(void (**)(void))(*a32 + 8 * v66))();
LABEL_16:
  if ((_QWORD *)STACK[0x818] == v63)
  {
    v67 = 4;
  }
  else
  {
    if (!STACK[0x818])
      goto LABEL_21;
    v67 = 5;
    v63 = (_QWORD *)STACK[0x818];
  }
  (*(void (**)(_QWORD *))(*v63 + 8 * v67))(v63);
LABEL_21:
  v68 = STACK[0x9A8];
  if (STACK[0x9A8] == STACK[0x268])
  {
    v69 = 4;
  }
  else
  {
    if (!v68)
      goto LABEL_26;
    v69 = 5;
    STACK[0x268] = v68;
  }
  (*(void (**)(void))(*(_QWORD *)STACK[0x268] + 8 * v69))();
LABEL_26:
  v70 = STACK[0x978];
  if (STACK[0x978] == STACK[0x270])
  {
    v71 = 4;
  }
  else
  {
    if (!v70)
      goto LABEL_31;
    v71 = 5;
    STACK[0x270] = v70;
  }
  (*(void (**)(void))(*(_QWORD *)STACK[0x270] + 8 * v71))();
LABEL_31:
  v72 = STACK[0x950];
  if (STACK[0x950] == STACK[0x2A8])
  {
    v73 = 4;
  }
  else
  {
    if (!v72)
      goto LABEL_36;
    v73 = 5;
    STACK[0x2A8] = v72;
  }
  (*(void (**)(void))(*(_QWORD *)STACK[0x2A8] + 8 * v73))();
LABEL_36:
  v74 = (_QWORD *)STACK[0x920];
  if (STACK[0x920] == STACK[0x300])
  {
    v75 = 4;
    v74 = (_QWORD *)STACK[0x300];
  }
  else
  {
    if (!v74)
      goto LABEL_41;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_41:
  if ((_QWORD *)STACK[0x740] == a51)
  {
    v76 = 4;
  }
  else
  {
    if (!STACK[0x740])
      goto LABEL_46;
    v76 = 5;
    a51 = (_QWORD *)STACK[0x740];
  }
  (*(void (**)(void))(*a51 + 8 * v76))();
LABEL_46:
  if ((_QWORD *)STACK[0x710] == a52)
  {
    v77 = 4;
  }
  else
  {
    if (!STACK[0x710])
      goto LABEL_51;
    v77 = 5;
    a52 = (_QWORD *)STACK[0x710];
  }
  (*(void (**)(void))(*a52 + 8 * v77))();
LABEL_51:
  if ((_QWORD *)STACK[0x798] == a53)
  {
    v78 = 4;
  }
  else
  {
    if (!STACK[0x798])
      goto LABEL_56;
    v78 = 5;
    a53 = (_QWORD *)STACK[0x798];
  }
  (*(void (**)(void))(*a53 + 8 * v78))();
LABEL_56:
  if ((_QWORD *)STACK[0x768] == a54)
  {
    v79 = 4;
  }
  else
  {
    if (!STACK[0x768])
      goto LABEL_61;
    v79 = 5;
    a54 = (_QWORD *)STACK[0x768];
  }
  (*(void (**)(void))(*a54 + 8 * v79))();
LABEL_61:
  if ((_QWORD *)STACK[0x690] == a55)
  {
    v80 = 4;
  }
  else
  {
    if (!STACK[0x690])
      goto LABEL_66;
    v80 = 5;
    a55 = (_QWORD *)STACK[0x690];
  }
  (*(void (**)(void))(*a55 + 8 * v80))();
LABEL_66:
  if ((_QWORD *)STACK[0x660] == a56)
  {
    v81 = 4;
  }
  else
  {
    if (!STACK[0x660])
      goto LABEL_71;
    v81 = 5;
    a56 = (_QWORD *)STACK[0x660];
  }
  (*(void (**)(void))(*a56 + 8 * v81))();
LABEL_71:
  if ((_QWORD *)STACK[0x6E8] == a57)
  {
    v82 = 4;
  }
  else
  {
    if (!STACK[0x6E8])
      goto LABEL_76;
    v82 = 5;
    a57 = (_QWORD *)STACK[0x6E8];
  }
  (*(void (**)(void))(*a57 + 8 * v82))();
LABEL_76:
  if ((_QWORD *)STACK[0x6B8] == a58)
  {
    v83 = 4;
  }
  else
  {
    if (!STACK[0x6B8])
      goto LABEL_81;
    v83 = 5;
    a58 = (_QWORD *)STACK[0x6B8];
  }
  (*(void (**)(void))(*a58 + 8 * v83))();
LABEL_81:
  operator delete((void *)STACK[0x308]);
  if ((_QWORD *)STACK[0x530] == a60)
  {
    v84 = 4;
  }
  else
  {
    if (!STACK[0x530])
      goto LABEL_86;
    v84 = 5;
    a60 = (_QWORD *)STACK[0x530];
  }
  (*(void (**)(void))(*a60 + 8 * v84))();
LABEL_86:
  if ((_QWORD *)STACK[0x500] == v62)
  {
    v85 = 4;
  }
  else
  {
    if (!STACK[0x500])
      goto LABEL_91;
    v85 = 5;
    v62 = (_QWORD *)STACK[0x500];
  }
  (*(void (**)(_QWORD *))(*v62 + 8 * v85))(v62);
LABEL_91:
  if ((_QWORD *)STACK[0x588] == v61)
  {
    v86 = 4;
  }
  else
  {
    if (!STACK[0x588])
      goto LABEL_96;
    v86 = 5;
    v61 = (_QWORD *)STACK[0x588];
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v86))(v61);
LABEL_96:
  if (STACK[0x558] != v60 && !STACK[0x558])
    JUMPOUT(0x2236CE464);
  JUMPOUT(0x2236CE454);
}

void sub_2236CE2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a67;
  _QWORD *a68;
  _QWORD *a69;
  _QWORD *a70;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;

  v74 = a69;
  v75 = (_QWORD *)STACK[0x300];
  v76 = a67;
  v77 = *(_QWORD *)(v73 - 112);
  if (v77 == STACK[0x2A0])
  {
    v78 = 4;
  }
  else
  {
    if (!v77)
      goto LABEL_6;
    v78 = 5;
    STACK[0x2A0] = v77;
  }
  (*(void (**)(void))(*(_QWORD *)STACK[0x2A0] + 8 * v78))();
LABEL_6:
  v79 = *(_QWORD **)(v73 - 160);
  if (v79 == v71)
  {
    v80 = 4;
  }
  else
  {
    if (!v79)
      goto LABEL_11;
    v80 = 5;
    v71 = *(_QWORD **)(v73 - 160);
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v80))(v71);
LABEL_11:
  v81 = STACK[0x950];
  if (STACK[0x950] == STACK[0x2A8])
  {
    v82 = 4;
  }
  else
  {
    if (!v81)
      goto LABEL_16;
    v82 = 5;
    STACK[0x2A8] = v81;
  }
  (*(void (**)(void))(*(_QWORD *)STACK[0x2A8] + 8 * v82))();
LABEL_16:
  if ((_QWORD *)STACK[0x920] == v75)
  {
    v83 = 4;
  }
  else
  {
    if (!STACK[0x920])
      goto LABEL_21;
    v83 = 5;
    v75 = (_QWORD *)STACK[0x920];
  }
  (*(void (**)(_QWORD *))(*v75 + 8 * v83))(v75);
LABEL_21:
  v84 = a68;
  if ((_QWORD *)STACK[0x5E0] == a70)
  {
    v85 = 4;
  }
  else
  {
    if (!STACK[0x5E0])
      goto LABEL_26;
    v85 = 5;
    a70 = (_QWORD *)STACK[0x5E0];
  }
  (*(void (**)(void))(*a70 + 8 * v85))();
LABEL_26:
  if ((_QWORD *)STACK[0x5B0] == a67)
  {
    v86 = 4;
  }
  else
  {
    if (!STACK[0x5B0])
      goto LABEL_31;
    v86 = 5;
    v76 = (_QWORD *)STACK[0x5B0];
  }
  (*(void (**)(_QWORD *))(*v76 + 8 * v86))(v76);
LABEL_31:
  if ((_QWORD *)STACK[0x638] == a68)
  {
    v87 = 4;
  }
  else
  {
    if (!STACK[0x638])
      goto LABEL_36;
    v87 = 5;
    v84 = (_QWORD *)STACK[0x638];
  }
  (*(void (**)(_QWORD *))(*v84 + 8 * v87))(v84);
LABEL_36:
  if ((_QWORD *)STACK[0x608] == a69)
  {
    v88 = 4;
  }
  else
  {
    if (!STACK[0x608])
      goto LABEL_41;
    v88 = 5;
    v74 = (_QWORD *)STACK[0x608];
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v88))(v74);
LABEL_41:
  if (STACK[0x480] == STACK[0x2C8])
  {
    v89 = 4;
    v90 = (_QWORD *)STACK[0x2C8];
  }
  else
  {
    if (!STACK[0x480])
      goto LABEL_46;
    v89 = 5;
    v90 = (_QWORD *)STACK[0x480];
  }
  (*(void (**)(void))(*v90 + 8 * v89))();
LABEL_46:
  if ((_QWORD *)STACK[0x450] == v70)
  {
    v91 = 4;
  }
  else
  {
    if (!STACK[0x450])
      goto LABEL_51;
    v91 = 5;
    v70 = (_QWORD *)STACK[0x450];
  }
  (*(void (**)(_QWORD *))(*v70 + 8 * v91))(v70);
LABEL_51:
  if (STACK[0x4D8] == STACK[0x2B8])
  {
    v92 = 4;
    v93 = (_QWORD *)STACK[0x2B8];
  }
  else
  {
    if (!STACK[0x4D8])
      goto LABEL_56;
    v92 = 5;
    v93 = (_QWORD *)STACK[0x4D8];
  }
  (*(void (**)(void))(*v93 + 8 * v92))();
LABEL_56:
  if ((_QWORD *)STACK[0x4A8] == v72)
  {
    v94 = 4;
  }
  else
  {
    if (!STACK[0x4A8])
    {
LABEL_61:
      sub_2236CE648(&STACK[0x380]);
      sub_2236CE728(&STACK[0x330]);
      JUMPOUT(0x2236CE53CLL);
    }
    v94 = 5;
    v72 = (_QWORD *)STACK[0x4A8];
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v94))(v72);
  goto LABEL_61;
}

void sub_2236CE554(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC050);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC050))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC048);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC050);
  }
  *a1 = qword_2540CC048;
}

void sub_2236CE5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC050);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC050);
  _Unwind_Resume(a1);
}

_QWORD *sub_2236CE648(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = a1 + 18;
  v3 = (_QWORD *)a1[21];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[15];
  if (v5 == a1 + 12)
  {
    v6 = 4;
    v5 = a1 + 12;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[10];
  if (v7 == a1 + 7)
  {
    v8 = 4;
    v7 = a1 + 7;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[4];
  if (v9 == a1 + 1)
  {
    v10 = 4;
    v9 = a1 + 1;
    goto LABEL_20;
  }
  if (v9)
  {
    v10 = 5;
LABEL_20:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

_QWORD *sub_2236CE728(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_2236CE7A8@<X0>(_QWORD **a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v10;
  _OWORD *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _OWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _OWORD *v18;
  size_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count_vtbl *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v86;
  int v87;
  uint64_t v89;
  const char *v90;
  _QWORD *v91;
  _OWORD *v92;
  int v93;
  char *v94;
  _QWORD v95[3];
  int v96;
  const char *v97;
  int v98;
  const char *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  char *v106;
  char *v107;
  char v108[37];
  char __s[37];
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  _BYTE v114[24];
  size_t v115;
  unint64_t v116;
  char v117;
  std::__shared_weak_count_vtbl *v118;
  __int128 v119;
  __int128 v120;
  char *v121;
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = a5 + 32;
  *(_QWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 64) = 0;
  v10 = *a2;
  v110 = *(_OWORD *)a3;
  v111 = v10;
  v87 = *(_DWORD *)(a3 + 208);
  v11 = operator new(0x10uLL);
  *v11 = *(_OWORD *)a3;
  *(_QWORD *)(a5 + 56) = v11 + 1;
  *(_QWORD *)(a5 + 64) = v11 + 1;
  *(_QWORD *)(a5 + 48) = v11;
  sub_2236A23A0((uint64_t)a2, a3);
  v92 = a2;
  v13 = *(unsigned __int8 **)(a3 + 240);
  v12 = *(unsigned __int8 **)(a3 + 248);
  v86 = a3;
  if (v12 == v13)
  {
    v83 = a3;
    goto LABEL_122;
  }
  v91 = a4;
  v14 = v92;
  do
  {
    v15 = sub_22342DA5C(*a1 + 10, (uint64_t)v13);
    if (v15)
    {
      v15[4] = v14;
      v16 = sub_22342DA5C(*a1, v15[5]);
      if (v16)
        *(_QWORD *)(v16[4] + 24) = *a4;
      goto LABEL_3;
    }
    v17 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2236CE554(&v112);
    if (*(char *)(v112 + 39) < 0)
    {
      v18 = *(_OWORD **)(v112 + 16);
      v19 = *(_QWORD *)(v112 + 24);
    }
    else
    {
      v18 = (_OWORD *)(v112 + 16);
      v19 = *(unsigned __int8 *)(v112 + 39);
    }
    sub_223195728((uint64_t)&stru_255789280, v18, v19, "MergeGP: stale KP %.13s in GP %.13s", 0x23uLL);
    sub_2236D173C(&v102);
    if (**(int **)(v102 + 56) <= 5)
    {
      v20 = *(unsigned __int8 *)(v102 + 72);
      v21 = sub_22322F254(v102, "OSLogSurrogateAppender", 1, 0);
      v22 = v21;
      if (v20 || v21)
      {
        v93 = v20;
        v95[0] = &v102;
        v95[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v95[2] = std::chrono::system_clock::now().__d_.__rep_;
        v96 = 5;
        v97 = "unknown file";
        v98 = 417;
        v99 = "unknown function";
        v100 = 0;
        v101 = 0;
        sub_2245664AC(v13, __s);
        sub_2245664AC((unsigned __int8 *)&v110, v108);
        v94 = v108;
        v23 = *(_QWORD *)v95[0];
        v24 = (const char *)(*(_QWORD *)v95[0] + 16);
        v90 = v24;
        if (*(char *)(*(_QWORD *)v95[0] + 39) < 0)
        {
          v24 = *(const char **)(v23 + 16);
          v25 = *(_QWORD *)(v23 + 24);
          v89 = *(_QWORD *)v95[0];
          v27 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v27 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          v25 = *(unsigned __int8 *)(*(_QWORD *)v95[0] + 39);
          v89 = *(_QWORD *)v95[0];
          v26 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v26 & 1) != 0)
            goto LABEL_18;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&v118);
          sub_223199C58("com.apple.cv3d", (unint64_t)&v118, &xmmword_255788F40);
          if ((_BYTE)v120 && SHIBYTE(v119) < 0)
            operator delete(v118);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_18:
        if (byte_255788F57 >= 0)
          v28 = (const char *)&xmmword_255788F40;
        else
          v28 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v29 = byte_255788F57;
        else
          v29 = *((_QWORD *)&xmmword_255788F40 + 1);
        v112 = (uint64_t)os_log_create(v28, v24);
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v29 >= 0x17)
        {
          v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v31 = v29 | 7;
          v32 = v31 + 1;
          v30 = (__int128 *)operator new(v31 + 1);
          *((_QWORD *)&v113 + 1) = v29;
          *(_QWORD *)v114 = v32 | 0x8000000000000000;
          *(_QWORD *)&v113 = v30;
        }
        else
        {
          v114[7] = v29;
          v30 = &v113;
          if (!v29)
          {
LABEL_32:
            *((_BYTE *)v30 + v29) = 0;
            v114[8] = 1;
            if (v25 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            a4 = v91;
            if (v25 >= 0x17)
            {
              v35 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17)
                v35 = v25 | 7;
              v36 = v35 + 1;
              v33 = operator new(v35 + 1);
              v115 = v25;
              v116 = v36 | 0x8000000000000000;
              *(_QWORD *)&v114[16] = v33;
            }
            else
            {
              HIBYTE(v116) = v25;
              v33 = &v114[16];
              if (!v25)
              {
                v114[16] = 0;
                v117 = 1;
                v34 = v112;
                if ((SHIBYTE(v116) & 0x80000000) == 0)
                  goto LABEL_36;
                goto LABEL_42;
              }
            }
            memmove(v33, v24, v25);
            v33[v25] = 0;
            v117 = 1;
            v34 = v112;
            if ((SHIBYTE(v116) & 0x80000000) == 0)
            {
LABEL_36:
              if (!v114[8])
                goto LABEL_45;
              goto LABEL_43;
            }
LABEL_42:
            operator delete(*(void **)&v114[16]);
            if (!v114[8])
            {
LABEL_45:
              if (v112)
                os_release((void *)v112);
              if (v22 && *(_QWORD *)(v22 + 24))
              {
                v37 = _os_log_pack_size();
                v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
                v39 = (std::__shared_weak_count *)operator new();
                v39->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v39->__shared_owners_;
                v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v39->__shared_weak_owners_ = 0;
                v39[1].__vftable = v38;
                v103 = v38;
                v104 = v38;
                v105 = v39;
                v106 = 0;
                v107 = 0;
                sub_2236D2CBC((uint64_t)&v112, __s, (const char **)&v94);
                v41 = (char *)operator new(0x50uLL);
                v42 = (std::__shared_weak_count *)v41;
                *((_QWORD *)v41 + 1) = 0;
                v43 = (unint64_t *)(v41 + 8);
                *((_QWORD *)v41 + 2) = 0;
                *(_QWORD *)v41 = &off_24EC20730;
                *((_QWORD *)v41 + 3) = off_24EC20780;
                *((_OWORD *)v41 + 2) = v113;
                *((_QWORD *)v41 + 6) = *(_QWORD *)v114;
                *(_OWORD *)(v41 + 56) = *(_OWORD *)&v114[8];
                *((_QWORD *)v41 + 9) = v115;
                v106 = v41 + 24;
                v107 = v41;
                v118 = v38;
                *(_QWORD *)&v119 = v38;
                *((_QWORD *)&v119 + 1) = v39;
                do
                  v44 = __ldxr(p_shared_owners);
                while (__stxr(v44 + 1, p_shared_owners));
                *(_QWORD *)&v120 = v41 + 24;
                *((_QWORD *)&v120 + 1) = v41;
                do
                  v45 = __ldxr(v43);
                while (__stxr(v45 + 1, v43));
                v121 = v41 + 24;
                do
                  v46 = __ldaxr(v43);
                while (__stlxr(v46 - 1, v43));
                if (!v46)
                {
                  (*(void (**)(char *))(*(_QWORD *)v41 + 16))(v41);
                  std::__shared_weak_count::__release_weak(v42);
                }
                v47 = v105;
                if (v105)
                {
                  v48 = (unint64_t *)&v105->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                    std::__shared_weak_count::__release_weak(v47);
                  }
                }
                v50 = v118;
                if (v121[31] >= 0)
                  v51 = v121 + 8;
                else
                  v51 = (char *)*((_QWORD *)v121 + 1);
                if (v121[55] >= 0)
                  v52 = v121 + 32;
                else
                  v52 = (char *)*((_QWORD *)v121 + 4);
                v53 = _os_log_pack_fill();
                *(_DWORD *)v53 = 68158466;
                *(_DWORD *)(v53 + 4) = 13;
                *(_WORD *)(v53 + 8) = 2080;
                *(_QWORD *)(v53 + 10) = v51;
                *(_WORD *)(v53 + 18) = 1040;
                *(_DWORD *)(v53 + 20) = 13;
                *(_WORD *)(v53 + 24) = 2080;
                *(_QWORD *)(v53 + 26) = v52;
                v54 = operator new();
                v55 = *(unsigned __int8 *)(v89 + 39);
                v56 = *(const char **)(v89 + 16);
                v57 = *(_QWORD *)(v89 + 24);
                v58 = v120;
                *(_OWORD *)(v54 + 8) = v119;
                if ((v55 & 0x80u) != 0)
                  v55 = v57;
                else
                  v56 = v90;
                *(_QWORD *)v54 = v50;
                v119 = 0uLL;
                *(_OWORD *)(v54 + 24) = v58;
                v120 = 0uLL;
                *(_QWORD *)(v54 + 40) = v56;
                *(_QWORD *)(v54 + 48) = v55;
                *(_BYTE *)(v54 + 56) = 16;
                v103 = 0;
                v112 = v54;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v22 + 24) + 40))(*(_QWORD *)(v22 + 24), &v112);
                a4 = v91;
                v14 = v92;
                v59 = v112;
                v112 = 0;
                if (v59)
                {
                  v60 = *(std::__shared_weak_count **)(v59 + 32);
                  if (v60)
                  {
                    v61 = (unint64_t *)&v60->__shared_owners_;
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  v63 = *(std::__shared_weak_count **)(v59 + 16);
                  if (v63)
                  {
                    v64 = (unint64_t *)&v63->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                    }
                  }
                  MEMORY[0x227684CE8](v59, 0x10F0C40B62ED6C6);
                  v66 = v103;
                  v103 = 0;
                  if (v66)
                  {
                    on_zero_shared_weak = (std::__shared_weak_count *)v66->__on_zero_shared_weak;
                    if (on_zero_shared_weak)
                    {
                      v68 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
                      do
                        v69 = __ldaxr(v68);
                      while (__stlxr(v69 - 1, v68));
                      if (!v69)
                      {
                        ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
                        std::__shared_weak_count::__release_weak(on_zero_shared_weak);
                      }
                    }
                    on_zero_shared = (std::__shared_weak_count *)v66->__on_zero_shared;
                    if (on_zero_shared)
                    {
                      v71 = (unint64_t *)&on_zero_shared->__shared_owners_;
                      do
                        v72 = __ldaxr(v71);
                      while (__stlxr(v72 - 1, v71));
                      if (!v72)
                      {
                        ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
                        std::__shared_weak_count::__release_weak(on_zero_shared);
                      }
                    }
                    MEMORY[0x227684CE8](v66, 0x10F0C40B62ED6C6);
                  }
                }
                v73 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
                if (*((_QWORD *)&v120 + 1))
                {
                  v74 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
                v76 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
                if (*((_QWORD *)&v119 + 1))
                {
                  v77 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
                v14 = v92;
                v112 = 0xD04100402;
                LOWORD(v113) = 2080;
                *(_QWORD *)((char *)&v113 + 2) = __s;
                WORD5(v113) = 1040;
                HIDWORD(v113) = 13;
                *(_WORD *)v114 = 2080;
                *(_QWORD *)&v114[2] = v94;
                v79 = (void *)_os_log_send_and_compose_impl();
                if (v79)
                  free(v79);
              }
              if (v93)
              {
                sub_2245664AC(v13, &v112);
                sub_2245664AC((unsigned __int8 *)&v110, &v118);
                sub_22322C138((uint64_t)v95, "MergeGP: stale KP %.13s in GP %.13s", (const char *)&v112, (const char *)&v118);
                sub_223182C08((uint64_t)v95);
              }
              sub_223182C08((uint64_t)v95);
              v80 = v101;
              if (v101)
              {
                v81 = (unint64_t *)&v101->__shared_owners_;
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              goto LABEL_3;
            }
LABEL_43:
            if ((v114[7] & 0x80000000) != 0)
              operator delete((void *)v113);
            goto LABEL_45;
          }
        }
        memmove(v30, v28, v29);
        goto LABEL_32;
      }
    }
LABEL_3:
    v13 += 16;
  }
  while (v13 != v12);
  v83 = v86;
  v13 = *(unsigned __int8 **)(v86 + 240);
LABEL_122:
  *(_QWORD *)(v83 + 248) = v13;
  v112 = (uint64_t)&v111;
  v84 = sub_2231A9C40((uint64_t **)a5, (unsigned __int8 *)&v111, (uint64_t)&unk_2245BA939, (_OWORD **)&v112);
  *((_DWORD *)v84 + 11) |= v87;
  return sub_2231B0224((unsigned __int8 **)a5, (unsigned __int8 *)&v110);
}

void sub_2236CF264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (*(_BYTE *)(v30 - 128))
  {
    if (*(char *)(v30 - 129) < 0)
      operator delete(*(void **)(v30 - 152));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a30);
  sub_2236C4000(a19);
  _Unwind_Resume(a1);
}

void sub_2236CF3B0(_QWORD *a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  float32x2_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  unint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int64x2_t __p;
  std::__shared_weak_count *v35;
  _BYTE v36[26];
  char v37;
  uint64_t (**v38)();
  __int128 v39;
  _OWORD v40[2];
  char v41[8];
  __int128 v42;
  _OWORD v43[2];

  if (*(_BYTE *)(a2 + 56))
  {
    if (*(_DWORD *)(a2 + 32))
      v9 = *(_DWORD *)(a2 + 36) == 0;
    else
      v9 = 1;
    if (v9
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_55;
    }
    sub_223C3BF78(a2, (uint64_t)&__p);
    v10 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    kdebug_trace();
    if (!*(_BYTE *)(a2 + 56))
    {
      __p.i8[0] = 0;
      v37 = 0;
      sub_22324A974();
    }
    if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
LABEL_55:
      abort();
    }
    sub_223C3BF78(a2, (uint64_t)v41);
    __p.i64[0] = (uint64_t)&off_24EC200A8;
    *(_OWORD *)&v36[10] = *(_OWORD *)((char *)v43 + 10);
    *(_OWORD *)v36 = v43[0];
    v38 = &off_24EC200A8;
    v39 = v42;
    v40[0] = v43[0];
    *(_OWORD *)((char *)v40 + 10) = *(_OWORD *)&v36[10];
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_223737E44(*a1 + 40, &__p);
    v14 = __p.i64[1];
    v13 = (uint64_t *)__p.i64[0];
    if (__p.i64[0] != __p.i64[1])
    {
      v15 = 0;
      v16 = a2 + 1240;
      while (1)
      {
        v18 = (float32x2_t *)*v13;
        if (sub_223340F28(a4, *v13)
          || !v18[14].i8[0] && !v18[10].i8[0]
          || (sub_2236AE340(v18, (uint64_t)&v38, a3, v16, v19, v20) & 1) != 0)
        {
          goto LABEL_21;
        }
        v21 = a5[2];
        if ((unint64_t)v15 >= v21)
          break;
        *v15 = *(_OWORD *)v18->f32;
        v17 = v15 + 1;
LABEL_20:
        a5[1] = (uint64_t)v17;
        v15 = v17;
LABEL_21:
        if (++v13 == (uint64_t *)v14)
        {
          v13 = (uint64_t *)__p.i64[0];
          if (__p.i64[0])
            goto LABEL_43;
          goto LABEL_44;
        }
      }
      v22 = (_OWORD *)*a5;
      v23 = ((uint64_t)v15 - *a5) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        sub_22316E078();
      v25 = v21 - (_QWORD)v22;
      if (v25 >> 3 > v24)
        v24 = v25 >> 3;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 >> 60)
          sub_223174E94();
        v27 = (char *)operator new(16 * v26);
        v28 = &v27[16 * v23];
        *(_OWORD *)v28 = *(_OWORD *)v18->f32;
        v29 = (uint64_t)v28;
        if (v15 == v22)
        {
LABEL_36:
          v17 = v28 + 16;
          *a5 = v29;
          a5[1] = (uint64_t)(v28 + 16);
          a5[2] = (uint64_t)&v27[16 * v26];
          if (!v15)
            goto LABEL_20;
          goto LABEL_41;
        }
      }
      else
      {
        v27 = 0;
        v28 = (char *)(16 * v23);
        *(_OWORD *)(16 * v23) = *(_OWORD *)v18->f32;
        v29 = 16 * v23;
        if (v15 == v22)
          goto LABEL_36;
      }
      do
      {
        *(_OWORD *)(v29 - 16) = *(v15 - 1);
        v29 -= 16;
        --v15;
      }
      while (v15 != v22);
      v15 = (_OWORD *)*a5;
      v17 = v28 + 16;
      *a5 = v29;
      a5[1] = (uint64_t)(v28 + 16);
      a5[2] = (uint64_t)&v27[16 * v26];
      if (!v15)
        goto LABEL_20;
LABEL_41:
      operator delete(v15);
      goto LABEL_20;
    }
    if (__p.i64[0])
    {
LABEL_43:
      __p.i64[1] = (uint64_t)v13;
      operator delete(v13);
    }
LABEL_44:
    kdebug_trace();
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_2236CF768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236CF77C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231BD90C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236CF794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = *(void **)v18;
    if (!*(_QWORD *)v18)
    {
LABEL_3:
      sub_22319EF60((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v20 = *(void **)v18;
    if (!*(_QWORD *)v18)
      goto LABEL_3;
  }
  *(_QWORD *)(v18 + 8) = v20;
  operator delete(v20);
  sub_22319EF60((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_2236CF7E4(_QWORD *a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;
  _OWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  void *v18[2];
  void *__p[2];
  int v20;
  char **v21;

  *(_OWORD *)v18 = 0u;
  *(_OWORD *)__p = 0u;
  v20 = 1065353216;
  v9 = a4 + 1;
  v10 = (_QWORD *)*a4;
  if ((_QWORD *)*a4 != a4 + 1)
  {
    do
    {
      if (((*(_DWORD *)(sub_22342DA5C((_QWORD *)(*a1 + 40), (uint64_t)v10 + 28)[4] + 208) | *((_DWORD *)v10 + 11)) & 8) != 0)
        sub_223340BF8((uint64_t)v18, (uint64_t)v10 + 28, (_QWORD *)((char *)v10 + 28));
      v15 = (_QWORD *)v10[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v10[2];
          v17 = *v16 == (_QWORD)v10;
          v10 = v16;
        }
        while (!v17);
      }
      v10 = v16;
    }
    while (v16 != v9);
  }
  sub_2236CF3B0(a1, a2, a3, v18, a5);
  v11 = __p[0];
  v21 = (char **)a5;
  if (__p[0])
  {
    do
    {
      sub_2232E9564(&v21, v11 + 1);
      v11 = *(_OWORD **)v11;
    }
    while (v11);
    v12 = __p[0];
    if (__p[0])
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
  }
  v14 = v18[0];
  v18[0] = 0;
  if (v14)
    operator delete(v14);
}

void sub_2236CF920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22322E828((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236CF934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
    sub_22322E828((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_22322E828((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236CF96C(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, float32x2_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, float *a7@<X6>, float *a8@<X7>, uint64_t **a9@<X8>, unsigned __int8 *a10)
{
  BOOL v14;
  std::__shared_weak_count *v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _OWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  float32x4_t v36;
  float32x4_t v37;
  void *v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x4_t v42;
  double v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _BYTE *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t **v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  uint64_t **v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v115;
  uint64_t **v116;
  _OWORD *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  void *v121;
  _OWORD *v122;
  uint64_t (**v124)();
  uint64_t v125;
  std::__shared_weak_count *v126;
  void *v127;
  _BYTE *v128;
  uint64_t (**v129)();
  __int128 v130;
  _OWORD v131[2];
  uint64_t (**v132)();
  __int128 v133;
  _OWORD v134[2];
  __int128 v135;
  __int16 v136;
  char v137;
  char v138[8];
  __int128 v139;
  _OWORD v140[5];
  std::__shared_weak_count *v141;
  void *__p;
  __int128 v143;
  _OWORD v144[2];
  __int128 v145;
  uint64_t (**v146)();
  __int128 v147;
  _OWORD v148[2];
  __int128 v149;
  __int16 v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a3 + 56))
    goto LABEL_29;
  if (*(_DWORD *)(a3 + 32))
    v14 = *(_DWORD *)(a3 + 36) == 0;
  else
    v14 = 1;
  if (v14
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78(a3, (uint64_t)v138);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  v132 = &off_24EC200A8;
  v133 = v139;
  v134[0] = v140[0];
  *(_OWORD *)((char *)v134 + 10) = *(_OWORD *)((char *)v140 + 10);
  v16 = 1;
  LOBYTE(v135) = 1;
  if (*(_BYTE *)(a3 + 208))
  {
    if ((!*(_DWORD *)(a3 + 184) || !*(_DWORD *)(a3 + 188))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3D9D0(a3 + 128, (uint64_t)v138);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
    v16 = *a2 == a2[1] || a6[3] == 0;
    if (*((_QWORD *)&v139 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  }
  if (!v15)
    goto LABEL_28;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v16)
      goto LABEL_29;
  }
  else
  {
LABEL_28:
    if (v16)
    {
LABEL_29:
      a9[1] = 0;
      *a9 = (uint64_t *)(a9 + 1);
      a9[5] = 0;
      a9[6] = 0;
      a9[4] = 0;
      a9[2] = 0;
      a9[3] = (uint64_t *)(a9 + 4);
      a9[7] = 0;
      a9[8] = 0;
      return;
    }
  }
  kdebug_trace();
  if (*(_BYTE *)(a3 + 208))
  {
    if ((!*(_DWORD *)(a3 + 184) || !*(_DWORD *)(a3 + 188))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3D9D0(a3 + 128, (uint64_t)&v146);
    v132 = &off_24EC25150;
    v133 = v147;
    v134[0] = v148[0];
    v134[1] = v148[1];
    v135 = v149;
    v136 = v150;
    v137 = 1;
  }
  else
  {
    LOBYTE(v132) = 0;
    v137 = 0;
  }
  sub_2237631EC((uint64_t)&v132, (uint64_t)v138);
  if (v137)
  {
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
    if (*((_QWORD *)&v133 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  kdebug_trace();
  a9[1] = 0;
  *a9 = (uint64_t *)(a9 + 1);
  a9[6] = 0;
  v108 = a9 + 6;
  a9[5] = 0;
  a9[4] = 0;
  a9[2] = 0;
  a9[3] = (uint64_t *)(a9 + 4);
  a9[7] = 0;
  a9[8] = 0;
  kdebug_trace();
  v116 = a9;
  if (!*(_BYTE *)(a3 + 56))
  {
    LOBYTE(v132) = 0;
    LOBYTE(v135) = 0;
    sub_22324A974();
  }
  if ((!*(_DWORD *)(a3 + 32) || !*(_DWORD *)(a3 + 36))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78(a3, (uint64_t)&v146);
  v134[0] = v148[0];
  *(_OWORD *)((char *)v134 + 10) = *(_OWORD *)((char *)v148 + 10);
  v129 = &off_24EC200A8;
  v130 = v147;
  v131[0] = v134[0];
  *(_OWORD *)((char *)v131 + 10) = *(_OWORD *)((char *)v148 + 10);
  if (*(_BYTE *)(a3 + 56))
  {
    if ((!*(_DWORD *)(a3 + 32) || !*(_DWORD *)(a3 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a3, (uint64_t)&__p);
    v146 = &off_24EC200A8;
    v147 = v143;
    v148[0] = v144[0];
    *(_OWORD *)((char *)v148 + 10) = *(_OWORD *)((char *)v144 + 10);
    LOBYTE(v149) = 1;
  }
  else
  {
    LOBYTE(v146) = 0;
    LOBYTE(v149) = 0;
  }
  v132 = &off_24EC216B8;
  sub_2231FF60C((_DWORD *)v148 + 2, &v133);
  if ((_BYTE)v149)
  {
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    if (*((_QWORD *)&v147 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  v29 = (_OWORD *)*a2;
  v117 = (_OWORD *)a2[1];
  if ((_OWORD *)*a2 == v117)
  {
    v107 = 0;
    goto LABEL_152;
  }
  v106 = 0;
  v107 = 0;
  v120 = 0;
  v30 = 0;
  v115 = 0;
  v31 = a3 + 1240;
  v32 = (uint64_t *)(a3 + 1232);
  v110 = v31;
  v109 = a6;
  do
  {
    v145 = *v29;
    v34 = sub_22342DA5C((_QWORD *)(*a1 + 40), (uint64_t)&v145);
    v122 = v29;
    if (v34)
      v35 = (_QWORD *)v34[4];
    else
      v35 = 0;
    sub_223736280((_QWORD *)*a1, (uint64_t)v35, a6, &__p);
    v38 = __p;
    if (__p == (void *)v143)
    {
      v33 = v122;
      if (!__p)
        goto LABEL_64;
LABEL_63:
      *(_QWORD *)&v143 = v38;
      operator delete(v38);
      goto LABEL_64;
    }
    v118 = v143;
    v121 = __p;
    sub_2236A857C((uint64_t)v35, v32, *a1, 0, 0, 0, v36, v37);
    v124 = &off_24EC21FE8;
    sub_2231DCF04((uint64_t)&v132, &v125);
    sub_2236B0C90((uint64_t)&__p, v35 + 15, (uint32x2_t *)&v129, a4, v110, a5, (uint64_t)v138, a7, (char **)&v127, v39, v40, v41, v42, v43, a8, (int32x2_t *)&v124);
    v119 = v30;
    v44 = v126;
    if (!v126)
      goto LABEL_73;
    v45 = (unint64_t *)&v126->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v48 = v127;
      v47 = v128;
      if (v127 == v128)
      {
LABEL_97:
        v61 = v121;
        v33 = v122;
        v62 = v119;
        if (v48)
          goto LABEL_93;
        goto LABEL_94;
      }
    }
    else
    {
LABEL_73:
      v48 = v127;
      v47 = v128;
      if (v127 == v128)
        goto LABEL_97;
    }
    v115 -= 0x5555555555555555 * ((v47 - (_BYTE *)v48) >> 3);
    do
    {
      v50 = v48[2];
      v51 = *(_QWORD **)(v50 + 208);
      v52 = *(_QWORD **)(v50 + 216);
      v53 = v51;
      if (v51 != v52)
      {
        while (*v53 != *v48 || v53[1] != v48[1])
        {
          v53 += 53;
          if (v53 == v52)
            goto LABEL_174;
        }
      }
      if (v53 == v52)
LABEL_174:
        sub_22324A974();
      v55 = 29 * (v53 - v51);
      if ((sub_22371B6CC(v48[2], v32, v55, a10) & 1) != 0)
      {
        v56 = *(_QWORD *)(v50 + 208);
        if (0x21CFB2B78C13521DLL * ((*(_QWORD *)(v50 + 216) - v56) >> 3) <= (unint64_t)v55)
          sub_2236C5448();
        v57 = *v32;
        v58 = v56 + 424 * v55;
        v60 = *(_QWORD *)(v58 + 216);
        v59 = v58 + 216;
        if (*v32 <= v60)
          v49 = *(_DWORD *)(v56 + 424 * v55 + 232);
        else
          v49 = 0;
        *(_DWORD *)(v56 + 424 * v55 + 232) = v49 | 8;
        *(_QWORD *)v59 = v57;
        *(_BYTE *)(v59 + 8) = 0;
      }
      else
      {
        sub_22371A4BC(v50, v32, v55);
        sub_22372C314(*a1, (unsigned __int8 *)v48, (uint64_t)&v146);
      }
      v48 += 3;
    }
    while (v48 != (_QWORD *)v47);
    if (v35[30] != v35[31])
    {
      v146 = (uint64_t (**)())&v145;
      *((_DWORD *)sub_2231A9C40(v116, (unsigned __int8 *)&v145, (uint64_t)&unk_2245BA939, (_OWORD **)&v146) + 11) = 8;
      v61 = v121;
      v33 = v122;
      v48 = v127;
      v62 = v119;
      if (!v127)
        goto LABEL_94;
LABEL_93:
      v128 = v48;
      operator delete(v48);
      v61 = v121;
      goto LABEL_94;
    }
    if (v120 < v106)
    {
      *(_QWORD *)v120 = v35;
      v61 = v121;
      v33 = v122;
      v48 = v127;
      v120 += 8;
      v62 = v119;
      if (v127)
        goto LABEL_93;
      goto LABEL_94;
    }
    v63 = v120 - v107;
    v64 = (v120 - v107) >> 3;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 61)
      sub_22316E078();
    if ((v106 - v107) >> 2 > v65)
      v65 = (v106 - v107) >> 2;
    if ((unint64_t)(v106 - v107) >= 0x7FFFFFFFFFFFFFF8)
      v66 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    if (v66)
    {
      if (v66 >> 61)
        sub_223174E94();
      v67 = operator new(8 * v66);
    }
    else
    {
      v67 = 0;
    }
    v68 = &v67[8 * v64];
    *(_QWORD *)v68 = v35;
    v69 = v68 + 8;
    if (v120 != v107)
    {
      v70 = v120 - v107 - 8;
      v33 = v122;
      if (v70 < 0x168
        || (v74 = (v120 - 8 - v107) & 0xFFFFFFFFFFFFFFF8, &v67[v63 - 8 - v74] > &v67[v63 - 8])
        || &v120[-v74 - 8] > v120 - 8)
      {
        v71 = v120;
        v72 = v107;
      }
      else if ((unint64_t)(v107 - v67) >= 0x20)
      {
        v75 = (v70 >> 3) + 1;
        v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        v71 = &v120[-v76];
        v68 -= v76;
        v77 = &v67[v63 - 16];
        v78 = v120 - 16;
        v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        v72 = v107;
        do
        {
          v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_116:
          v106 = &v67[8 * v66];
          if (!v72)
            goto LABEL_118;
LABEL_117:
          operator delete(v72);
          goto LABEL_118;
        }
      }
      else
      {
        v71 = v120;
        v72 = v107;
      }
      do
      {
        v73 = *((_QWORD *)v71 - 1);
        v71 -= 8;
        *((_QWORD *)v68 - 1) = v73;
        v68 -= 8;
      }
      while (v71 != v72);
      goto LABEL_116;
    }
    v72 = v107;
    v33 = v122;
    v106 = &v67[8 * v66];
    if (v107)
      goto LABEL_117;
LABEL_118:
    v107 = v68;
    v61 = v121;
    v48 = v127;
    v120 = v69;
    v62 = v119;
    if (v127)
      goto LABEL_93;
LABEL_94:
    v30 = v62 - 0x5555555555555555 * ((v118 - (uint64_t)v61) >> 3);
    v38 = __p;
    a9 = v116;
    a6 = v109;
    if (__p)
      goto LABEL_63;
LABEL_64:
    v29 = v33 + 1;
  }
  while (v29 != v117);
  v81 = (uint64_t **)v107;
  if (v107 != v120)
  {
    do
    {
      v82 = *v81;
      v84 = a9[7];
      v83 = (unint64_t)a9[8];
      if ((unint64_t)v84 >= v83)
      {
        v86 = *v108;
        v87 = ((char *)v84 - (char *)*v108) >> 4;
        v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 60)
          sub_22316E078();
        v89 = v83 - (_QWORD)v86;
        if (v89 >> 3 > v88)
          v88 = v89 >> 3;
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
          v90 = 0xFFFFFFFFFFFFFFFLL;
        else
          v90 = v88;
        if (v90)
        {
          if (v90 >> 60)
            sub_223174E94();
          v91 = (char *)operator new(16 * v90);
          v92 = &v91[16 * v87];
          *(_OWORD *)v92 = *(_OWORD *)v82;
          v93 = (uint64_t)v92;
          if (v84 != v86)
          {
            do
            {
LABEL_144:
              *(_OWORD *)(v93 - 16) = *((_OWORD *)v84 - 1);
              v93 -= 16;
              v84 -= 2;
            }
            while (v84 != v86);
            v84 = *v108;
            v85 = (uint64_t *)(v92 + 16);
            a9[6] = (uint64_t *)v93;
            a9[7] = (uint64_t *)(v92 + 16);
            a9[8] = (uint64_t *)&v91[16 * v90];
            if (!v84)
              goto LABEL_149;
LABEL_148:
            operator delete(v84);
            goto LABEL_149;
          }
        }
        else
        {
          v91 = 0;
          v92 = (char *)(16 * v87);
          *(_OWORD *)(16 * v87) = *(_OWORD *)v82;
          v93 = 16 * v87;
          if (v84 != v86)
            goto LABEL_144;
        }
        v85 = (uint64_t *)(v92 + 16);
        a9[6] = (uint64_t *)v93;
        a9[7] = (uint64_t *)(v92 + 16);
        a9[8] = (uint64_t *)&v91[16 * v90];
        if (v84)
          goto LABEL_148;
      }
      else
      {
        *(_OWORD *)v84 = *(_OWORD *)v82;
        v85 = v84 + 2;
      }
LABEL_149:
      a9[7] = v85;
      sub_22372D6F4((_QWORD *)*a1, *v82, v82[1]);
      ++v81;
    }
    while (v81 != (uint64_t **)v120);
  }
LABEL_152:
  kdebug_trace();
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v107)
    operator delete(v107);
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v141;
  if (v141)
  {
    v101 = (unint64_t *)&v141->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
}

void sub_2236D0668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  void *v61;

  if (__p)
  {
    operator delete(__p);
    v61 = (void *)STACK[0x248];
    if (!STACK[0x248])
    {
LABEL_3:
      sub_223167354(a12);
      if (!a14)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v61 = (void *)STACK[0x248];
    if (!STACK[0x248])
      goto LABEL_3;
  }
  STACK[0x250] = (unint64_t)v61;
  operator delete(v61);
  sub_223167354(a12);
  if (!a14)
  {
LABEL_5:
    sub_22319EF60((uint64_t)&a42);
    sub_2236C4000(a24);
    sub_2236D0808((uint64_t)&a60);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(a14);
  goto LABEL_5;
}

uint64_t sub_2236D0808(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_2236D08B4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  size_t v55;
  size_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  const char *v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  const char *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  _OWORD *v114[3];
  int v115;
  const char *v116;
  int v117;
  const char *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121[5];
  int v122;
  void *__p[2];
  std::__shared_weak_count *v124;
  char *v125;
  std::__shared_weak_count *v126;
  _QWORD *v127;
  __int128 v128;
  char __s[37];
  _BYTE v130[24];
  __int128 v131;
  void *v132[2];
  unint64_t v133;
  char v134;
  _QWORD v135[5];

  v135[2] = *MEMORY[0x24BDAC8D0];
  v121[1] = a2[2];
  memset(&v121[2], 0, 24);
  v122 = 728309688;
  kdebug_trace();
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 48) = 0;
  v5 = (_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = a3 + 32;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v7 = a2 + 1;
  v6 = (_QWORD *)*a2;
  v112 = a3;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    while ((*((_BYTE *)v6 + 44) & 1) == 0)
    {
LABEL_27:
      v25 = (_QWORD *)v6[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v6[2];
          v37 = *v26 == (_QWORD)v6;
          v6 = v26;
        }
        while (!v37);
      }
      v6 = v26;
      if (v26 == v7)
      {
        v6 = (_QWORD *)*a2;
        goto LABEL_37;
      }
    }
    sub_22372C314(*a1, (unsigned __int8 *)v6 + 28, (uint64_t)v130);
    v8 = *(_QWORD *)&v130[16];
    if (*(_QWORD *)(*(_QWORD *)&v130[16] + 240) != *(_QWORD *)(*(_QWORD *)&v130[16] + 248))
    {
      v114[0] = *(_OWORD **)&v130[16];
      v9 = sub_2231A9C40((uint64_t **)a3, *(unsigned __int8 **)&v130[16], (uint64_t)&unk_2245BA939, v114);
      *((_DWORD *)v9 + 11) |= 4u;
      v10 = *((_DWORD *)v6 + 11);
      if ((v10 & 4) != 0)
      {
        v114[0] = (_OWORD *)v8;
        v11 = sub_2231A9C40((uint64_t **)v112, (unsigned __int8 *)v8, (uint64_t)&unk_2245BA939, v114);
        *((_DWORD *)v11 + 11) |= 8u;
        v10 = *((_DWORD *)v6 + 11);
      }
      if ((v10 & 2) != 0)
      {
        v114[0] = (_OWORD *)v8;
        v12 = sub_2231A9C40((uint64_t **)v112, (unsigned __int8 *)v8, (uint64_t)&unk_2245BA939, v114);
        *((_DWORD *)v12 + 11) |= 0x10u;
      }
      goto LABEL_26;
    }
    v14 = *(_OWORD **)(a3 + 56);
    v13 = *(_QWORD *)(a3 + 64);
    if ((unint64_t)v14 < v13)
    {
      *v14 = **(_OWORD **)&v130[16];
      v15 = v14 + 1;
LABEL_25:
      *(_QWORD *)(a3 + 56) = v15;
      sub_2231B0224((unsigned __int8 **)a3, (unsigned __int8 *)v8);
      sub_22372D6F4((_QWORD *)*a1, *(_QWORD *)v8, *(_QWORD *)(v8 + 8));
LABEL_26:
      a3 = v112;
      goto LABEL_27;
    }
    v16 = (_OWORD *)*v5;
    v17 = ((uint64_t)v14 - *v5) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      sub_22316E078();
    v19 = v13 - (_QWORD)v16;
    if (v19 >> 3 > v18)
      v18 = v19 >> 3;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 60)
        sub_223174E94();
      v21 = (char *)operator new(16 * v20);
      v22 = &v21[16 * v17];
      *(_OWORD *)v22 = *(_OWORD *)v8;
      v23 = (uint64_t)v22;
      if (v14 != v16)
      {
LABEL_21:
        a3 = v112;
        do
        {
          *(_OWORD *)(v23 - 16) = *(v14 - 1);
          v23 -= 16;
          --v14;
        }
        while (v14 != v16);
        v14 = (_OWORD *)*v5;
        v24 = &v21[16 * v20];
        v15 = v22 + 16;
        *(_QWORD *)(v112 + 48) = v23;
        *(_QWORD *)(v112 + 56) = v22 + 16;
        *(_QWORD *)(v112 + 64) = v24;
        if (!v14)
          goto LABEL_25;
LABEL_24:
        operator delete(v14);
        goto LABEL_25;
      }
    }
    else
    {
      v21 = 0;
      v22 = (char *)(16 * v17);
      *(_OWORD *)(16 * v17) = **(_OWORD **)&v130[16];
      v23 = 16 * v17;
      if (v14 != v16)
        goto LABEL_21;
    }
    a3 = v112;
    v27 = &v21[16 * v20];
    v15 = v22 + 16;
    *(_QWORD *)(v112 + 48) = v23;
    *(_QWORD *)(v112 + 56) = v22 + 16;
    *(_QWORD *)(v112 + 64) = v27;
    if (!v14)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_37:
  if (v6 != v7)
  {
    do
    {
      if ((*((_BYTE *)v6 + 44) & 1) != 0)
        goto LABEL_162;
      v28 = sub_22342DA5C((_QWORD *)(*a1 + 80), (uint64_t)v6 + 28);
      if (v28)
      {
        v29 = (unsigned __int8 *)v28[4];
        v30 = *((_DWORD *)v6 + 11);
        if ((v30 & 4) != 0)
        {
          *(_QWORD *)v130 = v28[4];
          v31 = sub_2231A9C40((uint64_t **)a3, v29, (uint64_t)&unk_2245BA939, (_OWORD **)v130);
          *((_DWORD *)v31 + 11) |= 8u;
          v30 = *((_DWORD *)v6 + 11);
        }
        if ((v30 & 2) != 0)
        {
          *(_QWORD *)v130 = v29;
          v32 = sub_2231A9C40((uint64_t **)a3, v29, (uint64_t)&unk_2245BA939, (_OWORD **)v130);
          *((_DWORD *)v32 + 11) |= 0x10u;
          v33 = (_QWORD *)v6[1];
          if (v33)
            goto LABEL_163;
          goto LABEL_166;
        }
LABEL_162:
        v33 = (_QWORD *)v6[1];
        if (v33)
          goto LABEL_163;
        goto LABEL_166;
      }
      sub_2236D173C(v121);
      if (**(int **)(v121[0] + 56) > 4)
        goto LABEL_162;
      v34 = *(unsigned __int8 *)(v121[0] + 72);
      v35 = sub_22322F254(v121[0], "OSLogSurrogateAppender", 1, 0);
      v36 = v35;
      v37 = !v34 && v35 == 0;
      if (v37)
        goto LABEL_162;
      v111 = v34;
      v114[0] = v121;
      v114[1] = (_OWORD *)std::chrono::steady_clock::now().__d_.__rep_;
      v114[2] = (_OWORD *)std::chrono::system_clock::now().__d_.__rep_;
      v115 = 4;
      v116 = "unknown file";
      v117 = 355;
      v118 = "unknown function";
      v119 = 0;
      v120 = 0;
      sub_2245664AC((unsigned __int8 *)v6 + 28, __s);
      v38 = *(_QWORD *)v114[0];
      v39 = (const char *)(*(_QWORD *)v114[0] + 16);
      v109 = v39;
      v110 = *(_QWORD *)v114[0];
      if (*(char *)(*(_QWORD *)v114[0] + 39) < 0)
      {
        v39 = *(const char **)(v38 + 16);
        v40 = *(_QWORD *)(v38 + 24);
        v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v42 & 1) != 0)
          goto LABEL_56;
      }
      else
      {
        v40 = *(unsigned __int8 *)(*(_QWORD *)v114[0] + 39);
        v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v41 & 1) != 0)
          goto LABEL_56;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
        if ((_BYTE)v125 && SHIBYTE(v124) < 0)
          operator delete(__p[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
        a3 = v112;
      }
LABEL_56:
      if (byte_255788F57 >= 0)
        v43 = (const char *)&xmmword_255788F40;
      else
        v43 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v44 = byte_255788F57;
      else
        v44 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v130 = os_log_create(v43, v39);
      if (v44 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v44 >= 0x17)
      {
        v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17)
          v46 = v44 | 7;
        v47 = v46 + 1;
        v45 = operator new(v46 + 1);
        *(_QWORD *)&v130[16] = v44;
        *(_QWORD *)&v131 = v47 | 0x8000000000000000;
        *(_QWORD *)&v130[8] = v45;
        a3 = v112;
LABEL_69:
        memmove(v45, v43, v44);
        goto LABEL_70;
      }
      BYTE7(v131) = v44;
      v45 = &v130[8];
      if (v44)
        goto LABEL_69;
LABEL_70:
      v45[v44] = 0;
      BYTE8(v131) = 1;
      if (v40 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v40 >= 0x17)
      {
        v50 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v40 | 7) != 0x17)
          v50 = v40 | 7;
        v51 = v50 + 1;
        v48 = (void **)operator new(v50 + 1);
        v132[1] = (void *)v40;
        v133 = v51 | 0x8000000000000000;
        v132[0] = v48;
      }
      else
      {
        HIBYTE(v133) = v40;
        v48 = v132;
        if (!v40)
        {
          LOBYTE(v132[0]) = 0;
          v134 = 1;
          v49 = *(NSObject **)v130;
          if ((SHIBYTE(v133) & 0x80000000) == 0)
            goto LABEL_74;
          goto LABEL_80;
        }
      }
      memmove(v48, v39, v40);
      *((_BYTE *)v48 + v40) = 0;
      v134 = 1;
      v49 = *(NSObject **)v130;
      if ((SHIBYTE(v133) & 0x80000000) == 0)
      {
LABEL_74:
        if (!BYTE8(v131))
          goto LABEL_83;
        goto LABEL_81;
      }
LABEL_80:
      operator delete(v132[0]);
      if (!BYTE8(v131))
        goto LABEL_83;
LABEL_81:
      if (SBYTE7(v131) < 0)
        operator delete(*(void **)&v130[8]);
LABEL_83:
      if (*(_QWORD *)v130)
        os_release(*(void **)v130);
      if (v36 && *(_QWORD *)(v36 + 24))
      {
        v52 = _os_log_pack_size();
        v53 = (std::__shared_weak_count_vtbl *)operator new(v52, (std::align_val_t)8uLL);
        v54 = (std::__shared_weak_count *)operator new();
        v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v54->__shared_owners_ = 0;
        v54->__shared_weak_owners_ = 0;
        v54[1].__vftable = v53;
        __p[0] = v53;
        __p[1] = v53;
        v124 = v54;
        v125 = 0;
        v126 = 0;
        v55 = strlen(__s);
        if (v55 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v56 = v55;
        if (v55 >= 0x17)
        {
          v59 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v55 | 7) != 0x17)
            v59 = v55 | 7;
          v60 = v59 + 1;
          v57 = operator new(v59 + 1);
          *(_QWORD *)&v128 = v56;
          *((_QWORD *)&v128 + 1) = v60 | 0x8000000000000000;
          v127 = v57;
        }
        else
        {
          HIBYTE(v128) = v55;
          v57 = &v127;
          if (!v55)
            goto LABEL_98;
        }
        memcpy(v57, __s, v56);
LABEL_98:
        *((_BYTE *)v57 + v56) = 0;
        v61 = v127;
        v135[0] = v128;
        *(_QWORD *)((char *)v135 + 7) = *(_QWORD *)((char *)&v128 + 7);
        v62 = HIBYTE(v128);
        v63 = operator new(0x38uLL);
        v63[1] = 0;
        v63[2] = 0;
        v63[3] = off_24EC1FA48;
        *v63 = &off_24EC1F9F8;
        v64 = v135[0];
        v63[4] = v61;
        v63[5] = v64;
        *(_QWORD *)((char *)v63 + 47) = *(_QWORD *)((char *)v135 + 7);
        *((_BYTE *)v63 + 55) = v62;
        v135[0] = 0;
        *(_QWORD *)((char *)v135 + 7) = 0;
        v65 = v126;
        v125 = (char *)(v63 + 3);
        v126 = (std::__shared_weak_count *)v63;
        if (v65)
        {
          p_shared_owners = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldaxr(p_shared_owners);
          while (__stlxr(v67 - 1, p_shared_owners));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        *(_OWORD *)v130 = *(_OWORD *)__p;
        v68 = v125;
        *(_QWORD *)&v130[16] = v124;
        if (v124)
        {
          v69 = (unint64_t *)&v124->__shared_owners_;
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        v71 = v126;
        *(_QWORD *)&v131 = v68;
        *((_QWORD *)&v131 + 1) = v126;
        if (v126)
        {
          v72 = (unint64_t *)&v126->__shared_owners_;
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
          v132[0] = v68;
          do
            v74 = __ldaxr(v72);
          while (__stlxr(v74 - 1, v72));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        else
        {
          v132[0] = v68;
        }
        v75 = v124;
        if (v124)
        {
          v76 = (unint64_t *)&v124->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v78 = *(_QWORD *)v130;
        if (*((char *)v132[0] + 31) >= 0)
          v79 = (char *)v132[0] + 8;
        else
          v79 = (char *)*((_QWORD *)v132[0] + 1);
        v80 = _os_log_pack_fill();
        *(_DWORD *)v80 = 68157954;
        *(_DWORD *)(v80 + 4) = 13;
        *(_WORD *)(v80 + 8) = 2080;
        *(_QWORD *)(v80 + 10) = v79;
        v81 = (char *)operator new();
        v82 = *(unsigned __int8 *)(v110 + 39);
        v83 = v109;
        if ((v82 & 0x80u) != 0)
        {
          v83 = *(const char **)(v110 + 16);
          v82 = *(_QWORD *)(v110 + 24);
        }
        *(_QWORD *)v81 = v78;
        *(_OWORD *)(v81 + 8) = *(_OWORD *)&v130[8];
        *(_QWORD *)&v130[8] = 0;
        *(_QWORD *)&v130[16] = 0;
        *(_OWORD *)(v81 + 24) = v131;
        v131 = 0uLL;
        *((_QWORD *)v81 + 5) = v83;
        *((_QWORD *)v81 + 6) = v82;
        v81[56] = 16;
        v127 = 0;
        __p[0] = v81;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), __p);
        v84 = __p[0];
        __p[0] = 0;
        if (v84)
        {
          v85 = (std::__shared_weak_count *)*((_QWORD *)v84 + 4);
          if (v85)
          {
            v86 = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          v88 = (std::__shared_weak_count *)*((_QWORD *)v84 + 2);
          if (v88)
          {
            v89 = (unint64_t *)&v88->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          MEMORY[0x227684CE8](v84, 0x10F0C40B62ED6C6);
          v91 = v127;
          v127 = 0;
          if (v91)
          {
            v92 = (std::__shared_weak_count *)v91[4];
            if (v92)
            {
              v93 = (unint64_t *)&v92->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v95 = (std::__shared_weak_count *)v91[2];
            if (v95)
            {
              v96 = (unint64_t *)&v95->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            MEMORY[0x227684CE8](v91, 0x10F0C40B62ED6C6);
          }
        }
        v98 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
        if (*((_QWORD *)&v131 + 1))
        {
          v99 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        v101 = *(std::__shared_weak_count **)&v130[16];
        if (*(_QWORD *)&v130[16])
        {
          v102 = (unint64_t *)(*(_QWORD *)&v130[16] + 8);
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
            if (!v111)
              goto LABEL_158;
LABEL_157:
            sub_2245664AC((unsigned __int8 *)v6 + 28, v130);
            sub_22322C138((uint64_t)v114, "KP %.13s is not linked to a GP", v130);
            sub_223182C08((uint64_t)v114);
            goto LABEL_158;
          }
        }
        goto LABEL_156;
      }
      os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
      *(_QWORD *)v130 = 0xD04100202;
      *(_WORD *)&v130[8] = 2080;
      *(_QWORD *)&v130[10] = __s;
      v58 = (void *)_os_log_send_and_compose_impl();
      if (v58)
      {
        free(v58);
        if (!v111)
          goto LABEL_158;
        goto LABEL_157;
      }
LABEL_156:
      if (v111)
        goto LABEL_157;
LABEL_158:
      sub_223182C08((uint64_t)v114);
      v104 = v120;
      if (!v120)
        goto LABEL_162;
      v105 = (unint64_t *)&v120->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (v106)
        goto LABEL_162;
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
      v33 = (_QWORD *)v6[1];
      if (v33)
      {
        do
        {
LABEL_163:
          v107 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
        goto LABEL_39;
      }
      do
      {
LABEL_166:
        v107 = (_QWORD *)v6[2];
        v37 = *v107 == (_QWORD)v6;
        v6 = v107;
      }
      while (!v37);
LABEL_39:
      v6 = v107;
    }
    while (v107 != v7);
  }
  return kdebug_trace();
}

void sub_2236D15D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  if (a47)
  {
    if (a46 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a26);
  sub_2236C4000(a24);
  sub_2231874DC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_2236D173C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC060);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC060))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC058);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC060);
  }
  *a1 = qword_2540CC058;
}

void sub_2236D17D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC060);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC060);
  _Unwind_Resume(a1);
}

uint64_t sub_2236D1830(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  uint64_t *v15;
  void *v16;
  void *v17;
  void *__p;
  uint64_t *v20;

  sub_22370D35C(*a2, &__p);
  v3 = (uint64_t *)__p;
  v4 = v20;
  if (__p == v20)
  {
LABEL_8:
    if (v3)
    {
      v7 = v20;
      v8 = v3;
      if (v20 != v3)
      {
        v9 = v20;
        do
        {
          v11 = (void *)*(v9 - 3);
          v9 -= 3;
          v10 = v11;
          if (v11)
          {
            *(v7 - 2) = (uint64_t)v10;
            operator delete(v10);
          }
          v7 = v9;
        }
        while (v9 != v3);
        v8 = __p;
      }
      v20 = v3;
      operator delete(v8);
    }
    return 0;
  }
  else
  {
    while (1)
    {
      v5 = *v3;
      v6 = v3[1];
      if (*v3 == v6)
        break;
      while (!sub_22342DA5C((_QWORD *)(*(_QWORD *)a1 + 80), v5))
      {
        v5 += 36;
        if (v5 == v6)
          goto LABEL_14;
      }
      v3 += 3;
      if (v3 == v4)
      {
        v3 = (uint64_t *)__p;
        goto LABEL_8;
      }
    }
LABEL_14:
    v12 = (uint64_t *)__p;
    if (__p)
    {
      v13 = v20;
      v14 = __p;
      if (v20 != __p)
      {
        v15 = v20;
        do
        {
          v17 = (void *)*(v15 - 3);
          v15 -= 3;
          v16 = v17;
          if (v17)
          {
            *(v13 - 2) = (uint64_t)v16;
            operator delete(v16);
          }
          v13 = v15;
        }
        while (v15 != v12);
        v14 = __p;
      }
      v20 = v12;
      operator delete(v14);
    }
    return 1;
  }
}

void sub_2236D1970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2236D1984(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v13 = *a2;
  v4 = v14;
  v5 = a2[4];
  if (!v5)
    goto LABEL_4;
  if ((uint64_t *)v5 != a2 + 1)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_4:
    v15 = (_QWORD *)v5;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, v14);
LABEL_6:
  v16 = a2[6];
  v6 = v17;
  result = a2[10];
  if (!result)
  {
LABEL_9:
    v18 = (_QWORD *)result;
    goto LABEL_11;
  }
  if ((uint64_t *)result != a2 + 7)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    goto LABEL_9;
  }
  v18 = v17;
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 24))(result, v17);
LABEL_11:
  v8 = v15;
  *a1 = v13;
  v9 = a1 + 1;
  if (v8)
  {
    if (v8 == v14)
    {
      a1[4] = v9;
      result = (*(uint64_t (**)(_QWORD *))(v14[0] + 24))(v14);
    }
    else
    {
      a1[4] = v8;
      v15 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v10 = v18;
  a1[6] = v16;
  if (v10)
  {
    if (v10 == v17)
    {
      a1[10] = a1 + 7;
      result = (*(uint64_t (**)(_QWORD *))(v17[0] + 24))(v17);
    }
    else
    {
      a1[10] = v10;
      v18 = 0;
    }
  }
  else
  {
    a1[10] = 0;
  }
  if (v18 == v17)
  {
    v11 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_26;
    v11 = 5;
    v6 = v18;
  }
  result = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v6 + 8 * v11))(v6, v9);
LABEL_26:
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v4 = v15;
  }
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(*v4 + 8 * v12))(v4, v9);
}

void sub_2236D1B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

uint64_t *sub_2236D1BCC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v5 = a1 + 1;
  v6 = (uint64_t *)a2[4];
  if (v6)
  {
    if (v6 == a2 + 1)
    {
      a1[4] = (uint64_t)v5;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2[4] + 24))(a2[4], v5);
      a1[6] = *a3;
      v7 = a1 + 7;
      v8 = a3[4];
      if (!v8)
        goto LABEL_10;
    }
    else
    {
      a1[4] = (*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      a1[6] = *a3;
      v7 = a1 + 7;
      v8 = a3[4];
      if (!v8)
        goto LABEL_10;
    }
  }
  else
  {
    a1[4] = 0;
    a1[6] = *a3;
    v7 = a1 + 7;
    v8 = a3[4];
    if (!v8)
      goto LABEL_10;
  }
  if ((uint64_t *)v8 == a3 + 1)
  {
    a1[10] = (uint64_t)v7;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3[4] + 24))(a3[4], v7);
    if (*a1 == a1[6])
      return a1;
    goto LABEL_13;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_10:
  a1[10] = v8;
  if (*a1 == a1[6])
    return a1;
  do
  {
LABEL_13:
    v9 = a1[4];
    if (!v9)
      sub_223198474();
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9))
      break;
    v10 = *a1 + 36;
    *a1 = v10;
  }
  while (v10 != a1[6]);
  return a1;
}

void sub_2236D1D18(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_2236D1D94()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2236D1DA8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC57640;
  result[1] = v3;
  return result;
}

uint64_t sub_2236D1DDC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC57640;
  a2[1] = v2;
  return result;
}

_QWORD *sub_2236D1DF8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = sub_22342DA5C((_QWORD *)(**(_QWORD **)(a1 + 8) + 80), a2);
  if (result)
    return (_QWORD *)result[4];
  return result;
}

uint64_t sub_2236D1E20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes18GlobalPlaneTracker42ProcessKeyframeObservationsCorrespondencesERKNSt3__16ch"
                     "rono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKNS1_29KeyframePlaneObservationGraphERNS_3esn6rando"
                     "m17DistributedRandomINSF_6RandomINS3_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615E"
                     "Lm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENSF_16UUIDDistributionEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes18GlobalPlaneTracker42ProcessKeyframeObservationsCorrespondencesER"
                                "KNSt3__16chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKNS1_29KeyframePlaneObservati"
                                "onGraphERNS_3esn6random17DistributedRandomINSF_6RandomINS3_23mersenne_twister_engineIjLm"
                                "32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm"
                                "18ELj1812433253EEEEENSF_16UUIDDistributionEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes18GlobalPlaneTracker42ProcessKeyframeObservationsCorrespondencesERKNSt3__16chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKNS1_29KeyframePlaneObservationGraphERNS_3esn6random17DistributedRandomINSF_6RandomINS3_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENSF_16UUIDDistributionEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes18GlobalPlaneTracker42ProcessKeyframeObservationsCorrespondencesERKNSt3__16chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKNS1_29KeyframePlaneObservationGraphERNS_3esn6random17DistributedRandomINSF_6RandomINS3_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEENSF_16UUIDDistributionEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236D1E8C()
{
  return &unk_24EC576B0;
}

double sub_2236D1E98(char *a1, __n128 *a2, unint64_t a3, char *a4, uint64_t a5)
{
  __n128 *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  __n128 v28;
  char *v29;
  char *v30;
  char *v31;
  __n128 *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  __n128 *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  __n128 *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 *v56;
  __n128 v57;

  if (a3 < 2)
    return v28.n128_f64[0];
  v6 = (__n128 *)a1;
  if (a3 != 2)
  {
    if ((uint64_t)a3 <= 128)
    {
      if (a1 == (char *)a2)
        return v28.n128_f64[0];
      v12 = a1 + 8;
      if (a1 + 8 == (char *)a2)
        return v28.n128_f64[0];
      v13 = 0;
      v14 = a1;
LABEL_14:
      v15 = v14;
      v14 = v12;
      v16 = *(_QWORD **)v12;
      v17 = *(_QWORD *)v15;
      v18 = v16[2];
      v19 = *(_QWORD *)(*(_QWORD *)v15 + 16);
      if (v18 == v19)
      {
        if (v16[31] - v16[30] <= *(_QWORD *)(v17 + 248) - *(_QWORD *)(v17 + 240))
          goto LABEL_13;
      }
      else if (v18 >= v19)
      {
        goto LABEL_13;
      }
      *(_QWORD *)v14 = v17;
      if (v15 == a1)
      {
LABEL_11:
        v15 = a1;
        goto LABEL_12;
      }
      v20 = v13;
      while (1)
      {
        v21 = *(_QWORD **)&a1[v20 - 8];
        v22 = v21[2];
        if (v18 == v22)
        {
          if (v16[31] - v16[30] <= v21[31] - v21[30])
            goto LABEL_12;
        }
        else if (v18 >= v22)
        {
          v15 = &a1[v20];
LABEL_12:
          *(_QWORD *)v15 = v16;
LABEL_13:
          v12 = v14 + 8;
          v13 += 8;
          if (v14 + 8 == (char *)a2)
            return v28.n128_f64[0];
          goto LABEL_14;
        }
        v15 -= 8;
        *(_QWORD *)&a1[v20] = v21;
        v20 -= 8;
        if (!v20)
          goto LABEL_11;
      }
    }
    v25 = a3 >> 1;
    v26 = &a1[8 * (a3 >> 1)];
    v27 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_2236D1E98(a1, v26, v27, a4, a5);
      sub_2236D1E98(&v6->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
      v28.n128_u64[0] = sub_2236D25B8(v6, (__n128 *)((char *)v6 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5).n128_u64[0];
      return v28.n128_f64[0];
    }
    sub_2236D2244(a1, v26, v27, a4);
    v29 = &a4[8 * v25];
    v28.n128_u64[0] = sub_2236D2244(&v6->n128_i8[8 * (a3 >> 1)], (char *)a2, a3 - (a3 >> 1), v29).n128_u64[0];
    v30 = v29;
    v31 = a4;
    v32 = v6;
    v33 = &a4[8 * a3];
    while (1)
    {
      if (v30 == v33)
      {
        if (v31 == v29)
          return v28.n128_f64[0];
        v42 = &a4[8 * v25] - v31 - 8;
        if (v42 >= 0x38 && (unint64_t)((char *)v6 - v31) >= 0x20)
        {
          v52 = 0;
          v53 = (v42 >> 3) + 1;
          v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v31[v54];
          v44 = (__n128 *)((char *)v32 + v54);
          v55 = v53 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = &v32[v52];
            v28 = *(__n128 *)&v31[v52 * 16];
            v57 = *(__n128 *)&v31[v52 * 16 + 16];
            *v56 = v28;
            v56[1] = v57;
            v52 += 2;
            v55 -= 4;
          }
          while (v55);
          if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL))
            return v28.n128_f64[0];
        }
        else
        {
          v43 = v31;
          v44 = v32;
        }
        do
        {
          v45 = *(_QWORD *)v43;
          v43 += 8;
          v44->n128_u64[0] = v45;
          v44 = (__n128 *)((char *)v44 + 8);
        }
        while (v43 != v29);
        return v28.n128_f64[0];
      }
      v34 = *(_QWORD *)v30;
      v35 = *(_QWORD *)v31;
      v36 = *(_QWORD *)(*(_QWORD *)v30 + 16);
      v37 = *(_QWORD *)(*(_QWORD *)v31 + 16);
      if (v36 == v37)
      {
        if (*(_QWORD *)(v34 + 248) - *(_QWORD *)(v34 + 240) <= *(_QWORD *)(v35 + 248) - *(_QWORD *)(v35 + 240))
          goto LABEL_37;
LABEL_31:
        v32->n128_u64[0] = v34;
        v32 = (__n128 *)((char *)v32 + 8);
        v30 += 8;
        v6 = (__n128 *)((char *)v6 + 8);
        if (v31 == v29)
          goto LABEL_38;
      }
      else
      {
        if (v36 < v37)
          goto LABEL_31;
LABEL_37:
        v32->n128_u64[0] = v35;
        v32 = (__n128 *)((char *)v32 + 8);
        v31 += 8;
        v6 = (__n128 *)((char *)v6 + 8);
        if (v31 == v29)
        {
LABEL_38:
          if (v30 == v33)
            return v28.n128_f64[0];
          v38 = &a4[8 * a3] - v30 - 8;
          if (v38 < 0x48 || (unint64_t)((char *)v6 - v30) < 0x20)
          {
            v39 = v30;
            v40 = v32;
            do
            {
LABEL_42:
              v41 = *(_QWORD *)v39;
              v39 += 8;
              v40->n128_u64[0] = v41;
              v40 = (__n128 *)((char *)v40 + 8);
            }
            while (v39 != v33);
            return v28.n128_f64[0];
          }
          v46 = 0;
          v47 = (v38 >> 3) + 1;
          v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          v39 = &v30[v48];
          v40 = (__n128 *)((char *)v32 + v48);
          v49 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = &v32[v46];
            v28 = *(__n128 *)&v30[v46 * 16];
            v51 = *(__n128 *)&v30[v46 * 16 + 16];
            *v50 = v28;
            v50[1] = v51;
            v46 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_42;
          return v28.n128_f64[0];
        }
      }
    }
  }
  v7 = (_QWORD *)a2[-1].n128_u64[1];
  v8 = *(_QWORD *)a1;
  v9 = v7[2];
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v9 == v10)
  {
    if (v7[31] - v7[30] <= *(_QWORD *)(v8 + 248) - *(_QWORD *)(v8 + 240))
      return v28.n128_f64[0];
  }
  else if (v9 >= v10)
  {
    return v28.n128_f64[0];
  }
  *(_QWORD *)a1 = v7;
  a2[-1].n128_u64[1] = v8;
  return v28.n128_f64[0];
}

__n128 sub_2236D2244(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  __n128 result;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;

  if (!a3)
    return result;
  v4 = a4;
  v6 = a1;
  if (a3 == 1)
  {
LABEL_29:
    *(_QWORD *)v4 = *(_QWORD *)v6;
    return result;
  }
  if (a3 == 2)
  {
    v8 = (_QWORD *)*((_QWORD *)a2 - 1);
    v9 = v8[2];
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (v9 == v10)
    {
      if (v8[31] - v8[30] > *(_QWORD *)(*(_QWORD *)a1 + 248) - *(_QWORD *)(*(_QWORD *)a1 + 240))
        goto LABEL_28;
    }
    else if (v9 < v10)
    {
LABEL_28:
      *(_QWORD *)a4 = v8;
      v4 = a4 + 8;
      goto LABEL_29;
    }
    v8 = *(_QWORD **)a1;
    v6 = a2 - 8;
    goto LABEL_28;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (a1 == a2)
      return result;
    v11 = a1 + 8;
    *(_QWORD *)a4 = *(_QWORD *)a1;
    if (a1 + 8 == a2)
      return result;
    v12 = 0;
    v13 = a4;
    v14 = (uint64_t *)a4;
LABEL_13:
    while (2)
    {
      v18 = *v14++;
      v17 = v18;
      v19 = *(_QWORD *)v11;
      v20 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      v21 = *(_QWORD *)(v18 + 16);
      if (v20 == v21)
      {
        if (*(_QWORD *)(v19 + 248) - *(_QWORD *)(v19 + 240) <= *(_QWORD *)(v17 + 248) - *(_QWORD *)(v17 + 240))
          goto LABEL_15;
      }
      else if (v20 >= v21)
      {
LABEL_15:
        *v14 = v19;
        v11 += 8;
        v12 += 8;
        v13 = (char *)v14;
        if (v11 == a2)
          return result;
        continue;
      }
      break;
    }
    *((_QWORD *)v13 + 1) = v17;
    v15 = a4;
    if (v13 == a4)
      goto LABEL_12;
    v22 = v12;
    while (1)
    {
      v23 = *(_QWORD **)&a4[v22 - 8];
      v24 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      v25 = v23[2];
      if (v24 == v25)
      {
        if (*(_QWORD *)(*(_QWORD *)v11 + 248) - *(_QWORD *)(*(_QWORD *)v11 + 240) <= v23[31] - v23[30])
        {
          v15 = &a4[v22];
LABEL_12:
          v16 = *(_QWORD *)v11;
          v11 += 8;
          *(_QWORD *)v15 = v16;
          v12 += 8;
          v13 = (char *)v14;
          if (v11 == a2)
            return result;
          goto LABEL_13;
        }
      }
      else if (v24 >= v25)
      {
        v15 = v13;
        goto LABEL_12;
      }
      v13 -= 8;
      *(_QWORD *)&a4[v22] = v23;
      v22 -= 8;
      if (!v22)
      {
        v15 = a4;
        goto LABEL_12;
      }
    }
  }
  v26 = a3 >> 1;
  v27 = 8 * (a3 >> 1);
  v28 = &a1[v27];
  sub_2236D1E98(a1, &a1[v27], a3 >> 1, a4, a3 >> 1);
  sub_2236D1E98(&v6[v27], a2, a3 - v26, &v4[v27], a3 - v26);
  v30 = v4;
  v31 = v6;
  v32 = &v6[v27];
  do
  {
    while (1)
    {
      if (v32 == a2)
      {
        if (v31 == v28)
          return result;
        v41 = &v6[8 * v26] - v31 - 8;
        if (v41 >= 0x38 && (unint64_t)(v30 - v31) >= 0x20)
        {
          v51 = 0;
          v52 = (v41 >> 3) + 1;
          v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          v42 = &v4[v53];
          v43 = &v31[v53];
          v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v55 = &v4[v51];
            result = *(__n128 *)&v31[v51];
            v56 = *(_OWORD *)&v31[v51 + 16];
            *(__n128 *)v55 = result;
            *((_OWORD *)v55 + 1) = v56;
            v51 += 32;
            v54 -= 4;
          }
          while (v54);
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v42 = v4;
          v43 = v31;
        }
        do
        {
          v44 = *(_QWORD *)v43;
          v43 += 8;
          *(_QWORD *)v42 = v44;
          v42 += 8;
        }
        while (v43 != v28);
        return result;
      }
      v33 = *(_QWORD *)v32;
      v34 = *(_QWORD *)v31;
      v35 = *(_QWORD *)(*(_QWORD *)v32 + 16);
      v36 = *(_QWORD *)(*(_QWORD *)v31 + 16);
      if (v35 == v36)
        break;
      if (v35 >= v36)
        goto LABEL_38;
LABEL_32:
      *(_QWORD *)v4 = v33;
      v4 += 8;
      v32 += 8;
      v30 += 8;
      if (v31 == v28)
        goto LABEL_39;
    }
    if (*(_QWORD *)(v33 + 248) - *(_QWORD *)(v33 + 240) > *(_QWORD *)(v34 + 248) - *(_QWORD *)(v34 + 240))
      goto LABEL_32;
LABEL_38:
    *(_QWORD *)v4 = v34;
    v4 += 8;
    v31 += 8;
    v30 += 8;
  }
  while (v31 != v28);
LABEL_39:
  if (v32 == a2)
    return result;
  v37 = a2 - v32 - 8;
  if (v37 < 0x48 || (unint64_t)(v30 - v32) < 0x20)
  {
    v38 = v4;
    v39 = v32;
    do
    {
LABEL_43:
      v40 = *(_QWORD *)v39;
      v39 += 8;
      *(_QWORD *)v38 = v40;
      v38 += 8;
    }
    while (v39 != a2);
    return result;
  }
  v45 = 0;
  v46 = (v37 >> 3) + 1;
  v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
  v38 = &v4[v47];
  v39 = &v32[v47];
  v48 = v46 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v49 = &v4[v45];
    result = *(__n128 *)&v32[v45];
    v50 = *(_OWORD *)&v32[v45 + 16];
    *(__n128 *)v49 = result;
    *((_OWORD *)v49 + 1) = v50;
    v45 += 32;
    v48 -= 4;
  }
  while (v48);
  if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_43;
  return result;
}

__n128 sub_2236D25B8(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  char *v22;
  __n128 *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 *v32;
  __n128 *v33;
  unint64_t v34;
  __n128 *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __n128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 *v53;
  unint64_t v54;
  unint64_t v55;
  __n128 *v56;
  __n128 *v57;
  __n128 *v58;
  uint64_t v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  __n128 *v68;
  __n128 result;
  __n128 *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  char *v77;
  __n128 *v78;
  uint64_t v79;
  uint64_t v80;
  __n128 *v81;
  __n128 *v82;
  uint64_t v83;
  __n128 v84;
  unint64_t v85;
  char *v86;
  __n128 *v87;
  uint64_t v88;
  uint64_t v89;
  __n128 *v90;
  __n128 *v91;
  uint64_t v92;
  __n128 v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __n128 *v100;
  _QWORD *v101;
  __n128 *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __n128 *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __n128 *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;

  if (!a5)
    return result;
  v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4)
      return result;
    v11 = 0;
    v12 = a2->n128_u64[0];
    v13 = *(_QWORD *)(a2->n128_u64[0] + 16);
    v14 = -a4;
    while (1)
    {
      v16 = (_QWORD *)a1->n128_u64[v11 / 8];
      v17 = v16[2];
      if (v13 != v17)
      {
        if (v13 < v17)
          break;
        goto LABEL_8;
      }
      if (*(_QWORD *)(v12 + 248) - *(_QWORD *)(v12 + 240) > v16[31] - v16[30])
        break;
LABEL_8:
      v11 += 8;
      if (__CFADD__(v14++, 1))
        return result;
    }
    v18 = &a1->n128_u64[v11 / 8];
    if (-v14 >= v7)
    {
      if (v14 == -1)
      {
        a1->n128_u64[v11 / 8] = v12;
        a2->n128_u64[0] = (unint64_t)v16;
        return result;
      }
      if (v14 <= 0)
        v29 = -v14;
      else
        v29 = 1 - v14;
      v30 = v29 >> 1;
      v23 = (__n128 *)((char *)a1 + 8 * (v29 >> 1) + v11);
      if (a2 == a3)
      {
        v20 = 0;
LABEL_30:
        v21 = (__n128 *)((char *)a2 + 8 * v20);
        v31 = (8 * v20) >> 3;
        v22 = (char *)v23;
        v32 = v21;
        if (v23 != a2)
          goto LABEL_34;
        goto LABEL_64;
      }
      v20 = 0;
      v36 = ((char *)a3 - (char *)a2) >> 3;
      v37 = *(_QWORD *)(v23->n128_u64[0] + 16);
      while (2)
      {
        v38 = v36 >> 1;
        v39 = (v36 >> 1) + v20;
        v40 = (_QWORD *)a2->n128_u64[v39];
        v41 = v40[2];
        if (v41 == v37)
        {
          if (v40[31] - v40[30] <= *(_QWORD *)(v23->n128_u64[0] + 248) - *(_QWORD *)(v23->n128_u64[0] + 240))
            goto LABEL_42;
        }
        else if (v41 >= v37)
        {
LABEL_42:
          v36 = v38;
          if (!v38)
            goto LABEL_30;
          continue;
        }
        break;
      }
      v20 = v39 + 1;
      v38 = v36 + ~v38;
      goto LABEL_42;
    }
    if (v7 >= 0)
      v19 = v7;
    else
      v19 = v7 + 1;
    v20 = v19 >> 1;
    v21 = (__n128 *)((char *)a2 + 8 * v20);
    v22 = (char *)a2;
    v23 = (__n128 *)((char *)a1 + v11);
    if ((char *)a2 - (char *)a1 != v11)
    {
      v24 = (uint64_t)((char *)a2 - (char *)a1 - v11) >> 3;
      v25 = *(_QWORD *)(v21->n128_u64[0] + 16);
      v23 = (__n128 *)((char *)a1 + v11);
      while (1)
      {
        v26 = v24 >> 1;
        v27 = &v23->n128_i8[8 * (v24 >> 1)];
        v28 = *(_QWORD *)(*(_QWORD *)v27 + 16);
        if (v25 == v28)
        {
          if (*(_QWORD *)(v21->n128_u64[0] + 248) - *(_QWORD *)(v21->n128_u64[0] + 240) > *(_QWORD *)(*(_QWORD *)v27 + 248)
                                                                                         - *(_QWORD *)(*(_QWORD *)v27 + 240))
            goto LABEL_18;
        }
        else if (v25 < v28)
        {
          goto LABEL_18;
        }
        v23 = (__n128 *)(v27 + 8);
        v26 = v24 + ~v26;
LABEL_18:
        v24 = v26;
        if (!v26)
        {
          v22 = (char *)v23;
          break;
        }
      }
    }
    v30 = (uint64_t)(v22 - (char *)a1 - v11) >> 3;
    v31 = v20;
    v32 = (__n128 *)((char *)a2 + 8 * v20);
    if (v23 != a2)
    {
LABEL_34:
      v32 = (__n128 *)v22;
      if (v20)
      {
        v33 = (__n128 *)&v23->n128_i8[8];
        if (&v23->n128_i8[8] == (__int8 *)a2)
        {
          v117 = v23->n128_u64[0];
          v119 = v30;
          v42 = (char *)v21 - (char *)a2;
          v121 = a7;
          v123 = a6;
          v43 = a3;
          memmove(v23, a2, (char *)v21 - (char *)a2);
          v30 = v119;
          v18 = &a1->n128_u64[v11 / 8];
          a7 = v121;
          a6 = v123;
          a3 = v43;
          v32 = (__n128 *)((char *)v23 + v42);
          *(unint64_t *)((char *)v23->n128_u64 + v42) = v117;
        }
        else if (v20 == 1)
        {
          v34 = a2->n128_u64[0];
          v32 = (__n128 *)(v22 + 8);
          if (a2 != v23)
          {
            v120 = a7;
            v122 = a6;
            v35 = a3;
            v116 = a2->n128_u64[0];
            v118 = v30;
            memmove(v22 + 8, v23, (char *)a2 - v22);
            v34 = v116;
            v30 = v118;
            v18 = &a1->n128_u64[v11 / 8];
            a7 = v120;
            a3 = v35;
            a6 = v122;
          }
          v23->n128_u64[0] = v34;
        }
        else
        {
          v44 = ((char *)a2 - v22) >> 3;
          v45 = ((char *)v21 - (char *)a2) >> 3;
          if (v44 == v45)
          {
            v46 = 8 * v20 - 8;
            v47 = a2;
            do
            {
              v48 = v33[-1].n128_i64[1];
              v33[-1].n128_u64[1] = v47->n128_u64[0];
              v47->n128_u64[0] = v48;
              v47 = (__n128 *)((char *)v47 + 8);
              if (v33 == a2)
                break;
              v33 = (__n128 *)((char *)v33 + 8);
              v49 = v46;
              v46 -= 8;
            }
            while (v49);
            v32 = a2;
          }
          else
          {
            v50 = ((char *)v21 - (char *)a2) >> 3;
            v51 = ((char *)a2 - v22) >> 3;
            do
            {
              v52 = v51;
              v51 = v50;
              v50 = v52 % v50;
            }
            while (v50);
            if (v51)
            {
              v53 = (__n128 *)((char *)v23 + 8 * v51);
              do
              {
                v55 = v53[-1].n128_u64[1];
                v53 = (__n128 *)((char *)v53 - 8);
                v54 = v55;
                v56 = (__n128 *)((char *)v53 + 8 * v44);
                v57 = v53;
                do
                {
                  v58 = v56;
                  v57->n128_u64[0] = v56->n128_u64[0];
                  v59 = ((char *)v21 - (char *)v56) >> 3;
                  v60 = __OFSUB__(v44, v59);
                  v62 = v44 - v59;
                  v61 = (v62 < 0) ^ v60;
                  v56 = (__n128 *)((char *)v23 + 8 * v62);
                  if (v61)
                    v56 = (__n128 *)((char *)v58 + 8 * v44);
                  v57 = v58;
                }
                while (v56 != v53);
                v58->n128_u64[0] = v54;
              }
              while (v53 != v23);
            }
            v32 = (__n128 *)((char *)v23 + 8 * v45);
          }
        }
      }
    }
LABEL_64:
    a4 = -(v30 + v14);
    v63 = v7 - v31;
    if (v30 + v31 >= v7 - (v30 + v31) - v14)
    {
      v70 = (__n128 *)v18;
      v71 = v30;
      v72 = v7 - v31;
      v73 = a6;
      v74 = a7;
      sub_2236D25B8(v32, v21, a3, a4, v72);
      a7 = v74;
      a6 = v73;
      a4 = v71;
      a3 = v32;
      v7 = v31;
      a1 = v70;
      a2 = (__n128 *)v22;
      if (!v31)
        return result;
    }
    else
    {
      v64 = &a1->n128_u64[v11 / 8];
      v65 = v22;
      v66 = a6;
      v67 = a7;
      v68 = a3;
      sub_2236D25B8(v64, v65, v32, v30, v31);
      a7 = v67;
      a3 = v68;
      a6 = v66;
      v7 = v63;
      a1 = v32;
      a2 = v21;
      if (!v63)
        return result;
    }
  }
  if (a4 <= v7)
  {
    if (a1 == a2)
      return result;
    v85 = (char *)a2 - (char *)a1 - 8;
    v86 = a6;
    v87 = a1;
    if (v85 < 0x18)
      goto LABEL_119;
    v86 = a6;
    v87 = a1;
    if ((unint64_t)(a6 - (char *)a1) < 0x20)
      goto LABEL_119;
    v88 = (v85 >> 3) + 1;
    v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
    v86 = &a6[v89];
    v87 = (__n128 *)((char *)a1 + v89);
    v90 = a1 + 1;
    v91 = (__n128 *)(a6 + 16);
    v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = v90[-1];
      v93 = *v90;
      v91[-1] = result;
      *v91 = v93;
      v90 += 2;
      v91 += 2;
      v92 -= 4;
    }
    while (v92);
    if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_119:
      do
      {
        v94 = v87->n128_u64[0];
        v87 = (__n128 *)((char *)v87 + 8);
        *(_QWORD *)v86 = v94;
        v86 += 8;
      }
      while (v87 != a2);
    }
    if (v86 == a6)
      return result;
    while (1)
    {
      if (a2 == a3)
      {
        memmove(a1, a6, v86 - a6);
        return result;
      }
      v95 = a2->n128_u64[0];
      v96 = *(_QWORD *)a6;
      v97 = *(_QWORD *)(a2->n128_u64[0] + 16);
      v98 = *(_QWORD *)(*(_QWORD *)a6 + 16);
      if (v97 == v98)
      {
        if (*(_QWORD *)(v95 + 248) - *(_QWORD *)(v95 + 240) <= *(_QWORD *)(v96 + 248) - *(_QWORD *)(v96 + 240))
          goto LABEL_92;
LABEL_86:
        a1->n128_u64[0] = v95;
        a1 = (__n128 *)((char *)a1 + 8);
        a2 = (__n128 *)((char *)a2 + 8);
        if (a6 == v86)
          return result;
      }
      else
      {
        if (v97 < v98)
          goto LABEL_86;
LABEL_92:
        a1->n128_u64[0] = v96;
        a1 = (__n128 *)((char *)a1 + 8);
        a6 += 8;
        if (a6 == v86)
          return result;
      }
    }
  }
  v75 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v76 = v75 - 8;
  if ((unint64_t)(v75 - 8) < 0x18)
  {
    v77 = a6;
    v78 = a2;
    do
    {
LABEL_97:
      v99 = v78->n128_u64[0];
      v78 = (__n128 *)((char *)v78 + 8);
      *(_QWORD *)v77 = v99;
      v77 += 8;
    }
    while (v78 != a3);
    goto LABEL_98;
  }
  v77 = a6;
  v78 = a2;
  if ((unint64_t)(a6 - (char *)a2) < 0x20)
    goto LABEL_97;
  v79 = (v76 >> 3) + 1;
  v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
  v77 = &a6[v80];
  v78 = (__n128 *)((char *)a2 + v80);
  v81 = a2 + 1;
  v82 = (__n128 *)(a6 + 16);
  v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = v81[-1];
    v84 = *v81;
    v82[-1] = result;
    *v82 = v84;
    v81 += 2;
    v82 += 2;
    v83 -= 4;
  }
  while (v83);
  if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_97;
LABEL_98:
  if (v77 == a6)
    return result;
  v100 = a3;
  while (2)
  {
    if (a2 != a1)
    {
      v102 = (__n128 *)((char *)a2 - 8);
      v101 = (_QWORD *)a2[-1].n128_u64[1];
      v103 = (_QWORD *)*((_QWORD *)v77 - 1);
      v104 = v103[2];
      v105 = v101[2];
      if (v104 == v105)
      {
        if (v103[31] - v103[30] > v101[31] - v101[30])
          goto LABEL_101;
      }
      else if (v104 < v105)
      {
LABEL_101:
        a3[-1].n128_u64[1] = (unint64_t)v101;
        a3 = (__n128 *)((char *)a3 - 8);
        v100 = (__n128 *)((char *)v100 - 8);
        a2 = v102;
        if (v77 == a6)
          return result;
        continue;
      }
      v101 = (_QWORD *)*((_QWORD *)v77 - 1);
      v102 = a2;
      v77 -= 8;
      goto LABEL_101;
    }
    break;
  }
  v106 = v77 - a6 - 8;
  if (v106 < 0x58 || (unint64_t)(v77 - (char *)v100) < 0x20)
  {
    v107 = a3;
    v108 = v77;
    goto LABEL_111;
  }
  v111 = 0;
  v112 = (v106 >> 3) + 1;
  v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
  v107 = (__n128 *)((char *)a3 - v113);
  v108 = &v77[-v113];
  v114 = v112 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = *(__n128 *)&v77[v111 * 16 - 16];
    v115 = &a3[v111];
    v115[-2] = *(__n128 *)&v77[v111 * 16 - 32];
    v115[-1] = result;
    v111 -= 2;
    v114 -= 4;
  }
  while (v114);
  if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_111:
    v109 = &v107[-1].n128_i8[8];
    do
    {
      v110 = *((_QWORD *)v108 - 1);
      v108 -= 8;
      *(_QWORD *)v109 = v110;
      v109 -= 8;
    }
    while (v108 != a6);
  }
  return result;
}

unint64_t sub_2236D2CBC(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24EC20780;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_2236D2E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2236D2E58(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC070);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC070))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC068);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC070);
  }
  *a1 = qword_2540CC068;
}

void sub_2236D2EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC070);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC070);
  _Unwind_Resume(a1);
}

uint64_t sub_2236D2F4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _OWORD *v26;

  v4 = (_QWORD *)(a2 + 8);
  v5 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 != a2 + 8)
  {
    do
    {
      v6 = *((_DWORD *)v5 + 11);
      v26 = (_OWORD *)((char *)v5 + 28);
      v7 = sub_2231A9C40((uint64_t **)a1, (unsigned __int8 *)v5 + 28, (uint64_t)&unk_2245BA939, &v26);
      *((_DWORD *)v7 + 11) |= v6;
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v15 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v15);
      }
      v5 = v9;
    }
    while (v9 != v4);
  }
  sub_223475C18((_QWORD *)(a1 + 24), *(unsigned __int8 **)(a2 + 24), (unsigned __int8 *)(a2 + 32));
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  if (v10 != v11)
  {
    while (1)
    {
      while (1)
      {
        v12 = *(char **)(a1 + 48);
        v13 = *(char **)(a1 + 56);
        v14 = v12;
        if (v12 != v13)
        {
          v14 = *(char **)(a1 + 48);
          while (1)
          {
            v15 = *(_QWORD *)v14 == *(_QWORD *)v10 && *((_QWORD *)v14 + 1) == *(_QWORD *)(v10 + 8);
            if (v15)
              break;
            v14 += 16;
            if (v14 == v13)
            {
              v14 = *(char **)(a1 + 56);
              break;
            }
          }
        }
        if (v14 == v13)
          break;
        v10 += 16;
        if (v10 == v11)
          return a1;
      }
      v16 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v13 >= v16)
        break;
      *(_OWORD *)v13 = *(_OWORD *)v10;
      v17 = v13 + 16;
LABEL_39:
      *(_QWORD *)(a1 + 56) = v17;
      sub_2231B0224((unsigned __int8 **)a1, (unsigned __int8 *)v10);
      sub_2231AFD68((unsigned __int8 **)(a1 + 24), (unsigned __int8 *)v10);
      v10 += 16;
      if (v10 == v11)
        return a1;
    }
    v18 = (v13 - v12) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      sub_22316E078();
    v20 = v16 - (_QWORD)v12;
    if (v20 >> 3 > v19)
      v19 = v20 >> 3;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 60)
        sub_223174E94();
      v22 = (char *)operator new(16 * v21);
      v23 = &v22[16 * v18];
      *(_OWORD *)v23 = *(_OWORD *)v10;
      v24 = (uint64_t)v23;
      if (v12 == v13)
        goto LABEL_37;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(16 * v18);
      *(_OWORD *)(16 * v18) = *(_OWORD *)v10;
      v24 = 16 * v18;
      if (v12 == v13)
      {
LABEL_37:
        v17 = v23 + 16;
        *(_QWORD *)(a1 + 48) = v24;
        *(_QWORD *)(a1 + 56) = v23 + 16;
        *(_QWORD *)(a1 + 64) = &v22[16 * v21];
        if (v12)
          operator delete(v12);
        goto LABEL_39;
      }
    }
    do
    {
      *(_OWORD *)(v24 - 16) = *((_OWORD *)v13 - 1);
      v24 -= 16;
      v13 -= 16;
    }
    while (v13 != v12);
    v12 = *(char **)(a1 + 48);
    goto LABEL_37;
  }
  return a1;
}

void sub_2236D31A0(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 **a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 *v12;
  uint64_t (***v13)();
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t **v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  _OWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (***v35)();
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  _OWORD *v56;
  unint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  unsigned __int8 v60;
  const void *v61;
  size_t v62;
  _OWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  const char *v75;
  size_t v76;
  char *v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  const char *v80;
  size_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  void *p_p;
  NSObject *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  size_t v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  size_t v93;
  size_t v94;
  char **v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char v100;
  _QWORD *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  void *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  void *v147;
  void *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  int8x8_t v154;
  uint8x8_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  BOOL v160;
  unint64_t v161;
  uint64_t v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  const void *v166;
  size_t v167;
  unsigned __int8 v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  const char *v173;
  size_t v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  const char *v177;
  size_t v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  NSObject *v183;
  uint64_t v184;
  uint64_t v185;
  size_t v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  size_t v189;
  size_t v190;
  char **v191;
  void *v192;
  unsigned __int8 *v193;
  uint64_t *v194;
  uint64_t **v195;
  uint64_t **v196;
  unsigned int v197;
  unsigned int v198;
  BOOL v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  _BYTE *v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char v218;
  _QWORD *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  void *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  char *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t *v261;
  unint64_t v262;
  _QWORD *v263;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v264;
  uint64_t (**v265)();
  int v266;
  uint64_t (***v267)();
  int v268;
  uint64_t (**v269)();
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  _QWORD *v288;
  _QWORD *v289;
  _OWORD *v290;
  unsigned __int8 *v291;
  char *v292;
  char *v293;
  _QWORD *v294;
  unsigned int v295;
  unsigned int v296;
  BOOL v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  _OWORD *v301;
  void *v302;
  const char *v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  int v307;
  _QWORD *v309;
  int v310;
  const char *v311;
  _QWORD *v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  char *v321;
  __int128 v322;
  __int128 *v323;
  char __s[8];
  _QWORD v325[3];
  _QWORD *v326;
  _BYTE object[24];
  __int128 v328;
  void *__p;
  uint64_t (**v330)();
  unint64_t v331;
  std::__shared_weak_count *v332;
  uint64_t (***v333)();
  __int128 v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t (**rep)();
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v338;
  int v339;
  uint64_t (***v340)();
  int v341;
  const char *v342;
  __int128 v343;
  __int128 v344;
  std::__shared_weak_count *v345;
  char *v346;
  std::__shared_weak_count *v347;
  uint64_t v348;

  v348 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a5 + 160) = 0;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  v9 = (_QWORD *)(a2 + 8);
  v8 = *(_QWORD **)a2;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *((_QWORD *)&v319 + 1) = 0;
  v320 = 0;
  *(_QWORD *)&v319 = (char *)&v319 + 8;
  sub_2236C4048(&v319, v8, a3, v9);
  v10 = (uint64_t *)v319;
  *(_QWORD *)object = v319;
  *(_QWORD *)&object[8] = &off_24EC576D0;
  *((_QWORD *)&v328 + 1) = &object[8];
  __p = (char *)&v319 + 8;
  *(_QWORD *)&object[16] = a3;
  v330 = &off_24EC576D0;
  v331 = a3;
  v333 = &v330;
  v11 = v325;
  *(_QWORD *)__s = v319;
  v325[0] = &off_24EC576D0;
  v326 = v325;
  v325[1] = a3;
  v12 = &v322;
  v321 = (char *)&v319 + 8;
  *(_QWORD *)&v322 = &off_24EC576D0;
  v323 = &v322;
  *((_QWORD *)&v322 + 1) = a3;
  v316 = 0;
  v317 = 0;
  v315 = (uint64_t *)&v316;
  v13 = &rep;
  v336 = (uint64_t *)v319;
  rep = &off_24EC576D0;
  v340 = &rep;
  v338 = a3;
  v14 = a3;
  v15 = (_QWORD *)&v344 + 1;
  *(_QWORD *)&v344 = (char *)&v319 + 8;
  *((_QWORD *)&v344 + 1) = &off_24EC576D0;
  v347 = (std::__shared_weak_count *)((char *)&v344 + 8);
  v309 = (_QWORD *)v14;
  v345 = (std::__shared_weak_count *)v14;
  if ((__int128 *)v319 == (__int128 *)((char *)&v319 + 8))
  {
LABEL_85:
    v30 = 4;
LABEL_86:
    (*(void (**)(_QWORD *))(*v15 + 8 * v30))(v15);
    goto LABEL_87;
  }
  while (2)
  {
    if (!v340)
      sub_223198474();
    ((void (*)(__int128 *__return_ptr, uint64_t (***)(), uint64_t))(*v340)[6])(&v334, v340, (uint64_t)v10 + 25);
    v16 = v316;
    v17 = &v316;
    v18 = &v316;
    if (v315 == (uint64_t *)&v316)
      goto LABEL_27;
    v19 = v316;
    if (v316)
    {
      do
      {
        v18 = (uint64_t **)v19;
        v19 = (uint64_t *)v19[1];
      }
      while (v19);
    }
    else
    {
      do
      {
        v18 = (uint64_t **)v17[2];
        v160 = *v18 == (uint64_t *)v17;
        v17 = v18;
      }
      while (v160);
    }
    v20 = *((unsigned __int8 *)v18 + 32);
    v21 = v334;
    if (v20 != v334)
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 33);
    v21 = BYTE1(v334);
    if (v20 != BYTE1(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 34);
    v21 = BYTE2(v334);
    if (v20 != BYTE2(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 35);
    v21 = BYTE3(v334);
    if (v20 != BYTE3(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 36);
    v21 = BYTE4(v334);
    if (v20 != BYTE4(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 37);
    v21 = BYTE5(v334);
    if (v20 != BYTE5(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 38);
    v21 = BYTE6(v334);
    if (v20 != BYTE6(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 39);
    v21 = BYTE7(v334);
    if (v20 != BYTE7(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 40);
    v21 = BYTE8(v334);
    if (v20 != BYTE8(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 41);
    v21 = BYTE9(v334);
    if (v20 != BYTE9(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 42);
    v21 = BYTE10(v334);
    if (v20 != BYTE10(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 43);
    v21 = BYTE11(v334);
    if (v20 != BYTE11(v334))
      goto LABEL_650;
    v20 = *((unsigned __int8 *)v18 + 44);
    v21 = BYTE12(v334);
    if (v20 != BYTE12(v334)
      || (v20 = *((unsigned __int8 *)v18 + 45), v21 = BYTE13(v334), v20 != BYTE13(v334))
      || (v20 = *((unsigned __int8 *)v18 + 46), v21 = BYTE14(v334), v20 != BYTE14(v334))
      || (v20 = *((unsigned __int8 *)v18 + 47), v21 = HIBYTE(v334), v20 != HIBYTE(v334)))
    {
LABEL_650:
      v17 = &v316;
      if (v20 < v21)
      {
LABEL_27:
        v22 = &v316;
        if (v316)
        {
          v22 = v18 + 1;
          goto LABEL_71;
        }
LABEL_74:
        v29 = operator new(0x38uLL);
        v29[2] = v334;
        *((_QWORD *)v29 + 6) = v335;
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = v17;
        *v22 = (uint64_t *)v29;
        if (*v315)
        {
          v315 = (uint64_t *)*v315;
          v29 = *v22;
        }
        sub_2231A9A8C(v316, (uint64_t *)v29);
        ++v317;
        v27 = v336;
        v28 = (uint64_t *)v336[1];
        if (v28)
          goto LABEL_77;
        do
        {
LABEL_79:
          v10 = (uint64_t *)v27[2];
          v160 = *v10 == (_QWORD)v27;
          v27 = v10;
        }
        while (!v160);
        goto LABEL_3;
      }
    }
    v18 = &v316;
    v22 = &v316;
    if (!v316)
      goto LABEL_71;
    v22 = &v316;
    while (1)
    {
      while (1)
      {
        v17 = (uint64_t **)v16;
        v23 = *((unsigned __int8 *)v16 + 32);
        if (v334 != v23)
        {
          v26 = v334;
          if (v334 >= v23)
            goto LABEL_67;
          goto LABEL_31;
        }
        v23 = *((unsigned __int8 *)v17 + 33);
        if (BYTE1(v334) == v23)
          break;
        v26 = BYTE1(v334);
        if (BYTE1(v334) >= v23)
          goto LABEL_67;
LABEL_31:
        v16 = *v17;
        v22 = v17;
        if (!*v17)
          goto LABEL_74;
      }
      v24 = *((unsigned __int8 *)v17 + 34);
      v25 = BYTE2(v334);
      if (BYTE2(v334) != v24)
        goto LABEL_48;
      v24 = *((unsigned __int8 *)v17 + 35);
      v25 = BYTE3(v334);
      if (BYTE3(v334) != v24)
        goto LABEL_48;
      v24 = *((unsigned __int8 *)v17 + 36);
      v25 = BYTE4(v334);
      if (BYTE4(v334) != v24)
        goto LABEL_48;
      v24 = *((unsigned __int8 *)v17 + 37);
      v25 = BYTE5(v334);
      if (BYTE5(v334) != v24)
        goto LABEL_48;
      v24 = *((unsigned __int8 *)v17 + 38);
      v25 = BYTE6(v334);
      if (BYTE6(v334) != v24)
        goto LABEL_48;
      v24 = *((unsigned __int8 *)v17 + 39);
      v25 = BYTE7(v334);
      if (BYTE7(v334) != v24)
        goto LABEL_48;
      v24 = *((unsigned __int8 *)v17 + 40);
      v25 = BYTE8(v334);
      if (BYTE8(v334) != v24)
        goto LABEL_48;
      v24 = *((unsigned __int8 *)v17 + 41);
      v25 = BYTE9(v334);
      if (BYTE9(v334) != v24)
        goto LABEL_48;
      v24 = *((unsigned __int8 *)v17 + 42);
      v25 = BYTE10(v334);
      if (BYTE10(v334) != v24)
        goto LABEL_48;
      v24 = *((unsigned __int8 *)v17 + 43);
      v25 = BYTE11(v334);
      if (BYTE11(v334) != v24)
        goto LABEL_48;
      v24 = *((unsigned __int8 *)v17 + 44);
      v25 = BYTE12(v334);
      if (BYTE12(v334) != v24
        || (v24 = *((unsigned __int8 *)v17 + 45), v25 = BYTE13(v334), BYTE13(v334) != v24)
        || (v24 = *((unsigned __int8 *)v17 + 46), v25 = BYTE14(v334), BYTE14(v334) != v24)
        || (v24 = *((unsigned __int8 *)v17 + 47), v25 = HIBYTE(v334), HIBYTE(v334) != v24))
      {
LABEL_48:
        if (v25 < v24)
          goto LABEL_31;
      }
      v23 = *((unsigned __int8 *)v17 + 34);
      v26 = BYTE2(v334);
      if (v23 == BYTE2(v334))
      {
        v23 = *((unsigned __int8 *)v17 + 35);
        v26 = BYTE3(v334);
        if (v23 == BYTE3(v334))
        {
          v23 = *((unsigned __int8 *)v17 + 36);
          v26 = BYTE4(v334);
          if (v23 == BYTE4(v334))
          {
            v23 = *((unsigned __int8 *)v17 + 37);
            v26 = BYTE5(v334);
            if (v23 == BYTE5(v334))
            {
              v23 = *((unsigned __int8 *)v17 + 38);
              v26 = BYTE6(v334);
              if (v23 == BYTE6(v334))
              {
                v23 = *((unsigned __int8 *)v17 + 39);
                v26 = BYTE7(v334);
                if (v23 == BYTE7(v334))
                {
                  v23 = *((unsigned __int8 *)v17 + 40);
                  v26 = BYTE8(v334);
                  if (v23 == BYTE8(v334))
                  {
                    v23 = *((unsigned __int8 *)v17 + 41);
                    v26 = BYTE9(v334);
                    if (v23 == BYTE9(v334))
                    {
                      v23 = *((unsigned __int8 *)v17 + 42);
                      v26 = BYTE10(v334);
                      if (v23 == BYTE10(v334))
                      {
                        v23 = *((unsigned __int8 *)v17 + 43);
                        v26 = BYTE11(v334);
                        if (v23 == BYTE11(v334))
                        {
                          v23 = *((unsigned __int8 *)v17 + 44);
                          v26 = BYTE12(v334);
                          if (v23 == BYTE12(v334))
                          {
                            v23 = *((unsigned __int8 *)v17 + 45);
                            v26 = BYTE13(v334);
                            if (v23 == BYTE13(v334))
                            {
                              v23 = *((unsigned __int8 *)v17 + 46);
                              v26 = BYTE14(v334);
                              if (v23 == BYTE14(v334))
                              {
                                v23 = *((unsigned __int8 *)v17 + 47);
                                v26 = HIBYTE(v334);
                                if (v23 == HIBYTE(v334))
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_67:
      if (v23 >= v26)
        break;
      v22 = v17 + 1;
      v16 = v17[1];
      if (!v16)
        goto LABEL_74;
    }
    v18 = v17;
LABEL_71:
    v17 = v18;
    if (!*v22)
      goto LABEL_74;
    v27 = v336;
    v28 = (uint64_t *)v336[1];
    if (!v28)
      goto LABEL_79;
    do
    {
LABEL_77:
      v10 = v28;
      v28 = (uint64_t *)*v28;
    }
    while (v28);
LABEL_3:
    v336 = v10;
    if (v10 != (uint64_t *)v344)
      continue;
    break;
  }
  if (v347 == (std::__shared_weak_count *)((char *)&v344 + 8))
    goto LABEL_85;
  if (v347)
  {
    v30 = 5;
    v15 = &v347->__vftable;
    goto LABEL_86;
  }
LABEL_87:
  if (v340 == &rep)
  {
    v32 = 4;
    v31 = v309;
LABEL_91:
    ((void (*)(uint64_t (***)()))(*v13)[v32])(v13);
  }
  else
  {
    v31 = v309;
    if (v340)
    {
      v32 = 5;
      v13 = v340;
      goto LABEL_91;
    }
  }
  if (v323 == &v322)
  {
    v33 = 4;
LABEL_96:
    (*(void (**)(__int128 *))(*(_QWORD *)v12 + 8 * v33))(v12);
  }
  else if (v323)
  {
    v33 = 5;
    v12 = v323;
    goto LABEL_96;
  }
  if (v326 == v325)
  {
    v34 = 4;
LABEL_101:
    (*(void (**)(_QWORD *))(*v11 + 8 * v34))(v11);
  }
  else if (v326)
  {
    v34 = 5;
    v11 = v326;
    goto LABEL_101;
  }
  v35 = v333;
  if (v333 == &v330)
  {
    v37 = 4;
    v35 = &v330;
    v36 = a5;
LABEL_106:
    (*v35)[v37]();
  }
  else
  {
    v36 = a5;
    if (v333)
    {
      v37 = 5;
      goto LABEL_106;
    }
  }
  v38 = (_QWORD *)*((_QWORD *)&v328 + 1);
  if (*((_BYTE **)&v328 + 1) == &object[8])
  {
    v39 = 4;
    v38 = &object[8];
LABEL_111:
    (*(void (**)(void))(*v38 + 8 * v39))();
  }
  else if (*((_QWORD *)&v328 + 1))
  {
    v39 = 5;
    goto LABEL_111;
  }
  sub_223198030((uint64_t)&v319, *((_QWORD **)&v319 + 1));
  sub_2236D6024((int64x2_t *)object, &v315);
  v40 = *(void **)v36;
  if (*(_QWORD *)v36)
  {
    *(_QWORD *)(v36 + 8) = v40;
    operator delete(v40);
    *(_QWORD *)v36 = 0;
    *(_QWORD *)(v36 + 8) = 0;
    *(_QWORD *)(v36 + 16) = 0;
  }
  *(_OWORD *)v36 = *(_OWORD *)object;
  *(_QWORD *)(v36 + 16) = *(_QWORD *)&object[16];
  if (v36 != a2)
    sub_2231984D0((_QWORD *)(v36 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4);
  sub_2236DEE90(object, *(_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32));
  v41 = *(void **)(v36 + 72);
  if (v41)
  {
    *(_QWORD *)(v36 + 80) = v41;
    operator delete(v41);
    *(_QWORD *)(v36 + 72) = 0;
    *(_QWORD *)(v36 + 80) = 0;
    *(_QWORD *)(v36 + 88) = 0;
  }
  *(_OWORD *)(v36 + 72) = *(_OWORD *)object;
  *(_QWORD *)(v36 + 88) = *(_QWORD *)&object[16];
  *((_QWORD *)&v334 + 1) = 0;
  v335 = 0;
  *(_QWORD *)&v334 = (char *)&v334 + 8;
  v42 = *a4;
  v43 = a4[1];
  v44 = "cy6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_";
  if (*a4 != v43)
  {
    v313 = (_QWORD *)(v36 + 144);
    v306 = a1;
    do
    {
      v45 = sub_223340F28(v31, (uint64_t)v42);
      if (!v45)
      {
        if ((v42[240] & 0x30) == 0)
          goto LABEL_121;
        v58 = *(_OWORD **)(v36 + 152);
        v57 = *(_QWORD *)(v36 + 160);
        if ((unint64_t)v58 < v57)
        {
          *v58 = *(_OWORD *)v42;
          v59 = v58 + 1;
LABEL_193:
          *(_QWORD *)(v36 + 152) = v59;
          goto LABEL_121;
        }
        v63 = (_OWORD *)*v313;
        v64 = ((uint64_t)v58 - *v313) >> 4;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 60)
          sub_22316E078();
        v66 = v57 - (_QWORD)v63;
        if (v66 >> 3 > v65)
          v65 = v66 >> 3;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
          v67 = 0xFFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67)
        {
          if (v67 >> 60)
            sub_223174E94();
          v68 = (char *)operator new(16 * v67);
          v69 = &v68[16 * v64];
          *(_OWORD *)v69 = *(_OWORD *)v42;
          v70 = (uint64_t)v69;
          if (v58 == v63)
            goto LABEL_191;
          do
          {
LABEL_188:
            *(_OWORD *)(v70 - 16) = *(v58 - 1);
            v70 -= 16;
            --v58;
          }
          while (v58 != v63);
          v58 = (_OWORD *)*v313;
          v59 = v69 + 16;
          *(_QWORD *)(v36 + 144) = v70;
          *(_QWORD *)(v36 + 152) = v69 + 16;
          *(_QWORD *)(v36 + 160) = &v68[16 * v67];
          if (!v58)
            goto LABEL_193;
        }
        else
        {
          v68 = 0;
          v69 = (char *)(16 * v64);
          *(_OWORD *)(16 * v64) = *(_OWORD *)v42;
          v70 = 16 * v64;
          if (v58 != v63)
            goto LABEL_188;
LABEL_191:
          v59 = v69 + 16;
          *(_QWORD *)(v36 + 144) = v70;
          *(_QWORD *)(v36 + 152) = v69 + 16;
          *(_QWORD *)(v36 + 160) = &v68[16 * v67];
          if (!v58)
            goto LABEL_193;
        }
        operator delete(v58);
        goto LABEL_193;
      }
      v46 = v45[4];
      v47 = (char *)*((_QWORD *)&v334 + 1);
      v48 = (char *)&v334 + 8;
      v49 = (_QWORD *)&v334 + 1;
      if (!*((_QWORD *)&v334 + 1))
      {
LABEL_162:
        v56 = operator new(0x38uLL);
        v56[2] = *(_OWORD *)v42;
        *((_QWORD *)v56 + 6) = v46;
        *(_QWORD *)v56 = 0;
        *((_QWORD *)v56 + 1) = 0;
        *((_QWORD *)v56 + 2) = v48;
        *v49 = v56;
        if (*(_QWORD *)v334)
        {
          *(_QWORD *)&v334 = *(_QWORD *)v334;
          v56 = (_OWORD *)*v49;
        }
        sub_2231A9A8C(*((uint64_t **)&v334 + 1), (uint64_t *)v56);
        ++v335;
        goto LABEL_121;
      }
      v50 = *v42;
      while (1)
      {
        while (1)
        {
          v48 = v47;
          v51 = v47[32];
          v52 = v50 >= v51;
          if (v50 != v51)
          {
            v53 = *v42;
            goto LABEL_157;
          }
          v53 = v42[1];
          v51 = v48[33];
          v52 = v53 >= v51;
          if (v53 == v51)
          {
            v53 = v42[2];
            v51 = v48[34];
            v52 = v53 >= v51;
            if (v53 == v51)
            {
              v53 = v42[3];
              v51 = v48[35];
              v52 = v53 >= v51;
              if (v53 == v51)
                break;
            }
          }
LABEL_157:
          if (v52)
            goto LABEL_159;
LABEL_125:
          v47 = *(char **)v48;
          v49 = v48;
          if (!*(_QWORD *)v48)
            goto LABEL_162;
        }
        v54 = v42[4];
        v55 = v48[36];
        if (v54 != v55)
          goto LABEL_142;
        v54 = v42[5];
        v55 = v48[37];
        if (v54 != v55)
          goto LABEL_142;
        v54 = v42[6];
        v55 = v48[38];
        if (v54 != v55)
          goto LABEL_142;
        v54 = v42[7];
        v55 = v48[39];
        if (v54 != v55)
          goto LABEL_142;
        v54 = v42[8];
        v55 = v48[40];
        if (v54 != v55)
          goto LABEL_142;
        v54 = v42[9];
        v55 = v48[41];
        if (v54 != v55)
          goto LABEL_142;
        v54 = v42[10];
        v55 = v48[42];
        if (v54 != v55)
          goto LABEL_142;
        v54 = v42[11];
        v55 = v48[43];
        if (v54 != v55)
          goto LABEL_142;
        v54 = v42[12];
        v55 = v48[44];
        if (v54 != v55
          || (v54 = v42[13], v55 = v48[45], v54 != v55)
          || (v54 = v42[14], v55 = v48[46], v54 != v55)
          || (v54 = v42[15], v55 = v48[47], v54 != v55))
        {
LABEL_142:
          if (v54 < v55)
            goto LABEL_125;
        }
        v51 = v48[36];
        v53 = v42[4];
        if (v51 == v53)
        {
          v51 = v48[37];
          v53 = v42[5];
          if (v51 == v53)
          {
            v51 = v48[38];
            v53 = v42[6];
            if (v51 == v53)
            {
              v51 = v48[39];
              v53 = v42[7];
              if (v51 == v53)
              {
                v51 = v48[40];
                v53 = v42[8];
                if (v51 == v53)
                {
                  v51 = v48[41];
                  v53 = v42[9];
                  if (v51 == v53)
                  {
                    v51 = v48[42];
                    v53 = v42[10];
                    if (v51 == v53)
                    {
                      v51 = v48[43];
                      v53 = v42[11];
                      if (v51 == v53)
                      {
                        v51 = v48[44];
                        v53 = v42[12];
                        if (v51 == v53)
                        {
                          v51 = v48[45];
                          v53 = v42[13];
                          if (v51 == v53)
                          {
                            v51 = v48[46];
                            v53 = v42[14];
                            if (v51 == v53)
                            {
                              v51 = v48[47];
                              v53 = v42[15];
                              if (v51 == v53)
                                break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_159:
        if (v51 >= v53)
          break;
        v47 = (char *)*((_QWORD *)v48 + 1);
        if (!v47)
        {
          v49 = v48 + 8;
          goto LABEL_162;
        }
      }
      v60 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_2236D6148(object);
      if (*(char *)(*(_QWORD *)object + 39) < 0)
      {
        v61 = *(const void **)(*(_QWORD *)object + 16);
        v62 = *(_QWORD *)(*(_QWORD *)object + 24);
      }
      else
      {
        v61 = (const void *)(*(_QWORD *)object + 16);
        v62 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
      }
      sub_223195728((uint64_t)&stru_255789280, v61, v62, "CUPAK: Duplicate KFS with updates %.13s", 0x27uLL);
      sub_2236D2E58(&v318);
      if (**(int **)(v318 + 56) > 5)
        goto LABEL_121;
      v71 = *(unsigned __int8 *)(v318 + 72);
      v72 = sub_22322F254(v318, "OSLogSurrogateAppender", 1, 0);
      v73 = v72;
      if (!v71 && !v72)
        goto LABEL_121;
      v336 = &v318;
      rep = (uint64_t (**)())std::chrono::steady_clock::now().__d_.__rep_;
      v338 = std::chrono::system_clock::now().__d_.__rep_;
      v339 = 5;
      v340 = (uint64_t (***)())"unknown file";
      v341 = 324;
      v342 = "unknown function";
      v343 = 0uLL;
      sub_2245664AC(v42, __s);
      v74 = *v336;
      v75 = (const char *)(*v336 + 16);
      v303 = v75;
      v304 = *v336;
      if (*(char *)(*v336 + 39) < 0)
      {
        v75 = *(const char **)(v74 + 16);
        v76 = *(_QWORD *)(v74 + 24);
        v310 = v71;
        v77 = v44;
        v79 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v79 & 1) == 0)
        {
LABEL_307:
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v344);
            sub_223199C58("com.apple.cv3d", (unint64_t)&v344, &xmmword_255788F40);
            if ((_BYTE)v346 && SHIBYTE(v345) < 0)
              operator delete((void *)v344);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
            v31 = v309;
          }
        }
      }
      else
      {
        v76 = *(unsigned __int8 *)(*v336 + 39);
        v310 = v71;
        v77 = v44;
        v78 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v78 & 1) == 0)
          goto LABEL_307;
      }
      if (byte_255788F57 >= 0)
        v80 = (const char *)&xmmword_255788F40;
      else
        v80 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v81 = byte_255788F57;
      else
        v81 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v80, v75);
      if (v81 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v81 >= 0x17)
      {
        v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v81 | 7) != 0x17)
          v83 = v81 | 7;
        v84 = v83 + 1;
        v82 = operator new(v83 + 1);
        *(_QWORD *)&object[16] = v81;
        *(_QWORD *)&v328 = v84 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v82;
        v31 = v309;
LABEL_208:
        memmove(v82, v80, v81);
        goto LABEL_209;
      }
      BYTE7(v328) = v81;
      v82 = &object[8];
      if (v81)
        goto LABEL_208;
LABEL_209:
      v82[v81] = 0;
      BYTE8(v328) = 1;
      if (v76 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v36 = a5;
      v44 = v77;
      if (v76 >= 0x17)
      {
        v88 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v88 = v76 | 7;
        v89 = v88 + 1;
        a1 = v306;
        p_p = operator new(v88 + 1);
        v330 = (uint64_t (**)())v76;
        v331 = v89 | 0x8000000000000000;
        __p = p_p;
        v31 = v309;
      }
      else
      {
        HIBYTE(v331) = v76;
        p_p = &__p;
        a1 = v306;
        if (!v76)
        {
          LOBYTE(__p) = 0;
          LOBYTE(v332) = 1;
          v86 = *(NSObject **)object;
          if ((SHIBYTE(v331) & 0x80000000) == 0)
            goto LABEL_213;
LABEL_219:
          operator delete(__p);
          v87 = v310;
          if (BYTE8(v328))
            goto LABEL_220;
          goto LABEL_222;
        }
      }
      memmove(p_p, v75, v76);
      *((_BYTE *)p_p + v76) = 0;
      LOBYTE(v332) = 1;
      v86 = *(NSObject **)object;
      if (SHIBYTE(v331) < 0)
        goto LABEL_219;
LABEL_213:
      v87 = v310;
      if (BYTE8(v328))
      {
LABEL_220:
        if (SBYTE7(v328) < 0)
          operator delete(*(void **)&object[8]);
      }
LABEL_222:
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (!v73 || !*(_QWORD *)(v73 + 24))
      {
        os_log_type_enabled(v86, OS_LOG_TYPE_ERROR);
        *(_QWORD *)object = 0xD04100202;
        *(_WORD *)&object[8] = 2080;
        *(_QWORD *)&object[10] = __s;
        v96 = (void *)_os_log_send_and_compose_impl();
        if (!v96)
          goto LABEL_294;
        free(v96);
        if (!v87)
          goto LABEL_296;
LABEL_295:
        sub_2245664AC(v42, object);
        sub_22322C138((uint64_t)&v336, "CUPAK: Duplicate KFS with updates %.13s", object);
        sub_223182C08((uint64_t)&v336);
        goto LABEL_296;
      }
      v90 = _os_log_pack_size();
      v91 = (std::__shared_weak_count_vtbl *)operator new(v90, (std::align_val_t)8uLL);
      v92 = (std::__shared_weak_count *)operator new();
      v92->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
      v92->__shared_owners_ = 0;
      v92->__shared_weak_owners_ = 0;
      v92[1].__vftable = v91;
      *(_QWORD *)&v344 = v91;
      *((_QWORD *)&v344 + 1) = v91;
      v345 = v92;
      v346 = 0;
      v347 = 0;
      v93 = strlen(__s);
      if (v93 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v94 = v93;
      if (v93 >= 0x17)
      {
        v97 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v93 | 7) != 0x17)
          v97 = v93 | 7;
        v98 = v97 + 1;
        v95 = (char **)operator new(v97 + 1);
        *(_QWORD *)&v322 = v94;
        *((_QWORD *)&v322 + 1) = v98 | 0x8000000000000000;
        v321 = (char *)v95;
        v31 = v309;
      }
      else
      {
        HIBYTE(v322) = v93;
        v95 = &v321;
        if (!v93)
          goto LABEL_237;
      }
      memcpy(v95, __s, v94);
LABEL_237:
      *((_BYTE *)v95 + v94) = 0;
      v99 = v321;
      *(_QWORD *)&v319 = v322;
      *(_QWORD *)((char *)&v319 + 7) = *(_QWORD *)((char *)&v322 + 7);
      v100 = HIBYTE(v322);
      v101 = operator new(0x38uLL);
      v101[1] = 0;
      v101[2] = 0;
      v101[3] = off_24EC1FA48;
      *v101 = &off_24EC1F9F8;
      v102 = v319;
      v101[4] = v99;
      v101[5] = v102;
      *(_QWORD *)((char *)v101 + 47) = *(_QWORD *)((char *)&v319 + 7);
      *((_BYTE *)v101 + 55) = v100;
      *(_QWORD *)&v319 = 0;
      *(_QWORD *)((char *)&v319 + 7) = 0;
      v103 = v347;
      v346 = (char *)(v101 + 3);
      v347 = (std::__shared_weak_count *)v101;
      if (v103)
      {
        p_shared_owners = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(p_shared_owners);
        while (__stlxr(v105 - 1, p_shared_owners));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      *(_OWORD *)object = v344;
      v106 = v346;
      *(_QWORD *)&object[16] = v345;
      if (v345)
      {
        v107 = (unint64_t *)&v345->__shared_owners_;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      v109 = v347;
      *(_QWORD *)&v328 = v106;
      *((_QWORD *)&v328 + 1) = v347;
      if (v347)
      {
        v110 = (unint64_t *)&v347->__shared_owners_;
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
        __p = v106;
        do
          v112 = __ldaxr(v110);
        while (__stlxr(v112 - 1, v110));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      else
      {
        __p = v106;
      }
      v113 = v345;
      if (v345)
      {
        v114 = (unint64_t *)&v345->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      v116 = *(_QWORD *)object;
      if (*((char *)__p + 31) >= 0)
        v117 = (char *)__p + 8;
      else
        v117 = (char *)*((_QWORD *)__p + 1);
      v118 = _os_log_pack_fill();
      *(_DWORD *)v118 = 68157954;
      *(_DWORD *)(v118 + 4) = 13;
      *(_WORD *)(v118 + 8) = 2080;
      *(_QWORD *)(v118 + 10) = v117;
      v119 = operator new();
      v120 = *(unsigned __int8 *)(v304 + 39);
      v121 = v303;
      if ((v120 & 0x80u) != 0)
      {
        v121 = *(const char **)(v304 + 16);
        v120 = *(_QWORD *)(v304 + 24);
      }
      *(_QWORD *)v119 = v116;
      *(_OWORD *)(v119 + 8) = *(_OWORD *)&object[8];
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      *(_OWORD *)(v119 + 24) = v328;
      v328 = 0uLL;
      *(_QWORD *)(v119 + 40) = v121;
      *(_QWORD *)(v119 + 48) = v120;
      *(_BYTE *)(v119 + 56) = 16;
      v321 = 0;
      *(_QWORD *)&v344 = v119;
      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v73 + 24) + 40))(*(_QWORD *)(v73 + 24), &v344);
      v87 = v310;
      v122 = v344;
      *(_QWORD *)&v344 = 0;
      if (v122)
      {
        v123 = *(std::__shared_weak_count **)(v122 + 32);
        if (v123)
        {
          v124 = (unint64_t *)&v123->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
        v126 = *(std::__shared_weak_count **)(v122 + 16);
        if (v126)
        {
          v127 = (unint64_t *)&v126->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        MEMORY[0x227684CE8](v122, 0x10F0C40B62ED6C6);
        v129 = v321;
        v321 = 0;
        if (v129)
        {
          v130 = (std::__shared_weak_count *)*((_QWORD *)v129 + 4);
          if (v130)
          {
            v131 = (unint64_t *)&v130->__shared_owners_;
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          v133 = (std::__shared_weak_count *)*((_QWORD *)v129 + 2);
          if (v133)
          {
            v134 = (unint64_t *)&v133->__shared_owners_;
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v133);
            }
          }
          MEMORY[0x227684CE8](v129, 0x10F0C40B62ED6C6);
        }
      }
      v136 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
      if (*((_QWORD *)&v328 + 1))
      {
        v137 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
          v139 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
            goto LABEL_291;
          goto LABEL_294;
        }
      }
      v139 = *(std::__shared_weak_count **)&object[16];
      if (!*(_QWORD *)&object[16])
        goto LABEL_294;
LABEL_291:
      v140 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
        if (!v310)
          goto LABEL_296;
        goto LABEL_295;
      }
LABEL_294:
      if (v87)
        goto LABEL_295;
LABEL_296:
      sub_223182C08((uint64_t)&v336);
      v142 = (std::__shared_weak_count *)*((_QWORD *)&v343 + 1);
      if (*((_QWORD *)&v343 + 1))
      {
        v143 = (unint64_t *)(*((_QWORD *)&v343 + 1) + 8);
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
LABEL_121:
      v42 += 248;
    }
    while (v42 != v43);
  }
  sub_223737D60((uint64_t)v31, (int64x2_t *)object);
  v145 = *(char **)object;
  v146 = *(char **)&object[8];
  if (*(_QWORD *)object == *(_QWORD *)&object[8])
  {
    if (!*(_QWORD *)object)
      goto LABEL_315;
    goto LABEL_314;
  }
  while (2)
  {
    v291 = *(unsigned __int8 **)v145;
    if (*(_QWORD *)(*(_QWORD *)v145 + 24) != *a1)
      goto LABEL_591;
    v292 = (char *)*((_QWORD *)&v334 + 1);
    v293 = (char *)&v334 + 8;
    v294 = (_QWORD *)&v334 + 1;
    if (!*((_QWORD *)&v334 + 1))
      goto LABEL_632;
    v295 = *v291;
    while (2)
    {
      while (2)
      {
        v293 = v292;
        v296 = v292[32];
        v297 = v295 >= v296;
        if (v295 != v296)
        {
          v298 = *v291;
          goto LABEL_627;
        }
        v298 = v291[1];
        v296 = v293[33];
        v297 = v298 >= v296;
        if (v298 != v296
          || (v298 = v291[2], v296 = v293[34], v297 = v298 >= v296, v298 != v296)
          || (v298 = v291[3], v296 = v293[35], v297 = v298 >= v296, v298 != v296))
        {
LABEL_627:
          if (!v297)
            goto LABEL_595;
          goto LABEL_629;
        }
        v299 = v291[4];
        v300 = v293[36];
        if (v299 != v300)
          goto LABEL_612;
        v299 = v291[5];
        v300 = v293[37];
        if (v299 != v300)
          goto LABEL_612;
        v299 = v291[6];
        v300 = v293[38];
        if (v299 != v300)
          goto LABEL_612;
        v299 = v291[7];
        v300 = v293[39];
        if (v299 != v300)
          goto LABEL_612;
        v299 = v291[8];
        v300 = v293[40];
        if (v299 != v300)
          goto LABEL_612;
        v299 = v291[9];
        v300 = v293[41];
        if (v299 != v300)
          goto LABEL_612;
        v299 = v291[10];
        v300 = v293[42];
        if (v299 != v300)
          goto LABEL_612;
        v299 = v291[11];
        v300 = v293[43];
        if (v299 != v300)
          goto LABEL_612;
        v299 = v291[12];
        v300 = v293[44];
        if (v299 != v300
          || (v299 = v291[13], v300 = v293[45], v299 != v300)
          || (v299 = v291[14], v300 = v293[46], v299 != v300)
          || (v299 = v291[15], v300 = v293[47], v299 != v300))
        {
LABEL_612:
          if (v299 < v300)
          {
LABEL_595:
            v292 = *(char **)v293;
            v294 = v293;
            if (!*(_QWORD *)v293)
              goto LABEL_632;
            continue;
          }
        }
        break;
      }
      v296 = v293[36];
      v298 = v291[4];
      if (v296 == v298)
      {
        v296 = v293[37];
        v298 = v291[5];
        if (v296 == v298)
        {
          v296 = v293[38];
          v298 = v291[6];
          if (v296 == v298)
          {
            v296 = v293[39];
            v298 = v291[7];
            if (v296 == v298)
            {
              v296 = v293[40];
              v298 = v291[8];
              if (v296 == v298)
              {
                v296 = v293[41];
                v298 = v291[9];
                if (v296 == v298)
                {
                  v296 = v293[42];
                  v298 = v291[10];
                  if (v296 == v298)
                  {
                    v296 = v293[43];
                    v298 = v291[11];
                    if (v296 == v298)
                    {
                      v296 = v293[44];
                      v298 = v291[12];
                      if (v296 == v298)
                      {
                        v296 = v293[45];
                        v298 = v291[13];
                        if (v296 == v298)
                        {
                          v296 = v293[46];
                          v298 = v291[14];
                          if (v296 == v298)
                          {
                            v296 = v293[47];
                            v298 = v291[15];
                            if (v296 == v298)
                              goto LABEL_591;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_629:
      if (v296 >= v298)
        goto LABEL_591;
      v292 = (char *)*((_QWORD *)v293 + 1);
      if (v292)
        continue;
      break;
    }
    v294 = v293 + 8;
LABEL_632:
    v301 = operator new(0x38uLL);
    v301[2] = *(_OWORD *)v291;
    *((_QWORD *)v301 + 6) = *(_QWORD *)v145;
    *(_QWORD *)v301 = 0;
    *((_QWORD *)v301 + 1) = 0;
    *((_QWORD *)v301 + 2) = v293;
    *v294 = v301;
    if (*(_QWORD *)v334)
    {
      *(_QWORD *)&v334 = *(_QWORD *)v334;
      v301 = (_OWORD *)*v294;
    }
    sub_2231A9A8C(*((uint64_t **)&v334 + 1), (uint64_t *)v301);
    ++v335;
LABEL_591:
    v145 += 8;
    if (v145 != v146)
      continue;
    break;
  }
  v145 = *(char **)object;
  if (*(_QWORD *)object)
  {
LABEL_314:
    *(_QWORD *)&object[8] = v145;
    operator delete(v145);
  }
LABEL_315:
  sub_2236D623C((int64x2_t *)object, &v334);
  v147 = *(void **)(v36 + 96);
  if (v147)
  {
    *(_QWORD *)(v36 + 104) = v147;
    operator delete(v147);
    *(_QWORD *)(v36 + 96) = 0;
    *(_QWORD *)(v36 + 104) = 0;
    *(_QWORD *)(v36 + 112) = 0;
  }
  *(_OWORD *)(v36 + 96) = *(_OWORD *)object;
  *(_QWORD *)(v36 + 112) = *(_QWORD *)&object[16];
  sub_2236D623C((int64x2_t *)object, &v334);
  v148 = *(void **)(v36 + 120);
  if (v148)
  {
    *(_QWORD *)(v36 + 128) = v148;
    operator delete(v148);
    *(_QWORD *)(v36 + 120) = 0;
    *(_QWORD *)(v36 + 128) = 0;
    *(_QWORD *)(v36 + 136) = 0;
  }
  *(_OWORD *)(v36 + 120) = *(_OWORD *)object;
  *(_QWORD *)(v36 + 136) = *(_QWORD *)&object[16];
  v149 = (_QWORD *)v334;
  if ((__int128 *)v334 != (__int128 *)((char *)&v334 + 8))
  {
    v307 = *((_QWORD *)v44 + 428);
    do
    {
      v305 = v149;
      v150 = v149[6];
      v152 = *(_QWORD *)(v150 + 208);
      v151 = *(_QWORD *)(v150 + 216);
      v314 = v151;
      while (v152 != v151)
      {
        v153 = sub_22456636C((unsigned __int8 *)v152);
        v154 = (int8x8_t)v31[11];
        if (!*(_QWORD *)&v154)
          goto LABEL_354;
        v155 = (uint8x8_t)vcnt_s8(v154);
        v155.i16[0] = vaddlv_u8(v155);
        if (v155.u32[0] > 1uLL)
        {
          v156 = v153;
          if (v153 >= *(_QWORD *)&v154)
            v156 = v153 % *(_QWORD *)&v154;
        }
        else
        {
          v156 = (*(_QWORD *)&v154 - 1) & v153;
        }
        v157 = *(_QWORD **)(v31[10] + 8 * v156);
        if (!v157 || (v158 = (_QWORD *)*v157) == 0)
        {
LABEL_354:
          v164 = atomic_load((unsigned __int8 *)&qword_2557892F0);
          if ((v164 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
          {
            __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
            __cxa_guard_release(&qword_2557892F0);
          }
          v165 = atomic_load((unsigned __int8 *)&qword_2540CC080);
          if ((v165 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC080))
          {
            sub_22455F53C(&v336);
            sub_223174DE4(object, "cv3d.recon.kfplanes");
            sub_2232300E0(&v336, (uint64_t)object, &qword_2540CC078);
            if ((object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_guard_release(&qword_2540CC080);
          }
          if (*(char *)(qword_2540CC078 + 39) < 0)
          {
            v166 = *(const void **)(qword_2540CC078 + 16);
            v167 = *(_QWORD *)(qword_2540CC078 + 24);
          }
          else
          {
            v166 = (const void *)(qword_2540CC078 + 16);
            v167 = *(unsigned __int8 *)(qword_2540CC078 + 39);
          }
          sub_223195728((uint64_t)&stru_255789280, v166, v167, "ALGP: KFP %.13s does not exist", 0x1EuLL);
          v168 = atomic_load((unsigned __int8 *)&qword_2540CC070);
          if ((v168 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC070))
          {
            sub_22455F53C(&v336);
            sub_223174DE4(object, "cv3dapi.recon3d.kfplanes");
            sub_2232300E0(&v336, (uint64_t)object, &qword_2540CC068);
            if ((object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_guard_release(&qword_2540CC070);
          }
          v318 = qword_2540CC068;
          if (**(int **)(qword_2540CC068 + 56) > 5)
            goto LABEL_326;
          v169 = *(unsigned __int8 *)(qword_2540CC068 + 72);
          v170 = sub_22322F254(qword_2540CC068, "OSLogSurrogateAppender", 1, 0);
          v171 = v170;
          if (!v169 && !v170)
            goto LABEL_326;
          v336 = &v318;
          rep = (uint64_t (**)())std::chrono::steady_clock::now().__d_.__rep_;
          v338 = std::chrono::system_clock::now().__d_.__rep_;
          v339 = 5;
          v340 = (uint64_t (***)())"unknown file";
          v341 = 184;
          v342 = "unknown function";
          v343 = 0uLL;
          sub_2245664AC((unsigned __int8 *)v152, __s);
          v172 = *v336;
          v173 = (const char *)(*v336 + 16);
          v311 = v173;
          if (*(char *)(*v336 + 39) < 0)
          {
            v173 = *(const char **)(v172 + 16);
            v174 = *(_QWORD *)(v172 + 24);
            v176 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v176 & 1) == 0)
            {
LABEL_579:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)&v344);
                sub_223199C58("com.apple.cv3d", (unint64_t)&v344, &xmmword_255788F40);
                if ((_BYTE)v346 && SHIBYTE(v345) < 0)
                  operator delete((void *)v344);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
            }
          }
          else
          {
            v174 = *(unsigned __int8 *)(*v336 + 39);
            v175 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v175 & 1) == 0)
              goto LABEL_579;
          }
          if (byte_255788F57 >= 0)
            v177 = (const char *)&xmmword_255788F40;
          else
            v177 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v178 = byte_255788F57;
          else
            v178 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)object = os_log_create(v177, v173);
          if (v178 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v178 >= 0x17)
          {
            v180 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v178 | 7) != 0x17)
              v180 = v178 | 7;
            v181 = v180 + 1;
            v179 = operator new(v180 + 1);
            *(_QWORD *)&object[16] = v178;
            *(_QWORD *)&v328 = v181 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v179;
          }
          else
          {
            BYTE7(v328) = v178;
            v179 = &object[8];
            if (!v178)
            {
LABEL_381:
              v179[v178] = 0;
              BYTE8(v328) = 1;
              if (v174 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v36 = a5;
              v31 = v309;
              if (v174 >= 0x17)
              {
                v184 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v174 | 7) != 0x17)
                  v184 = v174 | 7;
                v185 = v184 + 1;
                v182 = operator new(v184 + 1);
                v330 = (uint64_t (**)())v174;
                v331 = v185 | 0x8000000000000000;
                __p = v182;
              }
              else
              {
                HIBYTE(v331) = v174;
                v182 = &__p;
                if (!v174)
                {
                  LOBYTE(__p) = 0;
                  LOBYTE(v332) = 1;
                  v183 = *(NSObject **)object;
                  if ((SHIBYTE(v331) & 0x80000000) == 0)
                    goto LABEL_385;
LABEL_391:
                  operator delete(__p);
                  if (BYTE8(v328))
                    goto LABEL_392;
                  goto LABEL_394;
                }
              }
              memmove(v182, v173, v174);
              *((_BYTE *)v182 + v174) = 0;
              LOBYTE(v332) = 1;
              v183 = *(NSObject **)object;
              if (SHIBYTE(v331) < 0)
                goto LABEL_391;
LABEL_385:
              if (BYTE8(v328))
              {
LABEL_392:
                if (SBYTE7(v328) < 0)
                  operator delete(*(void **)&object[8]);
              }
LABEL_394:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v171 && *(_QWORD *)(v171 + 24))
              {
                v186 = _os_log_pack_size();
                v187 = (std::__shared_weak_count_vtbl *)operator new(v186, (std::align_val_t)8uLL);
                v188 = (std::__shared_weak_count *)operator new();
                v188->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v188->__shared_owners_ = 0;
                v188->__shared_weak_owners_ = 0;
                v188[1].__vftable = v187;
                *(_QWORD *)&v344 = v187;
                *((_QWORD *)&v344 + 1) = v187;
                v345 = v188;
                v346 = 0;
                v347 = 0;
                v189 = strlen(__s);
                if (v189 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v190 = v189;
                if (v189 >= 0x17)
                {
                  v215 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v189 | 7) != 0x17)
                    v215 = v189 | 7;
                  v216 = v215 + 1;
                  v191 = (char **)operator new(v215 + 1);
                  *(_QWORD *)&v322 = v190;
                  *((_QWORD *)&v322 + 1) = v216 | 0x8000000000000000;
                  v321 = (char *)v191;
                }
                else
                {
                  HIBYTE(v322) = v189;
                  v191 = &v321;
                  if (!v189)
                    goto LABEL_464;
                }
                memcpy(v191, __s, v190);
LABEL_464:
                *((_BYTE *)v191 + v190) = 0;
                v217 = v321;
                *(_QWORD *)&v319 = v322;
                *(_QWORD *)((char *)&v319 + 7) = *(_QWORD *)((char *)&v322 + 7);
                v218 = HIBYTE(v322);
                v219 = operator new(0x38uLL);
                v219[1] = 0;
                v219[2] = 0;
                v219[3] = off_24EC1FA48;
                *v219 = &off_24EC1F9F8;
                v220 = v319;
                v219[4] = v217;
                v219[5] = v220;
                *(_QWORD *)((char *)v219 + 47) = *(_QWORD *)((char *)&v319 + 7);
                *((_BYTE *)v219 + 55) = v218;
                *(_QWORD *)&v319 = 0;
                *(_QWORD *)((char *)&v319 + 7) = 0;
                v221 = v347;
                v346 = (char *)(v219 + 3);
                v347 = (std::__shared_weak_count *)v219;
                if (!v221)
                  goto LABEL_468;
                v222 = (unint64_t *)&v221->__shared_owners_;
                do
                  v223 = __ldaxr(v222);
                while (__stlxr(v223 - 1, v222));
                if (!v223)
                {
                  ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                  std::__shared_weak_count::__release_weak(v221);
                  *(_OWORD *)object = v344;
                  v225 = v345;
                  v224 = v346;
                  *(_QWORD *)&object[16] = v345;
                  if (v345)
                    goto LABEL_469;
                }
                else
                {
LABEL_468:
                  *(_OWORD *)object = v344;
                  v225 = v345;
                  v224 = v346;
                  *(_QWORD *)&object[16] = v345;
                  if (v345)
                  {
LABEL_469:
                    v226 = (unint64_t *)&v225->__shared_owners_;
                    do
                      v227 = __ldxr(v226);
                    while (__stxr(v227 + 1, v226));
                  }
                }
                v228 = v347;
                *(_QWORD *)&v328 = v224;
                *((_QWORD *)&v328 + 1) = v347;
                if (v347)
                {
                  v229 = (unint64_t *)&v347->__shared_owners_;
                  do
                    v230 = __ldxr(v229);
                  while (__stxr(v230 + 1, v229));
                  __p = v224;
                  do
                    v231 = __ldaxr(v229);
                  while (__stlxr(v231 - 1, v229));
                  if (!v231)
                  {
                    ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                    std::__shared_weak_count::__release_weak(v228);
                  }
                }
                else
                {
                  __p = v224;
                }
                v232 = v345;
                if (v345)
                {
                  v233 = (unint64_t *)&v345->__shared_owners_;
                  do
                    v234 = __ldaxr(v233);
                  while (__stlxr(v234 - 1, v233));
                  if (!v234)
                  {
                    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                    std::__shared_weak_count::__release_weak(v232);
                  }
                }
                v235 = *(_QWORD *)object;
                if (*((char *)__p + 31) >= 0)
                  v236 = (char *)__p + 8;
                else
                  v236 = (char *)*((_QWORD *)__p + 1);
                v237 = _os_log_pack_fill();
                *(_DWORD *)v237 = v307;
                *(_DWORD *)(v237 + 4) = 13;
                *(_WORD *)(v237 + 8) = 2080;
                *(_QWORD *)(v237 + 10) = v236;
                v238 = operator new();
                v239 = *(unsigned __int8 *)(v172 + 39);
                v240 = v311;
                if ((v239 & 0x80u) != 0)
                {
                  v240 = *(const char **)(v172 + 16);
                  v239 = *(_QWORD *)(v172 + 24);
                }
                *(_QWORD *)v238 = v235;
                *(_OWORD *)(v238 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v238 + 24) = v328;
                v328 = 0uLL;
                *(_QWORD *)(v238 + 40) = v240;
                *(_QWORD *)(v238 + 48) = v239;
                *(_BYTE *)(v238 + 56) = 16;
                v321 = 0;
                *(_QWORD *)&v344 = v238;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v171 + 24) + 40))(*(_QWORD *)(v171 + 24), &v344);
                v241 = v344;
                *(_QWORD *)&v344 = 0;
                if (v241)
                {
                  v242 = *(std::__shared_weak_count **)(v241 + 32);
                  if (!v242)
                    goto LABEL_494;
                  v243 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v244 = __ldaxr(v243);
                  while (__stlxr(v244 - 1, v243));
                  if (!v244)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                    v245 = *(std::__shared_weak_count **)(v241 + 16);
                    if (v245)
                    {
LABEL_495:
                      v246 = (unint64_t *)&v245->__shared_owners_;
                      do
                        v247 = __ldaxr(v246);
                      while (__stlxr(v247 - 1, v246));
                      if (!v247)
                      {
                        ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                        std::__shared_weak_count::__release_weak(v245);
                      }
                    }
                  }
                  else
                  {
LABEL_494:
                    v245 = *(std::__shared_weak_count **)(v241 + 16);
                    if (v245)
                      goto LABEL_495;
                  }
                  MEMORY[0x227684CE8](v241, 0x10F0C40B62ED6C6);
                  v248 = v321;
                  v321 = 0;
                  if (v248)
                  {
                    v249 = (std::__shared_weak_count *)*((_QWORD *)v248 + 4);
                    if (!v249)
                      goto LABEL_507;
                    v250 = (unint64_t *)&v249->__shared_owners_;
                    do
                      v251 = __ldaxr(v250);
                    while (__stlxr(v251 - 1, v250));
                    if (!v251)
                    {
                      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                      std::__shared_weak_count::__release_weak(v249);
                      v252 = (std::__shared_weak_count *)*((_QWORD *)v248 + 2);
                      if (v252)
                      {
LABEL_508:
                        v253 = (unint64_t *)&v252->__shared_owners_;
                        do
                          v254 = __ldaxr(v253);
                        while (__stlxr(v254 - 1, v253));
                        if (!v254)
                        {
                          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                          std::__shared_weak_count::__release_weak(v252);
                        }
                      }
                    }
                    else
                    {
LABEL_507:
                      v252 = (std::__shared_weak_count *)*((_QWORD *)v248 + 2);
                      if (v252)
                        goto LABEL_508;
                    }
                    MEMORY[0x227684CE8](v248, 0x10F0C40B62ED6C6);
                  }
                }
                v255 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
                if (!*((_QWORD *)&v328 + 1))
                  goto LABEL_520;
                v256 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
                do
                  v257 = __ldaxr(v256);
                while (__stlxr(v257 - 1, v256));
                if (!v257)
                {
                  ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                  std::__shared_weak_count::__release_weak(v255);
                  v258 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
LABEL_521:
                    v259 = (unint64_t *)&v258->__shared_owners_;
                    do
                      v260 = __ldaxr(v259);
                    while (__stlxr(v260 - 1, v259));
                    if (!v260)
                    {
                      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                      std::__shared_weak_count::__release_weak(v258);
                    }
                  }
                }
                else
                {
LABEL_520:
                  v258 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                    goto LABEL_521;
                }
              }
              else
              {
                os_log_type_enabled(v183, OS_LOG_TYPE_ERROR);
                *(_DWORD *)object = v307;
                *(_DWORD *)&object[4] = 13;
                *(_WORD *)&object[8] = 2080;
                *(_QWORD *)&object[10] = __s;
                v192 = (void *)_os_log_send_and_compose_impl();
                if (v192)
                  free(v192);
              }
              if (v169)
              {
                sub_2245664AC((unsigned __int8 *)v152, object);
                sub_22322C138((uint64_t)&v336, "ALGP: KFP %.13s does not exist", object);
                sub_223182C08((uint64_t)&v336);
              }
              v261 = v336;
              if (!v336)
                goto LABEL_555;
              v262 = v343;
              if (!(_QWORD)v343)
                goto LABEL_555;
              v263 = (_QWORD *)(*v336 + 16);
              if (*(char *)(*v336 + 39) < 0)
                v263 = (_QWORD *)*v263;
              v265 = rep;
              v264 = v338;
              v266 = v339;
              v267 = v340;
              v268 = v341;
              v269 = (uint64_t (**)())v342;
              v270 = (std::__shared_weak_count *)*((_QWORD *)&v343 + 1);
              v344 = v343;
              if (*((_QWORD *)&v343 + 1))
              {
                v271 = (unint64_t *)(*((_QWORD *)&v343 + 1) + 8);
                do
                  v272 = __ldxr(v271);
                while (__stxr(v272 + 1, v271));
                *(_QWORD *)&object[8] = v265;
                *(_QWORD *)&object[16] = v264;
                LODWORD(v328) = v266;
                *((_QWORD *)&v328 + 1) = v267;
                LODWORD(__p) = v268;
                v330 = v269;
                v331 = v262;
                v332 = v270;
                do
                  v273 = __ldxr(v271);
                while (__stxr(v273 + 1, v271));
                *(_QWORD *)object = v263;
                v274 = *v261;
                if (v266 < **(_DWORD **)(*v261 + 56))
                {
LABEL_538:
                  if (!v270)
                    goto LABEL_545;
LABEL_542:
                  v275 = (unint64_t *)&v270->__shared_owners_;
                  do
                    v276 = __ldaxr(v275);
                  while (__stlxr(v276 - 1, v275));
                  if (v276)
                  {
LABEL_545:
                    v277 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
                    if (*((_QWORD *)&v344 + 1))
                      goto LABEL_546;
                  }
                  else
                  {
                    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                    std::__shared_weak_count::__release_weak(v270);
                    v277 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
                    if (*((_QWORD *)&v344 + 1))
                    {
LABEL_546:
                      v278 = (unint64_t *)&v277->__shared_owners_;
                      do
                        v279 = __ldaxr(v278);
                      while (__stlxr(v279 - 1, v278));
                      if (!v279)
                      {
                        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                        std::__shared_weak_count::__release_weak(v277);
                      }
                    }
                  }
                  v280 = (std::__shared_weak_count *)*((_QWORD *)&v343 + 1);
                  v343 = 0uLL;
                  if (!v280)
                    goto LABEL_326;
                  v281 = (unint64_t *)&v280->__shared_owners_;
                  do
                    v282 = __ldaxr(v281);
                  while (__stlxr(v282 - 1, v281));
                  if (v282)
                  {
LABEL_555:
                    v283 = (std::__shared_weak_count *)*((_QWORD *)&v343 + 1);
                    if (!*((_QWORD *)&v343 + 1))
                      goto LABEL_326;
                  }
                  else
                  {
                    ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                    std::__shared_weak_count::__release_weak(v280);
                    v283 = (std::__shared_weak_count *)*((_QWORD *)&v343 + 1);
                    if (!*((_QWORD *)&v343 + 1))
                      goto LABEL_326;
                  }
                  v284 = (unint64_t *)&v283->__shared_owners_;
                  do
                    v285 = __ldaxr(v284);
                  while (__stlxr(v285 - 1, v284));
                  if (!v285)
                  {
                    ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                    std::__shared_weak_count::__release_weak(v283);
                  }
                  goto LABEL_326;
                }
              }
              else
              {
                *(_QWORD *)&object[8] = rep;
                *(_QWORD *)&object[16] = v338;
                LODWORD(v328) = v339;
                *((_QWORD *)&v328 + 1) = v340;
                LODWORD(__p) = v341;
                v330 = (uint64_t (**)())v342;
                v331 = v343;
                v332 = 0;
                *(_QWORD *)object = v263;
                v274 = *v336;
                if (v339 < **(_DWORD **)(*v336 + 56))
                  goto LABEL_538;
              }
              sub_22323003C(v274, (uint64_t)object);
              v270 = v332;
              if (!v332)
                goto LABEL_545;
              goto LABEL_542;
            }
          }
          memmove(v179, v177, v178);
          goto LABEL_381;
        }
        if (v155.u32[0] < 2uLL)
        {
          v159 = *(_QWORD *)&v154 - 1;
          while (1)
          {
            v163 = v158[1];
            if (v153 == v163)
            {
              if (v158[2] == *(_QWORD *)v152 && v158[3] == *(_QWORD *)(v152 + 8))
                goto LABEL_404;
            }
            else if ((v163 & v159) != v156)
            {
              goto LABEL_354;
            }
            v158 = (_QWORD *)*v158;
            if (!v158)
              goto LABEL_354;
          }
        }
        while (1)
        {
          v161 = v158[1];
          if (v153 == v161)
            break;
          if (v161 >= *(_QWORD *)&v154)
            v161 %= *(_QWORD *)&v154;
          if (v161 != v156)
            goto LABEL_354;
LABEL_341:
          v158 = (_QWORD *)*v158;
          if (!v158)
            goto LABEL_354;
        }
        v160 = v158[2] == *(_QWORD *)v152 && v158[3] == *(_QWORD *)(v152 + 8);
        if (!v160)
          goto LABEL_341;
LABEL_404:
        v193 = (unsigned __int8 *)v158[4];
        v194 = v316;
        v195 = &v316;
        v196 = &v316;
        if (!v316)
          goto LABEL_441;
        v197 = *v193;
        while (2)
        {
          while (2)
          {
            v196 = (uint64_t **)v194;
            v198 = *((unsigned __int8 *)v194 + 32);
            v199 = v197 >= v198;
            if (v197 != v198)
            {
              v200 = *v193;
LABEL_436:
              if (!v199)
                goto LABEL_406;
              goto LABEL_438;
            }
            v200 = v193[1];
            v198 = *((unsigned __int8 *)v196 + 33);
            v199 = v200 >= v198;
            if (v200 != v198)
              goto LABEL_436;
            v200 = v193[2];
            v198 = *((unsigned __int8 *)v196 + 34);
            v199 = v200 >= v198;
            if (v200 != v198)
              goto LABEL_436;
            v200 = v193[3];
            v198 = *((unsigned __int8 *)v196 + 35);
            v199 = v200 >= v198;
            if (v200 != v198)
              goto LABEL_436;
            v200 = v193[4];
            v198 = *((unsigned __int8 *)v196 + 36);
            v199 = v200 >= v198;
            if (v200 != v198)
              goto LABEL_436;
            v200 = v193[5];
            v198 = *((unsigned __int8 *)v196 + 37);
            v199 = v200 >= v198;
            if (v200 != v198)
              goto LABEL_436;
            v201 = v193[6];
            v202 = *((unsigned __int8 *)v196 + 38);
            if (v201 != v202)
              goto LABEL_423;
            v201 = v193[7];
            v202 = *((unsigned __int8 *)v196 + 39);
            if (v201 != v202)
              goto LABEL_423;
            v201 = v193[8];
            v202 = *((unsigned __int8 *)v196 + 40);
            if (v201 != v202)
              goto LABEL_423;
            v201 = v193[9];
            v202 = *((unsigned __int8 *)v196 + 41);
            if (v201 != v202)
              goto LABEL_423;
            v201 = v193[10];
            v202 = *((unsigned __int8 *)v196 + 42);
            if (v201 != v202)
              goto LABEL_423;
            v201 = v193[11];
            v202 = *((unsigned __int8 *)v196 + 43);
            if (v201 != v202)
              goto LABEL_423;
            v201 = v193[12];
            v202 = *((unsigned __int8 *)v196 + 44);
            if (v201 != v202
              || (v201 = v193[13], v202 = *((unsigned __int8 *)v196 + 45), v201 != v202)
              || (v201 = v193[14], v202 = *((unsigned __int8 *)v196 + 46), v201 != v202)
              || (v201 = v193[15], v202 = *((unsigned __int8 *)v196 + 47), v201 != v202))
            {
LABEL_423:
              if (v201 < v202)
              {
LABEL_406:
                v194 = *v196;
                v195 = v196;
                if (!*v196)
                  goto LABEL_441;
                continue;
              }
            }
            break;
          }
          v198 = *((unsigned __int8 *)v196 + 38);
          v200 = v193[6];
          if (v198 == v200)
          {
            v198 = *((unsigned __int8 *)v196 + 39);
            v200 = v193[7];
            if (v198 == v200)
            {
              v198 = *((unsigned __int8 *)v196 + 40);
              v200 = v193[8];
              if (v198 == v200)
              {
                v198 = *((unsigned __int8 *)v196 + 41);
                v200 = v193[9];
                if (v198 == v200)
                {
                  v198 = *((unsigned __int8 *)v196 + 42);
                  v200 = v193[10];
                  if (v198 == v200)
                  {
                    v198 = *((unsigned __int8 *)v196 + 43);
                    v200 = v193[11];
                    if (v198 == v200)
                    {
                      v198 = *((unsigned __int8 *)v196 + 44);
                      v200 = v193[12];
                      if (v198 == v200)
                      {
                        v198 = *((unsigned __int8 *)v196 + 45);
                        v200 = v193[13];
                        if (v198 == v200)
                        {
                          v198 = *((unsigned __int8 *)v196 + 46);
                          v200 = v193[14];
                          if (v198 == v200)
                          {
                            v198 = *((unsigned __int8 *)v196 + 47);
                            v200 = v193[15];
                            if (v198 == v200)
                              goto LABEL_326;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_438:
          if (v198 >= v200)
            goto LABEL_326;
          v194 = v196[1];
          if (v194)
            continue;
          break;
        }
        v195 = v196 + 1;
LABEL_441:
        v203 = (uint64_t *)operator new(0x38uLL);
        *((_OWORD *)v203 + 2) = *(_OWORD *)v193;
        v203[6] = v158[4];
        *v203 = 0;
        v203[1] = 0;
        v203[2] = (uint64_t)v196;
        *v195 = v203;
        if (*v315)
        {
          v315 = (uint64_t *)*v315;
          v203 = *v195;
        }
        v204 = v316;
        v160 = v203 == v316;
        *((_BYTE *)v203 + 24) = v203 == v316;
        if (!v160)
        {
          do
          {
            v205 = v203[2];
            if (*(_BYTE *)(v205 + 24))
              break;
            v206 = *(uint64_t **)(v205 + 16);
            v207 = *v206;
            if (*v206 == v205)
            {
              v210 = v206[1];
              if (!v210 || (v211 = *(unsigned __int8 *)(v210 + 24), v208 = (_BYTE *)(v210 + 24), v211))
              {
                if (*(uint64_t **)v205 == v203)
                {
                  *(_BYTE *)(v205 + 24) = 1;
                  *((_BYTE *)v206 + 24) = 0;
                  v214 = *(_QWORD *)(v205 + 8);
                  *v206 = v214;
                  if (v214)
                    goto LABEL_458;
                }
                else
                {
                  v212 = *(uint64_t **)(v205 + 8);
                  v213 = *v212;
                  *(_QWORD *)(v205 + 8) = *v212;
                  if (v213)
                  {
                    *(_QWORD *)(v213 + 16) = v205;
                    v206 = *(uint64_t **)(v205 + 16);
                  }
                  v212[2] = (uint64_t)v206;
                  *(_QWORD *)(*(_QWORD *)(v205 + 16) + 8 * (**(_QWORD **)(v205 + 16) != v205)) = v212;
                  *v212 = v205;
                  *(_QWORD *)(v205 + 16) = v212;
                  v206 = (uint64_t *)v212[2];
                  v205 = *v206;
                  *((_BYTE *)v212 + 24) = 1;
                  *((_BYTE *)v206 + 24) = 0;
                  v214 = *(_QWORD *)(v205 + 8);
                  *v206 = v214;
                  if (v214)
LABEL_458:
                    *(_QWORD *)(v214 + 16) = v206;
                }
                *(_QWORD *)(v205 + 16) = v206[2];
                *(_QWORD *)(v206[2] + 8 * (*(_QWORD *)v206[2] != (_QWORD)v206)) = v205;
                *(_QWORD *)(v205 + 8) = v206;
LABEL_324:
                v206[2] = v205;
                break;
              }
            }
            else if (!v207 || (v209 = *(unsigned __int8 *)(v207 + 24), v208 = (_BYTE *)(v207 + 24), v209))
            {
              if (*(uint64_t **)v205 == v203)
              {
                v286 = v203[1];
                *(_QWORD *)v205 = v286;
                if (v286)
                {
                  *(_QWORD *)(v286 + 16) = v205;
                  v206 = *(uint64_t **)(v205 + 16);
                }
                v203[2] = (uint64_t)v206;
                *(_QWORD *)(*(_QWORD *)(v205 + 16) + 8 * (**(_QWORD **)(v205 + 16) != v205)) = v203;
                v203[1] = v205;
                *(_QWORD *)(v205 + 16) = v203;
                v206 = (uint64_t *)v203[2];
              }
              else
              {
                v203 = (uint64_t *)v203[2];
              }
              *((_BYTE *)v203 + 24) = 1;
              *((_BYTE *)v206 + 24) = 0;
              v205 = v206[1];
              v287 = *(uint64_t **)v205;
              v206[1] = *(_QWORD *)v205;
              if (v287)
                v287[2] = (uint64_t)v206;
              *(_QWORD *)(v205 + 16) = v206[2];
              *(_QWORD *)(v206[2] + 8 * (*(_QWORD *)v206[2] != (_QWORD)v206)) = v205;
              *(_QWORD *)v205 = v206;
              goto LABEL_324;
            }
            *(_BYTE *)(v205 + 24) = 1;
            v203 = v206;
            *((_BYTE *)v206 + 24) = v206 == v204;
            *v208 = 1;
          }
          while (v206 != v204);
        }
        ++v317;
LABEL_326:
        v152 += 424;
        v151 = v314;
      }
      v288 = v305;
      v289 = (_QWORD *)v305[1];
      if (v289)
      {
        do
        {
          v290 = v289;
          v289 = (_QWORD *)*v289;
        }
        while (v289);
      }
      else
      {
        do
        {
          v290 = (_OWORD *)v288[2];
          v160 = *(_QWORD *)v290 == (_QWORD)v288;
          v288 = v290;
        }
        while (!v160);
      }
      v149 = v290;
    }
    while (v290 != (__int128 *)((char *)&v334 + 8));
  }
  sub_2236D6024((int64x2_t *)object, &v315);
  v302 = *(void **)(v36 + 24);
  if (v302)
  {
    *(_QWORD *)(v36 + 32) = v302;
    operator delete(v302);
    *(_QWORD *)(v36 + 24) = 0;
    *(_QWORD *)(v36 + 32) = 0;
    *(_QWORD *)(v36 + 40) = 0;
  }
  *(_OWORD *)(v36 + 24) = *(_OWORD *)object;
  *(_QWORD *)(v36 + 40) = *(_QWORD *)&object[16];
  sub_2233FADDC(*((_QWORD **)&v334 + 1));
  sub_2233FADDC(v316);
}

void sub_2236D5BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,void *a50,int a51,__int16 a52,char a53,char a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  uint64_t v59;

  if (*(_BYTE *)(v59 - 120))
  {
    if (*(char *)(v59 - 121) < 0)
      operator delete(*(void **)(v59 - 144));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC(v59 - 216);
  sub_2233FADDC(*(_QWORD **)(v59 - 232));
  sub_2233FADDC(a33);
  sub_223255CAC(a27);
  _Unwind_Resume(a1);
}

char *sub_2236D6024(int64x2_t *a1, _QWORD *a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int64x2_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int64x2_t v14;
  char *v15;
  uint64_t v16;
  int64x2_t *v17;

  v4 = a2[2];
  v15 = 0;
  v14 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_22316E078();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v14.i64[0] = (uint64_t)result;
    v14.i64[1] = (uint64_t)result;
    v15 = v6;
    v9 = (_QWORD *)*a2;
    v7 = a2 + 1;
    v8 = v9;
    v17 = &v14;
    if (v9 == v7)
      goto LABEL_6;
  }
  else
  {
    v6 = 0;
    result = 0;
    v7 = a2 + 1;
    v8 = (_QWORD *)*a2;
    v17 = &v14;
    if (v8 == a2 + 1)
    {
LABEL_6:
      v10 = vdupq_n_s64((unint64_t)result);
      goto LABEL_15;
    }
  }
  do
  {
    v16 = v8[6];
    result = (char *)sub_2232EA538((void ***)&v17, &v16);
    v11 = (_QWORD *)v8[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v8[2];
        v13 = *v12 == (_QWORD)v8;
        v8 = v12;
      }
      while (!v13);
    }
    v8 = v12;
  }
  while (v12 != v7);
  v10 = v14;
  v6 = v15;
LABEL_15:
  *a1 = v10;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_2236D6128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2236D6148(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC080);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC080))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC078);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC080);
  }
  *a1 = qword_2540CC078;
}

void sub_2236D61E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC080);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC080);
  _Unwind_Resume(a1);
}

char *sub_2236D623C(int64x2_t *a1, _QWORD *a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int64x2_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int64x2_t v14;
  char *v15;
  uint64_t v16;
  int64x2_t *v17;

  v4 = a2[2];
  v15 = 0;
  v14 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_22316E078();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v14.i64[0] = (uint64_t)result;
    v14.i64[1] = (uint64_t)result;
    v15 = v6;
    v9 = (_QWORD *)*a2;
    v7 = a2 + 1;
    v8 = v9;
    v17 = &v14;
    if (v9 == v7)
      goto LABEL_6;
  }
  else
  {
    v6 = 0;
    result = 0;
    v7 = a2 + 1;
    v8 = (_QWORD *)*a2;
    v17 = &v14;
    if (v8 == a2 + 1)
    {
LABEL_6:
      v10 = vdupq_n_s64((unint64_t)result);
      goto LABEL_15;
    }
  }
  do
  {
    v16 = v8[6];
    result = (char *)sub_2232EA538((void ***)&v17, &v16);
    v11 = (_QWORD *)v8[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v8[2];
        v13 = *v12 == (_QWORD)v8;
        v8 = v12;
      }
      while (!v13);
    }
    v8 = v12;
  }
  while (v12 != v7);
  v10 = v14;
  v6 = v15;
LABEL_15:
  *a1 = v10;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_2236D6340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2236D6360(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (***v28)();
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t (***v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t (***v34)();
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (***v49)();
  uint64_t v50;
  uint64_t (***v51)();
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 *i;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  unint64_t v90;
  __int128 v91;
  _DWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  char v98;
  char v99;
  int v100;
  char *v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  int64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  int v110;
  char *v111;
  char *v112;
  unsigned __int8 *v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 **v136;
  uint64_t v137;
  uint64_t (***v138)();
  uint64_t v139;
  uint64_t (***v140)();
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t (***v159)();
  uint64_t v160;
  uint64_t (***v161)();
  uint64_t (***v162)();
  uint64_t v163;
  uint64_t v164;
  uint64_t (***v165)();
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t (***v180)();
  uint64_t v181;
  uint64_t (***v182)();
  uint64_t v183;
  unint64_t j;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _DWORD *v189;
  char v190;
  char v191;
  char v192;
  char v193;
  char v194;
  char v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  char v203;
  char v204;
  int v205;
  uint64_t v206;
  unint64_t v207;
  unsigned __int8 *v208;
  unint64_t v209;
  unsigned __int8 *v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  int64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char v221;
  unint64_t v222;
  __int128 v223;
  _DWORD *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char v228;
  char v229;
  char v230;
  char v231;
  int v232;
  char *v233;
  unint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  int64_t v238;
  uint64_t v239;
  unint64_t v240;
  char v241;
  int v242;
  char *v243;
  char *v244;
  unsigned __int8 *v245;
  uint64_t v246;
  char *v247;
  unint64_t v248;
  __int128 v249;
  __int128 v250;
  unsigned __int8 *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void **v268;
  char v270;
  char v271;
  char v272;
  char v273;
  char v274;
  char v275;
  int64_t v277;
  int64_t v278;
  int64_t v279;
  int64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  char v286;
  char v287;
  char v288;
  char v289;
  char v290;
  char v291;
  char v292;
  char v293;
  char v294;
  char v295;
  char v296;
  char v297;
  char v298;
  char v299;
  char v300;
  char v301;
  char v302;
  char v303;
  char v304;
  char v305;
  char v306;
  char v307;
  char v308;
  char v309;
  char v310;
  char v311;
  char v312;
  char v313;
  char v314;
  char v315;
  char v316;
  unsigned __int8 *__p;
  unsigned __int8 *__pa;
  char v319;
  char v320;
  uint64_t *v321;
  _QWORD v322[2];
  uint64_t v323;
  uint64_t v324;
  _QWORD v325[2];
  _QWORD v326[2];
  uint64_t v327;
  _QWORD v328[3];
  _QWORD *v329;
  uint64_t v330;
  _QWORD v331[3];
  _QWORD *v332;
  uint64_t v333;
  _QWORD v334[3];
  _QWORD *v335;
  uint64_t v336;
  _QWORD v337[3];
  _QWORD *v338;
  uint64_t v339;
  unsigned __int8 v340;
  unsigned __int8 v341;
  unsigned __int8 v342;
  unsigned __int8 v343;
  unsigned __int8 v344;
  unsigned __int8 v345;
  unsigned __int8 v346;
  unsigned __int8 v347;
  int v348;
  uint64_t v349;
  _BYTE v350[24];
  _BYTE *v351;
  uint64_t v352;
  _BYTE v353[24];
  _BYTE *v354;
  uint64_t v355;
  _BYTE v356[24];
  _BYTE *v357;
  uint64_t v358;
  _BYTE v359[24];
  _BYTE *v360;
  uint64_t v361;
  _QWORD v362[3];
  _QWORD *v363;
  uint64_t v364;
  _QWORD v365[3];
  _QWORD *v366;
  uint64_t v367;
  uint64_t (**v368)();
  uint64_t **v369;
  uint64_t (***v370)();
  uint64_t v371;
  uint64_t (**v372)();
  uint64_t **v373;
  uint64_t (***v374)();
  uint64_t v375;

  v375 = *MEMORY[0x24BDAC8D0];
  v326[0] = a4;
  v326[1] = a5;
  v325[0] = v326;
  v325[1] = a2;
  v323 = a3;
  v324 = a3;
  v322[0] = v325;
  v322[1] = &v324;
  v321 = &v323;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  a6[4] = 0;
  v268 = (void **)(a6 + 4);
  a6[5] = 0;
  a6[6] = 0;
  v6 = a1[1];
  v371 = *a1;
  v372 = &off_24EC57760;
  v373 = (uint64_t **)v322;
  v374 = &v372;
  v367 = v6;
  v368 = &off_24EC57760;
  v369 = (uint64_t **)v322;
  v370 = &v368;
  sub_2236DEFB8(&v355, &v371, &v367);
  v7 = v370;
  if (v370 == &v368)
  {
    v8 = 4;
    v7 = &v368;
  }
  else
  {
    if (!v370)
      goto LABEL_6;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_6:
  v9 = v374;
  if (v374 == &v372)
  {
    v10 = 4;
    v9 = &v372;
  }
  else
  {
    if (!v374)
      goto LABEL_11;
    v10 = 5;
  }
  (*v9)[v10]();
LABEL_11:
  v333 = v355;
  v11 = &v333;
  if (!v357)
  {
LABEL_14:
    v11[4] = 0;
    goto LABEL_16;
  }
  v11 = &v355;
  if (v357 != v356)
  {
    v335 = v357;
    goto LABEL_14;
  }
  v335 = v334;
  (*(void (**)(void))(*(_QWORD *)v357 + 24))();
LABEL_16:
  v336 = v358;
  v12 = &v333;
  if (!v360)
  {
LABEL_19:
    v12[9] = 0;
    goto LABEL_21;
  }
  v12 = &v355;
  if (v360 != v359)
  {
    v338 = v360;
    goto LABEL_19;
  }
  v338 = v337;
  (*(void (**)(void))(*(_QWORD *)v360 + 24))();
LABEL_21:
  v13 = v360;
  if (v360 == v359)
  {
    v14 = 4;
    v13 = v359;
  }
  else
  {
    if (!v360)
      goto LABEL_26;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_26:
  v15 = v357;
  if (v357 == v356)
  {
    v16 = 4;
    v15 = v356;
  }
  else
  {
    if (!v357)
      goto LABEL_31;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_31:
  v17 = (uint64_t)v335;
  v330 = v333;
  if (!v335)
  {
LABEL_34:
    v332 = (_QWORD *)v17;
    goto LABEL_36;
  }
  if (v335 != v334)
  {
    v17 = (*(uint64_t (**)(void))(*v335 + 16))();
    goto LABEL_34;
  }
  v332 = v331;
  (*(void (**)(_QWORD *, _QWORD *))(v334[0] + 24))(v334, v331);
LABEL_36:
  v18 = (uint64_t)v338;
  v327 = v336;
  if (!v338)
  {
LABEL_39:
    v329 = (_QWORD *)v18;
    goto LABEL_41;
  }
  if (v338 != v337)
  {
    v18 = (*(uint64_t (**)(void))(*v338 + 16))();
    goto LABEL_39;
  }
  v329 = v328;
  (*(void (**)(_QWORD *))(v337[0] + 24))(v337);
LABEL_41:
  v19 = (uint64_t)v332;
  v352 = v330;
  v20 = v353;
  if (!v332)
  {
LABEL_44:
    v354 = (_BYTE *)v19;
    goto LABEL_46;
  }
  if (v332 != v331)
  {
    v19 = (*(uint64_t (**)(void))(*v332 + 16))();
    goto LABEL_44;
  }
  v354 = v353;
  (*(void (**)(_QWORD *, _BYTE *))(v331[0] + 24))(v331, v353);
LABEL_46:
  v21 = (uint64_t)v329;
  v349 = v327;
  v22 = v350;
  if (!v329)
  {
LABEL_49:
    v351 = (_BYTE *)v21;
    goto LABEL_51;
  }
  if (v329 != v328)
  {
    v21 = (*(uint64_t (**)(void))(*v329 + 16))();
    goto LABEL_49;
  }
  v351 = v350;
  (*(void (**)(_QWORD *, _BYTE *))(v328[0] + 24))(v328, v350);
LABEL_51:
  sub_2236DEFB8(&v355, &v352, &v349);
  v23 = (uint64_t)v357;
  v364 = v355;
  v24 = v365;
  if (!v357)
  {
LABEL_54:
    v366 = (_QWORD *)v23;
    goto LABEL_56;
  }
  if (v357 != v356)
  {
    v23 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v357 + 16))(v357);
    goto LABEL_54;
  }
  v366 = v365;
  (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v357 + 24))(v357, v365);
LABEL_56:
  v25 = (uint64_t)v360;
  v361 = v358;
  v26 = v362;
  if (!v360)
  {
LABEL_59:
    v363 = (_QWORD *)v25;
    goto LABEL_61;
  }
  if (v360 != v359)
  {
    v25 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v360 + 16))(v360);
    goto LABEL_59;
  }
  v363 = v362;
  (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v360 + 24))(v360, v362);
LABEL_61:
  v27 = (uint64_t)v366;
  v371 = v364;
  v28 = &v372;
  if (!v366)
  {
LABEL_64:
    v374 = (uint64_t (***)())v27;
    goto LABEL_66;
  }
  if (v366 != v365)
  {
    v27 = (*(uint64_t (**)(_QWORD *))(*v366 + 16))(v366);
    goto LABEL_64;
  }
  v374 = &v372;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v365[0] + 24))(v365, &v372);
LABEL_66:
  v29 = v361;
  v367 = v361;
  if (!v363)
  {
    v370 = 0;
    v32 = v371;
    goto LABEL_72;
  }
  v30 = &v368;
  if (v363 != v362)
  {
    v31 = (uint64_t (***)())(*(uint64_t (**)(_QWORD *))(*v363 + 16))(v363);
    v370 = v31;
    v32 = v371;
    v29 = v367;
    if (v31 != &v368)
      goto LABEL_69;
LABEL_76:
    v33 = 4;
LABEL_77:
    ((void (*)(uint64_t (***)()))(*v30)[v33])(v30);
    v34 = v374;
    if (v374 == &v372)
      goto LABEL_78;
    goto LABEL_73;
  }
  v370 = &v368;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v362[0] + 24))(v362, &v368);
  v31 = v370;
  v32 = v371;
  v29 = v367;
  if (v370 == &v368)
    goto LABEL_76;
LABEL_69:
  if (v31)
  {
    v33 = 5;
    v30 = v31;
    goto LABEL_77;
  }
LABEL_72:
  v34 = v374;
  if (v374 == &v372)
  {
LABEL_78:
    v35 = 4;
    goto LABEL_79;
  }
LABEL_73:
  if (!v34)
    goto LABEL_80;
  v35 = 5;
  v28 = v34;
LABEL_79:
  ((void (*)(uint64_t (***)()))(*v28)[v35])(v28);
LABEL_80:
  if (v363 == v362)
  {
    v36 = 4;
  }
  else
  {
    if (!v363)
      goto LABEL_85;
    v36 = 5;
    v26 = v363;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v36))(v26);
LABEL_85:
  if (v366 == v365)
  {
    v37 = 4;
  }
  else
  {
    if (!v366)
      goto LABEL_90;
    v37 = 5;
    v24 = v366;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v37))(v24);
LABEL_90:
  if (v32 != v29)
  {
    v38 = (v32 - v29) >> 3;
    v39 = -v38;
    if ((unint64_t)-v38 > 0xCCCCCCCCCCCCCCCLL)
      sub_22316E078();
    v40 = (unsigned __int8 *)operator new(-20 * v38);
    v41 = &v40[20 * v39];
    v42 = v360;
    if (v360 != v359)
      goto LABEL_93;
LABEL_96:
    v43 = 4;
    v42 = v359;
    goto LABEL_97;
  }
  v41 = 0;
  v40 = 0;
  v42 = v360;
  if (v360 == v359)
    goto LABEL_96;
LABEL_93:
  if (!v42)
    goto LABEL_98;
  v43 = 5;
LABEL_97:
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_98:
  v44 = v357;
  if (v357 == v356)
  {
    v45 = 4;
    v44 = v356;
  }
  else
  {
    if (!v357)
      goto LABEL_103;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_103:
  if (v351 == v350)
  {
    v46 = 4;
  }
  else
  {
    if (!v351)
      goto LABEL_108;
    v46 = 5;
    v22 = v351;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v46))(v22);
LABEL_108:
  if (v354 == v353)
  {
    v47 = 4;
  }
  else
  {
    if (!v354)
      goto LABEL_113;
    v47 = 5;
    v20 = v354;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v47))(v20);
LABEL_113:
  v48 = (uint64_t)v332;
  v371 = v330;
  v49 = &v372;
  if (!v332)
  {
LABEL_116:
    v374 = (uint64_t (***)())v48;
    goto LABEL_118;
  }
  if (v332 != v331)
  {
    v48 = (*(uint64_t (**)(void))(*v332 + 16))();
    goto LABEL_116;
  }
  v374 = &v372;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v331[0] + 24))(v331, &v372);
LABEL_118:
  v50 = (uint64_t)v329;
  v367 = v327;
  v51 = &v368;
  if (!v329)
  {
LABEL_121:
    v370 = (uint64_t (***)())v50;
    goto LABEL_123;
  }
  if (v329 != v328)
  {
    v50 = (*(uint64_t (**)(void))(*v329 + 16))();
    goto LABEL_121;
  }
  v370 = &v368;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v328[0] + 24))(v328, &v368);
LABEL_123:
  sub_2236DEFB8(&v355, &v371, &v367);
  if (v370 == &v368)
  {
    v52 = 4;
  }
  else
  {
    if (!v370)
      goto LABEL_128;
    v52 = 5;
    v51 = v370;
  }
  ((void (*)(uint64_t (***)()))(*v51)[v52])(v51);
LABEL_128:
  if (v374 == &v372)
  {
    v53 = 4;
  }
  else
  {
    if (!v374)
      goto LABEL_133;
    v53 = 5;
    v49 = v374;
  }
  ((void (*)(uint64_t (***)()))(*v49)[v53])(v49);
LABEL_133:
  v54 = (uint64_t)v357;
  v364 = v355;
  if (!v357)
  {
LABEL_136:
    v366 = (_QWORD *)v54;
    goto LABEL_138;
  }
  if (v357 != v356)
  {
    v54 = (*(uint64_t (**)(void))(*(_QWORD *)v357 + 16))();
    goto LABEL_136;
  }
  v366 = v365;
  (*(void (**)(void))(*(_QWORD *)v357 + 24))();
LABEL_138:
  v55 = (uint64_t)v360;
  v361 = v358;
  if (!v360)
  {
LABEL_141:
    v363 = (_QWORD *)v55;
    goto LABEL_143;
  }
  if (v360 != v359)
  {
    v55 = (*(uint64_t (**)(void))(*(_QWORD *)v360 + 16))();
    goto LABEL_141;
  }
  v363 = v362;
  (*(void (**)(void))(*(_QWORD *)v360 + 24))();
LABEL_143:
  if (v364 != v361)
  {
    v56 = (unint64_t)v40;
    while (1)
    {
      if (!v366)
        sub_223198474();
      (*(void (**)(uint64_t *__return_ptr))(*v366 + 48))(&v339);
      v58 = v339;
      v59 = BYTE1(v339);
      v60 = BYTE3(v339);
      v61 = BYTE4(v339);
      v62 = BYTE5(v339);
      v63 = BYTE6(v339);
      v64 = HIBYTE(v339);
      v65 = v340;
      v66 = v341;
      v67 = v342;
      v68 = v343;
      v69 = v344;
      v70 = v345;
      v71 = v346;
      v72 = v347;
      v73 = v348;
      v74 = v56 - (_QWORD)v40;
      if ((unsigned __int8 *)v56 == v40)
      {
        v76 = (unsigned __int8 *)v56;
      }
      else
      {
        v75 = 0xCCCCCCCCCCCCCCCDLL * (v74 >> 2);
        v76 = v40;
        do
        {
          v77 = v75 >> 1;
          v78 = &v76[20 * (v75 >> 1)];
          v79 = *v78;
          v80 = v339;
          if (v79 != v339)
            goto LABEL_167;
          v79 = v78[1];
          v80 = BYTE1(v339);
          if (v79 != BYTE1(v339))
            goto LABEL_167;
          v79 = v78[2];
          v80 = BYTE2(v339);
          if (v79 != BYTE2(v339))
            goto LABEL_167;
          v79 = v78[3];
          v80 = BYTE3(v339);
          if (v79 != BYTE3(v339))
            goto LABEL_167;
          v79 = v78[4];
          v80 = BYTE4(v339);
          if (v79 != BYTE4(v339))
            goto LABEL_167;
          v79 = v78[5];
          v80 = BYTE5(v339);
          if (v79 != BYTE5(v339))
            goto LABEL_167;
          v79 = v78[6];
          v80 = BYTE6(v339);
          if (v79 != BYTE6(v339))
            goto LABEL_167;
          v79 = v78[7];
          v80 = HIBYTE(v339);
          if (v79 != HIBYTE(v339))
            goto LABEL_167;
          v79 = v78[8];
          v80 = v340;
          if (v79 != v340)
            goto LABEL_167;
          v79 = v78[9];
          v80 = v341;
          if (v79 != v341)
            goto LABEL_167;
          v79 = v78[10];
          v80 = v342;
          if (v79 != v342)
            goto LABEL_167;
          v79 = v78[11];
          v80 = v343;
          if (v79 != v343)
            goto LABEL_167;
          v79 = v78[12];
          v80 = v344;
          if (v79 != v344
            || (v79 = v78[13], v80 = v345, v79 != v345)
            || (v79 = v78[14], v80 = v346, v79 != v346)
            || (v79 = v78[15], v80 = v347, v79 != v347))
          {
LABEL_167:
            if (v79 < v80)
            {
              v77 = v75 + ~v77;
              v76 = v78 + 20;
            }
          }
          v75 = v77;
        }
        while (v77);
        v70 = v345;
        if ((unsigned __int8 *)v56 == v76)
          goto LABEL_212;
        v81 = *v76;
        if (v81 == v339)
        {
          v81 = v76[1];
          if (v81 == BYTE1(v339))
          {
            v81 = v76[2];
            if (v81 == BYTE2(v339))
            {
              v81 = v76[3];
              if (v81 == BYTE3(v339))
              {
                v81 = v76[4];
                if (v81 == BYTE4(v339))
                {
                  v81 = v76[5];
                  if (v81 == BYTE5(v339))
                  {
                    v82 = v76[6];
                    v83 = BYTE6(v339);
                    if (v82 != BYTE6(v339))
                      goto LABEL_188;
                    v82 = v76[7];
                    v83 = HIBYTE(v339);
                    if (v82 != HIBYTE(v339))
                      goto LABEL_188;
                    v82 = v76[8];
                    v83 = v340;
                    if (v82 != v340)
                      goto LABEL_188;
                    v82 = v76[9];
                    v83 = v341;
                    if (v82 != v341)
                      goto LABEL_188;
                    v82 = v76[10];
                    v83 = v342;
                    if (v82 != v342)
                      goto LABEL_188;
                    v82 = v76[11];
                    v83 = v343;
                    if (v82 != v343)
                      goto LABEL_188;
                    v82 = v76[12];
                    v83 = v344;
                    if (v82 != v344
                      || (v82 = v76[13], v83 = v345, v82 != v345)
                      || (v82 = v76[14], v83 = v346, v82 != v346)
                      || (v82 = v76[15], v83 = v347, v82 != v347))
                    {
LABEL_188:
                      if (v82 < v83)
                        goto LABEL_212;
                    }
                    v81 = v76[6];
                    v84 = BYTE6(v339);
                    if (BYTE6(v339) == v81)
                    {
                      v81 = v76[7];
                      v84 = HIBYTE(v339);
                      if (HIBYTE(v339) == v81)
                      {
                        v81 = v76[8];
                        v84 = v340;
                        if (v340 == v81)
                        {
                          v81 = v76[9];
                          v84 = v341;
                          if (v341 == v81)
                          {
                            v81 = v76[10];
                            v84 = v342;
                            if (v342 == v81)
                            {
                              v81 = v76[11];
                              v84 = v343;
                              if (v343 == v81)
                              {
                                v81 = v76[12];
                                v84 = v344;
                                if (v344 == v81)
                                {
                                  v81 = v76[13];
                                  v84 = v345;
                                  if (v345 == v81)
                                  {
                                    v81 = v76[14];
                                    v84 = v346;
                                    if (v346 == v81)
                                    {
                                      v81 = v76[15];
                                      v84 = v347;
                                      if (v347 == v81)
                                      {
LABEL_236:
                                        i = (unsigned __int8 *)v56;
                                        goto LABEL_146;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    v84 = BYTE5(v339);
                    if (v81 < BYTE5(v339))
                      goto LABEL_212;
                  }
                }
                else
                {
                  v84 = BYTE4(v339);
                  if (v81 < BYTE4(v339))
                    goto LABEL_212;
                }
              }
              else
              {
                v84 = BYTE3(v339);
                if (v81 < BYTE3(v339))
                  goto LABEL_212;
              }
            }
            else
            {
              v84 = BYTE2(v339);
              if (v81 < BYTE2(v339))
                goto LABEL_212;
            }
          }
          else
          {
            v84 = BYTE1(v339);
            if (v81 < BYTE1(v339))
              goto LABEL_212;
          }
        }
        else
        {
          v84 = v339;
          if (v81 < v339)
            goto LABEL_212;
        }
        if (v84 >= v81)
          goto LABEL_236;
      }
LABEL_212:
      v319 = BYTE2(v339);
      v85 = v76 - v40;
      v86 = (unsigned __int128)((v76 - v40) * (__int128)0x6666666666666667) >> 64;
      v87 = (v86 >> 3) + ((unint64_t)v86 >> 63);
      v88 = (char *)&v40[20 * v87];
      if (v56 >= (unint64_t)v41)
      {
        v94 = 1 - 0x3333333333333333 * (v74 >> 2);
        __p = v40;
        if (v94 > 0xCCCCCCCCCCCCCCCLL)
          sub_22316E078();
        if (0x999999999999999ALL * ((v41 - v40) >> 2) > v94)
          v94 = 0x999999999999999ALL * ((v41 - v40) >> 2);
        if (0xCCCCCCCCCCCCCCCDLL * ((v41 - v40) >> 2) >= 0x666666666666666)
          v95 = 0xCCCCCCCCCCCCCCCLL;
        else
          v95 = v94;
        if (v95)
        {
          v277 = v85;
          v281 = (v86 >> 3) + ((unint64_t)v86 >> 63);
          v285 = BYTE3(v339);
          v289 = BYTE5(v339);
          v293 = BYTE6(v339);
          v297 = HIBYTE(v339);
          v301 = v340;
          v305 = v341;
          v309 = v342;
          v313 = v343;
          if (v95 > 0xCCCCCCCCCCCCCCCLL)
            sub_223174E94();
          v96 = v344;
          v97 = v70;
          v98 = v346;
          v99 = v347;
          v100 = v348;
          v101 = (char *)operator new(20 * v95);
          v73 = v100;
          v72 = v99;
          v71 = v98;
          v70 = v97;
          v69 = v96;
          v67 = v309;
          v68 = v313;
          v65 = v301;
          v66 = v305;
          v63 = v293;
          v64 = v297;
          v62 = v289;
          v60 = v285;
          v85 = v277;
          v87 = v281;
          v102 = (unint64_t)&v101[20 * v281];
          v103 = &v101[20 * v95];
          if ((char *)v102 != v103)
          {
LABEL_229:
            v104 = v103;
            v105 = (char *)__p;
LABEL_244:
            *(_BYTE *)v102 = v58;
            *(_BYTE *)(v102 + 1) = v59;
            *(_BYTE *)(v102 + 2) = v319;
            *(_BYTE *)(v102 + 3) = v60;
            *(_BYTE *)(v102 + 4) = v61;
            *(_BYTE *)(v102 + 5) = v62;
            *(_BYTE *)(v102 + 6) = v63;
            *(_BYTE *)(v102 + 7) = v64;
            *(_BYTE *)(v102 + 8) = v65;
            *(_BYTE *)(v102 + 9) = v66;
            *(_BYTE *)(v102 + 10) = v67;
            *(_BYTE *)(v102 + 11) = v68;
            *(_BYTE *)(v102 + 12) = v69;
            *(_BYTE *)(v102 + 13) = v70;
            *(_BYTE *)(v102 + 14) = v71;
            *(_BYTE *)(v102 + 15) = v72;
            v113 = (unsigned __int8 *)v102;
            *(_DWORD *)(v102 + 16) = v73;
            if ((unint64_t)(v85 + 19) >= 0x27)
            {
              v114 = 20 * v87;
              v115 = v105 - 20;
              v116 = v102;
              do
              {
                v113 = (unsigned __int8 *)(v116 - 20);
                v117 = *(_OWORD *)&v115[v114];
                *(_DWORD *)(v116 - 4) = *(_DWORD *)&v115[v114 + 16];
                *(_OWORD *)(v116 - 20) = v117;
                v116 -= 20;
                v114 -= 20;
              }
              while (v114);
            }
            for (i = (unsigned __int8 *)(v102 + 20); v88 != (char *)v56; v88 += 20)
            {
              v118 = *(_OWORD *)v88;
              *((_DWORD *)i + 4) = *((_DWORD *)v88 + 4);
              *(_OWORD *)i = v118;
              i += 20;
            }
            if (v105)
              operator delete(v105);
            v40 = v113;
            v41 = (unsigned __int8 *)v104;
            goto LABEL_146;
          }
        }
        else
        {
          v101 = 0;
          v102 = 20 * v87;
          v103 = 0;
          if (20 * v87)
            goto LABEL_229;
        }
        v106 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v102 - (_QWORD)v101) >> 2);
        if (v102 <= (unint64_t)v101)
        {
          v278 = v85;
          v282 = v87;
          v271 = v72;
          v273 = v70;
          v286 = v60;
          v290 = v62;
          v294 = v63;
          v298 = v64;
          v302 = v65;
          v306 = v66;
          v310 = v67;
          v314 = v68;
          v270 = v71;
          if ((char *)v102 == v101)
            v108 = 1;
          else
            v108 = 0x999999999999999ALL * ((uint64_t)(v102 - (_QWORD)v101) >> 2);
          if (v108 > 0xCCCCCCCCCCCCCCCLL)
            sub_223174E94();
          v109 = v69;
          v110 = v73;
          v111 = v101;
          v112 = (char *)operator new(20 * v108);
          v102 = (unint64_t)&v112[20 * (v108 >> 2)];
          v104 = &v112[20 * v108];
          v105 = (char *)__p;
          if (v111)
            operator delete(v111);
          v73 = v110;
          v72 = v271;
          v70 = v273;
          v71 = v270;
          v69 = v109;
          v67 = v310;
          v68 = v314;
          v65 = v302;
          v66 = v306;
          v63 = v294;
          v64 = v298;
          v62 = v290;
          v60 = v286;
          v85 = v278;
          v87 = v282;
        }
        else
        {
          if (v106 >= -1)
            v107 = v106 + 1;
          else
            v107 = v106 + 2;
          v104 = (char *)v102;
          v102 -= 20 * (v107 >> 1);
          v105 = (char *)__p;
        }
        goto LABEL_244;
      }
      if (v88 == (char *)v56)
      {
        *(_BYTE *)v56 = v339;
        *(_BYTE *)(v56 + 1) = v59;
        *(_BYTE *)(v56 + 2) = v319;
        *(_BYTE *)(v56 + 3) = v60;
        *(_BYTE *)(v56 + 4) = v61;
        *(_BYTE *)(v56 + 5) = v62;
        *(_BYTE *)(v56 + 6) = v63;
        *(_BYTE *)(v56 + 7) = v64;
        *(_BYTE *)(v56 + 8) = v65;
        *(_BYTE *)(v56 + 9) = v66;
        *(_BYTE *)(v56 + 10) = v67;
        *(_BYTE *)(v56 + 11) = v68;
        *(_BYTE *)(v56 + 12) = v69;
        *(_BYTE *)(v56 + 13) = v70;
        *(_BYTE *)(v56 + 14) = v71;
        *(_BYTE *)(v56 + 15) = v72;
        i = (unsigned __int8 *)(v56 + 20);
        *(_DWORD *)(v56 + 16) = v73;
      }
      else
      {
        v89 = BYTE3(v339);
        v90 = v56 - 20;
        i = (unsigned __int8 *)v56;
        if (v56 >= 0x14)
        {
          do
          {
            v91 = *(_OWORD *)v90;
            *((_DWORD *)i + 4) = *(_DWORD *)(v90 + 16);
            *(_OWORD *)i = v91;
            i += 20;
            v90 += 20;
          }
          while (v90 < v56);
        }
        if ((char *)v56 != v88 + 20)
        {
          v92 = (_DWORD *)(v56 - 4);
          v93 = 4 * ((uint64_t)(v56 - (_QWORD)(v88 + 20)) >> 2);
          do
          {
            *((_OWORD *)v92 - 1) = *(_OWORD *)&v88[v93 - 20];
            *v92 = *(_DWORD *)&v88[v93 - 4];
            v92 -= 5;
            v93 -= 20;
          }
          while (v93);
        }
        *v88 = v58;
        v88[1] = v59;
        v88[2] = v319;
        v88[3] = v89;
        v88[4] = v61;
        v88[5] = v62;
        v88[6] = v63;
        v88[7] = v64;
        v88[8] = v65;
        v88[9] = v66;
        v88[10] = v67;
        v88[11] = v68;
        v88[12] = v69;
        v88[13] = v70;
        v88[14] = v71;
        v88[15] = v72;
        *(_DWORD *)&v40[20 * v87 + 16] = v73;
      }
LABEL_146:
      v364 += 8;
      v56 = (unint64_t)i;
      if (v364 == v361)
        goto LABEL_253;
    }
  }
  i = v40;
LABEL_253:
  v119 = v362;
  if (v363 == v362)
  {
    v122 = 4;
    v120 = v331;
    v121 = v334;
  }
  else
  {
    v120 = v331;
    v121 = v334;
    if (!v363)
      goto LABEL_258;
    v122 = 5;
    v119 = v363;
  }
  (*(void (**)(void))(*v119 + 8 * v122))();
LABEL_258:
  v123 = v365;
  if (v366 == v365)
  {
    v124 = 4;
  }
  else
  {
    if (!v366)
      goto LABEL_263;
    v124 = 5;
    v123 = v366;
  }
  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_263:
  v125 = v360;
  if (v360 == v359)
  {
    v126 = 4;
    v125 = v359;
  }
  else
  {
    if (!v360)
      goto LABEL_268;
    v126 = 5;
  }
  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_268:
  v127 = v357;
  if (v357 == v356)
  {
    v128 = 4;
    v127 = v356;
  }
  else
  {
    if (!v357)
      goto LABEL_273;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_273:
  v129 = v328;
  if (v329 == v328)
  {
    v130 = 4;
  }
  else
  {
    if (!v329)
      goto LABEL_278;
    v130 = 5;
    v129 = v329;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_278:
  if (v332 == v331)
  {
    v131 = 4;
  }
  else
  {
    if (!v332)
      goto LABEL_283;
    v131 = 5;
    v120 = v332;
  }
  (*(void (**)(_QWORD *))(*v120 + 8 * v131))(v120);
LABEL_283:
  v132 = v337;
  if (v338 == v337)
  {
    v134 = 4;
    v133 = a1;
  }
  else
  {
    v133 = a1;
    if (!v338)
      goto LABEL_288;
    v134 = 5;
    v132 = v338;
  }
  (*(void (**)(void))(*v132 + 8 * v134))();
LABEL_288:
  if (v335 == v334)
  {
    v135 = 4;
  }
  else
  {
    if (!v335)
      goto LABEL_293;
    v135 = 5;
    v121 = v335;
  }
  (*(void (**)(_QWORD *))(*v121 + 8 * v135))(v121);
LABEL_293:
  v136 = (unsigned __int8 **)a6;
  if (*a6)
  {
    operator delete((void *)*a6);
    v136 = (unsigned __int8 **)a6;
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  *v136 = v40;
  v136[1] = i;
  v136[2] = v41;
  v137 = v133[7];
  v371 = v133[6];
  v372 = &off_24EC577F0;
  v373 = &v321;
  v374 = &v372;
  v367 = v137;
  v368 = &off_24EC577F0;
  v369 = &v321;
  v370 = &v368;
  sub_2236E2008(&v355, &v371, &v367);
  v138 = v370;
  if (v370 == &v368)
  {
    v139 = 4;
    v138 = &v368;
  }
  else
  {
    if (!v370)
      goto LABEL_300;
    v139 = 5;
  }
  (*v138)[v139]();
LABEL_300:
  v140 = v374;
  if (v374 == &v372)
  {
    v141 = 4;
    v140 = &v372;
  }
  else
  {
    if (!v374)
      goto LABEL_305;
    v141 = 5;
  }
  (*v140)[v141]();
LABEL_305:
  v333 = v355;
  v142 = &v333;
  if (!v357)
  {
LABEL_308:
    v142[4] = 0;
    goto LABEL_310;
  }
  v142 = &v355;
  if (v357 != v356)
  {
    v335 = v357;
    goto LABEL_308;
  }
  v335 = v334;
  (*(void (**)(void))(*(_QWORD *)v357 + 24))();
LABEL_310:
  v336 = v358;
  v143 = &v333;
  if (!v360)
  {
LABEL_313:
    v143[9] = 0;
    goto LABEL_315;
  }
  v143 = &v355;
  if (v360 != v359)
  {
    v338 = v360;
    goto LABEL_313;
  }
  v338 = v337;
  (*(void (**)(void))(*(_QWORD *)v360 + 24))();
LABEL_315:
  v144 = v360;
  if (v360 == v359)
  {
    v145 = 4;
    v144 = v359;
  }
  else
  {
    if (!v360)
      goto LABEL_320;
    v145 = 5;
  }
  (*(void (**)(void))(*v144 + 8 * v145))();
LABEL_320:
  v146 = v357;
  if (v357 == v356)
  {
    v147 = 4;
    v146 = v356;
  }
  else
  {
    if (!v357)
      goto LABEL_325;
    v147 = 5;
  }
  (*(void (**)(void))(*v146 + 8 * v147))();
LABEL_325:
  v148 = (uint64_t)v335;
  v330 = v333;
  if (!v335)
  {
LABEL_328:
    v332 = (_QWORD *)v148;
    goto LABEL_330;
  }
  if (v335 != v334)
  {
    v148 = (*(uint64_t (**)(void))(*v335 + 16))();
    goto LABEL_328;
  }
  v332 = v331;
  (*(void (**)(_QWORD *, _QWORD *))(v334[0] + 24))(v334, v331);
LABEL_330:
  v149 = (uint64_t)v338;
  v327 = v336;
  if (!v338)
  {
LABEL_333:
    v329 = (_QWORD *)v149;
    goto LABEL_335;
  }
  if (v338 != v337)
  {
    v149 = (*(uint64_t (**)(void))(*v338 + 16))();
    goto LABEL_333;
  }
  v329 = v328;
  (*(void (**)(_QWORD *, _QWORD *))(v337[0] + 24))(v337, v328);
LABEL_335:
  v150 = (uint64_t)v332;
  v352 = v330;
  v151 = v353;
  if (!v332)
  {
LABEL_338:
    v354 = (_BYTE *)v150;
    goto LABEL_340;
  }
  if (v332 != v331)
  {
    v150 = (*(uint64_t (**)(void))(*v332 + 16))();
    goto LABEL_338;
  }
  v354 = v353;
  (*(void (**)(_QWORD *, _BYTE *))(v331[0] + 24))(v331, v353);
LABEL_340:
  v152 = (uint64_t)v329;
  v349 = v327;
  v153 = v350;
  if (!v329)
  {
LABEL_343:
    v351 = (_BYTE *)v152;
    goto LABEL_345;
  }
  if (v329 != v328)
  {
    v152 = (*(uint64_t (**)(void))(*v329 + 16))();
    goto LABEL_343;
  }
  v351 = v350;
  (*(void (**)(_QWORD *, _BYTE *))(v328[0] + 24))(v328, v350);
LABEL_345:
  sub_2236E2008(&v355, &v352, &v349);
  v154 = (uint64_t)v357;
  v364 = v355;
  v155 = v365;
  if (!v357)
  {
LABEL_348:
    v366 = (_QWORD *)v154;
    goto LABEL_350;
  }
  if (v357 != v356)
  {
    v154 = (*(uint64_t (**)(void))(*(_QWORD *)v357 + 16))();
    goto LABEL_348;
  }
  v366 = v365;
  (*(void (**)(void))(*(_QWORD *)v357 + 24))();
LABEL_350:
  v156 = (uint64_t)v360;
  v361 = v358;
  v157 = v362;
  if (!v360)
  {
LABEL_353:
    v363 = (_QWORD *)v156;
    goto LABEL_355;
  }
  if (v360 != v359)
  {
    v156 = (*(uint64_t (**)(void))(*(_QWORD *)v360 + 16))();
    goto LABEL_353;
  }
  v363 = v362;
  (*(void (**)(void))(*(_QWORD *)v360 + 24))();
LABEL_355:
  v158 = (uint64_t)v366;
  v371 = v364;
  v159 = &v372;
  if (!v366)
  {
LABEL_358:
    v374 = (uint64_t (***)())v158;
    goto LABEL_360;
  }
  if (v366 != v365)
  {
    v158 = (*(uint64_t (**)(void))(*v366 + 16))();
    goto LABEL_358;
  }
  v374 = &v372;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v365[0] + 24))(v365, &v372);
LABEL_360:
  v160 = v361;
  v367 = v361;
  if (!v363)
  {
    v370 = 0;
    v163 = v371;
    goto LABEL_366;
  }
  v161 = &v368;
  if (v363 != v362)
  {
    v162 = (uint64_t (***)())(*(uint64_t (**)(void))(*v363 + 16))();
    v370 = v162;
    v163 = v371;
    v160 = v367;
    if (v162 != &v368)
      goto LABEL_363;
LABEL_370:
    v164 = 4;
LABEL_371:
    ((void (*)(uint64_t (***)()))(*v161)[v164])(v161);
    v165 = v374;
    if (v374 == &v372)
      goto LABEL_372;
    goto LABEL_367;
  }
  v370 = &v368;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v362[0] + 24))(v362, &v368);
  v162 = v370;
  v163 = v371;
  v160 = v367;
  if (v370 == &v368)
    goto LABEL_370;
LABEL_363:
  if (v162)
  {
    v164 = 5;
    v161 = v162;
    goto LABEL_371;
  }
LABEL_366:
  v165 = v374;
  if (v374 == &v372)
  {
LABEL_372:
    v166 = 4;
    goto LABEL_373;
  }
LABEL_367:
  if (!v165)
    goto LABEL_374;
  v166 = 5;
  v159 = v165;
LABEL_373:
  ((void (*)(uint64_t (***)()))(*v159)[v166])(v159);
LABEL_374:
  if (v363 == v362)
  {
    v167 = 4;
  }
  else
  {
    if (!v363)
      goto LABEL_379;
    v167 = 5;
    v157 = v363;
  }
  (*(void (**)(_QWORD *))(*v157 + 8 * v167))(v157);
LABEL_379:
  if (v366 == v365)
  {
    v168 = 4;
  }
  else
  {
    if (!v366)
      goto LABEL_384;
    v168 = 5;
    v155 = v366;
  }
  (*(void (**)(_QWORD *))(*v155 + 8 * v168))(v155);
LABEL_384:
  if (v163 != v160)
  {
    v169 = (v163 - v160) >> 4;
    v170 = -v169;
    if ((unint64_t)-v169 > 0xCCCCCCCCCCCCCCCLL)
      sub_22316E078();
    v171 = (unsigned __int8 *)operator new(-20 * v169);
    v172 = &v171[20 * v170];
    v173 = v360;
    if (v360 != v359)
      goto LABEL_387;
LABEL_390:
    v174 = 4;
    v173 = v359;
    goto LABEL_391;
  }
  v171 = 0;
  v172 = 0;
  v173 = v360;
  if (v360 == v359)
    goto LABEL_390;
LABEL_387:
  if (!v173)
    goto LABEL_392;
  v174 = 5;
LABEL_391:
  (*(void (**)(void))(*v173 + 8 * v174))();
LABEL_392:
  v175 = v357;
  if (v357 == v356)
  {
    v176 = 4;
    v175 = v356;
  }
  else
  {
    if (!v357)
      goto LABEL_397;
    v176 = 5;
  }
  (*(void (**)(void))(*v175 + 8 * v176))();
LABEL_397:
  if (v351 == v350)
  {
    v177 = 4;
  }
  else
  {
    if (!v351)
      goto LABEL_402;
    v177 = 5;
    v153 = v351;
  }
  (*(void (**)(_QWORD *))(*v153 + 8 * v177))(v153);
LABEL_402:
  if (v354 == v353)
  {
    v178 = 4;
  }
  else
  {
    if (!v354)
      goto LABEL_407;
    v178 = 5;
    v151 = v354;
  }
  (*(void (**)(_QWORD *))(*v151 + 8 * v178))(v151);
LABEL_407:
  v179 = (uint64_t)v332;
  v371 = v330;
  v180 = &v372;
  if (!v332)
  {
LABEL_410:
    v374 = (uint64_t (***)())v179;
    goto LABEL_412;
  }
  if (v332 != v331)
  {
    v179 = (*(uint64_t (**)(void))(*v332 + 16))();
    goto LABEL_410;
  }
  v374 = &v372;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v331[0] + 24))(v331, &v372);
LABEL_412:
  v181 = (uint64_t)v329;
  v367 = v327;
  v182 = &v368;
  if (!v329)
  {
LABEL_415:
    v370 = (uint64_t (***)())v181;
    goto LABEL_417;
  }
  if (v329 != v328)
  {
    v181 = (*(uint64_t (**)(void))(*v329 + 16))();
    goto LABEL_415;
  }
  v370 = &v368;
  (*(void (**)(_QWORD *, uint64_t (***)()))(v328[0] + 24))(v328, &v368);
LABEL_417:
  sub_2236E2008(&v355, &v371, &v367);
  if (v370 == &v368)
  {
    v183 = 4;
  }
  else
  {
    if (!v370)
      goto LABEL_422;
    v183 = 5;
    v182 = v370;
  }
  ((void (*)(uint64_t (***)()))(*v182)[v183])(v182);
LABEL_422:
  if (v374 == &v372)
  {
    v185 = 4;
    j = (unint64_t)v172;
  }
  else
  {
    j = (unint64_t)v172;
    if (!v374)
      goto LABEL_427;
    v185 = 5;
    v180 = v374;
  }
  ((void (*)(uint64_t (***)()))(*v180)[v185])(v180);
LABEL_427:
  v186 = (uint64_t)v357;
  v364 = v355;
  if (!v357)
  {
LABEL_430:
    v366 = (_QWORD *)v186;
    goto LABEL_432;
  }
  if (v357 != v356)
  {
    v186 = (*(uint64_t (**)(void))(*(_QWORD *)v357 + 16))();
    goto LABEL_430;
  }
  v366 = v365;
  (*(void (**)(void))(*(_QWORD *)v357 + 24))();
LABEL_432:
  v187 = (uint64_t)v360;
  v361 = v358;
  if (!v360)
  {
LABEL_435:
    v363 = (_QWORD *)v187;
    goto LABEL_437;
  }
  if (v360 != v359)
  {
    v187 = (*(uint64_t (**)(void))(*(_QWORD *)v360 + 16))();
    goto LABEL_435;
  }
  v363 = v362;
  (*(void (**)(void))(*(_QWORD *)v360 + 24))();
LABEL_437:
  if (v364 != v361)
  {
    v188 = (unint64_t)v171;
    while (1)
    {
      if (!v366)
        sub_223198474();
      (*(void (**)(uint64_t *__return_ptr))(*v366 + 48))(&v339);
      v190 = v339;
      v191 = BYTE1(v339);
      v192 = BYTE3(v339);
      v193 = BYTE4(v339);
      v194 = BYTE5(v339);
      v195 = BYTE6(v339);
      v196 = HIBYTE(v339);
      v197 = v340;
      v198 = v341;
      v199 = v342;
      v200 = v343;
      v201 = v344;
      v202 = v345;
      v203 = v346;
      v204 = v347;
      v205 = v348;
      v206 = v188 - (_QWORD)v171;
      if ((unsigned __int8 *)v188 == v171)
      {
        v208 = (unsigned __int8 *)v188;
      }
      else
      {
        v207 = 0xCCCCCCCCCCCCCCCDLL * (v206 >> 2);
        v208 = v171;
        do
        {
          v209 = v207 >> 1;
          v210 = &v208[20 * (v207 >> 1)];
          v211 = *v210;
          v212 = v339;
          if (v211 != v339)
            goto LABEL_461;
          v211 = v210[1];
          v212 = BYTE1(v339);
          if (v211 != BYTE1(v339))
            goto LABEL_461;
          v211 = v210[2];
          v212 = BYTE2(v339);
          if (v211 != BYTE2(v339))
            goto LABEL_461;
          v211 = v210[3];
          v212 = BYTE3(v339);
          if (v211 != BYTE3(v339))
            goto LABEL_461;
          v211 = v210[4];
          v212 = BYTE4(v339);
          if (v211 != BYTE4(v339))
            goto LABEL_461;
          v211 = v210[5];
          v212 = BYTE5(v339);
          if (v211 != BYTE5(v339))
            goto LABEL_461;
          v211 = v210[6];
          v212 = BYTE6(v339);
          if (v211 != BYTE6(v339))
            goto LABEL_461;
          v211 = v210[7];
          v212 = HIBYTE(v339);
          if (v211 != HIBYTE(v339))
            goto LABEL_461;
          v211 = v210[8];
          v212 = v340;
          if (v211 != v340)
            goto LABEL_461;
          v211 = v210[9];
          v212 = v341;
          if (v211 != v341)
            goto LABEL_461;
          v211 = v210[10];
          v212 = v342;
          if (v211 != v342)
            goto LABEL_461;
          v211 = v210[11];
          v212 = v343;
          if (v211 != v343)
            goto LABEL_461;
          v211 = v210[12];
          v212 = v344;
          if (v211 != v344
            || (v211 = v210[13], v212 = v345, v211 != v345)
            || (v211 = v210[14], v212 = v346, v211 != v346)
            || (v211 = v210[15], v212 = v347, v211 != v347))
          {
LABEL_461:
            if (v211 < v212)
            {
              v209 = v207 + ~v209;
              v208 = v210 + 20;
            }
          }
          v207 = v209;
        }
        while (v209);
        v202 = v345;
        if ((unsigned __int8 *)v188 == v208)
          goto LABEL_506;
        v213 = *v208;
        if (v213 == v339)
        {
          v213 = v208[1];
          if (v213 == BYTE1(v339))
          {
            v213 = v208[2];
            if (v213 == BYTE2(v339))
            {
              v213 = v208[3];
              if (v213 == BYTE3(v339))
              {
                v213 = v208[4];
                if (v213 == BYTE4(v339))
                {
                  v213 = v208[5];
                  if (v213 == BYTE5(v339))
                  {
                    v214 = v208[6];
                    v215 = BYTE6(v339);
                    if (v214 != BYTE6(v339))
                      goto LABEL_482;
                    v214 = v208[7];
                    v215 = HIBYTE(v339);
                    if (v214 != HIBYTE(v339))
                      goto LABEL_482;
                    v214 = v208[8];
                    v215 = v340;
                    if (v214 != v340)
                      goto LABEL_482;
                    v214 = v208[9];
                    v215 = v341;
                    if (v214 != v341)
                      goto LABEL_482;
                    v214 = v208[10];
                    v215 = v342;
                    if (v214 != v342)
                      goto LABEL_482;
                    v214 = v208[11];
                    v215 = v343;
                    if (v214 != v343)
                      goto LABEL_482;
                    v214 = v208[12];
                    v215 = v344;
                    if (v214 != v344
                      || (v214 = v208[13], v215 = v345, v214 != v345)
                      || (v214 = v208[14], v215 = v346, v214 != v346)
                      || (v214 = v208[15], v215 = v347, v214 != v347))
                    {
LABEL_482:
                      if (v214 < v215)
                        goto LABEL_506;
                    }
                    v213 = v208[6];
                    v216 = BYTE6(v339);
                    if (BYTE6(v339) == v213)
                    {
                      v213 = v208[7];
                      v216 = HIBYTE(v339);
                      if (HIBYTE(v339) == v213)
                      {
                        v213 = v208[8];
                        v216 = v340;
                        if (v340 == v213)
                        {
                          v213 = v208[9];
                          v216 = v341;
                          if (v341 == v213)
                          {
                            v213 = v208[10];
                            v216 = v342;
                            if (v342 == v213)
                            {
                              v213 = v208[11];
                              v216 = v343;
                              if (v343 == v213)
                              {
                                v213 = v208[12];
                                v216 = v344;
                                if (v344 == v213)
                                {
                                  v213 = v208[13];
                                  v216 = v345;
                                  if (v345 == v213)
                                  {
                                    v213 = v208[14];
                                    v216 = v346;
                                    if (v346 == v213)
                                    {
                                      v213 = v208[15];
                                      v216 = v347;
                                      if (v347 == v213)
                                      {
LABEL_530:
                                        v189 = (_DWORD *)v188;
                                        goto LABEL_440;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    v216 = BYTE5(v339);
                    if (v213 < BYTE5(v339))
                      goto LABEL_506;
                  }
                }
                else
                {
                  v216 = BYTE4(v339);
                  if (v213 < BYTE4(v339))
                    goto LABEL_506;
                }
              }
              else
              {
                v216 = BYTE3(v339);
                if (v213 < BYTE3(v339))
                  goto LABEL_506;
              }
            }
            else
            {
              v216 = BYTE2(v339);
              if (v213 < BYTE2(v339))
                goto LABEL_506;
            }
          }
          else
          {
            v216 = BYTE1(v339);
            if (v213 < BYTE1(v339))
              goto LABEL_506;
          }
        }
        else
        {
          v216 = v339;
          if (v213 < v339)
            goto LABEL_506;
        }
        if (v216 >= v213)
          goto LABEL_530;
      }
LABEL_506:
      v320 = BYTE2(v339);
      v217 = v208 - v171;
      v218 = (unsigned __int128)((v208 - v171) * (__int128)0x6666666666666667) >> 64;
      v219 = (v218 >> 3) + ((unint64_t)v218 >> 63);
      v220 = (char *)&v171[20 * v219];
      if (v188 >= j)
      {
        v226 = 1 - 0x3333333333333333 * (v206 >> 2);
        __pa = v171;
        if (v226 > 0xCCCCCCCCCCCCCCCLL)
          sub_22316E078();
        if (0x999999999999999ALL * ((uint64_t)(j - (_QWORD)v171) >> 2) > v226)
          v226 = 0x999999999999999ALL * ((uint64_t)(j - (_QWORD)v171) >> 2);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(j - (_QWORD)v171) >> 2) >= 0x666666666666666)
          v227 = 0xCCCCCCCCCCCCCCCLL;
        else
          v227 = v226;
        if (v227)
        {
          v279 = v217;
          v283 = (v218 >> 3) + ((unint64_t)v218 >> 63);
          v287 = BYTE3(v339);
          v291 = BYTE5(v339);
          v295 = BYTE6(v339);
          v299 = HIBYTE(v339);
          v303 = v340;
          v307 = v341;
          v311 = v342;
          v315 = v343;
          if (v227 > 0xCCCCCCCCCCCCCCCLL)
            sub_223174E94();
          v228 = v344;
          v229 = v202;
          v230 = v346;
          v231 = v347;
          v232 = v348;
          v233 = (char *)operator new(20 * v227);
          v205 = v232;
          v204 = v231;
          v203 = v230;
          v202 = v229;
          v201 = v228;
          v199 = v311;
          v200 = v315;
          v197 = v303;
          v198 = v307;
          v195 = v295;
          v196 = v299;
          v194 = v291;
          v192 = v287;
          v217 = v279;
          v219 = v283;
          v234 = (unint64_t)&v233[20 * v283];
          v235 = &v233[20 * v227];
          if ((char *)v234 != v235)
          {
LABEL_523:
            v236 = v235;
            v237 = (char *)__pa;
LABEL_538:
            *(_BYTE *)v234 = v190;
            *(_BYTE *)(v234 + 1) = v191;
            *(_BYTE *)(v234 + 2) = v320;
            *(_BYTE *)(v234 + 3) = v192;
            *(_BYTE *)(v234 + 4) = v193;
            *(_BYTE *)(v234 + 5) = v194;
            *(_BYTE *)(v234 + 6) = v195;
            *(_BYTE *)(v234 + 7) = v196;
            *(_BYTE *)(v234 + 8) = v197;
            *(_BYTE *)(v234 + 9) = v198;
            *(_BYTE *)(v234 + 10) = v199;
            *(_BYTE *)(v234 + 11) = v200;
            *(_BYTE *)(v234 + 12) = v201;
            *(_BYTE *)(v234 + 13) = v202;
            *(_BYTE *)(v234 + 14) = v203;
            *(_BYTE *)(v234 + 15) = v204;
            v245 = (unsigned __int8 *)v234;
            *(_DWORD *)(v234 + 16) = v205;
            if ((unint64_t)(v217 + 19) >= 0x27)
            {
              v246 = 20 * v219;
              v247 = v237 - 20;
              v248 = v234;
              do
              {
                v245 = (unsigned __int8 *)(v248 - 20);
                v249 = *(_OWORD *)&v247[v246];
                *(_DWORD *)(v248 - 4) = *(_DWORD *)&v247[v246 + 16];
                *(_OWORD *)(v248 - 20) = v249;
                v248 -= 20;
                v246 -= 20;
              }
              while (v246);
            }
            v189 = (_DWORD *)(v234 + 20);
            for (j = (unint64_t)v236; v220 != (char *)v188; v220 += 20)
            {
              v250 = *(_OWORD *)v220;
              v189[4] = *((_DWORD *)v220 + 4);
              *(_OWORD *)v189 = v250;
              v189 += 5;
            }
            if (v237)
              operator delete(v237);
            v171 = v245;
            goto LABEL_440;
          }
        }
        else
        {
          v233 = 0;
          v234 = 20 * v219;
          v235 = 0;
          if (20 * v219)
            goto LABEL_523;
        }
        v238 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v234 - (_QWORD)v233) >> 2);
        if (v234 <= (unint64_t)v233)
        {
          v280 = v217;
          v284 = v219;
          v274 = v204;
          v275 = v202;
          v288 = v192;
          v292 = v194;
          v296 = v195;
          v300 = v196;
          v304 = v197;
          v308 = v198;
          v312 = v199;
          v316 = v200;
          v272 = v203;
          if ((char *)v234 == v233)
            v240 = 1;
          else
            v240 = 0x999999999999999ALL * ((uint64_t)(v234 - (_QWORD)v233) >> 2);
          if (v240 > 0xCCCCCCCCCCCCCCCLL)
            sub_223174E94();
          v241 = v201;
          v242 = v205;
          v243 = v233;
          v244 = (char *)operator new(20 * v240);
          v234 = (unint64_t)&v244[20 * (v240 >> 2)];
          v236 = &v244[20 * v240];
          v237 = (char *)__pa;
          if (v243)
            operator delete(v243);
          v205 = v242;
          v203 = v272;
          v204 = v274;
          v201 = v241;
          v199 = v312;
          v200 = v316;
          v197 = v304;
          v198 = v308;
          v195 = v296;
          v196 = v300;
          v194 = v292;
          v192 = v288;
          v202 = v275;
          v217 = v280;
          v219 = v284;
        }
        else
        {
          if (v238 >= -1)
            v239 = v238 + 1;
          else
            v239 = v238 + 2;
          v236 = (char *)v234;
          v234 -= 20 * (v239 >> 1);
          v237 = (char *)__pa;
        }
        goto LABEL_538;
      }
      if (v220 == (char *)v188)
      {
        *(_BYTE *)v188 = v339;
        *(_BYTE *)(v188 + 1) = v191;
        *(_BYTE *)(v188 + 2) = v320;
        *(_BYTE *)(v188 + 3) = v192;
        *(_BYTE *)(v188 + 4) = v193;
        *(_BYTE *)(v188 + 5) = v194;
        *(_BYTE *)(v188 + 6) = v195;
        *(_BYTE *)(v188 + 7) = v196;
        *(_BYTE *)(v188 + 8) = v197;
        *(_BYTE *)(v188 + 9) = v198;
        *(_BYTE *)(v188 + 10) = v199;
        *(_BYTE *)(v188 + 11) = v200;
        *(_BYTE *)(v188 + 12) = v201;
        *(_BYTE *)(v188 + 13) = v202;
        *(_BYTE *)(v188 + 14) = v203;
        *(_BYTE *)(v188 + 15) = v204;
        v189 = (_DWORD *)(v188 + 20);
        *(_DWORD *)(v188 + 16) = v205;
      }
      else
      {
        v221 = BYTE3(v339);
        v222 = v188 - 20;
        v189 = (_DWORD *)v188;
        if (v188 >= 0x14)
        {
          do
          {
            v223 = *(_OWORD *)v222;
            v189[4] = *(_DWORD *)(v222 + 16);
            *(_OWORD *)v189 = v223;
            v189 += 5;
            v222 += 20;
          }
          while (v222 < v188);
        }
        if ((char *)v188 != v220 + 20)
        {
          v224 = (_DWORD *)(v188 - 4);
          v225 = 4 * ((uint64_t)(v188 - (_QWORD)(v220 + 20)) >> 2);
          do
          {
            *((_OWORD *)v224 - 1) = *(_OWORD *)&v220[v225 - 20];
            *v224 = *(_DWORD *)&v220[v225 - 4];
            v224 -= 5;
            v225 -= 20;
          }
          while (v225);
        }
        *v220 = v190;
        v220[1] = v191;
        v220[2] = v320;
        v220[3] = v221;
        v220[4] = v193;
        v220[5] = v194;
        v220[6] = v195;
        v220[7] = v196;
        v220[8] = v197;
        v220[9] = v198;
        v220[10] = v199;
        v220[11] = v200;
        v220[12] = v201;
        v220[13] = v202;
        v220[14] = v203;
        v220[15] = v204;
        *(_DWORD *)&v171[20 * v219 + 16] = v205;
      }
LABEL_440:
      v364 += 16;
      v188 = (unint64_t)v189;
      if (v364 == v361)
        goto LABEL_547;
    }
  }
  v189 = v171;
LABEL_547:
  v251 = v171;
  v252 = v362;
  if (v363 == v362)
  {
    v258 = 4;
    v254 = v328;
    v253 = v331;
    v256 = v337;
    v255 = v334;
    v257 = v365;
  }
  else
  {
    v254 = v328;
    v253 = v331;
    v256 = v337;
    v255 = v334;
    v257 = v365;
    if (!v363)
      goto LABEL_552;
    v258 = 5;
    v252 = v363;
  }
  (*(void (**)(void))(*v252 + 8 * v258))();
LABEL_552:
  if (v366 == v365)
  {
    v259 = 4;
  }
  else
  {
    if (!v366)
      goto LABEL_557;
    v259 = 5;
    v257 = v366;
  }
  (*(void (**)(_QWORD *))(*v257 + 8 * v259))(v257);
LABEL_557:
  v260 = v360;
  if (v360 == v359)
  {
    v261 = 4;
    v260 = v359;
  }
  else
  {
    if (!v360)
      goto LABEL_562;
    v261 = 5;
  }
  (*(void (**)(void))(*v260 + 8 * v261))();
LABEL_562:
  v262 = v357;
  if (v357 == v356)
  {
    v263 = 4;
    v262 = v356;
  }
  else
  {
    if (!v357)
      goto LABEL_567;
    v263 = 5;
  }
  (*(void (**)(void))(*v262 + 8 * v263))();
LABEL_567:
  if (v329 == v328)
  {
    v264 = 4;
  }
  else
  {
    if (!v329)
      goto LABEL_572;
    v264 = 5;
    v254 = v329;
  }
  (*(void (**)(_QWORD *))(*v254 + 8 * v264))(v254);
LABEL_572:
  if (v332 == v331)
  {
    v265 = 4;
  }
  else
  {
    if (!v332)
      goto LABEL_577;
    v265 = 5;
    v253 = v332;
  }
  (*(void (**)(_QWORD *))(*v253 + 8 * v265))(v253);
LABEL_577:
  if (v338 == v337)
  {
    v266 = 4;
  }
  else
  {
    if (!v338)
      goto LABEL_582;
    v266 = 5;
    v256 = v338;
  }
  (*(void (**)(_QWORD *))(*v256 + 8 * v266))(v256);
LABEL_582:
  if (v335 == v334)
  {
    v267 = 4;
  }
  else
  {
    if (!v335)
      goto LABEL_587;
    v267 = 5;
    v255 = v335;
  }
  (*(void (**)(_QWORD *))(*v255 + 8 * v267))(v255);
LABEL_587:
  if (*v268)
  {
    operator delete(*v268);
    *v268 = 0;
    v268[1] = 0;
    v268[2] = 0;
  }
  a6[4] = v251;
  a6[5] = v189;
  a6[6] = j;
}

void sub_2236D8770(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_2236D8E80(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  uint64_t **v32;
  unsigned __int8 *v33;
  uint64_t **v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  BOOL v46;
  unsigned __int8 **v47;
  unsigned __int8 **v48;
  uint64_t *v49;
  unsigned __int8 *v50;
  uint64_t **v51;
  unsigned int v52;
  unsigned int v53;
  unsigned __int8 **v54;
  unsigned __int8 **i;
  unsigned __int8 *j;
  unsigned __int8 *v57;
  unsigned __int8 **v58;
  unsigned __int8 *v59;
  uint64_t *v60;
  uint64_t **v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  char **v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int8 ***)a1;
  v7 = *(unsigned __int8 ***)(a1 + 8);
  if (*(unsigned __int8 ***)a1 == v7)
  {
LABEL_4:
    v6 = v7;
  }
  else
  {
    while (!*(_DWORD *)sub_2236E23A4((uint64_t)a2, *v6))
    {
      if (++v6 == v7)
        goto LABEL_4;
    }
    if (v6 != v7)
    {
      for (i = v6 + 1; i != v7; ++i)
      {
        if (!*(_DWORD *)sub_2236E23A4((uint64_t)a2, *i))
          *v6++ = *i;
      }
    }
  }
  if (v6 != *(unsigned __int8 ***)(a1 + 8))
    *(_QWORD *)(a1 + 8) = v6;
  v8 = *(unsigned __int8 **)(a1 + 72);
  v9 = *(unsigned __int8 **)(a1 + 80);
  if (v8 == v9)
  {
LABEL_10:
    v8 = v9;
  }
  else
  {
    while (!*(_DWORD *)sub_2236E23A4((uint64_t)a2, v8))
    {
      v8 += 16;
      if (v8 == v9)
        goto LABEL_10;
    }
    if (v8 != v9)
    {
      for (j = v8 + 16; j != v9; j += 16)
      {
        if (!*(_DWORD *)sub_2236E23A4((uint64_t)a2, j))
        {
          *(_OWORD *)v8 = *(_OWORD *)j;
          v8 += 16;
        }
      }
    }
  }
  if (v8 != *(unsigned __int8 **)(a1 + 80))
    *(_QWORD *)(a1 + 80) = v8;
  v10 = *(unsigned __int8 **)(a1 + 48);
  v11 = *(unsigned __int8 **)(a1 + 56);
  if (v10 == v11)
  {
LABEL_16:
    v12 = v11;
  }
  else
  {
    while (*(_DWORD *)sub_2236E2514((uint64_t)(a2 + 4), v10) != 1)
    {
      v10 += 16;
      if (v10 == v11)
        goto LABEL_16;
    }
    v12 = v11;
    if (v10 != v11)
    {
      v57 = v10 + 16;
      v12 = v10;
      while (v57 != v11)
      {
        if (*(_DWORD *)sub_2236E2514((uint64_t)(a2 + 4), v57) != 1)
        {
          *(_OWORD *)v12 = *(_OWORD *)v57;
          v12 += 16;
        }
        v57 += 16;
      }
    }
  }
  if (v12 != *(unsigned __int8 **)(a1 + 56))
    *(_QWORD *)(a1 + 56) = v12;
  v13 = *a2;
  v14 = a2[1];
  if (*a2 != v14)
  {
    while (*((_DWORD *)v13 + 4) != 2)
    {
      v13 += 20;
      if (v13 == v14)
        goto LABEL_36;
    }
  }
  if (v13 == v14)
  {
LABEL_36:
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v15 = 0;
    v16 = v13;
LABEL_25:
    v17 = v15++;
    while (1)
    {
      v16 += 20;
      if (v16 == v14)
        break;
      if (*((_DWORD *)v16 + 4) == 2)
      {
        if (v16 != v14)
          goto LABEL_25;
        break;
      }
    }
    v64 = 0;
    v65 = 0;
    v66 = 0;
    if (v17 >= 0xFFFFFFFFFFFFFFFLL)
      sub_22316E078();
    v64 = (uint64_t *)operator new(16 * v15);
    v65 = v64;
    v66 = &v64[2 * v15];
    v67 = (char **)&v64;
LABEL_31:
    v68 = *(_OWORD *)v13;
    sub_2232E9564(&v67, &v68);
    while (1)
    {
      v13 += 20;
      if (v13 == v14)
        break;
      if (*((_DWORD *)v13 + 4) == 2)
      {
        if (v13 != v14)
          goto LABEL_31;
        break;
      }
    }
    v19 = (char *)v64;
    v18 = (char *)v65;
    v12 = *(unsigned __int8 **)(a1 + 56);
  }
  sub_223198B3C(a1 + 48, (uint64_t)v12, v19, v18, (v18 - v19) >> 4);
  v65 = 0;
  v66 = 0;
  v64 = (uint64_t *)&v65;
  sub_223475C18(&v64, *(unsigned __int8 **)(a3 + 24), (unsigned __int8 *)(a3 + 32));
  v20 = *a2;
  v21 = a2[1];
  if (*a2 != v21)
  {
LABEL_41:
    while (1)
    {
      v22 = v65;
      if (*((_DWORD *)v20 + 4))
        break;
      if (!v65)
        goto LABEL_40;
      v32 = &v65;
      do
      {
        v33 = (unsigned __int8 *)v22;
        v34 = v32;
        v35 = *((unsigned __int8 *)v22 + 25);
        v36 = *v20;
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[26];
        v36 = v20[1];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[27];
        v36 = v20[2];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[28];
        v36 = v20[3];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[29];
        v36 = v20[4];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[30];
        v36 = v20[5];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[31];
        v36 = v20[6];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[32];
        v36 = v20[7];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[33];
        v36 = v20[8];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[34];
        v36 = v20[9];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[35];
        v36 = v20[10];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[36];
        v36 = v20[11];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[37];
        v36 = v20[12];
        if (v35 != v36)
          goto LABEL_102;
        v35 = v33[38];
        v36 = v20[13];
        if (v35 == v36 && (v35 = v33[39], v36 = v20[14], v35 == v36) && (v35 = v33[40], v36 = v20[15], v35 == v36))
        {
          v37 = 0;
          v38 = v33 + 8;
          v39 = v33;
          v32 = (uint64_t **)v33;
        }
        else
        {
LABEL_102:
          v37 = v35 < v36;
          v38 = v33 + 8;
          if (v35 >= v36)
            v39 = v33;
          else
            v39 = v33 + 8;
          if (!v37)
            v32 = (uint64_t **)v33;
        }
        v22 = *(uint64_t **)v39;
      }
      while (v22);
      if (v32 == &v65)
        goto LABEL_40;
      v40 = v33 + 25;
      v41 = v37 ? (unsigned __int8 *)v34 + 25 : v40;
      if ((char)sub_22319835C(v20, v41) < 0)
        goto LABEL_40;
      v42 = (unsigned __int8 *)(v34 + 1);
      if (!v37)
        v42 = v38;
      v43 = *(uint64_t **)v42;
      v44 = v32;
      if (*(_QWORD *)v42)
      {
        do
        {
          v45 = v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v45 = v44[2];
          v46 = *v45 == (_QWORD)v44;
          v44 = (uint64_t **)v45;
        }
        while (!v46);
      }
      if (v64 == (uint64_t *)v32)
        v64 = v45;
      v66 = (uint64_t *)((char *)v66 - 1);
      sub_2231AFE60(v65, (uint64_t *)v32);
      operator delete(v32);
      v20 += 20;
      if (v20 == v21)
        goto LABEL_123;
    }
    v23 = &v65;
    v24 = &v65;
    if (!v65)
      goto LABEL_81;
    v25 = *v20;
    while (1)
    {
      v24 = (uint64_t **)v22;
      v26 = *((unsigned __int8 *)v22 + 25);
      v27 = v25 >= v26;
      if (v25 != v26)
        break;
      v28 = v20[1];
      v26 = *((unsigned __int8 *)v24 + 26);
      v27 = v28 >= v26;
      if (v28 == v26
        && (v28 = v20[2], v26 = *((unsigned __int8 *)v24 + 27), v27 = v28 >= v26, v28 == v26)
        && (v28 = v20[3], v26 = *((unsigned __int8 *)v24 + 28), v27 = v28 >= v26, v28 == v26))
      {
        v29 = v20[4];
        v30 = *((unsigned __int8 *)v24 + 29);
        if (v29 == v30)
        {
          v29 = v20[5];
          v30 = *((unsigned __int8 *)v24 + 30);
          if (v29 == v30)
          {
            v29 = v20[6];
            v30 = *((unsigned __int8 *)v24 + 31);
            if (v29 == v30)
            {
              v29 = v20[7];
              v30 = *((unsigned __int8 *)v24 + 32);
              if (v29 == v30)
              {
                v29 = v20[8];
                v30 = *((unsigned __int8 *)v24 + 33);
                if (v29 == v30)
                {
                  v29 = v20[9];
                  v30 = *((unsigned __int8 *)v24 + 34);
                  if (v29 == v30)
                  {
                    v29 = v20[10];
                    v30 = *((unsigned __int8 *)v24 + 35);
                    if (v29 == v30)
                    {
                      v29 = v20[11];
                      v30 = *((unsigned __int8 *)v24 + 36);
                      if (v29 == v30)
                      {
                        v29 = v20[12];
                        v30 = *((unsigned __int8 *)v24 + 37);
                        if (v29 == v30)
                        {
                          v29 = v20[13];
                          v30 = *((unsigned __int8 *)v24 + 38);
                          if (v29 == v30)
                          {
                            v29 = v20[14];
                            v30 = *((unsigned __int8 *)v24 + 39);
                            if (v29 == v30)
                            {
                              v29 = v20[15];
                              v30 = *((unsigned __int8 *)v24 + 40);
                              if (v29 == v30)
                                goto LABEL_62;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v29 >= v30)
        {
LABEL_62:
          v26 = *((unsigned __int8 *)v24 + 29);
          v28 = v20[4];
          if (v26 == v28)
          {
            v26 = *((unsigned __int8 *)v24 + 30);
            v28 = v20[5];
            if (v26 == v28)
            {
              v26 = *((unsigned __int8 *)v24 + 31);
              v28 = v20[6];
              if (v26 == v28)
              {
                v26 = *((unsigned __int8 *)v24 + 32);
                v28 = v20[7];
                if (v26 == v28)
                {
                  v26 = *((unsigned __int8 *)v24 + 33);
                  v28 = v20[8];
                  if (v26 == v28)
                  {
                    v26 = *((unsigned __int8 *)v24 + 34);
                    v28 = v20[9];
                    if (v26 == v28)
                    {
                      v26 = *((unsigned __int8 *)v24 + 35);
                      v28 = v20[10];
                      if (v26 == v28)
                      {
                        v26 = *((unsigned __int8 *)v24 + 36);
                        v28 = v20[11];
                        if (v26 == v28)
                        {
                          v26 = *((unsigned __int8 *)v24 + 37);
                          v28 = v20[12];
                          if (v26 == v28)
                          {
                            v26 = *((unsigned __int8 *)v24 + 38);
                            v28 = v20[13];
                            if (v26 == v28)
                            {
                              v26 = *((unsigned __int8 *)v24 + 39);
                              v28 = v20[14];
                              if (v26 == v28)
                              {
                                v26 = *((unsigned __int8 *)v24 + 40);
                                v28 = v20[15];
                                if (v26 == v28)
                                  goto LABEL_40;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_78;
        }
LABEL_44:
        v22 = *v24;
        v23 = v24;
        if (!*v24)
          goto LABEL_81;
      }
      else
      {
LABEL_76:
        if (!v27)
          goto LABEL_44;
LABEL_78:
        if (v26 >= v28)
          goto LABEL_40;
        v22 = v24[1];
        if (!v22)
        {
          v23 = v24 + 1;
LABEL_81:
          v31 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v31 + 25) = *(_OWORD *)v20;
          *(_QWORD *)v31 = 0;
          *((_QWORD *)v31 + 1) = 0;
          *((_QWORD *)v31 + 2) = v24;
          *v23 = (uint64_t *)v31;
          if (*v64)
          {
            v64 = (uint64_t *)*v64;
            v31 = (char *)*v23;
          }
          sub_2231A9A8C(v65, (uint64_t *)v31);
          v66 = (uint64_t *)((char *)v66 + 1);
LABEL_40:
          v20 += 20;
          if (v20 == v21)
            goto LABEL_123;
          goto LABEL_41;
        }
      }
    }
    v28 = *v20;
    goto LABEL_76;
  }
LABEL_123:
  v48 = *(unsigned __int8 ***)(a1 + 24);
  v47 = *(unsigned __int8 ***)(a1 + 32);
  if (v47 == v48)
  {
LABEL_152:
    v54 = v47;
    goto LABEL_153;
  }
  v49 = v65;
  if (v65)
  {
LABEL_125:
    v50 = *v48;
    v51 = &v65;
    do
    {
      v52 = *((unsigned __int8 *)v49 + 25);
      v53 = **v48;
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 26);
      v53 = v50[1];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 27);
      v53 = v50[2];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 28);
      v53 = v50[3];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 29);
      v53 = v50[4];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 30);
      v53 = v50[5];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 31);
      v53 = v50[6];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 32);
      v53 = v50[7];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 33);
      v53 = v50[8];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 34);
      v53 = v50[9];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 35);
      v53 = v50[10];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 36);
      v53 = v50[11];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 37);
      v53 = v50[12];
      if (v52 != v53)
        goto LABEL_143;
      v52 = *((unsigned __int8 *)v49 + 38);
      v53 = v50[13];
      if (v52 == v53
        && (v52 = *((unsigned __int8 *)v49 + 39), v53 = v50[14], v52 == v53)
        && (v52 = *((unsigned __int8 *)v49 + 40), v53 = v50[15], v52 == v53))
      {
        v51 = (uint64_t **)v49;
      }
      else
      {
LABEL_143:
        if (v52 < v53)
          ++v49;
        else
          v51 = (uint64_t **)v49;
      }
      v49 = (uint64_t *)*v49;
    }
    while (v49);
    if (v51 == &v65 || (char)sub_22319835C(v50, (unsigned __int8 *)v51 + 25) < 0)
    {
      while (1)
      {
        if (++v48 == v47)
          goto LABEL_152;
        v49 = v65;
        if (v65)
          goto LABEL_125;
      }
    }
    goto LABEL_177;
  }
  v48 = (unsigned __int8 **)((char *)v48 + (((char *)v47 - (char *)v48) & 0xFFFFFFFFFFFFFFF8));
  v54 = *(unsigned __int8 ***)(a1 + 32);
  if (v48 != v47)
  {
LABEL_177:
    v58 = v48 + 1;
    v54 = v48;
    while (1)
    {
      if (v58 == v47)
        goto LABEL_153;
      v59 = *v58;
      v60 = v65;
      if (!v65)
        goto LABEL_178;
      v61 = &v65;
      do
      {
        v62 = *((unsigned __int8 *)v60 + 25);
        v63 = *v59;
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 26);
        v63 = v59[1];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 27);
        v63 = v59[2];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 28);
        v63 = v59[3];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 29);
        v63 = v59[4];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 30);
        v63 = v59[5];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 31);
        v63 = v59[6];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 32);
        v63 = v59[7];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 33);
        v63 = v59[8];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 34);
        v63 = v59[9];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 35);
        v63 = v59[10];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 36);
        v63 = v59[11];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 37);
        v63 = v59[12];
        if (v62 != v63)
          goto LABEL_200;
        v62 = *((unsigned __int8 *)v60 + 38);
        v63 = v59[13];
        if (v62 == v63
          && (v62 = *((unsigned __int8 *)v60 + 39), v63 = v59[14], v62 == v63)
          && (v62 = *((unsigned __int8 *)v60 + 40), v63 = v59[15], v62 == v63))
        {
          v61 = (uint64_t **)v60;
        }
        else
        {
LABEL_200:
          if (v62 < v63)
            ++v60;
          else
            v61 = (uint64_t **)v60;
        }
        v60 = (uint64_t *)*v60;
      }
      while (v60);
      if (v61 == &v65)
        goto LABEL_178;
      if ((char)sub_22319835C(v59, (unsigned __int8 *)v61 + 25) < 0)
        break;
LABEL_179:
      ++v58;
    }
    v59 = *v58;
LABEL_178:
    *v54++ = v59;
    goto LABEL_179;
  }
LABEL_153:
  if (v54 != *(unsigned __int8 ***)(a1 + 32))
    *(_QWORD *)(a1 + 32) = v54;
  sub_223198030((uint64_t)&v64, v65);
  if (v19)
    operator delete(v19);
}

void sub_2236D99B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2236D9A00(_QWORD *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, _QWORD **a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  unint64_t v10;
  float32x4_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t *v35;
  float *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  __int128 v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  void *v63;
  uint64_t *v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v79;
  _DWORD *v80;
  _DWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  const void *v88;
  size_t v89;
  unsigned __int8 v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  const char *v95;
  size_t v96;
  unsigned __int8 v97;
  char *v98;
  char *v99;
  __int128 v100;
  unsigned __int8 v101;
  const char *v102;
  size_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  size_t v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  size_t v114;
  void *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  char v121;
  _QWORD *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  char *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v168;
  int v169;
  const char *v170;
  int v171;
  const char *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unsigned __int8 *v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  unsigned __int8 *v193;
  unsigned int v194;
  unsigned int v195;
  unsigned __int8 *v196;
  unint64_t v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int8 *v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  void *v212;
  void **v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  void *v218;
  _QWORD *v219;
  void *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  void *v233;
  void *v234;
  void **v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  void *v239;
  uint64_t *v240;
  unsigned __int8 *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  unint64_t v249;
  int8x8_t v250;
  uint8x8_t v251;
  unint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v257;
  uint64_t v259;
  unsigned __int8 v260;
  unsigned __int8 v261;
  const void *v262;
  size_t v263;
  unsigned __int8 v264;
  int v265;
  unint64_t v266;
  unint64_t v267;
  const char *v268;
  size_t v269;
  unsigned __int8 v270;
  unsigned __int8 v271;
  const char *v272;
  size_t v273;
  _BYTE *v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  NSObject *v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  size_t v282;
  std::__shared_weak_count_vtbl *v283;
  std::__shared_weak_count *v284;
  size_t v285;
  void *v286;
  void *v287;
  void *v288;
  _OWORD *v289;
  char *v290;
  _OWORD *v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  char v295;
  _QWORD *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  char *v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  const char *v317;
  uint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  char *v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  char *v330;
  char *v331;
  uint64_t v332;
  void *v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  _QWORD *v348;
  unint64_t v349;
  uint64_t v350;
  int v351;
  const char *v352;
  int v353;
  const char *v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  char *v371;
  char *v372;
  unint64_t v373;
  unint64_t v374;
  unsigned __int8 *v375;
  unsigned int v376;
  unsigned int v377;
  unsigned __int8 *v378;
  unint64_t v379;
  char *v380;
  unsigned int v381;
  unsigned int v382;
  BOOL v383;
  unsigned int v384;
  unsigned int v385;
  unint64_t v386;
  char *v387;
  char *v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  char *v396;
  char *v397;
  unint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unsigned int v401;
  unsigned int v402;
  unsigned __int8 *v403;
  unint64_t v404;
  char *v405;
  void *v406;
  void **v407;
  uint64_t v408;
  uint64_t v409;
  void *v410;
  void *v411;
  uint64_t v412;
  uint64_t v413;
  int64_t v414;
  unint64_t v415;
  _QWORD *v416;
  __int128 *v417;
  __int128 *v418;
  unint64_t v419;
  int8x8_t v420;
  uint8x8_t v421;
  unint64_t v422;
  _QWORD *v423;
  _QWORD *v424;
  uint64_t v425;
  unint64_t v427;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  __int128 *v433;
  __int128 *v434;
  _QWORD *v435;
  uint64_t v436;
  void *v437;
  void *v438;
  __int128 v440;
  uint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  unint64_t v444;
  unint64_t *v445;
  _QWORD *v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  char *v454;
  _BYTE *v455;
  unint64_t v456;
  unint64_t v457;
  char *v458;
  char *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  char *v463;
  uint64_t v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  __int128 *v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  __int128 v473;
  uint64_t v474;
  uint64_t v475;
  std::__shared_weak_count *v476;
  unint64_t v477;
  unint64_t v478;
  char *v479;
  unint64_t v480;
  char *v481;
  int64_t v482;
  uint64_t v483;
  unint64_t v484;
  char *v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  __int128 v490;
  unint64_t v491;
  __int128 *v492;
  __int128 v493;
  void *v494;
  char *v495;
  unint64_t v496;
  unint64_t v497;
  unint64_t v498;
  uint64_t v499;
  int v500;
  uint64_t v501;
  __int128 v502;
  int64_t v503;
  unint64_t v504;
  char *v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  uint64_t v509;
  uint64_t v510;
  char *v511;
  char *v512;
  int64_t v513;
  unint64_t v514;
  char *v515;
  uint64_t v516;
  char *v517;
  char *v518;
  void *v519;
  void *v520;
  __int128 v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  __int128 v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  unint64_t v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  uint64_t **v536;
  char *v537;
  uint64_t *v538;
  char *v539;
  uint64_t *v540;
  void **v541;
  const char *v542;
  uint64_t v543;
  const char *v545;
  int v546;
  unsigned __int8 *v547;
  uint64_t v548;
  __int128 v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v554;
  void *v555[4];
  int v556;
  _BYTE object[56];
  _BYTE v558[80];
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  float32x4_t v563;
  char v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  uint64_t v568;
  __int128 v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  char v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  char v578;
  __int128 v579;
  uint64_t v580;
  char v581;
  __int128 v582;
  uint64_t v583;
  char v584;
  __int128 __p;
  uint64_t v586;
  char v587;
  __int16 v588;
  __int128 v589;
  unint64_t v590;
  char v591;
  _OWORD *v592;
  char __s[8];
  _QWORD v594[3];
  _QWORD *v595;
  __int128 v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  __int128 v599;
  char *v600;
  _QWORD v601[2];
  __int128 v602;
  unint64_t rep;
  int v604;
  const char *v605;
  int v606;
  const char *v607;
  __int128 v608;
  __int128 v609;
  std::__shared_weak_count *v610;
  char *v611;
  std::__shared_weak_count *v612;
  uint64_t v613;

  v613 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a8 + 8) = 0u;
  v541 = (void **)(a8 + 8);
  *(_QWORD *)(a8 + 104) = 0;
  *(_OWORD *)(a8 + 88) = 0u;
  *(_OWORD *)(a8 + 72) = 0u;
  *(_OWORD *)(a8 + 56) = 0u;
  *(_OWORD *)(a8 + 40) = 0u;
  *(_OWORD *)(a8 + 24) = 0u;
  *(_DWORD *)(a8 + 112) = 1065353216;
  *(_BYTE *)(a8 + 368) = 0;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 152) = 0u;
  *(_OWORD *)(a8 + 168) = 0u;
  *(_OWORD *)(a8 + 184) = 0u;
  *(_OWORD *)(a8 + 200) = 0u;
  *(_OWORD *)(a8 + 209) = 0u;
  *(_QWORD *)a8 = *a1;
  v10 = a2[1] - *a2;
  rep = 0;
  v602 = 0uLL;
  sub_22365835C((char **)&v602, v10);
  v13 = *a2;
  v12 = a2[1];
  v536 = a2;
  if (*a2 != v12)
  {
    v14 = &object[16];
    v15 = &object[28];
    do
    {
      sub_2236AA184(*v13, a4, (uint64_t)object, v11);
      v16 = *((_QWORD *)&v602 + 1);
      if (*((_QWORD *)&v602 + 1) >= rep)
      {
        v29 = sub_22365849C(&v602, (uint64_t)object);
      }
      else
      {
        **((_OWORD **)&v602 + 1) = *(_OWORD *)object;
        v17 = *(_QWORD *)v14;
        *(_DWORD *)(v16 + 24) = *((_DWORD *)v14 + 2);
        *(_QWORD *)(v16 + 16) = v17;
        v18 = *(_QWORD *)v15;
        *(_DWORD *)(v16 + 36) = *((_DWORD *)v15 + 2);
        *(_QWORD *)(v16 + 28) = v18;
        v19 = *(_OWORD *)&object[40];
        v20 = *(_OWORD *)v558;
        v21 = *(_OWORD *)&v558[16];
        v11 = *(float32x4_t *)&v558[32];
        *(_OWORD *)(v16 + 88) = *(_OWORD *)&v558[32];
        *(_OWORD *)(v16 + 72) = v21;
        *(_OWORD *)(v16 + 56) = v20;
        *(_OWORD *)(v16 + 40) = v19;
        *(_QWORD *)(v16 + 104) = *(_QWORD *)&v558[48];
        *(_BYTE *)(v16 + 112) = 0;
        *(_BYTE *)(v16 + 216) = 0;
        if (v564)
        {
          *(_BYTE *)(v16 + 112) = v558[56];
          v22 = *(_OWORD *)&v558[64];
          *(_OWORD *)(v16 + 136) = v559;
          *(_OWORD *)(v16 + 120) = v22;
          v23 = v560;
          v24 = v561;
          v25 = v562;
          v11 = v563;
          *(float32x4_t *)(v16 + 200) = v563;
          *(_OWORD *)(v16 + 184) = v25;
          *(_OWORD *)(v16 + 168) = v24;
          *(_OWORD *)(v16 + 152) = v23;
          *(_BYTE *)(v16 + 216) = 1;
        }
        v26 = v565;
        v27 = v566;
        v28 = v567;
        *(_QWORD *)(v16 + 272) = v568;
        *(_OWORD *)(v16 + 240) = v27;
        *(_OWORD *)(v16 + 256) = v28;
        *(_OWORD *)(v16 + 224) = v26;
        *(_QWORD *)(v16 + 288) = 0;
        *(_QWORD *)(v16 + 296) = 0;
        *(_QWORD *)(v16 + 280) = 0;
        *(_OWORD *)(v16 + 280) = v569;
        *(_QWORD *)(v16 + 296) = v570;
        v569 = 0uLL;
        v570 = 0;
        *(_BYTE *)(v16 + 304) = 0;
        *(_BYTE *)(v16 + 320) = 0;
        if (v573)
        {
          *(_QWORD *)(v16 + 304) = v571;
          *(_QWORD *)(v16 + 312) = v572;
          *(_BYTE *)(v16 + 320) = 1;
        }
        *(_BYTE *)(v16 + 324) = 0;
        *(_BYTE *)(v16 + 356) = 0;
        if (v578)
        {
          *(_QWORD *)(v16 + 324) = v574;
          *(_QWORD *)(v16 + 332) = v575;
          *(_QWORD *)(v16 + 340) = v576;
          *(_QWORD *)(v16 + 348) = v577;
          *(_BYTE *)(v16 + 356) = 1;
        }
        *(_BYTE *)(v16 + 360) = 0;
        *(_BYTE *)(v16 + 384) = 0;
        if (v581)
        {
          *(_QWORD *)(v16 + 360) = 0;
          *(_QWORD *)(v16 + 368) = 0;
          *(_QWORD *)(v16 + 376) = 0;
          *(_OWORD *)(v16 + 360) = v579;
          *(_QWORD *)(v16 + 376) = v580;
          v579 = 0uLL;
          v580 = 0;
          *(_BYTE *)(v16 + 384) = 1;
        }
        *(_BYTE *)(v16 + 392) = 0;
        *(_BYTE *)(v16 + 416) = 0;
        if (v584)
        {
          *(_QWORD *)(v16 + 392) = 0;
          *(_QWORD *)(v16 + 400) = 0;
          *(_QWORD *)(v16 + 408) = 0;
          *(_OWORD *)(v16 + 392) = v582;
          *(_QWORD *)(v16 + 408) = v583;
          v582 = 0uLL;
          v583 = 0;
          *(_BYTE *)(v16 + 416) = 1;
        }
        *(_BYTE *)(v16 + 424) = 0;
        *(_BYTE *)(v16 + 448) = 0;
        if (v587)
        {
          *(_QWORD *)(v16 + 424) = 0;
          *(_QWORD *)(v16 + 432) = 0;
          *(_QWORD *)(v16 + 440) = 0;
          *(_OWORD *)(v16 + 424) = __p;
          *(_QWORD *)(v16 + 440) = v586;
          __p = 0uLL;
          v586 = 0;
          *(_BYTE *)(v16 + 448) = 1;
        }
        *(_WORD *)(v16 + 456) = v588;
        v29 = v16 + 464;
      }
      *((_QWORD *)&v602 + 1) = v29;
      if (v587)
      {
        v30 = __p;
        if ((_QWORD)__p)
        {
          v31 = *((_QWORD *)&__p + 1);
          v32 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            v33 = v15;
            v34 = v14;
            v35 = v12;
            v36 = a4;
            v37 = *((_QWORD *)&__p + 1);
            do
            {
              v39 = *(void **)(v37 - 24);
              v37 -= 24;
              v38 = v39;
              if (v39)
              {
                *(_QWORD *)(v31 - 16) = v38;
                operator delete(v38);
              }
              v31 = v37;
            }
            while (v37 != v30);
            v32 = (void *)__p;
            a4 = v36;
            v12 = v35;
            v14 = v34;
            v15 = v33;
          }
          *((_QWORD *)&__p + 1) = v30;
          operator delete(v32);
        }
      }
      if (v584 && (_QWORD)v582)
      {
        *((_QWORD *)&v582 + 1) = v582;
        operator delete((void *)v582);
      }
      if (v581 && (_QWORD)v579)
      {
        *((_QWORD *)&v579 + 1) = v579;
        operator delete((void *)v579);
      }
      if ((_QWORD)v569)
      {
        *((_QWORD *)&v569 + 1) = v569;
        operator delete((void *)v569);
      }
      ++v13;
    }
    while (v13 != v12);
  }
  v40 = v602;
  v41 = rep;
  v42 = *v541;
  v43 = a8;
  if (*v541)
  {
    v549 = v602;
    v44 = *(_QWORD *)(a8 + 16);
    v45 = *v541;
    if ((void *)v44 != v42)
    {
      do
      {
        v44 -= 464;
        sub_22324A5A0(v44);
      }
      while ((void *)v44 != v42);
      v45 = *v541;
    }
    *(_QWORD *)(a8 + 16) = v42;
    operator delete(v45);
    *v541 = 0;
    v541[1] = 0;
    v541[2] = 0;
    v40 = v549;
  }
  *(_OWORD *)(a8 + 8) = v40;
  *(_QWORD *)(a8 + 24) = v41;
  if ((uint64_t **)(a8 + 32) != v536 + 6)
    sub_2231984D0((_QWORD *)(a8 + 32), (char *)v536[6], (char *)v536[7], ((char *)v536[7] - (char *)v536[6]) >> 4);
  if ((uint64_t **)(a8 + 56) != v536 + 9)
    sub_2231984D0((_QWORD *)(a8 + 56), (char *)v536[9], (char *)v536[10], ((char *)v536[10] - (char *)v536[9]) >> 4);
  v46 = v536[13];
  *(_QWORD *)object = v536[12];
  *(_QWORD *)&object[8] = &off_24EC57880;
  *(_QWORD *)&object[32] = &object[8];
  *(_QWORD *)&object[40] = v46;
  *(_QWORD *)&v558[16] = &object[48];
  *(_QWORD *)&object[48] = &off_24EC57880;
  v47 = v594;
  v595 = v594;
  *(_QWORD *)__s = *(_QWORD *)object;
  v594[0] = &off_24EC57880;
  v48 = (_QWORD *)&v589 + 1;
  v592 = (__int128 *)((char *)&v589 + 8);
  *(_QWORD *)&v589 = v46;
  *((_QWORD *)&v589 + 1) = &off_24EC57880;
  memset(v555, 0, sizeof(v555));
  v556 = 1065353216;
  v49 = (char *)&v602 + 8;
  v605 = (char *)&v602 + 8;
  *(_QWORD *)&v602 = *(_QWORD *)object;
  *((_QWORD *)&v602 + 1) = &off_24EC57880;
  v50 = (_QWORD *)&v609 + 1;
  v612 = (std::__shared_weak_count *)((char *)&v609 + 8);
  *(_QWORD *)&v609 = v46;
  *((_QWORD *)&v609 + 1) = &off_24EC57880;
  if (*(uint64_t **)object == v46)
    goto LABEL_57;
  do
  {
    if (!v605)
      sub_223198474();
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v605 + 48))(&v596);
    sub_22342EE64((uint64_t)v555, (uint64_t)&v596, (uint64_t)&v596);
    v51 = v598;
    if (v598)
    {
      p_shared_owners = (unint64_t *)&v598->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    *(_QWORD *)&v602 = v602 + 8;
  }
  while ((_QWORD)v602 != (_QWORD)v609);
  if (v612 == (std::__shared_weak_count *)((char *)&v609 + 8))
  {
LABEL_57:
    v54 = 4;
  }
  else
  {
    if (!v612)
      goto LABEL_59;
    v54 = 5;
    v50 = &v612->__vftable;
  }
  (*(void (**)(_QWORD *))(*v50 + 8 * v54))(v50);
LABEL_59:
  if (v605 == (char *)&v602 + 8)
  {
    v55 = 4;
  }
  else
  {
    if (!v605)
      goto LABEL_64;
    v55 = 5;
    v49 = (char *)v605;
  }
  (*(void (**)(char *))(*(_QWORD *)v49 + 8 * v55))(v49);
LABEL_64:
  if (v592 == (__int128 *)((char *)&v589 + 8))
  {
    v56 = 4;
  }
  else
  {
    if (!v592)
      goto LABEL_69;
    v56 = 5;
    v48 = v592;
  }
  (*(void (**)(_QWORD *))(*v48 + 8 * v56))(v48);
LABEL_69:
  if (v595 == v594)
  {
    v57 = 4;
  }
  else
  {
    if (!v595)
      goto LABEL_74;
    v57 = 5;
    v47 = v595;
  }
  (*(void (**)(_QWORD *))(*v47 + 8 * v57))(v47);
LABEL_74:
  v58 = *(_QWORD **)&v558[16];
  if (*(_BYTE **)&v558[16] == &object[48])
  {
    v59 = 4;
    v58 = &object[48];
  }
  else
  {
    if (!*(_QWORD *)&v558[16])
      goto LABEL_79;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_79:
  v60 = *(_QWORD **)&object[32];
  if (*(_BYTE **)&object[32] == &object[8])
  {
    v61 = 4;
    v60 = &object[8];
    goto LABEL_83;
  }
  if (*(_QWORD *)&object[32])
  {
    v61 = 5;
LABEL_83:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  sub_223421294(a8 + 80, (uint64_t *)v555);
  v62 = v555[2];
  if (v555[2])
  {
    do
    {
      v65 = v62;
      v62 = (_QWORD *)*v62;
      v66 = (std::__shared_weak_count *)v65[5];
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      operator delete(v65);
    }
    while (v62);
  }
  v63 = v555[0];
  v555[0] = 0;
  if (v63)
    operator delete(v63);
  if ((uint64_t **)(a8 + 136) != v536 + 18)
    sub_2231984D0((_QWORD *)(a8 + 136), (char *)v536[18], (char *)v536[19], ((char *)v536[19] - (char *)v536[18]) >> 4);
  v589 = 0uLL;
  v590 = 0;
  sub_22341F3A8((uint64_t)&v589, v536[4] - v536[3]);
  v64 = v536[3];
  v538 = v536[4];
  if (v64 != v538)
  {
    while (1)
    {
      v540 = v64;
      v69 = (unsigned __int8 *)*v64;
      sub_223735620(a3, *v64, (uint64_t *)&v596);
      v70 = v596;
      v600 = 0;
      v599 = 0uLL;
      v547 = v69;
      v550 = *((_QWORD *)&v596 + 1);
      v71 = *((_QWORD *)&v596 + 1) - v596;
      if (*((_QWORD *)&v596 + 1) != (_QWORD)v596)
      {
        if (v71 < 0)
          sub_22316E078();
        v72 = v71 >> 5;
        *(_QWORD *)&v599 = operator new(20 * (v71 >> 5));
        *((_QWORD *)&v599 + 1) = v599;
        v600 = (char *)(v599 + 20 * v72);
        do
        {
          v74 = *(_QWORD *)(v70 + 24);
          v75 = *(_QWORD **)(v74 + 208);
          v76 = *(_QWORD **)(v74 + 216);
          v77 = v75;
          if (v75 != v76)
          {
            v77 = *(_QWORD **)(v74 + 208);
            while (*v77 != *(_QWORD *)v70 || v77[1] != *(_QWORD *)(v70 + 8))
            {
              v77 += 53;
              if (v77 == v76)
                goto LABEL_123;
            }
          }
          if (v77 != v76)
          {
            *(_OWORD *)object = *(_OWORD *)v74;
            v79 = (29 * (((_DWORD)v77 - (_DWORD)v75) >> 3));
            v80 = (_DWORD *)*((_QWORD *)&v599 + 1);
            if (*((_QWORD *)&v599 + 1) < (unint64_t)v600)
            {
              **((_OWORD **)&v599 + 1) = *(_OWORD *)v74;
              v80[4] = v79;
              v73 = v80 + 5;
            }
            else
            {
              v81 = (_DWORD *)v599;
              v82 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v599 + 1) - v599) >> 2);
              v83 = v82 + 1;
              if (v82 + 1 > 0xCCCCCCCCCCCCCCCLL)
                sub_22316E078();
              if (0x999999999999999ALL * ((uint64_t)&v600[-v599] >> 2) > v83)
                v83 = 0x999999999999999ALL * ((uint64_t)&v600[-v599] >> 2);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v600[-v599] >> 2) >= 0x666666666666666)
                v84 = 0xCCCCCCCCCCCCCCCLL;
              else
                v84 = v83;
              if (v84)
              {
                if (v84 > 0xCCCCCCCCCCCCCCCLL)
                  sub_223174E94();
                v85 = (char *)operator new(20 * v84);
              }
              else
              {
                v85 = 0;
              }
              v98 = &v85[20 * v82];
              *(_OWORD *)v98 = *(_OWORD *)object;
              *((_DWORD *)v98 + 4) = v79;
              v99 = v98;
              if (v80 != v81)
              {
                do
                {
                  v100 = *(_OWORD *)(v80 - 5);
                  *((_DWORD *)v99 - 1) = *(v80 - 1);
                  *(_OWORD *)(v99 - 20) = v100;
                  v99 -= 20;
                  v80 -= 5;
                }
                while (v80 != v81);
                v80 = (_DWORD *)v599;
              }
              v73 = v98 + 20;
              *(_QWORD *)&v599 = v99;
              *((_QWORD *)&v599 + 1) = v98 + 20;
              v600 = &v85[20 * v84];
              if (v80)
                operator delete(v80);
              v69 = v547;
            }
            *((_QWORD *)&v599 + 1) = v73;
            goto LABEL_103;
          }
LABEL_123:
          v86 = atomic_load((unsigned __int8 *)&qword_2557892F0);
          if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
          {
            __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
            __cxa_guard_release(&qword_2557892F0);
          }
          v87 = atomic_load((unsigned __int8 *)&qword_2540CC080);
          if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC080))
          {
            sub_22455F53C(&v602);
            sub_223174DE4(object, "cv3d.recon.kfplanes");
            sub_2232300E0((uint64_t **)&v602, (uint64_t)object, &qword_2540CC078);
            if ((object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_guard_release(&qword_2540CC080);
          }
          if (*(char *)(qword_2540CC078 + 39) < 0)
          {
            v88 = *(const void **)(qword_2540CC078 + 16);
            v89 = *(_QWORD *)(qword_2540CC078 + 24);
          }
          else
          {
            v88 = (const void *)(qword_2540CC078 + 16);
            v89 = *(unsigned __int8 *)(qword_2540CC078 + 39);
          }
          sub_223195728((uint64_t)&stru_255789280, v88, v89, "CGPTKP: KFP %.13s does not exist", 0x20uLL);
          v90 = atomic_load((unsigned __int8 *)&qword_2540CC070);
          if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC070))
          {
            sub_22455F53C(&v602);
            sub_223174DE4(object, "cv3dapi.recon3d.kfplanes");
            sub_2232300E0((uint64_t **)&v602, (uint64_t)object, &qword_2540CC068);
            if ((object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_guard_release(&qword_2540CC070);
          }
          v554 = qword_2540CC068;
          if (**(int **)(qword_2540CC068 + 56) > 5)
            goto LABEL_103;
          v91 = *(unsigned __int8 *)(qword_2540CC068 + 72);
          v92 = sub_22322F254(qword_2540CC068, "OSLogSurrogateAppender", 1, 0);
          v93 = v92;
          if (!v91 && !v92)
            goto LABEL_103;
          *(_QWORD *)&v602 = &v554;
          *((std::chrono::steady_clock::time_point *)&v602 + 1) = std::chrono::steady_clock::now();
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v604 = 5;
          v605 = "unknown file";
          v606 = 214;
          v607 = "unknown function";
          v608 = 0uLL;
          sub_2245664AC((unsigned __int8 *)v70, __s);
          v94 = *(_QWORD *)v602;
          v95 = (const char *)(*(_QWORD *)v602 + 16);
          v545 = v95;
          if (*(char *)(*(_QWORD *)v602 + 39) < 0)
          {
            v95 = *(const char **)(v94 + 16);
            v96 = *(_QWORD *)(v94 + 24);
            v101 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v101 & 1) != 0)
              goto LABEL_143;
          }
          else
          {
            v96 = *(unsigned __int8 *)(*(_QWORD *)v602 + 39);
            v97 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v97 & 1) != 0)
              goto LABEL_143;
          }
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v609);
            sub_223199C58("com.apple.cv3d", (unint64_t)&v609, &xmmword_255788F40);
            if ((_BYTE)v611 && SHIBYTE(v610) < 0)
              operator delete((void *)v609);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
LABEL_143:
          if (byte_255788F57 >= 0)
            v102 = (const char *)&xmmword_255788F40;
          else
            v102 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v103 = byte_255788F57;
          else
            v103 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)object = os_log_create(v102, v95);
          if (v103 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v103 >= 0x17)
          {
            v105 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v103 | 7) != 0x17)
              v105 = v103 | 7;
            v106 = v105 + 1;
            v104 = operator new(v105 + 1);
            *(_QWORD *)&object[16] = v103;
            *(_QWORD *)&object[24] = v106 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v104;
LABEL_156:
            memmove(v104, v102, v103);
            goto LABEL_157;
          }
          object[31] = v103;
          v104 = &object[8];
          if (v103)
            goto LABEL_156;
LABEL_157:
          v104[v103] = 0;
          object[32] = 1;
          if (v96 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v43 = a8;
          if (v96 >= 0x17)
          {
            v109 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v96 | 7) != 0x17)
              v109 = v96 | 7;
            v110 = v109 + 1;
            v107 = operator new(v109 + 1);
            *(_QWORD *)&object[48] = v96;
            *(_QWORD *)v558 = v110 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v107;
          }
          else
          {
            v558[7] = v96;
            v107 = &object[40];
            if (!v96)
            {
              object[40] = 0;
              v558[8] = 1;
              v108 = *(NSObject **)object;
              if ((v558[7] & 0x80000000) == 0)
                goto LABEL_161;
              goto LABEL_167;
            }
          }
          memmove(v107, v95, v96);
          v107[v96] = 0;
          v558[8] = 1;
          v108 = *(NSObject **)object;
          if ((v558[7] & 0x80000000) == 0)
          {
LABEL_161:
            v69 = v547;
            if (!object[32])
              goto LABEL_170;
            goto LABEL_168;
          }
LABEL_167:
          operator delete(*(void **)&object[40]);
          v69 = v547;
          if (!object[32])
            goto LABEL_170;
LABEL_168:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
LABEL_170:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (!v93 || !*(_QWORD *)(v93 + 24))
          {
            os_log_type_enabled(v108, OS_LOG_TYPE_ERROR);
            *(_QWORD *)object = 0xD04100202;
            *(_WORD *)&object[8] = 2080;
            *(_QWORD *)&object[10] = __s;
            v117 = (void *)_os_log_send_and_compose_impl();
            if (v117)
              free(v117);
            goto LABEL_244;
          }
          v111 = _os_log_pack_size();
          v112 = (std::__shared_weak_count_vtbl *)operator new(v111, (std::align_val_t)8uLL);
          v113 = (std::__shared_weak_count *)operator new();
          v113->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v113->__shared_owners_ = 0;
          v113->__shared_weak_owners_ = 0;
          v113[1].__vftable = v112;
          *(_QWORD *)&v609 = v112;
          *((_QWORD *)&v609 + 1) = v112;
          v610 = v113;
          v611 = 0;
          v612 = 0;
          v114 = strlen(__s);
          if (v114 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v115 = (void *)v114;
          if (v114 >= 0x17)
          {
            v118 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v114 | 7) != 0x17)
              v118 = v114 | 7;
            v119 = v118 + 1;
            v116 = operator new(v118 + 1);
            v555[1] = v115;
            v555[2] = (void *)(v119 | 0x8000000000000000);
            v555[0] = v116;
          }
          else
          {
            HIBYTE(v555[2]) = v114;
            v116 = v555;
            if (!v114)
              goto LABEL_184;
          }
          memcpy(v116, __s, (size_t)v115);
LABEL_184:
          *((_BYTE *)v115 + (_QWORD)v116) = 0;
          v120 = v555[0];
          v601[0] = v555[1];
          *(void **)((char *)v601 + 7) = *(void **)((char *)&v555[1] + 7);
          v121 = HIBYTE(v555[2]);
          v122 = operator new(0x38uLL);
          v122[1] = 0;
          v122[2] = 0;
          v122[3] = off_24EC1FA48;
          *v122 = &off_24EC1F9F8;
          v123 = v601[0];
          v122[4] = v120;
          v122[5] = v123;
          *(_QWORD *)((char *)v122 + 47) = *(_QWORD *)((char *)v601 + 7);
          *((_BYTE *)v122 + 55) = v121;
          v601[0] = 0;
          *(_QWORD *)((char *)v601 + 7) = 0;
          v124 = v612;
          v611 = (char *)(v122 + 3);
          v612 = (std::__shared_weak_count *)v122;
          if (!v124)
            goto LABEL_188;
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
            *(_OWORD *)object = v609;
            v128 = v610;
            v127 = v611;
            *(_QWORD *)&object[16] = v610;
            if (!v610)
              goto LABEL_191;
          }
          else
          {
LABEL_188:
            *(_OWORD *)object = v609;
            v128 = v610;
            v127 = v611;
            *(_QWORD *)&object[16] = v610;
            if (!v610)
              goto LABEL_191;
          }
          v129 = (unint64_t *)&v128->__shared_owners_;
          do
            v130 = __ldxr(v129);
          while (__stxr(v130 + 1, v129));
LABEL_191:
          v131 = v612;
          *(_QWORD *)&object[24] = v127;
          *(_QWORD *)&object[32] = v612;
          if (v612)
          {
            v132 = (unint64_t *)&v612->__shared_owners_;
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
            *(_QWORD *)&object[40] = v127;
            do
              v134 = __ldaxr(v132);
            while (__stlxr(v134 - 1, v132));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          else
          {
            *(_QWORD *)&object[40] = v127;
          }
          v135 = v610;
          if (v610)
          {
            v136 = (unint64_t *)&v610->__shared_owners_;
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
          }
          v138 = *(_QWORD *)object;
          if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
            v139 = *(_QWORD *)&object[40] + 8;
          else
            v139 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
          v140 = _os_log_pack_fill();
          *(_DWORD *)v140 = 68157954;
          *(_DWORD *)(v140 + 4) = 13;
          *(_WORD *)(v140 + 8) = 2080;
          *(_QWORD *)(v140 + 10) = v139;
          v141 = operator new();
          v142 = *(unsigned __int8 *)(v94 + 39);
          v143 = v545;
          if ((v142 & 0x80u) != 0)
          {
            v143 = *(const char **)(v94 + 16);
            v142 = *(_QWORD *)(v94 + 24);
          }
          *(_QWORD *)v141 = v138;
          *(_OWORD *)(v141 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v141 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v141 + 40) = v143;
          *(_QWORD *)(v141 + 48) = v142;
          *(_BYTE *)(v141 + 56) = 16;
          v555[0] = 0;
          *(_QWORD *)&v609 = v141;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v93 + 24) + 40))(*(_QWORD *)(v93 + 24), &v609);
          v144 = v609;
          *(_QWORD *)&v609 = 0;
          if (!v144)
            goto LABEL_234;
          v145 = *(std::__shared_weak_count **)(v144 + 32);
          if (!v145)
            goto LABEL_214;
          v146 = (unint64_t *)&v145->__shared_owners_;
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
            v148 = *(std::__shared_weak_count **)(v144 + 16);
            if (!v148)
              goto LABEL_222;
          }
          else
          {
LABEL_214:
            v148 = *(std::__shared_weak_count **)(v144 + 16);
            if (!v148)
              goto LABEL_222;
          }
          v149 = (unint64_t *)&v148->__shared_owners_;
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
LABEL_222:
          MEMORY[0x227684CE8](v144, 0x10F0C40B62ED6C6);
          v151 = v555[0];
          v555[0] = 0;
          if (!v151)
            goto LABEL_234;
          v152 = (std::__shared_weak_count *)*((_QWORD *)v151 + 4);
          if (!v152)
            goto LABEL_227;
          v153 = (unint64_t *)&v152->__shared_owners_;
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
            v155 = (std::__shared_weak_count *)*((_QWORD *)v151 + 2);
            if (v155)
            {
LABEL_228:
              v156 = (unint64_t *)&v155->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
          }
          else
          {
LABEL_227:
            v155 = (std::__shared_weak_count *)*((_QWORD *)v151 + 2);
            if (v155)
              goto LABEL_228;
          }
          MEMORY[0x227684CE8](v151, 0x10F0C40B62ED6C6);
LABEL_234:
          v158 = *(std::__shared_weak_count **)&object[32];
          v69 = v547;
          if (!*(_QWORD *)&object[32])
            goto LABEL_238;
          v159 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
            v161 = *(std::__shared_weak_count **)&object[16];
            if (!*(_QWORD *)&object[16])
              goto LABEL_244;
          }
          else
          {
LABEL_238:
            v161 = *(std::__shared_weak_count **)&object[16];
            if (!*(_QWORD *)&object[16])
              goto LABEL_244;
          }
          v162 = (unint64_t *)&v161->__shared_owners_;
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
LABEL_244:
          if (v91)
          {
            sub_2245664AC((unsigned __int8 *)v70, object);
            sub_22322C138((uint64_t)&v602, "CGPTKP: KFP %.13s does not exist", object);
            sub_223182C08((uint64_t)&v602);
          }
          v164 = (uint64_t *)v602;
          if (!(_QWORD)v602)
            goto LABEL_273;
          v165 = v608;
          if (!(_QWORD)v608)
            goto LABEL_273;
          v166 = (_QWORD *)(*(_QWORD *)v602 + 16);
          if (*(char *)(*(_QWORD *)v602 + 39) < 0)
            v166 = (_QWORD *)*v166;
          v168 = *((_QWORD *)&v602 + 1);
          v167 = rep;
          v169 = v604;
          v170 = v605;
          v171 = v606;
          v172 = v607;
          v173 = (std::__shared_weak_count *)*((_QWORD *)&v608 + 1);
          v609 = v608;
          if (*((_QWORD *)&v608 + 1))
          {
            v174 = (unint64_t *)(*((_QWORD *)&v608 + 1) + 8);
            do
              v175 = __ldxr(v174);
            while (__stxr(v175 + 1, v174));
            *(_QWORD *)&object[8] = v168;
            *(_QWORD *)&object[16] = v167;
            *(_DWORD *)&object[24] = v169;
            *(_QWORD *)&object[32] = v170;
            *(_DWORD *)&object[40] = v171;
            *(_QWORD *)&object[48] = v172;
            *(_QWORD *)v558 = v165;
            *(_QWORD *)&v558[8] = v173;
            do
              v176 = __ldxr(v174);
            while (__stxr(v176 + 1, v174));
            *(_QWORD *)object = v166;
            v177 = *v164;
            if (v169 < **(_DWORD **)(*v164 + 56))
            {
LABEL_256:
              if (!v173)
                goto LABEL_263;
              goto LABEL_260;
            }
          }
          else
          {
            *(_QWORD *)&object[8] = *((_QWORD *)&v602 + 1);
            *(_QWORD *)&object[16] = rep;
            *(_DWORD *)&object[24] = v604;
            *(_QWORD *)&object[32] = v605;
            *(_DWORD *)&object[40] = v606;
            *(_QWORD *)&object[48] = v607;
            *(_QWORD *)v558 = v608;
            *(_QWORD *)&v558[8] = 0;
            *(_QWORD *)object = v166;
            v177 = *(_QWORD *)v602;
            if (v604 < **(_DWORD **)(*(_QWORD *)v602 + 56))
              goto LABEL_256;
          }
          sub_22323003C(v177, (uint64_t)object);
          v173 = *(std::__shared_weak_count **)&v558[8];
          if (!*(_QWORD *)&v558[8])
            goto LABEL_263;
LABEL_260:
          v178 = (unint64_t *)&v173->__shared_owners_;
          do
            v179 = __ldaxr(v178);
          while (__stlxr(v179 - 1, v178));
          if (!v179)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
            v180 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
            if (!*((_QWORD *)&v609 + 1))
              goto LABEL_269;
            goto LABEL_264;
          }
LABEL_263:
          v180 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
          if (!*((_QWORD *)&v609 + 1))
            goto LABEL_269;
LABEL_264:
          v181 = (unint64_t *)&v180->__shared_owners_;
          do
            v182 = __ldaxr(v181);
          while (__stlxr(v182 - 1, v181));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
LABEL_269:
          v183 = (std::__shared_weak_count *)*((_QWORD *)&v608 + 1);
          v608 = 0uLL;
          if (!v183)
            goto LABEL_103;
          v184 = (unint64_t *)&v183->__shared_owners_;
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (v185)
          {
LABEL_273:
            v186 = (std::__shared_weak_count *)*((_QWORD *)&v608 + 1);
            if (*((_QWORD *)&v608 + 1))
              goto LABEL_274;
            goto LABEL_103;
          }
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
          v186 = (std::__shared_weak_count *)*((_QWORD *)&v608 + 1);
          if (*((_QWORD *)&v608 + 1))
          {
LABEL_274:
            v187 = (unint64_t *)&v186->__shared_owners_;
            do
              v188 = __ldaxr(v187);
            while (__stlxr(v188 - 1, v187));
            if (!v188)
            {
              ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
              std::__shared_weak_count::__release_weak(v186);
            }
          }
LABEL_103:
          v70 += 32;
        }
        while (v70 != v550);
      }
      v190 = (unsigned __int8 *)*((_QWORD *)&v589 + 1);
      v189 = (unsigned __int8 *)v589;
      if (*((_QWORD *)&v589 + 1) != (_QWORD)v589)
      {
        v191 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v589 + 1) - v589) >> 3);
        do
        {
          v192 = v191 >> 1;
          v193 = &v189[40 * (v191 >> 1)];
          v194 = *v193;
          v195 = *v69;
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[1];
          v195 = v69[1];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[2];
          v195 = v69[2];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[3];
          v195 = v69[3];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[4];
          v195 = v69[4];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[5];
          v195 = v69[5];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[6];
          v195 = v69[6];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[7];
          v195 = v69[7];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[8];
          v195 = v69[8];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[9];
          v195 = v69[9];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[10];
          v195 = v69[10];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[11];
          v195 = v69[11];
          if (v194 != v195)
            goto LABEL_314;
          v194 = v193[12];
          v195 = v69[12];
          if (v194 != v195
            || (v194 = v193[13], v195 = v69[13], v194 != v195)
            || (v194 = v193[14], v195 = v69[14], v194 != v195)
            || (v194 = v193[15], v195 = v69[15], v194 != v195))
          {
LABEL_314:
            v196 = v193 + 40;
            v197 = v191 + ~v192;
            if (v194 < v195)
            {
              v192 = v197;
              v189 = v196;
            }
          }
          v191 = v192;
        }
        while (v192);
        v198 = v189;
        v189 = (unsigned __int8 *)*((_QWORD *)&v589 + 1);
        v190 = v198;
      }
      if (v189 == v190 || (char)sub_22319835C(v190, v69) < 0 || (char)sub_22319835C(v69, v190) < 0)
        break;
LABEL_367:
      v233 = (void *)*((_QWORD *)v190 + 2);
      if (v233)
      {
        *((_QWORD *)v190 + 3) = v233;
        operator delete(v233);
        *((_QWORD *)v190 + 2) = 0;
        *((_QWORD *)v190 + 3) = 0;
        *((_QWORD *)v190 + 4) = 0;
      }
      *((_OWORD *)v190 + 1) = v599;
      *((_QWORD *)v190 + 4) = v600;
      if ((_QWORD)v596)
      {
        *((_QWORD *)&v596 + 1) = v596;
        operator delete((void *)v596);
      }
      v64 = v540 + 1;
      if (v540 + 1 == v538)
        goto LABEL_376;
    }
    v602 = *(_OWORD *)v69;
    v199 = (unsigned __int8 *)*((_QWORD *)&v589 + 1);
    v200 = (unsigned __int8 *)v589;
    v201 = (uint64_t)&v190[-v589];
    v202 = (uint64_t)&v190[-v589] / 40;
    v203 = (unsigned __int8 *)(v589 + 40 * v202);
    if (*((_QWORD *)&v589 + 1) < v590)
    {
      if (v203 == *((unsigned __int8 **)&v589 + 1))
      {
        *(_OWORD *)v203 = *(_OWORD *)v547;
        v221 = (char *)&v200[40 * v202];
        *((_QWORD *)v221 + 3) = 0;
        *((_QWORD *)v221 + 4) = 0;
        *((_QWORD *)v221 + 2) = 0;
        *((_QWORD *)&v589 + 1) = v203 + 40;
        v190 = v203;
      }
      else
      {
        v204 = *((_QWORD *)&v589 + 1) - 40;
        v205 = *((_QWORD *)&v589 + 1);
        if (*((_QWORD *)&v589 + 1) >= 0x28uLL)
        {
          do
          {
            *(_OWORD *)v205 = *(_OWORD *)v204;
            *(_QWORD *)(v205 + 24) = 0;
            *(_QWORD *)(v205 + 32) = 0;
            *(_QWORD *)(v205 + 16) = 0;
            *(_OWORD *)(v205 + 16) = *(_OWORD *)(v204 + 16);
            *(_QWORD *)(v205 + 32) = *(_QWORD *)(v204 + 32);
            *(_QWORD *)(v204 + 16) = 0;
            *(_QWORD *)(v204 + 24) = 0;
            *(_QWORD *)(v204 + 32) = 0;
            v205 += 40;
            v204 += 40;
          }
          while (v204 < (unint64_t)v199);
        }
        v206 = (char *)(v203 + 40);
        *((_QWORD *)&v589 + 1) = v205;
        if (v199 != v203 + 40)
        {
          v207 = 0;
          v208 = -8 * ((v199 - (unsigned __int8 *)v206) >> 3);
          v209 = (uint64_t)&v200[40 * v202 + v199 - (unsigned __int8 *)v206];
          do
          {
            v210 = v209 + v207;
            v211 = (char *)&v199[v207];
            v213 = (void **)&v199[v207 - 24];
            v212 = *v213;
            *(_OWORD *)&v199[v207 - 40] = *(_OWORD *)(v209 + v207 - 40);
            if (v212)
            {
              *((_QWORD *)v211 - 2) = v212;
              operator delete(v212);
              *v213 = 0;
              *(_QWORD *)&v199[v207 - 16] = 0;
              *(_QWORD *)&v199[v207 - 8] = 0;
            }
            *(_OWORD *)v213 = *(_OWORD *)(v210 - 24);
            *((_QWORD *)v211 - 1) = *(_QWORD *)(v210 - 8);
            *(_QWORD *)(v210 - 24) = 0;
            *(_QWORD *)(v210 - 16) = 0;
            *(_QWORD *)(v210 - 8) = 0;
            v207 -= 40;
          }
          while (v208 != v207);
        }
        *(_OWORD *)v203 = v602;
        v217 = (char *)&v200[40 * v202];
        v220 = (void *)*((_QWORD *)v217 + 2);
        v219 = v217 + 16;
        v218 = v220;
        if (v220)
        {
          *(_QWORD *)&v200[40 * v202 + 24] = v218;
          operator delete(v218);
          *v219 = 0;
          v219[1] = 0;
          v219[2] = 0;
        }
        *v219 = 0;
        v219[1] = 0;
        v190 = v203;
        v219[2] = 0;
        v43 = a8;
      }
      goto LABEL_367;
    }
    v214 = 1 - 0x3333333333333333 * ((uint64_t)(*((_QWORD *)&v589 + 1) - v589) >> 3);
    if (v214 > 0x666666666666666)
      sub_22316E078();
    if (0x999999999999999ALL * ((uint64_t)(v590 - v589) >> 3) > v214)
      v214 = 0x999999999999999ALL * ((uint64_t)(v590 - v589) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v590 - v589) >> 3) >= 0x333333333333333)
      v215 = 0x666666666666666;
    else
      v215 = v214;
    *(_QWORD *)&object[32] = &v590;
    if (v215)
    {
      if (v215 > 0x666666666666666)
        sub_223174E94();
      v216 = (char *)operator new(40 * v215);
    }
    else
    {
      v216 = 0;
    }
    v222 = &v216[40 * v202];
    *(_QWORD *)object = v216;
    *(_QWORD *)&object[8] = v222;
    *(_QWORD *)&object[16] = v222;
    *(_QWORD *)&object[24] = &v216[40 * v215];
    if (v202 == v215)
    {
      if (v201 < 1)
      {
        if (v190 == v200)
          v224 = 1;
        else
          v224 = 2 * v202;
        if (v224 > 0x666666666666666)
          sub_223174E94();
        v225 = (char *)operator new(40 * v224);
        v222 = &v225[40 * (v224 >> 2)];
        *(_QWORD *)&object[24] = &v225[40 * v224];
        if (v216)
        {
          operator delete(v216);
          v200 = (unsigned __int8 *)v589;
        }
      }
      else
      {
        v223 = v202 + 2;
        if (v202 >= -1)
          v223 = v202 + 1;
        v222 -= 40 * (v223 >> 1);
      }
    }
    *(_OWORD *)v222 = v602;
    v226 = v222 + 40;
    *((_QWORD *)v222 + 3) = 0;
    *((_QWORD *)v222 + 4) = 0;
    *((_QWORD *)v222 + 2) = 0;
    *(_QWORD *)&object[16] = v222 + 40;
    if (v200 == v203)
    {
      v230 = v222;
      v231 = (unsigned __int8 *)*((_QWORD *)&v589 + 1);
      if (*((unsigned __int8 **)&v589 + 1) == v203)
        goto LABEL_363;
    }
    else
    {
      v227 = 0;
      do
      {
        v228 = &v222[v227];
        v229 = (char *)&v203[v227];
        *(_OWORD *)(v228 - 40) = *(_OWORD *)&v203[v227 - 40];
        *(_OWORD *)(v228 - 24) = *(_OWORD *)&v203[v227 - 24];
        *((_QWORD *)v228 - 1) = *(_QWORD *)&v203[v227 - 8];
        *((_QWORD *)v229 - 3) = 0;
        *((_QWORD *)v229 - 2) = 0;
        *((_QWORD *)v229 - 1) = 0;
        v227 -= 40;
      }
      while (&v203[v227] != v200);
      v226 = *(char **)&object[16];
      v230 = &v222[v227];
      v231 = (unsigned __int8 *)*((_QWORD *)&v589 + 1);
      if (*((unsigned __int8 **)&v589 + 1) == v203)
        goto LABEL_363;
    }
    do
    {
      *(_OWORD *)v226 = *(_OWORD *)v203;
      *((_QWORD *)v226 + 3) = 0;
      *((_QWORD *)v226 + 4) = 0;
      *((_QWORD *)v226 + 2) = 0;
      *((_OWORD *)v226 + 1) = *((_OWORD *)v203 + 1);
      *((_QWORD *)v226 + 4) = *((_QWORD *)v203 + 4);
      *((_QWORD *)v203 + 2) = 0;
      *((_QWORD *)v203 + 3) = 0;
      *((_QWORD *)v203 + 4) = 0;
      v226 += 40;
      v203 += 40;
    }
    while (v203 != v231);
    v203 = (unsigned __int8 *)*((_QWORD *)&v589 + 1);
LABEL_363:
    v232 = (unsigned __int8 *)v589;
    *(_QWORD *)&v589 = v230;
    *((_QWORD *)&v589 + 1) = v226;
    v590 = *(_QWORD *)&object[24];
    if (v203 == v232)
    {
      if (!v203)
      {
LABEL_366:
        v190 = (unsigned __int8 *)v222;
        goto LABEL_367;
      }
    }
    else
    {
      do
      {
        v234 = (void *)*((_QWORD *)v203 - 3);
        if (v234)
        {
          *((_QWORD *)v203 - 2) = v234;
          operator delete(v234);
        }
        v203 -= 40;
      }
      while (v203 != v232);
      v203 = v232;
      if (!v232)
        goto LABEL_366;
    }
    operator delete(v203);
    goto LABEL_366;
  }
LABEL_376:
  v235 = (void **)(v43 + 160);
  v236 = *(_QWORD *)(v43 + 160);
  if (v236)
  {
    v237 = *(_QWORD *)(v43 + 168);
    v238 = *(void **)(v43 + 160);
    if (v237 != v236)
    {
      do
      {
        v239 = *(void **)(v237 - 24);
        if (v239)
        {
          *(_QWORD *)(v237 - 16) = v239;
          operator delete(v239);
        }
        v237 -= 40;
      }
      while (v237 != v236);
      v238 = *v235;
    }
    *(_QWORD *)(v43 + 168) = v236;
    operator delete(v238);
    *v235 = 0;
    *(_QWORD *)(v43 + 168) = 0;
    *(_QWORD *)(v43 + 176) = 0;
  }
  *(_OWORD *)(v43 + 160) = v589;
  *(_QWORD *)(v43 + 176) = v590;
  *(_BYTE *)(v43 + 184) = v591;
  v589 = 0uLL;
  v590 = 0;
  sub_22341F3A8((uint64_t)&v589, v536[16] - v536[15]);
  v240 = v536[15];
  v537 = (char *)v536[16];
  if (v240 != (uint64_t *)v537)
  {
    while (1)
    {
      v539 = (char *)v240;
      v241 = (unsigned __int8 *)*v240;
      v243 = *(_QWORD *)(*v240 + 208);
      v242 = *((_QWORD *)v241 + 27);
      v597 = 0;
      v596 = 0uLL;
      v244 = v242 - v243;
      if (v244)
        break;
LABEL_679:
      v397 = (char *)*((_QWORD *)&v589 + 1);
      v396 = (char *)v589;
      if (*((_QWORD *)&v589 + 1) != (_QWORD)v589)
      {
        v398 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v589 + 1) - v589) >> 3);
        do
        {
          v399 = v398 >> 1;
          v400 = (unsigned __int8 *)&v396[40 * (v398 >> 1)];
          v401 = *v400;
          v402 = *v241;
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[1];
          v402 = v241[1];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[2];
          v402 = v241[2];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[3];
          v402 = v241[3];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[4];
          v402 = v241[4];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[5];
          v402 = v241[5];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[6];
          v402 = v241[6];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[7];
          v402 = v241[7];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[8];
          v402 = v241[8];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[9];
          v402 = v241[9];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[10];
          v402 = v241[10];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[11];
          v402 = v241[11];
          if (v401 != v402)
            goto LABEL_698;
          v401 = v400[12];
          v402 = v241[12];
          if (v401 != v402
            || (v401 = v400[13], v402 = v241[13], v401 != v402)
            || (v401 = v400[14], v402 = v241[14], v401 != v402)
            || (v401 = v400[15], v402 = v241[15], v401 != v402))
          {
LABEL_698:
            v403 = v400 + 40;
            v404 = v398 + ~v399;
            if (v401 < v402)
            {
              v399 = v404;
              v396 = (char *)v403;
            }
          }
          v398 = v399;
        }
        while (v399);
        v405 = v396;
        v396 = (char *)*((_QWORD *)&v589 + 1);
        v397 = v405;
      }
      if (v396 == v397
        || (char)sub_22319835C((unsigned __int8 *)v397, v241) < 0
        || (char)sub_22319835C(v241, (unsigned __int8 *)v397) < 0)
      {
        *(_OWORD *)object = *(_OWORD *)v241;
        memset(&object[16], 0, 24);
        v397 = sub_2236E2C4C((char **)&v589, v397, (__int128 *)object);
        if (*(_QWORD *)&object[16])
          operator delete(*(void **)&object[16]);
      }
      v406 = (void *)*((_QWORD *)v397 + 2);
      if (v406)
      {
        *((_QWORD *)v397 + 3) = v406;
        operator delete(v406);
        *((_QWORD *)v397 + 2) = 0;
        *((_QWORD *)v397 + 3) = 0;
        *((_QWORD *)v397 + 4) = 0;
      }
      *((_OWORD *)v397 + 1) = v596;
      *((_QWORD *)v397 + 4) = v597;
      v240 = (uint64_t *)(v539 + 8);
      if (v539 + 8 == v537)
        goto LABEL_708;
    }
    v245 = 0x21CFB2B78C13521DLL * (v244 >> 3);
    if (v245 >> 60)
      sub_22316E078();
    *(_QWORD *)&v596 = operator new(0x1CFB2B78C13521D0 * (v244 >> 3));
    *((_QWORD *)&v596 + 1) = v596;
    v597 = v596 + 16 * v245;
    v247 = *((_QWORD *)v241 + 26);
    v246 = *((_QWORD *)v241 + 27);
    v551 = v246;
LABEL_393:
    if (v247 == v246)
      goto LABEL_679;
    v249 = sub_22456636C((unsigned __int8 *)v247);
    v250 = *(int8x8_t *)(a3 + 88);
    if (!*(_QWORD *)&v250)
      goto LABEL_420;
    v251 = (uint8x8_t)vcnt_s8(v250);
    v251.i16[0] = vaddlv_u8(v251);
    if (v251.u32[0] > 1uLL)
    {
      v252 = v249;
      if (v249 >= *(_QWORD *)&v250)
        v252 = v249 % *(_QWORD *)&v250;
    }
    else
    {
      v252 = (*(_QWORD *)&v250 - 1) & v249;
    }
    v253 = *(_QWORD **)(*(_QWORD *)(a3 + 80) + 8 * v252);
    if (!v253 || (v254 = (_QWORD *)*v253) == 0)
    {
LABEL_420:
      v260 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v260 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      v261 = atomic_load((unsigned __int8 *)&qword_2540CC080);
      if ((v261 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC080))
      {
        sub_22455F53C(&v602);
        sub_223174DE4(object, "cv3d.recon.kfplanes");
        sub_2232300E0((uint64_t **)&v602, (uint64_t)object, &qword_2540CC078);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_guard_release(&qword_2540CC080);
      }
      if (*(char *)(qword_2540CC078 + 39) < 0)
      {
        v262 = *(const void **)(qword_2540CC078 + 16);
        v263 = *(_QWORD *)(qword_2540CC078 + 24);
      }
      else
      {
        v262 = (const void *)(qword_2540CC078 + 16);
        v263 = *(unsigned __int8 *)(qword_2540CC078 + 39);
      }
      sub_223195728((uint64_t)&stru_255789280, v262, v263, "CKSTGP: KFP %.13s does not exist", 0x20uLL);
      v264 = atomic_load((unsigned __int8 *)&qword_2540CC070);
      if ((v264 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC070))
      {
        sub_22455F53C(&v602);
        sub_223174DE4(object, "cv3dapi.recon3d.kfplanes");
        sub_2232300E0((uint64_t **)&v602, (uint64_t)object, &qword_2540CC068);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_guard_release(&qword_2540CC070);
      }
      v601[0] = qword_2540CC068;
      if (**(int **)(qword_2540CC068 + 56) > 5)
        goto LABEL_589;
      v265 = *(unsigned __int8 *)(qword_2540CC068 + 72);
      v266 = sub_22322F254(qword_2540CC068, "OSLogSurrogateAppender", 1, 0);
      v267 = v266;
      if (!v265 && !v266)
        goto LABEL_589;
      *(_QWORD *)&v602 = v601;
      *((std::chrono::steady_clock::time_point *)&v602 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v604 = 5;
      v605 = "unknown file";
      v606 = 243;
      v607 = "unknown function";
      v608 = 0uLL;
      sub_2245664AC((unsigned __int8 *)v247, __s);
      v268 = (const char *)(*(_QWORD *)v602 + 16);
      v543 = *(_QWORD *)v602;
      v542 = v268;
      if (*(char *)(*(_QWORD *)v602 + 39) < 0)
      {
        v268 = *(const char **)(v543 + 16);
        v269 = *(_QWORD *)(v543 + 24);
        v271 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v546 = v265;
        if ((v271 & 1) == 0)
        {
LABEL_674:
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v609);
            sub_223199C58("com.apple.cv3d", (unint64_t)&v609, &xmmword_255788F40);
            if ((_BYTE)v611 && SHIBYTE(v610) < 0)
              operator delete((void *)v609);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
        }
      }
      else
      {
        v269 = *(unsigned __int8 *)(*(_QWORD *)v602 + 39);
        v270 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v546 = v265;
        if ((v270 & 1) == 0)
          goto LABEL_674;
      }
      if (byte_255788F57 >= 0)
        v272 = (const char *)&xmmword_255788F40;
      else
        v272 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v273 = byte_255788F57;
      else
        v273 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v272, v268);
      if (v273 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v273 >= 0x17)
      {
        v275 = (v273 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v273 | 7) != 0x17)
          v275 = v273 | 7;
        v276 = v275 + 1;
        v274 = operator new(v275 + 1);
        *(_QWORD *)&object[16] = v273;
        *(_QWORD *)&object[24] = v276 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v274;
      }
      else
      {
        object[31] = v273;
        v274 = &object[8];
        if (!v273)
        {
LABEL_447:
          v274[v273] = 0;
          object[32] = 1;
          if (v269 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v43 = a8;
          if (v269 >= 0x17)
          {
            v280 = (v269 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v269 | 7) != 0x17)
              v280 = v269 | 7;
            v281 = v280 + 1;
            v277 = operator new(v280 + 1);
            *(_QWORD *)&object[48] = v269;
            *(_QWORD *)v558 = v281 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v277;
          }
          else
          {
            v558[7] = v269;
            v277 = &object[40];
            if (!v269)
            {
              object[40] = 0;
              v558[8] = 1;
              v278 = *(NSObject **)object;
              if ((v558[7] & 0x80000000) == 0)
                goto LABEL_451;
LABEL_457:
              operator delete(*(void **)&object[40]);
              v279 = v546;
              if (object[32])
                goto LABEL_458;
              goto LABEL_460;
            }
          }
          memmove(v277, v268, v269);
          v277[v269] = 0;
          v558[8] = 1;
          v278 = *(NSObject **)object;
          if ((v558[7] & 0x80000000) != 0)
            goto LABEL_457;
LABEL_451:
          v279 = v546;
          if (object[32])
          {
LABEL_458:
            if ((object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
          }
LABEL_460:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v267 && *(_QWORD *)(v267 + 24))
          {
            v282 = _os_log_pack_size();
            v283 = (std::__shared_weak_count_vtbl *)operator new(v282, (std::align_val_t)8uLL);
            v284 = (std::__shared_weak_count *)operator new();
            v284->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v284->__shared_owners_ = 0;
            v284->__shared_weak_owners_ = 0;
            v284[1].__vftable = v283;
            *(_QWORD *)&v609 = v283;
            *((_QWORD *)&v609 + 1) = v283;
            v610 = v284;
            v611 = 0;
            v612 = 0;
            v285 = strlen(__s);
            if (v285 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v286 = (void *)v285;
            if (v285 >= 0x17)
            {
              v292 = (v285 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v285 | 7) != 0x17)
                v292 = v285 | 7;
              v293 = v292 + 1;
              v287 = operator new(v292 + 1);
              v555[1] = v286;
              v555[2] = (void *)(v293 | 0x8000000000000000);
              v555[0] = v287;
            }
            else
            {
              HIBYTE(v555[2]) = v285;
              v287 = v555;
              if (!v285)
                goto LABEL_478;
            }
            memcpy(v287, __s, (size_t)v286);
LABEL_478:
            *((_BYTE *)v286 + (_QWORD)v287) = 0;
            v294 = v555[0];
            *(void **)&v599 = v555[1];
            *(void **)((char *)&v599 + 7) = *(void **)((char *)&v555[1] + 7);
            v295 = HIBYTE(v555[2]);
            v296 = operator new(0x38uLL);
            v296[1] = 0;
            v296[2] = 0;
            v296[3] = off_24EC1FA48;
            *v296 = &off_24EC1F9F8;
            v297 = v599;
            v296[4] = v294;
            v296[5] = v297;
            *(_QWORD *)((char *)v296 + 47) = *(_QWORD *)((char *)&v599 + 7);
            *((_BYTE *)v296 + 55) = v295;
            *(_QWORD *)&v599 = 0;
            *(_QWORD *)((char *)&v599 + 7) = 0;
            v298 = v612;
            v611 = (char *)(v296 + 3);
            v612 = (std::__shared_weak_count *)v296;
            if (!v298)
              goto LABEL_482;
            v299 = (unint64_t *)&v298->__shared_owners_;
            do
              v300 = __ldaxr(v299);
            while (__stlxr(v300 - 1, v299));
            if (!v300)
            {
              ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
              std::__shared_weak_count::__release_weak(v298);
              *(_OWORD *)object = v609;
              v302 = v610;
              v301 = v611;
              *(_QWORD *)&object[16] = v610;
              if (v610)
                goto LABEL_483;
            }
            else
            {
LABEL_482:
              *(_OWORD *)object = v609;
              v302 = v610;
              v301 = v611;
              *(_QWORD *)&object[16] = v610;
              if (v610)
              {
LABEL_483:
                v303 = (unint64_t *)&v302->__shared_owners_;
                do
                  v304 = __ldxr(v303);
                while (__stxr(v304 + 1, v303));
              }
            }
            v305 = v612;
            *(_QWORD *)&object[24] = v301;
            *(_QWORD *)&object[32] = v612;
            if (v612)
            {
              v306 = (unint64_t *)&v612->__shared_owners_;
              do
                v307 = __ldxr(v306);
              while (__stxr(v307 + 1, v306));
              *(_QWORD *)&object[40] = v301;
              do
                v308 = __ldaxr(v306);
              while (__stlxr(v308 - 1, v306));
              if (!v308)
              {
                ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                std::__shared_weak_count::__release_weak(v305);
              }
            }
            else
            {
              *(_QWORD *)&object[40] = v301;
            }
            v309 = v610;
            if (v610)
            {
              v310 = (unint64_t *)&v610->__shared_owners_;
              do
                v311 = __ldaxr(v310);
              while (__stlxr(v311 - 1, v310));
              if (!v311)
              {
                ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                std::__shared_weak_count::__release_weak(v309);
              }
            }
            v312 = *(_QWORD *)object;
            if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
              v313 = *(_QWORD *)&object[40] + 8;
            else
              v313 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
            v314 = _os_log_pack_fill();
            *(_DWORD *)v314 = 68157954;
            *(_DWORD *)(v314 + 4) = 13;
            *(_WORD *)(v314 + 8) = 2080;
            *(_QWORD *)(v314 + 10) = v313;
            v315 = operator new();
            v316 = *(unsigned __int8 *)(v543 + 39);
            v317 = v542;
            if ((v316 & 0x80u) != 0)
            {
              v317 = *(const char **)(v543 + 16);
              v316 = *(_QWORD *)(v543 + 24);
            }
            *(_QWORD *)v315 = v312;
            *(_OWORD *)(v315 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v315 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v315 + 40) = v317;
            *(_QWORD *)(v315 + 48) = v316;
            *(_BYTE *)(v315 + 56) = 16;
            v555[0] = 0;
            *(_QWORD *)&v609 = v315;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v267 + 24) + 40))(*(_QWORD *)(v267 + 24), &v609);
            v318 = v609;
            *(_QWORD *)&v609 = 0;
            if (v318)
            {
              v319 = *(std::__shared_weak_count **)(v318 + 32);
              if (!v319)
                goto LABEL_508;
              v320 = (unint64_t *)&v319->__shared_owners_;
              do
                v321 = __ldaxr(v320);
              while (__stlxr(v321 - 1, v320));
              if (!v321)
              {
                ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                std::__shared_weak_count::__release_weak(v319);
                v322 = *(std::__shared_weak_count **)(v318 + 16);
                if (v322)
                {
LABEL_509:
                  v323 = (unint64_t *)&v322->__shared_owners_;
                  do
                    v324 = __ldaxr(v323);
                  while (__stlxr(v324 - 1, v323));
                  if (!v324)
                  {
                    ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                    std::__shared_weak_count::__release_weak(v322);
                  }
                }
              }
              else
              {
LABEL_508:
                v322 = *(std::__shared_weak_count **)(v318 + 16);
                if (v322)
                  goto LABEL_509;
              }
              MEMORY[0x227684CE8](v318, 0x10F0C40B62ED6C6);
              v333 = v555[0];
              v555[0] = 0;
              if (v333)
              {
                v334 = (std::__shared_weak_count *)*((_QWORD *)v333 + 4);
                if (!v334)
                  goto LABEL_531;
                v335 = (unint64_t *)&v334->__shared_owners_;
                do
                  v336 = __ldaxr(v335);
                while (__stlxr(v336 - 1, v335));
                if (!v336)
                {
                  ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                  std::__shared_weak_count::__release_weak(v334);
                  v337 = (std::__shared_weak_count *)*((_QWORD *)v333 + 2);
                  if (v337)
                  {
LABEL_532:
                    v338 = (unint64_t *)&v337->__shared_owners_;
                    do
                      v339 = __ldaxr(v338);
                    while (__stlxr(v339 - 1, v338));
                    if (!v339)
                    {
                      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                      std::__shared_weak_count::__release_weak(v337);
                    }
                  }
                }
                else
                {
LABEL_531:
                  v337 = (std::__shared_weak_count *)*((_QWORD *)v333 + 2);
                  if (v337)
                    goto LABEL_532;
                }
                MEMORY[0x227684CE8](v333, 0x10F0C40B62ED6C6);
              }
            }
            v340 = *(std::__shared_weak_count **)&object[32];
            if (!*(_QWORD *)&object[32])
              goto LABEL_549;
            v341 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v342 = __ldaxr(v341);
            while (__stlxr(v342 - 1, v341));
            if (!v342)
            {
              ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
              std::__shared_weak_count::__release_weak(v340);
              v343 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
LABEL_550:
                v344 = (unint64_t *)&v343->__shared_owners_;
                do
                  v345 = __ldaxr(v344);
                while (__stlxr(v345 - 1, v344));
                if (!v345)
                {
                  ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                  std::__shared_weak_count::__release_weak(v343);
                }
              }
            }
            else
            {
LABEL_549:
              v343 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
                goto LABEL_550;
            }
            if (v546)
            {
LABEL_556:
              sub_2245664AC((unsigned __int8 *)v247, object);
              sub_22322C138((uint64_t)&v602, "CKSTGP: KFP %.13s does not exist", object);
              sub_223182C08((uint64_t)&v602);
            }
          }
          else
          {
            os_log_type_enabled(v278, OS_LOG_TYPE_ERROR);
            *(_QWORD *)object = 0xD04100202;
            *(_WORD *)&object[8] = 2080;
            *(_QWORD *)&object[10] = __s;
            v288 = (void *)_os_log_send_and_compose_impl();
            if (v288)
              free(v288);
            if (v279)
              goto LABEL_556;
          }
          v346 = (uint64_t *)v602;
          if ((_QWORD)v602)
          {
            v347 = v608;
            if ((_QWORD)v608)
            {
              v348 = (_QWORD *)(*(_QWORD *)v602 + 16);
              if (*(char *)(*(_QWORD *)v602 + 39) < 0)
                v348 = (_QWORD *)*v348;
              v350 = *((_QWORD *)&v602 + 1);
              v349 = rep;
              v351 = v604;
              v352 = v605;
              v353 = v606;
              v354 = v607;
              v355 = (std::__shared_weak_count *)*((_QWORD *)&v608 + 1);
              v609 = v608;
              if (*((_QWORD *)&v608 + 1))
              {
                v356 = (unint64_t *)(*((_QWORD *)&v608 + 1) + 8);
                do
                  v357 = __ldxr(v356);
                while (__stxr(v357 + 1, v356));
                *(_QWORD *)&object[8] = v350;
                *(_QWORD *)&object[16] = v349;
                *(_DWORD *)&object[24] = v351;
                *(_QWORD *)&object[32] = v352;
                *(_DWORD *)&object[40] = v353;
                *(_QWORD *)&object[48] = v354;
                *(_QWORD *)v558 = v347;
                *(_QWORD *)&v558[8] = v355;
                do
                  v358 = __ldxr(v356);
                while (__stxr(v358 + 1, v356));
                *(_QWORD *)object = v348;
                v359 = *v346;
                if (v351 < **(_DWORD **)(*v346 + 56))
                {
LABEL_567:
                  if (!v355)
                    goto LABEL_574;
LABEL_571:
                  v360 = (unint64_t *)&v355->__shared_owners_;
                  do
                    v361 = __ldaxr(v360);
                  while (__stlxr(v361 - 1, v360));
                  if (v361)
                  {
LABEL_574:
                    v362 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
                    if (*((_QWORD *)&v609 + 1))
                      goto LABEL_575;
                  }
                  else
                  {
                    ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                    std::__shared_weak_count::__release_weak(v355);
                    v362 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
                    if (*((_QWORD *)&v609 + 1))
                    {
LABEL_575:
                      v363 = (unint64_t *)&v362->__shared_owners_;
                      do
                        v364 = __ldaxr(v363);
                      while (__stlxr(v364 - 1, v363));
                      if (!v364)
                      {
                        ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                        std::__shared_weak_count::__release_weak(v362);
                      }
                    }
                  }
                  v365 = (std::__shared_weak_count *)*((_QWORD *)&v608 + 1);
                  v608 = 0uLL;
                  if (!v365)
                    goto LABEL_589;
                  v366 = (unint64_t *)&v365->__shared_owners_;
                  do
                    v367 = __ldaxr(v366);
                  while (__stlxr(v367 - 1, v366));
                  if (v367)
                    goto LABEL_584;
                  ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
                  std::__shared_weak_count::__release_weak(v365);
                  v368 = (std::__shared_weak_count *)*((_QWORD *)&v608 + 1);
                  if (!*((_QWORD *)&v608 + 1))
                  {
LABEL_589:
                    v372 = (char *)*((_QWORD *)&v589 + 1);
                    v371 = (char *)v589;
                    if (*((_QWORD *)&v589 + 1) != (_QWORD)v589)
                    {
                      v373 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v589 + 1) - v589) >> 3);
                      do
                      {
                        v374 = v373 >> 1;
                        v375 = (unsigned __int8 *)&v371[40 * (v373 >> 1)];
                        v376 = *v375;
                        v377 = *v241;
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[1];
                        v377 = v241[1];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[2];
                        v377 = v241[2];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[3];
                        v377 = v241[3];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[4];
                        v377 = v241[4];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[5];
                        v377 = v241[5];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[6];
                        v377 = v241[6];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[7];
                        v377 = v241[7];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[8];
                        v377 = v241[8];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[9];
                        v377 = v241[9];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[10];
                        v377 = v241[10];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[11];
                        v377 = v241[11];
                        if (v376 != v377)
                          goto LABEL_608;
                        v376 = v375[12];
                        v377 = v241[12];
                        if (v376 != v377
                          || (v376 = v375[13], v377 = v241[13], v376 != v377)
                          || (v376 = v375[14], v377 = v241[14], v376 != v377)
                          || (v376 = v375[15], v377 = v241[15], v376 != v377))
                        {
LABEL_608:
                          v378 = v375 + 40;
                          v379 = v373 + ~v374;
                          if (v376 < v377)
                          {
                            v374 = v379;
                            v371 = (char *)v378;
                          }
                        }
                        v373 = v374;
                      }
                      while (v374);
                      v380 = v371;
                      v371 = (char *)*((_QWORD *)&v589 + 1);
                      v372 = v380;
                    }
                    if (v371 != v372)
                    {
                      v381 = *v372;
                      v382 = *v241;
                      v383 = v381 >= v382;
                      if (v381 != v382)
                        goto LABEL_640;
                      v381 = v372[1];
                      v382 = v241[1];
                      v383 = v381 >= v382;
                      if (v381 != v382)
                        goto LABEL_640;
                      v381 = v372[2];
                      v382 = v241[2];
                      v383 = v381 >= v382;
                      if (v381 != v382)
                        goto LABEL_640;
                      v381 = v372[3];
                      v382 = v241[3];
                      v383 = v381 >= v382;
                      if (v381 != v382)
                        goto LABEL_640;
                      v381 = v372[4];
                      v382 = v241[4];
                      v383 = v381 >= v382;
                      if (v381 == v382
                        && (v381 = v372[5], v382 = v241[5], v383 = v381 >= v382, v381 == v382))
                      {
                        v384 = v372[6];
                        v385 = v241[6];
                        if (v384 == v385)
                        {
                          v384 = v372[7];
                          v385 = v241[7];
                          if (v384 == v385)
                          {
                            v384 = v372[8];
                            v385 = v241[8];
                            if (v384 == v385)
                            {
                              v384 = v372[9];
                              v385 = v241[9];
                              if (v384 == v385)
                              {
                                v384 = v372[10];
                                v385 = v241[10];
                                if (v384 == v385)
                                {
                                  v384 = v372[11];
                                  v385 = v241[11];
                                  if (v384 == v385)
                                  {
                                    v384 = v372[12];
                                    v385 = v241[12];
                                    if (v384 == v385)
                                    {
                                      v384 = v372[13];
                                      v385 = v241[13];
                                      if (v384 == v385)
                                      {
                                        v384 = v372[14];
                                        v385 = v241[14];
                                        if (v384 == v385)
                                        {
                                          v384 = v372[15];
                                          v385 = v241[15];
                                          if (v384 == v385)
                                            goto LABEL_629;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (v384 >= v385)
                        {
LABEL_629:
                          v382 = v241[6];
                          v381 = v372[6];
                          if (v382 == v381)
                          {
                            v382 = v241[7];
                            v381 = v372[7];
                            if (v382 == v381)
                            {
                              v382 = v241[8];
                              v381 = v372[8];
                              if (v382 == v381)
                              {
                                v382 = v241[9];
                                v381 = v372[9];
                                if (v382 == v381)
                                {
                                  v382 = v241[10];
                                  v381 = v372[10];
                                  if (v382 == v381)
                                  {
                                    v382 = v241[11];
                                    v381 = v372[11];
                                    if (v382 == v381)
                                    {
                                      v382 = v241[12];
                                      v381 = v372[12];
                                      if (v382 == v381)
                                      {
                                        v382 = v241[13];
                                        v381 = v372[13];
                                        if (v382 == v381)
                                        {
                                          v382 = v241[14];
                                          v381 = v372[14];
                                          if (v382 == v381)
                                          {
                                            v382 = v241[15];
                                            v381 = v372[15];
                                            if (v382 == v381)
                                              goto LABEL_645;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
LABEL_642:
                          if (v382 >= v381)
                            goto LABEL_645;
                        }
                      }
                      else
                      {
LABEL_640:
                        if (v383)
                          goto LABEL_642;
                      }
                    }
                    *(_OWORD *)object = *(_OWORD *)v241;
                    memset(&object[16], 0, 24);
                    v372 = sub_2236E2C4C((char **)&v589, v372, (__int128 *)object);
                    if (*(_QWORD *)&object[16])
                      operator delete(*(void **)&object[16]);
LABEL_645:
                    v387 = (char *)*((_QWORD *)v372 + 3);
                    v386 = *((_QWORD *)v372 + 4);
                    if ((unint64_t)v387 < v386)
                    {
                      *(_QWORD *)v387 = 0;
                      *((_QWORD *)v387 + 1) = 0;
                      v248 = v387 + 16;
                      goto LABEL_391;
                    }
                    v388 = (char *)*((_QWORD *)v372 + 2);
                    v389 = (v387 - v388) >> 4;
                    v390 = v389 + 1;
                    if ((unint64_t)(v389 + 1) >> 60)
                      sub_22316E078();
                    v391 = v386 - (_QWORD)v388;
                    if (v391 >> 3 > v390)
                      v390 = v391 >> 3;
                    if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFF0)
                      v392 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v392 = v390;
                    if (v392)
                    {
                      if (v392 >> 60)
                        sub_223174E94();
                      v393 = (char *)operator new(16 * v392);
                      v394 = &v393[16 * v389];
                      *(_QWORD *)v394 = 0;
                      *((_QWORD *)v394 + 1) = 0;
                      v395 = (uint64_t)v394;
                      if (v387 == v388)
                      {
LABEL_660:
                        v248 = v394 + 16;
                        *((_QWORD *)v372 + 2) = v395;
                        *((_QWORD *)v372 + 3) = v394 + 16;
                        *((_QWORD *)v372 + 4) = &v393[16 * v392];
                        if (v387)
                          goto LABEL_661;
                        goto LABEL_391;
                      }
                    }
                    else
                    {
                      v393 = 0;
                      v394 = (char *)(16 * v389);
                      *(_QWORD *)v394 = 0;
                      *((_QWORD *)v394 + 1) = 0;
                      v395 = 16 * v389;
                      if (v387 == v388)
                        goto LABEL_660;
                    }
                    do
                    {
                      *(_OWORD *)(v395 - 16) = *((_OWORD *)v387 - 1);
                      v395 -= 16;
                      v387 -= 16;
                    }
                    while (v387 != v388);
                    v387 = (char *)*((_QWORD *)v372 + 2);
                    v248 = v394 + 16;
                    *((_QWORD *)v372 + 2) = v395;
                    *((_QWORD *)v372 + 3) = v394 + 16;
                    *((_QWORD *)v372 + 4) = &v393[16 * v392];
                    if (v387)
LABEL_661:
                      operator delete(v387);
LABEL_391:
                    *((_QWORD *)v372 + 3) = v248;
                    goto LABEL_392;
                  }
LABEL_585:
                  v369 = (unint64_t *)&v368->__shared_owners_;
                  do
                    v370 = __ldaxr(v369);
                  while (__stlxr(v370 - 1, v369));
                  if (!v370)
                  {
                    ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                    std::__shared_weak_count::__release_weak(v368);
                  }
                  goto LABEL_589;
                }
              }
              else
              {
                *(_QWORD *)&object[8] = *((_QWORD *)&v602 + 1);
                *(_QWORD *)&object[16] = rep;
                *(_DWORD *)&object[24] = v604;
                *(_QWORD *)&object[32] = v605;
                *(_DWORD *)&object[40] = v606;
                *(_QWORD *)&object[48] = v607;
                *(_QWORD *)v558 = v608;
                *(_QWORD *)&v558[8] = 0;
                *(_QWORD *)object = v348;
                v359 = *(_QWORD *)v602;
                if (v604 < **(_DWORD **)(*(_QWORD *)v602 + 56))
                  goto LABEL_567;
              }
              sub_22323003C(v359, (uint64_t)object);
              v355 = *(std::__shared_weak_count **)&v558[8];
              if (!*(_QWORD *)&v558[8])
                goto LABEL_574;
              goto LABEL_571;
            }
          }
LABEL_584:
          v368 = (std::__shared_weak_count *)*((_QWORD *)&v608 + 1);
          if (!*((_QWORD *)&v608 + 1))
            goto LABEL_589;
          goto LABEL_585;
        }
      }
      memmove(v274, v272, v273);
      goto LABEL_447;
    }
    if (v251.u32[0] < 2uLL)
    {
      v255 = *(_QWORD *)&v250 - 1;
      while (1)
      {
        v259 = v254[1];
        if (v249 == v259)
        {
          if (v254[2] == *(_QWORD *)v247 && v254[3] == *(_QWORD *)(v247 + 8))
            goto LABEL_472;
        }
        else if ((v259 & v255) != v252)
        {
          goto LABEL_420;
        }
        v254 = (_QWORD *)*v254;
        if (!v254)
          goto LABEL_420;
      }
    }
    while (1)
    {
      v257 = v254[1];
      if (v249 == v257)
      {
        if (v254[2] == *(_QWORD *)v247 && v254[3] == *(_QWORD *)(v247 + 8))
        {
LABEL_472:
          v289 = (_OWORD *)v254[4];
          v290 = (char *)*((_QWORD *)&v596 + 1);
          if (*((_QWORD *)&v596 + 1) < v597)
          {
            **((_OWORD **)&v596 + 1) = *v289;
            v291 = v290 + 16;
            goto LABEL_542;
          }
          v325 = (char *)v596;
          v326 = (uint64_t)(*((_QWORD *)&v596 + 1) - v596) >> 4;
          v327 = v326 + 1;
          if ((unint64_t)(v326 + 1) >> 60)
            sub_22316E078();
          v328 = v597 - v596;
          if ((uint64_t)(v597 - v596) >> 3 > v327)
            v327 = v328 >> 3;
          if ((unint64_t)v328 >= 0x7FFFFFFFFFFFFFF0)
            v329 = 0xFFFFFFFFFFFFFFFLL;
          else
            v329 = v327;
          if (v329)
          {
            if (v329 >> 60)
              sub_223174E94();
            v330 = (char *)operator new(16 * v329);
            v331 = &v330[16 * v326];
            *(_OWORD *)v331 = *v289;
            v332 = (uint64_t)v331;
            if (v290 == v325)
            {
LABEL_540:
              v291 = v331 + 16;
              *(_QWORD *)&v596 = v332;
              *((_QWORD *)&v596 + 1) = v331 + 16;
              v597 = (unint64_t)&v330[16 * v329];
              if (v290)
                goto LABEL_541;
              goto LABEL_542;
            }
          }
          else
          {
            v330 = 0;
            v331 = (char *)(16 * v326);
            *(_OWORD *)(16 * v326) = *v289;
            v332 = 16 * v326;
            if (v290 == v325)
              goto LABEL_540;
          }
          do
          {
            *(_OWORD *)(v332 - 16) = *((_OWORD *)v290 - 1);
            v332 -= 16;
            v290 -= 16;
          }
          while (v290 != v325);
          v290 = (char *)v596;
          v291 = v331 + 16;
          *(_QWORD *)&v596 = v332;
          *((_QWORD *)&v596 + 1) = v331 + 16;
          v597 = (unint64_t)&v330[16 * v329];
          if (v290)
LABEL_541:
            operator delete(v290);
LABEL_542:
          *((_QWORD *)&v596 + 1) = v291;
LABEL_392:
          v247 += 424;
          v246 = v551;
          goto LABEL_393;
        }
      }
      else
      {
        if (v257 >= *(_QWORD *)&v250)
          v257 %= *(_QWORD *)&v250;
        if (v257 != v252)
          goto LABEL_420;
      }
      v254 = (_QWORD *)*v254;
      if (!v254)
        goto LABEL_420;
    }
  }
LABEL_708:
  v407 = (void **)(v43 + 192);
  v408 = *(_QWORD *)(v43 + 192);
  if (v408)
  {
    v409 = *(_QWORD *)(v43 + 200);
    v410 = *(void **)(v43 + 192);
    if (v409 != v408)
    {
      do
      {
        v411 = *(void **)(v409 - 24);
        if (v411)
        {
          *(_QWORD *)(v409 - 16) = v411;
          operator delete(v411);
        }
        v409 -= 40;
      }
      while (v409 != v408);
      v410 = *v407;
    }
    *(_QWORD *)(v43 + 200) = v408;
    operator delete(v410);
    *v407 = 0;
    *(_QWORD *)(v43 + 200) = 0;
    *(_QWORD *)(v43 + 208) = 0;
  }
  *(_OWORD *)(v43 + 192) = v589;
  *(_QWORD *)(v43 + 208) = v590;
  *(_BYTE *)(v43 + 216) = v591;
  if (!a7)
    return;
  v413 = *(_QWORD *)(a6 + 8);
  v412 = *(_QWORD *)(a6 + 16);
  v609 = 0uLL;
  v610 = 0;
  v414 = v412 - v413;
  if (v412 == v413)
  {
    v511 = 0;
    v602 = 0uLL;
    rep = 0;
    memset(object, 0, 48);
    goto LABEL_852;
  }
  v552 = 0xAAAAAAAAAAAAAAABLL * (v414 >> 3);
  if (v552 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v415 = 0;
  *(_QWORD *)&v609 = operator new(v414);
  *((_QWORD *)&v609 + 1) = v609;
  v610 = (std::__shared_weak_count *)(v609 + 24 * v552);
  v602 = 0uLL;
  rep = 0;
  v416 = (_QWORD *)(a3 + 80);
  while (2)
  {
    sub_22370DD68(*a5, v415, (uint64_t *)__s);
    v417 = *(__int128 **)__s;
    v418 = (__int128 *)v594[0];
    while (1)
    {
      if (v417 == v418)
        goto LABEL_767;
      v589 = *v417;
      v419 = sub_22456636C((unsigned __int8 *)&v589);
      v420 = *(int8x8_t *)(a3 + 88);
      if (v420)
      {
        v421 = (uint8x8_t)vcnt_s8(v420);
        v421.i16[0] = vaddlv_u8(v421);
        if (v421.u32[0] > 1uLL)
        {
          v422 = v419;
          if (v419 >= *(_QWORD *)&v420)
            v422 = v419 % *(_QWORD *)&v420;
        }
        else
        {
          v422 = (*(_QWORD *)&v420 - 1) & v419;
        }
        v423 = *(_QWORD **)(*v416 + 8 * v422);
        if (v423)
        {
          v424 = (_QWORD *)*v423;
          if (v424)
            break;
        }
      }
LABEL_722:
      ++v417;
    }
    if (v421.u32[0] < 2uLL)
    {
      v425 = *(_QWORD *)&v420 - 1;
      while (1)
      {
        v429 = v424[1];
        if (v419 == v429)
        {
          if (v424[2] == (_QWORD)v589 && v424[3] == *((_QWORD *)&v589 + 1))
            goto LABEL_751;
        }
        else if ((v429 & v425) != v422)
        {
          goto LABEL_722;
        }
        v424 = (_QWORD *)*v424;
        if (!v424)
          goto LABEL_722;
      }
    }
    while (1)
    {
      v427 = v424[1];
      if (v419 == v427)
        break;
      if (v427 >= *(_QWORD *)&v420)
        v427 %= *(_QWORD *)&v420;
      if (v427 != v422)
        goto LABEL_722;
LABEL_737:
      v424 = (_QWORD *)*v424;
      if (!v424)
        goto LABEL_722;
    }
    if (v424[2] != (_QWORD)v589 || v424[3] != *((_QWORD *)&v589 + 1))
      goto LABEL_737;
LABEL_751:
    v430 = v424[4];
    *(_OWORD *)v555 = *(_OWORD *)v430;
    *(_QWORD *)&v596 = *(_QWORD *)(v430 + 120);
    DWORD2(v596) = *(_DWORD *)(v430 + 128);
    v431 = *(_QWORD *)(v430 + 132);
    v432 = *(_DWORD *)(v430 + 140);
    v433 = *(__int128 **)__s;
    v434 = (__int128 *)v594[0];
    if (*(_QWORD *)__s == v594[0])
    {
LABEL_759:
      v548 = v431;
      v440 = v602;
      v441 = *((_QWORD *)&v602 + 1) - v602;
      if (*((_QWORD *)&v602 + 1) == (_QWORD)v602)
      {
        v443 = (_QWORD *)*((_QWORD *)&v602 + 1);
      }
      else
      {
        v442 = 0xAAAAAAAAAAAAAAABLL * (v441 >> 3);
        v443 = (_QWORD *)v602;
        do
        {
          v444 = v442 >> 1;
          v445 = &v443[3 * (v442 >> 1)];
          v447 = *v445;
          v446 = v445 + 3;
          v442 += ~(v442 >> 1);
          if (v447 < v415)
            v443 = v446;
          else
            v442 = v444;
        }
        while (v442);
        if (*((_QWORD **)&v602 + 1) != v443 && v415 == *v443)
          goto LABEL_804;
      }
      v589 = 0uLL;
      v467 = (uint64_t)v443 - v602;
      v468 = (uint64_t)((uint64_t)v443 - v602) / 24;
      v469 = (__int128 *)(v602 + 24 * v468);
      if (*((_QWORD *)&v602 + 1) < rep)
      {
        if (v469 != *((__int128 **)&v602 + 1))
        {
          v470 = *((_QWORD *)&v602 + 1) - 24;
          v471 = *((_QWORD *)&v602 + 1);
          v472 = *((_QWORD *)&v602 + 1) - 24;
          if (*((_QWORD *)&v602 + 1) >= 0x18uLL)
          {
            do
            {
              v473 = *(_OWORD *)v472;
              *(_QWORD *)(v471 + 16) = *(_QWORD *)(v472 + 16);
              *(_OWORD *)v471 = v473;
              v471 += 24;
              v472 += 24;
            }
            while (v472 < *((_QWORD *)&v440 + 1));
          }
          *((_QWORD *)&v602 + 1) = v471;
          if (*((__int128 **)&v440 + 1) != (__int128 *)((char *)v469 + 24))
          {
            v474 = *((_QWORD *)&v440 + 1) - ((_QWORD)v469 + 24);
            do
            {
              *(_QWORD *)v470 = *(_QWORD *)((char *)v469 + v474 - 24);
              *(_OWORD *)(v470 + 8) = *(__int128 *)((char *)v469 + v474 - 16);
              v470 -= 24;
              v474 -= 24;
            }
            while (v474);
          }
          *(_QWORD *)v469 = v415;
          v475 = v440 + 24 * v468;
          *(_QWORD *)(v475 + 8) = 0;
          *(_QWORD *)(v475 + 16) = 0;
          *(__int128 *)((char *)v469 + 8) = *(_OWORD *)v555;
          v450 = (char *)*((_QWORD *)&v609 + 1);
          v476 = v610;
          if (*((_QWORD *)&v609 + 1) >= (unint64_t)v610)
            goto LABEL_826;
          goto LABEL_805;
        }
        *(_QWORD *)(*((_QWORD *)&v602 + 1) + 8) = 0;
        *(_QWORD *)(*((_QWORD *)&v440 + 1) + 16) = 0;
        **((_QWORD **)&v440 + 1) = v415;
        *((_QWORD *)&v602 + 1) = *((_QWORD *)&v440 + 1) + 24;
        v443 = (_QWORD *)*((_QWORD *)&v440 + 1);
LABEL_804:
        *(_OWORD *)(v443 + 1) = *(_OWORD *)v555;
        v450 = (char *)*((_QWORD *)&v609 + 1);
        v476 = v610;
        if (*((_QWORD *)&v609 + 1) >= (unint64_t)v610)
        {
LABEL_826:
          v495 = (char *)v609;
          v496 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v450[-v609] >> 3);
          v497 = v496 + 1;
          if (v496 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_892:
            sub_22316E078();
          v498 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v476 - v609) >> 3);
          if (2 * v498 > v497)
            v497 = 2 * v498;
          if (v498 >= 0x555555555555555)
            v457 = 0xAAAAAAAAAAAAAAALL;
          else
            v457 = v497;
          if (v457 <= 0xAAAAAAAAAAAAAAALL)
          {
            v458 = (char *)operator new(24 * v457);
            v459 = &v458[24 * v496];
            *(_QWORD *)v459 = v596;
            *((_DWORD *)v459 + 2) = DWORD2(v596);
            *(_QWORD *)(v459 + 12) = v548;
            *((_DWORD *)v459 + 5) = v432;
            v463 = v459;
            if (v450 != v495)
            {
              do
              {
                v499 = *((_QWORD *)v450 - 3);
                v450 -= 24;
                v500 = *((_DWORD *)v450 + 2);
                *((_QWORD *)v463 - 3) = v499;
                v463 -= 24;
                *((_DWORD *)v463 + 2) = v500;
                v501 = *(_QWORD *)(v450 + 12);
                *((_DWORD *)v463 + 5) = *((_DWORD *)v450 + 5);
                *(_QWORD *)(v463 + 12) = v501;
              }
              while (v450 != v495);
              v450 = v495;
            }
            goto LABEL_836;
          }
LABEL_895:
          sub_223174E94();
        }
LABEL_805:
        *(_QWORD *)v450 = v596;
        *((_DWORD *)v450 + 2) = DWORD2(v596);
        *(_QWORD *)(v450 + 12) = v431;
        *((_DWORD *)v450 + 5) = v432;
        v454 = v450 + 24;
        goto LABEL_838;
      }
      v477 = 1 - 0x5555555555555555 * (v441 >> 3);
      if (v477 > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      if (0x5555555555555556 * ((uint64_t)(rep - v602) >> 3) > v477)
        v477 = 0x5555555555555556 * ((uint64_t)(rep - v602) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(rep - v602) >> 3) >= 0x555555555555555)
        v478 = 0xAAAAAAAAAAAAAAALL;
      else
        v478 = v477;
      if (v478)
      {
        if (v478 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v479 = (char *)operator new(24 * v478);
        v480 = (unint64_t)&v479[24 * v468];
        v481 = &v479[24 * v478];
        if ((char *)v480 != v481)
        {
LABEL_818:
          *(_QWORD *)v480 = v415;
          *(_OWORD *)(v480 + 8) = v589;
          v486 = v480;
          if ((unint64_t)(v467 + 23) >= 0x2F)
          {
            v487 = 24 * v468;
            v488 = v440 - 24;
            v489 = v480;
            do
            {
              v486 = v489 - 24;
              v490 = *(_OWORD *)(v488 + v487);
              *(_QWORD *)(v489 - 8) = *(_QWORD *)(v488 + v487 + 16);
              *(_OWORD *)(v489 - 24) = v490;
              v489 -= 24;
              v487 -= 24;
            }
            while (v487);
          }
          v491 = v480 + 24;
          v492 = (__int128 *)*((_QWORD *)&v602 + 1);
          if (*((__int128 **)&v602 + 1) != v469)
          {
            do
            {
              v493 = *v469;
              *(_QWORD *)(v491 + 16) = *((_QWORD *)v469 + 2);
              *(_OWORD *)v491 = v493;
              v491 += 24;
              v469 = (__int128 *)((char *)v469 + 24);
            }
            while (v469 != v492);
          }
          v494 = (void *)v602;
          *(_QWORD *)&v602 = v486;
          *((_QWORD *)&v602 + 1) = v491;
          rep = (unint64_t)v481;
          if (v494)
            operator delete(v494);
          *(_OWORD *)(v480 + 8) = *(_OWORD *)v555;
          v450 = (char *)*((_QWORD *)&v609 + 1);
          v476 = v610;
          if (*((_QWORD *)&v609 + 1) >= (unint64_t)v610)
            goto LABEL_826;
          goto LABEL_805;
        }
      }
      else
      {
        v479 = 0;
        v480 = 24 * v468;
        v481 = 0;
        if (24 * v468)
          goto LABEL_818;
      }
      v482 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v480 - (_QWORD)v479) >> 3);
      if (v480 <= (unint64_t)v479)
      {
        if ((char *)v480 == v479)
          v484 = 1;
        else
          v484 = 0x5555555555555556 * ((uint64_t)(v480 - (_QWORD)v479) >> 3);
        if (v484 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v485 = (char *)operator new(24 * v484);
        v480 = (unint64_t)&v485[24 * (v484 >> 2)];
        v481 = &v485[24 * v484];
        if (v479)
          operator delete(v479);
      }
      else
      {
        if (v482 >= -1)
          v483 = v482 + 1;
        else
          v483 = v482 + 2;
        v481 = (char *)v480;
        v480 -= 24 * (v483 >> 1);
      }
      goto LABEL_818;
    }
    while (1)
    {
      v589 = *v433;
      v435 = sub_223340F28(v416, (uint64_t)&v589);
      if (!v435)
        break;
      v436 = v435[4];
      v438 = *(void **)v436;
      v437 = *(void **)(v436 + 8);
      if (v438 != v555[0] || v437 != v555[1])
        break;
      if (++v433 == v434)
        goto LABEL_759;
    }
LABEL_767:
    v448 = *(_QWORD *)(a6 + 8);
    v449 = (uint64_t *)(v448 + 24 * v415);
    v450 = (char *)*((_QWORD *)&v609 + 1);
    if (*((_QWORD *)&v609 + 1) < (unint64_t)v610)
    {
      v451 = *v449;
      *(_DWORD *)(*((_QWORD *)&v609 + 1) + 8) = *((_DWORD *)v449 + 2);
      *(_QWORD *)v450 = v451;
      v452 = v448 + 24 * v415;
      v453 = *(_QWORD *)(v452 + 12);
      *((_DWORD *)v450 + 5) = *(_DWORD *)(v452 + 20);
      *(_QWORD *)(v450 + 12) = v453;
      v454 = v450 + 24;
      goto LABEL_838;
    }
    v455 = (_BYTE *)v609;
    v456 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v609 + 1) - v609) >> 3) + 1;
    if (v456 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_892;
    if (0x5555555555555556 * ((uint64_t)((uint64_t)v610 - v609) >> 3) > v456)
      v456 = 0x5555555555555556 * ((uint64_t)((uint64_t)v610 - v609) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v610 - v609) >> 3) >= 0x555555555555555)
      v457 = 0xAAAAAAAAAAAAAAALL;
    else
      v457 = v456;
    if (!v457)
    {
      v458 = 0;
      goto LABEL_779;
    }
    if (v457 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_895;
    v458 = (char *)operator new(24 * v457);
LABEL_779:
    v459 = &v458[8 * ((v450 - v455) >> 3)];
    v460 = *v449;
    *((_DWORD *)v459 + 2) = *((_DWORD *)v449 + 2);
    *(_QWORD *)v459 = v460;
    v461 = v448 + 24 * v415;
    v462 = *(_QWORD *)(v461 + 12);
    *((_DWORD *)v459 + 5) = *(_DWORD *)(v461 + 20);
    *(_QWORD *)(v459 + 12) = v462;
    v463 = v459;
    if (v450 != v455)
    {
      do
      {
        v464 = *((_QWORD *)v450 - 3);
        v450 -= 24;
        v465 = *((_DWORD *)v450 + 2);
        *((_QWORD *)v463 - 3) = v464;
        v463 -= 24;
        *((_DWORD *)v463 + 2) = v465;
        v466 = *(_QWORD *)(v450 + 12);
        *((_DWORD *)v463 + 5) = *((_DWORD *)v450 + 5);
        *(_QWORD *)(v463 + 12) = v466;
      }
      while (v450 != v455);
      v450 = (char *)v609;
    }
LABEL_836:
    v454 = v459 + 24;
    *(_QWORD *)&v609 = v463;
    *((_QWORD *)&v609 + 1) = v459 + 24;
    v610 = (std::__shared_weak_count *)&v458[24 * v457];
    if (v450)
      operator delete(v450);
LABEL_838:
    *((_QWORD *)&v609 + 1) = v454;
    if (*(_QWORD *)__s)
    {
      v594[0] = *(_QWORD *)__s;
      operator delete(*(void **)__s);
    }
    if (++v415 != v552)
      continue;
    break;
  }
  v502 = v609;
  memset(object, 0, 24);
  v503 = *((_QWORD *)&v609 + 1) - v609;
  if (*((_QWORD *)&v609 + 1) != (_QWORD)v609)
  {
    v504 = 0xAAAAAAAAAAAAAAABLL * (v503 >> 3);
    if (v504 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v505 = (char *)operator new(v503);
    v506 = 0;
    *(_QWORD *)object = v505;
    *(_QWORD *)&object[16] = &v505[24 * v504];
    do
    {
      v507 = v502 + v506;
      v508 = &v505[v506];
      v509 = *(_QWORD *)(v502 + v506);
      *((_DWORD *)v508 + 2) = *(_DWORD *)(v502 + v506 + 8);
      *(_QWORD *)v508 = v509;
      v510 = *(_QWORD *)(v502 + v506 + 12);
      *((_DWORD *)v508 + 5) = *(_DWORD *)(v502 + v506 + 20);
      *(_QWORD *)(v508 + 12) = v510;
      v506 += 24;
    }
    while (v507 + 24 != *((_QWORD *)&v502 + 1));
    *(_QWORD *)&object[8] = &v505[v506];
  }
  v512 = (char *)*((_QWORD *)&v602 + 1);
  v511 = (char *)v602;
  memset(&object[24], 0, 24);
  v513 = *((_QWORD *)&v602 + 1) - v602;
  if (*((_QWORD *)&v602 + 1) == (_QWORD)v602)
  {
    v43 = a8;
  }
  else
  {
    v514 = 0xAAAAAAAAAAAAAAABLL * (v513 >> 3);
    if (v514 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v515 = (char *)operator new(v513);
    v516 = 0;
    *(_QWORD *)&object[24] = v515;
    *(_QWORD *)&object[40] = &v515[24 * v514];
    v43 = a8;
    do
    {
      v517 = &v511[v516];
      v518 = &v515[v516];
      *(_QWORD *)v518 = *(_QWORD *)&v511[v516];
      *(_OWORD *)(v518 + 8) = *(_OWORD *)&v511[v516 + 8];
      v516 += 24;
    }
    while (v517 + 24 != v512);
    *(_QWORD *)&object[32] = &v515[v516];
  }
LABEL_852:
  object[48] = v604;
  v558[28] = 0;
  memset(&v558[8], 0, 17);
  *(_QWORD *)v558 = &off_24EC24788;
  memset(&v558[32], 0, 48);
  sub_22449B750(&v558[8], a6 + 64);
  LOWORD(v559) = *(_WORD *)(a6 + 136);
  if (v511)
    operator delete(v511);
  if ((_QWORD)v609)
  {
    *((_QWORD *)&v609 + 1) = v609;
    operator delete((void *)v609);
  }
  if (*(_BYTE *)(v43 + 368))
  {
    v519 = *(void **)(v43 + 224);
    if (v519)
    {
      *(_QWORD *)(v43 + 232) = v519;
      operator delete(v519);
      *(_QWORD *)(v43 + 224) = 0;
      *(_QWORD *)(v43 + 232) = 0;
      *(_QWORD *)(v43 + 240) = 0;
    }
    v520 = *(void **)(v43 + 248);
    *(_OWORD *)(v43 + 224) = *(_OWORD *)object;
    *(_QWORD *)(v43 + 240) = *(_QWORD *)&object[16];
    memset(object, 0, 24);
    if (v520)
    {
      *(_QWORD *)(v43 + 256) = v520;
      operator delete(v520);
      *(_QWORD *)(v43 + 248) = 0;
      *(_QWORD *)(v43 + 256) = 0;
      *(_QWORD *)(v43 + 264) = 0;
    }
    *(_OWORD *)(v43 + 248) = *(_OWORD *)&object[24];
    *(_QWORD *)(v43 + 264) = *(_QWORD *)&object[40];
    memset(&object[24], 0, 24);
    *(_BYTE *)(v43 + 272) = object[48];
    v521 = *(_OWORD *)&v558[8];
    *(_OWORD *)&v558[8] = 0uLL;
    v522 = *(std::__shared_weak_count **)(v43 + 296);
    *(_OWORD *)(v43 + 288) = v521;
    if (v522)
    {
      v523 = (unint64_t *)&v522->__shared_owners_;
      do
        v524 = __ldaxr(v523);
      while (__stlxr(v524 - 1, v523));
      if (!v524)
      {
        ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
        std::__shared_weak_count::__release_weak(v522);
      }
    }
    v525 = *(_OWORD *)&v558[40];
    *(_OWORD *)(v43 + 304) = *(_OWORD *)&v558[24];
    *(_OWORD *)(v43 + 320) = v525;
    *(_OWORD *)(v43 + 336) = *(_OWORD *)&v558[56];
    v526 = *(std::__shared_weak_count **)&v558[16];
    *(_QWORD *)(v43 + 352) = *(_QWORD *)&v558[72];
    *(_WORD *)(v43 + 360) = v559;
    if (v526)
    {
      v527 = (unint64_t *)&v526->__shared_owners_;
      do
        v528 = __ldaxr(v527);
      while (__stlxr(v528 - 1, v527));
      if (!v528)
      {
        ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
        std::__shared_weak_count::__release_weak(v526);
      }
    }
  }
  else
  {
    *(_OWORD *)(v43 + 224) = *(_OWORD *)object;
    *(_QWORD *)(v43 + 240) = *(_QWORD *)&object[16];
    memset(object, 0, 24);
    *(_OWORD *)(v43 + 248) = *(_OWORD *)&object[24];
    *(_QWORD *)(v43 + 264) = *(_QWORD *)&object[40];
    memset(&object[24], 0, 24);
    *(_BYTE *)(v43 + 272) = object[48];
    *(_QWORD *)(v43 + 280) = &off_24EC24788;
    v529 = *(_OWORD *)&v558[8];
    *(_OWORD *)&v558[8] = 0uLL;
    v530 = *(_OWORD *)&v558[24];
    v531 = *(_OWORD *)&v558[40];
    v532 = *(_OWORD *)&v558[56];
    *(_QWORD *)(v43 + 352) = *(_QWORD *)&v558[72];
    *(_OWORD *)(v43 + 320) = v531;
    *(_OWORD *)(v43 + 336) = v532;
    *(_OWORD *)(v43 + 288) = v529;
    *(_OWORD *)(v43 + 304) = v530;
    *(_WORD *)(v43 + 360) = v559;
    *(_BYTE *)(v43 + 368) = 1;
  }
  if (*(_QWORD *)&object[24])
  {
    *(_QWORD *)&object[32] = *(_QWORD *)&object[24];
    operator delete(*(void **)&object[24]);
  }
  if (*(_QWORD *)object)
  {
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    operator delete(*(void **)object);
  }
}

void sub_2236DD754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (*(_BYTE *)(v30 - 136) && *(char *)(v30 - 137) < 0)
    operator delete(*(void **)(v30 - 160));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC(v30 - 240);
  v32 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v32;
    operator delete(v32);
  }
  sub_22319A750((void **)&STACK[0x2E0]);
  sub_22327F500(a30);
  _Unwind_Resume(a1);
}

void sub_2236DDF34(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  void *v18;
  void **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::mutex *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v29;
  std::string::size_type v30;
  int v31;
  __n128 *v34;
  std::string *v35;
  size_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  int v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  const char *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  std::string __p;
  int v107;
  const char *v108;
  int v109;
  const char *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  void *v114[2];
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[64];
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v116 = 0;
  v7 = *(_QWORD **)a1;
  *(_OWORD *)&v119[8] = 0uLL;
  *(_QWORD *)v119 = &v119[8];
  sub_2236C4048(v119, v7, a3, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)&v119[16];
  sub_223198030((uint64_t)v119, *(_QWORD **)&v119[8]);
  v116 = v8;
  v10 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[6];
  v15 = a2[7];
  v119[23] = 20;
  strcpy(v119, "Stats.KeyframePlanes");
  v16 = std::string::append((std::string *)v119, ".GlobalPlanes", 0xDuLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v115 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v114 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v119[23] & 0x80000000) != 0)
    operator delete(*(void **)v119);
  v105 = v12;
  *(_QWORD *)v119 = "cv3d.recon.";
  *(_QWORD *)&v119[8] = 11;
  v18 = (void *)HIBYTE(v115);
  v19 = v114;
  if (v115 < 0)
  {
    v19 = (void **)v114[0];
    v18 = v114[1];
  }
  *(_QWORD *)&v119[16] = v19;
  *(_QWORD *)&v119[24] = v18;
  sub_2231A9820((uint64_t)v119, (uint64_t)&v119[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v20 = sub_2241471F8();
    v21 = v20[2];
    if (!v21)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v21 = v20[2];
    }
    v22 = *(_QWORD *)(v21 + 64);
    v23 = (std::mutex *)(v22 + 32);
    std::mutex::lock((std::mutex *)(v22 + 32));
    v25 = *(_QWORD *)(v22 + 96);
    v24 = *(_QWORD *)(v22 + 104);
    std::mutex::unlock(v23);
    if (v25 != v24)
    {
      sub_2241471F8();
      v26 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26))
      {
        memset(v119, 0, 32);
        *(_DWORD *)&v119[32] = 728325608;
        kdebug_trace();
        sub_2236DEBE0((double *)&qword_255788F20, v26, &v116, "Updated");
        kdebug_trace();
      }
    }
  }
  memset(v119, 0, 32);
  *(_DWORD *)&v119[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v29 = p_p->__r_.__value_.__r.__words[0];
    v30 = p_p->__r_.__value_.__l.__size_;
    v31 = p_p->__r_.__value_.__s.__data_[16];
    if (v29 == 0x6365722E64337663 && v30 == 0x73746174532E6E6FLL && v31 == 46)
    {
      v34 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &__p;
      else
        v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v36 = __p.__r_.__value_.__l.__size_;
      sub_22318760C((uint64_t *)v34, v35, v36, &v116, (uint64_t)"Updated", 7);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_2236D6148(&v113);
  if (**(int **)(v113 + 56) <= 3)
  {
    v37 = *(unsigned __int8 *)(v113 + 72);
    v38 = sub_22322F254(v113, "OSLogSurrogateAppender", 1, 0);
    if (v37 || v38)
    {
      v104 = v38;
      v100 = v37;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      v107 = 3;
      v108 = "unknown file";
      v109 = 588;
      v111 = 0;
      v112 = 0;
      v110 = "unknown function";
      v39 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
      v40 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
      v98 = v40;
      v99 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
      if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v40 = *(const char **)(v39 + 16);
        v41 = *(_QWORD *)(v39 + 24);
        v101 = v14;
        v102 = v13;
        v103 = v11;
        v43 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v43 & 1) != 0)
          goto LABEL_41;
      }
      else
      {
        v41 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
        v101 = v14;
        v102 = v13;
        v103 = v11;
        v42 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v42 & 1) != 0)
          goto LABEL_41;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v119);
        sub_223199C58("com.apple.cv3d", (unint64_t)v119, &xmmword_255788F40);
        if (v119[24] && (v119[23] & 0x80000000) != 0)
          operator delete(*(void **)v119);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_41:
      if (byte_255788F57 >= 0)
        v44 = (const char *)&xmmword_255788F40;
      else
        v44 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v45 = byte_255788F57;
      else
        v45 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v119 = os_log_create(v44, v40);
      v46 = &v119[8];
      if (v45 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v45 >= 0x17)
      {
        v47 = v10;
        v48 = v15;
        v49 = v9;
        v50 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v45 | 7) != 0x17)
          v50 = v45 | 7;
        v51 = v50 + 1;
        v46 = operator new(v50 + 1);
        *(_QWORD *)&v119[16] = v45;
        *(_QWORD *)&v119[24] = v51 | 0x8000000000000000;
        *(_QWORD *)&v119[8] = v46;
        v9 = v49;
        v15 = v48;
        v10 = v47;
      }
      else
      {
        v119[31] = v45;
        if (!v45)
        {
LABEL_55:
          v46[v45] = 0;
          v119[32] = 1;
          v52 = &v119[40];
          if (v41 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v41 >= 0x17)
          {
            v55 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v41 | 7) != 0x17)
              v55 = v41 | 7;
            v56 = v55 + 1;
            v52 = operator new(v55 + 1);
            *(_QWORD *)&v119[48] = v41;
            *(_QWORD *)&v119[56] = v56 | 0x8000000000000000;
            *(_QWORD *)&v119[40] = v52;
          }
          else
          {
            v119[63] = v41;
            if (!v41)
            {
              v119[40] = 0;
              v120 = 1;
              v53 = *(NSObject **)v119;
              if ((v119[63] & 0x80000000) == 0)
                goto LABEL_59;
              goto LABEL_65;
            }
          }
          memmove(v52, v40, v41);
          v52[v41] = 0;
          v120 = 1;
          v53 = *(NSObject **)v119;
          if ((v119[63] & 0x80000000) == 0)
          {
LABEL_59:
            v54 = v105;
            if (!v119[32])
              goto LABEL_68;
            goto LABEL_66;
          }
LABEL_65:
          operator delete(*(void **)&v119[40]);
          v54 = v105;
          if (!v119[32])
          {
LABEL_68:
            if (*(_QWORD *)v119)
              os_release(*(void **)v119);
            v57 = (v9 - v10) >> 4;
            v58 = (v102 - v54) >> 3;
            v59 = (v15 - v101) >> 4;
            if (v104 && *(_QWORD *)(v104 + 24))
            {
              v60 = _os_log_pack_size();
              v61 = (std::__shared_weak_count_vtbl *)operator new(v60, (std::align_val_t)8uLL);
              v62 = (std::__shared_weak_count *)operator new();
              v63 = v62;
              v62->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v62->__shared_owners_;
              v62->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v62->__shared_weak_owners_ = 0;
              v62[1].__vftable = v61;
              *(_QWORD *)v119 = v61;
              *(_QWORD *)&v119[8] = v61;
              *(_QWORD *)&v119[16] = v62;
              do
                v65 = __ldxr(p_shared_owners);
              while (__stxr(v65 + 1, p_shared_owners));
              memset(&v119[24], 0, 24);
              do
                v66 = __ldaxr(p_shared_owners);
              while (__stlxr(v66 - 1, p_shared_owners));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v63);
              }
              v67 = *(_QWORD *)v119;
              v68 = _os_log_pack_fill();
              v69 = v116;
              *(_DWORD *)v68 = 134219264;
              *(double *)(v68 + 4) = a4;
              *(_WORD *)(v68 + 12) = 2048;
              *(_QWORD *)(v68 + 14) = v69;
              *(_WORD *)(v68 + 22) = 2048;
              *(_QWORD *)(v68 + 24) = v103;
              *(_WORD *)(v68 + 32) = 2048;
              *(_QWORD *)(v68 + 34) = v57;
              *(_WORD *)(v68 + 42) = 2048;
              *(_QWORD *)(v68 + 44) = v58;
              *(_WORD *)(v68 + 52) = 2048;
              *(_QWORD *)(v68 + 54) = v59;
              v70 = operator new();
              v71 = *(unsigned __int8 *)(v99 + 39);
              v72 = v98;
              if ((v71 & 0x80u) != 0)
              {
                v72 = *(const char **)(v99 + 16);
                v71 = *(_QWORD *)(v99 + 24);
              }
              *(_QWORD *)v70 = v67;
              *(_OWORD *)(v70 + 8) = *(_OWORD *)&v119[8];
              *(_OWORD *)&v119[8] = 0uLL;
              *(_OWORD *)(v70 + 24) = *(_OWORD *)&v119[24];
              *(_QWORD *)&v119[24] = 0;
              *(_QWORD *)&v119[32] = 0;
              *(_QWORD *)(v70 + 40) = v72;
              *(_QWORD *)(v70 + 48) = v71;
              *(_BYTE *)(v70 + 56) = 1;
              v117 = 0;
              v118 = v70;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v104 + 24) + 40))(*(_QWORD *)(v104 + 24), &v118);
              v73 = v118;
              v118 = 0;
              if (v73)
              {
                v74 = *(std::__shared_weak_count **)(v73 + 32);
                if (v74)
                {
                  v75 = (unint64_t *)&v74->__shared_owners_;
                  do
                    v76 = __ldaxr(v75);
                  while (__stlxr(v76 - 1, v75));
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
                v77 = *(std::__shared_weak_count **)(v73 + 16);
                if (v77)
                {
                  v78 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v79 = __ldaxr(v78);
                  while (__stlxr(v79 - 1, v78));
                  if (!v79)
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                }
                MEMORY[0x227684CE8](v73, 0x10F0C40B62ED6C6);
                v80 = v117;
                v117 = 0;
                if (v80)
                {
                  v81 = *(std::__shared_weak_count **)(v80 + 32);
                  if (v81)
                  {
                    v82 = (unint64_t *)&v81->__shared_owners_;
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    if (!v83)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  v84 = *(std::__shared_weak_count **)(v80 + 16);
                  if (v84)
                  {
                    v85 = (unint64_t *)&v84->__shared_owners_;
                    do
                      v86 = __ldaxr(v85);
                    while (__stlxr(v86 - 1, v85));
                    if (!v86)
                    {
                      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                      std::__shared_weak_count::__release_weak(v84);
                    }
                  }
                  MEMORY[0x227684CE8](v80, 0x10F0C40B62ED6C6);
                }
              }
              v87 = *(std::__shared_weak_count **)&v119[32];
              v88 = v100;
              if (*(_QWORD *)&v119[32])
              {
                v89 = (unint64_t *)(*(_QWORD *)&v119[32] + 8);
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
              v91 = *(std::__shared_weak_count **)&v119[16];
              if (*(_QWORD *)&v119[16])
              {
                v92 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
                do
                  v93 = __ldaxr(v92);
                while (__stlxr(v93 - 1, v92));
                if (!v93)
                {
                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                  std::__shared_weak_count::__release_weak(v91);
                }
              }
            }
            else
            {
              os_log_type_enabled(v53, OS_LOG_TYPE_INFO);
              *(_DWORD *)v119 = 134219264;
              *(double *)&v119[4] = a4;
              *(_WORD *)&v119[12] = 2048;
              *(_QWORD *)&v119[14] = v116;
              *(_WORD *)&v119[22] = 2048;
              *(_QWORD *)&v119[24] = v103;
              *(_WORD *)&v119[32] = 2048;
              *(_QWORD *)&v119[34] = v57;
              *(_WORD *)&v119[42] = 2048;
              *(_QWORD *)&v119[44] = (v102 - v54) >> 3;
              *(_WORD *)&v119[52] = 2048;
              *(_QWORD *)&v119[54] = (v15 - v101) >> 4;
              v94 = (void *)_os_log_send_and_compose_impl();
              v88 = v100;
              if (v94)
                free(v94);
            }
            if (v88)
            {
              sub_22322C138((uint64_t)&__p, "KeyframePlaneDetector: Global plane update stats at timestamp %f updated/restored/deleted (exposed/removed): %zu/%zu/%zu (%zu/%zu)", a4, v116, v103, v57, v58, v59);
              sub_223182C08((uint64_t)&__p);
            }
            sub_223182C08((uint64_t)&__p);
            v95 = v112;
            if (v112)
            {
              v96 = (unint64_t *)&v112->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            goto LABEL_122;
          }
LABEL_66:
          if ((v119[31] & 0x80000000) != 0)
            operator delete(*(void **)&v119[8]);
          goto LABEL_68;
        }
      }
      memmove(v46, v44, v45);
      goto LABEL_55;
    }
  }
LABEL_122:
  if (SHIBYTE(v115) < 0)
    operator delete(v114[0]);
}

void sub_2236DEA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (*(_BYTE *)(v41 - 168) && *(char *)(v41 - 169) < 0)
    operator delete(*(void **)(v41 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a23);
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2236DEBE0(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_223663E94((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_2236DED00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2236DED20()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2236DED34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC576D0;
  result[1] = v3;
  return result;
}

uint64_t sub_2236DED68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC576D0;
  a2[1] = v2;
  return result;
}

__n128 sub_2236DED84@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  _QWORD *v5;
  unint64_t v6;
  __n128 result;

  v5 = sub_223340F28((_QWORD *)(*(_QWORD *)(a1 + 8) + 40), (uint64_t)a2);
  if (v5)
  {
    v6 = v5[4];
    result = *a2;
    *a3 = *a2;
    a3[1].n128_u64[0] = v6;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/src/GlobalPlaneUpdate.cpp", 305, (uint64_t)"gp_ref.has_value()", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    result = *a2;
    *a3 = *a2;
    a3[1].n128_u64[0] = 0;
  }
  return result;
}

uint64_t sub_2236DEE18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes32CollectUpdatedPlanesAndKeyframesERKNSt3__16chrono8durationIxNS2_5ratioILl1E"
                     "Ll1000000000EEEEERKNS1_17GlobalPlaneUpdateERKNS1_20KeyframePlaneStorageERKNS2_6vectorINS0_5frame12K"
                     "eyframeDataENS2_9allocatorISI_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes32CollectUpdatedPlanesAndKeyframesERKNSt3__16chrono8durationIxNS2_"
                                "5ratioILl1ELl1000000000EEEEERKNS1_17GlobalPlaneUpdateERKNS1_20KeyframePlaneStorageERKNS2"
                                "_6vectorINS0_5frame12KeyframeDataENS2_9allocatorISI_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes32CollectUpdatedPlanesAndKeyframesERKNSt3__16chrono8durationIxNS2_5ratioILl1ELl1000000000EEEEERKNS1_17GlobalPlaneUpdateERKNS1_20KeyframePlaneStorageERKNS2_6vectorINS0_5frame12KeyframeDataENS2_9allocatorISI_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes32CollectUpdatedPlanesAndKeyframesERKNSt3__16chrono8durationIxNS2_5ratioILl1ELl1000000000EEEEERKNS1_17GlobalPlaneUpdateERKNS1_20KeyframePlaneStorageERKNS2_6vectorINS0_5frame12KeyframeDataENS2_9allocatorISI_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236DEE84()
{
  return &unk_24EC57740;
}

_QWORD *sub_2236DEE90(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _OWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = v6;
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      ++v6;
      v7 = v10;
    }
    while (v10 != a3);
    if (v8 >= 0xFFFFFFFFFFFFFFFLL)
      sub_22316E078();
    v12 = operator new(16 * v6);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v6];
    do
    {
      *v12 = *(_OWORD *)((char *)v5 + 25);
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v11 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v11);
      }
      ++v12;
      v5 = v14;
    }
    while (v14 != a3);
    a1[1] = v12;
  }
  return a1;
}

void sub_2236DEF9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2236DEFB8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = *a2;
  v5 = v18;
  v6 = (uint64_t *)a2[4];
  if (v6)
  {
    if (v6 == a2 + 1)
    {
      v19 = v18;
      (*(void (**)(uint64_t *, _QWORD *))(*v6 + 24))(v6, v18);
    }
    else
    {
      v19 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v19 = 0;
  }
  v14 = *a3;
  v7 = v15;
  result = a3[4];
  if (result)
  {
    if ((uint64_t *)result == a3 + 1)
    {
      v16 = v15;
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 24))(result, v15);
    }
    else
    {
      v16 = (_QWORD *)a3[4];
      a3[4] = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  v9 = v19;
  *a1 = v17;
  v10 = a1 + 1;
  if (v9)
  {
    if (v9 == v18)
    {
      a1[4] = v10;
      result = (*(uint64_t (**)(_QWORD *))(v18[0] + 24))(v18);
    }
    else
    {
      a1[4] = v9;
      v19 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v11 = v16;
  a1[5] = v14;
  if (v11)
  {
    if (v11 == v15)
    {
      a1[9] = a1 + 6;
      result = (*(uint64_t (**)(_QWORD *))(v15[0] + 24))(v15);
    }
    else
    {
      a1[9] = v11;
      v16 = 0;
    }
  }
  else
  {
    a1[9] = 0;
  }
  if (v16 == v15)
  {
    v12 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_26;
    v12 = 5;
    v7 = v16;
  }
  result = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v7 + 8 * v12))(v7, v10);
LABEL_26:
  if (v19 == v18)
  {
    v13 = 4;
  }
  else
  {
    if (!v19)
      return result;
    v13 = 5;
    v5 = v19;
  }
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(*v5 + 8 * v13))(v5, v10);
}

void sub_2236DF1B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_2236DF1D8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2236DF1EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC57760;
  result[1] = v3;
  return result;
}

uint64_t sub_2236DF220(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC57760;
  a2[1] = v2;
  return result;
}

void sub_2236DF23C(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v4;
  unsigned __int8 *v5;
  uint64_t *v6;
  unsigned __int8 v7;
  const void *v8;
  size_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *p_p;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *shared_owners;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void **v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t v63;
  simd_float3x3 v64;
  double v65;
  int8x16_t v66;
  float32x2_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  BOOL v73;
  BOOL v74;
  uint64_t v75;
  unint64_t v76;
  float32x2_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  uint64_t v97;
  uint64_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float *v104;
  float32x2_t v105;
  float32x2_t v106;
  uint64_t v107;
  char v108;
  float v109;
  float *v110;
  float *v111;
  float v112;
  unsigned __int8 v113;
  const void *v114;
  size_t v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  const char *v120;
  size_t v121;
  unsigned __int8 v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v127;
  const char *v128;
  size_t v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v134;
  const char *v135;
  size_t v136;
  unsigned __int8 v137;
  const char *v138;
  size_t v139;
  _BYTE *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  size_t v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  size_t v152;
  size_t v153;
  _BYTE *v154;
  void *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  char *v164;
  char *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  unsigned __int8 v184;
  const char *v185;
  size_t v186;
  _BYTE *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  size_t v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  size_t v198;
  size_t v199;
  void **p_dst;
  void *v201;
  unsigned __int8 v202;
  const char *v203;
  size_t v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  size_t v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  size_t v216;
  size_t v217;
  _BYTE *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  void **v222;
  char v223;
  _QWORD *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  void *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  _QWORD *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  char *v243;
  char *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  unsigned __int8 *v264;
  uint64_t v265;
  unsigned __int8 *v266;
  unsigned __int8 *v267;
  unsigned __int8 *v268;
  unsigned __int8 *v269;
  unsigned int v270;
  unsigned int v271;
  int v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  const char *v281;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  void **v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  int v307;
  float32x4_t v308;
  unint64_t v309;
  float32x4_t v310;
  int v311;
  float32x4_t v312;
  std::__shared_weak_count_vtbl *v313;
  std::__shared_weak_count_vtbl *v314;
  simd_float3 v315;
  std::__shared_weak_count_vtbl *v316;
  std::__shared_weak_count *v317;
  float32x4_t v318;
  std::__shared_weak_count *v319;
  std::__shared_weak_count *v320;
  void **v321;
  simd_float3 v322;
  const char *v323;
  uint64_t v324;
  const char *v325;
  void **v326;
  simd_float3 v327;
  uint64_t v328;
  const char *v329;
  uint64_t v330;
  uint64_t **v331;
  uint64_t **v332;
  uint64_t **v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  unsigned __int8 *v338;
  _BYTE v339[24];
  float32x2_t v340;
  const char *v341;
  int v342;
  const char *v343;
  uint64_t v344;
  std::__shared_weak_count *v345;
  uint64_t v346;
  void **__dst;
  __int128 v348;
  _BYTE __src[30];
  _BYTE object[40];
  void *__p;
  float32x4_t v352;
  char v353;
  _QWORD v354[2];
  __int128 __s;
  std::__shared_weak_count *v356;
  char *v357;
  std::__shared_weak_count *v358;
  uint64_t v359;

  v359 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t ***)(a1 + 8);
  v5 = *a2;
  v6 = *v4;
  if (*((_QWORD *)*a2 + 30) == *((_QWORD *)*a2 + 31))
  {
    v7 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2236D6148(object);
    if (*(char *)(*(_QWORD *)object + 39) < 0)
    {
      v8 = *(const void **)(*(_QWORD *)object + 16);
      v9 = *(_QWORD *)(*(_QWORD *)object + 24);
    }
    else
    {
      v8 = (const void *)(*(_QWORD *)object + 16);
      v9 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
    }
    sub_223195728((uint64_t)&stru_255789280, v8, v9, "FUGP: GP %.13s is empty", 0x17uLL);
    sub_2236D2E58(&__dst);
    if (*(int *)__dst[7] <= 5)
    {
      v10 = *((unsigned __int8 *)__dst + 72);
      v11 = sub_22322F254((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
      v12 = v11;
      if (v10 || v11)
      {
        *(_QWORD *)v339 = &__dst;
        *(std::chrono::steady_clock::time_point *)&v339[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v339[16] = std::chrono::system_clock::now();
        v340.i32[0] = 5;
        v341 = "unknown file";
        v342 = 362;
        v344 = 0;
        v345 = 0;
        v343 = "unknown function";
        sub_2245664AC(v5, &__s);
        v13 = (const char *)(__dst + 2);
        v326 = __dst;
        v321 = __dst + 2;
        if (*((char *)__dst + 39) < 0)
        {
          v13 = (const char *)__dst[2];
          v14 = (size_t)__dst[3];
          v331 = v4;
          v334 = a3;
          v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v16 & 1) != 0)
            goto LABEL_13;
        }
        else
        {
          v14 = *((unsigned __int8 *)__dst + 39);
          v331 = v4;
          v334 = a3;
          v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v15 & 1) != 0)
            goto LABEL_13;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)object);
          if (object[24])
          {
            xmmword_255788F40 = *(_OWORD *)object;
            unk_255788F50 = *(_QWORD *)&object[16];
          }
          else
          {
            byte_255788F57 = 14;
            strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_13:
        if (byte_255788F57 >= 0)
          v17 = (const char *)&xmmword_255788F40;
        else
          v17 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v18 = byte_255788F57;
        else
          v18 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v17, v13);
        v19 = &object[8];
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v18 >= 0x17)
        {
          v20 = v12;
          v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v21 = v18 | 7;
          v22 = v21 + 1;
          v19 = operator new(v21 + 1);
          *(_QWORD *)&object[16] = v18;
          *(_QWORD *)&object[24] = v22 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v19;
          v12 = v20;
        }
        else
        {
          object[31] = v18;
          if (!v18)
          {
LABEL_27:
            v19[v18] = 0;
            object[32] = 1;
            p_p = &__p;
            if (v14 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v14 >= 0x17)
            {
              v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17)
                v24 = v14 | 7;
              v25 = v24 + 1;
              p_p = operator new(v24 + 1);
              v352.i64[0] = v14;
              v352.i64[1] = v25 | 0x8000000000000000;
              __p = p_p;
              v4 = v331;
            }
            else
            {
              v352.i8[15] = v14;
              v4 = v331;
              if (!v14)
              {
LABEL_35:
                *((_BYTE *)p_p + v14) = 0;
                v353 = 1;
                v26 = *(NSObject **)object;
                if (v352.i8[15] < 0)
                  operator delete(__p);
                a3 = v334;
                if (object[32] && (object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (!v12 || !*(_QWORD *)(v12 + 24))
                {
                  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
                  *(_QWORD *)object = 0xD04100202;
                  *(_WORD *)&object[8] = 2080;
                  *(_QWORD *)&object[10] = &__s;
                  v34 = (void *)_os_log_send_and_compose_impl();
                  if (v34)
                    free(v34);
                  if (!v10)
                    goto LABEL_84;
LABEL_83:
                  sub_2245664AC(v5, object);
                  sub_22322C138((uint64_t)v339, "FUGP: GP %.13s is empty", object);
                  sub_223182C08((uint64_t)v339);
LABEL_84:
                  sub_223182C08((uint64_t)v339);
                  v60 = v345;
                  if (v345)
                  {
                    p_shared_owners = (unint64_t *)&v345->__shared_owners_;
                    do
                      v62 = __ldaxr(p_shared_owners);
                    while (__stlxr(v62 - 1, p_shared_owners));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  goto LABEL_89;
                }
                v27 = _os_log_pack_size();
                v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
                v29 = (std::__shared_weak_count *)operator new();
                v29->__shared_owners_ = 0;
                v30 = (unint64_t *)&v29->__shared_owners_;
                v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v29->__shared_weak_owners_ = 0;
                v29[1].__vftable = v28;
                v31 = strlen((const char *)&__s);
                v317 = v29;
                if (v31 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v32 = v31;
                v307 = v10;
                v309 = v12;
                if (v31 >= 0x17)
                {
                  v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v31 | 7) != 0x17)
                    v35 = v31 | 7;
                  v36 = v35 + 1;
                  v33 = operator new(v35 + 1);
                  *(_QWORD *)&object[8] = v32;
                  *(_QWORD *)&object[16] = v36 | 0x8000000000000000;
                  *(_QWORD *)object = v33;
                }
                else
                {
                  object[23] = v31;
                  v33 = object;
                  if (!v31)
                    goto LABEL_56;
                }
                memcpy(v33, &__s, v32);
LABEL_56:
                v314 = v28;
                v33[v32] = 0;
                v37 = *(_QWORD *)object;
                *(_QWORD *)__src = *(_QWORD *)&object[8];
                *(_QWORD *)&__src[7] = *(_QWORD *)&object[15];
                v38 = object[23];
                v39 = operator new(0x38uLL);
                v40 = (std::__shared_weak_count *)v39;
                v39[1] = 0;
                v41 = v39 + 1;
                v39[3] = off_24EC1FA48;
                v42 = (char *)(v39 + 3);
                v39[2] = 0;
                v39[4] = v37;
                v43 = (char *)(v39 + 4);
                *v39 = &off_24EC1F9F8;
                v39[5] = *(_QWORD *)__src;
                *(_QWORD *)((char *)v39 + 47) = *(_QWORD *)&__src[7];
                *((_BYTE *)v39 + 55) = v38;
                do
                  v44 = __ldxr(v30);
                while (__stxr(v44 + 1, v30));
                do
                  v45 = __ldxr(v41);
                while (__stxr(v45 + 1, v41));
                do
                  v46 = __ldaxr(v41);
                while (__stlxr(v46 - 1, v41));
                if (!v46)
                {
                  (*(void (**)(_QWORD *))(*v39 + 16))(v39);
                  std::__shared_weak_count::__release_weak(v40);
                }
                do
                  v47 = __ldaxr(v30);
                while (__stlxr(v47 - 1, v30));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                  std::__shared_weak_count::__release_weak(v317);
                }
                if (SHIBYTE(v40[2].__vftable) >= 0)
                  shared_owners = v43;
                else
                  shared_owners = (char *)v40[1].__shared_owners_;
                v49 = _os_log_pack_fill();
                *(_DWORD *)v49 = 68157954;
                *(_DWORD *)(v49 + 4) = 13;
                *(_WORD *)(v49 + 8) = 2080;
                *(_QWORD *)(v49 + 10) = shared_owners;
                v50 = operator new();
                v51 = (void *)*((unsigned __int8 *)v326 + 39);
                v52 = v321;
                if ((char)v51 < 0)
                {
                  v52 = (void **)v326[2];
                  v51 = v326[3];
                }
                *(_QWORD *)v50 = v314;
                *(_QWORD *)(v50 + 8) = v314;
                *(_QWORD *)(v50 + 16) = v317;
                *(_QWORD *)(v50 + 24) = v42;
                *(_QWORD *)(v50 + 32) = v40;
                *(_QWORD *)(v50 + 40) = v52;
                *(_QWORD *)(v50 + 48) = v51;
                *(_BYTE *)(v50 + 56) = 16;
                *(_QWORD *)object = v50;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v309 + 24) + 40))(*(_QWORD *)(v309 + 24), object);
                a3 = v334;
                v53 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                v4 = v331;
                if (v53)
                {
                  v54 = *(std::__shared_weak_count **)(v53 + 32);
                  if (v54)
                  {
                    v55 = (unint64_t *)&v54->__shared_owners_;
                    do
                      v56 = __ldaxr(v55);
                    while (__stlxr(v56 - 1, v55));
                    if (!v56)
                    {
                      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                      std::__shared_weak_count::__release_weak(v54);
                    }
                  }
                  v57 = *(std::__shared_weak_count **)(v53 + 16);
                  if (v57)
                  {
                    v58 = (unint64_t *)&v57->__shared_owners_;
                    do
                      v59 = __ldaxr(v58);
                    while (__stlxr(v59 - 1, v58));
                    if (!v59)
                    {
                      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                      std::__shared_weak_count::__release_weak(v57);
                    }
                  }
                  MEMORY[0x227684CE8](v53, 0x10F0C40B62ED6C6);
                }
                if (!v307)
                  goto LABEL_84;
                goto LABEL_83;
              }
            }
            memmove(p_p, v13, v14);
            goto LABEL_35;
          }
        }
        memmove(v19, v17, v18);
        goto LABEL_27;
      }
    }
  }
LABEL_89:
  if (!v5[80])
  {
    v113 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_2236D6148(object);
    if (*(char *)(*(_QWORD *)object + 39) < 0)
    {
      v114 = *(const void **)(*(_QWORD *)object + 16);
      v115 = *(_QWORD *)(*(_QWORD *)object + 24);
    }
    else
    {
      v114 = (const void *)(*(_QWORD *)object + 16);
      v115 = *(unsigned __int8 *)(*(_QWORD *)object + 39);
    }
    sub_223195728((uint64_t)&stru_255789280, v114, v115, "FUGP: GP %.13s does not have a convex hull.", 0x2BuLL);
    sub_2236D2E58(&__dst);
    if (*(int *)__dst[7] > 5)
      goto LABEL_390;
    v116 = *((unsigned __int8 *)__dst + 72);
    v117 = sub_22322F254((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
    v118 = v117;
    if (!v116 && !v117)
      goto LABEL_390;
    *(_QWORD *)v339 = &__dst;
    *(std::chrono::steady_clock::time_point *)&v339[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v339[16] = std::chrono::system_clock::now();
    v340.i32[0] = 5;
    v341 = "unknown file";
    v342 = 369;
    v344 = 0;
    v345 = 0;
    v343 = "unknown function";
    sub_2245664AC(v5, &__s);
    v119 = **(_QWORD **)v339;
    v120 = (const char *)(**(_QWORD **)v339 + 16);
    v328 = **(_QWORD **)v339;
    v323 = v120;
    if (*(char *)(**(_QWORD **)v339 + 39) < 0)
    {
      v120 = *(const char **)(v119 + 16);
      v121 = *(_QWORD *)(v119 + 24);
      v333 = v4;
      v336 = a3;
      v137 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v137 & 1) != 0)
        goto LABEL_178;
    }
    else
    {
      v121 = *(unsigned __int8 *)(**(_QWORD **)v339 + 39);
      v333 = v4;
      v336 = a3;
      v122 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v122 & 1) != 0)
        goto LABEL_178;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      if (object[24])
      {
        xmmword_255788F40 = *(_OWORD *)object;
        unk_255788F50 = *(_QWORD *)&object[16];
      }
      else
      {
        byte_255788F57 = 14;
        strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_178:
    if (byte_255788F57 >= 0)
      v138 = (const char *)&xmmword_255788F40;
    else
      v138 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v139 = byte_255788F57;
    else
      v139 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v138, v120);
    v140 = &object[8];
    if (v139 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v139 >= 0x17)
    {
      v141 = v116;
      v142 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v139 | 7) != 0x17)
        v142 = v139 | 7;
      v143 = v142 + 1;
      v140 = operator new(v142 + 1);
      *(_QWORD *)&object[16] = v139;
      *(_QWORD *)&object[24] = v143 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v140;
      v116 = v141;
    }
    else
    {
      object[31] = v139;
      if (!v139)
      {
LABEL_192:
        v140[v139] = 0;
        object[32] = 1;
        v144 = &__p;
        if (v121 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v121 >= 0x17)
        {
          v145 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v121 | 7) != 0x17)
            v145 = v121 | 7;
          v146 = v145 + 1;
          v144 = operator new(v145 + 1);
          v352.i64[0] = v121;
          v352.i64[1] = v146 | 0x8000000000000000;
          __p = v144;
          v4 = v333;
        }
        else
        {
          v352.i8[15] = v121;
          v4 = v333;
          if (!v121)
          {
LABEL_200:
            *((_BYTE *)v144 + v121) = 0;
            v353 = 1;
            v147 = *(NSObject **)object;
            if (v352.i8[15] < 0)
              operator delete(__p);
            a3 = v336;
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v118 || !*(_QWORD *)(v118 + 24))
            {
              os_log_type_enabled(v147, OS_LOG_TYPE_ERROR);
              *(_QWORD *)object = 0xD04100202;
              *(_WORD *)&object[8] = 2080;
              *(_QWORD *)&object[10] = &__s;
              v155 = (void *)_os_log_send_and_compose_impl();
              if (v155)
                free(v155);
              goto LABEL_245;
            }
            v148 = _os_log_pack_size();
            v149 = (std::__shared_weak_count_vtbl *)operator new(v148, (std::align_val_t)8uLL);
            v150 = (std::__shared_weak_count *)operator new();
            v150->__shared_owners_ = 0;
            v151 = (unint64_t *)&v150->__shared_owners_;
            v150->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v150->__shared_weak_owners_ = 0;
            v150[1].__vftable = v149;
            v152 = strlen((const char *)&__s);
            v319 = v150;
            if (v152 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v153 = v152;
            v316 = v149;
            if (v152 >= 0x17)
            {
              v156 = v116;
              v157 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v152 | 7) != 0x17)
                v157 = v152 | 7;
              v158 = v157 + 1;
              v154 = operator new(v157 + 1);
              *(_QWORD *)&object[8] = v153;
              *(_QWORD *)&object[16] = v158 | 0x8000000000000000;
              *(_QWORD *)object = v154;
              v116 = v156;
            }
            else
            {
              object[23] = v152;
              v154 = object;
              if (!v152)
              {
LABEL_219:
                v311 = v116;
                v154[v153] = 0;
                v159 = *(_QWORD *)object;
                *(_QWORD *)__src = *(_QWORD *)&object[8];
                *(_QWORD *)&__src[7] = *(_QWORD *)&object[15];
                v160 = object[23];
                v161 = operator new(0x38uLL);
                v162 = (std::__shared_weak_count *)v161;
                v161[1] = 0;
                v163 = v161 + 1;
                v161[3] = off_24EC1FA48;
                v164 = (char *)(v161 + 3);
                v161[2] = 0;
                v161[4] = v159;
                v165 = (char *)(v161 + 4);
                *v161 = &off_24EC1F9F8;
                v161[5] = *(_QWORD *)__src;
                *(_QWORD *)((char *)v161 + 47) = *(_QWORD *)&__src[7];
                *((_BYTE *)v161 + 55) = v160;
                do
                  v166 = __ldxr(v151);
                while (__stxr(v166 + 1, v151));
                a3 = v336;
                do
                  v167 = __ldxr(v163);
                while (__stxr(v167 + 1, v163));
                do
                  v168 = __ldaxr(v163);
                while (__stlxr(v168 - 1, v163));
                if (!v168)
                {
                  (*(void (**)(_QWORD *))(*v161 + 16))(v161);
                  std::__shared_weak_count::__release_weak(v162);
                }
                do
                  v169 = __ldaxr(v151);
                while (__stlxr(v169 - 1, v151));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                  std::__shared_weak_count::__release_weak(v319);
                }
                if (SHIBYTE(v162[2].__vftable) < 0)
                  v165 = (char *)v162[1].__shared_owners_;
                v170 = _os_log_pack_fill();
                *(_DWORD *)v170 = 68157954;
                *(_DWORD *)(v170 + 4) = 13;
                *(_WORD *)(v170 + 8) = 2080;
                *(_QWORD *)(v170 + 10) = v165;
                v171 = operator new();
                v172 = *(unsigned __int8 *)(v328 + 39);
                v173 = v323;
                if ((v172 & 0x80u) != 0)
                {
                  v173 = *(const char **)(v328 + 16);
                  v172 = *(_QWORD *)(v328 + 24);
                }
                *(_QWORD *)v171 = v316;
                *(_QWORD *)(v171 + 8) = v316;
                *(_QWORD *)(v171 + 16) = v319;
                *(_QWORD *)(v171 + 24) = v164;
                *(_QWORD *)(v171 + 32) = v162;
                *(_QWORD *)(v171 + 40) = v173;
                *(_QWORD *)(v171 + 48) = v172;
                *(_BYTE *)(v171 + 56) = 16;
                *(_QWORD *)object = v171;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v118 + 24) + 40))(*(_QWORD *)(v118 + 24), object);
                v174 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                v4 = v333;
                v116 = v311;
                if (v174)
                {
                  v175 = *(std::__shared_weak_count **)(v174 + 32);
                  if (v175)
                  {
                    v176 = (unint64_t *)&v175->__shared_owners_;
                    do
                      v177 = __ldaxr(v176);
                    while (__stlxr(v177 - 1, v176));
                    if (!v177)
                    {
                      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                      std::__shared_weak_count::__release_weak(v175);
                    }
                  }
                  v178 = *(std::__shared_weak_count **)(v174 + 16);
                  if (v178)
                  {
                    v179 = (unint64_t *)&v178->__shared_owners_;
                    do
                      v180 = __ldaxr(v179);
                    while (__stlxr(v180 - 1, v179));
                    if (!v180)
                    {
                      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                      std::__shared_weak_count::__release_weak(v178);
                    }
                  }
                  MEMORY[0x227684CE8](v174, 0x10F0C40B62ED6C6);
                }
LABEL_245:
                if (v116)
                {
                  sub_2245664AC(v5, object);
                  sub_22322C138((uint64_t)v339, "FUGP: GP %.13s does not have a convex hull.", object);
                  sub_223182C08((uint64_t)v339);
                }
                sub_223182C08((uint64_t)v339);
                v181 = v345;
                if (v345)
                {
                  v182 = (unint64_t *)&v345->__shared_owners_;
                  do
                    v183 = __ldaxr(v182);
                  while (__stlxr(v183 - 1, v182));
                  if (!v183)
                  {
                    ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                    std::__shared_weak_count::__release_weak(v181);
                  }
                }
                goto LABEL_390;
              }
            }
            memcpy(v154, &__s, v153);
            goto LABEL_219;
          }
        }
        memmove(v144, v120, v121);
        goto LABEL_200;
      }
    }
    memmove(v140, v138, v139);
    goto LABEL_192;
  }
  if (*(_BYTE *)(*v6 + 8))
  {
    v63 = v5[48];
    if (v63 <= 0x29 && ((*(_QWORD *)*v6 >> v63) & 1) != 0)
      goto LABEL_390;
  }
  sub_223735620(v6[1], (uint64_t)v5, (uint64_t *)&v337);
  v332 = v4;
  v335 = a3;
  v68 = (unsigned __int8 *)v337;
  v69 = v338;
  if ((unint64_t)(v338 - (_BYTE *)v337) > 0x40)
    goto LABEL_473;
  if (v337 != v338)
  {
    while (1)
    {
      v70 = *((_QWORD *)v68 + 3);
      v71 = *(_QWORD *)(v70 + 208);
      v72 = *(_QWORD **)(v70 + 216);
      if ((_QWORD *)v71 != v72)
      {
        while (1)
        {
          v73 = *(_QWORD *)v71 == *(_QWORD *)v68 && *(_QWORD *)(v71 + 8) == *((_QWORD *)v68 + 1);
          if (v73)
            break;
          v71 += 424;
          if ((_QWORD *)v71 == v72)
            goto LABEL_163;
        }
      }
      v74 = v71 == (_QWORD)v72;
      v75 = (_QWORD *)v71 == v72 ? 0 : v71;
      if (v74)
        break;
      v76 = v75 | v71 & 0xFFFFFFFFFFFFFF00;
      if (*(_DWORD *)(v76 + 0x160) > 1u)
        goto LABEL_473;
      v64.columns[1].i32[0] = *(_DWORD *)(v70 + 152);
      LODWORD(v65) = *(_DWORD *)(v70 + 168);
      v66.i32[0] = *(_DWORD *)(v70 + 184);
      v77 = *(float32x2_t *)((v75 | v71 & 0xFFFFFFFFFFFFFF00) + 0x10);
      v67.i32[0] = *(_DWORD *)((v75 | v71 & 0xFFFFFFFFFFFFFF00) + 0x18);
      *(float32x2_t *)v64.columns[0].f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v70 + 144), v77.f32[0]), *(float32x2_t *)(v70 + 160), v77, 1), *(float32x2_t *)(v70 + 176), v67.f32[0]);
      *(float32x2_t *)&v64.columns[0].u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v64.columns[1].f32, v77), *(float32x2_t *)&v65, v77, 1), v67, *(float32x2_t *)v66.i8);
      v64.columns[1].i64[0] = *(_QWORD *)(v70 + 192);
      v64.columns[1].i32[2] = *(_DWORD *)(v70 + 200);
      v64.columns[0] = (simd_float3)vaddq_f32((float32x4_t)v64.columns[0], (float32x4_t)v64.columns[1]);
      *(int32x2_t *)v64.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)v64.columns[0].f32, 1);
      v64.columns[2].i64[0] = vextq_s8((int8x16_t)v64.columns[0], (int8x16_t)v64.columns[0], 8uLL).u64[0];
      v65 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v64.columns[0].f32, *(float32x2_t *)v64.columns[0].f32), *(float32x2_t *)v64.columns[1].f32, *(float32x2_t *)v64.columns[0].f32, 1), *(float32x2_t *)v64.columns[2].f32, *(float32x2_t *)v64.columns[2].f32));
      if (*(float *)&v65 > 1.0)
        goto LABEL_473;
      v78 = 44;
      do
      {
        v79 = *(_DWORD *)(v76 + v78);
        if (v79)
          break;
        v73 = v78 == 208;
        v78 += 4;
      }
      while (!v73);
      if (v79)
      {
        v80 = 0;
        v81 = (((unint64_t)sub_22372619C((unsigned int *)(v76 + 44)) - v76 - 44) >> 2);
        if (v81 > 0x22)
          goto LABEL_387;
        if (((1 << v81) & 0x500008461) == 0)
        {
          if (v81 != 19)
            goto LABEL_387;
          v64.columns[0].f32[0] = fabsf(*(float *)(v76 + 36));
          v82 = v64.columns[0].f32[0] <= 0.052336 ? 2 : 4;
          v64.columns[1].i32[0] = 1065330231;
          v83 = v64.columns[0].f32[0] >= 0.99863 ? 1 : v82;
          sub_223F2B7AC(v76 + 16, v83, (float32x4_t *)object, (float32x4_t)v64.columns[0], (float32x4_t)v64.columns[1]);
          v64.columns[2] = *(simd_float3 *)(v70 + 144);
          v86 = *(float32x4_t *)(v70 + 160);
          v64.columns[1] = *(simd_float3 *)(v70 + 176);
          v64.columns[0] = *(simd_float3 *)(v70 + 192);
          v87 = *(float32x4_t *)object;
          v88 = *(float32x4_t *)&object[16];
          v89 = v352;
          v91 = *(_QWORD *)(v76 + 360);
          v90 = *(_QWORD *)(v76 + 368);
          v356 = 0;
          __s = 0uLL;
          v92 = v90 - v91;
          if (v90 == v91)
          {
            v93 = 0;
          }
          else
          {
            v308 = *(float32x4_t *)object;
            v310 = *(float32x4_t *)&object[16];
            v312 = v352;
            v315 = v64.columns[2];
            v318 = v86;
            v322 = v64.columns[1];
            v327 = v64.columns[0];
            if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFDLL)
              sub_22316E078();
            v93 = (float *)operator new(2 * v92);
            *(_QWORD *)&__s = v93;
            *((_QWORD *)&__s + 1) = v93;
            v356 = (std::__shared_weak_count *)&v93[2 * (v92 >> 2)];
            v64.columns[1] = v322;
            v64.columns[0] = v327;
            v64.columns[2] = v315;
            v86 = v318;
            v88 = v310;
            v89 = v312;
            v87 = v308;
          }
          if (!*(_BYTE *)(v76 + 384))
            sub_22324A974();
          v94 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v64.columns[2], v87.f32[0]), v86, *(float32x2_t *)v87.f32, 1), (float32x4_t)v64.columns[1], v87, 2), (float32x4_t)v64.columns[0], v87, 3);
          v95 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v64.columns[2], v88.f32[0]), v86, *(float32x2_t *)v88.f32, 1), (float32x4_t)v64.columns[1], v88, 2), (float32x4_t)v64.columns[0], v88, 3);
          v96 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v64.columns[2], v89.f32[0]), v86, *(float32x2_t *)v89.f32, 1), (float32x4_t)v64.columns[1], v89, 2), (float32x4_t)v64.columns[0], v89, 3);
          v97 = *(_QWORD *)(v76 + 360);
          v98 = *(_QWORD *)(v76 + 368);
          v99 = *(float32x2_t *)(v70 + 96);
          v89.i32[0] = *(_DWORD *)(v70 + 104);
          v67 = *(float32x2_t *)(v70 + 108);
          v84.i32[0] = *(_DWORD *)(v70 + 116);
          v100 = *(float32x2_t *)(v70 + 120);
          v85.i32[0] = *(_DWORD *)(v70 + 128);
          v101 = (float32x2_t)vextq_s8(v94, v94, 8uLL).u64[0];
          v102 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v99, *(float *)v94.i32), v67, *(float32x2_t *)v94.i8, 1), v100, (float32x4_t)v94, 2);
          v103 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v94.i8), v84, *(float32x2_t *)v94.i8, 1);
          *(float32x2_t *)v94.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v99, *(float *)v95.i32), v67, *(float32x2_t *)v95.i8, 1), v100, (float32x4_t)v95, 2);
          v94.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v95.i8), v84, *(float32x2_t *)v95.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL), v85);
          *(float32x2_t *)v95.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v99, *(float *)v96.i32), v67, *(float32x2_t *)v96.i8, 1), v100, (float32x4_t)v96, 2);
          v95.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v96.i8), v84, *(float32x2_t *)v96.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL), v85);
          *(float32x2_t *)v64.columns[1].f32 = vmla_f32(v103, v101, v85);
          *(float32x2_t *)object = v102;
          *(_DWORD *)&object[8] = v64.columns[1].i32[0];
          *(_DWORD *)&object[20] = v94.i32[2];
          *(_QWORD *)&object[12] = v94.i64[0];
          *(_DWORD *)&object[32] = v95.i32[2];
          *(_QWORD *)&object[24] = v95.i64[0];
          v64.columns[2] = (simd_float3)vextq_s8(vextq_s8(v94, v94, 0xCuLL), v94, 8uLL);
          v66 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)v64.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), v95, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), v94, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v95, v95, 0xCuLL), v95, 8uLL));
          v65 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)v66.i8, 1));
          *(float32x2_t *)v64.columns[2].f32 = vmla_lane_f32(vmul_f32(v102, *(float32x2_t *)v66.i8), *(float32x2_t *)&v65, v102, 1);
          v64.columns[0] = (simd_float3)vextq_s8(v66, v66, 8uLL);
          *(float32x2_t *)v64.columns[2].f32 = vmla_f32(*(float32x2_t *)v64.columns[2].f32, *(float32x2_t *)v64.columns[0].f32, *(float32x2_t *)v64.columns[1].f32);
          if (v64.columns[2].f32[0] == 0.0)
          {
            v104 = v93;
          }
          else
          {
            v64.columns[0].f32[0] = 0.0 - v64.columns[2].f32[0];
            if (v64.columns[2].f32[0] >= 0.0)
              v64.columns[0].f32[0] = v64.columns[2].f32[0];
            v64.columns[1].i32[0] = 897988541;
            v104 = v93;
            if (v64.columns[0].f32[0] > 0.000001)
            {
              v64.columns[0] = (simd_float3)sub_22322BB84((uint64_t)object, (uint64_t)v339, v64);
              if (v98 != v97)
              {
                v107 = 4 * ((v98 - v97) >> 2);
                do
                {
                  v64.columns[0].i16[0] = *(_WORD *)(v97 + v107 - 4);
                  v64.columns[0].i64[0] = vmovl_s16(*(int16x4_t *)v64.columns[0].f32).u64[0];
                  v64.columns[0].f32[0] = (float)v64.columns[0].i32[0];
                  v64.columns[1].i16[0] = *(_WORD *)(v97 + v107 - 2);
                  v64.columns[1].i64[0] = vmovl_s16(*(int16x4_t *)v64.columns[1].f32).u64[0];
                  v64.columns[1].f32[0] = (float)v64.columns[1].i32[0];
                  v105.i32[0] = *(_DWORD *)&v339[20];
                  v106.i32[0] = (int)v341;
                  *(float32x2_t *)__src = vdiv_f32(vadd_f32(v340, vmla_n_f32(vmul_n_f32(*(float32x2_t *)v339, v64.columns[0].f32[0]), *(float32x2_t *)&v339[12], v64.columns[1].f32[0])), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v106, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v339, *(int8x16_t *)v339, 8uLL), *(float32x2_t *)v64.columns[0].f32), *(float32x2_t *)v64.columns[1].f32, v105)), 0));
                  __dst = (void **)&__s;
                  sub_2232EA538(&__dst, __src);
                  v107 -= 4;
                }
                while (v107);
              }
              v104 = (float *)*((_QWORD *)&__s + 1);
              v93 = (float *)__s;
            }
          }
          v108 = (_BYTE)v104 - (_BYTE)v93;
          v109 = 0.0;
          if ((unint64_t)((char *)v104 - (char *)v93) >= 0x18)
          {
            v110 = v104 - 2;
            if ((((_BYTE)v104 - (_BYTE)v93) & 8) != 0)
              v104 -= 2;
            if (v93 == v104)
            {
              v64.columns[0].i64[0] = 0;
              v104 = v93;
            }
            else
            {
              v64.columns[1].f32[0] = *v110;
              v64.columns[0].i64[0] = 0;
              v111 = v93;
              do
              {
                v112 = v111[1];
                *(double *)v64.columns[1].i64 = (float)(v110[1] + v112) * (float)(v64.columns[1].f32[0] - *v111);
                *(double *)v64.columns[0].i64 = *(double *)v64.columns[0].i64 + *(double *)v64.columns[1].i64;
                v110 = v111 + 2;
                v64.columns[1].f32[0] = v111[2];
                *(double *)v64.columns[2].i64 = (float)(v112 + v111[3]);
                v65 = (float)(*v111 - v64.columns[1].f32[0]);
                *(double *)v64.columns[0].i64 = *(double *)v64.columns[0].i64 + *(double *)v64.columns[2].i64 * v65;
                v111 += 4;
              }
              while (v111 != v104);
              v110 = v111 - 2;
            }
            if ((v108 & 8) != 0)
            {
              *(double *)v64.columns[1].i64 = (float)(v110[1] + v104[1]) * (float)(*v110 - *v104);
              *(double *)v64.columns[0].i64 = *(double *)v64.columns[0].i64 + *(double *)v64.columns[1].i64;
            }
            v109 = *(double *)v64.columns[0].i64 * 0.5;
          }
          if (v93)
          {
            *((_QWORD *)&__s + 1) = v93;
            operator delete(v93);
          }
          if (fabsf(v109) >= 0.35)
            goto LABEL_473;
        }
      }
      v68 += 32;
      if (v68 == v69)
        goto LABEL_170;
    }
LABEL_163:
    sub_2236D2E58(&v346);
    if (**(int **)(v346 + 56) <= 4)
    {
      v123 = *(unsigned __int8 *)(v346 + 72);
      v124 = sub_22322F254(v346, "OSLogSurrogateAppender", 1, 0);
      v125 = v124;
      if (v123 || v124 != 0)
      {
        *(_QWORD *)v339 = &v346;
        *(std::chrono::steady_clock::time_point *)&v339[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v339[16] = std::chrono::system_clock::now();
        v340.i32[0] = 4;
        v341 = "unknown file";
        v342 = 63;
        v344 = 0;
        v345 = 0;
        v343 = "unknown function";
        sub_2245664AC(v68, __src);
        v127 = **(_QWORD **)v339;
        v128 = (const char *)(**(_QWORD **)v339 + 16);
        v329 = v128;
        v324 = **(_QWORD **)v339;
        if (*(char *)(**(_QWORD **)v339 + 39) < 0)
        {
          v128 = *(const char **)(v127 + 16);
          v129 = *(_QWORD *)(v127 + 24);
        }
        else
        {
          v129 = *(unsigned __int8 *)(**(_QWORD **)v339 + 39);
        }
        v184 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v184 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)object);
          sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v185 = (const char *)&xmmword_255788F40;
        else
          v185 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v186 = byte_255788F57;
        else
          v186 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v185, v128);
        v187 = &object[8];
        if (v186 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v186 >= 0x17)
        {
          v188 = v123;
          v189 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v186 | 7) != 0x17)
            v189 = v186 | 7;
          v190 = v189 + 1;
          v187 = operator new(v189 + 1);
          *(_QWORD *)&object[16] = v186;
          *(_QWORD *)&object[24] = v190 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v187;
          v123 = v188;
        }
        else
        {
          object[31] = v186;
          if (!v186)
          {
LABEL_268:
            v187[v186] = 0;
            object[32] = 1;
            v191 = &__p;
            if (v129 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v129 >= 0x17)
            {
              v192 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v129 | 7) != 0x17)
                v192 = v129 | 7;
              v193 = v192 + 1;
              v191 = operator new(v192 + 1);
              v352.i64[0] = v129;
              v352.i64[1] = v193 | 0x8000000000000000;
              __p = v191;
            }
            else
            {
              v352.i8[15] = v129;
              if (!v129)
              {
LABEL_276:
                *((_BYTE *)v191 + v129) = 0;
                v353 = 1;
                v194 = *(NSObject **)object;
                if (v352.i8[15] < 0)
                  operator delete(__p);
                if (object[32] && (object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (!v125 || !*(_QWORD *)(v125 + 24))
                {
                  os_log_type_enabled(v194, OS_LOG_TYPE_ERROR);
                  *(_QWORD *)object = 0xD04100202;
                  *(_WORD *)&object[8] = 2080;
                  *(_QWORD *)&object[10] = __src;
                  v201 = (void *)_os_log_send_and_compose_impl();
                  if (v201)
                    free(v201);
                  goto LABEL_466;
                }
                v195 = _os_log_pack_size();
                v196 = (std::__shared_weak_count_vtbl *)operator new(v195, (std::align_val_t)8uLL);
                v197 = (std::__shared_weak_count *)operator new();
                v197->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v197->__shared_owners_ = 0;
                v197->__shared_weak_owners_ = 0;
                v197[1].__vftable = v196;
                *(_QWORD *)&__s = v196;
                *((_QWORD *)&__s + 1) = v196;
                v357 = 0;
                v358 = 0;
                v356 = v197;
                v198 = strlen(__src);
                if (v198 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v199 = v198;
                if (v198 >= 0x17)
                {
                  v220 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v198 | 7) != 0x17)
                    v220 = v198 | 7;
                  v221 = v220 + 1;
                  p_dst = (void **)operator new(v220 + 1);
                  *(_QWORD *)&v348 = v199;
                  *((_QWORD *)&v348 + 1) = v221 | 0x8000000000000000;
                  __dst = p_dst;
                }
                else
                {
                  HIBYTE(v348) = v198;
                  p_dst = (void **)&__dst;
                  if (!v198)
                  {
LABEL_334:
                    *((_BYTE *)p_dst + v199) = 0;
                    v222 = __dst;
                    v354[0] = v348;
                    *(_QWORD *)((char *)v354 + 7) = *(_QWORD *)((char *)&v348 + 7);
                    v223 = HIBYTE(v348);
                    v224 = operator new(0x38uLL);
                    v224[1] = 0;
                    v224[2] = 0;
                    v224[3] = off_24EC1FA48;
                    *v224 = &off_24EC1F9F8;
                    v225 = v354[0];
                    v224[4] = v222;
                    v224[5] = v225;
                    *(_QWORD *)((char *)v224 + 47) = *(_QWORD *)((char *)v354 + 7);
                    *((_BYTE *)v224 + 55) = v223;
                    v354[0] = 0;
                    *(_QWORD *)((char *)v354 + 7) = 0;
                    v226 = v358;
                    v357 = (char *)(v224 + 3);
                    v358 = (std::__shared_weak_count *)v224;
                    if (v226)
                    {
                      v227 = (unint64_t *)&v226->__shared_owners_;
                      do
                        v228 = __ldaxr(v227);
                      while (__stlxr(v228 - 1, v227));
                      if (!v228)
                      {
                        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                        std::__shared_weak_count::__release_weak(v226);
                      }
                    }
                    *(_OWORD *)object = __s;
                    v229 = v357;
                    *(_QWORD *)&object[16] = v356;
                    if (v356)
                    {
                      v230 = (unint64_t *)&v356->__shared_owners_;
                      do
                        v231 = __ldxr(v230);
                      while (__stxr(v231 + 1, v230));
                    }
                    v232 = v358;
                    *(_QWORD *)&object[24] = v229;
                    *(_QWORD *)&object[32] = v358;
                    if (v358)
                    {
                      v233 = (unint64_t *)&v358->__shared_owners_;
                      do
                        v234 = __ldxr(v233);
                      while (__stxr(v234 + 1, v233));
                      __p = v229;
                      do
                        v235 = __ldaxr(v233);
                      while (__stlxr(v235 - 1, v233));
                      if (!v235)
                      {
                        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                        std::__shared_weak_count::__release_weak(v232);
                      }
                    }
                    else
                    {
                      __p = v229;
                    }
                    v273 = v356;
                    if (v356)
                    {
                      v274 = (unint64_t *)&v356->__shared_owners_;
                      do
                        v275 = __ldaxr(v274);
                      while (__stlxr(v275 - 1, v274));
                      if (!v275)
                      {
                        ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                        std::__shared_weak_count::__release_weak(v273);
                      }
                    }
                    v276 = *(_QWORD *)object;
                    if (*((char *)__p + 31) >= 0)
                      v277 = (char *)__p + 8;
                    else
                      v277 = (char *)*((_QWORD *)__p + 1);
                    v278 = _os_log_pack_fill();
                    *(_DWORD *)v278 = 68157954;
                    *(_DWORD *)(v278 + 4) = 13;
                    *(_WORD *)(v278 + 8) = 2080;
                    *(_QWORD *)(v278 + 10) = v277;
                    v279 = operator new();
                    v280 = *(unsigned __int8 *)(v324 + 39);
                    v281 = *(const char **)(v324 + 16);
                    v282 = *(_QWORD *)(v324 + 24);
                    v283 = *(_OWORD *)&object[24];
                    *(_OWORD *)(v279 + 8) = *(_OWORD *)&object[8];
                    if ((v280 & 0x80u) != 0)
                      v280 = v282;
                    else
                      v281 = v329;
                    *(_QWORD *)v279 = v276;
                    *(_QWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = 0;
                    *(_OWORD *)(v279 + 24) = v283;
                    *(_QWORD *)&object[24] = 0;
                    *(_QWORD *)&object[32] = 0;
                    *(_QWORD *)(v279 + 40) = v281;
                    *(_QWORD *)(v279 + 48) = v280;
                    *(_BYTE *)(v279 + 56) = 16;
                    __dst = 0;
                    *(_QWORD *)&__s = v279;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v125 + 24) + 40))(*(_QWORD *)(v125 + 24), &__s);
                    v284 = __s;
                    *(_QWORD *)&__s = 0;
                    if (v284)
                    {
                      v285 = *(std::__shared_weak_count **)(v284 + 32);
                      if (v285)
                      {
                        v286 = (unint64_t *)&v285->__shared_owners_;
                        do
                          v287 = __ldaxr(v286);
                        while (__stlxr(v287 - 1, v286));
                        if (!v287)
                        {
                          ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                          std::__shared_weak_count::__release_weak(v285);
                        }
                      }
                      v288 = *(std::__shared_weak_count **)(v284 + 16);
                      if (v288)
                      {
                        v289 = (unint64_t *)&v288->__shared_owners_;
                        do
                          v290 = __ldaxr(v289);
                        while (__stlxr(v290 - 1, v289));
                        if (!v290)
                        {
                          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                          std::__shared_weak_count::__release_weak(v288);
                        }
                      }
                      MEMORY[0x227684CE8](v284, 0x10F0C40B62ED6C6);
                      v291 = __dst;
                      __dst = 0;
                      if (v291)
                      {
                        v292 = (std::__shared_weak_count *)v291[4];
                        if (v292)
                        {
                          v293 = (unint64_t *)&v292->__shared_owners_;
                          do
                            v294 = __ldaxr(v293);
                          while (__stlxr(v294 - 1, v293));
                          if (!v294)
                          {
                            ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                            std::__shared_weak_count::__release_weak(v292);
                          }
                        }
                        v295 = (std::__shared_weak_count *)v291[2];
                        if (v295)
                        {
                          v296 = (unint64_t *)&v295->__shared_owners_;
                          do
                            v297 = __ldaxr(v296);
                          while (__stlxr(v297 - 1, v296));
                          if (!v297)
                          {
                            ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                            std::__shared_weak_count::__release_weak(v295);
                          }
                        }
                        MEMORY[0x227684CE8](v291, 0x10F0C40B62ED6C6);
                      }
                    }
                    v298 = *(std::__shared_weak_count **)&object[32];
                    if (*(_QWORD *)&object[32])
                    {
                      v299 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                      do
                        v300 = __ldaxr(v299);
                      while (__stlxr(v300 - 1, v299));
                      if (!v300)
                      {
                        ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                        std::__shared_weak_count::__release_weak(v298);
                      }
                    }
                    v301 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                    {
                      v302 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                      do
                        v303 = __ldaxr(v302);
                      while (__stlxr(v303 - 1, v302));
                      if (!v303)
                      {
                        ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                        std::__shared_weak_count::__release_weak(v301);
                      }
                    }
LABEL_466:
                    if (v123)
                    {
                      sub_2245664AC(v68, object);
                      sub_22322C138((uint64_t)v339, "IOCBU: KFP %.13s does not exist", object);
                      sub_223182C08((uint64_t)v339);
                    }
                    sub_223182C08((uint64_t)v339);
                    v304 = v345;
                    if (v345)
                    {
                      v305 = (unint64_t *)&v345->__shared_owners_;
                      do
                        v306 = __ldaxr(v305);
                      while (__stlxr(v306 - 1, v305));
                      if (!v306)
                      {
                        ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                        std::__shared_weak_count::__release_weak(v304);
                      }
                    }
                    goto LABEL_473;
                  }
                }
                memcpy(p_dst, __src, v199);
                goto LABEL_334;
              }
            }
            memmove(v191, v128, v129);
            goto LABEL_276;
          }
        }
        memmove(v187, v185, v186);
        goto LABEL_268;
      }
    }
LABEL_473:
    v80 = 0;
    v264 = (unsigned __int8 *)v337;
    if (!v337)
      goto LABEL_389;
LABEL_388:
    v338 = v264;
    operator delete(v264);
    goto LABEL_389;
  }
LABEL_170:
  sub_2236D6148(&__dst);
  if (*(int *)__dst[7] <= 3)
  {
    v130 = *((unsigned __int8 *)__dst + 72);
    v131 = sub_22322F254((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
    v132 = v131;
    if (v130 || v131 != 0)
    {
      *(_QWORD *)v339 = &__dst;
      *(std::chrono::steady_clock::time_point *)&v339[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v339[16] = std::chrono::system_clock::now();
      v340.i32[0] = 3;
      v341 = "unknown file";
      v342 = 382;
      v344 = 0;
      v345 = 0;
      v343 = "unknown function";
      sub_2245664AC(v5, &__s);
      v134 = **(_QWORD **)v339;
      v135 = (const char *)(**(_QWORD **)v339 + 16);
      v330 = **(_QWORD **)v339;
      v325 = v135;
      if (*(char *)(**(_QWORD **)v339 + 39) < 0)
      {
        v135 = *(const char **)(v134 + 16);
        v136 = *(_QWORD *)(v134 + 24);
      }
      else
      {
        v136 = *(unsigned __int8 *)(**(_QWORD **)v339 + 39);
      }
      v202 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        if (object[24])
        {
          xmmword_255788F40 = *(_OWORD *)object;
          unk_255788F50 = *(_QWORD *)&object[16];
        }
        else
        {
          byte_255788F57 = 14;
          strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v203 = (const char *)&xmmword_255788F40;
      else
        v203 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v204 = byte_255788F57;
      else
        v204 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v203, v135);
      v205 = &object[8];
      if (v204 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v204 >= 0x17)
      {
        v206 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v204 | 7) != 0x17)
          v206 = v204 | 7;
        v207 = v206 + 1;
        v205 = operator new(v206 + 1);
        *(_QWORD *)&object[16] = v204;
        *(_QWORD *)&object[24] = v207 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v205;
      }
      else
      {
        object[31] = v204;
        if (!v204)
        {
LABEL_307:
          v205[v204] = 0;
          object[32] = 1;
          v208 = &__p;
          if (v136 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v136 >= 0x17)
          {
            v209 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v136 | 7) != 0x17)
              v209 = v136 | 7;
            v210 = v209 + 1;
            v208 = operator new(v209 + 1);
            v352.i64[0] = v136;
            v352.i64[1] = v210 | 0x8000000000000000;
            __p = v208;
          }
          else
          {
            v352.i8[15] = v136;
            if (!v136)
            {
LABEL_315:
              *((_BYTE *)v208 + v136) = 0;
              v353 = 1;
              v211 = *(NSObject **)object;
              if (v352.i8[15] < 0)
                operator delete(__p);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (!v132 || !*(_QWORD *)(v132 + 24))
              {
                os_log_type_enabled(v211, OS_LOG_TYPE_INFO);
                *(_QWORD *)object = 0xD04100202;
                *(_WORD *)&object[8] = 2080;
                *(_QWORD *)&object[10] = &__s;
                v219 = (void *)_os_log_send_and_compose_impl();
                if (v219)
                  free(v219);
                goto LABEL_379;
              }
              v212 = _os_log_pack_size();
              v213 = (std::__shared_weak_count_vtbl *)operator new(v212, (std::align_val_t)8uLL);
              v214 = (std::__shared_weak_count *)operator new();
              v214->__shared_owners_ = 0;
              v215 = (unint64_t *)&v214->__shared_owners_;
              v214->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v214->__shared_weak_owners_ = 0;
              v214[1].__vftable = v213;
              v216 = strlen((const char *)&__s);
              v320 = v214;
              if (v216 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v217 = v216;
              if (v216 >= 0x17)
              {
                v236 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v216 | 7) != 0x17)
                  v236 = v216 | 7;
                v237 = v236 + 1;
                v218 = operator new(v236 + 1);
                *(_QWORD *)&object[8] = v217;
                *(_QWORD *)&object[16] = v237 | 0x8000000000000000;
                *(_QWORD *)object = v218;
              }
              else
              {
                object[23] = v216;
                v218 = object;
                if (!v216)
                {
LABEL_353:
                  v313 = v213;
                  v218[v217] = 0;
                  v238 = *(_QWORD *)object;
                  *(_QWORD *)__src = *(_QWORD *)&object[8];
                  *(_QWORD *)&__src[7] = *(_QWORD *)&object[15];
                  v239 = object[23];
                  v240 = operator new(0x38uLL);
                  v241 = (std::__shared_weak_count *)v240;
                  v240[1] = 0;
                  v242 = v240 + 1;
                  v240[3] = off_24EC1FA48;
                  v243 = (char *)(v240 + 3);
                  v240[2] = 0;
                  v240[4] = v238;
                  v244 = (char *)(v240 + 4);
                  *v240 = &off_24EC1F9F8;
                  v240[5] = *(_QWORD *)__src;
                  *(_QWORD *)((char *)v240 + 47) = *(_QWORD *)&__src[7];
                  *((_BYTE *)v240 + 55) = v239;
                  do
                    v245 = __ldxr(v215);
                  while (__stxr(v245 + 1, v215));
                  do
                    v246 = __ldxr(v242);
                  while (__stxr(v246 + 1, v242));
                  do
                    v247 = __ldaxr(v242);
                  while (__stlxr(v247 - 1, v242));
                  if (!v247)
                  {
                    (*(void (**)(_QWORD *))(*v240 + 16))(v240);
                    std::__shared_weak_count::__release_weak(v241);
                  }
                  do
                    v248 = __ldaxr(v215);
                  while (__stlxr(v248 - 1, v215));
                  if (!v248)
                  {
                    ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                    std::__shared_weak_count::__release_weak(v320);
                  }
                  if (SHIBYTE(v241[2].__vftable) >= 0)
                    v249 = v244;
                  else
                    v249 = (char *)v241[1].__shared_owners_;
                  v250 = _os_log_pack_fill();
                  *(_DWORD *)v250 = 68157954;
                  *(_DWORD *)(v250 + 4) = 13;
                  *(_WORD *)(v250 + 8) = 2080;
                  *(_QWORD *)(v250 + 10) = v249;
                  v251 = operator new();
                  v252 = *(unsigned __int8 *)(v330 + 39);
                  v253 = v325;
                  if ((v252 & 0x80u) != 0)
                  {
                    v253 = *(const char **)(v330 + 16);
                    v252 = *(_QWORD *)(v330 + 24);
                  }
                  *(_QWORD *)v251 = v313;
                  *(_QWORD *)(v251 + 8) = v313;
                  *(_QWORD *)(v251 + 16) = v320;
                  *(_QWORD *)(v251 + 24) = v243;
                  *(_QWORD *)(v251 + 32) = v241;
                  *(_QWORD *)(v251 + 40) = v253;
                  *(_QWORD *)(v251 + 48) = v252;
                  *(_BYTE *)(v251 + 56) = 1;
                  *(_QWORD *)object = v251;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v132 + 24) + 40))(*(_QWORD *)(v132 + 24), object);
                  v254 = *(_QWORD *)object;
                  *(_QWORD *)object = 0;
                  if (v254)
                  {
                    v255 = *(std::__shared_weak_count **)(v254 + 32);
                    if (v255)
                    {
                      v256 = (unint64_t *)&v255->__shared_owners_;
                      do
                        v257 = __ldaxr(v256);
                      while (__stlxr(v257 - 1, v256));
                      if (!v257)
                      {
                        ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                        std::__shared_weak_count::__release_weak(v255);
                      }
                    }
                    v258 = *(std::__shared_weak_count **)(v254 + 16);
                    if (v258)
                    {
                      v259 = (unint64_t *)&v258->__shared_owners_;
                      do
                        v260 = __ldaxr(v259);
                      while (__stlxr(v260 - 1, v259));
                      if (!v260)
                      {
                        ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                        std::__shared_weak_count::__release_weak(v258);
                      }
                    }
                    MEMORY[0x227684CE8](v254, 0x10F0C40B62ED6C6);
                  }
LABEL_379:
                  if (v130)
                  {
                    sub_2245664AC(v5, object);
                    sub_22322C138((uint64_t)v339, "FUGP: GP %.13s was filtered out due to it being classified as a dynamic object.", object);
                    sub_223182C08((uint64_t)v339);
                  }
                  sub_223182C08((uint64_t)v339);
                  v261 = v345;
                  if (v345)
                  {
                    v262 = (unint64_t *)&v345->__shared_owners_;
                    do
                      v263 = __ldaxr(v262);
                    while (__stlxr(v263 - 1, v262));
                    if (!v263)
                    {
                      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                      std::__shared_weak_count::__release_weak(v261);
                    }
                  }
                  goto LABEL_386;
                }
              }
              memcpy(v218, &__s, v217);
              goto LABEL_353;
            }
          }
          memmove(v208, v135, v136);
          goto LABEL_315;
        }
      }
      memmove(v205, v203, v204);
      goto LABEL_307;
    }
  }
LABEL_386:
  v80 = 1;
LABEL_387:
  v264 = (unsigned __int8 *)v337;
  if (v337)
    goto LABEL_388;
LABEL_389:
  v4 = v332;
  a3 = v335;
  if (!v80)
  {
    v272 = 0;
    goto LABEL_420;
  }
LABEL_390:
  v265 = *v4[1];
  v268 = *(unsigned __int8 **)(v265 + 8);
  v267 = (unsigned __int8 *)(v265 + 8);
  v266 = v268;
  if (!v268)
    goto LABEL_415;
  v269 = v267;
  do
  {
    v270 = v266[25];
    v271 = *v5;
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[26];
    v271 = v5[1];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[27];
    v271 = v5[2];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[28];
    v271 = v5[3];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[29];
    v271 = v5[4];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[30];
    v271 = v5[5];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[31];
    v271 = v5[6];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[32];
    v271 = v5[7];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[33];
    v271 = v5[8];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[34];
    v271 = v5[9];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[35];
    v271 = v5[10];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[36];
    v271 = v5[11];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[37];
    v271 = v5[12];
    if (v270 != v271)
      goto LABEL_409;
    v270 = v266[38];
    v271 = v5[13];
    if (v270 == v271
      && (v270 = v266[39], v271 = v5[14], v270 == v271)
      && (v270 = v266[40], v271 = v5[15], v270 == v271))
    {
      v269 = v266;
    }
    else
    {
LABEL_409:
      if (v270 < v271)
        v266 += 8;
      else
        v269 = v266;
    }
    v266 = *(unsigned __int8 **)v266;
  }
  while (v266);
  if (v269 == v267 || (char)sub_22319835C(v5, v269 + 25) < 0)
LABEL_415:
    v269 = v267;
  if (v269 == v267)
    v272 = 1;
  else
    v272 = 2;
LABEL_420:
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(_DWORD *)(a3 + 16) = v272;
}

void sub_2236E1860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *a50,int a51,__int16 a52,char a53,char a54,char a55,int a56,__int16 a57,char a58,char a59)
{
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a31);
  v60 = a39;
  if (a39)
  {
    p_shared_owners = (unint64_t *)&a39->__shared_owners_;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2236E1F90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes28CollectUpdatedPlanesToFilterERKNS1_25UpdatedPlanesAndKeyframesERKNS1_20Keyf"
                     "ramePlaneStorageERKNS1_13ExposedPlanesENSt3__18optionalINSB_6bitsetILm42EEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes28CollectUpdatedPlanesToFilterERKNS1_25UpdatedPlanesAndKeyframesER"
                                "KNS1_20KeyframePlaneStorageERKNS1_13ExposedPlanesENSt3__18optionalINSB_6bitsetILm42EEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes28CollectUpdatedPlanesToFilterERKNS1_25UpdatedPlanesAndKeyframesERKNS1_20KeyframePlaneStorageERKNS1_13ExposedPlanesENSt3__18optionalINSB_6bitsetILm42EEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes28CollectUpdatedPlanesToFilterERKNS1_25UpdatedPlanesAndKeyframesERKNS1_20KeyframePlaneStorageERKNS1_13ExposedPlanesENSt3__18optionalINSB_6bitsetILm42EEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236E1FFC()
{
  return &unk_24EC577D0;
}

uint64_t sub_2236E2008(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = *a2;
  v5 = v18;
  v6 = (uint64_t *)a2[4];
  if (v6)
  {
    if (v6 == a2 + 1)
    {
      v19 = v18;
      (*(void (**)(uint64_t *, _QWORD *))(*v6 + 24))(v6, v18);
    }
    else
    {
      v19 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v19 = 0;
  }
  v14 = *a3;
  v7 = v15;
  result = a3[4];
  if (result)
  {
    if ((uint64_t *)result == a3 + 1)
    {
      v16 = v15;
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 24))(result, v15);
    }
    else
    {
      v16 = (_QWORD *)a3[4];
      a3[4] = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  v9 = v19;
  *a1 = v17;
  v10 = a1 + 1;
  if (v9)
  {
    if (v9 == v18)
    {
      a1[4] = v10;
      result = (*(uint64_t (**)(_QWORD *))(v18[0] + 24))(v18);
    }
    else
    {
      a1[4] = v9;
      v19 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v11 = v16;
  a1[5] = v14;
  if (v11)
  {
    if (v11 == v15)
    {
      a1[9] = a1 + 6;
      result = (*(uint64_t (**)(_QWORD *))(v15[0] + 24))(v15);
    }
    else
    {
      a1[9] = v11;
      v16 = 0;
    }
  }
  else
  {
    a1[9] = 0;
  }
  if (v16 == v15)
  {
    v12 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_26;
    v12 = 5;
    v7 = v16;
  }
  result = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v7 + 8 * v12))(v7, v10);
LABEL_26:
  if (v19 == v18)
  {
    v13 = 4;
  }
  else
  {
    if (!v19)
      return result;
    v13 = 5;
    v5 = v19;
  }
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(*v5 + 8 * v13))(v5, v10);
}

void sub_2236E2204(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_2236E2228()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2236E223C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC577F0;
  result[1] = v3;
  return result;
}

uint64_t sub_2236E2270(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC577F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_2236E228C@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = **(_QWORD ***)(result + 8);
  v6 = (uint64_t *)(*v5 + 32);
  v7 = *v6;
  if (!*v6)
    goto LABEL_11;
  v8 = *v5 + 32;
  do
  {
    result = sub_22319835C((unsigned __int8 *)(v7 + 25), a2);
    if ((result & 0x80u) == 0)
      v9 = (uint64_t *)v7;
    else
      v9 = (uint64_t *)(v7 + 8);
    if ((result & 0x80u) == 0)
      v8 = v7;
    v7 = *v9;
  }
  while (*v9);
  if ((uint64_t *)v8 == v6 || (result = sub_22319835C(a2, (unsigned __int8 *)(v8 + 25)), (result & 0x80) != 0))
LABEL_11:
    v8 = (uint64_t)v6;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_DWORD *)(a3 + 16) = v8 != (_QWORD)v6;
  return result;
}

uint64_t sub_2236E232C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes28CollectUpdatedPlanesToFilterERKNS1_25UpdatedPlanesAndKeyframesERKNS1_20Keyf"
                     "ramePlaneStorageERKNS1_13ExposedPlanesENSt3__18optionalINSB_6bitsetILm42EEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes28CollectUpdatedPlanesToFilterERKNS1_25UpdatedPlanesAndKeyframesER"
                                "KNS1_20KeyframePlaneStorageERKNS1_13ExposedPlanesENSt3__18optionalINSB_6bitsetILm42EEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes28CollectUpdatedPlanesToFilterERKNS1_25UpdatedPlanesAndKeyframesERKNS1_20KeyframePlaneStorageERKNS1_13ExposedPlanesENSt3__18optionalINSB_6bitsetILm42EEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes28CollectUpdatedPlanesToFilterERKNS1_25UpdatedPlanesAndKeyframesERKNS1_20KeyframePlaneStorageERKNS1_13ExposedPlanesENSt3__18optionalINSB_6bitsetILm42EEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236E2398()
{
  return &unk_24EC57860;
}

unsigned __int8 *sub_2236E23A4(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  std::logic_error *exception;
  std::string v11;

  v3 = *(unsigned __int8 **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (!v4)
    goto LABEL_14;
  v6 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 2);
  do
  {
    v7 = &v3[20 * (v6 >> 1)];
    v8 = (char)sub_22319835C(v7, a2);
    if (v8 >= 0)
      v6 >>= 1;
    else
      v6 += ~(v6 >> 1);
    if (v8 < 0)
      v3 = v7 + 20;
  }
  while (v6);
  if (*(unsigned __int8 **)(a1 + 8) == v3
    || (sub_22319835C(v3, a2) & 0x80) != 0
    || (sub_22319835C(a2, v3) & 0x80) != 0
    || v3 == *(unsigned __int8 **)(a1 + 8))
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_22342F2E4("FlatMap::at:  key not found (", a2, (uint64_t)")");
    std::logic_error::logic_error(exception, &v11);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  return v3 + 16;
}

void sub_2236E24DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unsigned __int8 *sub_2236E2514(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  std::logic_error *exception;
  std::string v11;

  v3 = *(unsigned __int8 **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (!v4)
    goto LABEL_14;
  v6 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 2);
  do
  {
    v7 = &v3[20 * (v6 >> 1)];
    v8 = (char)sub_22319835C(v7, a2);
    if (v8 >= 0)
      v6 >>= 1;
    else
      v6 += ~(v6 >> 1);
    if (v8 < 0)
      v3 = v7 + 20;
  }
  while (v6);
  if (*(unsigned __int8 **)(a1 + 8) == v3
    || (sub_22319835C(v3, a2) & 0x80) != 0
    || (sub_22319835C(a2, v3) & 0x80) != 0
    || v3 == *(unsigned __int8 **)(a1 + 8))
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_22342F2E4("FlatMap::at:  key not found (", a2, (uint64_t)")");
    std::logic_error::logic_error(exception, &v11);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  return v3 + 16;
}

void sub_2236E264C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_2236E2688()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2236E269C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC57880;
  return result;
}

void sub_2236E26C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC57880;
}

__n128 sub_2236E26D8@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 result;
  uint64_t v33;
  __int128 v34;
  uint64_t (**v35)();
  uint64_t (**v36)(_QWORD);
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char **v54;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 208);
  v5 = *(_QWORD *)(*a1 + 216);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v5 == v4)
  {
    v19 = 0;
    v18 = 0;
    v17 = 0;
  }
  else
  {
    if ((unint64_t)(0x21CFB2B78C13521DLL * ((v5 - v4) >> 3)) >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v51 = (char *)operator new(0x2B78C13521CFB2B8 * ((v5 - v4) >> 3));
    v52 = v51;
    v53 = &v51[0x2B78C13521CFB2B8 * ((v5 - v4) >> 3)];
    v54 = &v51;
    do
    {
      v10 = *(float32x2_t *)(v4 + 16);
      v6.i32[0] = *(_DWORD *)(v4 + 24);
      v11 = *(float32x2_t *)(v4 + 28);
      v12 = *(float32x2_t *)(v3 + 144);
      v7.i32[0] = *(_DWORD *)(v3 + 152);
      v13 = *(float32x2_t *)(v3 + 160);
      v8.i32[0] = *(_DWORD *)(v3 + 168);
      v14 = *(float32x2_t *)(v3 + 176);
      v9.i32[0] = *(_DWORD *)(v3 + 184);
      *(float32x2_t *)v15.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v12, v10.f32[0]), v13, v10, 1), v14, v6.f32[0]);
      *(float32x2_t *)&v15.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v7, v10), v8, v10, 1), *(float32x2_t *)v6.f32, v9);
      v10.i32[0] = *(_DWORD *)(v4 + 36);
      v6.i64[0] = *(_QWORD *)(v3 + 192);
      v6.i32[2] = *(_DWORD *)(v3 + 200);
      v16 = vaddq_f32(v15, v6);
      LODWORD(v34) = v16.i32[2];
      v33 = v16.i64[0];
      *(float32x2_t *)((char *)&v34 + 4) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v12, v11.f32[0]), v13, v11, 1), v14, v10.f32[0]);
      HIDWORD(v34) = vmla_f32(vmla_lane_f32(vmul_f32(v7, v11), v8, v11, 1), v10, v9).u32[0];
      sub_2236E2A14(&v54, &v33);
      v4 += 424;
    }
    while (v4 != v5);
    v17 = v51;
    v18 = v52;
    v19 = v53;
  }
  sub_22371FEDC(v3, &v33);
  v21 = *(_QWORD *)(v3 + 72);
  v37 = *(_QWORD *)(v3 + 64);
  v20 = v37;
  v38 = v21;
  v22 = *(_OWORD *)(v3 + 96);
  v39 = *(_OWORD *)(v3 + 80);
  v42 = *(_DWORD *)(v3 + 128);
  v41 = *(_OWORD *)(v3 + 112);
  v40 = v22;
  v43 = *(_QWORD *)(v3 + 136);
  v23 = v43;
  v35 = &off_24EC207B8;
  v36 = &off_24EC20868;
  v24 = *(_OWORD *)(v3 + 160);
  v44 = *(_OWORD *)(v3 + 144);
  v45 = v24;
  v25 = *(_OWORD *)(v3 + 192);
  v46 = *(_OWORD *)(v3 + 176);
  v47 = v25;
  v48 = v17;
  v49 = v18;
  v50 = v19;
  v26 = operator new(0xE8uLL);
  v26[1] = 0;
  v26[2] = 0;
  *v26 = &off_24EC57900;
  v26[3] = &off_24EC715B8;
  *((_OWORD *)v26 + 2) = v34;
  v26[7] = &off_24EC20868;
  v26[8] = v20;
  v26[9] = v21;
  *((_OWORD *)v26 + 5) = *(_OWORD *)(v3 + 80);
  v28 = *(_OWORD *)(v3 + 96);
  v27 = *(_OWORD *)(v3 + 112);
  *((_DWORD *)v26 + 32) = *(_DWORD *)(v3 + 128);
  *((_OWORD *)v26 + 6) = v28;
  *((_OWORD *)v26 + 7) = v27;
  v26[17] = v23;
  v26[6] = &off_24EC207B8;
  v29 = *(_OWORD *)(v3 + 192);
  v31 = *(_OWORD *)(v3 + 144);
  v30 = *(_OWORD *)(v3 + 160);
  *((_OWORD *)v26 + 11) = *(_OWORD *)(v3 + 176);
  *((_OWORD *)v26 + 12) = v29;
  *((_OWORD *)v26 + 9) = v31;
  *((_OWORD *)v26 + 10) = v30;
  v26[26] = v17;
  v26[27] = v18;
  v26[28] = v19;
  result = *(__n128 *)v3;
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_QWORD *)(a2 + 16) = v26 + 3;
  *(_QWORD *)(a2 + 24) = v26;
  return result;
}

void sub_2236E293C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (**a12)(), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;

  if (v33)
  {
    a33 = (uint64_t)v33;
    operator delete(v33);
  }
  a12 = &off_24EC20828;
  sub_2242A8F3C(&a9);
  _Unwind_Resume(a1);
}

void sub_2236E296C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2236E299C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon8kfplanes24MakePlaneDetectionResultERKNSt3__16chrono8durationIxNS2_5ratioILl1ELl100000"
                     "0000EEEEERKNS1_25UpdatedPlanesAndKeyframesERKNS1_20KeyframePlaneStorageERKNS1_23SnappingParametriza"
                     "tionERKNS1_29KeyframePlaneObservationGraphENS_3esn11OptionalRefIKNS1_16SingleShotResultEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon8kfplanes24MakePlaneDetectionResultERKNSt3__16chrono8durationIxNS2_5ratioIL"
                                "l1ELl1000000000EEEEERKNS1_25UpdatedPlanesAndKeyframesERKNS1_20KeyframePlaneStorageERKNS1"
                                "_23SnappingParametrizationERKNS1_29KeyframePlaneObservationGraphENS_3esn11OptionalRefIKN"
                                "S1_16SingleShotResultEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon8kfplanes24MakePlaneDetectionResultERKNSt3__16chrono8durationIxNS2_5ratioILl1ELl1000000000EEEEERKNS1_25UpdatedPlanesAndKeyframesERKNS1_20KeyframePlaneStorageERKNS1_23SnappingParametrizationERKNS1_29KeyframePlaneObservationGraphENS_3esn11OptionalRefIKNS1_16SingleShotResultEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon8kfplanes24MakePlaneDetectionResultERKNSt3__16chrono8durationIxNS2_5ratioILl1ELl1000000000EEEEERKNS1_25UpdatedPlanesAndKeyframesERKNS1_20KeyframePlaneStorageERKNS1_23SnappingParametrizationERKNS1_29KeyframePlaneObservationGraphENS_3esn11OptionalRefIKNS1_16SingleShotResultEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2236E2A08()
{
  return &unk_24EC57940;
}

char ***sub_2236E2A14(char ***a1, uint64_t *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v10 = *v4;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v15 = (char *)operator new(24 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[24 * v11];
    *(_QWORD *)v16 = *a2;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(v16 + 12) = *(uint64_t *)((char *)a2 + 12);
    *((_DWORD *)v16 + 5) = *((_DWORD *)a2 + 5);
    v9 = v16 + 24;
    if (v6 != v10)
    {
      do
      {
        v17 = *((_QWORD *)v6 - 3);
        v6 -= 24;
        v18 = *((_DWORD *)v6 + 2);
        *((_QWORD *)v16 - 3) = v17;
        v16 -= 24;
        *((_DWORD *)v16 + 2) = v18;
        v19 = *(_QWORD *)(v6 + 12);
        *((_DWORD *)v16 + 5) = *((_DWORD *)v6 + 5);
        *(_QWORD *)(v16 + 12) = v19;
      }
      while (v6 != v10);
      v6 = *v4;
    }
    *v4 = v16;
    v4[1] = v9;
    v4[2] = &v15[24 * v14];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v6 = v7;
    v8 = *(uint64_t *)((char *)a2 + 12);
    *((_DWORD *)v6 + 5) = *((_DWORD *)a2 + 5);
    *(_QWORD *)(v6 + 12) = v8;
    v9 = v6 + 24;
  }
  v4[1] = v9;
  return a1;
}

void sub_2236E2B84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC57900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2236E2B94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC57900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2236E2BC4(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  a1[6] = &off_24EC20828;
  a1[3] = &off_24EC715B8;
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *sub_2236E2C4C(char **a1, char *a2, __int128 *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  void **v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  void *v47;
  uint64_t v48;
  char *v49;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = v7 / 40;
  v9 = &(*a1)[40 * (v7 / 40)];
  v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
    if (v22 > 0x666666666666666)
      sub_22316E078();
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)v6) >> 3);
    if (2 * v24 > v22)
      v22 = 2 * v24;
    if (v24 >= 0x333333333333333)
      v25 = 0x666666666666666;
    else
      v25 = v22;
    if (v25)
    {
      if (v25 > 0x666666666666666)
        sub_223174E94();
      v26 = (char *)operator new(40 * v25);
    }
    else
    {
      v26 = 0;
    }
    v32 = &v26[40 * v8];
    v49 = &v26[40 * v25];
    if (v8 == v25)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v34 = 1;
        else
          v34 = 2 * v8;
        if (v34 > 0x666666666666666)
          sub_223174E94();
        v35 = (char *)operator new(40 * v34);
        v32 = &v35[40 * (v34 >> 2)];
        v49 = &v35[40 * v34];
        if (v26)
          operator delete(v26);
      }
      else
      {
        v33 = v8 + 2;
        if (v8 >= -1)
          v33 = v8 + 1;
        v32 -= 40 * (v33 >> 1);
      }
    }
    v36 = *a3;
    *((_QWORD *)v32 + 3) = 0;
    *((_QWORD *)v32 + 4) = 0;
    v37 = a3[1];
    *(_OWORD *)v32 = v36;
    *((_OWORD *)v32 + 1) = v37;
    *((_QWORD *)v32 + 4) = *((_QWORD *)a3 + 4);
    *((_QWORD *)a3 + 3) = 0;
    *((_QWORD *)a3 + 4) = 0;
    *((_QWORD *)a3 + 2) = 0;
    v38 = v32 + 40;
    v39 = *a1;
    if (*a1 == v9)
    {
      v43 = v32;
      v44 = a1[1];
      if (v44 == v9)
        goto LABEL_43;
    }
    else
    {
      v40 = 0;
      do
      {
        v41 = &v32[v40];
        v42 = &v9[v40];
        *(_OWORD *)(v41 - 40) = *(_OWORD *)&v9[v40 - 40];
        *(_OWORD *)(v41 - 24) = *(_OWORD *)&v9[v40 - 24];
        *((_QWORD *)v41 - 1) = *(_QWORD *)&v9[v40 - 8];
        *((_QWORD *)v42 - 3) = 0;
        *((_QWORD *)v42 - 2) = 0;
        *((_QWORD *)v42 - 1) = 0;
        v40 -= 40;
      }
      while (&v9[v40] != v39);
      v38 = v32 + 40;
      v43 = &v32[v40];
      v44 = a1[1];
      if (v44 == v9)
        goto LABEL_43;
    }
    do
    {
      *(_OWORD *)v38 = *(_OWORD *)v9;
      *((_QWORD *)v38 + 3) = 0;
      *((_QWORD *)v38 + 4) = 0;
      *((_QWORD *)v38 + 2) = 0;
      *((_OWORD *)v38 + 1) = *((_OWORD *)v9 + 1);
      *((_QWORD *)v38 + 4) = *((_QWORD *)v9 + 4);
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)v9 + 4) = 0;
      v38 += 40;
      v9 += 40;
    }
    while (v9 != v44);
    v9 = a1[1];
LABEL_43:
    v45 = *a1;
    *a1 = v43;
    a1[1] = v38;
    a1[2] = v49;
    if (v9 == v45)
    {
      if (!v9)
        return v32;
    }
    else
    {
      do
      {
        v47 = (void *)*((_QWORD *)v9 - 3);
        if (v47)
        {
          *((_QWORD *)v9 - 2) = v47;
          operator delete(v47);
        }
        v9 -= 40;
      }
      while (v9 != v45);
      v9 = v45;
      if (!v45)
        return v32;
    }
    operator delete(v9);
    return v32;
  }
  if (v9 == (char *)v5)
  {
    *(_OWORD *)v9 = *a3;
    v31 = &v6[40 * v8];
    *((_QWORD *)v31 + 3) = 0;
    *((_QWORD *)v31 + 4) = 0;
    *((_QWORD *)v31 + 2) = 0;
    *((_OWORD *)v31 + 1) = a3[1];
    *((_QWORD *)v31 + 4) = *((_QWORD *)a3 + 4);
    *((_QWORD *)a3 + 2) = 0;
    *((_QWORD *)a3 + 3) = 0;
    *((_QWORD *)a3 + 4) = 0;
    a1[1] = v9 + 40;
  }
  else
  {
    v11 = v9 + 40;
    v12 = v5 - 40;
    v48 = v7 / 40;
    v13 = a1[1];
    if (v5 >= 0x28)
    {
      do
      {
        *(_OWORD *)v13 = *(_OWORD *)v12;
        *((_QWORD *)v13 + 3) = 0;
        *((_QWORD *)v13 + 4) = 0;
        *((_QWORD *)v13 + 2) = 0;
        *((_OWORD *)v13 + 1) = *(_OWORD *)(v12 + 16);
        *((_QWORD *)v13 + 4) = *(_QWORD *)(v12 + 32);
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        v13 += 40;
        v12 += 40;
      }
      while (v12 < v5);
    }
    a1[1] = v13;
    if ((char *)v5 != v11)
    {
      v14 = 0;
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v11) >> 3);
      v16 = -40 * v15;
      v17 = &v6[40 * v48 + 40 * v15];
      do
      {
        v18 = &v17[v14];
        v19 = v5 + v14;
        v21 = (void **)(v5 + v14 - 24);
        v20 = *v21;
        *(_OWORD *)(v5 + v14 - 40) = *(_OWORD *)&v17[v14 - 40];
        if (v20)
        {
          *(_QWORD *)(v19 - 16) = v20;
          operator delete(v20);
          *v21 = 0;
          *(_QWORD *)(v5 + v14 - 16) = 0;
          *(_QWORD *)(v5 + v14 - 8) = 0;
        }
        *(_OWORD *)v21 = *(_OWORD *)(v18 - 24);
        *(_QWORD *)(v19 - 8) = *((_QWORD *)v18 - 1);
        *((_QWORD *)v18 - 3) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        v14 -= 40;
      }
      while (v16 != v14);
    }
    *(_OWORD *)v9 = *a3;
    v27 = &v6[40 * v48];
    v30 = (void *)*((_QWORD *)v27 + 2);
    v29 = v27 + 16;
    v28 = v30;
    if (v30)
    {
      *(_QWORD *)&v6[40 * v48 + 24] = v28;
      operator delete(v28);
      *v29 = 0;
      v29[1] = 0;
      v29[2] = 0;
    }
    *(_OWORD *)v29 = a3[1];
    *(_QWORD *)&v6[40 * v48 + 32] = *((_QWORD *)a3 + 4);
    *((_QWORD *)a3 + 2) = 0;
    *((_QWORD *)a3 + 3) = 0;
    *((_QWORD *)a3 + 4) = 0;
  }
  return v9;
}

void sub_2236E30A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22341F4C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2236E30B4(uint64_t a1, std::__fs::filesystem::path *this, uint64_t *a3)
{
  std::__fs::filesystem::path *v6;
  std::basic_string_view<_CharT, _Traits>::size_type size;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  const char *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  std::string::size_type *p_size;
  unint64_t v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  std::string::size_type v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unsigned __int8 v69;
  const char *v70;
  size_t v71;
  std::string::size_type *v72;
  unint64_t v73;
  const char *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  size_t v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  std::string::size_type v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  unint64_t *v114;
  std::__fs::filesystem::filesystem_error *exception;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v123;
  int v124;
  const char *v125;
  int v126;
  const char *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__fs::filesystem::path __dst;
  __int128 v132;
  void *v133;
  void *v134;
  unint64_t v135;
  char v136;
  char v137;
  void *__p;
  char v139;
  char v140;
  char v141;
  char v142;
  std::__fs::filesystem::path v143;
  uint64_t v144;
  _QWORD v145[2];
  std::error_code v146;

  *(_QWORD *)a1 = off_24EC57960;
  v6 = (std::__fs::filesystem::path *)(a1 + 8);
  size = std::__fs::filesystem::path::__root_directory(this).__size_;
  if (size)
  {
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__dst, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    else
      __dst = *this;
  }
  else
  {
    (*(void (**)(std::__fs::filesystem::path *__return_ptr))(*(_QWORD *)*a3 + 160))(&v143);
    if (SHIBYTE(v143.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__dst, v143.__pn_.__r_.__value_.__l.__data_, v143.__pn_.__r_.__value_.__l.__size_);
    else
      __dst = v143;
    sub_22319C30C((uint64_t)&__dst, this);
  }
  std::__fs::filesystem::path::lexically_normal(v6, &__dst);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_15;
  }
  else if (size)
  {
    goto LABEL_15;
  }
  if (SHIBYTE(v143.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__pn_.__r_.__value_.__l.__data_);
LABEL_15:
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 32) = v8;
  if (((*(uint64_t (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v8 + 312))(v8, v6) & 1) == 0)
  {
    exception = (std::__fs::filesystem::filesystem_error *)__cxa_allocate_exception(0x30uLL);
    sub_223174DE4(&__dst, "Path is not a directory");
    v146.__cat_ = std::generic_category();
    *(_QWORD *)&v146.__val_ = 20;
    sub_2236E6644(exception, &__dst.__pn_, (uint64_t)v6, v146);
    __cxa_throw(exception, MEMORY[0x24BEDB708], MEMORY[0x24BEDB268]);
  }
  sub_22400475C((uint64_t)v6, *(_QWORD *)(a1 + 32), (uint64_t)&__dst);
  if (v142)
  {
    *(_BYTE *)(a1 + 40) = 1;
    sub_2236E4194(&v130);
    if (**(int **)(v130 + 56) > 3)
      return a1;
    v9 = *(unsigned __int8 *)(v130 + 72);
    v10 = sub_22322F254(v130, "OSLogSurrogateAppender", 1, 0);
    v11 = v10;
    if (!v9 && !v10)
      return a1;
    v121 = &v130;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v123 = std::chrono::system_clock::now().__d_.__rep_;
    v124 = 3;
    v125 = "unknown file";
    v126 = 44;
    v128 = 0;
    v129 = 0;
    v127 = "unknown function";
    v119 = v130;
    if (*(char *)(v130 + 39) < 0)
    {
      v13 = *(const char **)(v130 + 16);
      v12 = *(_QWORD *)(v130 + 24);
      v117 = v130 + 16;
      v21 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v21 & 1) != 0)
        goto LABEL_39;
    }
    else
    {
      v12 = *(unsigned __int8 *)(v130 + 39);
      v13 = (const char *)(v130 + 16);
      v117 = v130 + 16;
      v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v14 & 1) != 0)
        goto LABEL_39;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&__dst);
      sub_223199C58("com.apple.cv3d", (unint64_t)&__dst, &xmmword_255788F40);
      if ((_BYTE)v132 && SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_39:
    if (byte_255788F57 >= 0)
      v22 = (const char *)&xmmword_255788F40;
    else
      v22 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v23 = byte_255788F57;
    else
      v23 = *((_QWORD *)&xmmword_255788F40 + 1);
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v22, v13);
    p_size = &__dst.__pn_.__r_.__value_.__l.__size_;
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v23 >= 0x17)
    {
      v25 = v11;
      v26 = v13;
      v27 = v9;
      v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v28 = v23 | 7;
      v29 = v28 + 1;
      p_size = (std::string::size_type *)operator new(v28 + 1);
      __dst.__pn_.__r_.__value_.__r.__words[2] = v23;
      *(_QWORD *)&v132 = v29 | 0x8000000000000000;
      __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
      v9 = v27;
      v13 = v26;
      v11 = v25;
    }
    else
    {
      BYTE7(v132) = v23;
      if (!v23)
      {
LABEL_53:
        *((_BYTE *)p_size + v23) = 0;
        BYTE8(v132) = 1;
        v30 = &v133;
        if (v12 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v12 >= 0x17)
        {
          v31 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17)
            v31 = v12 | 7;
          v32 = v31 + 1;
          v30 = operator new(v31 + 1);
          v134 = (void *)v12;
          v135 = v32 | 0x8000000000000000;
          v133 = v30;
        }
        else
        {
          HIBYTE(v135) = v12;
          if (!v12)
          {
LABEL_61:
            *((_BYTE *)v30 + v12) = 0;
            v136 = 1;
            v33 = __dst.__pn_.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v135) < 0)
              operator delete(v133);
            if (BYTE8(v132) && SBYTE7(v132) < 0)
              operator delete((void *)__dst.__pn_.__r_.__value_.__l.__size_);
            if (__dst.__pn_.__r_.__value_.__r.__words[0])
              os_release(__dst.__pn_.__r_.__value_.__l.__data_);
            if (v11 && *(_QWORD *)(v11 + 24))
            {
              v34 = _os_log_pack_size();
              v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
              v36 = (std::__shared_weak_count *)operator new();
              v37 = v36;
              v36->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v36->__shared_owners_;
              v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v36->__shared_weak_owners_ = 0;
              v36[1].__vftable = v35;
              __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
              __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
              __dst.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v36;
              do
                v39 = __ldxr(p_shared_owners);
              while (__stxr(v39 + 1, p_shared_owners));
              v132 = 0uLL;
              v133 = 0;
              do
                v40 = __ldaxr(p_shared_owners);
              while (__stlxr(v40 - 1, p_shared_owners));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v37);
              }
              v41 = __dst.__pn_.__r_.__value_.__r.__words[0];
              *(_WORD *)_os_log_pack_fill() = 0;
              v42 = operator new();
              v43 = *(unsigned __int8 *)(v119 + 39);
              v44 = v117;
              if ((v43 & 0x80u) != 0)
              {
                v44 = *(_QWORD *)(v119 + 16);
                v43 = *(_QWORD *)(v119 + 24);
              }
              *(_QWORD *)v42 = v41;
              *(_OWORD *)(v42 + 8) = *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1];
              *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
              *(_OWORD *)(v42 + 24) = v132;
              v132 = 0uLL;
              *(_QWORD *)(v42 + 40) = v44;
              *(_QWORD *)(v42 + 48) = v43;
              *(_BYTE *)(v42 + 56) = 1;
              v144 = 0;
              v145[0] = v42;
              (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), v145);
              v45 = v145[0];
              v145[0] = 0;
              if (v45)
              {
                v46 = *(std::__shared_weak_count **)(v45 + 32);
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v49 = *(std::__shared_weak_count **)(v45 + 16);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                MEMORY[0x227684CE8](v45, 0x10F0C40B62ED6C6);
                v52 = v144;
                v144 = 0;
                if (v52)
                {
                  v53 = *(std::__shared_weak_count **)(v52 + 32);
                  if (v53)
                  {
                    v54 = (unint64_t *)&v53->__shared_owners_;
                    do
                      v55 = __ldaxr(v54);
                    while (__stlxr(v55 - 1, v54));
                    if (!v55)
                    {
                      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                      std::__shared_weak_count::__release_weak(v53);
                    }
                  }
                  v56 = *(std::__shared_weak_count **)(v52 + 16);
                  if (v56)
                  {
                    v57 = (unint64_t *)&v56->__shared_owners_;
                    do
                      v58 = __ldaxr(v57);
                    while (__stlxr(v58 - 1, v57));
                    if (!v58)
                    {
                      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                      std::__shared_weak_count::__release_weak(v56);
                    }
                  }
                  MEMORY[0x227684CE8](v52, 0x10F0C40B62ED6C6);
                }
              }
              v59 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
              if (*((_QWORD *)&v132 + 1))
              {
                v60 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              v62 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__r.__words[2];
              if (__dst.__pn_.__r_.__value_.__r.__words[2])
              {
                v63 = (unint64_t *)(__dst.__pn_.__r_.__value_.__r.__words[2] + 8);
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
            }
            else
            {
              os_log_type_enabled(v33, OS_LOG_TYPE_INFO);
              LOWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 0;
              v65 = (void *)_os_log_send_and_compose_impl();
              if (v65)
                free(v65);
            }
            if (v9)
            {
              sub_22322C138((uint64_t)&v121, "Initializing persistence filesystem with filesystem access");
              sub_223182C08((uint64_t)&v121);
            }
            sub_223182C08((uint64_t)&v121);
            v66 = v129;
            if (v129)
            {
              v67 = (unint64_t *)&v129->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              goto LABEL_199;
            }
            return a1;
          }
        }
        memmove(v30, v13, v12);
        goto LABEL_61;
      }
    }
    memmove(p_size, v22, v23);
    goto LABEL_53;
  }
  if (v141)
  {
    if (v140)
    {
      if (v139 < 0)
        operator delete(__p);
      if (v137 < 0)
        operator delete(v134);
    }
    if ((_BYTE)v133 && SHIBYTE(v132) < 0)
      operator delete((void *)__dst.__pn_.__r_.__value_.__r.__words[2]);
  }
  *(_BYTE *)(a1 + 40) = 0;
  sub_2236E4194(&v130);
  if (**(int **)(v130 + 56) > 3)
    return a1;
  v15 = *(unsigned __int8 *)(v130 + 72);
  v16 = sub_22322F254(v130, "OSLogSurrogateAppender", 1, 0);
  v17 = v16;
  if (!v15 && !v16)
    return a1;
  v121 = &v130;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v123 = std::chrono::system_clock::now().__d_.__rep_;
  v124 = 3;
  v125 = "unknown file";
  v126 = 48;
  v128 = 0;
  v129 = 0;
  v127 = "unknown function";
  v120 = v130;
  if (*(char *)(v130 + 39) < 0)
  {
    v19 = *(const char **)(v130 + 16);
    v18 = *(_QWORD *)(v130 + 24);
    v118 = v130 + 16;
    v69 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v69 & 1) != 0)
      goto LABEL_120;
  }
  else
  {
    v18 = *(unsigned __int8 *)(v130 + 39);
    v19 = (const char *)(v130 + 16);
    v118 = v130 + 16;
    v20 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v20 & 1) != 0)
      goto LABEL_120;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&__dst);
    sub_223199C58("com.apple.cv3d", (unint64_t)&__dst, &xmmword_255788F40);
    if ((_BYTE)v132 && SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_120:
  if (byte_255788F57 >= 0)
    v70 = (const char *)&xmmword_255788F40;
  else
    v70 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v71 = byte_255788F57;
  else
    v71 = *((_QWORD *)&xmmword_255788F40 + 1);
  __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v70, v19);
  v72 = &__dst.__pn_.__r_.__value_.__l.__size_;
  if (v71 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v71 >= 0x17)
  {
    v73 = v17;
    v74 = v19;
    v75 = v15;
    v76 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v76 = v71 | 7;
    v77 = v76 + 1;
    v72 = (std::string::size_type *)operator new(v76 + 1);
    __dst.__pn_.__r_.__value_.__r.__words[2] = v71;
    *(_QWORD *)&v132 = v77 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
    v15 = v75;
    v19 = v74;
    v17 = v73;
    goto LABEL_133;
  }
  BYTE7(v132) = v71;
  if (v71)
LABEL_133:
    memmove(v72, v70, v71);
  *((_BYTE *)v72 + v71) = 0;
  BYTE8(v132) = 1;
  v78 = &v133;
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v18 >= 0x17)
  {
    v79 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v79 = v18 | 7;
    v80 = v79 + 1;
    v78 = operator new(v79 + 1);
    v134 = (void *)v18;
    v135 = v80 | 0x8000000000000000;
    v133 = v78;
    goto LABEL_141;
  }
  HIBYTE(v135) = v18;
  if (v18)
LABEL_141:
    memmove(v78, v19, v18);
  *((_BYTE *)v78 + v18) = 0;
  v136 = 1;
  v81 = __dst.__pn_.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v135) < 0)
    operator delete(v133);
  if (BYTE8(v132) && SBYTE7(v132) < 0)
    operator delete((void *)__dst.__pn_.__r_.__value_.__l.__size_);
  if (__dst.__pn_.__r_.__value_.__r.__words[0])
    os_release(__dst.__pn_.__r_.__value_.__l.__data_);
  if (v17 && *(_QWORD *)(v17 + 24))
  {
    v82 = _os_log_pack_size();
    v83 = (std::__shared_weak_count_vtbl *)operator new(v82, (std::align_val_t)8uLL);
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v84;
    v84->__shared_owners_ = 0;
    v86 = (unint64_t *)&v84->__shared_owners_;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v83;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
    __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v83;
    __dst.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v84;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    v132 = 0uLL;
    v133 = 0;
    do
      v88 = __ldaxr(v86);
    while (__stlxr(v88 - 1, v86));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v85);
    }
    v89 = __dst.__pn_.__r_.__value_.__r.__words[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v90 = operator new();
    v91 = *(unsigned __int8 *)(v120 + 39);
    v92 = v118;
    if ((v91 & 0x80u) != 0)
    {
      v92 = *(_QWORD *)(v120 + 16);
      v91 = *(_QWORD *)(v120 + 24);
    }
    *(_QWORD *)v90 = v89;
    *(_OWORD *)(v90 + 8) = *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1];
    *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v90 + 24) = v132;
    v132 = 0uLL;
    *(_QWORD *)(v90 + 40) = v92;
    *(_QWORD *)(v90 + 48) = v91;
    *(_BYTE *)(v90 + 56) = 1;
    v144 = 0;
    v145[0] = v90;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), v145);
    v93 = v145[0];
    v145[0] = 0;
    if (v93)
    {
      v94 = *(std::__shared_weak_count **)(v93 + 32);
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v97 = *(std::__shared_weak_count **)(v93 + 16);
      if (v97)
      {
        v98 = (unint64_t *)&v97->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      MEMORY[0x227684CE8](v93, 0x10F0C40B62ED6C6);
      v100 = v144;
      v144 = 0;
      if (v100)
      {
        v101 = *(std::__shared_weak_count **)(v100 + 32);
        if (v101)
        {
          v102 = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        v104 = *(std::__shared_weak_count **)(v100 + 16);
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        MEMORY[0x227684CE8](v100, 0x10F0C40B62ED6C6);
      }
    }
    v107 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
    if (*((_QWORD *)&v132 + 1))
    {
      v108 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v110 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__r.__words[2];
    if (__dst.__pn_.__r_.__value_.__r.__words[2])
    {
      v111 = (unint64_t *)(__dst.__pn_.__r_.__value_.__r.__words[2] + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
  }
  else
  {
    os_log_type_enabled(v81, OS_LOG_TYPE_INFO);
    LOWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 0;
    v113 = (void *)_os_log_send_and_compose_impl();
    if (v113)
      free(v113);
  }
  if (v15)
  {
    sub_22322C138((uint64_t)&v121, "Initializing persistence filesystem without filesystem access");
    sub_223182C08((uint64_t)&v121);
  }
  sub_223182C08((uint64_t)&v121);
  v66 = v129;
  if (v129)
  {
    v114 = (unint64_t *)&v129->__shared_owners_;
    do
      v68 = __ldaxr(v114);
    while (__stlxr(v68 - 1, v114));
LABEL_199:
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  return a1;
}

void sub_2236E3FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void **v34;
  uint64_t v36;

  if (a29 && a28 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  v36 = *(_QWORD *)(v33 + 32);
  *(_QWORD *)(v33 + 32) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (*(char *)(v33 + 31) < 0)
    operator delete(*v34);
  _Unwind_Resume(a1);
}

void sub_2236E4194(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC090);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC090))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC088);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC090);
  }
  *a1 = qword_2540CC088;
}

void sub_2236E4230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC090);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC090);
  _Unwind_Resume(a1);
}

uint64_t sub_2236E4288(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC57960;
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_2236E42F4(uint64_t a1)
{
  unsigned __int8 v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  std::string *p_p;
  uint64_t v6;
  const char *v7;
  size_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  const char *v11;
  size_t v12;
  std::string::size_type *p_size;
  std::string *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  size_t v22;
  void *v23;
  _QWORD *v24;
  size_t v25;
  size_t v26;
  _QWORD *p_dst;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string::size_type v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  std::string::size_type v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::string *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *exception;
  _QWORD *v79;
  const char *v80;
  std::string __p;
  _QWORD v82[3];
  int v83;
  const char *v84;
  int v85;
  const char *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  _BYTE v90[16];
  void *v91;
  char v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  char v98;
  char v99;
  char v100;
  std::string v101;
  char *v102;
  std::__shared_weak_count *v103;
  _QWORD *__dst;
  __int128 v105;
  std::string v106;
  __int128 v107;
  void *v108[2];
  unint64_t v109;
  char v110;
  _QWORD v111[5];

  v111[2] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 40) = 1;
  sub_22400475C(a1 + 8, *(_QWORD *)(a1 + 32), (uint64_t)v90);
  if (v100)
    return;
  v1 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kfplanes_pers", 0x18uLL, "An error occured when trying to access the pers root folder after filesystem access was granted: %s", 0x63uLL);
  sub_2236E4E78(&v89);
  if (**(int **)(v89 + 56) <= 5)
  {
    v2 = *(unsigned __int8 *)(v89 + 72);
    v3 = sub_22322F254(v89, "OSLogSurrogateAppender", 1, 0);
    v4 = v3;
    if (v2 || v3)
    {
      v82[0] = &v89;
      v82[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v82[2] = std::chrono::system_clock::now().__d_.__rep_;
      v83 = 5;
      v84 = "unknown file";
      v85 = 61;
      v87 = 0;
      v88 = 0;
      v86 = "unknown function";
      if (v100)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24EC1FCC0;
        __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
      }
      p_p = &__p;
      sub_22456A158((uint64_t)v90, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v6 = *(_QWORD *)v82[0];
      v7 = (const char *)(*(_QWORD *)v82[0] + 16);
      v80 = v7;
      if (*(char *)(*(_QWORD *)v82[0] + 39) < 0)
      {
        v7 = *(const char **)(v6 + 16);
        v8 = *(_QWORD *)(v6 + 24);
        v10 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v10 & 1) != 0)
          goto LABEL_13;
      }
      else
      {
        v8 = *(unsigned __int8 *)(*(_QWORD *)v82[0] + 39);
        v9 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v9 & 1) != 0)
          goto LABEL_13;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v106);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v106, &xmmword_255788F40);
        if ((_BYTE)v107 && SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_13:
      if (byte_255788F57 >= 0)
        v11 = (const char *)&xmmword_255788F40;
      else
        v11 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v12 = byte_255788F57;
      else
        v12 = *((_QWORD *)&xmmword_255788F40 + 1);
      v106.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v11, v7);
      p_size = &v106.__r_.__value_.__l.__size_;
      if (v12 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v12 >= 0x17)
      {
        v14 = p_p;
        v15 = v2;
        v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v16 = v12 | 7;
        v17 = v16 + 1;
        p_size = (std::string::size_type *)operator new(v16 + 1);
        v106.__r_.__value_.__r.__words[2] = v12;
        *(_QWORD *)&v107 = v17 | 0x8000000000000000;
        v106.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
        v2 = v15;
        p_p = v14;
      }
      else
      {
        BYTE7(v107) = v12;
        if (!v12)
        {
LABEL_27:
          *((_BYTE *)p_size + v12) = 0;
          BYTE8(v107) = 1;
          v18 = v108;
          if (v8 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v8 >= 0x17)
          {
            v19 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17)
              v19 = v8 | 7;
            v20 = v19 + 1;
            v18 = (void **)operator new(v19 + 1);
            v108[1] = (void *)v8;
            v109 = v20 | 0x8000000000000000;
            v108[0] = v18;
          }
          else
          {
            HIBYTE(v109) = v8;
            if (!v8)
            {
LABEL_35:
              *((_BYTE *)v18 + v8) = 0;
              v110 = 1;
              v21 = v106.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v109) < 0)
                operator delete(v108[0]);
              if (BYTE8(v107) && SBYTE7(v107) < 0)
                operator delete((void *)v106.__r_.__value_.__l.__size_);
              if (v106.__r_.__value_.__r.__words[0])
                os_release(v106.__r_.__value_.__l.__data_);
              if (!v4 || !*(_QWORD *)(v4 + 24))
              {
                os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
                LODWORD(v106.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v106.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
                v28 = (void *)_os_log_send_and_compose_impl();
                if (v28)
                  free(v28);
                goto LABEL_113;
              }
              v22 = _os_log_pack_size();
              v23 = operator new(v22, (std::align_val_t)8uLL);
              v24 = (_QWORD *)operator new();
              *v24 = &off_24EC1F7F0;
              v24[1] = 0;
              v24[2] = 0;
              v24[3] = v23;
              v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
              v101.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
              v102 = 0;
              v103 = 0;
              v101.__r_.__value_.__r.__words[2] = (std::string::size_type)v24;
              v25 = strlen((const char *)p_p);
              if (v25 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v26 = v25;
              if (v25 >= 0x17)
              {
                v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v25 | 7) != 0x17)
                  v29 = v25 | 7;
                v30 = v29 + 1;
                p_dst = operator new(v29 + 1);
                *(_QWORD *)&v105 = v26;
                *((_QWORD *)&v105 + 1) = v30 | 0x8000000000000000;
                __dst = p_dst;
              }
              else
              {
                HIBYTE(v105) = v25;
                p_dst = &__dst;
                if (!v25)
                {
LABEL_54:
                  *((_BYTE *)p_dst + v26) = 0;
                  v31 = __dst;
                  v111[0] = v105;
                  *(_QWORD *)((char *)v111 + 7) = *(_QWORD *)((char *)&v105 + 7);
                  v32 = HIBYTE(v105);
                  v33 = operator new(0x38uLL);
                  v33[1] = 0;
                  v33[2] = 0;
                  v33[3] = off_24EC1FA48;
                  *v33 = &off_24EC1F9F8;
                  v34 = v111[0];
                  v33[4] = v31;
                  v33[5] = v34;
                  *(_QWORD *)((char *)v33 + 47) = *(_QWORD *)((char *)v111 + 7);
                  *((_BYTE *)v33 + 55) = v32;
                  v111[0] = 0;
                  *(_QWORD *)((char *)v111 + 7) = 0;
                  v35 = v103;
                  v102 = (char *)(v33 + 3);
                  v103 = (std::__shared_weak_count *)v33;
                  if (v35)
                  {
                    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
                    do
                      v37 = __ldaxr(p_shared_owners);
                    while (__stlxr(v37 - 1, p_shared_owners));
                    if (!v37)
                    {
                      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                      std::__shared_weak_count::__release_weak(v35);
                    }
                  }
                  v106 = v101;
                  v38 = v102;
                  if (v101.__r_.__value_.__r.__words[2])
                  {
                    v39 = (unint64_t *)(v101.__r_.__value_.__r.__words[2] + 8);
                    do
                      v40 = __ldxr(v39);
                    while (__stxr(v40 + 1, v39));
                  }
                  v41 = v103;
                  *(_QWORD *)&v107 = v38;
                  *((_QWORD *)&v107 + 1) = v103;
                  if (v103)
                  {
                    v42 = (unint64_t *)&v103->__shared_owners_;
                    do
                      v43 = __ldxr(v42);
                    while (__stxr(v43 + 1, v42));
                    v108[0] = v38;
                    do
                      v44 = __ldaxr(v42);
                    while (__stlxr(v44 - 1, v42));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                      std::__shared_weak_count::__release_weak(v41);
                    }
                  }
                  else
                  {
                    v108[0] = v38;
                  }
                  v45 = (std::__shared_weak_count *)v101.__r_.__value_.__r.__words[2];
                  if (v101.__r_.__value_.__r.__words[2])
                  {
                    v46 = (unint64_t *)(v101.__r_.__value_.__r.__words[2] + 8);
                    do
                      v47 = __ldaxr(v46);
                    while (__stlxr(v47 - 1, v46));
                    if (!v47)
                    {
                      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                      std::__shared_weak_count::__release_weak(v45);
                    }
                  }
                  v48 = v106.__r_.__value_.__r.__words[0];
                  if (*((char *)v108[0] + 31) >= 0)
                    v49 = (char *)v108[0] + 8;
                  else
                    v49 = (char *)*((_QWORD *)v108[0] + 1);
                  v50 = _os_log_pack_fill();
                  *(_DWORD *)v50 = 136315138;
                  *(_QWORD *)(v50 + 4) = v49;
                  v51 = operator new();
                  v52 = *(unsigned __int8 *)(v6 + 39);
                  v53 = v80;
                  if ((v52 & 0x80u) != 0)
                  {
                    v53 = *(const char **)(v6 + 16);
                    v52 = *(_QWORD *)(v6 + 24);
                  }
                  *(_QWORD *)v51 = v48;
                  *(_OWORD *)(v51 + 8) = *(_OWORD *)&v106.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&v106.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v51 + 24) = v107;
                  v107 = 0uLL;
                  *(_QWORD *)(v51 + 40) = v53;
                  *(_QWORD *)(v51 + 48) = v52;
                  *(_BYTE *)(v51 + 56) = 16;
                  __dst = 0;
                  v101.__r_.__value_.__r.__words[0] = v51;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), &v101);
                  v54 = v101.__r_.__value_.__r.__words[0];
                  v101.__r_.__value_.__r.__words[0] = 0;
                  if (v54)
                  {
                    v55 = *(std::__shared_weak_count **)(v54 + 32);
                    if (v55)
                    {
                      v56 = (unint64_t *)&v55->__shared_owners_;
                      do
                        v57 = __ldaxr(v56);
                      while (__stlxr(v57 - 1, v56));
                      if (!v57)
                      {
                        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                        std::__shared_weak_count::__release_weak(v55);
                      }
                    }
                    v58 = *(std::__shared_weak_count **)(v54 + 16);
                    if (v58)
                    {
                      v59 = (unint64_t *)&v58->__shared_owners_;
                      do
                        v60 = __ldaxr(v59);
                      while (__stlxr(v60 - 1, v59));
                      if (!v60)
                      {
                        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                        std::__shared_weak_count::__release_weak(v58);
                      }
                    }
                    MEMORY[0x227684CE8](v54, 0x10F0C40B62ED6C6);
                    v61 = __dst;
                    __dst = 0;
                    if (v61)
                    {
                      v62 = (std::__shared_weak_count *)v61[4];
                      if (v62)
                      {
                        v63 = (unint64_t *)&v62->__shared_owners_;
                        do
                          v64 = __ldaxr(v63);
                        while (__stlxr(v64 - 1, v63));
                        if (!v64)
                        {
                          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                          std::__shared_weak_count::__release_weak(v62);
                        }
                      }
                      v65 = (std::__shared_weak_count *)v61[2];
                      if (v65)
                      {
                        v66 = (unint64_t *)&v65->__shared_owners_;
                        do
                          v67 = __ldaxr(v66);
                        while (__stlxr(v67 - 1, v66));
                        if (!v67)
                        {
                          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                          std::__shared_weak_count::__release_weak(v65);
                        }
                      }
                      MEMORY[0x227684CE8](v61, 0x10F0C40B62ED6C6);
                    }
                  }
                  v68 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
                  if (*((_QWORD *)&v107 + 1))
                  {
                    v69 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
                    do
                      v70 = __ldaxr(v69);
                    while (__stlxr(v70 - 1, v69));
                    if (!v70)
                    {
                      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                      std::__shared_weak_count::__release_weak(v68);
                    }
                  }
                  v71 = (std::__shared_weak_count *)v106.__r_.__value_.__r.__words[2];
                  if (v106.__r_.__value_.__r.__words[2])
                  {
                    v72 = (unint64_t *)(v106.__r_.__value_.__r.__words[2] + 8);
                    do
                      v73 = __ldaxr(v72);
                    while (__stlxr(v73 - 1, v72));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                  }
LABEL_113:
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (v2)
                  {
                    if (v100)
                    {
                      v79 = __cxa_allocate_exception(8uLL);
                      *v79 = &off_24EC1FCC0;
                      __cxa_throw(v79, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
                    }
                    sub_22456A158((uint64_t)v90, &v106);
                    if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v74 = &v106;
                    else
                      v74 = (std::string *)v106.__r_.__value_.__r.__words[0];
                    sub_22322C138((uint64_t)v82, "An error occured when trying to access the pers root folder after filesystem access was granted: %s", (const char *)v74);
                    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v106.__r_.__value_.__l.__data_);
                    sub_223182C08((uint64_t)v82);
                  }
                  sub_223182C08((uint64_t)v82);
                  v75 = v88;
                  if (v88)
                  {
                    v76 = (unint64_t *)&v88->__shared_owners_;
                    do
                      v77 = __ldaxr(v76);
                    while (__stlxr(v77 - 1, v76));
                    if (!v77)
                    {
                      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                      std::__shared_weak_count::__release_weak(v75);
                    }
                  }
                  goto LABEL_128;
                }
              }
              memcpy(p_dst, p_p, v26);
              goto LABEL_54;
            }
          }
          memmove(v18, v7, v8);
          goto LABEL_35;
        }
      }
      memmove(p_size, v11, v12);
      goto LABEL_27;
    }
  }
LABEL_128:
  if (!v100 && v99)
  {
    if (v98)
    {
      if (v97 < 0)
        operator delete(v96);
      if (v95 < 0)
        operator delete(v94);
    }
    if (v93)
    {
      if (v92 < 0)
        operator delete(v91);
    }
  }
}

void sub_2236E4D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  if (*(_BYTE *)(v44 - 168) && *(char *)(v44 - 169) < 0)
    operator delete(*(void **)(v44 - 192));
  __cxa_guard_abort(&qword_255788F58);
  if (a17 < 0)
    operator delete(__p);
  sub_223182DAC((uint64_t)&a18);
  sub_223197D38((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_2236E4E78(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CC0A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CC0A0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d.kfplanes");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CC098);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CC0A0);
  }
  *a1 = qword_2540CC098;
}

void sub_2236E4F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CC0A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CC0A0);
  _Unwind_Resume(a1);
}

void sub_2236E4F6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 368))(&v15, *(_QWORD *)(a1 + 32), a2, 8);
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    std::istream::tellg();
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    std::istream::seekg();
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    std::istream::tellg();
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    std::istream::seekg();
    v6 = v18;
    v7 = v19;
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    sub_2236E68B0((uint64_t *)a3, *(_QWORD **)((char *)v8 + *(_QWORD *)(*v8 - 24) + 40), v6 - v7);
    *(_BYTE *)(a3 + 24) = 1;
    kdebug_trace();
    v9 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    kdebug_trace();
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
}

void sub_2236E5160(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_2236E5184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2242BB3F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236E5198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2242BB3F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2236E51AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2242BB3F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2236E51C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v15 = a2;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 728309792;
  kdebug_trace();
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 376))(&v12, *(_QWORD *)(a1 + 32), a4, 16);
  v6 = v13;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    std::ostream::write();
    v7 = v14;
    if (!v14)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
  }
  else
  {
    v7 = v14;
    if (!v14)
      goto LABEL_11;
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v10);
    while (__stlxr(v9 - 1, v10));
  }
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  kdebug_trace();
  return v6 != 0;
}

void sub_2236E52E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2231874DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236E52FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_2242BB4F8((uint64_t)&a9);
  sub_2231874DC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_2236E5318(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  const std::__fs::filesystem::path *v6;
  std::__fs::filesystem::path::__string_view v7;
  int v8;
  _BOOL4 v10;
  std::__fs::filesystem::filesystem_error *exception;
  std::__fs::filesystem::path::iterator v12;
  std::__fs::filesystem::path::iterator v13;
  std::__fs::filesystem::path::iterator v14;
  std::__fs::filesystem::path __dst;
  _BYTE v16[25];
  __int128 __p;
  std::string::size_type v18;
  _OWORD v19[2];
  std::__fs::filesystem::path::iterator v20;
  __int128 v21;
  std::string::size_type v22;
  _BYTE v23[25];
  std::__fs::filesystem::path::iterator v24;
  __int128 v25;
  int64_t v26;
  std::__fs::filesystem::path stashed_elem;
  std::error_code v28;

  v6 = (const std::__fs::filesystem::path *)(a2 + 8);
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&__dst, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    else
      __dst = *this;
  }
  else
  {
    if (*(char *)(a2 + 31) < 0)
      sub_223197FA4(&__dst, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    else
      __dst = *v6;
    sub_22319C30C((uint64_t)&__dst, this);
  }
  std::__fs::filesystem::path::lexically_normal(a3, &__dst);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::begin(&v14, v6);
  std::__fs::filesystem::path::end(&v13, v6);
  std::__fs::filesystem::path::begin(&v12, a3);
  if (SHIBYTE(v14.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v24, v14.__stashed_elem_.__pn_.__r_.__value_.__l.__data_, v14.__stashed_elem_.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v24.__stashed_elem_.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&v14.__stashed_elem_.__pn_.__r_.__value_.__l.__data_;
    v24.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2] = v14.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2];
  }
  *(_OWORD *)&v24.__path_ptr_ = *(_OWORD *)&v14.__path_ptr_;
  *(std::__fs::filesystem::path::__string_view *)((char *)&v24.__entry_ + 1) = *(std::__fs::filesystem::path::__string_view *)((char *)&v14.__entry_ + 1);
  if (SHIBYTE(v13.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v21, v13.__stashed_elem_.__pn_.__r_.__value_.__l.__data_, v13.__stashed_elem_.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v21 = *(_OWORD *)&v13.__stashed_elem_.__pn_.__r_.__value_.__l.__data_;
    v22 = v13.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2];
  }
  *(_OWORD *)v23 = *(_OWORD *)&v13.__path_ptr_;
  *(std::__fs::filesystem::path::__string_view *)&v23[9] = *(std::__fs::filesystem::path::__string_view *)((char *)&v13.__entry_ + 1);
  if (SHIBYTE(v12.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v20, v12.__stashed_elem_.__pn_.__r_.__value_.__l.__data_, v12.__stashed_elem_.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20.__stashed_elem_.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__stashed_elem_.__pn_.__r_.__value_.__l.__data_;
    v20.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2] = v12.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2];
  }
  *(_OWORD *)&v20.__path_ptr_ = *(_OWORD *)&v12.__path_ptr_;
  *(std::__fs::filesystem::path::__string_view *)((char *)&v20.__entry_ + 1) = *(std::__fs::filesystem::path::__string_view *)((char *)&v12.__entry_ + 1);
  while (v24.__path_ptr_ != *(const std::__fs::filesystem::path **)v23
       || v24.__entry_.__data_ != *(const std::string_view::value_type **)&v23[8])
  {
    if (SHIBYTE(v24.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_223197FA4(&stashed_elem, v24.__stashed_elem_.__pn_.__r_.__value_.__l.__data_, v24.__stashed_elem_.__pn_.__r_.__value_.__l.__size_);
    else
      stashed_elem = v24.__stashed_elem_;
    if (SHIBYTE(v20.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v25, v20.__stashed_elem_.__pn_.__r_.__value_.__l.__data_, v20.__stashed_elem_.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      v25 = *(_OWORD *)&v20.__stashed_elem_.__pn_.__r_.__value_.__l.__data_;
      v26 = v20.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2];
    }
    if (v26 >= 0)
      v7.__data_ = (const std::string_view::value_type *)&v25;
    else
      v7.__data_ = (const std::string_view::value_type *)v25;
    if (v26 >= 0)
      v7.__size_ = HIBYTE(v26);
    else
      v7.__size_ = *((_QWORD *)&v25 + 1);
    v8 = std::__fs::filesystem::path::__compare(&stashed_elem, v7);
    if (SHIBYTE(v26) < 0)
    {
      operator delete((void *)v25);
      if (SHIBYTE(stashed_elem.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_39:
        operator delete(stashed_elem.__pn_.__r_.__value_.__l.__data_);
        if (v8)
          break;
        goto LABEL_40;
      }
    }
    else if (SHIBYTE(stashed_elem.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_39;
    }
    if (v8)
      break;
LABEL_40:
    std::__fs::filesystem::path::iterator::__increment(&v24);
    std::__fs::filesystem::path::iterator::__increment(&v20);
  }
  if (SHIBYTE(v24.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__dst, v24.__stashed_elem_.__pn_.__r_.__value_.__l.__data_, v24.__stashed_elem_.__pn_.__r_.__value_.__l.__size_);
  else
    __dst = v24.__stashed_elem_;
  *(_OWORD *)v16 = *(_OWORD *)&v24.__path_ptr_;
  *(std::__fs::filesystem::path::__string_view *)&v16[9] = *(std::__fs::filesystem::path::__string_view *)((char *)&v24.__entry_ + 1);
  if (SHIBYTE(v20.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&__p, v20.__stashed_elem_.__pn_.__r_.__value_.__l.__data_, v20.__stashed_elem_.__pn_.__r_.__value_.__l.__size_);
    v19[0] = *(_OWORD *)&v20.__path_ptr_;
    *(std::__fs::filesystem::path::__string_view *)((char *)v19 + 9) = *(std::__fs::filesystem::path::__string_view *)((char *)&v20.__entry_ + 1);
    if (SHIBYTE(v20.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v20.__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22) < 0)
        goto LABEL_73;
    }
    else if (SHIBYTE(v22) < 0)
    {
      goto LABEL_73;
    }
  }
  else
  {
    __p = *(_OWORD *)&v20.__stashed_elem_.__pn_.__r_.__value_.__l.__data_;
    v18 = v20.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2];
    v19[0] = *(_OWORD *)&v20.__path_ptr_;
    *(std::__fs::filesystem::path::__string_view *)((char *)v19 + 9) = *(std::__fs::filesystem::path::__string_view *)((char *)&v20.__entry_ + 1);
    if (SHIBYTE(v22) < 0)
    {
LABEL_73:
      operator delete((void *)v21);
      if ((SHIBYTE(v24.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_51;
      goto LABEL_74;
    }
  }
  if ((SHIBYTE(v24.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_51;
LABEL_74:
  operator delete(v24.__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
LABEL_51:
  std::__fs::filesystem::path::end(&v24, v6);
  v10 = *(const std::__fs::filesystem::path **)v16 != v24.__path_ptr_
     || *(const std::string_view::value_type **)&v16[8] != v24.__entry_.__data_;
  if (SHIBYTE(v24.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_59:
      if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_67;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_59;
  }
  operator delete((void *)__p);
  if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_60:
    if ((SHIBYTE(v12.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_68;
  }
LABEL_67:
  operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v12.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_61:
    if ((SHIBYTE(v13.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
    goto LABEL_69;
  }
LABEL_68:
  operator delete(v12.__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_62:
    if ((SHIBYTE(v14.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_63;
    goto LABEL_70;
  }
LABEL_69:
  operator delete(v13.__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_63:
    if (!v10)
      return;
LABEL_71:
    exception = (std::__fs::filesystem::filesystem_error *)__cxa_allocate_exception(0x30uLL);
    sub_223174DE4(&__dst, "The provided path is outside the root path");
    v28.__cat_ = std::generic_category();
    *(_QWORD *)&v28.__val_ = 1;
    sub_2236E5998(exception, &__dst.__pn_, (uint64_t)a3, (uint64_t)v6, v28);
    __cxa_throw(exception, MEMORY[0x24BEDB708], MEMORY[0x24BEDB268]);
  }
LABEL_70:
  operator delete(v14.__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
  if (v10)
    goto LABEL_71;
}

void sub_2236E57A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  uint64_t v63;

  if (a45 < 0)
    operator delete(__p);
  if (a62 < 0)
  {
    operator delete(a57);
    if ((*(char *)(v63 - 233) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(v63 - 169) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v63 - 233) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v63 - 256));
  if ((*(char *)(v63 - 169) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a15 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v63 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a10);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a35 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  operator delete(a20);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_10:
    if (*(char *)(v62 + 23) < 0)
      operator delete(*(void **)v62);
    _Unwind_Resume(exception_object);
  }
LABEL_9:
  operator delete(a30);
  goto LABEL_10;
}

uint64_t sub_2236E5940(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::__fs::filesystem::filesystem_error *sub_2236E5998(std::__fs::filesystem::filesystem_error *a1, std::string *__what_arg, uint64_t a3, uint64_t a4, std::error_code __ec)
{
  std::system_error *v8;

  v8 = std::system_error::system_error(a1, __ec, __what_arg);
  v8->__vftable = (std::system_error_vtbl *)(MEMORY[0x24BEDB878] + 16);
  sub_2236E6AE4(a3, a4, &v8[1].__vftable);
  std::__fs::filesystem::filesystem_error::__create_what(a1, 2);
  return a1;
}

void sub_2236E5A10(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  std::__shared_weak_count *imp;
  unint64_t *p_shared_owners;
  unint64_t v5;

  imp = (std::__shared_weak_count *)v1[2].__imp_.__imp_;
  if (imp)
  {
    p_shared_owners = (unint64_t *)&imp->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
      std::runtime_error::~runtime_error(v1);
      _Unwind_Resume(a1);
    }
  }
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2236E5A70(uint64_t a1, const std::__fs::filesystem::path *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  __int128 *v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD v65[3];
  int v66;
  const char *v67;
  int v68;
  const char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  int v75;
  uint64_t v76;
  void *object;
  __int128 v78;
  __int128 v79;
  void *__p[2];
  unint64_t v81;
  char v82;
  uint64_t v83[4];

  v73 = 0u;
  v74 = 0u;
  v75 = 728309988;
  kdebug_trace();
  if (!std::__fs::filesystem::path::__root_directory(a2).__size_)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &stru_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223195728((uint64_t)&stru_255789280, "cv3d.recon.kfplanes_pers", 0x18uLL, "Destination path is not absolute.", 0x21uLL);
    sub_2236E4E78(&v72);
    if (**(int **)(v72 + 56) > 5)
      goto LABEL_95;
    v6 = *(unsigned __int8 *)(v72 + 72);
    v7 = sub_22322F254(v72, "OSLogSurrogateAppender", 1, 0);
    v8 = v7;
    if (!v6 && !v7)
      goto LABEL_95;
    v65[0] = &v72;
    v65[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v65[2] = std::chrono::system_clock::now().__d_.__rep_;
    v66 = 5;
    v67 = "unknown file";
    v68 = 118;
    v70 = 0;
    v71 = 0;
    v69 = "unknown function";
    v9 = v72;
    v10 = v72 + 16;
    if (*(char *)(v72 + 39) < 0)
    {
      v12 = *(const char **)(v72 + 16);
      v11 = *(_QWORD *)(v72 + 24);
      v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v14 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v11 = *(unsigned __int8 *)(v72 + 39);
      v12 = (const char *)(*(_QWORD *)v65[0] + 16);
      v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v13 & 1) != 0)
        goto LABEL_11;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v79 && SHIBYTE(v78) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_11:
    if (byte_255788F57 >= 0)
      v15 = (const char *)&xmmword_255788F40;
    else
      v15 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v16 = byte_255788F57;
    else
      v16 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v15, v12);
    v17 = &v78;
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v16 >= 0x17)
    {
      v18 = v8;
      v19 = v12;
      v20 = v9;
      v21 = v6;
      v22 = v10;
      v23 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v23 = v16 | 7;
      v24 = v23 + 1;
      v17 = (__int128 *)operator new(v23 + 1);
      *((_QWORD *)&v78 + 1) = v16;
      *(_QWORD *)&v79 = v24 | 0x8000000000000000;
      *(_QWORD *)&v78 = v17;
      v10 = v22;
      v6 = v21;
      v9 = v20;
      v12 = v19;
      v8 = v18;
    }
    else
    {
      BYTE7(v79) = v16;
      if (!v16)
      {
LABEL_25:
        *((_BYTE *)v17 + v16) = 0;
        BYTE8(v79) = 1;
        v25 = __p;
        if (v11 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v11 >= 0x17)
        {
          v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v26 = v11 | 7;
          v27 = v26 + 1;
          v25 = operator new(v26 + 1);
          __p[1] = (void *)v11;
          v81 = v27 | 0x8000000000000000;
          __p[0] = v25;
        }
        else
        {
          HIBYTE(v81) = v11;
          if (!v11)
            goto LABEL_33;
        }
        memmove(v25, v12, v11);
LABEL_33:
        *((_BYTE *)v25 + v11) = 0;
        v82 = 1;
        v28 = object;
        if (SHIBYTE(v81) < 0)
          operator delete(__p[0]);
        if (BYTE8(v79) && SBYTE7(v79) < 0)
          operator delete((void *)v78);
        if (object)
          os_release(object);
        if (v8 && *(_QWORD *)(v8 + 24))
        {
          v29 = _os_log_pack_size();
          v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
          v31 = (std::__shared_weak_count *)operator new();
          v32 = v31;
          v31->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v31->__shared_weak_owners_ = 0;
          v31[1].__vftable = v30;
          object = v30;
          *(_QWORD *)&v78 = v30;
          *((_QWORD *)&v78 + 1) = v31;
          do
            v34 = __ldxr(p_shared_owners);
          while (__stxr(v34 + 1, p_shared_owners));
          v79 = 0uLL;
          __p[0] = 0;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v32);
          }
          v36 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v37 = operator new();
          v38 = *(unsigned __int8 *)(v9 + 39);
          if ((v38 & 0x80u) == 0)
            v39 = v10;
          else
            v39 = *(_QWORD *)(v9 + 16);
          if ((v38 & 0x80u) != 0)
            v38 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)v37 = v36;
          *(_OWORD *)(v37 + 8) = v78;
          v78 = 0uLL;
          *(_OWORD *)(v37 + 24) = v79;
          v79 = 0uLL;
          *(_QWORD *)(v37 + 40) = v39;
          *(_QWORD *)(v37 + 48) = v38;
          *(_BYTE *)(v37 + 56) = 16;
          v76 = 0;
          v83[0] = v37;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v83);
          v40 = v83[0];
          v83[0] = 0;
          if (v40)
          {
            v41 = *(std::__shared_weak_count **)(v40 + 32);
            if (v41)
            {
              v42 = (unint64_t *)&v41->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v44 = *(std::__shared_weak_count **)(v40 + 16);
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
            v47 = v76;
            v76 = 0;
            if (v47)
            {
              v48 = *(std::__shared_weak_count **)(v47 + 32);
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
              v51 = *(std::__shared_weak_count **)(v47 + 16);
              if (v51)
              {
                v52 = (unint64_t *)&v51->__shared_owners_;
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
            }
          }
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
          if (*((_QWORD *)&v79 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          v57 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
          if (*((_QWORD *)&v78 + 1))
          {
            v58 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
        else
        {
          os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v60 = (void *)_os_log_send_and_compose_impl();
          if (v60)
            free(v60);
        }
        if (v6)
        {
          sub_22322C138((uint64_t)v65, "Destination path is not absolute.");
          sub_223182C08((uint64_t)v65);
        }
        sub_223182C08((uint64_t)v65);
        v61 = v71;
        if (v71)
        {
          v62 = (unint64_t *)&v71->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
LABEL_95:
        v4 = 0;
        goto LABEL_96;
      }
    }
    memmove(v17, v15, v16);
    goto LABEL_25;
  }
  sub_223FE17D4(a1 + 8, (uint64_t)a2, *(_QWORD ***)(a1 + 32));
  v4 = 1;
LABEL_96:
  kdebug_trace();
  return v4;
}

void sub_2236E6218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *__p,void *a32,int a33,__int16 a34,char a35,char a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  sub_2231874DC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_2236E62F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *category,uint64_t a30,void *__p,void *a32,int a33,__int16 a34,char a35,char a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  sub_2231874DC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_2236E65EC()
{
  return 0;
}

uint64_t sub_2236E65F4()
{
  return 0;
}

void sub_2236E65FC()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/KeyframePlanes/include_private/Reconstruction/KeyframePlanes/IPersistenceFilesystem.h", 93, (uint64_t)"", 0, (uint64_t)"Filesystem doesn't support caching", 34, (void (*)(void **))sub_22457406C);
  abort();
}

std::__fs::filesystem::filesystem_error *sub_2236E6644(std::__fs::filesystem::filesystem_error *a1, std::string *__what_arg, uint64_t a3, std::error_code __ec)
{
  std::system_error *v6;
  void *__p[2];
  uint64_t v9;

  v6 = std::system_error::system_error(a1, __ec, __what_arg);
  v6->__vftable = (std::system_error_vtbl *)(MEMORY[0x24BEDB878] + 16);
  __p[0] = 0;
  __p[1] = 0;
  v9 = 0;
  sub_2236E6718(a3, (uint64_t)__p, &v6[1].__vftable);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::__fs::filesystem::filesystem_error::__create_what(a1, 1);
  return a1;
}

void sub_2236E66D8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;

  sub_223167354(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_2236E66F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::runtime_error *v14;

  if (a14 < 0)
    operator delete(__p);
  std::runtime_error::~runtime_error(v14);
  _Unwind_Resume(a1);
}

_BYTE *sub_2236E6718@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  _QWORD *v7;
  _OWORD *v8;
  _BYTE *result;

  v6 = (char *)operator new(0x60uLL);
  v7 = v6;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24EC579E0;
  v8 = v6 + 24;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_223197FA4(v6 + 24, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *v8 = *(_OWORD *)a1;
    *((_QWORD *)v6 + 5) = *(_QWORD *)(a1 + 16);
  }
  result = v7 + 6;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_223197FA4(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    v7[8] = *(_QWORD *)(a2 + 16);
  }
  v7[9] = 0;
  v7[10] = 0;
  v7[11] = 0;
  *a3 = v8;
  a3[1] = v7;
  return result;
}

void sub_2236E67C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_2236E6808(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC579E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2236E6818(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC579E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2236E6848(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*(void **)(a1 + 24));
      return;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_7;
}

uint64_t *sub_2236E68B0(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  char *v14;
  char *v15;
  char *v16;

  v6 = operator new[]();
  *a1 = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_24EC57A30;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a1[1] = (uint64_t)v7;
  a1[2] = a3;
  if (a3)
  {
    v8 = (_BYTE *)*a1;
    v9 = (_BYTE *)a2[3];
    v10 = v9 == (_BYTE *)a2[4] ? (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2) : *v9;
    *v8 = v10;
    v11 = a3 - 1;
    if (v11)
    {
      v12 = v8 + 1;
      do
      {
        v15 = (char *)a2[3];
        v14 = (char *)a2[4];
        if (v15 == v14)
        {
          (*(void (**)(_QWORD *))(*a2 + 80))(a2);
          v16 = (char *)a2[3];
          if (v16 == (char *)a2[4])
          {
LABEL_13:
            v13 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
            goto LABEL_8;
          }
        }
        else
        {
          v16 = v15 + 1;
          a2[3] = v16;
          if (v16 == v14)
            goto LABEL_13;
        }
        v13 = *v16;
LABEL_8:
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
  }
  return a1;
}

void sub_2236E69D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2236E69E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

void sub_2236E6A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1);
  _Unwind_Resume(a1);
}

void sub_2236E6A20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2236E6A44(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x227684CB8);
  return result;
}

uint64_t sub_2236E6A64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000022464AFECLL)
    return a1 + 24;
  if (((v3 & 0x800000022464AFECLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000022464AFECLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000022464AFECLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_BYTE *sub_2236E6AE4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  _QWORD *v7;
  _OWORD *v8;
  _BYTE *result;

  v6 = (char *)operator new(0x60uLL);
  v7 = v6;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24EC579E0;
  v8 = v6 + 24;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_223197FA4(v6 + 24, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *v8 = *(_OWORD *)a1;
    *((_QWORD *)v6 + 5) = *(_QWORD *)(a1 + 16);
  }
  result = v7 + 6;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_223197FA4(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    v7[8] = *(_QWORD *)(a2 + 16);
  }
  v7[9] = 0;
  v7[10] = 0;
  v7[11] = 0;
  *a3 = v8;
  a3[1] = v7;
  return result;
}

void sub_2236E6B94(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_2236E6BD4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_2236E7148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2236E716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2236E7180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2236E71D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>, float a5@<S0>)
{
  float32x2_t v5;
  uint64_t **v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  __int32 v16;
  _QWORD *v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  __int128 v21;
  __int16 *v22;
  unsigned int v23;
  int v24;
  int v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float v38;
  float v39;
  int v40;
  int v41;
  __int16 v42;
  int v43;
  uint64_t v44;
  float v45;
  float v46;
  float v48;
  float v49;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t **v60;
  unsigned int v61;
  _BYTE *v62;
  uint64_t *v63;
  uint64_t *v64;
  _QWORD *v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t **v69;
  unsigned int v70;
  _BYTE *v71;
  uint64_t *v72;
  uint64_t *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  void *v77;
  float32x4_t v78;
  float32x4_t v79;
  uint64_t v80;
  uint64_t **v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t **v85;
  _QWORD *v86;
  uint64_t v87;
  __int16 *v89;
  float v90;
  __int32 v91;
  unsigned __int8 v92;
  void *__p[2];
  uint64_t v94;
  void *v95[4];
  void *v96;
  void *v97;
  __int128 v98;
  uint64_t v99;

  v6 = a4;
  if (*(_QWORD *)(result + 208) == *(_QWORD *)(result + 216))
  {
    a4[2] = 0;
    a4[1] = 0;
    *a4 = (uint64_t *)(a4 + 1);
  }
  else
  {
    v8 = result;
    v10 = *(_DWORD *)(result + 136);
    v9 = *(_DWORD *)(result + 140);
    kdebug_trace();
    v13.i32[0] = *(_DWORD *)(v8 + 80);
    v14.i32[0] = *(_DWORD *)(v8 + 84);
    v6[1] = 0;
    v15.i32[0] = *(_DWORD *)(v8 + 88);
    v16 = *(_DWORD *)(v8 + 92);
    v6[2] = 0;
    v81 = v6 + 1;
    *v6 = (uint64_t *)(v6 + 1);
    v17 = *(_QWORD **)(v8 + 208);
    v86 = *(_QWORD **)(v8 + 216);
    if (v17 != v86)
    {
      v18 = 0;
      v83 = (unint64_t)(float)((float)((float)v10 * 0.0078125) * (float)v9);
      v19.i32[3] = 0;
      v5.i32[0] = 1.0;
      v14.i32[1] = v16;
      v14.i32[3] = 0;
      v13.i32[1] = 0;
      v13.i64[1] = v15.u32[0];
      v78 = (float32x4_t)v14.u64[0];
      v79 = (float32x4_t)v13;
      v85 = v6;
      v80 = v8;
      do
      {
        if (v17[40])
        {
          v20 = *(_QWORD *)(v8 + 208) + 424 * v18;
          v15.i64[0] = *(_QWORD *)(v20 + 16);
          v15.i32[2] = *(_DWORD *)(v20 + 24);
          v19.i64[0] = *(_QWORD *)(v20 + 28);
          v19.i32[2] = *(_DWORD *)(v20 + 36);
          v12.i64[0] = *(_QWORD *)(v8 + 144);
          v12.i32[2] = *(_DWORD *)(v8 + 152);
          v13.i64[0] = *(_QWORD *)(v8 + 160);
          v13.i32[2] = *(_DWORD *)(v8 + 168);
          v14.i64[0] = *(_QWORD *)(v8 + 176);
          v14.i32[2] = *(_DWORD *)(v8 + 184);
          v11.i64[0] = *(_QWORD *)(v8 + 192);
          v11.i32[2] = *(_DWORD *)(v8 + 200);
          v99 = 0;
          v21 = 0uLL;
          v98 = 0u;
          v22 = (__int16 *)v17[33];
          v89 = (__int16 *)v17[34];
          v87 = v18;
          if (v22 == v89)
          {
            v55 = 0;
            v25 = 0;
            v24 = 0;
            v23 = 0;
          }
          else
          {
            v82 = v17;
            v23 = 0;
            v24 = 0;
            v25 = 0;
            v26 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v12.i8, *(float *)v19.i32), *(float32x2_t *)v13.i8, *(float32x2_t *)v19.i8, 1), *(float32x2_t *)v14.i8, (float32x4_t)v19, 2);
            v27 = (float32x2_t)vextq_s8(v12, v12, 8uLL).u64[0];
            v28 = (float32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
            v29 = (float32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
            v30 = vmla_f32(vmla_lane_f32(vmul_f32(v27, *(float32x2_t *)v19.i8), v28, *(float32x2_t *)v19.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), v29);
            *(float32x2_t *)v31.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v12.i8, *(float *)v15.i32), *(float32x2_t *)v13.i8, *(float32x2_t *)v15.i8, 1), *(float32x2_t *)v14.i8, (float32x4_t)v15, 2);
            *(float32x2_t *)&v31.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v27, *(float32x2_t *)v15.i8), v28, *(float32x2_t *)v15.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), v29);
            v32 = (int8x16_t)vaddq_f32(v31, v11);
            v33 = vmla_f32(vmla_lane_f32(vmul_f32(v26, *(float32x2_t *)v32.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1), v26, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), v30);
            v34 = (float32x4_t)vdupq_lane_s32((int32x2_t)v33, 0);
            v35 = (int8x16_t)vdivq_f32(v78, v34);
            v36 = (int8x16_t)vdivq_f32(v79, v34);
            v37 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v36.i8, v26.f32[0]), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v35, 0xCuLL), v26, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), v30.f32[0]);
            LODWORD(v38) = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), v26), (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1), *(float32x2_t *)v35.i8, 1), v30, vdiv_f32(v5, v33)).u32[0];
            v39 = v37.f32[1];
            v90 = v38;
            v91 = v37.i32[0];
            do
            {
              v40 = (unsigned __int16)v22[2];
              v41 = (unsigned __int16)v22[1];
              if (v41 != (unsigned __int16)(v40 + 1))
              {
                v42 = *v22;
                v43 = *(_DWORD *)(a2 + 16);
                v44 = *(_QWORD *)a2 + 2 * (*(_DWORD *)(a2 + 20) * *v22);
                v45 = v39 * (float)*v22;
                do
                {
                  while (1)
                  {
                    while (1)
                    {
                      v46 = v38 + (float)(v45 + (float)(v37.f32[0] * (float)(__int16)v41));
                      _ZF = fabsf(v46) <= 0.000001 || v46 == 0.0;
                      v48 = 1.0 / v46;
                      v49 = _ZF ? 0.0 : v48;
                      _H0 = *(_WORD *)(v44 + 2 * (v43 * (__int16)v41));
                      __asm { FCVT            S11, H0 }
                      if (vabds_f32(v49, _S11) >= a5)
                        break;
                      ++v23;
                      _ZF = v40 == (unsigned __int16)v41++;
                      if (_ZF)
                        goto LABEL_10;
                    }
                    LOWORD(v95[0]) = v42;
                    WORD1(v95[0]) = v41;
                    WORD2(v95[0]) = v41;
                    sub_223ECBBF0((uint64_t)&v98, (__int16 *)v95);
                    if ((float)(v49 - _S11) <= a5)
                      break;
                    ++v25;
                    v38 = v90;
                    v37.i32[0] = v91;
                    _ZF = v40 == (unsigned __int16)v41++;
                    if (_ZF)
                      goto LABEL_10;
                  }
                  ++v24;
                  v38 = v90;
                  v37.i32[0] = v91;
                  _ZF = v40 == (unsigned __int16)v41++;
                }
                while (!_ZF);
              }
LABEL_10:
              v22 += 4;
            }
            while (v22 != v89);
            v21 = v98;
            v55 = v99;
            v17 = v82;
            v18 = v87;
          }
          v98 = 0uLL;
          *(_OWORD *)__p = v21;
          v99 = 0;
          v94 = v55;
          sub_223ECB71C((__int16 **)v95, (uint64_t)__p);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          sub_2236B3F6C((uint64_t)v17, (uint64_t)v95);
          if (v25 + v24 || v23 <= v83)
          {
            v65 = v17;
            v92 = v18;
            sub_2236EAB58(a3, &v92, &v92);
            v66 = v18;
            v67 = v81;
            while (1)
            {
              v68 = *v67;
              v69 = v67;
              if (!*v67)
                break;
              while (1)
              {
                v67 = (uint64_t **)v68;
                v70 = *((unsigned __int8 *)v68 + 28);
                if (v70 > v66)
                  break;
                if (v70 >= v66)
                {
                  v71 = v67;
                  goto LABEL_53;
                }
                v68 = v67[1];
                if (!v68)
                {
                  v69 = v67 + 1;
                  goto LABEL_48;
                }
              }
            }
LABEL_48:
            v71 = operator new(0x30uLL);
            v71[28] = v66;
            *((_QWORD *)v71 + 4) = 0;
            *((_DWORD *)v71 + 10) = 0;
            *(_QWORD *)v71 = 0;
            *((_QWORD *)v71 + 1) = 0;
            *((_QWORD *)v71 + 2) = v67;
            *v69 = (uint64_t *)v71;
            v72 = (uint64_t *)**v85;
            v73 = (uint64_t *)v71;
            if (v72)
            {
              *v85 = v72;
              v73 = *v69;
            }
            sub_2231A9A8C(v85[1], v73);
            v85[2] = (uint64_t *)((char *)v85[2] + 1);
LABEL_53:
            v18 = v87;
            *((_DWORD *)v71 + 8) = v23;
            *((_DWORD *)v71 + 9) = v25;
            *((_DWORD *)v71 + 10) = v24;
            v17 = v65;
            if (v23 <= v83)
            {
              v74 = v65 + 33;
              v75 = (void *)v65[33];
              if (v75)
              {
                v65[34] = v75;
                operator delete(v75);
                *v74 = 0;
                v65[34] = 0;
                v65[35] = 0;
              }
              v76 = v65 + 37;
              *v74 = 0;
              v65[34] = 0;
              *((_DWORD *)v65 + 72) = 0;
              v65[35] = 0;
              v77 = (void *)v65[37];
              if (v77)
              {
                v65[38] = v77;
                operator delete(v77);
                *v76 = 0;
                v65[38] = 0;
                v65[39] = 0;
              }
              v15.i32[3] = 0;
              *(_OWORD *)v76 = 0u;
              *(_OWORD *)(v65 + 39) = 0u;
              v65[41] = 0x800080007FFF7FFFLL;
              if (*((_BYTE *)v65 + 344))
                *((_BYTE *)v65 + 344) = 0;
            }
          }
          if (v96)
          {
            v97 = v96;
            operator delete(v96);
          }
          v8 = v80;
          v6 = v85;
          if (v95[0])
          {
            v95[1] = v95[0];
            operator delete(v95[0]);
          }
          if ((_QWORD)v98)
          {
            *((_QWORD *)&v98 + 1) = v98;
            operator delete((void *)v98);
          }
        }
        else
        {
          LOBYTE(v95[0]) = v18;
          sub_2236EAB58(a3, (unsigned __int8 *)v95, v95);
          v56 = v18;
          v57 = v18;
          v58 = v81;
          while (1)
          {
            v59 = *v58;
            v60 = v58;
            if (!*v58)
              break;
            while (1)
            {
              v58 = (uint64_t **)v59;
              v61 = *((unsigned __int8 *)v59 + 28);
              if (v61 > v57)
                break;
              if (v61 >= v57)
              {
                v62 = v58;
                goto LABEL_5;
              }
              v59 = v58[1];
              if (!v59)
              {
                v60 = v58 + 1;
                goto LABEL_35;
              }
            }
          }
LABEL_35:
          v62 = operator new(0x30uLL);
          v62[28] = v57;
          *((_QWORD *)v62 + 4) = 0;
          *((_DWORD *)v62 + 10) = 0;
          *(_QWORD *)v62 = 0;
          *((_QWORD *)v62 + 1) = 0;
          *((_QWORD *)v62 + 2) = v58;
          *v60 = (uint64_t *)v62;
          v63 = (uint64_t *)**v6;
          v64 = (uint64_t *)v62;
          if (v63)
          {
            *v6 = v63;
            v64 = *v60;
          }
          sub_2231A9A8C(v6[1], v64);
          v6[2] = (uint64_t *)((char *)v6[2] + 1);
LABEL_5:
          *((_QWORD *)v62 + 4) = 0xFFFFFFFF00000000;
          *((_DWORD *)v62 + 10) = 0;
          v18 = v56;
        }
        v17 += 53;
        ++v18;
      }
      while (v17 != v86);
    }
    return kdebug_trace();
  }
  return result;
}

void sub_2236E784C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  void *v36;

  sub_2236B3F2C((uint64_t)&a34);
  v36 = *(void **)(v34 - 192);
  if (!v36)
  {
    sub_223198030(a20, *(_QWORD **)(a20 + 8));
    _Unwind_Resume(a1);
  }
  *(_QWORD *)(v34 - 184) = v36;
  operator delete(v36);
  sub_223198030(a20, *(_QWORD **)(a20 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_2236E7910@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char **v21;
  uint64_t v22;
  void **v23;
  void **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  size_t v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  char **v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned __int8 i;
  uint64_t v65;
  char v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned __int8 v76;
  char **v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  size_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t v87;
  char **v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unsigned int v109;
  BOOL v110;
  uint64_t *v111;
  unsigned int v112;
  unsigned int v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  int v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  __int128 v149;
  BOOL v150;
  BOOL v151;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  _OWORD *v156;
  __int128 *v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  unsigned int *v164;
  uint64_t **v165;
  unsigned int v166;
  unsigned int v167;
  float v168;
  float v169;
  float v170;
  uint64_t *v172;
  int v173;
  uint64_t *v174;
  _QWORD *v175;
  unsigned int v176;
  BOOL v177;
  uint64_t *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  unsigned __int8 *v183;
  _QWORD **v184;
  uint64_t **v185;
  _BYTE *v186;
  unsigned __int8 *v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t j;
  uint64_t v192;
  void *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  _QWORD *v202;
  _QWORD *v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t *v208;
  _QWORD *v209;
  _QWORD *v210;
  BOOL v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v221;
  unsigned __int8 *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int8 *v230;
  _QWORD *v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  uint64_t *__p;
  size_t v236;
  uint64_t v237;
  _QWORD v238[5];
  int v239;
  unsigned __int8 v240;
  void *v241;
  char *v242;
  char *v243;
  char **v244;
  unsigned __int8 v245;
  unsigned __int8 v246;
  _QWORD v247[3];
  _QWORD *v248;
  unsigned __int8 v249;
  __int128 v250;
  __int128 v251;
  char **v252;
  unsigned __int8 v253;
  unsigned __int8 v254;
  _BYTE v255[24];
  _BYTE *v256;
  unsigned __int8 v257;
  unsigned __int8 v258;
  _QWORD v259[3];
  _QWORD *v260;
  unsigned __int8 v261;
  unsigned __int8 v262;
  _QWORD v263[3];
  _QWORD *v264;
  unsigned __int8 v265;
  unsigned __int8 v266;
  _QWORD v267[3];
  _QWORD *v268;
  unsigned __int8 v269;
  unsigned __int8 v270;
  _QWORD v271[3];
  _QWORD *v272;
  unsigned __int8 v273;
  char v274[8];
  _QWORD v275[3];
  _QWORD *v276;
  unsigned __int8 v277;
  char v278[8];
  _QWORD v279[3];
  _QWORD *v280;
  unsigned __int8 v281;
  unsigned __int8 v282;
  _QWORD v283[3];
  _QWORD *v284;
  unsigned __int8 v285;
  unsigned __int8 v286;
  _QWORD v287[3];
  _QWORD *v288;
  unsigned __int8 v289;
  _OWORD v290[2];
  _OWORD *v291;
  unsigned __int8 v292;
  uint64_t v293;

  v293 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(result + 208);
  v229 = result + 208;
  v8 = *(_QWORD *)(result + 216);
  if (v7 == v8 || !*(_QWORD *)(a5 + 16))
  {
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)a6 = a6 + 8;
    return result;
  }
  v12 = result;
  v13 = *(_QWORD *)(a2 + 24);
  v238[1] = 0x21CFB2B78C13521DLL * ((v8 - v7) >> 3);
  v238[2] = v13;
  v238[3] = 0;
  v238[4] = 0;
  v239 = 728309656;
  kdebug_trace();
  v228 = a4;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  v226 = a2;
  v227 = (uint64_t *)(a6 + 8);
  *(_QWORD *)a6 = a6 + 8;
  v14 = (unint64_t)(float)((float)((float)*(unsigned int *)(v12 + 136) * 0.0078125)
                                * (float)*(unsigned int *)(v12 + 140));
  if (v14 <= 3)
    v14 = 3;
  v238[0] = v14;
  v16 = *(_QWORD *)(v12 + 208);
  v15 = *(_QWORD *)(v12 + 216);
  LOBYTE(v290[0]) = 0;
  v17 = operator new(0x20uLL);
  v223 = v15;
  v225 = a6;
  v218 = v15 - v16;
  *v17 = &off_24EC57A80;
  v17[1] = v12;
  v18 = 0x21CFB2B78C13521DLL * ((v15 - v16) >> 3);
  v232 = a5;
  v17[2] = a5;
  v17[3] = v238;
  v19 = (_QWORD *)v290 + 1;
  v291 = v17;
  v292 = 29 * ((v15 - v16) >> 3);
  if (v292)
  {
    LOBYTE(v250) = 0;
    while (((*(uint64_t (**)(_QWORD *, __int128 *))(*v17 + 48))(v17, &v250) & 1) == 0)
    {
      ++LOBYTE(v290[0]);
      if (v292 == LOBYTE(v290[0]))
        break;
      v17 = v291;
      LOBYTE(v250) = v290[0];
      if (!v291)
        sub_223198474();
    }
  }
  v20 = operator new(0x20uLL);
  *v20 = &off_24EC57A80;
  v20[1] = v12;
  v20[2] = v232;
  v20[3] = v238;
  LOBYTE(v250) = v290[0];
  v21 = (char **)&v250 + 1;
  if (v291)
  {
    if (v291 == (_OWORD *)((char *)v290 + 8))
    {
      v252 = (char **)&v250 + 1;
      (*(void (**)(char *, char *))(*((_QWORD *)&v290[0] + 1) + 24))((char *)v290 + 8, (char *)&v250 + 8);
    }
    else
    {
      v252 = (char **)v291;
      v291 = 0;
    }
  }
  else
  {
    v252 = 0;
  }
  v253 = v292;
  v254 = v18;
  v256 = v20;
  v257 = v18;
  if (v291 == (_OWORD *)((char *)v290 + 8))
  {
    v22 = 4;
  }
  else
  {
    if (!v291)
      goto LABEL_22;
    v22 = 5;
    v19 = v291;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v22))(v19);
LABEL_22:
  LOBYTE(v241) = v250;
  v23 = &v241;
  if (!v252)
  {
LABEL_25:
    v23[4] = 0;
    goto LABEL_27;
  }
  if (v252 != (char **)((char *)&v250 + 8))
  {
    v23 = (void **)&v250;
    v244 = v252;
    goto LABEL_25;
  }
  v244 = &v242;
  (*(void (**)(char *, char **))(*((_QWORD *)&v250 + 1) + 24))((char *)&v250 + 8, &v242);
LABEL_27:
  v245 = v253;
  v246 = v254;
  v24 = &v241;
  if (!v256)
  {
LABEL_30:
    v24[10] = 0;
    goto LABEL_32;
  }
  if (v256 != v255)
  {
    v24 = (void **)&v250;
    v248 = v256;
    goto LABEL_30;
  }
  v248 = v247;
  (*(void (**)(void))(*(_QWORD *)v256 + 24))();
LABEL_32:
  v249 = v257;
  v25 = v256;
  if (v256 == v255)
  {
    v26 = 4;
    v25 = v255;
  }
  else
  {
    if (!v256)
      goto LABEL_37;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_37:
  if (v252 == (char **)((char *)&v250 + 8))
  {
    v27 = 4;
  }
  else
  {
    if (!v252)
      goto LABEL_42;
    v27 = 5;
    v21 = v252;
  }
  (*(void (**)(char **))&(*v21)[8 * v27])(v21);
LABEL_42:
  v262 = v241;
  v28 = (uint64_t)v244;
  if (!v244)
  {
LABEL_45:
    v264 = (_QWORD *)v28;
    goto LABEL_47;
  }
  if (v244 != &v242)
  {
    v28 = (*((uint64_t (**)(void))*v244 + 2))();
    goto LABEL_45;
  }
  v264 = v263;
  (*((void (**)(char **, _QWORD *))v242 + 3))(&v242, v263);
LABEL_47:
  v265 = v245;
  v258 = v246;
  v29 = (uint64_t)v248;
  if (!v248)
  {
LABEL_50:
    v260 = (_QWORD *)v29;
    goto LABEL_52;
  }
  if (v248 != v247)
  {
    v29 = (*(uint64_t (**)(void))(*v248 + 16))();
    goto LABEL_50;
  }
  v260 = v259;
  (*(void (**)(_QWORD *, _QWORD *))(v247[0] + 24))(v247, v259);
LABEL_52:
  v261 = v249;
  __p = &v237;
  v270 = v262;
  v30 = (uint64_t)v264;
  if (!v264)
  {
LABEL_55:
    v272 = (_QWORD *)v30;
    goto LABEL_57;
  }
  if (v264 != v263)
  {
    v30 = (*(uint64_t (**)(void))(*v264 + 16))();
    goto LABEL_55;
  }
  v272 = v271;
  (*(void (**)(_QWORD *, _QWORD *))(v263[0] + 24))(v263, v271);
LABEL_57:
  v273 = v265;
  v266 = v258;
  v31 = (uint64_t)v260;
  if (!v260)
  {
LABEL_60:
    v268 = (_QWORD *)v31;
    goto LABEL_62;
  }
  if (v260 != v259)
  {
    v31 = (*(uint64_t (**)(void))(*v260 + 16))();
    goto LABEL_60;
  }
  v268 = v267;
  (*(void (**)(_QWORD *, _QWORD *))(v259[0] + 24))(v259, v267);
LABEL_62:
  v221 = v12;
  v269 = v261;
  v286 = v270;
  v32 = v287;
  v33 = (uint64_t)v272;
  if (!v272)
  {
LABEL_65:
    v288 = (_QWORD *)v33;
    goto LABEL_67;
  }
  if (v272 != v271)
  {
    v33 = (*(uint64_t (**)(void))(*v272 + 16))();
    goto LABEL_65;
  }
  v288 = v287;
  (*(void (**)(_QWORD *, _QWORD *))(v271[0] + 24))(v271, v287);
LABEL_67:
  v289 = v273;
  v282 = v266;
  v34 = v283;
  v35 = (uint64_t)v268;
  if (!v268)
  {
LABEL_70:
    v284 = (_QWORD *)v35;
    goto LABEL_72;
  }
  if (v268 != v267)
  {
    v35 = (*(uint64_t (**)(void))(*v268 + 16))();
    goto LABEL_70;
  }
  v284 = v283;
  (*(void (**)(_QWORD *, _QWORD *))(v267[0] + 24))(v267, v283);
LABEL_72:
  v285 = v269;
  LOBYTE(v250) = v286;
  v36 = (char **)&v250 + 1;
  v37 = (uint64_t)v288;
  if (!v288)
  {
LABEL_75:
    v252 = (char **)v37;
    goto LABEL_77;
  }
  if (v288 != v287)
  {
    v37 = (*(uint64_t (**)(void))(*v288 + 16))();
    goto LABEL_75;
  }
  v252 = (char **)&v250 + 1;
  (*(void (**)(_QWORD *, char *))(v287[0] + 24))(v287, (char *)&v250 + 8);
LABEL_77:
  v253 = v289;
  LOBYTE(v290[0]) = v282;
  v38 = (_QWORD *)v290 + 1;
  v39 = (uint64_t)v284;
  if (!v284)
  {
LABEL_80:
    v291 = (_OWORD *)v39;
    goto LABEL_82;
  }
  if (v284 != v283)
  {
    v39 = (*(uint64_t (**)(void))(*v284 + 16))();
    goto LABEL_80;
  }
  v291 = (_OWORD *)((char *)v290 + 8);
  (*(void (**)(_QWORD *, char *))(v283[0] + 24))(v283, (char *)v290 + 8);
LABEL_82:
  v292 = v285;
  v40 = v250;
  if (v250 == LOBYTE(v290[0]))
  {
    v41 = 0;
  }
  else
  {
    v41 = 0;
    do
    {
      do
      {
        LOBYTE(v250) = ++v40;
        if (v253 == v40)
          break;
        v278[0] = v40;
        if (!v252)
          sub_223198474();
        v43 = (*((uint64_t (**)(char **, unsigned __int8 *))*v252 + 6))(v252, v278);
        v40 = v250;
      }
      while ((v43 & 1) == 0);
      ++v41;
    }
    while (LOBYTE(v290[0]) != v40);
  }
  if (v291 == (_OWORD *)((char *)v290 + 8))
  {
    v42 = 4;
  }
  else
  {
    if (!v291)
      goto LABEL_95;
    v42 = 5;
    v38 = v291;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v42))(v38);
LABEL_95:
  if (v252 == (char **)((char *)&v250 + 8))
  {
    v45 = 4;
    v44 = v259;
  }
  else
  {
    v44 = v259;
    if (!v252)
      goto LABEL_100;
    v45 = 5;
    v36 = v252;
  }
  (*(void (**)(char **))&(*v36)[8 * v45])(v36);
LABEL_100:
  if (v284 == v283)
  {
    v46 = 4;
  }
  else
  {
    if (!v284)
      goto LABEL_105;
    v46 = 5;
    v34 = v284;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v46))(v34);
LABEL_105:
  if (v288 == v287)
  {
    v47 = 4;
  }
  else
  {
    if (!v288)
      goto LABEL_110;
    v47 = 5;
    v32 = v288;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v47))(v32);
LABEL_110:
  if (v41 <= 8)
  {
    v278[0] = v270;
    v51 = v279;
    v52 = (uint64_t)v272;
    if (v272)
    {
      if (v272 == v271)
      {
        v280 = v279;
        (*(void (**)(_QWORD *, _QWORD *))(v271[0] + 24))(v271, v279);
LABEL_120:
        v281 = v273;
        v53 = &v237;
        if (v41)
        {
          LOBYTE(v290[0]) = v278[0];
          v54 = (_QWORD *)v290 + 1;
          v55 = (uint64_t)v280;
          if (v280)
          {
            if (v280 == v279)
            {
              v291 = (_OWORD *)((char *)v290 + 8);
              (*(void (**)(_QWORD *, char *))(v279[0] + 24))(v279, (char *)v290 + 8);
LABEL_176:
              v292 = v281;
              v76 = v290[0];
              LOBYTE(v250) = v290[0];
              v77 = (char **)&v250 + 1;
              if (v291)
              {
                if (v291 == (_OWORD *)((char *)v290 + 8))
                {
                  v252 = (char **)&v250 + 1;
                  (*(void (**)(char *, char *))(*((_QWORD *)&v290[0] + 1) + 24))((char *)v290 + 8, (char *)&v250 + 8);
                  v76 = v250;
                }
                else
                {
                  v252 = (char **)v291;
                  v291 = 0;
                }
              }
              else
              {
                v252 = 0;
              }
              v253 = v292;
              v278[0] = v76;
              v78 = v280;
              v280 = 0;
              if (v78 == v279)
              {
                v79 = 4;
                v78 = v279;
              }
              else
              {
                if (!v78)
                  goto LABEL_188;
                v79 = 5;
              }
              (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_188:
              if (v252)
              {
                if (v252 == (char **)((char *)&v250 + 8))
                {
                  v280 = v279;
                  (*(void (**)(char *, _QWORD *))(*((_QWORD *)&v250 + 1) + 24))((char *)&v250 + 8, v279);
                }
                else
                {
                  v280 = v252;
                  v252 = 0;
                }
              }
              else
              {
                v280 = 0;
              }
              v281 = v253;
              if (v252 == (char **)((char *)&v250 + 8))
              {
                v80 = 4;
              }
              else
              {
                if (!v252)
                  goto LABEL_198;
                v80 = 5;
                v77 = v252;
              }
              (*(void (**)(char **))&(*v77)[8 * v80])(v77);
LABEL_198:
              if (v291 == (_OWORD *)((char *)v290 + 8))
              {
                v81 = 4;
              }
              else
              {
                if (!v291)
                  goto LABEL_203;
                v81 = 5;
                v54 = v291;
              }
              (*(void (**)(_QWORD *))(*v54 + 8 * v81))(v54);
LABEL_203:
              LOBYTE(v250) = v278[0];
              v56 = (char **)&v250 + 1;
              v82 = (uint64_t)v280;
              if (v280)
              {
                if (v280 == v279)
                {
                  v252 = (char **)&v250 + 1;
                  (*(void (**)(_QWORD *, char *))(v279[0] + 24))(v279, (char *)&v250 + 8);
LABEL_208:
                  v253 = v281;
                  v83 = v41;
                  do
                  {
                    *(_BYTE *)v53 = v250;
                    do
                    {
                      v85 = v250 + 1;
                      LOBYTE(v250) = v85;
                      if (v253 == v85)
                        break;
                      v274[0] = v85;
                      if (!v252)
                        sub_223198474();
                    }
                    while (((*((uint64_t (**)(char **, unsigned __int8 *))*v252 + 6))(v252, v274) & 1) == 0);
                    v53 = (uint64_t *)((char *)v53 + 1);
                    --v83;
                  }
                  while (v83);
LABEL_209:
                  if (v252 == (char **)((char *)&v250 + 8))
                  {
                    v84 = 4;
                    v68 = v263;
                  }
                  else
                  {
                    v68 = v263;
                    if (!v252)
                      goto LABEL_220;
                    v84 = 5;
                    v56 = v252;
                  }
                  (*(void (**)(char **))&(*v56)[8 * v84])(v56);
LABEL_220:
                  if (v280 == v279)
                  {
                    v86 = 4;
                  }
                  else
                  {
                    if (!v280)
                      goto LABEL_225;
                    v86 = 5;
                    v51 = v280;
                  }
                  (*(void (**)(_QWORD *))(*v51 + 8 * v86))(v51);
LABEL_225:
                  v236 = v41;
                  v70 = v271;
                  v72 = v268;
                  if (v268 != v267)
                    goto LABEL_173;
LABEL_226:
                  v75 = v267;
                  v74 = 4;
                  v73 = v221;
                  goto LABEL_227;
                }
                v82 = (*(uint64_t (**)(void))(*v280 + 16))();
              }
              v252 = (char **)v82;
              goto LABEL_208;
            }
            v55 = (*(uint64_t (**)(void))(*v280 + 16))();
          }
          v291 = (_OWORD *)v55;
          goto LABEL_176;
        }
        LOBYTE(v250) = v278[0];
        v56 = (char **)&v250 + 1;
        v57 = (uint64_t)v280;
        if (v280)
        {
          if (v280 == v279)
          {
            v252 = (char **)&v250 + 1;
            (*(void (**)(_QWORD *, char *))(v279[0] + 24))(v279, (char *)&v250 + 8);
            goto LABEL_181;
          }
          v57 = (*(uint64_t (**)(void))(*v280 + 16))();
        }
        v252 = (char **)v57;
LABEL_181:
        v253 = v281;
        goto LABEL_209;
      }
      v52 = (*(uint64_t (**)(void))(*v272 + 16))();
    }
    v280 = (_QWORD *)v52;
    goto LABEL_120;
  }
  v48 = (uint64_t *)operator new(v41);
  __p = v48;
  v278[0] = v270;
  v49 = v279;
  v50 = (uint64_t)v272;
  if (!v272)
  {
LABEL_114:
    v280 = (_QWORD *)v50;
    goto LABEL_130;
  }
  if (v272 != v271)
  {
    v50 = (*(uint64_t (**)(void))(*v272 + 16))();
    goto LABEL_114;
  }
  v280 = v279;
  (*(void (**)(_QWORD *, _QWORD *))(v271[0] + 24))(v271, v279);
LABEL_130:
  v281 = v273;
  v274[0] = v266;
  v58 = v275;
  v59 = (uint64_t)v268;
  if (!v268)
  {
LABEL_133:
    v276 = (_QWORD *)v59;
    goto LABEL_135;
  }
  if (v268 != v267)
  {
    v59 = (*(uint64_t (**)(void))(*v268 + 16))();
    goto LABEL_133;
  }
  v276 = v275;
  (*(void (**)(_QWORD *, _QWORD *))(v267[0] + 24))(v267, v275);
LABEL_135:
  v277 = v269;
  LOBYTE(v250) = v278[0];
  v60 = (char **)&v250 + 1;
  v61 = (uint64_t)v280;
  if (!v280)
  {
LABEL_138:
    v252 = (char **)v61;
    goto LABEL_140;
  }
  if (v280 != v279)
  {
    v61 = (*(uint64_t (**)(void))(*v280 + 16))();
    goto LABEL_138;
  }
  v252 = (char **)&v250 + 1;
  (*(void (**)(_QWORD *, char *))(v279[0] + 24))(v279, (char *)&v250 + 8);
LABEL_140:
  v253 = v281;
  LOBYTE(v290[0]) = v274[0];
  v62 = (_QWORD *)v290 + 1;
  v63 = (uint64_t)v276;
  if (!v276)
  {
LABEL_143:
    v291 = (_OWORD *)v63;
    goto LABEL_145;
  }
  if (v276 != v275)
  {
    v63 = (*(uint64_t (**)(void))(*v276 + 16))();
    goto LABEL_143;
  }
  v291 = (_OWORD *)((char *)v290 + 8);
  (*(void (**)(_QWORD *, char *))(v275[0] + 24))(v275, (char *)v290 + 8);
LABEL_145:
  v292 = v277;
  for (i = v250; LOBYTE(v290[0]) != i; v48 = (uint64_t *)((char *)v48 + 1))
  {
    *(_BYTE *)v48 = i;
    do
    {
      LOBYTE(v250) = ++i;
      if (v253 == i)
        break;
      v240 = i;
      if (!v252)
        sub_223198474();
      v66 = (*((uint64_t (**)(char **, unsigned __int8 *))*v252 + 6))(v252, &v240);
      i = v250;
    }
    while ((v66 & 1) == 0);
  }
  if (v291 == (_OWORD *)((char *)v290 + 8))
  {
    v65 = 4;
  }
  else
  {
    if (!v291)
      goto LABEL_157;
    v65 = 5;
    v62 = v291;
  }
  (*(void (**)(_QWORD *))(*v62 + 8 * v65))(v62);
LABEL_157:
  if (v252 == (char **)((char *)&v250 + 8))
  {
    v67 = 4;
  }
  else
  {
    if (!v252)
      goto LABEL_162;
    v67 = 5;
    v60 = v252;
  }
  (*(void (**)(char **))&(*v60)[8 * v67])(v60);
LABEL_162:
  v236 = (char *)v48 - (char *)__p;
  if (v276 == v275)
  {
    v69 = 4;
    v68 = v263;
  }
  else
  {
    v68 = v263;
    if (!v276)
      goto LABEL_167;
    v69 = 5;
    v58 = v276;
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v69))(v58);
LABEL_167:
  if (v280 == v279)
  {
    v71 = 4;
    v70 = v271;
  }
  else
  {
    v70 = v271;
    if (!v280)
      goto LABEL_172;
    v71 = 5;
    v49 = v280;
  }
  (*(void (**)(_QWORD *))(*v49 + 8 * v71))(v49);
LABEL_172:
  v72 = v268;
  if (v268 == v267)
    goto LABEL_226;
LABEL_173:
  v73 = v221;
  if (!v72)
    goto LABEL_228;
  v74 = 5;
  v75 = v72;
LABEL_227:
  (*(void (**)(void))(*v75 + 8 * v74))();
LABEL_228:
  if (v272 == v271)
  {
    v87 = 4;
  }
  else
  {
    if (!v272)
      goto LABEL_233;
    v87 = 5;
    v70 = v272;
  }
  (*(void (**)(_QWORD *))(*v70 + 8 * v87))(v70);
LABEL_233:
  if (v260 == v259)
  {
    v89 = 4;
    v88 = &v242;
  }
  else
  {
    v88 = &v242;
    if (!v260)
      goto LABEL_238;
    v89 = 5;
    v44 = v260;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v89))(v44);
LABEL_238:
  if (v264 == v263)
  {
    v90 = 4;
  }
  else
  {
    if (!v264)
      goto LABEL_243;
    v90 = 5;
    v68 = v264;
  }
  (*(void (**)(_QWORD *))(*v68 + 8 * v90))(v68);
LABEL_243:
  v91 = v247;
  if (v248 == v247)
  {
    v92 = 4;
  }
  else
  {
    if (!v248)
      goto LABEL_248;
    v92 = 5;
    v91 = v248;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_248:
  if (v244 == &v242)
  {
    v93 = 4;
    goto LABEL_252;
  }
  if (v244)
  {
    v93 = 5;
    v88 = v244;
LABEL_252:
    (*(void (**)(char **))&(*v88)[8 * v93])(v88);
  }
  v241 = 0;
  v242 = 0;
  v243 = 0;
  if (v223 == v16)
  {
    v94 = 0;
  }
  else
  {
    if (v218 < 0)
      sub_22316E078();
    v94 = (char *)operator new(v18);
    v241 = v94;
    v243 = &v94[v18];
    memset(v94, 255, v18);
    v242 = &v94[v18];
  }
  memset(v290, 0, 24);
  v219 = v18 - v236;
  sub_2236E9F74((char **)v290, v18 - v236);
  v95 = *(unsigned __int8 **)(v73 + 208);
  v96 = *(unsigned __int8 **)(v73 + 216);
  v98 = (uint64_t *)(a6 + 8);
  v97 = v228;
  v99 = v226;
  if (v95 != v96)
  {
    v100 = 0;
    v231 = (_QWORD *)(v232 + 8);
    v222 = *(unsigned __int8 **)(v73 + 216);
    v224 = v94;
    while (1)
    {
      v101 = (char *)__p + v236;
      v233 = v100;
      if (v100 <= 0xFF)
      {
        v102 = (char *)memchr(__p, (char)v100, v236);
        if (v102)
          v101 = v102;
      }
      if (v101 - (char *)__p == v236)
        break;
      *(_QWORD *)&v250 = v95;
      *((_DWORD *)sub_2231A9C40((uint64_t **)a6, v95, (uint64_t)&unk_2245BA939, (_OWORD **)&v250) + 11) = 1;
      v106 = *v231;
      if (*v231)
      {
        v107 = v231;
        v108 = *v231;
        do
        {
          v109 = *(unsigned __int8 *)(v108 + 28);
          v110 = v109 >= v233;
          if (v109 >= v233)
            v111 = (uint64_t *)v108;
          else
            v111 = (uint64_t *)(v108 + 8);
          if (v110)
            v107 = (_QWORD *)v108;
          v108 = *v111;
        }
        while (*v111);
        if (v107 != v231 && *((unsigned __int8 *)v107 + 28) <= v233)
        {
          v113 = *((_DWORD *)v107 + 8);
          v112 = *((_DWORD *)v107 + 9);
          if (!v113 || (float)((float)v112 / (float)v113) > 0.01)
          {
            if (v112)
            {
              *(_QWORD *)&v250 = v95;
              v174 = sub_2231A9C40((uint64_t **)a6, v95, (uint64_t)&unk_2245BA939, (_OWORD **)&v250);
              *((_DWORD *)v174 + 11) |= 4u;
              v106 = *v231;
            }
          }
        }
        if (v106)
        {
          v175 = v231;
          do
          {
            v176 = *(unsigned __int8 *)(v106 + 28);
            v177 = v176 >= v233;
            if (v176 >= v233)
              v178 = (uint64_t *)v106;
            else
              v178 = (uint64_t *)(v106 + 8);
            if (v177)
              v175 = (_QWORD *)v106;
            v106 = *v178;
          }
          while (*v178);
          if (v175 != v231 && *((unsigned __int8 *)v175 + 28) <= v233)
          {
            v179 = *((_DWORD *)v175 + 8);
            v180 = *((_DWORD *)v175 + 10);
            if (!v179 || (float)((float)v180 / (float)v179) > 0.01)
            {
              if (v180)
              {
                *(_QWORD *)&v250 = v95;
                v172 = sub_2231A9C40((uint64_t **)a6, v95, (uint64_t)&unk_2245BA939, (_OWORD **)&v250);
                v173 = *((_DWORD *)v172 + 11) | 2;
                goto LABEL_259;
              }
            }
          }
        }
      }
LABEL_260:
      v95 += 424;
      v100 = v233 + 1;
      if (v95 == v96)
      {
        v95 = *(unsigned __int8 **)v229;
        goto LABEL_368;
      }
    }
    v103 = v290[0];
    v104 = 0x21CFB2B78C13521DLL * ((uint64_t)(*((_QWORD *)&v290[0] + 1) - *(_QWORD *)&v290[0]) >> 3);
    v94[v233] = v104;
    if (*((_QWORD *)&v103 + 1) >= *(_QWORD *)&v290[1])
    {
      if ((unint64_t)(v104 + 1) > 0x9A90E7D95BC609)
        sub_2236EA0B4();
      v114 = 0x439F656F1826A43ALL * ((uint64_t)(*(_QWORD *)&v290[1] - v103) >> 3);
      if (v114 <= v104 + 1)
        v114 = v104 + 1;
      if ((unint64_t)(0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)&v290[1] - v103) >> 3)) >= 0x4D4873ECADE304)
        v115 = 0x9A90E7D95BC609;
      else
        v115 = v114;
      v252 = (char **)&v290[1];
      if (v115)
      {
        if (v115 > 0x9A90E7D95BC609)
          sub_223174E94();
        v116 = (char *)operator new(424 * v115);
      }
      else
      {
        v116 = 0;
      }
      *(_QWORD *)&v250 = v116;
      *((_QWORD *)&v250 + 1) = &v116[424 * v104];
      *(_QWORD *)&v251 = *((_QWORD *)&v250 + 1);
      *((_QWORD *)&v251 + 1) = &v116[424 * v115];
      sub_2236EA118(*((uint64_t *)&v250 + 1), (uint64_t)v95);
      v105 = v251 + 424;
      *(_QWORD *)&v251 = v251 + 424;
      v117 = (char *)*((_QWORD *)&v290[0] + 1);
      v234 = *(char **)&v290[0];
      if (*((_QWORD *)&v290[0] + 1) == *(_QWORD *)&v290[0])
      {
        *(_QWORD *)&v290[0] = *((_QWORD *)&v250 + 1);
        *((_QWORD *)&v290[0] + 1) = v105;
        *(_QWORD *)&v290[1] = *((_QWORD *)&v251 + 1);
        if (!v117)
          goto LABEL_328;
      }
      else
      {
        v230 = v95;
        v118 = 0;
        v119 = *((_QWORD *)&v250 + 1);
        do
        {
          v120 = v119 - 424;
          v121 = v117 - 424;
          *(_OWORD *)v120 = *(_OWORD *)(v117 - 424);
          v122 = *((_QWORD *)v117 - 51);
          *(_DWORD *)(v120 + 24) = *((_DWORD *)v117 - 100);
          *(_QWORD *)(v120 + 16) = v122;
          v123 = *(_QWORD *)(v117 - 396);
          *(_DWORD *)(v120 + 36) = *((_DWORD *)v117 - 97);
          *(_QWORD *)(v120 + 28) = v123;
          v124 = *((_OWORD *)v117 - 23);
          *(_OWORD *)(v120 + 40) = *((_OWORD *)v117 - 24);
          *(_OWORD *)(v120 + 56) = v124;
          v125 = *((_OWORD *)v117 - 22);
          v126 = *((_OWORD *)v117 - 21);
          v127 = *((_OWORD *)v117 - 20);
          *(_OWORD *)(v120 + 120) = *((_OWORD *)v117 - 19);
          *(_OWORD *)(v120 + 104) = v127;
          *(_OWORD *)(v120 + 88) = v126;
          *(_OWORD *)(v120 + 72) = v125;
          v128 = *((_OWORD *)v117 - 16);
          v129 = *((_OWORD *)v117 - 15);
          v130 = *((_OWORD *)v117 - 18);
          *(_OWORD *)(v120 + 152) = *((_OWORD *)v117 - 17);
          *(_OWORD *)(v120 + 136) = v130;
          v131 = *((_OWORD *)v117 - 14);
          v132 = *((_OWORD *)v117 - 13);
          v133 = *((_OWORD *)v117 - 12);
          v134 = *((_OWORD *)v117 - 11);
          *(_QWORD *)(v119 - 160) = 0;
          v135 = v119 - 160;
          *(_OWORD *)(v119 - 256) = v128;
          *(_OWORD *)(v119 - 240) = v129;
          *(_OWORD *)(v119 - 192) = v133;
          *(_OWORD *)(v119 - 176) = v134;
          *(_OWORD *)(v119 - 224) = v131;
          *(_OWORD *)(v119 - 208) = v132;
          *(_QWORD *)(v135 + 8) = 0;
          *(_QWORD *)(v135 + 16) = 0;
          v137 = (_BYTE *)*((_QWORD *)v117 - 20);
          v136 = (_BYTE *)*((_QWORD *)v117 - 19);
          v138 = v136 - v137;
          if (v136 != v137)
          {
            if (v138 < 0)
              sub_2236EA0B4();
            v139 = (char *)operator new(v136 - v137);
            *(_QWORD *)(v119 - 160) = v139;
            *(_QWORD *)(v119 - 152) = v139;
            v140 = &v139[8 * (v138 >> 3)];
            *(_QWORD *)(v119 - 144) = v140;
            memcpy(v139, v137, v138 - 2);
            *(_QWORD *)(v119 - 152) = v140;
          }
          v141 = *((_DWORD *)v117 - 34);
          *(_QWORD *)(v119 - 128) = 0;
          v142 = v119 - 128;
          *(_DWORD *)(v119 - 136) = v141;
          *(_QWORD *)(v142 + 8) = 0;
          *(_QWORD *)(v142 + 16) = 0;
          v144 = (char *)*((_QWORD *)v117 - 16);
          v143 = (char *)*((_QWORD *)v117 - 15);
          v145 = v143 - v144;
          if (v143 != v144)
          {
            if (v145 < 0)
              sub_2236EA0B4();
            v146 = (char *)operator new(v143 - v144);
            *(_QWORD *)(v119 - 128) = v146;
            *(_QWORD *)(v119 - 120) = v146;
            *(_QWORD *)(v119 - 112) = &v146[16 * (v145 >> 4)];
            v147 = v145 - 16;
            if ((unint64_t)(v145 - 16) < 0xD0)
              goto LABEL_300;
            v150 = v146 + 8 >= &v144[(v147 & 0xFFFFFFFFFFFFFFF0) + 16]
                || v144 + 8 >= &v146[(v147 & 0xFFFFFFFFFFFFFFF0) + 16];
            v151 = !v150;
            if (v144 < &v146[(v147 & 0xFFFFFFFFFFFFFFF0) + 8] && v146 < &v144[(v147 & 0xFFFFFFFFFFFFFFF0) + 8])
              goto LABEL_300;
            if (v151)
              goto LABEL_300;
            v153 = (v147 >> 4) + 1;
            v154 = 16 * (v153 & 0x1FFFFFFFFFFFFFFCLL);
            v155 = &v144[v154];
            v148 = &v146[v154];
            v156 = v146 + 32;
            v157 = (__int128 *)(v144 + 32);
            v158 = v153 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v160 = *(v157 - 2);
              v159 = *(v157 - 1);
              v162 = *v157;
              v161 = v157[1];
              v157 += 4;
              *(v156 - 2) = v160;
              *(v156 - 1) = v159;
              *v156 = v162;
              v156[1] = v161;
              v156 += 4;
              v158 -= 4;
            }
            while (v158);
            v144 = v155;
            v146 = v148;
            if (v153 != (v153 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_300:
              v148 = v146;
              do
              {
                v149 = *(_OWORD *)v144;
                v144 += 16;
                *(_OWORD *)v148 = v149;
                v148 += 16;
              }
              while (v144 != v143);
            }
            *(_QWORD *)(v119 - 120) = v148;
          }
          *(_QWORD *)(v119 - 104) = *((_QWORD *)v117 - 13);
          *(_DWORD *)(v119 - 96) = *((_DWORD *)v117 - 24);
          *(_DWORD *)(v119 - 92) = *((_DWORD *)v117 - 23);
          *(_BYTE *)(v119 - 88) = 0;
          *(_BYTE *)(v119 - 80) = 0;
          if (*(v117 - 80))
          {
            *(_QWORD *)(v119 - 88) = *((_QWORD *)v117 - 11);
            *(_BYTE *)(v119 - 80) = 1;
          }
          *(_DWORD *)(v119 - 72) = *((_DWORD *)v117 - 18);
          sub_2236EA4B8(v119 - 64, (uint64_t)(v117 - 64));
          *(_BYTE *)(v119 - 32) = 0;
          *(_BYTE *)(v119 - 8) = 0;
          if (*(v117 - 8))
          {
            sub_2236EA584((_QWORD *)(v119 - 32), (uint64_t *)v117 - 4);
            *(_BYTE *)(v119 - 8) = 1;
          }
          v118 -= 424;
          v117 -= 424;
          v119 -= 424;
        }
        while (v121 != v234);
        v163 = *((_QWORD *)&v290[0] + 1);
        v117 = *(char **)&v290[0];
        *(_QWORD *)&v290[0] = v120;
        *(_OWORD *)((char *)v290 + 8) = v251;
        v105 = v251;
        if ((char *)v163 == v117)
        {
          a6 = v225;
          v99 = v226;
          v98 = v227;
          v97 = v228;
          v96 = v222;
          v94 = v224;
          v95 = v230;
          if (!v117)
            goto LABEL_328;
        }
        else
        {
          a6 = v225;
          v99 = v226;
          v98 = v227;
          v97 = v228;
          v96 = v222;
          v94 = v224;
          do
          {
            v163 -= 424;
            sub_2236EA79C(v163);
          }
          while ((char *)v163 != v117);
          v95 = v230;
          if (!v117)
            goto LABEL_328;
        }
      }
      operator delete(v117);
    }
    else
    {
      sub_2236EA118(*((uint64_t *)&v103 + 1), (uint64_t)v95);
      v105 = *((_QWORD *)&v103 + 1) + 424;
    }
LABEL_328:
    *((_QWORD *)&v290[0] + 1) = v105;
    v164 = (unsigned int *)*v231;
    if (!*v231)
      goto LABEL_260;
    v165 = (uint64_t **)*v231;
    while (1)
    {
      v166 = *((unsigned __int8 *)v165 + 28);
      if (v166 <= v233)
      {
        if (v166 >= v233)
        {
          while (1)
          {
            while (1)
            {
              v167 = *((unsigned __int8 *)v164 + 28);
              if (v167 <= v233)
                break;
              v164 = *(unsigned int **)v164;
              if (!v164)
                goto LABEL_447;
            }
            if (v167 >= v233)
              break;
            v164 = (unsigned int *)*((_QWORD *)v164 + 1);
            if (!v164)
LABEL_447:
              sub_223198218("map::at:  key not found");
          }
          v168 = (float)v164[8];
          v169 = (float)v164[9] / v168;
          v170 = (float)v164[10] / v168;
          if (v169 > 0.01 || v170 > 0.01)
          {
            *(_QWORD *)&v250 = *(_QWORD *)v229 + 424 * v233;
            v172 = sub_2231A9C40((uint64_t **)a6, (unsigned __int8 *)v250, (uint64_t)&unk_2245BA939, (_OWORD **)&v250);
            if (v170 <= 0.01)
              v173 = 4 * (v169 > 0.01);
            else
              v173 = (4 * (v169 > 0.01)) | 2;
LABEL_259:
            *((_DWORD *)v172 + 11) = v173;
          }
          goto LABEL_260;
        }
        ++v165;
      }
      v165 = (uint64_t **)*v165;
      if (!v165)
        goto LABEL_260;
    }
  }
LABEL_368:
  v181 = v221;
  if (v95)
  {
    v182 = *(_QWORD *)(v221 + 216);
    v183 = v95;
    if ((unsigned __int8 *)v182 != v95)
    {
      do
      {
        v182 -= 424;
        sub_2236EA79C(v182);
      }
      while ((unsigned __int8 *)v182 != v95);
      v183 = *(unsigned __int8 **)v229;
    }
    v181 = v221;
    *(_QWORD *)(v221 + 216) = v95;
    operator delete(v183);
    *(_QWORD *)v229 = 0;
    *(_QWORD *)(v229 + 8) = 0;
    *(_QWORD *)(v229 + 16) = 0;
  }
  *(_OWORD *)(v181 + 208) = v290[0];
  *(_QWORD *)(v181 + 224) = *(_QWORD *)&v290[1];
  memset(v290, 0, 24);
  v250 = 0u;
  v251 = 0u;
  LODWORD(v252) = 1065353216;
  v184 = (_QWORD **)(v99 + 16);
  v185 = *(uint64_t ***)(v99 + 16);
  if (v185)
  {
    v186 = v241;
    do
    {
      v187 = &v186[*((unsigned __int8 *)v185 + 16)];
      if (v219 > *v187)
        sub_2236EA858((uint64_t)&v250, v187, &v186[*((unsigned __int8 *)v185 + 16)]);
      v185 = (uint64_t **)*v185;
    }
    while (v185);
  }
  if (*(_QWORD *)(v99 + 24))
  {
    v188 = *v184;
    if (*v184)
    {
      do
      {
        v189 = (_QWORD *)*v188;
        operator delete(v188);
        v188 = v189;
      }
      while (v189);
    }
    *(_QWORD *)(v99 + 16) = 0;
    v190 = *(_QWORD *)(v99 + 8);
    if (v190)
    {
      for (j = 0; j != v190; ++j)
        *(_QWORD *)(*(_QWORD *)v99 + 8 * j) = 0;
    }
    *(_QWORD *)(v99 + 24) = 0;
  }
  v192 = v250;
  *(_QWORD *)&v250 = 0;
  v193 = *(void **)v99;
  *(_QWORD *)v99 = v192;
  if (v193)
    operator delete(v193);
  v194 = *((_QWORD *)&v250 + 1);
  v195 = v251;
  *((_QWORD *)&v250 + 1) = 0;
  v196 = *((_QWORD *)&v251 + 1);
  *(_QWORD *)(v99 + 16) = v251;
  *(_QWORD *)(v99 + 24) = v196;
  *(_DWORD *)(v99 + 32) = (_DWORD)v252;
  *(_QWORD *)(v99 + 8) = v194;
  if (v196)
  {
    v197 = *(_QWORD *)(v195 + 8);
    if ((v194 & (v194 - 1)) != 0)
    {
      if (v197 >= v194)
        v197 %= v194;
    }
    else
    {
      v197 &= v194 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v99 + 8 * v197) = v184;
    v251 = 0uLL;
  }
  v198 = *(uint64_t **)a6;
  if (*(uint64_t **)a6 != v98)
  {
    do
    {
      if ((*((_BYTE *)v198 + 44) & 1) != 0)
        sub_22370D954(*a3, (uint64_t)v198 + 28);
      v199 = (uint64_t *)v198[1];
      if (v199)
      {
        do
        {
          v200 = v199;
          v199 = (uint64_t *)*v199;
        }
        while (v199);
      }
      else
      {
        do
        {
          v200 = (uint64_t *)v198[2];
          v211 = *v200 == (_QWORD)v198;
          v198 = v200;
        }
        while (!v211);
      }
      v198 = v200;
    }
    while (v200 != v98);
    v201 = *(uint64_t **)a6;
    if (*(uint64_t **)a6 != v98)
    {
      do
      {
        v209 = *(_QWORD **)v97;
        v210 = *(_QWORD **)(v97 + 8);
        if (*(_QWORD **)v97 != v210)
        {
          while (1)
          {
            v211 = *v209 == *(uint64_t *)((char *)v201 + 28) && v209[1] == *(uint64_t *)((char *)v201 + 36);
            if (v211)
              break;
            v209 += 2;
            if (v209 == v210)
            {
              v209 = *(_QWORD **)(v97 + 8);
              break;
            }
          }
        }
        v212 = (uint64_t *)v201[1];
        if (v209 == v210)
        {
          v214 = (uint64_t *)v201[1];
          v215 = v201;
          if (v212)
          {
            do
            {
              v213 = v214;
              v214 = (uint64_t *)*v214;
            }
            while (v214);
          }
          else
          {
            do
            {
              v213 = (uint64_t *)v215[2];
              v211 = *v213 == (_QWORD)v215;
              v215 = v213;
            }
            while (!v211);
          }
          v216 = v201;
          if (v212)
          {
            do
            {
              v217 = v212;
              v212 = (uint64_t *)*v212;
            }
            while (v212);
          }
          else
          {
            do
            {
              v217 = (uint64_t *)v216[2];
              v211 = *v217 == (_QWORD)v216;
              v216 = v217;
            }
            while (!v211);
          }
          if (*(uint64_t **)a6 == v201)
            *(_QWORD *)a6 = v217;
          v208 = *(uint64_t **)(a6 + 8);
          --*(_QWORD *)(a6 + 16);
          sub_2231AFE60(v208, v201);
          operator delete(v201);
        }
        else if (v212)
        {
          do
          {
            v213 = v212;
            v212 = (uint64_t *)*v212;
          }
          while (v212);
        }
        else
        {
          do
          {
            v213 = (uint64_t *)v201[2];
            v211 = *v213 == (_QWORD)v201;
            v201 = v213;
          }
          while (!v211);
        }
        v201 = v213;
      }
      while (v213 != v98);
    }
  }
  v202 = (_QWORD *)v251;
  if ((_QWORD)v251)
  {
    do
    {
      v203 = (_QWORD *)*v202;
      operator delete(v202);
      v202 = v203;
    }
    while (v203);
  }
  v204 = (void *)v250;
  *(_QWORD *)&v250 = 0;
  if (v204)
    operator delete(v204);
  v205 = *(_QWORD *)&v290[0];
  if (*(_QWORD *)&v290[0])
  {
    v206 = *((_QWORD *)&v290[0] + 1);
    v207 = *(void **)&v290[0];
    if (*((_QWORD *)&v290[0] + 1) != *(_QWORD *)&v290[0])
    {
      do
      {
        v206 -= 424;
        sub_2236EA79C(v206);
      }
      while (v206 != v205);
      v207 = *(void **)&v290[0];
    }
    *((_QWORD *)&v290[0] + 1) = v205;
    operator delete(v207);
  }
  if (v241)
    operator delete(v241);
  if (&v237 != __p)
    operator delete(__p);
  return kdebug_trace();
}

